%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCCAUGGCCCUCGGGCCCAGCGUGGUGACCCCGGGGGAUGGAGCCGUUCCUCAGGAGGCGGCUGGCCUUCCUGUCCUUCUUCUGGGACAAGAUCUGGCCGGCGGGCGGCGAGCCGGACCAUGGCACCCCCGGGUCCC\
) } def
/len { sequence length } bind def

/coor [
[129.62387085 168.49867249]
[122.31628418 155.39909363]
[115.00868988 142.29949951]
[107.70109558 129.19992065]
[100.39350128 116.10034180]
[86.10728455 111.52825165]
[72.55187988 117.95095062]
[58.99647903 124.37364960]
[45.44107819 130.79635620]
[41.29590607 136.11056519]
[35.88985825 138.16412354]
[31.14102364 137.18843079]
[17.31479073 143.00524902]
[3.48855877 148.82206726]
[-10.33767319 154.63887024]
[-24.16390610 160.45568848]
[-37.99013901 166.27250671]
[-51.81636810 172.08930969]
[-65.64260101 177.90612793]
[-71.67977142 192.26545715]
[-85.78440094 197.96757507]
[-99.43662262 192.12355042]
[-113.26285553 197.94036865]
[-118.99720764 212.66764832]
[-133.49919128 218.95002747]
[-148.16500854 213.06028748]
[-154.29371643 198.49270630]
[-148.24925232 183.88996887]
[-133.61767578 177.91561890]
[-119.07966614 184.11413574]
[-105.25343323 178.29731750]
[-99.88503265 164.45117188]
[-85.94612885 158.35513306]
[-71.45941162 164.07989502]
[-57.63318253 158.26307678]
[-43.80694962 152.44627380]
[-29.98071861 146.62945557]
[-16.15448570 140.81263733]
[-2.32825375 134.99583435]
[11.49797821 129.17901611]
[25.32421112 123.36220551]
[39.01837921 117.24095154]
[52.57378006 110.81825256]
[66.12918091 104.39555359]
[79.68458557 97.97285461]
[88.53551483 88.50221252]
[98.83763123 87.99887085]
[104.65444183 74.17263794]
[110.47126007 60.34640884]
[116.28807068 46.52017593]
[122.10488129 32.69394302]
[127.92169189 18.86771202]
[133.73851013 5.04148006]
[120.70289612 12.46259308]
[105.71696472 13.11205101]
[92.08820343 6.84651375]
[82.82458496 -4.95116949]
[79.97064972 -19.67716789]
[84.15628052 -34.08135223]
[94.45767975 -44.98461533]
[108.60125732 -49.98053360]
[123.46543121 -47.96647263]
[135.76956177 -39.38694763]
[142.79804993 -26.13551903]
[142.99963379 -11.13673973]
[151.97671509 -23.15389252]
[160.95381165 -35.17104340]
[169.93089294 -47.18819809]
[178.90797424 -59.20534897]
[187.88505554 -71.22250366]
[196.86213684 -83.23965454]
[198.24649048 -103.29820251]
[216.21504211 -110.31472015]
[224.65177917 -122.71719360]
[226.01623535 -138.47944641]
[239.57211304 -144.65092468]
[248.00886536 -157.05340576]
[256.44558716 -169.45588684]
[264.88232422 -181.85835266]
[273.31909180 -194.26083374]
[281.75582886 -206.66331482]
[278.55541992 -222.14016724]
[287.30587769 -235.30090332]
[302.81570435 -238.33749390]
[315.88317871 -229.44837952]
[318.75561523 -213.90731812]
[309.72885132 -200.93453979]
[294.15829468 -198.22657776]
[285.72155762 -185.82409668]
[277.28482056 -173.42161560]
[268.84808350 -161.01913452]
[260.41134644 -148.61666870]
[251.97459412 -136.21418762]
[251.21359253 -121.33903503]
[237.05426025 -114.28045654]
[228.61750793 -101.87797546]
[231.43644714 -91.95588684]
[228.22074890 -81.92332458]
[219.81451416 -75.21328735]
[208.87930298 -74.26256561]
[199.90220642 -62.24541473]
[190.92512512 -50.22826385]
[181.94804382 -38.21111298]
[172.97096252 -26.19396019]
[163.99386597 -14.17680740]
[155.01678467 -2.15965462]
[147.56474304 10.85829258]
[141.74792480 24.68452454]
[135.93110657 38.51075745]
[130.11430359 52.33699036]
[124.29748535 66.16322327]
[118.48067474 79.98945618]
[112.66386414 93.81568146]
[113.49308777 108.79274750]
[120.80068207 121.89233398]
[128.10827637 134.99191284]
[135.41586304 148.09149170]
[142.72344971 161.19108582]
[150.31904602 174.12579346]
[158.19892883 186.88932800]
[166.07881165 199.65284729]
[173.95869446 212.41636658]
[181.83856201 225.17988586]
[189.06793213 230.89480591]
[189.74797058 238.31408691]
[197.34356689 251.24879456]
[204.93916321 264.18353271]
[220.04138184 269.59671021]
[225.08868408 284.82510376]
[216.20922852 298.18679810]
[200.21455383 299.43182373]
[189.37442017 287.60513306]
[192.00444031 271.77911377]
[184.40884399 258.84439087]
[176.81324768 245.90968323]
[169.07504272 233.05976868]
[161.19515991 220.29624939]
[153.31529236 207.53273010]
[145.43540955 194.76919556]
[137.55552673 182.00567627]
[133.12260437 180.04287720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[5 114]
[6 45]
[7 44]
[8 43]
[9 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[22 31]
[23 30]
[47 113]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[65 106]
[66 105]
[67 104]
[68 103]
[69 102]
[70 101]
[71 100]
[73 96]
[74 95]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[119 140]
[120 139]
[121 138]
[122 137]
[123 136]
[125 135]
[126 134]
[127 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
