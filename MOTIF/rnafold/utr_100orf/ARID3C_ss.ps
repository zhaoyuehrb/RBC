%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGCCCUGCAGAAGCAGCAGGCAGCUCGGCUGGCCCAGGGGGUGGGGCCAUUGGCCCCUGCAUGCCCGCUGCUGCCACCGCAGCCUCCCCUGCCUG\
) } def
/len { sequence length } bind def

/coor [
[85.18073273 182.22874451]
[91.43474579 168.25927734]
[103.47149658 158.80543518]
[100.68828583 144.06590271]
[97.90506744 129.32638550]
[95.12184906 114.58685303]
[81.42500305 108.47159576]
[68.59292603 116.23934174]
[55.76085281 124.00708771]
[43.17655945 132.17015076]
[30.85222435 140.72062683]
[18.52788925 149.27111816]
[6.20355511 157.82159424]
[-0.29796231 172.87690735]
[-16.61608505 174.50506592]
[-25.96412849 161.03115845]
[-18.72562599 146.31599426]
[-2.34692883 145.49726868]
[9.97740555 136.94677734]
[22.30174065 128.39630127]
[34.62607574 119.84581757]
[36.35733795 115.22050476]
[41.11361694 111.71514130]
[47.99310684 111.17501068]
[60.82518005 103.40726471]
[73.65725708 95.63952637]
[87.17452240 86.94361877]
[98.55738068 90.20291138]
[105.30480957 76.80618286]
[112.05223083 63.40946198]
[118.59049988 49.90942001]
[124.91802979 36.30933380]
[131.24554443 22.70924377]
[132.06268311 13.42889118]
[137.98718262 8.78930283]
[144.73460388 -4.60742188]
[151.48204041 -18.00414658]
[158.22946167 -31.40087318]
[156.68498230 -49.66727829]
[171.55300903 -58.84570694]
[177.88053894 -72.44579315]
[184.20805359 -86.04588318]
[183.01425171 -101.82198334]
[195.39826965 -110.09758759]
[201.72578430 -123.69767761]
[208.05331421 -137.29777527]
[214.38084412 -150.89785767]
[219.63273621 -164.94839478]
[223.77726746 -179.36445618]
[227.92178345 -193.78051758]
[232.06631470 -208.19657898]
[236.21084595 -222.61265564]
[240.35536194 -237.02871704]
[238.92079163 -253.92185974]
[254.75660706 -259.97686768]
[264.95877075 -246.43611145]
[254.77142334 -232.88418579]
[250.62690735 -218.46812439]
[246.48237610 -204.05206299]
[242.33784485 -189.63600159]
[238.19332886 -175.21992493]
[234.04879761 -160.80386353]
[235.36476135 -158.67208862]
[235.95956421 -155.91064453]
[235.60301208 -152.77384949]
[234.15414429 -149.58966064]
[231.58277893 -146.72921753]
[227.98092651 -144.57032776]
[221.65339661 -130.97024536]
[215.32588196 -117.37015533]
[208.99835205 -103.77006531]
[210.64474487 -88.96672821]
[197.80815125 -79.71836090]
[191.48062134 -66.11827087]
[185.15309143 -52.51818085]
[189.00967407 -40.93609238]
[183.70564270 -29.49529839]
[171.62619019 -24.65344620]
[164.87875366 -11.25672150]
[158.13133240 2.14000368]
[151.38391113 15.53672886]
[144.84564209 29.03676796]
[138.51811218 42.63685608]
[132.19059753 56.23694611]
[132.22364807 63.76186371]
[125.44895935 70.15688324]
[118.70153046 83.55361176]
[111.95410919 96.95034027]
[109.86138153 111.80363464]
[112.64459229 126.54316711]
[115.42781067 141.28269958]
[118.21102905 156.02221680]
[132.86633301 160.43589783]
[143.78370667 171.16293335]
[148.45442200 185.73837280]
[145.80516052 200.81285095]
[136.44471741 212.92237854]
[122.52405548 219.28427124]
[107.24203491 218.43663025]
[94.11035919 210.57420349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 26]
[8 25]
[9 24]
[10 21]
[11 20]
[12 19]
[13 18]
[28 88]
[29 87]
[30 86]
[31 84]
[32 83]
[33 82]
[35 81]
[36 80]
[37 79]
[38 78]
[40 75]
[41 74]
[42 73]
[44 71]
[45 70]
[46 69]
[47 68]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
