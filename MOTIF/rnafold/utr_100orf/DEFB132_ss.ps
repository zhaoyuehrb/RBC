%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAUUAAACCACCACCAGCUCCCCAAGCCACCCCUUCAGCCAUGAAGUUCCUGCUCCUGGUCUUGGCAGCCCUCGGAUUCCUGACCCAGGUGAUCCCAGCCAGUGCAGGUGGGUCAAAAUGUGUGAGUAACACCCCAGGAU\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 170.16825867]
[92.50000000 154.32913208]
[92.50000000 139.32913208]
[92.50000000 124.32912445]
[86.08815765 120.43832397]
[78.89677429 133.60206604]
[71.70539856 146.76580811]
[64.51401520 159.92953491]
[57.32262802 173.09327698]
[50.13124466 186.25701904]
[43.92467880 199.91273499]
[28.92705154 200.17950439]
[22.23877716 186.75314331]
[31.48564529 174.94259644]
[39.84141159 162.48541260]
[48.19718170 150.02824402]
[56.55294800 137.57107544]
[64.90871429 125.11389923]
[73.26448059 112.65673065]
[66.85264587 108.76593018]
[53.54748154 115.69216156]
[40.24231720 122.61838531]
[34.06617355 137.42497253]
[18.60023689 141.68928528]
[5.70865297 132.14010620]
[5.28074074 116.10276794]
[17.64475822 105.87972260]
[33.31608963 109.31322479]
[46.62125397 102.38699341]
[59.92641449 95.46076965]
[59.19128799 87.99687958]
[45.44839096 94.00794220]
[35.48488617 82.79506683]
[43.07022858 69.85433960]
[57.72102737 73.06910706]
[56.98590088 65.60522461]
[42.58515167 61.40779114]
[28.18440437 57.21035385]
[13.78365707 53.01292038]
[-0.61709082 48.81548309]
[-16.40899086 53.23678589]
[-27.94312859 41.57935333]
[-23.35417175 25.83535576]
[-7.36284542 22.20086479]
[3.58034444 34.41473770]
[17.98109245 38.61217117]
[32.38183975 42.80960464]
[46.78258896 47.00704193]
[61.18333435 51.20447540]
[92.11791992 52.42847443]
[111.48349762 67.90400696]
[115.01142120 86.84960938]
[121.05261993 73.11994171]
[127.09382629 59.39026642]
[133.13502502 45.66059494]
[139.17622375 31.93092155]
[135.23200989 19.59869957]
[140.60453796 8.26149845]
[151.89970398 3.80120158]
[158.23896790 -9.79341507]
[164.57824707 -23.38803291]
[170.91752625 -36.98265076]
[177.25679016 -50.57726669]
[167.25880432 -59.68126678]
[162.27618408 -73.70803833]
[164.64318848 -89.78875732]
[175.04206848 -104.02082825]
[174.06101990 -118.98871613]
[164.50520325 -132.31607056]
[171.51469421 -147.14169312]
[187.87873840 -148.21424866]
[196.76339722 -134.43038940]
[189.02890015 -119.96976471]
[190.00994873 -105.00187683]
[197.16282654 -102.74658203]
[211.46858215 -98.23600006]
[218.62145996 -95.98070526]
[228.01031494 -107.67897034]
[237.39915466 -119.37723541]
[246.78800964 -131.07550049]
[256.17687988 -142.77377319]
[265.43756104 -154.57376099]
[274.56896973 -166.47406006]
[283.70040894 -178.37435913]
[292.83181763 -190.27465820]
[297.67718506 -206.52146912]
[314.63040161 -206.36302185]
[319.17126465 -190.02848816]
[304.73211670 -181.14323425]
[295.60070801 -169.24293518]
[286.46926880 -157.34263611]
[277.33786011 -145.44233704]
[275.74932861 -138.16587830]
[267.87512207 -133.38491821]
[258.48626709 -121.68665314]
[249.09742737 -109.98838806]
[239.70857239 -98.29011536]
[230.31971741 -86.59185028]
[228.23205566 -60.67020798]
[211.35186768 -44.68050766]
[190.85140991 -44.23799133]
[184.51214600 -30.64337540]
[178.17286682 -17.04875755]
[171.83358765 -3.45414138]
[165.49432373 10.14047527]
[167.99432373 27.47783279]
[152.90589905 37.97212219]
[146.86470032 51.70179367]
[140.82350159 65.43146515]
[134.78228760 79.16114044]
[128.74108887 92.89080811]
[131.66744995 107.60259247]
[142.50291443 117.97528839]
[153.33836365 128.34797668]
[164.17382812 138.72067261]
[164.32521057 123.72144318]
[173.94248962 112.21022797]
[188.67567444 109.39363098]
[201.86085510 116.54563141]
[207.53427124 130.43132019]
[203.12980652 144.77009583]
[190.63961792 153.07643127]
[175.71405029 151.59376526]
[184.84547424 163.49406433]
[193.97688293 175.39436340]
[203.10830688 187.29466248]
[218.76242065 190.80584717]
[225.64758301 205.29632568]
[218.48208618 219.65025330]
[202.76269531 222.85652161]
[190.54797363 212.45555115]
[191.20800781 196.42608643]
[182.07658386 184.52578735]
[172.94517517 172.62548828]
[163.81375122 160.72517395]
[153.80113220 149.55613708]
[142.96566772 139.18344116]
[132.13021851 128.81074524]
[121.29475403 118.43804932]
[107.50000000 124.32912445]
[107.50000000 139.32913208]
[107.50000000 154.32913208]
[113.54634094 170.16825867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 142]
[3 141]
[4 140]
[20 30]
[21 29]
[22 28]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[52 111]
[53 110]
[54 109]
[55 108]
[56 107]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[67 74]
[68 73]
[77 98]
[78 97]
[79 96]
[80 95]
[81 94]
[82 92]
[83 91]
[84 90]
[85 89]
[112 139]
[113 138]
[114 137]
[115 136]
[123 135]
[124 134]
[125 133]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
