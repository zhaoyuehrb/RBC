%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:19:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAAUAGCACAGAAGUGACAGAGUUUAUCCUCUUGGGAUUAACAGAUGACCCCAAUCUUCAGAUACCCCUCCUCCUGGCAUUUUUAUUCAUCUACC\
) } def
/len { sequence length } bind def

/coor [
[119.81652069 399.04367065]
[128.04299927 384.85714722]
[127.57649994 369.86441040]
[127.11000824 354.87167358]
[126.64350891 339.87893677]
[125.94390106 324.89526367]
[125.01135254 309.92425537]
[124.07881165 294.95327759]
[123.14627075 279.98229980]
[122.21372223 265.01132202]
[120.12099457 250.15802002]
[116.88072205 235.51217651]
[112.28133392 229.55641174]
[113.77493286 220.36065674]
[110.99171448 205.62113953]
[108.20849609 190.88160706]
[98.24404144 179.81097412]
[103.28639221 164.81480408]
[100.50317383 150.07527161]
[96.09123230 143.97935486]
[97.87009430 134.83450317]
[95.54662323 120.01554871]
[84.31506348 113.20748138]
[79.51848602 100.98085022]
[65.31140900 96.16846466]
[51.10433578 91.35607910]
[36.89726257 86.54369354]
[22.84013939 93.76676941]
[7.81852150 88.85488892]
[0.74446970 74.72218323]
[5.81489277 59.75333786]
[20.02159882 52.82909775]
[34.93600082 58.05749893]
[41.70964813 72.33661652]
[55.91672134 77.14900208]
[70.12379456 81.96138763]
[84.33087158 86.77378082]
[90.77627563 81.68668365]
[98.70074463 79.53621674]
[103.29160309 65.25601959]
[107.88246155 50.97581863]
[112.25067902 36.62595367]
[116.39521027 22.20989037]
[120.53973389 7.79382610]
[111.16800690 -4.43225241]
[110.79673004 -19.65445709]
[119.35874939 -32.03006744]
[133.39820862 -36.93228912]
[137.54272461 -51.34835434]
[141.68725586 -65.76441956]
[145.83178711 -80.18048096]
[136.94683838 -93.04872894]
[138.46357727 -108.61257935]
[149.66586304 -119.52326202]
[165.26429749 -120.62908936]
[177.89378357 -111.40791321]
[181.59106445 -96.21370697]
[174.61039734 -82.22069550]
[160.24784851 -76.03595734]
[156.10331726 -61.61989212]
[151.95880127 -47.20382690]
[147.81427002 -32.78776169]
[157.10658264 -21.17781067]
[157.78872681 -6.14455891]
[149.38975525 6.55625486]
[134.95579529 11.93835258]
[130.81126404 26.35441589]
[126.66674805 40.77048111]
[127.86499786 48.19945526]
[122.16265869 55.56667709]
[117.57180023 69.84687805]
[112.98094177 84.12707520]
[120.44302368 101.59290314]
[110.36557770 117.69207001]
[112.68904877 132.51103210]
[115.24270630 147.29205322]
[118.02591705 162.03158569]
[128.18945312 174.15647888]
[122.94802856 188.09838867]
[125.73124695 202.83792114]
[128.51446533 217.57745361]
[131.52656555 232.27191162]
[134.76683044 246.91775513]
[137.81727600 249.80372620]
[139.71002197 253.15209961]
[140.43685913 256.57409668]
[140.10737610 259.71383667]
[138.93009949 262.28158569]
[137.18470764 264.07876587]
[138.11724854 279.04974365]
[139.04978943 294.02075195]
[139.98234558 308.99172974]
[140.91488647 323.96270752]
[144.62719727 332.50738525]
[141.63624573 339.41244507]
[142.10275269 354.40518188]
[142.56924438 369.39791870]
[143.03575134 384.39065552]
[152.12828064 398.03829956]
[144.61384583 412.61447144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 95]
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 83]
[12 82]
[14 81]
[15 80]
[16 79]
[18 77]
[19 76]
[21 75]
[22 74]
[24 37]
[25 36]
[26 35]
[27 34]
[39 72]
[40 71]
[41 70]
[42 68]
[43 67]
[44 66]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
