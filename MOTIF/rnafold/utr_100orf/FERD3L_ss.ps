%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGCAACCUCGCCCCUCCCUGCGGAAAACCGAUGAGAGGCAGGGCCAAGCCGAAGCGAUGGCGGCCUAUCCGGAGAGCUGCGUGGACACUACGGUGCUGGACUUCGUCGCAGACCUGUCCCUGGCCUCCCCGAGACGCCCUCUCCUCUGCGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[296.40325928 228.07536316]
[297.25726318 213.94061279]
[283.89215088 207.13075256]
[270.52706909 200.32089233]
[257.16195679 193.51104736]
[243.79685974 186.70118713]
[230.43176270 179.89132690]
[223.00572205 179.65547180]
[216.87307739 172.81431580]
[203.64425659 165.74336243]
[193.12065125 175.06724548]
[180.01554871 180.24211121]
[165.90101624 180.62522888]
[152.47773743 176.14993286]
[141.37011719 167.33627319]
[133.92968750 155.23051453]
[131.07067871 141.28109741]
[133.15773010 127.16524506]
[120.07028198 119.83592987]
[106.98284149 112.50660706]
[93.00101471 112.49758148]
[85.68783569 100.58083344]
[72.60039520 93.25151062]
[59.51295471 85.92219543]
[46.42551422 78.59287262]
[33.33807755 71.26355743]
[20.14096451 78.99553680]
[4.94592857 79.08312988]
[-8.16564178 71.60295105]
[-15.72208023 58.65087509]
[-15.78048897 43.75583649]
[-28.86792946 36.42652130]
[-41.95536804 29.09720039]
[-48.64411926 28.79834175]
[-53.43088913 25.61532021]
[-55.40454483 21.21450233]
[-68.19414520 13.37702465]
[-84.00345612 12.76358700]
[-90.81251526 -0.48352715]
[-103.60211182 -8.32100582]
[-116.39171600 -16.15848351]
[-129.18132019 -23.99596214]
[-139.65736389 -20.83597374]
[-149.92382812 -23.92814445]
[-156.63052368 -32.00947952]
[-157.72996521 -42.23210144]
[-170.20201111 -50.56565475]
[-182.67405701 -58.89920807]
[-195.14610291 -67.23276520]
[-213.52078247 -67.98718262]
[-220.70721436 -83.97301483]
[-233.34048462 -92.06008911]
[-249.73828125 -92.27022552]
[-257.51806641 -106.70653534]
[-248.67665100 -120.51818085]
[-232.30934143 -119.49692535]
[-225.25340271 -104.69335175]
[-212.62014771 -96.60627747]
[-200.70780945 -98.88869476]
[-190.10505676 -92.21070099]
[-186.81254578 -79.70480347]
[-174.34049988 -71.37125397]
[-161.86845398 -63.03770065]
[-149.39642334 -54.70414734]
[-130.09153748 -54.90924835]
[-121.34384155 -36.78556442]
[-108.55423737 -28.94808578]
[-95.76463318 -21.11060715]
[-82.97503662 -13.27312946]
[-68.08052063 -13.22028160]
[-60.35667038 0.58742195]
[-47.56706619 8.42490005]
[-34.62605286 16.00976181]
[-21.53861046 23.33907890]
[-8.45117092 30.66839790]
[4.27945614 22.93556404]
[19.27114296 22.61104774]
[32.49982071 29.88211441]
[40.36452103 42.88378143]
[40.66739273 58.17611694]
[53.75483322 65.50543213]
[66.84227753 72.83475494]
[79.92971802 80.16407013]
[93.01715851 87.49339294]
[106.99898529 87.50241852]
[114.31216431 99.41916656]
[127.39960480 106.74848938]
[140.48704529 114.07780457]
[153.02668762 104.05352783]
[168.41313171 99.60916138]
[184.29003906 101.39464569]
[198.23771667 109.10820770]
[208.14183044 121.54687500]
[212.51396179 136.79399109]
[210.71520996 152.51454163]
[223.94403076 159.58549500]
[237.24162292 166.52622986]
[250.60671997 173.33609009]
[263.97183228 180.14595032]
[277.33691406 186.95579529]
[290.70202637 193.76565552]
[304.06710815 200.57551575]
[316.90936279 190.62478638]
[332.74612427 187.27030945]
[348.40713501 191.13189697]
[360.77972412 201.38995361]
[367.42755127 215.95883179]
[367.07015991 231.91065979]
[380.56637573 238.45678711]
[394.06259155 245.00292969]
[407.55883789 251.54907227]
[421.05505371 258.09521484]
[434.55126953 264.64135742]
[448.04748535 271.18750000]
[461.54373169 277.73361206]
[470.44674683 268.49890137]
[481.57983398 262.16342163]
[494.03146362 259.23419189]
[506.78552246 259.93981934]
[518.80419922 264.21273804]
[529.11224365 271.69546509]
[536.87646484 281.77056885]
[541.47265625 293.61154175]
[542.53607178 306.25064087]
[539.99029541 318.65792847]
[553.07775879 325.98724365]
[566.16516113 333.31655884]
[581.98638916 333.30886841]
[589.31024170 346.27844238]
[602.39770508 353.60775757]
[618.16656494 350.65444946]
[630.21264648 361.25030518]
[629.29516602 377.26708984]
[616.11798096 386.41812134]
[600.78948975 381.68347168]
[595.06835938 366.69519043]
[581.98095703 359.36587524]
[567.09582520 359.89782715]
[558.83587646 346.40402222]
[545.74841309 339.07470703]
[532.66094971 331.74536133]
[519.42034912 342.88415527]
[502.89419556 348.12695312]
[485.58404541 346.65216064]
[470.12075806 338.65698242]
[458.86486816 325.33172607]
[453.54605103 308.68267822]
[454.99758911 291.22985840]
[441.50137329 284.68371582]
[428.00512695 278.13757324]
[414.50891113 271.59143066]
[401.01269531 265.04528809]
[387.51644897 258.49914551]
[374.02023315 251.95301819]
[360.52401733 245.40687561]
[350.06713867 254.56495667]
[336.86483765 259.05087280]
[322.90664673 258.15359497]
[310.30944824 251.97604370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 102]
[3 101]
[4 100]
[5 99]
[6 98]
[7 97]
[9 96]
[10 95]
[18 88]
[19 87]
[20 86]
[22 84]
[23 83]
[24 82]
[25 81]
[26 80]
[31 75]
[32 74]
[33 73]
[36 72]
[37 71]
[39 69]
[40 68]
[41 67]
[42 66]
[46 64]
[47 63]
[48 62]
[49 61]
[51 58]
[52 57]
[108 155]
[109 154]
[110 153]
[111 152]
[112 151]
[113 150]
[114 149]
[115 148]
[125 141]
[126 140]
[127 139]
[129 137]
[130 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
