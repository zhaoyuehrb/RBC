%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCUCCGGAAGUGACGUGCUUUCCCGAGCCGGGGCCAUGGCACCUGCAAGGUGUUUCUCAGCAAGAUUGAGGACCGUGUUUCAGGGCGUGGGGCAUUGGGCUUUGUCCACAUGGGCUGGCCUGAAGCCCAGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[101.30055237 130.01232910]
[95.48999023 129.70002747]
[89.84864044 128.27333069]
[84.58818817 125.78580475]
[73.92182159 136.33230591]
[63.25545883 146.87879944]
[52.58909607 157.42530823]
[48.21601868 172.63012695]
[33.72567368 176.07675171]
[23.05931091 186.62326050]
[12.39294720 197.16975403]
[1.72658455 207.71626282]
[-8.93977833 218.26275635]
[-6.46597242 233.58137512]
[-13.49870396 247.41323853]
[-27.33374214 254.43971252]
[-42.65123367 251.95896912]
[-53.56129074 240.92492676]
[-55.86877441 225.58036804]
[-48.68640900 211.82562256]
[-34.77595901 204.94964600]
[-19.48628044 207.59640503]
[-8.81991673 197.04989624]
[1.84644592 186.50340271]
[12.51280880 175.95689392]
[23.17917252 165.41038513]
[26.78932190 150.95991516]
[42.04259491 146.75894165]
[52.70895767 136.21244812]
[63.37532043 125.66593933]
[74.04168701 115.11943817]
[70.28308868 95.60263824]
[79.53284454 78.01074982]
[72.37794495 64.82714081]
[65.22305298 51.64353943]
[58.06814957 38.45993423]
[50.91325378 25.27633095]
[44.01063156 19.16269684]
[43.74946213 11.71294498]
[36.89433289 -1.62898970]
[30.03920364 -14.97092438]
[23.18407631 -28.31285858]
[13.51343536 -39.77927399]
[1.51918364 -48.78693390]
[-10.47506809 -57.79459381]
[-22.46932030 -66.80225372]
[-34.46357346 -75.80991364]
[-50.75970078 -80.48672485]
[-50.77687454 -97.44065857]
[-34.49025726 -102.15048218]
[-25.45591354 -87.80416107]
[-13.46166134 -78.79650116]
[-1.46740949 -69.78884888]
[10.52684212 -60.78118515]
[22.52109528 -51.77352905]
[28.94450760 -55.64518738]
[48.21474838 -67.26016998]
[45.85149002 -82.07283783]
[43.48823166 -96.88549805]
[41.12497330 -111.69816589]
[38.76171494 -126.51082611]
[36.39846039 -141.32348633]
[34.03520203 -156.13615417]
[21.94157219 -166.67767334]
[22.78693199 -182.69844055]
[35.92279434 -191.90869141]
[51.27244949 -187.24310303]
[57.06095505 -172.28073120]
[48.84786606 -158.49942017]
[51.21112442 -143.68675232]
[53.57437897 -128.87408447]
[55.93763733 -114.06142426]
[58.30089569 -99.24875641]
[60.66415405 -84.43609619]
[63.02741241 -69.62342834]
[36.52600861 -35.16798782]
[43.38113785 -21.82605171]
[50.23626709 -8.48411846]
[57.09139633 4.85781574]
[64.09685516 18.12143135]
[71.25175476 31.30503654]
[78.40665436 44.48863983]
[85.56155396 57.67224503]
[92.71645355 70.85585022]
[111.08483124 72.07942963]
[125.29046631 83.78816223]
[129.99865723 101.58499908]
[144.30583191 106.09109497]
[158.61299133 110.59719086]
[168.04838562 104.97575378]
[178.79737854 105.51251221]
[187.27093506 111.78368378]
[190.77513123 121.49172974]
[204.86407471 126.63972473]
[218.95300293 131.78771973]
[233.04194641 136.93571472]
[248.65936279 134.40457153]
[257.95816040 146.03993225]
[272.04711914 151.18792725]
[286.13604736 156.33592224]
[300.22497559 161.48391724]
[314.31390381 166.63191223]
[328.40286255 171.77990723]
[342.49179077 176.92791748]
[354.55120850 172.19975281]
[366.21307373 176.84031677]
[371.38378906 187.83435059]
[385.35278320 193.29943848]
[399.32177734 198.76452637]
[413.29077148 204.22961426]
[429.41406250 201.23437500]
[439.86254883 213.87405396]
[433.88769531 229.14604187]
[417.63595581 231.33979797]
[407.82568359 218.19860840]
[393.85668945 212.73352051]
[379.88769531 207.26843262]
[365.91870117 201.80335999]
[348.77905273 205.40014648]
[337.34378052 191.01684570]
[323.25485229 185.86885071]
[309.16592407 180.72085571]
[295.07699585 175.57286072]
[280.98803711 170.42486572]
[266.89910889 165.27685547]
[252.81018066 160.12886047]
[238.20048523 163.02822876]
[227.89393616 151.02465820]
[213.80500793 145.87666321]
[199.71606445 140.72865295]
[185.62713623 135.58065796]
[166.94535828 140.37353516]
[154.10690308 124.90435791]
[139.79972839 120.39826202]
[125.49256134 115.89216614]
[121.95040894 120.50880432]
[117.58465576 124.35593414]
[112.55910492 127.28919983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[6 29]
[7 28]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[39 79]
[40 78]
[41 77]
[42 76]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[87 135]
[88 134]
[89 133]
[93 131]
[94 130]
[95 129]
[96 128]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
