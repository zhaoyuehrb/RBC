%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUGGCACGCACGAAGCAAACAGCUCGUAAGUCCACUGGCGGCAAAGCCCCGCGCAAGCAGCUGGCCACUAAGGCGGCUCGCAAAAGCGCGCCAGCCACCG\
) } def
/len { sequence length } bind def

/coor [
[73.58536530 169.99755859]
[69.35404968 155.60673523]
[73.93988037 141.32492065]
[85.75843048 132.08740234]
[71.67176056 137.24157715]
[57.58508301 142.39575195]
[50.45570755 148.38226318]
[42.98945618 147.48515320]
[28.75214958 152.20733643]
[21.61484718 166.05279541]
[7.10892439 170.63896179]
[-6.04661798 163.74929810]
[-20.28392410 168.47149658]
[-34.52123260 173.19369507]
[-48.75853729 177.91587830]
[-56.06715775 183.68217468]
[-63.50258255 182.55780029]
[-77.87727356 186.84361267]
[-86.74140167 200.21546936]
[-102.73462677 201.47886658]
[-113.58832550 189.66459656]
[-110.97646332 173.83558655]
[-96.90264130 166.13447571]
[-82.16308594 172.46891785]
[-67.78839111 168.18310547]
[-53.48072815 163.67857361]
[-39.24342346 158.95637512]
[-25.00611687 154.23419189]
[-10.76881027 149.51199341]
[-4.33821917 136.12606812]
[10.03316498 131.13427734]
[24.02995682 137.97003174]
[38.26726532 133.24784851]
[52.43090057 128.30908203]
[66.51757812 123.15489960]
[80.60425568 118.00072479]
[78.11226654 92.67882538]
[96.52961731 80.61041260]
[99.70793915 65.95100403]
[102.88625336 51.29159546]
[98.24872589 36.16532898]
[108.50710297 25.36648178]
[111.68541718 10.70707226]
[114.86373901 -3.95233703]
[108.51780701 -15.30902386]
[111.58384705 -27.53677940]
[121.85906982 -34.11988831]
[125.48296356 -48.67555237]
[129.10685730 -63.23121643]
[122.86621857 -72.40053558]
[122.80238342 -83.27013397]
[128.68995667 -92.14244080]
[138.32081604 -96.13681030]
[142.82534790 -110.44447327]
[138.74285889 -126.32733917]
[150.64436340 -137.60946655]
[166.28659058 -132.68476868]
[169.57817078 -116.61936188]
[157.13301086 -105.93994904]
[152.62847900 -91.63228607]
[158.33470154 -73.26361084]
[143.66252136 -59.60732269]
[140.03863525 -45.05165482]
[136.41473389 -30.49599075]
[142.21104431 -14.00950241]
[129.52314758 -0.77401894]
[126.34482574 13.88539124]
[123.16651154 28.54479980]
[128.03137207 42.62252808]
[117.54566956 54.46991348]
[114.36734772 69.12931824]
[111.18902588 83.78873444]
[123.07604980 99.58966064]
[115.79598999 121.22988129]
[128.70944214 128.86155701]
[141.62290955 136.49324036]
[154.65124512 143.92710876]
[167.79142761 151.16143799]
[180.93162537 158.39575195]
[196.75236511 158.27343750]
[204.16999817 171.18962097]
[217.31019592 178.42395020]
[230.45037842 185.65827942]
[246.82620239 184.78404236]
[255.54322815 198.67453003]
[247.63410950 213.04039001]
[231.23507690 213.10325623]
[223.21606445 198.79846191]
[210.07586670 191.56413269]
[196.93568420 184.32981873]
[182.05482483 184.96957397]
[173.69729614 171.53594971]
[160.55711365 164.30162048]
[147.41691589 157.06730652]
[139.91207886 156.59068298]
[133.99122620 149.40670776]
[121.07776642 141.77502441]
[108.16430664 134.14334106]
[118.10426331 145.37709045]
[120.01463318 160.25494385]
[113.23523712 173.63551331]
[100.10884857 180.89486694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[6 34]
[8 33]
[9 32]
[12 29]
[13 28]
[14 27]
[15 26]
[17 25]
[18 24]
[38 72]
[39 71]
[40 70]
[42 68]
[43 67]
[44 66]
[47 64]
[48 63]
[49 62]
[53 60]
[54 59]
[74 98]
[75 97]
[76 96]
[77 94]
[78 93]
[79 92]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
