%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUUGAGUCUAAGAGUCUCGUGCUGAAAGGCUGUUCCAACGUCAGUAACGCCACCUGUCAGUUCCUGUCUGGUGAAAACAAGACUCUUGGAGGAGUCA\
) } def
/len { sequence length } bind def

/coor [
[82.25789642 352.43490601]
[81.79140472 337.44216919]
[81.32490540 322.44940186]
[70.81931305 317.89053345]
[62.79864120 309.64361572]
[58.49501419 298.91888428]
[58.59100723 287.31137085]
[63.11168289 276.56353760]
[71.41492462 268.30386353]
[82.28234100 263.79998779]
[83.21488190 248.82901001]
[84.14743042 233.85803223]
[85.07997131 218.88703918]
[86.01251984 203.91606140]
[86.94506073 188.94506836]
[87.87760925 173.97409058]
[88.81015015 159.00311279]
[89.74269867 144.03211975]
[90.67523956 129.06114197]
[91.60778809 114.09015656]
[85.70628357 100.29985809]
[74.23229218 90.63820648]
[62.75830460 80.97654724]
[51.13544846 71.49449921]
[39.36653519 62.19435883]
[27.59762192 52.89421463]
[15.82870770 43.59407043]
[4.05979395 34.29393005]
[-14.50160789 37.30701828]
[-29.23346138 26.13348007]
[-31.26609993 8.07211781]
[-43.59043503 -0.47836584]
[-59.56983948 0.94928932]
[-70.54436493 -10.75282097]
[-68.09529114 -26.60783958]
[-54.10134125 -34.45315170]
[-39.29747391 -28.27050781]
[-35.03995132 -12.80270100]
[-22.71561623 -4.25221682]
[-11.99432182 -8.72024727]
[-0.33703354 -7.36277008]
[9.26676273 -0.40883970]
[14.29614258 10.46220589]
[13.35993671 22.52501488]
[25.12885094 31.82515717]
[36.89776611 41.12530136]
[48.66667938 50.42544556]
[60.43559265 59.72558594]
[67.76432037 61.43301392]
[72.41996002 69.50256348]
[83.89395142 79.16421509]
[95.36793518 88.82587433]
[100.30489349 84.76622772]
[107.71105957 83.31852722]
[119.47997284 74.01838684]
[131.24888611 64.71824646]
[143.01779175 55.41810226]
[142.52642822 40.02119446]
[151.09530640 27.43438721]
[165.26507568 22.36669159]
[179.53108215 26.56422806]
[191.29998779 17.26408577]
[203.06890869 7.96394205]
[211.74740601 -6.60039425]
[228.14501953 -2.29285932]
[228.54513550 14.65636635]
[212.36904907 19.73285675]
[200.60014343 29.03299904]
[188.83122253 38.33314133]
[189.61709595 53.18307114]
[181.41096497 65.79747772]
[167.18418884 71.22447205]
[152.31794739 67.18701172]
[140.54902649 76.48715973]
[128.78012085 85.78730011]
[117.01119995 95.08744812]
[131.83815002 92.81552887]
[144.36097717 101.07257843]
[148.11412048 115.59545898]
[141.15982056 128.88597107]
[127.08859253 134.08219910]
[113.16545868 128.50131226]
[106.57877350 115.02269745]
[105.64622498 129.99368286]
[104.71368408 144.96467590]
[103.78113556 159.93565369]
[102.84859467 174.90663147]
[101.91604614 189.87762451]
[100.98350525 204.84860229]
[100.05095673 219.81959534]
[99.11841583 234.79057312]
[98.18586731 249.76155090]
[97.25332642 264.73254395]
[112.44139862 276.05841064]
[117.89657593 294.04898071]
[111.65457153 311.62637329]
[96.31764984 321.98291016]
[96.78414154 336.97564697]
[97.25064087 351.96841431]
[100.03933716 371.14843750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[10 93]
[11 92]
[12 91]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 52]
[22 51]
[23 50]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[31 39]
[32 38]
[54 76]
[55 75]
[56 74]
[57 73]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
