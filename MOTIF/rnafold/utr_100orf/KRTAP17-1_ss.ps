%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUCCGGCUGCGUUACCGACCUGCGAGCUGACGGGCCCGGACCAUGGGGUGCUGCCCGGGGGACUGCUUCACCUGCUGCACCCAGGAGCAAAACUGCUGUGAAGAGUGCUGCUGUCAGCCGGGCUGCUGUGGCUGCUGCGGCU\
) } def
/len { sequence length } bind def

/coor [
[48.93886566 255.82319641]
[38.39977646 266.49688721]
[23.71210098 263.45184326]
[18.28495598 249.46807861]
[27.07295418 237.31208801]
[32.06384277 223.16673279]
[24.71999741 221.64424133]
[13.55843830 231.66520691]
[2.39687920 241.68615723]
[-8.76467991 251.70712280]
[-19.92623901 261.72808838]
[-24.26288033 269.85165405]
[-31.43743706 271.84140015]
[-42.81202316 281.61987305]
[-54.18661118 291.39837646]
[-51.94903564 306.66259766]
[-58.33994293 320.70397949]
[-71.32001495 329.04190063]
[-86.74735260 329.01583862]
[-99.69915771 320.63403320]
[-106.04254913 306.57116699]
[-103.75337982 291.31457520]
[-93.56211090 279.73263550]
[-78.72074127 275.52105713]
[-63.96509552 280.02377319]
[-52.59050751 270.24530029]
[-41.21592331 260.46682739]
[-29.94719696 250.56651306]
[-18.78563690 240.54556274]
[-7.62407875 230.52459717]
[3.53748035 220.50364685]
[14.69903946 210.48268127]
[24.28323746 201.53775024]
[35.09157181 197.28260803]
[45.25614548 197.45089722]
[53.23601151 201.11862183]
[58.60148621 187.11106873]
[63.96696091 173.10350037]
[69.33243561 159.09594727]
[74.69790649 145.08837891]
[80.06337738 131.08082581]
[85.42885590 117.07327271]
[75.11410522 93.67174530]
[94.01680756 71.71593475]
[89.56611633 57.39143372]
[79.58279419 52.84902573]
[73.89925385 43.72710800]
[74.20880127 33.20450211]
[80.16419983 24.79255676]
[76.33390045 10.28983974]
[72.50360107 -4.21287775]
[68.67330170 -18.71559525]
[64.84300232 -33.21831131]
[61.01270676 -47.72103119]
[50.00799561 -59.08795166]
[54.23883438 -73.36903381]
[50.40853500 -87.87174988]
[45.95096588 -92.91238403]
[44.91983414 -98.59410858]
[46.73980331 -103.08100891]
[43.53699112 -117.73508453]
[40.33417892 -132.38916016]
[36.97389221 -147.00793457]
[33.45652008 -161.58970642]
[29.93914795 -176.17147827]
[18.25199318 -187.67549133]
[22.63253212 -203.47875977]
[38.57444382 -207.32421875]
[49.67805099 -195.25599670]
[44.52092361 -179.68884277]
[48.03829193 -165.10707092]
[51.55566406 -150.52529907]
[56.21548462 -144.71846008]
[54.98825455 -135.59197998]
[58.19106674 -120.93789673]
[61.39388275 -106.28382111]
[64.91125488 -91.70204926]
[68.74155426 -77.19933319]
[79.47229767 -66.86974335]
[75.51541901 -51.55133057]
[79.34571838 -37.04861069]
[83.17601776 -22.54589462]
[87.00631714 -8.04317760]
[90.83662415 6.45953989]
[94.66692352 20.96225739]
[109.27625275 33.56460953]
[103.89061737 52.94074249]
[108.34130859 67.26524353]
[121.69171906 74.10384369]
[135.91714478 69.34597778]
[150.14256287 64.58810425]
[164.36799622 59.83023453]
[171.47056580 45.96693039]
[185.96495056 41.34442139]
[199.13771057 48.20106888]
[213.36314392 43.44320297]
[227.58856201 38.68533325]
[234.79725647 32.95528030]
[242.17152405 33.98170853]
[256.49603271 29.53101540]
[267.22216797 17.12609673]
[283.27508545 20.47806740]
[288.14093018 36.13870621]
[276.81411743 47.99769211]
[260.94671631 43.85551453]
[246.62222290 48.30620956]
[232.34643555 52.91075516]
[218.12100220 57.66862488]
[203.89558411 62.42649460]
[197.49856567 75.82849884]
[183.13975525 80.85630798]
[169.12586975 74.05565643]
[154.90043640 78.81352997]
[140.67501831 83.57139587]
[126.44959259 88.32926941]
[127.74291992 97.76727295]
[125.89051056 106.74725342]
[121.33425140 114.29000854]
[114.79715729 119.65274811]
[107.17889404 122.40097046]
[99.43640900 122.43874359]
[94.07093811 136.44630432]
[88.70546722 150.45385742]
[83.33998871 164.46142578]
[77.97451782 178.46897888]
[72.60904694 192.47653198]
[67.24356842 206.48410034]
[67.72763824 221.47628784]
[73.98554230 235.10855103]
[80.24344635 248.74081421]
[86.50135040 262.37307739]
[92.75925446 276.00534058]
[99.01715851 289.63760376]
[105.27506256 303.26986694]
[117.37806702 315.14224243]
[109.32009888 330.05886841]
[92.75576019 326.44515991]
[91.64279938 309.52777100]
[85.38489532 295.89550781]
[79.12699127 282.26324463]
[72.86908722 268.63098145]
[66.61118317 254.99871826]
[60.35327530 241.36645508]
[54.09537125 227.73419189]
[46.75152969 226.21170044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[13 27]
[14 26]
[15 25]
[36 127]
[37 126]
[38 125]
[39 124]
[40 123]
[41 122]
[42 121]
[44 88]
[45 87]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[56 78]
[57 77]
[60 76]
[61 75]
[62 74]
[63 72]
[64 71]
[65 70]
[89 115]
[90 114]
[91 113]
[92 112]
[95 109]
[96 108]
[97 107]
[99 106]
[100 105]
[128 144]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
