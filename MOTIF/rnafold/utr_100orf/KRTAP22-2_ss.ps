%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAACUCCAUCUUCUGACACCAUGUGCUACUACCACAACUAUUAUGGUAGCCUGGACUAUGGUUGCAGCUAUGGCUCUGAAUAUGGUAACUCUGGAUAUGCCUGCAACUUUCCGUGCUCCU\
) } def
/len { sequence length } bind def

/coor [
[151.85073853 425.05972290]
[147.13749695 418.85592651]
[143.76058960 411.82385254]
[141.86087036 404.24774170]
[141.51939392 396.43475342]
[142.75398254 388.70248413]
[145.51829529 381.36599731]
[149.70358276 374.72506714]
[155.14294434 369.05181885]
[161.61801147 364.57974243]
[157.12756348 350.26763916]
[152.63711548 335.95556641]
[141.44458008 326.12823486]
[144.69577026 310.64468384]
[140.20532227 296.33258057]
[135.71487427 282.02050781]
[124.52233887 272.19317627]
[127.77354431 256.70962524]
[123.28309631 242.39753723]
[108.10424042 230.52767944]
[112.48171234 210.92790222]
[107.27213287 196.86163330]
[102.06255341 182.79534912]
[96.85297394 168.72906494]
[91.64339447 154.66278076]
[86.43381500 140.59649658]
[81.22423553 126.53022003]
[71.31026459 115.27352905]
[58.01486206 108.32857513]
[44.71945953 101.38362885]
[31.42406082 94.43867493]
[18.12866020 87.49372864]
[4.83325958 80.54877472]
[-8.46214104 73.60382843]
[-20.66806793 82.76778412]
[-35.64298248 85.71984863]
[-50.41360474 81.87388611]
[-62.04721832 71.99350739]
[-68.23396301 58.04048157]
[-67.74544525 42.78518295]
[-60.67867661 29.25656700]
[-48.43675613 20.14074707]
[-33.45033264 17.24767685]
[-18.69496918 21.15177917]
[-7.10035467 31.07788849]
[-0.96860766 45.05517197]
[-1.51719129 60.30842590]
[11.77820873 67.25337982]
[25.07361031 74.19832611]
[38.36901093 81.14327240]
[51.66440964 88.08822632]
[64.95980835 95.03317261]
[78.25521088 101.97812653]
[81.32707214 91.70706177]
[88.57253265 84.78478241]
[97.61891937 82.53587341]
[102.10935974 68.22378540]
[106.59980774 53.91169739]
[110.90859985 39.54387665]
[115.03504181 25.12262535]
[119.16148376 10.70137405]
[123.28792572 -3.71987700]
[127.41436768 -18.14112854]
[131.54080200 -32.56237793]
[135.66725159 -46.98363113]
[131.16821289 -62.75355911]
[142.76867676 -74.34498596]
[158.53509521 -69.83364105]
[162.24830627 -53.86041260]
[150.08850098 -42.85718918]
[145.96206665 -28.43593788]
[141.83561707 -14.01468658]
[137.70918274 0.40656480]
[133.58273315 14.82781601]
[129.45629883 29.24906731]
[125.32984924 43.67031860]
[126.52834320 51.05063629]
[120.91189575 58.40214539]
[116.42145538 72.71423340]
[111.93100739 87.02632141]
[119.00975800 100.84784698]
[112.43660736 116.21054077]
[95.29051971 121.32064056]
[100.50009918 135.38691711]
[105.70967865 149.45320129]
[110.91925812 163.51948547]
[116.12883759 177.58576965]
[121.33841705 191.65205383]
[126.54798889 205.71832275]
[136.80694580 209.74417114]
[142.97660828 218.60794067]
[143.18051147 229.18453979]
[137.59518433 237.90708923]
[142.08563232 252.21917725]
[153.59934998 263.07019043]
[150.02696228 277.53005981]
[154.51741028 291.84213257]
[159.00785828 306.15423584]
[170.52159119 317.00524902]
[166.94920349 331.46511841]
[171.43965149 345.77719116]
[175.93009949 360.08929443]
[199.13061523 364.92861938]
[215.15754700 382.23733521]
[218.17263794 405.52166748]
[207.18698120 426.14651489]
[215.44137573 438.67111206]
[223.69575500 451.19567871]
[239.20225525 451.76852417]
[251.38977051 461.37292480]
[255.57192993 476.31576538]
[250.14062500 490.85125732]
[237.18431091 499.39019775]
[221.68493652 498.64916992]
[209.60234070 488.91314697]
[205.58251953 473.92578125]
[211.17118835 459.45007324]
[202.91679382 446.92550659]
[194.66239929 434.40090942]
[187.25492859 436.61911011]
[179.54330444 437.30688477]
[171.84077454 436.43231201]
[164.46105957 434.02706909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 102]
[11 101]
[12 100]
[14 98]
[15 97]
[16 96]
[18 94]
[19 93]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[56 80]
[57 79]
[58 78]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
