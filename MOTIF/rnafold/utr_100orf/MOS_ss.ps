%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:19:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCUCGCCCCUGGCCCUACGCCCCUACCUCCGGAGCGAGUUUUCCCCAUCGGUGGACGCGCGGCCCUGCAGCAGUCCCUCAGAGCUACCUGCGAAGC\
) } def
/len { sequence length } bind def

/coor [
[122.70516968 247.31843567]
[108.33831024 251.63044739]
[93.33831787 251.62199402]
[78.97632599 247.29379272]
[66.46943665 239.01261902]
[56.87752151 227.48027039]
[51.01343155 213.67402649]
[49.37411118 198.76387024]
[52.09848022 184.01335144]
[58.95566940 170.67247009]
[69.36457825 159.87179565]
[82.44310760 152.52659607]
[97.08295441 149.25933838]
[112.04347229 150.34689331]
[126.06027985 155.69902039]
[118.09391022 142.98930359]
[110.12754822 130.27958679]
[102.16117859 117.56986237]
[92.14409637 115.86365509]
[84.71546936 108.93049622]
[82.32296753 99.05481720]
[85.75491333 89.49056244]
[78.59411621 76.31016541]
[71.43331909 63.12976074]
[56.54554367 58.54807281]
[49.47123337 45.07926178]
[53.93092346 30.91427994]
[46.77012634 17.73387909]
[39.60932922 4.55347729]
[32.44852829 -8.62692356]
[25.28773117 -21.80732536]
[7.38817024 -23.53459740]
[-5.86817598 -35.45511246]
[-9.41757202 -52.76785278]
[-2.05156207 -68.66183472]
[-10.01792908 -81.37155151]
[-17.98429680 -94.08127594]
[-25.95066261 -106.79099274]
[-41.40889359 -110.08016205]
[-49.94352341 -123.38188171]
[-46.49110413 -138.80447388]
[-33.09989929 -147.19799805]
[-17.71466827 -143.58270264]
[-9.46320057 -130.10351562]
[-13.24094296 -114.75736237]
[-5.27457571 -102.04764557]
[2.69179153 -89.33792114]
[10.65815830 -76.62820435]
[22.95836830 -77.59237671]
[34.54432297 -73.14337921]
[43.13821030 -64.08872223]
[47.02166367 -52.14783859]
[45.37911224 -39.62574005]
[38.46813202 -28.96812248]
[45.62892914 -15.78772163]
[52.78973007 -2.60732079]
[59.95052719 10.57308006]
[67.11132812 23.75348091]
[81.42205811 27.72065544]
[88.87188721 40.98544693]
[84.61371613 55.96896362]
[91.77451324 69.14936829]
[98.93531799 82.32976532]
[115.28453064 91.06950378]
[114.87089539 109.60349274]
[122.83726501 122.31321716]
[130.80363464 135.02293396]
[138.77000427 147.73265076]
[145.80047607 151.12399292]
[149.35049438 157.21971130]
[162.85052490 163.75798035]
[176.35057068 170.29624939]
[189.85060120 176.83451843]
[203.35064697 183.37278748]
[221.59082031 181.54441833]
[230.99935913 196.26789856]
[244.69621277 202.38314819]
[258.39306641 208.49841309]
[271.77157593 200.63740540]
[287.21228027 202.17491150]
[298.77795410 212.51972961]
[302.02130127 227.69404602]
[295.69525146 241.86305237]
[282.23226929 249.57846069]
[266.80914307 247.87353516]
[255.35638428 237.40386963]
[252.27780151 222.19525146]
[238.58096313 216.08000183]
[224.88410950 209.96475220]
[213.36340332 214.00099182]
[201.84150696 208.87551880]
[196.81237793 196.87281799]
[183.31234741 190.33454895]
[169.81230164 183.79629517]
[156.31225586 177.25802612]
[142.81222534 170.71975708]
[149.65435791 184.06835938]
[152.36209106 198.82194519]
[150.70596313 213.73022461]
[144.82630920 227.52986145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 68]
[16 67]
[17 66]
[18 65]
[22 63]
[23 62]
[24 61]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[35 48]
[36 47]
[37 46]
[38 45]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[76 89]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
