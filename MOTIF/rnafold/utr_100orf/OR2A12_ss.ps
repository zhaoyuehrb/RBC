%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAGCAAUCAGACCUGGAUCACAGAAGUCAUCCUGUUGGGAUUCCAGGUGGACCCAGCUCUGGAGUUGUUCCUCUUUGGGUUUUUCUUGCUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[92.40818787 265.34133911]
[79.52185822 254.32412720]
[86.54121399 238.89152527]
[87.47375488 223.92054749]
[88.40630341 208.94956970]
[89.33884430 193.97857666]
[90.03845215 178.99490356]
[90.50495148 164.00216675]
[90.97144318 149.00941467]
[91.43794250 134.01667786]
[91.90444183 119.02392578]
[83.73722839 114.12107086]
[78.36103058 105.79328156]
[77.16263580 95.56415558]
[80.72400665 85.48922729]
[88.63597107 77.74287415]
[76.05167389 69.57981110]
[63.46738434 61.41675186]
[50.88309479 53.25368881]
[38.29880142 45.09062576]
[25.71450996 36.92756271]
[13.13021755 28.76449966]
[0.42049676 20.79813194]
[-12.41157818 13.03038788]
[-25.59197998 5.86958981]
[-39.09201813 -0.66867656]
[-52.59206009 -7.20694304]
[-66.09210205 -13.74520874]
[-79.70860291 -6.30407906]
[-95.09403229 -8.32104492]
[-106.33237457 -19.02054214]
[-109.10226440 -34.28839493]
[-102.33861542 -48.25380707]
[-88.64218903 -55.54678345]
[-73.27954102 -53.36303329]
[-62.15792847 -42.54225159]
[-59.55383301 -27.24524879]
[-46.05379105 -20.70698166]
[-32.55375290 -14.16871643]
[-19.05371284 -7.63045025]
[-15.47560120 -8.55357170]
[-11.25912762 -7.67265892]
[-7.31415272 -4.70237398]
[-4.64383364 0.19831288]
[8.18824100 7.96605730]
[15.67220211 8.75079823]
[21.29327965 16.18020630]
[33.87757111 24.34326935]
[46.46186447 32.50633240]
[59.04615784 40.66939545]
[71.63044739 48.83245850]
[84.21473694 56.99552155]
[96.79903412 65.15858459]
[111.68308258 67.02006531]
[125.89015198 62.20767975]
[140.09722900 57.39529037]
[154.30430603 52.58290482]
[168.51136780 47.77051926]
[182.71844482 42.95813370]
[196.92552185 38.14574432]
[211.13259888 33.33335876]
[214.27792358 19.81072235]
[223.65419006 9.71961212]
[236.70190430 5.65571594]
[249.93751526 8.59076309]
[259.88323975 17.64276505]
[274.23312378 13.27454472]
[288.58297729 8.90632439]
[297.37023926 -4.51618433]
[313.35595703 -5.87131262]
[324.27725220 5.88047791]
[321.75625610 21.72422028]
[307.72686768 29.50594902]
[292.95120239 23.25618935]
[278.60134888 27.62441063]
[264.25146484 31.99263191]
[259.44836426 47.60461426]
[246.19157410 57.42707062]
[229.52738953 57.47744370]
[215.94497681 47.54043198]
[201.73791504 52.35281754]
[187.53083801 57.16520691]
[173.32376099 61.97759247]
[159.11668396 66.78997803]
[144.90960693 71.60236359]
[130.70254517 76.41474915]
[116.49546814 81.22713470]
[122.62329102 92.25744629]
[122.42001343 104.32100677]
[116.48960876 114.18861389]
[106.89718628 119.49042511]
[106.43068695 134.48316956]
[105.96418762 149.47590637]
[105.49769592 164.46865845]
[105.03119659 179.46139526]
[107.93116760 188.31480408]
[104.30982971 194.91111755]
[103.37728119 209.88211060]
[102.44474030 224.85308838]
[101.51219177 239.82408142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 45]
[24 44]
[25 40]
[26 39]
[27 38]
[28 37]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
