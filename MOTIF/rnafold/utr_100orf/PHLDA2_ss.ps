%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCGGCGCCGUCACCGCCCGCAUUGCCGCUCCCAGUCCCGCGCUCGGCACGACAUGAAAUCCCCCGACGAGGUGCUACGCGAGGGCGAGUUGGAGAAGCGCAGCGACAGCCUCUUCCAGCUAUGGAAGAAGAAGCGCGGGGUGCUCACCUCCG\
) } def
/len { sequence length } bind def

/coor [
[89.06256866 357.52951050]
[97.44593811 343.43515015]
[97.14581299 328.43817139]
[96.84568024 313.44116211]
[84.23926544 302.34753418]
[83.51545715 285.23324585]
[95.60655975 272.62817383]
[95.00641632 257.64016724]
[94.40627289 242.65217590]
[93.80612946 227.66419983]
[93.20598602 212.67620850]
[92.60584259 197.68821716]
[90.57942200 195.67491150]
[89.25170135 192.71536255]
[88.99562836 189.08029175]
[90.07604980 185.17321777]
[92.60584259 181.48793030]
[93.20598602 166.49993896]
[93.80612946 151.51194763]
[94.40627289 136.52395630]
[70.50109863 110.51213074]
[80.93395233 82.79367828]
[73.21839142 69.93016052]
[65.50282288 57.06664658]
[50.43345261 53.12307739]
[42.79201889 39.96773148]
[46.64447403 25.62568855]
[38.92891312 12.76217079]
[31.21334839 -0.10134663]
[16.14397430 -4.04491520]
[8.50254250 -17.20026207]
[12.35499954 -31.54230499]
[4.63943624 -44.40582275]
[-3.07612729 -57.26934052]
[-10.79169083 -70.13285828]
[-30.47408676 -73.89860535]
[-40.95790482 -90.62038422]
[-35.92898178 -109.39198303]
[-44.40238571 -121.76943207]
[-52.87578964 -134.14689636]
[-61.34919357 -146.52435303]
[-69.94600677 -158.81640625]
[-78.66537476 -171.02185059]
[-87.38474274 -183.22727966]
[-96.10411072 -195.43270874]
[-106.98799896 -196.61036682]
[-115.23726654 -203.46754456]
[-118.25719452 -213.53103638]
[-115.27388763 -223.37550354]
[-123.49794006 -235.92002869]
[-131.72198486 -248.46455383]
[-139.94604492 -261.00906372]
[-148.17008972 -273.55358887]
[-162.55651855 -268.97830200]
[-177.64389038 -268.45523071]
[-192.31263733 -272.02319336]
[-205.47424316 -279.41741943]
[-216.15200806 -290.08926392]
[-223.55360413 -303.24673462]
[-227.12974548 -317.91348267]
[-226.61509705 -333.00115967]
[-222.04782104 -347.39010620]
[-213.76684570 -360.01263428]
[-202.38668823 -369.93203735]
[-188.75180054 -376.41223145]
[-173.87402344 -378.97232056]
[-158.85736084 -377.42236328]
[-144.81614685 -371.87738037]
[-132.79234314 -362.74880981]
[-123.67819977 -350.71405029]
[-118.15003204 -336.66622925]
[-116.61808014 -321.64770508]
[-119.19601440 -306.77301025]
[-125.69253540 -293.14590454]
[-135.62556458 -281.77764893]
[-127.40151978 -269.23312378]
[-119.17746735 -256.68859863]
[-110.95342255 -244.14407349]
[-102.72937012 -231.59956360]
[-84.87976837 -224.24978638]
[-83.89867401 -204.15208435]
[-75.17930603 -191.94664001]
[-66.45993805 -179.74121094]
[-57.74057388 -167.53578186]
[-51.25711823 -163.90084839]
[-48.97173691 -154.99775696]
[-40.49833298 -142.62030029]
[-32.02492905 -130.24284363]
[-23.55152512 -117.86538696]
[-13.22962570 -118.76482391]
[-3.39921212 -115.24345398]
[4.11977482 -107.88128662]
[7.90542841 -97.97581482]
[7.20246220 -87.31367493]
[2.07182693 -77.84841919]
[9.78739071 -64.98490143]
[17.50295448 -52.12138367]
[25.21851730 -39.25786591]
[39.68520355 -35.90368652]
[47.69313049 -22.96816063]
[44.07686615 -7.81691027]
[51.79243088 5.04660749]
[59.50799179 17.91012573]
[73.97467804 21.26430702]
[81.98260498 34.19983292]
[78.36634064 49.35108185]
[86.08190918 62.21459961]
[93.79747009 75.07811737]
[100.87873077 72.72235107]
[108.77065277 72.46147156]
[116.83439636 74.55333710]
[124.35472107 79.05736542]
[130.60212708 85.81354523]
[134.90017700 94.44082642]
[136.69215393 104.35604095]
[151.29675293 107.77740479]
[165.90135193 111.19877625]
[180.50595093 114.62014008]
[195.11054993 118.04150391]
[209.71513367 121.46287537]
[224.31973267 124.88423920]
[239.85261536 119.62480927]
[251.99362183 130.64878845]
[248.25312805 146.61564636]
[232.47901917 151.10005188]
[220.89837646 139.48883057]
[206.29377747 136.06747437]
[191.68917847 132.64610291]
[177.08457947 129.22473145]
[162.47998047 125.80336761]
[147.87538147 122.38200378]
[133.27078247 118.96063995]
[127.30165863 123.50150299]
[141.13575745 129.29957581]
[143.03141785 144.17930603]
[131.09295654 153.26078796]
[117.25898743 147.46240234]
[115.36339569 132.58323669]
[109.39426422 137.12409973]
[108.79412079 152.11209106]
[108.19396973 167.10008240]
[107.59382629 182.08807373]
[107.59382629 197.08807373]
[108.19396973 212.07606506]
[108.79412079 227.06405640]
[109.39426422 242.05203247]
[109.99440765 257.04003906]
[110.59455109 272.02801514]
[121.50105286 279.98828125]
[125.75230408 292.59851074]
[122.00276947 305.16360474]
[111.84267426 313.14102173]
[112.14280701 328.13803101]
[112.44293976 343.13500977]
[121.38350677 356.88269043]
[113.70780945 371.37460327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[7 148]
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[17 142]
[18 141]
[19 140]
[20 139]
[22 108]
[23 107]
[24 106]
[27 103]
[28 102]
[29 101]
[32 98]
[33 97]
[34 96]
[35 95]
[38 89]
[39 88]
[40 87]
[41 86]
[42 84]
[43 83]
[44 82]
[45 81]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
