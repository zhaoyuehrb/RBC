%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUCUCAGGAACCUACGACAUACUCCCUUUUCCUAUUCCUUUUUCUGAGCCAUGGAGUGUCGAGUUAUACAGUGCCAAAUUCCAGGCAGGAUUUGCAUC\
) } def
/len { sequence length } bind def

/coor [
[81.44027710 119.67375183]
[73.63814545 109.98805237]
[63.19613647 120.75672913]
[52.75412750 131.52540588]
[42.31211853 142.29408264]
[31.87010765 153.06275940]
[31.94129181 168.63943481]
[21.19820595 179.41165161]
[6.34779119 179.38352966]
[-4.09421825 190.15220642]
[-7.56727457 206.17936707]
[-23.26420021 210.92684937]
[-35.03734589 199.51084900]
[-30.77550507 183.67515564]
[-14.86289692 179.71018982]
[-4.42088795 168.94151306]
[-4.90632534 154.09901428]
[5.52995300 143.02929688]
[21.10142899 142.62075806]
[31.54343796 131.85208130]
[41.98544693 121.08339691]
[52.42745590 110.31472015]
[62.86946487 99.54604340]
[66.07846069 84.89331818]
[61.09313965 70.74600220]
[56.10781860 56.59868240]
[51.12249756 42.45136642]
[36.10680008 39.53998947]
[24.64015198 29.56939125]
[19.73635674 15.29286671]
[22.61768723 0.57709575]
[32.41204834 -10.64502907]
[27.42672539 -24.79234505]
[22.44140434 -38.93966293]
[17.45608139 -53.08697891]
[3.50015807 -54.96806335]
[-8.20702171 -62.67386627]
[-15.38501453 -74.63437653]
[-16.66560555 -88.45777893]
[-11.85326862 -101.40866852]
[-1.95245242 -110.94934082]
[-6.49974251 -125.24347687]
[-11.04703236 -139.53759766]
[-24.57835579 -148.15635681]
[-26.13324165 -164.12388611]
[-14.51891422 -175.19126892]
[1.35510767 -172.86856079]
[9.31163311 -158.93753052]
[3.24709749 -144.08489990]
[7.79438734 -129.79077148]
[12.34167767 -115.49663544]
[28.13287926 -112.47026062]
[40.34614563 -101.86999512]
[45.62484741 -86.48523712]
[42.45622635 -70.43659973]
[31.60339928 -58.07229996]
[36.58872223 -43.92498398]
[41.57404327 -29.77766800]
[46.55936432 -15.63035107]
[61.22537994 -13.02772999]
[72.69583130 -3.36933279]
[77.82567596 10.82753658]
[75.14303589 25.78414917]
[65.26981354 37.46604538]
[70.25513458 51.61336136]
[75.24045563 65.76067352]
[80.22577667 79.90799713]
[89.38483429 74.59136963]
[99.62236023 73.11945343]
[109.42729187 75.52320862]
[117.42095184 81.27479553]
[122.55072021 89.38973236]
[124.22751617 98.59112549]
[122.38905334 107.50913239]
[134.35931396 116.54865265]
[146.32957458 125.58817291]
[158.29983521 134.62770081]
[167.19914246 137.37194824]
[170.49380493 144.13452148]
[182.18000793 153.53837585]
[193.86622620 162.94224548]
[205.55242920 172.34609985]
[217.23863220 181.74995422]
[228.92485046 191.15380859]
[244.60845947 189.20445251]
[257.02532959 198.98179626]
[258.80877686 214.68513489]
[248.90069580 226.99795532]
[233.17936707 228.61526489]
[220.97200012 218.57756042]
[219.52099609 202.84002686]
[207.83477783 193.43615723]
[196.14857483 184.03230286]
[184.46235657 174.62844849]
[172.77615356 165.22459412]
[161.08995056 155.82073975]
[149.26031494 146.59794617]
[137.29005432 137.55842590]
[125.31979370 128.51892090]
[113.34953308 119.47939301]
[103.66183472 124.48641968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[9 16]
[10 15]
[24 67]
[25 66]
[26 65]
[27 64]
[32 59]
[33 58]
[34 57]
[35 56]
[41 51]
[42 50]
[43 49]
[74 100]
[75 99]
[76 98]
[77 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
