%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGGCGUCGGGCGGCCGUCGGGACGGAAGCCGGGAGGCGCUGCCGACCGCGCCUGCGACAGCGUCAGCCCUGCGCGGAGCGCCGGCCCGAUGGCGGCGGCGGCGGCGAUGGCCGAGCAGGAGAGCGCCCGGAACGGCGGCCGCAACCGCGGCGGCGUCCAGCGUGUGGAGGGCAAGCUGCGCGCCAGCG\
) } def
/len { sequence length } bind def

/coor [
[216.92211914 437.19747925]
[211.69587708 423.13735962]
[213.50221252 408.24652100]
[221.93852234 395.84375000]
[235.12455750 388.69332886]
[250.12147522 388.38891602]
[263.58886719 395.00006104]
[256.33688354 381.86959839]
[241.99900818 378.00170898]
[234.45744324 364.78884888]
[238.61166382 349.77618408]
[231.35969543 336.64572144]
[224.10772705 323.51525879]
[216.64300537 310.50457764]
[208.96748352 297.61712646]
[201.29197693 284.72967529]
[193.61645508 271.84222412]
[185.94093323 258.95477295]
[178.26542664 246.06732178]
[170.58990479 233.17987061]
[162.91439819 220.29241943]
[155.23887634 207.40496826]
[147.56336975 194.51750183]
[132.73870850 193.34809875]
[121.31009674 183.55775452]
[117.79675293 168.74188232]
[123.74993134 154.53393555]
[116.07440948 141.64648438]
[108.39889526 128.75903320]
[81.33476257 129.99240112]
[59.91762161 107.01656342]
[63.82827759 71.48837280]
[49.91240311 77.08734131]
[35.99652863 82.68630981]
[26.31292343 95.92111206]
[10.04085636 93.88349915]
[3.91963410 78.66960144]
[14.24624634 65.93016815]
[30.39755821 68.77043915]
[44.31343079 63.17147064]
[58.22930527 57.57249832]
[61.61811066 42.96031189]
[51.58720016 31.80769539]
[41.55628967 20.65507889]
[31.52538109 9.50246143]
[21.49447250 -1.65015483]
[11.46356201 -12.80277157]
[1.43265319 -23.95538902]
[-6.64582729 -28.25188637]
[-8.66895103 -35.37213516]
[-18.51700020 -46.68654633]
[-63.44523621 -41.47708511]
[-75.30204773 -50.66490173]
[-87.15886688 -59.85271835]
[-99.01567841 -69.04053497]
[-110.94687653 -78.13154602]
[-122.95166779 -87.12515259]
[-134.95646667 -96.11876678]
[-146.96125793 -105.11237335]
[-158.96604919 -114.10597992]
[-167.72482300 -116.75279999]
[-171.09144592 -123.34497070]
[-182.94827271 -132.53279114]
[-194.80508423 -141.72059631]
[-209.66571045 -137.25506592]
[-224.30184937 -142.40899658]
[-233.08560181 -155.20060730]
[-232.63941956 -170.71127319]
[-223.13488770 -182.97680664]
[-208.22668457 -187.28088379]
[-193.64730835 -181.96847534]
[-185.00285339 -169.08232117]
[-185.61726379 -153.57742310]
[-173.76045227 -144.38960266]
[-161.90364075 -135.20178223]
[-149.97244263 -126.11077118]
[-137.96765137 -117.11716461]
[-125.96285248 -108.12355804]
[-113.95806122 -99.12995148]
[-101.95326996 -90.13634491]
[-94.70405579 -88.63973236]
[-89.82785797 -80.89734650]
[-77.97104645 -71.70953369]
[-66.11423492 -62.52171707]
[-54.25741959 -53.33390045]
[-47.75207901 -57.06626511]
[-34.74139786 -64.53099823]
[-28.23605919 -68.26335907]
[-30.18386459 -83.13636017]
[-32.13167191 -98.00935364]
[-42.53007889 -110.69025421]
[-36.49488831 -125.93848419]
[-20.23459053 -128.06797791]
[-10.47638321 -114.88808441]
[-17.25867462 -99.95716095]
[-15.31086826 -85.08415985]
[-13.36306190 -70.21116638]
[-7.20258856 -56.53459549]
[2.64546108 -45.22018433]
[12.58526993 -33.98629761]
[22.61617851 -22.83368111]
[32.64708710 -11.68106365]
[42.67799759 -0.52844745]
[52.70890808 10.62416935]
[62.73981476 21.77678680]
[72.77072906 32.92940140]
[87.65908051 31.10270882]
[94.69636536 17.85594940]
[101.73365021 4.60918808]
[100.61495972 -11.75175858]
[114.37372589 -20.67524147]
[128.85609436 -12.98154640]
[129.16384888 3.41471291]
[114.98040771 11.64647007]
[107.94312286 24.89323044]
[100.90584564 38.13999176]
[106.72032928 42.87726593]
[118.34929657 52.35181808]
[124.16378021 57.08909607]
[135.71524048 47.52021027]
[136.94259644 31.76365280]
[149.00617981 21.55357742]
[164.74887085 22.94744682]
[174.83084106 35.11829758]
[173.27059937 50.84538269]
[160.99383545 60.79810333]
[145.28413391 59.07168198]
[133.73266602 68.64056396]
[139.53427124 90.36302948]
[134.03915405 109.44831085]
[121.28634644 121.08351135]
[128.96186829 133.97096252]
[136.63737488 146.85842896]
[151.96565247 148.39155579]
[163.31929016 158.53788757]
[166.48393250 173.25010681]
[160.45082092 186.84199524]
[168.12632751 199.72944641]
[175.80184937 212.61689758]
[183.47735596 225.50434875]
[191.15287781 238.39181519]
[198.82839966 251.27926636]
[206.50390625 264.16671753]
[214.17942810 277.05416870]
[221.85493469 289.94161987]
[229.53045654 302.82907104]
[235.12513733 306.39779663]
[237.68249512 311.49429321]
[237.23818970 316.26330566]
[244.49015808 329.39376831]
[251.74212646 342.52423096]
[266.66128540 347.00262451]
[273.82876587 360.42208862]
[269.46734619 374.61764526]
[276.71932983 387.74810791]
[285.11621094 400.17758179]
[294.59075928 411.80654907]
[304.06530762 423.43551636]
[313.53985596 435.06448364]
[323.01440430 446.69345093]
[337.72955322 452.50506592]
[339.77014160 467.25924683]
[349.24468994 478.88821411]
[358.71923828 490.51718140]
[368.19378662 502.14614868]
[382.90893555 507.95776367]
[384.94949341 522.71191406]
[394.42404175 534.34088135]
[403.89859009 545.96984863]
[419.64843750 549.02307129]
[426.95321655 563.30664062]
[420.20932007 577.86340332]
[404.59011841 581.52667236]
[392.07730103 571.48632812]
[392.26962280 555.44439697]
[382.79507446 543.81542969]
[373.32052612 532.18646240]
[359.28305054 527.20666504]
[356.56481934 511.62069702]
[347.09027100 499.99172974]
[337.61572266 488.36276245]
[328.14117432 476.73379517]
[314.10369873 471.75396729]
[311.38543701 456.16799927]
[301.91088867 444.53903198]
[292.43634033 432.91006470]
[282.96179199 421.28109741]
[273.48724365 409.65213013]
[274.59411621 424.61123657]
[268.71502686 438.41113281]
[257.16033936 447.97610474]
[242.50527954 451.17440796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 155]
[8 154]
[11 151]
[12 150]
[13 149]
[14 146]
[15 145]
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[27 133]
[28 132]
[29 131]
[32 41]
[33 40]
[34 39]
[42 106]
[43 105]
[44 104]
[45 103]
[46 102]
[47 101]
[48 100]
[50 99]
[51 98]
[52 85]
[53 84]
[54 83]
[55 82]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[62 75]
[63 74]
[64 73]
[88 97]
[89 96]
[90 95]
[107 116]
[108 115]
[109 114]
[119 128]
[120 127]
[156 188]
[157 187]
[158 186]
[159 185]
[160 184]
[162 182]
[163 181]
[164 180]
[165 179]
[167 177]
[168 176]
[169 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
