%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGACGAUCGCAAGCGCGGAGGCCGGGCGGGCGCGCGCGCCAUGGAGCGGCUGCGGGACGUGCGGGAGCGGCUGCAGGCGUGGGAGCGCGCGUUCCGACGGCAGCGCGGGCGGCGACCGAGCCAGGACGACGUGGAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[171.16912842 308.36291504]
[166.00444031 294.28009033]
[160.83975220 280.19726562]
[155.67504883 266.11444092]
[141.62245178 255.65817261]
[144.82464600 237.56097412]
[139.35182190 223.59500122]
[127.50430298 214.56808472]
[129.67318726 198.89624023]
[124.20037079 184.93026733]
[118.72756195 170.96429443]
[113.25475311 156.99832153]
[102.26123810 151.83662415]
[97.61200714 140.18298340]
[102.32510376 128.12248230]
[97.16040802 114.03966522]
[86.55189514 104.93192291]
[88.75676727 91.12503052]
[83.59207153 77.04220581]
[67.29181671 72.66637421]
[56.89221573 59.58474731]
[56.31635284 43.04878998]
[65.59307861 29.54856682]
[60.12026596 15.58259583]
[54.64745712 1.61662531]
[49.17464447 -12.34934521]
[37.64925766 -18.25139236]
[33.40145874 -30.05728149]
[38.20737839 -41.21091461]
[33.04268265 -55.29373932]
[27.87799072 -69.37656403]
[22.71329689 -83.45938873]
[17.39422417 -97.48463440]
[11.92141247 -111.45059967]
[6.44860172 -125.41657257]
[0.97579068 -139.38253784]
[-4.49702024 -153.34851074]
[-9.96983147 -167.31448364]
[-15.44264221 -181.28045654]
[-30.08761978 -192.38392639]
[-26.88038254 -209.60375977]
[-32.65866852 -223.44613647]
[-38.43695450 -237.28851318]
[-44.21524048 -251.13088989]
[-49.99353027 -264.97326660]
[-66.26603699 -271.29223633]
[-72.84051514 -287.09909058]
[-66.11844635 -302.47695923]
[-72.19941711 -316.18905640]
[-78.28039551 -329.90115356]
[-84.36136627 -343.61325073]
[-90.44233704 -357.32534790]
[-96.52331543 -371.03747559]
[-102.60428619 -384.74957275]
[-108.68525696 -398.46166992]
[-123.91416168 -398.44177246]
[-137.83190918 -404.62368774]
[-148.02719116 -415.93634033]
[-152.73358154 -430.41976929]
[-151.13568115 -445.56463623]
[-143.51034546 -458.74697876]
[-131.17869568 -467.68289185]
[-116.27728271 -470.82415771]
[-101.38784790 -467.62655640]
[-89.09008789 -458.64407349]
[-81.51465607 -445.43298340]
[-79.97404480 -430.28219604]
[-84.73517609 -415.81668091]
[-94.97315979 -404.54263306]
[-88.89218140 -390.83053589]
[-82.81121063 -377.11843872]
[-76.73023987 -363.40634155]
[-70.64926147 -349.69421387]
[-64.56829071 -335.98211670]
[-58.48731613 -322.27001953]
[-52.40634537 -308.55792236]
[-39.81216431 -305.62982178]
[-31.09195709 -295.82025146]
[-29.61639595 -282.58203125]
[-36.15114975 -270.75155640]
[-30.37286568 -256.90917969]
[-24.59457779 -243.06680298]
[-18.81629181 -229.22442627]
[-13.03800583 -215.38204956]
[-1.93375981 -210.46308899]
[2.97034883 -198.91438293]
[-1.47667098 -186.75326538]
[3.99613976 -172.78729248]
[9.46895027 -158.82131958]
[14.94176197 -144.85536194]
[20.41457176 -130.88938904]
[25.88738251 -116.92341614]
[31.36019325 -102.95744324]
[36.77107239 -97.83773804]
[36.79611969 -88.62408447]
[41.96081543 -74.54125977]
[47.12550735 -60.45843506]
[52.29020309 -46.37561035]
[66.34280396 -35.91934967]
[63.14061737 -17.82215691]
[68.61342621 -3.85618544]
[74.08623505 10.10978508]
[79.55905151 24.07575607]
[92.77584839 26.24367332]
[103.26728821 34.74258804]
[108.21011353 47.42375183]
[106.20596313 60.99549103]
[97.67489624 71.87751007]
[102.83959198 85.96033478]
[113.44810486 95.06807709]
[111.24323273 108.87496948]
[116.40792847 122.95779419]
[130.80546570 134.38029480]
[127.22071838 151.52551270]
[132.69352722 165.49148560]
[138.16633606 179.45745850]
[143.63916016 193.42343140]
[155.87812805 203.44929504]
[153.31779480 218.12219238]
[158.79060364 232.08816528]
[170.31599426 237.99021912]
[174.56379700 249.79609680]
[169.75787354 260.94973755]
[174.92257690 275.03256226]
[180.08726501 289.11538696]
[185.25195312 303.19821167]
[195.87626648 305.15853882]
[204.63761902 311.33996582]
[209.96557617 320.55133057]
[210.94017029 331.06634521]
[207.44999695 340.94692993]
[200.20034790 348.40045166]
[204.42634583 362.79284668]
[208.65232849 377.18524170]
[220.88787842 388.10418701]
[217.28511047 404.10269165]
[201.55024719 408.72286987]
[189.86996460 397.21188354]
[194.25993347 381.41125488]
[190.03395081 367.01885986]
[185.80795288 352.62646484]
[168.09555054 344.67587280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[6 120]
[7 119]
[9 117]
[10 116]
[11 115]
[12 114]
[15 112]
[16 111]
[18 109]
[19 108]
[23 103]
[24 102]
[25 101]
[26 100]
[29 98]
[30 97]
[31 96]
[32 95]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[38 88]
[39 87]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
