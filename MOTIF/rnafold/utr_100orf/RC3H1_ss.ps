%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUUUCAAAGAUUUUGAUUCCAGUGGAAUCUUUGCUUUAGAUUUGUGUGUGUGUUUGUGUUCGUGAAUUGUAACUCCAGAAGCAAUGCCUGUACAAGCUCCACAAUGGACGGAUUUCCUCUCCUGCCCAAUUUGCACUCAGACUUUCGACGAAACAAUUCGAAAGCCCAUCAGUUUGGGUUGUG\
) } def
/len { sequence length } bind def

/coor [
[109.57514954 154.66871643]
[102.43282318 155.44757080]
[95.24972534 155.29725647]
[88.14623260 154.22029114]
[81.24137878 152.23471069]
[74.65087891 149.37380981]
[68.48516846 145.68551636]
[62.84757614 141.23164368]
[51.39279175 150.91606140]
[40.01932526 160.69584656]
[28.72796631 170.57032776]
[17.43660736 180.44479370]
[6.14524889 190.31927490]
[9.56449032 203.89404297]
[6.81024933 217.55165100]
[-1.52328813 228.63444519]
[-13.76196003 235.01089478]
[-27.48770523 235.48554993]
[-40.01625061 230.02270508]
[-51.47103500 239.70712280]
[-62.92581940 249.39154053]
[-74.38059998 259.07595825]
[-85.83538055 268.76037598]
[-97.29016876 278.44479370]
[-105.48207092 293.28826904]
[-122.01321411 289.52560425]
[-122.97386169 272.59887695]
[-106.97458649 266.99002075]
[-95.51979828 257.30560303]
[-84.06501770 247.62117004]
[-72.61023712 237.93675232]
[-61.15545273 228.25233459]
[-49.70067215 218.56791687]
[-52.95503998 202.74938965]
[-47.76351929 187.35768127]
[-35.45160675 176.61849976]
[-19.31309700 173.53036499]
[-3.72922397 179.02790833]
[7.56213474 169.15344238]
[18.85349274 159.27896118]
[30.14485168 149.40449524]
[33.11615372 142.62104797]
[41.70837402 139.46128845]
[53.16315842 129.77687073]
[47.90172577 119.13429260]
[45.02413940 107.61619568]
[44.66207886 95.74961090]
[46.83209991 84.07750702]
[51.43491364 73.13396454]
[58.25991440 63.41972351]
[66.99480438 55.37928009]
[59.78607941 42.22503281]
[52.57735062 29.07078362]
[45.36862564 15.91653347]
[29.41666412 6.73623371]
[30.46875381 -10.77270603]
[23.04122925 -23.80466270]
[15.61370468 -36.83661652]
[8.18617916 -49.86857224]
[0.75865459 -62.90052795]
[-6.66887045 -75.93248749]
[-14.09639549 -88.96443939]
[-29.39251900 -90.79058838]
[-40.54994965 -101.15229797]
[-43.43251038 -115.92236328]
[-37.14043427 -129.39633179]
[-44.56795883 -142.42828369]
[-50.09971619 -146.10760498]
[-52.55885696 -151.25881958]
[-52.01759720 -156.02215576]
[-59.00551224 -169.29501343]
[-65.99343109 -182.56788635]
[-72.98134613 -195.84075928]
[-79.96926117 -209.11363220]
[-95.31939697 -209.63215637]
[-108.34524536 -217.76989746]
[-115.54291534 -231.33784485]
[-114.97627258 -246.68627930]
[-106.79774475 -259.68655396]
[-93.20730591 -266.84164429]
[-77.86072540 -266.22689819]
[-64.88614655 -258.00765991]
[-57.77367020 -244.39486694]
[-58.43651962 -229.05029297]
[-66.69638824 -216.10153198]
[-59.70847321 -202.82867432]
[-52.72055817 -189.55580139]
[-45.73264313 -176.28292847]
[-38.74472809 -163.01007080]
[-31.53600311 -149.85581970]
[-24.10847855 -136.82385254]
[-9.30890942 -135.37101746]
[1.93027830 -125.36378479]
[5.15950060 -110.48340607]
[-1.06443965 -96.39196777]
[6.36308527 -83.36000824]
[13.79061031 -70.32805634]
[21.21813583 -57.29610062]
[28.64566040 -44.26414108]
[36.07318497 -31.23218727]
[43.50070953 -18.20023155]
[55.09162521 -14.69607639]
[61.38240433 -3.88273120]
[58.52287292 8.70780754]
[65.73159790 21.86205673]
[72.94033051 35.01630402]
[80.14905548 48.17055511]
[98.79795074 44.51210403]
[117.58779144 47.35950851]
[134.31549072 56.37891769]
[145.09783936 45.95103073]
[155.88020325 35.52314377]
[160.51988220 17.71257591]
[177.68467712 14.10150433]
[188.29127502 3.49490213]
[192.01072693 -12.47687626]
[207.77890015 -16.98206902]
[219.37484741 -5.38612127]
[214.86965942 10.38205147]
[198.89787292 14.10150433]
[188.29127502 24.70810509]
[187.97389221 36.81296539]
[179.20674133 45.73706436]
[166.30809021 46.30550003]
[155.52572632 56.73338699]
[144.74337769 67.16127014]
[154.94198608 92.14312744]
[152.15391541 118.98211670]
[165.42678833 125.97003174]
[178.69964600 132.95794678]
[191.97251892 139.94586182]
[205.24539185 146.93377686]
[218.51826477 153.92169189]
[234.33395386 153.50424194]
[241.99127197 166.27978516]
[255.26414490 173.26770020]
[268.53701782 180.25561523]
[277.77673340 171.89431763]
[289.11694336 166.78804016]
[301.45339966 165.41749573]
[313.58987427 167.90045166]
[324.35424805 173.98173523]
[332.71160889 183.05938721]
[337.86373901 194.24426270]
[339.32546997 206.44700623]
[336.97015381 218.48425293]
[349.87619019 226.12849426]
[362.78222656 233.77275085]
[375.68823242 241.41699219]
[388.59426880 249.06124878]
[401.50027466 256.70550537]
[414.40631104 264.34976196]
[428.15017700 257.34194946]
[443.49868774 258.89987183]
[455.55416870 268.52636719]
[460.46972656 283.14965820]
[456.67687988 298.10351562]
[445.38586426 308.61621094]
[430.19964600 311.33316040]
[415.96405029 305.38745117]
[407.22161865 292.67630005]
[406.76205444 277.25576782]
[393.85601807 269.61151123]
[380.95001221 261.96728516]
[368.04397583 254.32302856]
[355.13796997 246.67877197]
[342.23193359 239.03453064]
[329.32592773 231.39027405]
[314.99401855 241.72970581]
[297.53356934 244.78099060]
[280.44281006 239.88591003]
[267.16653442 227.98304749]
[260.40155029 211.42826843]
[261.54910278 193.52848816]
[248.27622986 186.54057312]
[235.00335693 179.55265808]
[220.13702393 180.46992493]
[211.53034973 167.19454956]
[198.25747681 160.20663452]
[184.98460388 153.21871948]
[171.71173096 146.23081970]
[158.43887329 139.24290466]
[145.16600037 132.25498962]
[140.62086487 137.81925964]
[135.39501953 142.74978638]
[129.57603455 146.96391296]
[123.26143646 150.39103699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 44]
[9 43]
[10 41]
[11 40]
[12 39]
[13 38]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[51 107]
[52 106]
[53 105]
[54 104]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[66 91]
[67 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[110 126]
[111 125]
[112 124]
[114 121]
[115 120]
[128 183]
[129 182]
[130 181]
[131 180]
[132 179]
[133 178]
[135 176]
[136 175]
[137 174]
[146 168]
[147 167]
[148 166]
[149 165]
[150 164]
[151 163]
[152 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
