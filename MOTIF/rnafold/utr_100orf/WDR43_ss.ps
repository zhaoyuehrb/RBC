%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGGUGCGCCUGCGCACGGACGAACACGUGGCUGCAGCGGGGCCAGAGCAGCAAUGGCGGCGGGCGGCGGCGGUAGCUGCGACCCCCUGGCCCCUGCUGGGGUCCCUUGCGCCUUCUCCCCGCACAGCCAGGCCUACUUCGCUUUGGCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[77.68549347 114.63195038]
[70.18587494 114.70698547]
[62.47031021 127.57050323]
[54.88383102 140.51057434]
[47.42719650 153.52589417]
[39.97055817 166.54121399]
[32.64451599 179.63049316]
[25.44979286 192.79240417]
[18.25507164 205.95431519]
[11.06035137 219.11622620]
[11.98388672 235.48934937]
[-1.88028955 244.24815369]
[-16.26990128 236.38233948]
[-16.38214874 219.98358154]
[-2.10156322 211.92150879]
[5.09315825 198.75959778]
[12.28787899 185.59768677]
[19.48260117 172.43576050]
[19.93389130 165.01658630]
[26.95523834 159.08457947]
[34.41187286 146.06925964]
[41.86850739 133.05393982]
[42.46815872 125.64527130]
[49.60679245 119.85494232]
[57.32235336 106.99142456]
[46.14411926 96.98907471]
[42.04686356 82.55950165]
[46.30056381 68.17527771]
[57.58675766 58.29489517]
[72.40718842 55.98086929]
[86.16815948 61.95044708]
[94.60433197 74.35330963]
[95.10118866 89.34376526]
[97.49216461 74.53555298]
[99.88314056 59.72733688]
[102.27410889 44.91912079]
[104.66508484 30.11090469]
[97.74848938 19.18077278]
[100.08150482 6.86668348]
[109.86952972 -0.30059731]
[112.55632019 -15.05800724]
[115.24311066 -29.81541824]
[117.92990112 -44.57282639]
[120.61669159 -59.33023834]
[123.30348969 -74.08764648]
[113.09063721 -88.25736237]
[116.19674683 -105.10298157]
[130.22851562 -114.32792664]
[132.61949158 -129.13613892]
[130.89299011 -138.16427612]
[135.20930481 -144.21551514]
[137.89608765 -158.97293091]
[136.35058594 -168.03379822]
[140.78710938 -173.99745178]
[143.76864624 -188.69815063]
[146.75016785 -203.39884949]
[149.73170471 -218.09954834]
[148.36781311 -227.18952942]
[152.92276001 -233.06321716]
[156.19784546 -247.70132446]
[136.97250366 -253.19084167]
[125.52246094 -277.89566040]
[124.02420807 -292.82064819]
[120.03369141 -301.10098267]
[122.64835358 -308.05880737]
[121.44902802 -323.01080322]
[120.24970245 -337.96276855]
[108.49987793 -348.18917847]
[107.49658203 -363.36968994]
[117.31830597 -374.50833130]
[116.11898041 -389.46029663]
[114.91965485 -404.41229248]
[113.72032928 -419.36425781]
[112.52100372 -434.31625366]
[102.77175903 -447.50274658]
[109.56419373 -462.42907715]
[125.91084290 -463.74026489]
[134.99566650 -450.08749390]
[127.47297668 -435.51556396]
[128.67230225 -420.56359863]
[129.87162781 -405.61160278]
[131.07095337 -390.65963745]
[132.27027893 -375.70767212]
[143.74191284 -366.27700806]
[145.17120361 -351.13064575]
[135.20167542 -339.16210938]
[136.40100098 -324.21011353]
[137.60032654 -309.25814819]
[138.94918823 -294.31890869]
[140.44744873 -279.39392090]
[147.43939209 -276.68051147]
[168.41523743 -268.54022217]
[179.58914185 -278.54739380]
[190.76306152 -288.55459595]
[201.93696594 -298.56176758]
[213.11088562 -308.56893921]
[224.28479004 -318.57614136]
[228.87705994 -334.31915283]
[244.86915588 -337.95028687]
[255.80976868 -325.73410034]
[250.44415283 -310.23757935]
[234.29197693 -307.40222168]
[223.11805725 -297.39505005]
[211.94415283 -287.38784790]
[200.77023315 -277.38067627]
[189.59632874 -267.37347412]
[178.42240906 -257.36630249]
[170.83593750 -244.42623901]
[167.56085205 -229.78814697]
[164.43240356 -215.11801147]
[161.45086670 -200.41731262]
[158.46932983 -185.71661377]
[155.48780823 -171.01593018]
[152.65350342 -156.28613281]
[149.96670532 -141.52871704]
[147.42770386 -126.74517059]
[145.03672791 -111.93695831]
[153.98356628 -102.61918640]
[155.94210815 -89.65365601]
[149.97193909 -77.76045227]
[138.06089783 -71.40085602]
[135.37409973 -56.64344788]
[132.68731689 -41.88603592]
[130.00051880 -27.12862587]
[127.31373596 -12.37121677]
[124.62694550 2.38619351]
[131.43414307 18.53525734]
[119.47330475 32.50188065]
[117.08232880 47.31009674]
[114.69135284 62.11830902]
[112.30037689 76.92652893]
[109.90940094 91.73474121]
[112.89093018 106.43544006]
[120.86233521 119.14199829]
[128.83374023 131.84855652]
[136.80514526 144.55513000]
[144.77655029 157.26168823]
[160.03170776 156.02133179]
[174.11137390 162.02313232]
[183.78012085 173.88795471]
[186.81616211 188.88931274]
[182.52182007 203.58003235]
[171.88391113 214.58428955]
[157.34695435 219.37336731]
[142.25141907 216.84680176]
[130.06616211 207.58514404]
[123.59127045 193.71669006]
[124.31461334 178.42828369]
[132.06997681 165.23309326]
[124.09857941 152.52653503]
[116.12717438 139.81996155]
[108.15577698 127.11340332]
[100.18437195 114.40683746]
[92.68474579 114.48188019]
[97.46247101 128.70063782]
[85.41600800 137.63835144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 22]
[5 21]
[6 20]
[7 18]
[8 17]
[9 16]
[10 15]
[33 132]
[34 131]
[35 130]
[36 129]
[37 128]
[40 126]
[41 125]
[42 124]
[43 123]
[44 122]
[45 121]
[48 117]
[49 116]
[51 115]
[52 114]
[54 113]
[55 112]
[56 111]
[57 110]
[59 109]
[60 108]
[62 90]
[63 89]
[65 88]
[66 87]
[67 86]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
[133 153]
[134 152]
[135 151]
[136 150]
[137 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
