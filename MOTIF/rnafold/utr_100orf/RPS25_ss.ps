%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUUUUUGUCCGACAUCUUGACGAGGCUGCGGUGUCUGCUGCUAUUCUCCGAGCUUCGCAAUGCCGCCUAAGGACGACAAGAAGAAGAAGGACGCUGGAAAGUCGGCCAAGAAAGACAAAGACCCAGUGAACAAAUCCGGGGGCAAGGCCAAAAAGAAGA\
) } def
/len { sequence length } bind def

/coor [
[101.85484314 299.83871460]
[101.56751251 284.84146118]
[101.28018951 269.84420776]
[100.99286652 254.84695435]
[97.70530701 248.18850708]
[100.84645081 239.56033325]
[100.84645081 224.56033325]
[100.84645081 209.56033325]
[100.84645081 194.56033325]
[100.84645081 179.56033325]
[100.84645081 164.56033325]
[93.10914612 151.83305359]
[100.84645081 138.03288269]
[100.84645081 123.03288269]
[98.16159058 137.79064941]
[86.27375793 146.93829346]
[71.32067108 145.75288391]
[61.02264023 134.84643555]
[60.69655991 119.84997559]
[70.51078796 108.50621796]
[85.40020752 106.67245483]
[70.42497253 105.81090546]
[55.44973373 104.94935608]
[46.65538025 107.58973694]
[40.19674301 103.92517090]
[25.24075699 102.77693176]
[10.28477001 101.62869263]
[-4.67121744 100.48045349]
[-19.62720490 99.33221436]
[-34.58319092 98.18397522]
[-49.53917694 97.03573608]
[-58.38249588 99.50717926]
[-64.76975250 95.71956635]
[-79.70099640 94.28505707]
[-94.63224792 92.85054779]
[-101.13275146 106.54431152]
[-111.92695618 117.18672943]
[-125.71139526 123.49267578]
[-140.82154846 124.70067596]
[-155.43276978 120.66485596]
[-167.78070068 111.87255859]
[-176.37426758 99.38550568]
[-180.17573547 84.71156311]
[-178.72608948 69.62268829]
[-172.20036316 55.94092178]
[-161.38656616 45.31841660]
[-147.59053040 39.03788376]
[-132.47817993 37.85773468]
[-117.87441254 41.92047501]
[-105.54270172 50.73550797]
[-96.97216797 63.23837662]
[-93.19773865 77.91929626]
[-78.26649475 79.35380554]
[-63.33524323 80.78831482]
[-48.39093781 82.07975006]
[-33.43495178 83.22798920]
[-18.47896576 84.37622833]
[-3.52297854 85.52446747]
[11.43300819 86.67270660]
[26.38899612 87.82094574]
[41.34498215 88.96917725]
[56.31127930 89.97412109]
[71.28652191 90.83567047]
[86.26175690 91.69721985]
[100.64676666 87.44616699]
[112.74815369 78.58296204]
[124.84954071 69.71975708]
[136.95092773 60.85655212]
[143.51252747 46.46015930]
[158.35218811 45.18200302]
[170.45358276 36.31879425]
[172.58993530 31.45389557]
[176.04939270 28.24419975]
[179.96685791 26.91702271]
[183.51429749 27.31782722]
[196.10478210 19.16431427]
[208.69526672 11.01080132]
[205.39161682 2.21574354]
[203.56552124 -6.99583292]
[203.26441956 -16.37760925]
[204.49496460 -25.67894554]
[207.22291565 -34.65157700]
[211.37409973 -43.05622864]
[216.83641052 -50.66902161]
[223.46281433 -57.28740692]
[231.07533264 -62.73557663]
[239.46983337 -66.86912537]
[248.42149353 -69.57888031]
[257.69079590 -70.79376984]
[267.02996826 -70.48271942]
[276.18960571 -68.65540314]
[284.92529297 -65.36198425]
[293.00421143 -60.69171906]
[300.21124268 -54.77054977]
[306.35470581 -47.75770187]
[311.27160645 -39.84140015]
[325.38873291 -44.91165161]
[339.50582886 -49.98190689]
[353.62292480 -55.05215836]
[367.74002075 -60.12241364]
[381.85711670 -65.19266510]
[385.28463745 -69.25265503]
[389.51190186 -71.35033417]
[393.64486694 -71.51287842]
[396.93325806 -70.12315369]
[411.31829834 -74.37419891]
[425.70330811 -78.62524414]
[426.61355591 -93.75624847]
[432.64691162 -107.66217041]
[443.07473755 -118.66381073]
[456.63787842 -125.43266296]
[471.69848633 -127.15135193]
[486.43792725 -123.61235046]
[499.07635498 -115.24299622]
[508.08758545 -103.05393982]
[512.38354492 -88.51705933]
[511.44537354 -73.38775635]
[505.38641357 -59.49297714]
[494.93832397 -48.51057434]
[481.36273193 -41.76672745]
[466.29898071 -40.07579422]
[451.56610107 -43.64195633]
[438.94311523 -52.03458405]
[429.95434570 -64.24022675]
[415.56933594 -59.98918533]
[401.18432617 -55.73814011]
[386.92736816 -51.07556534]
[372.81027222 -46.00531006]
[358.69317627 -40.93505859]
[344.57608032 -35.86480713]
[330.45898438 -30.79455185]
[316.34185791 -25.72429848]
[316.91824341 -4.27449131]
[309.51989746 15.89540291]
[295.17544556 31.92450142]
[275.90020752 41.53157806]
[254.41299438 43.33971024]
[233.75279236 37.07360458]
[216.84877014 23.60128212]
[204.25830078 31.75479507]
[191.66781616 39.90830994]
[179.31678772 48.42018127]
[167.21539307 57.28339005]
[161.51937866 71.04582214]
[145.81413269 72.95793915]
[133.71275330 81.82114410]
[121.61136627 90.68434906]
[109.50997925 99.54755402]
[116.78860474 108.32453156]
[115.84645081 123.03288269]
[115.84645081 138.03288269]
[123.58374786 151.83305359]
[115.84645081 164.56033325]
[115.84645081 179.56033325]
[115.84645081 194.56033325]
[115.84645081 209.56033325]
[115.84645081 224.56033325]
[115.84645081 239.56033325]
[115.99011993 254.55963135]
[116.27744293 269.55688477]
[116.56476593 284.55413818]
[116.85208893 299.55139160]
[119.41140747 318.76336670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[6 158]
[7 157]
[8 156]
[9 155]
[10 154]
[11 153]
[13 151]
[14 150]
[21 64]
[22 63]
[23 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[33 54]
[34 53]
[35 52]
[65 148]
[66 147]
[67 146]
[68 145]
[70 143]
[71 142]
[75 141]
[76 140]
[77 139]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[105 126]
[106 125]
[107 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
