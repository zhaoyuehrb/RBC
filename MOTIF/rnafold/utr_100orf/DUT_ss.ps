%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:44:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUGUUCCCAGGACGGGCGCGUCUUCAGGGUGGAAGCCUGGCGCACGUCCGGAGGUGCCGAGGACCCAACCAGCCCAAACUCUGGGGGAAAUGACUCCCCUCUGCCCUCGCCCCGCGCUCUGCUACCAUUUCCUUACGUCUCUGCUUCGCUCAGCGAUGCAAAACGCGCGAGGCGCACGGCAGAGGGCCG\
) } def
/len { sequence length } bind def

/coor [
[268.62738037 82.83161926]
[253.63185120 82.46540833]
[238.63632202 82.09919739]
[223.64079285 81.73298645]
[208.64526367 81.36677551]
[201.87136841 84.35095978]
[193.40916443 80.87058258]
[178.42158508 80.26033783]
[163.43400574 79.65009308]
[148.44642639 79.03984833]
[133.45884705 78.42960358]
[134.18505859 124.03101349]
[90.13950348 142.63835144]
[77.06850433 149.99693298]
[63.99750137 157.35552979]
[50.92649841 164.71412659]
[37.85549545 172.07270813]
[29.62573051 185.58499146]
[14.73947334 185.08636475]
[1.66847062 192.44494629]
[-11.40253258 199.80354309]
[-24.47353554 207.16213989]
[-10.98916340 213.73265076]
[-7.55607271 228.33450317]
[-16.69995880 240.22521973]
[-31.69374466 240.65693665]
[-41.50663757 229.31201172]
[-38.92009735 214.53784180]
[-52.54607773 220.80941772]
[-66.17205811 227.08100891]
[-79.79803467 233.35258484]
[-83.74560547 248.48370361]
[-96.52558136 257.49514771]
[-112.10363770 256.13201904]
[-123.12429810 245.03791809]
[-124.38394165 229.45115662]
[-115.28780365 216.73130798]
[-100.13080597 212.88432312]
[-86.06961060 219.72660828]
[-72.44363403 213.45503235]
[-58.81765747 207.18344116]
[-45.19167709 200.91186523]
[-31.83212852 194.09112549]
[-18.76112556 186.73254395]
[-5.69012165 179.37394714]
[7.38088131 172.01535034]
[14.67571926 159.02941895]
[30.49690056 159.00170898]
[43.56790543 151.64312744]
[56.63890839 144.28453064]
[69.70990753 136.92593384]
[82.78091431 129.56733704]
[82.53678894 122.07131958]
[69.30915833 114.99815369]
[82.04854584 107.07926941]
[81.80442810 99.58323669]
[68.28233337 93.09069824]
[54.76024246 86.59815979]
[40.58954239 93.21067047]
[25.49716759 89.11747742]
[16.60927582 76.25126648]
[18.12245941 60.68706512]
[29.32223892 49.77381897]
[44.92042160 48.66442490]
[57.55202103 57.88270569]
[61.25278091 73.07607269]
[74.77487183 79.56861115]
[88.29696655 86.06114960]
[93.31241608 80.48484039]
[88.66912842 66.22160339]
[103.34333038 69.33222198]
[108.35877991 63.75591660]
[100.47451782 50.99510193]
[92.59024811 38.23429108]
[84.70597839 25.47347832]
[69.22289276 24.44701958]
[57.32172394 14.49001980]
[53.57872009 -0.56884927]
[59.43313599 -14.93914509]
[72.63383484 -23.09519768]
[88.10487366 -21.90083504]
[99.89733124 -11.81531715]
[103.47675323 3.28327012]
[97.46678925 17.58921242]
[105.35105896 30.35002327]
[113.23532867 43.11083603]
[121.11959076 55.87164688]
[134.06909180 63.44202042]
[149.05667114 64.05226898]
[164.04425049 64.66251373]
[179.03182983 65.27275848]
[194.01940918 65.88300323]
[209.01147461 66.37124634]
[224.00700378 66.73745728]
[239.00253296 67.10366821]
[253.99806213 67.46987915]
[268.99359131 67.83609009]
[282.18896484 54.25858307]
[300.79977417 54.61566544]
[313.03768921 68.21523285]
[328.03717041 68.09315491]
[343.03668213 67.97107697]
[358.03619385 67.84899139]
[373.03570557 67.72691345]
[388.03518677 67.60482788]
[403.03469849 67.48274994]
[418.03421021 67.36066437]
[433.03369141 67.23858643]
[445.06384277 54.54837036]
[462.21228027 54.47875595]
[473.87634277 66.58487701]
[488.87188721 66.21866608]
[503.86740112 65.85245514]
[518.86291504 65.48624420]
[532.47009277 57.41433334]
[545.38244629 64.83860016]
[560.37799072 64.47238922]
[575.37353516 64.10617828]
[590.36907959 63.73996735]
[605.36456299 63.37375641]
[613.55889893 43.95070648]
[634.17175293 32.92555618]
[659.40319824 37.68466949]
[671.83264160 29.28778076]
[678.52050781 14.31431103]
[694.85760498 12.88878059]
[704.03771973 26.47765160]
[696.61712646 41.10186005]
[680.22955322 41.71727371]
[667.80004883 50.11415863]
[668.89489746 57.53382111]
[683.73419189 55.34418488]
[698.57354736 53.15455246]
[713.41284180 50.96491623]
[728.25219727 48.77528000]
[743.09149170 46.58564758]
[757.93084717 44.39624023]
[760.11999512 59.23563004]
[745.28112793 61.42496872]
[730.44183350 63.61460495]
[715.60247803 65.80423737]
[700.76318359 67.99387360]
[685.92382812 70.18350983]
[671.08453369 72.37314606]
[672.17932129 79.79280853]
[686.50433350 84.24189758]
[700.82934570 88.69099426]
[716.30340576 85.39509583]
[726.16302490 96.55920410]
[740.48803711 101.00830078]
[754.81304932 105.45739746]
[769.13800049 109.90648651]
[786.05780029 108.83022308]
[791.77581787 124.79080200]
[778.02191162 134.70373535]
[764.68890381 124.23149109]
[750.36395264 119.78239441]
[736.03894043 115.33329773]
[721.71392822 110.88420105]
[707.26446533 114.49832916]
[696.38024902 103.01599121]
[682.05523682 98.56690216]
[667.73022461 94.11780548]
[653.09350586 104.16994476]
[636.46130371 106.64309692]
[621.33026123 101.84040070]
[610.53771973 91.51577759]
[605.73077393 78.36928558]
[590.73529053 78.73549652]
[575.73974609 79.10170746]
[560.74420166 79.46791840]
[545.74865723 79.83412933]
[533.21411133 87.87985229]
[519.22912598 80.48177338]
[504.23361206 80.84798431]
[489.23809814 81.21419525]
[474.24255371 81.58040619]
[466.74258423 92.06882477]
[454.38507080 96.38238525]
[441.61285400 92.73271179]
[433.15579224 82.23809052]
[418.15628052 82.36016846]
[403.15676880 82.48225403]
[388.15728760 82.60433197]
[373.15777588 82.72641754]
[358.15826416 82.84849548]
[343.15875244 82.97057343]
[328.15927124 83.09265900]
[313.15975952 83.21473694]
[307.09979248 92.90220642]
[297.00817871 98.51339722]
[285.34155273 98.54973602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[19 46]
[20 45]
[21 44]
[22 43]
[28 42]
[29 41]
[30 40]
[31 39]
[56 68]
[57 67]
[58 66]
[72 87]
[73 86]
[74 85]
[75 84]
[100 189]
[101 188]
[102 187]
[103 186]
[104 185]
[105 184]
[106 183]
[107 182]
[108 181]
[111 177]
[112 176]
[113 175]
[114 174]
[116 172]
[117 171]
[118 170]
[119 169]
[120 168]
[123 130]
[124 129]
[145 163]
[146 162]
[147 161]
[149 159]
[150 158]
[151 157]
[152 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
