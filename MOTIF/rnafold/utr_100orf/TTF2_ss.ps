%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUGGGGGACCCAGCGAAAUGGAAGAAGUUAGGUGUCCAGAGCACGGGACUUUCUGCUUUCUUAAGACCGGCGUCCGCGAUGGCCCGAAUAAAGGAAAGAGCUUCUACGUGUGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[119.92987823 143.64035034]
[107.87223816 147.32554626]
[95.27089691 147.74217224]
[82.99617767 144.86145020]
[75.55245972 157.88415527]
[68.10874176 170.90687561]
[60.66502380 183.92959595]
[53.22130585 196.95230103]
[50.61048889 213.70402527]
[33.79069138 215.83256531]
[27.08914185 200.25933838]
[40.19859314 189.50859070]
[47.64231110 176.48587036]
[55.08602905 163.46316528]
[62.52974319 150.44044495]
[69.97346497 137.41772461]
[64.16964722 131.90400696]
[59.36345673 125.50197601]
[55.68870163 118.38990021]
[53.24770355 110.76579285]
[52.10842514 102.84194183]
[52.30258560 94.83895874]
[53.82478333 86.97966766]
[56.63263321 79.48291016]
[60.64795303 72.55740356]
[49.83683777 62.15933609]
[39.02572250 51.76127243]
[28.21460342 41.36320877]
[17.40348816 30.96514320]
[6.59237051 20.56707764]
[-8.71751118 16.57732964]
[-12.52704906 2.17813897]
[-23.33816528 -8.21992588]
[-34.14928436 -18.61799049]
[-44.96039963 -29.01605606]
[-62.89055634 -32.95606613]
[-67.22071075 -49.90898514]
[-78.29812622 -60.02288055]
[-89.37553406 -70.13677979]
[-100.45294952 -80.25067139]
[-115.62525940 -76.99786377]
[-129.79818726 -83.31510162]
[-137.52197266 -96.77328491]
[-135.82666016 -112.19747162]
[-125.36411285 -123.65674591]
[-110.15741730 -126.74477386]
[-96.05384064 -120.27416229]
[-88.47650909 -106.73297882]
[-90.33905792 -91.32808685]
[-79.26164246 -81.21419525]
[-68.18422699 -71.10029602]
[-57.10681152 -60.98639679]
[-44.93648529 -61.20249557]
[-35.61597443 -52.76147461]
[-34.56233597 -39.82717133]
[-23.75121689 -29.42910767]
[-12.94010067 -19.03104210]
[-2.12898421 -8.63297749]
[12.40761375 -5.38696814]
[16.99043655 9.75596142]
[27.80155182 20.15402603]
[38.61267090 30.55209160]
[49.42378616 40.95015717]
[60.23490143 51.34822083]
[71.04602051 61.74628448]
[90.62819672 52.94844437]
[112.08688354 53.57170105]
[131.12542725 63.49126434]
[143.93173218 80.72094727]
[147.94163513 101.81085968]
[162.65814209 104.71334076]
[177.37464905 107.61581421]
[192.09115601 110.51829529]
[206.80766296 113.42076874]
[221.52418518 116.32324982]
[228.08360291 114.49943542]
[233.69429016 116.10685730]
[236.92030334 119.77728271]
[251.46632385 123.43969727]
[266.01235962 127.10210419]
[280.55838013 130.76451111]
[296.31408691 120.41724396]
[314.35168457 124.67613220]
[323.49771118 140.43141174]
[338.21423340 143.33387756]
[352.93072510 146.23635864]
[367.80450439 148.17816162]
[382.77291870 149.15112305]
[393.44891357 137.72496033]
[408.97796631 135.88572693]
[422.02770996 144.50186157]
[426.43649292 159.50508118]
[420.12258911 173.81134033]
[406.06726074 180.66563416]
[390.90698242 176.83158875]
[381.79998779 164.11952209]
[366.83157349 163.14657593]
[374.01101685 176.31681824]
[368.43630981 190.24243164]
[354.15194702 194.82028198]
[341.52133179 186.72909546]
[339.70806885 171.83909607]
[350.02825928 160.95286560]
[335.31173706 158.05039978]
[320.59524536 155.14791870]
[312.61041260 163.49311829]
[301.45736694 166.92982483]
[289.92437744 164.47599792]
[280.95474243 156.63777161]
[276.89596558 145.31053162]
[262.34994507 141.64811707]
[247.80392456 137.98571777]
[233.25790405 134.32330322]
[218.62170410 131.03976440]
[203.90519714 128.13728333]
[189.18869019 125.23480225]
[174.47216797 122.33232117]
[159.75566101 119.42984772]
[145.03915405 116.52736664]
[139.17802429 127.69046021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[32 58]
[33 57]
[34 56]
[35 55]
[37 52]
[38 51]
[39 50]
[40 49]
[70 119]
[71 118]
[72 117]
[73 116]
[74 115]
[75 114]
[78 113]
[79 112]
[80 111]
[81 110]
[84 105]
[85 104]
[86 103]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
