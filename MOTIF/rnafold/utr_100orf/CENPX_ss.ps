%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUUGGCUGGAGGCGCGGGGCGGGGUUCCGGUGGGCGCGCGUUGAGGCUGCGGUCAUGGAGGGAGCAGGAGCUGGAUCCGGCUUCCGGAAGGAGCUGGUGAGCAGGCUGCUGCACCUGCACUUCAAGGAUGACAAGACCAAAGUGAGCGGGGACG\
) } def
/len { sequence length } bind def

/coor [
[71.64671326 116.56284332]
[57.30894089 120.97060394]
[42.97117233 125.37835693]
[35.53092575 139.06340027]
[20.92759514 143.32923889]
[7.92684603 136.15176392]
[-6.41092587 140.55952454]
[-20.74869728 144.96726990]
[-35.08646774 149.37503052]
[-49.42424011 153.78279114]
[-63.76201248 158.19053650]
[-74.67932129 169.64143372]
[-89.11830902 165.98564148]
[-103.45608521 170.39338684]
[-108.57302856 184.92346191]
[-121.11795044 193.55354309]
[-136.16116333 193.14672852]
[-147.93930054 184.06852722]
[-162.27706909 188.47628784]
[-176.61483765 192.88403320]
[-187.53215027 204.33493042]
[-201.97113037 200.67913818]
[-216.30889893 205.08689880]
[-230.64668274 209.49464417]
[-237.38781738 220.53280640]
[-249.46217346 223.88949585]
[-260.22030640 218.28440857]
[-274.64288330 222.40623474]
[-289.06546021 226.52804565]
[-303.48803711 230.64985657]
[-314.49514771 242.80615234]
[-330.46719360 239.08779907]
[-334.97348022 223.31994629]
[-323.37832642 211.72319031]
[-307.60986328 216.22729492]
[-293.18728638 212.10546875]
[-278.76470947 207.98365784]
[-264.34213257 203.86184692]
[-252.87246704 190.61050415]
[-235.05442810 195.15687561]
[-220.71665955 190.74911499]
[-206.37889099 186.34136963]
[-196.48712158 175.20574951]
[-181.02259827 178.54626465]
[-166.68481445 174.13851929]
[-152.34704590 169.73075867]
[-147.70268250 155.60391235]
[-135.48588562 146.81675720]
[-120.25943756 146.90930176]
[-107.86383820 156.05561829]
[-93.52606201 151.64785767]
[-83.63429260 140.51223755]
[-68.16976929 143.85276794]
[-53.83199692 139.44500732]
[-39.49422455 135.03726196]
[-25.15645218 130.62950134]
[-10.81867981 126.22174835]
[3.51909208 121.81399536]
[10.24268627 108.57281494]
[24.72043610 103.89848328]
[38.56341553 111.04058075]
[52.90118790 106.63282776]
[67.23896027 102.22507477]
[69.80089569 87.10617828]
[78.94872284 74.79920197]
[92.68746185 67.98807526]
[108.02093506 68.15818787]
[114.91040039 54.83394623]
[121.79985809 41.50970459]
[128.68931580 28.18546677]
[128.15478516 12.37329197]
[140.87330627 4.62159920]
[147.76275635 -8.70264053]
[154.65222168 -22.02687836]
[161.54167175 -35.35112000]
[151.72393799 -49.87044907]
[150.58448792 -67.27159882]
[158.34570312 -82.78859711]
[172.80441284 -92.21676636]
[189.95648193 -93.05198669]
[196.31076050 -106.63959503]
[202.66505432 -120.22720337]
[209.01934814 -133.81480408]
[215.37362671 -147.40242004]
[221.72792053 -160.99002075]
[222.53916931 -170.14445496]
[228.34599304 -174.78268433]
[234.96917725 -188.24125671]
[233.34376526 -204.55966187]
[246.81922913 -213.90544128]
[261.53317261 -206.66447449]
[262.34915161 -190.28562927]
[248.42776489 -181.61807251]
[241.80458069 -168.15950012]
[235.31552124 -154.63572693]
[228.96122742 -141.04812622]
[222.60694885 -127.46051788]
[216.25265503 -113.87291718]
[209.89837646 -100.28530884]
[203.54408264 -86.69770050]
[211.88528442 -77.12972260]
[215.98545837 -65.06729889]
[215.19720459 -52.30453110]
[209.60301208 -40.75399017]
[200.00823975 -32.16010666]
[187.82530212 -27.83572769]
[174.86592102 -28.46165848]
[167.97645569 -15.13741970]
[161.08699036 -1.81318080]
[154.19754028 11.51105881]
[155.22485352 26.37019348]
[142.01354980 35.07492447]
[135.12409973 48.39916611]
[128.23463440 61.72340393]
[121.34517670 75.04764557]
[132.05422974 92.87517548]
[129.90562439 113.56062317]
[141.79077148 122.71175385]
[153.67593384 131.86288452]
[165.56108093 141.01400757]
[177.44622803 150.16513062]
[189.51098633 159.07815552]
[201.75054932 167.74952698]
[213.99012756 176.42091370]
[226.22970581 185.09228516]
[236.89624023 182.63610840]
[246.93666077 186.40763855]
[253.08990479 194.92207336]
[253.50198364 205.19869995]
[265.38714600 214.34982300]
[279.87860107 209.05825806]
[294.92541504 212.46368408]
[305.72619629 223.47944641]
[308.83444214 238.59043884]
[303.25830078 252.97482300]
[290.77716064 262.04257202]
[275.37365723 262.90023804]
[261.96301270 255.27409363]
[254.82449341 241.59764099]
[256.23599243 226.23498535]
[244.35084534 217.08386230]
[225.07710266 215.99694824]
[217.55831909 197.33186340]
[205.31875610 188.66049194]
[193.07917786 179.98910522]
[180.83959961 171.31771851]
[176.01467896 171.23660278]
[171.20195007 168.08668518]
[168.29510498 162.05029297]
[156.40995789 152.89915466]
[144.52479553 143.74803162]
[132.63964844 134.59690857]
[120.75449371 125.44577789]
[112.68074036 130.28919983]
[103.56447601 132.64247131]
[94.15516663 132.31214905]
[85.22637939 129.32536316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[13 51]
[14 50]
[18 46]
[19 45]
[20 44]
[22 42]
[23 41]
[24 40]
[27 38]
[28 37]
[29 36]
[30 35]
[67 115]
[68 114]
[69 113]
[70 112]
[72 110]
[73 109]
[74 108]
[75 107]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
[87 94]
[88 93]
[117 153]
[118 152]
[119 151]
[120 150]
[121 149]
[122 146]
[123 145]
[124 144]
[125 143]
[129 141]
[130 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
