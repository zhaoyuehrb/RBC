%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGCCCCAGGGGUCUGGGGAGGUGACAUGUUGGGCUGUGGGAUCCCAGCGCUGGGCCUGCUCCUGCUGCUGCAGGGCUCGGCAGACGGAAAUGGAAUCCAGGGAUUCUUCUACCCAUGGAGCUGUG\
) } def
/len { sequence length } bind def

/coor [
[-15.57824230 426.03536987]
[-26.67516136 436.12786865]
[-41.39710236 439.00268555]
[-55.47562790 433.82626343]
[-64.82886505 422.09951782]
[-66.74530792 407.22482300]
[-75.91291809 419.09725952]
[-85.08052063 430.96972656]
[-94.24812317 442.84216309]
[-103.41573334 454.71459961]
[-112.58333588 466.58706665]
[-114.23590851 482.90270996]
[-129.30093384 489.38171387]
[-142.28079224 479.35897827]
[-139.82293701 463.14505005]
[-124.45578766 457.41946411]
[-115.28817749 445.54699707]
[-106.12057495 433.67456055]
[-96.95296478 421.80209351]
[-87.78536224 409.92965698]
[-78.61775970 398.05722046]
[-77.51151276 388.01916504]
[-68.21382141 381.46743774]
[-61.51812744 368.04476929]
[-54.82243729 354.62210083]
[-59.77454758 340.62167358]
[-53.17537689 326.91381836]
[-38.45685577 321.81451416]
[-31.76116371 308.39184570]
[-32.59264755 304.86437988]
[-31.69020653 300.75216675]
[-28.79560661 296.90618896]
[-24.05515480 294.26077271]
[-16.39753342 281.36267090]
[-8.73991394 268.46456909]
[-1.08229363 255.56648254]
[-8.49103355 242.64454651]
[-8.43669701 227.64945984]
[-0.83374000 214.60868835]
[12.36246967 207.07498169]
[27.65757561 207.15853882]
[35.31519699 194.26045227]
[42.97281647 181.36235046]
[50.63043594 168.46426392]
[58.28805542 155.56616211]
[65.94567871 142.66807556]
[73.60329437 129.76997375]
[81.26091766 116.87187958]
[72.21030426 104.32392120]
[71.71895599 87.22433472]
[81.74581146 71.38510132]
[100.39855194 63.15188980]
[102.94329071 48.36932373]
[105.48803711 33.58675766]
[108.03277588 18.80418968]
[110.57752228 4.02162266]
[113.12226105 -10.76094437]
[115.66700745 -25.54351044]
[118.21174622 -40.32607651]
[104.39749908 -34.48085785]
[91.09725952 -41.41653061]
[87.98268127 -56.08961487]
[97.31863403 -67.83014679]
[112.31619263 -68.10065460]
[122.06979370 -56.70316315]
[126.39128113 -71.06716919]
[130.71276855 -85.43118286]
[135.03425598 -99.79518890]
[130.74932861 -115.62463379]
[142.50579834 -127.05780029]
[158.20964050 -122.33322144]
[161.70606995 -106.31114197]
[149.39826965 -95.47370148]
[145.07678223 -81.10969543]
[140.75529480 -66.74568176]
[136.43380737 -52.38167572]
[132.99430847 -37.78133392]
[130.44956970 -22.99876785]
[127.90483093 -8.21620178]
[125.36008453 6.56636524]
[122.81534576 21.34893227]
[120.27059937 36.13150024]
[117.72586060 50.91406631]
[115.18111420 65.69663239]
[120.25365448 71.22106934]
[131.30268860 61.07618332]
[141.44738770 72.12538910]
[130.39872742 82.26994324]
[135.47125244 87.79437256]
[150.41679382 86.51736450]
[165.36233521 85.24036407]
[174.20906067 72.34580994]
[189.28828430 68.20439911]
[203.48004150 74.77158356]
[210.08343506 88.94654083]
[205.98054504 104.03627777]
[193.10861206 112.91589355]
[177.54539490 111.39270020]
[166.63934326 100.18590546]
[151.69380188 101.46291351]
[136.74826050 102.73992157]
[118.31549072 125.05150604]
[94.15901184 124.52950287]
[86.50138855 137.42759705]
[78.84377289 150.32569885]
[71.18614960 163.22378540]
[63.52853012 176.12188721]
[55.87091064 189.01997375]
[48.21329117 201.91807556]
[40.55567169 214.81616211]
[47.95177078 228.20440674]
[47.65544891 243.39680481]
[39.84640503 256.31521606]
[26.70756149 263.54202271]
[11.81580162 263.22409058]
[4.15818119 276.12219238]
[-3.49943924 289.02029419]
[-11.15705967 301.91839600]
[-18.33850670 315.08755493]
[-25.03419685 328.51019287]
[-20.25487328 343.33572388]
[-27.23646736 356.85281372]
[-41.39978027 361.31781006]
[-48.09547043 374.74044800]
[-54.79116058 388.16311646]
[-40.56381226 383.41101074]
[-25.93465042 386.72576904]
[-15.14521027 397.14633179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[23 125]
[24 124]
[25 123]
[28 120]
[29 119]
[33 118]
[34 117]
[35 116]
[36 115]
[41 110]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[65 76]
[66 75]
[67 74]
[68 73]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
