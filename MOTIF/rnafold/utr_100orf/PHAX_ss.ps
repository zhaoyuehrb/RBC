%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCUCUCCUGACCCGCCGCUGUGCAGCGCAGCGCACCGCGGGAAGAUGGCGUUGGAGGUCGGCGAUAUGGAAGAUGGGCAGCUUUCCGACUCGGAUUCCGACAUGACGGUCGCACCCAGCGACAGGCCGCUGCAAUUGCCAAAAG\
) } def
/len { sequence length } bind def

/coor [
[-46.08609772 304.67932129]
[-54.03073120 317.40264893]
[-65.93751526 326.52560425]
[-80.28972626 330.88610840]
[-95.25914001 329.92871094]
[-108.93891144 323.77532959]
[-119.58646393 313.20983887]
[-125.84548187 299.57809448]
[-126.91867828 284.61651611]
[-122.66934204 270.23101807]
[-113.64051056 258.25561523]
[-127.84657288 263.07095337]
[-134.27557373 274.30364990]
[-146.25930786 277.99935913]
[-157.17512512 272.68911743]
[-171.47956848 277.20388794]
[-185.78399658 281.71868896]
[-200.08842468 286.23345947]
[-214.39286804 290.74822998]
[-228.49424744 295.86203003]
[-242.36752319 301.56573486]
[-256.24078369 307.26943970]
[-270.11407471 312.97314453]
[-283.98733521 318.67684937]
[-297.86062622 324.38055420]
[-311.73388672 330.08425903]
[-324.08416748 341.69921875]
[-338.66409302 333.04693604]
[-334.38607788 316.64160156]
[-317.43759155 316.21099854]
[-303.56433105 310.50729370]
[-289.69104004 304.80355835]
[-275.81777954 299.09985352]
[-261.94451904 293.39614868]
[-248.07122803 287.69244385]
[-234.19795227 281.98873901]
[-233.00329590 279.38165283]
[-230.66879272 277.10800171]
[-227.32257080 275.61773682]
[-223.25793457 275.30358887]
[-218.90763855 276.44378662]
[-204.60321045 271.92901611]
[-190.29876709 267.41424561]
[-175.99433899 262.89947510]
[-161.68991089 258.38470459]
[-150.59533691 244.82501221]
[-132.66192627 248.86489868]
[-118.45586395 244.04954529]
[-112.64904785 236.93067932]
[-102.36511230 235.78669739]
[-90.17433167 227.04684448]
[-77.98355103 218.30700684]
[-65.79277039 209.56716919]
[-53.60198593 200.82731628]
[-41.50401688 191.95944214]
[-29.50020981 182.96452332]
[-17.49639893 173.96961975]
[-11.95110798 160.14575195]
[3.73229337 158.06213379]
[15.73610306 149.06721497]
[17.29202652 144.48664856]
[21.78092766 140.86370850]
[28.44091988 139.95884705]
[40.81325150 131.47796631]
[53.18558502 122.99708557]
[65.55792236 114.51619720]
[59.06787491 101.71830750]
[57.63184357 86.19601440]
[62.31366348 70.02708435]
[73.30805206 55.67161942]
[89.81712341 45.60873413]
[110.07685852 41.93970108]
[114.13704681 27.49966049]
[118.19723511 13.05961609]
[122.25742340 -1.38042712]
[126.31761932 -15.82047081]
[116.00472260 -27.29425240]
[113.55471039 -42.52583313]
[119.74938202 -56.65486526]
[132.61203003 -65.17282867]
[148.03823853 -65.36167908]
[161.10556030 -57.16114426]
[167.64425659 -43.18798828]
[165.56784058 -27.90099716]
[155.53892517 -16.17819405]
[140.75765991 -11.76027966]
[136.69746399 2.67976356]
[132.63728333 17.11980629]
[128.57708740 31.55985069]
[124.51689911 45.99989319]
[130.47105408 50.56037521]
[144.32408142 44.80766296]
[142.37937927 59.68133926]
[148.33352661 64.24182129]
[161.21720886 56.55997086]
[174.10089111 48.87812042]
[186.98457336 41.19626999]
[197.49252319 27.89140701]
[213.18630981 34.30554581]
[211.36730957 51.16163254]
[194.66641235 54.07994843]
[181.78274536 61.76179886]
[168.89906311 69.44364929]
[156.01538086 77.12549591]
[156.88317871 84.57512665]
[171.78242493 82.83954620]
[185.41615295 76.58481598]
[195.57778931 87.61845398]
[188.22427368 100.69231415]
[173.51800537 97.73880005]
[158.61874390 99.47438049]
[159.48654175 106.92400360]
[173.79096985 111.43878174]
[188.09539795 115.95355988]
[202.39984131 120.46833801]
[216.70426941 124.98310852]
[231.54307556 118.88481903]
[245.49215698 126.80964661]
[247.85095215 142.67834473]
[236.81001282 154.31781006]
[220.83898926 152.79924011]
[212.18949890 139.28753662]
[197.88505554 134.77276611]
[183.58062744 130.25799561]
[169.27619934 125.74321747]
[154.97175598 121.22843933]
[126.84999084 144.23283386]
[95.05751038 144.28524780]
[74.03880310 126.88853455]
[61.66646957 135.36941528]
[49.29413605 143.85029602]
[36.92180252 152.33117676]
[24.73102188 161.07102966]
[12.72721195 170.06594849]
[6.32332754 184.53317261]
[-8.50148106 185.97341919]
[-20.50529099 194.96833801]
[-32.50910187 203.96325684]
[-37.54389572 211.66781616]
[-44.86214447 213.01809692]
[-57.05292511 221.75794983]
[-69.24370575 230.49778748]
[-81.43448639 239.23762512]
[-93.62526703 247.97747803]
[-78.62958527 247.61747742]
[-64.46258545 252.54658508]
[-52.92889023 262.13687134]
[-45.49769974 275.16674805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 48]
[12 47]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[50 144]
[51 143]
[52 142]
[53 141]
[54 140]
[55 138]
[56 137]
[57 136]
[59 134]
[60 133]
[63 132]
[64 131]
[65 130]
[66 129]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[94 104]
[95 103]
[96 102]
[97 101]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
