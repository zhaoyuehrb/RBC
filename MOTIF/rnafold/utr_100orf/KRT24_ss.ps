%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUUCGUCAUCACCUCUCCUAUUCGCCUGGACAAGCUCAUGUUUGCAGGAGCACCAUGUCUUGCUCGUCUCGCGCCUCCUCCUCCAGGGCUGGAGGCAGCAGCUCAGCCAGGGUGUCUGCUGGUGGAAGCAGCUUCAGCAGUGGAAGCAGAUGUG\
) } def
/len { sequence length } bind def

/coor [
[116.06766510 210.59458923]
[104.99955750 221.10456848]
[90.46480560 225.76329041]
[75.34928894 223.64575195]
[62.65420914 215.17239380]
[54.90018463 202.02561951]
[53.62677765 186.81570435]
[59.08683014 172.56262207]
[70.19624329 162.09629822]
[84.74922943 157.49485779]
[86.83026123 142.63992310]
[88.91129303 127.78497314]
[90.99232483 112.93003082]
[85.31153107 126.81270599]
[74.88094330 137.59243774]
[61.19276810 143.72708130]
[46.20525360 144.33900452]
[32.06253433 139.34065247]
[20.78788376 129.44711304]
[13.99426651 116.07374573]
[12.65358639 101.13378143]
[16.95764160 86.76454163]
[26.29069138 75.02170563]
[39.31753540 67.58522034]
[54.17453766 65.51895142]
[68.73623657 69.11851501]
[80.91942596 77.86894226]
[88.98181152 90.52004242]
[84.28986359 76.27273560]
[79.59790802 62.02543640]
[74.90596008 47.77813339]
[70.21401215 33.53083038]
[55.58507538 28.70378685]
[46.70727539 16.33293152]
[46.81491852 1.28459585]
[55.65715027 -10.67169666]
[50.96520233 -24.91899872]
[46.27325058 -39.16630173]
[41.58130264 -53.41360092]
[38.86835480 -38.66098022]
[30.20231247 -26.41762543]
[16.39962959 -20.54515076]
[1.56879354 -22.79154778]
[-9.87567234 -32.48815536]
[-14.52722454 -46.74869537]
[-11.00213909 -61.32689667]
[3.76603794 -58.69993210]
[-7.93482161 -68.08554840]
[-19.63568115 -77.47117615]
[-31.33654022 -86.85679626]
[-43.03739929 -96.24241638]
[-54.73825836 -105.62803650]
[-69.67179108 -101.41266632]
[-84.21932220 -106.81164551]
[-92.78703308 -119.74895477]
[-92.08045959 -135.24993896]
[-82.37129974 -147.35414124]
[-67.39292145 -151.40725708]
[-52.90481567 -145.85078430]
[-44.47795486 -132.82130432]
[-45.35263824 -117.32889557]
[-33.65177917 -107.94327545]
[-21.95092010 -98.55765533]
[-10.25006008 -89.17203522]
[1.45079935 -79.78641510]
[13.15165901 -70.40078735]
[20.38307762 -72.38990784]
[14.61431408 -86.23625183]
[7.77185392 -99.58468628]
[17.55349350 -110.95656586]
[31.77489662 -106.18669128]
[32.72162628 -91.21694946]
[34.84591675 -76.36813354]
[42.07733536 -78.35724640]
[47.33199692 -92.40675354]
[52.44672775 -106.50779724]
[57.42101669 -120.65899658]
[62.39530563 -134.81019592]
[67.36959076 -148.96139526]
[72.34388733 -163.11259460]
[77.31817627 -177.26379395]
[73.48377991 -195.24848938]
[87.18063354 -206.18226624]
[91.87258148 -220.42956543]
[96.56452942 -234.67686462]
[95.77602386 -251.61247253]
[111.83149719 -257.05841064]
[121.50919342 -243.13796997]
[110.81183624 -229.98490906]
[106.11988831 -215.73760986]
[101.42793274 -201.49031067]
[106.60087585 -190.51783752]
[102.76680756 -178.58647156]
[91.46937561 -172.28950500]
[86.49508667 -158.13830566]
[81.52079010 -143.98710632]
[76.54650116 -129.83590698]
[71.57221222 -115.68470764]
[66.59792328 -101.53350830]
[67.35079956 -94.13990021]
[61.38150024 -87.15209198]
[56.12683868 -73.10258484]
[55.82860565 -58.10555267]
[60.52055359 -43.85824966]
[65.21250153 -29.61094856]
[69.90444946 -15.36364555]
[84.12084961 -11.00106525]
[93.14916229 1.03859878]
[93.35937500 16.26387978]
[84.46131134 28.83888245]
[89.15326691 43.08618546]
[93.84521484 57.33348465]
[98.53716278 71.58078766]
[103.22911072 85.82808685]
[112.49794006 97.62168121]
[125.23269653 105.54797363]
[141.03735352 106.27141571]
[147.75405884 119.56558990]
[160.48880005 127.49188995]
[173.22355652 135.41818237]
[185.95829773 143.34446716]
[198.69305420 151.27076721]
[211.42781067 159.19706726]
[224.16255188 167.12335205]
[239.96720886 167.84680176]
[246.68391418 181.14097595]
[259.41867065 189.06727600]
[272.15341187 196.99356079]
[284.88815308 204.91986084]
[300.22235107 201.09379578]
[313.72744751 209.30276489]
[317.39117432 224.67652893]
[309.03988647 238.09411621]
[293.62823486 241.59509277]
[280.29971313 233.10240173]
[276.96188354 217.65460205]
[264.22711182 209.72831726]
[251.49237061 201.80201721]
[238.75761414 193.87573242]
[223.86383057 193.71922302]
[216.23626709 179.85810852]
[203.50151062 171.93180847]
[190.76675415 164.00552368]
[178.03201294 156.07922363]
[165.29725647 148.15293884]
[152.56251526 140.22663879]
[139.82775879 132.30033875]
[124.93397522 132.14384460]
[117.30639648 118.28272247]
[104.57164764 110.35643005]
[105.25968170 112.66652679]
[105.84726715 115.01106262]
[103.76623535 129.86601257]
[101.68520355 144.72094727]
[99.60417175 159.57589722]
[112.33251953 167.99919128]
[120.13825989 181.11532593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 155]
[11 154]
[12 153]
[13 152]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[36 106]
[37 105]
[38 104]
[39 103]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[74 102]
[75 101]
[76 99]
[77 98]
[78 97]
[79 96]
[80 95]
[81 94]
[83 91]
[84 90]
[85 89]
[115 150]
[116 149]
[118 147]
[119 146]
[120 145]
[121 144]
[122 143]
[123 142]
[124 141]
[126 139]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
