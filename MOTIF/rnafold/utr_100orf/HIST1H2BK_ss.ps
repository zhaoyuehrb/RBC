%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUUACUUCCCGUUUUCUCGAUCUGCUGCUCGUCUCAGGCUCGUAGUUCGCCUUCAACAUGCCGGAACCAGCGAAGUCCGCUCCCGCGCCCAAGAAGGGCUCGAAGAAAGCCGUGACUAAGGCGCAGAAGAAGGACGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[127.25363159 465.41336060]
[125.41317749 459.01135254]
[125.00341034 452.34722900]
[126.05049896 445.73745728]
[128.51126099 439.49752808]
[132.27488708 433.92663574]
[137.16790771 429.29351807]
[142.96221924 425.82339478]
[140.34149170 411.05410767]
[137.72074890 396.28482056]
[127.87880707 385.10513306]
[133.08599854 370.16540527]
[130.46525574 355.39611816]
[127.84452057 340.62683105]
[125.22378540 325.85754395]
[122.60305023 311.08825684]
[119.98231506 296.31896973]
[117.36157990 281.54968262]
[113.07486725 275.48248291]
[114.83674622 266.46685791]
[112.50468445 251.64926147]
[102.89348602 244.25210571]
[100.85385132 231.88955688]
[108.02391052 221.12825012]
[105.98141479 206.26795959]
[103.93891144 191.40766907]
[101.89641571 176.54739380]
[99.85391235 161.68710327]
[95.80718231 155.45726013]
[97.91947174 146.51724243]
[96.16731262 131.61993408]
[94.41514587 116.72262573]
[82.53365326 102.40069580]
[90.11054230 85.40427399]
[87.77848053 70.58666229]
[85.44641876 55.76905823]
[73.69385529 49.12775040]
[68.00989532 37.09869385]
[70.27433014 24.18630028]
[79.43585205 15.08399296]
[77.39334869 0.22370422]
[75.35085297 -14.63658524]
[73.30834961 -29.49687386]
[61.55503464 -33.92087555]
[52.86295700 -42.88455963]
[48.84938812 -54.63143158]
[50.22313309 -66.89597321]
[56.66022873 -77.34053802]
[66.87757111 -84.00090790]
[65.41641998 -98.92957306]
[63.95526123 -113.85823822]
[62.49411011 -128.78689575]
[60.59668732 -143.66641235]
[58.26462555 -158.48402405]
[55.93256760 -173.30162048]
[53.60050583 -188.11923218]
[51.26844406 -202.93684387]
[37.94655228 -207.29096985]
[27.85609055 -216.92219543]
[22.93360901 -229.90307617]
[24.08961678 -243.67121887]
[31.04074097 -255.53518677]
[42.37637329 -263.20050049]
[40.33387375 -278.06079102]
[38.14648819 -292.90045166]
[35.81442642 -307.71804810]
[33.48236847 -322.53564453]
[25.11027718 -327.06539917]
[19.86419868 -334.84225464]
[18.83064842 -344.02706909]
[22.11760712 -352.51776123]
[28.85872269 -358.43026733]
[27.39756775 -373.35894775]
[25.93641281 -388.28759766]
[24.47525978 -403.21627808]
[13.04275799 -414.47137451]
[14.85754299 -430.41146851]
[28.52746773 -438.80865479]
[43.56613541 -433.22134399]
[48.43716812 -417.93563843]
[39.40392303 -404.67742920]
[40.86507797 -389.74874878]
[42.32623291 -374.82009888]
[43.78738785 -359.89141846]
[57.26400757 -344.29574585]
[48.29997253 -324.86770630]
[50.63203430 -310.05010986]
[52.96409607 -295.23248291]
[57.13161469 -289.08282471]
[55.19416428 -280.10327148]
[57.23666382 -265.24298096]
[72.32643127 -259.52804565]
[82.54522705 -246.91966248]
[85.03992462 -230.78825378]
[79.03864288 -215.50758362]
[66.08605194 -205.26890564]
[68.41811371 -190.45129395]
[70.75017548 -175.63368225]
[73.08223724 -160.81607056]
[75.41429901 -145.99847412]
[78.08441162 -143.62319946]
[79.71247864 -139.81542969]
[79.62831879 -135.09062195]
[77.42277527 -130.24804688]
[78.88392639 -115.31938934]
[80.34508514 -100.39072418]
[81.80623627 -85.46205902]
[97.41182709 -77.28104401]
[105.08454132 -61.24557877]
[101.60313416 -43.65357590]
[88.16864014 -31.53937340]
[90.21114349 -16.67908478]
[92.25363922 -1.81879556]
[94.29614258 13.04149342]
[108.10845947 22.59620285]
[110.81415558 39.51331711]
[100.26402283 53.43699646]
[102.59608459 68.25460052]
[104.92814636 83.07221222]
[113.34681702 88.48048401]
[117.46634674 97.59930420]
[115.95980835 107.49140930]
[109.31246185 114.97045898]
[111.06462097 129.86778259]
[112.81678009 144.76509094]
[114.71420288 159.64459229]
[116.75670624 174.50488281]
[118.79920197 189.36517334]
[120.84170532 204.22546387]
[122.88420105 219.08575439]
[134.51348877 233.33288574]
[127.32228851 249.31719971]
[129.65435791 264.13479614]
[132.13085938 278.92895508]
[134.75160217 293.69824219]
[137.37232971 308.46752930]
[139.99307251 323.23681641]
[142.61380005 338.00610352]
[145.23454285 352.77536011]
[147.85527039 367.54464722]
[157.88467407 379.78073120]
[152.49003601 393.66409302]
[155.11076355 408.43338013]
[157.73150635 423.20263672]
[179.37023926 434.70437622]
[185.73377991 458.11682129]
[173.14987183 478.57449341]
[178.58454895 492.55532837]
[184.01922607 506.53619385]
[197.13905334 516.37500000]
[194.90992737 532.62194824]
[179.62498474 538.56353760]
[167.00807190 528.08758545]
[170.03837585 511.97085571]
[164.60369873 497.99002075]
[159.16902161 484.00915527]
[152.60174561 484.14230347]
[146.14663696 482.84552002]
[140.11204529 480.17395020]
[134.78770447 476.24850464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 144]
[9 143]
[10 142]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[20 133]
[21 132]
[24 130]
[25 129]
[26 128]
[27 127]
[28 126]
[30 125]
[31 124]
[32 123]
[34 119]
[35 118]
[36 117]
[40 114]
[41 113]
[42 112]
[43 111]
[49 107]
[50 106]
[51 105]
[52 104]
[53 100]
[54 99]
[55 98]
[56 97]
[57 96]
[63 91]
[64 90]
[65 88]
[66 87]
[67 86]
[72 84]
[73 83]
[74 82]
[75 81]
[147 156]
[148 155]
[149 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
