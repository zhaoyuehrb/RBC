%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUAGUCGCCCUUCUCCACGUGGUCUUGGCUCGCCCCGCCCUUCCUUGUAAGAUGGCGGCGCCCAGGUGGAGCGCGUCGGGCCCCUGGAUCCGGGGAAACGGCCAAGGUUGCGGGAGUCUCUUCACUCUCGUCUCAAAGCCAUUUUGUGCCG\
) } def
/len { sequence length } bind def

/coor [
[107.59574127 128.17877197]
[99.45482635 129.59817505]
[91.12416840 128.67977905]
[83.27091217 125.43147278]
[76.54211426 120.05023956]
[71.51148987 112.91130829]
[68.63080597 104.54244995]
[68.18989563 95.58510590]
[70.28887939 86.74527740]
[74.82511139 78.73786926]
[60.65613174 73.81444550]
[46.48715973 68.89101410]
[32.31818390 63.96759033]
[14.12242889 74.39333344]
[-5.61235142 68.21124268]
[-14.35851479 49.79246140]
[-28.87967110 46.03267670]
[-43.40082932 42.27288818]
[-57.92198563 38.51309967]
[-72.44313812 34.75331116]
[-86.96430206 30.99352264]
[-102.26330566 35.02478027]
[-112.64491272 24.34435272]
[-127.16606903 20.58456421]
[-141.68722534 16.82477570]
[-133.07331848 29.10486794]
[-132.32165527 44.08602142]
[-139.66313171 57.16665268]
[-152.84272766 64.32893372]
[-167.81222534 63.37290573]
[-179.97361755 54.59222794]
[-185.59144592 40.68395233]
[-182.94012451 25.92012787]
[-172.83404541 14.83558750]
[-158.37741089 10.83503914]
[-171.97558594 4.50342035]
[-187.75205994 5.69247341]
[-196.02392578 -6.69402409]
[-209.62211609 -13.02564335]
[-223.22029114 -19.35726166]
[-236.81848145 -25.68888092]
[-250.41667175 -32.02050018]
[-262.81869507 -28.34020996]
[-274.03363037 -33.93932343]
[-278.26400757 -45.31130981]
[-291.73107910 -51.91722107]
[-305.95684814 -45.42399979]
[-321.01428223 -49.64384460]
[-329.79379272 -62.58427048]
[-328.14990234 -78.13520813]
[-316.85882568 -88.95397949]
[-301.25186157 -89.93228912]
[-288.69815063 -80.60820770]
[-285.12518311 -65.38429260]
[-271.65811157 -58.77837753]
[-254.26667786 -60.92928314]
[-244.08505249 -45.61868286]
[-230.48686218 -39.28706360]
[-216.88867188 -32.95544434]
[-203.29049683 -26.62382698]
[-189.69230652 -20.29220772]
[-174.88848877 -21.93414116]
[-165.64396667 -9.09476376]
[-152.04579163 -2.76314425]
[-137.92742920 2.30361938]
[-123.40628052 6.06340742]
[-108.88512421 9.82319546]
[-94.62477112 5.52301502]
[-83.20451355 16.47236633]
[-68.68335724 20.23215485]
[-54.16219711 23.99194145]
[-39.64104080 27.75172997]
[-25.11988449 31.51151848]
[-10.59872723 35.27130508]
[-4.29816771 28.18094444]
[4.21886826 23.87546539]
[13.78004265 22.99538422]
[23.05157852 25.70638657]
[30.72432137 31.67019653]
[35.69857025 40.08617401]
[37.24161148 49.79861450]
[51.41058731 54.72204208]
[65.57955933 59.64546967]
[79.74853516 64.56890106]
[93.91751099 59.64546967]
[101.98056793 46.99686813]
[110.04362488 34.34826660]
[118.10667419 21.69966316]
[126.16973114 9.05106068]
[126.34870911 -7.34711075]
[140.77020264 -15.15431118]
[154.59863281 -6.33916187]
[153.60847473 10.03006649]
[138.81832886 17.11411476]
[130.75527954 29.76271820]
[122.69222260 42.41131973]
[114.62916565 55.05992126]
[106.56611633 67.70852661]
[117.83233643 73.66914368]
[125.62353516 83.18203735]
[128.98896790 94.54075623]
[127.73310852 105.86885071]
[141.06352234 112.74633789]
[154.39395142 119.62383270]
[167.72436523 126.50132751]
[181.12379456 133.24337769]
[194.59086609 139.84928894]
[208.05793762 146.45520020]
[221.71958923 152.64868164]
[235.56318665 158.42402649]
[249.40679932 164.19937134]
[263.25039673 169.97471619]
[277.36874390 175.04148865]
[291.72561646 179.38665771]
[306.08248901 183.73184204]
[320.43933105 188.07701111]
[334.79620361 192.42219543]
[349.15304565 196.76736450]
[363.50991821 201.11254883]
[377.86679077 205.45771790]
[391.68014526 197.77877808]
[406.85437012 202.19676208]
[414.38684082 216.09054565]
[409.80868530 231.21722412]
[395.83602905 238.60237122]
[380.75860596 233.86453247]
[373.52160645 219.81459045]
[359.16473389 215.46940613]
[344.80789185 211.12423706]
[330.45101929 206.77905273]
[316.09414673 202.43386841]
[301.73730469 198.08869934]
[287.38043213 193.74351501]
[273.02359009 189.39834595]
[277.37020874 203.75476074]
[269.02786255 216.22093201]
[254.09881592 217.67808533]
[243.50335693 207.06034851]
[244.99188232 192.13438416]
[257.47506714 183.81832886]
[243.63145447 178.04298401]
[229.78785706 172.26763916]
[215.94424438 166.49229431]
[212.51579285 167.52827454]
[208.40896606 166.91810608]
[204.42025757 164.35873413]
[201.45202637 159.92227173]
[187.98495483 153.31636047]
[174.51788330 146.71043396]
[167.08387756 146.58755493]
[160.84687805 139.83174133]
[147.51646423 132.95425415]
[134.18603516 126.07675934]
[120.85561371 119.19927216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 84]
[11 83]
[12 82]
[13 81]
[16 74]
[17 73]
[18 72]
[19 71]
[20 70]
[21 69]
[23 67]
[24 66]
[25 65]
[35 64]
[36 63]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[45 55]
[46 54]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
[102 154]
[103 153]
[104 152]
[105 151]
[106 149]
[107 148]
[108 147]
[109 143]
[110 142]
[111 141]
[112 140]
[113 134]
[114 133]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
