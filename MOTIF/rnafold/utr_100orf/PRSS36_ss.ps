%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGAGCCCUGCAGGGAGCAGACCUUCACUUGGCUCUGCCUCCGCUGACUCUAGCGCCAUGGCCCGGCACCUGCUCCUCCCCCUUGUGAUGCUUGUCAUCAGUCCCAUCCCAGGAGCCUUCCAGGACUCAGCUCUCAGUCCUACCCAGGAAGAACCUG\
) } def
/len { sequence length } bind def

/coor [
[63.91001129 179.40977478]
[61.77135086 182.95803833]
[58.79766083 184.94238281]
[54.44338989 199.29647827]
[50.08912277 213.65058899]
[54.33790207 229.48977661]
[42.55534744 240.89607239]
[26.86234283 236.13565063]
[23.40250397 220.10562134]
[35.73501587 209.29631042]
[40.08928680 194.94221497]
[44.44355774 180.58810425]
[48.37323761 166.11199951]
[51.87491608 151.52645874]
[55.37659836 136.94090271]
[43.97050858 127.19918060]
[30.11231422 132.93943787]
[16.25412178 138.67968750]
[2.39592862 144.41993713]
[-11.40524292 150.29595947]
[-25.14806175 156.30718994]
[-38.89088058 162.31842041]
[-52.63370132 168.32966614]
[-66.31684113 174.47552490]
[-79.93898773 180.75541687]
[-83.87732697 195.88894653]
[-96.65179443 204.90818787]
[-112.23068237 203.55456543]
[-123.25811005 192.46719360]
[-124.52727509 176.88119507]
[-115.43890381 164.15580750]
[-100.28425598 160.29956055]
[-86.21888733 167.13327026]
[-72.59674072 160.85337830]
[-67.81409454 155.16758728]
[-58.64493179 154.58683777]
[-44.90211487 148.57560730]
[-31.15929413 142.56437683]
[-17.41647530 136.55314636]
[-12.52311897 130.96235657]
[-3.34432292 130.56175232]
[10.51387024 124.82149506]
[24.37206268 119.08124542]
[38.23025513 113.34098816]
[38.37751770 98.34171295]
[24.63469696 92.33048248]
[10.89187717 86.31924438]
[-2.85094213 80.30801392]
[-19.07973099 82.66564941]
[-29.02206802 69.62409973]
[-22.45013046 54.59939957]
[-6.12456179 53.04766846]
[3.16029024 66.56519318]
[16.90311050 72.57643127]
[30.64592934 78.58766174]
[44.38874817 84.59889221]
[53.55906296 72.72853851]
[44.27265549 60.94878769]
[34.98624420 49.16903305]
[19.35147667 48.87236404]
[7.59928370 38.55635834]
[5.27869272 23.09191704]
[13.48541546 9.78088093]
[28.34449005 4.90830994]
[42.83991241 10.77488422]
[50.12739182 24.61058807]
[46.76599884 39.88262177]
[56.05241013 51.66237640]
[65.33882141 63.44213104]
[80.27026367 56.54253006]
[95.78799438 55.12164688]
[110.04393768 58.78138351]
[121.51721954 66.54904938]
[129.17628479 77.04663086]
[137.99307251 64.91136932]
[146.80984497 52.77611923]
[155.62661743 40.64086151]
[164.44340515 28.50560760]
[173.26017761 16.37035179]
[163.46606445 3.20699310]
[158.20394897 -12.31395817]
[157.97372437 -28.68247986]
[162.78628540 -44.30979919]
[172.16365051 -57.68260193]
[185.18637085 -67.50958252]
[200.58366394 -72.84613037]
[216.85742188 -73.18511200]
[232.42802429 -68.50505829]
[240.76156616 -80.97709656]
[249.09512329 -93.44914246]
[257.42868042 -105.92118835]
[265.76223755 -118.39323425]
[264.05523682 -134.34521484]
[275.56353760 -145.52279663]
[291.45898438 -143.35148621]
[299.54791260 -129.49693298]
[293.62521362 -114.58716583]
[278.23428345 -110.05967712]
[269.90072632 -97.58763123]
[261.56716919 -85.11559296]
[253.23361206 -72.64354706]
[244.90005493 -60.17150116]
[253.81713867 -49.78570938]
[259.73211670 -37.42682266]
[262.23202515 -23.94237328]
[261.13830566 -10.25899982]
[256.51956177 2.68122721]
[248.68733215 13.98566628]
[238.17509460 22.87268066]
[225.70188904 28.72568130]
[212.12316895 31.13590813]
[198.37208557 29.93096352]
[185.39543152 25.18713188]
[176.57865906 37.32238770]
[167.76187134 49.45764160]
[158.94509888 61.59289551]
[150.12832642 73.72814941]
[141.31153870 85.86340332]
[143.65806580 100.67873383]
[155.79331970 109.49550629]
[167.92857361 118.31228638]
[180.06382751 127.12906647]
[192.19908142 135.94584656]
[204.75233459 144.15655518]
[217.69334412 151.74140930]
[230.63436890 159.32627869]
[243.57537842 166.91113281]
[256.51638794 174.49600220]
[269.45742798 182.08085632]
[283.61947632 175.73925781]
[298.79733276 178.96598816]
[309.15484619 190.52029419]
[310.70925903 205.95932007]
[302.86294556 219.34643555]
[288.63293457 225.53402710]
[273.49096680 222.14283752]
[263.25942993 210.47685242]
[261.87255859 195.02188110]
[248.93153381 187.43701172]
[235.99052429 179.85215759]
[223.04949951 172.26728821]
[210.10848999 164.68243408]
[197.16748047 157.09756470]
[198.07316589 172.07020569]
[187.06776428 182.26240540]
[172.20852661 180.21224976]
[164.37420654 167.42071533]
[169.30047607 153.25271606]
[183.38229370 148.08110046]
[171.24703979 139.26432800]
[159.11178589 130.44754028]
[146.97653198 121.63076782]
[134.84127808 112.81398773]
[127.68327332 129.47456360]
[112.50076294 141.92619324]
[91.82756042 146.34873962]
[69.96214294 140.44258118]
[66.46046448 155.02813721]
[62.95878601 169.61367798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[13 159]
[14 158]
[15 157]
[16 44]
[17 43]
[18 42]
[19 41]
[20 39]
[21 38]
[22 37]
[23 36]
[24 34]
[25 33]
[45 56]
[46 55]
[47 54]
[48 53]
[57 69]
[58 68]
[59 67]
[74 118]
[75 117]
[76 116]
[77 115]
[78 114]
[79 113]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[119 153]
[120 152]
[121 151]
[122 150]
[123 149]
[124 143]
[125 142]
[126 141]
[127 140]
[128 139]
[129 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
