%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCUUUUCGGUUGCCGUUGUCUUUUUUCCUUGACUCGGAAAUGUCCGGUCGUGGUAAGCAGGGUGGCAAGGCGCGCGCCAAGGCUAAGUCGCGCUCGUCGCGCGCGGGGCUGCAGUUCCCCGUGGGCCGCGUGCACCGGU\
) } def
/len { sequence length } bind def

/coor [
[105.99794769 221.07969666]
[96.39669800 233.06767273]
[82.08196259 238.63400269]
[66.90432739 236.28134155]
[54.94650269 226.64256287]
[49.42508316 212.31045532]
[51.82530594 197.14025879]
[61.50151443 185.21270752]
[75.85086823 179.73623657]
[78.14855194 164.91326904]
[80.44622803 150.09028625]
[82.74391174 135.26730347]
[85.04159546 120.44433594]
[76.93198395 107.82553101]
[62.49403763 103.75788879]
[48.05609131 99.69024658]
[33.61814499 95.62260437]
[19.18019867 91.55496216]
[9.92836189 97.45748901]
[-0.82349581 97.25358582]
[-9.48210049 91.25543976]
[-13.28868008 81.67099762]
[-27.53402328 76.97310638]
[-41.77936554 72.27521515]
[-57.30851364 75.30113220]
[-66.97220612 63.96701050]
[-81.21754456 59.26911545]
[-95.46289062 54.57122421]
[-110.99203491 57.59714508]
[-120.65573120 46.26301956]
[-134.90107727 41.56512833]
[-150.43022156 44.59104919]
[-160.09390259 33.25692368]
[-174.33924866 28.55903435]
[-188.58459473 23.86114120]
[-202.82994080 19.16324997]
[-212.03941345 19.44178581]
[-217.33462524 14.20252800]
[-231.47332764 9.19283581]
[-245.61203003 4.18314457]
[-259.75073242 -0.82654667]
[-275.76852417 2.68942547]
[-286.62097168 -9.60514641]
[-281.14401245 -25.06266022]
[-264.97186279 -27.78175163]
[-254.74104309 -14.96525192]
[-240.60234070 -9.95556068]
[-226.46363831 -4.94586945]
[-212.32493591 0.06382217]
[-198.13204956 4.91790676]
[-183.88670349 9.61579800]
[-169.64135742 14.31369019]
[-155.39601135 19.01158142]
[-140.88578796 15.64963818]
[-130.20318604 27.31978607]
[-115.95783997 32.01767731]
[-101.44761658 28.65573502]
[-90.76499939 40.32588196]
[-76.51965332 45.02377319]
[-62.27431107 49.72166443]
[-47.76408768 46.35972214]
[-37.08147430 58.02986908]
[-22.83613205 62.72776031]
[-8.59078789 67.42565155]
[9.93532085 62.04771423]
[23.24784088 77.11701965]
[37.68578720 81.18466187]
[52.12373352 85.25230408]
[66.56167603 89.31994629]
[80.99962616 93.38758087]
[90.41667938 81.49060059]
[105.96861267 79.27406311]
[115.15440369 67.41568756]
[124.34019470 55.55730057]
[133.52598572 43.69892120]
[135.86022949 28.05085754]
[149.77102661 22.72741508]
[158.95681763 10.86903381]
[168.14260864 -0.98934788]
[177.32839966 -12.84772968]
[178.04440308 -18.17536163]
[180.52432251 -22.25010109]
[183.97445679 -24.60298157]
[187.53063965 -25.15806961]
[197.47747803 -36.38573074]
[207.42431641 -47.61339188]
[213.40185547 -63.47861862]
[230.30180359 -62.12661743]
[233.68101501 -45.51284790]
[218.65197754 -37.66655350]
[208.70513916 -26.43889046]
[198.75830078 -15.21122932]
[189.18678284 -3.66193748]
[180.00099182 8.19644451]
[170.81520081 20.05482674]
[161.62940979 31.91320801]
[159.95219421 46.71308136]
[145.38436890 52.88471222]
[136.19857788 64.74309540]
[127.01278687 76.60147858]
[117.82699585 88.45986176]
[120.77354431 103.16760254]
[133.81849670 110.57227325]
[146.86346436 117.97694397]
[159.90841675 125.38161469]
[172.95336914 132.78628540]
[185.99832153 140.19096375]
[199.04327393 147.59562683]
[212.08822632 155.00030518]
[224.75843811 152.32925415]
[235.49166870 158.82699585]
[238.78025818 170.51824951]
[251.65940857 178.20770264]
[264.53854370 185.89715576]
[277.41769409 193.58659363]
[291.63064575 187.35993958]
[306.78189087 190.70951843]
[317.04544067 202.34735107]
[318.47476196 217.79846191]
[310.52023315 231.12156677]
[296.24057007 237.19367981]
[281.12655640 233.67993164]
[270.98986816 221.93144226]
[269.72824097 206.46574402]
[256.84909058 198.77629089]
[243.96995544 191.08685303]
[231.09080505 183.39739990]
[213.58981323 184.12135315]
[204.68356323 168.04525757]
[191.63861084 160.64057922]
[178.59365845 153.23591614]
[165.54869080 145.83123779]
[152.50373840 138.42657471]
[139.45878601 131.02189636]
[126.41383362 123.61723328]
[113.36887360 116.21256256]
[99.86457062 122.74201965]
[97.56689453 137.56498718]
[95.26921082 152.38796997]
[92.97152710 167.21095276]
[90.67384338 182.03392029]
[102.69185638 191.59754944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 141]
[10 140]
[11 139]
[12 138]
[13 137]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[22 64]
[23 63]
[24 62]
[26 60]
[27 59]
[28 58]
[30 56]
[31 55]
[33 53]
[34 52]
[35 51]
[36 50]
[38 49]
[39 48]
[40 47]
[41 46]
[72 101]
[73 100]
[74 99]
[75 98]
[77 96]
[78 95]
[79 94]
[80 93]
[84 92]
[85 91]
[86 90]
[102 136]
[103 135]
[104 134]
[105 133]
[106 132]
[107 131]
[108 130]
[109 129]
[112 127]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
