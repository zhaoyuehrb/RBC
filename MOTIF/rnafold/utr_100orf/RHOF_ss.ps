%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUGGCUCCGCUAGUGCCCGGCGCGCCGCCGCCAGUGCUGCGGGCUCCGGGCAAUGGAUGCCCCCGGGGCCCUGGCCCAGACCGCCGCCCCCGGUCCGGGCAGGAAGGAGCUGAAGAUCGUGAUCGUGGGCGACGGCGGCUGCGGCAAGACCU\
) } def
/len { sequence length } bind def

/coor [
[62.69149780 169.97886658]
[49.08284760 163.66976929]
[40.34320450 151.47885132]
[38.73724365 136.56506348]
[44.68110275 122.79297638]
[56.63676834 113.73037720]
[41.63980865 113.42832184]
[26.64285088 113.12626648]
[11.64589310 112.82421112]
[-3.35106540 112.52215576]
[-18.34802437 112.22009277]
[-33.34498215 111.91803741]
[-48.32597733 112.67291260]
[-63.21660995 114.48096466]
[-78.10723877 116.28900909]
[-90.87416840 125.63332367]
[-104.44126892 119.48654175]
[-119.33190155 121.29459381]
[-134.22253418 123.10264587]
[-149.11317444 124.91069031]
[-164.00379944 126.71874237]
[-178.89443970 128.52679443]
[-193.78506470 130.33483887]
[-206.55200195 139.67915344]
[-220.11909485 133.53237915]
[-235.00973511 135.34042358]
[-243.20671082 139.50263977]
[-250.21803284 137.03184509]
[-265.14205933 138.53967285]
[-280.06607056 140.04750061]
[-294.99011230 141.55532837]
[-307.94259644 150.64065552]
[-321.38317871 144.22192383]
[-336.30718994 145.72975159]
[-349.28958130 155.74922180]
[-364.35299683 149.26644897]
[-366.00146484 132.95037842]
[-352.53921509 123.58555603]
[-337.81503296 130.80572510]
[-322.89102173 129.29789734]
[-311.00598145 120.32041931]
[-296.49792480 126.63130188]
[-281.57391357 125.12347412]
[-266.64990234 123.61564636]
[-251.72586060 122.10781860]
[-236.81777954 120.44979095]
[-221.92715454 118.64173889]
[-210.22529602 109.42675018]
[-195.59312439 115.44421387]
[-180.70248413 113.63616180]
[-165.81185913 111.82810974]
[-150.92121887 110.02005768]
[-136.03059387 108.21201324]
[-121.13995361 106.40396118]
[-106.24932098 104.59590912]
[-94.54747772 95.38092041]
[-79.91529083 101.39837646]
[-65.02465820 99.59033203]
[-50.13402557 97.78227997]
[-61.72813034 88.26509857]
[-64.65865326 73.55414581]
[-57.59666443 60.32054138]
[-43.74462891 54.56544876]
[-29.38416100 58.89868164]
[-21.02743340 71.35520935]
[-22.46405029 86.28625488]
[-33.04292679 96.92108154]
[-18.04596901 97.22313690]
[-3.04900956 97.52519226]
[11.94794846 97.82724762]
[26.94490814 98.12930298]
[41.94186401 98.43135834]
[56.93882370 98.73341370]
[71.89018250 97.52642059]
[86.64448547 94.82259369]
[97.41803741 85.91068268]
[110.65169525 90.42311096]
[125.40599060 87.71928406]
[140.16029358 85.01545715]
[154.88661194 82.16320801]
[169.58348083 79.16281891]
[184.28033447 76.16243744]
[192.11581421 71.35413361]
[199.30322266 73.25274658]
[214.05752563 70.54891968]
[228.81181335 67.84509277]
[243.56611633 65.14127350]
[258.32040405 62.43744659]
[273.07470703 59.73361969]
[287.75762939 45.97661972]
[305.69445801 53.10866547]
[320.32791138 49.81293488]
[334.96136475 46.51720810]
[349.56091309 43.07430267]
[364.12503052 39.48456573]
[378.68917847 35.89483261]
[393.25329590 32.30509567]
[407.81741333 28.71536064]
[422.34466553 24.97916222]
[436.83355713 21.09687614]
[451.32244873 17.21459007]
[465.42895508 1.13313198]
[485.15609741 7.09376907]
[499.38415527 2.34374905]
[513.61218262 -2.40627074]
[519.18450928 -17.01735306]
[532.86999512 -24.58309937]
[548.20690918 -21.53119659]
[557.95349121 -9.30265808]
[557.50781250 6.32857323]
[547.08026123 17.98190689]
[531.59442139 20.15499687]
[518.36224365 11.82177544]
[504.13418579 16.57179642]
[489.90612793 21.32181549]
[487.25009155 29.89848137]
[480.82434082 36.36560059]
[472.00155640 39.16021347]
[462.75219727 37.52397156]
[455.20471191 31.70347786]
[440.71585083 35.58576202]
[426.22695923 39.46804810]
[420.54739380 44.26454544]
[411.40716553 43.27948761]
[396.84301758 46.86922455]
[382.27890015 50.45895767]
[367.71478271 54.04869461]
[353.15063477 57.63842773]
[347.37567139 62.31958389]
[338.25711060 61.15066910]
[323.62365723 64.44639587]
[308.99017334 67.74212646]
[304.28717041 76.89257050]
[295.11682129 82.02429962]
[284.41860962 81.21350098]
[275.77853394 74.48791504]
[261.02423096 77.19174194]
[246.26994324 79.89556885]
[231.51564026 82.59939575]
[216.76133728 85.30322266]
[202.00704956 88.00704956]
[187.28071594 90.85929871]
[172.58386230 93.85968018]
[157.88699341 96.86006927]
[151.92820740 101.30489349]
[142.86412048 99.76975250]
[128.10981750 102.47357941]
[113.35551453 105.17740631]
[102.58196259 114.08931732]
[89.34830475 109.57688904]
[74.59400940 112.28071594]
[87.84685516 119.30653381]
[95.92395782 131.94616699]
[96.73233032 146.92436218]
[90.06250763 160.35989380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 59]
[14 58]
[15 57]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[25 47]
[26 46]
[28 45]
[29 44]
[30 43]
[31 42]
[33 40]
[34 39]
[74 151]
[75 150]
[77 148]
[78 147]
[79 146]
[80 144]
[81 143]
[82 142]
[84 141]
[85 140]
[86 139]
[87 138]
[88 137]
[89 136]
[91 132]
[92 131]
[93 130]
[94 128]
[95 127]
[96 126]
[97 125]
[98 124]
[99 122]
[100 121]
[101 120]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
