%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUUCCCCCAACCCUGAGGAUGUGCCCCGGAGGCCAGAACCUGAGCCCUCAAGCUCCAAUAAGAAAAAGAAGAAAAGAAAGUGGCUGCGGCAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[85.75830078 346.43933105]
[74.99697876 334.86480713]
[75.65547180 319.07424927]
[87.34311676 308.43591309]
[87.80961609 293.44314575]
[88.27610779 278.45040894]
[88.74260712 263.45767212]
[81.40486908 250.49592590]
[89.56761169 236.94305420]
[90.03410339 221.95031738]
[82.69636536 208.98857117]
[90.85910797 195.43569946]
[91.32560730 180.44296265]
[83.98786163 167.48121643]
[92.15060425 153.92834473]
[92.61710358 138.93559265]
[92.85037994 123.93741608]
[92.85037994 108.93741608]
[84.08904266 109.77050781]
[74.64648438 105.28029633]
[61.14644241 98.74202728]
[47.64640045 92.20375824]
[27.76706314 94.73287201]
[17.30213165 78.59912109]
[3.42172527 72.91279602]
[-5.88663864 72.52939606]
[-10.79749870 66.82773590]
[-24.49434662 60.71247864]
[-38.19119644 54.59722519]
[-53.62822342 58.96503067]
[-66.58348083 49.50242233]
[-67.11879730 33.46830368]
[-54.82352829 23.16267586]
[-39.12955093 26.49113655]
[-32.07594299 40.90037537]
[-18.37909317 47.01562881]
[-4.68224430 53.13088226]
[9.10805130 59.03238678]
[22.98845863 64.71871185]
[32.22574997 59.86601639]
[42.81938171 61.01893234]
[51.13588715 68.03082275]
[54.18466949 78.70372009]
[67.68470764 85.24198914]
[81.18474579 91.78025055]
[94.36515045 84.61945343]
[96.22663116 69.73540497]
[98.08811188 54.85136032]
[99.94959259 39.96731186]
[90.05087280 27.64696503]
[91.84626007 11.94498634]
[104.27056885 2.17707992]
[119.95269012 4.13837242]
[129.58869934 16.66526413]
[127.46170807 32.32577133]
[114.83364105 41.82879257]
[112.97216034 56.71284103]
[111.11067963 71.59688568]
[109.24919891 86.48093414]
[114.68387604 72.50008392]
[123.36400604 60.26671219]
[134.76542664 50.51953125]
[148.19967651 43.84712219]
[162.85551453 40.65240097]
[177.84796143 41.12828064]
[192.27169800 45.24602127]
[205.25575256 52.75697327]
[216.01608276 63.20759583]
[223.90290833 75.96681976]
[228.44000244 90.26419067]
[229.35340881 105.23635101]
[226.58793640 119.97922516]
[220.31059265 133.60255432]
[210.90043640 145.28369141]
[198.92570496 154.31727600]
[185.10948181 160.15782166]
[170.28607178 162.45265198]
[155.35055542 161.06318665]
[141.20484924 156.07331848]
[128.70310974 147.78437805]
[118.60026550 136.69686890]
[111.50637817 123.48033905]
[107.85037994 108.93741608]
[107.85037994 123.93741608]
[111.02429199 132.69635010]
[107.60984802 139.40209961]
[107.14334869 154.39483643]
[114.44772339 168.42897034]
[106.31835175 180.90945435]
[105.85185242 195.90219116]
[113.15622711 209.93632507]
[105.02684784 222.41680908]
[104.56035614 237.40956116]
[111.86473083 251.44367981]
[103.73535156 263.92416382]
[103.26885223 278.91690063]
[102.80236053 293.90966797]
[102.33586121 308.90240479]
[113.33950806 320.24679565]
[113.01503754 336.04776001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[7 95]
[9 93]
[10 92]
[12 90]
[13 89]
[15 87]
[16 86]
[17 84]
[18 83]
[20 45]
[21 44]
[22 43]
[24 39]
[25 38]
[27 37]
[28 36]
[29 35]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
