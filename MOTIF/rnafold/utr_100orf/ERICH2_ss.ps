%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACACCGACAUUCCAACCUUCUUUCCUUCUUCGGCGCUCCUGAAGGUAACCGGUGCGCGUGCGCACGUCAAUCCGAGGGUGUGUGCGCCCAGUUUCC\
) } def
/len { sequence length } bind def

/coor [
[95.96114349 167.12316895]
[107.04508972 156.26380920]
[104.72161102 141.44485474]
[102.39813995 126.62589264]
[84.46231842 116.76653290]
[81.01737213 99.73836517]
[67.32052612 93.62310791]
[53.62367630 87.50785828]
[39.92682648 81.39260101]
[26.22997665 75.27734375]
[16.10217667 79.81976318]
[5.38180828 77.97462463]
[-2.32356572 70.61381531]
[-4.56141376 60.42224121]
[-17.85158348 53.46728897]
[-23.42680550 53.72072601]
[-28.01070404 51.88407135]
[-30.94779968 48.73317719]
[-32.01102066 45.19416809]
[-44.59531021 37.03110504]
[-57.17960358 28.86804008]
[-69.76389313 20.70497894]
[-82.34819031 12.54191589]
[-94.93247986 4.37885284]
[-112.90406799 12.62071323]
[-132.12983704 8.64860630]
[-145.17698669 -5.83308744]
[-147.10151672 -25.08985710]
[-160.60154724 -31.62812233]
[-175.44639587 -26.20535469]
[-189.74232483 -32.94342804]
[-195.00784302 -47.84476471]
[-188.11900330 -62.06866837]
[-173.16282654 -67.17634583]
[-159.01255798 -60.13750458]
[-154.06329346 -45.12816238]
[-140.56324768 -38.58989716]
[-132.43324280 -45.59604263]
[-122.36525726 -49.42386627]
[-111.55667114 -49.58983612]
[-101.30261993 -46.04763031]
[-92.84081268 -39.19684219]
[-87.20214081 -29.83808136]
[-85.08511353 -19.07946396]
[-86.76941681 -8.20543957]
[-74.18512726 -0.04237661]
[-61.60083389 8.12068653]
[-49.01654053 16.28374863]
[-36.43224716 24.44681168]
[-23.84795570 32.60987473]
[-10.89663124 40.17711639]
[2.39353943 47.13206863]
[21.47534370 44.74511719]
[32.34523010 61.58049774]
[46.04207993 67.69575500]
[59.73892975 73.81100464]
[73.43577576 79.92626190]
[87.13262939 86.04151154]
[108.31729126 78.70777130]
[126.64547729 97.83024597]
[141.64366150 97.59696960]
[156.64184570 97.36369324]
[171.64002991 97.13041687]
[186.63821411 96.89714050]
[201.63641357 96.66385651]
[216.63459778 96.43058014]
[231.63278198 96.19730377]
[246.63096619 95.96402740]
[261.62915039 95.73075104]
[277.09729004 85.89286804]
[292.12322998 94.81039429]
[307.10690308 94.11079407]
[318.92916870 83.26582336]
[334.75625610 85.88938141]
[342.44696045 99.96889496]
[336.10165405 114.70376587]
[320.58789062 118.79066467]
[307.80651855 109.09446716]
[292.82284546 109.79407501]
[284.34912109 118.58123779]
[271.75317383 119.18648529]
[261.86242676 110.72893524]
[246.86424255 110.96221161]
[231.86605835 111.19548798]
[216.86787415 111.42877197]
[201.86968994 111.66204834]
[186.87149048 111.89532471]
[171.87330627 112.12860107]
[156.87512207 112.36187744]
[141.87693787 112.59515381]
[126.87875366 112.82843018]
[117.21709442 124.30242157]
[119.54057312 139.12138367]
[121.86404419 153.94033813]
[135.73968506 160.88627625]
[142.85269165 174.67701721]
[140.46797180 190.00975037]
[129.50248718 200.98872375]
[114.17269135 203.39228821]
[100.37321472 196.29623413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[14 52]
[15 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[28 37]
[29 36]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
