%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:25:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCGGAGCUGGGAAGAGAGUCAAGAUGGCGGCGAAAUCCGAUGGCGGUGGCGUGGGGGUGGGCUUCGCUCAGCUGCACAACCUGGACGAGGCGGUGGGCAGCGGCGGCGAGGAGGACGGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[86.30297852 294.32916260]
[98.24726868 284.75875854]
[95.32091522 270.04699707]
[92.39456177 255.33522034]
[89.46820831 240.62342834]
[86.54184723 225.91165161]
[74.88323212 220.28271484]
[68.52945709 208.77919006]
[70.01629639 195.52549744]
[79.02080536 185.42420959]
[76.45637512 170.64505005]
[73.89194489 155.86587524]
[71.32752228 141.08671570]
[65.04083252 136.99678040]
[60.20582199 151.19616699]
[56.66323853 165.77183533]
[42.72108078 171.30503845]
[30.14760780 163.12532043]
[29.55580139 148.13699341]
[41.44559097 138.99130249]
[52.46746445 128.81690979]
[46.18077850 124.72696686]
[31.63031006 128.37167358]
[17.07983971 132.01637268]
[2.52937174 135.66107178]
[-11.36594105 145.37480164]
[-24.54666328 134.71156311]
[-17.94892502 119.09406281]
[-1.11533105 121.11060333]
[13.43513775 117.46590424]
[27.98560715 113.82119751]
[42.53607559 110.17649841]
[48.10583496 96.24890900]
[40.08086777 83.57610321]
[32.05590439 70.90329742]
[24.03094101 58.23049545]
[16.00597572 45.55769348]
[7.98101187 32.88488770]
[-5.93893337 25.36520195]
[-6.21110773 10.47308350]
[-14.23607254 -2.19972038]
[-22.26103592 -14.87252426]
[-30.28600121 -27.54532814]
[-48.32085419 -28.10886002]
[-62.33586884 -39.22425079]
[-66.91127777 -56.35569000]
[-60.41963577 -72.68895721]
[-69.05675507 -84.95272827]
[-77.69387817 -97.21649933]
[-92.79463196 -103.61176300]
[-94.53774261 -119.91800690]
[-81.13005066 -129.36076355]
[-66.36423492 -122.22614288]
[-65.43010712 -105.85362244]
[-56.79298782 -93.58985138]
[-48.15586472 -81.32608032]
[-36.00580597 -82.94921112]
[-24.26204300 -79.19059753]
[-15.20629692 -70.71522522]
[-10.62588215 -59.11074829]
[-11.46115589 -46.59025574]
[-17.61319733 -35.57029343]
[-9.58823299 -22.89748764]
[-1.56326866 -10.22468472]
[6.46169567 2.44811869]
[19.80764198 9.06136227]
[20.65381432 24.85992432]
[28.67877960 37.53272629]
[36.70374298 50.20553207]
[44.72870636 62.87833405]
[52.75367355 75.55113983]
[60.77863693 88.22394562]
[81.75874329 67.56540680]
[108.42679596 67.60479736]
[125.35685730 84.47060394]
[139.71096802 80.11633301]
[154.06506348 75.76206207]
[168.41917419 71.40779114]
[182.77328491 67.05352020]
[197.01620483 62.34829330]
[211.13935852 57.29494858]
[217.95143127 43.28660965]
[232.34631348 38.36298370]
[245.65913391 44.94357681]
[259.78228760 39.89022827]
[273.90545654 34.83687973]
[282.03695679 21.00726700]
[297.93899536 18.88484383]
[309.41290283 30.09775352]
[307.65686035 46.04441071]
[294.01794434 54.49190521]
[278.95880127 48.96004105]
[264.83563232 54.01338959]
[250.71247864 59.06673431]
[244.59620667 72.59916687]
[230.34530640 77.92517090]
[216.19270325 71.41810608]
[202.06954956 76.47145844]
[199.21910095 80.42298126]
[193.81103516 82.56440735]
[187.12754822 81.40762329]
[172.77343750 85.76189423]
[158.41934204 90.11616516]
[144.06523132 94.47043610]
[129.71113586 98.82470703]
[127.38597107 119.24755859]
[111.21075439 135.48330688]
[86.10668182 138.52229309]
[88.67111206 153.30145264]
[91.23554230 168.08061218]
[93.79997253 182.85978699]
[108.25900269 192.61621094]
[111.18317413 209.47087097]
[101.25363159 222.98530579]
[104.17998505 237.69708252]
[107.10633850 252.40885925]
[110.03269196 267.12063599]
[112.95904541 281.83242798]
[127.65657043 286.10342407]
[138.67768860 296.72384644]
[143.48985291 311.25317383]
[140.98724365 326.35272217]
[131.74494934 338.55264282]
[117.88678741 345.04956055]
[102.59725189 344.35049438]
[89.38977051 336.61608887]
[81.29932404 323.62365723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[4 116]
[5 115]
[6 114]
[10 111]
[11 110]
[12 109]
[13 108]
[22 32]
[23 31]
[24 30]
[25 29]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[40 65]
[41 64]
[42 63]
[43 62]
[47 56]
[48 55]
[49 54]
[75 105]
[76 104]
[77 103]
[78 102]
[79 101]
[80 98]
[81 97]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
