%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAAACUGGAGCACUGUGACUGAAAUCACCCUAAUUGCCUUCCCAGCUCUCCUGGAGAUUCGAAUAUCUCUCUUCGUGGUUCUUGUGGUAACUUACA\
) } def
/len { sequence length } bind def

/coor [
[64.55955505 128.31192017]
[55.38571167 108.19482422]
[40.38752747 108.42810059]
[25.38934135 108.66137695]
[10.39115524 108.89465332]
[-4.60703039 109.12792969]
[-19.60521698 109.36121368]
[-24.38314056 112.24543762]
[-29.28777504 112.81987762]
[-33.37277603 111.45333862]
[-35.99649429 108.85119629]
[-50.95116806 107.68593597]
[-58.25996017 122.71849060]
[-70.70467377 133.82316589]
[-86.40086365 139.35537720]
[-102.98572540 138.51158142]
[-117.97375488 131.44581604]
[-129.12924194 119.24253082]
[-134.79977417 103.75020599]
[-149.79795837 103.51692963]
[-164.79614258 103.28365326]
[-179.79432678 103.05037689]
[-190.96621704 114.22912598]
[-206.77030945 114.15042877]
[-217.83032227 102.86096954]
[-217.58453369 87.05859375]
[-206.17877197 76.11856079]
[-190.37988281 76.53141022]
[-179.56105042 88.05219269]
[-164.56286621 88.28546906]
[-149.56468201 88.51874542]
[-134.56649780 88.75202179]
[-130.01010132 76.10562897]
[-121.72532654 65.49085999]
[-110.52603912 57.97378159]
[-97.51970673 54.31499100]
[-83.99787903 54.89271164]
[-71.30796814 59.66371536]
[-60.71892548 68.16622162]
[-53.29440689 79.56455994]
[-49.78590775 92.73126984]
[-34.83123779 93.89652252]
[-19.83849335 94.36302185]
[-4.84030771 94.12974548]
[10.15787792 93.89646912]
[25.15606499 93.66319275]
[40.15425110 93.42991638]
[55.15243530 93.19664001]
[58.10758209 82.60416412]
[63.52492905 73.03411102]
[71.08607483 65.04896545]
[80.34661865 59.11804581]
[90.76226807 55.58993149]
[101.72087097 54.67199326]
[112.57832336 56.41817474]
[122.69649506 60.72584915]
[131.48069763 67.34183502]
[143.53314209 58.41220093]
[155.58560181 49.48257065]
[167.63806152 40.55293655]
[179.69050598 31.62330437]
[191.74296570 22.69367027]
[193.82133484 7.02663851]
[206.41986084 -2.51552749]
[222.06404114 -0.27162859]
[231.47247314 12.42706966]
[229.06329346 28.04665375]
[216.26583862 37.32030487]
[200.67259216 34.74612427]
[188.62014771 43.67575836]
[176.56768799 52.60539246]
[164.51522827 61.53502274]
[152.46278381 70.46466064]
[140.41032410 79.39428711]
[143.99945068 88.97101593]
[145.35189819 99.10838318]
[144.39894104 109.29107666]
[141.18899536 119.00147247]
[135.88526917 127.74594116]
[146.07156372 138.75682068]
[156.25785828 149.76770020]
[166.61415100 160.61883545]
[177.13795471 171.30758667]
[187.66175842 181.99635315]
[198.35052490 192.52015686]
[209.20164490 202.87644958]
[224.83433533 209.43812561]
[222.85664368 226.27633667]
[206.12899780 229.03721619]
[198.84535217 213.72758484]
[187.99421692 203.37127686]
[180.85647583 200.98840332]
[176.97300720 192.52015686]
[166.44920349 181.83139038]
[155.92539978 171.14263916]
[148.86521912 168.53892517]
[145.24697876 159.95399475]
[135.06068420 148.94311523]
[124.87438965 137.93223572]
[103.98770142 145.18504333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[11 42]
[12 41]
[19 32]
[20 31]
[21 30]
[22 29]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[79 99]
[80 98]
[81 97]
[82 95]
[83 94]
[84 93]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
