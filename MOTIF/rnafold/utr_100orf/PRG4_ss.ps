%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCAUCUAUCCUUUACGGCAAGGGUACCUACGGUACCUGAAAACAACGAUGGCAUGGAAAACACUUCCCAUUUACCUGUUGUUGCUGCUGUCUGUUUUCGUGAUUCAGCAAGUUUCAUCUCAAGAUUUAUCAAGCUGUGCAGGGAGAU\
) } def
/len { sequence length } bind def

/coor [
[83.85102844 350.49496460]
[74.47912598 363.01300049]
[59.24168396 366.52789307]
[45.33335495 359.37997437]
[39.32123184 344.94433594]
[44.04404831 330.03698730]
[57.27183914 321.69674683]
[59.12722778 306.81192017]
[60.98261642 291.92712402]
[62.83800507 277.04232788]
[60.52986526 269.97116089]
[64.88864136 261.87023926]
[67.05125427 247.02696228]
[69.21387482 232.18368530]
[71.37648773 217.34039307]
[65.55496979 203.63056946]
[75.20106506 191.09010315]
[77.36368561 176.24681091]
[79.52629852 161.40353394]
[81.68891907 146.56024170]
[83.85153198 131.71696472]
[86.01414490 116.87368011]
[84.92494202 114.23043060]
[84.25856018 111.58526611]
[83.99787903 109.00017548]
[69.31712341 112.07840729]
[54.63637161 115.15663910]
[39.95561981 118.23487091]
[25.27486610 121.31310272]
[10.59411335 124.39132690]
[-4.08663940 127.46955872]
[-18.34786415 136.63764954]
[-31.10555840 125.47173309]
[-23.90769768 110.12158203]
[-7.16486979 112.78881073]
[7.51588297 109.71057892]
[22.19663620 106.63234711]
[36.87738800 103.55411530]
[51.55813980 100.47588348]
[66.23889160 97.39765930]
[80.91964722 94.31942749]
[89.38163757 81.93416595]
[86.91271973 67.13874817]
[84.44380188 52.34332657]
[81.97488403 37.54790878]
[79.50596619 22.75248909]
[77.03704834 7.95706940]
[74.56813049 -6.83835030]
[70.60615540 -12.25846100]
[70.10122681 -17.99906158]
[72.31612396 -22.29516411]
[70.46073151 -37.17997360]
[68.60534668 -52.06478119]
[66.74995422 -66.94959259]
[64.89456177 -81.83439636]
[63.03917694 -96.71920776]
[61.18378448 -111.60401917]
[48.99581146 -121.30406952]
[47.32622147 -136.42581177]
[56.64884949 -147.98541260]
[54.79346085 -162.87020874]
[45.40859985 -175.60736084]
[51.51221085 -189.19393921]
[49.65682220 -204.07875061]
[47.80143356 -218.96356201]
[45.94604492 -233.84837341]
[31.36219406 -238.23371887]
[19.82710457 -248.17663574]
[13.33929729 -261.95443726]
[13.02282333 -277.18008423]
[18.93251610 -291.21557617]
[30.04448318 -301.62924194]
[44.43350983 -306.61679077]
[59.60660934 -305.31414795]
[72.93495178 -297.94699097]
[82.10932159 -285.79168701]
[85.54020691 -270.95428467]
[82.63317871 -256.00540161]
[73.89189911 -243.53503418]
[60.83085251 -235.70376587]
[62.68624115 -220.81895447]
[64.54163361 -205.93414307]
[66.39701843 -191.04933167]
[75.64916992 -179.37684631]
[69.67826843 -164.72560120]
[71.53366089 -149.84078979]
[83.40872955 -140.92349243]
[85.50239563 -125.85461426]
[76.06859589 -113.45940399]
[77.92398071 -98.57460022]
[79.77937317 -83.68978882]
[81.63476562 -68.80497742]
[83.49015045 -53.92016983]
[85.34554291 -39.03536224]
[87.20092773 -24.15055275]
[89.36354828 -9.30726910]
[91.83246613 5.48815060]
[94.30138397 20.28356934]
[96.77030182 35.07899094]
[99.23921967 49.87440872]
[101.70814514 64.66983032]
[104.17706299 79.46524811]
[116.01416779 88.67843628]
[130.96293640 87.43975067]
[145.91169739 86.20105743]
[160.86047363 84.96237183]
[166.77107239 70.84417725]
[178.57308960 61.09887314]
[193.55450439 57.96585464]
[208.27270508 62.16506958]
[219.34553528 72.73156738]
[224.22856140 87.23724365]
[221.79968262 102.34880066]
[212.61706543 114.59371185]
[198.79077148 121.15818787]
[183.49800110 120.53376007]
[170.25292969 112.86392212]
[162.09916687 99.91113281]
[147.15039062 101.14982605]
[132.20162964 102.38851929]
[117.25286102 103.62720490]
[130.96549988 109.70697784]
[144.67813110 115.78674316]
[159.56146240 117.65400696]
[172.45669556 125.31644440]
[181.21253967 137.49572754]
[184.36827087 152.16001892]
[181.39743042 166.86288452]
[172.79562378 179.15145874]
[159.99789429 186.97564697]
[145.13926697 189.03016663]
[130.69857788 184.97225952]
[119.08496857 175.47889709]
[112.23590851 162.13383484]
[111.29418182 147.16233826]
[106.07580566 133.09931946]
[100.85742950 119.03629303]
[98.69481659 133.87957764]
[96.53220367 148.72286987]
[94.36958313 163.56614685]
[92.20697021 178.40943909]
[90.04434967 193.25271606]
[95.71118164 208.02423096]
[86.21977234 219.50300598]
[84.05715942 234.34629822]
[81.89453888 249.18957520]
[79.73192596 264.03286743]
[77.72281647 278.89770508]
[75.86742401 293.78250122]
[74.01203918 308.66732788]
[72.15664673 323.55212402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 151]
[8 150]
[9 149]
[10 148]
[12 147]
[13 146]
[14 145]
[15 144]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[42 102]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[57 89]
[60 86]
[61 85]
[63 83]
[64 82]
[65 81]
[66 80]
[103 121]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
