%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGACCGGGGCCAUGGCGCCCGCGCAGCGCCCGCUGCUCCCGCUGCUGCUCCUGCUGUUACCGCUGCCGCCGCCGCCCUUCGCGCGCGCCGAGGACGCCGCCCGCGCCAACU\
) } def
/len { sequence length } bind def

/coor [
[108.54127502 207.65037537]
[106.91949463 192.73831177]
[105.29770660 177.82623291]
[103.47414398 162.93750000]
[101.44915009 148.07481384]
[99.42414856 133.21212769]
[83.22159576 126.58361816]
[73.45598602 113.22089386]
[72.22440338 97.67334747]
[78.90583038 84.64421844]
[69.82821655 72.70281982]
[60.75060272 60.76142883]
[51.67298889 48.82003021]
[42.59537888 36.87863541]
[37.52650452 34.77023697]
[34.18990707 31.23156929]
[32.84224319 27.20165825]
[33.31289291 23.57933044]
[25.23437309 10.94059849]
[17.15585327 -1.69813240]
[9.07733440 -14.33686352]
[-3.40709615 -17.90788269]
[-9.85674858 -28.71162987]
[-7.24767876 -40.60877991]
[-14.98098660 -53.46163940]
[-22.18410683 -59.29837799]
[-22.74424553 -66.76892090]
[-30.12667084 -79.82647705]
[-37.50909424 -92.88403320]
[-44.89151764 -105.94158936]
[-52.27394485 -118.99914551]
[-59.65636826 -132.05670166]
[-74.94608307 -133.93572998]
[-86.06762695 -144.33595276]
[-88.89910126 -159.11589050]
[-82.56047821 -172.56802368]
[-89.94290924 -185.62557983]
[-103.47016907 -193.83068848]
[-102.99869537 -208.71783447]
[-110.38111877 -221.77539062]
[-125.67456055 -222.01612854]
[-138.70806885 -229.82794189]
[-146.03282166 -243.02697754]
[-145.76921082 -258.01986694]
[-138.08815002 -270.78179932]
[-145.47058105 -283.83935547]
[-159.86512756 -291.69613647]
[-159.98767090 -308.09481812]
[-145.71214294 -316.16586304]
[-131.72399902 -307.60644531]
[-132.41302490 -291.22177124]
[-125.03059387 -278.16421509]
[-110.13543701 -278.16632080]
[-97.15277863 -270.66256714]
[-89.61939240 -257.58148193]
[-89.64525604 -242.38621521]
[-97.32356262 -229.15780640]
[-89.94113922 -216.10025024]
[-76.94191742 -208.82911682]
[-76.88534546 -193.00801086]
[-69.50292206 -179.95045471]
[-54.70846558 -178.44644165]
[-43.50394440 -168.40042114]
[-40.32618713 -153.50897217]
[-46.59881210 -139.43913269]
[-39.21638489 -126.38156891]
[-31.83396149 -113.32401276]
[-24.45153809 -100.26645660]
[-17.06911278 -87.20890045]
[-9.68668842 -74.15134430]
[-2.12812924 -61.19494629]
[5.60517883 -48.34208679]
[21.37048531 -40.76435089]
[21.71606445 -22.41538239]
[29.79458427 -9.77665138]
[37.87310410 2.86207938]
[45.95162201 15.50081062]
[54.53677368 27.80102158]
[63.61438751 39.74241638]
[72.69200134 51.68381500]
[81.76961517 63.62520981]
[90.84722900 75.56660461]
[110.27137756 73.45098114]
[127.44045258 85.92008209]
[132.15560913 108.33032227]
[145.93479919 114.25769806]
[159.71398926 120.18508148]
[168.96940613 120.72335052]
[173.78262329 126.46405792]
[187.39625549 132.76239014]
[201.00988770 139.06072998]
[215.08448792 132.24607849]
[230.23390198 136.12284851]
[239.30503845 148.86053467]
[238.01477051 164.44479370]
[226.97233582 175.51722717]
[211.39163208 176.84974670]
[198.62937927 167.81320190]
[194.71154785 152.67436218]
[181.09791565 146.37602234]
[167.48428345 140.07769775]
[153.78662109 133.96427917]
[140.00741577 128.03689575]
[126.22822571 122.10951996]
[114.28682709 131.18713379]
[116.31182861 146.04981995]
[118.33683014 160.91249084]
[122.64727020 169.12057495]
[120.20977783 176.20445251]
[121.83155823 191.11651611]
[123.45334625 206.02859497]
[135.00634766 217.15997314]
[133.36328125 233.11866760]
[119.78454590 241.66252136]
[104.68659973 236.23744202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 107]
[5 106]
[6 105]
[10 82]
[11 81]
[12 80]
[13 79]
[14 78]
[18 77]
[19 76]
[20 75]
[21 74]
[24 72]
[25 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[36 61]
[37 60]
[39 58]
[40 57]
[45 52]
[46 51]
[85 104]
[86 103]
[87 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
