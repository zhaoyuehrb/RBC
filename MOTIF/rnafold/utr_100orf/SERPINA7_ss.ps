%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUGCAGGUGGAUUCUUGGGCAUUUGCUAUUAACUUCCUUCCAAAAUGUCACCAUUCCUGUAUCUGGUUCUCUUGGUACUUGGGCUUCAUGCUACAAUCCACUGUGCAUCACCUGAAGGCAAAGUAACAGCCUGCCAUUCAUCCC\
) } def
/len { sequence length } bind def

/coor [
[245.59309387 306.39782715]
[246.73529053 295.73352051]
[251.41036987 286.03811646]
[241.74147034 274.57022095]
[232.07258606 263.10232544]
[222.40370178 251.63441467]
[212.73481750 240.16651917]
[203.06591797 228.69863892]
[193.27586365 217.33399963]
[183.36575317 206.07391357]
[173.45562744 194.81382751]
[163.54550171 183.55375671]
[153.63537598 172.29367065]
[143.72526550 161.03358459]
[133.81513977 149.77349854]
[123.90502167 138.51341248]
[107.56734467 144.69303894]
[90.10599518 144.23620605]
[74.11380768 137.21072388]
[61.96546173 124.65982056]
[55.46486664 108.44718170]
[40.46824646 108.76555634]
[25.47162628 109.08393860]
[10.47500515 109.40232086]
[-4.52161551 109.72070312]
[-19.51823616 110.03908539]
[-34.51485825 110.35746002]
[-38.86574554 124.84625244]
[-47.48263931 137.28025818]
[-59.52133179 146.44131470]
[-73.80240631 151.43191528]
[-88.92673492 151.76315308]
[-103.41260529 147.40255737]
[-115.84082794 138.77732849]
[-124.99382019 126.73249817]
[-129.97485352 112.44808960]
[-130.29595947 97.32353973]
[-125.92565155 82.84059143]
[-117.29210663 70.41815186]
[-105.24114227 61.27323532]
[-90.95339966 56.30176926]
[-75.82863617 55.99080658]
[-61.34862518 60.37081146]
[-48.93196869 69.01268005]
[-39.79512787 81.06977081]
[-34.83323669 95.36083984]
[-19.83661652 95.04245758]
[-4.83999634 94.72408295]
[10.15662479 94.40570068]
[25.15324593 94.08731842]
[40.14986801 93.76893616]
[55.14648819 93.45055389]
[56.43862152 85.17277527]
[59.26734543 77.15396881]
[63.57984924 69.68077850]
[69.26963043 63.02890396]
[76.17880249 57.45301437]
[84.10231781 53.17715073]
[92.79390717 50.38598633]
[91.52182007 35.44002533]
[80.64276123 20.62290192]
[88.62757111 5.02887630]
[87.03852844 -9.88671875]
[85.44949341 -24.80231285]
[83.86045837 -39.71790695]
[82.27142334 -54.63350296]
[73.11573029 -67.53636169]
[79.46121979 -81.01167297]
[77.87218475 -95.92726898]
[67.78220367 -108.85492706]
[74.18288422 -123.95338440]
[90.48975372 -125.69063568]
[99.92770386 -112.27955627]
[92.78778076 -97.51630402]
[94.37681580 -82.60071564]
[103.41884613 -70.76471710]
[97.18701935 -56.22253799]
[98.77605438 -41.30694199]
[100.36508942 -26.39134979]
[101.95412445 -11.47575474]
[103.54315948 3.43984008]
[112.77966309 11.31793594]
[114.18946075 23.78009033]
[106.46778107 34.16793823]
[107.73987579 49.11389923]
[122.08237457 53.50624084]
[131.50567627 41.83570480]
[131.24276733 25.79480553]
[143.71128845 15.69949150]
[159.34646606 19.29402351]
[166.15432739 33.82098389]
[158.91246033 48.13653183]
[143.17620850 51.25900269]
[133.75291443 62.92953873]
[143.98831177 78.56427002]
[147.59886169 96.43898010]
[144.39566040 113.93249512]
[135.16510010 128.60328674]
[145.07522583 139.86337280]
[154.98535156 151.12345886]
[164.89546204 162.38354492]
[174.80558777 173.64363098]
[184.71571350 184.90371704]
[194.62582397 196.16380310]
[204.53594971 207.42388916]
[212.61355591 211.83876038]
[214.53381348 219.02973938]
[224.20271301 230.49763489]
[233.87159729 241.96553040]
[243.54048157 253.43342590]
[253.20936584 264.90130615]
[262.87826538 276.36920166]
[282.62243652 273.80789185]
[299.83779907 283.52243042]
[307.73748779 301.48699951]
[303.32498169 320.46301270]
[313.93157959 331.06961060]
[324.53817749 341.67620850]
[335.14477539 352.28280640]
[345.86337280 362.77624512]
[356.69268799 373.15533447]
[367.52203369 383.53439331]
[378.35137939 393.91348267]
[391.28442383 394.43161011]
[400.09475708 403.35745239]
[400.42163086 415.49295044]
[411.02822876 426.09954834]
[427.00003052 429.81900024]
[431.50521851 445.58718872]
[419.90927124 457.18313599]
[404.14108276 452.67794800]
[400.42163086 436.70614624]
[389.81503296 426.09954834]
[372.66610718 422.51553345]
[367.97229004 404.74282837]
[357.14294434 394.36373901]
[346.31362915 383.98464966]
[335.48428345 373.60559082]
[328.43008423 371.23159790]
[324.53817749 362.88940430]
[313.93157959 352.28280640]
[303.32498169 341.67620850]
[292.71838379 331.06961060]
[282.96508789 334.94406128]
[272.43862915 335.31820679]
[262.36163330 332.12268066]
[253.91317749 325.70434570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[8 107]
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[14 100]
[15 99]
[16 98]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[59 85]
[60 84]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
[86 94]
[87 93]
[116 143]
[117 142]
[118 141]
[119 140]
[120 138]
[121 137]
[122 136]
[123 135]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
