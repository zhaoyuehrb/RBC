%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCAACCUCACAUCUGCCACGAUGUUGCUGCUCAGCCUGACCCUAAGCCUGGUUCUCCUCGGCUCCUCCUGGGGCUGCGGCAUUCCUGCCAUCAAACCGGCACUGAGCUUCAGCCAGAGGA\
) } def
/len { sequence length } bind def

/coor [
[108.14253235 211.12515259]
[96.41296387 221.14616394]
[81.12457275 223.21226501]
[67.15583801 216.66413879]
[58.96411896 203.59129333]
[59.16337204 188.16522217]
[67.69001007 175.30831909]
[81.82321930 169.12318420]
[84.09464264 154.29615784]
[86.36605835 139.46913147]
[88.63747406 124.64210510]
[76.00933838 116.54702759]
[63.48476028 124.80142212]
[50.96018219 133.05581665]
[38.43560791 141.31019592]
[25.91102982 149.56459045]
[22.97555161 165.09387207]
[9.87210369 173.92988586]
[-5.62527180 170.83038330]
[-14.32225704 157.63424683]
[-11.05908394 142.17051697]
[2.22826362 133.61352539]
[17.65663910 137.04000854]
[30.18121529 128.78562927]
[42.70579147 120.53123474]
[55.23036957 112.27684021]
[67.75495148 104.02245331]
[72.78592682 89.89130402]
[68.29547882 75.57921600]
[63.80503082 61.26712799]
[59.31458664 46.95503998]
[54.82413864 32.64294815]
[50.33369064 18.33086205]
[45.60234451 13.45092964]
[44.32759857 7.76442432]
[45.99818039 3.17895126]
[42.23839569 -11.34220505]
[38.47860718 -25.86336136]
[34.71881866 -40.38451767]
[30.95903015 -54.90567398]
[15.89343166 -56.40670776]
[2.27595735 -62.95929337]
[-8.25822163 -73.75518799]
[-14.45151043 -87.47791290]
[-15.57401276 -102.46328735]
[-11.50949669 -116.90122986]
[-2.76710200 -129.05441284]
[9.58235168 -137.46726990]
[5.82256413 -151.98843384]
[2.06277609 -166.50958252]
[-1.69701195 -181.03074646]
[-14.90447044 -193.78593445]
[-9.70131493 -210.49468994]
[-13.82775688 -224.91593933]
[-25.98756981 -235.91917419]
[-22.27434540 -251.89239502]
[-6.50793028 -256.40374756]
[5.09253883 -244.81231689]
[0.59349430 -229.04238892]
[4.71993589 -214.62113953]
[15.19204712 -208.42483521]
[18.70284462 -196.35475159]
[12.82414436 -184.79052734]
[16.58393288 -170.26937866]
[20.34372139 -155.74821472]
[24.10350800 -141.22706604]
[38.98398972 -139.86451721]
[52.52583313 -133.48112488]
[63.08639145 -122.82987976]
[69.37736511 -109.18271637]
[70.62195587 -94.17868042]
[66.65069580 -79.62706757]
[57.92428589 -67.28925323]
[45.48018646 -58.66546249]
[49.23997498 -44.14430618]
[52.99976349 -29.62314987]
[56.75955200 -15.10199356]
[60.51934052 -0.58083665]
[64.64578247 13.84041405]
[69.13623047 28.15250397]
[73.62667084 42.46459198]
[78.11711884 56.77667999]
[82.60756683 71.08876801]
[87.09801483 85.40085602]
[91.19294739 74.49031830]
[102.03042603 65.56867218]
[118.27530670 62.18992996]
[136.91088867 67.01906586]
[153.77975464 81.10338593]
[168.54447937 83.74968719]
[183.30920410 86.39598083]
[198.07392883 89.04228210]
[209.17257690 78.19794464]
[224.53056335 75.98164368]
[238.24241638 83.24557495]
[245.03564453 97.19661713]
[242.29812622 112.47030640]
[231.08248901 123.19360352]
[215.70137024 125.24317169]
[202.06912231 117.83091736]
[195.42762756 103.80700684]
[180.66290283 101.16070557]
[165.89817810 98.51441193]
[151.13345337 95.86811066]
[143.68836975 108.89004517]
[153.45895386 120.27142334]
[163.22953796 131.65278625]
[173.00013733 143.03416443]
[187.90501404 151.11381531]
[184.26719666 167.67288208]
[167.34822083 168.76124573]
[161.61875916 152.80474854]
[151.84817505 141.42338562]
[142.07759094 130.04200745]
[132.30699158 118.66063690]
[125.09637451 120.72385406]
[121.45938110 135.27626038]
[110.67512512 124.85029602]
[103.46450043 126.91352081]
[101.19307709 141.74053955]
[98.92166138 156.56756592]
[96.65024567 171.39459229]
[108.28369904 181.52703857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 122]
[9 121]
[10 120]
[11 119]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[48 66]
[49 65]
[50 64]
[51 63]
[53 60]
[54 59]
[89 104]
[90 103]
[91 102]
[92 101]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
