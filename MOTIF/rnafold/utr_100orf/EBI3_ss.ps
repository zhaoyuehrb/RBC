%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCAGCCAUGACCCCGCAGCUUCUCCUGGCCCUUGUCCUCUGGGCCAGCUGCCCGCCCUGCAGUGGAAGGAAAGGGCCCCCAGCAGCUCUGACACUGCCCCGGGUGC\
) } def
/len { sequence length } bind def

/coor [
[137.33532715 141.02052307]
[138.32102966 155.98809814]
[134.74642944 170.55595398]
[126.94442749 183.36723328]
[115.64172363 193.22871399]
[101.89102936 199.22190857]
[86.97307587 200.78862000]
[72.27729797 197.78291321]
[59.17246246 190.48475647]
[48.87912750 179.57386780]
[42.35601425 166.06649780]
[40.21067429 151.22071838]
[42.64292526 136.41921997]
[49.42623138 123.04062653]
[59.92879486 112.33100128]
[73.17242432 105.28782654]
[87.92438507 102.56707764]
[74.39647675 96.08665466]
[60.86857605 89.60623932]
[47.34067154 83.12581635]
[33.81277084 76.64539337]
[20.28486824 70.16497803]
[23.25131798 84.86872101]
[15.17438412 97.50846863]
[0.58491963 100.99379730]
[-12.33294392 93.36957550]
[-16.33277702 78.91269684]
[-9.17082787 65.73291779]
[5.13603735 61.22365570]
[-7.07499790 52.51213074]
[-19.28603363 43.80060959]
[-31.49706841 35.08908844]
[-43.70810318 26.37756729]
[-57.99692535 32.19419479]
[-73.15793610 29.33987808]
[-84.35332489 18.72541237]
[-88.01068115 3.73784065]
[-82.96294403 -10.84036064]
[-70.82084656 -20.35733795]
[-55.45886993 -21.77626228]
[-41.77897644 -14.64435577]
[-34.14636993 -1.23738647]
[-34.99658203 14.16653156]
[-22.78554726 22.87805367]
[-10.57451153 31.58957481]
[1.63652408 40.30109787]
[13.84755898 49.01261902]
[26.76528740 56.63707352]
[40.29319000 63.11749268]
[53.82109451 69.59791565]
[67.34899902 76.07833099]
[80.87689972 82.55875397]
[94.40480042 89.03916931]
[102.40686035 87.97326660]
[109.31971741 92.08981323]
[124.30570221 91.44152069]
[139.29168701 90.79322815]
[154.27766418 90.14494324]
[169.26365662 89.49665070]
[185.59252930 77.85018921]
[202.44229126 87.15003204]
[217.36604309 85.63945007]
[232.28977966 84.12886047]
[247.21353149 82.61827087]
[262.13726807 81.10768127]
[277.06100464 79.59709930]
[280.33364868 70.85746002]
[286.30944824 63.74675751]
[294.27938843 59.06303406]
[303.31289673 57.31906128]
[312.36654663 58.68635178]
[320.40457153 62.97876740]
[326.51730347 69.67722321]
[330.02413940 77.99232483]
[345.01013184 78.64061737]
[359.99612427 79.28890991]
[374.98208618 79.93720245]
[389.96807861 80.58549500]
[399.51702881 68.35450745]
[414.44076538 64.10453796]
[429.00076294 69.46978760]
[437.59844971 82.38719940]
[436.92779541 97.88977814]
[427.24670410 110.01645660]
[412.27777100 114.10428619]
[397.77682495 108.58140564]
[389.31979370 95.57147980]
[374.33380127 94.92318726]
[359.34780884 94.27489471]
[344.36184692 93.62660217]
[329.37585449 92.97830963]
[315.44290161 108.85025787]
[294.06527710 109.66642761]
[278.57159424 94.52084351]
[263.64785767 96.03142548]
[248.72410583 97.54201508]
[233.80036926 99.05260468]
[218.87661743 100.56319427]
[203.95288086 102.07377625]
[198.10430908 110.67826080]
[188.24867249 114.64906311]
[177.63500977 112.41141510]
[169.91194153 104.48263550]
[154.92596436 105.13092041]
[139.93997192 105.77921295]
[124.95399475 106.42750549]
[109.96800995 107.07579803]
[122.46636963 115.36983490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
