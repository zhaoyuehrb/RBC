%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAUUCUUUUUAGAUGAUUAUCCCGGGGCUCCUCUGAGAAAAGUAGGAGUAGAUUGCUGGAAUUACCAUGGGUUAAAAUGAAAGAGGAUGACCUGGCUGGACAAAGGCGUAUGGACUCAGGAAGACGAGAACUCCUGCUCCUUCUCUGAAUCGGAUUUUCCUGGCUGUAGAGACCAGAUCAACCCUU\
) } def
/len { sequence length } bind def

/coor [
[443.31030273 140.43133545]
[451.45608521 127.83587646]
[463.90829468 119.46813965]
[448.91033936 119.22013092]
[433.91238403 118.97212219]
[418.91445923 118.72411346]
[403.91650391 118.47610474]
[388.91854858 118.22809601]
[373.92059326 117.98008728]
[358.92263794 117.73207855]
[343.92471313 117.48406982]
[328.92675781 117.23606110]
[313.92880249 116.98805237]
[305.00946045 125.17611694]
[292.50094604 125.08141327]
[283.12326050 116.20869446]
[268.13146973 115.71274567]
[259.07797241 123.75222015]
[246.57273865 123.45071411]
[237.34303284 114.42416382]
[222.36148071 113.68040466]
[207.37992859 112.93664551]
[194.28466797 120.03336334]
[180.88511658 111.62131500]
[165.90356445 110.87756348]
[150.92201233 110.13380432]
[135.94046021 109.39005280]
[120.95327759 108.77017212]
[105.96147919 108.27422333]
[91.02346039 109.63645935]
[76.36865997 112.83595276]
[61.71385956 116.03544617]
[47.05905533 119.23493958]
[32.40425491 122.43443298]
[17.74945068 125.63392639]
[3.12160015 128.95446777]
[-11.47829914 132.39582825]
[-19.57744789 145.96710205]
[-34.92098618 149.75541687]
[-48.40586853 141.51322937]
[-52.03174973 126.13050079]
[-43.64746094 112.73351288]
[-28.22725105 109.27046967]
[-14.91965771 117.79592896]
[-0.31975862 114.35456848]
[5.47981024 109.75160217]
[14.54995632 110.97912598]
[29.20475960 107.77963257]
[43.85956192 104.58013916]
[58.51436234 101.38064575]
[73.16916656 98.18115234]
[87.82396698 94.98165131]
[88.56681061 87.51853180]
[90.79533386 65.12916565]
[77.05873108 59.10373688]
[63.32213593 53.07830429]
[49.58553314 47.05287552]
[34.17744064 51.52167511]
[21.16049957 42.14410400]
[20.52019501 26.11383438]
[32.74771500 15.72791481]
[48.46315002 18.95353508]
[55.61096573 33.31627274]
[69.34756470 39.34170532]
[83.08416748 45.36713791]
[96.82076263 51.39256668]
[109.95371246 72.74615479]
[106.45742798 93.28242493]
[121.44922638 93.77837372]
[130.14772034 90.93048859]
[136.68421936 94.40850067]
[151.66577148 95.15225983]
[166.64732361 95.89601135]
[181.62887573 96.63977051]
[195.79571533 89.59625244]
[208.12368774 97.95510101]
[223.10523987 98.69885254]
[238.08677673 99.44261169]
[254.26037598 90.65680695]
[268.62741089 100.72094727]
[283.61920166 101.21689606]
[299.64535522 92.16487885]
[314.17681885 101.99009705]
[329.17477417 102.23810577]
[344.17269897 102.48611450]
[359.17065430 102.73412323]
[374.16860962 102.98213959]
[389.16656494 103.23014832]
[404.16452026 103.47815704]
[419.16244507 103.72616577]
[434.16040039 103.97417450]
[449.15835571 104.22218323]
[464.15631104 104.47019196]
[474.22116089 99.25225830]
[483.61825562 102.85752869]
[498.37081909 100.14431763]
[513.12341309 97.43111420]
[527.87597656 94.71790314]
[542.60559082 91.88282776]
[557.31134033 88.92607117]
[566.07849121 76.05074310]
[581.03430176 73.26165771]
[593.25494385 81.69918060]
[607.96063232 78.74242401]
[622.66632080 75.78566742]
[637.15698242 61.78892136]
[655.20056152 68.71104431]
[669.80041504 65.26968384]
[684.40032959 61.82832718]
[686.87573242 45.95033646]
[695.23150635 32.26885223]
[708.16442871 22.86102104]
[723.67913818 19.14184761]
[739.39575195 21.65144348]
[752.91516113 29.97679710]
[762.18511963 42.81941605]
[776.72613525 39.13713455]
[788.20458984 28.24885178]
[802.44183350 32.62503052]
[816.98284912 28.94274902]
[831.52386475 25.26046753]
[846.06481934 21.57818413]
[860.57489014 17.77581406]
[875.05303955 13.85361481]
[889.53118896 9.93141651]
[904.00927734 6.00921679]
[908.95593262 1.57895017]
[914.55664062 0.48936933]
[919.03112793 2.20516944]
[933.63104248 -1.23618948]
[948.23095703 -4.67754841]
[954.10388184 -19.04029655]
[967.31506348 -27.17934990]
[982.78454590 -25.96507454]
[994.56402588 -15.86438656]
[998.12396240 -0.76120466]
[992.09564209 13.53698921]
[978.79693604 21.53224754]
[963.34149170 20.15023041]
[951.67230225 9.92235088]
[937.07238770 13.36370945]
[922.47253418 16.80506897]
[907.93151855 20.48735046]
[893.45336914 24.40954971]
[878.97521973 28.33174896]
[864.49713135 32.25394821]
[858.85290527 37.04615402]
[849.74713135 36.11919022]
[835.20611572 39.80147171]
[820.66510010 43.48375320]
[806.12408447 47.16603470]
[795.68566895 57.79093552]
[780.40838623 53.67813873]
[765.86737061 57.36042023]
[764.37194824 71.32323456]
[758.18450928 83.96254730]
[748.03082275 93.74932098]
[735.11779785 99.49188232]
[720.99017334 100.48095703]
[707.34552002 96.57723999]
[695.83044434 88.23057556]
[687.84167480 76.42823029]
[673.24182129 79.86958313]
[658.64190674 83.31094360]
[654.05780029 92.46781921]
[644.99530029 97.69113922]
[634.33532715 97.04108429]
[625.62304688 90.49137115]
[610.91735840 93.44812775]
[596.21166992 96.40488434]
[588.20178223 108.90998840]
[573.33026123 112.11804199]
[560.26806641 103.63176727]
[545.56237793 106.58852386]
[539.61376953 110.99722290]
[530.58917236 109.47048187]
[515.83660889 112.18368530]
[501.08401489 114.89689636]
[486.33145142 117.61010742]
[499.98901367 123.81262207]
[510.09762573 134.89485168]
[515.02172852 149.06359863]
[513.96447754 164.02629089]
[507.09701538 177.36187744]
[495.53048706 186.91258240]
[481.13647461 191.13304138]
[466.24398804 189.34036255]
[453.26272583 181.82460022]
[444.29312134 169.80186462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[16 81]
[17 80]
[20 78]
[21 77]
[22 76]
[24 74]
[25 73]
[26 72]
[27 71]
[28 69]
[29 68]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 45]
[37 44]
[54 66]
[55 65]
[56 64]
[57 63]
[95 179]
[96 178]
[97 177]
[98 176]
[99 174]
[100 173]
[103 170]
[104 169]
[105 168]
[107 164]
[108 163]
[109 162]
[116 154]
[117 153]
[119 151]
[120 150]
[121 149]
[122 148]
[123 146]
[124 145]
[125 144]
[126 143]
[129 142]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
