%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUAACAAGAGGAGAAGGCUUCAAUGGAUCCUUUUGUGGUCCUUGUGCUCUGUCUCUCAUGUUUGCUUCUCCUUUCAAUCUGGAGACAGAGCUCUGGGAGAGGAAAACUCCCUCCUGGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.28060150 214.83514404]
[72.48125458 222.65670776]
[57.49092102 223.19509888]
[44.16343689 216.31192017]
[35.92514038 203.77674866]
[34.89399719 188.81224060]
[41.33517838 175.26548767]
[27.66259193 181.43478394]
[13.99000359 187.60409546]
[0.31741622 193.77340698]
[-13.35517120 199.94270325]
[-27.02775955 206.11201477]
[-40.70034790 212.28132629]
[-54.37293625 218.45062256]
[-68.04552460 224.61993408]
[-67.19299316 239.77372742]
[-71.87593842 254.21099854]
[-81.46102142 265.97918701]
[-94.65194702 273.48678589]
[-109.66474915 275.71841431]
[-124.46907043 272.37228394]
[-137.06274414 263.90093994]
[-145.74258423 251.45004272]
[-149.33470154 236.70347595]
[-147.35331726 221.65560913]
[-140.06636047 208.34152222]
[-128.45936584 198.56184387]
[-114.10207367 193.63920593]
[-98.93618011 194.23933411]
[-85.01275635 200.28108215]
[-74.21482849 210.94734192]
[-60.54224014 204.77804565]
[-46.86965179 198.60873413]
[-33.19706726 192.43942261]
[-19.52447891 186.27012634]
[-5.85189009 180.10081482]
[7.82069731 173.93150330]
[21.49328613 167.76220703]
[35.16587448 161.59289551]
[47.96523666 153.77136230]
[59.69270706 144.41902161]
[71.42018127 135.06666565]
[83.14765167 125.71432495]
[74.38666534 115.43817902]
[71.06107330 102.73432922]
[73.52114105 90.21369934]
[80.96058655 80.30808258]
[91.63915253 74.79798126]
[103.27983093 74.49570465]
[109.44914246 60.82311630]
[115.61844635 47.15052795]
[121.78775787 33.47793961]
[127.95706177 19.80535126]
[134.12637329 6.13276434]
[140.29566956 -7.53982353]
[146.46498108 -21.21241188]
[152.63429260 -34.88499832]
[158.80358887 -48.55758667]
[159.50059509 -57.77820969]
[165.30091858 -62.49115372]
[171.80917358 -76.00568390]
[170.82577515 -91.79630280]
[183.31900024 -99.90608978]
[189.82725525 -113.42062378]
[196.33551025 -126.93515015]
[186.45635986 -138.52488708]
[182.15148926 -153.13269043]
[184.16676331 -168.22767639]
[192.15301514 -181.19454956]
[204.72657776 -189.78671265]
[219.70901489 -192.51551819]
[234.50453186 -188.90818787]
[246.54969788 -179.58972168]
[253.75762939 -166.17460632]
[254.87950134 -150.98706055]
[249.72094727 -136.65844727]
[239.17572021 -125.67127228]
[225.07083130 -119.92913818]
[209.85005188 -120.42689514]
[203.34179688 -106.91236115]
[196.83354187 -93.39783478]
[198.28245544 -78.57386780]
[185.32371521 -69.49742889]
[178.81546021 -55.98289871]
[172.47618103 -42.38827896]
[166.30686951 -28.71569252]
[160.13757324 -15.04310417]
[153.96826172 -1.37051690]
[147.79895020 12.30207062]
[141.62965393 25.97465897]
[135.46034241 39.64724731]
[129.29103088 53.31983566]
[123.12172699 66.99242401]
[116.95242310 80.66500854]
[124.94081879 89.73169708]
[128.16061401 101.97014618]
[125.43783569 114.91307068]
[116.85234833 125.71432495]
[128.57981873 135.06666565]
[140.30729675 144.41902161]
[152.03475952 153.77136230]
[163.76223755 163.12371826]
[172.52574158 166.07441711]
[175.66168213 172.85833740]
[187.15234375 182.50015259]
[198.64300537 192.14196777]
[214.87817383 194.45523071]
[220.74052429 209.77075195]
[210.19935608 222.33322144]
[194.09852600 219.21946716]
[189.00119019 203.63262939]
[177.51052856 193.99081421]
[166.01986694 184.34899902]
[154.40988159 174.85118103]
[142.68241882 165.49884033]
[130.95494080 156.14648438]
[119.22747040 146.79414368]
[107.50000000 137.44180298]
[92.50000000 137.44180298]
[80.77252960 146.79414368]
[69.04505920 156.14648438]
[57.31758499 165.49884033]
[72.31088257 165.94715881]
[85.15699768 173.69165039]
[92.55334473 186.74133301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[40 122]
[41 121]
[42 120]
[43 119]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[60 84]
[61 83]
[63 81]
[64 80]
[65 79]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
