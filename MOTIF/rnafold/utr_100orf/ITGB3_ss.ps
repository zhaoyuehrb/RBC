%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCGGGAGGCGGACGAGAUGCGAGCGCGGCCGCGGCCCCGGCCGCUCUGGGCGACUGUGCUGGCGCUGGGGGCGCUGGCGGGCGUUGGCGUAGGAGGGCCCAACAUCUGUACCACGC\
) } def
/len { sequence length } bind def

/coor [
[99.01091766 135.03033447]
[91.90778351 148.24191284]
[84.97676086 161.54457092]
[78.21900177 174.93609619]
[71.46125031 188.32760620]
[64.70349884 201.71913147]
[68.33451080 217.34587097]
[58.26832581 229.83793640]
[42.22685623 229.61245728]
[32.51574707 216.84242249]
[36.58452606 201.32389832]
[51.31197739 194.96136475]
[58.06973267 181.56985474]
[64.82748413 168.17832947]
[71.58524323 154.78681946]
[71.79209137 147.30746460]
[78.69622040 141.13877869]
[85.79934692 127.92720795]
[73.58264160 110.40225220]
[76.09144592 91.26888275]
[89.29720306 80.19239807]
[86.96992493 65.37403870]
[84.64263916 50.55567932]
[82.31535339 35.73731995]
[72.53062439 23.30471802]
[78.19956970 9.53110695]
[75.87228394 -5.28725195]
[73.54500580 -20.10561180]
[71.21772003 -34.92396927]
[68.89044189 -49.74232864]
[56.98823929 -63.71916199]
[63.78607178 -79.84185028]
[61.07487869 -94.59480286]
[58.36368942 -109.34774780]
[55.46121216 -124.06425476]
[52.36793518 -138.74185181]
[49.27466202 -153.41943359]
[38.85781860 -165.32740784]
[43.80421829 -179.37669373]
[40.71094131 -194.05429077]
[37.61766815 -208.73187256]
[34.52439499 -223.40946960]
[31.43111801 -238.08706665]
[28.33784485 -252.76464844]
[25.24456978 -267.44223022]
[20.35802841 -275.30618286]
[22.26673508 -282.54083252]
[19.55554390 -297.29376221]
[16.84435081 -312.04672241]
[13.29005146 -316.19763184]
[11.90905666 -320.83963013]
[12.50996208 -325.02993774]
[14.54339600 -328.05023193]
[12.98838043 -342.96939087]
[11.43336391 -357.88858032]
[9.87834835 -372.80776978]
[-0.18212266 -385.75839233]
[6.25297356 -400.84222412]
[22.56376266 -402.54226685]
[31.97110176 -389.10971069]
[24.79752922 -374.36276245]
[26.35254478 -359.44360352]
[27.90756035 -344.52441406]
[29.46257591 -329.60522461]
[31.59729767 -314.75790405]
[34.30849075 -300.00497437]
[37.01968384 -285.25201416]
[39.92216110 -270.53552246]
[43.01543427 -255.85792542]
[46.10870743 -241.18032837]
[49.20198441 -226.50274658]
[52.29525757 -211.82514954]
[55.38853073 -197.14756775]
[58.48180771 -182.46997070]
[68.67739868 -171.61183167]
[63.95225143 -156.51271057]
[67.04552460 -141.83511353]
[70.13880157 -127.15753174]
[74.65145111 -121.18933105]
[73.11663818 -112.05893707]
[75.82782745 -97.30599213]
[78.53901672 -82.55304718]
[88.36494446 -75.36870575]
[90.68771362 -63.01041031]
[83.70880127 -52.06961060]
[86.03607941 -37.25125122]
[88.36336517 -22.43289375]
[90.69064331 -7.61453438]
[93.01792908 7.20382452]
[102.63619232 18.57651901]
[97.13371277 33.41003799]
[99.46099854 48.22839737]
[101.78827667 63.04675293]
[104.11556244 77.86511230]
[124.33644867 88.48715210]
[127.44642639 115.10897827]
[140.74908447 122.04000854]
[156.42166138 118.61215210]
[168.78199768 128.83966064]
[168.34829712 144.87684631]
[155.45326233 154.42137146]
[139.98887634 150.15147400]
[133.81806946 135.34266663]
[120.51540375 128.41163635]
[128.86666870 140.87182617]
[137.21795654 153.33201599]
[145.56922913 165.79219055]
[157.84829712 174.40756226]
[165.73085022 187.16943359]
[167.93734741 202.00625610]
[164.10961914 216.50965881]
[154.86900330 228.32536316]
[141.71548462 235.53541565]
[126.78419495 236.96943665]
[112.49884033 232.39466858]
[101.17828369 222.55366516]
[94.66013336 209.04391479]
[94.00244141 194.05833435]
[99.31205750 180.02932739]
[99.21167755 165.02966309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 15]
[4 14]
[5 13]
[6 12]
[21 94]
[22 93]
[23 92]
[24 91]
[26 89]
[27 88]
[28 87]
[29 86]
[30 85]
[32 82]
[33 81]
[34 80]
[35 78]
[36 77]
[37 76]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[47 67]
[48 66]
[49 65]
[53 64]
[54 63]
[55 62]
[56 61]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
