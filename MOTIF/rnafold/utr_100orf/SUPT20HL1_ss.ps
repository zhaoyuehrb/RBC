%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAGCCGUGAUUCCACCCUGCUUCACCAACGCACAUGCGUUUUCUCUCCUCUUAGGGGCCCUGUUUUCUGUUACAAUGGAUCGAGAUUUAGAACAGG\
) } def
/len { sequence length } bind def

/coor [
[95.56882477 131.69831848]
[79.46367645 124.54950714]
[67.41122437 133.47914124]
[55.35876846 142.40876770]
[50.21044540 150.17327881]
[42.78974915 151.42176819]
[30.46541405 159.97225952]
[18.14108086 168.52273560]
[10.58371353 187.08265686]
[-8.60963535 188.27774048]
[-20.37854958 197.57788086]
[-32.14746475 206.87802124]
[-37.70042038 222.30841064]
[-53.88575745 224.94790649]
[-64.05338287 212.08123779]
[-57.74372101 196.94451904]
[-41.44760513 195.10911560]
[-29.67869186 185.80897522]
[-17.90977859 176.50883484]
[-17.60181427 166.07899475]
[-11.39602375 157.41629028]
[-1.20417309 153.61405945]
[9.59059620 156.19841003]
[21.91493034 147.64791870]
[34.23926544 139.09744263]
[46.42913437 130.35632324]
[58.48159027 121.42668915]
[70.53404236 112.49705505]
[64.61212921 102.50006866]
[62.36398697 89.98548126]
[64.77102661 76.37876129]
[53.91989899 66.02246094]
[43.06876755 55.66615677]
[32.21763611 45.30985641]
[21.36650658 34.95355606]
[5.31231165 31.60768318]
[0.44052690 15.94889069]
[11.76282692 4.08560467]
[27.63179970 8.22175503]
[31.72280693 24.10242653]
[42.57393646 34.45872498]
[53.42506790 44.81502533]
[64.27619934 55.17132568]
[75.12732697 65.52762604]
[82.36671448 63.56771088]
[78.44712830 49.08887100]
[92.92603302 45.16952515]
[96.84549713 59.64788437]
[104.08488464 57.68796921]
[108.22940826 43.27190399]
[112.37393188 28.85584068]
[116.51846313 14.43977737]
[120.66298676 0.02371287]
[119.22840118 -16.86943054]
[135.06422424 -22.92443657]
[145.26638794 -9.38367653]
[135.07905579 4.16823864]
[130.93452454 18.58430290]
[126.79000092 33.00036621]
[122.64546967 47.41643143]
[118.50094604 61.83249664]
[132.67109680 82.18860626]
[131.77183533 103.86906433]
[145.82237244 109.12095642]
[159.87290955 114.37285614]
[173.92344666 119.62474823]
[187.97398376 124.87664795]
[202.02452087 130.12854004]
[216.07505798 135.38044739]
[230.12559509 140.63233948]
[244.36848450 134.32537842]
[258.54290771 139.85171509]
[264.46786499 153.46900940]
[278.51840210 158.72090149]
[292.56893921 163.97279358]
[303.55123901 153.37319946]
[318.04763794 148.59649658]
[333.17987061 150.59109497]
[345.94342041 158.96098328]
[353.80404663 172.04431152]
[355.20101929 187.24336243]
[349.85699463 201.54035950]
[338.83303833 212.09663391]
[324.31793213 216.81620789]
[309.19366455 214.76202393]
[296.46319580 206.34194946]
[288.65414429 193.22776794]
[287.31701660 178.02333069]
[273.26647949 172.77143860]
[259.21597290 167.51954651]
[245.81170654 173.91184998]
[231.48764038 168.78582764]
[224.87368774 154.68287659]
[210.82315063 149.43098450]
[196.77261353 144.17907715]
[182.72207642 138.92718506]
[168.67153931 133.67529297]
[154.62100220 128.42338562]
[140.57048035 123.17149353]
[126.51993561 117.91960144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[6 25]
[7 24]
[8 23]
[10 19]
[11 18]
[12 17]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[63 100]
[64 99]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
[70 93]
[73 90]
[74 89]
[75 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
