%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCUCAUUUUGGCAGAACUUACCAUGUCGACCAGCCGCAAAUUAAAGAGUCAUGGCAUGAGGAGGAGCAAGAGCCGAUCUCCUCACAAGGGAGUCAAGAGAGGUGGCAGCAAAAGAAAAUACC\
) } def
/len { sequence length } bind def

/coor [
[208.00502014 376.57632446]
[202.17849731 362.75418091]
[196.35197449 348.93203735]
[190.35359192 335.18359375]
[184.18429565 321.51101685]
[178.01498413 307.83840942]
[171.84567261 294.16583252]
[166.16465759 289.30975342]
[165.69773865 280.07461548]
[159.87121582 266.25247192]
[154.04469299 252.43032837]
[148.21817017 238.60818481]
[142.39164734 224.78604126]
[136.56512451 210.96389771]
[130.73861694 197.14175415]
[117.45375824 195.30484009]
[106.74250793 187.05525208]
[101.49040985 174.47946167]
[103.17949677 160.84663391]
[111.47199249 149.75891113]
[105.99187469 135.79580688]
[100.51175690 121.83270264]
[83.99109650 114.85408783]
[78.26658630 97.85810852]
[64.75205231 91.34985352]
[51.23752213 84.84159851]
[37.72298813 78.33334351]
[24.20845413 71.82508850]
[10.53586674 65.65578461]
[-3.28627634 59.82925797]
[-13.16880608 71.28311157]
[-26.10813713 79.12077332]
[-40.83660507 82.57438660]
[-55.91126251 81.30559540]
[-69.85525513 75.43871307]
[-81.30248260 65.54850769]
[-89.13146973 52.60393143]
[-92.57521057 37.87314987]
[-91.29632568 22.79934502]
[-85.42009735 8.85928917]
[-75.52222443 -2.58131123]
[-62.57240295 -10.40162373]
[-47.83932114 -13.83549213]
[-32.76637650 -12.54650307]
[-18.83026123 -6.66093731]
[-7.39629507 3.24459696]
[0.41533813 16.19965744]
[3.83933449 30.93503761]
[2.54024553 46.00711441]
[16.36238861 51.83363724]
[21.13796234 50.84785080]
[26.57477951 52.93040085]
[30.71671104 58.31055450]
[44.23124313 64.81880951]
[57.74577713 71.32706451]
[71.26030731 77.83531952]
[84.77484131 84.34358215]
[90.37112427 80.39862823]
[96.91390228 78.38044739]
[103.76004028 78.48741913]
[111.26004028 65.49703979]
[118.76004028 52.50666046]
[126.26004028 39.51627731]
[133.76004028 26.52589607]
[141.26004028 13.53551579]
[148.76004028 0.54513478]
[156.26004028 -12.44524670]
[155.24383545 -32.50514984]
[172.20948792 -41.64623260]
[179.05265808 -54.99431229]
[177.69525146 -71.33718109]
[191.32228088 -80.46056366]
[205.91542053 -72.97909546]
[206.46250916 -56.58907700]
[192.40072632 -48.15114975]
[185.55757141 -34.80307388]
[189.58808899 -25.26772690]
[187.60494995 -14.88222504]
[180.03482056 -7.18767738]
[169.25042725 -4.94524622]
[161.75042725 8.04513454]
[154.25042725 21.03551674]
[146.75042725 34.02589798]
[139.25042725 47.01627731]
[131.75042725 60.00666046]
[124.25041962 72.99703979]
[116.75041962 85.98741913]
[121.77763367 101.63201141]
[114.47486877 116.35259247]
[119.95497894 130.31570435]
[125.43509674 144.27880859]
[141.81610107 148.27682495]
[152.51167297 161.09761047]
[153.48852539 177.59956360]
[144.56076050 191.31523132]
[150.38726807 205.13737488]
[156.21379089 218.95951843]
[162.04031372 232.78166199]
[167.86683655 246.60380554]
[173.69335938 260.42596436]
[179.51988220 274.24810791]
[185.51826477 287.99652100]
[191.68757629 301.66912842]
[197.85687256 315.34170532]
[204.02618408 329.01428223]
[210.47843933 335.63806152]
[210.17411804 343.10549927]
[216.00064087 356.92764282]
[221.82716370 370.74978638]
[236.93241882 369.69619751]
[251.56068420 373.60671997]
[264.12521362 382.05725098]
[273.26309204 394.13110352]
[277.98309326 408.51861572]
[277.77325439 423.65911865]
[272.65634155 437.91027832]
[263.18734741 449.72625732]
[250.39346313 457.82534790]
[235.66244507 461.32897949]
[220.59219360 459.85714722]
[206.81742859 453.56951904]
[195.83233643 443.14807129]
[188.82847595 429.72329712]
[186.56561279 414.75137329]
[189.28916931 399.85638428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 105]
[5 104]
[6 103]
[7 102]
[9 101]
[10 100]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[20 91]
[21 90]
[22 89]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 50]
[30 49]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[67 80]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
