%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGUUGGGAAAUGUCACCAGAGUAAAAGAAUUUAUAUUUCUGGGACUUACUCAAUCCCAAGACCAGAGUUUGGUCUUGUUUCUUUUUUUAUGUCUUG\
) } def
/len { sequence length } bind def

/coor [
[177.69923401 165.92507935]
[190.49440002 158.09667969]
[204.85310364 153.74232483]
[190.97270203 148.05599976]
[177.09228516 142.36967468]
[169.57710266 142.75364685]
[162.87306213 136.28460693]
[149.17622375 130.16935730]
[135.47937012 124.05410004]
[121.78252411 117.93884277]
[108.08567047 111.82359314]
[94.16036224 113.07952881]
[85.79907227 101.87326050]
[72.10222626 95.75800323]
[62.81028748 95.08529663]
[58.07912445 89.23366547]
[44.57908249 82.69540405]
[31.07904434 76.15713501]
[21.81252289 75.19577789]
[17.26563263 69.19984436]
[3.97546220 62.24488831]
[-9.31470871 55.28993607]
[-22.60487938 48.33498383]
[-35.89505005 41.38002777]
[-49.49513626 35.05250549]
[-63.37554550 29.36617851]
[-77.25595093 23.67985153]
[-91.13636017 17.99352646]
[-105.01676941 12.30719948]
[-121.18561554 15.04589558]
[-131.43194580 2.24180818]
[-125.21521759 -12.93331432]
[-108.93066406 -14.86860752]
[-99.33043671 -1.57320714]
[-85.45003510 4.11311913]
[-71.56962585 9.79944515]
[-57.68922043 15.48577118]
[-43.80881119 21.17209625]
[-40.29500961 20.02831078]
[-36.03192902 20.64538383]
[-31.90992355 23.36466408]
[-28.94009590 28.08985901]
[-15.64992523 35.04481125]
[-2.35975528 41.99976349]
[10.93041515 48.95471954]
[24.22058487 55.90967178]
[37.61730957 62.65709686]
[51.11735153 69.19536591]
[64.61739349 75.73362732]
[78.21747589 82.06115723]
[91.91432953 88.17640686]
[105.83963776 86.92047119]
[114.20092773 98.12673950]
[127.89777374 104.24199677]
[141.59461975 110.35725403]
[155.29147339 116.47250366]
[168.98832703 122.58776093]
[182.77861023 128.48925781]
[196.65902710 134.17558289]
[210.53942871 139.86190796]
[225.52310181 140.56152344]
[239.87297058 136.19329834]
[254.22283936 131.82507324]
[268.57269287 127.45685577]
[282.92257690 123.08863831]
[297.27243042 118.72042084]
[311.62231445 114.35219574]
[325.97216797 109.98397827]
[334.75942993 96.56147003]
[350.74514771 95.20633698]
[361.66644287 106.95812988]
[359.14544678 122.80187225]
[345.11605835 130.58360291]
[330.34039307 124.33383942]
[315.99050903 128.70205688]
[301.64065552 133.07028198]
[287.29080200 137.43850708]
[272.94091797 141.80673218]
[258.59106445 146.17494202]
[244.24119568 150.54316711]
[229.89132690 154.91139221]
[243.77793884 160.58253479]
[255.78868103 169.56820679]
[265.14923096 181.28912354]
[271.25613403 194.98970032]
[273.71575928 209.78666687]
[272.36947632 224.72613525]
[267.30407715 238.84498596]
[258.84616089 251.23301697]
[247.54095459 261.09164429]
[234.11726379 267.78524780]
[219.44049072 270.88238525]
[204.45678711 270.18334961]
[190.13211060 265.73321533]
[177.38993835 257.81884766]
[167.05171204 246.95050049]
[159.78388977 233.82881165]
[156.05503845 219.29968262]
[156.10552979 204.29975891]
[159.93209839 189.79606628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 60]
[4 59]
[5 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[13 51]
[14 50]
[16 49]
[17 48]
[18 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
