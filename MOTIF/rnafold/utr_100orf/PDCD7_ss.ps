%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:44:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUGAGGAGCCACUCAGAUUCCUGUCACUUCUCAAAGCAUCUCCGUCGUGAACAUGGCCCUGCCACCAUUCUUCGGCCAGGGUCGCCCAGGCCCACCGCCCCCGCAGCCGCCGCCUCCUGCUCCUUUCGGCUGUCCGCCACCGCCGCUGCCCU\
) } def
/len { sequence length } bind def

/coor [
[66.41460419 144.06561279]
[54.23963928 131.23695374]
[40.82012177 137.93893433]
[27.40060043 144.64089966]
[13.98108101 151.34288025]
[0.56156188 158.04486084]
[-12.85795784 164.74684143]
[-26.20931435 171.58358765]
[-39.49115372 178.55444336]
[-52.77299500 185.52528381]
[-66.05483246 192.49613953]
[-68.41065216 207.71968079]
[-79.15328217 218.51084900]
[-94.01448059 220.87915039]
[-107.26200104 214.12332153]
[-120.54383850 221.09417725]
[-130.46917725 238.59648132]
[-149.71563721 237.12362671]
[-162.70602417 244.62362671]
[-175.69641113 252.12362671]
[-175.01638794 267.41403198]
[-181.53056335 281.26406860]
[-193.74201965 290.49114990]
[-208.84465027 292.97494507]
[-223.36798096 288.14468384]
[-233.97465515 277.11035156]
[-238.22734070 262.40750122]
[-235.14880371 247.41481018]
[-225.44647217 235.57743835]
[-211.34985352 229.61555481]
[-196.09826660 230.89913940]
[-183.19641113 239.13325500]
[-170.20602417 231.63325500]
[-157.21563721 224.13325500]
[-155.44787598 213.99797058]
[-148.21945190 206.37039185]
[-137.76443481 203.96173096]
[-127.51468658 207.81233215]
[-114.23284912 200.84149170]
[-112.26733398 186.10124207]
[-101.87613678 175.21606445]
[-86.89266968 172.50514221]
[-73.02568054 179.21429443]
[-59.74384308 172.24345398]
[-46.46200180 165.27259827]
[-33.18016052 158.30175781]
[-28.69326210 152.37458801]
[-19.55993462 151.32731628]
[-6.14041519 144.62533569]
[7.27910423 137.92335510]
[20.69862366 131.22138977]
[34.11814499 124.51940918]
[47.53766251 117.81742859]
[44.60958099 101.28806305]
[46.76615524 84.64045715]
[53.80942154 69.40280914]
[65.09282684 56.97387695]
[79.58060455 48.49460220]
[75.99086761 33.93047714]
[72.40113068 19.36635017]
[68.81139374 4.80222225]
[65.22166443 -9.76190472]
[61.63192749 -24.32603264]
[58.04219055 -38.89015961]
[54.30599213 -53.41740417]
[50.42370605 -67.90628815]
[35.56759262 -71.80390930]
[24.66191864 -82.61879730]
[20.64026260 -97.44181824]
[24.58442688 -112.28564453]
[35.43344879 -123.15736389]
[50.26900101 -127.13253784]
[65.10038757 -123.14186096]
[75.93804932 -112.25881195]
[79.86669922 -97.41087341]
[75.82955933 -82.59207153]
[64.91259003 -71.78857422]
[68.79487610 -57.29969025]
[73.59137726 -51.62014008]
[72.60631561 -42.47989655]
[76.19605255 -27.91576767]
[79.78578949 -13.35163975]
[83.37552643 1.21248710]
[86.96525574 15.77661419]
[90.55499268 30.34074211]
[94.14472961 44.90486908]
[100.92417145 44.60231400]
[107.68975067 45.13083267]
[114.33997345 46.48249817]
[120.77506256 48.63703156]
[126.89848328 51.56211090]
[132.61837769 55.21385193]
[143.00924683 44.39581680]
[153.40011597 33.57777786]
[154.51593018 17.57357597]
[167.80546570 8.58649731]
[183.07414246 13.51065922]
[188.60911560 28.56866646]
[180.16444397 42.20930481]
[164.21813965 43.96864319]
[153.82728577 54.78668213]
[143.43641663 65.60472107]
[150.69276428 77.63927460]
[154.68791199 91.11235046]
[155.16485596 105.15718842]
[152.09291077 118.87025452]
[165.37475586 125.84110260]
[178.65658569 132.81195068]
[191.93843079 139.78279114]
[205.22027588 146.75364685]
[221.03541565 146.31587219]
[228.70915222 159.08155823]
[241.99099731 166.05241394]
[262.23828125 153.49681091]
[289.40670776 165.09301758]
[304.35806274 166.30001831]
[317.46069336 157.04255676]
[332.82702637 161.65286255]
[338.66934204 176.59431458]
[330.50592041 190.40509033]
[314.59899902 192.49076843]
[303.15106201 181.25137329]
[288.19970703 180.04437256]
[285.12161255 186.88362122]
[298.80010986 193.03981018]
[313.71145630 194.66799927]
[316.77066040 209.35273743]
[303.74990845 216.79986572]
[292.64389038 206.71830750]
[278.96539307 200.56211853]
[275.88729858 207.40136719]
[286.70535278 217.79223633]
[297.52337646 228.18310547]
[313.52758789 229.29891968]
[322.51467896 242.58847046]
[317.59051514 257.85711670]
[302.53250122 263.39212036]
[288.89184570 254.94743347]
[287.13250732 239.00114441]
[276.31448364 228.61027527]
[265.49645996 218.21940613]
[248.97238159 214.55006409]
[237.45780945 204.39102173]
[232.87287903 191.38339233]
[235.02014160 179.33425903]
[221.73831177 172.36340332]
[206.87316895 173.29978943]
[198.24942017 160.03549194]
[184.96757507 153.06463623]
[171.68574524 146.09379578]
[158.40390015 139.12294006]
[145.12205505 132.15209961]
[132.69123840 144.73300171]
[116.92920685 152.75566101]
[99.44212341 155.40258789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 46]
[9 45]
[10 44]
[11 43]
[15 39]
[16 38]
[18 34]
[19 33]
[20 32]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 78]
[66 77]
[92 102]
[93 101]
[94 100]
[106 152]
[107 151]
[108 150]
[109 149]
[110 148]
[112 146]
[113 145]
[115 123]
[116 122]
[131 141]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
