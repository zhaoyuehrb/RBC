%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGCUCUUGGUGAGGGUACCCUCUCUUCCGGAGCGGGGCGAGCUGGACUGCAACAUCUGCUACCGUCCUUUCAACCUCGGGUGCCGCGCGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-6.63877964 227.26867676]
[-21.57111931 228.69177246]
[-35.00189590 222.01239014]
[-42.87768936 209.24633789]
[-42.82159042 194.24644470]
[-34.84983826 181.53906250]
[-49.44351578 185.00671387]
[-64.03719330 188.47434998]
[-78.63087463 191.94200134]
[-93.22454834 195.40963745]
[-101.01248932 200.52243042]
[-108.32592773 198.75068665]
[-123.02039337 201.76280212]
[-136.39453125 214.29992676]
[-152.81417847 208.32527161]
[-167.40785217 211.79292297]
[-182.00154114 215.26057434]
[-196.59521484 218.72821045]
[-211.18888855 222.19586182]
[-222.73268127 233.84373474]
[-238.52091980 229.40934753]
[-242.31201172 213.45442200]
[-230.20600891 202.39201355]
[-214.65653992 207.60217285]
[-200.06285095 204.13453674]
[-185.46917725 200.66688538]
[-170.87550354 197.19924927]
[-156.28182983 193.73159790]
[-149.58570862 183.52474976]
[-137.32077026 180.59284973]
[-126.03250122 187.06834412]
[-111.33803558 184.05622864]
[-96.69219208 180.81596375]
[-82.09851837 177.34831238]
[-67.50483704 173.88067627]
[-52.91115952 170.41302490]
[-38.31748199 166.94538879]
[-24.35032272 161.47561646]
[-11.28287792 154.11070251]
[1.78456533 146.74578857]
[14.85200882 139.38087463]
[27.91945267 132.01596069]
[40.98689651 124.65105438]
[48.27545547 111.66159058]
[64.09661865 111.62623596]
[77.16406250 104.26132202]
[81.29567719 77.39943695]
[112.90216064 66.98867035]
[120.86852264 54.27894974]
[128.83489990 41.56922913]
[136.80125427 28.85950851]
[135.98440552 7.56691742]
[154.21557617 -1.89031351]
[160.96299744 -15.28703880]
[167.71041870 -28.68376350]
[164.06735229 -44.30770874]
[174.12390137 -56.80752563]
[190.16554260 -56.59442139]
[199.88648987 -43.83187485]
[195.82968140 -28.31021881]
[181.10714722 -21.93633842]
[174.35972595 -8.53961277]
[167.61228943 4.85711193]
[171.85580444 13.00564861]
[171.76747131 22.33186913]
[167.23706055 30.64334488]
[159.21395874 35.92472076]
[149.51098633 36.82587433]
[141.54461670 49.53559494]
[133.57824707 62.24531555]
[125.61187744 74.95503998]
[128.12825012 82.02029419]
[140.01197815 72.86731720]
[152.38923645 81.34100342]
[148.15504456 95.73098755]
[133.16101074 96.15081024]
[135.67738342 103.21606445]
[149.88446045 108.02845001]
[164.09152222 112.84083557]
[181.03320312 112.19572449]
[186.34301758 128.29672241]
[172.34117126 137.85623169]
[159.27914429 127.04791260]
[145.07206726 122.23552704]
[130.86499023 117.42314148]
[118.56742859 126.53966522]
[104.79071808 128.94281006]
[92.67604828 125.24233246]
[84.52897644 117.32876587]
[71.46153259 124.69367981]
[63.23830414 138.20993042]
[48.35180664 137.71850586]
[35.28436279 145.08340454]
[22.21692085 152.44831848]
[9.14947605 159.81323242]
[-3.91796708 167.17814636]
[-16.98541069 174.54306030]
[-2.50505447 178.45704651]
[7.72271824 189.42939758]
[10.61115932 204.14866638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[12 32]
[13 31]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[43 92]
[45 90]
[46 89]
[48 71]
[49 70]
[50 69]
[51 68]
[53 63]
[54 62]
[55 61]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
