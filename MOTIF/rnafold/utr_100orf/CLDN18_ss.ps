%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCUUCGGCAGCAGGAGGGCGGCAGCUUCUCGCAGGCGGCAGGGCGGGCGGCCAGGAUCAUGUCCACCACCACAUGCCAAGUGGUGGCGUUCCUCCUGUCCAUCCUGGGGCUGGCCGGCUGCAUCGCGGCCACCGGGAUGGACAUGUGGAGCACCCAGG\
) } def
/len { sequence length } bind def

/coor [
[63.85672760 178.78219604]
[58.38861465 184.27737427]
[51.56290054 188.32749939]
[43.76506805 190.59753418]
[35.46285629 190.85612488]
[28.25682831 204.01185608]
[21.05079842 217.16757202]
[13.84477043 230.32330322]
[6.63874102 243.47903442]
[12.48435402 257.98291016]
[7.59030676 272.83493042]
[-5.73258066 281.02239990]
[-21.19364929 278.67947388]
[-31.49265289 266.91235352]
[-31.76671982 251.27719116]
[-21.88644218 239.15637207]
[-6.51698542 236.27301025]
[0.68904358 223.11727905]
[7.89507246 209.96154785]
[15.10110188 196.80581665]
[22.30713081 183.65010071]
[12.71461964 172.11824036]
[-1.53325462 176.80845642]
[-12.22215748 188.47283936]
[-26.73056793 185.10307312]
[-40.97844315 189.79328918]
[-52.89511871 203.80250549]
[-69.91497803 199.61022949]
[-84.06981659 204.57415771]
[-92.28861237 218.35206604]
[-108.20375824 220.37388611]
[-119.60651398 209.08863831]
[-117.74965668 193.15339661]
[-104.05760956 184.79232788]
[-89.03374481 190.41931152]
[-74.87890625 185.45538330]
[-69.33587646 174.66984558]
[-57.54532242 170.43502808]
[-45.66865158 175.54541016]
[-31.42077827 170.85519409]
[-21.75097847 159.52629089]
[-6.22346592 162.56057739]
[8.02440834 157.87036133]
[26.25289726 131.85675049]
[54.59716415 134.41152954]
[65.25474548 123.85616302]
[75.91233063 113.30078888]
[60.11771393 113.20579529]
[44.00648880 107.60514832]
[30.51894951 101.04113007]
[14.20784950 102.73819733]
[4.80297899 89.30389404]
[11.97926331 74.55828857]
[28.35435677 73.67038727]
[37.08296585 87.55359650]
[50.57050323 94.11760712]
[59.71187973 82.22411346]
[68.85245514 70.33168030]
[59.03947830 58.98683929]
[49.22650528 47.64199448]
[39.41352844 36.29714966]
[24.47860718 28.27315331]
[28.05462265 11.70063305]
[44.96942139 10.54916668]
[50.75837326 26.48417282]
[60.57135010 37.82901764]
[70.38432312 49.17386246]
[80.19730377 60.51870728]
[87.14695740 57.69873810]
[107.99594116 49.23882294]
[107.12911224 34.26389313]
[106.26228333 19.28895950]
[105.39545441 4.31402636]
[104.52862549 -10.66090584]
[103.66179657 -25.63583946]
[102.79497528 -40.61077118]
[90.14778137 -49.80764771]
[86.42129517 -64.99472809]
[93.37504578 -79.00112915]
[107.72568512 -85.21346283]
[122.69728851 -80.69845581]
[131.22070312 -67.58795166]
[129.27145386 -52.07233429]
[117.76990509 -41.47760010]
[118.63673401 -26.50266647]
[119.50356293 -11.52773380]
[120.37038422 3.44719887]
[121.23721313 18.42213249]
[122.10404205 33.39706421]
[122.97087097 48.37199783]
[132.40081787 73.25721741]
[126.80458832 93.78383636]
[141.78718567 94.50631714]
[156.76977539 95.22879791]
[171.75236511 95.95127106]
[186.73495483 96.67375183]
[196.48155212 84.74437714]
[211.21148682 80.88661957]
[225.22283936 86.37716675]
[233.21871948 98.91526031]
[248.20132446 99.63774109]
[263.18389893 100.36022186]
[278.16650391 101.08269501]
[293.14907837 101.80517578]
[308.13168335 102.52765656]
[323.11425781 103.25013733]
[338.09686279 103.97261810]
[353.07943726 104.69509888]
[368.06204224 105.41757202]
[383.04464722 106.14005280]
[398.02722168 106.86253357]
[402.75045776 104.42331696]
[407.46096802 104.10493469]
[411.34219360 105.53935242]
[413.84729004 108.08459473]
[428.76309204 109.67168427]
[443.67889404 111.25878143]
[458.59469604 112.84587097]
[473.51049805 114.43296814]
[488.42630005 116.02005768]
[498.01296997 103.93291473]
[512.61999512 98.96913910]
[527.58624268 102.71266174]
[538.13610840 113.96893311]
[540.90319824 129.14611816]
[535.00445557 143.40124512]
[522.32214355 152.18553162]
[506.90325928 152.69595337]
[493.66778564 144.76965332]
[486.83920288 130.93586731]
[471.92340088 129.34877014]
[457.00759888 127.76167297]
[442.09179688 126.17458344]
[427.17599487 124.58748627]
[412.26019287 123.00039673]
[397.30474854 121.84512329]
[382.32214355 121.12264252]
[367.33956909 120.40016174]
[352.35696411 119.67768860]
[337.37438965 118.95520782]
[322.39178467 118.23272705]
[307.40921021 117.51024628]
[292.42660522 116.78776550]
[277.44403076 116.06529236]
[262.46142578 115.34281158]
[247.47883606 114.62033081]
[232.49624634 113.89785004]
[223.33105469 125.60841370]
[208.85643005 129.72532654]
[194.56602478 124.46817780]
[186.01246643 111.65634155]
[171.02987671 110.93386841]
[156.04728699 110.21138763]
[141.06469727 109.48890686]
[126.08210754 108.76642609]
[109.85257721 125.69150543]
[86.46770477 123.95837402]
[75.81011963 134.51374817]
[65.15253448 145.06912231]
[68.30990601 151.12524414]
[69.89263153 157.95849609]
[69.71110535 165.15480042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[22 43]
[23 42]
[25 40]
[26 39]
[28 36]
[29 35]
[45 159]
[46 158]
[47 157]
[49 56]
[50 55]
[58 68]
[59 67]
[60 66]
[61 65]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[92 155]
[93 154]
[94 153]
[95 152]
[96 151]
[100 147]
[101 146]
[102 145]
[103 144]
[104 143]
[105 142]
[106 141]
[107 140]
[108 139]
[109 138]
[110 137]
[111 136]
[115 135]
[116 134]
[117 133]
[118 132]
[119 131]
[120 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
