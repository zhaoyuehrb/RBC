%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAAUAGAACAUCAGUGACAGAUUUCAUCCUUCUGGGUCUGACGGAUAAUCCGCAACUGCAGGUUGUGAUUUUCUCGUUCCUAUUUCUUACGUAUG\
) } def
/len { sequence length } bind def

/coor [
[113.77292633 306.22146606]
[124.85687256 295.36209106]
[122.53339386 280.54315186]
[120.20992279 265.72418213]
[110.59458160 254.34901428]
[116.10086823 239.51692200]
[113.77739716 224.69796753]
[111.45392609 209.87899780]
[109.13045502 195.06004333]
[106.80698395 180.24108887]
[104.48350525 165.42213440]
[101.92985535 150.64109802]
[99.14663696 135.90158081]
[96.36341858 121.16204834]
[83.57518768 113.83049011]
[78.52777100 99.98078918]
[64.47723389 94.72888947]
[50.42670059 89.47699738]
[36.37616348 84.22509766]
[23.45899963 92.61872864]
[8.25395298 91.80637360]
[-3.41912842 82.30883789]
[-7.21589613 67.93099213]
[-21.26643372 62.67909241]
[-35.31697083 57.42719650]
[-49.36750793 52.17530060]
[-61.66244125 61.49399567]
[-77.04541779 62.66345596]
[-90.60778046 55.31050873]
[-98.02182770 41.78145218]
[-96.92177582 26.39335823]
[-87.65863037 14.05651379]
[-73.18824005 8.70755863]
[-58.12804794 12.05332756]
[-47.28370667 23.02619553]
[-44.11560822 38.12476349]
[-30.06507301 43.37665939]
[-16.01453590 48.62855530]
[-1.96399963 53.88045120]
[10.33273029 45.51813126]
[25.37354469 46.00588226]
[37.38351440 55.36611938]
[41.62805939 70.17456055]
[55.67859650 75.42646027]
[69.72913361 80.67835236]
[83.77967072 85.93025208]
[95.68822479 78.96513367]
[109.37670135 80.68331146]
[120.22782898 70.32701111]
[131.07896423 59.97071075]
[135.72013855 44.84556580]
[150.26914978 41.65563202]
[161.12026978 31.29933357]
[171.97140503 20.94303322]
[182.82254028 10.58673191]
[186.96749878 2.24335504]
[194.17588806 0.08360863]
[205.34385681 -9.93021393]
[216.51181030 -19.94403648]
[227.67977905 -29.95785713]
[238.84774780 -39.97167969]
[250.01570129 -49.98550034]
[257.77197266 -65.06120300]
[274.40563965 -61.78143692]
[275.85870361 -44.88986969]
[260.02951050 -38.81753922]
[248.86155701 -28.80371857]
[237.69360352 -18.78989601]
[226.52563477 -8.77607441]
[215.35768127 1.23774815]
[204.18971252 11.25157070]
[193.17883301 21.43786430]
[182.32771301 31.79416275]
[171.47657776 42.15046310]
[160.62544250 52.50676346]
[156.76040649 66.89115906]
[141.43525696 70.82184601]
[130.58413696 81.17814636]
[119.73300171 91.53444672]
[120.44184875 106.57173157]
[111.10295105 118.37882996]
[113.88616943 133.11836243]
[116.66938019 147.85787964]
[121.41337585 155.87580872]
[119.30246735 163.09866333]
[121.62593842 177.91761780]
[123.94940948 192.73657227]
[126.27288055 207.55552673]
[128.59635925 222.37448120]
[130.91983032 237.19345093]
[140.70137024 249.62855530]
[135.02888489 263.40072632]
[137.35235596 278.21966553]
[139.67582703 293.03863525]
[153.55146790 299.98455811]
[160.66447449 313.77532959]
[158.27975464 329.10806274]
[147.31427002 340.08700562]
[131.98448181 342.49057007]
[118.18499756 335.39453125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[6 90]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 83]
[13 82]
[14 81]
[16 46]
[17 45]
[18 44]
[19 43]
[23 39]
[24 38]
[25 37]
[26 36]
[48 79]
[49 78]
[50 77]
[52 75]
[53 74]
[54 73]
[55 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
