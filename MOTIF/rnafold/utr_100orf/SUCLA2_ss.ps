%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:19:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCUGUCGCCUGUGCGCCUGCGCGCGGCGCCGAGGGGACGGGGUCCGACUCAGAAAUGGCGGCCUCCAUGUUCUACGGCAGGCUAGUGGCCGUGGCCACCCUUCGGAACCACCGGCCUCGGACGGCCCAGCGGGCUGCUGCUCAGGUUCUGGGAA\
) } def
/len { sequence length } bind def

/coor [
[93.33670807 810.66088867]
[82.44618225 799.20788574]
[82.92744446 783.41088867]
[94.49497986 772.64208984]
[94.79321289 757.64501953]
[95.09144592 742.64801025]
[95.38967896 727.65093994]
[84.91605377 717.12298584]
[85.00486755 701.90960693]
[96.11861420 690.99530029]
[96.41684723 675.99822998]
[96.71508026 661.00122070]
[97.01331329 646.00415039]
[97.31154633 631.00714111]
[89.82881927 618.12854004]
[97.83897400 604.48492432]
[98.13720703 589.48791504]
[98.28632355 574.48864746]
[98.28632355 559.48864746]
[89.94081116 550.68481445]
[89.85040283 538.15289307]
[98.61125946 528.63812256]
[98.90949249 513.64111328]
[91.42676544 500.76251221]
[99.43691254 487.11889648]
[99.73514557 472.12185669]
[100.03337860 457.12481689]
[100.18250275 442.12554932]
[100.18250275 427.12554932]
[97.02037048 420.39999390]
[100.33459473 411.82806396]
[100.63282776 396.83102417]
[100.93106079 381.83398438]
[101.22929382 366.83697510]
[90.65102386 350.68893433]
[101.19599915 333.55062866]
[100.89776611 318.55358887]
[100.59953308 303.55657959]
[100.30130005 288.55953979]
[92.31248474 275.98861694]
[99.77388000 262.03732300]
[99.47564697 247.04029846]
[99.17741394 232.04325867]
[98.73009491 217.04992676]
[98.13375092 202.06179810]
[97.53739929 187.07365417]
[96.79207611 172.09217834]
[95.89785004 157.11885071]
[95.00362396 142.14553833]
[94.10939789 127.17221069]
[75.30273438 112.77001953]
[74.42293549 89.09852600]
[62.72207642 79.71290588]
[51.02121735 70.32727814]
[34.73890305 68.37322998]
[28.53966141 53.19095612]
[38.80073929 40.39868164]
[54.96642303 43.15600204]
[60.40683746 58.62642288]
[72.10769653 68.01204681]
[83.80855560 77.39766693]
[85.78035736 76.10794830]
[87.85427856 74.98980713]
[85.18431091 60.22933960]
[82.51434326 45.46887589]
[79.84437561 30.70841408]
[77.17440796 15.94795132]
[74.35782623 1.21476138]
[71.39492035 -13.48969936]
[56.98770142 -19.00654793]
[47.86863327 -31.45026779]
[46.94757462 -46.85011292]
[54.51843643 -60.29204559]
[68.16538239 -67.48680115]
[83.53371429 -66.13854980]
[95.71946716 -56.67752075]
[100.83419800 -42.12269211]
[97.24582672 -27.11845589]
[86.09938049 -16.45261002]
[89.06228638 -1.74814951]
[93.49060059 4.22029829]
[91.93486786 13.27798271]
[94.60483551 28.03844643]
[97.27481079 42.79890823]
[99.94477844 57.55937195]
[102.61474609 72.31983185]
[106.03274536 72.85899353]
[109.35730743 73.81853485]
[118.02868652 61.57896042]
[126.70006561 49.33938599]
[135.37144470 37.09981155]
[144.04283142 24.86023712]
[145.02273560 8.49039268]
[159.80844116 1.39708400]
[173.18966675 10.87730026]
[171.40097046 27.17860603]
[156.28239441 33.53161621]
[147.61102295 45.77119064]
[138.93963623 58.01076508]
[130.26826477 70.25033569]
[121.59687805 82.48991394]
[127.24111938 94.43675995]
[126.73309326 107.64002991]
[120.18753052 119.11784363]
[109.08271790 126.27798462]
[109.97694397 141.25131226]
[110.87117004 156.22462463]
[111.76540375 171.19795227]
[115.41779327 179.63133240]
[112.52554321 186.47731018]
[113.12189484 201.46543884]
[113.71823883 216.45358276]
[117.20223236 224.95791626]
[114.17444611 231.74502563]
[114.47267914 246.74206543]
[114.77091217 261.73910522]
[122.78105927 275.38272095]
[115.29833221 288.26129150]
[115.59656525 303.25833130]
[115.89479828 318.25537109]
[116.19303131 333.25241089]
[124.50665283 340.37222290]
[127.43917084 350.68893433]
[124.24713135 360.69738770]
[116.22632599 367.13519287]
[115.92809296 382.13223267]
[115.62985992 397.12927246]
[115.33162689 412.12631226]
[115.18250275 427.12554932]
[115.18250275 442.12554932]
[118.32564545 450.76168823]
[115.03041840 457.42306519]
[114.73218536 472.42007446]
[114.43395233 487.41711426]
[121.89533997 501.36840820]
[113.90652466 513.93933105]
[113.60829163 528.93634033]
[122.87583160 544.81921387]
[113.28632355 559.48864746]
[113.28632355 574.48864746]
[116.42946625 583.12475586]
[113.13423920 589.78613281]
[112.83600616 604.78314209]
[120.29740143 618.73443604]
[112.30857849 631.30535889]
[112.01034546 646.30242920]
[111.71212006 661.29943848]
[111.41388702 676.29644775]
[111.11565399 691.29351807]
[121.78669739 702.64105225]
[121.27060699 717.84594727]
[110.38671112 727.94921875]
[110.08847809 742.94622803]
[109.79024506 757.94329834]
[109.49201202 772.94030762]
[120.62226868 784.16052246]
[120.47512054 799.96411133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 155]
[5 154]
[6 153]
[7 152]
[10 149]
[11 148]
[12 147]
[13 146]
[14 145]
[16 143]
[17 142]
[18 140]
[19 139]
[22 137]
[23 136]
[25 134]
[26 133]
[27 132]
[28 130]
[29 129]
[31 128]
[32 127]
[33 126]
[34 125]
[36 121]
[37 120]
[38 119]
[39 118]
[41 116]
[42 115]
[43 114]
[44 112]
[45 111]
[46 110]
[47 108]
[48 107]
[49 106]
[50 105]
[52 61]
[53 60]
[54 59]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[68 80]
[69 79]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
