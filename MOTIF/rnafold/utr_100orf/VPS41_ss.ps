%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCAGGUGACUCUCCCGUGGCGCCAUGGCGGAAGCAGAGGAGCAGGAAACUGGGUCCCUUGAAGAAUCUACAGAUGAGUCUGAGGAAGAAGAGAGCGAAGAGGAACCCAAGCUGAAGUAUGAAA\
) } def
/len { sequence length } bind def

/coor [
[56.25774765 125.73226929]
[42.34690475 131.34371948]
[28.43605804 136.95516968]
[14.59568119 142.73825073]
[0.82788867 148.69206238]
[-2.66443539 163.69572449]
[-14.18706322 173.64973450]
[-29.18413925 174.89541626]
[-41.88695145 167.16387939]
[-55.65474319 173.11769104]
[-61.54903793 187.53625488]
[-75.59635162 193.37814331]
[-89.30593109 187.66998291]
[-103.07372284 193.62379456]
[-116.84151459 199.57760620]
[-126.43694305 212.15689087]
[-141.18980408 210.10690308]
[-154.95759583 216.06071472]
[-168.72538757 222.01452637]
[-182.49317932 227.96833801]
[-196.26097107 233.92214966]
[-205.60217285 247.40080261]
[-221.92111206 245.78094482]
[-228.43028259 230.72892761]
[-218.43359375 217.72900391]
[-202.21478271 220.15435791]
[-188.44699097 214.20054626]
[-174.67919922 208.24673462]
[-160.91140747 202.29292297]
[-147.14361572 196.33911133]
[-138.53294373 184.18568420]
[-122.79532623 185.80981445]
[-109.02753448 179.85600281]
[-95.25974274 173.90219116]
[-90.02909088 160.00341797]
[-76.15140533 153.76927185]
[-61.60855865 159.34989929]
[-47.84076309 153.39608765]
[-44.77393341 138.84506226]
[-33.59468842 128.77090454]
[-18.44995880 127.19275665]
[-5.12592411 134.92427063]
[8.64186859 128.97045898]
[13.58553505 123.36765289]
[22.82460594 123.04432678]
[36.73545074 117.43287659]
[50.64629364 111.82142639]
[50.19945908 90.23064423]
[58.77019119 70.40883636]
[74.80655670 55.94520950]
[95.40479279 49.45874786]
[116.83509827 52.12397385]
[135.21701050 63.45829010]
[147.10789490 54.31460953]
[158.99877930 45.17092514]
[170.88964844 36.02724457]
[182.78053284 26.88356209]
[189.00378418 12.33771420]
[203.80952454 10.71299362]
[215.70039368 1.56931138]
[227.59127808 -7.57437086]
[239.48216248 -16.71805382]
[233.43557739 -35.30953979]
[234.75520325 -54.78516006]
[243.22856140 -72.33741760]
[257.61352539 -85.44438171]
[275.82037354 -92.23202515]
[295.21536255 -91.74217224]
[313.00167847 -84.06766510]
[323.13931274 -95.12333679]
[333.27697754 -106.17901611]
[336.90100098 -121.57957458]
[351.20538330 -125.73094177]
[361.34301758 -136.78662109]
[371.48068237 -147.84230042]
[381.61834717 -158.89797974]
[384.64309692 -175.01576233]
[400.20153809 -180.19911194]
[412.28845215 -169.11585999]
[408.46987915 -153.16749573]
[392.67401123 -148.76033020]
[382.53637695 -137.70465088]
[372.39871216 -126.64897156]
[362.26104736 -115.59329224]
[359.36215210 -100.98351288]
[344.33267212 -96.04136658]
[334.19500732 -84.98568726]
[324.05734253 -73.93000793]
[330.04452515 -64.72470856]
[333.92483521 -54.44304276]
[335.51489258 -43.56064224]
[334.73742676 -32.58174133]
[331.62481689 -22.01583099]
[326.31802368 -12.35401154]
[319.06002808 -4.04616880]
[310.18472290 2.51997399]
[300.10162354 7.03695297]
[289.27697754 9.29195690]
[278.21206665 9.17685223]
[267.42019653 6.69336176]
[257.40274048 1.95315504]
[248.62583923 -4.82717133]
[236.73497009 4.31651115]
[224.84408569 13.46019363]
[212.95320129 22.60387611]
[207.58045959 36.49570465]
[191.92422485 38.77444458]
[180.03334045 47.91812515]
[168.14245605 57.06180954]
[156.25157166 66.20549011]
[144.36068726 75.34917450]
[148.11167908 83.85066223]
[150.24971008 92.89356995]
[150.70310974 102.17471313]
[149.45668030 111.38294983]
[146.55220032 120.20957184]
[142.08705139 128.35867310]
[136.21093750 135.55703735]
[129.12083435 141.56333923]
[121.05445862 146.17622375]
[112.28221893 149.24105835]
[103.09822083 150.65505981]
[93.81035614 150.37084961]
[84.73000336 148.39794922]
[76.16157532 144.80249023]
[68.39233398 139.70503235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 43]
[5 42]
[9 38]
[10 37]
[13 34]
[14 33]
[15 32]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[59 105]
[60 104]
[61 103]
[62 102]
[69 88]
[70 87]
[71 86]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
