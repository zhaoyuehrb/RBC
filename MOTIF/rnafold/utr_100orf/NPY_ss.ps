%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCCCAUCCGCUGGCUCUCACCCCUCGGAGACGCUCGCCCGACAGCAUAGUACUUGCCGCCCAGCCACGCCCGCGCGCCAGCCACCAUGCUAGGUAACAAGCGACUGGGGCUGUCCGGACUGACCCUCGCCCUGUCCCUGCUCGUGUGCCUGGGUGCGCUGGCCGAGGCGUACCCCUCCAAGCCGG\
) } def
/len { sequence length } bind def

/coor [
[137.12565613 187.13543701]
[130.17179871 173.84468079]
[123.21793365 160.55393982]
[116.26407623 147.26319885]
[109.31021881 133.97245789]
[102.35636139 120.68171692]
[94.99296570 119.25676727]
[96.83335876 134.14343262]
[83.24399567 140.49397278]
[73.00495911 129.53211975]
[80.26618958 116.40687561]
[72.90279388 114.98192596]
[61.49266052 124.71890259]
[56.01773071 139.56262207]
[41.31387329 141.93872070]
[29.90373802 151.67570496]
[18.49360085 161.41267395]
[7.16478252 171.24415588]
[-4.08193588 181.16943359]
[-15.32865334 191.09472656]
[-26.57537270 201.02001953]
[-24.97337723 216.45417786]
[-32.77842331 229.86538696]
[-46.98930740 236.09678650]
[-62.14165878 232.75227356]
[-72.40908813 221.11785889]
[-73.84355927 205.66722107]
[-65.89348602 192.34146118]
[-51.61583710 186.26458740]
[-36.50065994 189.77330017]
[-25.25394058 179.84800720]
[-14.00722313 169.92271423]
[-2.76050520 159.99743652]
[0.17990790 153.20133972]
[8.75662136 150.00254822]
[20.16675758 140.26556396]
[31.57689476 130.52857971]
[36.23569107 116.38132477]
[51.75568008 113.30876923]
[63.16581726 103.57178497]
[63.29047775 96.07282257]
[48.94950104 100.47013855]
[40.33594894 88.18979645]
[49.35366440 76.20310974]
[63.53979874 81.07489777]
[63.66445923 73.57593536]
[52.58426666 63.46508026]
[41.50407410 53.35422516]
[30.42388153 43.24337387]
[19.34369087 33.13252258]
[3.93440580 29.54580498]
[-0.25158840 15.25151539]
[-11.33178043 5.14066219]
[-29.39744949 1.62056804]
[-34.07130051 -15.28621864]
[-45.31801605 -25.21150589]
[-60.78479004 -28.54160309]
[-65.20779419 -42.76433945]
[-76.45451355 -52.68962860]
[-87.78333282 -62.52110291]
[-99.19347382 -72.25807953]
[-110.60360718 -81.99506378]
[-123.83066559 -79.39409637]
[-135.96113586 -84.81258392]
[-142.65162659 -96.06469727]
[-141.64881897 -108.92188263]
[-152.89553833 -118.84716797]
[-168.77220154 -124.79426575]
[-167.45262146 -141.69677734]
[-150.84536743 -145.10784912]
[-142.97026062 -130.09388733]
[-131.72354126 -120.16860199]
[-115.00755310 -121.93720245]
[-101.92096710 -110.85774231]
[-100.86663055 -93.40519714]
[-89.45648956 -83.66822052]
[-78.04635620 -73.93123627]
[-70.90390778 -71.97714233]
[-66.52922821 -63.93634415]
[-55.28250885 -54.01105881]
[-40.62017822 -51.39088440]
[-35.39273071 -36.45822525]
[-24.14601326 -26.53293610]
[-12.04550076 -26.97036362]
[-2.59269214 -18.77699471]
[-1.22092760 -5.93952942]
[9.85926437 4.17132330]
[24.47601891 7.03484344]
[29.45454216 22.05232811]
[40.53473663 32.16318130]
[51.61492538 42.27403641]
[62.69511795 52.38488770]
[73.77531433 62.49573898]
[110.67501068 86.83850861]
[122.99794006 78.28599548]
[135.32086182 69.73348999]
[147.64379883 61.18097687]
[159.96672058 52.62846375]
[172.21813965 43.97383118]
[184.39721680 35.21767426]
[191.08549500 20.87970352]
[205.93585205 19.73244858]
[218.11492920 10.97629261]
[230.29399109 2.22013760]
[242.25097656 -6.83692837]
[253.97845459 -16.18927574]
[265.70593262 -25.54162216]
[270.47598267 -33.35436630]
[277.70693970 -34.95000839]
[289.58822632 -44.10613632]
[301.46954346 -53.26226425]
[313.35083008 -62.41839218]
[325.23214722 -71.57451630]
[332.13742065 -91.84783173]
[352.67520142 -93.78465271]
[364.08532715 -103.52163696]
[375.49545288 -113.25861359]
[376.49200439 -129.03144836]
[388.40478516 -139.41705322]
[404.16622925 -138.25381470]
[414.42529297 -126.23188019]
[413.09548950 -110.48364258]
[400.96575928 -100.35224915]
[385.23245239 -101.84848022]
[373.82229614 -92.11149597]
[362.41217041 -82.37451935]
[363.16348267 -73.49453735]
[359.68133545 -65.14185333]
[352.63357544 -59.24831009]
[343.52743530 -57.23986053]
[334.38827515 -59.69321823]
[322.50695801 -50.53709030]
[310.62567139 -41.38096237]
[298.74435425 -32.22483444]
[286.86306763 -23.06870651]
[275.05825806 -13.81414986]
[263.33081055 -4.46180344]
[251.60333252 4.89054394]
[250.85147095 8.35367680]
[248.37359619 11.62076855]
[244.28208923 13.87943363]
[239.05015564 14.39920807]
[226.87107849 23.15536308]
[214.69200134 31.91151810]
[208.87484741 45.62319183]
[193.15336609 47.39674759]
[180.97430420 56.15290070]
[177.37182617 62.62245941]
[168.51922607 64.95139313]
[156.19630432 73.50390625]
[143.87338257 82.05641174]
[131.55044556 90.60892487]
[119.22752380 99.16143799]
[115.64710236 113.72785950]
[122.60095978 127.01860046]
[129.55482483 140.30934143]
[136.50868225 153.60008240]
[143.46253967 166.89082336]
[150.41639709 180.18156433]
[163.66966248 188.82226562]
[162.71427917 203.68620300]
[169.66813660 216.97694397]
[176.62199402 230.26768494]
[183.57585144 243.55842590]
[190.52970886 256.84918213]
[208.02224731 266.84292603]
[206.42837524 286.10229492]
[213.82014465 299.15454102]
[221.21192932 312.20681763]
[228.60371399 325.25909424]
[243.89991760 329.23419189]
[251.83299255 342.90319824]
[247.69639587 358.15652466]
[233.94427490 365.94464111]
[218.73553467 361.64700317]
[211.09324646 347.81332397]
[215.55143738 332.65084839]
[208.15966797 319.59860229]
[200.76788330 306.54632568]
[193.37611389 293.49404907]
[183.30082703 291.65698242]
[175.74851990 284.41824341]
[173.38862610 274.00122070]
[177.23896790 263.80303955]
[170.28511047 250.51228333]
[163.33125305 237.22154236]
[156.37739563 223.93080139]
[149.42352295 210.64006042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[12 40]
[13 39]
[15 37]
[16 36]
[17 35]
[18 33]
[19 32]
[20 31]
[21 30]
[46 93]
[47 92]
[48 91]
[49 90]
[50 89]
[52 87]
[53 86]
[55 83]
[56 82]
[58 80]
[59 79]
[60 77]
[61 76]
[62 75]
[66 72]
[67 71]
[94 153]
[95 152]
[96 151]
[97 150]
[98 149]
[99 147]
[100 146]
[102 144]
[103 143]
[104 142]
[105 138]
[106 137]
[107 136]
[109 135]
[110 134]
[111 133]
[112 132]
[113 131]
[115 126]
[116 125]
[117 124]
[161 188]
[162 187]
[163 186]
[164 185]
[165 184]
[167 180]
[168 179]
[169 178]
[170 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
