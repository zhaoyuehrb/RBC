%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCUUUUCCGGCGGGCCCCGCUUCCUCGUUGCCCCCGCCGCGGGCGCGAGAUGGAUUCCGGGUGCUGGUUGUUCGGCGGCGAGUUCGAGGACUCGGUGUUCGAGGAGAGGCCGGAGCGGCGGUCAGGACCGCCCGCGUCCUACUGCGCCA\
) } def
/len { sequence length } bind def

/coor [
[146.57478333 191.54312134]
[161.19270325 188.17916870]
[175.95591736 190.84825134]
[165.62501526 179.97293091]
[155.29411316 169.09761047]
[144.96321106 158.22230530]
[134.63229370 147.34698486]
[124.30139923 136.47167969]
[113.97049713 125.59635925]
[103.63959503 114.72104645]
[90.35224915 107.76068878]
[75.52976990 105.45981598]
[60.70728683 103.15894318]
[45.88480377 100.85807037]
[31.06111526 106.38697052]
[19.67130089 96.78897858]
[4.84881878 94.48810577]
[-9.97366333 92.18723297]
[-24.81898499 90.03865051]
[-39.68558502 88.04259491]
[-54.55218506 86.04653931]
[-69.41878510 84.05047607]
[-83.09394836 94.91220093]
[-100.06398773 92.59932709]
[-109.93711090 79.01902771]
[-124.84156036 77.32862854]
[-139.74600220 75.63822937]
[-154.66702271 74.10093689]
[-169.60304260 72.71691132]
[-178.49955750 75.05092621]
[-184.83042908 71.14805603]
[-199.73487854 69.45765686]
[-214.63931274 67.76725769]
[-229.54376221 66.07686615]
[-244.12797546 72.20968628]
[-255.90222168 63.08740234]
[-270.80667114 61.39700317]
[-285.71112061 59.70660400]
[-300.61557007 58.01620865]
[-317.03518677 62.23907089]
[-325.63842773 47.63014221]
[-313.98202515 35.31897354]
[-298.92517090 43.11175919]
[-284.02072144 44.80215836]
[-269.11627197 46.49255753]
[-254.21183777 48.18295288]
[-240.69369507 41.92921829]
[-227.85336304 51.17241669]
[-212.94892883 52.86281204]
[-198.04447937 54.55321121]
[-183.14002991 56.24360657]
[-168.21900940 57.78089905]
[-153.28300476 59.16492462]
[-146.28936768 56.63486099]
[-138.05560303 60.73378372]
[-123.15116119 62.42417908]
[-108.24671173 64.11457825]
[-99.35811615 54.73667145]
[-86.49550629 52.17112350]
[-74.33287811 57.57959366]
[-67.42272186 69.18388367]
[-52.55612564 71.17993927]
[-37.68952942 73.17599487]
[-22.82292938 75.17205048]
[-15.73131561 72.93124390]
[-7.67278814 77.36474609]
[7.14969397 79.66561890]
[21.97217560 81.96649933]
[35.73566437 76.27301788]
[48.18568039 86.03558350]
[63.00816345 88.33646393]
[77.83064270 90.63733673]
[92.65312958 92.93820953]
[94.47370148 86.80059052]
[100.22435760 81.57264709]
[108.12084198 68.81938934]
[116.01731873 56.06613159]
[123.91380310 43.31287766]
[131.67893982 30.47922134]
[139.31190491 17.56652451]
[139.67370605 1.74945474]
[152.81079102 -5.26953459]
[160.44375610 -18.18223190]
[168.07673645 -31.09493065]
[175.70970154 -44.00762939]
[183.34266663 -56.92032623]
[190.97563171 -69.83302307]
[190.60285950 -86.22793579]
[204.75354004 -94.51587677]
[218.87069702 -86.17093658]
[218.43179321 -69.77765656]
[203.88833618 -62.20005417]
[196.25537109 -49.28735733]
[188.62239075 -36.37465668]
[180.98942566 -23.46195984]
[173.35646057 -10.54926205]
[165.72348022 2.36343551]
[165.90765381 17.25690269]
[152.22460938 25.19949341]
[144.59164429 38.11219025]
[143.89099121 45.51633072]
[136.66706848 51.20935822]
[128.77058411 63.96261597]
[120.87409973 76.71587372]
[112.97761536 89.46913147]
[114.51490784 104.39014435]
[124.84580994 115.26545715]
[135.17671204 126.14076996]
[145.50761414 137.01608276]
[155.83851624 147.89140320]
[166.16941833 158.76670837]
[176.50032043 169.64202881]
[186.83122253 180.51734924]
[197.16311646 183.80712891]
[201.36648560 192.46173096]
[214.03799438 200.48873901]
[226.70951843 208.51573181]
[239.46276855 216.41221619]
[252.29641724 224.17735291]
[265.13006592 231.94248962]
[277.96374512 239.70761108]
[290.87643433 247.34059143]
[303.86682129 254.84059143]
[316.85717773 262.34057617]
[329.84756470 269.84057617]
[346.23779297 269.29949951]
[354.67056274 283.36434937]
[346.47100830 297.56643677]
[330.07409668 297.29586792]
[322.34756470 282.83096313]
[309.35717773 275.33096313]
[296.36682129 267.83096313]
[283.37643433 260.33096313]
[275.96548462 259.70639038]
[270.19860840 252.54127502]
[257.36492920 244.77613831]
[244.53129578 237.01100159]
[231.69763184 229.24586487]
[224.30107117 228.46925354]
[218.68251038 221.18724060]
[206.01100159 213.16024780]
[193.33947754 205.13325500]
[198.81907654 219.09655762]
[198.35336304 234.08932495]
[192.01771545 247.68563843]
[180.83728027 257.68551636]
[166.62109375 262.47094727]
[151.66944885 261.26757812]
[138.40158081 254.27017212]
[128.96432495 242.61091614]
[124.88469696 228.17634583]
[126.82277679 213.30207825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 113]
[4 112]
[5 111]
[6 110]
[7 109]
[8 108]
[9 107]
[10 106]
[11 73]
[12 72]
[13 71]
[14 70]
[16 68]
[17 67]
[18 66]
[19 64]
[20 63]
[21 62]
[22 61]
[25 57]
[26 56]
[27 55]
[28 53]
[29 52]
[31 51]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[38 44]
[39 43]
[75 105]
[76 104]
[77 103]
[78 102]
[79 100]
[80 99]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[115 142]
[116 141]
[117 140]
[118 138]
[119 137]
[120 136]
[121 135]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
