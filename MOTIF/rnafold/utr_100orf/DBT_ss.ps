%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUGCGGCACUGUUGUCAUUUCCGGGGUAAGAUGGCUGCAGUCCGUAUGCUGAGAACCUGGAGCAGGAAUGCGGGGAAGCUGAUUUGUGUUCGCUAUUUUCAAACAUGUGGUAAUGUUCAUGUUUUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[82.97933197 109.64844513]
[68.67064667 114.14971924]
[54.36195755 118.65098572]
[43.51964569 130.17291260]
[29.05709457 126.61146545]
[14.74840546 131.11273193]
[0.43971705 135.61399841]
[-13.86897182 140.11528015]
[-28.17765999 144.61654663]
[-35.50674820 150.22738647]
[-42.87480164 149.05136108]
[-57.28507614 153.21595764]
[-71.69535828 157.38056946]
[-86.10563660 161.54516602]
[-100.51590729 165.70976257]
[-111.62535095 176.97434998]
[-126.00043488 173.07484436]
[-140.41070557 177.23944092]
[-154.82098389 181.40403748]
[-169.23126221 185.56864929]
[-183.64154053 189.73324585]
[-198.05181885 193.89784241]
[-212.46209717 198.06243896]
[-217.61201477 212.69999695]
[-230.40121460 221.48725891]
[-245.91200256 221.04533386]
[-258.18014526 211.54417419]
[-262.48831177 196.63714600]
[-257.17990112 182.05632019]
[-244.29612732 173.40832520]
[-228.79106140 174.01847839]
[-216.62669373 183.65216064]
[-202.21641541 179.48756409]
[-187.80615234 175.32296753]
[-173.39587402 171.15837097]
[-158.98559570 166.99377441]
[-144.57531738 162.82916260]
[-130.16503906 158.66456604]
[-120.08631897 147.69786072]
[-104.68051147 151.29948425]
[-90.27023315 147.13488770]
[-75.85995483 142.97029114]
[-61.44967651 138.80569458]
[-47.03939819 134.64108276]
[-32.67892838 130.30786133]
[-18.37024117 125.80658722]
[-4.06155252 121.30531311]
[10.24713612 116.80404663]
[24.55582428 112.30278015]
[34.37468338 101.10280609]
[49.86068726 104.34230042]
[64.16938019 99.84102631]
[78.47806549 95.33975983]
[99.41336060 80.16178894]
[107.11547089 67.29021454]
[114.81758118 54.41863632]
[122.51969910 41.54706192]
[130.22180176 28.67548561]
[122.87198639 15.26178646]
[123.22076416 0.07050053]
[131.07437134 -12.82086372]
[144.23809814 -20.00225639]
[159.12866211 -19.63291740]
[166.83078003 -32.50449371]
[174.53288269 -45.37606812]
[182.23500061 -58.24764252]
[189.93711853 -71.11921692]
[190.38372803 -86.93412018]
[203.55827332 -93.88255310]
[211.26039124 -106.75412750]
[218.96249390 -119.62570190]
[226.66461182 -132.49728394]
[228.41348267 -141.56031799]
[234.70117188 -145.57731628]
[242.70291138 -158.26478577]
[250.70465088 -170.95227051]
[248.57754517 -186.85368347]
[259.78707886 -198.33088684]
[275.73425293 -196.57952881]
[284.18576050 -182.94313049]
[278.65832520 -167.88233948]
[263.39212036 -162.95053101]
[255.39039612 -150.26306152]
[247.38865662 -137.57557678]
[239.53619385 -124.79516602]
[231.83407593 -111.92359161]
[224.13195801 -99.05201721]
[216.42985535 -86.18044281]
[216.53413391 -71.28620148]
[202.80868530 -63.41710663]
[195.10658264 -50.54553223]
[187.40446472 -37.67395401]
[179.70234680 -24.80237961]
[172.00024414 -11.93080425]
[179.36431885 1.01662719]
[179.25819397 16.01144981]
[171.61026001 29.02587891]
[158.38810730 36.51398087]
[143.09338379 36.37759781]
[135.39126587 49.24917221]
[127.68915558 62.12075043]
[119.98704529 74.99232483]
[112.28493500 87.86389923]
[114.73559570 102.66235352]
[126.17587280 112.36390686]
[137.61614990 122.06545258]
[149.05642700 131.76699829]
[160.49670410 141.46855164]
[171.93698120 151.17010498]
[183.37725830 160.87164307]
[197.80982971 155.61839294]
[212.93261719 158.30102539]
[224.67770386 168.19792175]
[229.88569641 182.64688110]
[227.15567017 197.76119995]
[217.22200012 209.47520447]
[202.75679016 214.63787842]
[187.65110779 211.86048889]
[175.96830750 201.89015198]
[170.85099792 187.40882874]
[173.67570496 172.31192017]
[162.23542786 162.61038208]
[150.79515076 152.90882874]
[139.35487366 143.20727539]
[127.91459656 133.50573730]
[116.47431946 123.80418396]
[105.03404236 114.10263062]
[112.68907928 127.00225830]
[110.84613037 141.88861084]
[100.27643585 152.53199768]
[85.40324402 154.47831726]
[72.45074463 146.91308594]
[66.83934784 133.00222778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[69 88]
[70 87]
[71 86]
[72 85]
[74 84]
[75 83]
[76 82]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
