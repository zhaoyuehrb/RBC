%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAGAGGAAACCAAACAGAAGUUGGAAACUUUCUCCUCCUGGGAUUCGCAGAGGACUCUGACAUGCAGCUUCUCCUCCAUGGGCUGUUCCUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[76.75363922 338.06063843]
[79.54232788 318.88061523]
[80.00882721 303.88787842]
[80.47532654 288.89511108]
[80.94182587 273.90237427]
[78.25604248 269.75784302]
[78.27094269 263.84939575]
[81.93237305 258.00021362]
[83.33006287 243.06546021]
[84.72775269 228.13072205]
[86.12544250 213.19598389]
[87.52312469 198.26124573]
[88.92081451 183.32650757]
[79.47833252 166.57382202]
[90.93647766 150.13316345]
[91.40297699 135.14041138]
[75.08132172 126.22626495]
[65.34478760 110.38143158]
[64.76641846 91.79315186]
[73.49904633 75.37364960]
[89.23493958 65.46202850]
[87.83724976 50.52729034]
[86.43956757 35.59255219]
[85.04187775 20.65781021]
[83.64418793 5.72307062]
[82.24649811 -9.21166897]
[80.84880829 -24.14640999]
[79.45111847 -39.08115005]
[64.08101654 -42.00056839]
[50.15562820 -49.09952927]
[38.78490448 -59.80313492]
[30.87261009 -73.24952698]
[27.04453087 -88.35930634]
[27.59896088 -103.92216492]
[32.48348236 -118.69381714]
[41.29981232 -131.49552917]
[53.33624649 -141.30813599]
[67.62513733 -147.35316467]
[65.76364899 -162.23721313]
[63.90217209 -177.12126160]
[62.04069138 -192.00531006]
[60.17920685 -206.88935852]
[55.94285965 -215.18670654]
[58.49873352 -222.26434326]
[57.10104370 -237.19909668]
[44.13545609 -245.94137573]
[39.87237930 -260.98663330]
[46.32471466 -275.23098755]
[60.44586563 -281.94866943]
[75.56825256 -277.96777344]
[84.55155182 -265.16799927]
[83.15412140 -249.59298706]
[72.03578186 -238.59677124]
[73.43347168 -223.66203308]
[75.06325531 -208.75083923]
[76.92473602 -193.86679077]
[78.78621674 -178.98274231]
[80.64769745 -164.09869385]
[82.50917816 -149.21464539]
[96.78509521 -147.18270874]
[110.04965210 -141.49644470]
[121.38399506 -132.54283142]
[130.00115967 -120.93543243]
[135.30070496 -107.47235107]
[136.91064453 -93.08134460]
[134.71340942 -78.75588989]
[128.85452271 -65.48661804]
[119.73292542 -54.19279099]
[107.97382355 -45.65862656]
[94.38585663 -40.47883987]
[95.78354645 -25.54409790]
[97.18123627 -10.60935879]
[98.57892609 4.32538176]
[99.97661591 19.26012230]
[101.37430573 34.19486237]
[102.77199554 49.12960434]
[104.16968536 64.06434631]
[115.14673615 67.14678192]
[124.61928558 73.49247742]
[131.64643860 82.47113800]
[135.53018188 93.19091034]
[135.88478088 104.58702087]
[132.67497253 115.52751160]
[126.21961975 124.92567444]
[117.15990448 131.84800720]
[106.39572144 135.60691833]
[105.92922211 150.59965515]
[113.97193146 158.24954224]
[116.32848358 168.86921692]
[112.43809509 178.78987122]
[103.85556030 184.72419739]
[102.45787048 199.65893555]
[101.06018066 214.59367371]
[99.66249084 229.52841187]
[98.26480103 244.46315002]
[96.86711121 259.39788818]
[95.93457031 274.36886597]
[95.46807098 289.36163330]
[95.00157166 304.35437012]
[94.53507233 319.34710693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[15 87]
[16 86]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
