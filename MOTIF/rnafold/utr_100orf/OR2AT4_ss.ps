%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGCCACAGCCUGUAAUGAAUCAGUGGAUGGCUCACCCGUCUUCUAUCUAUUGGGCAUCCCCUCUCUGCCAGAGACCUUCUUCCUCCCUGUGUUUU\
) } def
/len { sequence length } bind def

/coor [
[152.11174011 159.29994202]
[166.13522339 153.97624207]
[181.01554871 152.09483337]
[167.94810486 144.72991943]
[154.88066101 137.36500549]
[141.81323242 130.00009155]
[128.74578857 122.63518524]
[115.67833710 115.27027130]
[102.61089325 107.90535736]
[99.60131073 122.53461456]
[87.24740601 134.46740723]
[74.41533661 142.23515320]
[73.24793243 157.70825195]
[63.18297577 169.51826477]
[48.09064865 173.12399292]
[33.77425766 167.13896179]
[25.73874664 153.86454773]
[27.07393265 138.40502930]
[37.26641083 126.70489502]
[52.39696503 123.26309967]
[66.64759064 129.40307617]
[79.47966766 121.63533783]
[81.21348572 114.33850098]
[70.30879211 104.03861237]
[84.68112946 99.74481964]
[86.41495514 92.44798279]
[78.44858551 79.73825836]
[70.48222351 67.02854156]
[62.51585388 54.31882095]
[54.54948425 41.60910034]
[46.58311844 28.89937973]
[38.61675262 16.18965912]
[30.65038490 3.47993875]
[22.68401718 -9.22978210]
[14.71765137 -21.93950272]
[-0.44558650 -20.19623375]
[-14.86074734 -25.21279526]
[-25.66569138 -35.99314499]
[-30.71508789 -50.39683533]
[-29.00637817 -65.56401062]
[-20.87882423 -78.48320770]
[-7.94616079 -86.58930969]
[7.22382402 -88.27285004]
[21.61911774 -83.19956207]
[32.38152695 -72.37674713]
[37.37416077 -57.95328522]
[35.60573578 -42.79296112]
[27.42737198 -29.90587044]
[35.39373779 -17.19614983]
[43.36010361 -4.48642826]
[51.32647324 8.22329235]
[59.29283905 20.93301201]
[67.25920868 33.64273453]
[75.22557068 46.35245514]
[83.19194031 59.06217575]
[91.15830994 71.77189636]
[99.12467194 84.48161316]
[109.97580719 94.83791351]
[123.04325104 102.20282745]
[136.11068726 109.56774139]
[149.17813110 116.93264771]
[162.24557495 124.29756165]
[175.31301880 131.66247559]
[188.38046265 139.02738953]
[192.92144775 138.33262634]
[197.15437317 139.12808228]
[200.63345337 141.14427185]
[215.41447449 138.59062195]
[230.19551086 136.03697205]
[244.97653198 133.48332214]
[259.75756836 130.92965698]
[274.33612061 122.27507782]
[286.68823242 133.88807678]
[278.94848633 148.97225952]
[262.31121826 145.71069336]
[247.53019714 148.26434326]
[232.74916077 150.81799316]
[217.96812439 153.37165833]
[203.18710327 155.92530823]
[216.57464600 162.69093323]
[227.99887085 172.41137695]
[236.82075500 184.54292297]
[242.54684448 198.40696716]
[244.85684204 213.22802734]
[243.62153625 228.17707825]
[238.91003418 242.41792297]
[230.98585510 255.15399170]
[220.29226685 265.67288208]
[207.42741394 273.38619995]
[193.11090088 277.86251831]
[178.14352417 278.85144043]
[163.36251831 276.29766846]
[149.59466553 270.34399414]
[137.61007690 261.32348633]
[128.07910156 249.74070740]
[121.53489685 236.24356079]
[118.34349823 221.58699036]
[118.68341827 206.59083557]
[122.53565216 192.09393311]
[129.68472290 178.90716553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[11 22]
[12 21]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
