%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUAACUCGAACUCCAGGCUGUCAUGGCGGCAGGACGGCGAACUUGCAGUAUCUCCACGACCCGCCCCUACAGGUGCCAGUGCCUCCAGAAUGUGGCAGCUCACAAGCCUCCUGCUGUUCGUGGCCACCUGGGGAAUUUCCGGCACACCAGCUCCUCUUGACUCAGUGUUCUCCAGCAGCGAGCGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[464.81790161 571.48834229]
[462.83389282 568.04864502]
[461.97622681 563.76123047]
[451.67282104 552.85980225]
[441.36944580 541.95843506]
[432.38067627 546.16497803]
[422.59759521 547.93225098]
[412.67123413 547.13372803]
[403.26434326 543.81402588]
[395.00726318 538.18627930]
[388.45571899 530.61871338]
[384.05325317 521.61029053]
[382.10134888 511.75817871]
[382.73880005 501.71771240]
[385.93179321 492.15921021]
[391.47558594 483.72299194]
[382.27243042 471.87805176]
[373.06927490 460.03314209]
[363.86611938 448.18823242]
[354.66296387 436.34332275]
[345.45980835 424.49841309]
[336.25668335 412.65350342]
[321.49206543 411.05920410]
[311.99002075 399.17785645]
[313.76235962 383.70220947]
[304.55920410 371.85726929]
[295.35607910 360.01235962]
[286.15292358 348.16744995]
[276.94976807 336.32254028]
[267.74661255 324.47763062]
[258.54345703 312.63269043]
[249.24519348 300.86230469]
[239.85241699 289.16717529]
[230.45964050 277.47207642]
[221.06686401 265.77694702]
[211.67408752 254.08184814]
[202.28131104 242.38673401]
[192.88853455 230.69160461]
[183.49575806 218.99649048]
[176.84724426 215.74566650]
[174.04768372 207.03646851]
[164.84454346 195.19155884]
[155.64138794 183.34663391]
[141.26478577 187.37686157]
[126.40019989 185.59098816]
[113.31645966 178.23022461]
[104.02260590 166.38911438]
[99.95936584 151.85282898]
[101.77590942 136.82807922]
[109.22632599 123.60813141]
[100.02317810 111.76321411]
[102.42094421 126.57033539]
[107.36677551 140.73150635]
[107.40868378 155.73144531]
[102.54206085 169.92002869]
[93.30228424 181.73640442]
[80.70580292 189.88064575]
[66.13834381 193.45681763]
[51.20244598 192.07153320]
[37.54119492 185.87716675]
[26.65744400 175.55514526]
[19.74849892 162.24099731]
[17.57440376 147.39939880]
[20.37433052 132.66302490]
[27.84025764 119.65303802]
[39.15016937 109.80106354]
[53.49133682 114.19775391]
[43.01366806 103.46377563]
[32.53599548 92.72978973]
[22.05832481 81.99580383]
[6.25414944 82.05548096]
[-4.90428019 70.86329651]
[-4.79686499 55.05937576]
[6.51266766 44.01989746]
[22.31457329 44.29439545]
[33.23386002 55.72001266]
[32.79230881 71.51813507]
[43.26998138 82.25212097]
[53.74765015 92.98609924]
[64.22531891 103.72008514]
[70.97508240 100.45041656]
[64.43595886 86.95079041]
[77.93569946 80.41189575]
[84.47460175 93.91107178]
[91.22435760 90.64140320]
[89.29641724 75.76581573]
[87.36847687 60.89022827]
[85.44053650 46.01464462]
[71.23197937 40.18263245]
[61.85570908 28.01788139]
[59.83390808 12.79264259]
[65.71042633 -1.39756894]
[77.90451050 -10.73565865]
[93.13600922 -12.70972633]
[107.30773163 -6.78875828]
[116.60755157 5.43453503]
[118.53386688 20.67214966]
[112.56850433 34.82524109]
[100.31612396 44.08670425]
[102.24406433 58.96228790]
[104.17200470 73.83787537]
[106.09994507 88.71346283]
[111.86808777 102.56006622]
[121.07124329 114.40498352]
[135.72235107 110.45269012]
[150.72999573 112.40554810]
[163.81126404 119.93509674]
[172.98831177 131.86695862]
[176.88737488 146.36393738]
[174.94439697 161.20880127]
[167.48629761 174.14349365]
[176.68945312 185.98840332]
[185.89260864 197.83332825]
[195.19087219 209.60371399]
[204.58364868 221.29882812]
[213.97642517 232.99394226]
[223.36920166 244.68907166]
[232.76197815 256.38418579]
[242.15475464 268.07928467]
[251.54753113 279.77441406]
[260.94030762 291.46951294]
[268.76489258 296.20910645]
[270.38836670 303.42956543]
[279.59152222 315.27447510]
[288.79467773 327.11938477]
[297.99783325 338.96429443]
[307.20098877 350.80920410]
[316.40414429 362.65411377]
[325.60726929 374.49905396]
[341.04095459 376.60617065]
[350.20550537 388.74969482]
[348.10159302 403.45034790]
[357.30474854 415.29525757]
[366.50787354 427.14016724]
[375.71102905 438.98507690]
[384.91418457 450.82998657]
[394.11734009 462.67492676]
[403.32049561 474.51983643]
[423.42642212 470.54336548]
[442.70480347 477.27301025]
[455.86972046 492.78186035]
[459.35296631 512.74719238]
[452.27084351 531.65502930]
[462.57421875 542.55645752]
[472.87759399 553.45782471]
[483.52685547 564.02160645]
[494.51086426 574.23687744]
[505.49490356 584.45208740]
[516.47894287 594.66735840]
[527.46295166 604.88256836]
[531.75714111 605.70568848]
[535.21276855 607.66192627]
[537.57543945 610.34594727]
[538.74975586 613.31152344]
[538.79833984 616.12701416]
[549.10174561 627.02838135]
[559.40509033 637.92980957]
[569.70849609 648.83117676]
[580.09936523 659.64923096]
[590.57702637 670.38317871]
[601.14080811 681.03240967]
[611.79010010 691.59625244]
[627.03649902 695.82196045]
[630.62322998 710.27825928]
[641.27246094 720.84204102]
[656.07055664 716.72979736]
[670.93823242 720.58306885]
[681.87615967 731.36541748]
[685.94201660 746.17633057]
[682.04211426 761.03186035]
[671.22558594 771.93591309]
[656.40191650 775.95532227]
[641.55871582 772.00891113]
[630.68865967 761.15820312]
[626.71569824 746.32208252]
[630.70861816 731.49127197]
[620.05938721 720.92749023]
[605.57470703 717.45733643]
[601.22625732 702.24548340]
[590.57702637 691.68164062]
[583.60491943 689.19970703]
[579.84307861 680.86083984]
[569.36535645 670.12689209]
[562.43414307 667.53289795]
[558.80712891 659.13458252]
[548.50372314 648.23315430]
[538.20031738 637.33178711]
[527.89697266 626.43041992]
[517.24774170 615.86657715]
[506.26370239 605.65136719]
[495.27966309 595.43609619]
[484.29562378 585.22088623]
[473.31161499 575.00567627]
[470.49581909 574.97973633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 145]
[4 144]
[5 143]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[25 129]
[26 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[32 121]
[33 120]
[34 119]
[35 118]
[36 117]
[37 116]
[38 115]
[39 114]
[41 113]
[42 112]
[43 111]
[50 104]
[51 103]
[67 80]
[68 79]
[69 78]
[70 77]
[85 102]
[86 101]
[87 100]
[88 99]
[146 193]
[147 192]
[148 191]
[149 190]
[150 189]
[155 188]
[156 187]
[157 186]
[158 185]
[159 183]
[160 182]
[161 180]
[162 179]
[164 177]
[165 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
