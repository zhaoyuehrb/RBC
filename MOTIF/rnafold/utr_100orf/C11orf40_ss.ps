%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCUAGUGCAGGCGCUGGUGCCCAGAGAAAGAGAGCCAAAGCUGUCCAUUUUGCAGAUGGACAGAGGGGACCCACAACACAGCUCACACUGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[84.02861023 356.40322876]
[71.14228058 345.38601685]
[78.16163635 329.95343018]
[79.09417725 314.98245239]
[80.02672577 300.01144409]
[73.09564209 286.82778931]
[81.67592621 273.53533936]
[82.60846710 258.56433105]
[83.54101562 243.59335327]
[84.47355652 228.62237549]
[85.40610504 213.65139771]
[86.33864594 198.68040466]
[76.31988525 187.71865845]
[77.05234528 172.52265930]
[88.61797333 162.08839417]
[89.55051422 147.11740112]
[90.48306274 132.14642334]
[73.45424652 120.47650909]
[66.49063873 101.04264069]
[72.23258209 81.21343994]
[88.50293732 68.50743103]
[86.64145660 53.62338257]
[84.77997589 38.73933411]
[75.38990021 26.00602722]
[81.48795319 12.41694927]
[79.62647247 -2.46709895]
[77.76499176 -17.35114670]
[70.25846100 -4.36453724]
[59.18457794 5.75322533]
[45.57475281 12.05978203]
[30.69659233 13.96774673]
[15.93583393 11.29941177]
[2.66728187 4.30330372]
[-7.87324333 -6.36896515]
[-14.70400620 -19.72339058]
[-17.18879700 -34.51615143]
[-15.09618187 -49.36946869]
[-8.62106800 -62.89990997]
[1.63346004 -73.84726715]
[14.71230412 -81.19191742]
[29.39731407 -84.24977875]
[44.32073975 -82.73604584]
[58.09262466 -76.79170990]
[69.43027496 -66.97042084]
[77.27770233 -54.18692398]
[80.90408325 -39.63109589]
[86.80558777 -53.42139053]
[92.70709229 -67.21168518]
[98.60859680 -81.00198364]
[104.51010132 -94.79227448]
[110.41160583 -108.58257294]
[116.31311035 -122.37287140]
[122.21461487 -136.16316223]
[128.11611938 -149.95346069]
[134.01762390 -163.74375916]
[134.69055176 -180.68434143]
[151.15538025 -184.72734070]
[159.59828186 -170.02517700]
[147.80792236 -157.84225464]
[141.90641785 -144.05195618]
[136.00491333 -130.26165771]
[130.10340881 -116.47136688]
[124.20189667 -102.68106842]
[118.30039215 -88.89076996]
[112.39889526 -75.10047913]
[106.49739075 -61.31018066]
[100.59588623 -47.51988602]
[94.69438171 -33.72959137]
[96.02700806 -26.56359482]
[92.64904022 -19.21262741]
[94.51052094 -4.32858038]
[96.37200165 10.55546761]
[105.62892914 22.22416687]
[99.66402435 36.87785339]
[101.52550507 51.76189804]
[103.38698578 66.64595032]
[112.71185303 68.97785950]
[120.99179840 73.85982513]
[127.54619598 80.89053345]
[131.83625793 89.49206543]
[133.50936890 98.95735931]
[132.42796326 108.50836182]
[128.68093872 117.35996246]
[122.57631683 124.78456116]
[114.61589813 130.17184448]
[105.45404053 133.07896423]
[104.52149963 148.04994202]
[103.58895111 163.02093506]
[113.77028656 174.80982971]
[112.61128998 189.97924805]
[101.30963135 199.61294556]
[100.37709045 214.58393860]
[99.44454193 229.55491638]
[98.51200104 244.52590942]
[97.57945251 259.49688721]
[96.64691162 274.46786499]
[103.51129150 288.72238159]
[94.99771118 300.94400024]
[94.06516266 315.91497803]
[93.13262177 330.88595581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[15 88]
[16 87]
[17 86]
[21 76]
[22 75]
[23 74]
[25 72]
[26 71]
[27 70]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
