%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCCCUCUCUCCCCAGCUGCCUCCUCCUCUUCUCUCCCCGCUCUCCUUCCCCUUUCACCCCAUCCCCUGCCCUGGCUGCAACCAUGAGGGUCUUGGCCUGCCUCCUUGCGGCCCUGGUGGGGAUCCAGGCUGUUGAGCGCCUGCGCCUGGCCGAUGGCCCCCAUGGGUGCGCUGGCCGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[71.78511047 244.83642578]
[76.43910980 259.24542236]
[76.15986633 274.38479614]
[70.97765350 288.61233521]
[61.45461273 300.38479614]
[48.62372208 308.42514038]
[33.87678909 311.86120605]
[18.81344414 310.32031250]
[5.06764889 303.96957397]
[-5.86955500 293.49786377]
[-12.81178284 280.04113770]
[-15.00599194 265.05899048]
[-12.21417236 250.17663574]
[-4.73916006 237.00839233]
[6.60821247 226.98263550]
[20.59706688 221.18688965]
[35.70999527 220.24983215]
[39.67292786 205.78279114]
[43.63586044 191.31575012]
[47.47777557 176.81611633]
[51.19841385 162.28486633]
[46.85981369 148.03616333]
[57.77834320 136.58642578]
[61.49898148 122.05519867]
[65.21961975 107.52395630]
[57.86353302 120.59637451]
[46.74777603 130.66812134]
[33.01550674 136.70339966]
[18.07895088 138.08155823]
[3.47419739 134.66085815]
[-9.29679203 126.79309082]
[-18.92064095 115.28737640]
[-24.40762711 101.32696533]
[-25.19346428 86.34756470]
[-21.19733810 71.88966370]
[-12.83021164 59.44011688]
[-0.95256537 50.27924728]
[13.21409512 45.34916306]
[28.21286392 45.15687943]
[42.50125504 49.72216797]
[54.60984421 58.57553482]
[63.29337311 70.80648804]
[67.65873718 85.15655518]
[67.15751648 70.16493225]
[66.65628815 55.17330933]
[66.15506744 40.18168640]
[65.65383911 25.19006157]
[59.40105820 23.03464127]
[53.76865387 19.59727097]
[49.01492691 15.04332829]
[45.35622025 9.58920383]
[42.95706177 3.49203634]
[41.92280197 -2.96241736]
[42.29497910 -9.47316933]
[44.04970169 -15.73803616]
[47.09906387 -21.46766663]
[51.29553604 -26.39890480]
[56.43906403 -30.30687141]
[62.28663254 -33.01522064]
[68.56372070 -34.40408325]
[70.56302643 -49.27024460]
[64.73414612 -63.97856522]
[74.09878540 -75.56099701]
[76.09809113 -90.42716217]
[67.58931732 -108.68746948]
[80.01159668 -123.49047852]
[81.51303101 -138.41514587]
[83.01446533 -153.33981323]
[84.51589966 -168.26448059]
[86.01733398 -183.18914795]
[87.51876831 -198.11381531]
[85.26107025 -206.98585510]
[89.17202759 -213.27459717]
[90.92263794 -228.17208862]
[92.67325592 -243.06958008]
[83.15247345 -255.39810181]
[85.14006042 -270.48135376]
[96.95209503 -279.48196411]
[98.70271301 -294.37948608]
[100.45332336 -309.27697754]
[102.20394135 -324.17446899]
[103.95455170 -339.07196045]
[105.70516968 -353.96945190]
[107.45578003 -368.86694336]
[109.20639801 -383.76443481]
[95.99256897 -391.22570801]
[86.66717529 -403.14544678]
[82.62673950 -417.68807983]
[84.45695496 -432.62924194]
[91.84801483 -445.69586182]
[103.64653015 -454.91220093]
[118.03542328 -458.89828491]
[119.78604126 -473.79577637]
[121.53665161 -488.69326782]
[123.28726959 -503.59078979]
[116.30778503 -518.43054199]
[125.89054108 -531.73852539]
[142.17762756 -529.82464600]
[148.41427612 -514.65771484]
[138.18476868 -501.84014893]
[136.43414307 -486.94265747]
[134.68353271 -472.04516602]
[132.93292236 -457.14767456]
[146.00578308 -449.93453979]
[155.34635925 -438.23413086]
[159.50697327 -423.81005859]
[157.82366943 -408.85165405]
[150.52201843 -395.64181519]
[138.68742371 -386.20858765]
[124.10388947 -382.01382446]
[122.35327911 -367.11633301]
[120.60266113 -352.21884155]
[118.85205078 -337.32135010]
[117.10143280 -322.42385864]
[115.35082245 -307.52636719]
[113.60020447 -292.62884521]
[111.84959412 -277.73135376]
[121.25331879 -266.23764038]
[119.69017029 -251.10453796]
[107.57074738 -241.31896973]
[105.82012939 -226.42147827]
[104.06951904 -211.52397156]
[102.44343567 -196.61238098]
[100.94200134 -181.68771362]
[99.44056702 -166.76304626]
[97.93913269 -151.83837891]
[96.43769836 -136.91371155]
[94.93625641 -121.98904419]
[102.10223389 -114.67063904]
[104.08819580 -104.39846802]
[99.99842834 -94.53015900]
[90.96425629 -88.42785645]
[88.96495056 -73.56169128]
[94.93683624 -59.91669846]
[85.42919159 -47.27094269]
[83.42988586 -32.40477753]
[100.34290314 -15.38359642]
[99.31642914 8.83817673]
[80.64546204 24.68883705]
[81.14669037 39.68046188]
[81.64791107 54.67208481]
[82.14913940 69.66370392]
[82.65036011 84.65533447]
[96.19690704 78.23064423]
[110.09897614 81.54634857]
[118.42503357 92.28883362]
[118.18827057 105.17751312]
[129.80328369 114.66916656]
[141.41828918 124.16082764]
[153.03329468 133.65248108]
[158.22506714 134.49461365]
[162.17033386 137.00296021]
[164.44155884 140.41844177]
[164.97688293 143.92250061]
[176.10165405 153.98426819]
[187.22644043 164.04603577]
[202.65142822 167.56460571]
[206.90057373 181.84024048]
[218.02536011 191.90202332]
[229.15013123 201.96379089]
[240.27491760 212.02555847]
[256.07785034 218.16592407]
[254.55212402 235.05108643]
[237.90447998 238.25927734]
[230.21315002 223.15034485]
[219.08836365 213.08857727]
[207.96357727 203.02679443]
[196.83880615 192.96502686]
[182.20953369 190.16615295]
[177.16467285 175.17082214]
[166.03988647 165.10905457]
[154.91510010 155.04728699]
[143.54164124 145.26750183]
[131.92663574 135.77583313]
[120.31162262 126.28417969]
[108.69660950 116.79251862]
[93.92386627 120.13969421]
[79.75085449 111.24459076]
[76.03022003 125.77583313]
[72.30957794 140.30706787]
[76.38205719 155.59515381]
[65.72965240 166.00550842]
[62.00901413 180.53674316]
[62.91194153 189.64691162]
[58.10289764 195.27868652]
[54.13996506 209.74572754]
[50.17703629 224.21275330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 187]
[18 186]
[19 185]
[20 183]
[21 182]
[23 180]
[24 179]
[25 178]
[43 143]
[44 142]
[45 141]
[46 140]
[47 139]
[60 136]
[61 135]
[63 133]
[64 132]
[66 128]
[67 127]
[68 126]
[69 125]
[70 124]
[71 123]
[73 122]
[74 121]
[75 120]
[78 117]
[79 116]
[80 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[92 103]
[93 102]
[94 101]
[95 100]
[147 176]
[148 175]
[149 174]
[150 173]
[154 172]
[155 171]
[156 170]
[158 168]
[159 167]
[160 166]
[161 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
