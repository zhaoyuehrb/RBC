%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGAUGUUUUCUUGGCUUUGUGCUAUUUUAAUUAUUUUGGCUAUUGCUGGUAUGAACACAAUAGCAAAGACCACACCACAUACCAAAUUUACGAAGA\
) } def
/len { sequence length } bind def

/coor [
[191.99554443 293.60623169]
[184.83474731 280.42584229]
[177.67395020 267.24542236]
[170.51315308 254.06503296]
[163.35235596 240.88462830]
[156.19155884 227.70423889]
[150.12562561 223.25114441]
[149.02027893 214.00068665]
[142.27285767 200.60395813]
[135.52542114 187.20724487]
[121.34499359 182.79692078]
[114.31130219 169.30685425]
[119.03339386 154.46301270]
[112.28597260 141.06629944]
[105.53854370 127.66956329]
[98.79111481 114.27284241]
[87.20706940 106.44331360]
[87.81215668 92.47458649]
[81.06472778 79.07785797]
[74.31730652 65.68113708]
[67.36235046 52.39096451]
[60.20155334 39.21056366]
[53.04075623 26.03016090]
[45.87995911 12.84976006]
[38.71916199 -0.33064061]
[32.22159958 -0.17890832]
[25.95649338 -1.77987897]
[20.38527489 -4.99729538]
[15.91331005 -9.57653809]
[12.86039734 -15.16469860]
[11.43794441 -21.33774376]
[11.73440456 -27.63267708]
[13.70998096 -33.58226013]
[17.20091057 -38.74969482]
[21.93288612 -42.76068878]
[18.23870277 -57.29867554]
[14.54451942 -71.83666229]
[10.85033607 -86.37464142]
[-0.04733888 -97.84422302]
[4.31718636 -112.08501434]
[0.62300259 -126.62300110]
[-3.07118106 -141.16098022]
[-6.76536465 -155.69897461]
[-10.45954800 -170.23695374]
[-22.28553963 -181.59820557]
[-18.09722900 -197.45349121]
[-2.20319128 -201.49226379]
[9.04614925 -189.55976868]
[4.07843685 -173.93113708]
[7.77262020 -159.39315796]
[11.46680355 -144.85516357]
[15.16098785 -130.31718445]
[18.85517120 -115.77919769]
[29.48861313 -105.34947205]
[25.38832092 -90.06883240]
[29.08250427 -75.53084564]
[32.77668762 -60.99285889]
[36.47087097 -46.45487213]
[56.24225998 -32.15375900]
[51.89956284 -7.49143887]
[59.06035995 5.68896246]
[66.22116089 18.86936378]
[73.38195801 32.04976273]
[80.54275513 45.23016357]
[86.60868073 49.68325806]
[87.71402740 58.93370819]
[94.46145630 72.33043671]
[101.20888519 85.72715759]
[112.79293060 93.55668640]
[112.18784332 107.52541351]
[118.93527222 120.92214203]
[125.68269348 134.31886292]
[132.43011475 147.71559143]
[147.16819763 152.75807190]
[153.82020569 166.44038391]
[148.92214966 180.45980835]
[155.66957092 193.85653687]
[162.41700745 207.25326538]
[169.37194824 220.54342651]
[176.53274536 233.72383118]
[183.69355774 246.90423584]
[190.85435486 260.08462524]
[198.01515198 273.26504517]
[205.17594910 286.44543457]
[220.10374451 283.90780640]
[235.04627991 286.35717773]
[248.38269043 293.52786255]
[258.66635132 304.64202881]
[264.78176880 318.49414062]
[266.06558228 333.58157349]
[262.37854004 348.26776123]
[254.12057495 360.95968628]
[242.18745422 370.28057861]
[227.87359619 375.21942139]
[212.73165894 375.24047852]
[198.40412903 370.34143066]
[186.44514465 361.05374146]
[178.15193176 348.38482666]
[174.42407227 333.70895386]
[175.66593933 318.61801147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[8 78]
[9 77]
[10 76]
[13 73]
[14 72]
[15 71]
[16 70]
[18 68]
[19 67]
[20 66]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[35 58]
[36 57]
[37 56]
[38 55]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
