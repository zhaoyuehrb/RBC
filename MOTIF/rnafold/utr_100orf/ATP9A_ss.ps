%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGGGGGCGCGGCGGCCAAGGCGGGCGGCGCCGCCGACAUGACGGACAACAUCCCGCUGCAGCCGGUGCGCCAGAAGAAGCGGAUGGACAGCAGGCCCCGCGCCGGGUGCUGCGAGUGGCUGAGAUGCUGCGGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[184.24948120 217.36238098]
[174.05839539 206.35594177]
[163.86730957 195.34950256]
[153.67622375 184.34304810]
[143.48515320 173.33660889]
[133.29406738 162.33015442]
[123.10298157 151.32371521]
[112.91190338 140.31727600]
[102.72081757 129.31082153]
[77.50012970 104.88686371]
[63.25478363 100.18896484]
[49.00943756 95.49107361]
[34.76409531 90.79318237]
[20.51875114 86.09529114]
[6.27340841 81.39739990]
[-9.25573826 84.42331696]
[-18.91942787 73.08919525]
[-33.16477203 68.39130402]
[-47.41011429 63.69341278]
[-61.65546036 58.99552155]
[-74.23416901 67.88833618]
[-89.45936584 67.67177582]
[-101.49526215 58.63843536]
[-105.85191345 44.42022324]
[-120.09725189 39.72233200]
[-134.34260559 35.02444077]
[-148.58793640 30.32654762]
[-162.83328247 25.62865639]
[-177.07862854 20.93076324]
[-185.71510315 32.41273880]
[-197.46437073 40.64448547]
[-211.16432190 44.82804489]
[-225.46487427 44.56507492]
[-238.96110535 39.89471817]
[-250.33122253 31.28847504]
[-258.46600342 19.60260963]
[-262.57708740 5.99299574]
[-262.27319336 -8.19922829]
[-276.41189575 -13.20892048]
[-290.55059814 -18.21861076]
[-304.70690918 -11.19191933]
[-319.65869141 -16.31243324]
[-326.53533936 -30.54224396]
[-321.25701904 -45.43905640]
[-306.95532227 -52.16485596]
[-292.11514282 -46.72934723]
[-285.54092407 -32.35731888]
[-271.40222168 -27.34762573]
[-257.26351929 -22.33793449]
[-247.42866516 -34.58732986]
[-233.97817993 -42.75420761]
[-218.52076721 -45.84039307]
[-202.91247559 -43.45666122]
[-189.03388977 -35.87172699]
[-178.56344604 -23.98206711]
[-172.77458191 -9.20601654]
[-172.38073730 6.68542004]
[-158.13539124 11.38331223]
[-143.89004517 16.08120346]
[-129.64469910 20.77909470]
[-115.39936066 25.47698784]
[-101.15402222 30.17487907]
[-89.19403839 21.33763504]
[-74.14566040 21.23626900]
[-61.77850723 30.11922836]
[-56.95756912 44.75017929]
[-42.71222305 49.44807053]
[-28.46688080 54.14596176]
[-14.22153664 58.84385300]
[0.28868699 55.48191071]
[10.97130013 67.15206146]
[25.21664429 71.84995270]
[39.46198654 76.54784393]
[53.70733261 81.24573517]
[67.95267487 85.94362640]
[82.19802094 90.64151764]
[69.95723724 81.97183990]
[65.58469391 67.62329102]
[70.91024017 53.60050201]
[83.70520020 45.77178192]
[98.61511230 47.41332626]
[109.40040588 57.83817291]
[111.54761505 72.68369293]
[104.15722656 85.73812103]
[115.05106354 75.42675018]
[112.08592224 60.28701782]
[117.79788208 45.95603561]
[130.36427307 37.00676727]
[145.77519226 36.29489136]
[159.11309814 44.04756165]
[166.12190247 57.79093933]
[164.56510925 73.13954926]
[154.93949890 85.19571686]
[140.31655884 90.11235809]
[125.36242676 86.32058716]
[114.46858978 96.63195801]
[129.43568420 95.63887787]
[136.93753052 108.62818146]
[128.59751892 121.09590912]
[113.72726440 119.11974335]
[123.91834259 130.12619019]
[134.10942078 141.13262939]
[144.30050659 152.13908386]
[154.49159241 163.14552307]
[164.68267822 174.15196228]
[174.87376404 185.15841675]
[185.06483459 196.16485596]
[195.25592041 207.17131042]
[207.45317078 204.05554199]
[219.74069214 206.43836975]
[229.77232361 213.80171204]
[235.65962219 224.68258667]
[236.32728577 236.96347046]
[231.70904541 248.28425598]
[241.40684509 259.72772217]
[251.10462952 271.17117310]
[260.80242920 282.61462402]
[273.61758423 284.46942139]
[281.45727539 294.26544189]
[280.51934814 306.37414551]
[289.96340942 318.02789307]
[299.40747070 329.68161011]
[308.85156250 341.33535767]
[318.29562378 352.98907471]
[334.03808594 354.38586426]
[344.11779785 366.55856323]
[342.55465698 382.28536987]
[330.27606201 392.23580933]
[314.56668091 390.50650024]
[304.74658203 378.12338257]
[306.64190674 362.43316650]
[297.19781494 350.77941895]
[287.75375366 339.12570190]
[278.30969238 327.47195435]
[268.86560059 315.81823730]
[252.18544006 310.47210693]
[249.35897827 292.31243896]
[239.66117859 280.86898804]
[229.96337891 269.42550659]
[220.26557922 257.98205566]
[202.80068970 260.14718628]
[187.36773682 251.36889648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[15 71]
[17 69]
[18 68]
[19 67]
[20 66]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[38 49]
[39 48]
[40 47]
[84 96]
[85 95]
[114 140]
[115 139]
[116 138]
[117 137]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
