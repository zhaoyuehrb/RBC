%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAUCAUGGAACAAUACAAUAAUUUUAGAAUUUCUUCUCCUGGGAAUUUCAGAGGAACCAGAAUUGCAGGCCUUCCUCUUUGGGCUGUUCCUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[83.20967102 354.60180664]
[68.08045197 355.22262573]
[53.57011414 350.89492798]
[41.25263214 342.08819580]
[32.46411514 329.75772095]
[28.15787697 315.24099731]
[28.80102539 300.11273193]
[34.32379532 286.01385498]
[44.12711716 274.47378540]
[57.14760208 266.74426270]
[71.97288513 263.66369629]
[73.83436584 248.77966309]
[75.69584656 233.89561462]
[77.55732727 219.01156616]
[79.41880798 204.12751770]
[81.28028870 189.24346924]
[70.30177307 179.21299744]
[67.29923248 164.46685791]
[73.62950134 150.61836243]
[87.05557251 143.06542969]
[88.91705322 128.18138123]
[90.77853394 113.29732513]
[83.10268402 126.18458557]
[69.51193237 132.53213501]
[54.70286560 130.14645386]
[43.79309082 119.85195160]
[40.55271912 105.20613098]
[46.10154343 91.27018738]
[58.52203751 82.85999298]
[73.52201843 82.88188171]
[85.91813660 91.32856750]
[77.95176697 78.61884308]
[69.98539734 65.90912628]
[62.01903152 53.19940567]
[54.05266571 40.48968506]
[46.08629990 27.77996254]
[38.11993027 15.07024288]
[30.15356445 2.36052203]
[14.69533348 -0.92864615]
[6.16070509 -14.23036289]
[9.61312389 -29.65295601]
[23.00432968 -38.04647446]
[38.38956070 -34.43119049]
[46.64102936 -20.95199203]
[42.86328506 -5.60584497]
[50.82965088 7.10387564]
[58.79602051 19.81359673]
[66.76239014 32.52331543]
[74.72875214 45.23303604]
[82.69512177 57.94275665]
[90.66149139 70.65248108]
[98.62785339 83.36219788]
[103.81408691 85.79189301]
[107.25811768 89.54430389]
[120.54828644 82.58934784]
[133.83845520 75.63439941]
[147.12863159 68.67944336]
[160.41879272 61.72449112]
[173.70896912 54.76953888]
[186.99913025 47.81458664]
[200.06657410 40.44967651]
[212.89865112 32.68193054]
[213.21023560 17.25771332]
[221.83027649 4.46324396]
[236.00814819 -1.61881077]
[251.21975708 0.95231152]
[262.61111450 11.35617542]
[266.54730225 26.27294540]
[261.77227783 40.94273376]
[249.80973816 50.68446732]
[234.47689819 52.38959122]
[220.66639709 45.51400757]
[207.83432007 53.28174973]
[205.81886292 57.79047775]
[200.85385132 60.99336243]
[193.95408630 61.10475540]
[180.66392517 68.05970764]
[167.37374878 75.01466370]
[154.08357239 81.96961212]
[140.79341125 88.92456818]
[127.50323486 95.87952423]
[114.21306610 102.83447266]
[105.66258240 115.15880585]
[103.80110168 130.04286194]
[101.93962097 144.92691040]
[113.09202576 155.55375671]
[115.81671906 170.53472900]
[109.27499390 184.08720398]
[96.16433716 191.10494995]
[94.30285645 205.98899841]
[92.44137573 220.87304688]
[90.57989502 235.75709534]
[88.71841431 250.64114380]
[86.85693359 265.52517700]
[100.46691132 272.16198730]
[111.18273163 282.86013794]
[117.84201813 296.45910645]
[119.72243500 311.48385620]
[116.61999512 326.30456543]
[108.87123108 339.31362915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[20 85]
[21 84]
[22 83]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[61 73]
[62 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
