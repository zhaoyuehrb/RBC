%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUCCAGAAGGGUGGGAGAUGGCAGUUUUCCCAAGCUCCGGUCUCCCCAGAUGUCUGCUCACCCUCAUUCUCCUCCAGCUGCCCAAACUGGAUUCAGCUCCCUUUGACGUGAUUGGAC\
) } def
/len { sequence length } bind def

/coor [
[114.15394592 292.29302979]
[98.39757538 291.06329346]
[88.18935394 278.99813843]
[89.58563232 263.25564575]
[101.75802612 253.17555237]
[102.92520905 238.22103882]
[104.09239197 223.26651001]
[105.25956726 208.31199646]
[104.87015533 193.31704712]
[102.92835236 178.44326782]
[100.98654938 163.56948853]
[99.04474640 148.69569397]
[97.10294342 133.82191467]
[95.16114044 118.94813538]
[84.49768829 116.93338013]
[75.13389587 108.74609375]
[60.23616028 106.99753571]
[45.33842087 105.24898529]
[30.44068718 103.50042725]
[15.54294968 101.75186920]
[0.64521360 100.00331116]
[-14.25252247 98.25475311]
[-29.17170334 96.69973755]
[-44.10980988 95.33852386]
[-53.06324768 97.69557190]
[-59.41633606 93.74314117]
[-74.31407166 91.99458313]
[-89.21180725 90.24602509]
[-104.10954285 88.49746704]
[-119.00727844 86.74890900]
[-133.84608459 93.73044586]
[-147.15541077 84.14952087]
[-145.24375916 67.86217499]
[-130.07766724 61.62343216]
[-117.25872803 71.85117340]
[-102.36098480 73.59973145]
[-87.46324921 75.34828949]
[-72.56551361 77.09684753]
[-57.66777802 78.84540558]
[-42.74860001 80.40042114]
[-27.81048965 81.76162720]
[-20.77889061 79.20426941]
[-12.50396633 83.35701752]
[2.39377046 85.10557556]
[17.29150772 86.85413361]
[32.18924332 88.60269165]
[47.08697891 90.35124969]
[61.98471451 92.09980011]
[76.88245392 93.84835815]
[86.40775299 82.26092529]
[81.80955505 67.98309326]
[77.21135712 53.70525742]
[64.69646454 43.10763931]
[67.88269043 27.02099609]
[83.49230957 21.99389267]
[95.46749115 33.19778061]
[91.48918915 49.10705948]
[96.08738708 63.38489151]
[100.68559265 77.66272736]
[103.49544525 62.92825317]
[106.30530548 48.19378281]
[102.39653778 33.71201706]
[103.33066559 18.74113083]
[109.00932312 4.85758495]
[118.83454132 -6.47665930]
[131.77171326 -14.06808758]
[146.45851135 -17.11730957]
[161.34841919 -15.30323696]
[174.87347412 -8.81689453]
[185.60949707 1.65869510]
[192.42593384 15.02043438]
[194.60502625 29.86130905]
[191.91731262 44.61854935]
[184.64579773 57.73819351]
[173.55618286 67.83872223]
[159.81623840 73.85652924]
[144.87332153 75.15796661]
[131.99957275 82.85643768]
[119.12581635 90.55490112]
[134.11444092 89.97087097]
[149.10307312 89.38683319]
[164.09169006 88.80280304]
[179.08032227 88.21877289]
[195.49432373 76.65560913]
[212.28297424 86.10404968]
[227.22108459 84.74283600]
[242.15919495 83.38162231]
[257.38427734 75.92287445]
[268.76626587 88.48816681]
[259.84286499 102.90376282]
[243.52040100 98.31973267]
[228.58229065 99.68094635]
[213.64418030 101.04216003]
[207.73596191 109.55950928]
[197.88523865 113.43869781]
[187.32366943 111.14331055]
[179.66435242 103.20739746]
[164.67572021 103.79142761]
[149.68710327 104.37545776]
[134.69847107 104.95949554]
[119.70984650 105.54352570]
[110.03492737 117.00633240]
[111.97673035 131.88011169]
[113.91853333 146.75389099]
[115.86033630 161.62767029]
[117.80213928 176.50146484]
[119.74394226 191.37524414]
[128.88882446 179.48527527]
[143.21812439 175.05004883]
[157.48086548 179.69482422]
[166.45050049 191.71754456]
[166.84008789 206.71247864]
[158.50689697 219.18476868]
[144.50457764 224.56391907]
[129.96430969 220.87876892]
[120.21408844 209.47917175]
[119.04691315 224.43368530]
[117.87973022 239.38821411]
[116.71254730 254.34272766]
[127.17359924 266.18933105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 119]
[6 118]
[7 117]
[8 116]
[9 107]
[10 106]
[11 105]
[12 104]
[13 103]
[14 102]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 41]
[24 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[50 59]
[51 58]
[52 57]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
