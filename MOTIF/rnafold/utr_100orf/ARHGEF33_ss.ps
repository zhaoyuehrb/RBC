%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGGGAAGAGGAGGUGGCCUGAGCCAGGACGAUGAGGAUGCAAUGUUGAAGAAUAAGCUGGAGAAGAGAAGUAACCGGCACUAUGGAAAAAACCAAAACAAAGCAAGGAGAGAAUGAACAUAUGCCGGUGAAUAAUCCUUCCACGCAGAUUUACCAGUUGCAGGCCCUAGCCUCCGAACUCA\
) } def
/len { sequence length } bind def

/coor [
[94.86193085 466.50540161]
[79.84706879 470.87435913]
[65.55761719 464.52255249]
[58.74062347 450.44906616]
[62.61485672 435.29901123]
[75.35102844 426.22576904]
[76.36367798 411.25997925]
[77.37631989 396.29418945]
[66.37127686 388.71438599]
[60.50662994 376.58682251]
[61.41305542 363.03765869]
[68.96028137 351.61865234]
[81.26323700 345.37609863]
[82.52850342 330.42956543]
[83.79376984 315.48303223]
[85.05903625 300.53649902]
[86.32430267 285.58993530]
[87.58956909 270.64340210]
[88.47579193 255.66960144]
[88.98240662 240.67816162]
[89.48901367 225.68672180]
[89.99562836 210.69528198]
[90.50224304 195.70384216]
[91.00885010 180.71238708]
[91.38883972 165.71720886]
[91.64218140 150.71934509]
[91.89552307 135.72148132]
[83.81066132 132.85745239]
[76.61347961 128.19180298]
[70.69861603 121.98034668]
[66.39038849 114.56368256]
[51.69743729 117.58316040]
[37.00448990 120.60263824]
[22.31153870 123.62211609]
[10.35136414 133.97898865]
[-3.67288661 128.96205139]
[-18.36583519 131.98153687]
[-26.85245514 145.31393433]
[-42.29872894 148.65879822]
[-55.54065704 140.03169250]
[-58.72203445 124.55092621]
[-49.95541382 111.40094757]
[-34.44186783 108.38342285]
[-21.38531303 117.28858185]
[-6.69236469 114.26910400]
[4.21687222 104.12820435]
[19.29206085 108.92916870]
[33.98501205 105.90969086]
[48.67795944 102.89021301]
[63.37091064 99.87073517]
[66.87380219 84.36791229]
[76.61347961 71.80819702]
[90.75621033 64.55625153]
[106.63930511 63.97741699]
[112.32099152 50.09510803]
[118.00267792 36.21279907]
[123.68435669 22.33049202]
[117.81858063 7.90030003]
[123.77837372 -6.09739685]
[137.57150269 -11.60058975]
[143.25318909 -25.48289871]
[148.81742859 -39.41269302]
[154.26383972 -53.38898087]
[159.71025085 -67.36527252]
[165.15666199 -81.34156036]
[170.60305786 -95.31784821]
[166.13854980 -107.43394470]
[170.97904968 -118.97099304]
[182.02110291 -123.94403076]
[187.70278931 -137.82633972]
[176.97393799 -148.55795288]
[171.18678284 -162.54194641]
[171.19438171 -177.63543701]
[176.96444702 -191.53845215]
[187.58897400 -202.14431763]
[201.42691040 -207.85891724]
[216.35772705 -207.84020996]
[222.03939819 -221.72251892]
[227.72108459 -235.60482788]
[233.40277100 -249.48713684]
[239.08445740 -263.36944580]
[244.76614380 -277.25173950]
[250.44781494 -291.13406372]
[250.80531311 -300.28387451]
[256.34448242 -305.20153809]
[262.25982666 -318.98590088]
[268.17514038 -332.77026367]
[274.09048462 -346.55465698]
[261.54751587 -354.85607910]
[250.68855286 -365.26388550]
[241.86265564 -377.44351196]
[235.35353088 -391.00341797]
[231.37043762 -405.50772095]
[230.04141235 -420.49017334]
[231.40916443 -435.46911621]
[235.42974854 -449.96307373]
[241.97389221 -463.50610352]
[250.83125305 -475.66287231]
[261.71707153 -486.04257202]
[274.28146362 -494.31155396]
[288.12051392 -500.20401001]
[302.78933716 -503.53048706]
[317.81637573 -504.18411255]
[332.71862793 -502.14379883]
[347.01702881 -497.47518921]
[360.25192261 -490.32833862]
[371.99786377 -480.93298340]
[381.87728882 -469.59118652]
[389.57260132 -456.66748047]
[394.83642578 -442.57736206]
[397.49957275 -427.77374268]
[397.47640991 -412.73248291]
[394.76770020 -397.93710327]
[389.46051025 -383.86325073]
[381.72543335 -370.96331787]
[371.81115723 -359.65197754]
[360.03631592 -350.29284668]
[346.77947998 -343.18676758]
[332.46679688 -338.56222534]
[317.55834961 -336.56781006]
[302.53335571 -337.26766968]
[287.87484741 -340.63931274]
[281.95953369 -326.85494995]
[276.04418945 -313.07058716]
[270.12884521 -299.28619385]
[264.33013916 -285.45236206]
[258.64843750 -271.57006836]
[252.96676636 -257.68774414]
[247.28507996 -243.80545044]
[241.60339355 -229.92314148]
[235.92170715 -216.04083252]
[230.24002075 -202.15852356]
[240.89959717 -191.70373535]
[246.76023865 -177.92700195]
[246.90019226 -162.91549683]
[241.26701355 -148.95645142]
[230.69024658 -138.18865967]
[216.75936890 -132.27478027]
[201.58509827 -132.14465332]
[195.90341187 -118.26234436]
[199.20941162 -101.03704834]
[184.57934570 -89.87143707]
[179.13294983 -75.89514923]
[173.68653870 -61.91886139]
[168.24012756 -47.94257355]
[162.79371643 -33.96628571]
[163.29562378 -26.57616806]
[157.13549805 -19.80121422]
[151.45381165 -5.91890669]
[157.43070984 7.67566442]
[151.86642456 21.83523750]
[137.56666565 28.01217461]
[131.88497925 41.89448166]
[126.20330048 55.77679062]
[120.52161407 69.65909576]
[132.06428528 82.29157257]
[136.60928345 98.78871155]
[133.16471863 115.55020905]
[122.48230743 128.91804504]
[106.89338684 135.97482300]
[106.64004517 150.97268677]
[106.38670349 165.97055054]
[109.37586212 174.62573242]
[106.00029755 181.21900940]
[105.49368286 196.21044922]
[104.98706818 211.20188904]
[104.48046112 226.19332886]
[103.97384644 241.18476868]
[103.46723175 256.17620850]
[105.94712830 260.81896973]
[106.34346008 265.48049927]
[105.00148773 269.35913086]
[102.53610992 271.90866089]
[101.27084351 286.85522461]
[100.00557709 301.80175781]
[98.74031067 316.74829102]
[97.47504425 331.69482422]
[96.20977783 346.64138794]
[109.15060425 357.51696777]
[113.02859497 373.79940796]
[106.51007080 389.03533936]
[92.34210205 397.30685425]
[91.32945251 412.27264404]
[90.31681061 427.23840332]
[101.71461487 437.94467163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 184]
[7 183]
[8 182]
[13 178]
[14 177]
[15 176]
[16 175]
[17 174]
[18 173]
[19 169]
[20 168]
[21 167]
[22 166]
[23 165]
[24 164]
[25 162]
[26 161]
[27 160]
[31 50]
[32 49]
[33 48]
[34 47]
[36 45]
[37 44]
[54 155]
[55 154]
[56 153]
[57 152]
[60 149]
[61 148]
[62 146]
[63 145]
[64 144]
[65 143]
[66 142]
[69 140]
[70 139]
[77 132]
[78 131]
[79 130]
[80 129]
[81 128]
[82 127]
[83 126]
[85 125]
[86 124]
[87 123]
[88 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
