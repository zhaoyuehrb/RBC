%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUCCUCUACCUGCUCUACUCUCAAUCCGCCAGAAUCAUGGGCUGCUGUGGCUGUUCUGGAGGCUGUGGCUCUGGCUGUGGGGGCUGUGGCUCCGGCAGUGGGGGCUGUGGCUCUGGCUGUGGGGGCUGUGGCUCCA\
) } def
/len { sequence length } bind def

/coor [
[89.94974518 129.85801697]
[76.69216156 123.40548706]
[71.06956482 137.31184387]
[80.58551788 149.36763000]
[82.78279114 164.56854248]
[77.07033539 178.82559204]
[64.98477173 188.30369568]
[49.77705002 190.45332336]
[35.53797531 184.69619751]
[26.09779167 172.58097839]
[23.99585533 157.36660767]
[29.79757690 143.14564514]
[41.94232559 133.74348450]
[57.16322327 131.68923950]
[62.78581238 117.78289795]
[51.18446732 127.29125214]
[43.29895020 140.05130005]
[31.04015923 148.69548035]
[16.37308121 151.83822632]
[1.64873755 148.97576904]
[-10.77267647 140.56694031]
[-18.90010262 127.95959473]
[-21.43077850 113.17461395]
[-17.95905495 98.58190918]
[-9.04142380 86.52056885]
[3.89268780 78.92394257]
[18.77004242 77.00970459]
[33.20591736 81.08469391]
[44.88692856 90.49642181]
[58.99006653 95.60537720]
[49.06276321 84.36044312]
[39.13545990 73.11550903]
[29.20815277 61.87056732]
[19.28084946 50.62562943]
[9.35354424 39.38069153]
[-5.58005428 34.15592575]
[-8.20285797 19.49406242]
[-18.13016319 8.24912548]
[-28.05746651 -2.99581218]
[-37.98477173 -14.24074936]
[-47.91207504 -25.48568726]
[-57.83938217 -36.73062515]
[-72.77297974 -41.95539474]
[-75.39578247 -56.61725616]
[-85.32308960 -67.86219025]
[-93.42018890 -72.27349854]
[-95.34416962 -79.47525787]
[-105.01480865 -90.94167328]
[-114.68544769 -102.40809631]
[-122.68078613 -107.00126648]
[-124.44151306 -114.24466705]
[-133.85055542 -125.92670441]
[-149.33183289 -131.33613586]
[-152.12152100 -147.49626160]
[-139.34982300 -157.78292847]
[-124.15516663 -151.61410522]
[-122.16851044 -135.33573914]
[-112.75947571 -123.65370178]
[-103.21902466 -112.07873535]
[-93.54838562 -100.61231995]
[-83.87774658 -89.14589691]
[-74.07814789 -77.78949738]
[-64.15084839 -66.54456329]
[-49.92731476 -62.12410355]
[-46.59444427 -46.65792847]
[-36.66714096 -35.41299057]
[-26.73983383 -24.16805458]
[-16.81253052 -12.92311668]
[-6.88522482 -1.67817938]
[3.04207969 9.56675816]
[17.26561165 13.98721409]
[20.59848213 29.45338821]
[30.52578545 40.69832611]
[40.45309067 51.94326401]
[50.38039398 63.18820190]
[60.30770111 74.43313599]
[70.23500824 85.67807770]
[82.23100281 73.61608124]
[98.07184601 69.47309113]
[113.20891571 73.77249908]
[123.62404633 84.70310974]
[126.89502716 98.78889465]
[141.47462463 102.31529999]
[156.05421448 105.84169769]
[170.63380432 109.36809540]
[185.21339417 112.89449310]
[199.79298401 116.42089081]
[214.37257385 119.94729614]
[228.95217896 123.47369385]
[243.53176880 127.00009155]
[258.11135864 130.52648926]
[272.69094849 134.05288696]
[287.27053833 137.57928467]
[301.85012817 141.10568237]
[316.42971802 144.63209534]
[331.66210938 140.35597229]
[342.21368408 150.86851501]
[356.79327393 154.39491272]
[371.37286377 157.92131042]
[385.95245361 161.44770813]
[400.53204346 164.97410583]
[415.76443481 160.69799805]
[426.31600952 171.21054077]
[440.89559937 174.73693848]
[455.47518921 178.26333618]
[470.05477905 181.78973389]
[484.63436890 185.31613159]
[500.20471191 180.16864014]
[512.26605225 191.27972412]
[508.41070557 207.21925354]
[492.60473633 211.58999634]
[481.10797119 199.89572144]
[466.52838135 196.36932373]
[451.94879150 192.84292603]
[437.36920166 189.31652832]
[422.78961182 185.79013062]
[408.60006714 190.31848145]
[397.00564575 179.55371094]
[382.42605591 176.02729797]
[367.84646606 172.50090027]
[353.26687622 168.97450256]
[338.68728638 165.44810486]
[324.49774170 169.97645569]
[312.90332031 159.21168518]
[298.32373047 155.68528748]
[283.74414062 152.15888977]
[269.16455078 148.63247681]
[254.58496094 145.10607910]
[240.00537109 141.57968140]
[225.42576599 138.05328369]
[210.84617615 134.52688599]
[196.26658630 131.00048828]
[181.68699646 127.47408295]
[167.10740662 123.94768524]
[152.52781677 120.42128754]
[137.94822693 116.89488983]
[123.36862946 113.36849213]
[115.88841248 123.59948730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[44 63]
[45 62]
[47 61]
[48 60]
[49 59]
[51 58]
[52 57]
[82 137]
[83 136]
[84 135]
[85 134]
[86 133]
[87 132]
[88 131]
[89 130]
[90 129]
[91 128]
[92 127]
[93 126]
[94 125]
[95 124]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
