%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCGCACGAGACCCAGCGGCCCGGGUUGGAGCGUCCAGCCCUGCAGCGGAUCAUGGUGCAGCAGGCGGAGAGCUUGGAAGCGGAGAGCAACCUGCCCCGGGAGGCGCUGGACACGGAGGAGGGCGAAUUCAUGGCUUGCAGCCCGGUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[277.55880737 394.04992676]
[278.59033203 381.15548706]
[269.57919312 369.16384888]
[260.56805420 357.17221069]
[251.55693054 345.18057251]
[242.54579163 333.18893433]
[233.53466797 321.19729614]
[224.05775452 323.74685669]
[214.22439575 323.29940796]
[204.96255493 319.87915039]
[197.15171814 313.79168701]
[191.53938293 305.59680176]
[188.66957092 296.05694580]
[188.83007812 286.06640625]
[192.02377319 276.56744385]
[197.96659851 268.46139526]
[190.20652771 255.62466431]
[182.44647217 242.78794861]
[174.68640137 229.95123291]
[166.92633057 217.11451721]
[159.16625977 204.27778625]
[141.59735107 196.28225708]
[141.34771729 176.16308594]
[133.07705688 163.64924622]
[124.80639648 151.13540649]
[116.53574371 138.62156677]
[108.26508331 126.10771942]
[99.99443054 113.59387207]
[89.71302032 102.67176056]
[77.72137451 93.66062927]
[62.04080582 91.55580902]
[56.51420212 77.72447205]
[44.52256012 68.71333313]
[32.53091812 59.70220184]
[20.53927803 50.69107056]
[2.23683548 48.92331314]
[-4.05869770 32.56863403]
[-16.22936440 23.80080414]
[-28.40003204 15.03297329]
[-37.24709320 12.53418159]
[-40.72510147 5.96401405]
[-52.71674347 -3.04711986]
[-64.70838928 -12.05825424]
[-76.87905121 -20.82608414]
[-89.22380829 -29.34705544]
[-101.56857300 -37.86802673]
[-113.91333008 -46.38899612]
[-126.25808716 -54.90996933]
[-142.01069641 -56.38168716]
[-148.08973694 -69.97927856]
[-160.43450928 -78.50024414]
[-176.41044617 -77.03436279]
[-187.41293335 -88.71018219]
[-185.00180054 -104.57101440]
[-171.02667236 -112.44978333]
[-156.20805359 -106.30258179]
[-151.91352844 -90.84500122]
[-139.56877136 -82.32403564]
[-124.69914246 -81.46179199]
[-117.73711395 -67.25473022]
[-105.39235687 -58.73375702]
[-93.04759979 -50.21278381]
[-80.70284271 -41.69181442]
[-68.35808563 -33.17084122]
[-63.52997589 -33.14945602]
[-58.67667389 -30.05585289]
[-55.69725037 -24.04989433]
[-43.70561218 -15.03876114]
[-31.71397018 -6.02762747]
[-19.63220215 2.86230564]
[-7.46153498 11.63013554]
[4.70913267 20.39796638]
[16.73226738 18.77286720]
[26.95373726 26.02709198]
[29.55041122 38.69942856]
[41.54205322 47.71055984]
[53.53369522 56.72169495]
[65.52533722 65.73282623]
[80.34818268 67.19310760]
[86.73250580 81.66898346]
[98.72415161 90.68012238]
[98.62580109 86.89518738]
[98.76550293 83.09849548]
[106.00239563 69.95971680]
[113.23928833 56.82094193]
[120.47618103 43.68216705]
[113.75899506 29.69434929]
[116.57962799 14.43579006]
[127.85347748 3.77371478]
[143.24552917 1.80791116]
[156.83721924 9.29427052]
[163.40226746 23.35413361]
[160.41627502 38.58119965]
[149.02742004 49.12034607]
[133.61495972 50.91905975]
[126.37806702 64.05783844]
[119.14117432 77.19660950]
[111.90428162 90.33538818]
[112.50827026 105.32321930]
[120.77892303 117.83705902]
[129.04957581 130.35090637]
[137.32023621 142.86474609]
[145.59089661 155.37858582]
[153.86155701 167.89242554]
[164.69725037 169.46470642]
[172.69290161 176.61860657]
[175.34442139 186.78717041]
[172.00299072 196.51773071]
[179.76304626 209.35444641]
[187.52311707 222.19116211]
[195.28318787 235.02787781]
[203.04325867 247.86459351]
[210.80331421 260.70132446]
[231.45721436 261.08697510]
[247.64334106 273.69982910]
[252.99282837 293.36801147]
[245.52630615 312.18615723]
[254.53742981 324.17779541]
[263.54858398 336.16943359]
[272.55969238 348.16107178]
[281.57083130 360.15270996]
[290.58197021 372.14434814]
[307.66998291 378.93438721]
[309.16680908 396.39486694]
[318.41757202 408.20260620]
[327.66836548 420.01037598]
[336.91915894 431.81811523]
[349.64120483 434.15908813]
[357.09979248 444.23242188]
[355.71713257 456.28582764]
[364.72827148 468.27746582]
[373.73937988 480.26910400]
[384.65026855 481.18426514]
[393.06326294 487.84237671]
[396.32391357 497.83227539]
[393.57608032 507.74682617]
[402.09704590 520.09161377]
[410.61801147 532.43634033]
[419.13900757 544.78112793]
[433.11267090 554.38171387]
[427.75555420 570.46704102]
[410.81585693 569.77215576]
[406.79421997 553.30206299]
[398.27325439 540.95733643]
[389.75228882 528.61254883]
[381.23132324 516.26782227]
[363.21170044 509.34762573]
[361.74774170 489.28024292]
[352.73660278 477.28860474]
[343.72549438 465.29696655]
[327.24734497 459.33203125]
[325.11138916 441.06890869]
[315.86059570 429.26116943]
[306.60983276 417.45339966]
[297.35903931 405.64566040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[16 113]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 81]
[30 80]
[32 78]
[33 77]
[34 76]
[35 75]
[37 72]
[38 71]
[39 70]
[41 69]
[42 68]
[43 67]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[50 58]
[51 57]
[83 98]
[84 97]
[85 96]
[86 95]
[124 155]
[125 154]
[126 153]
[127 152]
[130 150]
[131 149]
[132 148]
[136 146]
[137 145]
[138 144]
[139 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
