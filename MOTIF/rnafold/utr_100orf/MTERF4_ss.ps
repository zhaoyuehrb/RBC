%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGACGGGGGAGGACCGCUGCUUCCGGCGCCGUAACUGCUGCCAUCUUCUCCGCGCUAUGGCUGCGUUCGGCCGUCAGGUCCUUGAUUGGCACCGCCUGAUCCCCCUCACCUGGGCCUGUAUGGCUAGGCAGACUCCUCAUCUUGGAGAACAGAGAA\
) } def
/len { sequence length } bind def

/coor [
[109.36911011 183.57559204]
[119.55522919 172.56454468]
[133.10232544 166.12434387]
[148.07234192 165.17633057]
[162.32519531 169.85697937]
[150.73002625 160.34107971]
[143.52706909 158.51924133]
[139.00303650 150.52273560]
[127.59694672 140.78102112]
[116.19085693 131.03930664]
[104.78476715 121.29757690]
[80.80883026 105.00451660]
[66.73595428 99.81275940]
[52.66308594 94.62100983]
[38.59021759 89.42925262]
[24.51734734 84.23749542]
[10.44447708 79.04573822]
[-3.62839317 73.85398102]
[-18.50639343 75.76319885]
[-30.81241608 84.34001923]
[-43.11843872 92.91683960]
[-55.42445755 101.49365997]
[-61.89376450 116.56283569]
[-78.20837402 118.22588348]
[-87.58520508 104.77199554]
[-80.37818909 90.04138184]
[-64.00128174 89.18763733]
[-51.69525528 80.61081696]
[-39.38923645 72.03399658]
[-27.08321381 63.45717621]
[-27.96627426 48.48319244]
[-41.19509506 41.41224289]
[-54.42391205 34.34128952]
[-67.65273285 27.27033997]
[-76.74806213 25.97197533]
[-81.06986237 19.92847824]
[-94.15730286 12.59916019]
[-107.24474335 5.26984167]
[-116.31282806 3.79315329]
[-120.51514435 -2.33403158]
[-133.45616150 -9.91889191]
[-149.27445984 -10.22181606]
[-156.34230042 -23.33268929]
[-169.28330994 -30.91755104]
[-182.22431946 -38.50241089]
[-195.16534424 -46.08727264]
[-208.10635376 -53.67213058]
[-220.74452209 -45.11412811]
[-235.84555054 -42.89562225]
[-250.41111755 -47.45709991]
[-261.54922485 -57.89287949]
[-267.04837036 -72.13092804]
[-265.81671143 -87.34426880]
[-258.09881592 -100.51229095]
[-245.42704773 -109.02046204]
[-230.31739807 -111.17948151]
[-215.76991272 -106.56067657]
[-204.67298889 -96.08111572]
[-199.22994995 -81.82152557]
[-200.52149963 -66.61315155]
[-187.58047485 -59.02828598]
[-174.63946533 -51.44342804]
[-161.69845581 -43.85856628]
[-148.75743103 -36.27370453]
[-133.86476135 -36.51330185]
[-125.87129211 -22.85990715]
[-112.93028259 -15.27504730]
[-99.91542816 -7.81759834]
[-86.82798767 -0.48827970]
[-73.74054718 6.84103870]
[-60.58177948 14.04152107]
[-47.35296249 21.11247253]
[-34.12414169 28.18342209]
[-20.89532471 35.25437546]
[-14.48518944 36.38150787]
[-8.72600555 39.11537170]
[-4.00230360 43.19539642]
[-0.60836971 48.27424240]
[1.26971221 53.94659424]
[1.56336260 59.78111267]
[15.63623238 64.97286987]
[29.70910263 70.16462708]
[43.78197098 75.35638428]
[57.85484314 80.54813385]
[71.92771149 85.73989105]
[86.00057983 90.93164825]
[100.31124878 86.43666840]
[108.88806915 74.13064575]
[117.46488953 61.82462692]
[126.04170990 49.51860428]
[134.49729919 37.12897491]
[142.83085632 24.65693092]
[151.16441345 12.18488598]
[154.93681335 -4.34403753]
[171.86408997 -5.29472303]
[177.46354675 10.70784855]
[163.63645935 20.51844025]
[155.30290222 32.99048233]
[146.96934509 45.46252823]
[145.86228943 52.80937958]
[138.34773254 58.09542465]
[129.77090454 70.40144348]
[121.19409180 82.70746613]
[112.61727142 95.01348877]
[114.52648926 109.89148712]
[125.93257141 119.63320923]
[137.33866882 129.37492371]
[148.74475098 139.11665344]
[160.24592590 148.74592590]
[171.84109497 158.26182556]
[181.48634338 142.17936707]
[204.62242126 135.06671143]
[219.59640503 135.94978333]
[234.57038879 136.83283997]
[249.54437256 137.71591187]
[264.51837158 138.59896851]
[273.32180786 135.97021484]
[279.77679443 139.64921570]
[294.73052979 140.82609558]
[307.81451416 131.54226685]
[323.19009399 136.12162781]
[329.06250000 151.05126953]
[320.92687988 164.87847900]
[305.02423096 166.99617004]
[293.55364990 155.77986145]
[278.59988403 154.60298157]
[263.63531494 153.57295227]
[248.66131592 152.68989563]
[233.68733215 151.80682373]
[218.71334839 150.92376709]
[203.73936462 150.04069519]
[200.26899719 156.68949890]
[213.56648254 163.63044739]
[206.62533569 176.92782593]
[193.32826233 169.98710632]
[189.85787964 176.63589478]
[199.14430237 188.41564941]
[208.43070984 200.19540405]
[217.71711731 211.97515869]
[233.35188293 212.27183533]
[245.10408020 222.58784485]
[247.42466736 238.05227661]
[239.21794128 251.36331177]
[224.35887146 256.23587036]
[209.86344910 250.36930847]
[202.57597351 236.53359985]
[205.93736267 221.26156616]
[196.65095520 209.48181152]
[187.36454773 197.70205688]
[178.07812500 185.92231750]
[182.47785950 200.26254272]
[181.23677063 215.21112061]
[174.53244019 228.62945557]
[163.32397461 238.59793091]
[149.21487427 243.69041443]
[134.22361755 243.17840576]
[120.49486542 237.13511658]
[109.99266052 226.42514038]
[104.21947479 212.58062744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 110]
[6 109]
[8 108]
[9 107]
[10 106]
[11 105]
[12 86]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[18 80]
[19 30]
[20 29]
[21 28]
[22 27]
[31 74]
[32 73]
[33 72]
[34 71]
[36 70]
[37 69]
[38 68]
[40 67]
[41 66]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[87 104]
[88 103]
[89 102]
[90 101]
[91 99]
[92 98]
[93 97]
[112 131]
[113 130]
[114 129]
[115 128]
[116 127]
[118 126]
[119 125]
[136 150]
[137 149]
[138 148]
[139 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
