%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUGUCCCCAAACCACACCAUAGUGACAGAAUUCAUUCUCUUAGGACUGACAGACGACCCAGUGCUAGAGAAGAUCCUGUUUGGGGUGUUCCUGGCGA\
) } def
/len { sequence length } bind def

/coor [
[45.30680084 437.55856323]
[35.16991425 449.46560669]
[19.74238205 452.02008057]
[6.30861664 444.01580811]
[1.21163130 429.23220825]
[6.85806608 414.64962769]
[20.58184624 407.15350342]
[23.36506271 392.41397095]
[18.12363625 378.47207642]
[28.28717041 366.34719849]
[31.07038689 351.60766602]
[33.85360336 336.86813354]
[23.77456474 327.96478271]
[19.41881561 315.12643433]
[22.04098892 301.71441650]
[31.05360985 291.29724121]
[44.15444183 286.70126343]
[47.39471054 272.05541992]
[50.63497543 257.40957642]
[53.87524414 242.76373291]
[57.11551285 228.11788940]
[47.67412567 220.17529297]
[42.53952026 208.87644958]
[42.76828003 196.39489746]
[48.37855911 185.16142273]
[58.33435440 177.39077759]
[70.73625183 174.64497375]
[74.88077545 160.22891235]
[79.02530670 145.81285095]
[83.16983032 131.39678955]
[87.31435394 116.98072052]
[79.85904694 106.60396576]
[79.72267914 93.82741547]
[86.95482635 83.29389954]
[98.92740631 78.83115387]
[103.51826477 64.55095673]
[103.17739868 55.24094009]
[108.48033905 49.90199280]
[113.51308441 35.77148056]
[118.54583740 21.64096642]
[123.57859039 7.51045227]
[128.61134338 -6.62006187]
[133.64408875 -20.75057602]
[133.59292603 -30.06669235]
[139.05934143 -35.23813629]
[144.52911377 -49.20529556]
[142.35682678 -64.87666321]
[154.20237732 -73.90616608]
[159.67214966 -87.87332916]
[165.14192200 -101.84049225]
[170.61169434 -115.80764771]
[160.96414185 -127.75838470]
[158.60031128 -142.93428040]
[164.15611267 -157.25311279]
[176.13702393 -166.86317444]
[191.32025146 -169.17941284]
[205.62159729 -163.57876587]
[215.19406128 -151.56777954]
[217.46269226 -136.37736511]
[211.81724548 -122.09365082]
[199.77632141 -112.55888367]
[184.57885742 -110.33787537]
[179.10908508 -96.37071991]
[173.63931274 -82.40355682]
[168.16954041 -68.43639374]
[170.73306274 -53.76405334]
[158.49627686 -43.73552322]
[153.02650452 -29.76836205]
[147.77459717 -15.71782494]
[142.74185181 -1.58731139]
[137.70910645 12.54320240]
[132.67634583 26.67371559]
[127.64360046 40.80422974]
[122.61084747 54.93474579]
[117.79846191 69.14181519]
[113.20760345 83.42201233]
[121.08505249 97.83415985]
[116.30200195 113.54677582]
[101.73042297 121.12524414]
[97.58589172 135.54130554]
[93.44136810 149.95738220]
[89.29684448 164.37344360]
[85.15232086 178.78950500]
[96.69542694 192.57843018]
[97.77841187 210.37327576]
[88.16126251 225.20025635]
[71.76135254 231.35816956]
[68.52108765 246.00399780]
[65.28081512 260.64984131]
[62.04055023 275.29568481]
[58.80028152 289.94152832]
[70.15422821 302.36386108]
[71.91474915 318.93484497]
[63.59082031 333.18038940]
[48.59313202 339.65133667]
[45.80991745 354.39086914]
[43.02669907 369.13040161]
[48.06905365 384.12658691]
[38.10459137 395.19720459]
[35.32137680 409.93673706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[10 97]
[11 96]
[12 95]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[27 83]
[28 82]
[29 81]
[30 80]
[31 79]
[35 76]
[36 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[45 68]
[46 67]
[48 65]
[49 64]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
