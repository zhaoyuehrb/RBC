%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCAGUCUCUGAUCAGGGAAAGCAGGGCACAGCCUUGGGAAGAAUGGAUAAGCAUGGUGUGAAGACCCCCUUGUGGAAGAAGGAAACGGAAGAGCUCCGGGCCGAGGACGCGGAGCAAGAGGAAGGGAAGGAGGGGUCGGAGG\
) } def
/len { sequence length } bind def

/coor [
[115.23293304 173.75335693]
[123.59504700 159.64637756]
[123.27230072 144.64984131]
[122.94956207 129.65332031]
[115.78731537 127.42797089]
[104.77066803 137.60803223]
[101.46281433 122.97727966]
[94.30056000 120.75193787]
[85.53608704 132.92501831]
[76.77161407 145.09811401]
[68.00714111 157.27119446]
[59.24266815 169.44427490]
[58.13795090 185.80616760]
[43.29858017 192.78651428]
[29.99003029 183.20452881]
[31.90299797 166.91732788]
[47.06958389 160.67980957]
[55.83405685 148.50671387]
[64.59852600 136.33363342]
[73.36299896 124.16054535]
[82.12747192 111.98746490]
[78.07884216 105.67409515]
[63.09514236 106.37319946]
[69.98157501 93.04737091]
[65.93294525 86.73400879]
[51.21334457 89.62078094]
[36.49374771 92.50755310]
[21.77415085 95.39432526]
[7.05455351 98.28109741]
[-7.66504383 101.16787720]
[-22.04445839 110.14945221]
[-34.65565109 98.81833649]
[-27.25848770 83.56323242]
[-10.55181694 86.44828033]
[4.16777992 83.56150055]
[18.88737679 80.67472839]
[33.60697556 77.78795624]
[48.32657242 74.90118408]
[63.04616928 72.01441193]
[64.72631073 64.70502472]
[50.10754013 61.34473801]
[35.48881912 57.98422241]
[38.84955978 43.36555481]
[53.46782684 46.72596359]
[68.08660126 50.08625031]
[69.76673889 42.77686691]
[57.78504944 33.75250626]
[45.80335999 24.72814369]
[30.19031334 27.17932701]
[17.46635056 17.80508804]
[15.18037701 2.16699696]
[24.68861771 -10.45714283]
[40.35000229 -12.57765484]
[52.87290955 -2.93647528]
[54.82772064 12.74645329]
[66.80941010 21.77081490]
[78.79109955 30.79517555]
[92.70025635 25.17953491]
[107.65637970 24.03307343]
[122.25893402 27.46315384]
[135.14048767 35.14857101]
[145.09477234 46.36963654]
[151.18962097 60.07557297]
[152.85430908 74.98291016]
[149.93295288 89.69568634]
[142.69956970 102.83554840]
[157.11651611 98.69409180]
[171.53346252 94.55263519]
[185.95040894 90.41117859]
[200.36735535 86.26972961]
[214.78430176 82.12827301]
[226.15888977 72.34978485]
[232.41679382 58.71752167]
[238.67469788 45.08525848]
[237.40023804 29.31546593]
[249.74177551 20.97664833]
[255.99967957 7.34438419]
[246.60006714 -4.73476648]
[243.90199280 -19.80058861]
[248.52546692 -34.39106750]
[259.40805054 -45.15341949]
[274.04898071 -49.61453247]
[289.08389282 -46.74927521]
[301.05789185 -37.21606445]
[307.21942139 -23.20556068]
[306.15261841 -7.93727684]
[298.10260010 5.08024836]
[284.91921997 12.85568237]
[269.63195801 13.60228825]
[263.37405396 27.23455238]
[265.09609985 42.02927399]
[252.30696106 51.34316254]
[246.04905701 64.97542572]
[239.79115295 78.60768890]
[244.17338562 84.69423676]
[257.32009888 102.95386505]
[272.23336792 101.34313965]
[287.14663696 99.73242188]
[302.05990601 98.12170410]
[316.97317505 96.51097870]
[331.88644409 94.90026093]
[337.44348145 80.63920593]
[348.99905396 70.60290527]
[363.89776611 67.09762573]
[378.71600342 70.92887115]
[390.04864502 81.21623230]
[395.29153442 95.59575653]
[393.23989868 110.76313782]
[384.36517334 123.23300934]
[370.70669556 130.13990784]
[355.40313721 129.89665222]
[341.97109985 122.55916595]
[333.49716187 109.81352997]
[318.58389282 111.42424774]
[303.67062378 113.03497314]
[288.75735474 114.64569092]
[273.84408569 116.25640869]
[258.93081665 117.86713409]
[272.79064941 123.60339355]
[278.48483276 137.48057556]
[279.58737183 152.44000244]
[275.98916626 167.00204468]
[268.04614258 179.72636414]
[256.54391479 189.35441589]
[242.62022400 194.93388367]
[227.65220642 195.91290283]
[213.12036133 192.19464111]
[200.46202087 184.14688110]
[190.92922974 172.56561279]
[185.46485901 158.59634399]
[184.60939026 143.62075806]
[188.44744873 129.12008667]
[196.59939575 116.52859497]
[208.25921631 107.09153748]
[218.92575073 96.54521942]
[204.50880432 100.68667603]
[190.09185791 104.82812500]
[175.67491150 108.96958160]
[161.25796509 113.11103821]
[146.84101868 117.25249481]
[137.94609070 129.33058167]
[138.26882935 144.32710266]
[138.59156799 159.32363892]
[147.55285645 173.05780029]
[139.89901733 187.56127930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 143]
[3 142]
[4 141]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[46 57]
[47 56]
[48 55]
[66 140]
[67 139]
[68 138]
[69 137]
[70 136]
[71 135]
[72 94]
[73 93]
[74 92]
[76 90]
[77 89]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
