%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCGCACGUGGGCUCGGCGCGAUGGAGGAGGAGACGCAUACUGACGCCAAAAUCCGUGCUGAAAAUGGAACAGGGUCCAGCCCUCGGGGUCCUGGCUGCAGCCUCCGGCACUUUGCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[-12.71251011 620.58276367]
[-17.88321877 635.11779785]
[-30.10528755 644.53186035]
[-45.47869873 645.82098389]
[-59.09785461 638.57373047]
[-66.61692810 625.10278320]
[-65.63661194 609.70660400]
[-56.46972275 597.29803467]
[-42.04138184 591.83666992]
[-39.02190399 577.14373779]
[-36.00242615 562.45080566]
[-32.98294830 547.75781250]
[-29.96347046 533.06488037]
[-26.94399261 518.37194824]
[-23.92451477 503.67898560]
[-32.30981445 491.42248535]
[-29.45694351 476.47872925]
[-16.54432106 467.76654053]
[-13.52484226 453.07360840]
[-18.54177856 439.04934692]
[-8.18490696 427.08917236]
[-5.16542912 412.39620972]
[-7.06611681 407.90124512]
[-6.08102703 402.15747070]
[-1.60291588 397.04415894]
[2.15687203 382.52301025]
[5.91665983 368.00186157]
[9.67644787 353.48071289]
[13.43623638 338.95953369]
[17.19602394 324.43838501]
[6.53715992 316.80371094]
[-0.88191730 305.95474243]
[-4.14636707 293.19024658]
[-2.84033012 280.04754639]
[2.90023446 268.11724854]
[12.40133667 258.85079956]
[24.53001976 253.38391113]
[37.82943726 252.39736938]
[42.31988144 238.08528137]
[33.64117432 229.41490173]
[29.49044991 217.79364014]
[30.72705650 205.44250488]
[37.17434311 194.75042725]
[47.64180374 187.81224060]
[60.14448547 186.01826477]
[65.35406494 171.95198059]
[70.56364441 157.88569641]
[67.72822571 143.26345825]
[79.77676392 133.00952148]
[84.98634338 118.94324493]
[76.25059509 112.48461914]
[70.57636261 101.98479462]
[69.79111481 88.99774933]
[74.91069031 75.87043762]
[85.81470490 65.31980133]
[86.57444763 50.33905411]
[87.33418274 35.35830688]
[88.09391785 20.37755966]
[88.85366058 5.39681244]
[77.27664948 -5.11541653]
[75.21651459 -20.61670113]
[83.64598083 -33.78781128]
[98.58491516 -38.40974808]
[112.97960663 -32.30017853]
[120.03332520 -18.34385109]
[116.41551971 -3.13051796]
[103.83440399 6.15654993]
[103.07466888 21.13729668]
[102.31492615 36.11804581]
[101.55519104 51.09879303]
[100.79545593 66.07953644]
[107.44315338 69.55201721]
[120.73855591 76.49696350]
[127.38625336 79.96943665]
[139.24789429 70.78784943]
[151.10952759 61.60625839]
[162.97116089 52.42467117]
[174.83279419 43.24308014]
[183.65699768 28.76655388]
[200.01055908 33.23839951]
[200.24058533 50.19078827]
[184.01438904 55.10471725]
[172.15275574 64.28630829]
[160.29112244 73.46789551]
[148.42947388 82.64948273]
[136.56784058 91.83107758]
[123.66947937 119.73944092]
[99.05262756 124.15282440]
[93.84304810 138.21910095]
[96.30584717 153.84745789]
[84.62992859 163.09527588]
[79.42034912 177.16156006]
[74.21076965 191.22784424]
[84.69908905 205.90110779]
[84.37137604 223.77870178]
[73.54262543 237.81106567]
[56.63197327 242.57572937]
[52.14152527 256.88781738]
[64.83997345 268.29989624]
[71.30516815 284.04208374]
[70.29946136 300.97546387]
[62.06976318 315.74588013]
[48.28921127 325.44830322]
[31.71718025 328.19818115]
[27.95739365 342.71932983]
[24.19760513 357.24047852]
[20.43781662 371.76165771]
[16.67802811 386.28280640]
[12.91824055 400.80395508]
[9.52752018 415.41571045]
[6.50804186 430.10864258]
[11.30900478 445.18383789]
[1.16810679 456.09307861]
[-1.85137105 470.78601074]
[6.57908821 483.88430786]
[3.30760193 498.74203491]
[-9.23156643 506.69845581]
[-12.25104427 521.39141846]
[-15.27052212 536.08435059]
[-18.28999901 550.77734375]
[-21.30947685 565.47027588]
[-24.32895470 580.16320801]
[-27.34843254 594.85614014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[18 114]
[19 113]
[21 111]
[22 110]
[25 109]
[26 108]
[27 107]
[28 106]
[29 105]
[30 104]
[38 98]
[39 97]
[45 93]
[46 92]
[47 91]
[49 89]
[50 88]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[74 86]
[75 85]
[76 84]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
