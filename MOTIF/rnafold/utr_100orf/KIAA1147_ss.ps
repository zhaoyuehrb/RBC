%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGAGCAGGGAGACGCGGCGCCGCUGCUGCGCUGGGCCGAGGGCCCCGCCGUCUCCCUGCCGCAGGCCCCGCAGCCGCAGGCGGGAGGCUGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[251.80950928 243.03668213]
[248.87487793 241.87278748]
[246.17996216 239.64216614]
[244.09086609 236.41265869]
[242.94824219 232.37181091]
[231.47424316 222.71014404]
[216.70225525 224.23457336]
[204.92835999 214.59973145]
[203.42956543 199.09516907]
[191.95558167 189.43351746]
[180.48159790 179.77185059]
[169.00761414 170.11019897]
[157.53361511 160.44854736]
[146.05963135 150.78688049]
[134.58564758 141.12522888]
[123.11165619 131.46357727]
[111.63766479 121.80191803]
[100.16368103 112.14025879]
[86.28327179 106.45393372]
[71.32860565 105.28868103]
[56.37393188 104.12342072]
[41.41926193 102.95816040]
[26.46459007 101.79290771]
[14.61933231 112.25547791]
[-1.14929676 111.19439697]
[-11.48604774 99.23918152]
[-10.25830936 83.48265076]
[1.80552197 73.27287292]
[17.54818916 74.66712952]
[27.62984848 86.83823395]
[42.58451843 88.00349426]
[57.53918839 89.16874695]
[72.49385834 90.33400726]
[87.44853210 91.49926758]
[96.18964386 79.30939484]
[90.28813934 65.51910400]
[77.74538422 55.87598419]
[79.85135651 41.13101578]
[73.94985199 27.34071922]
[68.04834747 13.55042267]
[62.14684296 -0.23987277]
[56.24533844 -14.03016853]
[44.45497131 -26.21308899]
[52.89788055 -40.91525269]
[69.36270905 -36.87226105]
[70.03563690 -19.93167305]
[75.93714142 -6.14137650]
[81.83864594 7.64891911]
[87.74015045 21.43921471]
[93.64164734 35.22951126]
[105.76229858 43.88625336]
[104.07843781 59.61759567]
[109.97994232 73.40789032]
[116.08083344 89.64660645]
[109.82534027 100.66627502]
[121.29932404 110.32792664]
[132.77331543 119.98958588]
[144.24729919 129.65124512]
[155.72128296 139.31289673]
[167.19528198 148.97454834]
[178.66926575 158.63621521]
[190.14324951 168.29786682]
[201.61723328 177.95951843]
[213.09123230 187.62118530]
[228.62461853 186.45854187]
[240.12322998 196.42028809]
[241.13591003 211.23616028]
[252.60989380 220.89781189]
[264.79977417 229.63893127]
[277.63183594 237.40667725]
[290.46389771 245.17442322]
[303.29598999 252.94216919]
[316.12805176 260.70989990]
[328.96014404 268.47766113]
[341.91146851 276.04489136]
[354.97891235 283.40982056]
[370.02682495 279.38516235]
[383.17416382 287.04040527]
[386.91830444 301.41110229]
[399.98574829 308.77600098]
[414.55938721 303.10656738]
[429.35101318 308.18023682]
[437.37646484 321.60134888]
[434.84634399 337.03289795]
[422.95532227 347.18853760]
[407.31796265 347.27313232]
[395.31774902 337.24670410]
[392.62081909 321.84344482]
[379.55337524 314.47854614]
[365.32077026 318.71740723]
[351.96359253 311.43447876]
[347.61398315 296.47726440]
[334.54653931 289.11233521]
[327.04180908 288.56072998]
[321.19238281 281.30972290]
[308.36032104 273.54199219]
[295.52822876 265.77423096]
[282.69616699 258.00650024]
[269.86410522 250.23875427]
[257.03201294 242.47100830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 68]
[6 67]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[35 53]
[36 52]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[74 95]
[75 93]
[76 92]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
