%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCGCAGAGGGCGGGCUGGCUGCGGGGCGACCGCGCGCCGGGGCCAUGCCGCGCUCCUUCCUGGUGGACUCGCUAGUGCUGCGCGAGGCGGGCGAGAAGAAGGCGCCCGAGGGCAGCCCGCCGCCGCUCUUCCCCUACGCUGUGC\
) } def
/len { sequence length } bind def

/coor [
[96.66860962 347.31933594]
[94.46276855 332.48242188]
[92.25691986 317.64550781]
[90.05107880 302.80856323]
[87.84523010 287.97164917]
[74.57549286 281.25958252]
[67.72151184 267.86230469]
[70.09836578 252.82221985]
[81.00155640 241.93981934]
[78.79570770 227.10289001]
[76.58986664 212.26597595]
[74.38401794 197.42904663]
[72.02188873 182.61621094]
[69.50372314 167.82908630]
[66.98556519 153.04197693]
[64.46739960 138.25485229]
[61.94924164 123.46773529]
[50.04092407 114.34677124]
[35.10839081 115.76784515]
[20.19166756 117.34625244]
[5.29241276 119.08183289]
[-9.60684109 120.81740570]
[-24.50609589 122.55298615]
[-39.40534973 124.28855896]
[-52.21759033 133.57064819]
[-65.75462341 127.35791779]
[-80.65387726 129.09349060]
[-95.55313110 130.82907104]
[-108.36537170 140.11116028]
[-121.90241241 133.89843750]
[-136.80166626 135.63400269]
[-151.70091248 137.36958313]
[-164.52876282 147.58615112]
[-179.68940735 141.33419800]
[-181.58686829 125.04519653]
[-168.26921082 115.47587585]
[-153.43649292 122.47032928]
[-138.53724670 120.73475647]
[-123.63798523 118.99917603]
[-111.89144135 109.84123230]
[-97.28871155 115.92981720]
[-82.38945770 114.19424438]
[-67.49020386 112.45866394]
[-55.74365616 103.30072021]
[-41.14092636 109.38930511]
[-26.24167252 107.65373230]
[-11.34241772 105.91815186]
[3.55683661 104.18257904]
[18.45609093 102.44699860]
[24.77889252 98.52243805]
[33.68732071 100.83531189]
[48.61985397 99.41423798]
[57.74081802 87.50592041]
[55.22265625 72.71880341]
[52.70449448 57.93168640]
[50.18633270 43.14456558]
[47.66817093 28.35744858]
[35.11707687 25.01341629]
[24.81478500 17.18018341]
[18.28460884 6.06073332]
[16.47506142 -6.65948343]
[19.62222481 -19.06799507]
[27.21963882 -29.31284332]
[38.09942245 -35.87897873]
[36.20687485 -50.75910568]
[34.31432343 -65.63923645]
[32.42177582 -80.51936340]
[30.52922630 -95.39949799]
[28.63667870 -110.27962494]
[18.28544426 -122.99906158]
[24.37722969 -138.22476196]
[40.64532471 -140.29385376]
[50.35451126 -127.07780457]
[43.51680756 -112.17217255]
[45.40935516 -97.29204559]
[47.30190659 -82.41191864]
[49.19445419 -67.53178406]
[51.08700180 -52.65165710]
[52.97955322 -37.77152634]
[69.04517365 -31.73720741]
[79.92915344 -18.35422134]
[82.58988190 -1.22092748]
[76.21244812 14.99749088]
[62.45529175 25.83928871]
[64.97344971 40.62640762]
[67.49161530 55.41352463]
[70.00977325 70.20064545]
[72.52793121 84.98776245]
[83.44374847 75.14431763]
[97.03415680 71.73154449]
[109.97162628 74.92789459]
[119.38282776 83.36729431]
[133.13276672 77.37236786]
[146.88270569 71.37743378]
[160.63264465 65.38250732]
[174.38258362 59.38757706]
[188.13252258 53.39264679]
[190.48959351 38.14640808]
[200.73231506 26.60993958]
[215.59228516 22.46448517]
[230.32774353 27.03284454]
[240.23664856 38.85727310]
[242.15710449 54.16463470]
[235.47631836 68.07041168]
[222.32609558 76.13731384]
[206.90260315 75.79122925]
[194.12745667 67.14258575]
[180.37751770 73.13751984]
[166.62757874 79.13244629]
[152.87763977 85.12737274]
[139.12770081 91.12230682]
[125.37776184 97.11723328]
[125.47145081 98.11689758]
[125.52577972 99.11946869]
[140.00782776 103.02719879]
[154.48986816 106.93493652]
[171.35723877 105.22372437]
[177.67092896 120.95819855]
[164.29916382 131.38088989]
[150.58213806 121.41698456]
[136.10008240 117.50924683]
[121.61804962 113.60150909]
[102.43450928 128.31916809]
[76.73635864 120.94957733]
[79.25451660 135.73669434]
[81.77268219 150.52381897]
[84.29084015 165.31092834]
[86.80900574 180.09805298]
[91.36280060 188.09632874]
[89.22093964 195.22320557]
[91.42678833 210.06013489]
[93.63262939 224.89704895]
[95.83847809 239.73397827]
[109.43594360 246.97380066]
[116.08538055 260.67190552]
[113.42531586 275.48367310]
[102.68215179 285.76580811]
[104.88800049 300.60272217]
[107.09384155 315.43963623]
[109.29969025 330.27658081]
[111.50553131 345.11349487]
[125.32564545 352.16928101]
[132.32902527 366.01602173]
[129.82275391 381.32934570]
[118.77051544 392.22100830]
[103.42214203 394.50286865]
[89.67938232 387.29757690]
[82.82662201 373.37567139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[4 138]
[5 137]
[9 133]
[10 132]
[11 131]
[12 130]
[13 128]
[14 127]
[15 126]
[16 125]
[17 124]
[18 52]
[19 51]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[26 43]
[27 42]
[28 41]
[30 39]
[31 38]
[32 37]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
