%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAGCUGAGAGGGCCCGCGGGUAGGCAUGGCGGCGCACCUUAAGAAGCGGGUUUAUGAGGAAUUCACGAAAGUGGUUCAGCCACAGGAGGAAAUUGCUACUAAGAAACUCCGACUAACAAAACCAA\
) } def
/len { sequence length } bind def

/coor [
[49.82924652 99.58605194]
[35.01678848 97.22149658]
[20.17663765 95.03748322]
[5.31099367 93.03432465]
[-9.55465031 91.03117371]
[-26.35984039 98.44074249]
[-39.86169052 87.29995728]
[-54.77170563 85.65939331]
[-63.90481186 97.92860413]
[-77.86074066 103.93933105]
[-92.85185242 102.16928101]
[-104.86381531 93.19327545]
[-110.73059082 79.50216675]
[-125.64060211 77.86159515]
[-140.55061340 76.22102356]
[-155.46063232 74.58045959]
[-170.37065125 72.93988800]
[-185.28065491 71.29932404]
[-200.19067383 69.65875244]
[-215.10069275 68.01818848]
[-230.09068298 67.47035217]
[-245.08067322 68.01818848]
[-260.07067871 68.56601715]
[-275.06066895 69.11384583]
[-285.78848267 80.40773773]
[-300.99826050 80.74977875]
[-311.69912720 70.45285034]
[-326.68914795 71.00067902]
[-337.26391602 82.74587250]
[-353.05068970 83.49002075]
[-364.68341064 72.79164886]
[-365.26062012 56.99790573]
[-354.43984985 45.47893524]
[-338.64089966 45.06874466]
[-327.23696899 56.01068878]
[-312.24697876 55.46286011]
[-302.32626343 44.41228867]
[-287.13208008 43.64317322]
[-275.60848999 54.12385559]
[-260.61849976 53.57602310]
[-245.62850952 53.02819443]
[-230.63851929 52.48036194]
[-240.34657288 41.04561615]
[-239.35002136 26.07875633]
[-228.21162415 16.03206062]
[-213.22160339 16.57922554]
[-202.84532166 27.41124916]
[-202.94259644 42.41093445]
[-213.46012878 53.10817337]
[-198.55010986 54.74874115]
[-183.64009094 56.38930893]
[-168.73007202 58.02987671]
[-153.82006836 59.67044449]
[-138.91004944 61.31101227]
[-124.00003815 62.95158005]
[-109.09001923 64.59214783]
[-100.38674164 52.50419998]
[-86.71050262 46.35469818]
[-71.69317627 47.88651657]
[-59.37804413 56.78787994]
[-53.13113785 70.74937439]
[-38.22112274 72.38994598]
[-28.52784348 65.04579926]
[-16.03319550 66.35890961]
[-7.55149460 76.16552734]
[7.31414938 78.16868591]
[22.17979240 80.17183685]
[29.30236244 77.92401123]
[37.38134384 82.40904236]
[52.19380188 84.77359772]
[64.16221619 64.88690948]
[83.80029297 52.51478577]
[106.90528107 50.30500031]
[128.53247070 58.73046494]
[138.81130981 47.80594254]
[149.09016418 36.88142014]
[159.36901855 25.95689964]
[169.64787292 15.03237820]
[176.09819031 -0.64658093]
[192.95004272 1.21128726]
[195.82983398 17.91886520]
[180.57240295 25.31123161]
[170.29354858 36.23575211]
[160.01469421 47.16027451]
[149.73583984 58.08479691]
[139.45698547 69.00931549]
[147.67895508 84.37969208]
[150.14579773 101.63552856]
[164.89628601 104.36008453]
[179.64677429 107.08463287]
[194.39724731 109.80918884]
[204.40159607 98.23937988]
[218.75904846 93.26340485]
[233.58094788 96.12301636]
[244.90567017 105.95189667]
[249.75740051 120.03472900]
[264.50790405 122.75927734]
[279.25836182 125.48383331]
[294.52420044 119.49332428]
[307.17462158 129.92881775]
[304.19592285 146.05517578]
[288.65237427 151.28297424]
[276.53381348 140.23431396]
[261.78332520 137.50976562]
[247.03285217 134.78521729]
[237.47042847 146.20561218]
[223.38179016 151.34040833]
[208.51634216 148.71649170]
[196.88381958 138.93992615]
[191.67269897 124.55967712]
[176.92221069 121.83512115]
[162.17173767 119.11056519]
[147.42124939 116.38601685]
[144.06861877 123.98400879]
[139.50859070 130.92488098]
[133.86607361 137.01844788]
[127.29567719 142.09776306]
[119.97742462 146.02366638]
[112.11181641 148.68859863]
[103.91436768 150.01953125]
[95.60967255 149.98001099]
[87.42526245 148.57110596]
[79.58538055 145.83142090]
[72.30483246 141.83602905]
[65.78308868 136.69439697]
[60.19883347 130.54739380]
[55.70507050 123.56343079]
[52.42492294 115.93386841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 67]
[4 66]
[5 65]
[7 62]
[8 61]
[13 56]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 42]
[22 41]
[23 40]
[24 39]
[27 36]
[28 35]
[74 86]
[75 85]
[76 84]
[77 83]
[78 82]
[88 113]
[89 112]
[90 111]
[91 110]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
