%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAACCAAGCCAACAGAGCCUGUCACGAUCCUCAGCCUUCGGAAAUUGAGCCUGGGGACCGCAGAGCCACAGGUUAAAGAGCCAAAGACGUUCACCG\
) } def
/len { sequence length } bind def

/coor [
[97.12667084 142.73901367]
[89.67107391 143.55389404]
[82.10383606 156.50521851]
[74.53659058 169.45654297]
[66.96934509 182.40786743]
[71.22252655 197.62910461]
[63.39424896 211.35841370]
[48.12889481 215.45042419]
[34.48313141 207.47743225]
[30.55274200 192.16966248]
[38.66955948 178.60896301]
[54.01802063 174.84063721]
[61.58526230 161.88931274]
[69.15250397 148.93797302]
[76.71974945 135.98664856]
[65.04228210 121.30269623]
[61.17327881 103.81680298]
[65.17481232 87.23593140]
[75.51419830 74.75735474]
[89.51482391 68.45265198]
[88.11713409 53.51791382]
[86.71944427 38.58317184]
[85.32175446 23.64843178]
[83.92406464 8.71369171]
[82.52638245 -6.22104883]
[81.12869263 -21.15578842]
[63.27079010 -33.37791061]
[59.83047485 -54.46739578]
[72.55085754 -71.29768372]
[68.85667419 -85.83567047]
[57.95899963 -97.30524445]
[62.32352448 -111.54604340]
[58.62934113 -126.08402252]
[54.93515778 -140.62200928]
[51.24097443 -155.15998840]
[47.54679108 -169.69798279]
[43.85260773 -184.23596191]
[40.15842438 -198.77395630]
[29.26074791 -210.24353027]
[33.62527466 -224.48432922]
[29.93108940 -239.02230835]
[26.23690605 -253.56028748]
[11.77441120 -259.18310547]
[3.40733790 -272.25106812]
[4.35299683 -287.73928833]
[14.24776363 -299.69226074]
[29.28689766 -303.51376343]
[43.68754578 -297.73440552]
[51.91236496 -284.57644653]
[50.79874039 -269.09939575]
[40.77489090 -257.25448608]
[44.46907425 -242.71649170]
[48.16325760 -228.17851257]
[58.79669952 -217.74877930]
[54.69640732 -202.46813965]
[58.39059067 -187.93014526]
[62.08477402 -173.39216614]
[65.77896118 -158.85417175]
[69.47314453 -144.31619263]
[73.16732788 -129.77821350]
[76.86151123 -115.24022675]
[87.49494934 -104.81050110]
[83.39466095 -89.52985382]
[87.08884430 -74.99186707]
[96.01080322 -73.24227142]
[103.86618042 -68.57760620]
[109.72884369 -61.51343536]
[112.89611816 -52.85012436]
[112.97289276 -43.58222961]
[109.92070007 -34.78434372]
[104.06555176 -27.48647118]
[96.06343079 -22.55347824]
[97.46112061 -7.61873770]
[98.85881042 7.31600237]
[100.25650024 22.25074196]
[101.65418243 37.18548203]
[103.05187225 52.12022400]
[104.44956207 67.05496216]
[122.63912964 72.46340179]
[136.01327515 87.71104431]
[139.43649292 109.02636719]
[130.50434875 130.10804749]
[140.69064331 141.11891174]
[150.87693787 152.12979126]
[161.06323242 163.14067078]
[176.67271423 162.20367432]
[189.20170593 171.56094360]
[192.73439026 186.79426575]
[185.60275269 200.71093750]
[171.17411804 206.73991394]
[156.26126099 202.03453064]
[147.90557861 188.81649780]
[150.05235291 173.32696533]
[139.86605835 162.31608582]
[129.67976379 151.30520630]
[119.49346924 140.29432678]
[112.03787231 141.10922241]
[120.90481567 153.20787048]
[114.86045074 166.93615723]
[99.94921875 168.56561279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[29 64]
[30 63]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[40 53]
[41 52]
[42 51]
[82 96]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
