%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUGGCCUGUAGAUUCACCUCCCCUGGGCAGGGCCCCAGGACCCAGGAUAAUAUCUGUGCCUCCUGCCCAGAACCCUCCAAGCAGACACAAUGGUAAGAAUGGUGCCUGUCCUGCUGUCUCUGCUGCUGCUUCUGGGUCCUGCUGUCCCCCAGGAGAACCAAGAUGGUCGUUACUCUCUGACCUAUAUCU\
) } def
/len { sequence length } bind def

/coor [
[168.62258911 563.46557617]
[161.53472900 576.68530273]
[151.32600403 587.67541504]
[138.66387939 595.71722412]
[124.37627411 600.28497314]
[109.39736176 601.07995605]
[94.70651245 598.05029297]
[81.26428223 591.39398193]
[69.94956970 581.54626465]
[61.50217438 569.15106201]
[56.47442627 555.01873779]
[55.19505310 540.07342529]
[57.74770355 525.29217529]
[63.96548080 511.64160156]
[73.44184113 500.01409912]
[85.55718231 491.16998291]
[99.51935577 485.68746948]
[114.41546631 483.92507935]
[129.27153015 485.99804688]
[143.11622620 491.77078247]
[155.04432678 500.86584473]
[164.27403259 512.68542480]
[161.36264038 497.97070312]
[151.30221558 486.98721313]
[156.21386719 471.94772339]
[153.30247498 457.23297119]
[150.39109802 442.51821899]
[147.47970581 427.80346680]
[144.56831360 413.08871460]
[141.65693665 398.37396240]
[138.24502563 395.01245117]
[136.91807556 389.46685791]
[138.89848328 383.13327026]
[136.46759033 368.33157349]
[134.03671265 353.52984619]
[131.60581970 338.72814941]
[119.39406586 330.27777100]
[116.71794891 315.30136108]
[125.66426849 302.54983521]
[123.23338318 287.74813843]
[120.80249786 272.94641113]
[118.37161255 258.14468384]
[115.94072723 243.34297180]
[113.50984955 228.54125977]
[111.07896423 213.73954773]
[108.64807892 198.93782043]
[106.21719360 184.13610840]
[103.78630829 169.33439636]
[101.35542297 154.53268433]
[98.92453766 139.73095703]
[84.57501984 138.12046814]
[71.28179932 131.32977295]
[60.90819931 119.92749023]
[55.03828430 105.14749908]
[54.74216843 88.75920868]
[60.39926529 72.85636139]
[47.57470703 65.07621002]
[34.75014877 57.29606247]
[21.92559242 49.51591492]
[6.11369514 48.97325134]
[-0.75459039 35.75674820]
[-13.57914829 27.97659874]
[-29.44121552 30.37958908]
[-41.11138535 19.37110710]
[-39.63730240 3.39591908]
[-26.14975929 -5.29117823]
[-10.99524021 -0.02618754]
[-5.79899883 15.15204144]
[7.02555895 22.93218994]
[21.92015839 22.91836548]
[29.70574188 36.69135666]
[42.53030014 44.47150421]
[55.35485840 52.25165558]
[68.17941284 60.03180313]
[75.15990448 57.28903961]
[67.63529968 44.31289673]
[57.04561996 33.68939972]
[60.11815262 19.00745392]
[74.07905579 13.52173042]
[86.32460785 22.18466949]
[85.79945374 37.17586517]
[89.12088776 51.80351257]
[96.10137939 49.06074905]
[100.19941711 34.63140106]
[104.29745483 20.20205307]
[108.39548492 5.77270555]
[112.49352264 -8.65664291]
[116.59156036 -23.08599091]
[112.91885376 -38.47500610]
[123.83892822 -48.60424042]
[127.93696594 -63.03358841]
[132.03500366 -77.46293640]
[123.23692322 -92.57450867]
[127.98921204 -109.05143738]
[142.88534546 -116.84337616]
[146.74797058 -131.33750916]
[139.08769226 -144.90063477]
[143.21142578 -159.54472351]
[156.18899536 -166.76403809]
[160.05162048 -181.25817871]
[150.16589355 -193.21861267]
[149.23193359 -208.70755005]
[157.60887146 -221.76919556]
[172.07560730 -227.38105774]
[187.06939697 -223.38528442]
[196.82479858 -211.31831360]
[197.59066772 -195.82014465]
[189.07252502 -182.85014343]
[174.54576111 -177.39555359]
[170.68313599 -162.90141296]
[178.34690857 -150.18125916]
[174.63612366 -135.42712402]
[161.24211121 -127.47488403]
[157.37948608 -112.98074341]
[165.33755493 -102.83552551]
[166.00454712 -89.76380157]
[158.91267395 -78.53194427]
[146.46435547 -73.36489868]
[142.36631775 -58.93555069]
[138.26828003 -44.50620270]
[142.23410034 -30.14927101]
[131.02090454 -18.98795319]
[126.92287445 -4.55860567]
[122.82483673 9.87074280]
[118.72679901 24.30009079]
[114.62876129 38.72943878]
[110.53072357 53.15878677]
[128.18867493 62.85130692]
[139.85104370 78.55362701]
[143.78317261 97.11765289]
[139.74247742 115.06069183]
[128.93814087 129.21786499]
[113.72625732 137.30007935]
[116.15714264 152.10179138]
[118.58802795 166.90350342]
[121.01891327 181.70523071]
[123.44979095 196.50694275]
[125.88067627 211.30865479]
[128.31156921 226.11038208]
[130.74244690 240.91209412]
[133.17332458 255.71380615]
[135.60421753 270.51553345]
[138.03509521 285.31723022]
[140.46598816 300.11895752]
[153.02075195 309.33935547]
[155.27514648 324.38504028]
[146.40754700 336.29724121]
[148.83842468 351.09896851]
[151.26930237 365.90069580]
[153.70019531 380.70239258]
[156.37168884 395.46258545]
[159.28306580 410.17733765]
[162.19445801 424.89208984]
[165.10583496 439.60684204]
[168.01722717 454.32159424]
[170.92861938 469.03631592]
[181.19728088 481.07232666]
[176.07739258 495.05929565]
[178.98876953 509.77404785]
[182.59463501 512.61706543]
[185.01890564 516.15203857]
[186.18214417 519.96093750]
[186.13925171 523.64117432]
[185.06307983 526.84637451]
[192.10035706 540.09313965]
[199.13764954 553.33990479]
[206.17492676 566.58666992]
[213.53352356 579.65765381]
[221.20903015 592.54510498]
[228.88455200 605.43255615]
[236.56005859 618.32000732]
[244.23558044 631.20745850]
[259.69992065 632.48577881]
[271.43743896 642.63519287]
[274.93481445 657.75299072]
[268.84729004 672.02612305]
[255.51557922 679.96618652]
[240.06602478 678.52020264]
[228.43930054 668.24407959]
[225.10610962 653.08917236]
[231.34812927 638.88299561]
[223.67260742 625.99554443]
[215.99710083 613.10809326]
[208.32157898 600.22064209]
[200.64605713 587.33319092]
[197.32078552 586.11828613]
[194.42306519 583.22393799]
[192.73970032 578.87072754]
[192.92816162 573.62390137]
[185.89088440 560.37719727]
[178.85360718 547.13043213]
[171.81631470 533.88366699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 159]
[23 158]
[25 156]
[26 155]
[27 154]
[28 153]
[29 152]
[30 151]
[33 150]
[34 149]
[35 148]
[36 147]
[39 144]
[40 143]
[41 142]
[42 141]
[43 140]
[44 139]
[45 138]
[46 137]
[47 136]
[48 135]
[49 134]
[50 133]
[56 74]
[57 73]
[58 72]
[59 71]
[61 69]
[62 68]
[83 127]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[90 120]
[91 119]
[92 118]
[95 114]
[96 113]
[99 110]
[100 109]
[164 192]
[165 191]
[166 190]
[167 189]
[168 185]
[169 184]
[170 183]
[171 182]
[172 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
