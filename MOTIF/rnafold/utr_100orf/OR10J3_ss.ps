%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCAAAGCUAAAUUCCACUUUUGUGACUGAGUUCCUCUUUGAAGGUUUCUCCAGCUUCAGGCGGCAGCACAAACUUGUCUUCUUUGUUGUCUUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[199.92967224 189.36457825]
[210.96624756 179.20613098]
[225.55825806 175.72790527]
[212.49081421 168.36299133]
[199.42337036 160.99807739]
[181.99211121 162.20336914]
[172.60264587 146.45899963]
[159.31248474 139.50404358]
[146.02230835 132.54908752]
[132.73213196 125.59413910]
[119.44196320 118.63918304]
[113.65334320 123.21627808]
[106.83972931 126.05047607]
[99.51264191 126.92901611]
[92.22214508 125.78593445]
[85.51554871 122.70704651]
[79.89633179 117.92350006]
[75.78633881 111.79439545]
[61.00530624 114.34804535]
[46.22427368 116.90170288]
[33.97867203 127.80937195]
[18.49666214 122.40201569]
[15.70481396 106.24226379]
[28.47513771 95.95388031]
[43.67061996 102.12067413]
[58.45165253 99.56701660]
[73.23268127 97.01336670]
[74.06614685 92.73056793]
[75.58020020 88.63854218]
[77.73510742 84.84467316]
[80.47431946 81.44853210]
[72.90707397 68.49720764]
[65.33982849 55.54587936]
[48.41205215 51.48468399]
[39.75205612 36.77132034]
[44.23886871 20.64655876]
[36.27250290 7.93683815]
[28.30613518 -4.77288198]
[12.84790421 -8.06205082]
[4.31327581 -21.36376762]
[7.76569414 -36.78635788]
[21.15690041 -45.17987823]
[36.54212952 -41.56459427]
[44.79359818 -28.08539581]
[41.01585770 -12.73924923]
[48.98222351 -0.02952862]
[56.94858932 12.68019199]
[69.88719177 13.80915546]
[79.92683411 22.35365868]
[83.20581818 35.32474136]
[78.29116058 47.97863770]
[85.85839844 60.92996216]
[93.42564392 73.88128662]
[118.59537506 80.51612854]
[126.39691925 105.34901428]
[139.68708801 112.30397034]
[152.97726440 119.25891876]
[166.26742554 126.21387482]
[179.55760193 133.16882324]
[192.19561768 130.06439209]
[203.17300415 136.27098083]
[206.78826904 147.93063354]
[219.85571289 155.29554749]
[232.92315674 162.66046143]
[246.97369385 167.91235352]
[261.66815186 170.92446899]
[276.36260986 173.93656921]
[291.05709839 176.94866943]
[305.75155640 179.96078491]
[320.44601440 182.97288513]
[335.14047241 185.98498535]
[343.32894897 173.20558167]
[355.58322144 164.25030518]
[370.24603271 160.33029175]
[385.33435059 161.97569275]
[398.80758667 168.96397400]
[408.84359741 180.35005188]
[414.08514404 194.59402466]
[413.82327271 209.76953125]
[408.09344482 223.82418823]
[397.67059326 234.85723877]
[383.96426392 241.37655640]
[368.82818604 242.50042725]
[354.30935669 238.07688904]
[342.37130737 228.70417786]
[334.62860107 215.64987183]
[332.12835693 200.67945862]
[317.43389893 197.66734314]
[302.73944092 194.65524292]
[288.04498291 191.64314270]
[273.35052490 188.63102722]
[258.65606689 185.61892700]
[243.96159363 182.60681152]
[252.69419861 194.80278015]
[254.36207581 209.70976257]
[248.54075623 223.53410339]
[236.71173096 232.75765991]
[221.88531494 235.03312683]
[207.83470154 229.78143311]
[198.13562012 218.33906555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[18 27]
[19 26]
[20 25]
[31 53]
[32 52]
[33 51]
[36 47]
[37 46]
[38 45]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
