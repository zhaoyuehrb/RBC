%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCAGUUGCUUGCUGGUCUCCGUGAAGUCCAGGUCUUCUACCCCAAGAUGAAUUUGGACGGCACUUCAGGUGGUUUCCCAGCUGAAGAGGAUCAUCAUAAUGAAGAAAGACAAACAAAGAAUAAAAGAAAAACAAAACACCGACAUA\
) } def
/len { sequence length } bind def

/coor [
[293.20977783 282.81466675]
[281.79855347 273.07897949]
[270.38732910 263.34326172]
[255.60577393 264.77206421]
[243.89448547 255.06121826]
[242.49606323 239.54728699]
[231.08483887 229.81158447]
[219.67361450 220.07586670]
[208.26239014 210.34016418]
[203.45195007 209.82803345]
[198.93174744 206.24423218]
[196.58656311 199.94546509]
[185.59590149 189.73736572]
[171.00494385 186.74513245]
[166.15896606 171.68435669]
[155.16831970 161.47624207]
[144.17765808 151.26814270]
[133.18701172 141.06002808]
[122.19635010 130.85191345]
[111.20569611 120.64380646]
[92.69319916 124.69550323]
[75.38663483 113.38731384]
[70.95388031 91.43260193]
[56.55744171 87.22041321]
[42.16100693 83.00821686]
[28.41651917 90.33807373]
[13.87648773 85.86122894]
[6.97328949 72.71279144]
[-7.42314863 68.50060272]
[-21.81958771 64.28840637]
[-36.21602631 60.07621384]
[-50.61246490 55.86402130]
[-65.00890350 51.65182877]
[-79.40534210 47.43963623]
[-93.84538269 43.37944412]
[-108.32742310 39.47170639]
[-123.66676331 43.34667206]
[-133.93887329 32.56088638]
[-148.42091370 28.65315056]
[-162.90295410 24.74541283]
[-176.47708130 32.83977890]
[-191.77832031 28.88406563]
[-199.72871399 15.22512531]
[-195.61145020 -0.03343495]
[-181.86921692 -7.83898115]
[-166.65502930 -3.56062126]
[-158.99522400 10.26336956]
[-144.51316833 14.17110634]
[-130.03112793 18.07884407]
[-115.72764587 13.92437172]
[-104.41968536 24.98966217]
[-89.93764496 28.89739990]
[-82.61080170 27.59454727]
[-75.19314575 33.04319763]
[-60.79670715 37.25539017]
[-46.40026855 41.46758270]
[-32.00383377 45.67977524]
[-17.60739326 49.89196777]
[-3.21095562 54.10416031]
[11.18548203 58.31635284]
[24.08733368 50.96258926]
[38.74737167 55.02927017]
[46.37319946 68.61177826]
[60.76963806 72.82397461]
[75.16607666 77.03616333]
[87.53840637 68.55528259]
[88.80197906 53.60859680]
[90.06555176 38.66191101]
[91.32912445 23.71522713]
[92.59269714 8.76854324]
[86.04539490 -5.63435459]
[94.82731628 -17.66461372]
[96.09088898 -32.61129761]
[97.35446167 -47.55798340]
[89.89446259 -62.16210938]
[99.03787994 -75.77571106]
[115.37873840 -74.39427185]
[122.10697174 -59.43891144]
[112.30114746 -46.29441071]
[111.03757477 -31.34772682]
[109.77400208 -16.40104294]
[116.41168213 -3.06723166]
[107.53938293 10.03211403]
[106.27581024 24.97879982]
[105.01223755 39.92548370]
[103.74866486 54.87216949]
[102.48509216 69.81885529]
[118.46527100 78.92698669]
[125.16700745 94.53385925]
[121.41380310 109.65315247]
[132.40446472 119.86125946]
[143.39511108 130.06936646]
[154.38577271 140.27748108]
[165.37641907 150.48559570]
[176.36708069 160.69369507]
[191.74415588 164.41607666]
[195.80401611 178.74670410]
[206.79466248 188.95481873]
[217.99809265 198.92893982]
[229.40931702 208.66464233]
[240.82054138 218.40036011]
[252.23176575 228.13606262]
[267.77233887 227.07397461]
[279.20626831 237.10992432]
[280.12301636 251.93203735]
[291.53424072 261.66775513]
[302.94546509 271.40344238]
[314.22442627 261.47540283]
[326.80151367 253.25364685]
[340.42071533 246.90554810]
[354.80474854 242.56036377]
[369.66073608 240.30654907]
[384.68630981 240.18998718]
[399.57550049 242.21305847]
[414.02517700 246.33457947]
[427.74124146 252.47062683]
[440.44436646 260.49627686]
[451.87597656 270.24816895]
[461.80331421 281.52770996]
[470.02429199 294.10531616]
[476.37155151 307.72491455]
[480.71585083 322.10919189]
[482.96875000 336.96536255]
[483.08438110 351.99090576]
[481.06036377 366.87997437]
[476.93795776 381.32943726]
[470.80108643 395.04507446]
[462.77462769 407.74771118]
[453.02203369 419.17871094]
[441.74188232 429.10537720]
[429.16375732 437.32559204]
[415.54376221 443.67199707]
[401.15921021 448.01538086]
[386.30291748 450.26736450]
[371.27734375 450.38208008]
[356.38842773 448.35714722]
[341.93923950 444.23385620]
[328.22393799 438.09609985]
[315.52182007 430.06887817]
[304.09140015 420.31558228]
[294.16546631 409.03479004]
[285.94601440 396.45617676]
[279.60046387 382.83578491]
[275.25793457 368.45095825]
[273.00689697 353.59454346]
[272.89312744 338.56896973]
[274.91897583 323.68014526]
[279.04315186 309.23123169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 107]
[2 106]
[3 105]
[6 102]
[7 101]
[8 100]
[9 99]
[12 98]
[13 97]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[23 65]
[24 64]
[25 63]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 52]
[36 51]
[38 49]
[39 48]
[40 47]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
