%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAAACCAGCCAGCCUCUCCAGAGCAGGCGUGUGAUCUCUGUACCCCCGCAGUGGUCAGAAUAUGGAGAACUUCUCACUCCUCAGCAUCUCUGGACCUCCAAUCUCUUCCUCCGCCCUGAGUGCUUUUCCCGACAUUAUGUUCUCUCGUGCCACCAGCCUGC\
) } def
/len { sequence length } bind def

/coor [
[20.08267975 264.25830078]
[13.72184372 277.84286499]
[7.36100721 291.42739868]
[18.08013535 302.14541626]
[24.48422813 315.88455200]
[25.79995918 330.98568726]
[21.86844635 345.62533569]
[13.16444111 358.03564453]
[0.73899341 366.71804810]
[-13.90746403 370.62408447]
[-29.00629997 369.28207397]
[-42.73425674 362.85409546]
[-53.43361282 352.11633301]
[-59.81237411 338.36541748]
[-61.10027313 323.26187134]
[-57.14178848 308.62951660]
[-48.41492844 296.23526001]
[-35.97350311 287.57577515]
[-21.31987000 283.69674683]
[-6.22353411 285.06655884]
[0.13730195 271.48202515]
[6.49813795 257.89749146]
[2.15197659 248.58842468]
[3.70386934 238.21002197]
[10.87759304 230.25227356]
[21.46633339 227.52598572]
[28.33973122 214.19345093]
[35.21312714 200.86091614]
[42.08652496 187.52839661]
[48.95992279 174.19586182]
[55.83332062 160.86332703]
[62.45163727 147.40234375]
[68.81247711 133.81781006]
[75.17330933 120.23326874]
[68.68344116 106.70989227]
[54.10626602 103.17350769]
[39.52909470 99.63713074]
[24.95191956 96.10074615]
[10.37474632 92.56436157]
[-4.86055851 96.83003998]
[-15.40493107 86.31027985]
[-29.98210526 82.77389526]
[-44.55927658 79.23751068]
[-59.13645172 75.70112610]
[-72.49929810 84.13972473]
[-87.89662170 80.57631683]
[-96.19346619 67.12500000]
[-92.46746826 51.76620865]
[-78.92918396 43.61203766]
[-63.61064529 47.50021744]
[-55.60006714 61.12395096]
[-41.02289200 64.66033936]
[-26.44572067 68.19671631]
[-11.86854649 71.73310089]
[2.32410097 67.21447754]
[13.91112995 77.98718262]
[28.48830414 81.52356720]
[43.06547928 85.05995178]
[57.64265060 88.59633636]
[72.21982574 92.13272095]
[80.27017212 81.47316742]
[91.60466003 76.17896271]
[103.25246429 76.77728271]
[112.52413940 82.35050201]
[124.90621948 73.88385010]
[137.28829956 65.41720581]
[149.67037964 56.95055389]
[161.97129822 48.36641693]
[174.18992615 39.66556168]
[186.40856934 30.96470833]
[198.62721252 22.26385498]
[210.84585571 13.56300068]
[223.06448364 4.86214733]
[216.84292603 -9.81447601]
[214.01591492 -25.49583817]
[214.72003174 -41.40770340]
[218.91754150 -56.76511765]
[226.39851379 -70.81114197]
[236.79121399 -82.85414124]
[249.58062744 -92.30185699]
[264.13397217 -98.69052887]
[279.73202515 -101.70765686]
[295.60458374 -101.20729828]
[310.96859741 -97.21708679]
[325.06680298 -89.93676758]
[337.20492554 -79.72819519]
[349.08346558 -88.88790894]
[360.96200562 -98.04763031]
[372.84054565 -107.20735168]
[377.75427246 -114.96257782]
[385.03353882 -116.42580414]
[397.08432007 -125.35771179]
[409.13510132 -134.28961182]
[415.61468506 -148.72309875]
[430.44683838 -150.08566284]
[442.49758911 -159.01756287]
[437.10247803 -173.11703491]
[435.71255493 -188.14935303]
[438.43096924 -202.99902344]
[445.05603027 -216.56410217]
[455.09606934 -227.83796692]
[467.80609131 -235.98402405]
[482.24288940 -240.39778137]
[497.33517456 -240.75170898]
[511.96301270 -237.01953125]
[525.04089355 -229.47822571]
[535.59838867 -218.68737793]
[542.85205078 -205.44776917]
[546.26354980 -190.74185181]
[545.57977295 -175.66090393]
[540.85150146 -161.32402039]
[532.42956543 -148.79512024]
[520.93896484 -139.00390625]
[507.23229980 -132.67697144]
[492.32675171 -130.28378296]
[477.32839966 -132.00196838]
[463.35021973 -137.70402527]
[451.42950439 -146.96679688]
[439.37872314 -138.03488159]
[433.76110840 -124.24027252]
[418.06698608 -122.23884583]
[406.01623535 -113.30693817]
[393.96545410 -104.37503815]
[382.00024414 -95.32881165]
[370.12173462 -86.16909790]
[358.24319458 -77.00937653]
[346.36465454 -67.84966278]
[352.56021118 -55.16921234]
[356.14190674 -41.51284409]
[356.96783447 -27.41358566]
[355.00369263 -13.42217541]
[350.32418823 -0.08553239]
[343.11026001 12.07461262]
[333.64193726 22.58212662]
[322.28771973 31.02512550]
[309.48989868 37.07210541]
[295.74768066 40.48497772]
[281.59747314 41.12842178]
[267.59197998 38.97526550]
[254.27876282 34.10762024]
[242.17860413 26.71374702]
[231.76533508 17.08078575]
[219.54670715 25.78164101]
[207.32806396 34.48249435]
[195.10942078 43.18334579]
[182.89077759 51.88420105]
[170.67214966 60.58505630]
[167.03111267 67.05589294]
[158.13702393 69.33263397]
[145.75494385 77.79928589]
[133.37286377 86.26593018]
[120.99079132 94.73258209]
[116.43195343 119.18109894]
[88.75785065 126.59410095]
[82.39701843 140.17864990]
[76.03617859 153.76318359]
[76.22288513 160.44544983]
[73.40320587 165.44541931]
[69.16585541 167.73672485]
[62.29245758 181.06925964]
[55.41905975 194.40179443]
[48.54566193 207.73431396]
[41.67226410 221.06684875]
[34.79886627 234.39938354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[26 164]
[27 163]
[28 162]
[29 161]
[30 160]
[31 159]
[32 156]
[33 155]
[34 154]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
[44 51]
[64 152]
[65 151]
[66 150]
[67 149]
[68 147]
[69 146]
[70 145]
[71 144]
[72 143]
[73 142]
[86 127]
[87 126]
[88 125]
[89 124]
[91 123]
[92 122]
[93 121]
[95 119]
[96 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
