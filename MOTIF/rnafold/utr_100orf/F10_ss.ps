%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUUGCUCCAGCAGCCUGUCCCAGUGAGGACAGGGACACAGUACUCGGCCACACCAUGGGGCGCCCACUGCACCUCGUCCUGCUCAGUGCCUCCCUGGCUGGCCUCCUGCUGCUCGGGGAAAGUCUGUUCAUCCGCAGGGAGCAGGCCAACAACA\
) } def
/len { sequence length } bind def

/coor [
[238.92123413 320.07125854]
[230.49491882 307.66171265]
[222.06860352 295.25216675]
[213.64228821 282.84259033]
[205.21597290 270.43304443]
[196.78965759 258.02346802]
[190.39549255 254.23571777]
[188.32205200 245.28236389]
[180.14411926 232.70771790]
[171.96620178 220.13307190]
[163.78828430 207.55844116]
[155.48574829 195.06571960]
[147.05943298 182.65615845]
[138.63311768 170.24659729]
[130.20680237 157.83703613]
[121.78048706 145.42747498]
[113.35417175 133.01791382]
[89.87312317 134.14619446]
[70.80387878 120.39860535]
[56.97439194 126.20767212]
[43.14490509 132.01673889]
[29.31541634 137.82580566]
[15.48592758 143.63487244]
[1.65644014 149.44393921]
[-8.07041454 161.92187500]
[-22.80095673 159.71725464]
[-36.63044357 165.52632141]
[-46.11251450 178.90625000]
[-62.41357422 177.11529541]
[-68.76448822 161.99583435]
[-58.63198471 149.10148621]
[-42.43951416 151.69683838]
[-28.61002541 145.88777161]
[-19.87234879 133.82533264]
[-4.15262747 135.61445618]
[9.67686081 129.80538940]
[23.50634766 123.99631500]
[37.33583450 118.18724823]
[51.16532516 112.37818146]
[64.99481201 106.56911469]
[64.39128876 100.73225403]
[64.75434113 94.87551880]
[66.07412720 89.15789032]
[68.31480408 83.73455811]
[71.41555786 78.75273895]
[75.29222107 74.34767151]
[79.83956146 70.63891602]
[84.93414307 67.72715759]
[90.43768311 65.69142151]
[89.54345703 50.71810150]
[88.64923096 35.74477768]
[87.75500488 20.77145576]
[86.86077881 5.79813480]
[77.72856903 -3.36082602]
[77.32068634 -15.88644791]
[85.30959320 -25.01507378]
[84.71324158 -40.00321579]
[84.11689758 -54.99135590]
[75.83706665 -68.47300720]
[83.06225586 -81.49782562]
[82.46591187 -96.48596954]
[81.72058868 -111.46743774]
[80.82635498 -126.44075775]
[79.93212891 -141.41407776]
[79.03790283 -156.38740540]
[78.14367676 -171.36073303]
[66.76120758 -176.67744446]
[58.78253555 -186.28761292]
[55.68622208 -198.31359863]
[58.00469589 -210.43975830]
[65.23381042 -220.35826111]
[75.94090271 -226.20834351]
[75.64266968 -241.20536804]
[75.34443665 -256.20242310]
[62.53551102 -264.96087646]
[57.35269547 -279.58682251]
[61.78889084 -294.45623779]
[74.13829041 -303.85156250]
[89.65229797 -304.16006470]
[102.36546326 -295.26315308]
[107.38931274 -280.58184814]
[102.79206848 -265.76144409]
[90.34147644 -256.50064087]
[90.63970947 -241.50360107]
[90.93794250 -226.50657654]
[105.85991669 -217.14256287]
[112.26864624 -200.56491089]
[107.44139862 -183.29710388]
[93.11699677 -172.25495911]
[94.01122284 -157.28163147]
[94.90545654 -142.30830383]
[95.79968262 -127.33499146]
[96.69390869 -112.36166382]
[100.25135803 -105.83657074]
[97.45404816 -97.08231354]
[98.05039978 -82.09417725]
[106.28757477 -69.68457031]
[99.10503387 -55.58770370]
[99.70138550 -40.59956360]
[100.29772949 -25.61142159]
[110.46286011 -11.33482361]
[101.83409882 4.90390825]
[102.72832489 19.87722969]
[103.62255096 34.85055161]
[104.51677704 49.82387161]
[105.41100311 64.79719543]
[119.77394104 70.37724304]
[130.43574524 81.50184631]
[135.40083313 96.08879089]
[133.73986816 111.40780640]
[125.76373291 124.59159851]
[134.19004822 137.00115967]
[142.61636353 149.41072083]
[151.04267883 161.82028198]
[159.46899414 174.22984314]
[167.89530945 186.63940430]
[175.34703064 192.01843262]
[176.36293030 199.38050842]
[184.54084778 211.95515442]
[192.71876526 224.52980042]
[200.89668274 237.10443115]
[209.19921875 249.59715271]
[217.62553406 262.00671387]
[226.05184937 274.41629028]
[234.47816467 286.82583618]
[242.90447998 299.23538208]
[251.33079529 311.64495850]
[260.24380493 323.70971680]
[269.62942505 335.41055298]
[279.01504517 347.11141968]
[288.40066528 358.81228638]
[301.90213013 358.73745728]
[312.81225586 366.35577393]
[317.26022339 378.69009399]
[313.82690430 391.14233398]
[322.97802734 403.02749634]
[332.24688721 414.82107544]
[341.63250732 426.52194214]
[357.35861206 429.69512939]
[364.55426025 444.03396606]
[357.69961548 458.53890991]
[342.05291748 462.08300781]
[329.61700439 451.94754028]
[329.93164062 435.90756226]
[320.54602051 424.20669556]
[313.87112427 420.93896484]
[311.09289551 412.17861938]
[301.94177246 400.29348755]
[285.20996094 398.85885620]
[274.46060181 385.52108765]
[276.69982910 368.19790649]
[267.31420898 356.49703979]
[257.92858887 344.79617310]
[248.54295349 333.09533691]
[245.71830750 332.67877197]
[242.89384460 331.08731079]
[240.52961731 328.31719971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[8 121]
[9 120]
[10 119]
[11 118]
[12 116]
[13 115]
[14 114]
[15 113]
[16 112]
[17 111]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[26 33]
[27 32]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[56 100]
[57 99]
[58 98]
[60 96]
[61 95]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[72 85]
[73 84]
[74 83]
[128 154]
[129 153]
[130 152]
[131 151]
[135 148]
[136 147]
[137 145]
[138 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
