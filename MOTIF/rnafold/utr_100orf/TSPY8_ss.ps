%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCCCUGAGGGCUCGCUGACCUACUGGGUGCCAGAGAGGCUGCGGCAGGGUUUCUGUGGCGUGGGUCGGGCAGCACAGGCCUUGGUGUGUGCGAGUG\
) } def
/len { sequence length } bind def

/coor [
[109.25590515 137.90219116]
[124.24302673 137.24975586]
[114.05673218 126.23888397]
[103.87043762 115.22800446]
[88.89945221 116.16055298]
[80.15834045 128.35041809]
[71.41722107 140.54028320]
[62.67610931 152.73016357]
[58.35960007 169.12539673]
[41.41016006 169.51623535]
[36.34252167 153.33738708]
[50.48624039 143.98904419]
[59.22735596 131.79917908]
[67.96846771 119.60930634]
[76.70958710 107.41943359]
[79.88426971 102.42856598]
[83.95731354 98.90577698]
[88.49069214 96.98320007]
[93.03387451 96.68124390]
[88.44301605 82.40104675]
[83.85215759 68.12084961]
[79.26129913 53.84065628]
[74.67044067 39.56045914]
[70.07958221 25.28026199]
[65.48872375 11.00006580]
[60.89786530 -3.28013039]
[56.30700684 -17.56032753]
[53.00091553 -20.14951134]
[50.80440903 -23.30694962]
[49.76188660 -26.64632034]
[49.79736328 -29.80312347]
[50.73026657 -32.46939850]
[52.30060196 -34.42139053]
[49.97713089 -49.24034882]
[47.65365601 -64.05930328]
[45.33018494 -78.87825775]
[35.54864883 -91.31337738]
[41.22113037 -105.08553314]
[38.89765930 -119.90448761]
[36.57418442 -134.72344971]
[34.25071335 -149.54240417]
[31.92724037 -164.36135864]
[29.60376740 -179.18031311]
[27.28029442 -193.99926758]
[13.79628086 -201.91857910]
[8.60609341 -216.66970825]
[14.16038132 -231.28764343]
[27.83658028 -238.87022400]
[43.17720413 -235.83720398]
[52.93888474 -223.62066650]
[52.51245117 -207.98890686]
[42.09925079 -196.32273865]
[44.42272568 -181.50378418]
[46.74619675 -166.68482971]
[49.06966782 -151.86587524]
[51.39314270 -137.04692078]
[53.71661377 -122.22795868]
[56.04008865 -107.40900421]
[65.65543365 -96.03383636]
[60.14913940 -81.20173645]
[62.47261429 -66.38277435]
[64.79608917 -51.56381989]
[67.11956024 -36.74486542]
[70.58720398 -22.15118599]
[75.17806244 -7.87098932]
[79.76892090 6.40920734]
[84.35977936 20.68940353]
[88.95063782 34.96960068]
[93.54149628 49.24979782]
[98.13235474 63.52999496]
[102.72321320 77.81018829]
[107.31407166 92.09038544]
[114.88131714 105.04170990]
[125.06761169 116.05258942]
[135.25390625 127.06346893]
[146.57624817 136.90240479]
[158.90058899 145.45288086]
[171.22491455 154.00337219]
[183.54925537 162.55384827]
[195.87358093 171.10433960]
[211.62261963 172.61373901]
[217.66912842 186.22583008]
[229.99345398 194.77632141]
[246.37216187 195.59504700]
[253.61065674 210.31021118]
[244.26261902 223.78411865]
[227.94448853 222.15596008]
[221.44297791 207.10064697]
[209.11863708 198.55017090]
[194.25111389 197.65234375]
[187.32310486 183.42866516]
[174.99876404 174.87818909]
[162.67443848 166.32769775]
[150.35009766 157.77722168]
[138.02575684 149.22673035]
[139.47099304 164.15695190]
[131.19717407 176.66870117]
[116.89292145 181.18405151]
[102.93530273 175.68997192]
[95.54685211 162.63583374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[5 15]
[6 14]
[7 13]
[8 12]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[33 63]
[34 62]
[35 61]
[36 60]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
