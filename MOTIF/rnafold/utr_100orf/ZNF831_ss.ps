%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGUUCCAGAACCCACCUGCCCUGCCCCUCCUGCGAGGGACCAGCCAGCUCCCACUCCUGGCCCUCCAGGGGCCCCAGGUGGCCAGGCCUCACCUC\
) } def
/len { sequence length } bind def

/coor [
[64.44829559 473.71136475]
[61.36360168 458.59555054]
[66.96212769 444.21987915]
[79.45739746 435.17156982]
[78.52484894 420.20059204]
[77.59230804 405.22958374]
[76.65975952 390.25860596]
[75.72721863 375.28762817]
[74.79467010 360.31665039]
[64.69939423 356.67407227]
[56.42141724 349.78265381]
[50.96987534 340.44808960]
[49.02103424 329.77593994]
[50.83449173 319.04064941]
[56.21894455 309.53332520]
[64.55200195 302.40664673]
[74.85203552 298.53485107]
[75.78457642 283.56387329]
[76.71711731 268.59289551]
[77.64966583 253.62191772]
[78.58220673 238.65092468]
[79.51475525 223.67994690]
[80.44729614 208.70895386]
[71.07300568 201.85096741]
[66.19757080 191.17552185]
[67.17313385 179.35865784]
[73.86854553 169.42658997]
[84.67275238 163.98077393]
[86.53423309 149.09672546]
[88.39571381 134.21267700]
[90.25719452 119.32862091]
[92.11867523 104.44457245]
[90.06549072 100.94532013]
[89.65619659 96.52916718]
[91.27402496 91.99466705]
[94.91053772 88.28475952]
[98.15080261 73.63891602]
[96.94391632 64.40116882]
[101.72630310 58.59132385]
[105.42048645 44.05334091]
[109.11466980 29.51535416]
[112.80885315 14.97736931]
[116.50303650 0.43938434]
[115.58403015 -8.83143330]
[120.54478455 -14.48973370]
[124.68931580 -28.90579796]
[128.83384705 -43.32186127]
[132.97836304 -57.73792648]
[127.39936829 -69.49512482]
[131.27519226 -81.49523163]
[141.97137451 -87.37821198]
[146.56224060 -101.65840912]
[139.12141418 -115.60150146]
[143.79908752 -130.69769287]
[157.82006836 -137.99067688]
[172.86596680 -133.15365601]
[180.01029968 -119.05635071]
[175.01448059 -104.06243896]
[160.84243774 -97.06755066]
[156.25157166 -82.78735352]
[160.93263245 -65.95318604]
[147.39442444 -53.59339905]
[143.24990845 -39.17733765]
[139.10537720 -24.76127243]
[134.96084595 -10.34520721]
[131.04103088 4.13356781]
[127.34683990 18.67155266]
[123.65265656 33.20953751]
[119.95847321 47.74752426]
[116.26428986 62.28550720]
[112.79664612 76.87918854]
[109.55637360 91.52502441]
[107.00272369 106.30606079]
[105.14124298 121.19010925]
[103.27976227 136.07415771]
[101.41828156 150.95820618]
[99.55680084 165.84225464]
[111.74642944 180.16067505]
[109.81666565 198.54957581]
[95.41828156 209.64151001]
[94.48574066 224.61248779]
[93.55319214 239.58348083]
[92.62065125 254.55445862]
[91.68810272 269.52545166]
[90.75556183 284.49642944]
[89.82301331 299.46740723]
[105.82696533 311.07687378]
[111.80635071 329.77593994]
[105.59651184 348.25256348]
[89.76565552 359.38409424]
[90.69820404 374.35507202]
[91.63074493 389.32608032]
[92.56329346 404.29705811]
[93.49583435 419.26803589]
[94.42838287 434.23901367]
[107.94994354 441.66671753]
[115.28919220 455.23651123]
[114.10419464 470.61828613]
[104.77308655 482.90380859]
[90.27338409 488.17279053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[9 90]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[36 72]
[37 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[45 65]
[46 64]
[47 63]
[48 62]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
