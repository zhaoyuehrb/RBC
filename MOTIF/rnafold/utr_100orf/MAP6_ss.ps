%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAUUAUAGAGACUUGCUUUAGAACCACAAGAAGAAAGAGGAGGCCGGCUUUUCAGCUAGCAUCAUGGCGUGGCCGUGCAUCACGAGGGCCUGCUGCAUCGCCCGCUUCUGGAACCAGUUGGACAAAGCGGACAUCGCUGUGCCGCUGGUUUUCACCAAGUACU\
) } def
/len { sequence length } bind def

/coor [
[117.40174866 240.71257019]
[107.71422577 252.37138367]
[94.62182617 260.01104736]
[79.70551300 262.70910645]
[64.76650238 260.13967896]
[51.60876083 252.61308289]
[41.82114792 241.03817749]
[36.58556366 226.81269836]
[36.53422928 211.65441895]
[41.67334366 197.39379883]
[51.38233566 185.75286865]
[64.48880005 178.13732910]
[79.41005707 175.46678162]
[81.95262909 160.68385315]
[84.49520874 145.90090942]
[87.03778076 131.11796570]
[89.58035278 116.33502197]
[77.08863068 108.03099823]
[64.44199371 116.09714508]
[51.79536438 124.16328430]
[39.14873123 132.22943115]
[39.90689087 147.56959534]
[32.87912369 161.22631836]
[19.95585632 169.52600098]
[4.61338711 170.23608398]
[-9.02123833 163.16554260]
[-17.28037262 150.21632385]
[-17.94235229 134.87170410]
[-10.82910728 121.25930023]
[2.14593554 113.04079437]
[17.49255562 112.42691803]
[31.08258629 119.58279419]
[43.72922134 111.51665497]
[56.37585449 103.45050812]
[69.02248383 95.38436890]
[54.16204071 97.42572784]
[42.63193893 87.83110809]
[41.93890762 72.84712219]
[52.53414536 62.22917175]
[67.51957703 62.89011765]
[77.13874054 74.39922333]
[73.21077728 59.92264938]
[69.28280640 45.44608307]
[65.35484314 30.96951103]
[61.42687607 16.49294090]
[57.49890900 2.01637173]
[46.41782761 -9.27611446]
[50.55231094 -23.58538818]
[46.62434387 -38.06195831]
[42.69637680 -52.53852844]
[27.93640137 -56.54980469]
[17.23662186 -67.33922577]
[13.39949131 -81.93863678]
[17.35867691 -96.40171814]
[27.95429611 -106.87064362]
[24.02632904 -121.34721375]
[20.09836006 -135.82379150]
[16.17039299 -150.30035400]
[2.74063993 -158.19209290]
[-1.03665328 -172.92935181]
[6.56967211 -185.68392944]
[2.64170456 -200.16049194]
[-18.93688965 -209.66909790]
[-26.54813004 -231.71559143]
[-15.67436218 -252.05770874]
[-21.74081421 -265.77624512]
[-27.80726624 -279.49478149]
[-33.87371826 -293.21331787]
[-39.94017029 -306.93185425]
[-46.00662231 -320.65039062]
[-57.94223785 -332.69104004]
[-49.67624283 -347.49337769]
[-33.16411591 -343.64813232]
[-32.28808975 -326.71682739]
[-26.22163773 -312.99829102]
[-20.15518570 -299.27975464]
[-14.08873272 -285.56121826]
[-8.02228069 -271.84271240]
[-1.95582855 -258.12417603]
[5.25584698 -258.39593506]
[12.32895184 -256.85580444]
[18.81410599 -253.59033203]
[24.29648209 -248.79608154]
[28.42234230 -242.76780701]
[30.92184448 -235.88027954]
[31.62668037 -228.56506348]
[30.48135376 -221.28346252]
[27.54738808 -214.49737549]
[23.00012589 -208.64006042]
[17.11827469 -204.08847046]
[21.04624176 -189.61189270]
[34.05623627 -182.45118713]
[38.24597931 -167.82585144]
[30.64696312 -154.22831726]
[34.57493210 -139.75175476]
[38.50289917 -125.27518463]
[42.43086624 -110.79861450]
[56.86489105 -107.12104797]
[67.59150696 -96.64270020]
[71.65994263 -82.10604858]
[67.88113403 -67.38812256]
[57.17294693 -56.46649551]
[61.10091400 -41.98992538]
[65.02888489 -27.51335526]
[75.82901001 -17.25633049]
[71.97547913 -1.91159546]
[75.90344238 12.56497383]
[79.83141327 27.04154396]
[83.75937653 41.51811218]
[87.68734741 55.99468231]
[91.61531067 70.47125244]
[134.84738159 89.23938751]
[149.07772827 93.98250580]
[163.30809021 98.72561646]
[177.53843689 103.46873474]
[191.76878357 108.21184540]
[205.99913025 112.95496368]
[220.22947693 117.69808197]
[234.45983887 122.44119263]
[248.69018555 127.18431091]
[257.86630249 126.93244171]
[263.14346313 132.15417480]
[277.28149414 137.16574097]
[286.46075439 137.08757019]
[291.63815308 142.40823364]
[305.67880249 147.68644714]
[321.31900024 145.30000305]
[330.50970459 157.02095032]
[344.55035400 162.29916382]
[358.59103394 167.57737732]
[372.63171387 172.85559082]
[387.77725220 167.56489563]
[401.27954102 176.22908020]
[402.78073120 192.20175171]
[391.12924194 203.23002625]
[375.26312256 200.85395813]
[367.35348511 186.89625549]
[353.31280518 181.61804199]
[339.27215576 176.33982849]
[325.23147583 171.06161499]
[310.59558105 173.82559204]
[300.40060425 161.72711182]
[286.35992432 156.44889832]
[272.26992798 151.30377197]
[258.13189697 146.29222107]
[243.94706726 141.41465759]
[229.71672058 136.67153931]
[215.48637390 131.92842102]
[201.25601196 127.18531036]
[187.02566528 122.44219971]
[172.79531860 117.69908142]
[158.56497192 112.95597076]
[144.33462524 108.21285248]
[130.10426331 103.46974182]
[123.66902161 107.32170105]
[123.90589142 122.31983185]
[110.79853821 115.02563477]
[104.36329651 118.87760162]
[101.82071686 133.66053772]
[99.27814484 148.44348145]
[96.73557281 163.22642517]
[94.19300079 178.00935364]
[107.36458588 185.51170349]
[117.17351532 197.06854248]
[122.43531036 211.28436279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 162]
[14 161]
[15 160]
[16 159]
[17 158]
[18 35]
[19 34]
[20 33]
[21 32]
[41 111]
[42 110]
[43 109]
[44 108]
[45 107]
[46 106]
[48 104]
[49 103]
[50 102]
[55 97]
[56 96]
[57 95]
[58 94]
[61 91]
[62 90]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
[112 154]
[113 153]
[114 152]
[115 151]
[116 150]
[117 149]
[118 148]
[119 147]
[120 146]
[122 145]
[123 144]
[125 143]
[126 142]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
