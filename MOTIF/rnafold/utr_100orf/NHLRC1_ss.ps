%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGGACGCGCCAUGGCGGCCGAAGCCUCGGAGAGCGGGCCAGCGCUGCAUGAGCUCAUGCGCGAGGCGGAGAUCAGCCUGCUCGAGUGCAAGGUGUGCUUUGAGAAGUUUG\
) } def
/len { sequence length } bind def

/coor [
[-99.52828217 409.49795532]
[-103.29210663 415.51235962]
[-108.74138641 419.97409058]
[-115.28256989 422.44030762]
[-122.21679688 422.68316650]
[-128.81448364 420.71051025]
[-139.49327087 431.24441528]
[-143.88427734 446.44409180]
[-158.37867737 449.87362671]
[-169.05747986 460.40753174]
[-179.73626709 470.94143677]
[-179.59356689 486.74508667]
[-190.72697449 497.96215820]
[-206.53123474 497.93777466]
[-217.62997437 486.68640137]
[-217.43849182 470.88327026]
[-206.07040405 459.90411377]
[-190.27018738 460.26266479]
[-179.59138489 449.72872925]
[-168.91259766 439.19482422]
[-165.28541565 424.74862671]
[-150.02719116 420.56564331]
[-139.34840393 410.03170776]
[-136.37208557 387.06347656]
[-113.60916901 379.93014526]
[-104.79238892 367.79489136]
[-95.97560883 355.65960693]
[-87.15882874 343.52435303]
[-85.93753815 328.67990112]
[-71.56639099 322.06320190]
[-62.74961090 309.92794800]
[-65.32604218 295.30273438]
[-56.55744171 282.87023926]
[-41.19967651 280.26702881]
[-32.38290024 268.13177490]
[-23.56612015 255.99650574]
[-14.74934101 243.86125183]
[-5.93256235 231.72599792]
[2.88421631 219.59074402]
[4.10551167 204.74629211]
[18.47665596 198.12959290]
[27.29343605 185.99433899]
[36.11021423 173.85908508]
[36.93481827 156.38772583]
[53.69219208 148.90773010]
[62.17420959 136.53617859]
[70.65622711 124.16462708]
[79.13824463 111.79306793]
[87.62026215 99.42151642]
[91.66721344 84.97775269]
[90.84807587 70.00013733]
[90.02893829 55.02252197]
[89.20980072 40.04490662]
[88.39066315 25.06728745]
[78.97951508 11.63737965]
[86.14891815 -3.11157846]
[102.52359009 -4.00712299]
[111.25868225 9.87200546]
[103.36827850 24.24814987]
[104.18741608 39.22576523]
[105.00655365 54.20338440]
[105.82569122 69.18099976]
[106.64482880 84.15861511]
[120.32009125 90.32199860]
[132.08396912 81.01548767]
[136.95793152 73.12586975]
[144.29867554 71.62071228]
[156.31236267 62.63899994]
[168.32606506 53.65729523]
[180.33976746 44.67558670]
[179.99317932 29.16238213]
[188.85887146 16.42742348]
[203.52778625 11.36756039]
[218.35945129 15.92841434]
[227.65077209 28.35624504]
[227.82905579 43.87229538]
[218.82574463 56.51033020]
[204.10278320 61.41076279]
[189.32147217 56.68928528]
[177.30776978 65.67098999]
[165.29408264 74.65270233]
[153.28038025 83.63440704]
[141.39048767 92.77936554]
[129.62660217 102.08587646]
[121.88201141 110.45373535]
[112.81235504 113.76040649]
[104.88262939 112.42790222]
[99.99181366 107.90353394]
[91.50979614 120.27508545]
[83.02778625 132.64663696]
[74.54576874 145.01820374]
[66.06375122 157.38975525]
[67.64979553 170.27932739]
[60.21914291 180.43539429]
[48.24546814 182.67585754]
[39.42869186 194.81111145]
[30.61191177 206.94636536]
[28.75998116 222.65881348]
[15.01947117 228.40751648]
[6.20269251 240.54277039]
[-2.61408639 252.67802429]
[-11.43086529 264.81329346]
[-20.24764442 276.94854736]
[-29.06442261 289.08380127]
[-26.79442978 304.49435425]
[-35.90876770 316.67562866]
[-50.61435699 318.74475098]
[-59.43113708 330.88000488]
[-61.28306580 346.59243774]
[-75.02357483 352.34115601]
[-83.84035492 364.47640991]
[-92.65713501 376.61166382]
[-101.47391510 388.74691772]
[-98.53412628 395.37588501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[9 20]
[10 19]
[11 18]
[25 113]
[26 112]
[27 111]
[28 110]
[30 108]
[31 107]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[41 97]
[42 96]
[43 95]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[64 84]
[65 83]
[67 82]
[68 81]
[69 80]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
