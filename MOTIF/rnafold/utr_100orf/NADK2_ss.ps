%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUUGCUACCGAGGCUUCUUGCUGGGCAGCUGUUGUCGCGUGGCGGGCGGCCGGGCGGCGGCGCUGCGGGGACCGGGUGCGGGAGGCCCCGCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[158.02958679 175.75602722]
[145.03845215 183.25473022]
[130.22357178 180.90547180]
[120.18962860 169.75558472]
[119.40994263 154.77586365]
[128.23210144 142.64451599]
[142.72442627 138.77000427]
[130.40010071 130.21952820]
[118.07575989 121.66903687]
[105.75142670 113.11855316]
[91.83489227 111.76887512]
[85.69808960 99.20578003]
[73.37375641 90.65529633]
[60.44818115 92.16736603]
[50.32587814 84.64648438]
[48.18550110 72.62830353]
[36.13304520 63.69866943]
[24.08059120 54.76903915]
[12.02813721 45.83940506]
[-3.66634297 43.84093857]
[-9.28658390 30.04738235]
[-21.33903885 21.11774826]
[-33.39149094 12.18811607]
[-45.44394684 3.25848317]
[-57.49640274 -5.67114973]
[-69.54885864 -14.60078239]
[-81.60131073 -23.53041649]
[-97.29579163 -25.52888298]
[-102.91603088 -39.32243729]
[-114.96848297 -48.25207138]
[-130.66296387 -50.25053787]
[-136.28320312 -64.04409790]
[-148.33566284 -72.97372437]
[-164.68096924 -74.30142975]
[-171.45832825 -89.23459625]
[-161.69577026 -102.41126251]
[-145.43618774 -100.27640533]
[-139.40602112 -85.02618408]
[-127.35356903 -76.09654999]
[-112.52116394 -74.73678589]
[-106.03884888 -60.30452728]
[-93.98639679 -51.37489319]
[-79.15399170 -50.01513290]
[-72.67167664 -35.58287048]
[-60.61922073 -26.65323639]
[-48.56676865 -17.72360420]
[-36.51431274 -8.79397106]
[-24.46185875 0.13566171]
[-12.40940475 9.06529427]
[-0.35695085 17.99492836]
[14.47545719 19.35468864]
[20.95776939 33.78694916]
[33.01022339 42.71658325]
[45.06267929 51.64621735]
[57.11513138 60.57584763]
[74.56121826 61.54307938]
[81.92424011 78.33096313]
[94.24857330 86.88144684]
[108.16510773 88.23112488]
[114.30191040 100.79421997]
[126.62624359 109.34470367]
[138.95057678 117.89518738]
[151.27491760 126.44567108]
[164.45530701 133.60647583]
[178.33572388 139.29280090]
[192.21612549 144.97912598]
[206.09654236 150.66545105]
[221.79978943 148.73713684]
[230.64398193 160.72169495]
[244.52438354 166.40802002]
[258.40478516 172.09434509]
[272.28521729 177.78067017]
[286.16561890 183.46699524]
[300.04602051 189.15332031]
[309.35437012 189.53672791]
[314.26522827 195.23838806]
[327.96209717 201.35363770]
[340.34979248 192.27395630]
[355.61941528 190.62052917]
[369.66354370 196.83810425]
[378.70434570 209.25419617]
[380.30990601 224.52893066]
[374.04833984 238.55349731]
[361.60397339 247.55534363]
[346.32427979 249.11302185]
[332.31939697 242.80752563]
[323.35659790 230.33499146]
[321.84683228 215.05049133]
[308.14999390 208.93524170]
[294.35968018 203.03373718]
[280.47927856 197.34741211]
[266.59887695 191.66108704]
[252.71847534 185.97476196]
[238.83805847 180.28842163]
[224.95765686 174.60209656]
[210.24722290 176.93713379]
[200.41020203 164.54585266]
[186.52980042 158.85952759]
[172.64939880 153.17320251]
[158.76898193 147.48687744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[12 58]
[13 57]
[16 55]
[17 54]
[18 53]
[19 52]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[29 42]
[30 41]
[32 39]
[33 38]
[64 100]
[65 99]
[66 98]
[67 97]
[69 95]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
[76 89]
[77 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
