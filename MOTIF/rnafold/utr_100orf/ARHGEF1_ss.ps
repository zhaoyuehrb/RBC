%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGACUCAGGGCGGCUAGAGCGACGCGGCGGCAGGGGUGGGGAGAGUGCGGAGCCCGAGCGCGGAGGCUUCGGUUCCGGUGGCGGCGAUGGCUUCUCUUUCCACCUGGAGCAGCCCUGCAGAGCCCAGGGAGAUGGAAGACUUCGCCCGAGGGGCGGCCUCCCCAGGCCCCUCCCGGCCUGGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[47.98997498 515.87011719]
[40.79699707 529.17858887]
[29.84211349 539.61151123]
[16.19857788 546.14672852]
[1.20304167 548.14398193]
[-13.67538452 545.40765381]
[-26.97906303 538.20574951]
[-37.40463638 527.24389648]
[-43.93071365 513.59594727]
[-45.91793442 498.59912109]
[-43.17161179 483.72250366]
[-35.96080017 470.42367554]
[-24.99194717 460.00543213]
[-11.33966541 453.48852539]
[3.65853357 451.51135254]
[6.37174177 436.75875854]
[9.08494949 422.00619507]
[11.79815769 407.25360107]
[14.51136589 392.50103760]
[17.22457314 377.74847412]
[15.33895779 370.58837891]
[20.10652924 362.77526855]
[23.06328392 348.06958008]
[10.54804134 356.33810425]
[-4.36935091 354.76605225]
[-14.88604355 344.07028198]
[-16.20605850 329.12847900]
[-7.72742462 316.75460815]
[6.68330860 312.59158325]
[20.45434380 318.53790283]
[27.30550766 331.88101196]
[31.94076157 317.61517334]
[36.57601547 303.34930420]
[33.15034866 288.85400391]
[44.77344894 278.12020874]
[49.40870285 263.85437012]
[54.04395676 249.58851624]
[58.67921066 235.32267761]
[63.31446838 221.05682373]
[67.94972229 206.79096985]
[72.34847260 192.45043945]
[76.50951385 178.03913879]
[80.67056274 163.62782288]
[84.83160400 149.21652222]
[88.99264526 134.80522156]
[93.15369415 120.39391327]
[81.51503754 129.85656738]
[67.06032562 125.84889984]
[61.95589447 111.74412537]
[70.49806976 99.41402435]
[85.49709320 99.23672485]
[73.07696533 90.82600403]
[60.65682983 82.41527557]
[48.23669815 74.00454712]
[35.81656647 65.59382629]
[23.39643288 57.18309784]
[10.97629929 48.77236938]
[-4.78878546 47.44095993]
[-10.98865795 33.89803314]
[-23.40879059 25.48730850]
[-35.82892227 17.07658195]
[-48.24905396 8.66585636]
[-63.71916580 11.89868927]
[-76.89821625 3.17583585]
[-79.96730804 -12.32758999]
[-71.10560608 -25.41368103]
[-55.57059860 -28.31869125]
[-42.57893372 -19.31912994]
[-39.83832932 -3.75427651]
[-27.41819763 4.65644932]
[-14.99806499 13.06717491]
[-2.57793260 21.47790146]
[12.29878139 22.20772171]
[19.38702583 36.35223770]
[31.80715752 44.76296616]
[44.22729111 53.17369080]
[56.64742279 61.58441544]
[69.06755829 69.99514008]
[81.48768616 78.40586853]
[93.90782166 86.81659698]
[108.87502289 85.82523346]
[120.07734680 75.84986877]
[125.23811340 60.89403152]
[139.88861084 58.20846558]
[151.09092712 48.23309708]
[161.78486633 37.71454239]
[171.94409180 26.67868423]
[182.10330200 15.64282608]
[192.26252747 4.60696793]
[202.42175293 -6.42889071]
[199.51420593 -21.55675697]
[205.99617004 -35.33491135]
[219.19223022 -42.56874084]
[233.94094849 -40.66785431]
[244.10015869 -51.70371246]
[254.25938416 -62.73957062]
[264.41860962 -73.77542877]
[274.57785034 -84.81128693]
[278.23193359 -100.20473480]
[292.54437256 -104.32816315]
[302.70361328 -115.36402130]
[312.86282349 -126.39987946]
[323.02206421 -137.43574524]
[333.18127441 -148.47160339]
[335.00512695 -154.85673523]
[339.16305542 -158.76396179]
[343.86352539 -159.69731140]
[354.38204956 -170.39123535]
[364.90060425 -181.08515930]
[375.41915894 -191.77908325]
[379.21524048 -200.10760498]
[386.20114136 -202.56106567]
[396.89508057 -213.07962036]
[401.37069702 -232.72286987]
[420.26217651 -236.79678345]
[430.60247803 -247.66316223]
[437.14111328 -263.30548096]
[453.98220825 -261.35263062]
[456.76773071 -244.62905884]
[441.46887207 -237.32286072]
[431.12857056 -226.45648193]
[432.29925537 -216.28340149]
[427.56930542 -206.95390320]
[418.28955078 -201.66763306]
[407.41363525 -202.38568115]
[396.71969604 -191.86714172]
[386.11309814 -181.26052856]
[375.59454346 -170.56660461]
[365.07598877 -159.87268066]
[354.55743408 -149.17875671]
[344.21713257 -138.31237793]
[334.05792236 -127.27651978]
[323.89868164 -116.24065399]
[313.73947144 -105.20479584]
[303.58023071 -94.16893768]
[300.65280151 -79.56484985]
[285.61370850 -74.65206146]
[275.45446777 -63.61620712]
[265.29525757 -52.58034897]
[255.13601685 -41.54449081]
[244.97680664 -30.50863075]
[248.08912659 -15.96726227]
[241.96972656 -2.21891928]
[228.77391052 5.37869930]
[213.45761108 3.73033261]
[203.29838562 14.76619148]
[193.13916016 25.80204964]
[182.97994995 36.83790970]
[172.82072449 47.87376785]
[187.80937195 48.45705032]
[198.10739136 59.36351395]
[197.83023071 74.36095428]
[187.13627625 84.87947845]
[172.13630676 84.90856171]
[161.40164185 74.43157959]
[161.06629944 59.43541718]
[149.86398315 69.41078949]
[145.50447083 83.65311432]
[130.05271912 87.05218506]
[118.85039520 97.02755737]
[107.56499481 124.55495453]
[103.40395355 138.96626282]
[99.24291229 153.37756348]
[95.08186340 167.78886414]
[90.92082214 182.20018005]
[86.75978088 196.61148071]
[87.97958374 203.13900757]
[86.00437164 208.49188232]
[82.21556854 211.42622375]
[77.58031464 225.69207764]
[72.94506073 239.95793152]
[68.30980682 254.22377014]
[63.67454910 268.48962402]
[59.03929520 282.75546265]
[62.13341904 298.27117920]
[50.84186554 307.98455811]
[46.20660782 322.25042725]
[41.57135391 336.51626587]
[37.76898193 351.02633667]
[34.81222916 365.73202515]
[31.97714996 380.46166992]
[29.26394272 395.21423340]
[26.55073357 409.96682739]
[23.83752632 424.71939087]
[21.12431717 439.47198486]
[18.41110992 454.22454834]
[31.72442818 461.40859985]
[42.16468430 472.35650635]
[48.70904160 485.99566650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 186]
[16 185]
[17 184]
[18 183]
[19 182]
[20 181]
[22 180]
[23 179]
[31 178]
[32 177]
[33 176]
[35 174]
[36 173]
[37 172]
[38 171]
[39 170]
[40 169]
[41 166]
[42 165]
[43 164]
[44 163]
[45 162]
[46 161]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
[81 160]
[82 159]
[84 157]
[85 156]
[86 149]
[87 148]
[88 147]
[89 146]
[90 145]
[94 141]
[95 140]
[96 139]
[97 138]
[98 137]
[100 135]
[101 134]
[102 133]
[103 132]
[104 131]
[107 130]
[108 129]
[109 128]
[110 127]
[112 126]
[113 125]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
