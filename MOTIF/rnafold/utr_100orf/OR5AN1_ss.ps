%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUGGGGGAGGAAAUAUUACAGAAAUCACCUAUUUCAUCCUGCUGGGAUUCUCAGAUUUUCCCAGGAUCAUAAAAGUGCUCUUCACUAUAUUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[121.06291962 139.49139404]
[110.79983521 143.43478394]
[99.88506317 144.75715637]
[88.97721863 143.37873840]
[78.73452759 139.38269043]
[69.77507019 133.01016235]
[62.63949203 124.64567566]
[57.75837708 114.79399109]
[55.42626572 104.04957581]
[40.47159576 102.88432312]
[25.51692581 101.71906281]
[10.56225491 100.55380249]
[-3.79727721 107.19567108]
[-15.88502407 98.49304962]
[-30.83969498 97.32779694]
[-45.79436493 96.16253662]
[-60.74903488 94.99727631]
[-75.70370483 93.83202362]
[-90.65837860 92.66676331]
[-97.51771545 106.23208618]
[-109.04939270 116.13606262]
[-123.49492645 120.86840820]
[-138.65145874 119.70748138]
[-152.20774841 112.83030701]
[-162.09654236 101.28560638]
[-166.80989075 86.83386230]
[-165.62902832 71.67886353]
[-158.73402405 58.13163376]
[-147.17633057 48.25802994]
[-132.71839905 43.56370544]
[-117.56496429 44.76450729]
[-104.02681732 51.67732239]
[-94.16842651 63.24800110]
[-89.49311829 77.71208954]
[-74.53845215 78.87734985]
[-59.58377838 80.04261017]
[-44.62910843 81.20786285]
[-29.67443657 82.37312317]
[-14.71976662 83.53838348]
[-1.42989290 76.81316376]
[11.72751236 85.59913635]
[26.68218422 86.76438904]
[41.63685226 87.92964935]
[56.59152603 89.09490967]
[71.17134857 65.76367950]
[96.64411163 55.36867905]
[98.04180145 40.43394089]
[99.43949127 25.49919891]
[100.83718109 10.56445885]
[102.23487091 -4.37028170]
[97.69071198 -20.70389748]
[112.12805939 -29.59206009]
[124.66551971 -18.17942047]
[117.16960907 -2.97259259]
[115.77191925 11.96214771]
[114.37422943 26.89688873]
[112.97653961 41.83162689]
[111.57885742 56.76636887]
[120.85165405 60.39665222]
[129.09225464 65.98738861]
[135.89271545 73.26183319]
[140.91641235 81.85987854]
[143.91464233 91.35589600]
[144.73901367 101.27982330]
[143.34867859 111.14038849]
[157.04553223 117.25564575]
[170.74238586 123.37089539]
[184.43922424 129.48614502]
[198.13607788 135.60140991]
[211.83293152 141.71665955]
[226.44036865 136.30738831]
[240.24382019 142.70423889]
[245.31071472 156.66354370]
[259.00756836 162.77879333]
[264.55624390 162.17924500]
[269.24545288 163.72735596]
[272.37277222 166.68955994]
[273.65393066 170.15562439]
[286.72137451 177.52053833]
[299.78881836 184.88545227]
[312.85626221 192.25036621]
[328.63311768 189.33996582]
[340.65029907 199.96856689]
[339.68923950 215.98280334]
[326.48718262 225.09793091]
[311.17163086 220.32159424]
[305.49136353 205.31781006]
[292.42391968 197.95289612]
[279.35647583 190.58798218]
[266.28903198 183.22306824]
[252.89230347 176.47564697]
[239.19544983 170.36038208]
[225.41972351 175.90699768]
[211.44206238 169.90037537]
[205.71768188 155.41351318]
[192.02082825 149.29824829]
[178.32397461 143.18299866]
[164.62712097 137.06774902]
[150.93028259 130.95249939]
[137.23342896 124.83723450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 44]
[10 43]
[11 42]
[12 41]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[65 100]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[73 92]
[74 91]
[78 90]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
