%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCUCGCCAGAAAAGAAUUUCUGCGUGGAAAUGGCUUAGCUGCUGGGAAAAUGAACAUCAGUAUUGAUUUAGACACAAACUAUGCUGAGCUGGUUC\
) } def
/len { sequence length } bind def

/coor [
[93.55595398 203.45211792]
[80.66962433 192.43492126]
[87.68898010 177.00231934]
[88.62152100 162.03134155]
[89.55406952 147.06034851]
[90.48661041 132.08937073]
[91.41915894 117.11838531]
[79.50703430 108.00239563]
[65.29995728 112.81478119]
[51.09288406 117.62716675]
[36.88581085 122.43955994]
[22.75529861 127.47230530]
[8.70476151 132.72419739]
[-5.34577513 137.97610474]
[-19.39631271 143.22799683]
[-33.44684982 148.47988892]
[-47.49738693 153.73179626]
[-57.50645447 166.72219849]
[-73.72294617 164.28138733]
[-79.46472168 148.92027283]
[-68.82513428 136.44104004]
[-52.74928284 139.68125916]
[-38.69874573 134.42935181]
[-24.64820862 129.17745972]
[-10.59767151 123.92556000]
[3.45286489 118.67366791]
[17.50340080 113.42176819]
[22.75923157 108.03644562]
[32.07342529 108.23248291]
[46.28049850 103.42009735]
[60.48757172 98.60771179]
[74.69464874 93.79532623]
[81.70149231 86.66207886]
[89.92262268 83.61915588]
[97.44661713 84.38625336]
[102.79673767 87.90934753]
[105.20456696 92.65915680]
[117.52890015 84.10867310]
[129.85324097 75.55818939]
[142.17756653 67.00770569]
[154.50190735 58.45721817]
[166.82624817 49.90673447]
[179.15057373 41.35625076]
[191.47491455 32.80576706]
[200.59089661 20.89364243]
[205.62365723 6.76312780]
[210.65640259 -7.36738634]
[215.68914795 -21.49790001]
[220.72190857 -35.62841415]
[225.75465393 -49.75892639]
[215.32756042 -60.96313858]
[211.31288147 -75.73273468]
[214.63314819 -90.67376709]
[224.52539062 -102.35289001]
[238.71644592 -108.08634186]
[253.94531250 -106.55661011]
[266.71252441 -98.11521149]
[274.08422852 -84.70191956]
[274.36651611 -69.39901733]
[267.49447632 -55.72299194]
[255.04725647 -46.81649399]
[239.88516235 -44.72617722]
[234.85241699 -30.59566307]
[229.81967163 -16.46515083]
[224.78691101 -2.33463597]
[219.75416565 11.79587841]
[214.72142029 25.92639160]
[227.48065186 18.03957558]
[241.91345215 13.95372295]
[256.91342163 13.98204803]
[271.33068848 18.12238121]
[284.06005859 26.05733109]
[294.12570190 37.17861557]
[300.75598145 50.63369370]
[303.44268799 65.39112091]
[301.97979736 80.31961823]
[296.47952271 94.27478790]
[287.36343384 106.18685150]
[275.33041382 115.14263916]
[261.30285645 120.45562744]
[246.35610962 121.71852112]
[231.63597107 118.83451080]
[218.27085876 112.02468872]
[207.28532410 101.81107330]
[199.52149963 88.97663116]
[195.57453918 74.50522614]
[195.74700928 59.50621796]
[200.02539062 45.13010025]
[187.70106506 53.68058395]
[175.37672424 62.23106766]
[163.05239868 70.78155518]
[150.72805786 79.33203888]
[138.40371704 87.88252258]
[126.07938385 96.43300629]
[113.75505066 104.98348999]
[106.39014435 118.05093384]
[105.45759583 133.02191162]
[104.52505493 147.99290466]
[103.59250641 162.96388245]
[102.65996552 177.93486023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 32]
[9 31]
[10 30]
[11 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[37 95]
[38 94]
[39 93]
[40 92]
[41 91]
[42 90]
[43 89]
[44 88]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
