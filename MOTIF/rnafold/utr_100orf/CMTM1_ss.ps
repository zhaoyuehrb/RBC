%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCCCAGGGGAGAGCCAGCCGCUGCCGCGGCACUGGUUCAGACGGCCAGGCCCUAGGGACCCACCAUGGAUCCUGAACACGCCAAACCUGAGUCAUCCGAGGCACCUUCAGGGAACUUGAAACAACCGGAGACUGCCGCAGCCCUGGCAAGUAGCGGCAGCGUAG\
) } def
/len { sequence length } bind def

/coor [
[21.12272453 300.52096558]
[15.90466213 314.58410645]
[10.68659878 328.64724731]
[5.46853638 342.71038818]
[0.25047329 356.77349854]
[-4.83587360 370.88482666]
[-9.79005909 385.04306030]
[-9.31435394 401.99035645]
[-25.46763229 407.13891602]
[-34.88668060 393.04220581]
[-23.94830894 380.08889771]
[-18.99412346 365.93063354]
[-19.75620079 358.54779053]
[-13.81266403 351.55545044]
[-8.59460068 337.49230957]
[-3.37653756 323.42916870]
[1.84152532 309.36602783]
[7.05958843 295.30288696]
[-2.46427369 281.95568848]
[-2.16795444 265.39572144]
[8.02958202 252.13468933]
[24.27724838 247.50462341]
[29.23143387 233.34637451]
[34.18561935 219.18812561]
[39.13980484 205.02987671]
[44.09399033 190.87162781]
[49.04817581 176.71337891]
[54.00236511 162.55513000]
[58.95655060 148.39688110]
[63.91073608 134.23863220]
[55.34542465 121.92459869]
[40.34804916 121.64411163]
[25.35067177 121.36363220]
[16.67026329 124.34172058]
[10.07618618 120.93506622]
[-4.91332388 120.37419891]
[-19.90283394 119.81333160]
[-34.89234543 119.25246429]
[-49.88185501 118.69159698]
[-64.87136841 118.13072968]
[-77.56242371 127.94482422]
[-93.11335754 124.00171661]
[-99.59481812 109.32621765]
[-92.03478241 95.17611694]
[-76.23266602 92.40615845]
[-64.31050110 103.14122009]
[-49.32098770 103.70208740]
[-34.33147812 104.26295471]
[-19.34196663 104.82382202]
[-4.35245609 105.38468933]
[10.63705444 105.94555664]
[25.63115311 106.36624908]
[40.62853241 106.64673615]
[55.62590790 106.92721558]
[56.33038330 96.89844513]
[59.21532822 87.53256989]
[64.02207947 79.28408051]
[70.40195465 72.52616119]
[61.49465179 60.45719147]
[52.58734894 48.38822556]
[43.68004608 36.31925964]
[29.25981140 29.81023598]
[27.92751503 14.97533607]
[19.02021217 2.90636969]
[10.11290932 -9.16259670]
[-4.15755892 -18.31628990]
[0.68794501 -34.56305695]
[17.64115143 -34.40446854]
[22.18187523 -18.06990051]
[31.08917809 -6.00093317]
[39.99648285 6.06803370]
[53.77960587 11.71380329]
[55.74901199 27.41195679]
[64.65631866 39.48092270]
[73.56362152 51.54988861]
[82.47092438 63.61885452]
[90.48314667 60.75352859]
[98.91789246 59.63063812]
[107.40068054 60.30004883]
[115.55490112 62.73203278]
[123.01852417 66.81861877]
[129.46017456 72.37837982]
[134.59387207 79.16445923]
[148.65701294 73.94639587]
[162.72015381 68.72833252]
[176.78329468 63.51027298]
[181.06346130 48.71208572]
[193.09593201 39.38078308]
[208.13787842 38.92923737]
[220.41444397 47.32113266]
[234.47758484 42.10306931]
[248.54071045 36.88500595]
[262.39889526 31.14475441]
[276.03277588 24.89034271]
[289.66665649 18.63593102]
[303.30050659 12.38151836]
[309.82913208 5.93206167]
[317.24829102 6.14028835]
[330.99673462 0.14190777]
[344.74514771 -5.85647249]
[358.49359131 -11.85485268]
[358.04364014 -25.10561562]
[362.12597656 -37.68623734]
[370.23123169 -48.09762192]
[381.37200928 -55.10699081]
[394.20324707 -57.89382172]
[407.18444824 -56.14586258]
[418.76480103 -50.09395218]
[427.56826782 -40.48180008]
[441.53137207 -45.96191406]
[455.49447632 -51.44202805]
[469.45758057 -56.92214584]
[483.42068481 -62.40225983]
[497.38378906 -67.88237762]
[509.91903687 -79.29743958]
[524.35809326 -70.41207123]
[519.81713867 -54.07757568]
[502.86392212 -53.91926956]
[488.90078735 -48.43915558]
[474.93768311 -42.95903778]
[460.97457886 -37.47892380]
[447.01147461 -31.99880791]
[433.04837036 -26.51869202]
[432.28836060 -9.67539120]
[424.23431396 5.19977379]
[410.45565796 15.10716820]
[393.68161011 18.02512169]
[377.26058960 13.32231331]
[364.49197388 1.89358091]
[350.74353027 7.89196110]
[336.99511719 13.89034176]
[323.24667358 19.88872147]
[309.55493164 26.01538658]
[295.92105103 32.26979828]
[282.28720093 38.52420807]
[268.65332031 44.77862167]
[267.55935669 47.40254211]
[265.33834839 49.74152374]
[262.09707642 51.35590744]
[258.10232544 51.85420609]
[253.75877380 50.94814301]
[239.69564819 56.16620636]
[225.63250732 61.38426971]
[221.80114746 75.75293732]
[210.10523987 85.22235107]
[194.89826965 85.99810791]
[182.00135803 77.57341003]
[167.93821716 82.79147339]
[153.87507629 88.00953674]
[139.81193542 93.22760010]
[140.26521301 108.43129730]
[135.01165771 123.00466156]
[124.59087372 134.84416199]
[110.30245209 142.16183472]
[94.04595947 143.75366211]
[78.06898499 139.19281006]
[73.11479950 153.35107422]
[68.16061401 167.50932312]
[63.20642853 181.66757202]
[58.25224304 195.82582092]
[53.29805374 209.98406982]
[48.34386826 224.14231873]
[43.38968277 238.30056763]
[38.43549728 252.45881653]
[47.11795425 263.19451904]
[49.33362579 276.71301270]
[44.60787582 289.45541382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[6 12]
[7 11]
[22 164]
[23 163]
[24 162]
[25 161]
[26 160]
[27 159]
[28 158]
[29 157]
[30 156]
[31 54]
[32 53]
[33 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[58 76]
[59 75]
[60 74]
[61 73]
[63 71]
[64 70]
[65 69]
[83 150]
[84 149]
[85 148]
[86 147]
[90 143]
[91 142]
[92 141]
[93 136]
[94 135]
[95 134]
[96 133]
[98 132]
[99 131]
[100 130]
[101 129]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
