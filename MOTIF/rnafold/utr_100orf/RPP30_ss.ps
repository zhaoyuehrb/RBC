%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUGGCGCGCGCGGACGGUCAUGGGACUUCAGCAUGGCGGUGUUUGCAGAUUUGGACCUGCGAGCGGGUUCUGACCUGAAGGCUCUGCGCGGACUUGUGGAGACAGCCGCUCACCUUGGCUAUUCAGUUGUUG\
) } def
/len { sequence length } bind def

/coor [
[95.54700470 327.45922852]
[106.10944366 315.70291138]
[105.07077789 300.73892212]
[104.03211212 285.77493286]
[102.99344635 270.81094360]
[101.95478058 255.84693909]
[100.91611481 240.88294983]
[88.92530823 225.78076172]
[97.80715179 207.75057983]
[96.07850647 192.85052490]
[92.14767456 186.51197815]
[94.48611450 177.58686829]
[93.10208893 162.65084839]
[84.22346497 150.69178772]
[90.65444183 136.23657227]
[89.27041626 121.30056000]
[77.30015564 112.26103973]
[62.55556107 115.01728058]
[50.41209030 125.15861511]
[36.47979736 119.89168549]
[21.73520088 122.64793396]
[6.99060535 125.40417480]
[-7.75399113 128.16041565]
[-22.49858856 130.91665649]
[-37.24318314 133.67289734]
[-42.96169281 148.00126648]
[-55.53217316 156.94479370]
[-70.94342804 157.64962769]
[-84.27777863 149.89085388]
[-91.28028870 136.14427185]
[-89.71648407 120.79637146]
[-80.08535767 108.74461365]
[-65.46018219 103.83465576]
[-50.50778198 107.63326263]
[-39.99942780 118.92830658]
[-25.25483131 116.17206573]
[-10.51023388 113.41581726]
[4.23436260 110.65957642]
[18.97895813 107.90333557]
[33.72355652 105.14709473]
[44.81239700 95.20290375]
[59.79932022 100.27268982]
[74.54391479 97.51644135]
[80.44384003 83.72547150]
[72.25489044 71.15801239]
[64.06594849 58.59054947]
[55.87699509 46.02308655]
[47.68804550 33.45562363]
[39.49909592 20.88816071]
[31.31014824 8.32069874]
[23.12119865 -4.24676418]
[7.61790037 -4.90047932]
[-4.51934052 -14.56831264]
[-8.62350655 -29.53278542]
[-3.11646175 -44.03975296]
[9.88422203 -52.51099014]
[25.37951660 -51.68912888]
[37.41116714 -41.89020157]
[41.35275650 -26.88208580]
[35.68866348 -12.43571281]
[43.87760925 0.13174936]
[52.06655884 12.69921207]
[60.25550842 25.26667404]
[68.44445801 37.83413696]
[76.63340759 50.40159988]
[84.82235718 62.96906281]
[93.01130676 75.53652191]
[107.81562805 73.12158966]
[111.58624268 58.60323334]
[115.35684967 44.08488464]
[119.12745667 29.56653214]
[114.24201965 13.91199398]
[125.55397797 2.03884220]
[141.42654419 6.16115904]
[145.53140259 22.03825760]
[133.64579773 33.33713913]
[129.87519836 47.85549164]
[126.10459137 62.37384415]
[122.33398438 76.89219666]
[132.81736755 87.62059021]
[147.41894531 84.18633270]
[160.48161316 71.26667786]
[177.07101440 76.87158966]
[191.58937073 73.10098267]
[206.10771179 69.33037567]
[220.53509521 65.22543335]
[234.86381531 60.78833771]
[249.19253540 56.35124588]
[260.08639526 44.87803268]
[274.53283691 48.50426865]
[288.86154175 44.06717682]
[303.19027710 39.63008118]
[317.51898193 35.19298935]
[328.25689697 22.79825974]
[344.30664062 26.16547012]
[349.15759277 41.83072281]
[337.81954956 53.67895126]
[321.95608521 49.52170944]
[307.62734985 53.95880127]
[293.29864502 58.39589310]
[278.96990967 62.83298492]
[269.10095215 73.98883057]
[253.62963867 70.67996979]
[239.30091858 75.11705780]
[224.97219849 79.55415344]
[221.95912170 83.36463928]
[216.48442078 85.26914978]
[209.87832642 83.84872437]
[195.35997009 87.61933136]
[180.84162903 91.38993835]
[174.40145874 101.69588470]
[162.26753235 104.91902161]
[150.85319519 98.78790283]
[136.25163269 102.22216034]
[121.45447540 118.51311493]
[104.20642853 119.91653442]
[105.59045410 134.85255432]
[114.56806946 147.87994385]
[108.03810120 161.26683044]
[109.42212677 176.20283508]
[110.97856140 191.12187195]
[112.70721436 206.02192688]
[121.69664001 212.34394836]
[125.59483337 222.38282776]
[123.32238770 232.68360901]
[115.88011169 239.84428406]
[116.91877747 254.80827332]
[117.95744324 269.77227783]
[118.99610901 284.73626709]
[120.03477478 299.70025635]
[121.07344055 314.66424561]
[133.15878296 324.84854126]
[134.41978455 340.60244751]
[124.10828400 352.57946777]
[108.34192657 353.67382812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[4 129]
[5 128]
[6 127]
[7 126]
[9 122]
[10 121]
[12 120]
[13 119]
[15 117]
[16 116]
[17 43]
[18 42]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[68 79]
[69 78]
[70 77]
[71 76]
[80 114]
[81 113]
[83 110]
[84 109]
[85 108]
[86 105]
[87 104]
[88 103]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
