%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACGCUCGGCUUGUGGGACGCCCGCGGUCGGAUGCCCUCCGUCCGCUCCCUCCUCCGCCUCUUGGCCGCCGCGGCGGCCUGUGGCGCCUUCGCCUUCCUGGGCUAUUGUAUUUACCUCAACCGGAAGCGGC\
) } def
/len { sequence length } bind def

/coor [
[91.02669525 407.35046387]
[80.17905426 395.85681152]
[80.71935272 380.06176758]
[92.32705688 369.33624268]
[92.68133545 354.34042358]
[93.03562164 339.34460449]
[93.38990021 324.34878540]
[93.38990021 309.34878540]
[93.03562164 294.35296631]
[92.68133545 279.35714722]
[89.34660339 272.68087769]
[92.50000000 264.00393677]
[92.50000000 249.00392151]
[92.50000000 234.00392151]
[84.76270294 221.27665710]
[92.50000000 207.47648621]
[92.50000000 192.47648621]
[74.95925140 189.33706665]
[58.34219360 182.90220642]
[43.26179504 173.40930176]
[30.27432823 161.20849609]
[19.85887527 146.74986267]
[12.39963436 130.56674194]
[8.17175865 113.25608063]
[7.33120441 95.45643616]
[-7.54238844 93.51318359]
[-22.41598129 91.56992340]
[-37.28957367 89.62667084]
[-51.97581863 95.51094818]
[-63.59346771 86.19003296]
[-78.46705627 84.24678040]
[-93.34065247 82.30352020]
[-108.21424866 80.36026764]
[-121.75769806 88.95994568]
[-136.87783813 83.59705353]
[-141.97579956 68.38552856]
[-133.14086914 54.99436569]
[-117.15042877 53.69610977]
[-106.27098846 65.48667145]
[-91.39739990 67.42993164]
[-76.52380371 69.37318420]
[-61.65021133 71.31643677]
[-48.02782440 65.29316711]
[-35.34631729 74.75308228]
[-20.47272491 76.69633484]
[-5.59913301 78.63958740]
[9.27445984 80.58284760]
[13.32283020 66.90592194]
[19.41975403 54.01115799]
[27.42113495 42.20330429]
[37.13786697 31.76143456]
[48.34029770 22.93233681]
[60.76367188 15.92467594]
[74.11436462 10.90407658]
[88.07685089 7.98919582]
[102.32112885 7.24892473]
[116.51055145 8.70075893]
[120.36430359 -5.79574251]
[124.21806335 -20.29224396]
[128.07182312 -34.78874588]
[118.57469177 -44.85272217]
[115.34042358 -58.19535828]
[119.11500549 -71.28237152]
[128.80238342 -80.70185089]
[141.77986145 -84.05370331]
[145.97494507 -98.45513916]
[150.17001343 -112.85657501]
[154.36508179 -127.25801086]
[158.56016541 -141.65943909]
[162.75523376 -156.06088257]
[158.33134460 -171.85205078]
[169.98687744 -183.38810730]
[185.73162842 -178.80172729]
[189.36874390 -162.81100464]
[177.15666199 -151.86581421]
[172.96159363 -137.46437073]
[168.76652527 -123.06293488]
[164.57145691 -108.66149902]
[160.37637329 -94.26006317]
[156.18130493 -79.85862732]
[166.63183594 -67.25595093]
[167.55496216 -50.74417877]
[158.39268494 -36.77823639]
[142.56832886 -30.93498611]
[138.71456909 -16.43848610]
[134.86080933 -1.94198442]
[131.00704956 12.55451679]
[146.29634094 19.59603119]
[160.06175232 29.28411674]
[171.85015869 41.29988480]
[181.27355957 55.24782181]
[188.02177429 70.66881561]
[191.87265015 87.05528259]
[206.84649658 86.17000580]
[221.82035828 85.28473663]
[236.79420471 84.39945984]
[250.18243408 74.92910004]
[264.96289062 82.03330231]
[265.93075562 98.40386200]
[252.09033203 107.20015717]
[237.67948914 99.37331390]
[222.70562744 100.25859070]
[207.73178101 101.14385986]
[192.75791931 102.02913666]
[191.81709290 113.33306885]
[189.50389099 124.43772125]
[185.85290527 135.17710876]
[180.91868591 145.39070129]
[174.77499390 154.92585754]
[167.51365662 163.64004517]
[159.24320984 171.40303040]
[150.08726501 178.09875488]
[140.18266296 183.62716675]
[129.67747498 187.90560913]
[118.72870636 190.87016296]
[107.50000000 192.47648621]
[107.50000000 207.47648621]
[115.23729706 221.27665710]
[107.50000000 234.00392151]
[107.50000000 249.00392151]
[107.50000000 264.00393677]
[107.67715454 279.00286865]
[108.03143311 293.99868774]
[108.38571930 308.99450684]
[111.56726837 314.96624756]
[111.23248291 320.76031494]
[108.38571930 324.70306396]
[108.03143311 339.69888306]
[107.67715454 354.69470215]
[107.32286835 369.69052124]
[118.41111755 380.95223999]
[118.20490265 396.75518799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 130]
[5 129]
[6 128]
[7 127]
[8 124]
[9 123]
[10 122]
[12 121]
[13 120]
[14 119]
[16 117]
[17 116]
[25 47]
[26 46]
[27 45]
[28 44]
[30 42]
[31 41]
[32 40]
[33 39]
[57 87]
[58 86]
[59 85]
[60 84]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
