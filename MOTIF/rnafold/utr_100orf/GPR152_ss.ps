%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAAUGGACACUACCAUGGAAGCUGACCUGGGUGCCACUGGCCACAGGCCCCGCACAGAGCUUGAUGAUGAGGACUCCUACCCCCAAGGUGGCUGGGACACGG\
) } def
/len { sequence length } bind def

/coor [
[38.36661530 287.13082886]
[35.71326065 272.36737061]
[33.05990601 257.60391235]
[25.85522842 255.52001953]
[11.44587231 251.35223389]
[4.24119425 249.26834106]
[-5.88355064 260.33584595]
[-16.00829506 271.40335083]
[-26.13304138 282.47085571]
[-25.18037224 298.24639893]
[-35.72411728 310.01943970]
[-51.50885391 310.80526733]
[-63.16978455 300.13766479]
[-63.78868484 284.34548950]
[-52.99836731 272.79800415]
[-37.20053864 272.34609985]
[-27.07579422 261.27859497]
[-16.95104980 250.21110535]
[-6.82630491 239.14360046]
[4.75376368 230.62509155]
[16.94822693 227.48344421]
[27.72249413 229.15451050]
[35.47621155 234.39378357]
[41.11362457 220.49343872]
[46.75103760 206.59309387]
[52.38845062 192.69274902]
[51.97902679 185.19114685]
[58.40438461 178.46803284]
[64.45123291 164.74084473]
[70.49808502 151.01365662]
[76.54493713 137.28648376]
[82.38771057 123.47119904]
[88.02513123 109.57085419]
[87.80285645 94.57250214]
[81.75600433 80.84531403]
[75.70915222 67.11813354]
[69.66230011 53.39094543]
[57.76926422 51.27335358]
[48.51800537 43.69467926]
[44.18951035 32.67610931]
[45.77616501 21.06665611]
[52.75697708 11.80672359]
[47.53395081 -2.25457168]
[42.31092834 -16.31586647]
[37.08790207 -30.37716103]
[25.90473366 -43.11973190]
[35.05350876 -57.39335251]
[51.30194473 -52.55344391]
[51.14919662 -35.60018539]
[56.37222290 -21.53889084]
[61.59524918 -7.47759628]
[66.81827545 6.58369875]
[83.81699371 13.05112743]
[90.96272278 30.11798859]
[83.38948059 47.34409332]
[89.43633270 61.07127762]
[95.48318481 74.79846191]
[101.53003693 88.52565002]
[104.27328491 86.57094574]
[107.72274780 85.29539490]
[120.16383362 76.91569519]
[132.60491943 68.53598785]
[144.92045593 59.97285461]
[157.10777283 51.22816086]
[169.29507446 42.48346710]
[170.29785156 26.87807083]
[181.13430786 15.60397720]
[196.68780518 13.98447132]
[209.61444092 22.78423309]
[213.81068420 37.84828568]
[207.29516602 52.06384277]
[193.14433289 58.71875381]
[178.03976440 54.67077255]
[165.85246277 63.41546249]
[153.66516113 72.16015625]
[150.00683594 78.72203827]
[140.98461914 80.97707367]
[128.54353333 89.35677338]
[116.10244751 97.73648071]
[131.08552551 98.44863129]
[141.72317505 109.02410126]
[142.52313232 124.00275421]
[133.07238770 135.65107727]
[118.25037384 137.95501709]
[105.70974731 129.72503662]
[101.92546844 115.20826721]
[96.28805542 129.10861206]
[95.93975830 138.40184021]
[90.27212524 143.33332825]
[84.22527313 157.06051636]
[78.17842102 170.78768921]
[72.13156891 184.51487732]
[66.28879547 198.33015442]
[60.65138245 212.23049927]
[55.01396942 226.13084412]
[49.37655258 240.03118896]
[47.82336426 254.95056152]
[50.47671890 269.71401978]
[53.13007355 284.47747803]
[66.78733063 292.09411621]
[72.30517578 306.72586060]
[67.07824707 321.46401978]
[53.57453918 329.34967041]
[38.17009354 326.65951538]
[28.13841629 314.66369629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[6 19]
[7 18]
[8 17]
[9 16]
[23 96]
[24 95]
[25 94]
[26 93]
[28 92]
[29 91]
[30 90]
[31 89]
[32 87]
[33 86]
[34 58]
[35 57]
[36 56]
[37 55]
[42 52]
[43 51]
[44 50]
[45 49]
[60 79]
[61 78]
[62 77]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
