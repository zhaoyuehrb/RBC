%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCGCAAACCCGGAAGACGUGUUCGGGCAGCUGGAGUGUACGGGCCCGCGGGCCACGGCCAUGCAGCCCCUGGAGGUAGGUCUGGUUCCCGCUCCAGCUGGGGAGCCGAGACUGACCCGCUGGCUGCGGAGAGGCAGUGGGAUCUUGGCGCACCUGGUAG\
) } def
/len { sequence length } bind def

/coor [
[241.12788391 338.31323242]
[226.71699524 342.47573853]
[211.76086426 341.32946777]
[198.15260315 335.01956177]
[187.61471558 324.34469604]
[181.48109436 310.65603638]
[180.52810669 295.68634033]
[184.87640381 281.33044434]
[193.97549438 269.40548706]
[197.49609375 254.82450867]
[187.41598511 265.93267822]
[177.33586121 277.04083252]
[167.25575256 288.14898682]
[157.17562866 299.25714111]
[147.09550476 310.36529541]
[149.39088440 325.83349609]
[141.16247559 339.13113403]
[126.29547882 343.97949219]
[111.80963898 338.08929443]
[104.54472351 324.24172974]
[107.93100739 308.97518921]
[120.36959076 299.49807739]
[135.98735046 300.28518677]
[146.06747437 289.17703247]
[156.14758301 278.06887817]
[166.22770691 266.96069336]
[176.30781555 255.85255432]
[186.38793945 244.74438477]
[187.26011658 229.76976013]
[178.53773499 217.56648254]
[169.81535339 205.36320496]
[161.09297180 193.15992737]
[152.37059021 180.95663452]
[143.64820862 168.75335693]
[134.92582703 156.55007935]
[126.20344543 144.34680176]
[117.48106384 132.14350891]
[108.75868225 119.94023132]
[100.03630066 107.73695374]
[94.54183197 115.86491394]
[84.01992035 120.27835846]
[70.60263824 118.73287964]
[57.26986313 110.06350708]
[45.06658173 101.34112549]
[32.86330032 92.61874390]
[20.66002083 83.89636230]
[7.79926825 85.23585510]
[-2.19422340 77.67928314]
[-4.27085257 65.73104095]
[-16.30270004 56.77365875]
[-28.33454895 47.81628036]
[-40.45268250 38.97598648]
[-52.65596390 30.25360489]
[-64.85924530 21.53122330]
[-81.22486115 20.48301506]
[-88.25640106 5.66784048]
[-78.72042847 -7.67371988]
[-62.42672729 -5.81701183]
[-56.13686371 9.32794285]
[-43.93358231 18.05032349]
[-31.73030090 26.77270508]
[-24.42395973 28.11039734]
[-19.37716866 35.78443146]
[-7.34532166 44.74181366]
[4.68652630 53.69919205]
[22.18181419 54.76987076]
[29.38240242 71.69308472]
[41.58568192 80.41545868]
[53.78896332 89.13784027]
[65.99224854 97.86022186]
[72.69448853 94.49423218]
[86.09897614 87.76224518]
[92.80122375 84.39624786]
[93.09209442 69.39907074]
[93.38296509 54.40188980]
[93.67383575 39.40470886]
[86.20558929 25.45709610]
[94.18824005 12.88225365]
[94.47910309 -2.11492562]
[86.08703613 -16.20411110]
[94.32765198 -30.38241577]
[110.72370911 -30.06441498]
[118.40836334 -15.57723999]
[109.47628784 -1.82405555]
[109.18541718 13.17312431]
[116.67446136 26.04803848]
[108.67101288 39.69557953]
[108.38014221 54.69276047]
[108.08927155 69.68994141]
[107.79840088 84.68711853]
[112.23957825 99.01457214]
[120.96195984 111.21785736]
[129.68434143 123.42113495]
[138.40672302 135.62442017]
[147.12910461 147.82769775]
[155.85148621 160.03097534]
[164.57386780 172.23425293]
[173.29624939 184.43754578]
[182.01863098 196.64082336]
[190.74101257 208.84410095]
[199.46339417 221.04737854]
[223.13500977 234.13017273]
[237.58557129 238.15275574]
[252.63208008 229.27589417]
[269.12548828 233.91250610]
[277.02520752 248.73435974]
[291.55105591 252.47596741]
[306.07690430 256.21759033]
[320.60275269 259.95919800]
[335.12860107 263.70083618]
[349.65444946 267.44244385]
[364.18029785 271.18405151]
[371.65942383 265.29943848]
[380.87734985 263.57116699]
[389.71603394 266.26635742]
[396.20425415 272.65045166]
[398.95721436 281.18157959]
[413.24093628 285.76147461]
[427.52465820 290.34136963]
[441.80838013 294.92126465]
[456.09210205 299.50115967]
[470.37582397 304.08105469]
[484.65954590 308.66091919]
[500.16311646 305.50665283]
[509.92022705 316.76046753]
[524.20397949 321.34033203]
[538.14135742 313.88882446]
[553.24108887 318.55490112]
[560.54486084 332.57028198]
[555.71942139 347.61987305]
[541.62756348 354.77502441]
[526.62982178 349.79074097]
[519.62408447 335.62405396]
[505.34036255 331.04415894]
[490.85842896 334.52603149]
[480.07965088 322.94464111]
[465.79592896 318.36477661]
[451.51220703 313.78488159]
[437.22848511 309.20498657]
[422.94476318 304.62509155]
[408.66107178 300.04519653]
[394.37734985 295.46530151]
[374.71420288 301.64883423]
[360.43869019 285.70989990]
[345.91284180 281.96829224]
[331.38699341 278.22668457]
[316.86114502 274.48504639]
[302.33529663 270.74343872]
[287.80944824 267.00183105]
[273.28359985 263.26019287]
[263.18673706 271.31124878]
[250.10020447 272.07293701]
[238.80653381 265.04171753]
[233.56298828 252.60331726]
[219.11242676 248.58073425]
[229.86544800 259.03884888]
[243.92166138 264.27554321]
[255.25486755 274.10195923]
[262.43054199 287.27426147]
[264.54040527 302.12515259]
[261.31735229 316.77478027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[43 70]
[44 69]
[45 68]
[46 67]
[49 65]
[50 64]
[51 63]
[52 61]
[53 60]
[54 59]
[73 90]
[74 89]
[75 88]
[76 87]
[78 85]
[79 84]
[102 155]
[103 154]
[106 150]
[107 149]
[108 148]
[109 147]
[110 146]
[111 145]
[112 144]
[117 142]
[118 141]
[119 140]
[120 139]
[121 138]
[122 137]
[123 136]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
