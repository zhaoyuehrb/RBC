%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGCUUGCAUUAAAGGACUUCCUCAUCCUUUUUUUCAUGAAACUGAGCUUGCUUAAUCAGAGAUGGAGCAAACUGACUGCAAACCCUACCAGCCUCUACCAAAAGUCAAGCAUGAAAUGGAUCUAGCUUACACCAGUUCUUCUGAUGAGAGUGAAGAUGGAA\
) } def
/len { sequence length } bind def

/coor [
[-8.07723427 462.75415039]
[-10.95420361 474.39355469]
[-17.58457375 484.34136963]
[-27.16479301 491.43441772]
[-38.54808807 494.85290527]
[-50.38171387 494.21514893]
[-56.74254990 507.79971313]
[-63.10338593 521.38421631]
[-57.48659515 536.15673828]
[-64.03679657 550.53973389]
[-78.86786652 556.00006104]
[-93.18080139 549.29815674]
[-98.48398590 534.41015625]
[-91.63114166 520.16888428]
[-76.68792725 515.02343750]
[-70.32709503 501.43887329]
[-63.96625519 487.85430908]
[-75.00018311 473.54266357]
[-77.29455566 455.53231812]
[-70.13478088 438.75573730]
[-55.40725708 427.85107422]
[-37.10328674 425.88009644]
[-31.52835083 411.95458984]
[-25.95341492 398.02905273]
[-20.51129913 384.05111694]
[-15.20249748 370.02197266]
[-17.93456841 355.38006592]
[-5.81390238 345.21148682]
[-0.50510120 331.18237305]
[4.66990423 317.10333252]
[9.71064472 302.97564697]
[14.75138569 288.84799194]
[19.79212761 274.72033691]
[24.83286858 260.59265137]
[19.93205070 249.50228882]
[24.05109215 237.67251587]
[35.49007034 231.64939880]
[40.79887390 217.62026978]
[46.10767365 203.59112549]
[45.53126907 196.18865967]
[51.65340424 189.34703064]
[57.22834015 175.42150879]
[62.80327988 161.49598694]
[68.11208344 147.46685791]
[73.15282440 133.33918762]
[78.19356537 119.21152496]
[83.23429871 105.08386230]
[79.97608948 90.44200134]
[69.42009735 79.78503418]
[54.21138382 75.42549133]
[50.75186157 60.93822479]
[40.19586563 50.28125763]
[29.63987160 39.62428665]
[19.08387756 28.96731758]
[8.52788258 18.31035042]
[-2.02811217 7.65338135]
[-17.23682594 3.29384089]
[-20.69634819 -11.19342804]
[-31.25234413 -21.85039711]
[-41.80833817 -32.50736618]
[-57.25056839 -39.50550079]
[-54.80075836 -56.28151703]
[-38.00217819 -58.57151031]
[-31.15136909 -43.06335831]
[-20.59537506 -32.40639114]
[-10.03938007 -21.74942207]
[4.41429806 -18.15213966]
[8.62885666 -2.90261316]
[19.18485069 7.75435543]
[29.74084473 18.41132355]
[40.29684067 29.06829262]
[50.85283279 39.72526169]
[61.40882874 50.38222885]
[75.86251068 53.97951126]
[80.07706451 69.22904205]
[90.63305664 79.88600922]
[105.36199188 77.04724121]
[111.20104218 63.23038483]
[117.04009247 49.41352844]
[122.87914276 35.59667587]
[110.72060394 26.69349480]
[100.94347382 15.22595596]
[94.07501984 1.81249034]
[90.48565674 -12.82353210]
[90.36894226 -27.89280891]
[93.73117065 -42.58267212]
[100.39103699 -56.10091782]
[109.98937225 -67.71852112]
[122.00854492 -76.80895996]
[135.80038452 -82.88200378]
[150.62112427 -85.61013031]
[165.67147827 -84.84622955]
[180.13980103 -80.63148499]
[193.24584961 -73.19319916]
[204.28283691 -62.93250275]
[212.65553284 -50.40274811]
[217.91241455 -36.27965164]
[219.76998901 -21.32484818]
[218.12806702 -6.34483290]
[213.07521057 7.85253954]
[204.88391113 20.50162315]
[193.99591064 30.92026901]
[180.99838257 38.54661179]
[166.59228516 42.96937561]
[151.55450439 43.95004272]
[136.69599915 41.43572617]
[130.85694885 55.25258255]
[125.01789856 69.06943512]
[119.17884827 82.88629150]
[128.22506714 94.85148621]
[143.11033630 92.99982452]
[157.99560547 91.14816284]
[172.88088989 89.29650116]
[182.58398438 77.11096191]
[197.70614624 75.44515991]
[209.26341248 84.77068329]
[224.14868164 82.91902161]
[233.66003418 70.29722595]
[249.32194519 68.18058014]
[261.84246826 77.82484436]
[263.79342651 93.50825500]
[254.01731873 105.92611694]
[238.31416321 107.71114349]
[226.00035095 97.80429840]
[211.11506653 99.65596008]
[202.19479370 111.52879333]
[187.12538147 113.61868286]
[174.73254395 104.18177795]
[159.84727478 106.03343964]
[144.96200562 107.88510132]
[130.07672119 109.73675537]
[122.35643768 115.81255341]
[114.06118011 118.39434814]
[106.49134827 117.77475739]
[100.69956970 114.67614746]
[97.36196899 110.12460327]
[92.32122803 124.25226593]
[87.28048706 138.37992859]
[82.23974609 152.50759888]
[83.06079865 159.14184570]
[80.72915649 164.38720703]
[76.72879791 167.07093811]
[71.15386200 180.99644470]
[65.57892609 194.92196655]
[60.13681030 208.89993286]
[54.82800674 222.92906189]
[49.51920700 236.95820618]
[52.92252350 255.03378296]
[38.96053314 265.63339233]
[33.91979218 279.76107788]
[28.87905121 293.88873291]
[23.83831024 308.01638794]
[18.79756927 322.14407349]
[18.85666466 331.32473755]
[13.52403355 336.49114990]
[8.21523285 350.52029419]
[10.56758308 366.16564941]
[-1.17336226 375.33078003]
[-6.48216343 389.35989380]
[-6.59786892 398.54003906]
[-12.02789497 403.60400391]
[-17.60283279 417.52951050]
[-23.17776871 431.45504761]
[-14.54936123 439.92916870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[22 163]
[23 162]
[24 161]
[25 159]
[26 158]
[28 156]
[29 155]
[30 153]
[31 152]
[32 151]
[33 150]
[34 149]
[37 147]
[38 146]
[39 145]
[41 144]
[42 143]
[43 142]
[44 139]
[45 138]
[46 137]
[47 136]
[48 76]
[49 75]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[58 66]
[59 65]
[60 64]
[77 109]
[78 108]
[79 107]
[80 106]
[110 131]
[111 130]
[112 129]
[113 128]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
