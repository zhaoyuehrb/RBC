%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAACUUACUACUUCCAGUCAAUAUGCCGACCUUAGAUGCUCCAGAAGAGAGGCGGAGAAAAUUUAAGUACCGAGGCAAAGAUGUGUCUCUGAGGCGACAGCAGAGGAUGGCGGUCAGUCUGG\
) } def
/len { sequence length } bind def

/coor [
[8.55422592 427.71948242]
[10.20110798 442.80764771]
[6.28253317 457.47082520]
[-2.67154312 469.72598267]
[-15.45015621 477.91571045]
[-30.32510376 480.93240356]
[-45.28467178 478.36807251]
[-58.30569839 470.56951904]
[-67.62719727 458.59146118]
[-71.98851776 444.05380249]
[-70.79981995 428.92266846]
[-64.22187042 415.24438477]
[-53.14428329 404.86886597]
[-39.06520844 399.19931030]
[-23.88872147 399.00244141]
[-18.67914391 384.93615723]
[-13.46956444 370.86987305]
[-8.25998592 356.80358887]
[-19.26658058 346.71478271]
[-25.58916473 333.14385986]
[-26.23604774 318.14562988]
[-21.07754135 304.00430298]
[-10.87046814 292.88543701]
[2.85271478 286.50442505]
[18.01394272 285.86187744]
[23.22352219 271.79559326]
[28.43309975 257.72930908]
[33.64268112 243.66302490]
[38.85225677 229.59674072]
[36.01683807 214.97451782]
[48.06538010 204.72058105]
[53.27495575 190.65429688]
[58.48453522 176.58801270]
[63.69411469 162.52172852]
[62.47916412 159.09640503]
[62.93555450 154.89695740]
[65.41504669 150.75018311]
[69.87055969 147.61048889]
[76.13319397 133.98039246]
[82.39582825 120.35030365]
[88.65846252 106.72020721]
[94.22270203 92.79041290]
[99.07427216 78.59667206]
[91.76428986 67.20277405]
[92.37941742 53.87501907]
[100.46764374 43.51089096]
[112.87245178 39.78818130]
[118.08202362 25.72190094]
[123.29160309 11.65561867]
[128.50119019 -2.41066313]
[133.71076965 -16.47694588]
[131.24797058 -32.10528946]
[142.92388916 -41.35311127]
[148.13346863 -55.41939545]
[153.34304810 -69.48567963]
[141.83523560 -79.32416534]
[134.40179443 -92.48152161]
[131.92308044 -107.36023712]
[134.67921448 -122.16137695]
[142.31857300 -135.10208130]
[153.90251160 -144.63027954]
[168.02067566 -149.61091614]
[182.96266174 -149.46102905]
[188.17224121 -163.52731323]
[193.38182068 -177.59359741]
[185.48271179 -191.08944702]
[188.15757751 -206.49656677]
[200.14340210 -216.54017639]
[215.78085327 -216.47798157]
[227.68641663 -206.33935547]
[230.23864746 -190.91145325]
[222.23243713 -177.47885132]
[207.44810486 -172.38401794]
[202.23852539 -158.31773376]
[197.02894592 -144.25144958]
[208.46391296 -134.63238525]
[215.93194580 -121.65710449]
[218.51493835 -106.88204193]
[215.88215637 -92.08711243]
[208.33233643 -79.06135559]
[196.76000977 -69.38657379]
[182.54948425 -64.24526978]
[167.40931702 -64.27610016]
[162.19973755 -50.20981598]
[156.99017334 -36.14353561]
[159.82559204 -21.52130318]
[147.77703857 -11.26736641]
[142.56745911 2.79891562]
[137.35789490 16.86519814]
[132.14831543 30.93148041]
[126.93872833 44.99776077]
[134.61349487 59.90419388]
[129.07601929 76.08528900]
[113.26801300 83.44824219]
[108.41644287 97.64198303]
[109.61127472 100.58442688]
[109.70914459 104.04360199]
[108.51069641 107.59375763]
[105.98448944 110.73968506]
[102.28855133 112.98284149]
[96.02591705 126.61293793]
[89.76328278 140.24302673]
[83.50064850 153.87312317]
[77.76039886 167.73130798]
[72.55081940 181.79759216]
[67.34123993 195.86387634]
[62.13166046 209.93016052]
[64.59445953 225.55850220]
[52.91854095 234.80632019]
[47.70896149 248.87260437]
[42.49938202 262.93890381]
[37.28980255 277.00515747]
[32.08022308 291.07144165]
[43.16539764 301.43460083]
[49.42155838 315.21514893]
[49.92373276 330.30029297]
[44.62651062 344.39022827]
[34.36626053 355.34890747]
[20.72921371 361.52758789]
[5.80629587 362.01318359]
[0.59671724 376.07946777]
[-4.61286163 390.14575195]
[-9.82244015 404.21203613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 123]
[16 122]
[17 121]
[18 120]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[31 107]
[32 106]
[33 105]
[34 104]
[38 103]
[39 102]
[40 101]
[41 100]
[42 95]
[43 94]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[53 85]
[54 84]
[55 83]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
