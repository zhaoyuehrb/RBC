%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUGAACUGAAUCUCUAGUCCCUGACACCAUGAGAUACUAUGGCAGCUACUACAGAGGCCUGGGAUAUGGCUGUGGAGGCUUUGGUGGUCUGGGCUAUGGCUGUGGCUGUGGAGGCUACAGAUAUGGCU\
) } def
/len { sequence length } bind def

/coor [
[200.44273376 295.90237427]
[191.89651489 308.22964478]
[180.01971436 317.39160156]
[165.92675781 322.52856445]
[150.93998718 323.15850830]
[136.46565247 319.22232056]
[123.86188507 311.08935547]
[114.31133270 299.52270508]
[108.71012878 285.60775757]
[107.58384705 270.65008545]
[111.03816223 256.05325317]
[118.74894714 243.18687439]
[129.99270630 233.25822449]
[143.71440125 227.19892883]
[158.62651062 225.57752991]
[173.32981873 228.54617310]
[186.44601440 235.82734680]
[179.57261658 222.49481201]
[172.69921875 209.16229248]
[165.82582092 195.82975769]
[153.11665344 188.06274414]
[153.67024231 172.25122070]
[146.79684448 158.91868591]
[139.76527405 145.66889954]
[132.57653809 132.50370789]
[125.38780975 119.33852386]
[118.19907379 106.17333984]
[107.02101898 116.67853546]
[92.66445160 115.30769348]
[84.75823975 104.35976410]
[70.10103607 101.17128754]
[55.44383240 97.98280334]
[40.78663254 94.79432678]
[26.12942886 91.60585022]
[12.97118855 100.36006165]
[-2.50657773 97.16407776]
[-11.12118626 83.91402435]
[-7.76174307 68.47090912]
[5.57865381 59.99687195]
[20.98538399 63.51940155]
[29.31790733 76.94864655]
[43.97510910 80.13712311]
[58.63231277 83.32560730]
[73.28952026 86.51408386]
[87.94671631 89.70256042]
[98.53374481 82.52608490]
[112.32682037 85.25666809]
[111.61309814 70.27365875]
[110.89936829 55.29064941]
[110.18563843 40.30764008]
[101.80046082 26.89125252]
[108.92340851 13.81024170]
[108.20968628 -1.17276859]
[107.49595642 -16.15577888]
[106.78222656 -31.13878822]
[106.06849670 -46.12179947]
[103.12979889 -50.67154312]
[102.37546539 -55.41536331]
[103.49885559 -59.46459579]
[105.87725830 -62.19142914]
[106.23422241 -77.18717957]
[106.59118652 -92.18293762]
[94.17695618 -101.49241638]
[89.63779449 -116.33073425]
[94.71910095 -130.99224854]
[107.46701050 -139.83930969]
[122.97969055 -139.47003174]
[135.29220581 -130.02642822]
[139.67013550 -115.13974762]
[134.43006897 -100.53421783]
[121.58694458 -91.82596588]
[121.22997284 -76.83021545]
[120.87300873 -61.83446503]
[121.05150604 -46.83552933]
[121.76523590 -31.85251808]
[122.47896576 -16.86950684]
[123.19269562 -1.88649738]
[123.90641785 13.09651279]
[132.24053955 25.44121361]
[125.16864777 39.59391022]
[125.88237762 54.57691956]
[126.59610748 69.55992889]
[127.30983734 84.54293823]
[131.36425781 98.98460388]
[138.55299377 112.14978790]
[145.74172974 125.31497192]
[152.93046570 138.48016357]
[159.85792542 144.58596802]
[160.12937927 152.04528809]
[167.00277710 165.37782288]
[180.20356750 174.09846497]
[179.15835571 188.95635986]
[186.03175354 202.28889465]
[192.90515137 215.62141418]
[199.77854919 228.95394897]
[209.32890320 240.52075195]
[221.11968994 249.79313660]
[232.91049194 259.06552124]
[244.70127869 268.33789062]
[256.49209595 277.61029053]
[268.28286743 286.88265991]
[283.91342163 289.33145142]
[289.13485718 303.28085327]
[300.92565918 312.55322266]
[312.71646118 321.82562256]
[324.50723267 331.09799194]
[336.29803467 340.37039185]
[348.08883667 349.64276123]
[359.87963867 358.91516113]
[371.67044067 368.18753052]
[387.70663452 367.71829224]
[397.96148682 380.05590820]
[394.56842041 395.73605347]
[380.13021851 402.73022461]
[365.72268677 395.67312622]
[362.39804077 379.97833252]
[350.60723877 370.70596313]
[338.81646729 361.43356323]
[327.02566528 352.16119385]
[315.23486328 342.88879395]
[303.44406128 333.61642456]
[291.65325928 324.34402466]
[279.86248779 315.07165527]
[265.07528687 313.28610229]
[259.01049805 298.67346191]
[247.21969604 289.40109253]
[235.42889404 280.12869263]
[223.63810730 270.85632324]
[211.84730530 261.58392334]
[200.05651855 252.31153870]
[204.72357178 266.56701660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 95]
[18 94]
[19 93]
[20 92]
[22 90]
[23 89]
[24 87]
[25 86]
[26 85]
[27 84]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[47 83]
[48 82]
[49 81]
[50 80]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[60 73]
[61 72]
[62 71]
[96 130]
[97 129]
[98 128]
[99 127]
[100 126]
[101 125]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
