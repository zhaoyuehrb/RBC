%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACCUCUGUCUUUCUGCAUUACUCUUUUUCCUGGUGAUCUUACUGCCUUCAGGAAAAGGUAUGUUUGGGAAUGAUGGAGUCAAAGUUCGCACCUGCA\
) } def
/len { sequence length } bind def

/coor [
[142.74772644 264.95538330]
[142.74682617 260.65863037]
[144.37409973 256.18844604]
[141.13383484 241.54261780]
[137.89356995 226.89677429]
[134.65330505 212.25093079]
[130.28507996 197.90106201]
[124.81530762 183.93391418]
[119.34553528 169.96675110]
[113.87576294 155.99958801]
[108.40599060 142.03242493]
[102.93621826 128.06526184]
[97.46644592 114.09809875]
[86.66234589 105.22325134]
[88.56639862 91.37167358]
[83.09661865 77.40451050]
[77.62684631 63.43734741]
[72.15707397 49.47018814]
[57.04999161 47.07786560]
[45.24663925 37.50824356]
[39.85389328 23.40914154]
[42.22651672 8.60283852]
[51.62843323 -2.95006394]
[46.15866089 -16.91722488]
[31.95454979 -23.31105232]
[26.60639000 -37.55365753]
[32.78946304 -51.05570221]
[27.31968880 -65.02286530]
[21.84991646 -78.99002838]
[16.38014412 -92.95718384]
[10.91037083 -106.92434692]
[5.44059801 -120.89151001]
[-0.02917473 -134.85867310]
[-5.49894762 -148.82583618]
[-10.96872044 -162.79298401]
[-16.43849373 -176.76014709]
[-21.90826607 -190.72731018]
[-37.10696793 -190.98782349]
[-51.04705429 -197.04937744]
[-61.60276031 -207.98764038]
[-67.16442108 -222.13459778]
[-66.88391876 -237.33293152]
[-60.80403137 -251.26504517]
[-49.85189819 -261.80633545]
[-35.69763565 -267.34939575]
[-20.49967194 -267.04888916]
[-6.57558155 -260.95068359]
[3.95131111 -249.98469543]
[9.47573090 -235.82315063]
[9.15524483 -220.62559509]
[3.03872466 -206.70954895]
[-7.94110537 -196.19708252]
[-2.47133255 -182.22991943]
[2.99844050 -168.26275635]
[8.46821308 -154.29560852]
[13.93798637 -140.32844543]
[19.40775871 -126.36128235]
[24.87753105 -112.39411926]
[30.34730530 -98.42695618]
[35.81707764 -84.45980072]
[41.28684998 -70.49263763]
[46.75662231 -56.52547455]
[60.46441269 -50.81302643]
[66.21051025 -36.72625732]
[60.12582016 -22.38699722]
[65.59559631 -8.41983700]
[80.34256744 -6.32404184]
[92.13896942 2.93343544]
[97.75488281 16.94514084]
[95.58913422 31.98529816]
[86.12423706 44.00041580]
[91.59400940 57.96757507]
[97.06378174 71.93473816]
[102.53355408 85.90190125]
[113.33765411 94.77674866]
[111.43360138 108.62832642]
[116.90338135 122.59548950]
[122.37315369 136.56265259]
[127.84292603 150.52981567]
[133.31269836 164.49697876]
[138.78247070 178.46412659]
[144.25224304 192.43128967]
[147.71290588 194.80993652]
[150.10145569 197.82470703]
[151.34957886 201.09280396]
[151.51042175 204.24571228]
[150.74508667 206.96482849]
[149.29914856 209.01066589]
[152.53941345 223.65650940]
[155.77967834 238.30235291]
[159.01994324 252.94819641]
[163.16447449 267.36425781]
[168.19721985 281.49478149]
[181.03039551 291.70465088]
[178.33769226 307.88122559]
[162.88912964 313.38342285]
[150.57687378 302.55102539]
[154.06671143 286.52752686]
[149.03395081 272.39700317]
[146.36164856 271.09197998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 89]
[6 88]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[15 74]
[16 73]
[17 72]
[18 71]
[23 66]
[24 65]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
