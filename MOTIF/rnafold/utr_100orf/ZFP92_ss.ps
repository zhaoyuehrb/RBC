%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGCCAUUCUCCUGACCACGAGACCCAAGGUGCCAGUAUCUUUUGAGGAUGUGUCCGUGUACUUCACAAAGACAGAAUGGAAGCUUCUGGACCUCA\
) } def
/len { sequence length } bind def

/coor [
[27.48775864 212.42677307]
[17.06552124 211.92358398]
[6.87922812 222.93446350]
[-3.30706501 233.94534302]
[-13.32088757 245.11329651]
[-23.15981674 256.43563843]
[-32.99874496 267.75799561]
[-29.37447357 282.84588623]
[-35.34190369 297.16961670]
[-48.60643768 305.22143555]
[-64.06758881 303.90524292]
[-75.78023529 293.72714233]
[-79.24061584 278.60083008]
[-73.11815643 264.34268188]
[-59.76705551 256.43521118]
[-44.32109070 257.91906738]
[-34.48215866 246.59671021]
[-24.64323044 235.27436829]
[-22.59584999 228.03326416]
[-14.31794262 223.75904846]
[-4.13164997 212.74816895]
[6.05464315 201.73728943]
[8.73712635 182.69477844]
[27.82804680 176.60205078]
[37.31009293 164.97920227]
[46.79214096 153.35633850]
[45.03817368 138.60984802]
[54.48874283 126.68754578]
[69.96811676 124.94780731]
[79.45016479 113.32495117]
[88.93221283 101.70209503]
[98.23235321 89.93318176]
[107.34834290 78.02104950]
[116.46433258 66.10892487]
[125.58032990 54.19680405]
[127.45196533 35.96101379]
[143.76484680 29.70069695]
[152.50595093 17.51082993]
[161.24707031 5.32096052]
[154.99948120 -11.54158306]
[159.94973755 -28.66829681]
[173.98413086 -39.40911484]
[191.49948120 -39.70762634]
[199.46585083 -52.41734695]
[207.43222046 -65.12706757]
[215.39859009 -77.83679199]
[223.36494446 -90.54650879]
[231.13269043 -103.37858582]
[238.69993591 -116.32991028]
[246.26718140 -129.28123474]
[253.83442688 -142.23255920]
[261.40167236 -155.18388367]
[268.76657104 -168.25132751]
[275.92736816 -181.43173218]
[269.12942505 -195.38047791]
[271.86178589 -210.65509033]
[283.07379150 -221.38217163]
[298.45422363 -223.43695068]
[312.08895874 -216.02929688]
[318.73519897 -202.00762939]
[315.83731079 -186.76356506]
[304.50958252 -176.15873718]
[289.10778809 -174.27093506]
[281.94699097 -161.09053040]
[281.51214600 -153.57810974]
[274.35299683 -147.61663818]
[266.78573608 -134.66531372]
[259.21850586 -121.71398926]
[251.65126038 -108.76266479]
[244.08401489 -95.81134033]
[243.41575623 -88.31607819]
[236.07467651 -82.58013916]
[228.10830688 -69.87042236]
[220.14193726 -57.16070175]
[212.17556763 -44.45098114]
[204.20919800 -31.74126053]
[210.43843079 -21.09130669]
[211.48446655 -8.72466850]
[207.08119202 2.95663404]
[198.02709961 11.65659904]
[186.04121399 15.63648701]
[173.43693542 14.06207561]
[164.69583130 26.25194550]
[155.95471191 38.44181442]
[157.59529114 50.53836060]
[150.26054382 60.79633713]
[137.49244690 63.31279373]
[128.37646484 75.22492218]
[119.26046753 87.13704681]
[110.14447784 99.04917145]
[108.08241272 107.00170898]
[100.55506897 111.18413544]
[91.07302094 122.80699158]
[81.59097290 134.42985535]
[82.99504089 149.94328308]
[73.21332550 161.59542847]
[58.41499710 162.83839417]
[48.93294907 174.46124268]
[39.45090485 186.08410645]
[41.18886185 197.04701233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 18]
[6 17]
[7 16]
[24 99]
[25 98]
[26 97]
[29 94]
[30 93]
[31 92]
[32 90]
[33 89]
[34 88]
[35 87]
[37 84]
[38 83]
[39 82]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
