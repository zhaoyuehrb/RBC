%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCGGCGGGUGACGGUGCGGACGGGUCAGGAGCGUAGAGGCGGCGGCAAAAUGGCGGCGCCUGAGGAGCGGGAUCUAACCCAGGAGCAGACAGAGAAGCUGCUGCAGUUUCAGGAUCUCACUGGCAUCGAAUCUAUGGAUCAGUGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[134.47354126 604.68933105]
[138.96202087 590.19042969]
[148.38807678 578.29443359]
[161.47689819 570.61022949]
[159.03976440 555.80957031]
[156.60261536 541.00885010]
[154.16548157 526.20819092]
[144.49822998 518.87438965]
[142.37559509 506.51953125]
[149.48109436 495.70791626]
[147.34637451 480.86059570]
[145.21165466 466.01327515]
[143.07691956 451.16595459]
[133.56129456 443.63650513]
[131.69113159 431.24090576]
[139.01568604 420.57647705]
[137.18426514 405.68872070]
[135.35284424 390.80093384]
[133.52143860 375.91314697]
[131.69001770 361.02536011]
[129.85861206 346.13760376]
[127.87543488 331.26928711]
[125.74070740 316.42196655]
[113.70019531 307.72933960]
[111.32377625 292.70245361]
[120.52303314 280.13220215]
[118.38830566 265.28488159]
[116.25358582 250.43754578]
[114.11886597 235.59022522]
[111.98413849 220.74290466]
[100.40416718 207.59106445]
[107.30946350 190.55075073]
[104.87232208 175.75006104]
[102.43517303 160.94937134]
[99.99803162 146.14869690]
[97.56089020 131.34800720]
[82.73002625 131.42178345]
[67.78250122 124.15540314]
[56.38232803 109.68274689]
[51.95073700 89.93685913]
[56.80986404 68.42012787]
[44.35911179 60.05479813]
[31.90835953 51.68946838]
[19.45760536 43.32413864]
[7.00685263 34.95880890]
[-8.76298809 33.68495560]
[-15.01225853 20.16475296]
[-27.46301079 11.79942226]
[-43.23285294 10.52557087]
[-49.48212051 -2.99463224]
[-61.93287659 -11.35996246]
[-78.45212555 -15.17450142]
[-79.35964203 -32.10414124]
[-63.34284592 -37.66278458]
[-53.56754684 -23.81071472]
[-41.11679077 -15.44538498]
[-26.23751259 -14.76987743]
[-19.09768105 -0.65133041]
[-6.64692831 7.71399975]
[8.23235130 8.38950729]
[15.37218285 22.50805473]
[27.82293510 30.87338448]
[40.27368927 39.23871613]
[52.72444153 47.60404587]
[65.17519379 55.96937561]
[71.89891815 52.64649200]
[64.98291016 39.33601761]
[54.69724274 28.41790771]
[61.74782181 15.17821980]
[76.54788971 17.61910820]
[78.97356415 32.42179871]
[85.34636688 46.00072861]
[92.07009125 42.67784882]
[92.98751068 27.70593071]
[93.90493774 12.73401260]
[83.24762726 1.06365478]
[84.04740906 -14.72038460]
[95.82978821 -25.25371552]
[111.60449219 -24.28709793]
[122.01266479 -12.39401150]
[120.87931824 3.36958861]
[108.87685394 13.65143681]
[107.95943451 28.62335587]
[107.04200745 43.59527206]
[113.73149109 46.98656082]
[120.51428986 33.60771179]
[133.89302063 40.39073563]
[127.11045074 53.76914215]
[133.79992676 57.16043091]
[145.33418274 47.57080460]
[156.86845398 37.98118210]
[168.40270996 28.39155769]
[173.03746033 20.44879913]
[180.27145386 18.72686577]
[191.99893188 9.37451744]
[203.72639465 0.02217079]
[206.94424438 -15.69485760]
[221.30345154 -22.84976959]
[235.78886414 -15.95392990]
[239.28849792 -0.29723606]
[229.11775208 12.10983658]
[213.07875061 11.74964333]
[201.35127258 21.10198975]
[189.62379456 30.45433617]
[177.99232483 39.92581558]
[166.45806885 49.51543808]
[154.92381287 59.10506439]
[143.38955688 68.69468689]
[140.92472839 111.36458588]
[112.36157990 128.91085815]
[114.79872131 143.71154785]
[117.23586273 158.51223755]
[119.67300415 173.31292725]
[122.11014557 188.11360168]
[132.14251709 196.28248596]
[133.84034729 208.70285034]
[126.83145905 218.60818481]
[128.96618652 233.45550537]
[131.10090637 248.30282593]
[133.23562622 263.15014648]
[135.37034607 277.99746704]
[147.73841858 287.46682739]
[149.69183350 302.55453491]
[140.58802795 314.28723145]
[142.72274780 329.13455200]
[147.06515503 337.24084473]
[144.74638367 344.30618286]
[146.57780457 359.19396973]
[148.40921021 374.08172607]
[150.24063110 388.96951294]
[152.07203674 403.85729980]
[153.90345764 418.74505615]
[165.32984924 433.14968872]
[157.92424011 449.03125000]
[160.05897522 463.87857056]
[162.19369507 478.72589111]
[164.32841492 493.57321167]
[176.04626465 507.74176025]
[168.96615601 523.77105713]
[171.40330505 538.57171631]
[173.84043884 553.37243652]
[176.27758789 568.17309570]
[191.13919067 571.25488281]
[203.88182068 579.50042725]
[212.78216553 591.79467773]
[216.63652039 606.47491455]
[214.92361450 621.55572510]
[207.87509155 634.99749756]
[196.44421387 644.98248291]
[182.17692566 650.16021729]
[167.00274658 649.83044434]
[152.97386169 644.03778076]
[141.98756409 633.56567383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 142]
[5 141]
[6 140]
[7 139]
[10 137]
[11 136]
[12 135]
[13 134]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 125]
[23 124]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[47 59]
[48 58]
[50 56]
[51 55]
[73 84]
[74 83]
[75 82]
[89 108]
[90 107]
[91 106]
[92 105]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
