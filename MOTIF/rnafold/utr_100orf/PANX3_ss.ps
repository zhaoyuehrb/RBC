%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCACUUGCACACACAGCUGCAGAGUACAUGCUCUCAGAUGCCCUGCUGCCUGACCGCAGGGGACCCCGCCUCAAAGGACUGCGUCUGGAACUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[-45.95677185 236.02578735]
[-58.78884506 243.79353333]
[-71.62091827 251.56127930]
[-84.45299530 259.32901001]
[-90.30240631 266.58001709]
[-97.80715179 267.13162231]
[-110.87459564 274.49655151]
[-123.94203949 281.86145020]
[-136.89337158 289.42871094]
[-149.72544861 297.19644165]
[-162.55751038 304.96417236]
[-175.38958740 312.73193359]
[-176.55699158 328.20501709]
[-186.62194824 340.01504517]
[-201.71427917 343.62075806]
[-216.03067017 337.63574219]
[-224.06617737 324.36132812]
[-222.73098755 308.90179443]
[-212.53851318 297.20166016]
[-197.40795898 293.75988770]
[-183.15733337 299.89984131]
[-170.32525635 292.13211060]
[-157.49317932 284.36437988]
[-144.66111755 276.59661865]
[-140.49578857 270.32958984]
[-131.30694580 268.79400635]
[-118.23950958 261.42910767]
[-105.17206573 254.06419373]
[-92.22074127 246.49694824]
[-79.38866425 238.72920227]
[-66.55658722 230.96145630]
[-53.72451401 223.19371033]
[-51.30613708 200.87324524]
[-33.39729691 186.92121887]
[-10.66614151 190.10565186]
[0.18498939 179.74935913]
[2.89818501 172.73051453]
[11.53834534 169.24623108]
[22.70630646 159.23240662]
[33.87426758 149.21858215]
[45.04222870 139.20477295]
[56.21019363 129.19094849]
[67.37815094 119.17712402]
[78.54611206 109.16329956]
[75.52768707 83.20918274]
[101.28081512 63.99421310]
[105.87167358 49.71401596]
[102.72930145 34.20801163]
[113.99058533 24.45953941]
[118.58144379 10.17934418]
[123.17230225 -4.10085297]
[127.76316071 -18.38105011]
[120.32234955 -32.32414246]
[125.00002289 -47.42033005]
[139.02099609 -54.71331406]
[154.06689453 -49.87629700]
[161.21122742 -35.77899551]
[156.21540833 -20.78508568]
[142.04336548 -13.79019070]
[137.45249939 0.49000594]
[132.86164856 14.77020264]
[128.27078247 29.05039978]
[131.74151611 43.53498459]
[120.15187073 54.30487442]
[115.56100464 68.58506775]
[120.21108246 74.46952820]
[135.05328369 72.29951477]
[129.51123047 86.23844147]
[134.16130066 92.12290192]
[149.11596680 90.95764160]
[157.11883545 77.66351318]
[171.42047119 71.64331818]
[186.52160645 75.21194458]
[196.61555481 86.99718475]
[197.82098389 102.46736908]
[189.67437744 115.67389679]
[175.30827332 121.53858948]
[160.24673462 117.80635834]
[150.28121948 105.91230774]
[135.32655334 107.07756805]
[125.76916504 120.37918854]
[112.37944794 126.97359467]
[98.91020966 126.48136139]
[88.55993652 120.33126068]
[77.39197540 130.34507751]
[66.22401428 140.35890198]
[55.05605316 150.37272644]
[43.88809204 160.38655090]
[32.72013092 170.40037537]
[21.55216789 180.41419983]
[10.54128933 190.60049438]
[-0.30984131 200.95678711]
[2.57647181 208.80189514]
[3.14836740 217.11413574]
[1.37534106 225.22723389]
[-2.58576179 232.49514771]
[-8.40449429 238.34353638]
[-15.60432816 242.31515503]
[-23.60165977 244.10552979]
[-31.75310516 243.58630371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[6 28]
[7 27]
[8 26]
[9 24]
[10 23]
[11 22]
[12 21]
[35 92]
[36 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[46 65]
[47 64]
[49 62]
[50 61]
[51 60]
[52 59]
[69 80]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
