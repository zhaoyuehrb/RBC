%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAGCCAGAAGCUGGCUGGUGAGGAUAAAGAUUCAGAACCGGCAGCUGAUGGACCUGCAGCUUCUGAGGACCCAAGUGCCACUGAGUCAGACCUGC\
) } def
/len { sequence length } bind def

/coor [
[-89.11560822 335.36785889]
[-96.46937561 342.52029419]
[-105.65013123 347.02972412]
[-115.74653625 348.46920776]
[-125.76270294 346.71551514]
[-134.71647644 341.95941162]
[-146.19047546 351.62106323]
[-157.66445923 361.28271484]
[-169.13844299 370.94436646]
[-180.61242676 380.60601807]
[-192.08642578 390.26766968]
[-203.56040955 399.92935181]
[-211.78176880 414.75653076]
[-228.30540466 410.96102905]
[-229.23243713 394.03247070]
[-213.22206116 388.45535278]
[-201.74807739 378.79370117]
[-190.27409363 369.13204956]
[-178.80009460 359.47036743]
[-167.32611084 349.80871582]
[-155.85212708 340.14706421]
[-144.37814331 330.48541260]
[-147.58180237 310.64916992]
[-138.40774536 292.62271118]
[-120.24761963 283.41729736]
[-100.02167511 286.71719360]
[-90.18274689 275.39483643]
[-80.34381866 264.07250977]
[-84.84820557 252.58618164]
[-83.96603394 240.20678711]
[-77.80649567 229.34852600]
[-67.51407623 222.15602112]
[-55.05638123 220.08076477]
[-42.84810638 223.58854675]
[-32.32430649 212.89979553]
[-21.80050278 202.21102905]
[-11.27670002 191.52227783]
[-0.75289714 180.83351135]
[9.77090549 170.14476013]
[20.29470825 159.45599365]
[18.74874496 150.39971924]
[21.68720627 141.54808044]
[28.54400063 135.02200317]
[37.79850006 132.44960022]
[47.31166840 134.56135559]
[58.78565598 124.89969635]
[70.25964355 115.23803711]
[81.73363495 105.57638550]
[83.07607269 91.14918518]
[94.15957642 81.81632996]
[108.60471344 82.94963074]
[120.07869720 73.28797150]
[122.79740143 66.94543457]
[127.64339447 63.56518936]
[132.57963562 63.40936279]
[144.63209534 54.47972870]
[151.11441040 40.04746628]
[165.94680786 38.68770599]
[177.99926758 29.75807381]
[190.05172729 20.82843971]
[195.20004272 13.06394291]
[202.62074280 11.81544399]
[214.94506836 3.26496053]
[227.26940918 -5.28552341]
[236.83657837 -19.28214645]
[252.93467712 -13.96351147]
[252.28028870 2.97780252]
[235.81988525 7.03881121]
[223.49555969 15.58929539]
[211.17121887 24.13978004]
[198.98135376 32.88089371]
[186.92889404 41.81052780]
[174.87644958 50.74016190]
[169.25621033 64.53371429]
[153.56172180 66.53218079]
[141.50927734 75.46181488]
[129.74035645 84.76196289]
[118.26636505 94.42361450]
[116.92392731 108.85081482]
[105.84042358 118.18367004]
[91.39528656 117.05036926]
[79.92130280 126.71202850]
[68.44731140 136.37368774]
[56.97332382 146.03533936]
[51.23423004 166.55616760]
[30.98346710 169.97979736]
[20.45966530 180.66856384]
[9.93586254 191.35731506]
[-0.58794034 202.04608154]
[-11.11174297 212.73483276]
[-21.63554573 223.42359924]
[-32.15934753 234.11235046]
[-28.59914017 251.73912048]
[-36.14255142 267.89233398]
[-51.67127991 276.32962036]
[-69.02146912 273.91143799]
[-78.86039734 285.23376465]
[-88.69933319 296.55612183]
[-84.08702850 305.85317993]
[-82.58589172 316.09204102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[26 98]
[27 97]
[28 96]
[34 92]
[35 91]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[45 84]
[46 83]
[47 82]
[48 81]
[51 78]
[52 77]
[55 76]
[56 75]
[58 73]
[59 72]
[60 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
