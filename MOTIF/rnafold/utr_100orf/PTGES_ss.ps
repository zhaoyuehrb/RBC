%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCUCCUCUGUCGAGCUGAUCACACCCACAGUUGAGCUGCGCUGGCCAGAGAUGCCUGCCCACAGCCUGGUGAUGAGCAGCCCGGCCCUCCCGGCCUUCCUGCUCUGCAGCACGCUGCUGGUCAUCAAGAUGUACGUGGUGGCCAUCAUCA\
) } def
/len { sequence length } bind def

/coor [
[68.19825745 145.36705017]
[56.66399765 154.95666504]
[50.99886703 169.72883606]
[36.26570511 171.91587830]
[24.73144531 181.50550842]
[13.19718838 191.09513855]
[1.66293025 200.68475342]
[0.06708616 216.17962646]
[-11.76689911 225.74055481]
[-26.52905655 224.12367249]
[-38.06331253 233.71330261]
[-49.59757233 243.30293274]
[-61.13182831 252.89254761]
[-55.98862839 267.15170288]
[-56.03561783 282.30999756]
[-61.26712799 296.53695679]
[-71.05142212 308.11468506]
[-84.20700836 315.64505005]
[-99.14527893 318.21875000]
[-114.06236267 315.52499390]
[-127.15695953 307.88906860]
[-136.84782410 296.23303223]
[-141.96473694 281.96441650]
[-141.88981628 266.80624390]
[-136.63209534 252.58892822]
[-126.82647705 241.02928162]
[-113.65703583 233.52316284]
[-98.71405029 230.97700500]
[-83.80195618 233.69824219]
[-70.72145081 241.35829163]
[-59.18719482 231.76867676]
[-47.65293884 222.17904663]
[-36.11867905 212.58941650]
[-35.01326370 197.78018188]
[-23.45249367 187.89062500]
[-7.92669392 189.15049744]
[3.60756373 179.56088257]
[15.14182186 169.97125244]
[26.67607880 160.38162231]
[31.51620102 146.29537964]
[47.07437134 143.42240906]
[58.60863113 133.83279419]
[57.53854370 118.87100220]
[44.75693893 111.02048492]
[28.94826508 110.39092255]
[22.15272522 97.13687134]
[9.37112331 89.28635406]
[-3.41047788 81.43582916]
[-18.18679237 86.55388641]
[-32.77741241 80.92825317]
[-40.29309464 67.21517181]
[-37.18516159 51.88954926]
[-24.92108536 42.18767166]
[-9.29158783 42.69046783]
[2.32356095 53.16053772]
[4.44004202 68.65422821]
[17.22164345 76.50475311]
[30.00324440 84.35527039]
[44.89769363 84.42330933]
[52.60746002 98.23888397]
[65.38906097 106.08940125]
[68.92191315 88.87929535]
[79.89054871 76.57434082]
[94.52786255 71.78733063]
[108.52529144 74.79921722]
[117.14285278 62.52169418]
[125.76042175 50.24417114]
[134.37799072 37.96665192]
[135.97325134 22.22607613]
[149.61811829 16.25389862]
[158.23568726 3.97637653]
[159.83096313 -11.76419830]
[173.47583008 -17.73637581]
[182.09338379 -30.01389694]
[179.57221985 -45.38534546]
[188.48654175 -57.71373749]
[203.15641785 -60.02256775]
[211.77398682 -72.30008698]
[220.39154053 -84.57761383]
[229.00910950 -96.85513306]
[237.62667847 -109.13265228]
[246.24424744 -121.41017914]
[241.36999512 -136.02345276]
[245.98121643 -150.53517151]
[258.10980225 -159.44364929]
[272.98040771 -159.50141907]
[281.59799194 -171.77894592]
[290.21554565 -184.05647278]
[298.83309937 -196.33398438]
[297.49261475 -212.32093811]
[309.25439453 -223.23149109]
[325.09582520 -220.69598389]
[332.86471558 -206.65945435]
[326.60144043 -191.88952637]
[311.11062622 -187.71643066]
[302.49307251 -175.43890381]
[293.87548828 -163.16137695]
[285.25793457 -150.88386536]
[290.25796509 -136.87893677]
[286.00222778 -122.44451141]
[273.92175293 -113.17543793]
[258.52175903 -112.79261017]
[249.90420532 -100.51509094]
[241.28663635 -88.23756409]
[232.66906738 -75.96004486]
[224.05149841 -63.68252182]
[215.43392944 -51.40500259]
[218.24868774 -36.82375336]
[209.68414307 -24.24984169]
[194.37091064 -21.39633179]
[185.75334167 -9.11880875]
[184.77445984 5.74359512]
[170.51321411 12.59394264]
[161.89564514 24.87146568]
[160.91676331 39.73386765]
[146.65551758 46.58421707]
[138.03794861 58.86174011]
[129.42037964 71.13925934]
[120.80281067 83.41678619]
[127.99578857 113.01487732]
[100.96484375 135.12928772]
[111.89099121 145.40641785]
[122.81713867 155.68354797]
[133.74328613 165.96066284]
[144.66943359 176.23779297]
[155.59558105 186.51492310]
[166.52172852 196.79203796]
[177.44787598 207.06916809]
[188.37402344 217.34629822]
[203.31617737 213.50761414]
[217.95446777 218.37834167]
[227.61787415 230.40423584]
[229.22282410 245.74787903]
[222.25720215 259.51318359]
[208.94369507 267.30767822]
[193.53060913 266.64416504]
[180.93618774 257.73440552]
[175.17929077 243.42140198]
[178.09689331 228.27244568]
[167.17074585 217.99531555]
[156.24459839 207.71818542]
[145.31845093 197.44107056]
[134.39230347 187.16394043]
[123.46616364 176.88681030]
[112.54001617 166.60968018]
[101.61386871 156.33256531]
[90.68772125 146.05543518]
[100.39971924 157.48684692]
[101.08206940 172.47131348]
[92.44921112 184.73809814]
[78.11386871 189.15373230]
[64.07514191 183.87034607]
[56.20800781 171.09896851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[4 39]
[5 38]
[6 37]
[7 36]
[10 33]
[11 32]
[12 31]
[13 30]
[43 61]
[44 60]
[46 58]
[47 57]
[48 56]
[65 119]
[66 118]
[67 117]
[68 116]
[70 114]
[71 113]
[73 111]
[74 110]
[77 107]
[78 106]
[79 105]
[80 104]
[81 103]
[82 102]
[86 98]
[87 97]
[88 96]
[89 95]
[121 147]
[122 146]
[123 145]
[124 144]
[125 143]
[126 142]
[127 141]
[128 140]
[129 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
