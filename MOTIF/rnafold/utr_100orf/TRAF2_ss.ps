%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGUUCCGGGCGCGCUGCGACCGUUGGGGCUUUGUUCGCGGGGGUCACAGCUCUCAUGGCUGCAGCUAGCGUGACCCCCCCUGGCUCCCUGGAGUUGCUACAGCCCGGCUUCUCCAAGACCCUCCUGGGGACCAAGCUGGAAGCCAAGUACCUGU\
) } def
/len { sequence length } bind def

/coor [
[166.22048950 321.34704590]
[159.92451477 307.73233032]
[157.64373779 292.90673828]
[159.55647278 278.02917480]
[165.51319885 264.26266479]
[175.04826355 252.68325806]
[187.41633606 244.19615173]
[201.65058899 239.46478271]
[216.63835144 238.85899353]
[231.20701599 242.42572021]
[220.49548340 231.92509460]
[209.78396606 221.42445374]
[199.07243347 210.92382812]
[186.15750122 215.45339966]
[172.48657227 213.95777893]
[160.74385071 206.67308044]
[153.25975037 194.97767639]
[151.54847717 181.13169861]
[156.00202942 167.84040833]
[145.50140381 157.12887573]
[135.00076294 146.41735840]
[124.50013733 135.70582581]
[113.99950409 124.99430847]
[99.66213989 128.64590454]
[85.41488647 124.65717316]
[75.05771637 114.09198761]
[71.35305023 99.76824951]
[75.28897095 85.50632477]
[64.78833771 74.79479980]
[54.28770828 64.08327484]
[43.68110657 53.47667313]
[32.96958542 42.97603989]
[22.25806046 32.47541046]
[13.01090336 36.39494705]
[3.04009151 37.32276535]
[-6.71355581 35.18938446]
[-15.33518124 30.21330833]
[-22.02169800 22.87881660]
[-26.15658951 13.88886356]
[-27.36672592 4.09773445]
[-25.55596924 -5.57013035]
[-20.91255379 -14.20741653]
[-30.52895737 -25.71935654]
[-40.14536285 -37.23129654]
[-49.76176834 -48.74323654]
[-59.37817001 -60.25517654]
[-68.99457550 -71.76712036]
[-78.61097717 -83.27906036]
[-88.22738647 -94.79100037]
[-97.84378815 -106.30294037]
[-105.79259491 -110.91579437]
[-107.53419495 -118.14069366]
[-116.91981506 -129.84155273]
[-126.30543518 -141.54241943]
[-130.81365967 -127.23590851]
[-144.73518372 -121.65102386]
[-157.88088989 -128.87530518]
[-160.62947083 -143.62133789]
[-150.96923828 -155.09652710]
[-135.97184753 -154.90287781]
[-144.14976501 -167.47750854]
[-152.32769775 -180.05215454]
[-167.18173218 -187.00120544]
[-168.32093811 -203.36073303]
[-154.57337952 -212.30146790]
[-140.08137512 -204.62593079]
[-139.75305176 -188.23007202]
[-131.57513428 -175.65544128]
[-123.39720917 -163.08079529]
[-114.60457611 -150.92803955]
[-105.21895599 -139.22717285]
[-95.83333588 -127.52631378]
[-86.33184814 -115.91934204]
[-76.71544647 -104.40740204]
[-67.09903717 -92.89546204]
[-57.48263550 -81.38352203]
[-47.86623001 -69.87158203]
[-38.24982834 -58.35964203]
[-28.63342285 -46.84770203]
[-19.01701736 -35.33576202]
[-9.40061378 -23.82382011]
[10.62940884 -26.79101753]
[28.55397034 -17.08002663]
[37.12316513 1.56902456]
[32.75868988 21.76388550]
[43.47021484 32.26451874]
[54.18173981 42.76514816]
[61.19810486 45.21524429]
[64.99923706 53.58264160]
[75.49986267 64.29416656]
[86.00049591 75.00569153]
[100.33786011 71.35410309]
[114.58511353 75.34282684]
[124.94228363 85.90801239]
[128.64695740 100.23175049]
[124.71102905 114.49367523]
[135.21165466 125.20520020]
[145.71229553 135.91673279]
[156.21292114 146.62825012]
[166.71354675 157.33976746]
[182.65588379 153.05274963]
[198.49830627 157.35031128]
[209.95712280 168.97270203]
[213.98321533 184.69288635]
[209.57307434 200.21231079]
[220.28459167 210.71293640]
[230.99612427 221.21356201]
[241.70764160 231.71420288]
[254.28228760 239.89212036]
[268.22454834 245.42507935]
[282.16677856 250.95803833]
[296.10903931 256.49099731]
[310.05130005 262.02395630]
[323.99353027 267.55691528]
[337.93579102 273.08987427]
[349.82427979 260.23471069]
[365.69097900 252.91265869]
[383.11648560 252.21069336]
[399.45498657 258.20858765]
[412.23583984 269.97091675]
[419.53738403 285.69268799]
[420.27569580 302.97644043]
[434.52301025 307.66839600]
[448.77029419 312.36035156]
[464.70538330 308.48669434]
[475.83032227 320.53527832]
[470.70071411 336.11151123]
[454.59347534 339.19192505]
[444.07833862 326.60763550]
[429.83105469 321.91567993]
[415.58374023 317.22375488]
[408.15719604 327.48907471]
[398.11904907 335.24932861]
[386.28076172 339.86428833]
[373.60305786 340.94851685]
[361.11785889 338.40365601]
[349.84423828 332.42700195]
[340.70529175 323.49645996]
[334.45266724 312.33230591]
[331.60455322 299.83905029]
[332.40283203 287.03213501]
[318.46057129 281.49917603]
[304.51834106 275.96621704]
[290.57608032 270.43325806]
[276.63381958 264.90029907]
[262.69158936 259.36734009]
[248.74932861 253.83436584]
[257.91812134 265.70590210]
[263.44201660 279.65173340]
[264.88919067 294.58178711]
[262.14651489 309.32888794]
[255.42842102 322.74035645]
[245.26004028 333.76776123]
[232.43621826 341.54913330]
[217.95939636 345.47616577]
[202.96121216 345.24191284]
[188.61410522 340.86468506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 108]
[11 107]
[12 106]
[13 105]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[28 91]
[29 90]
[30 89]
[31 87]
[32 86]
[33 85]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[52 72]
[53 71]
[54 70]
[60 69]
[61 68]
[62 67]
[109 147]
[110 146]
[111 145]
[112 144]
[113 143]
[114 142]
[115 141]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
