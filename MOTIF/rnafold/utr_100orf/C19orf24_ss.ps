%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCGCCGCCACCGCUUCCGCCGGGCCAUGGGGCCGCGCGUGCUGCAGCCGCCGCUGCUGCUGCUCCUGCUGGCGCUGCUGCUGGCGGCGCUGCCGUGCGGUGCCGAAGAGGCCUCGCCGCUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[20.71027184 547.04040527]
[4.35420275 545.85253906]
[-2.55062151 530.97790527]
[7.09889078 517.71820068]
[8.18541241 502.75759888]
[9.27193451 487.79702759]
[10.35845661 472.83642578]
[11.44497871 457.87582397]
[4.64990091 444.62152100]
[13.36648941 431.41806030]
[14.45301056 416.45745850]
[3.54973197 426.75885010]
[-10.96444511 430.54550171]
[-25.51062012 426.88369751]
[-36.50200272 416.67636108]
[-41.22834015 402.44042969]
[-38.52421570 387.68618774]
[-29.05641174 376.05172729]
[-15.15949535 370.40585327]
[-0.26016232 372.14074707]
[11.96771526 380.82861328]
[18.50874901 394.32601929]
[22.79793358 379.95233154]
[19.02300644 365.54403687]
[30.38334274 354.53250122]
[34.67252731 340.15881348]
[38.96171188 325.78512573]
[43.25089645 311.41143799]
[47.54008484 297.03775024]
[40.88292694 277.56088257]
[56.35277939 262.82946777]
[59.58954239 248.18284607]
[62.82630539 233.53622437]
[58.01763153 219.43920898]
[68.55050659 207.63374329]
[71.78726959 192.98712158]
[75.02403259 178.34049988]
[78.26079559 163.69389343]
[81.49755859 149.04727173]
[84.73432159 134.40065002]
[87.97108459 119.75403595]
[91.20784760 105.10742188]
[89.72639465 97.09420776]
[94.70383453 90.14801025]
[98.29357147 75.58388519]
[94.08370209 60.33306503]
[104.64200592 49.82728195]
[108.23174286 35.26315308]
[107.24648285 26.07752037]
[112.08818054 20.39258766]
[116.02879333 5.91945410]
[119.96940613 -8.55367947]
[123.91001129 -23.02681160]
[127.85062408 -37.49994659]
[131.79122925 -51.97307968]
[135.73184204 -66.44621277]
[134.38514709 -73.08715057]
[136.36610413 -78.55043030]
[140.22831726 -81.51454163]
[144.86357117 -95.78038788]
[141.76945496 -111.29608917]
[153.06100464 -121.00949097]
[157.69625854 -135.27534485]
[154.60214233 -150.79104614]
[165.89369202 -160.50444031]
[170.52894592 -174.77027893]
[167.43482971 -190.28598022]
[178.72637939 -199.99938965]
[183.36163330 -214.26522827]
[179.42465210 -230.18478394]
[191.42887878 -241.35754395]
[207.02539062 -236.28993225]
[210.16984558 -220.19506836]
[197.62747192 -209.62997437]
[192.99221802 -195.36413574]
[196.41789246 -180.86882019]
[184.79478455 -170.13502502]
[180.15953064 -155.86918640]
[183.58520508 -141.37387085]
[171.96211243 -130.64007568]
[167.32685852 -116.37423706]
[170.75251770 -101.87892151]
[159.12942505 -91.14513397]
[154.49417114 -76.87928772]
[150.20498657 -62.50559998]
[146.26437378 -48.03246689]
[142.32376099 -33.55933380]
[138.38314819 -19.08620071]
[134.44253540 -4.61306810]
[130.50192261 9.86006451]
[126.56131744 24.33319855]
[122.79586792 38.85289001]
[119.20613098 53.41701508]
[123.67276764 67.62611389]
[112.85769653 79.17362213]
[109.26796722 93.73774719]
[105.85446930 108.34418488]
[102.61770630 122.99079895]
[99.38094330 137.63742065]
[96.14418030 152.28402710]
[92.90741730 166.93064880]
[89.67065430 181.57727051]
[86.43389130 196.22387695]
[83.19712830 210.87049866]
[87.77428436 226.01513672]
[77.47292328 236.77297974]
[74.23616028 251.41960144]
[70.99939728 266.06622314]
[77.19797516 273.40927124]
[79.23162079 282.65930176]
[76.75791168 291.65777588]
[70.47113800 298.36605835]
[61.91377258 301.32693481]
[57.62458420 315.70062256]
[53.33539963 330.07431030]
[49.04621506 344.44799805]
[44.75703049 358.82168579]
[48.22516632 374.25811768]
[37.17162323 384.24151611]
[32.88243866 398.61520386]
[35.18249512 409.51504517]
[29.41360855 417.54397583]
[28.32708549 432.50457764]
[35.04444885 446.82894897]
[26.40557671 458.96234131]
[25.31905365 473.92294312]
[24.23253250 488.88354492]
[23.14600945 503.84414673]
[22.05948830 518.80474854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 129]
[5 128]
[6 127]
[7 126]
[8 125]
[10 123]
[11 122]
[22 120]
[23 119]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[31 108]
[32 107]
[33 106]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[44 96]
[45 95]
[47 93]
[48 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[59 84]
[60 83]
[62 81]
[63 80]
[65 78]
[66 77]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
