%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCAGGGUUGCCUUCAGAUAUGGAUCUAUACAAGCUUCAAUUAAACAAUUUUACUGAAGUCACCAUGUUUAUAUUAAUAAGCUUCACAGAAGAAUUUG\
) } def
/len { sequence length } bind def

/coor [
[85.98585510 205.32072449]
[82.93519592 190.63421631]
[90.14707184 177.48107910]
[92.43612671 162.65676880]
[94.72518158 147.83245850]
[87.23334503 148.18226624]
[78.11735535 160.09439087]
[69.00136566 172.00651550]
[67.41962433 188.32919312]
[52.38286209 194.87350464]
[39.35961533 184.90721130]
[41.74708176 168.68276978]
[57.08924103 162.89051819]
[66.20523071 150.97839355]
[75.32122040 139.06626892]
[58.89233780 114.01110077]
[61.81889343 86.04543304]
[80.47946167 67.54553223]
[75.44671631 53.41501999]
[70.41396332 39.28450775]
[65.38121033 25.15399361]
[60.34846115 11.02347946]
[55.31571198 -3.10703397]
[50.28296280 -17.23754883]
[45.25020981 -31.36806107]
[37.29405975 -31.75100708]
[29.73063660 -34.17738724]
[23.07396126 -38.47018051]
[17.77327156 -44.32592392]
[14.18272018 -51.33618164]
[12.53771973 -59.01598740]
[12.93953991 -66.83740997]
[15.34914970 -74.26583099]
[19.59067726 -80.79651642]
[25.36419868 -85.98886108]
[32.26691437 -89.49616241]
[30.86922646 -104.43090057]
[29.47153664 -119.36564636]
[28.07384872 -134.30038452]
[26.67615891 -149.23512268]
[25.27846909 -164.16986084]
[15.79634094 -173.08311462]
[15.02942467 -185.67027283]
[22.84388351 -195.04855347]
[21.91133881 -210.01953125]
[20.97879601 -224.99052429]
[20.04625130 -239.96150208]
[10.53366947 -253.31974792]
[17.59116364 -268.12258911]
[33.95858765 -269.14212036]
[42.79854202 -255.32954407]
[35.01723480 -240.89404297]
[35.94977951 -225.92306519]
[36.88232422 -210.95208740]
[37.81486893 -195.98109436]
[48.31221008 -182.01301575]
[40.21321106 -165.56755066]
[41.61090088 -150.63281250]
[43.00858688 -135.69807434]
[44.40627670 -120.76332855]
[45.80396652 -105.82859039]
[47.20165634 -90.89385223]
[66.85278320 -78.88116455]
[72.06977844 -56.19946289]
[59.38072586 -36.40081406]
[64.41347504 -22.27029800]
[69.44622803 -8.13978481]
[74.47897339 5.99072981]
[79.51172638 20.12124443]
[84.54447937 34.25175858]
[89.57722473 48.38227081]
[94.60997772 62.51278687]
[102.93476105 61.54445267]
[111.42030334 62.43563080]
[119.64918518 65.20858002]
[127.20243073 69.79148102]
[133.68083191 76.01902771]
[138.72573853 83.63768005]
[142.03866577 92.31575012]
[143.39819336 101.65766907]
[142.67359924 111.22199249]
[139.83427429 120.54225159]
[134.95422363 129.14967346]
[128.21157837 136.59675598]
[138.39787292 147.60763550]
[148.58416748 158.61851501]
[158.77046204 169.62939453]
[173.96496582 177.15025330]
[170.94427490 193.83293152]
[154.07734680 195.54852295]
[147.75958252 179.81568909]
[137.57328796 168.80480957]
[127.38699341 157.79393005]
[117.20069885 146.78305054]
[109.70886230 147.13285828]
[113.36927795 161.67938232]
[117.02969360 176.22590637]
[125.43565369 188.64926147]
[123.76713562 203.55616760]
[112.82253265 213.81364441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[44 55]
[45 54]
[46 53]
[47 52]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
