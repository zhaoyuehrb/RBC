%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUUGAGCCCUUCUUGGGAACCUGGAAGCUGGUCUCCAGUGAAAACUUUGAGGAUUACAUGAAAGAACUGGGAGUGAAUUUCGCAGCCCGGAACAUGG\
) } def
/len { sequence length } bind def

/coor [
[129.14097595 135.46772766]
[123.04399109 139.70050049]
[116.34455109 142.89535522]
[109.21780396 144.96875000]
[101.85005951 145.86647034]
[94.43394470 145.56506348]
[87.16335297 144.07240295]
[80.22836304 141.42750549]
[73.81028748 137.69952393]
[68.07691193 132.98593140]
[56.02445602 141.91557312]
[43.97200012 150.84519958]
[40.19758224 166.43792725]
[25.59315681 173.07798767]
[11.36198902 165.67167664]
[8.42101192 149.90049744]
[19.02629280 137.86274719]
[35.04236603 138.79273987]
[47.09482193 129.86311340]
[59.14727783 120.93347931]
[54.26299667 103.90924072]
[56.18733978 86.30305481]
[64.63383484 70.73585510]
[54.79491043 59.41350937]
[44.95597839 48.09116745]
[30.06376076 42.74959564]
[27.55587006 28.06764221]
[17.71694183 16.74529839]
[7.87801266 5.42295408]
[-1.96091652 -5.89938974]
[-12.81204796 -16.25568962]
[-24.58096123 -25.55583382]
[-36.34987640 -34.85597610]
[-48.11878967 -44.15612030]
[-64.29486847 -49.23260880]
[-63.89475632 -66.18183899]
[-47.49715042 -70.48937225]
[-38.81864548 -55.92503357]
[-27.04973221 -46.62488937]
[-15.28081799 -37.32474899]
[-3.51190424 -28.02460480]
[-3.00289631 -43.01596451]
[7.75998354 -53.46395111]
[22.75984764 -53.52771378]
[33.61116409 -43.17160797]
[34.24760437 -28.18511581]
[24.31337357 -16.94629669]
[9.36142731 -15.73831844]
[19.20035744 -4.41597462]
[29.03928566 6.90636921]
[38.87821579 18.22871399]
[53.06668854 22.76043320]
[56.27832413 38.25223541]
[66.11725616 49.57458115]
[75.95618439 60.89692688]
[94.82205963 54.38920593]
[114.66661072 56.50234222]
[131.73904419 66.83693695]
[142.81250000 83.43965149]
[145.79400635 103.17242432]
[160.38769531 106.64006805]
[174.98136902 110.10771179]
[189.57504272 113.57536316]
[196.27833557 106.01927185]
[205.26814270 101.54381561]
[215.22076416 100.75894928]
[224.68894958 103.73477936]
[232.31231689 109.99773407]
[237.01280212 118.60533905]
[238.14703369 128.28785706]
[252.19757080 133.53974915]
[266.24810791 138.79164124]
[280.29864502 144.04354858]
[294.34918213 149.29544067]
[312.33963013 145.77542114]
[323.07916260 159.55816650]
[337.28625488 164.37055969]
[351.49331665 169.18293762]
[365.70037842 173.99533081]
[382.64205933 173.35020447]
[387.95187378 189.45120239]
[373.95004272 199.01072693]
[360.88800049 188.20240784]
[346.68093872 183.39001465]
[332.47384644 178.57763672]
[318.26678467 173.76524353]
[307.17230225 178.85740662]
[295.22293091 174.82785034]
[289.09729004 163.34597778]
[275.04675293 158.09408569]
[260.99621582 152.84217834]
[246.94567871 147.59028625]
[232.89514160 142.33839417]
[215.35234070 152.51362610]
[195.62164307 146.71917725]
[186.10740662 128.16903687]
[171.51371765 124.70139313]
[156.92004395 121.23374939]
[142.32637024 117.76610565]
[138.90985107 124.35526276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 20]
[11 19]
[12 18]
[23 55]
[24 54]
[25 53]
[27 51]
[28 50]
[29 49]
[30 48]
[31 41]
[32 40]
[33 39]
[34 38]
[60 99]
[61 98]
[62 97]
[63 96]
[70 93]
[71 92]
[72 91]
[73 90]
[74 89]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
