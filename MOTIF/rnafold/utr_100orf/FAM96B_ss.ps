%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCGCGGGUUGGAGCGGAAGCGCACGCCUGCUAGGAUCAGCGGUGGUGGUUCCGCGAUGGUAGGCGGCGGCGGGGUCGGCGGCGGCCUCCUGGAGAAUGCCAACCCCCUCAUCUACCAGCGCUCUGGGGAGCGGCCUGUGACGGCAGGCGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[172.72406006 253.77549744]
[157.98573303 250.98594666]
[145.85006714 242.16973877]
[138.64141846 229.01544189]
[137.74047852 214.04252625]
[143.31979370 200.11875916]
[154.31076050 189.91098022]
[168.60826111 185.37429810]
[183.47688293 187.37872314]
[172.46203613 177.19671631]
[161.44720459 167.01470947]
[150.43235779 156.83268738]
[139.41752625 146.65068054]
[128.40269470 136.46867371]
[117.38784790 126.28665924]
[89.96688843 129.87745667]
[70.27083588 110.46435547]
[55.34306717 111.93461609]
[40.41529846 113.40486908]
[25.48752594 114.87512970]
[10.55975533 116.34538269]
[-4.36801577 117.81564331]
[-17.34334755 126.86833954]
[-30.76772308 120.41578674]
[-45.69549561 121.88603973]
[-60.62326431 123.35630035]
[-68.90708923 127.32984161]
[-75.85812378 124.70592499]
[-90.81188202 125.88281250]
[-105.76564026 127.05970001]
[-120.71939850 128.23658752]
[-129.07963562 132.04672241]
[-135.97781372 129.28683472]
[-150.95179749 130.16989136]
[-165.92578125 131.05296326]
[-176.23515320 143.03178406]
[-192.00131226 144.12895203]
[-203.87048340 133.69351196]
[-204.80088806 117.91663361]
[-194.24055481 106.15846252]
[-178.45471191 105.39490509]
[-166.80885315 116.07897186]
[-151.83486938 115.19590759]
[-136.86088562 114.31285095]
[-121.89628601 113.28282166]
[-106.94252777 112.10593414]
[-91.98876953 110.92905426]
[-77.03500366 109.75216675]
[-62.09352112 108.42852783]
[-47.16575241 106.95827484]
[-32.23797989 105.48801422]
[-20.33038139 96.54048157]
[-5.83827257 102.88787079]
[9.08949852 101.41761017]
[24.01726913 99.94735718]
[38.94504166 98.47709656]
[53.87281036 97.00684357]
[68.80058289 95.53658295]
[71.15389252 87.30243683]
[75.63697815 80.00578308]
[81.91882324 74.18533325]
[89.53564453 70.27083588]
[88.06538391 55.34306717]
[84.09184265 47.05924606]
[86.71575928 40.10821152]
[85.53887939 25.15445137]
[84.36199188 10.20069218]
[83.18510437 -4.75306797]
[74.38890839 -17.90363693]
[81.10378265 -31.19873619]
[79.92689514 -46.15249634]
[71.13069916 -59.30306625]
[77.84558105 -72.59816742]
[76.66869354 -87.55192566]
[63.83367538 -96.48480988]
[59.79335022 -111.59142303]
[66.45542908 -125.73888397]
[80.67428589 -132.24719238]
[95.73621368 -128.04333496]
[104.52941895 -115.11222839]
[102.90203094 -99.55955505]
[91.62245178 -88.72881317]
[92.79933929 -73.77505493]
[101.51136017 -61.69407654]
[94.88065338 -47.32938385]
[96.05754089 -32.37562180]
[104.76956177 -20.29464722]
[98.13886261 -5.92995453]
[99.31575012 9.02380562]
[100.49263763 23.97756577]
[101.66952515 38.93132401]
[102.99315643 53.87281036]
[104.46341705 68.80058289]
[110.37828064 70.24068451]
[115.90594482 72.79105377]
[120.84018707 76.35655212]
[124.99691010 80.80416107]
[128.22103882 85.96792603]
[130.39227295 91.65521240]
[131.42962646 97.65383148]
[131.29438782 103.73998260]
[129.99159241 109.68659973]
[127.56986237 115.27182007]
[138.58470154 125.45383453]
[149.59953308 135.63584900]
[160.61437988 145.81785583]
[171.62921143 155.99986267]
[182.64404297 166.18188477]
[193.65888977 176.36389160]
[205.79414368 185.18066406]
[218.88157654 192.50997925]
[231.96902466 199.83930969]
[245.05645752 207.16862488]
[237.08502197 194.46208191]
[233.96058655 179.79109192]
[238.35083008 165.44795227]
[249.15180969 155.03935242]
[263.64752197 151.18261719]
[278.19290161 154.84753418]
[289.13043213 165.11254883]
[293.70974731 179.39645386]
[290.78021240 194.10572815]
[275.90090942 196.00465393]
[289.86911011 201.47171021]
[303.83734131 206.93876648]
[317.80557251 212.40582275]
[331.77380371 217.87287903]
[347.89752197 214.87992859]
[358.34420776 227.52108765]
[352.36718750 242.79222107]
[336.11511230 244.98368835]
[326.30673218 231.84111023]
[312.33850098 226.37405396]
[298.37030029 220.90698242]
[284.40206909 215.43992615]
[270.43383789 209.97286987]
[261.14743042 221.75262451]
[269.72424316 234.05865479]
[278.30105591 246.36466980]
[286.87789917 258.67068481]
[295.45471191 270.97671509]
[304.03152466 283.28274536]
[319.10070801 289.75204468]
[320.76376343 306.06665039]
[307.30987549 315.44348145]
[292.57925415 308.23645020]
[291.72549438 291.85955811]
[283.14868164 279.55352783]
[274.57186890 267.24749756]
[265.99505615 254.94149780]
[257.41824341 242.63546753]
[248.84141541 230.32945251]
[237.72714233 220.25605774]
[224.63970947 212.92674255]
[211.55226135 205.59742737]
[198.46482849 198.26811218]
[204.96508789 211.78648376]
[205.07000732 226.78611755]
[198.75950623 240.39410400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 109]
[10 108]
[11 107]
[12 106]
[13 105]
[14 104]
[15 103]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[24 51]
[25 50]
[26 49]
[28 48]
[29 47]
[30 46]
[31 45]
[33 44]
[34 43]
[35 42]
[62 93]
[63 92]
[65 91]
[66 90]
[67 89]
[68 88]
[70 86]
[71 85]
[73 83]
[74 82]
[110 156]
[111 155]
[112 154]
[113 153]
[123 136]
[124 135]
[125 134]
[126 133]
[127 132]
[137 152]
[138 151]
[139 150]
[140 149]
[141 148]
[142 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
