%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGAACCUGCUAAGUCCGCUCCUGCUCCAAAAAAGGGCUCCAAAAAGGCGGUGACCAAGGCGCAGAAGAAGGAUGGUAAGAAGCGCAAGCGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[132.06333923 341.13897705]
[143.48905945 330.95510864]
[139.79487610 316.41711426]
[136.10069275 301.87915039]
[132.18086243 287.40036011]
[128.03633118 272.98431396]
[115.94856262 270.51239014]
[106.04290009 263.03533936]
[100.28538513 251.95867920]
[99.85239410 239.40963745]
[104.89088440 227.82885742]
[114.47754669 219.49563599]
[111.23727417 204.84980774]
[107.99700928 190.20396423]
[104.75674438 175.55812073]
[101.13296509 172.20268250]
[99.69229126 166.47256470]
[101.80040741 159.90179443]
[99.47693634 145.08283997]
[97.15346527 130.26388550]
[94.82999420 115.44492340]
[83.95050812 102.77280426]
[89.94764709 87.18497467]
[87.16442871 72.44544220]
[77.00089264 60.32054901]
[82.24231720 46.37864304]
[79.45910645 31.63911629]
[76.67588806 16.89958572]
[73.89266968 2.16005802]
[63.72913742 -9.96483898]
[68.97056580 -23.90674400]
[66.18734741 -38.64627075]
[52.71738434 -40.70341110]
[40.57983780 -46.84552002]
[30.97714043 -56.44805527]
[24.85559464 -68.54446411]
[22.81212234 -81.92346191]
[25.03608513 -95.25033569]
[31.29183578 -107.20006561]
[40.94360352 -116.58911133]
[53.02006531 -122.49258423]
[51.15858459 -137.37663269]
[49.29710388 -152.26068115]
[47.20437622 -167.11398315]
[44.88090134 -181.93293762]
[32.81562424 -192.50689697]
[33.70400238 -208.52532959]
[46.86454773 -217.70027161]
[62.20161819 -212.99349976]
[67.94992828 -198.01562500]
[59.69985962 -184.25640869]
[62.02333069 -169.43745422]
[66.24355316 -163.20727539]
[64.18115234 -154.12216187]
[66.04263306 -139.23811340]
[67.90411377 -124.35406494]
[83.92082977 -120.40038300]
[97.26393890 -110.63684845]
[105.91635895 -96.50526428]
[108.55714417 -80.11026764]
[104.76310730 -63.90591812]
[95.07631683 -50.32833481]
[80.92687225 -41.42948914]
[83.71009064 -26.68996048]
[93.67455292 -15.61933327]
[88.63220215 -0.62315840]
[91.41541290 14.11637020]
[94.19863129 28.85589981]
[96.98184967 43.59542847]
[106.94631195 54.66605377]
[101.90395355 69.66223145]
[104.68717194 84.40175629]
[113.96681976 91.62129211]
[115.96841431 103.20693207]
[109.64894867 113.12145233]
[111.97241974 127.94040680]
[114.29589081 142.75936890]
[116.61936951 157.57832336]
[119.40258026 172.31785583]
[122.64285278 186.96369934]
[125.88311768 201.60952759]
[129.12338257 216.25537109]
[145.84887695 222.86108398]
[155.29551697 237.98030090]
[153.92320251 255.59977722]
[142.45240784 268.83978271]
[146.59692383 283.25582886]
[152.06738281 290.79684448]
[150.63867188 298.18496704]
[154.33285522 312.72293091]
[158.02703857 327.26092529]
[172.92840576 330.75494385]
[184.49154663 340.78250122]
[190.05937195 355.03936768]
[188.35241699 370.24938965]
[179.76292419 382.91744995]
[166.26470947 390.13247681]
[150.95954895 390.23654175]
[137.36447144 383.20571899]
[128.60351562 370.65563965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 87]
[6 86]
[12 82]
[13 81]
[14 80]
[15 79]
[18 78]
[19 77]
[20 76]
[21 75]
[23 72]
[24 71]
[26 69]
[27 68]
[28 67]
[29 66]
[31 64]
[32 63]
[41 56]
[42 55]
[43 54]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
