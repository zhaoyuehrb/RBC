%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACGCUCGUGGGACCCCAGGCUAAACCCCGCUGUAGCCUUAAAUCUCCUACCAUGGAGGAAGAAGGCGGCGGCCGCAGCUGUGGGACCACUAGGGAGCUGCAGAAGCUGAAGCAGCAGGCGAUGGAGUACUACCGGGAGAACGACGUUCCGC\
) } def
/len { sequence length } bind def

/coor [
[71.30966187 497.81365967]
[79.69122314 483.71823120]
[79.38916779 468.72125244]
[79.08711243 453.72430420]
[78.78505707 438.72735596]
[78.48300171 423.73037720]
[78.18094635 408.73342896]
[74.88302612 402.07104492]
[78.02686310 393.43212891]
[78.02686310 378.43212891]
[78.02686310 363.43212891]
[78.02686310 348.43212891]
[67.20300293 342.79428101]
[59.77742386 333.01806641]
[57.22024155 320.93679810]
[60.08123016 308.84942627]
[67.87306976 299.08309937]
[79.15309906 293.54516602]
[79.75708771 278.55734253]
[80.36107635 263.56948853]
[77.47144318 256.72012329]
[81.13114929 248.28680420]
[82.03682709 233.31417847]
[69.53567505 225.21560669]
[62.72135162 211.85818481]
[63.51313400 196.78372192]
[71.79838562 184.04591370]
[85.43593597 177.12028503]
[86.34161377 162.14764404]
[79.38687897 148.97642517]
[87.94329834 135.66859436]
[88.84897614 120.69596863]
[82.41858673 107.14421082]
[70.24791718 98.37638092]
[58.07725143 89.60855103]
[45.90658569 80.84072113]
[33.73591614 72.07289124]
[18.01613998 70.28425598]
[12.21213627 56.56701279]
[0.04146856 47.79918289]
[-12.12919903 39.03135300]
[-24.29986572 30.26352310]
[-36.47053528 21.49569130]
[-51.14262009 26.18995476]
[-65.59655762 21.40069771]
[-74.35528564 9.16351414]
[-74.23026276 -5.70666981]
[-86.40093231 -14.47450066]
[-98.57160187 -23.24233055]
[-110.74226379 -32.01016235]
[-122.91293335 -40.77799225]
[-138.47039795 -37.99573898]
[-151.39059448 -47.09759903]
[-154.00820923 -62.68360901]
[-144.77026367 -75.50685883]
[-129.15744019 -77.95954132]
[-116.43258667 -68.58653259]
[-114.14510345 -52.94865799]
[-101.97443390 -44.18082809]
[-89.80377197 -35.41299820]
[-77.63310242 -26.64516830]
[-65.46243286 -17.87733841]
[-51.39711380 -22.70483971]
[-37.01609039 -18.27199173]
[-27.89620590 -6.07850552]
[-27.70270348 9.32502460]
[-15.53203583 18.09285545]
[-3.36136866 26.86068535]
[8.80929947 35.62851715]
[20.97996712 44.39634705]
[35.82921600 45.55784225]
[42.50374603 59.90222168]
[54.67441559 68.67005157]
[66.84508514 77.43788147]
[79.01574707 86.20571136]
[91.18641663 94.97354126]
[83.30789948 78.74913788]
[87.90398407 57.80015564]
[95.40398407 44.80977631]
[102.90398407 31.81939507]
[110.40398407 18.82901382]
[117.90398407 5.83863211]
[125.40398407 -7.15174866]
[124.43840027 -27.24928093]
[141.49250793 -36.29101944]
[148.46334839 -49.57285690]
[155.43420410 -62.85469818]
[152.05331421 -78.53746796]
[162.31779480 -90.86710358]
[178.35362244 -90.38536072]
[187.85946655 -77.46179962]
[183.54325867 -62.01026535]
[168.71603394 -55.88385010]
[161.74519348 -42.60200882]
[154.77433777 -29.32016945]
[158.69720459 -19.80912399]
[156.66448975 -9.49901867]
[149.11537170 -1.87539649]
[138.39436340 0.34825119]
[130.89436340 13.33863258]
[123.39436340 26.32901382]
[115.89436340 39.31939316]
[108.39436340 52.30977631]
[100.89436340 65.30015564]
[105.02969360 71.55707550]
[117.54366302 63.28661346]
[125.81392670 75.80071259]
[113.30034637 84.07092285]
[117.43567657 90.32784271]
[132.32630920 88.51979065]
[147.21693420 86.71173859]
[162.10757446 84.90368652]
[177.10241699 76.99224091]
[188.85566711 89.21096802]
[180.36807251 103.88738251]
[163.91561890 99.79432678]
[149.02499390 101.60237122]
[134.13435364 103.41042328]
[119.24372864 105.21847534]
[134.24063110 105.52348328]
[145.91284180 114.94470215]
[149.37574768 129.53950500]
[143.18016052 143.20021057]
[129.91883850 150.21002197]
[115.14144135 147.63545227]
[105.03205109 136.55392456]
[103.82160950 121.60164642]
[102.91593170 136.57427979]
[109.80587769 150.81643677]
[101.31424713 163.05332947]
[100.40856934 178.02595520]
[113.11189270 186.54492188]
[119.80136108 200.18852234]
[118.77033997 215.24851990]
[110.39563751 227.68717957]
[97.00946045 234.21984863]
[96.10378265 249.19248962]
[95.34891510 264.17349243]
[94.74492645 279.16131592]
[94.14093781 294.14913940]
[108.67546844 304.90930176]
[113.83898926 322.07714844]
[107.75860596 338.77563477]
[93.02686310 348.43212891]
[93.02686310 363.43212891]
[93.02686310 378.43212891]
[93.02686310 393.43212891]
[93.17790222 408.43136597]
[93.47995758 423.42831421]
[93.78201294 438.42529297]
[94.08406830 453.42224121]
[94.38612366 468.41918945]
[94.68817902 483.41616821]
[103.63050842 497.16268921]
[95.95667267 511.65557861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[9 147]
[10 146]
[11 145]
[12 144]
[18 140]
[19 139]
[20 138]
[22 137]
[23 136]
[28 131]
[29 130]
[31 128]
[32 127]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[78 104]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[85 95]
[86 94]
[87 93]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
