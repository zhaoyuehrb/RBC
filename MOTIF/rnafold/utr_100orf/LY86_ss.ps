%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUUUUCUGUGUGUCCCAUACAGGCCCCCACCAUGAAGGGUUUCACAGCCACUCUCUUCCUCUGGACUCUGAUUUUUCCCAGCUGCAGUGGAGGCGGCGGUGGGAAAGCCUGGCCCACACACGUGGUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[100.63392639 534.33660889]
[87.01602173 527.77581787]
[75.93809509 517.49133301]
[68.38516998 504.39761353]
[65.02886200 489.65902710]
[66.16761017 474.58602905]
[71.70014954 460.51898193]
[81.13453674 448.70864868]
[93.63187408 440.20523071]
[108.08090210 435.76486206]
[108.08090210 420.76486206]
[108.08090210 405.76486206]
[108.08090210 390.76486206]
[108.08090210 375.76486206]
[108.08090210 360.76486206]
[108.08090210 345.76486206]
[96.43723297 340.61041260]
[87.59832764 331.37927246]
[82.91977692 319.43548584]
[83.13874054 306.56295776]
[88.25798798 294.69900513]
[97.54013062 285.64263916]
[109.61363983 280.78198242]
[110.31151581 265.79821777]
[111.00939941 250.81446838]
[111.70727539 235.83071899]
[112.40515900 220.84695435]
[102.23917389 204.46205139]
[113.14058685 187.57763672]
[113.14058685 172.57763672]
[113.14058685 157.57763672]
[113.14058685 142.57763672]
[113.14058685 127.57764435]
[113.14058685 112.57764435]
[95.03458405 115.90017700]
[85.06367493 102.38178253]
[71.02893066 97.08782196]
[56.99419022 91.79386902]
[42.95944977 86.49990845]
[26.87396240 89.69196320]
[16.27180481 77.18091583]
[22.05956459 61.83706284]
[38.28329086 59.44483948]
[48.25340652 72.46516418]
[62.28815079 77.75912476]
[76.32289124 83.05308533]
[90.35763550 88.34703827]
[98.78382874 83.89921570]
[108.83387756 85.27885437]
[116.64991760 92.67522430]
[121.78022003 78.57983398]
[126.91052246 64.48444366]
[121.91856384 57.54078293]
[120.15296173 49.26995087]
[121.83637238 41.07861328]
[126.61131287 34.32897568]
[133.61279297 30.11227798]
[141.62416077 29.07261467]
[148.04241943 15.51510811]
[154.46067810 1.95760179]
[160.87893677 -11.59990501]
[167.29719543 -25.15741158]
[166.20883179 -40.94113922]
[178.64785767 -49.13381195]
[185.06610107 -62.69131851]
[191.48435974 -76.24882507]
[183.97019958 -87.86591339]
[183.20744324 -101.57160187]
[189.28921509 -113.75647736]
[200.52029419 -121.26498413]
[213.88801575 -122.21241760]
[220.62001038 -135.61689758]
[227.35198975 -149.02139282]
[220.10771179 -162.74363708]
[222.34600830 -178.09843445]
[233.20623779 -189.18153381]
[248.51239014 -191.73127747]
[262.37896729 -184.76722717]
[269.47393799 -170.96720886]
[267.06921387 -155.63760376]
[256.08938599 -144.67295837]
[240.75648499 -142.28939819]
[234.02449036 -128.88491821]
[227.29251099 -115.48042297]
[235.28997803 -101.19268799]
[233.20735168 -84.78499603]
[221.66508484 -72.70892334]
[205.04187012 -69.83056641]
[198.62361145 -56.27305984]
[192.20535278 -42.71555328]
[193.75279236 -27.90155220]
[180.85469055 -18.73915482]
[174.43643188 -5.18164825]
[168.01818848 8.37585831]
[161.59992981 21.93336487]
[155.18167114 35.49087143]
[159.26826477 56.71113205]
[141.00590515 69.61474609]
[135.87561035 83.71013641]
[130.74530029 97.80552673]
[128.14057922 112.57764435]
[128.14057922 127.57764435]
[128.14057922 142.57763672]
[128.14057922 157.57763672]
[128.14057922 172.57763672]
[128.14057922 187.57763672]
[136.34317017 194.89521790]
[139.05786133 205.31901550]
[135.61058044 215.29072571]
[127.38891602 221.54484558]
[126.69103241 236.52859497]
[125.99315643 251.51235962]
[125.29527283 266.49612427]
[124.59739685 281.47985840]
[139.55982971 290.54675293]
[147.87635803 305.83834839]
[147.36109924 323.14910889]
[138.24334717 337.76892090]
[123.08090210 345.76486206]
[123.08090210 360.76486206]
[123.08090210 375.76486206]
[123.08090210 390.76486206]
[123.08090210 405.76486206]
[123.08090210 420.76486206]
[123.08090210 435.76486206]
[137.52992249 440.20523071]
[150.02726746 448.70864868]
[159.46165466 460.51898193]
[164.99418640 474.58602905]
[166.13293457 489.65902710]
[162.77662659 504.39761353]
[155.22370911 517.49133301]
[144.14578247 527.77581787]
[130.52787781 534.33660889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 125]
[11 124]
[12 123]
[13 122]
[14 121]
[15 120]
[16 119]
[23 114]
[24 113]
[25 112]
[26 111]
[27 110]
[29 106]
[30 105]
[31 104]
[32 103]
[33 102]
[34 101]
[36 47]
[37 46]
[38 45]
[39 44]
[50 100]
[51 99]
[52 98]
[58 96]
[59 95]
[60 94]
[61 93]
[62 92]
[64 90]
[65 89]
[66 88]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
