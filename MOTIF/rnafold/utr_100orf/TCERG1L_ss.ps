%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUCGCUCCGGAGCCGCGCCGCCGCCGGCCCAGCAUCUCGGGCGCCCGCCGCCCCCGCCGCCGCCGUCAGCGCGGGGAUGUAGGAUGCAGGCGGGCGCCAGGUUCCAGCGGCGGCGGCGGCAGCUGCAGCAGCAGCAGCCCCGGCGGCGGCAGCCUCUCCUCUGGCCGAUGGACGCAGAGCCGC\
) } def
/len { sequence length } bind def

/coor [
[191.40132141 325.48654175]
[185.28492737 311.79019165]
[179.16853333 298.09387207]
[166.59698486 295.21325684]
[157.85432434 285.46807861]
[156.30447388 272.27197266]
[162.73695374 260.42401123]
[156.85151672 246.62684631]
[150.96606445 232.82968140]
[144.96493530 219.08244324]
[138.84854126 205.38610840]
[132.73214722 191.68977356]
[118.77243042 186.62403870]
[112.37442780 172.82112122]
[117.78248596 158.21322632]
[111.66609192 144.51689148]
[105.54969788 130.82055664]
[99.43331146 117.12420654]
[80.48820496 104.44905090]
[89.39965820 79.71061707]
[78.74860382 69.14865875]
[68.09754181 58.58670044]
[57.44649124 48.02473831]
[46.79543304 37.46277618]
[36.14437866 26.90081787]
[25.49332237 16.33885574]
[14.84226704 5.77689552]
[4.19121170 -4.78506517]
[-6.45984411 -15.34702587]
[-18.58671570 -10.04288387]
[-31.76290894 -9.18405342]
[-44.41428757 -12.85133362]
[-55.03683853 -20.58609772]
[-62.37545395 -31.44753265]
[-65.57221222 -44.12702560]
[-64.26665497 -57.10582733]
[-58.63625336 -68.83695221]
[-68.92648315 -79.75076294]
[-79.21671295 -90.66456604]
[-89.50694275 -101.57837677]
[-95.75161743 -103.85054016]
[-99.35603333 -108.27825165]
[-99.95190430 -113.03594971]
[-109.86968994 -124.28928375]
[-119.78747559 -135.54261780]
[-129.70526123 -146.79594421]
[-139.62304688 -158.04928589]
[-149.54084778 -169.30261230]
[-159.45863342 -180.55593872]
[-169.37641907 -191.80928040]
[-179.29420471 -203.06260681]
[-189.21199036 -214.31594849]
[-199.22395325 -225.48556519]
[-209.32939148 -236.57070923]
[-220.24319458 -246.86093140]
[-231.90303040 -256.29748535]
[-243.56286621 -265.73400879]
[-255.22268677 -275.17056274]
[-266.88253784 -284.60708618]
[-278.54235840 -294.04364014]
[-287.20126343 -297.01882935]
[-290.31704712 -303.73794556]
[-301.81671143 -313.36904907]
[-316.83609009 -309.47058105]
[-331.26614380 -315.17614746]
[-339.55819702 -328.29183960]
[-338.52383423 -343.77438354]
[-328.56072998 -355.67047119]
[-313.49996948 -359.40576172]
[-299.13265991 -353.54400635]
[-290.98336792 -340.33914185]
[-292.18563843 -324.86871338]
[-280.68597412 -315.23760986]
[-269.10580444 -305.70346069]
[-257.44598389 -296.26693726]
[-245.78614807 -286.83038330]
[-234.12631226 -277.39385986]
[-222.46649170 -267.95730591]
[-210.80665588 -258.52075195]
[-213.89851379 -273.19863892]
[-208.67648315 -287.26031494]
[-196.75360107 -296.36224365]
[-181.81274414 -297.69290161]
[-168.46900940 -290.84127808]
[-160.84416199 -277.92376709]
[-161.29344177 -262.93051147]
[-169.67810059 -250.49275208]
[-183.40815735 -244.45243835]
[-198.24426270 -246.67613220]
[-188.13882446 -235.59100342]
[-181.29479980 -232.76008606]
[-177.95866394 -224.23373413]
[-168.04086304 -212.98039246]
[-158.12307739 -201.72706604]
[-148.20529175 -190.47372437]
[-138.28750610 -179.22039795]
[-128.36972046 -167.96707153]
[-118.45193481 -156.71372986]
[-108.53414154 -145.46040344]
[-98.61635590 -134.20707703]
[-88.69857025 -122.95373535]
[-78.59313202 -111.86860657]
[-68.30290222 -100.95479584]
[-58.01267624 -90.04099274]
[-47.72244644 -79.12718201]
[-31.79123688 -84.70059204]
[-14.97029305 -82.75357056]
[-0.64027637 -73.62886047]
[8.29759026 -59.11661148]
[10.00884533 -42.10340118]
[4.10211658 -25.99808121]
[14.75317192 -15.43612099]
[25.40422821 -4.87415981]
[36.05528259 5.68780088]
[46.70634079 16.24976158]
[57.35739517 26.81172180]
[68.00845337 37.37368393]
[78.65950775 47.93564224]
[89.31056213 58.49760437]
[99.96161652 69.05956268]
[114.51876068 72.67752838]
[128.87515259 68.33078766]
[143.23153687 63.98405838]
[154.19744873 52.57970047]
[168.62075806 56.29687500]
[182.97714233 51.95014191]
[197.33354187 47.60340881]
[211.68992615 43.25667572]
[226.04631042 38.90993881]
[236.86209106 26.58310318]
[252.89030457 30.05135918]
[257.64248657 45.74686050]
[246.23001099 57.52342606]
[230.39305115 53.26633072]
[216.03665161 57.61306381]
[201.68026733 61.95979691]
[187.32388306 66.30653381]
[172.96749878 70.65326691]
[163.02844238 81.74671173]
[147.57827759 78.34044647]
[133.22187805 82.68717957]
[118.86549377 87.03391266]
[119.98975372 100.95595551]
[113.12964630 111.00781250]
[119.24604034 124.70415497]
[125.36243439 138.40049744]
[131.47883606 152.09683228]
[145.96617126 157.82002258]
[151.97395325 171.79718018]
[146.42849731 185.57337952]
[152.54489136 199.26971436]
[158.66128540 212.96604919]
[165.03125000 219.54269409]
[164.76322937 226.94424438]
[170.64866638 240.74139404]
[176.53411865 254.53855896]
[192.87483215 260.75558472]
[199.54190063 276.55218506]
[192.86488342 291.97747803]
[198.98127747 305.67379761]
[205.09765625 319.37014771]
[211.78373718 332.79760742]
[219.02770996 345.93246460]
[226.27166748 359.06735229]
[233.51564026 372.20223999]
[240.75959778 385.33709717]
[256.06039429 384.95690918]
[269.78012085 391.74127197]
[278.76608276 404.13119507]
[280.95339966 419.27960205]
[275.83944702 433.70547485]
[264.59933472 444.09387207]
[249.81597900 448.05758667]
[234.88648987 444.68579102]
[223.24154663 434.75332642]
[217.55708313 420.54257202]
[219.13934326 405.31909180]
[227.62472534 392.58108521]
[220.38075256 379.44619751]
[213.13679504 366.31130981]
[205.89282227 353.17645264]
[198.64886475 340.04156494]
[191.93138123 353.45333862]
[177.29409790 356.73205566]
[165.49716187 347.46749878]
[165.21270752 332.47018433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 161]
[2 160]
[3 159]
[7 156]
[8 155]
[9 154]
[10 152]
[11 151]
[12 150]
[15 147]
[16 146]
[17 145]
[18 144]
[20 120]
[21 119]
[22 118]
[23 117]
[24 116]
[25 115]
[26 114]
[27 113]
[28 112]
[29 111]
[37 105]
[38 104]
[39 103]
[40 102]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[53 90]
[54 89]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[62 73]
[63 72]
[121 142]
[122 141]
[123 140]
[125 138]
[126 137]
[127 136]
[128 135]
[129 134]
[162 182]
[163 181]
[164 180]
[165 179]
[166 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
