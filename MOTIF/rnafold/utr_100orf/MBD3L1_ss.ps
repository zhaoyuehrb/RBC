%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUGUCCUGAGAAGGCAGGCUUCAUUGAUCAAUUUGACCCCAUUUCAUGAUUUAUUUUAAUAGUGUAAGAGGAAAAGAAGUGUGAUGGCCAAGAGUUCACAGAGGAAGCAACGUGACUGUGUAAACCAAUGCAAAUCAAAGCCUGGCUUGAGCACCUCAAUCCCUUUGAGAAUGUCCAGUUACA\
) } def
/len { sequence length } bind def

/coor [
[123.11258698 146.83125305]
[108.11274719 146.90196228]
[97.94356537 135.87528992]
[99.22551727 120.93057251]
[93.34007263 134.72773743]
[87.45462799 148.52488708]
[86.96263123 157.66746521]
[81.35268402 162.50306702]
[75.23628998 176.19941711]
[69.11989594 189.89575195]
[71.35306549 206.14213562]
[58.23569107 215.98422241]
[43.26180649 209.29731750]
[41.83525467 192.96032715]
[55.42355347 183.77935791]
[61.53994751 170.08302307]
[67.65634155 156.38668823]
[73.65747070 142.63945007]
[79.54291534 128.84228516]
[85.42835999 115.04512787]
[81.56636047 100.55081940]
[69.59609985 91.51130676]
[57.62584305 82.47178650]
[45.65558243 73.43226624]
[33.68532562 64.39274597]
[15.37184334 62.56442642]
[9.14818382 46.16560364]
[-2.97224236 37.32845306]
[-15.09266758 28.49129868]
[-28.08364105 32.09491348]
[-40.59329987 27.61746979]
[-48.12304306 16.90740585]
[-48.10304260 4.01006126]
[-60.07329941 -5.02945805]
[-72.04355621 -14.06897736]
[-84.01381683 -23.10849762]
[-95.98407745 -32.14801788]
[-110.10933685 -26.28080368]
[-125.17536926 -28.25854301]
[-137.14904785 -37.45080185]
[-142.87562561 -51.30945206]
[-140.90974426 -66.07430267]
[-152.88000488 -75.11382294]
[-164.85025024 -84.15334320]
[-176.82051086 -93.19286346]
[-188.79077148 -102.23238373]
[-204.46630859 -104.37434387]
[-209.96012878 -118.21873474]
[-221.93038940 -127.25825500]
[-233.90065002 -136.29777527]
[-251.16836548 -133.55986023]
[-264.81149292 -143.94480896]
[-266.69491577 -160.64736938]
[-278.81533813 -169.48452759]
[-290.93576050 -178.32167053]
[-311.04403687 -179.53384399]
[-318.14767456 -197.50488281]
[-330.55813599 -205.92988586]
[-342.96859741 -214.35487366]
[-355.37905884 -222.77987671]
[-367.78952026 -231.20487976]
[-383.26333618 -227.98982239]
[-396.43234253 -236.72781372]
[-399.48361206 -252.23477173]
[-390.60687256 -265.31066895]
[-375.06854248 -268.19781494]
[-362.08721924 -259.18331909]
[-359.36450195 -243.61532593]
[-346.95407104 -235.19033813]
[-334.54360962 -226.76533508]
[-322.13314819 -218.34033203]
[-309.72268677 -209.91534424]
[-299.87426758 -212.73370361]
[-289.89428711 -209.58930969]
[-283.16290283 -201.29330444]
[-282.09860229 -190.44209290]
[-269.97817993 -181.60494995]
[-257.85775757 -172.76779175]
[-245.51960754 -176.52435303]
[-233.08709717 -172.42127991]
[-225.17668152 -161.74586487]
[-224.86112976 -148.26803589]
[-212.89086914 -139.22851562]
[-200.92060852 -130.18899536]
[-186.10125732 -128.69360352]
[-179.75125122 -114.20263672]
[-167.78099060 -105.16311646]
[-155.81072998 -96.12359619]
[-143.84048462 -87.08408356]
[-131.87022400 -78.04456329]
[-118.20700073 -83.97599792]
[-103.31024170 -82.26062012]
[-91.19213867 -73.25962067]
[-85.16688538 -59.30995560]
[-86.94455719 -44.11827469]
[-74.97429657 -35.07875443]
[-63.00403976 -26.03923607]
[-51.03378296 -16.99971581]
[-39.06352234 -7.96019697]
[-22.53185654 -10.99770164]
[-8.63895226 -0.94933462]
[-6.25551462 16.37087250]
[5.86491108 25.20802498]
[17.98533630 34.04518127]
[29.99408150 32.48530197]
[40.16774368 39.76641083]
[42.72484589 52.42248535]
[54.69510269 61.46200562]
[66.66535950 70.50152588]
[78.63562012 79.54104614]
[90.60588074 88.58056641]
[97.44690704 82.92008972]
[107.53950500 81.74310303]
[117.84608459 86.73649597]
[124.59658813 97.55371857]
[138.79884338 102.38028717]
[153.00111389 107.20684814]
[167.20338440 112.03340912]
[181.40563965 116.85997009]
[195.60791016 121.68653870]
[209.81016541 126.51309967]
[224.80169678 126.00919342]
[238.64781189 120.23985291]
[252.49391174 114.47051239]
[266.34002686 108.70117188]
[272.12487793 93.99365234]
[286.64831543 87.76107025]
[301.29385376 93.70109558]
[307.37252808 108.28961945]
[301.27801514 122.87153625]
[286.62603760 128.79563904]
[272.10937500 122.54727936]
[258.26324463 128.31661987]
[244.41714478 134.08596802]
[230.57104492 139.85530090]
[230.25613403 147.34869385]
[229.62632751 162.33546448]
[229.31141663 169.82884216]
[242.62464905 176.73954773]
[255.93788147 183.65025330]
[269.25112915 190.56095886]
[282.56436157 197.47164917]
[295.87759399 204.38235474]
[301.13369751 204.14277649]
[305.51049805 205.79066467]
[308.43350220 208.66996765]
[309.67437744 211.99137878]
[322.62255859 219.56401062]
[338.44116211 219.85197449]
[345.52136230 232.95617676]
[358.46954346 240.52879333]
[371.41772461 248.10142517]
[384.36590576 255.67405701]
[397.31408691 263.24667358]
[414.03906250 266.02368164]
[416.00051880 282.86376953]
[400.36154175 289.41040039]
[389.74145508 276.19485474]
[376.79327393 268.62222290]
[363.84509277 261.04959106]
[350.89691162 253.47697449]
[337.94873047 245.90434265]
[323.05630493 246.15802002]
[315.04992676 232.51217651]
[302.10174561 224.93955994]
[288.96688843 217.69558716]
[275.65365601 210.78488159]
[262.34042358 203.87419128]
[249.02717590 196.96348572]
[235.71394348 190.05278015]
[222.40071106 183.14207458]
[211.15983582 193.07398987]
[196.40057373 195.75056458]
[182.38792419 190.39839172]
[173.17117310 178.56407166]
[171.41366577 163.66737366]
[177.62329102 150.01306152]
[190.00564575 141.54681396]
[204.98361206 140.71536255]
[190.78134155 135.88879395]
[176.57907104 131.06224060]
[162.37681580 126.23567200]
[148.17454529 121.40911102]
[133.97229004 116.58255005]
[119.77002716 111.75598145]
[131.75434875 120.77684021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[8 17]
[9 16]
[10 15]
[21 111]
[22 110]
[23 109]
[24 108]
[25 107]
[27 104]
[28 103]
[29 102]
[33 99]
[34 98]
[35 97]
[36 96]
[37 95]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[48 84]
[49 83]
[50 82]
[53 78]
[54 77]
[55 76]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[115 185]
[116 184]
[117 183]
[118 182]
[119 181]
[120 180]
[121 179]
[122 135]
[123 134]
[124 133]
[125 132]
[138 171]
[139 170]
[140 169]
[141 168]
[142 167]
[143 166]
[147 165]
[148 164]
[150 162]
[151 161]
[152 160]
[153 159]
[154 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
