%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACCAAAUCCUCCACUCUUGAAACCAUGUGCUACUACAGCAACUACUAUGGUGGUCUGCGUUAUGGCUAUGGAGUCCUGGGCGGUGGCUAUGGCUGUGGCUGUGGUUAUGGCCAUGGCUAUGGAG\
) } def
/len { sequence length } bind def

/coor [
[209.45045471 315.96218872]
[195.69599915 321.94677734]
[180.70108032 322.33691406]
[166.65402222 317.07571411]
[155.60487366 306.93093872]
[149.16612244 293.38317871]
[148.27746582 278.40951538]
[153.06855774 264.19525146]
[162.84020996 252.81478882]
[176.16635132 245.92900085]
[191.10215759 244.54280090]
[205.46984863 248.85949707]
[196.30224609 236.98706055]
[182.39962769 231.64230347]
[180.08937073 215.99067688]
[170.92176819 204.11822510]
[157.01913452 198.77346802]
[154.70887756 183.12185669]
[145.54127502 171.24940491]
[136.37367249 159.37695312]
[121.61390686 157.73841858]
[112.14752197 145.82865906]
[113.96624756 130.35836792]
[104.79864502 118.48592377]
[90.44114685 116.53434753]
[81.58553314 105.06594086]
[83.32891083 90.68168640]
[74.16130066 78.80923462]
[64.99369812 66.93679047]
[55.82609177 55.06434250]
[46.65848541 43.19189453]
[38.85296249 38.24626923]
[37.41640472 30.91687393]
[28.54062271 18.82470703]
[19.66484261 6.73254013]
[10.78906155 -5.35962725]
[-4.58120108 -7.88802338]
[-13.41024780 -20.27763939]
[-10.90508652 -34.91525269]
[-19.78086853 -47.00742340]
[-27.46364594 -52.14165497]
[-28.72130013 -59.50385666]
[-37.29999161 -71.80857086]
[-45.87868500 -84.11328888]
[-54.60656738 -96.31263733]
[-63.48234940 -108.40480042]
[-72.35813141 -120.49697113]
[-81.23390961 -132.58914185]
[-90.10969543 -144.68130493]
[-105.33286285 -150.77941895]
[-107.39517212 -167.04838562]
[-94.17508698 -176.75205994]
[-79.27230072 -169.90815735]
[-78.01752472 -153.55708313]
[-69.14174652 -141.46492004]
[-60.26596451 -129.37275696]
[-51.39018250 -117.28058624]
[-42.51440048 -105.18841553]
[-35.95259094 -101.62100983]
[-33.57396698 -92.69197845]
[-24.99527550 -80.38726807]
[-16.41658401 -68.08255005]
[-7.68870020 -55.88320160]
[1.18708074 -43.79103470]
[15.90257263 -41.79356384]
[25.07613373 -29.65682602]
[22.88122940 -14.23540878]
[31.75700951 -2.14324117]
[40.63278961 9.94892597]
[49.50857162 22.04109383]
[58.53093338 34.02428818]
[67.69853973 45.89673615]
[76.86614227 57.76918411]
[86.03375244 69.64163208]
[95.20135498 81.51407623]
[109.55885315 83.46565247]
[118.41446686 94.93405914]
[116.67108917 109.31831360]
[125.83869934 121.19076538]
[141.26597595 123.34412384]
[150.39410400 135.51507568]
[148.24612427 150.20935059]
[157.41372681 162.08180237]
[166.58132935 173.95423889]
[181.13967896 180.14819336]
[182.79420471 194.95062256]
[191.96180725 206.82307434]
[206.52015686 213.01702881]
[208.17469788 227.81945801]
[217.34230042 239.69189453]
[228.39117432 249.83697510]
[241.00099182 257.96054077]
[253.61080933 266.08410645]
[266.22061157 274.20770264]
[278.83044434 282.33126831]
[291.44024658 290.45483398]
[304.05007935 298.57843018]
[316.65988159 306.70199585]
[329.26971436 314.82556152]
[341.87951660 322.94915771]
[354.48934937 331.07272339]
[367.09918213 339.19628906]
[379.70898438 347.31988525]
[392.31881714 355.44345093]
[404.92861938 363.56701660]
[417.53845215 371.69061279]
[433.93557739 371.94815063]
[441.67355347 386.40692139]
[432.79226685 400.19293213]
[416.42794800 399.12435913]
[409.41485596 384.30041504]
[396.80505371 376.17684937]
[384.19522095 368.05328369]
[371.58541870 359.92968750]
[358.97558594 351.80612183]
[346.36578369 343.68255615]
[333.75595093 335.55895996]
[321.14614868 327.43539429]
[308.53631592 319.31182861]
[295.92651367 311.18823242]
[283.31668091 303.06466675]
[270.70687866 294.94110107]
[258.09704590 286.81750488]
[245.48722839 278.69393921]
[232.87741089 270.57037354]
[220.26759338 262.44677734]
[225.79139709 276.39266968]
[225.68260193 291.39227295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 90]
[13 89]
[15 87]
[16 86]
[18 84]
[19 83]
[20 82]
[23 79]
[24 78]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[33 70]
[34 69]
[35 68]
[36 67]
[39 64]
[40 63]
[42 62]
[43 61]
[44 60]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[91 126]
[92 125]
[93 124]
[94 123]
[95 122]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
