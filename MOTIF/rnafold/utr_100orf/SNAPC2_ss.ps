%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGUAGCUCCGCCCAUCGGAGAAGCGACCUUACAGCGCCUGCCUCUUUCUGAGCGGCAUGAAGCCACCUCCCAGGCGGCGAGCGGCCCCGGCGCGCUAUCUGGGCGAGGUGACCGGUCCCGCGACCUGGAGCGCUCGCGAGAAGCGGCAGCUAGUGC\
) } def
/len { sequence length } bind def

/coor [
[-112.92030334 415.81210327]
[-126.44937134 422.27896118]
[-141.29885864 421.11352539]
[-149.67855835 433.55459595]
[-158.05825806 445.99569702]
[-155.24174500 461.31576538]
[-163.91717529 473.81344604]
[-178.53988647 476.40414429]
[-186.91960144 488.84521484]
[-195.29930115 501.28631592]
[-203.67900085 513.72741699]
[-212.05870056 526.16845703]
[-210.41079712 542.12670898]
[-221.96044922 553.26153564]
[-237.84773254 551.03137207]
[-245.88529968 537.14697266]
[-239.90740967 522.25921631]
[-224.49978638 517.78875732]
[-216.12008667 505.34768677]
[-207.74038696 492.90661621]
[-199.36068726 480.46551514]
[-190.98097229 468.02444458]
[-194.07582092 453.50006104]
[-185.75483704 440.76367188]
[-170.49934387 437.61599731]
[-162.11964417 425.17489624]
[-153.73994446 412.73382568]
[-160.40080261 399.41094971]
[-159.49261475 384.44329834]
[-151.15936279 371.85665894]
[-137.55555725 365.08663940]
[-122.29002380 366.04110718]
[-113.91032410 353.60000610]
[-105.53062439 341.15893555]
[-97.27423859 328.63565063]
[-89.14196777 316.03143311]
[-81.00970459 303.42724609]
[-73.00235748 290.74328613]
[-65.12070465 277.98086548]
[-57.23904800 265.21844482]
[-56.39566040 257.83563232]
[-49.07348633 252.28388977]
[-40.94121933 239.67967224]
[-40.54262543 224.79040527]
[-26.55933952 217.38916016]
[-18.42707443 204.78494263]
[-10.29480839 192.18072510]
[-2.16254306 179.57650757]
[-4.40221119 167.65521240]
[2.31485868 157.07614136]
[14.83366966 153.82958984]
[23.21337128 141.38850403]
[31.59307289 128.94741821]
[39.97277451 116.50634003]
[48.35247421 104.06525421]
[56.73217773 91.62416840]
[55.69568634 76.66001892]
[45.68077087 65.49303436]
[29.80395317 63.18951416]
[21.83059883 49.26811981]
[27.87718010 34.40816116]
[43.30527878 30.00892448]
[56.27978134 39.44512558]
[56.84775162 55.47812271]
[66.86267090 66.64510345]
[81.62612915 63.99174881]
[87.12593842 50.03639221]
[92.62575531 36.08103561]
[98.12557220 22.12567520]
[103.62538910 8.17031765]
[108.84841919 -5.89097691]
[113.79261017 -20.05271912]
[118.73680115 -34.21446228]
[123.68099976 -48.37620544]
[128.62519836 -62.53794479]
[133.56938171 -76.69969177]
[130.81318665 -92.27896881]
[142.31317139 -101.74467468]
[147.25737000 -115.90641785]
[152.20155334 -130.06816101]
[157.14575195 -144.22990417]
[154.38955688 -159.80918884]
[165.88954163 -169.27488708]
[170.83374023 -183.43663025]
[162.68229675 -196.78160095]
[165.06700134 -212.23628235]
[176.86187744 -222.50344849]
[192.49774170 -222.73527527]
[204.59181213 -212.82228088]
[207.43365479 -197.44509888]
[199.68141174 -183.86433411]
[184.99548340 -178.49244690]
[180.05128479 -164.33070374]
[183.16111755 -149.76435852]
[171.30749512 -139.28570557]
[166.36329651 -125.12397003]
[161.41911316 -110.96222687]
[156.47491455 -96.80048370]
[159.58474731 -82.23414612]
[147.73112488 -71.75549316]
[142.78692627 -57.59375381]
[137.84274292 -43.43201065]
[132.89854431 -29.27026749]
[127.95435333 -15.10852528]
[123.01015472 -0.94678319]
[124.26722717 3.71091914]
[122.57375336 9.20605946]
[117.58074951 13.67013454]
[112.08093262 27.62549210]
[106.58111572 41.58084869]
[101.08129883 55.53620911]
[95.58148193 69.49156952]
[115.37226868 77.72236633]
[122.74996185 94.93754578]
[137.66146851 96.56440735]
[152.58833313 98.04388428]
[167.52908325 99.37582397]
[182.46983337 100.70776367]
[197.41058350 102.03969574]
[212.04867554 94.64659882]
[225.62030029 103.85219574]
[224.16412354 120.18656158]
[209.17814636 126.84630585]
[196.07864380 116.98044586]
[181.13789368 115.64850616]
[166.19714355 114.31656647]
[151.25639343 112.98463440]
[144.27757263 115.53668976]
[136.03460693 111.47592926]
[121.12309265 109.84906006]
[105.95450592 125.11701965]
[82.43704224 122.21627808]
[69.17326355 100.00386810]
[60.79356003 112.44495392]
[52.41386032 124.88603973]
[44.03415680 137.32711792]
[35.65445709 149.76820374]
[27.27475548 162.20928955]
[26.45287323 180.58045959]
[10.44167328 187.70878601]
[2.30940747 200.31300354]
[-5.82285786 212.91720581]
[-13.95512295 225.52142334]
[-14.93539333 241.31224060]
[-28.33700371 247.81193542]
[-36.46926880 260.41616821]
[-44.47661972 273.10009766]
[-52.35827637 285.86251831]
[-60.23992920 298.62493896]
[-62.10303116 307.62301636]
[-68.40548706 311.55950928]
[-76.53775787 324.16372681]
[-84.67002106 336.76791382]
[-86.71053314 345.72741699]
[-93.08953857 349.53863525]
[-101.46923828 361.97970581]
[-109.84893799 374.42080688]
[-103.22726440 388.20849609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[32 157]
[33 156]
[34 155]
[35 153]
[36 152]
[37 151]
[38 149]
[39 148]
[40 147]
[42 146]
[43 145]
[45 143]
[46 142]
[47 141]
[48 140]
[51 138]
[52 137]
[53 136]
[54 135]
[55 134]
[56 133]
[57 65]
[58 64]
[66 112]
[67 111]
[68 110]
[69 109]
[70 108]
[71 105]
[72 104]
[73 103]
[74 102]
[75 101]
[76 100]
[78 98]
[79 97]
[80 96]
[81 95]
[83 93]
[84 92]
[114 130]
[115 129]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
