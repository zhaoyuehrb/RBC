%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUUCCGCUUCCGGUGUCCCCUACAGUCAUGGCUGCCGCCGUCGCUGCUGCCGGUGCAGGGGAACCCCAGUCCCCGGACGAAUUGCUCCCGAAAGGCGACGCGGAGAAGCCUGAGGAGGAGCUGGAGG\
) } def
/len { sequence length } bind def

/coor [
[47.39234543 418.72979736]
[44.15008545 433.74255371]
[33.82393265 445.11209106]
[19.19157410 449.78002930]
[4.18903971 446.49072266]
[-7.14806557 436.12899780]
[-11.77011585 421.48208618]
[-8.43380451 406.48992920]
[1.96341956 395.18536377]
[16.62475395 390.60922241]
[19.83719444 375.95727539]
[23.04963684 361.30529785]
[26.26207733 346.65332031]
[29.47451973 332.00134277]
[32.68695831 317.34939575]
[35.89940262 302.69741821]
[39.11184311 288.04544067]
[37.45494461 280.76586914]
[42.58098221 273.08264160]
[46.14384460 258.51190186]
[49.70670700 243.94117737]
[53.09460068 229.32878113]
[56.30704117 214.67681885]
[59.51948547 200.02484131]
[57.86258316 192.74525452]
[62.98862457 185.06202698]
[66.55148315 170.49130249]
[52.37300110 175.38726807]
[39.57521439 167.56317139]
[37.46960449 152.71168518]
[47.58818817 141.63854980]
[62.56882858 142.40040588]
[71.51181030 154.44285583]
[76.79206085 140.40293884]
[82.07230377 126.36303711]
[87.35254669 112.32312775]
[83.32758331 94.18209076]
[97.76515961 82.48363495]
[102.36618805 68.20671082]
[106.96721649 53.92978668]
[111.56824493 39.65286636]
[111.22866058 30.42285728]
[116.45456696 25.09111023]
[121.39662933 10.92862129]
[126.33868408 -3.23386645]
[131.28074646 -17.39635468]
[136.22279358 -31.55884171]
[141.16485596 -45.72132874]
[132.67820740 -55.05341721]
[129.02432251 -67.05071259]
[130.84719849 -79.38555145]
[137.73446655 -89.69246674]
[148.30862427 -96.02180481]
[160.50216675 -97.20838928]
[166.11755371 -111.11764526]
[171.73295593 -125.02690125]
[168.70848083 -143.14425659]
[182.84500122 -153.47076416]
[188.12524414 -167.51068115]
[193.40548706 -181.55058289]
[197.31672668 -196.03167725]
[199.82298279 -210.82083130]
[202.32925415 -225.60997009]
[204.83551025 -240.39910889]
[207.34176636 -255.18824768]
[197.07341003 -266.98208618]
[196.83999634 -282.61791992]
[206.75177002 -294.71301270]
[222.12867737 -297.55639648]
[235.71020508 -289.80551147]
[241.08358765 -275.12011719]
[235.71166992 -260.43420410]
[222.13090515 -252.68199158]
[219.62464905 -237.89283752]
[217.11839294 -223.10369873]
[214.61212158 -208.31455994]
[212.10586548 -193.52542114]
[224.23150635 -202.35542297]
[239.23016357 -202.55641174]
[251.58805847 -194.05450439]
[256.76223755 -179.97515869]
[252.85055542 -165.49418640]
[241.29103088 -155.93502808]
[226.33314514 -154.81181335]
[213.47567749 -162.53744507]
[207.44540405 -176.27033997]
[202.16516113 -162.23043823]
[196.88491821 -148.19052124]
[201.60076904 -136.98359680]
[197.23886108 -125.20442200]
[185.64221191 -119.41150665]
[180.02680969 -105.50225067]
[174.41142273 -91.59300232]
[184.45446777 -77.16290283]
[183.89526367 -59.43479919]
[172.76881409 -45.42204666]
[155.32734680 -40.77927399]
[150.38528442 -26.61678505]
[145.44322205 -12.45429611]
[140.50117493 1.70819139]
[135.55911255 15.87067890]
[130.61705017 30.03316689]
[125.84516907 44.25389481]
[121.24414062 58.53081894]
[116.64311218 72.80773926]
[112.04208374 87.08466339]
[117.14247131 95.76285553]
[116.67241669 105.81790924]
[110.78467560 113.98242950]
[101.39245605 117.60337067]
[96.11220551 131.64328003]
[90.83196259 145.68318176]
[85.55171967 159.72309875]
[81.12220764 174.05416870]
[77.55934906 188.62489319]
[74.17145538 203.23728943]
[70.95901489 217.88925171]
[67.74657440 232.54122925]
[68.96864319 241.69627380]
[64.27742767 247.50404358]
[60.71456909 262.07476807]
[57.15170670 276.64547729]
[53.76381302 291.25790405]
[50.55137253 305.90985107]
[47.33892822 320.56182861]
[44.12648773 335.21380615]
[40.91404724 349.86578369]
[37.70160675 364.51773071]
[34.48916626 379.16970825]
[31.27672386 393.82168579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[17 123]
[19 122]
[20 121]
[21 120]
[22 118]
[23 117]
[24 116]
[26 115]
[27 114]
[33 113]
[34 112]
[35 111]
[36 110]
[38 106]
[39 105]
[40 104]
[41 103]
[43 102]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[54 93]
[55 92]
[56 91]
[58 88]
[59 87]
[60 86]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
