%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGAGGCUGCAGACAGAGAAGGAUGAUGGCGUCUGCGGCAGCAGCGGAGGCCGAGAAGGGAUCUCCAGUUGUGGUGGGCCUGCUAGUUGUGGGCAAUAUCAUUAUUCUGCUGUCAGGCCUGUCCC\
) } def
/len { sequence length } bind def

/coor [
[76.62816620 524.80566406]
[73.26928711 509.11816406]
[83.55105591 496.80291748]
[83.55105591 481.80291748]
[75.81375122 469.07565308]
[83.55105591 455.27548218]
[83.55105591 440.27548218]
[83.55105591 425.27548218]
[83.55105591 410.27548218]
[83.55105591 395.27548218]
[75.61779022 388.63290405]
[72.64305115 378.49230957]
[75.86226654 368.19497681]
[84.42671204 361.27658081]
[85.16272736 346.29464722]
[85.89874268 331.31271362]
[86.63475800 316.33078003]
[87.37077332 301.34884644]
[87.92288208 286.35900879]
[88.29100037 271.36352539]
[88.65911865 256.36804199]
[89.02723694 241.37257385]
[81.60461426 228.45924377]
[89.67825317 214.85311890]
[90.04637146 199.85763550]
[90.41448975 184.86215210]
[90.78260803 169.86666870]
[91.15072632 154.87118530]
[91.51884460 139.87570190]
[91.88696289 124.88021851]
[79.62073517 118.20973206]
[72.09465790 105.74060822]
[71.88786316 90.57579803]
[79.66167450 76.85704041]
[93.81671143 68.63378906]
[88.76336670 54.51062393]
[83.71001434 40.38746262]
[78.65666962 26.26430321]
[66.72252655 15.87745094]
[69.71984100 1.28754580]
[64.66649628 -12.83561516]
[59.61314774 -26.95877647]
[54.55979919 -41.08193588]
[49.50645065 -55.20509720]
[39.30247879 -59.33946609]
[33.23272705 -68.25891876]
[33.13571167 -78.82637787]
[38.79913712 -87.48583221]
[34.44486618 -101.83993530]
[30.09059715 -116.19403839]
[25.73632622 -130.54814148]
[21.38205719 -144.90225220]
[16.85196686 -159.20184326]
[12.14674187 -173.44476318]
[-2.08094549 -180.32579041]
[-7.19684410 -195.27914429]
[-0.16578281 -209.43328857]
[14.84083462 -214.39080811]
[28.91984940 -207.21049500]
[33.71842957 -192.15229797]
[26.38966370 -178.14999390]
[31.09489059 -163.90707397]
[36.23447800 -158.48564148]
[35.73616028 -149.25651550]
[40.09043121 -134.90242004]
[44.44470215 -120.54830933]
[48.79897308 -106.19420624]
[53.15324402 -91.84010315]
[68.21697998 -79.81615448]
[63.62961197 -60.25844574]
[68.68296051 -46.13528442]
[73.73630524 -32.01212311]
[78.78965759 -17.88896370]
[83.84300232 -3.76580215]
[95.41570282 5.61086750]
[92.77983093 21.21095657]
[97.83317566 35.33411789]
[102.88652802 49.45727921]
[107.93987274 63.58043671]
[121.65302277 69.65905762]
[135.51121521 63.91880798]
[149.36940002 58.17855453]
[163.22760010 52.43830490]
[177.08580017 46.69805145]
[190.94398499 40.95780182]
[198.38711548 26.74585152]
[214.16584778 23.84571075]
[226.17611694 34.48211670]
[225.20465088 50.49573135]
[211.99668884 59.60227585]
[196.68423462 54.81599426]
[182.82604980 60.55624390]
[168.96784973 66.29649353]
[155.10966492 72.03675079]
[141.25146484 77.77700043]
[127.39327240 83.51725006]
[129.95472717 102.21391296]
[121.68822479 117.87176514]
[106.88244629 125.24833679]
[106.51432800 140.24382019]
[106.14620972 155.23930359]
[105.77809143 170.23478699]
[105.40997314 185.23027039]
[105.04185486 200.22575378]
[104.67373657 215.22123718]
[112.07003021 229.20713806]
[104.02272034 241.74069214]
[103.65460205 256.73617554]
[103.28648376 271.73165894]
[102.91836548 286.72714233]
[105.86015320 295.48901367]
[102.35270691 302.08486938]
[101.61669159 317.06680298]
[100.88067627 332.04873657]
[100.14466095 347.03067017]
[99.40864563 362.01260376]
[109.47578430 379.39651489]
[98.55105591 395.27548218]
[98.55105591 410.27548218]
[98.55105591 425.27548218]
[98.55105591 440.27548218]
[98.55105591 455.27548218]
[106.28835297 469.07565308]
[98.55105591 481.80291748]
[98.55105591 496.80291748]
[108.83282471 509.11816406]
[105.47394562 524.80566406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[14 116]
[15 115]
[16 114]
[17 113]
[18 112]
[19 110]
[20 109]
[21 108]
[22 107]
[24 105]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[30 99]
[35 79]
[36 78]
[37 77]
[38 76]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 62]
[54 61]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
