%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCGCAUGCGCCCGGAGAGCUGAAGGGCGCGCGGUGCCGACAGGGAGCUUCCUUGGCUGGCAUGGCGGCGAGCGCGCUGCGAGGCCUGCCAGUGGCUGGCGGAGGCGAGAGUAGCGAGAGCGAGGAUGAUGGCUGGGAGAUUGGGUAUCUCGACCGGACGU\
) } def
/len { sequence length } bind def

/coor [
[66.73904419 162.09436035]
[65.01879120 147.19332886]
[63.29854202 132.29229736]
[52.00516891 122.42012787]
[37.00792313 122.70745087]
[22.01067352 122.99477386]
[7.01342583 123.28209686]
[-6.63600731 131.28231812]
[-19.50915146 123.79022217]
[-34.50640106 124.07754517]
[-49.50364685 124.36486816]
[-63.36183929 130.10511780]
[-74.16966248 140.50660706]
[-84.97748566 150.90809631]
[-95.78530884 161.30958557]
[-91.45140076 175.98867798]
[-94.44700623 190.99816895]
[-104.08375549 202.88899231]
[-118.14719391 208.92872620]
[-133.40563965 207.72947693]
[-146.35282898 199.56681824]
[-154.01358032 186.31648254]
[-154.62751770 171.02328491]
[-148.05355835 157.20150757]
[-135.80233765 148.02728271]
[-120.68912506 145.60877991]
[-106.18679810 150.50175476]
[-95.37897491 140.10026550]
[-84.57115173 129.69879150]
[-73.76332855 119.29729462]
[-75.26171875 111.94850159]
[-79.75688171 89.90210724]
[-93.77426910 84.56237030]
[-107.79166412 79.22263336]
[-123.44216156 81.54047394]
[-132.58135986 69.77933502]
[-146.59875488 64.43960571]
[-160.61614990 59.09986877]
[-174.63352966 53.76013184]
[-188.65092468 48.42039871]
[-202.66831970 43.08066559]
[-220.75068665 46.44452667]
[-231.32029724 32.46049118]
[-245.43740845 27.39023781]
[-259.55450439 22.31998444]
[-273.67160034 17.24973106]
[-287.78869629 12.17947769]
[-301.90579224 7.10922432]
[-318.85641479 7.44578266]
[-323.87222290 -8.74921894]
[-309.69863892 -18.05222321]
[-296.83554077 -7.00787640]
[-282.71844482 -1.93762326]
[-268.60134888 3.13262987]
[-254.48425293 8.20288277]
[-240.36714172 13.27313614]
[-226.25004578 18.34338951]
[-215.14863586 13.46564388]
[-203.32698059 17.61038399]
[-197.32858276 29.06327438]
[-183.31118774 34.40300751]
[-169.29380798 39.74274445]
[-155.27641296 45.08247757]
[-141.25901794 50.42221069]
[-127.24163055 55.76194763]
[-112.59374237 53.06217957]
[-102.45192719 65.20524597]
[-88.43453217 70.54498291]
[-74.41714478 75.88471222]
[-49.79096985 109.36762238]
[-34.79372406 109.08029938]
[-19.79647446 108.79297638]
[-7.21974468 100.81330872]
[6.72610283 108.28484344]
[21.72335052 107.99752045]
[36.72060013 107.71019745]
[51.71784592 107.42287445]
[112.44481659 32.75741577]
[120.83799744 20.32542610]
[129.23118591 7.89343357]
[137.62437439 -4.53855848]
[146.01756287 -16.97055054]
[140.02249146 -32.76303482]
[144.56001282 -48.86201096]
[157.65742493 -58.99620056]
[174.04821777 -59.34029007]
[182.20173645 -71.93077087]
[190.35525513 -84.52124786]
[198.50875854 -97.11173248]
[206.41961670 -109.85608673]
[214.08489990 -122.74962616]
[221.75016785 -135.64317322]
[229.41545105 -148.53671265]
[237.08073425 -161.43026733]
[239.97756958 -178.13488770]
[256.83129883 -179.97555542]
[263.26562500 -164.29002380]
[249.97427368 -153.76498413]
[242.30899048 -140.87142944]
[234.64372253 -127.97789001]
[226.97843933 -115.08435059]
[219.31315613 -102.19080353]
[219.61549377 -97.38195801]
[216.86788940 -92.34019470]
[211.09924316 -88.95822144]
[202.94573975 -76.36773682]
[194.79222107 -63.77725601]
[186.63870239 -51.18677521]
[192.58102417 -39.20266342]
[191.80776978 -25.73998070]
[184.41448975 -14.33311844]
[172.24876404 -8.02986336]
[158.44955444 -8.57736397]
[150.05636597 3.85462809]
[141.66317749 16.28661919]
[133.26998901 28.71861076]
[124.87680817 41.15060425]
[127.68043518 48.10687256]
[142.53271484 50.20680618]
[133.28768921 62.01940918]
[136.09132385 68.97567749]
[150.75953674 72.11309052]
[165.42774963 75.25049591]
[175.65972900 63.79613876]
[190.25306702 59.00760651]
[205.28224182 62.17298889]
[216.70446777 72.44081879]
[221.44723511 87.04909515]
[218.23475647 102.06826782]
[207.93118286 113.45825195]
[193.30810547 118.15520477]
[178.29907227 114.89566803]
[166.94143677 104.55644226]
[162.29034424 89.91871643]
[147.62213135 86.78130341]
[132.95390320 83.64389801]
[129.05969238 90.05366516]
[121.27127838 102.87319946]
[117.37706757 109.28296661]
[126.92070007 120.85530853]
[136.46434021 132.42764282]
[146.00798035 143.99998474]
[155.55160522 155.57231140]
[171.31935120 158.53167725]
[178.70906067 172.77148438]
[172.05198669 187.36814880]
[156.45486450 191.12438965]
[143.88247681 181.15872192]
[143.97927856 165.11595154]
[134.43563843 153.54360962]
[124.89199829 141.97128296]
[115.34836578 130.39894104]
[105.80472565 118.82660675]
[98.90344238 121.76296234]
[78.19956970 130.57205200]
[79.91982269 145.47308350]
[81.64007568 160.37411499]
[94.79164124 168.83403015]
[99.37899780 183.78361511]
[93.23613739 198.16413879]
[79.26351929 205.18553162]
[64.05860138 201.53253174]
[54.80067062 188.92996216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 77]
[5 76]
[6 75]
[7 74]
[9 72]
[10 71]
[11 70]
[12 30]
[13 29]
[14 28]
[15 27]
[32 69]
[33 68]
[34 67]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[78 117]
[79 116]
[80 115]
[81 114]
[82 113]
[86 108]
[87 107]
[88 106]
[89 105]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[121 136]
[122 135]
[123 134]
[139 153]
[140 152]
[141 151]
[142 150]
[143 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
