%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUAGAUUUGGAGGUUCAACUUCAACAUGGCCGAAGCAAGUAGCGCCAAUCUAGGCAGCGGCUGUGAGGAAAAAAGGCAUGAGGGGUCGUCUUCGGAAUCUGUGCCACCCGGCACUACCAUUUCGA\
) } def
/len { sequence length } bind def

/coor [
[180.91850281 417.49142456]
[191.27424622 406.63977051]
[204.54299927 399.64404297]
[219.34753418 397.23040771]
[234.15121460 399.64938354]
[247.42001343 406.65182495]
[240.39945984 393.39620972]
[233.37889099 380.14056396]
[226.35833740 366.88494873]
[219.33776855 353.62930298]
[212.31721497 340.37368774]
[199.52285767 332.74783325]
[199.90138245 316.93115234]
[192.88081360 303.67550659]
[185.86026001 290.41989136]
[178.83969116 277.16427612]
[165.44816589 276.50473022]
[154.05403137 269.23385620]
[147.71347046 257.17416382]
[148.19020081 243.44892883]
[155.46638489 231.67347717]
[148.77069092 218.25082397]
[142.07499695 204.82817078]
[135.37930298 191.40551758]
[128.68360901 177.98286438]
[117.26011658 173.81153870]
[111.59724426 162.59671021]
[115.24777222 150.15554810]
[108.88092041 136.57382202]
[102.51406860 122.99209595]
[96.14722443 109.41037750]
[90.08515167 103.96181488]
[89.79520416 95.41951752]
[83.76097107 81.68678284]
[62.11404037 78.92265320]
[46.40131760 63.96118927]
[42.62502670 42.72416306]
[52.10522842 23.48966217]
[43.82871246 10.97969532]
[35.55219650 -1.53027177]
[28.12850380 -7.03247213]
[27.23078918 -14.44717503]
[19.26135826 -27.15497398]
[5.37445259 -34.73550415]
[5.16744852 -49.62866974]
[-2.80198312 -62.33646774]
[-10.92555904 -74.94628906]
[-19.20207596 -87.45625305]
[-27.47859192 -99.96622467]
[-43.01303482 -102.87424469]
[-51.87220001 -115.96205139]
[-48.80009842 -131.46488953]
[-35.61935806 -140.18518066]
[-20.14987183 -136.94934082]
[-11.56941795 -123.67714691]
[-14.96862411 -108.24273682]
[-6.69210768 -95.73277283]
[1.58440828 -83.22280121]
[7.96474648 -79.34014893]
[9.90581608 -70.30590057]
[17.87524796 -57.59810257]
[31.19212723 -50.92651749]
[31.96915817 -35.12440491]
[39.93858719 -22.41660690]
[48.06216431 -9.80678749]
[56.33868027 2.70317936]
[64.61519623 15.21314621]
[73.30918121 13.07208824]
[82.28032684 13.25191021]
[90.91843414 15.75031376]
[98.63337708 20.40695763]
[104.89544678 26.91370964]
[109.27167511 34.83502197]
[111.45581055 43.63707352]
[111.28970337 52.72375488]
[108.77471161 61.47702408]
[104.07230377 69.29895020]
[97.49371338 75.65254974]
[103.52794647 89.38528442]
[109.72894287 103.04352570]
[116.09579468 116.62525177]
[122.46264648 130.20697021]
[128.82949829 143.78869629]
[144.15960693 153.90324402]
[142.10627747 171.28717041]
[148.80197144 184.70982361]
[155.49765015 198.13247681]
[162.19334412 211.55513000]
[168.88903809 224.97779846]
[185.56266785 227.51046753]
[197.35165405 239.33789062]
[199.78132629 255.69219971]
[192.09532166 270.14370728]
[199.11589050 283.39932251]
[206.13644409 296.65496826]
[213.15701294 309.91058350]
[226.45352173 318.48458862]
[225.57284546 333.35311890]
[232.59339905 346.60876465]
[239.61396790 359.86437988]
[246.63452148 373.12002563]
[253.65509033 386.37564087]
[260.67565918 399.63125610]
[270.27075195 411.16098022]
[282.03067017 420.47247314]
[293.79061890 429.78396606]
[305.55056763 439.09545898]
[317.31048584 448.40695190]
[333.60482788 450.25805664]
[339.89990234 465.40084839]
[329.71987915 478.25772095]
[313.53707886 475.60260010]
[307.99902344 460.16687012]
[296.23907471 450.85537720]
[284.47912598 441.54388428]
[272.71920776 432.23239136]
[260.95925903 422.92092896]
[265.43466187 437.23770142]
[265.12554932 452.23452759]
[260.06399536 466.35476685]
[250.77536011 478.13275146]
[238.22378540 486.34603882]
[223.71208191 490.14212036]
[208.74645996 489.12692261]
[194.88034058 483.40588379]
[183.55291748 473.57278442]
[175.93997192 460.64828491]
[172.83168030 445.97387695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 103]
[7 102]
[8 101]
[9 100]
[10 99]
[11 98]
[13 96]
[14 95]
[15 94]
[16 93]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[28 83]
[29 82]
[30 81]
[31 80]
[33 79]
[34 78]
[38 67]
[39 66]
[40 65]
[42 64]
[43 63]
[45 61]
[46 60]
[47 58]
[48 57]
[49 56]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
