%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUACUCCCUGCCCUCCUCUUUGGGAUGGCGUGGGCCCUGGCUGACGGGCGGUGGUGUGAGUGGACAGAGACCAUCCGUGUGGAGGAGGAAGUGGCAC\
) } def
/len { sequence length } bind def

/coor [
[80.64073181 232.59342957]
[86.68706512 216.75428772]
[86.68706512 201.75428772]
[86.68706512 186.75428772]
[86.68706512 171.75428772]
[86.68706512 156.75428772]
[86.68706512 141.75428772]
[86.68706512 126.75429535]
[75.36472321 116.91536713]
[60.51142502 119.00809479]
[45.65812683 121.10082245]
[30.83917046 123.42429352]
[16.05813980 125.97795105]
[1.27710986 128.53160095]
[-13.50392056 131.08525085]
[-25.78541183 141.05900574]
[-39.64411926 135.60137939]
[-54.42514801 138.15504456]
[-69.20617676 140.70869446]
[-83.98720551 143.26234436]
[-96.23281097 154.17001343]
[-111.71482086 148.76266479]
[-114.50666809 132.60290527]
[-101.73634338 122.31452179]
[-86.54086304 128.48130798]
[-71.75983429 125.92765808]
[-56.97880173 123.37400818]
[-42.19776917 120.82035065]
[-30.97351646 111.02926636]
[-16.05757332 116.30422974]
[-1.27654350 113.75057220]
[13.50448704 111.19692230]
[28.28551674 108.64326477]
[34.44931793 104.32666016]
[43.56539536 106.24752808]
[58.41869354 104.15479279]
[73.27199554 102.06206512]
[87.52452087 80.73958588]
[109.12191010 83.23251343]
[120.89082336 73.93237305]
[132.65974426 64.63223267]
[135.57437134 58.37730789]
[140.52314758 55.14941406]
[145.46185303 55.14717484]
[157.78619385 46.59669113]
[160.72315979 31.29924393]
[173.34359741 22.80340195]
[187.90927124 25.69763374]
[200.23361206 17.14715004]
[207.16163635 2.92346787]
[222.02914429 2.02565098]
[234.35348511 -6.52483273]
[246.67782593 -15.07531643]
[259.00216675 -23.62580109]
[271.19201660 -32.36691666]
[283.24447632 -41.29655075]
[295.29693604 -50.22618103]
[307.34939575 -59.15581512]
[303.62908936 -73.89446259]
[305.83715820 -88.93417358]
[313.63690186 -101.98149872]
[325.83889771 -111.04680634]
[340.58242798 -114.74771118]
[355.61920166 -112.51985168]
[368.65625000 -104.70296478]
[377.70550537 -92.48905945]
[381.38702393 -77.74066925]
[379.13937378 -62.70682144]
[371.30535889 -49.68006897]
[359.07955933 -40.64688873]
[344.32632446 -36.98478699]
[329.29547119 -39.25219727]
[316.27902222 -47.10335922]
[304.22656250 -38.17372894]
[292.17410278 -29.24409485]
[280.12164307 -20.31446266]
[276.55841064 -13.68658638]
[267.55264282 -11.30146599]
[255.22830200 -2.75098205]
[242.90397644 5.79950190]
[230.57963562 14.34998608]
[224.53314209 27.96208000]
[208.78408813 29.47148514]
[196.45976257 38.02196884]
[194.07096863 52.67902374]
[181.69413757 61.52599335]
[166.33666992 58.92102814]
[154.01232910 67.47151184]
[141.95988464 76.40114594]
[130.19096375 85.70128632]
[118.42205048 95.00142670]
[118.65759277 113.36021423]
[101.68706512 126.75429535]
[101.68706512 141.75428772]
[101.68706512 156.75428772]
[101.68706512 171.75428772]
[101.68706512 186.75428772]
[101.68706512 201.75428772]
[101.68706512 216.75428772]
[107.73340607 232.59342957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 37]
[10 36]
[11 35]
[12 33]
[13 32]
[14 31]
[15 30]
[17 28]
[18 27]
[19 26]
[20 25]
[39 91]
[40 90]
[41 89]
[44 88]
[45 87]
[48 84]
[49 83]
[51 81]
[52 80]
[53 79]
[54 78]
[55 76]
[56 75]
[57 74]
[58 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
