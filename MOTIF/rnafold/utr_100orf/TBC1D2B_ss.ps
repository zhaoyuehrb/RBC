%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGGGGGCCGGAGCCCGGGCGGAGGAGGGCGGCGGCGGCGGCGAGGGCGCGGCGCAGGGGGCGGCCGCGGAGCCCGGGGCGGGUCCGGCGCGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[130.39956665 399.53747559]
[129.97741699 394.61740112]
[131.84346008 389.35763550]
[129.06024170 374.61810303]
[126.27702332 359.87857056]
[123.49380493 345.13903809]
[120.71058655 330.39950562]
[117.92737579 315.65997314]
[108.04393005 308.49508667]
[105.68727875 296.10675049]
[112.68219757 285.13281250]
[110.35872650 270.31384277]
[108.03525543 255.49488831]
[99.10037994 250.10560608]
[94.60076141 240.44602966]
[96.29253387 229.70037842]
[103.84408569 221.56527710]
[102.44639587 206.63053894]
[101.04871368 191.69580078]
[99.65102386 176.76106262]
[98.25333405 161.82632446]
[96.85564423 146.89158630]
[95.45795441 131.95683289]
[85.80284882 128.98811340]
[77.53812408 123.18046570]
[71.47318268 115.10266113]
[68.20198059 105.54579163]
[68.04489136 95.44580078]
[71.01728821 85.79182434]
[76.82807922 77.52931213]
[84.90818787 71.46743774]
[94.46630096 68.19987488]
[95.39884186 53.22888947]
[96.33139038 38.25790787]
[97.26393127 23.28692245]
[98.19647980 8.31593895]
[91.33209229 -5.93856335]
[99.84568024 -18.16019058]
[100.77822113 -33.13117599]
[89.05037689 -52.11050797]
[100.87017059 -70.15694427]
[99.93762970 -85.12792969]
[99.00508118 -100.09891510]
[90.42479706 -113.39136505]
[97.35588074 -126.57504272]
[96.42333984 -141.54602051]
[84.41049957 -151.81575012]
[83.26123810 -167.57820129]
[93.65738678 -179.48179626]
[109.43110657 -180.46434021]
[121.22412109 -169.94291687]
[122.03984070 -154.15968323]
[111.39431763 -142.47857666]
[112.32686615 -127.50759125]
[120.84044647 -115.28596497]
[113.97606659 -101.03145599]
[114.90861511 -86.06047821]
[115.84115601 -71.08949280]
[123.05804443 -67.05694580]
[128.06530762 -60.35937119]
[129.93342590 -52.11050797]
[128.26318359 -43.72208786]
[123.26779938 -36.66225433]
[115.74920654 -32.19863129]
[114.81665802 -17.22764587]
[121.74774170 -4.04396868]
[113.16745758 9.24848366]
[112.23491669 24.21946716]
[111.30236816 39.19045258]
[110.36982727 54.16143417]
[109.43727875 69.13241577]
[125.79684448 80.59915924]
[132.27410889 99.49801636]
[126.38773346 118.58917236]
[110.39269257 130.55915833]
[111.79038239 145.49389648]
[113.18807220 160.42863464]
[114.58576202 175.36337280]
[115.98345184 190.29811096]
[117.38114166 205.23284912]
[118.77883148 220.16758728]
[131.23692322 235.86410522]
[122.85420990 253.17141724]
[125.17768097 267.99035645]
[127.50115967 282.80932617]
[139.40086365 296.75363159]
[132.66690063 312.87677002]
[135.45011902 327.61630249]
[138.23333740 342.35583496]
[141.01655579 357.09533691]
[143.79977417 371.83486938]
[146.58297729 386.57440186]
[150.05062866 401.16809082]
[154.19515991 415.58413696]
[166.36875916 426.57211304]
[162.67556763 442.54998779]
[146.91482544 447.08111572]
[135.29983521 435.50424194]
[139.77908325 419.72866821]
[135.63456726 405.31262207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[11 85]
[12 84]
[13 83]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[38 65]
[39 64]
[41 58]
[42 57]
[43 56]
[45 54]
[46 53]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
