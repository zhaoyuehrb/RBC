%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGCGCAGGGGCUGCGGAGCGGCAGGAUGCAGGAGGAGCUGGCGUGGGAGACCGACGGCCUGCUUCCUCUGGAGAGGCAGCUCCACGAGGCCGCCCGCCAGAACAAUGUCGGCAGGAUGCAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[163.45425415 414.73284912]
[175.46632385 405.45520020]
[171.17713928 391.08151245]
[166.19947815 385.51522827]
[166.96249390 376.30847168]
[163.02188110 361.83535767]
[158.18017578 356.15042114]
[159.16543579 346.96478271]
[155.57569885 332.40066528]
[151.98596191 317.83651733]
[136.40061951 313.74984741]
[124.91618347 302.31588745]
[120.71260834 286.56793213]
[125.02040863 270.75119019]
[136.76240540 259.17852783]
[132.82179260 244.70538330]
[128.88117981 230.23225403]
[124.76599121 215.80778503]
[120.47679901 201.43409729]
[116.18761444 187.06040955]
[111.20996094 181.49414062]
[111.97297668 172.28736877]
[108.03236389 157.81423950]
[104.09175110 143.34111023]
[100.15113831 128.86798096]
[96.21053314 114.39484406]
[96.81217194 129.38276672]
[90.88548279 143.16226196]
[79.59155273 153.03379822]
[65.14296722 157.06346130]
[50.37030792 154.46180725]
[38.16766739 145.73852539]
[30.92564964 132.60258484]
[30.06302071 117.62740326]
[35.74877930 103.74676514]
[46.86903763 93.67999268]
[61.24523926 89.39925385]
[76.06171417 91.74347687]
[68.14710999 79.00145721]
[60.23250961 66.25943756]
[52.31790543 53.51741791]
[44.40330124 40.77540207]
[30.54918671 33.13510895]
[30.40635300 18.24118614]
[22.49175072 5.49916792]
[14.57714653 -7.24285126]
[6.50916147 -19.88830948]
[-1.71102595 -32.43535995]
[-15.74571323 -39.73865509]
[-16.24839783 -54.62477493]
[-24.46858406 -67.17182922]
[-38.20621109 -77.10732269]
[-32.46195602 -93.05849457]
[-15.54399300 -91.95444489]
[-11.92153263 -75.39201355]
[-3.70134521 -62.84496307]
[9.74537945 -56.43911743]
[10.83602619 -40.65554810]
[19.05621338 -28.10849762]
[25.41768456 -24.19797325]
[27.31916618 -15.15745449]
[35.23376846 -2.41543579]
[43.14837265 10.32658291]
[56.43638229 17.05548096]
[57.14532089 32.86079788]
[65.05992126 45.60281372]
[72.97452545 58.34483337]
[80.88912964 71.08685303]
[88.80373383 83.82887268]
[103.71512604 85.45687103]
[114.19279480 74.72288513]
[124.67047119 63.98890305]
[135.01766968 53.12910080]
[145.23291016 42.14507294]
[155.44815063 31.16104317]
[165.66339111 20.17701149]
[175.87863159 9.19298267]
[175.05546570 -6.58985472]
[185.69548035 -18.27598572]
[201.48612976 -18.93223763]
[213.05912781 -8.16926575]
[213.54838562 7.62744761]
[202.66366577 19.08599472]
[186.86265564 19.40822029]
[176.64741516 30.39225006]
[166.43218994 41.37628174]
[156.21694946 52.36030960]
[146.00170898 63.34434128]
[143.72721863 70.45681000]
[135.40444946 74.46657562]
[124.92678070 85.20055389]
[114.44911194 95.93453979]
[110.68366241 110.45423126]
[114.62427521 124.92736816]
[118.56488800 139.40049744]
[122.50549316 153.87362671]
[126.44610596 168.34677124]
[130.56130981 182.77122498]
[134.85049438 197.14491272]
[139.13967896 211.51860046]
[144.64569092 218.93685913]
[143.35432434 226.29164124]
[147.29493713 240.76477051]
[151.23553467 255.23791504]
[164.98016357 258.11712646]
[176.07693481 266.61453247]
[182.38005066 279.01473999]
[182.70196533 292.85482788]
[177.03677368 305.41366577]
[166.55009460 314.24679565]
[170.13983154 328.81091309]
[173.72956848 343.37506104]
[177.49501038 357.89474487]
[181.43562317 372.36785889]
[185.55082703 386.79232788]
[189.84001160 401.16601562]
[204.97200012 402.34375000]
[218.65504456 408.91177368]
[229.03858948 419.98184204]
[234.71836853 434.05679321]
[234.92623901 449.23312378]
[229.63407898 463.45837402]
[219.55760193 474.80865479]
[206.05958557 481.74896240]
[190.96551514 483.34069824]
[176.31675720 479.36853027]
[164.09440613 470.36972046]
[155.95146179 457.56124878]
[152.98916626 442.67538452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 116]
[3 115]
[5 114]
[6 113]
[8 112]
[9 111]
[10 110]
[15 104]
[16 103]
[17 102]
[18 100]
[19 99]
[20 98]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[44 63]
[45 62]
[46 61]
[47 59]
[48 58]
[50 56]
[51 55]
[70 92]
[71 91]
[72 90]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
