%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGACCCAGAAACCAAACAGCUGUUUCAGAAUUUCUUCUCAUGAAAGUGACAGAGGACCCAGAACUGAAGUUAAUCCCUUUCAGCCUGUUCCUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[73.16761017 112.24681854]
[58.38657761 114.80047607]
[43.60554886 117.35412598]
[28.82451630 119.90778351]
[14.04348660 122.46143341]
[-0.73754328 125.01509094]
[-5.01103783 128.60459900]
[-9.76749611 129.93182373]
[-14.01486683 129.21453857]
[-17.00998688 127.05020905]
[-31.96465683 128.21546936]
[-46.91932678 129.38072205]
[-61.87400055 130.54597473]
[-76.82866669 131.71124268]
[-88.80467987 147.63047791]
[-108.30062103 149.86206055]
[-123.10765839 137.44334412]
[-137.88868713 139.99699402]
[-152.66972351 142.55065918]
[-167.45074463 145.10430908]
[-179.69635010 156.01197815]
[-195.17835999 150.60462952]
[-197.97021484 134.44487000]
[-185.19989014 124.15648651]
[-170.00440979 130.32327271]
[-155.22337341 127.76962280]
[-140.44233704 125.21597290]
[-125.66131592 122.66231537]
[-122.09787750 112.71252441]
[-114.60051727 105.14810181]
[-104.52944183 101.43968964]
[-93.75388336 102.34930420]
[-84.30519104 107.77488708]
[-77.99392700 116.75656891]
[-63.03925705 115.59130859]
[-48.08458710 114.42605591]
[-33.12991714 113.26079559]
[-18.17524529 112.09553528]
[-3.29119658 110.23405457]
[11.48983383 107.68040466]
[26.27086449 105.12674713]
[41.05189514 102.57309723]
[55.83292389 100.01944733]
[70.61395264 97.46578979]
[73.76612854 86.51868439]
[80.83170319 77.58263397]
[90.75667572 71.99066162]
[102.06050873 70.57694244]
[113.05697632 73.55236816]
[122.10568237 80.47307587]
[127.85680389 90.30668640]
[142.81147766 89.14142609]
[157.76614380 87.97616577]
[172.72080994 86.81091309]
[187.67549133 85.64565277]
[196.16139221 81.80090332]
[203.11212158 84.68410492]
[218.09579468 83.98449707]
[233.07946777 83.28488922]
[248.06315613 82.58528137]
[254.07675171 79.20065308]
[259.97943115 79.46133423]
[263.99423218 82.33750153]
[278.99240112 82.57077789]
[288.88314819 74.11322784]
[301.47909546 74.71847534]
[309.95281982 83.50563812]
[324.93649292 84.20524597]
[339.92016602 84.90485382]
[354.90383911 85.60445404]
[369.88751221 86.30406189]
[384.87118530 87.00366974]
[394.46197510 74.80545044]
[409.40014648 70.60661316]
[423.94171143 76.02168274]
[432.49508667 88.96846771]
[431.77136230 104.46865845]
[422.04882812 116.56211090]
[407.06597900 120.59865570]
[392.58401489 115.02615356]
[384.17160034 101.98734283]
[369.18789673 101.28773499]
[354.20422363 100.58813477]
[339.22055054 99.88852692]
[324.23687744 99.18891907]
[309.25320435 98.48931122]
[294.22726440 107.40684509]
[278.75912476 97.56896210]
[263.76095581 97.33568573]
[248.76275635 97.56896210]
[233.77908325 98.26856995]
[218.79541016 98.96817017]
[203.81172180 99.66777802]
[188.84074402 100.60032654]
[173.88607788 101.76557922]
[158.93139648 102.93083954]
[143.97673035 104.09609985]
[129.02206421 105.26135254]
[120.27568817 121.42098236]
[103.66030884 129.26712036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[17 28]
[18 27]
[19 26]
[20 25]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[57 93]
[58 92]
[59 91]
[60 90]
[63 89]
[64 88]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
