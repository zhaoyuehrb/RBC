%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGGGAGGAAUGAGCGAGCCAUGAGGCUGCUGCGGCGCUGGGCGUUCGCGGCUCUGCUGCUGUCGCUGCUCCCCACGCCCGGUCUUGGGACCCAAGGUCCUGCUGGAGCUCUGCGAUGGG\
) } def
/len { sequence length } bind def

/coor [
[112.56648254 111.02933502]
[103.32984924 115.39559937]
[99.13755798 129.79785156]
[103.56451416 145.58816528]
[91.91120911 157.12648010]
[76.16556549 152.54315186]
[72.52536011 136.55311584]
[84.73531342 125.60556030]
[88.92759705 111.20331573]
[83.95405579 103.74859619]
[83.73662567 94.38802338]
[88.77064514 86.02088165]
[97.85966492 81.46594238]
[85.63423920 72.77462769]
[73.40881348 64.08331299]
[61.18338776 55.39199448]
[48.95796204 46.70067978]
[34.08212280 44.77470398]
[20.04636955 50.06598663]
[6.01061726 55.35726547]
[-8.02513504 60.64854813]
[-17.99773216 73.66696930]
[-34.22100449 71.27165985]
[-40.00583649 55.92669678]
[-29.40129280 43.41767502]
[-13.31641674 46.61279678]
[0.71933585 41.32151413]
[14.75508785 36.03023148]
[28.79084015 30.73895264]
[32.98312378 16.33670425]
[23.97990990 4.33911514]
[9.50825405 -2.05476618]
[8.05776024 -16.87857628]
[-0.94545430 -28.87616539]
[-9.94866848 -40.87375259]
[-18.95188332 -52.87134171]
[-27.95509720 -64.86892700]
[-37.11203384 -76.74961090]
[-46.42117691 -88.51140594]
[-61.05266571 -94.53054810]
[-62.88436127 -109.31210327]
[-72.19350433 -121.07389832]
[-81.50264740 -132.83569336]
[-90.81178284 -144.59748840]
[-106.44709778 -144.86396790]
[-118.21919250 -155.15725708]
[-120.56964874 -170.61718750]
[-112.38864899 -183.94404602]
[-97.53900909 -188.84530640]
[-83.03228760 -183.00672913]
[-75.71810150 -169.18513489]
[-79.04998779 -153.90663147]
[-69.74084473 -142.14483643]
[-60.43170547 -130.38304138]
[-51.12256241 -118.62123871]
[-37.15692520 -113.44337463]
[-34.65937805 -97.82054901]
[-25.35023689 -86.05875397]
[-18.65264893 -82.72718048]
[-15.95750809 -73.87214661]
[-6.95429420 -61.87455750]
[2.04892015 -49.87696838]
[11.05213451 -37.87937927]
[20.05534935 -25.88179016]
[33.88303375 -20.34605598]
[35.97750092 -4.66409922]
[44.98071289 7.33348942]
[57.64927673 34.47525406]
[69.87470245 43.16657257]
[82.10012817 51.85788727]
[94.32555389 60.54920197]
[106.55097961 69.24051666]
[120.05352020 75.77362061]
[134.45576477 79.96590424]
[148.85801697 84.15819550]
[163.26026917 88.35047913]
[177.71528625 92.35698700]
[192.22070312 96.17704773]
[206.72612000 99.99711609]
[221.48309326 102.68633270]
[236.40359497 104.22864532]
[251.32409668 105.77095795]
[266.24459839 107.31327820]
[281.16510010 108.85559082]
[286.14306641 106.61267090]
[290.98214722 106.59003448]
[294.83319092 108.34034729]
[297.16180420 111.13645935]
[311.91876221 113.82566833]
[326.67572021 116.51488495]
[341.43270874 119.20409393]
[356.18966675 121.89330292]
[370.94662476 124.58251953]
[387.61312866 121.47379303]
[395.21411133 136.62837219]
[382.75595093 148.12751770]
[368.25741577 139.33949280]
[353.50045776 136.65026855]
[338.74349976 133.96105957]
[323.98651123 131.27185059]
[309.22955322 128.58264160]
[294.47259521 125.89343262]
[279.62277222 123.77608490]
[264.70227051 122.23377228]
[249.78176880 120.69145966]
[234.86128235 119.14913940]
[219.94078064 117.60682678]
[227.87823486 130.33462524]
[224.72271729 144.99896240]
[212.25262451 153.33541870]
[197.49572754 150.64579773]
[188.76861572 138.44589233]
[190.98965454 123.61124420]
[202.90605164 114.50253296]
[188.40063477 110.68246460]
[173.89521790 106.86240387]
[166.53857422 108.21766663]
[159.06797791 102.75272369]
[144.66572571 98.56044006]
[130.26348877 94.36815643]
[115.86123657 90.17587280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 9]
[3 8]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 29]
[19 28]
[20 27]
[21 26]
[30 67]
[31 66]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 58]
[39 57]
[41 55]
[42 54]
[43 53]
[44 52]
[73 121]
[74 120]
[75 119]
[76 118]
[77 116]
[78 115]
[79 114]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
