%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCGGUGUUGUGACUGAAACCCGUCAAUAUGGCGGCGAUCGGCCGCGGCCGCUCUCUGAAGAACCUCCGAGUACGAGGGCGGAAUGACAGCGGCGAGGAGAACGUCCCGCUGGAUCUGACCCGAGAAC\
) } def
/len { sequence length } bind def

/coor [
[90.18755341 306.26083374]
[90.18755341 291.26083374]
[90.18755341 276.26083374]
[90.18755341 261.26083374]
[82.45024872 248.53355408]
[90.18755341 234.73338318]
[90.18755341 219.73338318]
[90.18755341 204.73338318]
[87.01075745 197.97889709]
[90.37029266 189.37748718]
[90.72725677 174.38172913]
[91.08422852 159.38597107]
[69.97423553 152.00614929]
[53.02812195 137.41427612]
[40.21990204 145.22129822]
[27.41168404 153.02830505]
[14.60346508 160.83532715]
[13.48346806 176.31193542]
[3.45473862 188.15270996]
[-11.62647247 191.80465698]
[-25.96113205 185.86352539]
[-34.03726959 172.61378479]
[-32.74944687 157.15023804]
[-22.59285736 145.41894531]
[-7.47291756 141.93081665]
[6.79644775 148.02711487]
[19.60466766 140.22009277]
[32.41288757 132.41307068]
[45.22110748 124.60605621]
[42.65345764 117.82019806]
[40.92291641 110.77420807]
[40.05474472 103.57094574]
[40.06161499 96.31555939]
[40.94342422 89.11396027]
[42.68730164 82.07125854]
[29.04281998 75.84003448]
[15.39834118 69.60881042]
[1.75386095 63.37758255]
[-11.89061928 57.14635849]
[-27.36414337 61.38305664]
[-40.23865891 51.81089020]
[-40.63793945 35.77280426]
[-28.25569153 25.57184982]
[-12.59051609 29.03332329]
[-5.65939379 43.50188065]
[7.98508596 49.73310471]
[21.62956619 55.96432877]
[35.27404785 62.19555283]
[48.91852570 68.42678070]
[62.23107147 53.31281662]
[79.79219818 43.45064163]
[99.62648010 39.94963837]
[101.40726471 25.05572128]
[103.18804932 10.16180325]
[104.96884155 -4.73211479]
[106.74962616 -19.62603378]
[108.53041077 -34.51995087]
[110.31119537 -49.41386795]
[112.09197998 -64.30778503]
[98.35352325 -70.64103699]
[87.24593353 -80.91121674]
[79.85741425 -94.11215973]
[76.91182709 -108.95057678]
[78.69773865 -123.97275543]
[85.04018402 -137.70697021]
[95.31781006 -148.80766296]
[108.52370453 -156.18734741]
[123.36408997 -159.12298584]
[138.38507080 -157.32701111]
[152.11502075 -150.97535706]
[163.20884705 -140.69030762]
[170.57966614 -127.47946930]
[173.50537109 -112.63711548]
[171.69932556 -97.61734772]
[165.33847046 -83.89164734]
[155.04598999 -72.80472565]
[141.83021545 -65.44275665]
[126.98590088 -62.52700043]
[125.20511627 -47.63308334]
[123.42433167 -32.73916626]
[121.64353943 -17.84524727]
[119.86275482 -2.95132852]
[118.08197021 11.94258976]
[116.30118561 26.83650780]
[114.52040100 41.73042679]
[127.52680969 46.62903214]
[139.05876160 54.38642120]
[148.49855042 64.58707428]
[155.34056091 76.68460083]
[159.21827698 90.03099823]
[159.92401123 103.91137695]
[174.65293884 106.75014496]
[189.38186646 109.58891296]
[204.11079407 112.42768097]
[218.83972168 115.26644897]
[233.56866455 118.10521698]
[242.68762207 116.65082550]
[248.61247253 121.19078064]
[263.26968384 124.37926483]
[274.76034546 113.95120239]
[290.18954468 112.30223846]
[303.62445068 120.06642914]
[309.89907837 134.25828552]
[306.60070801 149.42074585]
[294.99758911 159.72354126]
[279.55139160 161.20503235]
[266.20150757 153.29554749]
[260.08120728 139.03646851]
[245.42399597 135.84799194]
[230.72988892 132.83415222]
[216.00096130 129.99537659]
[201.27203369 127.15661621]
[186.54309082 124.31784058]
[171.81416321 121.47907257]
[157.08523560 118.64030457]
[152.47073364 129.20629883]
[145.92199707 138.69566345]
[137.68046570 146.75860596]
[128.04992676 153.09790039]
[117.38539124 157.47985840]
[106.07997894 159.74293518]
[105.72301483 174.73869324]
[105.36604309 189.73445129]
[105.18755341 204.73338318]
[105.18755341 219.73338318]
[105.18755341 234.73338318]
[112.92485046 248.53355408]
[105.18755341 261.26083374]
[105.18755341 276.26083374]
[105.18755341 291.26083374]
[105.18755341 306.26083374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[4 128]
[6 126]
[7 125]
[8 124]
[10 123]
[11 122]
[12 121]
[14 29]
[15 28]
[16 27]
[17 26]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[52 85]
[53 84]
[54 83]
[55 82]
[56 81]
[57 80]
[58 79]
[59 78]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
