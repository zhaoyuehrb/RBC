%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGGACGGAACUUCCUGUCACGGAAAAGAACAUCCUGUCACGGAGAAGAACAUCCUGCAGAAUUUCCUGUCACGAGGAACAUUCCGCAGGAGGAAAUGGAGGCUGAAAGGCUGCGACUCCUCGAGGAAGAGGCCAAGCUGAAAAAGGUAGCCAGAAUGGGAUUUAAUGCAUCUUCCAUGCUCCGAAAAAGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[16.24992752 344.78253174]
[0.15851150 343.75247192]
[-15.42724514 339.63687134]
[-21.87416840 353.18078613]
[-28.32109261 366.72467041]
[-34.66036606 380.31930542]
[-40.89159012 393.96377563]
[-47.12281799 407.60824585]
[-53.35404205 421.25274658]
[-59.58526611 434.89721680]
[-53.82809830 449.61560059]
[-60.24107742 464.06027222]
[-75.01950073 469.66152954]
[-89.39558411 463.09619141]
[-94.84026337 448.25936890]
[-88.12329865 433.95349121]
[-73.22974396 428.66598511]
[-66.99851990 415.02151489]
[-60.76729584 401.37701416]
[-54.53607178 387.73254395]
[-48.30484772 374.08807373]
[-48.38597107 366.68981934]
[-41.86499023 360.27774048]
[-35.41806793 346.73385620]
[-28.97114372 333.18994141]
[-40.29104996 325.16204834]
[-50.11971664 315.36044312]
[-58.18241119 304.05758667]
[-64.25353241 291.56799316]
[-68.16288757 278.23937988]
[-69.80051422 264.44296265]
[-69.11971283 250.56326294]
[-66.13842010 236.98724365]
[-60.93873596 224.09356689]
[-53.66463852 212.24205017]
[-44.51801300 201.76364136]
[-33.75305176 192.95109558]
[-21.66918945 186.05091858]
[-8.60276127 181.25634766]
[5.08234310 178.70202637]
[19.00482178 178.46017456]
[32.77658081 180.53858948]
[46.01355743 184.88034058]
[53.09762192 171.65853882]
[60.18169022 158.43673706]
[67.26575470 145.21495056]
[74.34982300 131.99314880]
[68.80949402 127.35107422]
[64.11309052 121.74744415]
[60.42770386 115.33639526]
[57.89215851 108.30109406]
[56.61195374 100.84855652]
[56.65519714 93.20355225]
[58.04961777 85.60182190]
[60.78085327 78.28282166]
[64.79199982 71.48217010]
[69.98455048 65.42411041]
[59.29413605 54.90198517]
[48.60372543 44.37985992]
[37.91331100 33.85773849]
[22.65048599 29.69159126]
[19.00735664 15.24940109]
[8.31694317 4.72727823]
[-2.37346911 -5.79484510]
[-13.06388187 -16.31696892]
[-23.83743286 -26.75395203]
[-34.69344330 -37.10513687]
[-45.54945374 -47.45632172]
[-56.40546417 -57.80750656]
[-67.26147461 -68.15869141]
[-83.05333710 -67.53207397]
[-94.60610199 -78.31674194]
[-95.06572723 -94.11434174]
[-84.15952301 -105.55244446]
[-68.35794067 -105.84502411]
[-57.03578568 -94.81849670]
[-56.91028976 -79.01470184]
[-46.05427933 -68.66352081]
[-35.19826889 -58.31233215]
[-24.34225845 -47.96114731]
[-13.48624706 -37.60996246]
[-6.46835184 -35.26689148]
[-2.54175830 -27.00738144]
[8.14865398 -16.48525810]
[18.83906746 -5.96313429]
[29.52947998 4.55898857]
[44.02765274 7.97252178]
[48.43543625 23.16732407]
[59.12584686 33.68944931]
[69.81626129 44.21157074]
[80.50667572 54.73369598]
[95.02590179 50.96647644]
[99.25189209 36.57408142]
[103.47788239 22.18168640]
[107.70386505 7.78929090]
[111.92985535 -6.60310364]
[104.61317444 -20.35460854]
[109.10395050 -34.89034271]
[122.25900269 -41.78093719]
[126.48498535 -56.17333221]
[122.94905853 -71.59434509]
[133.95863342 -81.62622833]
[138.18461609 -96.01862335]
[134.64869690 -111.43963623]
[145.65826416 -121.47151947]
[149.88424683 -135.86390686]
[148.54522705 -152.76489258]
[164.41503906 -158.73025513]
[174.54046631 -145.13200378]
[164.27664185 -131.63792419]
[160.05065918 -117.24552917]
[163.88885498 -102.85395050]
[152.57701111 -91.79263306]
[148.35102844 -77.40023804]
[152.18922424 -63.00866318]
[140.87738037 -51.94734192]
[136.65139771 -37.55494690]
[143.99278259 -24.64605522]
[139.91206360 -9.98991966]
[126.32225037 -2.37711525]
[122.09626007 12.01527977]
[117.87027740 26.40767479]
[113.64428711 40.80006790]
[109.41829681 55.19246292]
[126.48814392 64.62472534]
[137.53593445 79.85610199]
[140.93940735 97.66382599]
[155.81872559 99.56271362]
[170.69805908 101.46160126]
[185.57737732 103.36048889]
[200.45669556 105.25936890]
[215.33601379 107.15825653]
[232.68850708 90.49346161]
[256.44400024 92.00415039]
[271.22518921 110.33542633]
[286.22332764 110.09743500]
[301.22143555 109.85945129]
[312.18029785 98.78962708]
[327.39392090 98.76192474]
[337.87976074 109.27775574]
[352.87786865 109.03976440]
[367.87597656 108.80178070]
[374.71588135 95.10965729]
[387.14215088 86.17395782]
[402.29928589 84.04804993]
[416.70431519 89.22043610]
[427.04705811 100.50255585]
[430.95083618 115.30184937]
[427.51858521 130.21755981]
[417.53900146 141.82214355]
[403.30532837 147.44897461]
[388.08837891 145.80503845]
[375.38485718 137.26809692]
[368.11395264 123.79988861]
[353.11584473 124.03787994]
[338.11773682 124.27587128]
[327.97082520 135.11909485]
[312.76400757 135.57411194]
[301.45941162 124.85755920]
[286.46130371 125.09555054]
[271.46319580 125.33354187]
[269.17001343 131.64227295]
[265.48348999 137.27380371]
[260.59246826 141.92442322]
[254.75088501 145.34109497]
[248.26483154 147.33512878]
[241.47631836 147.79261780]
[234.74531555 146.68093872]
[228.43069458 144.05087280]
[222.87103271 140.03439331]
[218.36651611 134.83802795]
[215.16268921 128.73228455]
[213.43713379 122.03758240]
[198.55781555 120.13869476]
[183.67848206 118.23980713]
[168.79916382 116.34091949]
[153.91984558 114.44203186]
[139.04052734 112.54314423]
[131.28816223 126.50553894]
[118.79003906 136.44760132]
[103.44186401 140.86131287]
[87.57162476 139.07720947]
[80.48755646 152.29901123]
[73.40348816 165.52081299]
[66.31941986 178.74261475]
[59.23535538 191.96441650]
[71.81357574 202.14364624]
[82.18762970 214.55599976]
[89.96861267 228.73352051]
[94.86536407 244.14218140]
[96.69530487 260.20190430]
[95.39129639 276.30850220]
[91.00404358 291.85626221]
[83.70020294 306.26092529]
[73.75596619 318.98144531]
[61.54669571 329.54040527]
[47.53269577 337.54199219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[43 186]
[44 185]
[45 184]
[46 183]
[47 182]
[57 91]
[58 90]
[59 89]
[60 88]
[62 86]
[63 85]
[64 84]
[65 83]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[99 117]
[100 116]
[102 114]
[103 113]
[105 111]
[106 110]
[127 178]
[128 177]
[129 176]
[130 175]
[131 174]
[132 173]
[135 161]
[136 160]
[137 159]
[140 156]
[141 155]
[142 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
