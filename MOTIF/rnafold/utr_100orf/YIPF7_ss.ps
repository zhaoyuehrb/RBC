%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCAUCUUUUCACCAAUGGAUUUGCUUAAAAUUUCUCACACAAAGCUACAUUUACUGGAGGAUCUUUCUAUAAAAAAUAAACAGAGGAUGUCAAACUUGGCACAAUUUGACUCUG\
) } def
/len { sequence length } bind def

/coor [
[239.20320129 222.98986816]
[221.92497253 227.72579956]
[204.01655579 228.43112183]
[186.40608215 225.06622314]
[170.00691223 217.80249023]
[155.67031860 207.01364136]
[144.14123535 193.25643921]
[136.01960754 177.24198914]
[131.72911072 159.79898071]
[131.49514771 141.83081055]
[135.33288574 124.26876068]
[121.67336273 118.07057953]
[108.01383972 111.87239838]
[94.08116913 113.04388428]
[85.78797913 101.78712463]
[72.12845612 95.58894348]
[58.46893311 89.39076233]
[42.70487213 90.73421478]
[34.31212234 78.42929840]
[20.65259933 72.23111725]
[6.99307823 66.03292847]
[-6.66644335 59.83474731]
[-20.32596588 53.63656616]
[-36.51565933 60.09896851]
[-52.09072113 53.05032730]
[-57.69613266 37.25576782]
[-71.51581573 31.42340469]
[-85.33549500 25.59104347]
[-99.15517426 19.75868034]
[-109.68844604 30.68638039]
[-123.45960999 37.06755066]
[-138.60624695 38.03919220]
[-153.07986450 33.46989822]
[-164.92306519 23.97762871]
[-172.53413391 10.84613228]
[-174.88372803 -4.14866114]
[-171.65408325 -18.97883034]
[-163.28201294 -31.63871574]
[-150.89973450 -40.41617203]
[-136.18186951 -44.12412262]
[-121.11888123 -42.26109314]
[-107.74792480 -35.07904434]
[-97.87729645 -23.54929352]
[-92.84192657 -9.23114109]
[-93.32280731 5.93900061]
[-79.50312805 11.77136326]
[-65.68344879 17.60372543]
[-51.86376953 23.43608856]
[-40.64989090 16.94012642]
[-27.55048370 18.14686203]
[-17.41536331 26.83642387]
[-14.12778187 39.97704315]
[-0.46826062 46.17522812]
[13.19126129 52.37340927]
[26.85078239 58.57159424]
[40.51030350 64.76977539]
[55.29734802 62.98298645]
[64.66711426 75.73123932]
[78.32663727 81.92942047]
[91.98616028 88.12760162]
[105.91883087 86.95611572]
[114.21202087 98.21287537]
[127.87154388 104.41105652]
[141.53106689 110.60923767]
[148.59384155 100.32128143]
[157.18721008 91.27648163]
[167.09594727 83.70011902]
[178.07202148 77.78070068]
[189.84091187 73.66527557]
[202.10839844 71.45578003]
[214.56794739 71.20652008]
[226.90840149 72.92283630]
[238.82168579 76.56098175]
[250.01051331 82.02925110]
[260.19586182 89.19027710]
[269.12390137 97.86448669]
[276.57223511 107.83463287]
[282.35556030 118.85117340]
[286.33026123 130.63856506]
[288.39791870 142.90216064]
[288.50772095 155.33552551]
[286.65786743 167.62814331]
[282.89541626 179.47315979]
[277.31518555 190.57502747]
[289.35586548 199.52053833]
[301.39654541 208.46603394]
[313.43722534 217.41154480]
[325.47790527 226.35705566]
[347.19024658 220.92742920]
[365.83334351 232.82489014]
[369.95410156 254.28372192]
[383.26437378 261.20010376]
[396.57464600 268.11651611]
[409.88494873 275.03289795]
[423.19522095 281.94927979]
[439.54528809 280.68167114]
[448.59368896 294.35864258]
[441.03216553 308.91046143]
[424.63937378 309.36746216]
[416.27883911 295.25955200]
[402.96853638 288.34317017]
[389.65826416 281.42678833]
[376.34799194 274.51040649]
[363.03771973 267.59399414]
[356.47781372 272.84353638]
[348.60784912 275.88131714]
[340.15405273 276.40493774]
[331.90319824 274.34506226]
[324.62939453 269.87371826]
[319.02145386 263.39022827]
[315.61773682 255.48548889]
[314.75439453 246.88819885]
[316.53237915 238.39773560]
[304.49169922 229.45222473]
[292.45101929 220.50671387]
[280.41036987 211.56120300]
[268.36968994 202.61569214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 64]
[12 63]
[13 62]
[15 60]
[16 59]
[17 58]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[26 48]
[27 47]
[28 46]
[29 45]
[84 117]
[85 116]
[86 115]
[87 114]
[88 113]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
