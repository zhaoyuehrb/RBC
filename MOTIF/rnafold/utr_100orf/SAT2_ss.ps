%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUUCGAGGGGGUGGGGCUAUGCCCGGACAGAGGAUCGCCUCGCUGGCCUACUCUCUCCUCCCGUACGGCGCCGGAAUCCCAGCUCCACUUACCAGGCCGCGGCUACCCCGCCGUCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.32377625 414.66821289]
[86.10824585 427.58190918]
[72.82669067 435.18841553]
[57.53112030 435.73980713]
[43.73633957 429.10940552]
[34.61228561 416.82077026]
[32.25559998 401.69778442]
[37.20783615 387.21560669]
[48.33100128 376.70208740]
[63.06908035 372.57321167]
[66.13735962 357.89038086]
[69.20564270 343.20751953]
[71.89485168 328.45056152]
[74.20320892 313.62924194]
[76.51156616 298.80792236]
[78.81993103 283.98660278]
[81.12828827 269.16528320]
[83.43664551 254.34397888]
[85.74500275 239.52265930]
[83.64050293 232.34434509]
[88.30834198 224.35142517]
[90.99755859 209.59446716]
[89.07857513 202.36434937]
[93.95067596 194.49427795]
[97.01895905 179.81143188]
[100.08723450 165.12860107]
[102.96622467 150.40747070]
[105.65543365 135.65051270]
[108.34464264 120.89353943]
[92.38587952 119.66080475]
[82.30480194 108.58796692]
[82.54806519 94.64683533]
[71.28108215 84.74455261]
[60.01410675 74.84226990]
[48.74712753 64.93998718]
[35.49501038 68.96784210]
[22.09622002 65.91548157]
[12.05636597 56.69204330]
[7.94729376 43.80656052]
[10.74877834 30.68615341]
[-0.25950187 20.49705315]
[-11.26778221 10.30795383]
[-27.28987694 9.48818874]
[-36.52109909 -3.63294196]
[-31.88004684 -18.99003029]
[-16.92693520 -24.80243301]
[-3.13251448 -16.61137199]
[-1.07868230 -0.70032704]
[9.92959785 9.48877335]
[20.93787956 19.67787361]
[36.87087250 15.95907497]
[52.04978943 22.49597740]
[60.46223068 36.91322708]
[58.64941025 53.67301178]
[69.91638947 63.57529449]
[81.18336487 73.47757721]
[92.45034790 83.37985992]
[104.29399109 80.80534363]
[116.06785583 86.34913635]
[122.46073914 98.70069122]
[134.68617249 90.00937653]
[146.91159058 81.31806183]
[148.12947083 70.35921478]
[155.08776855 62.09271240]
[165.25361633 59.14656067]
[175.13223267 62.27810669]
[187.78886414 54.22766495]
[200.44549561 46.17721939]
[208.80917358 27.92239761]
[228.07328796 27.63985825]
[240.29870605 18.94854164]
[247.06309509 4.64631081]
[261.91934204 3.57798004]
[274.14474487 -5.11333656]
[280.90911865 -19.41556740]
[295.76538086 -20.48389816]
[307.99081421 -29.17521477]
[314.31915283 -44.30412292]
[330.61752319 -46.11938477]
[340.11953735 -32.75361633]
[333.05035400 -17.95637131]
[316.68212891 -16.94978905]
[304.45669556 -8.25847244]
[298.56677246 5.42209673]
[282.83605957 7.11208868]
[270.61065674 15.80340481]
[264.72070312 29.48397446]
[248.99003601 31.17396545]
[236.76460266 39.86528397]
[235.94387817 50.19581604]
[229.38502502 58.50278854]
[219.10618591 61.83420181]
[208.49594116 58.83385468]
[195.83930969 66.88430023]
[183.18267822 74.93473816]
[175.66362000 92.67310333]
[155.60290527 93.54348755]
[143.37748718 102.23480225]
[131.15205383 110.92611694]
[123.10161591 123.58274841]
[120.41240692 138.33972168]
[117.72319031 153.09669495]
[119.27145386 162.22238159]
[114.77007294 168.19688416]
[111.70178986 182.87971497]
[108.63351440 197.56254578]
[105.75452423 212.28367615]
[103.06531525 227.04064941]
[100.56632233 241.83100891]
[98.25796509 256.65234375]
[95.94960785 271.47366333]
[93.64124298 286.29498291]
[91.33288574 301.11627197]
[89.02452850 315.93759155]
[86.71617126 330.75891113]
[88.80109406 337.23608398]
[87.42280579 342.90435791]
[83.88847351 346.27581787]
[80.82019806 360.95864868]
[77.75191498 375.64147949]
[89.60323334 385.32678223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 120]
[11 119]
[12 118]
[13 115]
[14 114]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[21 108]
[22 107]
[24 106]
[25 105]
[26 104]
[27 102]
[28 101]
[29 100]
[32 57]
[33 56]
[34 55]
[35 54]
[40 50]
[41 49]
[42 48]
[60 99]
[61 98]
[62 97]
[66 95]
[67 94]
[68 93]
[70 89]
[71 88]
[73 86]
[74 85]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
