%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCAACGCGGAGGAGCAGGAUGGAGAUCCCUGUGCCUGUGCAGCCGUCUUGGCUGCGCCGCGCCUCGGCCCCGUUGCCCGGACUUUCGGCGCCCGGACGCCUCUUUGACCAGCGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[232.24348450 217.23301697]
[224.79730225 201.86547852]
[222.98651123 184.86077881]
[227.04103088 168.22250366]
[214.38439941 160.17205811]
[201.72776794 152.12162781]
[189.07113647 144.07118225]
[176.41448975 136.02073669]
[163.75785828 127.97029114]
[156.33750916 127.02410126]
[150.88272095 119.54608154]
[138.43756104 111.17242432]
[83.23751068 119.58236694]
[68.63854218 123.02768707]
[54.03958130 126.47299957]
[42.38552856 137.17317200]
[28.22136307 132.56602478]
[13.62239838 136.01135254]
[-0.97656739 139.45666504]
[-15.57553291 142.90197754]
[-30.17449951 146.34729004]
[-44.72789383 149.98028564]
[-59.23331070 153.80035400]
[-70.49162292 165.72438049]
[-86.38261414 161.67367554]
[-90.55900574 145.81524658]
[-78.72447968 134.46289062]
[-63.05337906 139.29493713]
[-48.54796219 135.47486877]
[-42.81311417 130.67189026]
[-33.61981583 131.74832153]
[-19.02084923 128.30300903]
[-4.42188358 124.85769653]
[10.17708206 121.41237640]
[24.77604675 117.96706390]
[35.38588333 107.51332855]
[50.59426498 111.87403870]
[65.19322968 108.42871857]
[79.79219818 104.98340607]
[85.44311523 91.08854675]
[77.39266968 78.43190765]
[69.34222412 65.77527618]
[61.29178619 53.11864471]
[53.24134064 40.46200943]
[45.19089890 27.80537605]
[37.14045715 15.14874268]
[29.09001350 2.49210954]
[13.80497360 -2.38099027]
[8.21969795 -17.42041397]
[16.61873245 -31.08920097]
[32.55905533 -32.90182877]
[43.81261826 -21.46780586]
[41.74664688 -5.55833340]
[49.79708862 7.09829998]
[57.84753418 19.75493431]
[65.89797211 32.41156769]
[73.94841766 45.06819916]
[81.99886322 57.72483444]
[90.04930115 70.38146973]
[98.09974670 83.03810120]
[105.54944611 82.17095947]
[111.49718475 68.40053558]
[120.44885254 80.43666840]
[127.89855194 79.56951904]
[132.82669067 65.40218353]
[129.21847534 49.40490723]
[141.45030212 38.48180008]
[156.93913269 43.86961365]
[159.75135803 60.02583313]
[146.99403381 70.33032227]
[142.06588745 84.49765778]
[146.81121826 98.72727203]
[159.25637817 107.10092926]
[171.80830383 115.31365967]
[184.46493530 123.36409760]
[197.12156677 131.41455078]
[209.77821350 139.46498108]
[222.43484497 147.51542664]
[235.09147644 155.56587219]
[245.02684021 146.90397644]
[256.87197876 141.15301514]
[269.79660034 138.70819092]
[282.89672852 139.73323059]
[295.25811768 144.14944458]
[306.01989746 151.64167786]
[314.43460083 161.68089294]
[319.92001343 173.56140137]
[322.09957886 186.45053101]
[320.82809448 199.44697571]
[316.20144653 211.64381409]
[328.19903564 220.64703369]
[340.19662476 229.65023804]
[352.19421387 238.65345764]
[364.19180298 247.65667725]
[377.12609863 246.62173462]
[386.95251465 254.46563721]
[388.69335938 266.51129150]
[400.45516968 275.82043457]
[416.07800293 278.31799316]
[421.25585938 292.28363037]
[433.01763916 301.59277344]
[448.68499756 299.51675415]
[461.18045044 309.19348145]
[463.09069824 324.88189697]
[453.28240967 337.27435303]
[437.57467651 339.01861572]
[425.28662109 329.07986450]
[423.70852661 313.35455322]
[411.94671631 304.04541016]
[397.16516113 302.21371460]
[391.14602661 287.58224487]
[379.38421631 278.27310181]
[361.95501709 276.72088623]
[355.18859863 259.65426636]
[343.19100952 250.65104675]
[331.19342041 241.64782715]
[319.19583130 232.64462280]
[307.19824219 223.64140320]
[293.26232910 233.29840088]
[276.85760498 237.67767334]
[259.91439819 236.24687195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[11 73]
[12 72]
[13 39]
[14 38]
[15 37]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 29]
[23 28]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[64 71]
[65 70]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[97 112]
[98 111]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
