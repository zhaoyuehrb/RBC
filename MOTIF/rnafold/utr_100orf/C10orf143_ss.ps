%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCUCGGCCAGGCCUGAGAUGCCGGGAGGGUUUGACCCUGGGGCUGCAUGGACAGCUUAGCGCUCGGCCGCUGGCGACAGCGGAGGGCGGAGGAUCUGCAGGUUCCGGGGGACGUGAAACGGGUAUGCAGGAGAUUAGAAGCCAGUG\
) } def
/len { sequence length } bind def

/coor [
[95.98394012 655.90710449]
[106.62219238 644.21942139]
[105.68033600 629.24902344]
[104.73847198 614.27862549]
[96.21729279 602.06225586]
[103.07279968 587.80352783]
[102.13094330 572.83306885]
[88.65981293 568.78167725]
[77.36314392 560.34875488]
[69.61608124 548.53540039]
[66.37038422 534.75549316]
[68.03755951 520.66693115]
[74.43679810 507.97177124]
[84.81434631 498.21081543]
[97.93223572 492.57662964]
[97.30410004 477.58978271]
[96.67596436 462.60293579]
[96.04782867 447.61611938]
[87.33719635 439.16299438]
[86.72864532 426.63809204]
[95.09754944 416.76687622]
[94.78340912 401.77017212]
[94.46927643 386.77346802]
[94.15513611 371.77673340]
[93.84100342 356.78002930]
[79.66238403 353.81448364]
[66.49821472 347.75228882]
[55.01571655 338.89697266]
[45.79772949 327.69381714]
[39.31307602 314.70724487]
[35.89276123 300.59268188]
[35.71305084 286.06317139]
[38.78639603 271.85360718]
[44.96064758 258.68338013]
[53.92655563 247.22003174]
[65.23329926 238.04547119]
[78.31110382 231.62634277]
[92.50000000 228.29032898]
[92.50000000 213.29032898]
[92.50000000 198.29032898]
[92.50000000 183.29032898]
[92.50000000 168.29032898]
[92.50000000 153.29032898]
[92.50000000 138.29032898]
[92.50000000 123.29032898]
[92.50000000 108.29032898]
[92.34292603 93.29115295]
[92.02878571 78.29444122]
[91.71465302 63.29772949]
[91.40051270 48.30102158]
[88.07405090 39.72109604]
[91.24015045 32.98770523]
[91.24015045 17.98770714]
[81.29714203 11.32791805]
[75.88677216 0.78850400]
[76.26312256 -10.93216133]
[82.21514893 -20.89620781]
[92.14887238 -26.66266441]
[92.77700806 -41.64950562]
[93.40514374 -56.63634872]
[90.64112854 -62.76014328]
[91.33059692 -68.48535919]
[94.38645172 -72.23377991]
[95.64161682 -87.18117523]
[96.89678955 -102.12857056]
[98.15195465 -117.07596588]
[99.40711975 -132.02336121]
[91.67456055 -142.40058899]
[93.06834412 -154.86254883]
[102.29257202 -162.75204468]
[103.86049652 -177.66986084]
[105.42842865 -192.58769226]
[106.99635315 -207.50552368]
[108.56427765 -222.42335510]
[110.13220978 -237.34118652]
[102.97139740 -252.09431458]
[112.39035797 -265.51873779]
[128.69967651 -263.80456543]
[135.12170410 -248.71517944]
[125.05003357 -235.77325439]
[123.48210907 -220.85542297]
[121.91418457 -205.93759155]
[120.34625244 -191.01977539]
[118.77832794 -176.10194397]
[117.21040344 -161.18411255]
[125.21657562 -145.59956360]
[114.35451508 -130.76818848]
[113.09934998 -115.82079315]
[111.84417725 -100.87340546]
[110.58901215 -85.92601013]
[109.33384705 -70.97861481]
[108.39199066 -56.00821686]
[107.76385498 -41.02137375]
[107.13571930 -26.03453064]
[120.31175232 -13.39534473]
[120.12904358 5.17940092]
[106.24015045 17.98770714]
[106.24015045 32.98770523]
[106.39722443 47.98688507]
[106.71135712 62.98359299]
[107.02549744 77.98030090]
[107.33963013 92.97701263]
[110.66197968 100.38427734]
[107.50000000 108.29032898]
[107.50000000 123.29032898]
[107.50000000 138.29032898]
[107.50000000 153.29032898]
[107.50000000 168.29032898]
[107.50000000 183.29032898]
[107.50000000 198.29032898]
[107.50000000 213.29032898]
[107.50000000 228.29032898]
[122.61892700 231.96771240]
[136.41790771 239.13865662]
[148.10345459 249.38615417]
[157.00477600 262.11642456]
[162.61216736 276.59326172]
[164.60630798 291.98077393]
[162.87635803 307.39144897]
[157.52616882 321.93750000]
[148.86802673 334.78189087]
[137.40441895 345.18658447]
[123.79891205 352.55493164]
[108.83770752 356.46591187]
[109.15184784 371.46261597]
[109.46598053 386.45932007]
[109.78012085 401.45602417]
[110.09425354 416.45272827]
[120.00361633 431.93688965]
[111.03467560 446.98797607]
[111.66281128 461.97482300]
[112.29093933 476.96166992]
[112.91907501 491.94848633]
[128.02656555 497.35934448]
[139.88172913 508.11740112]
[146.69679260 522.56060791]
[147.45927429 538.47424316]
[142.08235168 553.43048096]
[131.41355896 565.15899658]
[117.10134888 571.89123535]
[118.04320526 586.86163330]
[126.63175964 600.14874268]
[119.70887756 613.33673096]
[120.65073395 628.30712891]
[121.59259033 643.27752686]
[133.61181641 653.53979492]
[134.77088928 669.30151367]
[124.38214111 681.21154785]
[108.60903168 682.20391846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[6 141]
[7 140]
[15 133]
[16 132]
[17 131]
[18 130]
[21 128]
[22 127]
[23 126]
[24 125]
[25 124]
[38 112]
[39 111]
[40 110]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[47 102]
[48 101]
[49 100]
[50 99]
[52 98]
[53 97]
[58 94]
[59 93]
[60 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
