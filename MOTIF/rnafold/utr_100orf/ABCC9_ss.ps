%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAACCAUAUAAGAAGAAAUGAGCCUUUCAUUUUGUGGUAACAACAUUUCUUCAUAUAAUAUCAACGAUGGUGUACUACAAAAUUCCUGCUUUGUGGAUGCCCUCAACCUGGUCCCUC\
) } def
/len { sequence length } bind def

/coor [
[66.04566956 234.53327942]
[54.60087204 224.37083435]
[49.20058060 210.04968262]
[51.08574295 194.86071777]
[59.82315826 182.29425049]
[73.40503693 175.23796082]
[73.40503693 160.23796082]
[73.40503693 145.23796082]
[73.40503693 130.23796082]
[64.18376160 118.40715027]
[49.63773727 114.74473572]
[35.09171295 111.08232880]
[20.54569244 107.41992188]
[5.27404070 111.55358887]
[-5.17889404 100.94296265]
[-19.72491646 97.28055573]
[-34.27093887 93.61814880]
[-48.81695938 89.95574188]
[-63.36298370 86.29332733]
[-77.90900421 82.63092041]
[-92.45502472 78.96851349]
[-107.00105286 75.30610657]
[-121.54707336 71.64369965]
[-130.65444946 83.78170776]
[-143.68003845 91.48737335]
[-158.62306213 93.61328125]
[-173.20207214 89.86629486]
[-185.20321655 80.84756470]
[-192.81640625 67.95629120]
[-194.90830994 53.17274857]
[-209.45433044 49.51034164]
[-224.00035095 45.84793091]
[-238.54637146 42.18552399]
[-255.38241577 44.18157578]
[-261.96115112 28.55606270]
[-248.76745605 17.90886307]
[-234.88397217 27.63949966]
[-220.33795166 31.30190849]
[-205.79193115 34.96431732]
[-191.24589539 38.62672424]
[-182.40277100 26.59641266]
[-169.59274292 18.84731483]
[-154.75173950 16.58691978]
[-140.13661194 20.19045830]
[-127.98191833 29.13904762]
[-120.15832520 42.09413528]
[-117.88466644 57.09767532]
[-103.33863831 60.76008224]
[-88.79261780 64.42249298]
[-74.24659729 68.08489990]
[-59.70057297 71.74730682]
[-45.15455246 75.40971375]
[-30.60853004 79.07212830]
[-16.06250763 82.73453522]
[-1.51648557 86.39694214]
[12.71473694 82.00131226]
[24.20810127 92.87390137]
[38.75412369 96.53630829]
[53.30014420 100.19871521]
[67.84616852 103.86112213]
[68.74545288 93.77684784]
[72.67809296 84.62409210]
[79.15969849 77.27442169]
[87.46899414 72.39305878]
[96.72710419 70.37921906]
[105.99013519 71.33489990]
[114.34534454 75.06443787]
[121.00106049 81.10391235]
[125.36154175 88.77643585]
[140.20886230 86.64171600]
[152.76744080 77.01919556]
[166.46629333 82.86646271]
[181.31361389 80.73174286]
[196.16093445 78.59702301]
[211.00825500 76.46229553]
[225.85557556 74.32757568]
[234.01991272 69.96140289]
[241.11552429 72.33535767]
[256.01327515 70.58679962]
[270.91101074 68.83824158]
[285.80874634 67.08968353]
[300.70648193 65.34113312]
[315.60421753 63.59257126]
[330.50195312 61.84401703]
[337.97937012 48.24741364]
[352.03494263 41.67313385]
[367.26394653 44.64912796]
[377.81057739 56.03105927]
[379.61941528 71.44234467]
[371.99493408 84.95703125]
[357.86886597 91.37844849]
[342.67303467 88.23742676]
[332.25051880 76.74175262]
[317.35278320 78.49031067]
[302.45504761 80.23886871]
[287.55728149 81.98741913]
[272.65954590 83.73597717]
[257.76181030 85.48453522]
[242.86408997 87.23309326]
[227.99031067 89.17489624]
[213.14299011 91.30961609]
[198.29565430 93.44434357]
[183.44833374 95.57906342]
[168.60101318 97.71378326]
[157.10443115 107.18360901]
[142.34358215 101.48903656]
[127.49626160 103.62375641]
[125.26132965 113.54624176]
[119.45593262 122.30004883]
[110.64451599 128.60838318]
[99.84336853 131.45428467]
[88.40503693 130.23796082]
[88.40503693 145.23796082]
[88.40503693 160.23796082]
[88.40503693 175.23796082]
[101.98691559 182.29425049]
[110.72432709 194.86071777]
[112.60948944 210.04968262]
[107.20919800 224.37083435]
[95.76440430 234.53327942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 115]
[7 114]
[8 113]
[9 112]
[10 60]
[11 59]
[12 58]
[13 57]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[30 40]
[31 39]
[32 38]
[33 37]
[69 107]
[70 106]
[72 104]
[73 103]
[74 102]
[75 101]
[76 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
