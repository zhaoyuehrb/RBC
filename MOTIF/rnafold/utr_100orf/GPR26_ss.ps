%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCAUGGCGGCGCCGGGUUGCGGACCCUGAGCGCCGGCGCGGGGCGCGCACCAUGAACUCGUGGGACGCGGGCCUGGCGGGGCUACUGGUGGGCACGAUGGGCGUCUCGCUGCUGUCCAACGCGCUGGUGCUGCUCUGCCUGCUGCACAGCG\
) } def
/len { sequence length } bind def

/coor [
[70.34513855 120.24042511]
[66.11914825 134.63281250]
[61.89316177 149.02520752]
[57.66717529 163.41760254]
[64.06285858 178.13069153]
[56.42035675 192.23641968]
[40.60234451 194.91409302]
[28.74304199 184.10963440]
[29.93989563 168.11128235]
[43.27478027 159.19161987]
[47.50076675 144.79922485]
[51.72675705 130.40682983]
[55.95274353 116.01443481]
[49.72736740 111.83177185]
[37.27661514 103.46643829]
[31.05123901 99.28377533]
[19.32376671 108.63612366]
[7.59629440 117.98846436]
[-4.13117790 127.34081268]
[-15.85865021 136.69316101]
[-24.47235107 151.29591370]
[-40.88893509 147.06129456]
[-41.36436081 130.11401367]
[-25.21099663 124.96569061]
[-13.48352432 115.61334229]
[-1.75605249 106.26099396]
[9.97141933 96.90864563]
[21.69889259 87.55630493]
[51.44057083 73.64009857]
[79.09223938 76.81249237]
[97.23947144 93.36029816]
[100.27828979 78.67133331]
[103.31710052 63.98237228]
[106.35591125 49.29341125]
[109.39472198 34.60444641]
[112.43354034 19.91548538]
[115.47235107 5.22652245]
[118.51116180 -9.46243954]
[121.54998016 -24.15140152]
[124.58879089 -38.84036636]
[127.62760162 -53.52932739]
[130.66641235 -68.21829224]
[133.40496826 -82.96618652]
[135.84210205 -97.76686859]
[138.27925110 -112.56755829]
[140.71638489 -127.36824799]
[143.15353394 -142.16893005]
[141.45483398 -151.20678711]
[145.79431152 -157.24539185]
[148.53285217 -171.99328613]
[151.27139282 -186.74118042]
[139.96072388 -176.88883972]
[125.26569366 -173.87950134]
[110.99268341 -178.49264526]
[100.83874512 -189.53337097]
[97.43399811 -204.14184570]
[101.66034698 -218.53413391]
[112.42307281 -228.98228455]
[126.93437195 -232.77995300]
[141.43545532 -228.94348145]
[152.17019653 -218.46658325]
[156.35798645 -204.06452942]
[162.02749634 -217.95181274]
[167.69699097 -231.83911133]
[173.36650085 -245.72639465]
[179.03599548 -259.61367798]
[184.70549011 -273.50097656]
[190.37500000 -287.38824463]
[196.04449463 -301.27554321]
[201.71400452 -315.16284180]
[191.69563293 -334.47747803]
[198.97598267 -354.68420410]
[218.49525452 -362.95227051]
[222.72125244 -377.34466553]
[226.94723511 -391.73706055]
[231.17321777 -406.12945557]
[235.39921570 -420.52185059]
[231.86328125 -435.94287109]
[242.87286377 -445.97476196]
[247.09884644 -460.36715698]
[251.32482910 -474.75955200]
[244.92915344 -489.47262573]
[252.57165527 -503.57836914]
[268.38967896 -506.25604248]
[280.24896240 -495.45156860]
[279.05212402 -479.45321655]
[265.71722412 -470.53356934]
[261.49124146 -456.14117432]
[257.26525879 -441.74877930]
[261.10345459 -427.35717773]
[249.79161072 -416.29586792]
[245.56561279 -401.90347290]
[241.33963013 -387.51107788]
[237.11364746 -373.11868286]
[232.88764954 -358.72628784]
[239.44210815 -352.89041138]
[243.73776245 -345.18759155]
[245.27308655 -336.45825195]
[243.84951782 -327.66577148]
[239.59669495 -319.79003906]
[232.96110535 -313.71829224]
[224.65946960 -310.14514160]
[215.60128784 -309.49334717]
[209.93177795 -295.60604858]
[204.26228333 -281.71875000]
[198.59278870 -267.83148193]
[192.92327881 -253.94418335]
[187.25378418 -240.05690002]
[181.58427429 -226.16960144]
[175.91477966 -212.28231812]
[170.24528503 -198.39503479]
[166.01928711 -184.00263977]
[163.28074646 -169.25474548]
[160.54219055 -154.50685120]
[157.95422363 -139.73179626]
[155.51707458 -124.93109894]
[153.07994080 -110.13041687]
[150.64279175 -95.32972717]
[148.20564270 -80.52903748]
[150.24871826 -76.15157318]
[149.52085876 -70.43870544]
[145.35537720 -65.17947388]
[142.31655884 -50.49051285]
[139.27775574 -35.80155182]
[136.23893738 -21.11258888]
[133.20011902 -6.42362690]
[130.16131592 8.26533508]
[127.12249756 22.95429802]
[124.08368683 37.64326096]
[121.04487610 52.33222198]
[118.00605774 67.02118683]
[114.96724701 81.71014404]
[111.92843628 96.39910889]
[113.75984955 111.28688812]
[120.26810455 124.80142212]
[126.77635956 138.31594849]
[139.73509216 147.39239502]
[138.28619385 162.21635437]
[144.79444885 175.73088074]
[151.30270386 189.24542236]
[165.90963745 195.87995911]
[169.68992615 211.47126770]
[159.74368286 224.05902100]
[143.70079041 223.98698425]
[133.86799622 211.31040955]
[137.78816223 195.75367737]
[131.27990723 182.23915100]
[124.77165985 168.72460938]
[112.27843475 160.61482239]
[113.26183319 144.82420349]
[106.75357056 131.30967712]
[100.24531555 117.79514313]
[92.77027130 118.40646362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[31 133]
[32 132]
[33 131]
[34 130]
[35 129]
[36 128]
[37 127]
[38 126]
[39 125]
[40 124]
[41 123]
[42 122]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[49 114]
[50 113]
[51 112]
[62 111]
[63 110]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[70 103]
[73 95]
[74 94]
[75 93]
[76 92]
[77 91]
[79 89]
[80 88]
[81 87]
[134 152]
[135 151]
[136 150]
[138 148]
[139 147]
[140 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
