%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGGGCCAUCAGAAUCACACUUUCAGCAGUGAUUUCAUACUUUUGGGAUUGUUCUCUUCUUCCCCAACAAGUGUGGUCUUCUUCUUAGUUUUAUUUG\
) } def
/len { sequence length } bind def

/coor [
[110.17647552 141.57893372]
[107.31643677 126.84905243]
[100.15563965 140.02944946]
[92.99484253 153.20985413]
[85.83404541 166.39025879]
[78.67324829 179.57066345]
[76.42473602 196.37483215]
[59.65481567 198.86605835]
[52.61857605 183.44116211]
[65.49284363 172.40985107]
[72.65364075 159.22946167]
[79.81443787 146.04905701]
[86.97523499 132.86865234]
[94.13603973 119.68825531]
[86.97523499 106.50785065]
[72.02056885 105.34259796]
[57.06589890 104.17733765]
[42.11122513 103.01207733]
[27.15655518 101.84682465]
[12.20188522 100.68156433]
[-2.75278544 99.51630402]
[-11.37603283 112.22595215]
[-25.20579529 118.90676117]
[-40.52193832 117.76162720]
[-53.20449448 109.09858704]
[-59.84192276 95.24794769]
[-58.64878464 79.93547058]
[-49.94602966 67.28012848]
[-36.07465744 60.68615341]
[-20.76599312 61.92728043]
[-8.13799477 70.66966248]
[-1.58752763 84.56163788]
[13.36714268 85.72689056]
[28.32181358 86.89215088]
[43.27648544 88.05741119]
[58.23115540 89.22266388]
[73.18582916 90.38792419]
[88.14049530 91.55318451]
[101.32089996 84.39238739]
[108.48169708 71.21198273]
[115.64249420 58.03158188]
[122.80329132 44.85118103]
[129.96409607 31.67078018]
[137.12489319 18.49037933]
[144.28569031 5.30997801]
[151.24064636 -7.98019218]
[157.98806763 -21.37691689]
[164.73548889 -34.77364349]
[171.48291016 -48.17036819]
[178.23034668 -61.56709290]
[168.03482056 -72.81056213]
[162.59303284 -86.97924042]
[162.64094543 -102.15692902]
[168.17207336 -116.29096222]
[178.43838501 -127.46984100]
[192.05145264 -134.18170166]
[207.17019653 -135.51882935]
[221.74993896 -131.30038452]
[233.81890869 -122.09687805]
[241.74485779 -109.15300751]
[244.45587158 -94.21932220]
[241.58531189 -79.31549072]
[233.52137756 -66.45712280]
[221.35467529 -57.38321304]
[206.73065186 -53.32093048]
[191.62705994 -54.81966782]
[184.87963867 -41.42294312]
[178.13221741 -28.02621651]
[171.38479614 -14.62949181]
[164.63735962 -1.23276663]
[164.43637085 6.28953981]
[157.46607971 12.47077656]
[150.30528259 25.65117645]
[143.14448547 38.83157730]
[135.98368835 52.01197815]
[128.82289124 65.19238281]
[121.66209412 78.37277985]
[114.50129700 91.55318451]
[122.88874054 79.11731720]
[133.88105774 68.91098785]
[146.90388489 61.46749115]
[161.27680969 57.17573929]
[176.24882507 56.25997925]
[191.03765869 58.76805496]
[204.87059021 64.56892395]
[217.02484131 73.35948944]
[226.86537170 84.68045044]
[233.87799072 97.94028473]
[237.69631958 112.44615936]
[238.12081909 127.44014740]
[235.12933350 142.13882446]
[228.87814331 155.77416992]
[219.69389343 167.63374329]
[208.05645752 177.09790039]
[194.57389832 183.67211914]
[179.95065308 187.01289368]
[164.95080566 186.94567871]
[150.35809326 183.47399902]
[136.93496704 176.77922058]
[125.38281250 167.21116638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[39 78]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
