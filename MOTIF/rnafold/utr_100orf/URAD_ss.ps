%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAUUGAGAAGGUCAACUCCAUGGACCUUGGAGAAUUCGUGGAUGUGUUUGGGAAUGCCACUGAGAGAUGUCCUCUGAUUGCAGCUGCUGUUUGGU\
) } def
/len { sequence length } bind def

/coor [
[224.14666748 251.12705994]
[222.33332825 247.23170471]
[221.92306519 242.49227905]
[212.80708313 230.58015442]
[203.69108582 218.66802979]
[194.57508850 206.75590515]
[185.45910645 194.84378052]
[176.34310913 182.93165588]
[167.22712708 171.01953125]
[152.47515869 173.07992554]
[138.58012390 167.44219971]
[129.31138611 155.52764893]
[127.23719788 140.47459412]
[133.01383972 126.31204224]
[123.89784241 114.39991760]
[111.80003357 124.18714905]
[96.87834930 125.73449707]
[84.02642822 119.14576721]
[77.13038635 107.09635162]
[77.89829254 93.79436493]
[65.57395935 85.24388123]
[53.11813736 76.88610077]
[40.53384781 68.72303772]
[27.94955444 60.55997467]
[15.36526299 52.39691162]
[2.78097057 44.23384857]
[-9.80332184 36.07078552]
[-22.38761330 27.90772438]
[-34.97190475 19.74466133]
[-48.61651230 26.79592323]
[-63.95796204 26.06416321]
[-76.86948395 17.74621964]
[-83.87794495 4.07957935]
[-83.09809875 -11.25950146]
[-74.73972321 -24.14488792]
[-61.05118179 -31.11047363]
[-45.71462250 -30.28255272]
[-32.85549927 -21.88383102]
[-25.93285370 -8.17352200]
[-26.80884361 7.16036892]
[-14.22455120 15.32343102]
[-1.64025867 23.48649406]
[10.94403362 31.64955711]
[23.52832603 39.81261826]
[36.11261749 47.97568130]
[48.69691086 56.13874435]
[61.28120041 64.30181122]
[68.73713684 65.31891632]
[74.12444305 72.91954803]
[86.44877625 81.47003174]
[94.07196045 76.54500580]
[103.45573425 74.80722809]
[113.25381470 76.86238098]
[121.92610168 82.74570465]
[129.49334717 69.79437256]
[137.06057739 56.84305191]
[134.39590454 41.02284241]
[145.21011353 29.17241669]
[161.20745850 30.38241005]
[170.11618042 43.72461700]
[165.10223389 58.96403503]
[150.01191711 64.41029358]
[142.44467163 77.36161804]
[134.87742615 90.31294250]
[135.80996704 105.28392792]
[144.92596436 117.19605255]
[160.10594177 115.32112885]
[174.09390259 121.25692749]
[183.17231750 133.31713867]
[184.98306274 148.20260620]
[179.13925171 161.90353394]
[188.25523376 173.81565857]
[197.37123108 185.72778320]
[206.48721313 197.63990784]
[215.60321045 209.55203247]
[224.71920776 221.46415710]
[233.83518982 233.37628174]
[243.67411804 244.69862366]
[254.19792175 255.38739014]
[269.39343262 259.79278564]
[272.80923462 274.29040527]
[283.33303833 284.97918701]
[293.85684204 295.66793823]
[309.05233765 300.07333374]
[312.46813965 314.57095337]
[322.99194336 325.25973511]
[338.93432617 329.10327148]
[343.31677246 344.90600586]
[331.63098145 356.41140747]
[315.89831543 351.78375244]
[312.30319214 335.78353882]
[301.77938843 325.09475708]
[287.33660889 321.45391846]
[283.16806030 306.19174194]
[272.64428711 295.50299072]
[262.12048340 284.81420898]
[247.67770386 281.17337036]
[243.50917053 265.91119385]
[232.98536682 255.22242737]
[230.01194763 255.16645813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[14 66]
[15 65]
[20 50]
[21 49]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[54 64]
[55 63]
[56 62]
[78 99]
[79 98]
[81 96]
[82 95]
[83 94]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
