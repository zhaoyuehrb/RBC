%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCUUCCAGCCUACCCUGCAUCUCUUCCCUCUGAAUUGCAGGAACCCUCCCAGCCUCCAUGCCGCCUUUCCUGAUCACCCUCUUCCUCUUUCACUCUUGCUGCCUCCGAGCAAAUGGCCACCUCCGUGAAGGAAUGACAUUGCUGAAGACUGAGUUUG\
) } def
/len { sequence length } bind def

/coor [
[105.46878052 350.50189209]
[117.16316223 340.30282593]
[115.70201111 325.37417603]
[114.24085236 310.44549561]
[112.63411713 295.53179932]
[110.88195801 280.63449097]
[109.12979889 265.73718262]
[107.37763977 250.83985901]
[103.45323181 244.53225708]
[105.73955536 235.63516235]
[104.27839661 220.70649719]
[102.81724548 205.77783203]
[78.71136475 203.65171814]
[55.71891403 196.10447693]
[35.04243088 183.53083801]
[17.76332092 166.58839417]
[4.78531361 146.16328430]
[-9.14185333 151.73411560]
[-23.06901932 157.30493164]
[-36.99618530 162.87574768]
[-50.92335129 168.44656372]
[-64.85051727 174.01739502]
[-71.14127350 188.26744080]
[-85.34475708 193.71865845]
[-98.89124298 187.63356018]
[-112.81841278 193.20437622]
[-116.49384308 208.27989197]
[-128.35023499 218.29016113]
[-143.82856750 219.38604736]
[-156.97709656 211.14616394]
[-162.73994446 196.73890686]
[-158.90119934 181.70414734]
[-146.93690491 171.82308960]
[-131.44760132 170.89517212]
[-118.38922882 179.27722168]
[-104.46206665 173.70639038]
[-98.84907532 159.95758057]
[-84.80430603 154.10957336]
[-70.42134094 160.09022522]
[-56.49417114 154.51939392]
[-42.56700516 148.94857788]
[-28.63983917 143.37776184]
[-14.71267223 137.80694580]
[-0.78550601 132.23612976]
[-3.27468157 123.04833984]
[-4.92810202 113.67403412]
[-5.73238611 104.18907928]
[-5.68102598 94.67021942]
[-4.77443695 85.19448853]
[-3.01995587 75.83856964]
[-0.43178046 66.67818451]
[2.96914387 57.78745651]
[7.15529537 49.23833466]
[12.09279728 41.10000229]
[17.74169159 33.43832397]
[6.77915287 23.20002747]
[-9.00537968 23.99002266]
[-20.66912651 13.32547474]
[-21.29219246 -2.46652722]
[-10.50492573 -14.01686954]
[5.29278088 -14.47293949]
[16.72842789 -3.56415820]
[17.01745033 12.23748779]
[27.97999001 22.47578430]
[34.09719467 17.21288490]
[40.59767532 12.43145561]
[47.44362640 8.15930367]
[54.59523392 4.42127323]
[62.01090240 1.23910582]
[69.64750671 -1.36869276]
[77.46063232 -3.38695598]
[85.40483856 -4.80394650]
[93.43392944 -5.61142254]
[101.50120544 -5.80468893]
[109.55975342 -5.38262177]
[117.56270599 -4.34767485]
[125.46351624 -2.70586777]
[133.21623230 -0.46674863]
[140.77577209 2.35666037]
[148.09817505 5.74793863]
[155.14085388 9.68736362]
[161.86283875 14.15202522]
[168.22505188 19.11595726]
[174.19047546 24.55029106]
[179.72444153 30.42341995]
[184.79473877 36.70119095]
[189.37188721 43.34709167]
[193.42927551 50.32247162]
[196.94329834 57.58676529]
[211.07720947 52.56357193]
[225.21112061 47.54037476]
[239.34504700 42.51718140]
[253.47895813 37.49398804]
[267.61285400 32.47079468]
[281.74679565 27.44759941]
[295.88070679 22.42440414]
[296.04998779 7.28516197]
[301.37869263 -6.85616016]
[311.20559692 -18.29960060]
[324.32998657 -25.67658424]
[339.15844727 -28.11358261]
[353.89807129 -25.33550835]
[366.77349854 -17.69662857]
[376.24057007 -6.13550425]
[390.37448120 -11.15869808]
[404.50839233 -16.18189240]
[406.60897827 -31.34257126]
[415.52389526 -43.78375244]
[429.20455933 -50.64654160]
[444.50726318 -50.35391998]
[457.91555786 -42.97313309]
[466.34832764 -30.20022774]
[467.86776733 -14.97032642]
[462.12472534 -0.78314853]
[450.43890381 9.10119629]
[435.49563599 12.41135883]
[420.72875977 8.38668728]
[409.53161621 -2.04797888]
[395.39767456 2.97521544]
[381.26376343 7.99840975]
[381.21612549 22.94106674]
[376.04931641 36.99216080]
[366.36883545 48.44914627]
[353.32827759 55.91678619]
[338.49200439 58.47703552]
[323.64736938 55.80186844]
[310.58941650 48.19515991]
[300.90390015 36.55831909]
[286.76998901 41.58151245]
[272.63607788 46.60470581]
[258.50213623 51.62790298]
[244.36824036 56.65109634]
[230.23431396 61.67428970]
[216.10040283 66.69748688]
[201.96649170 71.72068024]
[205.43627930 91.05137634]
[205.27394104 110.69034576]
[201.48507690 129.96104431]
[194.20021057 148.19963074]
[183.67030334 164.77781677]
[170.25807190 179.12451172]
[154.42556763 190.74548340]
[136.71818542 199.24041748]
[117.74591064 204.31668091]
[119.20706177 219.24534607]
[120.66822052 234.17401123]
[122.27495575 249.08770752]
[124.02711487 263.98501587]
[125.77927399 278.88232422]
[127.53143311 293.77963257]
[131.66036987 301.98559570]
[129.16952515 308.98434448]
[130.63067627 323.91302490]
[132.09182739 338.84167480]
[145.54180908 346.57971191]
[151.84402466 360.75933838]
[148.57511902 375.92819214]
[136.99206543 386.25354004]
[121.54878998 387.76504517]
[108.18353271 379.88156128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 150]
[6 149]
[7 148]
[8 147]
[10 146]
[11 145]
[12 144]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[25 36]
[26 35]
[55 64]
[56 63]
[89 135]
[90 134]
[91 133]
[92 132]
[93 131]
[94 130]
[95 129]
[96 128]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
