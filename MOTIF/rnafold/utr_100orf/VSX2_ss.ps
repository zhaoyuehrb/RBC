%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGGACCAACUUCGCGAAGCGGGAAGCCCGGCGGGGGGGUGGGGGGAGCUAAAGACCUGCGGCCUCAGCCCCUCCAAAGAACAGGGAGAUGACGGGGAAAGCAGGGGAAGCGCUGAGCAAGCCCAAAUCCGAGACAGUGGCCAAGAGUACCUCGGGGGGCGCCCCGGCCAGGUGCACUGGGUUCGGCA\
) } def
/len { sequence length } bind def

/coor [
[97.36853790 135.87878418]
[87.13628387 133.59667969]
[78.97014618 146.17897034]
[70.80401611 158.76127625]
[62.63787842 171.34356689]
[54.47174072 183.92587280]
[69.46575165 183.50218201]
[79.27403259 194.85108948]
[76.68264771 209.62554932]
[63.59755325 216.95904541]
[49.64273834 211.45785522]
[45.08190536 197.16784668]
[35.90975952 209.03678894]
[26.73761368 220.90571594]
[17.56546783 232.77465820]
[15.24922371 248.42539978]
[1.34456027 253.76483154]
[-7.82758617 265.63378906]
[-12.72859955 281.86389160]
[-29.68116379 281.64733887]
[-34.16602325 265.29736328]
[-19.69652557 256.46163940]
[-10.52437973 244.59269714]
[-8.86418915 229.79089355]
[5.69652748 223.60250854]
[14.86867332 211.73358154]
[24.04082108 199.86463928]
[33.21296692 187.99569702]
[41.88944244 175.75973511]
[50.05558014 163.17742920]
[58.22171402 150.59513855]
[66.38785553 138.01284790]
[74.55398560 125.43054199]
[66.35457611 112.73568726]
[64.09258270 97.79335785]
[49.64160919 93.77223969]
[35.19063950 89.75111389]
[20.73966599 85.72999573]
[6.28869534 81.70886993]
[-8.16227627 77.68775177]
[-22.61324883 73.66662598]
[-37.06422043 69.64550781]
[-52.43345261 73.40012360]
[-62.62070847 62.53416443]
[-77.07167816 58.51304245]
[-91.52265167 54.49192047]
[-105.97362518 50.47079849]
[-119.61981201 57.98208237]
[-134.21786499 53.69823074]
[-141.29463196 40.64239120]
[-155.74560547 36.62126923]
[-167.19145203 46.96516037]
[-182.41635132 49.45635223]
[-196.56208801 43.29991913]
[-205.11480713 30.46035004]
[-205.34536743 15.03470993]
[-197.18020630 1.94526196]
[-183.22479248 -4.63119841]
[-167.93223572 -2.59614611]
[-156.18235779 7.40104055]
[-151.72447205 22.17029572]
[-137.27351379 26.19141769]
[-124.47019958 18.66739655]
[-109.75757599 22.53952599]
[-101.95249939 36.01982880]
[-87.50153351 40.04095078]
[-73.05056000 44.06207275]
[-58.59958649 48.08319473]
[-44.26398087 44.04095459]
[-33.04309845 55.19453430]
[-18.59212685 59.21565628]
[-4.14115429 63.23677826]
[10.30981731 67.25789642]
[24.76078796 71.27902222]
[39.21176147 75.30014038]
[53.66273117 79.32126617]
[68.11370087 83.34238434]
[80.98115540 69.46321106]
[99.11250305 64.03578949]
[117.48948669 68.56228638]
[131.02586365 81.78989410]
[145.26089478 77.06087494]
[159.49594116 72.33186340]
[173.73098755 67.60285187]
[169.88609314 59.44480133]
[168.49377441 50.66220856]
[169.59536743 41.96585846]
[173.03314209 34.03987503]
[178.46846008 27.48789215]
[185.41381836 22.78717995]
[193.27601624 20.25412750]
[201.40652466 20.02363968]
[209.15492249 22.04365730]
[215.92091370 26.08485985]
[221.20082092 31.76433372]
[235.09414673 26.10966873]
[248.98748779 20.45500374]
[262.88082886 14.80033875]
[276.77416992 9.14567375]
[278.79312134 -1.31572211]
[285.12973022 -9.70961571]
[294.39266968 -14.39351082]
[304.63446045 -14.51803684]
[312.17004395 -27.48780823]
[308.34301758 -42.58720016]
[316.16992188 -55.63304901]
[330.58847046 -59.18847275]
[338.12405396 -72.15824890]
[333.83370972 -87.36904907]
[341.62844849 -101.11742401]
[356.88375854 -105.24671936]
[370.54895020 -97.30708313]
[374.51672363 -82.00896454]
[366.43304443 -68.42846680]
[351.09384155 -64.62266541]
[343.55825806 -51.65288925]
[347.61016846 -37.36591721]
[340.15277100 -24.10537720]
[325.13980103 -19.95222473]
[317.60421753 -6.98245335]
[319.14627075 -4.94593048]
[320.44766235 -2.74784040]
[321.49169922 -0.41647878]
[336.48715210 -0.78652412]
[351.48257446 -1.15656948]
[366.47802734 -1.52661490]
[370.95999146 -4.26802540]
[375.58218384 -4.93737555]
[379.52795410 -3.83072686]
[382.21810913 -1.52661490]
[397.21353149 -1.15656948]
[412.20898438 -0.78652412]
[427.20440674 -0.41647878]
[442.19985962 -0.04643342]
[457.19528198 0.32361194]
[461.80700684 -2.19339204]
[466.45660400 -2.63393950]
[470.34298706 -1.33401549]
[472.91622925 1.09998190]
[487.87515259 2.20921707]
[502.83407593 3.31845236]
[512.75494385 -8.61283398]
[527.80242920 -12.40145779]
[542.19036865 -6.59061432]
[550.38641357 6.58530760]
[549.23895264 22.05989838]
[539.18920898 33.88285828]
[524.10150146 37.50802231]
[509.77743530 31.54144096]
[501.72485352 18.27738190]
[486.76589966 17.16814804]
[471.80697632 16.05891228]
[456.82522583 15.31904697]
[441.82980347 14.94900131]
[426.83438110 14.57895565]
[411.83892822 14.20891094]
[396.84350586 13.83886528]
[381.84805298 13.46881962]
[366.84805298 13.46881962]
[351.85263062 13.83886528]
[336.85720825 14.20891094]
[321.86175537 14.57895565]
[304.97088623 30.28214264]
[282.42883301 23.03900909]
[268.53549194 28.69367409]
[254.64215088 34.34833908]
[240.74880981 40.00300217]
[226.85548401 45.65766907]
[223.60279846 66.35503387]
[205.60997009 80.27318573]
[212.71490479 93.48378754]
[219.81982422 106.69438934]
[226.92474365 119.90499115]
[241.81323242 125.88101959]
[246.28559875 141.28807068]
[236.91105652 154.30718994]
[220.88093567 154.95121765]
[210.49217224 142.72610474]
[213.71414185 127.00991821]
[206.60922241 113.79931641]
[199.50428772 100.58871460]
[192.39936829 87.37811279]
[178.46000671 81.83789825]
[164.22496033 86.56690979]
[149.98991394 91.29592133]
[135.75486755 96.02493286]
[135.38270569 106.50198364]
[132.00578308 116.42686462]
[125.91085815 124.95674896]
[117.61553192 131.36726379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[12 28]
[13 27]
[14 26]
[15 25]
[17 23]
[18 22]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[44 68]
[45 67]
[46 66]
[47 65]
[50 62]
[51 61]
[81 186]
[82 185]
[83 184]
[84 183]
[95 168]
[96 167]
[97 166]
[98 165]
[99 164]
[103 120]
[104 119]
[107 116]
[108 115]
[123 162]
[124 161]
[125 160]
[126 159]
[130 158]
[131 157]
[132 156]
[133 155]
[134 154]
[135 153]
[139 152]
[140 151]
[141 150]
[170 182]
[171 181]
[172 180]
[173 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
