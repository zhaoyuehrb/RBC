%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACAGAGCAUAAGCCAAAAUGGAAGAUGGUCCUGUUUUCUAUGGCUUUAAAAACAUUUUUAUUACAAUGUUUGCUACGUUUUUUUUCUUUAAGCUUUUAAUUAAAGUUUUUUUGGCUC\
) } def
/len { sequence length } bind def

/coor [
[128.83070374 211.64083862]
[116.34335327 221.32803345]
[100.67427063 219.26515198]
[91.11964417 206.67608643]
[93.34806824 191.02969360]
[106.03745270 181.60870361]
[107.99534607 166.73703003]
[109.95323944 151.86535645]
[111.91113281 136.99368286]
[91.99274445 134.55197144]
[77.74440765 123.09244537]
[72.32313538 107.50000000]
[57.32313156 107.50000000]
[42.32313156 107.50000000]
[27.32313347 107.50000000]
[12.32313251 107.50000000]
[-2.67686725 107.50000000]
[-7.40590715 110.24816895]
[-12.22514153 110.76653290]
[-16.23996925 109.41475677]
[-18.84218979 106.86486053]
[-33.79594803 105.68797302]
[-48.74971008 104.51109314]
[-63.70346832 103.33420563]
[-78.65722656 102.15731812]
[-93.61099243 100.98043060]
[-108.56475067 99.80354309]
[-123.51850891 98.62665558]
[-135.37190247 109.08001709]
[-151.13969421 108.00666809]
[-161.46714783 96.04342651]
[-160.22715759 80.28785706]
[-148.15539551 70.08746338]
[-132.41381836 71.49395752]
[-122.34162140 83.67289734]
[-107.38786316 84.84978485]
[-92.43410492 86.02667236]
[-77.48033905 87.20355988]
[-62.52658463 88.38043976]
[-47.57282257 89.55732727]
[-32.61906433 90.73421478]
[-17.66530228 91.91110229]
[-2.67686725 92.50000000]
[12.32313251 92.50000000]
[27.32313347 92.50000000]
[42.32313156 92.50000000]
[57.32313156 92.50000000]
[72.32313538 92.50000000]
[81.28981018 75.00479889]
[100.70980835 66.23794556]
[122.96578217 71.86677551]
[137.90516663 91.42060852]
[139.86306763 76.54893494]
[141.82095337 61.67726517]
[143.77885437 46.80559158]
[145.73674011 31.93391991]
[147.69462585 17.06224632]
[149.65252686 2.19057417]
[138.30456543 -8.39259052]
[135.37754822 -23.63110161]
[141.99699402 -37.66544342]
[155.61756897 -45.09912109]
[171.00189209 -43.07373428]
[182.23437500 -32.36808777]
[184.99591064 -17.09872246]
[178.22460938 -3.13701630]
[164.52420044 4.14846706]
[162.56629944 19.02013969]
[160.60841370 33.89181137]
[158.65051270 48.76348495]
[156.69262695 63.63515854]
[154.73474121 78.50682831]
[152.77684021 93.37850189]
[161.62490845 81.26604462]
[163.65953064 66.40467834]
[170.28860474 52.94898987]
[180.83197021 42.27953339]
[194.20790100 35.49098587]
[209.04403687 33.27984619]
[223.81819153 35.87298203]
[237.01454163 43.00433350]
[247.27917480 53.94223022]
[253.55889893 67.56445312]
[255.20947266 82.47336578]
[252.06149292 97.13932037]
[244.43798828 110.05760193]
[233.12109375 119.90280914]
[219.27194214 125.66481781]
[204.31141663 126.75245667]
[189.77449036 123.05413055]
[177.15342712 114.95001221]
[162.19668579 113.81172943]
[174.77674866 121.98130798]
[187.35679626 130.15089417]
[199.93685913 138.32048035]
[212.51692200 146.49006653]
[225.09698486 154.65965271]
[237.67703247 162.82923889]
[253.60530090 160.91357422]
[264.93255615 172.27459717]
[262.96951294 188.19709778]
[249.22203064 196.46669006]
[234.23600769 190.73966980]
[229.50744629 175.40930176]
[216.92739868 167.23971558]
[204.34733582 159.07012939]
[191.76727295 150.90054321]
[179.18721008 142.73095703]
[166.60716248 134.56137085]
[154.02709961 126.39178467]
[147.21601868 129.53173828]
[157.39802551 140.54658508]
[150.06866455 153.63400269]
[135.35688782 150.70758057]
[133.59387207 135.81163025]
[126.78280640 138.95158386]
[124.82491302 153.82324219]
[122.86701965 168.69491577]
[120.90912628 183.56658936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 119]
[7 118]
[8 117]
[9 116]
[12 48]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
