%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCACCCCGGGUGAAGGAUGCCACUCUGGGUGUUCUUCUUUGUGAUCCUCACCCUCAGCAACAGCUCCCACUGCUCCCCACCUCCCCCUUUGACCCUCAGGAUGCGGCGGUAUGCAG\
) } def
/len { sequence length } bind def

/coor [
[33.66028976 161.89004517]
[39.70662689 146.05091858]
[39.70662689 131.05091858]
[39.70662689 116.05091858]
[26.61918831 108.72159576]
[13.82958603 116.55907440]
[1.03998339 124.39655304]
[-11.74961948 132.23403931]
[-24.53922081 140.07151794]
[-32.26307297 153.87921143]
[-47.15758514 153.93206787]
[-59.94718933 161.76954651]
[-72.73679352 169.60702515]
[-85.52639008 177.44450378]
[-98.31599426 185.28198242]
[-99.39915466 200.76119995]
[-109.39967346 212.62582397]
[-124.47215271 216.31364441]
[-138.82090759 210.40664673]
[-146.92855835 197.17616272]
[-145.67755127 181.70959473]
[-135.54890442 169.95416260]
[-120.43730927 166.43005371]
[-106.15347290 172.49237061]
[-93.36386871 164.65489197]
[-80.57427216 156.81741333]
[-67.78466797 148.97993469]
[-54.99506378 141.14245605]
[-48.18600845 127.89534760]
[-32.37670135 127.28190613]
[-19.58709717 119.44442749]
[-6.79749489 111.60694885]
[5.99210739 103.76947021]
[18.78170967 95.93199158]
[20.43694115 88.61692810]
[5.45552111 89.36329651]
[-8.99861145 93.37304688]
[-21.74734116 85.46925354]
[-24.58384514 70.73988342]
[-15.68216324 58.66677475]
[-0.77263242 57.02181625]
[10.54671478 66.86345673]
[23.74740219 73.98679352]
[25.40263367 66.67172241]
[17.23304749 54.09166718]
[9.06346226 41.51160812]
[0.89387637 28.93154907]
[-12.80362034 18.94080734]
[-6.99516535 3.01290202]
[9.91821194 4.18507719]
[13.47393513 20.76196480]
[21.64352036 33.34202194]
[29.81310654 45.92208099]
[37.98269272 58.50214005]
[45.33858109 57.03896332]
[42.41245270 42.32713699]
[57.12432480 39.40123749]
[60.05036163 54.11260605]
[67.40625000 52.64942932]
[70.13978577 37.90060806]
[72.87331390 23.15178299]
[66.89209747 7.88230038]
[77.33529663 -4.76173878]
[93.45983887 -1.77323139]
[98.67817688 13.77350235]
[87.62213898 25.88531494]
[84.88860321 40.63414001]
[82.15507507 55.38296127]
[120.26822662 63.95620346]
[134.17465210 94.28072357]
[149.15409851 95.06576538]
[163.34030151 88.06130981]
[175.64518738 96.45410156]
[190.62463379 97.23914337]
[205.60406494 98.02418518]
[220.58351135 98.80921936]
[235.57194519 99.39811707]
[250.56680298 99.79077148]
[265.56167603 100.18342590]
[269.83679199 85.71325684]
[277.71221924 72.84313965]
[288.65100098 62.45057297]
[301.90731812 55.24414444]
[316.57733154 51.71519852]
[331.66079712 52.10434723]
[346.12930298 56.38505173]
[358.99636841 64.26544952]
[369.38473511 75.20825195]
[376.58602905 88.46733856]
[380.10931396 103.13870239]
[379.71435547 118.22202301]
[375.42803955 132.68888855]
[367.54269409 145.55291748]
[356.59588623 155.93702698]
[343.33401489 163.13322449]
[328.66128540 166.65083313]
[313.57812500 166.25004578]
[299.11291504 161.95816040]
[286.25192261 154.06782532]
[275.87203979 143.11701965]
[268.68096924 129.85237122]
[265.16900635 115.17828369]
[250.17414856 114.78562927]
[235.17929077 114.39298248]
[228.32611084 117.40032959]
[219.79847717 113.78866577]
[204.81903076 113.00362396]
[189.83958435 112.21858215]
[174.86015320 111.43354797]
[161.74537659 118.49414825]
[148.36904907 110.04520416]
[133.38961792 109.26016998]
[123.52750397 129.84150696]
[101.44765472 141.32627869]
[74.84748077 136.95486450]
[54.70662689 116.05091858]
[54.70662689 131.05091858]
[54.70662689 146.05091858]
[60.75296783 161.89004517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[4 116]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[44 54]
[45 53]
[46 52]
[47 51]
[59 68]
[60 67]
[61 66]
[70 112]
[71 111]
[73 109]
[74 108]
[75 107]
[76 106]
[77 104]
[78 103]
[79 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
