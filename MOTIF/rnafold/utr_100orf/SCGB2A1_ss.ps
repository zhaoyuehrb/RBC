%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCACAGCAACUUCCUUGAUCCCUGCCACGCACGACUGAACACAGACAGCAGCCGCCUCGCCAUGAAGCUGCUGAUGGUCCUCAUGCUGGCGGCCCUCCUCCUGCACUGCUAUGCAGAUUCUGGCUGCAAACUCCUGGAGGACAUGGUUGAAAAGACCAUCA\
) } def
/len { sequence length } bind def

/coor [
[195.56605530 293.28967285]
[189.72700500 279.47280884]
[183.88795471 265.65597534]
[178.04890442 251.83911133]
[172.20985413 238.02224731]
[166.37080383 224.20539856]
[159.49740601 210.87286377]
[151.62950134 198.10195923]
[143.76161194 185.33103943]
[135.89370728 172.56013489]
[122.57542419 177.74111938]
[108.55362701 180.49948120]
[94.26527405 180.74926758]
[80.15563202 178.48268127]
[66.66439819 173.77037048]
[54.21198273 166.75918579]
[43.18645096 157.66758728]
[33.93137741 146.77893066]
[26.73518181 134.43251038]
[21.82211494 121.01306915]
[19.34528160 106.93881226]
[19.38186455 92.64833069]
[21.93072510 78.58693695]
[26.91243553 65.19283295]
[34.17174911 52.88341904]
[22.83550453 43.06050873]
[11.49926186 33.23759460]
[0.16301821 23.41468430]
[-11.17322540 13.59177399]
[-22.50946808 3.76886296]
[-31.08605576 0.49310887]
[-33.96573639 -6.35059309]
[-45.11290741 -16.38755226]
[-56.26007843 -26.42451096]
[-71.69287109 -29.90869522]
[-75.97381592 -44.17483521]
[-87.12098694 -54.21179581]
[-98.69872284 -51.28261566]
[-110.13061523 -54.29602051]
[-118.58637238 -62.38565063]
[-122.03100586 -73.44361877]
[-119.71382141 -84.66885376]
[-130.47079468 -95.12291718]
[-138.84638977 -98.88294983]
[-141.33067322 -105.87989044]
[-151.88665771 -116.53685760]
[-164.78651428 -117.38659668]
[-173.36103821 -126.51826477]
[-173.39479065 -138.64317322]
[-183.74597168 -149.49917603]
[-194.09715271 -160.35519409]
[-204.44834900 -171.21119690]
[-214.79953003 -182.06721497]
[-225.15071106 -192.92321777]
[-235.50189209 -203.77923584]
[-249.66754150 -198.26531982]
[-264.86483765 -198.59707642]
[-278.77636719 -204.72392273]
[-289.28067017 -215.71154785]
[-294.77593994 -229.88442993]
[-294.42419434 -245.08129883]
[-288.27905273 -258.98474121]
[-277.27761841 -269.47457886]
[-263.09753418 -274.95120239]
[-247.90113831 -274.57946777]
[-234.00579834 -268.41604614]
[-223.53042603 -257.40081787]
[-218.07246399 -243.21353149]
[-218.46418762 -228.01765442]
[-224.64588928 -214.13041687]
[-214.29470825 -203.27441406]
[-203.94351196 -192.41839600]
[-193.59233093 -181.56239319]
[-183.24114990 -170.70637512]
[-172.88996887 -159.85037231]
[-162.53877258 -148.99435425]
[-145.47261047 -144.98997498]
[-141.22969055 -127.09285736]
[-130.67370605 -116.43588257]
[-120.01673126 -105.87989044]
[-109.25975800 -95.42582703]
[-91.03948212 -96.81672668]
[-77.32277679 -84.26706696]
[-77.08402252 -65.35897064]
[-65.93685150 -55.32201004]
[-51.30138397 -52.55573654]
[-46.22312164 -37.57168198]
[-35.07594681 -27.53472519]
[-23.92877579 -17.49776649]
[-12.68655777 -7.56738043]
[-1.35031438 2.25553036]
[9.98592949 12.07844162]
[21.32217216 21.90135193]
[32.65841675 31.72426414]
[43.99465942 41.54717636]
[56.53816605 31.70358658]
[70.76776886 24.50955200]
[86.13143921 20.24416161]
[102.03313446 19.07288933]
[117.85594940 21.04117584]
[132.98605347 26.07266235]
[146.83645630 33.97215271]
[158.86985779 44.43318558]
[168.61940002 57.04992676]
[182.01675415 50.30376434]
[195.41412354 43.55760193]
[208.81147766 36.81143951]
[222.20884705 30.06527519]
[226.92550659 14.98122311]
[240.96528625 7.72449398]
[255.99862671 12.60037422]
[263.10650635 26.71609306]
[258.07196045 41.69704056]
[243.88189697 48.65529251]
[228.95500183 43.46263504]
[215.55764771 50.20879745]
[202.16027832 56.95495987]
[188.76292419 63.70112610]
[175.36557007 70.44728851]
[179.52552795 84.86656952]
[180.95240784 99.80594635]
[179.59716797 114.75199127]
[175.50637817 129.19105530]
[168.82063293 142.62689209]
[159.76969910 154.59774780]
[148.66462708 164.69223022]
[156.53251648 177.46315002]
[164.40042114 190.23405457]
[172.26831055 203.00497437]
[175.12380981 188.27928162]
[185.98860168 177.93730164]
[200.83712769 175.81091309]
[214.16777039 182.68795776]
[221.04136658 196.02038574]
[218.91111755 210.86834717]
[208.56632996 221.73046875]
[193.83990479 224.58215332]
[180.18765259 218.36634827]
[186.02670288 232.18319702]
[191.86575317 246.00006104]
[197.70480347 259.81692505]
[203.54385376 273.63375854]
[209.38290405 287.45062256]
[225.69416809 293.71191406]
[232.32112122 309.51303101]
[225.62452698 324.91778564]
[231.72557068 338.62097168]
[237.82662964 352.32415771]
[243.92767334 366.02734375]
[250.02873230 379.73052979]
[256.12976074 393.43371582]
[270.53170776 400.50225830]
[273.84387207 416.19967651]
[263.52551270 428.48425293]
[247.49195862 427.93231201]
[238.04278564 414.96725464]
[242.42658997 399.53475952]
[236.32554626 385.83157349]
[230.22448730 372.12838745]
[224.12344360 358.42520142]
[218.02239990 344.72201538]
[211.92134094 331.01885986]
[199.33995056 328.11767578]
[190.60697937 318.34460449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 140]
[5 139]
[6 138]
[7 129]
[8 128]
[9 127]
[10 126]
[25 95]
[26 94]
[27 93]
[28 92]
[29 91]
[30 90]
[32 89]
[33 88]
[34 87]
[36 85]
[37 84]
[42 81]
[43 80]
[45 79]
[46 78]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[146 162]
[147 161]
[148 160]
[149 159]
[150 158]
[151 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
