%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCGACCCGGAAGUUGUACUUGCAACUGCGGCUUUCCUUCUCCCACAAUCCUUCGCGCUCUUCCUUUCCAACUUGGACGCUGCAGAAUGGCUCCCGCAAAGAAGGGUGGCGAGAAGAAAAAGGGCCGUUCUGCCAUCAACGAAGUGGUAACCCGAGAAUACACCAUCAACAUUCACAAGCGCAUCC\
) } def
/len { sequence length } bind def

/coor [
[96.75669861 254.37034607]
[99.08390808 238.90690613]
[110.84051514 228.59593201]
[110.33929443 213.60430908]
[109.83806610 198.61268616]
[100.93290710 185.14302063]
[99.47480011 170.57363892]
[104.46664429 158.41313171]
[113.49369049 151.03359985]
[107.63785553 137.22384644]
[101.78201294 123.41409302]
[87.66668701 122.79331207]
[75.15933228 113.66339874]
[65.66767120 125.27841187]
[56.17601776 136.89341736]
[46.68435669 148.50842285]
[37.19269943 160.12342834]
[27.70104218 171.73844910]
[25.59897423 188.00230408]
[10.36094284 194.06320190]
[-2.33747268 183.68620300]
[0.56676883 167.54626465]
[16.08603287 162.24678040]
[25.57769203 150.63177490]
[35.06935120 139.01676941]
[44.56100845 127.40176392]
[54.05266571 115.78675079]
[63.54432297 104.17174530]
[64.92100525 89.23505402]
[57.71228409 76.08080292]
[50.50355530 62.92655563]
[43.29483032 49.77230453]
[36.08610153 36.61805725]
[28.87737656 23.46380806]
[21.66864967 10.30955887]
[14.45992470 -2.84469008]
[-4.50192356 -12.80016232]
[-3.24341011 -33.39011002]
[-11.10225010 -46.16659546]
[-18.96109009 -58.94308472]
[-26.81992912 -71.71957397]
[-34.67876816 -84.49605560]
[-42.53760910 -97.27254486]
[-50.50292587 -109.98292542]
[-58.57415771 -122.62631226]
[-66.64539337 -135.26969910]
[-74.71662903 -147.91308594]
[-79.38599396 -150.33395386]
[-82.35098267 -153.94860840]
[-83.44239807 -157.90245056]
[-82.85701752 -161.39849854]
[-90.28453827 -174.43045044]
[-97.71206665 -187.46240234]
[-105.13959503 -200.49435425]
[-112.56711578 -213.52632141]
[-120.31893158 -226.36802673]
[-128.39016724 -239.01139832]
[-136.46139526 -251.65478516]
[-135.65751648 -236.67634583]
[-139.68965149 -222.22843933]
[-148.13368225 -209.83093262]
[-160.10131836 -200.78793335]
[-174.33364868 -196.05075073]
[-189.33349609 -196.11769104]
[-203.52297974 -200.98171997]
[-215.40942383 -210.13116455]
[-223.74246216 -222.60354614]
[-227.64549255 -237.08686829]
[-226.70794678 -252.05754089]
[-221.02844238 -265.94073486]
[-211.20443726 -277.27603149]
[-198.26936340 -284.87100220]
[-183.58390808 -287.92672729]
[-168.69290161 -286.12173462]
[-155.16279602 -279.64590454]
[-144.41693115 -269.18054199]
[-148.62104797 -283.57934570]
[-152.82518005 -297.97814941]
[-158.24475098 -305.35638428]
[-156.97708130 -312.65274048]
[-160.94001770 -327.11978149]
[-164.90293884 -341.58682251]
[-179.18659973 -347.95166016]
[-185.99075317 -362.03134155]
[-182.10272217 -377.17788696]
[-169.35827637 -386.23950195]
[-153.77497864 -384.93765259]
[-142.71078491 -373.88696289]
[-141.38986206 -358.30526733]
[-150.43589783 -345.54977417]
[-146.47297668 -331.08273315]
[-142.51004028 -316.61569214]
[-138.42637634 -302.18225098]
[-134.22225952 -287.78347778]
[-130.01814270 -273.38467407]
[-123.81801605 -259.72601318]
[-115.74678040 -247.08264160]
[-107.67554474 -234.43925476]
[-104.30933380 -233.32856750]
[-101.31920624 -230.52087402]
[-99.50202179 -226.21336365]
[-99.53516388 -220.95384216]
[-92.10763550 -207.92189026]
[-84.68011475 -194.88992310]
[-77.25258636 -181.85797119]
[-69.82505798 -168.82601929]
[-62.07324600 -155.98431396]
[-54.00201035 -143.34092712]
[-45.93077469 -130.69754028]
[-37.85953903 -118.05416107]
[-31.59785080 -114.10004425]
[-29.76112175 -105.13138580]
[-21.90228081 -92.35489655]
[-14.04344177 -79.57841492]
[-6.18460178 -66.80192566]
[1.67423797 -54.02543640]
[9.53307819 -41.24894714]
[18.42425919 -40.62019730]
[26.14035797 -35.88890457]
[30.87505531 -28.01369858]
[31.45193100 -18.70486832]
[27.61417389 -10.05341625]
[34.82289886 3.10083246]
[42.03162766 16.25508118]
[49.24035263 29.40933037]
[56.44907761 42.56357956]
[63.65780640 55.71782684]
[70.86653137 68.87207794]
[78.07525635 82.02632904]
[95.36840820 73.67679596]
[112.81597900 78.41306305]
[122.25186157 92.50000000]
[137.25186157 92.50000000]
[152.25186157 92.50000000]
[167.25186157 92.50000000]
[182.25186157 92.50000000]
[197.25186157 92.50000000]
[207.16423035 80.40541840]
[222.54127502 77.56279755]
[236.12243652 85.31433868]
[241.49508667 100.00000000]
[236.12243652 114.68566132]
[222.54127502 122.43720245]
[207.16423035 119.59458160]
[197.25186157 107.50000000]
[182.25186157 107.50000000]
[167.25186157 107.50000000]
[152.25186157 107.50000000]
[137.25186157 107.50000000]
[122.25186157 107.50000000]
[120.62658691 111.22228241]
[118.38418579 114.60880280]
[115.59176636 117.55825806]
[121.44760132 131.36801147]
[127.30344391 145.17774963]
[151.41204834 149.06053162]
[163.76580811 176.80116272]
[173.82759094 187.92593384]
[183.88935852 199.05072021]
[193.95112610 210.17550659]
[208.75740051 206.29829407]
[223.66691589 209.75732422]
[235.25358582 219.75770569]
[240.85485840 234.00146484]
[239.18360901 249.21545410]
[230.62388611 261.90362549]
[217.14265442 269.15032959]
[201.83778381 269.29031372]
[188.22622681 262.29144287]
[179.43583679 249.76197815]
[177.48657227 234.58110046]
[182.82633972 220.23727417]
[172.76457214 209.11248779]
[162.70280457 197.98771667]
[152.64103699 186.86293030]
[145.68820190 189.67506409]
[155.33425903 201.16215515]
[147.39015198 213.88580322]
[132.83438110 210.26231384]
[131.78253174 195.29933167]
[124.82968903 198.11145020]
[125.33091736 213.10307312]
[125.83213806 228.09469604]
[138.25119019 237.59739685]
[141.60604858 252.87086487]
[134.31265259 266.70346069]
[119.81471252 272.56381226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 183]
[4 182]
[5 181]
[9 155]
[10 154]
[11 153]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[38 117]
[39 116]
[40 115]
[41 114]
[42 113]
[43 112]
[44 110]
[45 109]
[46 108]
[47 107]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
[56 98]
[57 97]
[58 96]
[76 95]
[77 94]
[78 93]
[80 92]
[81 91]
[82 90]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
[157 175]
[158 174]
[159 173]
[160 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
