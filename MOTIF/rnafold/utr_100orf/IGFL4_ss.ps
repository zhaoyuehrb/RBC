%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUGACCCAUUUCCACUGCUGCUCCCUCGUCCGCUGCUCUGAAGCCUAACCCAUGGUGCCCAGAAUUUCUGCUGCCAUCUUCAUUUUUGAACUUUUGGGUUCAAACUCAGAAGGAGUCACAGAUCUUAGACUGUGGCUAUGCCAGCCAGCGC\
) } def
/len { sequence length } bind def

/coor [
[-34.62896347 247.39581299]
[-31.00925255 261.99053955]
[-29.90829468 276.98706055]
[-31.35776711 291.95391846]
[-35.31596756 306.46047974]
[-41.66900635 320.08938599]
[-50.23410034 332.44848633]
[-60.76480865 343.18218994]
[-72.95814514 351.98162842]
[-86.46328735 358.59368896]
[-100.89165497 362.82809448]
[-115.82812500 364.56301880]
[-130.84294128 363.74853516]
[-145.50408936 360.40808105]
[-159.38975525 354.63778687]
[-172.10040283 346.60366821]
[-183.27033997 336.53686523]
[-192.57817078 324.72702026]
[-199.75610352 311.51394653]
[-204.59761047 297.27780151]
[-206.96337891 282.42816162]
[-206.78533936 267.39233398]
[-204.06864929 252.60290527]
[-198.89143372 238.48538208]
[-191.40266418 225.44595337]
[-181.81782532 213.85981750]
[-170.41267395 204.06030273]
[-157.51535034 196.32937622]
[-143.49696350 190.88946533]
[-128.76081848 187.89707947]
[-113.73093414 187.43833923]
[-98.83972931 189.52642822]
[-84.51566315 194.10125732]
[-71.17086792 201.03121948]
[-62.10995483 189.07714844]
[-53.04904175 177.12307739]
[-43.98812866 165.16900635]
[-34.92721939 153.21492004]
[-39.81785965 151.79515076]
[-44.22935867 148.19970703]
[-56.79560089 140.00889587]
[-69.36183929 131.81806946]
[-81.92808533 123.62725067]
[-98.94527435 127.55802155]
[-113.27461243 118.17463684]
[-116.35067749 101.66751862]
[-129.08033752 93.73305511]
[-141.80999756 85.79859924]
[-156.13951111 91.75217438]
[-171.22387695 88.11331940]
[-181.26287842 76.28123474]
[-182.39630127 60.80561066]
[-174.18832397 47.63713455]
[-159.79508972 41.83935547]
[-144.75108337 45.64163589]
[-134.84101868 57.58192444]
[-133.87554932 73.06893158]
[-121.14588165 81.00339508]
[-108.41621399 88.93785095]
[-96.36075592 84.29297638]
[-83.64601135 87.50535583]
[-74.98979950 97.61503601]
[-73.73725891 111.06100464]
[-61.17102051 119.25183105]
[-48.60477829 127.44264984]
[-36.03853607 135.63346863]
[-42.72315979 122.20529938]
[-38.67765045 107.76113892]
[-25.99071121 99.75853729]
[-11.21263981 102.32925415]
[-1.97338653 114.14603424]
[-3.04319739 129.10783386]
[-13.87161922 139.49064636]
[0.72275472 136.02592468]
[15.31712818 132.56121826]
[29.91150284 129.09649658]
[40.50743484 118.62866974]
[55.72159576 122.96915436]
[70.31597137 119.50444031]
[84.91034698 116.03972626]
[76.17406464 92.30039978]
[96.36981964 72.17958832]
[102.28515625 58.39522171]
[108.20050049 44.61085510]
[114.11583710 30.82648849]
[111.64519501 14.61451817]
[124.61714935 4.58155966]
[139.68727112 11.04865932]
[141.35270691 27.36301994]
[127.90019989 36.74182510]
[121.98486328 50.52619171]
[116.06952667 64.31056213]
[110.15419006 78.09492493]
[121.13024902 88.31872559]
[134.46067810 81.44123077]
[147.79109192 74.56374359]
[161.12152100 67.68624878]
[174.45193481 60.80875778]
[187.78234863 53.93126678]
[201.11277771 47.05377197]
[214.44319153 40.17628098]
[227.77362061 33.29878998]
[236.17532349 19.21534729]
[252.56669617 19.72023773]
[260.08569336 34.29407120]
[250.99742126 47.94454193]
[234.65110779 46.62921143]
[221.32069397 53.50670242]
[207.99026489 60.38419342]
[194.65985107 67.26168823]
[181.32942200 74.13917542]
[167.99900818 81.01667023]
[154.66857910 87.89416504]
[141.33816528 94.77165222]
[128.00775146 101.64914703]
[121.09255981 113.49306488]
[110.39131927 119.41625214]
[123.57962036 126.56250000]
[136.76791382 133.70874023]
[149.95620728 140.85499573]
[163.14450073 148.00123596]
[176.33280945 155.14749146]
[189.52110291 162.29373169]
[202.70939636 169.43997192]
[216.65063477 162.62663269]
[231.92825317 165.34213257]
[242.66770935 176.54229736]
[244.73945618 191.92044067]
[237.34686279 205.56336975]
[223.33253479 212.22506714]
[208.08526611 209.34400940]
[197.46795654 198.02799988]
[195.56315613 182.62828064]
[182.37484741 175.48202515]
[169.18655396 168.33578491]
[155.99826050 161.18952942]
[142.80996704 154.04328918]
[129.62167358 146.89704895]
[116.43337250 139.75079346]
[103.24507141 132.60455322]
[88.37506104 130.63409424]
[73.78068542 134.09881592]
[59.18631363 137.56353760]
[47.54649353 148.27917480]
[33.37621689 143.69087219]
[18.78184509 147.15557861]
[4.18747091 150.62030029]
[-10.40690231 154.08502197]
[-22.97314453 162.27583313]
[-32.03405762 174.22991943]
[-41.09497070 186.18399048]
[-50.15588379 198.13806152]
[-59.21679306 210.09213257]
[-48.93859482 221.06785583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 153]
[35 152]
[36 151]
[37 150]
[38 149]
[40 66]
[41 65]
[42 64]
[43 63]
[46 59]
[47 58]
[48 57]
[73 148]
[74 147]
[75 146]
[76 145]
[78 143]
[79 142]
[80 141]
[82 93]
[83 92]
[84 91]
[85 90]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
