%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCUCUAGAUUCAUCAGGAUGAGCCUCCAGGCCCCACCUAGACUCCUGGAGCUGGCUGAGCAGAGUCUGCUGAGAGACCGGGCCUUGGCCAUCCCCACCCUGGAGGAGCUGCCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[137.00573730 429.34960938]
[130.09770203 429.34609985]
[123.27382660 428.23806763]
[116.70971680 426.05233765]
[110.57454681 422.84353638]
[105.02670288 418.69259644]
[100.20972443 413.70486450]
[96.24856567 408.00729370]
[93.24636078 401.74533081]
[91.28175354 395.07916260]
[90.40679932 388.17956543]
[90.64563751 381.22360229]
[91.99378204 374.39007568]
[94.41823578 367.85485840]
[97.85826874 361.78643799]
[102.22692871 356.34152222]
[107.41328430 351.66107178]
[113.28518677 347.86654663]
[119.69268799 345.05688477]
[117.36540985 330.23852539]
[115.03812408 315.42016602]
[112.71083832 300.60180664]
[110.38356018 285.78344727]
[106.18675995 279.58905029]
[108.19341278 270.55062866]
[106.25160980 255.67686462]
[104.30980682 240.80308533]
[95.56887817 235.23097229]
[91.30908203 225.53874207]
[93.19151306 214.89581299]
[100.82318878 206.93331909]
[99.65601349 191.97879028]
[98.48883057 177.02427673]
[97.32164764 162.06974792]
[96.15447235 147.11523438]
[94.98728943 132.16070557]
[77.44613647 125.53466034]
[65.78168488 109.78160858]
[64.44526672 89.37304688]
[74.77687073 70.74281311]
[66.02322388 58.56193542]
[57.26957703 46.38106155]
[48.51593399 34.20018768]
[40.87134171 28.97716904]
[39.69800568 21.58753204]
[31.26353455 9.18351269]
[22.82906151 -3.22050667]
[8.92282104 -12.91858864]
[14.39226627 -28.96606445]
[31.32669449 -28.15275002]
[35.23308182 -11.65497780]
[43.66755295 0.74904090]
[52.10202408 13.15305996]
[60.69680786 25.44654274]
[69.45045471 37.62741852]
[78.20409393 49.80829239]
[86.95774078 61.98916626]
[101.80506134 59.85444260]
[106.77237701 45.70079422]
[104.04162598 30.11703300]
[115.55705261 20.67011452]
[120.52436066 6.51646519]
[125.49167633 -7.63718510]
[130.45898438 -21.79083443]
[135.42630005 -35.94448471]
[134.96630859 -52.89219284]
[151.12435913 -58.02579880]
[160.53033447 -43.92033768]
[149.57995605 -30.97717285]
[144.61264038 -16.82352257]
[139.64532471 -2.66987276]
[134.67800903 11.48377705]
[129.71069336 25.63742638]
[132.79675293 40.20882416]
[120.92602539 50.66810608]
[115.95871735 64.82175446]
[127.67559814 74.52468872]
[134.46842957 87.68529510]
[135.52963257 102.05387115]
[131.00263977 115.30722809]
[121.90975952 125.42424011]
[109.94181061 130.99353027]
[111.10899353 145.94805908]
[112.27616882 160.90257263]
[113.44335175 175.85710144]
[114.61053467 190.81161499]
[115.77770996 205.76614380]
[127.97119141 221.71748352]
[119.18358612 238.86128235]
[121.12538910 253.73506165]
[123.06719971 268.60882568]
[125.20191956 283.45617676]
[127.52919769 298.27453613]
[129.85647583 313.09286499]
[132.18376160 327.91122437]
[134.51104736 342.72958374]
[158.74809265 350.76681519]
[174.26513672 370.92639160]
[175.82022095 396.22344971]
[162.98585510 417.96810913]
[171.09545898 430.58691406]
[179.20507812 443.20571899]
[187.31469727 455.82452393]
[195.42430115 468.44332886]
[203.53392029 481.06210327]
[218.96093750 480.95928955]
[231.98233032 489.23254395]
[238.44300842 503.24194336]
[236.28138733 518.51715088]
[226.18725586 530.18383789]
[211.38159180 534.51928711]
[196.58883667 530.14001465]
[186.52931213 518.44342041]
[184.41296387 503.16192627]
[190.91511536 489.17172241]
[182.80549622 476.55291748]
[174.69589233 463.93411255]
[166.58627319 451.31530762]
[158.47666931 438.69653320]
[150.36705017 426.07772827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[25 91]
[26 90]
[27 89]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[40 57]
[41 56]
[42 55]
[43 54]
[45 53]
[46 52]
[47 51]
[58 76]
[59 75]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
