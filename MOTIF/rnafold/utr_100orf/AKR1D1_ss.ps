%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUUUGAUGGAAUAGGCCCUAGGACACCUUUCUAAAAAGACUCCCUGUGGUGUUCAGAAUCACUCCUACAGUCAGGUUCUCCACAAUGGAUCUCAGUGCUGCAAGUCACCGCAUACCUCUAAGUGAUGGAAACAGCAUUCCCAUCAUCGGACUUGGUACCUACUCAGAACCUAAAUCGACCCCUA\
) } def
/len { sequence length } bind def

/coor [
[90.06227875 230.16166687]
[89.44944000 215.17419434]
[94.90063477 201.19976807]
[105.50009918 190.58602905]
[119.46717072 185.11602783]
[134.45545959 185.70867920]
[147.94657898 192.26411438]
[140.08773804 179.48762512]
[132.22889709 166.71113586]
[124.37005615 153.93464661]
[116.51121521 141.15815735]
[108.65238190 128.38166809]
[97.31608582 130.70448303]
[85.51219940 128.50096130]
[75.04210663 121.77574921]
[67.62497711 111.24556732]
[64.61931610 98.27267456]
[49.62769318 98.77389526]
[34.63607025 99.27512360]
[23.87320137 110.53560638]
[8.66242409 110.83035278]
[-2.00639701 100.50021362]
[-16.99802017 101.00143433]
[-31.98964310 101.50266266]
[-46.98126602 102.00388336]
[-61.97288895 102.50511169]
[-67.91506195 115.18013000]
[-78.68999481 124.01287079]
[-92.15586090 127.32137299]
[-105.66755676 124.51451874]
[-116.59622192 116.19672394]
[-122.84072876 104.03887177]
[-137.83863831 104.28952026]
[-152.83654785 104.54016876]
[-167.83444214 104.79081726]
[-174.94940186 113.05107117]
[-185.22758484 115.96118164]
[-195.19778442 112.78995514]
[-201.62985229 104.81883240]
[-216.62776184 104.56818390]
[-230.55528259 112.07380676]
[-243.15148926 104.12491608]
[-258.14941406 103.87426758]
[-273.14730835 103.62361908]
[-284.33212280 114.78942108]
[-300.13613892 114.69242096]
[-311.18304443 103.39016724]
[-310.91897583 87.58808136]
[-299.50054932 76.66127014]
[-283.70214844 77.09240723]
[-272.89666748 88.62571716]
[-257.89874268 88.87636566]
[-242.90084839 89.12701416]
[-230.04606628 81.60346222]
[-216.37710571 89.57028198]
[-201.37919617 89.82093048]
[-185.22758484 79.21116638]
[-168.08509827 89.79291534]
[-153.08718872 89.54226685]
[-138.08927917 89.29161835]
[-123.09137726 89.04096985]
[-115.60173798 74.73284912]
[-101.84224701 66.09960938]
[-85.51320648 65.57459259]
[-71.06250763 73.39542389]
[-62.47411728 87.51348877]
[-47.48249054 87.01226044]
[-32.49086761 86.51103973]
[-17.49924469 86.00981140]
[-2.50762153 85.50859070]
[7.44739723 74.48891449]
[22.64389420 73.76704407]
[34.13484573 84.28350067]
[49.12646866 83.78227234]
[64.11808777 83.28105164]
[72.91458130 71.13108063]
[68.71045685 56.73228073]
[64.50634003 42.33348083]
[60.30221939 27.93468475]
[56.09810257 13.53588581]
[51.89398193 -0.86291164]
[37.24235535 -5.97264910]
[28.42004013 -18.73769569]
[28.81940269 -34.24962997]
[38.28687668 -46.54380035]
[53.18202591 -50.89284134]
[67.77735901 -45.62446213]
[76.46067810 -32.76446152]
[75.89306641 -17.25777245]
[66.29277802 -5.06703091]
[70.49690247 9.33176708]
[74.70101929 23.73056412]
[78.90513611 38.12936401]
[83.10926056 52.52816010]
[87.31337738 66.92695618]
[103.47109985 67.63858795]
[116.26025391 75.18090820]
[127.38503265 65.11914062]
[138.50981140 55.05736923]
[149.63459778 44.99559784]
[160.75938416 34.93382645]
[171.88415527 24.87205696]
[183.00894165 14.81028652]
[180.52970886 -3.13448048]
[189.22882080 -18.84508514]
[205.46742249 -26.13833237]
[222.68309021 -22.27319717]
[233.46543884 -32.70108414]
[244.24780273 -43.12897110]
[255.03015137 -53.55685806]
[265.81250000 -63.98474503]
[260.55364990 -78.27685547]
[261.56906128 -93.47187805]
[268.68280029 -106.93719482]
[280.66238403 -116.33984375]
[295.43225098 -120.05077362]
[310.43344116 -117.42703247]
[323.06692505 -108.92320251]
[331.14382935 -96.01261902]
[333.26486206 -80.93212891]
[329.06246948 -66.29450989]
[319.26477051 -54.63582611]
[305.56927490 -47.97600555]
[290.34878540 -47.46890640]
[276.24038696 -53.20238876]
[265.45803833 -42.77450180]
[254.67568970 -32.34661484]
[243.89332581 -21.91872787]
[233.11097717 -11.49084187]
[236.57633972 0.16717944]
[234.73765564 12.26264191]
[227.88401794 22.48427963]
[217.26872253 28.85244751]
[204.88044739 30.10240746]
[193.07070923 25.93506813]
[181.94593811 35.99683762]
[170.82115173 46.05860901]
[159.69636536 56.12038040]
[148.57157898 66.18215179]
[137.44680786 76.24391937]
[126.32202148 86.30569458]
[129.37243652 104.20034790]
[121.42886353 120.52283478]
[129.28770447 133.29931641]
[137.14654541 146.07580566]
[145.00538635 158.85229492]
[152.86422729 171.62878418]
[160.72306824 184.40527344]
[169.92062378 196.25451660]
[180.34851074 207.03688049]
[190.77639771 217.81922913]
[201.20428467 228.60159302]
[216.06710815 224.98999023]
[230.64587402 229.27442932]
[241.05351257 240.20822144]
[244.56742859 254.78588867]
[240.34126282 269.06890869]
[250.76914978 279.85128784]
[261.19705200 290.63363647]
[275.86547852 286.26385498]
[290.88226318 289.22271729]
[302.79663086 298.83038330]
[308.87072754 312.87899780]
[307.70877075 328.14035034]
[299.57781982 341.10745239]
[286.34625244 348.80056763]
[271.05459595 349.45190430]
[257.21679688 342.91177368]
[248.01263428 330.68301392]
[245.55718994 315.57577515]
[250.41468811 301.06152344]
[239.98680115 290.27917480]
[229.55891418 279.49679565]
[215.14262390 283.24334717]
[200.69052124 279.24426270]
[190.11061096 268.47711182]
[186.31570435 253.76332092]
[190.42193604 239.02947998]
[179.99404907 228.24711609]
[169.56616211 217.46476746]
[159.13827515 206.68240356]
[162.14247131 221.37849426]
[158.99865723 236.04533386]
[150.23498535 248.21900940]
[137.32369995 255.85437012]
[122.43383789 257.66873169]
[108.06681061 253.35731506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 148]
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[17 75]
[18 74]
[19 73]
[22 70]
[23 69]
[24 68]
[25 67]
[26 66]
[32 61]
[33 60]
[34 59]
[35 58]
[39 56]
[40 55]
[42 53]
[43 52]
[44 51]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[97 141]
[98 140]
[99 139]
[100 138]
[101 137]
[102 136]
[103 135]
[107 129]
[108 128]
[109 127]
[110 126]
[111 125]
[149 181]
[150 180]
[151 179]
[152 178]
[157 173]
[158 172]
[159 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
