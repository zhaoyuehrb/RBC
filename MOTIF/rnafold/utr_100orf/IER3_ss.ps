%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACUUGGCCUUACACUCCGCUCGGCUCACCAUGUGUCACUCUCGCAGCUGCCACCCGACCAUGACCAUCCUGCAGGCCCCGACCCCGGCCCCCUCCACCAUCCCGGGACCCCGGCGGGGCUCCGGUCCUG\
) } def
/len { sequence length } bind def

/coor [
[181.12452698 177.83988953]
[174.23045349 175.88815308]
[167.97402954 172.35852051]
[162.71154785 167.44203186]
[158.74502563 161.40901184]
[156.30488586 154.59416199]
[155.53659058 147.37805176]
[156.49195862 140.16575623]
[143.38508606 132.87124634]
[130.27821350 125.57672882]
[117.17134094 118.28221893]
[104.06446838 110.98770142]
[108.37678528 125.35446930]
[103.59302521 139.57119751]
[91.47277832 148.40861511]
[76.47421265 148.61604309]
[64.11420441 140.11720276]
[58.93910980 126.03820038]
[62.85245895 111.55767059]
[74.41482544 102.00195312]
[89.37203979 100.88561249]
[77.86872864 91.25888824]
[64.91300201 91.60927582]
[55.51893997 83.27478027]
[54.39890289 71.17022705]
[43.12617111 61.27449417]
[29.08176994 67.14953613]
[13.94097614 66.34746552]
[0.70404094 59.08084488]
[-8.02934074 46.83792877]
[-10.57055664 32.07812881]
[-6.46835470 17.73806572]
[-17.74108315 7.84233046]
[-29.01381302 -2.05340528]
[-40.28654099 -11.94914150]
[-48.88776016 -15.30364609]
[-51.70510101 -22.21418953]
[-62.74095917 -32.37341309]
[-73.77681732 -42.53263855]
[-86.75288391 -36.80624771]
[-100.88904572 -36.47705078]
[-114.03657532 -41.56187057]
[-124.20970917 -51.25709534]
[-129.88558960 -64.06552124]
[-130.23211670 -78.02746582]
[-125.22986603 -91.02061462]
[-136.02268982 -101.43766022]
[-152.05786133 -104.87358856]
[-156.84167480 -120.55947876]
[-145.45297241 -132.35902405]
[-129.60745239 -128.13388062]
[-125.60565186 -112.23049164]
[-114.81282043 -101.81344604]
[-99.98033142 -107.63960266]
[-84.03224945 -106.43246460]
[-70.14537048 -98.38191223]
[-61.10787964 -85.04604340]
[-58.75958633 -69.04982758]
[-63.61759567 -53.56849670]
[-52.58173370 -43.40927124]
[-41.54587555 -33.25004959]
[-30.39080429 -23.22187042]
[-19.11807632 -13.32613373]
[-7.84534740 -3.43039823]
[3.42738128 6.46533728]
[17.11515617 0.53994501]
[32.07978821 1.14760852]
[45.35094452 8.22131920]
[54.27117538 20.40531158]
[57.02798462 35.31460190]
[53.02190781 50.00176620]
[64.29463959 59.89749908]
[81.63064575 62.34703445]
[87.49545288 79.75557709]
[98.99876404 89.38230896]
[111.35898590 97.88082886]
[124.46585846 105.17534637]
[137.57272339 112.46986389]
[150.67959595 119.76437378]
[163.78646851 127.05889130]
[185.94888306 117.69466400]
[207.79450989 127.17869568]
[215.91802979 149.30613708]
[230.26890564 153.67100525]
[244.61979675 158.03585815]
[258.97067261 162.40072632]
[272.79223633 155.21726990]
[287.28390503 159.84829712]
[294.04705811 173.06932068]
[308.39794922 177.43417358]
[322.74884033 181.79904175]
[337.09973145 186.16390991]
[351.45062256 190.52877808]
[365.80151367 194.89363098]
[358.13183594 182.00270081]
[357.60855103 167.01182556]
[364.36065674 153.61747742]
[376.72326660 145.12239075]
[391.64797974 143.62132263]
[405.45465088 149.48437500]
[414.73886108 161.26585388]
[417.21133423 176.06068420]
[412.26235962 190.22076416]
[401.11227417 200.25450134]
[386.51171875 203.68780518]
[399.61859131 210.98231506]
[412.72543335 218.27684021]
[425.83230591 225.57135010]
[442.21197510 224.77223206]
[450.86520386 238.70256042]
[442.89028931 253.03199768]
[426.49114990 253.01965332]
[418.53781128 238.67822266]
[405.43093872 231.38369751]
[392.32406616 224.08918762]
[379.21719360 216.79467773]
[369.29382324 217.21267700]
[361.43664551 209.24452209]
[347.08575439 204.87965393]
[332.73486328 200.51480103]
[318.38397217 196.14993286]
[304.03308105 191.78506470]
[289.68218994 187.42019653]
[276.70297241 194.63652039]
[262.08694458 190.41435242]
[254.60581970 176.75161743]
[240.25492859 172.38674927]
[225.90405273 168.02188110]
[211.55316162 163.65702820]
[207.22862244 169.25411987]
[201.69308472 173.68664551]
[195.25262451 176.69845581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 80]
[9 79]
[10 78]
[11 77]
[12 76]
[21 75]
[22 74]
[25 72]
[26 71]
[32 65]
[33 64]
[34 63]
[35 62]
[37 61]
[38 60]
[39 59]
[46 53]
[47 52]
[83 129]
[84 128]
[85 127]
[86 126]
[89 123]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
