%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCAGCAGUCCUGAAGGUUGAUGGAGGGCCAUGCUAUUCAAACAGCAGGCGUGGCUGAGACAGAAGCUCCUGGUGCUGGGAAGCCUUGCCGUUGGGAGUCUCCUGUAUCUAGUCGCCAGAGUUGGGAGCU\
) } def
/len { sequence length } bind def

/coor [
[117.49646759 237.05130005]
[117.14218903 222.05548096]
[116.78790283 207.05967712]
[106.84872437 192.64613342]
[115.68447876 176.54077148]
[114.97611237 161.55749512]
[114.26774597 146.57423401]
[113.55937958 131.59097290]
[106.84101868 128.25726318]
[94.34852600 136.56013489]
[93.40428925 121.58985138]
[86.68592834 118.25614929]
[74.32570648 126.75467682]
[61.96548843 135.25320435]
[64.35063934 150.32879639]
[59.95029831 164.94386292]
[49.63816833 176.19653320]
[35.46171951 181.85260010]
[20.23570251 180.78904724]
[6.98325157 173.21704102]
[-1.66434908 160.63999939]
[-3.99011230 145.55513000]
[0.46774429 130.95751953]
[10.82411003 119.74553680]
[25.02272034 114.14533997]
[40.24443054 115.26884460]
[53.46696091 122.89298248]
[65.82717896 114.39445496]
[78.18740082 105.89592743]
[76.41994476 91.00041962]
[62.41411972 85.63041687]
[48.40829849 80.26040649]
[39.17751312 80.09844971]
[34.13757324 74.59462738]
[20.26249123 68.89531708]
[6.38741016 63.19601059]
[-7.48767090 57.49670029]
[-20.62295723 65.75768280]
[-36.10302353 64.68664551]
[-47.97547150 54.69541931]
[-51.67510223 39.62583542]
[-45.77932739 25.27245522]
[-32.55519867 17.15444946]
[-17.08765984 18.39335442]
[-5.32429695 28.51278687]
[-1.78836250 43.62162018]
[12.08671856 49.32092667]
[25.96179962 55.02023697]
[39.83687973 60.71954346]
[53.77830505 66.25458527]
[67.78412628 71.62459564]
[81.78994751 76.99459839]
[96.61349487 74.70059204]
[108.34096527 65.34824371]
[120.06843567 55.99589539]
[131.79591370 46.64354706]
[143.52337646 37.29120255]
[155.25085449 27.93885422]
[166.86705017 18.44865608]
[178.37036133 8.82192898]
[183.98788452 -5.96840763]
[198.71392822 -8.20290184]
[210.21723938 -17.82962799]
[221.72055054 -27.45635605]
[233.22386169 -37.08308411]
[238.84136963 -51.87342072]
[253.56741333 -54.10791397]
[265.07070923 -63.73464203]
[276.45953369 -73.49655151]
[287.73226929 -83.39228821]
[299.00500488 -93.28802490]
[310.27770996 -103.18376160]
[321.55044556 -113.07949829]
[332.46554565 -123.36834717]
[343.00933838 -134.03739929]
[353.55313110 -144.70645142]
[363.71234131 -155.74230957]
[373.47427368 -167.13111877]
[383.23617554 -178.51992798]
[385.71975708 -194.72993469]
[401.09597778 -200.43115234]
[413.54708862 -189.75868225]
[410.26446533 -173.69143677]
[394.62500000 -168.75802612]
[384.86306763 -157.36920166]
[375.10116577 -145.98039246]
[375.04541016 -142.36434937]
[373.17437744 -138.60455322]
[369.44488525 -135.58256531]
[364.22216797 -134.16265869]
[353.67840576 -123.49361420]
[343.13461304 -112.82456207]
[342.82296753 -109.22154236]
[340.69042969 -105.60366058]
[336.75634766 -102.85330963]
[331.44619751 -101.80677032]
[320.17346191 -91.91103363]
[308.90072632 -82.01529694]
[297.62799072 -72.11956024]
[286.35528564 -62.22382355]
[283.37548828 -55.38174820]
[274.69744873 -52.23133087]
[263.19415283 -42.60460281]
[258.39941406 -28.50283432]
[242.85058594 -25.57977295]
[231.34727478 -15.95304585]
[219.84396362 -6.32631922]
[208.34065247 3.30040765]
[203.54592896 17.40217590]
[187.99710083 20.32523918]
[176.49378967 29.95196533]
[173.35324097 36.72175217]
[164.60321045 39.66632843]
[152.87573242 49.01867294]
[141.14825439 58.37102127]
[129.42079163 67.72336578]
[117.69331360 77.07571411]
[105.96584320 86.42806244]
[114.68782043 86.02965546]
[124.03047180 90.84255219]
[131.14549255 101.00302124]
[133.29785156 115.20963287]
[128.54264832 130.88259888]
[129.25100708 145.86587524]
[129.95938110 160.84913635]
[130.66773987 175.83239746]
[139.70021057 185.12692261]
[139.93074036 197.68316650]
[131.78372192 206.70538330]
[132.13800049 221.70120239]
[132.49227905 236.69702148]
[135.13735962 255.89736938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[5 126]
[6 125]
[7 124]
[8 123]
[12 29]
[13 28]
[14 27]
[30 52]
[31 51]
[32 50]
[34 49]
[35 48]
[36 47]
[37 46]
[53 118]
[54 117]
[55 116]
[56 115]
[57 114]
[58 113]
[59 111]
[60 110]
[62 108]
[63 107]
[64 106]
[65 105]
[67 103]
[68 102]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[74 92]
[75 91]
[76 90]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
