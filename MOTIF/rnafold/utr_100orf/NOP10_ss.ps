%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:47:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAUUGACGAACACGUGACGCGGUCGGGCGGACCACUGCAGACUGAGCGGUGGACCGAAUUGGGACCGCUGGCUUAUAAGCGAUCAUGUUUCUCCAGUAUUACCUCAACGAGCAGGGAGAUCGAGUCUAUACGCUGAAGAAAUUUGACCCGAUGGGACAACAGACCUGCUCAGCCCAUCCUGCUC\
) } def
/len { sequence length } bind def

/coor [
[387.26715088 171.73747253]
[372.70074463 168.15705872]
[358.13433838 164.57662964]
[343.53863525 161.11738586]
[328.91473389 157.77957153]
[314.26358032 154.56341553]
[299.58621216 151.46913147]
[284.90881348 148.37484741]
[270.23144531 145.28056335]
[257.93237305 153.60333252]
[243.00334167 150.67436218]
[234.35705566 137.71752930]
[219.67967224 134.62326050]
[205.00230408 131.52897644]
[197.79510498 133.22874451]
[190.10762024 128.25935364]
[175.48370361 124.92153931]
[160.85977173 121.58372498]
[146.23585510 118.24591064]
[131.61193848 114.90809631]
[116.98802185 111.57028198]
[97.21830750 127.47444153]
[68.00917053 113.37915802]
[53.00968552 113.25449371]
[38.01020432 113.12982941]
[23.01072311 113.00516510]
[8.01124001 112.88050079]
[-6.98824167 112.75583649]
[-17.67897606 128.60749817]
[-35.61465454 134.78596497]
[-53.51498413 128.97393799]
[-64.22824860 113.68304443]
[-79.21530151 114.30619049]
[-94.20234680 114.92934418]
[-107.66917419 123.23327637]
[-120.70689392 116.03138733]
[-135.69393921 116.65454102]
[-150.68099976 117.27769470]
[-165.66804504 117.90084839]
[-180.65509033 118.52400208]
[-195.64215088 119.14714813]
[-210.62919617 119.77030182]
[-220.03056335 132.26623535]
[-235.27622986 135.74522400]
[-249.16767883 128.56457520]
[-255.14579773 114.11479950]
[-250.38787842 99.21861267]
[-237.14047241 90.90956116]
[-221.65861511 93.11090851]
[-211.25234985 104.78325653]
[-196.26528931 104.16010284]
[-181.27824402 103.53694916]
[-166.29119873 102.91379547]
[-151.30413818 102.29064178]
[-136.31709290 101.66748810]
[-121.33004761 101.04434204]
[-108.93519592 92.78498077]
[-94.82550049 99.94229889]
[-79.83844757 99.31914520]
[-64.85140228 98.69599152]
[-60.52599716 88.37844849]
[-52.62039566 80.39006042]
[-42.25413132 75.91669464]
[-30.91579056 75.64255524]
[-20.24925232 79.64582825]
[-11.81536961 87.38172913]
[-6.86357641 97.75634766]
[8.13590527 97.88101959]
[23.13538742 98.00568390]
[38.13486862 98.13034821]
[53.13434982 98.25501251]
[68.13383484 98.37967682]
[71.99127197 91.94771576]
[79.70615387 79.08378601]
[83.56359863 72.65182495]
[76.38978577 59.47850037]
[69.21598053 46.30517578]
[54.94821548 38.22044373]
[55.08650589 21.82187843]
[69.48858643 13.97892094]
[83.33883667 22.75973320]
[82.38930511 39.13136673]
[89.56311035 52.30469131]
[96.73692322 65.47801208]
[111.97499847 72.52795410]
[120.04221344 84.62339020]
[120.32583618 96.94636536]
[134.94975281 100.28417969]
[149.57366943 103.62199402]
[164.19758606 106.95980835]
[178.82151794 110.29762268]
[193.44543457 113.63542938]
[208.09658813 116.85159302]
[222.77395630 119.94587708]
[237.45133972 123.04016113]
[250.59240723 114.67652893]
[265.43325806 118.02365875]
[273.32571411 130.60319519]
[288.00311279 133.69747925]
[302.68048096 136.79176331]
[317.35784912 139.88603210]
[326.41995239 138.59344482]
[332.25253296 143.15565491]
[346.87646484 146.49346924]
[355.95880127 145.35166931]
[361.71475220 150.01020813]
[376.28115845 153.59063721]
[390.84759521 157.17105103]
[398.21853638 151.23703003]
[407.36047363 149.39843750]
[416.18762207 151.94522095]
[422.74536133 158.18130493]
[425.64282227 166.60884094]
[440.01266479 170.91088867]
[454.38250732 175.21293640]
[468.75234985 179.51498413]
[483.12219238 183.81703186]
[497.49203491 188.11907959]
[511.86187744 192.42112732]
[530.10223389 174.75317383]
[559.89257812 178.48620605]
[572.88293457 170.98620605]
[585.87335205 163.48620605]
[598.86370850 155.98620605]
[609.55761719 142.83035278]
[625.15972900 149.46444702]
[623.10400391 166.29330444]
[606.36370850 168.97657776]
[593.37335205 176.47657776]
[580.38293457 183.97657776]
[567.39257812 191.47657776]
[567.51721191 198.97554016]
[582.51513672 198.72647095]
[582.76397705 213.72441101]
[567.76654053 213.97348022]
[567.89123535 221.47244263]
[581.12371826 228.53651428]
[594.35620117 235.60060120]
[607.58868408 242.66467285]
[620.82116699 249.72875977]
[634.16925049 256.57189941]
[647.62921143 263.19226074]
[661.26300049 253.85331726]
[677.65179443 252.66546631]
[692.32122803 259.85821533]
[701.31414795 273.38589478]
[702.25787354 289.50857544]
[715.82598877 295.90426636]
[729.39416504 302.29998779]
[745.17608643 301.18539429]
[753.38940430 313.61077881]
[766.95758057 320.00650024]
[780.52569580 326.40219116]
[797.43096924 327.68652344]
[800.87664795 344.28662109]
[785.87915039 352.19305420]
[774.13000488 339.97036743]
[760.56182861 333.57464600]
[746.99371338 327.17892456]
[732.18231201 328.75100708]
[722.99847412 315.86813354]
[709.43029785 309.47244263]
[695.86212158 303.07672119]
[685.17108154 311.59109497]
[671.78936768 314.67935181]
[658.31909180 311.68243408]
[647.40484619 303.13021851]
[641.21453857 290.64898682]
[641.00885010 276.65225220]
[627.54888916 270.03189087]
[622.80310059 270.70355225]
[617.58715820 268.38778687]
[613.75708008 262.96124268]
[600.52459717 255.89717102]
[587.29211426 248.83308411]
[574.05963135 241.76901245]
[560.82714844 234.70492554]
[544.85955811 241.44943237]
[528.60986328 240.20465088]
[515.62780762 232.17964172]
[508.32977295 219.96528625]
[507.55984497 206.79096985]
[493.19000244 202.48892212]
[478.82015991 198.18687439]
[464.45028687 193.88482666]
[450.08044434 189.58277893]
[435.71060181 185.28073120]
[421.34075928 180.97868347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 104]
[5 103]
[6 101]
[7 100]
[8 99]
[9 98]
[12 95]
[13 94]
[14 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[32 60]
[33 59]
[34 58]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[75 84]
[76 83]
[77 82]
[113 188]
[114 187]
[115 186]
[116 185]
[117 184]
[118 183]
[119 182]
[121 131]
[122 130]
[123 129]
[124 128]
[136 177]
[137 176]
[138 175]
[139 174]
[140 173]
[141 170]
[142 169]
[147 163]
[148 162]
[149 161]
[151 159]
[152 158]
[153 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
