%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:19:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCAGCUCAAUCCCCGAGGAAUGUCAGUCCAAUAUUCGCUCAGUCCUCAAUUCAUGCUGCUAUCCAACAUUACUCAGUUUAGCCCCAUAUUCUAUCUCACCAGCUUUCCUGGAUUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[102.04331207 262.39169312]
[87.56298065 267.21691895]
[72.42415619 265.27301025]
[59.63266754 256.94592285]
[51.72826385 243.88899231]
[50.28037643 228.69470215]
[55.57648087 214.37988281]
[66.56503296 203.78675842]
[81.06425476 199.01858521]
[82.97465515 184.14073181]
[84.88505554 169.26287842]
[86.79546356 154.38504028]
[88.70586395 139.50718689]
[90.61626434 124.62934113]
[92.52666473 109.75149536]
[88.39974976 109.91063690]
[83.97766876 108.69341278]
[79.66830444 106.00631714]
[64.87454987 103.52745819]
[50.08079147 101.04859161]
[35.28703690 98.56973267]
[20.49327850 96.09086609]
[5.60420561 101.44120026]
[-5.66942501 91.70700836]
[-20.46318245 89.22814178]
[-26.96034241 91.23722839]
[-32.60990906 89.79598236]
[-35.94095230 86.22640991]
[-50.58883667 82.99539948]
[-65.23672485 79.76439667]
[-76.10439301 90.71415710]
[-91.17166901 94.02787018]
[-105.63064575 88.64813232]
[-114.86750793 76.29160309]
[-115.93481445 60.90119934]
[-108.49198914 47.38795090]
[-94.91400909 40.06388474]
[-79.53356171 41.26607895]
[-67.25848389 50.61092377]
[-62.00571823 65.11650848]
[-47.35783005 68.34751129]
[-32.70994186 71.57852173]
[-17.98431969 74.43438721]
[-3.19056201 76.91325378]
[10.64036274 71.38561249]
[22.97214127 81.29711151]
[37.76589966 83.77597046]
[52.55965424 86.25483704]
[67.35340881 88.73369598]
[82.14717102 91.21256256]
[70.26587677 82.05642700]
[69.01223755 67.10890198]
[79.20244598 56.10165024]
[94.20211792 56.20098877]
[104.24564362 67.34223938]
[102.79436493 82.27146149]
[111.10800171 69.78613281]
[119.42163086 57.30079651]
[116.52394104 41.99586105]
[125.13300323 29.45238876]
[139.74177551 26.78420067]
[148.05541992 14.29887009]
[156.36904907 1.81353843]
[164.68267822 -10.67179298]
[165.01617432 -16.11683273]
[167.24691772 -20.40681267]
[170.58546448 -22.99962616]
[174.14147949 -23.76087570]
[183.38645935 -35.57316971]
[192.63143921 -47.38546753]
[188.23773193 -62.26750183]
[193.46231079 -76.87857819]
[206.29620361 -85.60043335]
[221.80451965 -85.07933807]
[234.02400208 -75.51566315]
[238.25601196 -60.58684158]
[232.87324524 -46.03330231]
[219.94549561 -37.45118332]
[204.44372559 -38.14048386]
[195.19874573 -26.32818794]
[185.95376587 -14.51589394]
[177.16801453 -2.35815978]
[168.85438538 10.12717152]
[160.54074097 22.61250305]
[152.22711182 35.09783554]
[155.39889526 49.60560226]
[147.14555359 62.38593674]
[131.90696716 65.61443329]
[123.59333038 78.09976196]
[115.27969360 90.58509064]
[124.69705200 78.90976715]
[136.76745605 70.00440216]
[150.70169067 64.45128632]
[165.58868408 62.61348724]
[180.45506287 64.61117554]
[194.32881165 70.31372833]
[206.30279541 79.34829712]
[215.59414673 91.12416840]
[221.59532166 104.87138367]
[223.91394043 119.69109344]
[222.39843750 134.61433411]
[217.14787292 148.66537476]
[208.50555420 160.92549133]
[197.03656006 170.59306335]
[183.49076843 177.03601074]
[168.75386047 179.83305359]
[153.78938293 178.80130005]
[139.57579041 174.00823975]
[127.04239655 165.76722717]
[117.00869751 154.61712646]
[110.13073730 141.28694153]
[106.85822296 126.64827728]
[107.40451813 111.66189575]
[105.49411011 126.53974152]
[103.58370972 141.41758728]
[101.67330933 156.29544067]
[99.76290894 171.17329407]
[97.85250092 186.05113220]
[95.94210052 200.92898560]
[108.76628876 209.20564270]
[116.72204590 222.23132324]
[118.22975922 237.41979980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 119]
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[24 44]
[25 43]
[28 42]
[29 41]
[30 40]
[56 90]
[57 89]
[58 88]
[61 85]
[62 84]
[63 83]
[64 82]
[68 81]
[69 80]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
