%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGUUGAAUGUUUAUUGUUGUUUCUUUCAAAUUUCAGACAUUCAAACGAUGAAGAUCAACCAGACAAUCCUGAAGGAAUUCAUUCUUGUUGGCUUUU\
) } def
/len { sequence length } bind def

/coor [
[89.71480560 106.42050171]
[74.80361176 104.79071808]
[60.24446487 110.98279572]
[48.43321609 101.90845490]
[33.52201843 100.27867126]
[24.47008514 102.48211670]
[18.17502213 98.35929108]
[3.32172251 96.26656342]
[-11.53157616 94.17383575]
[-26.38487434 92.08110046]
[-41.23817444 89.98837280]
[-56.09147263 87.89564514]
[-70.94477081 85.80290985]
[-85.79807281 83.71018219]
[-100.65136719 81.61745453]
[-115.50466919 79.52472687]
[-125.48033142 92.60498047]
[-140.58488464 98.88188171]
[-156.70796204 96.74861145]
[-169.51260376 86.87338257]
[-175.60186768 71.99414062]
[-190.51306152 70.36435699]
[-205.42425537 68.73457336]
[-216.59205627 79.68054962]
[-232.18692017 80.83559418]
[-244.84544373 71.65431976]
[-248.59065247 56.47185516]
[-241.65419006 42.45688248]
[-227.31121826 36.22685623]
[-212.33406067 40.72339630]
[-203.79447937 53.82337570]
[-188.88328552 55.45315933]
[-173.97207642 57.08293915]
[-166.57728577 45.48914337]
[-154.83224487 38.20993423]
[-141.02671814 36.73226547]
[-127.88178253 41.40536118]
[-118.01340485 51.36039734]
[-113.41193390 64.67142487]
[-98.55863953 66.76415253]
[-83.70533752 68.85688782]
[-68.85204315 70.94961548]
[-53.99874115 73.04234314]
[-39.14544296 75.13507843]
[-24.29214478 77.22780609]
[-9.43884563 79.32053375]
[5.41445255 81.41326141]
[20.26775169 83.50599670]
[35.15179825 85.36747742]
[50.06299591 86.99726105]
[63.55559540 80.68861389]
[76.43339539 89.87952423]
[91.34458923 91.50930786]
[106.29926300 92.67456055]
[121.28293610 93.37416840]
[136.26661682 94.07377625]
[151.25028992 94.77337646]
[160.14772034 92.01144409]
[166.68692017 95.73493195]
[181.64160156 96.90018463]
[196.59626770 98.06544495]
[211.55093384 99.23070526]
[226.50561523 100.39595795]
[240.86514282 93.75408936]
[252.95289612 102.45671844]
[267.90756226 103.62197113]
[282.86224365 104.78723145]
[300.45050049 95.18322754]
[316.07806396 106.39002991]
[331.07626343 106.62330627]
[346.07443237 106.85658264]
[361.07443237 106.85658264]
[376.07263184 106.62330627]
[389.86001587 97.74411011]
[404.31756592 105.48432922]
[404.57260132 121.88150024]
[390.36276245 130.06761169]
[376.30590820 121.62149048]
[361.30770874 121.85476685]
[354.54968262 125.16451263]
[345.84115601 121.85476685]
[330.84298706 121.62149048]
[315.84478760 121.38821411]
[309.01309204 129.27516174]
[298.72848511 132.06462097]
[288.42770386 128.56816101]
[281.69696045 119.74189758]
[266.74230957 118.57664490]
[251.78762817 117.41138458]
[238.49775696 124.13660431]
[225.34034729 115.35063171]
[210.38568115 114.18537140]
[195.43101501 113.02011871]
[180.47633362 111.85485840]
[165.52166748 110.68959808]
[150.55068970 109.75705719]
[135.56700134 109.05744934]
[120.58333588 108.35784149]
[105.59965515 107.65824127]
[100.86277008 110.33032227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[4 50]
[5 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[21 33]
[22 32]
[23 31]
[54 99]
[55 98]
[56 97]
[57 96]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[65 89]
[66 88]
[67 87]
[69 83]
[70 82]
[71 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
