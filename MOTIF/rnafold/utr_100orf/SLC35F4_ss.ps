%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGGACGGGCGGGCGCGCGGUACGGACACCUGCAGCCCUGCGGACGCUGUCAACACCGCCUUCCUGGCGGCGGGGACCCCCCGGGGAGAAAAGUACCU\
) } def
/len { sequence length } bind def

/coor [
[74.90417480 139.63504028]
[62.13624954 124.14668274]
[57.45284653 105.52159119]
[42.46917343 104.82199097]
[27.48549461 104.12238312]
[15.85636044 114.48582458]
[0.67074794 113.56287384]
[-9.13754559 102.41240692]
[-24.12122154 101.71279907]
[-33.05396652 111.93439484]
[-46.06683731 115.04340363]
[-58.29238129 110.10993195]
[-65.29181671 99.16964722]
[-80.24648285 98.00438690]
[-95.20115662 96.83913422]
[-110.15582275 95.67387390]
[-125.12680817 94.74133301]
[-140.11048889 94.04172516]
[-155.09416199 93.34211731]
[-163.99159241 96.10404968]
[-170.53079224 92.38056946]
[-185.48547363 91.21530914]
[-200.44013977 90.05004883]
[-212.28540039 100.51262665]
[-228.05403137 99.45153809]
[-238.39077759 87.49633026]
[-237.16304016 71.73979950]
[-225.09921265 61.53002167]
[-209.35653687 62.92427826]
[-199.27488708 75.09538269]
[-184.32020569 76.26063538]
[-169.36553955 77.42589569]
[-154.39456177 78.35844421]
[-139.41087341 79.05804443]
[-124.42720795 79.75765228]
[-117.47647095 76.87445831]
[-108.99057007 80.71920013]
[-94.03589630 81.88446045]
[-79.08123016 83.04972076]
[-64.12655640 84.21497345]
[-51.92020798 72.76314545]
[-34.86867523 73.61394501]
[-23.42161560 86.72912598]
[-8.43793964 87.42873383]
[2.36667395 77.24069977]
[17.57221794 77.73675537]
[28.18510056 89.13870239]
[43.16877747 89.83831024]
[58.15245438 90.53791809]
[61.34510803 78.94480133]
[67.76264191 68.41633606]
[77.05249786 59.85128784]
[88.61180115 54.03232574]
[101.62538147 51.55656433]
[115.12287140 52.77843094]
[128.05110168 57.77013016]
[139.35617065 66.30362701]
[148.06898499 77.85652924]
[159.83789062 68.55638885]
[171.60681152 59.25624466]
[183.37573242 49.95610046]
[195.14463806 40.65595627]
[198.43229675 24.95338249]
[212.82315063 17.86234665]
[227.27777100 24.82248497]
[230.70780945 40.49457550]
[220.48204041 52.85633087]
[204.44477844 52.42487335]
[192.67587280 61.72501373]
[180.90695190 71.02516174]
[169.13804626 80.32530212]
[157.36912537 89.62544250]
[160.83677673 104.21912384]
[175.53123474 107.23123169]
[190.22569275 110.24333191]
[204.92015076 113.25543976]
[219.61462402 116.26754761]
[236.34527588 113.52497864]
[243.61216736 128.84255981]
[230.90486145 140.06579590]
[216.60250854 130.96200562]
[201.90805054 127.94990540]
[187.21359253 124.93779755]
[172.51913452 121.92568970]
[157.82466125 118.91358185]
[149.08355713 131.10345459]
[156.65078735 144.05477905]
[172.00885010 143.89492798]
[185.38136292 151.44949341]
[193.17118835 164.68634033]
[193.28291321 180.04481506]
[185.68646240 193.39358521]
[172.42526245 201.14189148]
[157.06649780 201.20545959]
[143.74160767 193.56721497]
[136.03492737 180.28178406]
[136.01948547 164.92291260]
[143.69946289 151.62202454]
[136.13221741 138.67070007]
[115.67088318 148.44869995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 49]
[4 48]
[5 47]
[8 44]
[9 43]
[13 40]
[14 39]
[15 38]
[16 37]
[17 35]
[18 34]
[19 33]
[21 32]
[22 31]
[23 30]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
[86 99]
[87 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
