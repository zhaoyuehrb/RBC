%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:57:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUCAGAGAAAUUACACCAGAGUGAAAGAAUUUACCUUCCUGGGAAUUACUCAGUCCCGAGAACUGAGCCAGGUCUUAUUUACCUUCCUGUUUUUGG\
) } def
/len { sequence length } bind def

/coor [
[158.45265198 135.81361389]
[154.92181396 133.36508179]
[152.17663574 129.47991943]
[138.29621887 123.79359436]
[124.41581726 118.10726929]
[110.53540802 112.42094421]
[99.42854309 116.27722931]
[88.61946106 111.65151978]
[83.74072266 100.95426178]
[70.04387665 94.83900452]
[56.34702301 88.72375488]
[40.59139633 90.16275787]
[32.12419891 77.90895081]
[18.42734909 71.79369354]
[4.73050117 65.67844391]
[-8.96634769 59.56318665]
[-19.09414864 64.10560608]
[-29.81451607 62.26046753]
[-37.51988983 54.89965820]
[-39.75774002 44.70808029]
[-53.04790878 37.75312805]
[-66.33808136 30.79817390]
[-79.62825012 23.84322166]
[-100.79303741 26.31169701]
[-111.63795471 8.87030220]
[-125.51836395 3.18397593]
[-139.39877319 -2.50235009]
[-153.27917480 -8.18867588]
[-167.15959167 -13.87500191]
[-183.32843018 -11.13630676]
[-193.57476807 -23.94039345]
[-187.35804749 -39.11551666]
[-171.07348633 -41.05080795]
[-161.47326660 -27.75540924]
[-147.59284973 -22.06908226]
[-133.71244812 -16.38275719]
[-119.83203888 -10.69643116]
[-105.95162964 -5.01010466]
[-98.15737152 -9.87380600]
[-88.85247040 -10.51022530]
[-80.21417236 -6.63917685]
[-74.32549286 0.94940090]
[-72.67329407 10.55305099]
[-59.38312531 17.50800323]
[-46.09295654 24.46295738]
[-32.80278397 31.41790962]
[-13.72098064 29.03095627]
[-2.85109353 45.86633682]
[10.84575558 51.98159027]
[24.54260445 58.09684753]
[38.23945236 64.21209717]
[53.01539230 62.33569336]
[62.46228027 75.02690125]
[76.15912628 81.14215851]
[89.85597992 87.25741577]
[106.40795135 85.02626038]
[116.22173309 98.54053497]
[130.10214233 104.22686768]
[143.98254395 109.91319275]
[157.86296082 115.59951782]
[172.07002258 120.41190338]
[186.54881287 124.33173370]
[201.02758789 128.25155640]
[215.50636292 132.17138672]
[229.98513794 136.09121704]
[244.46391296 140.01104736]
[258.94268799 143.93087769]
[265.70361328 142.54916382]
[271.24325562 144.60389709]
[274.18511963 148.57080078]
[288.39218140 153.38317871]
[302.43203735 146.63633728]
[316.77148438 151.71916199]
[323.11706543 165.14559937]
[337.32412720 169.95799255]
[351.53118896 174.77037048]
[365.73828125 179.58276367]
[379.00689697 171.30766296]
[394.48309326 173.54866028]
[404.85940552 185.24761963]
[405.23651123 200.88066101]
[395.43634033 213.06632996]
[380.08621216 216.05091858]
[366.43402100 208.42521667]
[360.92587280 193.78984070]
[346.71881104 188.97744751]
[332.51174927 184.16505432]
[318.30465698 179.35267639]
[305.10568237 186.15875244]
[290.62915039 181.48069763]
[283.57980347 167.59025574]
[269.37271118 162.77787781]
[255.02285767 158.40965271]
[240.54408264 154.48982239]
[226.06530762 150.56999207]
[211.58653259 146.65016174]
[197.10775757 142.73033142]
[182.62898254 138.81050110]
[168.15020752 134.89068604]
[165.55465698 136.34239197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 60]
[4 59]
[5 58]
[6 57]
[9 55]
[10 54]
[11 53]
[13 51]
[14 50]
[15 49]
[16 48]
[20 46]
[21 45]
[22 44]
[23 43]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
[67 93]
[70 92]
[71 91]
[74 88]
[75 87]
[76 86]
[77 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
