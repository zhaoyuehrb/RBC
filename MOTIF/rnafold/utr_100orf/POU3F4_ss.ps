%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGUCAAAGGCUGAAGCUGCUCCCUUUGCCACAUUAUAACUAGUAGGGGAUCCUCACCGACCAUGGCCACAGCUGCCUCGAAUCCCUACAGCAUUCUCAGUUCCACCUCCCUAGUCCAUGCGGACUCUGCGGGCAUGCAGCAGGGGAGUCCUUUCCGCAACC\
) } def
/len { sequence length } bind def

/coor [
[65.93517303 449.56967163]
[53.13471985 457.68905640]
[38.32857513 460.93771362]
[23.30465126 458.92340088]
[9.87716007 451.88931274]
[-0.33246300 440.68487549]
[-6.09135580 426.66308594]
[-6.70410490 411.51712036]
[-2.09671712 397.07592773]
[7.17444277 385.08337402]
[19.98983765 376.98760986]
[34.80194473 373.76623535]
[36.79522705 358.89926147]
[30.81781387 345.25668335]
[40.32033920 332.60705566]
[42.31361771 317.74011230]
[44.30690002 302.87313843]
[46.30018234 288.00616455]
[37.08510590 276.36065674]
[38.89479065 261.25503540]
[51.17215347 251.66836548]
[53.16543579 236.80139160]
[55.15871811 221.93441772]
[57.15200043 207.06745911]
[59.14528275 192.20048523]
[61.13856506 177.33351135]
[63.13184357 162.46653748]
[65.12512970 147.59956360]
[62.88706589 140.52003479]
[67.30049133 132.46955872]
[69.57646179 117.64323425]
[65.01415253 131.93257141]
[55.19050217 143.26817322]
[41.69503021 149.81587219]
[26.71138763 150.51618958]
[12.66401577 145.25584412]
[1.82586133 134.88595581]
[-4.04939842 121.08446503]
[-4.01111174 106.08451080]
[1.93452692 92.31318665]
[12.82547760 81.99877167]
[26.89952087 76.81019592]
[41.87939453 77.58700562]
[55.34126282 84.20350647]
[65.10817719 95.59137726]
[57.24028397 82.82046509]
[49.37238693 70.04954529]
[41.50449371 57.27863693]
[33.63659668 44.50772095]
[25.76870155 31.73680878]
[17.90080643 18.96589661]
[4.07475901 11.27492714]
[3.98646188 -3.61941648]
[-3.88143349 -16.39032936]
[-10.49311352 -15.13287067]
[-17.20481682 -15.33529854]
[-23.69876480 -16.98134804]
[-29.66893578 -19.98655510]
[-34.83548737 -24.20257759]
[-38.95785904 -29.42449760]
[-41.84599686 -35.40077591]
[-43.36907959 -41.84536362]
[-43.46144867 -48.45140457]
[-42.12540436 -54.90582275]
[-39.43079376 -60.90417862]
[-35.51137161 -66.16503143]
[-30.55818367 -70.44311523]
[-35.86698532 -84.47225189]
[-41.17578506 -98.50138855]
[-55.99574280 -103.49166870]
[-64.09661865 -116.86738586]
[-61.65343475 -132.31292725]
[-49.81978226 -142.53538513]
[-34.18315125 -142.70803833]
[-22.12668037 -132.74934387]
[-19.34306908 -117.36150360]
[-27.14665031 -103.81018829]
[-21.83784866 -89.78105164]
[-16.52904892 -75.75191498]
[6.49716949 -68.93344879]
[17.37002945 -47.24745178]
[8.88947964 -24.25822449]
[16.75737572 -11.48731136]
[30.02065659 -4.70980406]
[30.67171860 11.09800053]
[38.53961563 23.86891365]
[46.40750885 36.63982773]
[54.27540588 49.41073990]
[62.14329910 62.18165207]
[70.01119232 74.95256805]
[77.87908936 87.72348022]
[98.11145020 77.80947876]
[115.00507355 87.95365906]
[129.43705750 83.86487579]
[143.86901855 79.77608490]
[158.30099487 75.68730164]
[172.69338989 71.46131897]
[187.04490662 67.09850311]
[201.39640808 62.73569489]
[215.70574951 58.23646164]
[229.97158813 53.60120392]
[244.23744202 48.96595001]
[229.87670898 44.63358688]
[218.74363708 34.58098984]
[212.97274780 20.73552322]
[213.67050171 5.75176001]
[220.70310974 -7.49748468]
[232.72221375 -16.47195244]
[247.42341614 -19.45098495]
[261.98806763 -15.86341286]
[273.62374878 -6.39707804]
[280.09951782 7.13305330]
[280.17379761 22.13286972]
[273.83236694 35.72647858]
[262.29031372 45.30796432]
[277.23529053 44.02434158]
[292.18026733 42.74071503]
[307.12524414 41.45708847]
[322.07022095 40.17346573]
[335.20153809 30.35001373]
[350.16592407 37.05817413]
[351.56927490 53.39716339]
[337.96795654 62.55883408]
[323.35382080 55.11843872]
[308.40887451 56.40206528]
[293.46389771 57.68569183]
[278.51892090 58.96931458]
[263.57394409 60.25294113]
[248.87269592 63.23179626]
[234.60684204 67.86705017]
[220.34100342 72.50230408]
[214.92669678 77.58306885]
[205.75923157 77.08721161]
[191.40771484 81.45001984]
[177.05619812 85.81282806]
[171.54614258 90.78958893]
[162.38978577 90.11927795]
[147.95780945 94.20806122]
[133.52583313 98.29684448]
[119.09386444 102.38562775]
[108.48967743 120.58910370]
[84.40279388 119.91920471]
[82.12682343 134.74552917]
[79.99209595 149.59284973]
[77.99881744 164.45982361]
[76.00553131 179.32679749]
[74.01225281 194.19375610]
[72.01897430 209.06072998]
[70.02568817 223.92770386]
[68.03240967 238.79467773]
[66.03912354 253.66165161]
[75.35762787 266.14376831]
[73.12437439 281.19259644]
[61.16715240 289.99945068]
[59.17387390 304.86639404]
[57.18059158 319.73336792]
[55.18730927 334.60034180]
[61.02214813 349.30630493]
[51.66219711 360.89254761]
[49.66891479 375.75949097]
[63.10934448 382.76882935]
[73.33959961 393.95443726]
[79.12432098 407.96560669]
[79.76498413 423.11041260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 160]
[13 159]
[15 157]
[16 156]
[17 155]
[18 154]
[21 151]
[22 150]
[23 149]
[24 148]
[25 147]
[26 146]
[27 145]
[28 144]
[30 143]
[31 142]
[45 91]
[46 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[53 83]
[54 82]
[67 79]
[68 78]
[69 77]
[93 140]
[94 139]
[95 138]
[96 137]
[97 135]
[98 134]
[99 133]
[100 131]
[101 130]
[102 129]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
