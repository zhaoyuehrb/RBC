%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGGCAACAAUUUCACUGAGGUUACCGUCUUCAUCCUCUCUGGAUUUGCAAAUCACCCUGAAUUACAAGUCAGUCUUUUCUUGAUGUUUCUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[145.60015869 231.65650940]
[152.78784180 218.40507507]
[162.93844604 207.25927734]
[154.58065796 194.80346680]
[146.22286987 182.34764099]
[137.86509705 169.89183044]
[129.50730896 157.43600464]
[121.14952850 144.98017883]
[112.79174042 132.52436829]
[88.28986359 132.92926025]
[69.54502106 117.14518738]
[65.77271271 92.93205261]
[52.07586288 86.81680298]
[38.37901688 80.70154572]
[22.62338638 82.14054871]
[14.15618992 69.88674164]
[0.45934096 63.77148819]
[-13.23750782 57.65623474]
[-26.93435669 51.54098129]
[-41.54180145 56.95025635]
[-55.34524155 50.55340195]
[-60.41213989 36.59410095]
[-74.10898590 30.47884750]
[-87.80583954 24.36359215]
[-101.50268555 18.24833870]
[-112.80228424 28.45808411]
[-127.27967834 33.18301773]
[-142.42657471 31.60451317]
[-155.61866760 23.99606133]
[-164.57034302 11.67586803]
[-167.73069763 -3.22151709]
[-164.55216980 -18.11503220]
[-155.58543396 -30.42428589]
[-142.38406372 -38.01662445]
[-127.23526001 -39.57662964]
[-112.76364899 -34.83402634]
[-101.47651672 -24.61049080]
[-95.32944489 -10.67731667]
[-95.38742828 4.55148935]
[-81.69058228 10.66674328]
[-67.99373627 16.78199768]
[-54.29688644 22.89725304]
[-40.52115250 17.35064888]
[-26.54348755 23.35726929]
[-20.81910324 37.84413147]
[-7.12225342 43.95938492]
[6.57459497 50.07463837]
[20.27144432 56.18989563]
[35.04738235 54.31348419]
[44.49427032 67.00469971]
[58.19112015 73.11994934]
[71.88796997 79.23520660]
[78.56371307 72.39658356]
[86.84230042 67.62194824]
[96.10473633 65.26831818]
[105.65843201 65.51166534]
[114.78902435 68.33380890]
[123.90501404 56.42168427]
[133.02101135 44.50955963]
[137.84532166 28.25648499]
[154.79870605 28.39295959]
[159.36073303 44.72159195]
[144.93313599 53.62554932]
[135.81713867 65.53767395]
[126.70114899 77.44979858]
[130.36080933 82.68861389]
[133.00538635 88.50621796]
[134.54647827 94.70810699]
[134.93252563 101.08692169]
[134.15065002 107.42939758]
[132.22698975 113.52348328]
[129.22584534 119.16542053]
[125.24755859 124.16658020]
[133.60534668 136.62240601]
[141.96313477 149.07821655]
[150.32090759 161.53404236]
[158.67869568 173.98985291]
[167.03648376 186.44567871]
[175.39427185 198.90150452]
[189.55610657 193.73376465]
[204.54324341 192.10604858]
[219.48431396 194.11297607]
[233.51068115 199.63787842]
[245.80685425 208.35954285]
[255.65797424 219.77088928]
[262.49130249 233.20849609]
[265.90954590 247.89109802]
[265.71395874 262.96508789]
[261.91595459 277.55407715]
[254.73632812 290.80987549]
[244.59246826 301.96182251]
[232.07415771 310.36154175]
[217.90917969 315.52069092]
[202.92106628 317.13931274]
[187.98121643 315.12332153]
[173.95820618 309.58993530]
[161.66731262 300.86080933]
[151.82310486 289.44348145]
[144.99794006 276.00173950]
[141.58860779 261.31707764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[12 52]
[13 51]
[14 50]
[16 48]
[17 47]
[18 46]
[19 45]
[22 42]
[23 41]
[24 40]
[25 39]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
