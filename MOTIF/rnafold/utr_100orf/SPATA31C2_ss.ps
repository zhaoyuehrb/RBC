%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCAGUUGCUAGAAAGCAAUGCGCCUAUUCACAUGGAGAAUCUUCCCUUUCCUCUAAAAUUACUUAGUGCCUCAUCACUAAACACCCCCAGCUCCACACCAUGGGUGUUGGAUAUCUUCCUCACCUUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[171.36622620 169.01045227]
[159.82621765 159.42774963]
[148.28619385 149.84504700]
[136.74618530 140.26234436]
[125.20618439 130.67964172]
[99.20415497 143.74473572]
[68.33406067 135.80339050]
[48.66889954 107.26951599]
[38.82220459 118.58510590]
[28.97550774 129.90069580]
[19.12881279 141.21627808]
[9.28211689 152.53187561]
[-0.56457829 163.84747314]
[-3.16914725 180.03845215]
[-18.58751297 185.62469482]
[-30.95858192 174.85954285]
[-27.55605888 158.81724548]
[-11.88016891 154.00077820]
[-2.03347349 142.68518066]
[7.81322193 131.36958313]
[17.65991783 120.05400085]
[27.50661278 108.73841095]
[37.35330963 97.42282104]
[36.31713486 89.99474335]
[22.25086403 95.20434570]
[8.18459320 100.41395569]
[-5.88167858 105.62356567]
[-18.69989395 113.41415405]
[-33.60367584 111.71791840]
[-44.34340668 101.24613953]
[-46.41556931 86.38995361]
[-38.95124817 73.37903595]
[-25.08046722 67.66927338]
[-10.62014198 71.65463257]
[4.33483553 72.81594849]
[19.28981209 73.97726440]
[34.24478912 75.13858032]
[33.20861816 67.71050262]
[20.64115524 59.52155685]
[8.07369232 51.33260727]
[-4.49377012 43.14365768]
[-17.06123161 34.95470810]
[-31.50760460 40.61880112]
[-46.51572037 36.67721176]
[-56.31465149 24.64556503]
[-57.13650894 9.15026951]
[-48.66527176 -3.85041499]
[-34.15830612 -9.35746002]
[-19.19383240 -5.25329351]
[-9.52599907 6.88394737]
[-8.87228298 22.38724709]
[3.69517899 30.57619476]
[16.26264191 38.76514435]
[28.83010483 46.95409393]
[41.39756775 55.14304352]
[48.50876999 52.75960541]
[41.40577698 39.54796600]
[34.30278397 26.33632469]
[23.84501648 15.58294678]
[24.38599968 0.59270537]
[35.59170914 -9.37885761]
[50.54331589 -8.17492008]
[60.00913239 3.46115947]
[58.14421844 18.34547997]
[60.43770218 33.16910934]
[62.73118210 47.99273682]
[69.84238434 45.60929871]
[74.93649292 31.50078964]
[80.03060150 17.39227867]
[85.12471008 3.28376818]
[90.21881104 -10.82474232]
[95.31291962 -24.93325233]
[88.37096405 -39.13130951]
[93.58075714 -54.05222321]
[107.85140991 -60.84368134]
[122.71640778 -55.47642899]
[129.35661316 -41.13476944]
[123.83249664 -26.32734680]
[109.42143250 -19.83914566]
[104.32732391 -5.73063517]
[99.23321533 8.37787533]
[94.13911438 22.48638535]
[89.04500580 36.59489822]
[83.95089722 50.70340729]
[97.50906372 49.56673050]
[110.53509521 51.99625015]
[122.13249969 57.63531113]
[131.55320740 65.91315460]
[138.24543762 76.09717560]
[141.88482666 87.35497284]
[142.38702393 98.82094574]
[139.90165710 109.66233063]
[134.78887939 119.13963318]
[146.32888794 128.72233582]
[157.86889648 138.30503845]
[169.40890503 147.88774109]
[180.94892883 157.47044373]
[196.50881958 160.33406067]
[201.35739136 174.41740417]
[212.89739990 184.00010681]
[224.43740845 193.58280945]
[235.97741699 203.16551208]
[247.51742554 212.74821472]
[259.05743408 222.33091736]
[267.74215698 225.44561768]
[270.75000000 232.27069092]
[282.06558228 242.11738586]
[293.38116455 251.96408081]
[304.69674683 261.81076050]
[316.01235962 271.65747070]
[328.96871948 271.55615234]
[338.19979858 280.06542969]
[339.09133911 292.18539429]
[350.17648315 302.29083252]
[361.26159668 312.39627075]
[377.28945923 313.09466553]
[386.61978149 326.14550781]
[382.09518433 341.53729248]
[367.18652344 347.46276855]
[353.33044434 339.37643433]
[351.15615845 323.48138428]
[340.07104492 313.37597656]
[328.98590088 303.27053833]
[311.69689941 300.49322510]
[306.16564941 282.97305298]
[294.85006714 273.12637329]
[283.53448486 263.27966309]
[272.21887207 253.43296814]
[260.90328979 243.58627319]
[249.47473145 233.87092590]
[237.93472290 224.28822327]
[226.39471436 214.70552063]
[214.85470581 205.12281799]
[203.31469727 195.54011536]
[191.77468872 185.95742798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[99 135]
[100 134]
[101 133]
[102 132]
[103 131]
[104 130]
[106 129]
[107 128]
[108 127]
[109 126]
[110 125]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
