%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAACAGGGAACCUCACGUGGGUAUCAGACUUUGUCUUCCUGGGGCUCUCGCAGACUCGGGAGCUCCAGCGUUUCCUGUUUCUAAUGUUCCUGUUUG\
) } def
/len { sequence length } bind def

/coor [
[133.27319336 333.11932373]
[144.47203064 322.87478638]
[139.00225830 308.90762329]
[133.53248596 294.94046021]
[128.06271362 280.97332764]
[122.59293365 267.00616455]
[117.12316132 253.03898621]
[111.65338898 239.07182312]
[106.18361664 225.10467529]
[100.71384430 211.13751221]
[95.24407196 197.17034912]
[89.77429962 183.20318604]
[84.30451965 169.23602295]
[78.83474731 155.26885986]
[73.36497498 141.30169678]
[59.86493683 134.76344299]
[45.51507187 139.13165283]
[31.16520500 143.49987793]
[20.36788940 155.84289551]
[4.33451414 152.39863586]
[-0.44115892 136.71026611]
[10.95367336 124.91663361]
[26.79698563 129.15000916]
[41.14685059 124.78179169]
[55.49671555 120.41357422]
[56.65845490 113.00408936]
[41.83953094 110.68038940]
[44.16346359 95.86150360]
[58.98192596 98.18513489]
[60.14366150 90.77565765]
[47.81932831 82.22517395]
[35.49499130 73.67469025]
[23.17065811 65.12420654]
[6.71026468 61.06319809]
[6.05587769 44.12188339]
[22.15396690 38.80324936]
[31.72114182 52.79987335]
[44.04547501 61.35035706]
[56.36981201 69.90084076]
[68.69414520 78.45132446]
[81.06336975 72.92184448]
[92.98191833 72.81097412]
[102.42430878 77.00984192]
[108.75183868 63.40975189]
[115.07936096 49.80966187]
[121.40688324 36.20957184]
[127.73441315 22.60948372]
[134.06193542 9.00939465]
[140.38946533 -4.59069443]
[146.71699524 -18.19078445]
[153.04450989 -31.79087257]
[159.37203979 -45.39096069]
[165.69956970 -58.99105072]
[172.02708435 -72.59114075]
[166.37411499 -87.34984589]
[172.88903809 -101.74884796]
[187.70669556 -107.24546814]
[202.03601074 -100.57866669]
[207.37565613 -85.70373535]
[200.55773926 -71.44570160]
[185.62718201 -66.26361084]
[179.29965210 -52.66352463]
[172.97212219 -39.06343460]
[166.64460754 -25.46334648]
[160.31707764 -11.86325836]
[153.98954773 1.73683095]
[147.66203308 15.33691978]
[141.33450317 28.93700981]
[135.00697327 42.53709793]
[128.67944336 56.13718796]
[122.35192108 69.73727417]
[116.02439880 83.33736420]
[126.00878906 116.04822540]
[87.33213806 135.83192444]
[92.80191040 149.79908752]
[98.27168274 163.76625061]
[103.74145508 177.73341370]
[109.21122742 191.70057678]
[114.68099976 205.66773987]
[120.15077209 219.63490295]
[125.62055206 233.60205078]
[131.09031677 247.56921387]
[136.56008911 261.53637695]
[142.02986145 275.50354004]
[147.49963379 289.47070312]
[152.96940613 303.43786621]
[158.43917847 317.40502930]
[173.61671448 317.32015991]
[187.79859924 322.72741699]
[199.06686401 332.89553833]
[205.89756775 346.44934082]
[207.36691284 361.55581665]
[203.27618408 376.17190552]
[194.17861938 388.32092285]
[181.30459595 396.35983276]
[166.39520264 399.20138550]
[151.46682739 396.46133423]
[138.53839111 388.51019287]
[129.35838318 376.42337036]
[125.16831970 361.83541870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 25]
[17 24]
[18 23]
[30 40]
[31 39]
[32 38]
[33 37]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
