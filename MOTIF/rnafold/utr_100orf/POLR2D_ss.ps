%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGCGCUUCUGCUUCCGGCGGCGCUGGUGGUGGCGCGCGGCGCGGCGCGGCGAUGGCGGCGGGUGGCAGCGAUCCGCGGGCUGGCGACGUAGAGGAGGACGCCUCACAGCUCAUCUUUCCUAAAGAGUUUGAAACAGCUGAGACACUUCUAA\
) } def
/len { sequence length } bind def

/coor [
[95.64345551 194.24806213]
[108.00636292 185.29699707]
[105.30253601 170.54270935]
[102.59870911 155.78840637]
[92.69399261 144.66429138]
[97.81700134 129.69548035]
[95.11317444 114.94118500]
[87.61317444 101.95080566]
[76.18749237 92.23207092]
[60.66261673 89.18432617]
[55.98121262 75.04453278]
[44.55552673 65.32579803]
[33.12984085 55.60707092]
[17.60496521 52.55932236]
[12.92356110 38.41952896]
[1.49787688 28.70079994]
[-9.92780781 18.98206902]
[-21.35349274 9.26333809]
[-34.28669739 9.51442051]
[-43.60947037 1.13658524]
[-44.66574860 -10.94981098]
[-55.89340973 -20.89665031]
[-67.12107086 -30.84349060]
[-82.58142853 -34.20324707]
[-86.97714996 -48.43444061]
[-98.20481110 -58.38127899]
[-109.43247223 -68.32811737]
[-120.66013336 -78.27496338]
[-131.88778687 -88.22180176]
[-143.11544800 -98.16864014]
[-154.34310913 -108.11547852]
[-172.44395447 -111.35023499]
[-177.40307617 -128.15846252]
[-188.82876587 -137.87719727]
[-200.25444031 -147.59593201]
[-211.68013000 -157.31465149]
[-223.29920959 -166.80133057]
[-235.10694885 -176.05212402]
[-246.91470337 -185.30290222]
[-258.81500244 -194.43432617]
[-270.80664062 -203.44546509]
[-286.48721313 -205.55027771]
[-292.01382446 -219.38162231]
[-304.00546265 -228.39274597]
[-319.68603516 -230.49757385]
[-325.21264648 -244.32890320]
[-337.20428467 -253.34004211]
[-352.88485718 -255.44485474]
[-358.41143799 -269.27618408]
[-370.40310669 -278.28732300]
[-382.39474487 -287.29846191]
[-397.58483887 -283.58432007]
[-411.58557129 -290.54943848]
[-417.78625488 -304.90512085]
[-413.25909424 -319.87304688]
[-400.14166260 -328.38583374]
[-384.62762451 -326.42398071]
[-374.04223633 -314.91381836]
[-373.38360596 -299.29010010]
[-361.39196777 -290.27896118]
[-349.40032959 -281.26785278]
[-334.57748413 -279.80755615]
[-328.19314575 -265.33169556]
[-316.20150757 -256.32055664]
[-301.37866211 -254.86026001]
[-294.99432373 -240.38438416]
[-283.00268555 -231.37326050]
[-268.17984009 -229.91297913]
[-261.79550171 -215.43710327]
[-249.80387878 -206.42596436]
[-242.52546692 -204.91320801]
[-237.66392517 -197.11065674]
[-225.85617065 -187.85987854]
[-214.04841614 -178.60908508]
[-209.23040771 -178.29623413]
[-204.57275391 -174.91523743]
[-201.96139526 -168.74034119]
[-190.53572083 -159.02160645]
[-179.11003113 -149.30287170]
[-167.68434143 -139.58415222]
[-155.56942749 -140.23651123]
[-145.96482849 -132.18333435]
[-144.39627075 -119.34313965]
[-133.16860962 -109.39630127]
[-121.94094849 -99.44946289]
[-110.71328735 -89.50262451]
[-99.48562622 -79.55577850]
[-88.25796509 -69.60894012]
[-77.03030396 -59.66210175]
[-62.37302780 -57.01381302]
[-57.17422867 -42.07115173]
[-45.94656754 -32.12431335]
[-34.71890640 -22.17747307]
[-17.38064575 -19.62914848]
[-11.63476181 -2.16234684]
[-0.20907681 7.55638409]
[11.21660805 17.27511406]
[22.64229202 26.99384499]
[37.34992981 29.34644508]
[42.84857178 44.18138504]
[54.27425766 53.90011597]
[65.69994354 63.61884689]
[80.40757751 65.97144318]
[85.90621948 80.80638885]
[97.33190918 90.52511597]
[108.37976074 75.98779297]
[133.27217102 76.00588226]
[148.07792664 78.41204834]
[162.88368225 80.81821442]
[171.91502380 79.10086823]
[177.96211243 83.42479706]
[192.71641541 86.12862396]
[207.47071838 88.83245087]
[222.22500610 91.53627777]
[236.97930908 94.24010468]
[245.93037415 81.87720490]
[259.36312866 74.62989044]
[274.61053467 73.93711853]
[288.64514160 79.93644714]
[298.68045044 91.43669891]
[302.72387695 106.15448761]
[299.97262573 121.16759491]
[290.97293091 133.49514771]
[277.51174927 140.68951416]
[262.26174927 141.32223511]
[248.25083923 135.26768494]
[238.26092529 123.72800446]
[234.27548218 108.99440002]
[219.52117920 106.29057312]
[204.76689148 103.58674622]
[190.01258850 100.88292694]
[175.25828552 98.17910004]
[160.47750854 95.62397003]
[145.67176819 93.21780396]
[130.86601257 90.81163025]
[125.61637115 96.16806793]
[136.32905579 106.66751099]
[125.82943726 117.38002014]
[115.11711121 106.88092804]
[109.86747742 112.23735809]
[112.57130432 126.99165344]
[122.66941071 139.17109680]
[117.35300446 153.08457947]
[120.05683136 167.83888245]
[122.76065826 182.59317017]
[137.49426270 186.57861328]
[149.03393555 196.56854248]
[155.08848572 210.57943726]
[154.45576477 225.82942200]
[147.26141357 239.29063416]
[134.93385315 248.29029846]
[119.92074585 251.04154968]
[105.20294952 246.99812317]
[93.70270538 236.96284485]
[87.70337677 222.92820740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[6 141]
[7 140]
[8 105]
[9 104]
[11 102]
[12 101]
[13 100]
[15 98]
[16 97]
[17 96]
[18 95]
[21 93]
[22 92]
[23 91]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 83]
[33 80]
[34 79]
[35 78]
[36 77]
[37 74]
[38 73]
[39 72]
[40 70]
[41 69]
[43 67]
[44 66]
[46 64]
[47 63]
[49 61]
[50 60]
[51 59]
[107 135]
[108 134]
[109 133]
[111 132]
[112 131]
[113 130]
[114 129]
[115 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
