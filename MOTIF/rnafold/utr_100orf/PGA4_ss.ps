%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCUUCCUCCCAUCUUGCCUUCUCCCUCGAGUUGGGACCCGGGAAGAACCAUGAAGUGGCUGCUGCUGCUGGGUCUGGUGGCGCUCUCUGAGUGCAUCAUGUACAAGGUCCCCCUCAUCAGAAAGAAGUCCUUGAGGCGCACCCUGUCCG\
) } def
/len { sequence length } bind def

/coor [
[85.74525452 104.32459259]
[88.82317352 99.17186737]
[74.00069427 96.87098694]
[59.17821121 94.57011414]
[44.35572815 92.26924133]
[36.74089432 102.27152252]
[25.64865494 108.03157806]
[13.23131371 108.50140381]
[1.86874294 103.65283203]
[-6.28773642 94.47107697]
[-9.72262192 82.75524139]
[-24.43814468 79.84777069]
[-39.15366745 76.94029236]
[-46.27481842 94.09720612]
[-69.69254303 102.41931152]
[-84.20117188 106.22716522]
[-98.70979309 110.03502655]
[-113.21842194 113.84288788]
[-124.60235596 124.83000183]
[-138.87687683 120.57707214]
[-153.38549805 124.38492584]
[-159.10209656 138.68971252]
[-171.99496460 146.79078674]
[-187.00825500 145.75891113]
[-198.39878845 136.19888306]
[-212.90740967 140.00674438]
[-227.41603088 143.81460571]
[-241.92466736 147.62245178]
[-248.44201660 161.83717346]
[-262.59371948 168.49024963]
[-277.69775391 164.44030762]
[-286.62246704 151.59960938]
[-285.15386963 136.03114319]
[-273.98541260 125.08585358]
[-258.39047241 123.93177795]
[-245.73251343 133.11383057]
[-231.22389221 129.30596924]
[-216.71527100 125.49811554]
[-202.20664978 121.69025421]
[-196.97897339 107.76871490]
[-184.40742493 99.49705505]
[-169.19798279 100.22254944]
[-157.19335938 109.87630463]
[-142.68472290 106.06844330]
[-132.33854675 95.35369110]
[-117.02627563 99.33425903]
[-102.51765442 95.52639771]
[-88.00902557 91.71854401]
[-73.50040436 87.91068268]
[-70.50625610 81.03427124]
[-85.06435394 77.42017365]
[-99.63384247 73.85226440]
[-102.16823578 59.06792068]
[-89.61890411 50.85120392]
[-77.08133698 59.08622360]
[-64.51795959 67.28144073]
[-61.52380753 60.40502548]
[-68.62021637 47.18984222]
[-75.71661377 33.97465897]
[-82.81301880 20.75947762]
[-89.90942383 7.54429436]
[-97.00582886 -5.67088842]
[-111.22591400 -13.83918667]
[-110.99142456 -30.23665810]
[-96.54357147 -37.99498749]
[-82.74507904 -29.13307381]
[-83.79064178 -12.76729202]
[-76.69423676 0.44789091]
[-69.59783936 13.66307354]
[-62.50143433 26.87825584]
[-55.40502930 40.09344101]
[-48.30862808 53.30862427]
[-36.24619675 62.22477341]
[-21.53067207 65.13224792]
[-6.81514978 68.03971863]
[5.50978899 55.46009064]
[23.06586456 52.72689819]
[38.90826416 61.11071777]
[46.65660095 77.44675446]
[61.47908401 79.74763489]
[76.30156708 82.04850769]
[91.12404633 84.34938049]
[104.75102997 78.07997894]
[112.64750671 65.32672119]
[120.54399109 52.57346344]
[128.44047546 39.82020569]
[136.33695984 27.06694794]
[144.23344421 14.31369114]
[147.43096924 -2.33599806]
[164.31513977 -3.87252426]
[170.46562195 11.92645931]
[156.98669434 22.21017456]
[149.09020996 34.96343231]
[141.19372559 47.71668625]
[133.29725647 60.46994400]
[125.40076447 73.22320557]
[117.50428772 85.97645569]
[119.40821075 93.23077393]
[128.37722778 81.20759583]
[143.36941528 80.72337341]
[153.09558105 92.14273071]
[150.23188782 106.86683655]
[136.93470764 113.80837250]
[123.21607208 107.73939514]
[125.12000275 114.99371338]
[138.26162720 122.22541046]
[151.40325928 129.45710754]
[167.22396851 129.33164978]
[174.64419556 142.24635315]
[187.78582764 149.47805786]
[200.92745972 156.70976257]
[214.92419434 150.27566528]
[229.85121155 153.28189087]
[240.02549744 164.37008667]
[241.69961548 179.14625549]
[254.84124756 186.37796021]
[267.98287964 193.60966492]
[281.12451172 200.84136963]
[294.26614380 208.07305908]
[305.87411499 198.29454041]
[320.23190308 193.37330627]
[335.39773560 193.97492981]
[349.32055664 200.01805115]
[360.11743164 210.68537903]
[366.32815552 224.53425598]
[367.11279297 239.69172668]
[362.36523438 254.10786438]
[352.72750854 265.83300781]
[339.50308228 273.28143311]
[324.48043823 275.44580078]
[309.69125366 272.03338623]
[297.13568115 263.50570679]
[288.51168823 251.01605225]
[284.98565674 236.25354004]
[287.03445435 221.21469116]
[273.89282227 213.98298645]
[260.75119019 206.75129700]
[247.60954285 199.51959229]
[234.46791077 192.28788757]
[221.08959961 198.78086853]
[206.27806091 196.11962891]
[195.75056458 185.11848450]
[193.69575500 169.85139465]
[180.55412292 162.61968994]
[167.41249084 155.38798523]
[152.53175354 156.03071594]
[144.17156982 142.59873962]
[131.02993774 135.36705017]
[117.88829803 128.13534546]
[105.82724762 129.07342529]
[95.58957672 125.58546448]
[88.56313324 119.11356354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[11 75]
[12 74]
[13 73]
[15 49]
[16 48]
[17 47]
[18 46]
[20 44]
[21 43]
[25 39]
[26 38]
[27 37]
[28 36]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[105 149]
[106 148]
[107 147]
[109 145]
[110 144]
[111 143]
[115 139]
[116 138]
[117 137]
[118 136]
[119 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
