%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCUCUCCGCGUUCUUCCAGCGCUGUCUUUUUAGUACCACAUGCGCAGGCAGGUGAUGGCGGCGCUGGUCGUAUCCGGGGCAGCGGAGCAGGGCGGCCGAGACGGCCCUGGCAGAGGUCGGGCCCCUCGGGGCCGCGUGG\
) } def
/len { sequence length } bind def

/coor [
[121.48510742 118.29400635]
[107.89048767 111.95472717]
[93.94644165 112.98190308]
[85.77023315 101.63988495]
[72.17562103 95.30061340]
[58.58100128 88.96134186]
[44.98638535 82.62206268]
[31.32342911 76.43145752]
[17.59375572 70.39025879]
[3.86408448 64.34906006]
[-9.86558819 58.30785751]
[-23.59526062 52.26665878]
[-39.34288788 53.79072571]
[-47.87613297 41.58281708]
[-61.60580826 35.54161835]
[-74.00108337 44.50288773]
[-89.11776733 46.04645920]
[-102.88591766 39.85740280]
[-111.64897156 27.68921089]
[-113.13473511 12.86834526]
[-126.86441040 6.82714462]
[-140.59408569 0.78594440]
[-154.32376099 -5.25525618]
[-168.05342102 -11.29645634]
[-181.78309631 -17.33765602]
[-195.51277161 -23.37885666]
[-209.24244690 -29.42005730]
[-222.97212219 -35.46125793]
[-236.70178223 -41.50245667]
[-250.43145752 -47.54365921]
[-257.42782593 -41.68769836]
[-265.92163086 -38.47820282]
[-274.95492554 -38.24636841]
[-283.51892090 -40.98929596]
[-290.66677856 -46.37348557]
[-295.61819458 -53.77512741]
[-297.84460449 -62.35227585]
[-297.12539673 -71.14057922]
[-310.11578369 -78.64057922]
[-323.10614014 -86.14057922]
[-336.09652710 -93.64057922]
[-341.46865845 -93.63063812]
[-345.83883667 -95.53555298]
[-348.63598633 -98.63351440]
[-349.66812134 -102.07993317]
[-362.14016724 -110.41348267]
[-374.61221313 -118.74703979]
[-391.00271606 -119.27908325]
[-398.49755859 -133.86535645]
[-389.38668823 -147.50074768]
[-373.04257202 -146.15834045]
[-366.27865601 -131.21908569]
[-353.80661011 -122.88552856]
[-341.33456421 -114.55197906]
[-328.59652710 -106.63095856]
[-315.60614014 -99.13095856]
[-302.61578369 -91.63095856]
[-289.62539673 -84.13095856]
[-269.81607056 -91.64284515]
[-250.58087158 -82.11707306]
[-244.39025879 -61.27333069]
[-230.66058350 -55.23213196]
[-216.93090820 -49.19092941]
[-203.20124817 -43.14973068]
[-189.47157288 -37.10852814]
[-175.74189758 -31.06732941]
[-162.01222229 -25.02612877]
[-148.28254700 -18.98492813]
[-134.55288696 -12.94372749]
[-120.82321167 -6.90252733]
[-107.09353638 -0.86132711]
[-95.16268158 -9.77873802]
[-80.27111816 -11.53864956]
[-66.40644073 -5.56896877]
[-57.33179092 6.61904192]
[-55.56460571 21.81194496]
[-41.83493423 27.85314560]
[-27.06934357 25.89697266]
[-17.55405998 38.53698730]
[-3.82438755 44.57818604]
[9.90528488 50.61938477]
[23.63495636 56.66058731]
[37.36462784 62.70178604]
[44.81012726 62.51527786]
[51.32566071 69.02745056]
[64.92028046 75.36672211]
[78.51489258 81.70599365]
[92.10951233 88.04527283]
[106.05355835 87.01809692]
[114.22976685 98.36011505]
[127.82437897 104.69938660]
[141.23396301 95.08751678]
[157.56547546 93.53636932]
[172.37478638 100.37341309]
[181.67956543 113.65634918]
[183.03001404 129.72381592]
[196.75967407 135.76501465]
[210.48934937 141.80621338]
[224.21902466 147.84741211]
[237.94869995 153.88861084]
[251.67837524 159.92980957]
[265.53656006 165.67007446]
[279.51669312 171.10664368]
[293.49679565 176.54321289]
[305.64523315 172.06483459]
[317.20599365 176.93771362]
[322.15472412 188.02757263]
[336.01293945 193.76782227]
[349.87112427 199.50807190]
[363.72930908 205.24832153]
[377.58749390 210.98858643]
[386.79061890 211.39277649]
[391.68319702 217.00817871]
[405.41287231 223.04937744]
[419.14254761 229.09057617]
[435.37643433 226.76835632]
[445.29031372 239.83155823]
[438.68560791 254.84188843]
[422.35668945 256.35800171]
[413.10134888 242.82025146]
[399.37167358 236.77905273]
[385.64199829 230.73785400]
[371.84725952 224.84677124]
[357.98907471 219.10652161]
[344.13085938 213.36627197]
[330.27267456 207.62602234]
[316.41448975 201.88577271]
[299.20266724 205.13964844]
[288.06024170 190.52333069]
[274.08010864 185.08676147]
[260.10000610 179.65019226]
[255.38241577 180.75382996]
[249.92582703 178.85150146]
[245.63716125 173.65948486]
[231.90750122 167.61828613]
[218.17782593 161.57708740]
[204.44815063 155.53588867]
[190.71847534 149.49468994]
[176.98880005 143.45349121]
[166.49574280 152.25779724]
[153.16493225 155.68290710]
[139.59729004 153.00140381]
[128.46549988 144.68313599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[4 88]
[5 87]
[6 86]
[7 85]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[14 77]
[15 76]
[20 71]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[38 58]
[39 57]
[40 56]
[41 55]
[45 54]
[46 53]
[47 52]
[96 139]
[97 138]
[98 137]
[99 136]
[100 135]
[101 134]
[102 131]
[103 130]
[104 129]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
