%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCUCUCUUAUUUGAUAUCAGAGAGCCCAAUGGAGCCUUCUGAAGUACCUAGUCAGAUUAGCAAAGAUAAUUUUUUAGAAGUUCCUAAUUUAUCUGACUCUCUUUGUGAAGAUGAAGAAGUUACUUUCC\
) } def
/len { sequence length } bind def

/coor [
[73.71768951 157.19993591]
[64.73884583 152.14636230]
[54.91593170 163.48260498]
[45.09302139 174.81884766]
[35.27011108 186.15509033]
[25.44719887 197.49133301]
[15.62428761 208.82757568]
[5.80137682 220.16381836]
[6.74428463 235.71209717]
[-3.37903333 247.06872559]
[-18.20774269 247.87182617]
[-28.03065300 259.20806885]
[-37.85356522 270.54431152]
[-43.65647125 286.47424316]
[-60.57025528 285.30795288]
[-64.13175201 268.73229980]
[-49.18980789 260.72140503]
[-39.36689758 249.38516235]
[-29.54398537 238.04891968]
[-30.85940552 223.25685120]
[-21.05906677 211.62034607]
[-5.53486681 210.34091187]
[4.28804445 199.00466919]
[14.11095524 187.66842651]
[23.93386650 176.33218384]
[33.75677872 164.99594116]
[43.57968903 153.65969849]
[53.40259933 142.32345581]
[42.42507935 125.45035553]
[37.33506012 105.97476196]
[38.65304184 85.88819122]
[46.24424744 67.24467468]
[59.33241653 51.95065308]
[76.57917786 41.57006454]
[72.69689178 27.08117867]
[68.81460571 12.59229183]
[64.93231964 -1.89659595]
[61.05003357 -16.38548279]
[55.75733948 -23.95239258]
[57.25214767 -31.26544380]
[53.71576309 -45.84261703]
[50.17938232 -60.41979218]
[46.64299774 -74.99696350]
[43.10661316 -89.57414246]
[39.57022858 -104.15131378]
[36.03384399 -118.72848511]
[32.49745941 -133.30566406]
[19.71352768 -135.78192139]
[8.87385750 -142.91224670]
[1.59091723 -153.59318542]
[-1.06824887 -166.19638062]
[1.26176870 -178.81681824]
[8.19498825 -189.56072998]
[18.65744591 -196.82980347]
[15.81867790 -211.55873108]
[12.97990990 -226.28767395]
[-1.69193709 -230.64605713]
[-12.64967728 -241.33186340]
[-17.37530136 -255.88957214]
[-14.78289795 -270.97393799]
[-5.46817970 -283.11868286]
[8.42839718 -289.53302002]
[23.71350288 -288.74298096]
[36.87472916 -280.93011475]
[44.88772583 -267.88980103]
[45.91116333 -252.61853027]
[39.70986557 -238.62559509]
[27.70883942 -229.12643433]
[30.54760933 -214.39750671]
[33.38637543 -199.66857910]
[49.78406143 -194.69013977]
[61.50470734 -182.06747437]
[65.29464722 -165.17387390]
[60.03605270 -148.58555603]
[47.07463455 -136.84204102]
[50.61101913 -122.26486969]
[54.14740372 -107.68769836]
[57.68378448 -93.11051941]
[61.22016907 -78.53334808]
[64.75655365 -63.95617676]
[68.29293823 -49.37900162]
[71.82932281 -34.80183029]
[75.53891754 -20.26776886]
[79.42120361 -5.77888155]
[83.30348969 8.71000576]
[87.18577576 23.19889259]
[91.06806183 37.68778229]
[104.66165161 37.22372055]
[118.03759766 39.69048691]
[130.57142639 44.97291565]
[141.67797852 52.82438278]
[150.83869934 62.87833405]
[157.62594604 74.66537476]
[161.72280884 87.63520813]
[162.93801880 101.18231964]
[161.21485901 114.67423248]
[156.63377380 127.48104858]
[169.25257874 135.59066772]
[181.87138367 143.70027161]
[194.49018860 151.80989075]
[207.10897827 159.91949463]
[216.11528015 161.95845032]
[219.92839050 168.37525940]
[232.35063171 176.78286743]
[244.77287292 185.19049072]
[257.19509888 193.59809875]
[269.61734009 202.00572205]
[282.03958130 210.41333008]
[294.46182251 218.82093811]
[310.84887695 219.45050049]
[318.25680542 234.08111572]
[309.06497192 247.66204834]
[292.72912598 246.22241211]
[286.05422974 231.24317932]
[273.63198853 222.83557129]
[261.20974731 214.42794800]
[248.78749084 206.02033997]
[236.36526489 197.61273193]
[223.94302368 189.20510864]
[211.52078247 180.79750061]
[198.99937439 172.53829956]
[186.38056946 164.42869568]
[173.76176453 156.31907654]
[161.14295959 148.20945740]
[148.52415466 140.09985352]
[141.33277893 147.47834778]
[133.03408813 153.58489990]
[123.85040283 158.25590515]
[114.02776337 161.36622620]
[103.82932281 162.83255005]
[93.52829742 162.61557007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[11 19]
[12 18]
[13 17]
[34 87]
[35 86]
[36 85]
[37 84]
[38 83]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[46 76]
[47 75]
[54 70]
[55 69]
[56 68]
[97 125]
[98 124]
[99 123]
[100 122]
[101 121]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
