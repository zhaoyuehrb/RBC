%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGUCCCCAGGCGCUAGCUGACUGGGGUGGUUGGGACCGUUAGCUCGGCAGGCUGGCAGGCUCCGGGGCGCUACUCCAUUGGCGGCCGGGAUGGAGACUAUGCGAGCGCAGCGGCUGCAGCCUGGUGUGGGCACCAGCGGGAGGGGCACUCUCCGAGCGCUGCGGCCCGGAGUGACUGGGGCCGCGGCUG\
) } def
/len { sequence length } bind def

/coor [
[216.41160583 266.75653076]
[209.09667969 255.56207275]
[205.74363708 242.80905151]
[206.58296204 229.83576965]
[211.41133118 217.96586609]
[199.85984802 208.39698792]
[188.30838013 198.82809448]
[176.75691223 189.25921631]
[164.97526550 179.97520447]
[152.97047424 170.98159790]
[140.96568298 161.98799133]
[128.96089172 152.99438477]
[116.95610046 144.00077820]
[104.95130920 135.00717163]
[89.99153137 133.90940857]
[76.80248260 141.05427551]
[63.61343765 148.19912720]
[50.48297882 155.45109558]
[37.41197586 162.80969238]
[24.34097290 170.16828918]
[11.26996994 177.52687073]
[-1.80103290 184.88546753]
[-14.87203598 192.24406433]
[-27.94303894 199.60264587]
[-33.89719772 206.55029297]
[-41.28723145 206.97265625]
[-54.47627640 214.11752319]
[-54.21128082 229.42074585]
[-61.09875488 243.08898926]
[-73.55600739 251.98143005]
[-88.72045898 254.05462646]
[-103.10741425 248.83218384]
[-113.41087341 237.51417542]
[-117.26316833 222.70140076]
[-113.77906799 207.79771423]
[-103.75920105 196.22789001]
[-89.50605011 190.65058899]
[-74.29489136 192.34742737]
[-61.62113953 200.92848206]
[-48.43209076 193.78361511]
[-35.30163193 186.53164673]
[-22.23062897 179.17304993]
[-9.15962505 171.81446838]
[3.91137791 164.45587158]
[16.98237991 157.09727478]
[30.05338287 149.73869324]
[43.12438583 142.38009644]
[47.41725540 136.34999084]
[56.46857834 135.01008606]
[69.65762329 127.86522675]
[82.84667206 120.72035980]
[73.29042816 108.05281067]
[72.34189606 91.63649750]
[80.95657349 76.95811462]
[73.91929626 63.71135330]
[66.88201141 50.46459198]
[53.57468414 41.90739059]
[54.43660355 27.03774452]
[47.39932251 13.79098511]
[40.36203766 0.54422450]
[33.21717834 -12.64482212]
[25.96520996 -25.77528191]
[18.60661888 -38.84628677]
[11.14188766 -51.85696411]
[3.67715788 -64.86764526]
[-3.78757238 -77.87832642]
[-11.25230217 -90.88900757]
[-19.13656998 -103.64981842]
[-27.43202019 -116.14723969]
[-41.51034927 -123.36605072]
[-42.10248947 -138.24888611]
[-50.39793777 -150.74630737]
[-58.69338989 -163.24372864]
[-66.98883820 -175.74114990]
[-75.28428650 -188.23857117]
[-90.82312012 -191.12306213]
[-99.70208740 -204.19744873]
[-96.65346527 -219.70491028]
[-83.48593903 -228.44514465]
[-68.01157379 -225.23274231]
[-59.41103745 -211.97355652]
[-62.78686523 -196.53401184]
[-54.49141693 -184.03659058]
[-46.19596863 -171.53916931]
[-37.90052032 -159.04174805]
[-29.60507011 -146.54432678]
[-16.12008667 -140.21942139]
[-14.93459892 -124.44268799]
[-6.63914919 -111.94526672]
[-3.90530324 -111.26324463]
[-1.27915239 -109.44893646]
[0.80361110 -106.53871918]
[1.92882383 -102.72693634]
[1.75837779 -98.35373688]
[9.22310829 -85.34305573]
[16.68783760 -72.33237457]
[24.15256882 -59.32169724]
[31.61729813 -46.31101608]
[37.68214798 -42.06736374]
[39.09566879 -33.02724838]
[46.34763718 -19.89678955]
[52.34260941 -15.55498409]
[53.60879898 -6.49305773]
[60.64608002 6.75370264]
[67.68336487 20.00046349]
[80.48733521 27.61016655]
[80.12876892 43.42731094]
[87.16605377 56.67406845]
[94.20333862 69.92082977]
[109.17900085 70.77494812]
[117.67676544 58.41420746]
[126.17453766 46.05346680]
[134.67230225 33.69272614]
[138.66297913 17.21513748]
[155.60134888 16.48840332]
[160.98869324 32.56362915]
[147.03305054 42.19049454]
[138.53527832 54.55123520]
[130.03750610 66.91197968]
[121.53974152 79.27271271]
[128.15711975 103.67580414]
[113.94491577 123.00238037]
[125.94970703 131.99598694]
[137.95449829 140.98959351]
[149.95928955 149.98320007]
[161.96408081 158.97680664]
[173.96887207 167.97041321]
[179.18206787 168.59231567]
[183.22409058 170.92608643]
[185.63760376 174.23503113]
[186.32579041 177.70774841]
[197.87727356 187.27662659]
[209.42874146 196.84550476]
[220.98020935 206.41439819]
[237.33877563 197.39981079]
[256.43725586 196.74246216]
[274.16067505 204.97396851]
[286.51440430 220.66885376]
[290.52276611 240.67680359]
[305.34378052 242.98713684]
[322.35101318 235.94601440]
[335.58255005 247.46414185]
[350.43917847 249.53292847]
[365.29583740 251.60171509]
[380.15249634 253.67050171]
[395.00915527 255.73928833]
[409.86581421 257.80807495]
[426.38748169 254.00404358]
[434.61648560 268.82696533]
[422.65087891 280.83779907]
[407.79702759 272.66473389]
[392.94036865 270.59594727]
[378.08370972 268.52716064]
[363.22705078 266.45837402]
[348.37039185 264.38958740]
[333.51376343 262.32080078]
[323.66717529 269.36361694]
[311.26446533 267.75143433]
[303.03341675 257.80813599]
[288.21243286 255.49780273]
[280.01895142 268.06231689]
[288.10989380 280.69311523]
[296.20080566 293.32391357]
[304.29174805 305.95471191]
[312.38269043 318.58547974]
[320.47360229 331.21627808]
[328.56454468 343.84707642]
[336.65545654 356.47784424]
[344.74639893 369.10864258]
[352.83734131 381.73944092]
[368.17599487 380.95120239]
[381.84646606 387.95217896]
[390.17147827 400.85913086]
[390.91162109 416.20016479]
[383.86785889 429.84863281]
[370.93484497 438.13314819]
[355.59155273 438.82522583]
[341.96524048 431.73870850]
[333.72131348 418.77978516]
[333.07733154 403.43441772]
[340.20654297 389.83038330]
[332.11560059 377.19958496]
[324.02468872 364.56878662]
[315.93374634 351.93798828]
[307.84283447 339.30722046]
[299.75189209 326.67642212]
[291.66094971 314.04562378]
[283.57003784 301.41485596]
[275.47909546 288.78405762]
[267.38818359 276.15325928]
[253.87953186 280.25213623]
[239.95390320 279.87561035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 134]
[6 133]
[7 132]
[8 131]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[15 51]
[16 50]
[17 49]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[26 40]
[27 39]
[54 109]
[55 108]
[56 107]
[58 105]
[59 104]
[60 103]
[61 101]
[62 100]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[68 89]
[69 88]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[110 120]
[111 119]
[112 118]
[113 117]
[139 160]
[140 159]
[142 156]
[143 155]
[144 154]
[145 153]
[146 152]
[147 151]
[161 190]
[162 189]
[163 188]
[164 187]
[165 186]
[166 185]
[167 184]
[168 183]
[169 182]
[170 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
