%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCCUGGGUGCCACGGUCAUGUGACUUCGGCAAGAUGGCUGCCCUGACAGCGGAGCAUUUUGCAGCACUCCAGAGCCUGCUCAAGAAUGCCGUAUAAAUGGAAUAAUACAGCCUCCUCGAAAGAUGUUGUCAGACAGCUGUGUCAAGAAAGCUUUUCCAGUUCAGCCCUUGGCUUGAAAAAACUCU\
) } def
/len { sequence length } bind def

/coor [
[45.51047134 189.05000305]
[52.11353683 175.58154297]
[63.08114243 165.34867859]
[76.97442627 159.69386292]
[91.97068787 159.35899353]
[106.10253143 164.38800049]
[117.51627350 174.12144470]
[112.64578247 159.93418884]
[107.77529144 145.74693298]
[102.90480042 131.55967712]
[98.03430939 117.37241364]
[83.40645599 114.05187225]
[72.88790131 124.74580383]
[62.36935425 135.43972778]
[51.85079956 146.13365173]
[51.81088257 161.71043396]
[40.99123383 172.40576172]
[26.14139938 172.27171326]
[15.62284756 182.96563721]
[5.10429573 193.65956116]
[-5.41425610 204.35348511]
[-9.00153923 220.35546875]
[-24.73192787 224.99087524]
[-36.42334747 213.49118042]
[-32.04866409 197.68630981]
[-16.10818291 193.83493042]
[-5.58963108 183.14100647]
[4.92892075 172.44708252]
[15.44747257 161.75315857]
[15.06791210 146.90756226]
[25.58288002 135.91256714]
[41.15687561 135.61509705]
[51.67542648 124.92117310]
[62.19397736 114.22724915]
[72.71253204 103.53332520]
[78.37248993 96.34487152]
[85.37306213 92.68718719]
[92.19056702 92.58045197]
[90.21218109 77.71149445]
[88.23380280 62.84253311]
[86.25541687 47.97357178]
[84.27703857 33.10461044]
[82.29865265 18.23565102]
[80.32027435 3.36668944]
[70.56236267 -5.08608532]
[69.22920990 -17.52370071]
[76.49359894 -27.21018219]
[74.76132965 -42.10982132]
[73.02906036 -57.00946045]
[71.29679108 -71.90909576]
[69.56452179 -86.80873871]
[67.83225250 -101.70837402]
[66.09998322 -116.60801697]
[64.36771393 -131.50765991]
[61.53263474 -146.23728943]
[57.61043549 -160.71542358]
[53.68823624 -175.19355774]
[49.76603699 -189.67169189]
[44.42912674 -203.69017029]
[37.72999573 -217.11109924]
[31.03086472 -230.53204346]
[24.33173180 -243.95298767]
[17.63260078 -257.37393188]
[10.82274246 -270.73901367]
[3.90262508 -284.04736328]
[-3.01749229 -297.35571289]
[-16.24878883 -306.02999878]
[-15.25569439 -320.89144897]
[-22.17581177 -334.19979858]
[-29.09592819 -347.50814819]
[-42.32722473 -356.18243408]
[-41.33412933 -371.04388428]
[-48.25424957 -384.35223389]
[-63.05631256 -389.20370483]
[-69.88471222 -402.79882812]
[-65.16837311 -416.88043213]
[-72.08848572 -430.18878174]
[-79.00860596 -443.49713135]
[-93.11886597 -451.85372925]
[-92.66643524 -468.24661255]
[-78.11673737 -475.81222534]
[-64.43725586 -466.76766968]
[-65.70026398 -450.41723633]
[-58.78014755 -437.10888672]
[-51.86003113 -423.80056763]
[-37.62374496 -419.57400513]
[-30.41617966 -406.17602539]
[-34.94590759 -391.27236938]
[-28.02578926 -377.96401978]
[-15.28946495 -370.24163818]
[-15.78758717 -354.42825317]
[-8.86746979 -341.11993408]
[-1.94735193 -327.81158447]
[10.78897190 -320.08917236]
[10.29084969 -304.27581787]
[17.21096802 -290.96746826]
[24.13108444 -277.65914917]
[30.01691437 -273.16699219]
[31.05353928 -264.07305908]
[37.75267029 -250.65211487]
[44.45180511 -237.23117065]
[51.15093613 -223.81024170]
[57.85006714 -210.38929749]
[59.69664001 -225.27520752]
[67.73816681 -237.93750000]
[80.42632294 -245.93817139]
[95.31810760 -247.73675537]
[109.54621887 -242.98693848]
[120.37116241 -232.60327148]
[125.70867920 -218.58502197]
[124.53107452 -203.63133240]
[117.06508636 -190.62136841]
[104.74822998 -182.06011963]
[89.95201111 -179.59596252]
[75.52532959 -183.70338440]
[64.24417114 -193.59390259]
[68.16636658 -179.11576843]
[72.08856964 -164.63763428]
[76.01076508 -150.15950012]
[90.15727234 -145.17187500]
[102.29253387 -153.98866272]
[108.46472931 -169.18194580]
[124.74353790 -171.16499329]
[134.38270569 -157.89779663]
[127.46630096 -143.02853394]
[111.10930634 -141.85340881]
[98.97405243 -133.03662109]
[88.43198395 -131.00395203]
[79.26734924 -133.23992920]
[80.99961853 -118.34028625]
[82.73188782 -103.44064331]
[84.46415710 -88.54100800]
[86.19642639 -73.64136505]
[87.92869568 -58.74172974]
[89.66096497 -43.84209061]
[91.39323425 -28.94245148]
[102.60942078 -15.45557785]
[95.18923187 1.38830686]
[97.16761780 16.25726700]
[99.14599609 31.12622833]
[101.12438202 45.99518967]
[103.10276031 60.86415100]
[105.08114624 75.73310852]
[107.05952454 90.60207367]
[110.71827698 76.05513000]
[119.51817322 63.90763092]
[132.20030212 55.89741135]
[146.95033264 53.17042160]
[161.65812683 56.11679077]
[174.21954346 64.31500244]
[182.83755493 76.59222412]
[186.27923584 91.19203949]
[184.05223083 106.02580261]
[176.47512817 118.97136688]
[164.63192749 128.17672729]
[150.21693420 132.32495117]
[135.29235840 130.82258606]
[121.99333954 123.88457489]
[112.22156525 112.50192261]
[117.09205627 126.68917847]
[121.96254730 140.87643433]
[126.83303833 155.06369019]
[131.70353699 169.25096130]
[138.29148865 182.72682190]
[146.49571228 195.28431702]
[154.69992065 207.84181213]
[162.90414429 220.39930725]
[171.21191406 232.88854980]
[179.62263489 245.30868530]
[188.03335571 257.72882080]
[201.92102051 267.45349121]
[196.42088318 283.49047852]
[179.48803711 282.64474487]
[175.61322021 266.13955688]
[167.20249939 253.71940613]
[158.79177856 241.29928589]
[152.42655945 237.51692200]
[150.34664917 228.60353088]
[142.14242554 216.04603577]
[133.93820190 203.48854065]
[125.73398590 190.93104553]
[126.40464783 205.91604614]
[121.69342804 220.15698242]
[112.21839905 231.78556824]
[99.22261810 239.27621460]
[84.41103363 241.64619446]
[69.72679901 238.58460999]
[57.09638214 230.49308777]
[48.17679214 218.43321228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 163]
[8 162]
[9 161]
[10 160]
[11 159]
[12 35]
[13 34]
[14 33]
[15 32]
[18 29]
[19 28]
[20 27]
[21 26]
[38 144]
[39 143]
[40 142]
[41 141]
[42 140]
[43 139]
[44 138]
[47 136]
[48 135]
[49 134]
[50 133]
[51 132]
[52 131]
[53 130]
[54 129]
[55 119]
[56 118]
[57 117]
[58 116]
[59 103]
[60 102]
[61 101]
[62 100]
[63 99]
[64 97]
[65 96]
[66 95]
[68 93]
[69 92]
[70 91]
[72 89]
[73 88]
[76 85]
[77 84]
[78 83]
[120 127]
[121 126]
[164 181]
[165 180]
[166 179]
[167 178]
[168 176]
[169 175]
[170 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
