%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCUCUUCCUCCCUUCCUUCUUUCCUUGCUUUCGCCGCGCACUCCGCCGCCAUGGAGCAGCGCCGCGUCACCGACUUCUUCGCGCGCCGCCGCCCCGGGCCCCCCCGCAUCGCGCCGCCCAAGCUGGCCUGCCGCACCCCCAGCCCCGCCA\
) } def
/len { sequence length } bind def

/coor [
[84.15880585 348.27825928]
[78.79918671 362.28808594]
[70.93000031 375.05819702]
[60.82524109 386.14395142]
[48.83678436 395.15930176]
[35.38208008 401.79037476]
[20.92963982 405.80621338]
[5.98272133 407.06701660]
[-8.93820572 405.52883911]
[-23.31357384 401.24530029]
[-36.64281082 394.36550903]
[-48.46177673 385.12905884]
[-58.35891342 373.85757446]
[-65.98959351 360.94351196]
[-71.08810425 346.83660889]
[-73.47691345 332.02801514]
[-73.07283020 317.03347778]
[-69.88993073 302.37506104]
[-64.03904724 288.56320190]
[-55.72391510 276.07888794]
[-45.23408127 265.35678101]
[-32.93481445 256.77026367]
[-19.25439072 250.61836243]
[-4.66918325 247.11526489]
[10.31293011 246.38294983]
[25.17025185 248.44692993]
[39.38542938 253.23532104]
[52.46346664 260.58139038]
[63.94897461 270.22937012]
[73.44200897 281.84326172]
[80.61319733 295.02142334]
[81.52471161 280.04913330]
[82.43622589 265.07687378]
[83.34774017 250.10458374]
[73.31358337 239.15692139]
[74.02470398 223.95991516]
[85.57565308 213.50939941]
[86.48716736 198.53712463]
[79.53757477 185.36318970]
[88.09917450 172.05870056]
[89.01068878 157.08642578]
[89.92220306 142.11415100]
[90.83371735 127.14186096]
[78.51421356 118.94894409]
[71.92530823 105.70204163]
[72.82437134 90.93431091]
[80.97159576 78.58454895]
[94.19400787 71.94662476]
[95.10552216 56.97434235]
[81.00228882 42.74166489]
[81.80506134 23.02408409]
[96.55888367 10.37922287]
[96.55888367 -4.62077761]
[96.55888367 -19.62077713]
[93.41469574 -28.26110458]
[96.71398163 -34.92401123]
[97.01798248 -49.92092896]
[97.32198334 -64.91784668]
[89.86596680 -78.87200165]
[97.85961914 -91.43984222]
[98.16362000 -106.43676758]
[90.70759583 -120.39091492]
[98.70125580 -132.95875549]
[99.00525665 -147.95567322]
[99.30925751 -162.95259094]
[91.85323334 -176.90675354]
[99.84689331 -189.47459412]
[100.15089417 -204.47151184]
[100.45490265 -219.46842957]
[100.75890350 -234.46534729]
[101.06290436 -249.46226501]
[87.26110840 -255.89889526]
[77.27544403 -267.39700317]
[72.83599854 -281.96447754]
[74.71193695 -297.07739258]
[82.57823181 -310.11740112]
[95.07199860 -318.82519531]
[110.02862549 -321.69207764]
[124.85678864 -318.22140503]
[136.98741150 -309.01446533]
[144.31878662 -295.66641235]
[145.58071899 -280.48986816]
[140.55456543 -266.11425781]
[130.11114502 -255.03027344]
[116.05982971 -249.15826416]
[115.75582123 -234.16134644]
[115.45182037 -219.16442871]
[115.14781189 -204.16751099]
[114.84381104 -189.17059326]
[122.32157898 -176.28912354]
[114.30618286 -162.64859009]
[114.00217438 -147.65167236]
[113.69817352 -132.65475464]
[121.17594147 -119.77328491]
[113.16053772 -106.13275909]
[112.85653687 -91.13584137]
[120.33430481 -78.25437164]
[112.31890869 -64.61384583]
[112.01490021 -49.61692810]
[111.71089935 -34.62000656]
[111.55888367 -19.62077713]
[111.55888367 -4.62077761]
[111.55888367 10.37922287]
[120.58825684 15.47052097]
[126.71208191 23.93439865]
[128.75523376 34.26226044]
[126.27753448 44.57798004]
[119.66634369 52.97871017]
[110.07779694 57.88585663]
[109.16628265 72.85813904]
[121.48578644 81.05105591]
[128.07469177 94.29795837]
[127.17562866 109.06568909]
[119.02840424 121.41545105]
[105.80599213 128.05337524]
[104.89447784 143.02565002]
[103.98297119 157.99794006]
[103.07145691 172.97021484]
[109.95585632 187.21505737]
[101.45944977 199.44863892]
[100.54793549 214.42091370]
[110.74581909 226.19549561]
[109.60813141 241.36653137]
[98.32001495 251.01609802]
[97.40850067 265.98837280]
[96.49698639 280.96066284]
[95.58547211 295.93292236]
[99.34526062 310.45410156]
[107.40831757 323.10269165]
[115.47137451 335.75131226]
[123.53443146 348.39990234]
[136.07066345 347.51031494]
[147.71949768 352.03121948]
[156.27384949 361.03970337]
[160.14132690 372.76910400]
[158.64042664 384.95516968]
[152.11973572 395.27316284]
[159.66357422 408.23812866]
[175.10246277 410.72305298]
[185.29289246 422.58428955]
[185.42326355 438.22134399]
[175.43200684 450.25085449]
[160.03669739 452.99285889]
[146.50653076 445.15264893]
[141.23004150 430.43215942]
[146.69860840 415.78195190]
[139.15476990 402.81698608]
[121.56628418 401.88024902]
[107.91251373 390.50729370]
[103.73885345 373.07351685]
[110.88582611 356.46295166]
[102.82276917 343.81436157]
[94.75971985 331.16574097]
[86.69666290 318.51715088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 127]
[32 126]
[33 125]
[34 124]
[37 121]
[38 120]
[40 118]
[41 117]
[42 116]
[43 115]
[48 110]
[49 109]
[52 103]
[53 102]
[54 101]
[56 100]
[57 99]
[58 98]
[60 96]
[61 95]
[63 93]
[64 92]
[65 91]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[128 154]
[129 153]
[130 152]
[131 151]
[137 147]
[138 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
