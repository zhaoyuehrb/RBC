%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCGCAGCUUCCGGCACGGCCUUCAAGCGCGGGACGCGACAAAGUCAUGGACCGCAACCCCUCGCCGCCGCCGCCGGGUCGCGACAAGGAGGAGGAGGAGGAGGUGGCCGGUGGAGACUGCAUAGGGAGCACGGUCUACAGCAAAC\
) } def
/len { sequence length } bind def

/coor [
[260.56555176 485.38613892]
[255.37014771 471.31460571]
[250.17472839 457.24310303]
[244.97930908 443.17156982]
[239.78388977 429.10006714]
[224.24206543 422.75106812]
[217.94792175 406.82412720]
[225.23155212 390.95318604]
[219.74452209 376.99279785]
[214.25747681 363.03240967]
[208.77044678 349.07202148]
[203.13848877 335.16946411]
[197.36222839 321.32623291]
[191.58595276 307.48303223]
[185.52293396 293.76296997]
[179.17581177 280.17202759]
[172.82867432 266.58108521]
[166.48155212 252.99012756]
[160.13441467 239.39916992]
[153.64625549 225.87498474]
[147.01776123 212.41902161]
[132.87693787 207.88327026]
[125.96302032 194.33143616]
[130.81640625 179.52999878]
[124.18790436 166.07403564]
[117.55941010 152.61807251]
[110.93090820 139.16210938]
[104.30241394 125.70613861]
[95.03223419 125.58588409]
[86.39060211 122.22837830]
[79.47090912 116.05841064]
[75.14865875 107.85665894]
[73.97072601 98.66083527]
[59.84592819 93.61207581]
[45.72112274 88.56332397]
[31.59632111 83.51456451]
[17.44584465 90.02622986]
[3.19320726 84.70486450]
[-2.92746592 71.17441559]
[-17.05226898 66.12565613]
[-32.65150070 68.76660156]
[-42.03192902 57.19695282]
[-56.15673447 52.14819717]
[-70.28153992 47.09944153]
[-87.23161316 47.46180344]
[-92.27205658 31.27445412]
[-78.11265564 21.94988441]
[-65.23278046 32.97463608]
[-51.10797882 38.02339172]
[-36.98317337 43.07215118]
[-22.39424324 40.07008743]
[-12.00351238 52.00085831]
[2.12129045 57.04961395]
[15.43198013 50.46469498]
[29.82846069 55.38364029]
[36.64507675 69.38976288]
[50.76987839 74.43852234]
[64.89468384 79.48727417]
[79.01948547 84.53603363]
[84.19146729 79.27787018]
[90.62935638 75.67907715]
[97.81761169 74.02783203]
[100.91593170 59.35130692]
[103.86141968 44.64334488]
[106.65373993 29.90554047]
[109.44606781 15.16773415]
[112.23838806 0.42992786]
[100.04088593 -15.45929909]
[103.30734253 -34.91559219]
[119.52010345 -45.61685562]
[121.38771820 -60.50013351]
[123.25533295 -75.38341522]
[117.29646301 -90.03955841]
[126.55819702 -101.70443726]
[128.42581177 -116.58772278]
[130.29342651 -131.47099304]
[123.43075562 -146.36515808]
[133.11778259 -159.59744263]
[149.38932800 -157.55563354]
[155.50660706 -142.34014893]
[145.17669678 -129.60337830]
[143.30909729 -114.72010803]
[141.44148254 -99.83682251]
[147.53393555 -86.24523926]
[138.13861084 -73.51580048]
[136.27099609 -58.63252258]
[134.40338135 -43.74924088]
[142.73619080 -37.56670380]
[147.75996399 -28.39549255]
[148.49497986 -17.88301468]
[144.73893738 -7.95019531]
[137.11647034 -0.44047487]
[126.97619629 3.22225237]
[124.18386841 17.96005821]
[121.39154816 32.69786453]
[118.59922028 47.43566895]
[120.45620728 54.63964462]
[115.59246063 62.44963074]
[112.49414062 77.12615204]
[125.86088562 96.75487518]
[117.75837708 119.07763672]
[124.38687897 132.53359985]
[131.01538086 145.98956299]
[137.64387512 159.44554138]
[144.27236938 172.90150452]
[158.96520996 178.07432556]
[165.49577332 191.81501770]
[160.47372437 205.79051208]
[167.10221863 219.24649048]
[173.74484253 225.61260986]
[173.72537231 233.05204773]
[180.07249451 246.64299011]
[186.41963196 260.23394775]
[192.76675415 273.82489014]
[199.11389160 287.41583252]
[204.38645935 291.57608032]
[206.41246033 296.97299194]
[205.42916870 301.70675659]
[211.20544434 315.54998779]
[216.98171997 329.39318848]
[223.21430969 336.16125488]
[222.73083496 343.58499146]
[228.21788025 357.54537964]
[233.70491028 371.50576782]
[239.19194031 385.46615601]
[252.11183167 389.40744019]
[260.26724243 399.92965698]
[260.84405518 413.03469849]
[253.85540771 423.90463257]
[259.05084229 437.97616577]
[264.24624634 452.04766846]
[269.44165039 466.11920166]
[274.63708496 480.19070435]
[289.75247192 479.57464600]
[304.31793213 483.66156006]
[316.90643311 492.05114746]
[326.28469849 503.92141724]
[331.53393555 518.10943604]
[332.13989258 533.22528076]
[328.04318237 547.78796387]
[319.64520264 560.37084961]
[307.76864624 569.74114990]
[293.57708740 574.98089600]
[278.46084595 575.57672119]
[263.90090942 571.47027588]
[251.32366943 563.06384277]
[241.96131897 551.18103027]
[236.73109436 536.98596191]
[236.14538574 521.86932373]
[240.26159668 507.31213379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 131]
[4 130]
[5 129]
[8 125]
[9 124]
[10 123]
[11 122]
[12 120]
[13 119]
[14 118]
[15 115]
[16 114]
[17 113]
[18 112]
[19 111]
[20 109]
[21 108]
[24 105]
[25 104]
[26 103]
[27 102]
[28 101]
[33 59]
[34 58]
[35 57]
[36 56]
[39 53]
[40 52]
[42 50]
[43 49]
[44 48]
[62 99]
[63 98]
[64 96]
[65 95]
[66 94]
[67 93]
[70 87]
[71 86]
[72 85]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
