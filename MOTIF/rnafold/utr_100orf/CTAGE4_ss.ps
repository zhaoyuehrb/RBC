%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUUGUGGCCAGUGUUACUGCGGUGACCGCCAGAGCAGCCUCGACGCUAUGGAGGAGCCUGGUGCUACCCCUCAGCCCUACCUGGGGCUGGUCCUGGAGGAGCUACGCAGAGUUGUGGCAGCACUACCUGAGAGUAUGAGACCAGAUG\
) } def
/len { sequence length } bind def

/coor [
[-18.41933060 159.03868103]
[-29.56650352 169.07563782]
[-40.71367645 179.11259460]
[-51.86084747 189.14955139]
[-63.00801849 199.18650818]
[-68.08628082 214.17056274]
[-82.72175598 216.93684387]
[-93.86892700 226.97380066]
[-105.01609802 237.01075745]
[-116.16326904 247.04771423]
[-115.39143372 256.56326294]
[-119.06797791 265.22375488]
[-126.23580170 271.10260010]
[-135.17759705 272.95709229]
[-143.82626343 270.48934937]
[-155.58166504 279.80657959]
[-167.33706665 289.12380981]
[-179.09246826 298.44100952]
[-190.84786987 307.75823975]
[-196.37841797 323.19665527]
[-212.55990601 325.85964966]
[-222.74620056 313.00775146]
[-216.45852661 297.86187744]
[-200.16508484 296.00283813]
[-188.40968323 286.68560791]
[-176.65428162 277.36840820]
[-164.89888000 268.05117798]
[-153.14347839 258.73394775]
[-147.36650085 238.95733643]
[-126.20022583 235.90054321]
[-115.05305481 225.86358643]
[-103.90588379 215.82662964]
[-92.75871277 205.78967285]
[-88.47776794 191.52352905]
[-73.04498291 188.03933716]
[-61.89780807 178.00238037]
[-50.75063324 167.96542358]
[-39.60346222 157.92846680]
[-28.45628929 147.89151001]
[-30.64753532 133.05241394]
[-44.21994019 126.66573334]
[-57.79234695 120.27904510]
[-71.36475372 113.89234924]
[-84.38262177 122.17115784]
[-99.80968475 122.07489777]
[-112.72322083 113.63427734]
[-119.00257874 99.54267883]
[-116.64402008 84.29666901]
[-106.40016937 72.76119995]
[-91.53979492 68.61720276]
[-76.80478668 73.18699646]
[-66.89703369 85.01239777]
[-64.97806549 100.31994629]
[-51.40565872 106.70663452]
[-37.83325195 113.09332275]
[-24.26084518 119.48001099]
[-11.69933128 106.39397430]
[5.06940556 101.42300415]
[21.46804428 105.25679779]
[33.34035873 116.26684570]
[47.16830444 110.45410919]
[60.99625015 104.64138031]
[74.82419586 98.82864380]
[88.65214539 93.01590729]
[99.25875092 82.40930939]
[105.07147980 68.58135986]
[110.88421631 54.75341415]
[111.33510590 45.56226730]
[116.96620178 40.69878006]
[123.06724548 26.99559784]
[129.02445984 13.22927761]
[134.83720398 -0.59866965]
[140.06578064 -14.65789986]
[144.70103455 -28.92374802]
[149.33628845 -43.18959427]
[153.97154236 -57.45544434]
[158.60679626 -71.72129059]
[163.24205017 -85.98713684]
[167.87730408 -100.25298309]
[172.51257324 -114.51883698]
[168.57559204 -130.43838501]
[180.57981873 -141.61114502]
[196.17633057 -136.54353333]
[199.32077026 -120.44866943]
[186.77841187 -109.88357544]
[182.14315796 -95.61772919]
[177.50790405 -81.35188293]
[172.87265015 -67.08603668]
[168.23739624 -52.82018661]
[163.60214233 -38.55434036]
[158.96688843 -24.28849220]
[154.33163452 -10.02264500]
[155.54359436 -7.42518663]
[155.76461792 -4.17591429]
[154.73521423 -0.66305441]
[152.34613037 2.63658357]
[148.66514587 5.21406412]
[142.85241699 19.04201126]
[143.16183472 26.47618866]
[136.77043152 33.09664536]
[130.66938782 46.79982758]
[124.71216583 60.56614685]
[118.89942932 74.39409637]
[113.08669281 88.22204590]
[119.04391479 101.98836517]
[133.10314941 107.21694183]
[147.16236877 112.44552612]
[166.80982971 108.13446045]
[178.58309937 123.42449951]
[192.84893799 128.05975342]
[207.11479187 132.69500732]
[216.31143188 132.37522888]
[221.62905884 137.57960510]
[235.79470825 142.51260376]
[251.37181091 139.74409485]
[260.84658813 151.23658752]
[275.01223755 156.16958618]
[289.17788696 161.10258484]
[305.17639160 157.49986267]
[316.09530640 169.73544312]
[310.70217896 185.22241211]
[294.54501343 188.02909851]
[284.24490356 175.26823425]
[270.07925415 170.33523560]
[255.91360474 165.40223694]
[241.34973145 168.52359009]
[230.86170959 156.67823792]
[216.69606018 151.74523926]
[202.47953796 146.96084595]
[188.21368408 142.32559204]
[173.94784546 137.69033813]
[165.22309875 143.16290283]
[154.70726013 142.88832092]
[145.91911316 136.71476746]
[141.93379211 126.50475311]
[127.87456512 121.27616882]
[113.81533051 116.04759216]
[107.84015656 116.97771454]
[102.49607086 116.03279114]
[98.30295563 113.64617920]
[95.58897400 110.37815857]
[94.46488190 106.84385681]
[80.63693237 112.65659332]
[66.80898285 118.46932220]
[52.98103714 124.28205872]
[39.15309143 130.09478760]
[38.50196457 146.11541748]
[29.77791023 160.18067932]
[14.80850601 168.38133240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[7 33]
[8 32]
[9 31]
[10 30]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[40 56]
[41 55]
[42 54]
[43 53]
[60 146]
[61 145]
[62 144]
[63 143]
[64 142]
[65 104]
[66 103]
[67 102]
[69 101]
[70 100]
[71 98]
[72 97]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
[105 137]
[106 136]
[107 135]
[109 131]
[110 130]
[111 129]
[113 128]
[114 127]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
