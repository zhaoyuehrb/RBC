%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCCCGGGGCGGACGGGCGCGGGCGGGAGGAUGGAGCUGAACUCCCUGCUGAUCCUGCUGGAGGCGGCCGAGUACCUGGAGCGCAGGGAUCGAGAGGCCGAGCACGGCUACGCCUCGGUGCUGCCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[102.50108337 302.25918579]
[109.96103668 288.94332886]
[122.46467590 280.18994141]
[119.99575806 265.39453125]
[110.26914978 254.11434937]
[115.62948608 239.22888184]
[113.16056824 224.43345642]
[110.69165039 209.63804626]
[108.22273254 194.84262085]
[105.75380707 180.04719543]
[103.28488922 165.25178528]
[100.81597137 150.45635986]
[98.34705353 135.66094971]
[78.30429840 128.35015869]
[66.01007843 110.91422272]
[65.85523224 89.58031464]
[52.74836349 82.28579712]
[39.64149094 74.99127960]
[23.82036209 75.04103088]
[16.46203995 62.09096146]
[3.35516882 54.79644394]
[-9.75170135 47.50193024]
[-23.77907372 53.86895752]
[-38.69153976 50.79133987]
[-48.81263351 39.65457535]
[-50.41601944 24.87055779]
[-63.52288818 17.57604408]
[-76.62976074 10.28152943]
[-92.45088959 10.33127785]
[-99.80921173 -2.61879325]
[-112.91608429 -9.91330814]
[-126.02294922 -17.20782280]
[-139.12982178 -24.50233650]
[-152.23669434 -31.79685211]
[-164.89598083 -29.01902962]
[-175.68840027 -35.44053268]
[-179.06228638 -47.11920547]
[-191.99320984 -54.72125626]
[-204.92413330 -62.32330322]
[-218.24563599 -54.67912674]
[-233.60441589 -54.73586655]
[-246.86906433 -62.47826385]
[-254.47145081 -75.82364655]
[-254.36656189 -91.18218231]
[-246.58262634 -104.42249298]
[-233.21348572 -111.98300934]
[-217.85534668 -111.82998657]
[-204.63949585 -104.00458527]
[-197.12092590 -90.61180878]
[-197.32209778 -75.25422668]
[-184.39115906 -67.65218353]
[-171.46023560 -60.05013275]
[-153.97270203 -60.90069199]
[-144.94218445 -44.90372086]
[-131.83531189 -37.60920715]
[-118.72843933 -30.31469345]
[-105.62156677 -23.02017784]
[-92.51469421 -15.72566414]
[-77.63105774 -16.29716492]
[-69.33524323 -2.82534146]
[-56.22837448 4.46917343]
[-43.12150574 11.76368809]
[-29.71226883 5.33481550]
[-14.91363239 8.06691074]
[-4.43890572 19.11831284]
[-2.45718694 34.39506149]
[10.64968395 41.68957520]
[23.75655365 48.98408890]
[38.64019012 48.41258621]
[46.93600464 61.88441086]
[60.04287720 69.17892456]
[73.14974976 76.47344208]
[80.10011292 68.04283905]
[89.72113037 61.76356125]
[101.31732178 58.47959137]
[113.92951202 58.80252457]
[126.41398621 63.03065491]
[136.95776367 52.36160278]
[147.50155640 41.69255447]
[158.04533386 31.02350235]
[159.38882446 15.03680134]
[172.80493164 6.23977804]
[188.00196838 11.38075542]
[193.32206726 26.51601601]
[184.68411255 40.03508377]
[168.71438599 41.56728363]
[158.17060852 52.23633575]
[147.62681580 62.90538788]
[137.08303833 73.57444000]
[139.18057251 80.77515411]
[153.54862976 76.46714020]
[167.91668701 72.15912628]
[182.38220215 68.19063568]
[186.57742310 82.59203339]
[172.24349976 87.01284790]
[157.80957031 91.09471893]
[143.37564087 95.17658997]
[145.47319031 102.37731171]
[160.09710693 105.71512604]
[174.72102356 109.05294037]
[189.34494019 112.39075470]
[203.96885681 115.72856903]
[219.47142029 110.38041687]
[231.67524719 121.33480072]
[228.02609253 137.32278442]
[212.27789307 141.89730835]
[200.63104248 130.35247803]
[186.00712585 127.01467133]
[171.38320923 123.67685699]
[156.75929260 120.33904266]
[142.13537598 117.00122833]
[128.59226990 128.77870178]
[113.14247131 133.19201660]
[115.61138916 147.98744202]
[118.08031464 162.78286743]
[120.54923248 177.57827759]
[123.01815033 192.37370300]
[125.48706818 207.16912842]
[127.95598602 221.96453857]
[130.42491150 236.75996399]
[140.32810974 249.09840393]
[134.79118347 262.92559814]
[137.26010132 277.72103882]
[151.92848206 281.94018555]
[163.30787659 292.11230469]
[169.13891602 306.21768188]
[168.26382446 321.45571899]
[160.85636902 334.80084229]
[148.38729858 343.60339355]
[133.33235168 346.11560059]
[118.68069458 341.83871460]
[107.34143829 331.62185669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[6 120]
[7 119]
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[16 72]
[17 71]
[18 70]
[20 68]
[21 67]
[22 66]
[26 62]
[27 61]
[28 60]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[37 52]
[38 51]
[39 50]
[77 89]
[78 88]
[79 87]
[80 86]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
