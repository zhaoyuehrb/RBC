%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACAGGACUCCAGGUUCCCCUGCCGCAGCUGGCCACAGGACUGCUGCUUCUCCUCAGUGUCCAGCCCUGGGCUGAGAGUGGGAAGGUGCUGGUGG\
) } def
/len { sequence length } bind def

/coor [
[126.25855255 266.19192505]
[111.07527924 271.37341309]
[97.63575745 262.61218262]
[96.24964142 246.62913513]
[107.98023224 235.68505859]
[109.84172058 220.80101013]
[111.70320129 205.91696167]
[113.56468201 191.03291321]
[115.19445801 176.12171936]
[116.59214783 161.18698120]
[110.07443237 147.79412842]
[119.06395721 134.77494812]
[120.46164703 119.84020996]
[121.85933685 104.90546417]
[104.24346161 120.49194336]
[84.27369690 111.44558716]
[69.68002319 114.91323090]
[55.08634567 118.38087463]
[40.49266434 121.84852600]
[28.94887543 133.49639893]
[13.16064262 129.06201172]
[9.36954880 113.10708618]
[21.47554588 102.04467773]
[37.02502060 107.25484467]
[51.61869812 103.78720093]
[66.21237946 100.31955719]
[80.80605316 96.85191345]
[87.02756500 84.21112061]
[100.69941711 78.59262848]
[115.32157135 83.65546417]
[106.96378326 71.19964600]
[98.60600281 58.74382782]
[90.24821472 46.28800964]
[81.89043427 33.83218765]
[66.50188446 33.12598038]
[54.61877441 23.60520554]
[50.66715622 9.08457470]
[55.96024704 -4.81223106]
[47.60246277 -17.26805115]
[33.75631714 -27.05174255]
[39.32466507 -43.06517029]
[56.25375366 -42.14739227]
[60.05828094 -25.62583542]
[68.41606903 -13.17001534]
[83.28217316 -12.79991245]
[95.22097778 -3.63863897]
[99.52637482 10.96673393]
[94.34625244 25.47440529]
[102.70403290 37.93022537]
[111.06182098 50.38604355]
[119.41960144 62.84186554]
[127.77738953 75.29768372]
[141.90789795 80.33043671]
[156.25776672 75.96221161]
[170.60763550 71.59399414]
[184.95750427 67.22576904]
[199.30737305 62.85755157]
[213.58755493 58.26669312]
[227.79463196 53.45430756]
[242.00170898 48.64191818]
[246.70474243 33.97264481]
[259.00000000 24.99044037]
[274.04870605 24.97069359]
[286.07943726 33.71139908]
[300.28649902 28.89901161]
[314.49356079 24.08662415]
[328.70065308 19.27423859]
[342.90771484 14.46185112]
[353.31594849 1.78901267]
[369.44866943 4.73296690]
[374.70996094 20.26522636]
[363.68740845 32.40753555]
[347.72009277 28.66892433]
[333.51303101 33.48131180]
[319.30596924 38.29369736]
[305.09887695 43.10608292]
[290.89181519 47.91847229]
[286.64971924 62.17128754]
[274.68692017 71.30119324]
[259.46395874 71.64028931]
[246.81410217 62.84899139]
[232.60702515 67.66137695]
[218.39994812 72.47376251]
[212.97917175 77.69303131]
[203.67558289 77.20742035]
[189.32571411 81.57563782]
[174.97586060 85.94385529]
[160.62599182 90.31208038]
[146.27612305 94.68029785]
[136.79408264 106.30315399]
[135.39639282 121.23789978]
[133.99870300 136.17263794]
[140.41644287 150.63372803]
[131.52688599 162.58467102]
[130.12919617 177.51940918]
[132.47314453 186.53598022]
[128.44873047 192.89439392]
[126.58724976 207.77844238]
[124.72576141 222.66249084]
[122.86428070 237.54653931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[9 95]
[10 94]
[12 92]
[13 91]
[14 90]
[16 27]
[17 26]
[18 25]
[19 24]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[38 44]
[39 43]
[53 89]
[54 88]
[55 87]
[56 86]
[57 85]
[58 83]
[59 82]
[60 81]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
