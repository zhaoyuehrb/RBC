%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUCCUGAGACUGCUGGCAUGAAGGGGAGCCGUGCCCUCCUGCUGGUGGCCCUCACCCUGUUCUGCAUCUGCCGGAUGGCCACAGGGGAGGACAACGAUGAGUUUUUCAUGGACUUCC\
) } def
/len { sequence length } bind def

/coor [
[80.84252167 294.55911255]
[90.47122192 281.72683716]
[89.69266510 266.74703979]
[86.16063690 260.15097046]
[89.09346771 251.36927795]
[88.70406342 236.37432861]
[88.31465149 221.37939453]
[87.73062134 206.39076233]
[86.95206451 191.41098022]
[86.17350006 176.43119812]
[85.39494324 161.45141602]
[84.61638641 146.47163391]
[74.21832275 135.66052246]
[59.28021622 134.29930115]
[44.34210587 132.93809509]
[29.40399742 131.57688904]
[14.46588802 130.21566772]
[-0.47222093 128.85446167]
[-15.41032982 127.49324799]
[-30.34843826 126.13203430]
[-45.28654861 124.77082062]
[-59.73192215 131.22386169]
[-71.70453644 122.36352539]
[-86.64264679 121.00231171]
[-95.59608459 123.35935974]
[-101.94917297 119.40692139]
[-116.84690857 117.65836334]
[-131.74464417 115.90980530]
[-142.16717529 127.40547943]
[-157.36302185 130.54650879]
[-171.48905945 124.12509155]
[-179.11355591 110.61040497]
[-177.30471802 95.19911194]
[-166.75808716 83.81718445]
[-151.52906799 80.84119415]
[-137.47352600 87.41546631]
[-129.99609375 101.01206970]
[-115.09835052 102.76062775]
[-100.20061493 104.50918579]
[-85.28143311 106.06420135]
[-70.34332275 107.42541504]
[-56.96642685 100.87500763]
[-43.92533493 109.83271027]
[-28.98722649 111.19392395]
[-14.04911709 112.55513763]
[0.88899153 113.91635132]
[15.82710075 115.27756500]
[30.76520920 116.63877106]
[45.70331955 117.99998474]
[60.64142609 119.36119843]
[75.57953644 120.72241211]
[77.18053436 84.66367340]
[107.14275360 78.17864227]
[116.20967102 66.22912598]
[125.27658844 54.27960587]
[134.34350586 42.33008957]
[137.08666992 33.48730850]
[143.80419922 30.19211769]
[153.17826843 18.48200989]
[162.55235291 6.77190208]
[171.92643738 -4.93820572]
[181.30052185 -16.64831352]
[190.67459106 -28.35842133]
[186.04182434 -41.41276169]
[188.47630310 -54.93879700]
[197.23057556 -65.39195251]
[209.91554260 -70.08735657]
[223.15165710 -67.88898468]
[232.82656860 -79.35178375]
[242.50149536 -90.81459045]
[252.17642212 -102.27738953]
[261.85134888 -113.74019623]
[267.44696045 -129.74411011]
[284.37448120 -128.79748535]
[288.15084839 -112.26947021]
[273.31414795 -104.06527710]
[263.63922119 -92.60247040]
[253.96430969 -81.13966370]
[244.28938293 -69.67686462]
[234.61445618 -58.21405792]
[239.05831909 -42.46900558]
[233.22418213 -27.00752258]
[219.20893860 -17.94317818]
[202.38470459 -18.98434067]
[193.01062012 -7.27423334]
[183.63653564 4.43587446]
[174.26246643 16.14598274]
[164.88838196 27.85609055]
[155.51429749 39.56619644]
[146.29302979 51.39700699]
[137.22610474 63.34652710]
[128.15919495 75.29604340]
[119.09226990 87.24555969]
[125.86757660 97.55355835]
[126.71161652 111.30494690]
[120.03339386 124.98880768]
[132.95837402 132.60095215]
[145.88336182 140.21308899]
[161.71272278 137.60333252]
[173.52555847 148.45858765]
[172.26005554 164.45166016]
[158.88700867 173.31401062]
[143.66508484 168.24720764]
[138.27122498 153.13807678]
[125.34623718 145.52593994]
[112.42124939 137.91378784]
[99.59616852 145.69308472]
[100.37472534 160.67286682]
[101.15328217 175.65264893]
[101.93183899 190.63243103]
[102.71039581 205.61221313]
[106.31766510 214.13906860]
[103.30959320 220.98997498]
[103.69900513 235.98492432]
[104.08841705 250.97987366]
[104.67244720 265.96850586]
[105.45100403 280.94827271]
[116.35812378 292.71322632]
[113.81800842 308.55392456]
[99.77922058 316.31872559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 117]
[3 116]
[5 115]
[6 114]
[7 113]
[8 111]
[9 110]
[10 109]
[11 108]
[12 107]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[23 41]
[24 40]
[26 39]
[27 38]
[28 37]
[53 93]
[54 92]
[55 91]
[56 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
