%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGGCUUCGCUAGGGAGCCUCCCGGCGUGGAGAUGGCGGGAGCUGGUCGCGGAGCAGCGGUGUCCAGGGUGCAGGCGGGUCCUGGGAGUCCCCGGCGAGCGCGGGGGCGGCAGCAAGUGCAGCCGCUGGGGA\
) } def
/len { sequence length } bind def

/coor [
[104.55203247 139.99327087]
[89.95410156 138.97772217]
[76.68389130 132.81068420]
[66.49523926 122.30725098]
[60.73473358 108.85557556]
[45.74360657 109.37142944]
[32.21768188 117.57875061]
[19.23185349 110.28371429]
[4.24072552 110.79956818]
[-10.75040150 111.31542206]
[-25.74152946 111.83127594]
[-40.73265457 112.34712982]
[-55.72378540 112.86298370]
[-70.71491241 113.37883759]
[-76.66577148 126.09049988]
[-87.47366333 134.94097900]
[-100.98028564 138.23693848]
[-114.52021790 135.38697815]
[-125.44687653 127.00671387]
[-131.64985657 114.78701782]
[-146.64886475 114.95899200]
[-161.64787292 115.13097382]
[-170.28059387 118.38167572]
[-176.99183655 115.13097382]
[-191.99085999 114.95899200]
[-206.98986816 114.78701782]
[-221.98887634 114.61503601]
[-236.98789978 114.44305420]
[-250.87586975 122.02162170]
[-263.51361084 114.13890076]
[-278.51260376 113.96691895]
[-293.51162720 113.79494476]
[-307.53384399 122.29843140]
[-321.77703857 114.17046356]
[-321.58898926 97.77239227]
[-307.16320801 89.97315216]
[-293.33963013 98.79592896]
[-278.34063721 98.96791077]
[-263.34161377 99.13989258]
[-250.52647400 91.54901886]
[-236.81591797 99.44403839]
[-221.81689453 99.61602020]
[-206.81788635 99.78800201]
[-191.81887817 99.95998383]
[-176.81985474 100.13196564]
[-161.81985474 100.13196564]
[-146.82084656 99.95998383]
[-131.82182312 99.78800201]
[-124.28195953 85.54174042]
[-110.52063751 76.97101593]
[-94.22232819 76.48144531]
[-79.80683899 84.29995728]
[-71.23076630 98.38771057]
[-56.23963547 97.87185669]
[-41.24850845 97.35600281]
[-26.25738144 96.84014893]
[-11.26625538 96.32429504]
[3.72487211 95.80844116]
[18.71599960 95.29258728]
[31.16965485 87.12216949]
[45.22775269 94.38030243]
[60.21887970 93.86444855]
[64.50035858 81.02744293]
[72.79415131 70.33479309]
[84.16287231 62.99502945]
[97.32156372 59.83772278]
[110.78298950 61.21972656]
[117.42374420 47.76980591]
[124.06450653 34.31988525]
[130.70526123 20.86996651]
[137.34602356 7.42004585]
[143.98677063 -6.02987432]
[150.62753296 -19.47979355]
[157.26828003 -32.92971420]
[149.93093872 -46.60242081]
[152.06486511 -61.97206497]
[162.84953308 -73.12870789]
[178.13801575 -75.78238678]
[192.05157471 -68.91271210]
[199.24017334 -55.16121292]
[196.93963623 -39.81562042]
[186.03457642 -28.77663040]
[170.71820068 -26.28895760]
[164.07745361 -12.83903790]
[157.43669128 0.61088228]
[150.79594421 14.06080246]
[144.15518188 27.51072311]
[137.51441956 40.96064377]
[130.87367249 54.41056442]
[124.23291016 67.86048126]
[135.33666992 80.72561646]
[140.14151001 97.02650452]
[137.79092407 113.85742950]
[150.66513062 121.55513763]
[163.53935242 129.25283813]
[176.41355896 136.95054626]
[189.28776550 144.64825439]
[202.16198730 152.34596252]
[215.03619385 160.04367065]
[227.91040039 167.74137878]
[240.78460693 175.43908691]
[249.84271240 177.18319702]
[253.86289978 183.46379089]
[266.55722046 191.45466614]
[279.34231567 199.29946899]
[292.21652222 206.99717712]
[305.09075928 214.69488525]
[319.30892944 208.76618958]
[334.11871338 212.30506897]
[343.88937378 223.75051880]
[345.03323364 238.57716370]
[357.90744019 246.27487183]
[374.30401611 245.98440552]
[382.52081299 260.17654419]
[374.10510254 274.25161743]
[357.71423340 273.73040771]
[350.20974731 259.14907837]
[337.33551025 251.45138550]
[323.73324585 257.46105957]
[309.02651978 254.27108765]
[298.89978027 242.89997864]
[297.39303589 227.56909180]
[284.51882935 219.87139893]
[271.64462280 212.17369080]
[264.22427368 211.43449402]
[258.56634521 204.14898682]
[245.87200928 196.15811157]
[233.08691406 188.31329346]
[220.21269226 180.61558533]
[207.33848572 172.91787720]
[194.46427917 165.22016907]
[181.59005737 157.52247620]
[168.71585083 149.82476807]
[155.84164429 142.12705994]
[142.96743774 134.42935181]
[130.09321594 126.73164368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 62]
[6 61]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[20 48]
[21 47]
[22 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[30 39]
[31 38]
[32 37]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[93 136]
[94 135]
[95 134]
[96 133]
[97 132]
[98 131]
[99 130]
[100 129]
[101 128]
[103 127]
[104 126]
[105 124]
[106 123]
[107 122]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
