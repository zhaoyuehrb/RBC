%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCGCUUCCUCUUCCGGGUCGGCGCUCCUGCCUCCCUGCAGGGAGCUGCUUAUGGGACACCAAUUCCUGCGCGGCCUCUUAACGCUGCUGCUGCCGCCGCCACCCCUGUAUACCCGGCACCGCAUGCUCGGUCCAGAGUCCGUCCCGCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.27561951 798.11535645]
[153.65161133 784.01660156]
[153.34364319 769.01977539]
[153.03565979 754.02288818]
[152.72767639 739.02606201]
[136.51121521 731.09240723]
[126.47198486 715.98651123]
[125.42787170 697.79437256]
[133.74966431 681.48864746]
[149.23638916 671.56951904]
[148.00576782 656.62005615]
[146.77516174 641.67065430]
[145.54454041 626.72119141]
[133.37353516 611.74243164]
[142.09913635 593.61535645]
[140.25581360 578.72900391]
[138.41249084 563.84271240]
[136.56916809 548.95642090]
[134.72584534 534.07006836]
[132.88250732 519.18377686]
[121.01467896 510.25686646]
[118.93321991 495.18627930]
[128.37707520 482.79873657]
[126.53374481 467.91241455]
[124.69042206 453.02612305]
[116.80180359 448.72280884]
[111.73106384 441.13735962]
[110.74074554 431.92803955]
[114.18392181 423.18069458]
[121.39481354 416.93634033]
[120.47139740 401.96481323]
[119.54798126 386.99325562]
[118.62457275 372.02169800]
[104.00924683 365.19613647]
[94.76256561 351.86477661]
[93.47550964 335.59765625]
[100.59193420 320.80920410]
[114.26239014 311.56021118]
[113.03177643 296.61077881]
[111.80117035 281.66134644]
[110.57055664 266.71191406]
[109.33994293 251.76246643]
[108.10932922 236.81303406]
[106.87871552 221.86360168]
[94.70771027 206.88482666]
[103.43330383 188.75772095]
[101.58998108 173.87141418]
[92.34729767 162.19143677]
[98.33007050 147.54502869]
[96.48674774 132.65872192]
[79.43019867 128.92764282]
[65.51734161 116.30606842]
[59.30577850 97.17765045]
[63.66870117 76.18630981]
[53.56326675 65.10117340]
[43.45783234 54.01604080]
[27.67487144 49.56292343]
[23.90271378 33.60351181]
[36.02183151 22.55547714]
[51.56511307 27.78409195]
[54.54296494 43.91060638]
[64.64839935 54.99573898]
[74.75383759 66.08087158]
[81.96752930 64.02839661]
[77.86257935 49.60101700]
[73.75787354 35.17356110]
[88.18539429 31.06909561]
[92.28996277 45.49607086]
[96.39491272 59.92345428]
[103.60860443 57.87098312]
[106.36484528 43.12638474]
[108.96956635 28.35426903]
[111.42249298 13.55619049]
[113.87542725 -1.24188840]
[116.32835388 -16.03996658]
[118.78128052 -30.83804703]
[107.79269409 -41.79389191]
[105.37567139 -57.12157059]
[112.45961761 -70.92726898]
[126.32060242 -77.90242004]
[141.62879944 -75.36493683]
[152.49787903 -64.29052734]
[154.74848938 -48.93753815]
[147.51519775 -35.20949554]
[133.57936096 -28.38511848]
[131.12643433 -13.58703899]
[128.67350769 1.21103966]
[126.22057343 16.00911903]
[123.76764679 30.80719757]
[125.78900146 37.96445465]
[121.10944366 45.88262939]
[118.35320282 60.62722397]
[132.53617859 74.52699280]
[138.46859741 92.44732666]
[135.67581177 110.12366486]
[125.65861511 123.75375366]
[111.37305450 130.81539917]
[113.21637726 145.70170593]
[122.59091187 158.44645691]
[116.47628784 172.02809143]
[118.31961823 186.91439819]
[127.33010864 193.14451599]
[131.30989075 203.11375427]
[129.15695190 213.40486145]
[121.82815552 220.63299561]
[123.05876160 235.58242798]
[124.28937531 250.53186035]
[125.51998901 265.48129272]
[126.75060272 280.43072510]
[127.98121643 295.38015747]
[129.21182251 310.32958984]
[142.18072510 315.65957642]
[151.53332520 326.01693726]
[155.47914124 339.33349609]
[153.29975891 352.98318481]
[145.47879028 364.29989624]
[133.59611511 371.09829712]
[134.51953125 386.06985474]
[135.44294739 401.04138184]
[136.36636353 416.01293945]
[149.32530212 433.02911377]
[139.57672119 451.18280029]
[141.42005920 466.06909180]
[143.26338196 480.95541382]
[155.44348145 490.66534424]
[157.10081482 505.78842163]
[147.76882935 517.34045410]
[149.61215210 532.22674561]
[151.45547485 547.11309814]
[153.29879761 561.99938965]
[155.14212036 576.88568115]
[156.98544312 591.77203369]
[165.99594116 598.00213623]
[169.97572327 607.97137451]
[167.82278442 618.26245117]
[160.49398804 625.49060059]
[161.72459412 640.44000244]
[162.95520020 655.38946533]
[164.18582153 670.33892822]
[175.71548462 674.07800293]
[185.26507568 681.48596191]
[191.71606445 691.66522217]
[194.32304382 703.39556885]
[192.79972839 715.28015137]
[187.35023499 725.91192627]
[178.64207458 734.04028320]
[167.72451782 738.71807861]
[168.03250122 753.71496582]
[168.34046936 768.71179199]
[168.64845276 783.70861816]
[177.59620667 797.45159912]
[169.92810059 811.94750977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[10 139]
[11 138]
[12 137]
[13 136]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[23 124]
[24 123]
[25 122]
[30 120]
[31 119]
[32 118]
[33 117]
[38 111]
[39 110]
[40 109]
[41 108]
[42 107]
[43 106]
[44 105]
[46 101]
[47 100]
[49 98]
[50 97]
[54 63]
[55 62]
[56 61]
[70 92]
[71 91]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
