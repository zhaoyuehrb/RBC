%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGCCGCUGAGAGUCCCGCCCCGCCAGGGAUCCCGGGAGCUGUCCGGCCGCCUCGGUGCUGAUCCCGCCACCGCCCACGGGCCGCUAGCAGCGCAGCGGGCACUAUGAGCGGGGGCGUCUACGGCGGAGAUGAGGUGGGGGCGCUGGUCUUUGACAUUGGCUCCUUCUCAGUCCGCGCUGGGUACGCUGGGGAGGACUGUCCCA\
) } def
/len { sequence length } bind def

/coor [
[-16.57438278 298.27136230]
[-25.16931915 285.97799683]
[-16.13421822 274.00521851]
[-23.22396660 271.55868530]
[-34.60057831 281.33480835]
[-45.97718811 291.11093140]
[-57.35379791 300.88708496]
[-68.73040771 310.66320801]
[-80.10701752 320.43933105]
[-82.65322113 326.54495239]
[-87.21642303 329.93725586]
[-91.97805023 330.33261108]
[-103.64473724 339.76068115]
[-109.51503754 354.45251465]
[-124.27722931 356.43417358]
[-135.94392395 365.86224365]
[-147.53907776 375.37814331]
[-159.06204224 384.98132324]
[-170.58500671 394.58450317]
[-182.10797119 404.18771362]
[-193.63093567 413.79089355]
[-199.78654480 434.31542969]
[-220.25257874 436.97171021]
[-231.32872009 447.08700562]
[-242.40487671 457.20227051]
[-246.84396362 472.98919678]
[-262.80001831 476.77551270]
[-273.85882568 464.66622925]
[-268.64401245 449.11831665]
[-252.52015686 446.12612915]
[-241.44400024 436.01086426]
[-230.36785889 425.89556885]
[-231.41592407 417.07473755]
[-228.23783875 408.63269043]
[-221.42846680 402.50875854]
[-212.43145752 400.17150879]
[-203.23413086 402.26794434]
[-191.71116638 392.66473389]
[-180.18820190 383.06155396]
[-168.66523743 373.45837402]
[-157.14227295 363.85516357]
[-154.01574707 357.15646362]
[-145.37197876 354.19555664]
[-133.70529175 344.76748657]
[-128.66947937 330.75000000]
[-113.07279968 328.09399414]
[-101.40611267 318.66592407]
[-89.88314819 309.06274414]
[-78.50653839 299.28659058]
[-67.12992859 289.51046753]
[-55.75331879 279.73434448]
[-44.37670898 269.95819092]
[-33.00009918 260.18206787]
[-22.88481903 249.10592651]
[-14.17837334 236.89126587]
[-5.47192812 224.67660522]
[3.23451686 212.46195984]
[11.94096184 200.24729919]
[20.64740753 188.03263855]
[29.35385132 175.81799316]
[38.06029892 163.60333252]
[35.47046280 153.71574402]
[38.82212830 143.82762146]
[47.23686600 137.28279114]
[58.08361053 136.43362427]
[67.15500641 124.48749542]
[76.22639465 112.54137421]
[85.29779053 100.59525299]
[88.00161743 85.84095001]
[83.75586700 71.45437622]
[79.51012421 57.06779861]
[75.26437378 42.68121719]
[63.93735504 31.63544083]
[67.75579071 17.23860741]
[63.51004410 2.85202932]
[59.26429749 -11.53454876]
[55.01855087 -25.92112732]
[43.69153214 -36.96690369]
[47.50996399 -51.36373901]
[43.26421738 -65.75031281]
[31.93719864 -76.79609680]
[35.75563049 -91.19292450]
[31.50988579 -105.57950592]
[27.15561485 -119.93360901]
[22.69306946 -134.25442505]
[18.23052406 -148.57524109]
[13.65995693 -162.86193848]
[8.98162937 -177.11372375]
[4.30330229 -191.36550903]
[-1.34781480 -198.54508972]
[-0.33629704 -205.86798096]
[-4.79884291 -220.18879700]
[-15.28359985 -233.51194763]
[-5.38359737 -247.27516174]
[10.58234692 -241.57209778]
[9.52196980 -224.65135193]
[13.98451614 -210.33053589]
[18.55508232 -196.04382324]
[23.23340988 -181.79205322]
[27.91173744 -167.54026794]
[32.98585129 -162.16427612]
[32.55133820 -153.03778076]
[37.01388168 -138.71696472]
[41.47642899 -124.39615631]
[46.46876907 -118.94414520]
[45.89646530 -109.82524872]
[50.14221191 -95.43867493]
[61.16554642 -85.42192078]
[57.65079498 -69.99606323]
[61.89654160 -55.60948563]
[72.91987610 -45.59273148]
[69.40512848 -30.16687393]
[73.65087891 -15.78029537]
[77.89662170 -1.39371681]
[82.14236450 12.99286175]
[93.16570282 23.00961304]
[89.65095520 38.43547058]
[93.89669800 52.82205200]
[98.14244843 67.20862579]
[102.38819122 81.59520721]
[101.82476044 66.60579681]
[111.45818329 55.10809326]
[126.31470490 53.03839493]
[138.72387695 61.46528625]
[142.27880859 76.03794861]
[135.14408875 89.23248291]
[121.00132751 94.23645782]
[135.93977356 92.87897491]
[150.87821960 91.52149200]
[165.81666565 90.16400909]
[180.75511169 88.80652618]
[189.59837341 79.41508484]
[202.07017517 78.59314728]
[211.44735718 86.23712158]
[226.40461731 85.10541534]
[241.36186218 83.97370148]
[256.31909180 82.84199524]
[271.27636719 81.71028900]
[279.59973145 77.94156647]
[286.46774292 80.67617798]
[301.44039917 79.77050018]
[316.41302490 78.86482239]
[331.38565063 77.95914459]
[346.35827637 77.05346680]
[361.33093262 76.14778900]
[368.25656128 62.51023865]
[380.99435425 54.22499084]
[396.06881714 53.43320847]
[409.42623901 60.24753571]
[417.52481079 72.74868774]
[432.49743652 71.84300995]
[447.47009277 70.93733215]
[462.91525269 63.94567871]
[473.90930176 76.85176086]
[464.55105591 90.98892975]
[448.37576294 85.90996552]
[433.40313721 86.81564331]
[418.43048096 87.72132111]
[411.89782715 101.10749817]
[399.45916748 109.48220062]
[384.39916992 110.51321411]
[370.75555420 103.82374573]
[362.23660278 91.12042236]
[347.26394653 92.02610016]
[332.29132080 92.93177795]
[317.31869507 93.83745575]
[302.34606934 94.74313354]
[287.37344360 95.64881134]
[272.40805054 96.66753387]
[257.45080566 97.79924011]
[242.49356079 98.93095398]
[227.53631592 100.06266022]
[212.57907104 101.19436646]
[198.64231873 111.85733032]
[182.11259460 103.74497986]
[167.17414856 105.10246277]
[152.23570251 106.45994568]
[137.29725647 107.81742859]
[122.35881042 109.17491150]
[115.04237366 114.13137817]
[107.47039795 115.39299011]
[101.18061829 113.52950287]
[97.24391174 109.66664124]
[88.17251587 121.61277008]
[79.10112762 133.55888367]
[70.02973175 145.50500488]
[68.40686798 165.59648132]
[50.27495193 172.30978394]
[41.56850815 184.52442932]
[32.86206436 196.73908997]
[24.15561676 208.95375061]
[15.44917297 221.16839600]
[6.74272728 233.38305664]
[-1.96371770 245.59771729]
[-10.67016315 257.81237793]
[6.31137228 262.27056885]
[19.84680748 278.41842651]
[22.77316284 293.13018799]
[36.05154037 301.70108032]
[39.29851151 317.16824341]
[30.58770943 330.35525513]
[15.08709621 333.43850708]
[1.99291050 324.58877563]
[-0.92629910 309.05642700]
[8.06138325 296.05654907]
[5.13502789 281.34475708]
[-1.95472062 278.89825439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[12 47]
[13 46]
[15 44]
[16 43]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 32]
[24 31]
[25 30]
[54 195]
[55 194]
[56 193]
[57 192]
[58 191]
[59 190]
[60 189]
[61 188]
[65 186]
[66 185]
[67 184]
[68 183]
[69 120]
[70 119]
[71 118]
[72 117]
[74 115]
[75 114]
[76 113]
[77 112]
[79 110]
[80 109]
[82 107]
[83 106]
[84 104]
[85 103]
[86 102]
[87 100]
[88 99]
[89 98]
[91 97]
[92 96]
[127 179]
[128 178]
[129 177]
[130 176]
[131 175]
[134 173]
[135 172]
[136 171]
[137 170]
[138 169]
[140 168]
[141 167]
[142 166]
[143 165]
[144 164]
[145 163]
[150 158]
[151 157]
[152 156]
[197 206]
[198 205]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
