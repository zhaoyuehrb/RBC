%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGCGCCAGGGGCCUUCCGGAAAGAGGAGCGAGAGCCCGGCGAUGGCGGCUGCGCCGGCCUUGAAGCACUGGCGCACCACGCUGGAGCGGGUGGAGAAGUUCGUGUCGCCGCUCUACUUUACCGACUGUAACCUCCGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[239.74838257 137.07861328]
[225.00202942 134.33175659]
[210.25569153 131.58491516]
[203.05062866 133.46611023]
[195.22113037 128.61550903]
[180.53775024 125.54984283]
[165.85437012 122.48416901]
[151.17098999 119.41849518]
[136.48760986 116.35282135]
[121.80422974 113.28714752]
[107.12084961 110.22147369]
[92.22722626 112.00470734]
[78.68262482 118.45014954]
[65.13801575 124.89559174]
[51.59341431 131.34103394]
[38.11943054 137.93281555]
[24.71764183 144.67018127]
[11.54185104 151.83946228]
[-1.39402616 159.43309021]
[-14.32990360 167.02670288]
[-16.75547218 182.47502136]
[-28.57745934 192.71098328]
[-44.21388245 192.90144348]
[-56.28170013 182.95651245]
[-59.08286285 167.57186890]
[-51.29473877 154.01165771]
[-36.59465027 148.67860413]
[-21.92352486 154.09083557]
[-8.98764706 146.49720764]
[3.94823050 138.90357971]
[5.17933655 135.52479553]
[8.15039158 132.59625244]
[12.62100220 130.94863892]
[17.98027611 131.26840210]
[31.38206291 124.53102875]
[35.97949982 118.67311096]
[45.14797211 117.79642487]
[58.69257736 111.35098267]
[72.23718262 104.90554047]
[85.78178406 98.46009827]
[87.40357208 83.54803467]
[75.56121063 74.34159088]
[63.71885300 65.13515472]
[57.11482239 63.83119965]
[52.84778214 59.93743134]
[51.57437134 55.26438522]
[40.14194107 45.55359268]
[28.70950890 35.84279633]
[17.27707863 26.13200378]
[5.84464693 16.42120934]
[-10.37630939 14.01027584]
[-16.14636612 -1.34024525]
[-5.52978277 -13.83905315]
[10.55200958 -10.62844658]
[15.55544090 4.98877811]
[26.98787308 14.69957256]
[38.42030334 24.41036606]
[49.85273361 34.12116241]
[61.28516388 43.83195496]
[72.92529297 53.29279327]
[84.76764679 62.49923325]
[96.61000824 71.70567322]
[90.63116455 57.94873428]
[99.28437805 45.69631195]
[113.22113037 40.14951324]
[127.92707825 43.10504150]
[138.63871765 53.60554886]
[141.88638306 68.24975586]
[136.61810303 82.29415131]
[124.54216766 91.18888855]
[110.18652344 95.53809357]
[124.86990356 98.60376740]
[139.55328369 101.66944122]
[154.23666382 104.73511505]
[168.92004395 107.80078888]
[183.60342407 110.86646271]
[198.28680420 113.93213654]
[213.00253296 116.83856201]
[227.74888611 119.58541107]
[242.49523926 122.33226013]
[262.13717651 113.88703156]
[277.40115356 127.71877289]
[292.29476929 129.50201416]
[307.18841553 131.28523254]
[316.15686035 129.18852234]
[322.38409424 133.27183533]
[337.23559570 135.37730408]
[352.08709717 137.48278809]
[366.93856812 139.58825684]
[381.86734009 141.04840088]
[396.84533691 141.86048889]
[411.82333374 142.67257690]
[423.52996826 132.39672852]
[438.70822144 133.43367004]
[448.43252563 144.65747070]
[463.41052246 145.46954346]
[477.60934448 138.49072266]
[489.89904785 146.90571594]
[504.87704468 147.71780396]
[519.85504150 148.52987671]
[534.83306885 149.34196472]
[549.81103516 150.15405273]
[562.57611084 138.24467468]
[579.67077637 139.19612122]
[590.59667969 151.93737793]
[605.58874512 152.42477417]
[620.58087158 152.91217041]
[634.77880859 144.70547485]
[648.84790039 153.13121033]
[648.31500244 169.52169800]
[633.72839355 177.01582336]
[620.09344482 167.90425110]
[605.10137939 167.41685486]
[590.10925293 166.92944336]
[581.99707031 176.99571228]
[569.37365723 180.58299255]
[556.81213379 176.15766907]
[548.99896240 165.13204956]
[534.02099609 164.31996155]
[519.04296875 163.50788879]
[504.06497192 162.69580078]
[489.08697510 161.88371277]
[475.95947266 168.92062378]
[462.59841919 160.44755554]
[447.62042236 159.63546753]
[436.73962402 169.74208069]
[421.53823853 169.13188171]
[411.01126099 157.65057373]
[396.03326416 156.83848572]
[381.05526733 156.02641296]
[378.85388184 157.87385559]
[375.76135254 158.92692566]
[372.08923340 158.83146667]
[368.27487183 157.35736084]
[364.83309937 154.43975830]
[349.98159790 152.33427429]
[335.13009644 150.22880554]
[320.27862549 148.12333679]
[305.40518188 146.17886353]
[290.51156616 144.39562988]
[275.61791992 142.61239624]
[269.53152466 149.25257874]
[260.92745972 152.35374451]
[251.73023987 151.08576965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 40]
[13 39]
[14 38]
[15 37]
[16 35]
[17 34]
[18 30]
[19 29]
[20 28]
[41 62]
[42 61]
[43 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[82 141]
[83 140]
[84 139]
[86 138]
[87 137]
[88 136]
[89 135]
[90 130]
[91 129]
[92 128]
[95 125]
[96 124]
[98 122]
[99 121]
[100 120]
[101 119]
[102 118]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
