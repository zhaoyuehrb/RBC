%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUGAGGCUGAGUCACCUGACCAAGACCCUGGAGUUACAAUGGCGGCGCCCAUGCUGCGCUGGGGCUGCCGUGGAAGACGUUGGGCUUUCGCCCGGGUUGACGGUGGUUCUUGCCACCGAAGAGGGGCUCCGACUGGGU\
) } def
/len { sequence length } bind def

/coor [
[6.73378754 304.73049927]
[-1.85533762 317.14395142]
[-15.41395760 323.54861450]
[-30.25793839 322.31500244]
[-38.69467926 334.71746826]
[-40.05912781 350.47973633]
[-53.61502075 356.65121460]
[-62.05175781 369.05368042]
[-70.48850250 381.45617676]
[-65.11221313 396.01208496]
[-69.35086060 410.93902588]
[-81.57460022 420.49725342]
[-97.08315277 421.01144409]
[-109.91316986 412.28387451]
[-115.13123322 397.67050171]
[-110.73090363 382.79040527]
[-98.40419769 373.36535645]
[-82.89097595 373.01943970]
[-74.45423889 360.61694336]
[-66.01749420 348.21447754]
[-65.25650024 333.33932495]
[-51.09715652 326.28073120]
[-42.66041565 313.87826538]
[-49.26002121 300.52496338]
[-48.28313065 285.56161499]
[-39.89217377 273.01336670]
[-26.25741196 266.30590820]
[-10.99642849 267.33044434]
[-2.55968952 254.92796326]
[5.87704992 242.52548218]
[14.31378937 230.12300110]
[22.33437157 217.44743347]
[29.92996597 204.51271057]
[37.52556229 191.57798767]
[45.12115479 178.64328003]
[52.71675110 165.70855713]
[60.31234360 152.77383423]
[67.90793610 139.83911133]
[54.10170746 122.59208679]
[48.85535431 101.13170624]
[53.14730835 79.46026611]
[66.17713165 61.61941528]
[58.01682663 49.03333664]
[49.85652161 36.44725418]
[41.69621277 23.86117554]
[33.53590775 11.27509594]
[25.37560272 -1.31098425]
[17.21529579 -13.89706421]
[9.05498981 -26.48314476]
[1.70096719 -32.03673172]
[0.85696435 -39.43914795]
[-7.02291441 -52.20267105]
[-14.90279293 -64.96619415]
[-22.78267097 -77.72971344]
[-30.01203728 -83.44463348]
[-30.69207764 -90.86390686]
[-38.28767014 -103.79862976]
[-51.52202606 -114.39524078]
[-45.00317001 -130.04582214]
[-28.15961456 -128.11424255]
[-25.35295296 -111.39421844]
[-17.75735855 -98.45950317]
[-10.01914883 -85.60959625]
[-2.13927007 -72.84606934]
[5.74060869 -60.08255005]
[13.62048721 -47.31902695]
[21.64106941 -34.64345169]
[29.80137634 -22.05736923]
[37.96168137 -9.47129059]
[46.12198639 3.11478972]
[54.28229523 15.70086956]
[62.44260025 28.28694916]
[70.60290527 40.87302780]
[78.76321411 53.45911026]
[89.64855194 49.90106583]
[101.05263519 48.85366440]
[112.40396881 50.36939240]
[123.13368988 54.37229156]
[132.70410156 60.66175842]
[143.88084412 50.65772629]
[155.05757141 40.65369415]
[159.41033936 32.53104782]
[166.59397888 30.55533218]
[177.98928833 20.80099869]
[189.38459778 11.04666710]
[200.77989197 1.29233515]
[212.17520142 -8.46199703]
[223.57051086 -18.21632957]
[228.51432800 -33.85252380]
[244.58375549 -37.12445068]
[255.24794006 -24.66623116]
[249.53648376 -9.29381275]
[233.32484436 -6.82102299]
[221.92953491 2.93330932]
[210.53422546 12.68764114]
[199.13891602 22.44197273]
[187.74362183 32.19630432]
[176.34831238 41.95063782]
[165.06159973 51.83042526]
[153.88487244 61.83445740]
[142.70814514 71.83849335]
[148.06994629 82.49752808]
[150.81680298 94.10867310]
[150.79931641 106.04029083]
[165.27378845 109.97597504]
[179.74826050 113.91165924]
[194.22273254 117.84734344]
[208.69720459 121.78302765]
[223.17169189 125.71871185]
[237.64616394 129.65440369]
[253.35531616 124.94754028]
[265.09887695 136.39396667]
[260.79608154 152.21856689]
[244.87327576 156.14234924]
[233.71047974 144.12887573]
[219.23600769 140.19319153]
[204.76152039 136.25750732]
[190.28704834 132.32182312]
[175.81257629 128.38613892]
[161.33810425 124.45045471]
[146.86363220 120.51477051]
[141.24848938 130.25917053]
[133.63978577 138.54115295]
[124.40526581 144.96041870]
[113.99122620 149.20672607]
[102.90098572 151.07484436]
[91.67053986 150.47450256]
[80.84265900 147.43470764]
[73.24706268 160.36943054]
[65.65146637 173.30415344]
[58.05587387 186.23886108]
[50.46028137 199.17358398]
[42.86468506 212.10830688]
[35.26908875 225.04302979]
[35.23974228 230.42190552]
[33.29872894 234.78227234]
[30.17461586 237.55677795]
[26.71626663 238.55973816]
[18.27952576 250.96221924]
[9.84278679 263.36468506]
[1.40604782 275.76718140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[7 20]
[8 19]
[9 18]
[28 141]
[29 140]
[30 139]
[31 138]
[32 134]
[33 133]
[34 132]
[35 131]
[36 130]
[37 129]
[38 128]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[51 66]
[52 65]
[53 64]
[54 63]
[56 62]
[57 61]
[79 101]
[80 100]
[81 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
