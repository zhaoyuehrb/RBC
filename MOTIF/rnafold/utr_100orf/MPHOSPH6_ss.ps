%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGCGGUGAGGCUCGCGGCCGGAGUGCGGCGCUGGGCGGAAGCUACCAUGGCGGCCGAGCGAAAGACAAGGUUGUCCAAGAAUCUACUGCGCAUGAAGUUUAUGCAAAGGGGACUGGACUCAGAAACCAAGAAACAACUAGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[292.56140137 201.85243225]
[279.12573242 195.18289185]
[265.69006348 188.51336670]
[252.25437927 181.84384155]
[238.81871033 175.17431641]
[225.38302612 168.50479126]
[211.94735718 161.83526611]
[198.51167297 155.16572571]
[185.07600403 148.49620056]
[171.57122803 141.96774292]
[157.99880981 135.58105469]
[144.11540222 140.85234070]
[130.26007080 134.56866455]
[124.82519531 119.97072601]
[111.25279236 113.58403778]
[92.82537842 116.11447144]
[82.37550354 100.72704315]
[68.54756165 94.91430664]
[54.71961212 89.10157776]
[40.89166641 83.28884125]
[27.06371880 77.47610474]
[13.23577023 71.66337585]
[1.39556313 78.16657257]
[-11.83292961 76.66365051]
[-21.62141991 67.92963409]
[-24.52810097 55.33714676]
[-38.23128128 49.23609543]
[-50.66554260 58.14319611]
[-65.78881836 59.62079620]
[-79.52983093 53.37172318]
[-88.23970795 41.16541290]
[-89.66078949 26.33820343]
[-103.36397552 20.23715401]
[-117.06715393 14.13610458]
[-130.77033997 8.03505516]
[-146.52445984 9.49039459]
[-155.00436401 -2.75462866]
[-168.70755005 -8.85567856]
[-182.41072083 -14.95672798]
[-190.78967285 -10.38129902]
[-200.19680786 -10.21745014]
[-208.48283386 -14.37443924]
[-213.81393433 -21.78888893]
[-215.07728577 -30.69355202]
[-228.37034607 -37.64299393]
[-241.66339111 -44.59243393]
[-254.95645142 -51.54187393]
[-271.79440308 -53.52179337]
[-274.55303955 -70.24979401]
[-259.24246216 -77.53142548]
[-248.00700378 -64.83493042]
[-234.71395874 -57.88548660]
[-221.42089844 -50.93604660]
[-208.12785339 -43.98660660]
[-187.71130371 -46.75295258]
[-176.30967712 -28.65991020]
[-162.60649109 -22.55886078]
[-148.90332031 -16.45781136]
[-134.12933350 -18.34953880]
[-124.66928864 -5.66812658]
[-110.96611023 0.43292284]
[-97.26292419 6.53397226]
[-83.55974579 12.63502216]
[-71.59008789 3.76975441]
[-56.69098663 2.07483530]
[-42.85248947 8.10495567]
[-33.83111191 20.33244514]
[-32.13023376 35.53291702]
[-18.42705154 41.63396454]
[-3.03338933 34.93545532]
[12.76520920 41.54333878]
[19.04850388 57.83542633]
[32.87645340 63.64815903]
[46.70439911 69.46089172]
[60.53234482 75.27362823]
[74.36029053 81.08636475]
[88.18824005 86.89909363]
[97.23483276 82.57859802]
[107.17462158 83.88552856]
[114.79688263 90.39772797]
[117.63948059 100.01163483]
[131.21188354 106.39832306]
[145.92411804 101.28089142]
[159.59748840 107.95124054]
[164.38549805 122.00864410]
[177.95791626 128.39532471]
[187.12211609 129.23071289]
[191.74552917 135.06053162]
[205.18121338 141.73005676]
[218.61688232 148.39958191]
[232.05255127 155.06910706]
[245.48823547 161.73863220]
[258.92391968 168.40817261]
[272.35958862 175.07769775]
[285.79525757 181.74722290]
[299.23092651 188.41674805]
[309.39074707 174.79032898]
[321.93685913 163.32904053]
[336.41729736 154.44372559]
[352.31072998 148.45251465]
[369.04537964 145.56933594]
[386.01947021 145.89634705]
[402.62286377 149.42031860]
[418.25912476 156.01309204]
[432.36672974 165.43632507]
[444.43945312 177.35003662]
[454.04437256 191.32493591]
[460.83749390 206.85784912]
[464.57601929 223.38984680]
[465.12701416 240.32633972]
[462.47216797 257.05853271]
[476.63781738 261.99151611]
[489.36196899 253.30809021]
[504.58148193 253.77659607]
[516.46624756 263.00787354]
[520.58697510 277.29623413]
[534.75262451 282.22924805]
[548.91827393 287.16223145]
[564.91680908 283.55950928]
[575.83569336 295.79510498]
[570.44256592 311.28207397]
[554.28540039 314.08874512]
[543.98529053 301.32788086]
[529.81964111 296.39489746]
[515.65399170 291.46188354]
[503.54940796 300.10000610]
[488.50140381 299.95230103]
[476.28295898 290.86590576]
[471.70480347 276.15716553]
[457.53915405 271.22415161]
[451.31704712 282.83880615]
[443.45324707 293.41390991]
[434.11819458 302.71917725]
[423.51443481 310.55175781]
[411.87219238 316.74087524]
[399.44427490 321.15130615]
[386.50070190 323.68661499]
[373.32281494 324.29098511]
[360.19714355 322.95062256]
[347.40914917 319.69406128]
[335.23706055 314.59146118]
[323.94580078 307.75317383]
[313.78121948 299.32733154]
[304.96478271 289.49670410]
[297.68865967 278.47454834]
[292.11163330 266.50024414]
[288.35552979 253.83383179]
[286.50265503 240.75059509]
[286.59393311 227.53491211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[10 86]
[11 85]
[14 82]
[15 81]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[26 69]
[27 68]
[32 63]
[33 62]
[34 61]
[35 60]
[37 58]
[38 57]
[39 56]
[44 54]
[45 53]
[46 52]
[47 51]
[111 130]
[112 129]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
