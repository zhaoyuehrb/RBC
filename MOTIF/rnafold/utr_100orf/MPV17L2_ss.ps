%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGCGCGGCGAAAGCAGAGCGGCGCGCCGGUUCCUUGGUUCCUGAGGGCGAUGGCGCGGGGUGGCUGGCGCCGGCUACGCCGCCUGUUAUCCGCGGGGCAGCUUCUAUUCCAGGGCCGCGCGCUGCUCGUCACUAACACGCUGGGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[104.63721466 548.53552246]
[101.27832794 532.84802246]
[111.56009674 520.53283691]
[111.56009674 505.53280640]
[111.56009674 490.53280640]
[111.56009674 475.53280640]
[103.82279968 462.80554199]
[111.56009674 449.00537109]
[111.56009674 434.00537109]
[111.56009674 419.00537109]
[111.56009674 404.00537109]
[111.56009674 389.00537109]
[97.86589050 376.92456055]
[97.27822876 358.35479736]
[110.62998962 344.98251343]
[110.01416779 329.99517822]
[95.83552551 318.48675537]
[94.48597717 299.95678711]
[107.27748108 286.04760742]
[106.04686737 271.09817505]
[104.81626129 256.14874268]
[103.58564758 241.19931030]
[102.35503387 226.24987793]
[101.12442017 211.30044556]
[99.89380646 196.35101318]
[98.66319275 181.40156555]
[97.43258667 166.45213318]
[96.20197296 151.50270081]
[94.97135925 136.55326843]
[91.26530457 130.10522461]
[93.87217712 121.28479004]
[92.94876099 106.31324005]
[89.86329651 101.98908234]
[89.45552063 96.23789978]
[92.30764771 90.71044922]
[91.99967194 75.71361542]
[91.69168854 60.71677399]
[91.38371277 45.71993637]
[91.07573700 30.72309685]
[90.76776123 15.72626019]
[85.20457458 5.93028164]
[88.38059998 -3.55192065]
[85.02134705 -18.17092896]
[81.66208649 -32.78993607]
[78.30282593 -47.40894318]
[74.94356537 -62.02795029]
[64.31223297 -73.74483490]
[69.00273132 -87.88161469]
[65.64347076 -102.50061798]
[62.28421402 -117.11962891]
[51.65288162 -128.83650208]
[56.34337616 -142.97328186]
[52.98411942 -157.59230042]
[49.62485886 -172.21130371]
[46.26560211 -186.83030701]
[42.90634155 -201.44931030]
[37.90564346 -209.16870117]
[39.63145447 -216.40290833]
[36.57305908 -231.08779907]
[33.51466370 -245.77270508]
[30.45626831 -260.45761108]
[20.06774521 -272.39028931]
[25.04750824 -286.42779541]
[21.98911285 -301.11267090]
[18.93071747 -315.79757690]
[15.87232113 -330.48248291]
[12.81392574 -345.16738892]
[9.75553036 -359.85226440]
[6.69713497 -374.53717041]
[-4.62353754 -386.40200806]
[0.25039527 -402.06011963]
[16.30504799 -405.40380859]
[27.02477264 -392.99334717]
[21.38203239 -377.59555054]
[24.44042778 -362.91067505]
[27.49882317 -348.22576904]
[30.55721855 -333.54086304]
[33.61561584 -318.85598755]
[36.67401123 -304.17108154]
[39.73240662 -289.48617554]
[49.90217209 -278.60385132]
[45.14116669 -263.51599121]
[48.19956207 -248.83110046]
[51.25795746 -234.14619446]
[54.31635284 -219.46130371]
[57.52534866 -204.80857849]
[60.88460922 -190.18957520]
[64.24386597 -175.57055664]
[67.60312653 -160.95155334]
[70.96238708 -146.33255005]
[81.35343933 -135.66131592]
[76.90322113 -120.47888184]
[80.26248169 -105.85987854]
[83.62173462 -91.24086761]
[94.01279449 -80.56963348]
[89.56257629 -65.38720703]
[92.92183685 -50.76820374]
[96.28108978 -36.14919281]
[99.64035034 -21.53018761]
[102.99961090 -6.91117954]
[109.68504333 -20.33894920]
[121.68021393 -29.34538269]
[136.43994141 -32.01944733]
[150.83241272 -27.79375076]
[161.80378723 -17.56491852]
[167.02609253 -3.50335646]
[165.39123535 11.40728569]
[157.24610901 24.00319481]
[144.31898499 31.61170769]
[129.35279846 32.61841583]
[115.52316284 26.80970955]
[105.76459503 15.41828251]
[106.07257080 30.41511917]
[106.38055420 45.41195679]
[106.68852997 60.40879440]
[106.99650574 75.40563202]
[107.30448151 90.40247345]
[107.92031097 105.38982391]
[108.84372711 120.36137390]
[109.92079163 135.32266235]
[111.15140533 150.27209473]
[112.38201904 165.22152710]
[113.61263275 180.17095947]
[114.84324646 195.12039185]
[116.07385254 210.06982422]
[117.30446625 225.01925659]
[118.53507996 239.96870422]
[119.76569366 254.91813660]
[120.99630737 269.86755371]
[122.22692108 284.81701660]
[132.67837524 290.63552856]
[138.93461609 300.68963623]
[139.52555847 312.39617920]
[134.41940308 322.81317139]
[125.00151825 329.37933350]
[125.61734772 344.36669922]
[135.82110596 350.60940552]
[141.65930176 360.91189575]
[141.76913452 372.63281250]
[136.23962402 382.83139038]
[126.56009674 389.00537109]
[126.56009674 404.00537109]
[126.56009674 419.00537109]
[126.56009674 434.00537109]
[126.56009674 449.00537109]
[134.29739380 462.80554199]
[126.56009674 475.53280640]
[126.56009674 490.53280640]
[126.56009674 505.53280640]
[126.56009674 520.53283691]
[136.84187317 532.84802246]
[133.48298645 548.53552246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[15 136]
[16 135]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[29 120]
[31 119]
[32 118]
[35 117]
[36 116]
[37 115]
[38 114]
[39 113]
[40 112]
[42 100]
[43 99]
[44 98]
[45 97]
[46 96]
[48 94]
[49 93]
[50 92]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[58 85]
[59 84]
[60 83]
[61 82]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
