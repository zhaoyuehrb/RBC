%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGACAGGAGCCGGGGAGCCGAGGAGGGAGGAGCCGCCGCCGCAGCCGAGCGCUGGGCUGAGGAGCAGAGAGAGCGGGGCGCCGAGUGCGGGCGGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[62.44435501 214.28672791]
[49.81542206 222.38055420]
[35.01190948 224.80047607]
[20.46304512 221.14936829]
[8.55626965 212.02639771]
[1.24546456 198.92860413]
[-0.26968104 184.00532532]
[4.25946569 169.70544434]
[14.08858585 158.37635803]
[-0.70084608 160.88090515]
[-9.85863018 173.48139954]
[-24.89289474 175.81068420]
[-36.84911346 167.00248718]
[-51.63854599 169.50701904]
[-54.85525894 179.06637573]
[-61.37185669 186.68754578]
[-70.21157074 191.29563904]
[-80.07434082 192.26237488]
[-89.52796936 189.49139404]
[-97.21607971 183.42593384]
[-102.05272675 174.97856140]
[-117.03702545 175.66459656]
[-128.86912537 186.49884033]
[-144.69381714 183.86094666]
[-152.37176514 169.77447510]
[-146.01309204 155.04536438]
[-130.49563599 150.97251892]
[-117.72306061 160.68028259]
[-102.73875427 159.99426270]
[-90.58715057 143.74974060]
[-70.15605164 141.35673523]
[-54.14308548 154.71759033]
[-39.35365295 152.21305847]
[-30.96418762 139.95938110]
[-16.00127983 137.20874023]
[-3.20538449 146.09146118]
[11.58404732 143.58692932]
[25.59048462 138.21853638]
[38.26519775 130.19657898]
[50.93991470 122.17464447]
[63.61463165 114.15269470]
[76.28934479 106.13075256]
[88.96405792 98.10881042]
[101.51496887 89.89450836]
[113.93914795 81.48976898]
[126.36333466 73.08502197]
[129.48027039 57.82322693]
[142.19989014 49.47660828]
[156.73046875 52.54218292]
[169.15464783 44.13743973]
[174.62654114 36.60586548]
[182.08834839 35.67260742]
[194.76307678 27.65066147]
[207.43778992 19.62871742]
[220.11250305 11.60677338]
[232.78721619 3.58482909]
[236.36813354 -11.57481480]
[249.33636475 -19.52965164]
[263.76669312 -16.02237511]
[276.44140625 -24.04431915]
[289.11614990 -32.06626511]
[286.86807251 -47.12834167]
[290.94692993 -61.80085754]
[300.64602661 -73.54171753]
[314.28491211 -80.31674194]
[329.50054932 -80.95211029]
[343.65679932 -75.33775330]
[354.30093384 -64.44638824]
[359.58886719 -50.16500473]
[358.60437012 -34.96794510]
[351.51803589 -21.48818779]
[339.55761719 -12.06118393]
[324.79534912 -8.32021904]
[309.78881836 -10.91343689]
[297.13809204 -19.39154816]
[284.46337891 -11.36960316]
[271.78863525 -3.34765935]
[268.78250122 11.19533348]
[256.04281616 19.51128197]
[240.80915833 16.25954437]
[228.13444519 24.28148842]
[215.45973206 32.30343246]
[202.78501892 40.32537842]
[190.11030579 48.34732056]
[177.55938721 56.56162262]
[165.13520813 64.96636200]
[162.57395935 79.59426880]
[150.09379578 88.29486084]
[134.76808167 85.50920105]
[122.34389496 93.91394806]
[109.91971588 102.31868744]
[105.44488525 109.20169067]
[96.98600769 110.78352356]
[84.31128693 118.80546570]
[71.63657379 126.82741547]
[58.96186066 134.84934998]
[46.28714371 142.87130737]
[33.61242676 150.89324951]
[48.49694061 152.75100708]
[61.42323303 160.36093140]
[70.27012634 172.47424316]
[73.58585358 187.10317993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 37]
[10 36]
[13 33]
[14 32]
[21 29]
[22 28]
[38 98]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[44 91]
[45 90]
[46 89]
[49 86]
[50 85]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[59 77]
[60 76]
[61 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
