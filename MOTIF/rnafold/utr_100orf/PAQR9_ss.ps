%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGCGGCGCCUGCAGCCCCGGGGCGCGGGCACAAAAGGCCCUCCGGCCCCGGCCCCGGCAGCUUCGGGGGCCGCCCGGAACUCCCACUCUGCCGCCU\
) } def
/len { sequence length } bind def

/coor [
[118.06535339 259.06396484]
[120.08155823 244.20010376]
[128.14688110 231.55294800]
[140.77351379 223.45553589]
[155.63223267 221.40159607]
[169.97937012 225.76852417]
[162.01300049 213.05880737]
[154.04663086 200.34909058]
[146.08026123 187.63935852]
[138.11390686 174.92964172]
[124.79862976 168.25485229]
[124.02541351 152.45254517]
[116.05904388 139.74282837]
[108.09267426 127.03311157]
[100.12631226 114.32338715]
[87.86311340 107.60732269]
[87.16397095 93.64298248]
[79.19760132 80.93325806]
[71.23123169 68.22354126]
[54.80503845 60.08553696]
[54.65255356 42.61332321]
[46.29476929 30.15750504]
[37.93698502 17.70168495]
[29.57920074 5.24586487]
[21.22141647 -7.20995474]
[12.86363220 -19.66577530]
[4.50584841 -32.12159348]
[-3.01008010 -37.62645340]
[-3.91111517 -45.09730530]
[-11.87748241 -57.80702591]
[-19.84384918 -70.51674652]
[-27.81021690 -83.22646332]
[-31.61553001 -68.71717072]
[-43.06980515 -59.03215408]
[-58.00978470 -57.69160843]
[-71.00525665 -65.18277740]
[-77.33279419 -78.78285980]
[-74.69253540 -93.54866791]
[-64.04412079 -104.11329651]
[-49.25792313 -106.63684845]
[-35.70821762 -100.20206451]
[-40.29907608 -114.48226166]
[-44.88993454 -128.76245117]
[-57.39937592 -139.36651611]
[-54.20488358 -155.45150757]
[-38.59268188 -160.47059631]
[-26.62326050 -149.26054382]
[-30.60973930 -133.35331726]
[-26.01888084 -119.07312012]
[-21.42802048 -104.79292297]
[-15.10049534 -91.19283295]
[-7.13412857 -78.48310852]
[0.83223832 -65.77339172]
[8.79860497 -53.06367111]
[16.96166801 -40.47937775]
[25.31945229 -28.02355957]
[33.67723465 -15.56773853]
[42.03501892 -3.11191916]
[50.39280319 9.34390068]
[58.75058746 21.79972076]
[67.10837555 34.25553894]
[79.01364899 36.95412445]
[86.05422974 47.41618347]
[83.94095612 60.25717163]
[91.90732574 72.96688843]
[99.87368774 85.67661285]
[112.13688660 92.39267731]
[112.83602905 106.35701752]
[120.80239868 119.06674194]
[128.76876831 131.77645874]
[136.73513794 144.48617554]
[150.62020874 152.07005310]
[150.82362366 166.96327209]
[158.78999329 179.67300415]
[166.75636292 192.38272095]
[174.72271729 205.09243774]
[182.68908691 217.80215454]
[191.39787292 222.46238708]
[194.30024719 230.75155640]
[206.06915283 240.05169678]
[217.83807373 249.35183716]
[229.60699463 258.65197754]
[244.50941467 254.32795715]
[259.09588623 259.62081909]
[267.75759888 272.49539185]
[267.16397095 288.00109863]
[257.54321289 300.17568970]
[242.59477234 304.33782959]
[228.06657410 298.88702393]
[219.54502869 285.91925049]
[220.30683899 270.42089844]
[208.53793335 261.12075806]
[196.76901245 251.82061768]
[185.00010681 242.52046204]
[187.78224182 257.26019287]
[184.12475586 271.80746460]
[174.70234680 283.47872925]
[161.25317383 290.12097168]
[146.25819397 290.50894165]
[132.48353577 284.57104492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[12 71]
[13 70]
[14 69]
[15 68]
[17 66]
[18 65]
[19 64]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[29 54]
[30 53]
[31 52]
[32 51]
[41 50]
[42 49]
[43 48]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
