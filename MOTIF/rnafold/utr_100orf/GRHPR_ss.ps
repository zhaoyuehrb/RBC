%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCUGUACUGCCAGGUCCGGGUCGGCGGCUGCACUGCGGAUGAGACCGGUGCGACUCAUGAAGGUGUUCGUCACCCGCAGGAUACCCGCCGAGGGUAGGGUCGCGCUCGCCCGGGCGGCAGACUGUGAGGUGGAGCAGU\
) } def
/len { sequence length } bind def

/coor [
[155.47566223 432.70312500]
[152.83462524 417.93746948]
[150.19360352 403.17181396]
[147.55258179 388.40612793]
[144.91154480 373.64047241]
[131.37059021 359.90209961]
[138.29231262 341.02484131]
[135.00074768 326.39044189]
[130.42802429 320.50839233]
[131.80201721 311.39596558]
[128.83497620 296.69235229]
[125.86795044 281.98870850]
[122.90092468 267.28509521]
[119.93389893 252.58146667]
[116.45618439 249.20375061]
[115.11351013 243.57882690]
[117.17601776 237.16249084]
[114.86228180 222.34201050]
[112.54855347 207.52153015]
[110.23481750 192.70104980]
[107.92108154 177.88056946]
[105.60734558 163.06008911]
[103.29361725 148.23960876]
[99.12108612 142.06724548]
[101.09640503 133.06602478]
[99.11109924 118.19798279]
[87.29547882 108.95725250]
[72.38716125 110.61315918]
[57.47883987 112.26907349]
[42.57052231 113.92498016]
[31.46561432 125.50343323]
[15.50320244 123.89688873]
[6.92828465 110.33774567]
[12.31880283 95.22741699]
[27.53961182 90.15726471]
[40.91461182 99.01666260]
[55.82292938 97.36074829]
[70.73124695 95.70484161]
[85.63956451 94.04893494]
[87.78922272 79.20376587]
[73.96298981 73.38695526]
[59.42497253 79.58547211]
[44.79340363 73.61112213]
[38.74893570 59.00838852]
[44.87764359 44.44080353]
[59.54346848 38.55106354]
[74.04544067 44.83344269]
[79.77980042 59.56071854]
[93.60603333 65.37753296]
[107.43226624 59.56071854]
[112.94178772 45.60919189]
[118.45130920 31.65766335]
[123.96083832 17.70613480]
[129.47036743 3.75460625]
[134.97988892 -10.19692230]
[140.48941040 -24.14845085]
[145.99893188 -38.09997940]
[151.50845337 -52.05150604]
[157.01797485 -66.00303650]
[138.73890686 -73.19673157]
[129.28189087 -97.86978149]
[129.28189087 -112.86978149]
[118.38733673 -124.00290680]
[118.60101318 -139.21504211]
[129.28189087 -149.53271484]
[129.28189087 -164.53271484]
[129.28189087 -179.53271484]
[129.28189087 -194.53271484]
[119.00011444 -206.84794617]
[122.35900116 -222.53544617]
[136.78189087 -229.56109619]
[151.20477295 -222.53544617]
[154.56365967 -206.84794617]
[144.28189087 -194.53271484]
[144.28189087 -179.53271484]
[144.28189087 -164.53271484]
[144.28189087 -149.53271484]
[154.96275330 -139.21504211]
[155.17643738 -124.00290680]
[144.28189087 -112.86978149]
[144.28189087 -97.86978149]
[150.98689270 -94.50928497]
[163.51243591 -102.76220703]
[164.39689636 -87.78827667]
[171.10188293 -84.42778015]
[183.11904907 -93.40486145]
[195.13619995 -102.38195038]
[207.15335083 -111.35903168]
[219.17050171 -120.33612061]
[222.88340759 -135.94361877]
[237.46153259 -142.64118958]
[251.72180176 -135.29106140]
[254.72492981 -119.53159332]
[244.16720581 -107.45211792]
[228.14758301 -108.31896210]
[216.13043213 -99.34188080]
[204.11328125 -90.36479950]
[192.09613037 -81.38771057]
[180.07897949 -72.41062927]
[170.96951294 -60.49351120]
[165.45999146 -46.54198456]
[159.95045471 -32.59045410]
[154.44093323 -18.63892746]
[148.93141174 -4.68739796]
[143.42189026 9.26413059]
[137.91236877 23.21565819]
[132.40284729 37.16718674]
[126.89331818 51.11871719]
[121.38378906 65.07024384]
[113.97913361 116.21267700]
[115.96443939 131.08071899]
[118.11409760 145.92588806]
[120.42782593 160.74635315]
[122.74156189 175.56683350]
[125.05529785 190.38731384]
[127.36903381 205.20779419]
[129.68276978 220.02827454]
[131.99650574 234.84875488]
[134.63752747 249.61442566]
[137.60455322 264.31805420]
[140.57157898 279.02169800]
[143.53862000 293.72531128]
[146.50564575 308.42895508]
[149.63513184 323.09884644]
[152.92671204 337.73324585]
[162.52198792 343.06369019]
[167.45816040 352.62002563]
[166.29978943 363.09149170]
[159.67721558 370.99945068]
[162.31823730 385.76510620]
[164.95927429 400.53076172]
[167.60029602 415.29644775]
[170.24133301 430.06210327]
[184.52461243 435.89233398]
[193.36970520 448.53225708]
[193.95417786 463.94854736]
[186.09152222 477.22192383]
[172.29067993 484.11688232]
[156.95545959 482.43325806]
[144.97926331 472.70834351]
[140.18367004 458.04525757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 131]
[4 130]
[5 129]
[7 125]
[8 124]
[10 123]
[11 122]
[12 121]
[13 120]
[14 119]
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[22 113]
[23 112]
[25 111]
[26 110]
[27 39]
[28 38]
[29 37]
[30 36]
[40 49]
[41 48]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[58 101]
[59 100]
[61 81]
[62 80]
[65 77]
[66 76]
[67 75]
[68 74]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
