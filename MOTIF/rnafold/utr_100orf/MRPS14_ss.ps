%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGUGUCAAUAAAGUUUCAGCGGUUUGUAGUUUGUAGCGGACAACAUGGCGGCCUUCAUGCUGGGCUCGCUGCUGCGGACGUUCAAGCAGAUGGUUCCUUCAUCAGCUUCAGGCCAAGUUCGAAGUCACUAUGUAGACUGGAGAA\
) } def
/len { sequence length } bind def

/coor [
[123.61939240 516.42700195]
[112.65190887 505.90167236]
[106.55171967 491.97845459]
[106.24906158 476.78054810]
[111.79010010 462.62548828]
[122.32984924 451.67184448]
[136.26109314 445.58999634]
[135.94270325 430.59338379]
[135.62432861 415.59674072]
[127.61862946 403.03656006]
[135.06126404 389.07528687]
[134.74288940 374.07867432]
[134.42451477 359.08203125]
[126.41880798 346.52185059]
[133.86145020 332.56057739]
[133.54307556 317.56396484]
[133.22468567 302.56732178]
[132.42904663 287.58843994]
[131.15696716 272.64248657]
[129.88487244 257.69653320]
[128.45423889 242.76490784]
[126.86519623 227.84930420]
[125.27616119 212.93371582]
[123.37089539 198.05520630]
[121.15025330 183.22048950]
[118.92961121 168.38577271]
[116.70896912 153.55105591]
[114.48833466 138.71635437]
[112.26769257 123.88163757]
[90.89170074 123.36522675]
[78.12866974 108.05448151]
[81.03178406 89.79994965]
[71.12166595 78.53986359]
[61.21154022 67.27977753]
[51.30142212 56.01969528]
[41.39130020 44.75961304]
[31.48117828 33.49952698]
[21.57105827 22.23944283]
[11.66093731 10.97935867]
[1.75081635 -0.28072637]
[1.89539289 14.71857643]
[-5.96383715 27.49482536]
[-19.41660881 34.12980270]
[-34.33723068 32.58869934]
[-46.14985657 23.34413910]
[-51.23179245 9.23124123]
[-48.02451706 -5.42186022]
[-37.51163101 -16.12135696]
[-22.91722298 -19.58593178]
[-8.71708775 -14.75306320]
[-16.30881500 -27.69005203]
[-23.90054131 -40.62704086]
[-31.49226761 -53.56402969]
[-39.22087097 -66.41971588]
[-47.08547974 -79.19265747]
[-54.95008850 -91.96559143]
[-62.81470108 -104.73852539]
[-78.31071472 -106.83792114]
[-88.79358673 -118.44152069]
[-89.31362152 -134.07044983]
[-79.62527466 -146.34521484]
[-64.30308533 -149.47004700]
[-50.58172607 -141.96949768]
[-44.94000244 -127.38508606]
[-50.04176331 -112.60313416]
[-42.17715454 -99.83020020]
[-34.31254578 -87.05726624]
[-26.44793510 -74.28432465]
[-20.21954727 -70.20943451]
[-18.55527878 -61.15575790]
[-10.96355247 -48.21876907]
[-3.37182546 -35.28178024]
[4.21990156 -22.34478951]
[13.01090050 -10.19084740]
[22.92102242 1.06923735]
[32.83114243 12.32932186]
[42.74126434 23.58940697]
[52.65138626 34.84949112]
[62.56150436 46.10957718]
[72.47162628 57.36965942]
[82.38174438 68.62974548]
[92.29187012 79.88983154]
[99.65290833 77.40356445]
[107.78594971 77.65631104]
[115.66055298 80.86868286]
[122.19385529 86.87182617]
[126.39750671 95.10097504]
[139.49272156 87.78555298]
[152.58793640 80.47013092]
[165.68313599 73.15470123]
[173.95744324 59.66965866]
[188.84197998 60.21740341]
[201.93717957 52.90198135]
[215.03239441 45.58655548]
[228.12760925 38.27112961]
[241.22282410 30.95570755]
[246.95982361 15.97350407]
[262.29333496 11.25514507]
[275.46081543 20.42014885]
[276.36126709 36.43791199]
[264.30398560 47.02097702]
[248.53823853 44.05091858]
[235.44303894 51.36634445]
[222.34782410 58.68176651]
[209.25260925 65.99719238]
[196.15739441 73.31261444]
[188.81974792 86.27441406]
[172.99856567 86.24991608]
[159.90335083 93.56533813]
[146.80813599 100.88076782]
[133.71293640 108.19618988]
[127.10240936 121.66099548]
[129.32304382 136.49571228]
[131.54368591 151.33042908]
[133.76432800 166.16513062]
[135.98497009 180.99984741]
[138.20561218 195.83456421]
[142.08195496 201.32839966]
[142.48710632 207.08467102]
[140.19175720 211.34468079]
[141.78079224 226.26026917]
[143.36982727 241.17587280]
[147.41537476 249.44462585]
[144.83084106 256.42443848]
[146.10292053 271.37039185]
[147.37501526 286.31634521]
[150.44604492 290.70822144]
[151.38252258 295.37170410]
[150.44804382 299.43103027]
[148.22131348 302.24896240]
[148.53968811 317.24557495]
[148.85807800 332.24218750]
[156.88655090 345.87503052]
[149.42112732 358.76367188]
[149.73950195 373.76028442]
[150.05789185 388.75689697]
[158.08636475 402.38973999]
[150.62094116 415.27838135]
[150.93933105 430.27499390]
[151.25770569 445.27160645]
[165.43450928 450.75674438]
[176.42965698 461.25317383]
[182.56645203 475.16030884]
[182.90908813 490.35739136]
[177.40531921 504.52694702]
[166.89442444 515.50830078]
[152.97923279 521.62677002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 140]
[8 139]
[9 138]
[11 136]
[12 135]
[13 134]
[15 132]
[16 131]
[17 130]
[18 126]
[19 125]
[20 124]
[21 122]
[22 121]
[23 120]
[24 117]
[25 116]
[26 115]
[27 114]
[28 113]
[29 112]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 68]
[55 67]
[56 66]
[57 65]
[87 111]
[88 110]
[89 109]
[90 108]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
