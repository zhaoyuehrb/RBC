%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:01:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGAGUCAGAACACUGAACAGGAAUAUGAAGCCAAGCUGGCCCCAUCUGUUGGUGGAGAGCCAACAAGCGGGGGCCCAUCUGGUUCUUCACCUGAUC\
) } def
/len { sequence length } bind def

/coor [
[81.13462067 242.23181152]
[76.72852325 256.57009888]
[66.71421051 267.73760986]
[52.93902588 273.67431641]
[37.94408035 273.28503418]
[24.49548340 266.64160156]
[15.07409954 254.96951294]
[11.41789150 240.42193604]
[14.20011902 225.68525696]
[2.43120551 234.98539734]
[-9.33770847 244.28553772]
[-21.10662270 253.58567810]
[-26.65958023 269.01605225]
[-42.84491730 271.65554810]
[-53.01254272 258.78887939]
[-46.70288086 243.65216064]
[-30.40676498 241.81677246]
[-18.63785172 232.51663208]
[-6.86893797 223.21647644]
[4.89997625 213.91633606]
[7.80234623 205.62716675]
[16.51113129 200.96694946]
[24.47749901 188.25721741]
[32.44386673 175.54750061]
[40.41023254 162.83778381]
[39.77730179 159.93197632]
[40.36328125 156.58151245]
[42.35136414 153.29176331]
[45.72200775 150.62702942]
[50.23821259 149.13223267]
[59.72026062 137.50938416]
[69.20230865 125.88652039]
[78.68434906 114.26366425]
[88.16639709 102.64080811]
[97.28238678 90.72868347]
[106.02350616 78.53881073]
[114.76461792 66.34894562]
[108.55032349 52.37290192]
[110.15534973 37.26261902]
[119.04907990 25.06556892]
[132.76205444 18.99843597]
[147.57096863 20.59906197]
[156.31207275 8.40919304]
[165.05319214 -3.78067565]
[173.79431152 -15.97054482]
[182.53543091 -28.16041374]
[191.27653503 -40.35028076]
[188.91072083 -55.74640656]
[197.94911194 -67.98414612]
[212.64154053 -70.14470673]
[221.38265991 -82.33457947]
[229.93313599 -94.65891266]
[238.29092407 -107.11473083]
[246.64871216 -119.57054901]
[255.00648499 -132.02636719]
[263.36428833 -144.48219299]
[271.72204590 -156.93801880]
[270.04608154 -172.89328003]
[281.57608032 -184.04846191]
[297.46728516 -181.84626770]
[305.52926636 -167.97601318]
[299.57760620 -153.07778931]
[284.17788696 -148.58023071]
[275.82009888 -136.12440491]
[267.46231079 -123.66858673]
[259.10452271 -111.21276855]
[250.74674988 -98.75695038]
[242.38896179 -86.30113220]
[241.25601196 -78.86191559]
[233.57252502 -73.59346008]
[224.83140564 -61.40359497]
[227.49876404 -46.79466629]
[218.80767822 -34.30788422]
[203.46641541 -31.60916710]
[194.72529602 -19.41929817]
[185.98417664 -7.22942877]
[177.24305725 4.96043968]
[168.50195312 17.15030861]
[159.76083374 29.34017754]
[166.02792358 42.85273361]
[164.68098450 57.78731537]
[155.98202515 70.12403107]
[142.18544006 76.49198151]
[126.95449066 75.09005737]
[118.21337128 87.27993011]
[109.47225952 99.46979523]
[109.13616943 104.89797974]
[105.69126129 109.69898987]
[99.78925323 112.12285614]
[90.30720520 123.74571228]
[80.82516479 135.36856079]
[71.34311676 146.99142456]
[61.86106873 158.61427307]
[53.11995316 170.80415344]
[45.15358734 183.51387024]
[37.18721771 196.22358704]
[29.22085190 208.93330383]
[43.57103729 204.56614685]
[58.42956924 206.62138367]
[71.05549622 214.71989441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 20]
[10 19]
[11 18]
[12 17]
[22 97]
[23 96]
[24 95]
[25 94]
[30 93]
[31 92]
[32 91]
[33 90]
[34 89]
[35 86]
[36 85]
[37 84]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[50 71]
[51 70]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
