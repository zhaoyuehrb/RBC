%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCAAUUCAACCACCGUGAUGGAAUUUCUCCUCAUGAGGUUUUCUGAUGUGUGGACACUACAGAUUUUACAUUCUGCAUCCUUCUUUAUGUUGUAUU\
) } def
/len { sequence length } bind def

/coor [
[184.72120667 143.37620544]
[185.63714600 136.34603882]
[171.58660889 131.09414673]
[157.45610046 126.06139374]
[143.24902344 121.24900818]
[128.96882629 116.65814972]
[114.61895752 112.28993225]
[101.78465271 119.01502991]
[87.92314148 114.79546356]
[81.01282501 102.05993652]
[66.66295624 97.69171906]
[52.31309128 93.32349396]
[37.71941376 89.85585022]
[22.93838310 87.30220032]
[8.15735245 84.74854279]
[-2.92406988 91.57195282]
[-15.27425194 89.02292633]
[-22.28456688 79.02925110]
[-36.97902679 76.01715088]
[-51.67348862 73.00504303]
[-66.36795044 69.99293518]
[-81.06241608 66.98082733]
[-90.28028107 68.33123016]
[-96.16379547 63.63977814]
[-110.75746918 60.17213440]
[-125.35115051 56.70448685]
[-139.70968628 63.86075592]
[-154.19573975 56.96628189]
[-157.69685364 41.30991745]
[-147.52728271 28.90188599]
[-131.48823547 29.26056671]
[-121.88350677 42.11080933]
[-107.28982544 45.57845306]
[-92.69615173 49.04610062]
[-78.05030823 52.28636551]
[-63.35584641 55.29847336]
[-48.66138458 58.31057739]
[-33.96692276 61.32268524]
[-19.27246094 64.33479309]
[-3.04655981 57.85238266]
[10.71100521 69.96751404]
[25.49203491 72.52116394]
[40.27306747 75.07482147]
[42.72204971 73.38757324]
[46.04457474 72.65969086]
[49.84243393 73.25228119]
[53.58604813 75.36116791]
[56.68131256 78.97363281]
[71.03117371 83.34185028]
[85.38104248 87.71006775]
[98.21534729 80.98497009]
[112.07685852 85.20453644]
[118.98717499 97.94006348]
[133.33703613 102.30828094]
[142.64064026 101.82266998]
[148.06140137 107.04193878]
[162.26847839 111.85432434]
[171.58267212 111.65827942]
[176.83850098 117.04360962]
[190.88903809 122.29550171]
[210.01670837 103.42389679]
[236.12951660 97.43046570]
[261.42370605 106.02188873]
[278.38439941 126.55874634]
[292.86315918 122.63891602]
[307.34194946 118.71908569]
[321.82073975 114.79925537]
[327.21792603 100.25106812]
[340.15417480 91.68177795]
[355.65524292 92.38645172]
[367.76065063 102.09413147]
[371.81561279 117.07201385]
[366.26089478 131.56079102]
[353.23242188 139.98925781]
[337.73992920 139.11645508]
[325.74053955 129.27803040]
[311.26177979 133.19786072]
[296.78298950 137.11769104]
[282.30422974 141.03752136]
[282.59295654 148.04199219]
[281.87307739 155.01881409]
[280.15847778 161.82344055]
[277.48376465 168.31472778]
[273.90338135 174.35789490]
[269.49057007 179.82734680]
[264.33596802 184.60919189]
[258.54562378 188.60371399]
[252.23884583 191.72738647]
[245.54577637 193.91467285]
[238.60470581 195.11930847]
[231.55915833 195.31541443]
[224.55497742 194.49792480]
[217.73730469 192.68280029]
[211.24755859 189.90664673]
[205.22047424 186.22604370]
[199.78137207 181.71635437]
[195.04350281 176.47019958]
[191.10566711 170.59550476]
[188.05023193 164.21339417]
[185.94136047 157.45555115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 57]
[5 56]
[6 54]
[7 53]
[10 50]
[11 49]
[12 48]
[13 43]
[14 42]
[15 41]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[24 34]
[25 33]
[26 32]
[64 79]
[65 78]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
