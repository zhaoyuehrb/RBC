%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAUUAAUCAGAUUCUUGACAUUCCUCAGCCCCAGGUUGGCUGGAGAAGCAUGUUCCCCAGAGGAGCAGAGGCCCAGGACUGGCAUUUGGAUAUGCAGCUGACCGGCAAGGUGGUGCUGUCAGCCGCUGCCCUGCUCCUGGUGACUGUGG\
) } def
/len { sequence length } bind def

/coor [
[167.80586243 106.82205963]
[176.22023010 119.23972321]
[179.09465027 133.96173096]
[175.96920776 148.63250732]
[167.34396362 160.90463257]
[154.59901428 168.81452942]
[139.77362061 171.09655762]
[125.23991394 167.38558960]
[113.32416534 158.27630615]
[115.36578369 143.41589355]
[106.44963074 155.47831726]
[97.53347778 167.54075623]
[88.61733246 179.60317993]
[87.30789948 195.94996643]
[72.38232422 202.74403381]
[59.19475174 192.99621582]
[61.31142807 176.73423767]
[76.55490112 170.68704224]
[85.47104645 158.62460327]
[94.38719940 146.56217957]
[103.30335236 134.49974060]
[99.75514984 127.89215088]
[92.65874481 114.67696381]
[89.11054230 108.06937408]
[74.13030243 108.83903503]
[59.15006256 109.60869598]
[45.76507568 118.04389954]
[32.65756226 110.96983337]
[17.67732048 111.73949432]
[2.69707918 112.50915527]
[-12.28316212 113.27881622]
[-27.26340294 114.04847717]
[-42.24364471 114.81813812]
[-51.52237701 127.40539551]
[-66.73330688 131.03327942]
[-80.69430542 123.98880768]
[-86.81340790 109.59816742]
[-82.20137024 94.65617371]
[-69.03584290 86.21798706]
[-53.53319931 88.26785278]
[-43.01330566 99.83789825]
[-28.03306389 99.06823730]
[-13.05282211 98.29857635]
[1.92741907 97.52891541]
[16.90765953 96.75925446]
[31.88790131 95.98959351]
[44.20140076 87.60944366]
[58.38040161 94.62845612]
[73.36064148 93.85879517]
[88.34088135 93.08913422]
[102.58757782 88.39533234]
[115.09161377 80.10985565]
[127.59564972 71.82438660]
[133.06350708 64.42855835]
[140.44256592 63.50023651]
[153.11407471 55.47323990]
[165.78559875 47.44624329]
[173.30305481 33.52509308]
[188.19512939 33.25053024]
[200.86663818 25.22353172]
[203.33883667 20.48607254]
[207.03126526 17.50755501]
[211.05213928 16.45770645]
[214.57463074 17.12044716]
[227.71626282 9.88874435]
[240.85789490 2.65704131]
[253.99952698 -4.57466125]
[267.14117432 -11.80636406]
[280.28280640 -19.03806686]
[293.42440796 -26.26976967]
[306.56604004 -33.50147247]
[312.62225342 -40.42377853]
[320.05258179 -40.74358368]
[333.33993530 -47.70394135]
[346.62725830 -54.66429520]
[356.26907349 -66.15496063]
[360.81637573 -80.44909668]
[365.36364746 -94.74322510]
[369.91094971 -109.03735352]
[374.45825195 -123.33148193]
[365.93777466 -136.44390869]
[367.89050293 -151.95907593]
[379.39443970 -162.55122375]
[395.01776123 -163.21905518]
[407.38360596 -153.64723206]
[410.65319824 -138.35528564]
[403.28277588 -124.56360626]
[388.75238037 -118.78419495]
[384.20507812 -104.49006653]
[379.65777588 -90.19593048]
[375.11050415 -75.90180206]
[370.56320190 -61.60767365]
[375.20489502 -55.71660614]
[386.98718262 -64.99979401]
[396.27020264 -53.21735001]
[384.48828125 -43.93446732]
[389.12997437 -38.04339981]
[404.09124756 -39.12046814]
[417.30023193 -47.82871246]
[430.55023193 -41.02526474]
[445.51150513 -42.10233307]
[460.47277832 -43.17940140]
[475.43408203 -44.25647354]
[490.39535522 -45.33354187]
[505.35662842 -46.41061020]
[513.75170898 -50.16804123]
[520.63562012 -47.35298538]
[535.61584473 -48.12264633]
[550.59606934 -48.89230728]
[565.57629395 -49.66196442]
[575.97607422 -61.56240082]
[591.75012207 -62.54015732]
[603.53991699 -52.01514816]
[604.35083008 -36.23167801]
[593.70178223 -24.55379677]
[577.91064453 -23.90978622]
[566.34600830 -34.68172455]
[551.36572266 -33.91206360]
[536.38549805 -33.14240646]
[521.40527344 -32.37274551]
[506.43371582 -31.44933128]
[491.47241211 -30.37226105]
[476.51113892 -29.29519081]
[461.54986572 -28.21812248]
[446.58859253 -27.14105225]
[431.62728882 -26.06398201]
[419.48846436 -17.43277740]
[405.16833496 -24.15918922]
[390.20706177 -23.08211899]
[364.63647461 -25.86725998]
[353.58761597 -41.37695694]
[340.30029297 -34.41659927]
[327.01293945 -27.45624352]
[313.79776001 -20.35984039]
[300.65612793 -13.12813759]
[287.51449585 -5.89643478]
[274.37286377 1.33526778]
[261.23123169 8.56697083]
[248.08959961 15.79867268]
[234.94796753 23.03037453]
[221.80633545 30.26207733]
[208.89364624 37.89504623]
[196.22212219 45.92204666]
[189.61102295 59.26905060]
[173.81259155 60.11775970]
[161.14108276 68.14476013]
[148.46955872 76.17175293]
[135.88111877 84.32842255]
[123.37709045 92.61389160]
[110.87305450 100.89936829]
[125.81864166 99.62293243]
[140.41362000 96.16073608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[12 19]
[13 18]
[24 50]
[25 49]
[26 48]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[51 150]
[52 149]
[53 148]
[55 147]
[56 146]
[57 145]
[59 143]
[60 142]
[64 141]
[65 140]
[66 139]
[67 138]
[68 137]
[69 136]
[70 135]
[71 134]
[73 133]
[74 132]
[75 131]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[97 129]
[98 128]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
