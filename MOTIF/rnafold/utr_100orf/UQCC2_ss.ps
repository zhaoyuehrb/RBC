%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCAAGCGCCAUUCGUCGGCGCCGACUCCUCCCGCUAAGGCGGGAACACGCGGGGCCCAAGAUGGCGGCCAGCCGGUACCGGCGUUUUCUUAAGCUCUGUGAGGAAUGGCCAGUGGACGAGACCAAACGGGGCCGGGACUUGGGCGCUUACCUGCGACAGC\
) } def
/len { sequence length } bind def

/coor [
[118.48279572 511.82202148]
[128.29116821 499.12652588]
[127.72354889 484.13726807]
[124.31302643 477.54312134]
[127.28973389 468.85955811]
[127.00587463 453.86224365]
[126.72200775 438.86492920]
[126.43814850 423.86761475]
[125.58696747 408.89178467]
[124.16969299 393.95889282]
[122.75241089 379.02600098]
[121.33513641 364.09310913]
[119.91786194 349.16021729]
[118.50057983 334.22732544]
[103.42649078 328.98574829]
[92.09863281 317.66140747]
[86.81414032 302.47921753]
[88.67571259 286.45327759]
[97.36199951 272.78863525]
[111.18169403 264.24026489]
[109.48207855 249.33685303]
[107.78246307 234.43345642]
[106.08284760 219.53005981]
[104.38323212 204.62666321]
[95.25366211 192.85804749]
[101.37747192 178.27005005]
[99.67785645 163.36665344]
[97.97824097 148.46325684]
[87.03078461 146.73942566]
[76.76033783 142.57572937]
[67.70304108 136.18951416]
[60.33169556 127.91415405]
[55.03108978 118.18163300]
[52.07793427 107.50000000]
[37.07793427 107.50000000]
[22.07793427 107.50000000]
[7.07793379 107.50000000]
[-7.92206621 107.50000000]
[-22.92206573 107.50000000]
[-36.84587097 116.16370392]
[-51.18130493 108.19957733]
[-51.18130493 91.80042267]
[-36.84587097 83.83629608]
[-22.92206573 92.50000000]
[-7.92206621 92.50000000]
[7.07793379 92.50000000]
[22.07793427 92.50000000]
[37.07793427 92.50000000]
[52.07793427 92.50000000]
[55.96034622 79.67063141]
[63.20577621 68.39367676]
[73.26093292 59.53029633]
[85.35798645 53.75731659]
[83.09561920 38.92890930]
[80.83325195 24.10049820]
[78.57089233 9.27208996]
[76.30852509 -5.55631876]
[74.04615784 -20.38472748]
[71.78379822 -35.21313477]
[69.52143097 -50.04154587]
[57.07236099 -59.40415192]
[54.98923874 -74.47449493]
[63.99177170 -86.28507996]
[61.72940445 -101.11348724]
[59.46704102 -115.94190216]
[57.20467758 -130.77030945]
[47.47448730 -143.24563599]
[53.20369339 -156.99429321]
[50.94132996 -171.82270813]
[48.67896652 -186.65110779]
[37.65195084 -176.48228455]
[22.79812622 -178.57127380]
[15.00358391 -191.38708496]
[19.98080254 -205.53726196]
[34.08206940 -210.65138245]
[46.97302628 -202.98110962]
[46.12184906 -217.95693970]
[45.27066803 -232.93276978]
[44.41949081 -247.90859985]
[34.97963715 -261.31835938]
[42.11746597 -276.08261108]
[58.49018860 -277.01318359]
[67.25495148 -263.15277100]
[59.39532089 -248.75978088]
[60.24649811 -233.78395081]
[61.09767914 -218.80812073]
[61.94885635 -203.83229065]
[63.50737381 -188.91348267]
[65.76973724 -174.08506775]
[68.03210449 -159.25665283]
[77.60047150 -147.84194946]
[72.03308868 -133.03266907]
[74.29544830 -118.20426178]
[76.55781555 -103.37585449]
[78.82018280 -88.54744720]
[90.93502808 -79.95872498]
[93.44062042 -64.95284271]
[84.34983826 -52.30390930]
[86.61220551 -37.47550201]
[88.87457275 -22.64709282]
[91.13693237 -7.81868315]
[93.39929962 7.00972557]
[95.66166687 21.83813477]
[97.92402649 36.66654205]
[100.18639374 51.49495316]
[121.28170013 56.41257477]
[138.13298035 70.02249146]
[151.21694946 62.68698502]
[156.93093872 47.69599533]
[172.25720215 42.95411301]
[185.43872070 52.09890366]
[186.36376953 68.11526489]
[174.32272339 78.71681976]
[158.55245972 75.77095795]
[145.46849060 83.10646820]
[146.31709290 85.59510803]
[147.02961731 88.12607574]
[147.60392761 90.69193268]
[162.59318542 90.12430573]
[177.58244324 89.55668640]
[188.14170837 77.79754639]
[203.92747498 77.03254700]
[215.57432556 87.71555328]
[216.17237854 103.50852203]
[205.36683655 115.04177094]
[189.56842041 115.47281647]
[178.15007019 104.54594421]
[163.16081238 105.11356354]
[148.17155457 105.68118286]
[142.27912903 123.77497101]
[129.87971497 138.20964050]
[112.88163757 146.76364136]
[114.58125305 161.66703796]
[116.28086853 176.57043457]
[125.53200531 189.40504456]
[119.28662872 202.92704773]
[120.98624420 217.83044434]
[122.68585968 232.73384094]
[124.38547516 247.63723755]
[126.08509064 262.54064941]
[139.62049866 266.68762207]
[150.51472473 275.65948486]
[157.13914490 288.07211304]
[158.51985168 302.03030396]
[154.48071289 315.41717529]
[145.66506958 326.21514893]
[133.43347168 332.81002808]
[134.85075378 347.74295044]
[136.26803589 362.67584229]
[137.68530273 377.60873413]
[139.10258484 392.54162598]
[140.51986694 407.47451782]
[143.22857666 410.99594116]
[144.51777649 414.81472778]
[144.47142029 418.43942261]
[143.32702637 421.45840454]
[141.43545532 423.58377075]
[141.71932983 438.58108521]
[142.00318909 453.57839966]
[142.28704834 468.57571411]
[142.71281433 483.56967163]
[143.28042603 498.55889893]
[154.02085876 510.47622681]
[151.25802612 526.27960205]
[137.11132812 533.84600830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 162]
[3 161]
[5 160]
[6 159]
[7 158]
[8 157]
[9 152]
[10 151]
[11 150]
[12 149]
[13 148]
[14 147]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[26 134]
[27 133]
[28 132]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
[58 100]
[59 99]
[60 98]
[63 95]
[64 94]
[65 93]
[66 92]
[68 90]
[69 89]
[70 88]
[76 87]
[77 86]
[78 85]
[79 84]
[107 115]
[108 114]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
