%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAACCCACAGGCUCUGCCACUCUUCCUACUCCUGGCCUCCUUGGUAGGGAUCCUCACCCUCAGAGCCUCUUCUGGACUUCAGCAAACCAACUUCU\
) } def
/len { sequence length } bind def

/coor [
[103.09189606 151.24533081]
[102.12458801 136.27655029]
[95.79706573 149.87664795]
[89.46954346 163.47673035]
[93.59674835 178.97981262]
[83.93379974 191.78634644]
[67.89329529 192.07223511]
[57.78013229 179.61817932]
[61.35226059 163.97787476]
[75.86945343 157.14920044]
[82.19697571 143.54911804]
[88.52449799 129.94902039]
[72.64533997 105.42433929]
[83.71524048 82.77775574]
[77.38771820 69.17766571]
[71.06018829 55.57757950]
[64.73266602 41.97748947]
[58.40513992 28.37740135]
[52.07761383 14.77731228]
[45.75008774 1.17722309]
[39.42256165 -12.42286587]
[21.54331589 -11.02880955]
[4.48003960 -16.43938446]
[-9.27825642 -27.83938980]
[-17.73441315 -43.54185867]
[-19.67301559 -61.23765945]
[-14.83503342 -78.33506012]
[-3.95211387 -92.33931732]
[-11.91848087 -105.04903412]
[-19.88484764 -117.75875854]
[-27.85121536 -130.46847534]
[-35.81758118 -143.17819214]
[-43.78394699 -155.88792419]
[-51.75031662 -168.59764099]
[-59.71668243 -181.30735779]
[-73.20692444 -182.82006836]
[-83.17910767 -191.73950195]
[-86.09461975 -204.59651184]
[-81.09573364 -216.58370972]
[-88.66297913 -229.53503418]
[-101.87409210 -240.16061401]
[-95.32096863 -255.79689026]
[-78.48168182 -253.82841492]
[-75.71165466 -237.10227966]
[-68.14440918 -224.15095520]
[-51.77731705 -220.64985657]
[-42.75643158 -206.15495300]
[-47.00696182 -189.27372742]
[-39.04059601 -176.56401062]
[-31.07422829 -163.85427856]
[-23.10786057 -151.14456177]
[-15.14149380 -138.43484497]
[-7.17512703 -125.72512054]
[0.79123974 -113.01540375]
[8.75760651 -100.30567932]
[20.68068886 -103.57855988]
[33.05944061 -103.58301544]
[45.01308823 -100.31099701]
[55.68906784 -93.98786163]
[64.32381439 -85.05685425]
[70.29740143 -74.14805603]
[73.17799377 -62.03395081]
[72.75312042 -49.57468033]
[69.04527283 -37.65701675]
[62.31090546 -27.13121986]
[53.02265167 -18.75039101]
[59.35017776 -5.15030241]
[65.67770386 8.44978714]
[72.00522614 22.04987526]
[78.33275604 35.64996338]
[84.66027832 49.25005341]
[90.98780060 62.85014343]
[97.31533051 76.45023346]
[110.56890869 76.46981812]
[122.81021881 83.95647430]
[129.89025879 97.68483734]
[128.76165771 114.19148254]
[142.64205933 119.87781525]
[156.52247620 125.56414032]
[171.81619263 120.71835327]
[185.05946350 129.77348328]
[186.09318542 145.78318787]
[174.12437439 156.46621704]
[158.33447266 153.62744141]
[150.83615112 139.44454956]
[136.95573425 133.75822449]
[123.07533264 128.07189941]
[132.53036499 139.71673584]
[141.98539734 151.36157227]
[155.53120422 157.80450439]
[165.24269104 169.23634338]
[169.41102600 183.64553833]
[167.30274963 198.49664307]
[159.28883362 211.17643738]
[146.77940369 219.45378113]
[131.97564697 221.87217712]
[117.48242950 218.00608826]
[105.84999084 208.53581238]
[99.12518311 195.12771606]
[98.49131012 180.14111328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[14 73]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[39 45]
[40 44]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
