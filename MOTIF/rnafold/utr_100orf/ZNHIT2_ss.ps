%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAACCGGAAGUAAUCGAAGAAGCCCCGGAAGUUUCGAACUACCACCGGCGUGCGUUCGCAGGUAGAUCGCGGUGCCAGUUGCCAUGGAGCCGGCCGGGCCCUGUGGCUUCUGCCCGGCGGGGGAGGUCCAGCCAGCGCGUUACACCUGCCCUCGCUGUAAUGCGCCCUACUGCUCGCUGCGCU\
) } def
/len { sequence length } bind def

/coor [
[-164.40785217 292.48406982]
[-176.26948547 301.66564941]
[-188.13113403 310.84722900]
[-190.99974060 316.84313965]
[-195.75799561 320.00064087]
[-200.55200195 320.13052368]
[-212.71696472 328.90625000]
[-224.88194275 337.68197632]
[-237.04690552 346.45773315]
[-239.70199585 361.80661011]
[-252.16401672 370.53314209]
[-266.78048706 367.90734863]
[-278.94543457 376.68307495]
[-291.11041260 385.45880127]
[-298.25253296 402.42053223]
[-315.75659180 403.53762817]
[-327.77160645 412.51754761]
[-339.78662109 421.49749756]
[-351.80163574 430.47744751]
[-363.81668091 439.45739746]
[-375.83169556 448.43734741]
[-372.85311890 463.40701294]
[-376.67297363 478.18441772]
[-386.53274536 489.83547974]
[-400.47479248 496.04690552]
[-415.73092651 495.58535767]
[-429.27203369 488.54254150]
[-438.40948486 476.31677246]
[-441.32907104 461.33547974]
[-437.45108032 446.57324219]
[-427.54550171 434.96109009]
[-413.57907104 428.80462646]
[-398.32489014 429.32623291]
[-384.81161499 436.42233276]
[-372.79660034 427.44238281]
[-360.78158569 418.46243286]
[-348.76657104 409.48248291]
[-336.75155640 400.50253296]
[-324.73654175 391.52261353]
[-322.68997192 379.58654785]
[-312.73449707 372.00878906]
[-299.88613892 373.29382324]
[-287.72119141 364.51809692]
[-275.55621338 355.74237061]
[-273.43743896 341.04385376]
[-261.22543335 331.97070312]
[-245.82264709 334.29275513]
[-233.65766907 325.51702881]
[-221.49270630 316.74127197]
[-209.32772827 307.96554565]
[-197.31271362 298.98559570]
[-185.45108032 289.80401611]
[-173.58944702 280.62243652]
[-161.88456726 271.24179077]
[-150.33981323 261.66482544]
[-138.79504395 252.08787537]
[-127.25026703 242.51089478]
[-125.81088257 230.48649597]
[-116.25199890 222.41423035]
[-103.35504150 223.04687500]
[-91.65016937 213.66625977]
[-86.55747223 199.66934204]
[-70.95014954 197.07667542]
[-59.24527740 187.69606018]
[-47.54040527 178.31544495]
[-35.83553314 168.93482971]
[-24.13066101 159.55421448]
[-26.49766159 147.62234497]
[-23.54118156 135.74824524]
[-15.76435375 126.20729828]
[-4.59999514 120.85472107]
[7.85309649 120.76499176]
[19.22463608 126.01672363]
[31.23965073 117.03678131]
[43.25466919 108.05683899]
[55.26968384 99.07689667]
[67.28469849 90.09695435]
[74.67472839 77.04370117]
[76.19225311 62.12065887]
[77.70977783 47.19762039]
[67.99744415 35.01943207]
[69.74900818 19.90696526]
[81.41890717 10.72278500]
[82.93643188 -4.20025444]
[84.45395660 -19.12329483]
[85.97148132 -34.04633331]
[87.48900604 -48.96937561]
[89.00653076 -63.89241409]
[90.52405548 -78.81545258]
[84.22259521 -93.32759094]
[93.20779419 -105.20679474]
[94.72531891 -120.12983704]
[96.24284363 -135.05287170]
[87.25973511 -148.34510803]
[92.18846130 -163.61230469]
[107.24812317 -169.14277649]
[120.88623810 -160.69401550]
[122.64080811 -144.74719238]
[111.16588593 -133.53535461]
[109.64836121 -118.61231232]
[108.13083649 -103.68927002]
[114.54084015 -90.24452972]
[105.44709778 -77.29792786]
[103.92957306 -62.37488937]
[102.41204834 -47.45185089]
[100.89452362 -32.52880859]
[99.37699890 -17.60577011]
[97.85947418 -2.68272972]
[96.34194946 12.24030972]
[105.92419434 23.58562088]
[104.59779358 38.74132156]
[92.63282013 48.71514511]
[91.11529541 63.63818359]
[89.59777069 78.56122589]
[101.67485809 77.63841248]
[111.89027405 82.66699219]
[117.72074890 91.59166718]
[132.70149231 90.83193207]
[147.68225098 90.07218933]
[162.66299438 89.31245422]
[177.64373779 88.55271912]
[192.62448120 87.79297638]
[207.60523987 87.03324127]
[222.58598328 86.27350616]
[237.56672668 85.51376343]
[252.54052734 84.62754059]
[267.50631714 83.61489868]
[282.47207642 82.60224915]
[297.43786621 81.58960724]
[307.81008911 69.96831512]
[323.00195312 69.15454102]
[334.01715088 79.11450195]
[348.98294067 78.10185242]
[363.94873047 77.08920288]
[374.15402222 65.02158356]
[389.91009521 63.78798294]
[401.86914062 74.12029266]
[402.93609619 89.88852692]
[392.47790527 101.73767090]
[376.69927979 102.63784027]
[364.96136475 92.05498505]
[349.99557495 93.06763458]
[335.02981567 94.08027649]
[325.45672607 105.43332672]
[310.29373169 106.67348480]
[298.45050049 96.55538177]
[283.48474121 97.56803131]
[268.51895142 98.58067322]
[253.55317688 99.59332275]
[247.07766724 103.18964386]
[238.32646179 100.49451447]
[223.34571838 101.25424957]
[208.36497498 102.01399231]
[193.38423157 102.77372742]
[178.40347290 103.53346252]
[163.42272949 104.29320526]
[148.44198608 105.05294037]
[133.46124268 105.81267548]
[118.48049164 106.57241058]
[112.97248077 115.81828308]
[103.07020569 121.07786560]
[91.42623138 120.41601562]
[81.43977356 113.56034088]
[76.26464081 102.11196899]
[64.24962616 111.09191132]
[52.23461151 120.07185364]
[40.21959305 129.05180359]
[28.20457840 138.03173828]
[28.99961472 156.12788391]
[18.87557030 170.95838928]
[2.03010631 176.70797729]
[-14.75004387 171.25907898]
[-26.45491600 180.63969421]
[-38.15978622 190.02030945]
[-49.86465836 199.40092468]
[-61.56953049 208.78153992]
[-67.49943542 223.44943237]
[-82.26955414 225.37113953]
[-93.97442627 234.75175476]
[-100.24827576 252.05343628]
[-117.67330170 254.05566406]
[-129.21806335 263.63262939]
[-140.76283264 273.20959473]
[-152.30760193 282.78656006]
[-154.97207642 288.87594604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[6 50]
[7 49]
[8 48]
[9 47]
[12 44]
[13 43]
[14 42]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[54 184]
[55 183]
[56 182]
[57 181]
[60 179]
[61 178]
[63 176]
[64 175]
[65 174]
[66 173]
[67 172]
[73 168]
[74 167]
[75 166]
[76 165]
[77 164]
[78 114]
[79 113]
[80 112]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[91 101]
[92 100]
[93 99]
[117 159]
[118 158]
[119 157]
[120 156]
[121 155]
[122 154]
[123 153]
[124 152]
[125 151]
[126 149]
[127 148]
[128 147]
[129 146]
[132 143]
[133 142]
[134 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
