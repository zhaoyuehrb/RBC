%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACUAGGGGUGGCCGUCAUGCUGGGGCUAAACCACACCUCCAUGUCUGAAUUCAUCCUCGUCGGCUUCUCUGCCUUCCCCCACCUCCAACUGAUGCUCUUCCUGCUGUUCCUGCUGA\
) } def
/len { sequence length } bind def

/coor [
[138.26098633 278.38476562]
[135.66633606 268.10925293]
[134.62100220 257.56021118]
[135.14880371 246.96997070]
[137.23889160 236.57192993]
[140.84597778 226.59529114]
[145.89134216 217.26014709]
[152.26454163 208.77252197]
[159.82575989 201.31990051]
[151.39128113 188.91587830]
[142.95681763 176.51187134]
[134.52233887 164.10784912]
[126.08787537 151.70382690]
[117.65340424 139.29980469]
[109.21892548 126.89579010]
[91.33407593 128.76033020]
[74.91034698 119.28217316]
[66.76854706 101.07634735]
[71.04763031 80.59382629]
[56.60158539 76.55503082]
[42.15554428 72.51622772]
[26.78172874 76.25204468]
[16.60777473 65.37362671]
[2.16173387 61.33483124]
[-12.33551979 57.48390198]
[-26.88154221 53.82149506]
[-41.42756271 50.15908813]
[-55.97358704 46.49667740]
[-70.51960754 42.83427048]
[-80.67849731 54.28222275]
[-94.99797058 59.68696213]
[-110.18752289 57.80652237]
[-122.75670624 49.07300949]
[-129.81721497 35.49332809]
[-129.74659729 20.18798256]
[-122.56106567 6.67403126]
[-109.91182709 -1.94311702]
[-94.70556641 -3.68330598]
[-80.43657684 1.85334754]
[-70.38376617 13.39456081]
[-66.85720062 28.28824806]
[-52.31117630 31.95065498]
[-37.76515579 35.61306381]
[-23.21913338 39.27547455]
[-8.67311096 42.93788147]
[-1.32988036 41.50246048]
[6.20053244 46.88879013]
[20.64657402 50.92758942]
[34.98711395 46.90288925]
[46.19434357 58.07019043]
[60.64038467 62.10898590]
[75.08642578 66.14778900]
[64.34513855 55.67760468]
[50.43938065 50.05355453]
[40.20130539 39.09080505]
[35.53991318 24.83347702]
[37.32436371 9.93999767]
[45.22193146 -2.81258845]
[57.76002884 -11.04642773]
[72.60079956 -13.22623444]
[86.97702026 -8.94556141]
[98.20810699 0.99741459]
[104.19989777 14.74872303]
[103.83515930 29.74428749]
[97.18338776 43.18617630]
[96.11631012 58.14817047]
[104.22592926 45.52936935]
[112.33554077 32.91056442]
[108.73161316 17.52267265]
[117.13500977 4.13766432]
[132.56015015 0.69663018]
[145.85556030 9.24107361]
[149.13331604 24.70172882]
[140.44879150 37.90606308]
[124.95433807 41.02017975]
[116.84472656 53.63898087]
[108.73511505 66.25778198]
[118.81517792 71.94016266]
[126.18551636 80.39127350]
[130.17901611 90.48579407]
[130.55715942 100.97707367]
[127.51301575 110.64994049]
[121.62294769 118.46131897]
[130.05741882 130.86534119]
[138.49189758 143.26936340]
[146.92636108 155.67337036]
[155.36083984 168.07739258]
[163.79530334 180.48141479]
[172.22978210 192.88543701]
[191.54908752 185.92216492]
[212.03816223 184.73701477]
[232.00700378 189.42056274]
[249.81057739 199.57966614]
[263.98431396 214.37034607]
[273.36459351 232.56799316]
[277.18420410 252.66871643]
[275.13525391 273.01364136]
[267.39379883 291.92581177]
[279.46002197 300.83685303]
[294.61868286 296.99642944]
[308.67691040 303.84478760]
[314.99682617 318.14837646]
[310.59436035 333.15347290]
[297.54824829 341.77508545]
[282.01843262 339.94241333]
[271.33761597 328.52075195]
[270.54898071 312.90304565]
[258.48275757 303.99203491]
[250.80233765 311.24057007]
[242.13137817 317.27392578]
[232.66049194 321.95852661]
[222.59799194 325.19046021]
[212.16531372 326.89773560]
[201.59217834 327.04199219]
[191.11154175 325.61926270]
[180.95439148 322.66009521]
[171.34472656 318.22894287]
[162.49461365 312.42269897]
[154.59944153 305.36865234]
[147.83367920 297.22161865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[19 52]
[20 51]
[21 50]
[23 48]
[24 47]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[66 77]
[67 76]
[68 75]
[98 108]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
