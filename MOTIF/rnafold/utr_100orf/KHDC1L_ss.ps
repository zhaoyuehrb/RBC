%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGUUAGACUUUCCCCUAUUCUGAAUCAGGUGGGAGCACAGCAUGGCCGUGGGAACGAGUGCUCUCAGCAAGGAGCCGUGGUGGACCCUGCCCGAAAACUUUCAUUCUCCAAUGGUGUUCCACAUGGAAGAGGACCAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[107.14694977 143.03013611]
[94.08390808 150.40284729]
[80.17495728 144.78671265]
[75.89359283 130.41069031]
[84.46478271 118.09939575]
[76.98062134 118.58654022]
[67.39424133 130.12348938]
[57.80786133 141.66044617]
[48.22148514 153.19740295]
[38.63510513 164.73435974]
[44.57172394 178.84162903]
[43.26080704 194.09089661]
[35.00359726 206.97798157]
[21.69753456 214.54153442]
[6.40026045 215.04350281]
[-7.37302637 208.36854553]
[-16.45732498 196.05050659]
[-18.76512909 180.91998291]
[-13.76612377 166.45387268]
[-2.60904241 155.97636414]
[12.14229870 151.89512634]
[27.09814835 155.14797974]
[36.68452835 143.61102295]
[46.27090454 132.07406616]
[55.85728455 120.53711700]
[65.44366455 109.00016022]
[76.65837860 96.26045227]
[90.27539062 93.73236847]
[83.97705078 80.11873627]
[71.16032410 70.84284973]
[72.83846283 56.04308319]
[66.54013062 42.42945099]
[60.24179077 28.81582069]
[53.94345474 15.20218945]
[47.64511871 1.58855808]
[41.34678268 -12.02507305]
[27.62241554 -13.69469166]
[16.61402702 -21.87840462]
[11.14815807 -34.34104919]
[12.56167603 -47.76692963]
[20.37654305 -58.64179230]
[14.37461662 -72.38867950]
[1.76185668 -81.94005585]
[3.76023269 -96.69999695]
[-2.24169374 -110.44688416]
[-8.24361992 -124.19376373]
[-14.24554634 -137.94065857]
[-20.24747276 -151.68754578]
[-26.24939919 -165.43443298]
[-34.66720581 -177.84976196]
[-45.21620178 -188.51365662]
[-55.76519394 -199.17755127]
[-71.71659088 -202.98345947]
[-76.13631439 -218.77580261]
[-64.47772217 -230.30877686]
[-48.73418427 -225.71824646]
[-45.10129929 -209.72654724]
[-34.55230331 -199.06265259]
[-24.00330734 -188.39875793]
[-17.45463181 -192.05455017]
[-4.35727835 -199.36613464]
[2.19139791 -203.02194214]
[-1.34977114 -217.59794617]
[-4.89094019 -232.17396545]
[-8.43210983 -246.74996948]
[-18.04681396 -260.71398926]
[-7.29013014 -273.81857300]
[8.28006744 -267.10998535]
[6.14390230 -250.29113770]
[9.68507195 -235.71513367]
[13.22624111 -221.13911438]
[16.76741028 -206.56311035]
[15.24327469 -193.92495728]
[10.47952271 -183.54788208]
[3.49372602 -176.15832520]
[-4.55977488 -172.12402344]
[-12.50251293 -171.43635559]
[-6.50058651 -157.68946838]
[-0.49866009 -143.94258118]
[5.50326633 -130.19569397]
[11.50519276 -116.44880676]
[17.50711823 -102.70191956]
[29.69058037 -94.13381195]
[28.12150383 -78.39060211]
[34.12342834 -64.64371490]
[50.22974014 -61.65200806]
[61.51166153 -49.54668427]
[63.40076828 -32.94053650]
[54.96041489 -18.32341003]
[61.25875092 -4.70977831]
[67.55709076 8.90385246]
[73.85542297 22.51748466]
[80.15376282 36.13111496]
[86.45209503 49.74474716]
[98.81832123 58.04689789]
[97.59068298 73.82040405]
[103.88901520 87.43403625]
[103.24169922 72.44800568]
[109.38056183 58.76172638]
[121.00303650 49.27920532]
[135.64300537 46.01250076]
[150.19409180 49.65475464]
[161.56875610 59.43313217]
[167.35350037 73.27281189]
[166.32086182 88.23722839]
[158.68997192 101.15115356]
[146.07997131 109.27444458]
[131.16651917 110.88346863]
[117.11418915 105.63691711]
[128.11521912 115.83383179]
[139.11627197 126.03075409]
[150.11730957 136.22767639]
[156.58367920 138.09834290]
[160.49768066 142.34683228]
[161.36183167 147.11256409]
[171.91082764 157.77645874]
[182.45982361 168.44036865]
[193.00881958 179.10426331]
[208.21466064 183.47378540]
[211.66467285 197.96331787]
[222.21366882 208.62721252]
[232.76266479 219.29112244]
[247.83335876 215.99296570]
[262.28677368 221.38763428]
[271.51086426 233.75370789]
[272.56228638 249.14520264]
[265.10549927 262.65075684]
[251.51995850 269.96078491]
[236.14076233 268.74270630]
[223.87533569 259.38519287]
[218.63755798 244.87419128]
[222.09877014 229.84011841]
[211.54977417 219.17620850]
[201.00077820 208.51231384]
[186.54946899 204.90554810]
[182.34492493 189.65325928]
[171.79592896 178.98936462]
[161.24693298 168.32545471]
[150.69793701 157.66156006]
[139.92039490 147.22871399]
[128.91934204 137.03178406]
[117.91831207 126.83487701]
[106.91726685 116.63795471]
[99.43310547 117.12509918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[28 97]
[29 96]
[31 94]
[32 93]
[33 92]
[34 91]
[35 90]
[36 89]
[41 85]
[42 84]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[50 59]
[51 58]
[52 57]
[62 72]
[63 71]
[64 70]
[65 69]
[109 143]
[110 142]
[111 141]
[112 140]
[115 139]
[116 138]
[117 137]
[118 136]
[120 134]
[121 133]
[122 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
