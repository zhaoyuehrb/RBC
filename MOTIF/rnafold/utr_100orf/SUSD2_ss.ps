%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCGGAGCCACUGCACUGCUGGCUGCAGACACAGGCUGCACCAUGAAGCCAGCCCUCCUGCCCUGGGCCCUGCUGCUGCUGGCGACAGCCCUCGGCCCGGGCCCCGGACCCACAGCAGAUGCCCAAGAGAGCUGCUCCAUGC\
) } def
/len { sequence length } bind def

/coor [
[110.57618713 427.86746216]
[97.45281982 419.88793945]
[90.09149170 406.40808105]
[90.47236633 391.05392456]
[98.49298096 377.95562744]
[111.99584198 370.63656616]
[112.32080841 355.64010620]
[112.64577484 340.64361572]
[112.97074127 325.64715576]
[113.29570770 310.65066528]
[102.84087372 300.10400391]
[102.95680237 284.89080811]
[114.08999634 273.99633789]
[114.41496277 258.99984741]
[113.60287476 244.02185059]
[111.65840912 229.14840698]
[109.71394348 214.27497864]
[107.60846710 199.42347717]
[105.34223175 184.59565735]
[103.07599640 169.76785278]
[100.80976105 154.94003296]
[98.54352570 140.11221313]
[96.27729034 125.28439331]
[83.21405029 120.91564178]
[73.76362610 110.00703430]
[71.06046295 95.15951538]
[76.51168823 80.38245392]
[62.57703781 74.83038330]
[48.64238739 69.27831268]
[34.70773697 63.72623825]
[25.04020309 71.78382874]
[12.92672729 74.91927338]
[0.70630026 72.59110260]
[-9.28866673 65.30672455]
[-15.17750263 54.51338959]
[-15.88501549 42.31104279]
[-29.56607819 36.16054916]
[-43.24713898 30.01005936]
[-56.92819977 23.85956573]
[-70.67508698 17.85763931]
[-84.48618317 12.00498390]
[-97.71217346 20.11995888]
[-113.17942810 18.87751007]
[-124.94046783 8.75538158]
[-128.47294617 -6.35425949]
[-122.41853333 -20.64144897]
[-109.10529327 -28.61247063]
[-93.65242767 -27.20230484]
[-82.00188446 -16.95318604]
[-78.63352966 -1.80611384]
[-64.82243347 4.04654217]
[-57.38142776 3.75819707]
[-50.77770996 10.17850494]
[-37.09664536 16.32899666]
[-23.41558456 22.47948837]
[-9.73452377 28.62998199]
[5.09780884 19.15340805]
[22.80918884 20.43270683]
[36.36217880 32.14684677]
[40.25980759 49.79158783]
[54.19445801 55.34365845]
[68.12911224 60.89573288]
[82.06375885 66.44780731]
[96.42668152 62.12269974]
[104.97848511 49.79928207]
[106.48957825 34.05040359]
[120.10232544 28.00536346]
[128.65412903 15.68194580]
[137.20593262 3.35852790]
[145.75773621 -8.96488953]
[154.30953979 -21.28830719]
[162.86134338 -33.61172485]
[163.92903137 -51.96054077]
[180.02023315 -58.88382339]
[188.30305481 -71.38961792]
[196.58586121 -83.89541626]
[204.86868286 -96.40120697]
[201.06031799 -113.43869781]
[210.53488159 -127.69935608]
[227.05398560 -130.67160034]
[235.06391907 -143.35391235]
[243.07386780 -156.03620911]
[251.08380127 -168.71852112]
[251.19401550 -185.11729431]
[265.58264160 -192.98489380]
[279.44790649 -184.22781372]
[278.52642822 -167.85458374]
[263.76611328 -160.70857239]
[255.75616455 -148.02627563]
[247.74623108 -135.34396362]
[239.73628235 -122.66166687]
[244.31062317 -110.56980133]
[241.01376343 -97.86746216]
[230.83822632 -89.27476501]
[217.37448120 -88.11839294]
[209.09165955 -75.61259460]
[200.80883789 -63.10680008]
[192.52603149 -50.60100555]
[194.62121582 -38.64022064]
[187.76004028 -28.13813019]
[175.18476868 -25.05991936]
[166.63296509 -12.73650169]
[158.08116150 -0.41308391]
[149.52935791 11.91033363]
[140.97753906 24.23375130]
[132.42573547 36.55716705]
[131.52632141 51.42459488]
[117.30190277 58.35108566]
[108.75009918 70.67450714]
[118.95202637 77.05220795]
[125.65118408 86.64170837]
[127.99073792 97.76242065]
[125.85124207 108.58353424]
[119.82988739 117.42497253]
[111.10511017 123.01815796]
[113.37134552 137.84597778]
[115.63758087 152.67379761]
[117.90381622 167.50161743]
[120.17005157 182.32942200]
[122.43628693 197.15724182]
[126.85588837 205.23786926]
[124.58737946 212.33050537]
[126.53184509 227.20394897]
[128.47631836 242.07737732]
[137.98368835 230.47523499]
[152.68965149 227.51983643]
[165.94111633 234.54824829]
[171.74301147 248.38075256]
[167.47048950 262.75939941]
[155.05648804 271.17916870]
[140.11720276 269.83090210]
[129.41143799 259.32482910]
[129.08647156 274.32128906]
[139.73727417 285.68783569]
[139.19407654 300.89175415]
[128.29219055 310.97561646]
[127.96722412 325.97210693]
[127.64225769 340.96859741]
[127.31729126 355.96505737]
[126.99232483 370.96154785]
[140.16545105 378.85864258]
[147.61114502 392.29208374]
[147.32653809 407.64834595]
[139.38818359 420.79666138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[13 133]
[14 132]
[15 124]
[16 123]
[17 122]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[27 63]
[28 62]
[29 61]
[30 60]
[36 56]
[37 55]
[38 54]
[39 53]
[40 51]
[41 50]
[64 109]
[65 108]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[72 101]
[74 98]
[75 97]
[76 96]
[77 95]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
