%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACGAGGCCCCCGGUUGACUAGGAGCUGGCGGUCCGAGCUGUGGCUUGGAAGACCGACGCGAUGAAGCCCAGACCUGCAGGGUUCGUGGAUAAUAAACUCAAGCAGCGAGUCAUCCAGUACCUUACCAGUAACAAAUGUGGCAAAUAUGUGGACAUUGGAG\
) } def
/len { sequence length } bind def

/coor [
[187.01754761 526.36676025]
[184.42863464 511.59185791]
[181.83973694 496.81695557]
[179.25083923 482.04208374]
[176.66192627 467.26718140]
[159.94519043 457.34332275]
[155.77833557 438.04428101]
[167.25866699 421.61001587]
[163.82026672 407.00939941]
[160.38188171 392.40881348]
[143.75924683 388.07647705]
[131.53729248 375.87973022]
[127.12557220 359.09448242]
[131.81860352 342.29354858]
[144.41781616 330.10095215]
[140.41929626 315.64370728]
[136.42077637 301.18646240]
[132.42227173 286.72921753]
[127.58512878 281.09365845]
[128.48887634 271.95474243]
[124.76973724 257.42312622]
[120.49333954 243.04562378]
[115.66604614 228.84361267]
[110.83874512 214.64160156]
[99.41717529 205.08142090]
[102.30169678 189.52539062]
[97.47440338 175.32337952]
[92.64710236 161.12135315]
[87.81980896 146.91934204]
[82.99251556 132.71733093]
[71.36875153 123.23638916]
[56.48630905 121.36212921]
[41.60386658 119.48786926]
[26.67346191 118.04458618]
[11.70757866 117.03349304]
[-3.25830555 116.02239227]
[-18.22418976 115.01129913]
[-33.19007492 114.00020599]
[-48.15595627 112.98910522]
[-63.12184143 111.97801208]
[-77.59796906 119.68345642]
[-91.36396027 110.77114105]
[-90.25855255 94.40929413]
[-75.41889191 87.42958069]
[-62.11074829 97.01213074]
[-47.14486313 98.02322388]
[-32.17897797 99.03431702]
[-17.21309471 100.04541779]
[-2.24721026 101.05651093]
[12.71867371 102.06760406]
[27.68455887 103.07870483]
[30.59133530 101.00402069]
[34.66191101 100.26100922]
[39.24675751 101.38761139]
[43.47812653 104.60542297]
[58.36057281 106.47968292]
[73.24301910 108.35395050]
[69.98217773 88.83388519]
[80.98912048 69.40080261]
[76.71272278 55.02330780]
[72.43632507 40.64581299]
[68.15992737 26.26831436]
[63.88353348 11.89081669]
[60.53829956 8.95399475]
[58.53304291 5.44913387]
[57.88029861 1.87716842]
[58.42537689 -1.31001580]
[59.87773132 -3.76082969]
[56.72136307 -18.42498016]
[53.56499100 -33.08913040]
[50.40862274 -47.75328445]
[35.92997742 -53.07985306]
[26.64776611 -65.40235901]
[25.52391434 -80.78873444]
[32.91703415 -94.32923889]
[46.46800995 -101.70314789]
[61.85277557 -100.55747986]
[74.16210938 -91.25780487]
[79.46813965 -76.77162170]
[76.07774353 -61.72141647]
[65.07277679 -50.90965271]
[68.22914124 -36.24550247]
[71.38551331 -21.58135033]
[74.54188538 -6.91719961]
[78.26103210 7.61441946]
[82.53742981 21.99191666]
[86.81382751 36.36941528]
[91.09022522 50.74691010]
[95.36661530 65.12440491]
[102.51282501 67.40075684]
[105.65287018 52.73310089]
[103.54450226 37.88201141]
[115.00071716 28.19928360]
[129.29290771 32.75267029]
[133.03662109 47.27797699]
[122.72734070 58.17198563]
[116.80523682 71.95344543]
[123.95143890 74.22978973]
[135.75576782 64.97463226]
[147.56008911 55.71947479]
[159.36441040 46.46431351]
[159.70251465 30.83038712]
[170.04962158 19.10557365]
[185.52015686 16.82597351]
[198.80940247 25.06794357]
[203.64257812 39.93987656]
[197.73760986 54.41970444]
[183.88264465 61.67049026]
[168.61956787 58.26863861]
[156.81524658 67.52379608]
[145.01092529 76.77895355]
[133.20660400 86.03411102]
[133.78431702 104.04539490]
[125.75643921 119.03569031]
[112.16341400 127.45535278]
[97.19452667 127.89002991]
[102.02182770 142.09204102]
[106.84912109 156.29406738]
[111.67641449 170.49607849]
[116.50370789 184.69808960]
[128.27055359 195.27409363]
[125.04076385 209.81430054]
[129.86805725 224.01631165]
[134.69535828 238.21833801]
[138.15127563 241.02406311]
[140.29011536 244.44903564]
[141.08003235 247.99319458]
[140.65818787 251.19902039]
[139.30136108 253.70397949]
[143.02050781 268.23559570]
[146.87951660 282.73071289]
[150.87802124 297.18795776]
[154.87654114 311.64520264]
[158.87506104 326.10241699]
[171.67854309 328.15618896]
[182.70547485 334.88980103]
[190.32536316 345.26593018]
[193.42730713 357.71182251]
[191.58193970 370.35769653]
[185.10035706 381.31753540]
[174.98246765 388.97042847]
[178.42086792 403.57101440]
[181.85926819 418.17160034]
[192.12351990 421.37438965]
[200.05459595 428.51406860]
[204.25057983 438.23764038]
[204.00791931 448.74411011]
[199.43849182 458.11791992]
[191.43682861 464.67828369]
[194.02572632 479.45315552]
[196.61463928 494.22805786]
[199.20353699 509.00296021]
[201.79243469 523.77783203]
[216.24676514 528.97094727]
[226.15580750 540.70574951]
[228.85406494 555.82580566]
[223.61572266 570.26379395]
[211.84986877 580.13598633]
[196.72146606 582.78680420]
[182.29997253 577.50323486]
[172.46470642 565.70648193]
[169.86128235 550.56988525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[8 143]
[9 142]
[10 141]
[15 134]
[16 133]
[17 132]
[18 131]
[20 130]
[21 129]
[22 124]
[23 123]
[24 122]
[26 120]
[27 119]
[28 118]
[29 117]
[30 116]
[31 57]
[32 56]
[33 55]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[68 84]
[69 83]
[70 82]
[71 81]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
