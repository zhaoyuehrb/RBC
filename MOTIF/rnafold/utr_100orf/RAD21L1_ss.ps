%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCAGACGAGGCUUUGAAAGUAGGGCGCAGCCUGAGAGGCCGGCCGGACCCCGAGUGCUUUUGUUAAAUACAAGUAAGGAACACAGGCAACAUGUUCUACACACAUGUGCUUAUGAGUAAACGAGGGCCAUUGGCCAAAAUAUGGCUUGCAGCUCACUGGGAGAAGAAACUCACAAAGGCCCAUGUAUUUG\
) } def
/len { sequence length } bind def

/coor [
[109.49992371 215.63404846]
[105.24231720 201.24786377]
[101.63444519 215.80751038]
[98.02657318 230.36715698]
[94.41869354 244.92678833]
[99.47903442 260.52566528]
[88.30068207 272.52468872]
[72.38296509 268.58029175]
[68.10066986 252.75012207]
[79.85905457 241.31892395]
[83.46692657 226.75927734]
[87.07479858 212.19963074]
[90.68267822 197.63998413]
[92.50000000 182.75048828]
[92.50000000 167.75048828]
[92.50000000 152.75048828]
[92.50000000 137.75048828]
[92.50000000 122.75048065]
[78.83712769 111.22351074]
[76.95899963 93.44662476]
[87.91146851 79.31904602]
[84.77695465 64.65020752]
[81.64244080 49.98136902]
[76.78235626 42.22997284]
[78.57796478 35.04968643]
[75.68139648 20.33201408]
[72.78482819 5.61434126]
[69.88825989 -9.10333157]
[66.87261963 -23.79706955]
[63.73810577 -38.46590805]
[60.60359192 -53.13474655]
[57.35041046 -67.77772522]
[53.97877502 -82.39388275]
[50.60713959 -97.01004028]
[33.79971313 -100.47093201]
[20.23526192 -110.89102173]
[12.60837746 -126.13945007]
[12.40749454 -143.13241577]
[19.62465858 -158.45683289]
[32.76682281 -169.05581665]
[28.92365837 -183.55513000]
[25.08049202 -198.05444336]
[21.23732376 -212.55375671]
[17.39415741 -227.05307007]
[13.55099106 -241.55238342]
[2.80406880 -248.70129395]
[-0.09295352 -260.86761475]
[5.88374138 -271.39480591]
[2.27586722 -285.95443726]
[-2.83267450 -293.54440308]
[-1.27051592 -300.77905273]
[-4.64215183 -315.39523315]
[-8.01378822 -330.01138306]
[-11.50365734 -344.59976196]
[-15.11153126 -359.15939331]
[-28.36404800 -367.34527588]
[-31.81553650 -382.16223145]
[-23.92988396 -394.74603271]
[-27.53775787 -409.30566406]
[-31.14563179 -423.86532593]
[-34.75350571 -438.42495728]
[-42.90950775 -451.01382446]
[-54.72301865 -460.25726318]
[-66.53652954 -469.50067139]
[-78.35004425 -478.74411011]
[-90.16355133 -487.98754883]
[-106.19853973 -487.47894287]
[-116.48366547 -499.79138184]
[-113.12905121 -515.47979736]
[-98.70807648 -522.50933838]
[-84.28327942 -515.48760986]
[-80.92012787 -499.80105591]
[-69.10661316 -490.55761719]
[-57.29310226 -481.31420898]
[-45.47959137 -472.07077026]
[-33.66608047 -462.82733154]
[-26.74865913 -465.72549438]
[-32.68445587 -479.50106812]
[-42.37196732 -490.95324707]
[-34.54900360 -503.75170898]
[-19.93925667 -500.35238647]
[-18.57004738 -485.41448975]
[-12.91381836 -471.52178955]
[-5.99639845 -474.41995239]
[-4.29969120 -489.32369995]
[-10.42634296 -503.91049194]
[-1.29907036 -515.68090820]
[0.39763707 -530.58459473]
[2.09434438 -545.48834229]
[3.79105186 -560.39208984]
[5.48775911 -575.29577637]
[3.34718084 -584.19085693]
[7.33451271 -590.42639160]
[9.27233505 -605.30072021]
[11.21015644 -620.17504883]
[13.14797878 -635.04931641]
[15.08580112 -649.92364502]
[4.37313032 -661.31542969]
[3.54086351 -676.93084717]
[12.98197079 -689.39678955]
[28.23864937 -692.82714844]
[42.10716248 -685.60235596]
[48.03922653 -671.13360596]
[43.23389435 -656.25262451]
[29.96010208 -647.98577881]
[28.02227974 -633.11151123]
[26.08445740 -618.23718262]
[24.14663696 -603.36291504]
[22.20881462 -588.48858643]
[20.39148903 -573.59912109]
[18.69478226 -558.69537354]
[16.99807549 -543.79162598]
[15.30136776 -528.88787842]
[13.60466003 -513.98419189]
[19.85267258 -500.46337891]
[10.60403919 -487.62698364]
[8.90733242 -472.72323608]
[-20.19386292 -442.03283691]
[-16.58598709 -427.47317505]
[-12.97811413 -412.91354370]
[-9.37023926 -398.35391235]
[3.47873425 -390.90814209]
[7.34503937 -376.19396973]
[-0.55188739 -362.76727295]
[3.05598688 -348.20764160]
[7.72305346 -342.46313477]
[6.60237026 -333.38302612]
[9.97400570 -318.76684570]
[13.34564209 -304.15069580]
[16.83551216 -289.56231689]
[20.44338608 -275.00268555]
[33.27939606 -263.04479980]
[28.05030441 -245.39553833]
[31.89347076 -230.89622498]
[35.73663712 -216.39691162]
[39.57980347 -201.89761353]
[43.42296982 -187.39830017]
[47.26613617 -172.89898682]
[60.19544601 -171.49517822]
[71.90502167 -165.76316833]
[80.98888397 -156.36701965]
[86.34811401 -144.41212463]
[87.32376862 -131.31529236]
[83.77780151 -118.63673401]
[76.11215973 -107.89429474]
[65.22329712 -100.38167572]
[68.59493256 -85.76551819]
[71.96656799 -71.14936066]
[76.54000092 -65.33004761]
[75.27243042 -56.26926041]
[78.40694427 -41.60042191]
[81.54145813 -26.93158150]
[86.02005768 -21.03897285]
[84.60593414 -11.99990082]
[87.50250244 2.71777201]
[90.39907074 17.43544388]
[93.29563904 32.15311813]
[96.31127930 46.84685516]
[99.44579315 61.51569366]
[102.58030701 76.18453217]
[116.11182404 82.27307892]
[123.46145630 95.16320801]
[121.80924988 109.90914917]
[132.83644104 120.07777405]
[143.86364746 130.24639893]
[159.64285278 129.35639954]
[171.37394714 139.94682312]
[172.09706116 155.73455811]
[161.38320923 167.35302734]
[145.58869934 167.90919495]
[134.08416748 157.07308960]
[133.69500732 141.27359009]
[122.66781616 131.10496521]
[111.64062500 120.93634033]
[109.61320496 121.94130707]
[107.50000000 122.75048065]
[107.50000000 137.75048828]
[107.50000000 152.75048828]
[107.50000000 167.75048828]
[107.50000000 182.75048828]
[115.09086609 169.81298828]
[126.79331970 160.42936707]
[141.07122803 155.83137512]
[156.05033875 156.62258911]
[169.76440430 162.69914246]
[180.41319275 173.26338196]
[186.59887695 186.92857361]
[187.50947571 201.90089417]
[183.02543640 216.21499634]
[173.73539734 227.99189758]
[160.85882568 235.68563843]
[146.08599854 238.28631592]
[131.35610962 235.45252991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[14 180]
[15 179]
[16 178]
[17 177]
[18 176]
[21 160]
[22 159]
[23 158]
[25 157]
[26 156]
[27 155]
[28 154]
[29 152]
[30 151]
[31 150]
[32 148]
[33 147]
[34 146]
[40 138]
[41 137]
[42 136]
[43 135]
[44 134]
[45 133]
[48 131]
[49 130]
[51 129]
[52 128]
[53 127]
[54 125]
[55 124]
[58 121]
[59 120]
[60 119]
[61 118]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[84 117]
[85 116]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[163 174]
[164 173]
[165 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
