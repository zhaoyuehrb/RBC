%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGUGUAGCUGCGAGAACCUUUGCACGCGCACAAACUACGGGGACGAUUUCUGAUUGAUUUUUGGCGCUUUCGAUCCACCCUCCUCCCUUCUCAUGGGACUUUGGGGACAAAGCGUCCCGACCGCCUCGAGCGCUCGAGCAGGGCGCUAUCCAGGAGCCAGGACAGCGUCGGGAACCAGACCAUGGCUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[114.19010162 151.01362610]
[102.41756439 160.30917358]
[89.93915558 151.98515320]
[93.99929047 137.54576111]
[86.50531006 137.84622192]
[77.72747803 150.00967407]
[68.94964600 162.17312622]
[60.17181396 174.33659363]
[57.68283463 183.13862610]
[51.15453339 186.62313843]
[42.18287659 198.64433289]
[33.30784607 210.73706055]
[24.53001404 222.90051270]
[15.75218296 235.06396484]
[6.97435141 247.22743225]
[-1.80348015 259.39086914]
[-10.58131123 271.55435181]
[-11.70399380 287.91500854]
[-26.55101776 294.87905884]
[-39.84903717 285.28247070]
[-37.91819382 268.99737549]
[-22.74476814 262.77651978]
[-13.96693707 250.61305237]
[-5.18910503 238.44960022]
[3.58872628 226.28613281]
[12.36655807 214.12268066]
[21.14439011 201.95922852]
[22.51100922 194.68647766]
[30.16167068 189.67268372]
[39.13332748 177.65147400]
[48.00835800 165.55876160]
[56.78619003 153.39529419]
[65.56401825 141.23184204]
[74.34185028 129.06838989]
[66.89264679 118.48483276]
[63.47557831 106.29976654]
[64.29813385 93.95914459]
[69.07593536 82.86314392]
[77.08666992 74.20730591]
[87.27246857 68.85407257]
[98.37687683 67.24852753]
[92.74787140 53.34477997]
[87.11886597 39.44102859]
[81.48986053 25.53727722]
[75.86085510 11.63352585]
[69.73218536 4.84308386]
[70.25502777 -2.53846169]
[64.84958649 -16.53064728]
[47.08898926 -17.44816589]
[31.53395653 -25.90708542]
[21.20169830 -40.18996048]
[18.06316566 -57.45731354]
[3.43924618 -60.79512787]
[-10.85511971 -53.51153946]
[-25.40187454 -60.27700424]
[-29.04199028 -75.90163422]
[-18.98308563 -88.39955139]
[-2.94148803 -88.18342590]
[6.77706003 -75.41904449]
[21.40097809 -72.08123016]
[23.80364418 -76.68631744]
[26.78905487 -80.93684387]
[30.30572128 -84.75949860]
[34.29299164 -88.08835602]
[38.68210220 -90.86600494]
[43.39735413 -93.04454041]
[40.76632690 -107.81199646]
[38.13529968 -122.57944489]
[35.50427246 -137.34689331]
[32.87324524 -152.11434937]
[30.24221992 -166.88180542]
[27.61119270 -181.64926147]
[24.98016548 -196.41671753]
[15.70173454 -202.12290955]
[11.19459915 -211.79747009]
[12.73084545 -222.13716125]
[19.56289673 -229.75601196]
[17.40654182 -244.60020447]
[15.25018787 -259.44439697]
[10.91472626 -267.49887085]
[13.18021107 -274.54360962]
[11.26205349 -289.42044067]
[-2.81344080 -295.40606689]
[-11.94277287 -307.55319214]
[-13.75419712 -322.53933716]
[-7.86064577 -336.32781982]
[4.06300354 -345.25485229]
[2.14484596 -360.13171387]
[0.22668858 -375.00857544]
[-1.69146883 -389.88540649]
[-14.95432091 -398.16979980]
[-19.73997498 -413.05706787]
[-13.78879356 -427.51797485]
[0.08925937 -434.72448730]
[15.34139061 -431.27389526]
[24.76601028 -418.79550171]
[23.91310120 -403.18118286]
[13.18538094 -391.80358887]
[15.10353851 -376.92672729]
[17.02169609 -362.04986572]
[18.93985367 -347.17303467]
[32.73792648 -341.56243896]
[41.93623734 -329.71981812]
[43.98536301 -314.76431274]
[38.23577499 -300.69879150]
[26.13890457 -291.33862305]
[28.05706215 -276.46176147]
[30.09438324 -261.60076904]
[32.25073624 -246.75656128]
[34.40709305 -231.91236877]
[47.46543503 -217.66145325]
[39.74761963 -199.04774475]
[42.37864685 -184.28028870]
[45.00967407 -169.51283264]
[47.64070129 -154.74537659]
[50.27172852 -139.97792053]
[52.90275574 -125.21047211]
[55.53378296 -110.44301605]
[58.16480637 -95.67556763]
[74.59620667 -91.96826172]
[88.04106903 -81.73809814]
[96.04278564 -66.80213165]
[97.11769104 -49.84186935]
[91.02996826 -33.92188644]
[78.84177399 -21.93608284]
[84.24720764 -7.94389629]
[89.76461029 6.00452042]
[95.39361572 19.90827179]
[101.02262115 33.81202316]
[106.65162659 47.71577454]
[112.28063202 61.61952591]
[125.46670532 68.76985931]
[140.19009399 65.90248108]
[154.91348267 63.03510284]
[169.63687134 60.16772461]
[184.36026001 57.30034637]
[199.08364868 54.43296432]
[213.80703735 51.56558609]
[223.92970276 39.11925888]
[239.96998596 39.41740036]
[249.62315369 52.23130417]
[245.48410034 67.73123169]
[230.72798157 74.02697754]
[216.67440796 66.28897095]
[201.95101929 69.15635681]
[187.22763062 72.02373505]
[172.50424194 74.89111328]
[157.78086853 77.75849152]
[143.05747986 80.62586975]
[128.33409119 83.49324799]
[134.62565613 96.67118073]
[134.72444153 112.12036896]
[127.90291595 126.92097473]
[137.62634277 138.34266663]
[147.34976196 149.76435852]
[157.07319641 161.18605042]
[166.79661560 172.60772705]
[176.52005005 184.02941895]
[186.24346924 195.45111084]
[195.96690369 206.87280273]
[205.69032288 218.29449463]
[215.41375732 229.71618652]
[224.09706116 227.53921509]
[232.97280884 228.30308533]
[241.07698059 231.89642334]
[247.53860474 237.90209961]
[251.67333984 245.64543152]
[253.05595398 254.26992798]
[251.56381226 262.83203125]
[247.38728333 270.40426636]
[256.16510010 282.56771851]
[264.94293213 294.73117065]
[280.45977783 294.64627075]
[293.04342651 303.72546387]
[297.85519409 318.47763062]
[293.04486084 333.23025513]
[280.46212769 342.31066895]
[264.94525146 342.22726440]
[252.46086121 333.01211548]
[247.80940247 318.20861816]
[252.77949524 303.50900269]
[244.00166321 291.34555054]
[235.22383118 279.18209839]
[214.03536987 277.78393555]
[200.59991455 260.97570801]
[203.99206543 239.43960571]
[194.26863098 228.01791382]
[184.54521179 216.59622192]
[174.82177734 205.17453003]
[165.09835815 193.75285339]
[155.37492371 182.33116150]
[145.65150452 170.90946960]
[135.92808533 159.48777771]
[126.20465088 148.06608582]
[116.48122406 136.64439392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[7 32]
[8 31]
[10 30]
[11 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[41 131]
[42 130]
[43 129]
[44 128]
[45 127]
[47 126]
[48 125]
[52 60]
[53 59]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
[71 114]
[72 113]
[73 112]
[77 110]
[78 109]
[79 108]
[81 107]
[82 106]
[87 101]
[88 100]
[89 99]
[90 98]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
[138 144]
[153 195]
[154 194]
[155 193]
[156 192]
[157 191]
[158 190]
[159 189]
[160 188]
[161 187]
[162 186]
[170 183]
[171 182]
[172 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
