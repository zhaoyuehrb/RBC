%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCAGAUCAACCACACUAAUGUGAAGGAGUUUUUCUUCCUGGAACUUACACGUUCCCGAGAGCUGGAGUUUUUCUUGUUUGUGGUCUUCUUUGCUG\
) } def
/len { sequence length } bind def

/coor [
[74.13787079 397.90502930]
[66.62342834 383.32882690]
[75.71596527 369.68121338]
[76.18246460 354.68847656]
[64.31707764 345.72460938]
[59.95356750 331.32238770]
[64.96589661 316.94430542]
[77.62978363 308.17318726]
[78.09628296 293.18045044]
[78.56277466 278.18771362]
[68.44776154 270.04101562]
[64.87183380 257.35180664]
[69.37630463 244.75378418]
[80.50794983 236.98452759]
[81.44049835 222.01353455]
[82.37303925 207.04255676]
[83.30558777 192.07157898]
[84.23812866 177.10058594]
[85.17067719 162.12960815]
[82.61508942 157.90353394]
[82.81373596 151.99842834]
[86.65529633 146.26593018]
[88.51678467 131.38188171]
[90.37826538 116.49783325]
[81.56638336 104.99578857]
[83.36450958 90.61827087]
[94.73768616 81.64068604]
[96.59917450 66.75663757]
[98.46065521 51.87259293]
[100.32213593 36.98854446]
[102.18361664 22.10449600]
[104.04509735 7.22044706]
[98.08019257 -7.43323708]
[107.33712006 -19.10193634]
[109.19860077 -33.98598480]
[111.06008148 -48.87003326]
[112.45777130 -63.80477142]
[113.39031219 -78.77575684]
[114.32286072 -93.74674225]
[115.25540161 -108.71772766]
[116.18795013 -123.68870544]
[108.38704681 -131.58502197]
[106.36190796 -142.27285767]
[110.55893707 -152.06770325]
[119.32188416 -157.73223877]
[121.18336487 -172.61628723]
[123.04484558 -187.50033569]
[124.90632629 -202.38438416]
[126.76780701 -217.26843262]
[116.86908722 -229.58879089]
[118.66447449 -245.29075623]
[131.08879089 -255.05867004]
[146.77090454 -253.09738159]
[156.40690613 -240.57048035]
[154.27992249 -224.90997314]
[141.65185547 -215.40695190]
[139.79037476 -200.52290344]
[137.92889404 -185.63885498]
[136.06741333 -170.75480652]
[134.20593262 -155.87075806]
[143.12283325 -138.83251953]
[131.15893555 -122.75616455]
[130.22639465 -107.78517914]
[129.29383850 -92.81419373]
[128.36129761 -77.84321594]
[127.42875671 -62.87222672]
[129.98434448 -58.64615250]
[129.78569031 -52.74104691]
[125.94412994 -47.00855255]
[124.08264923 -32.12450409]
[122.22116852 -17.24045563]
[128.31921387 -3.65137744]
[118.92914581 9.08192825]
[117.06766510 23.96597672]
[115.20618439 38.85002518]
[113.34470367 53.73407364]
[111.48321533 68.61811829]
[109.62173462 83.50216675]
[118.43361664 95.00421143]
[116.63549042 109.38172913]
[105.26231384 118.35931396]
[103.40082550 133.24336243]
[101.53934479 148.12741089]
[100.14166260 163.06214905]
[99.20911407 178.03312683]
[98.27657318 193.00411987]
[97.34402466 207.97509766]
[96.41148376 222.94609070]
[95.47893524 237.91706848]
[107.27272034 250.72134399]
[106.26580048 267.76437378]
[93.55551910 278.65420532]
[93.08902740 293.64694214]
[92.62252808 308.63967896]
[104.71661377 318.18112183]
[108.82537079 332.84304810]
[103.57492065 346.94610596]
[91.17520905 355.15496826]
[90.70870972 370.14770508]
[98.93519592 384.33422852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[8 94]
[9 93]
[10 92]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[22 83]
[23 82]
[24 81]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[34 71]
[35 70]
[36 69]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
