%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCGCUGCGCGGAGCAGGGACCAGGCGGUUGCGGCGGCGACAGCCAUGGCCGGCGCGCUGGCAGGUCUGGCCGCGGGCUUGCAGGUCCCGCGGGUCGCGCCCAGCCCAGACUCGGACUCGGACACAGACUCGGAGGACCCGAGUC\
) } def
/len { sequence length } bind def

/coor [
[108.99507141 142.02780151]
[98.94242859 130.89472961]
[91.60852051 132.46438599]
[86.05138397 146.39701843]
[80.49424744 160.32963562]
[74.93710327 174.26226807]
[69.37996674 188.19490051]
[69.12804413 205.14698792]
[52.76872635 209.59770203]
[43.96322632 195.10980225]
[55.44733810 182.63777161]
[61.00447464 168.70513916]
[66.56161499 154.77250671]
[72.11875153 140.83987427]
[77.67588806 126.90724182]
[69.39485931 96.09017181]
[88.64567566 75.78438568]
[77.87268066 65.34683228]
[69.47138977 61.58813858]
[66.98550415 54.57383728]
[56.43496323 43.91147232]
[45.88441467 33.24911118]
[35.33386993 22.58674812]
[24.78332520 11.92438412]
[14.23277855 1.26202154]
[0.56894970 5.23946524]
[-13.87491703 0.82733196]
[-24.10826683 -11.43963146]
[-26.07077599 -28.17258453]
[-40.06121826 -33.58253479]
[-54.05165863 -38.99248505]
[-68.04209900 -44.40243530]
[-77.24401855 -44.58723068]
[-82.26848602 -50.07674026]
[-96.14176178 -55.78044510]
[-110.01503754 -61.48415375]
[-125.72069550 -59.57551956]
[-134.54986572 -71.57113647]
[-148.42314148 -77.27484894]
[-162.29641724 -82.97855377]
[-176.16969299 -88.68225861]
[-188.28085327 -79.23687744]
[-203.49433899 -77.12841034]
[-217.71777344 -82.92403412]
[-227.12515259 -95.06474304]
[-229.18591309 -110.28475952]
[-223.34574890 -124.48996735]
[-211.17559814 -133.85923767]
[-195.94920349 -135.87228394]
[-181.76237488 -129.98760986]
[-172.43128967 -117.78816986]
[-170.46598816 -102.55553436]
[-156.59271240 -96.85182953]
[-142.71943665 -91.14811707]
[-128.84616089 -85.44441223]
[-114.13281250 -87.76101685]
[-104.31132507 -75.35742950]
[-90.43805695 -69.65371704]
[-76.56478119 -63.95001221]
[-62.63214874 -58.39287567]
[-48.64170837 -52.98292542]
[-34.65126801 -47.57297516]
[-20.66082573 -42.16302490]
[-8.28849316 -50.64390564]
[-8.28849316 -65.64390564]
[-8.28849316 -80.64390564]
[-8.28849316 -95.64390564]
[-8.28849316 -110.64390564]
[-8.28849316 -125.64390564]
[-8.28849316 -140.64390564]
[-8.28849316 -155.64390564]
[-8.28849316 -170.64390564]
[-16.95219612 -184.56770325]
[-8.98806667 -198.90315247]
[7.41108084 -198.90315247]
[15.37520981 -184.56770325]
[6.71150684 -170.64390564]
[6.71150684 -155.64390564]
[6.71150684 -140.64390564]
[6.71150684 -125.64390564]
[6.71150684 -110.64390564]
[6.71150684 -95.64390564]
[6.71150684 -80.64390564]
[6.71150684 -65.64390564]
[6.71150684 -50.64390564]
[27.44478798 -33.31129837]
[24.89514160 -9.28852463]
[35.44568634 1.37383854]
[45.99623489 12.03620148]
[56.54677963 22.69856453]
[67.09732819 33.36092758]
[77.64787292 44.02328873]
[88.31023407 54.57383728]
[99.08322906 65.01139069]
[113.81397247 67.84075165]
[127.68724060 62.13704300]
[141.56051636 56.43333435]
[155.43379211 50.72962570]
[158.96493530 35.61967468]
[170.72508240 25.49651337]
[186.19223022 24.25270271]
[199.41893005 32.36651611]
[205.31925964 46.71802521]
[201.62440491 61.78878021]
[189.75512695 71.78377533]
[174.27540588 72.85971832]
[161.13749695 64.60289764]
[147.26422119 70.30661011]
[133.39094543 76.01031494]
[119.51767731 81.71401978]
[130.51591492 95.44579315]
[131.38171387 115.41279602]
[142.15470886 125.85034943]
[152.92770386 136.28790283]
[163.70069885 146.72546387]
[174.47367859 157.16302490]
[185.24667358 167.60057068]
[196.01966858 178.03813171]
[215.74264526 181.98411560]
[220.38262939 200.71458435]
[231.58605957 210.68870544]
[242.78948975 220.66284180]
[258.24163818 224.06019592]
[262.60272217 238.30203247]
[273.80615234 248.27616882]
[289.25183105 245.83392334]
[302.62704468 253.93562317]
[307.61642456 268.75588989]
[301.86413574 283.29702759]
[288.08621216 290.69317627]
[272.78820801 287.45211792]
[263.19332886 275.10412598]
[263.83203125 259.47958374]
[252.62858582 249.50546265]
[237.97779846 246.82153320]
[232.81536865 231.86627197]
[221.61193848 221.89213562]
[210.40850830 211.91801453]
[200.21859741 213.42608643]
[190.69703674 208.94970703]
[185.12866211 199.76393127]
[185.58212280 188.81112671]
[174.80912781 178.37356567]
[164.03613281 167.93601990]
[153.26313782 157.49845886]
[142.49014282 147.06089783]
[131.71714783 136.62333679]
[120.94415283 126.18579102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[17 94]
[18 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[29 63]
[30 62]
[31 61]
[32 60]
[34 59]
[35 58]
[36 57]
[38 55]
[39 54]
[40 53]
[41 52]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[95 110]
[96 109]
[97 108]
[98 107]
[112 148]
[113 147]
[114 146]
[115 145]
[116 144]
[117 143]
[118 142]
[120 138]
[121 137]
[122 136]
[124 134]
[125 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
