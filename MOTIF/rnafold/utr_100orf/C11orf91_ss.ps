%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCAAAGGGGCGGCGCGGCAGCCACAGCCCCACCAUGAGCCAGCGGUCGGCUCCGCCCCUCUAUUUCCCGUCCCUGUACGACCGCGGCAUCUCCUCGU\
) } def
/len { sequence length } bind def

/coor [
[117.29886627 148.65878296]
[107.91123962 151.03274536]
[98.24547577 151.61250305]
[88.64138794 150.37768555]
[79.43665314 147.37168884]
[70.95487213 142.70022583]
[63.49425507 136.52751160]
[57.31709671 129.07057190]
[52.64057159 120.59157562]
[38.16179657 124.51140594]
[23.68302155 128.43124390]
[9.20424557 132.35105896]
[-5.27452946 136.27088928]
[-19.55472565 140.86175537]
[-33.60526276 146.11364746]
[-47.65579987 151.36553955]
[-53.98209381 165.84841919]
[-68.72667694 171.53813171]
[-83.14185333 165.05906677]
[-88.67535400 150.25514221]
[-82.04425049 135.90927124]
[-67.18265533 130.53260803]
[-52.90769577 137.31500244]
[-38.85715866 132.06311035]
[-24.80662346 126.81121826]
[-23.00401688 123.58543396]
[-19.45561981 121.14340210]
[-14.58319950 120.34031677]
[-9.19435883 121.79212189]
[5.28441715 117.87229156]
[19.76319313 113.95246124]
[34.24197006 110.03263092]
[48.72074509 106.11280060]
[50.65423203 84.77096558]
[61.08445740 66.05137634]
[78.21546173 53.17733002]
[99.09750366 48.36557388]
[120.13494110 52.44463348]
[137.70538330 64.71215057]
[150.02972412 56.16166687]
[162.21958923 47.42055130]
[174.27204895 38.49091721]
[186.32449341 29.56128311]
[191.47282410 21.79678535]
[198.89350891 20.54828835]
[211.21784973 11.99780369]
[223.54219055 3.44731998]
[235.86651611 -5.10316372]
[248.19085693 -13.65364742]
[260.51519775 -22.20413208]
[272.83950806 -30.75461578]
[266.91958618 -44.59439087]
[263.90713501 -59.34260941]
[263.92544556 -74.39533234]
[266.97384644 -89.13616943]
[272.92745972 -102.96148682]
[281.54248047 -115.30514526]
[292.46618652 -125.66168976]
[305.25119019 -133.60700989]
[319.37402344 -138.81576538]
[334.25628662 -141.07466125]
[349.28863525 -140.29116821]
[363.85543823 -136.49740601]
[377.36026001 -129.84872437]
[389.25003052 -120.61735535]
[399.03790283 -109.18133545]
[406.32305908 -96.00896454]
[410.80715942 -81.63963318]
[412.30661011 -66.66176605]
[410.76000977 -51.68869400]
[406.23068237 -37.33355331]
[398.90411377 -24.18417931]
[389.08029175 -12.77903175]
[377.16149902 -3.58514190]
[363.63583374 3.02100492]
[349.05715942 6.76889133]
[334.02243042 7.50504398]
[319.14730835 5.19931746]
[305.04098511 -0.05386993]
[292.28103638 -8.03940392]
[281.39001465 -18.43028069]
[269.06567383 -9.87979698]
[256.74133301 -1.32931304]
[244.41700745 7.22117090]
[232.09266663 15.77165508]
[219.76832581 24.32213783]
[207.44400024 32.87262344]
[195.25413513 41.61373901]
[183.20167542 50.54336929]
[171.14921570 59.47300339]
[167.58596802 66.10087585]
[158.58020020 68.48600006]
[146.25587463 77.03648376]
[149.72952271 86.07511902]
[151.45481873 95.60331726]
[151.37106323 105.28609467]
[149.48121643 114.78302765]
[145.85173035 123.76021576]
[140.61018372 131.90205383]
[133.94088745 138.92228699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 25]
[15 24]
[16 23]
[39 93]
[40 92]
[41 90]
[42 89]
[43 88]
[45 87]
[46 86]
[47 85]
[48 84]
[49 83]
[50 82]
[51 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
