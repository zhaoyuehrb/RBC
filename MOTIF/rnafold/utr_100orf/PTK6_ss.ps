%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCUGGGUGCUCCAGCUGGGCCACAGCCUGGUCCUGCCGCUGCGCCCGCCCGCCAUGGUGUCCCGGGACCAGGCUCACCUGGGCCCCAAGUAUGUGGGCCUCUGGGACUUCAAGUCCCGGACGGACGAGGAGCUGAGCUUCCGCGCGGGGGACG\
) } def
/len { sequence length } bind def

/coor [
[46.83926773 206.31788635]
[32.01304245 204.04125977]
[19.87013245 195.23503113]
[13.10010433 181.84971619]
[13.20246887 166.85006714]
[20.15370750 153.55935669]
[6.64849043 160.08691406]
[-6.85672665 166.61448669]
[-20.36194420 173.14205933]
[-33.86716080 179.66961670]
[-47.37237930 186.19718933]
[-60.87759399 192.72474670]
[-62.10119247 207.97106934]
[-70.73487854 220.47531128]
[-84.37757111 226.93621826]
[-99.32247162 225.70913696]
[-111.56411743 217.22340393]
[-125.06933594 223.75097656]
[-134.12724304 236.72267151]
[-148.95326233 235.29495239]
[-162.45848083 241.82250977]
[-175.96369934 248.35008240]
[-189.46891785 254.87763977]
[-202.97413635 261.40521240]
[-216.47935486 267.93276978]
[-223.09300232 282.54916382]
[-238.67889404 286.35174561]
[-251.28085327 276.42349243]
[-251.23173523 260.38052368]
[-238.56922913 250.52961731]
[-223.00691223 254.42755127]
[-209.50169373 247.89999390]
[-195.99647522 241.37242126]
[-182.49125671 234.84486389]
[-168.98605347 228.31729126]
[-155.48083496 221.78973389]
[-147.38890076 209.28492737]
[-131.59690857 210.24575806]
[-118.09169006 203.71818542]
[-117.13604736 188.85371399]
[-108.81304932 176.38040161]
[-95.27465820 169.70370483]
[-80.11249542 170.70654297]
[-67.40515900 179.21952820]
[-53.89994431 172.69197083]
[-40.39472580 166.16439819]
[-26.88950920 159.63684082]
[-13.38429260 153.10926819]
[0.12092471 146.58171082]
[13.62614155 140.05413818]
[26.33270454 132.08273315]
[38.08686447 122.76395416]
[49.84102249 113.44516754]
[61.59518051 104.12638092]
[73.34934235 94.80759430]
[77.35229492 80.35158539]
[72.06561279 66.31409454]
[66.07958984 59.33874130]
[66.81667328 51.94248581]
[61.81193161 37.80202866]
[56.80718613 23.66157150]
[51.80244064 9.52111435]
[37.81761551 2.66091299]
[32.94352722 -11.75081539]
[39.56986237 -25.04093361]
[34.56511688 -39.18139267]
[19.85633087 -44.49040222]
[12.04605579 -58.03786087]
[14.82206535 -73.42707062]
[26.87361336 -83.39171600]
[42.51032639 -83.22679901]
[54.34902954 -73.01019287]
[56.79984283 -57.56585312]
[48.70557404 -44.18613815]
[53.71031952 -30.04567909]
[67.22164154 -23.88290024]
[72.49859619 -9.61375999]
[65.94290161 4.51636887]
[70.94763947 18.65682602]
[75.95238495 32.79728317]
[80.95713043 46.93774033]
[86.10310364 61.02741623]
[91.38977814 75.06490326]
[106.29902649 76.71240997]
[114.52307892 64.16789246]
[122.74713135 51.62337112]
[130.97117615 39.07884979]
[139.19522095 26.53432846]
[147.29336548 13.90815353]
[155.26475525 1.20159078]
[155.32518005 -15.19744492]
[169.68986511 -23.10869980]
[183.58164978 -14.39375305]
[182.70986938 1.98220515]
[167.97132874 9.17299366]
[159.99992371 21.87955666]
[159.10433960 29.25829697]
[151.73974609 34.75837708]
[143.51570129 47.30289841]
[135.29164124 59.84741974]
[127.06759644 72.39193726]
[118.84355164 84.93646240]
[127.19269562 97.39807129]
[141.92248535 94.56376648]
[156.65226746 91.72946930]
[171.38206482 88.89516449]
[186.11186218 86.06085968]
[200.84164429 83.22655487]
[215.57144165 80.39225769]
[230.30122375 77.55795288]
[245.03102112 74.72364807]
[259.44235229 65.79336548]
[272.01309204 77.16934967]
[264.56161499 92.39800262]
[247.86532593 89.45343781]
[233.13552856 92.28774261]
[218.40574646 95.12204742]
[203.67594910 97.95635223]
[188.94615173 100.79064941]
[174.21636963 103.62495422]
[159.48657227 106.45925903]
[144.75679016 109.29356384]
[130.02699280 112.12786102]
[127.95330811 119.33548737]
[142.36848450 123.48309326]
[138.22065735 137.89820862]
[123.80592346 133.75073242]
[121.73223114 140.95834351]
[132.70367432 151.18710327]
[141.16499329 154.77792358]
[143.78970337 161.73197937]
[154.55429077 172.17820740]
[165.31887817 182.62445068]
[176.08345032 193.07067871]
[186.84803772 203.51690674]
[202.42556763 210.20845032]
[200.30784607 227.02960205]
[183.55781555 229.65119934]
[176.40179443 214.28149414]
[165.63722229 203.83526611]
[154.87263489 193.38902283]
[144.10806274 182.94279480]
[133.34347534 172.49656677]
[122.47492218 162.15855408]
[111.50347900 151.92979431]
[82.95124817 131.54866028]
[82.66812134 106.56175232]
[70.91396332 115.88053894]
[59.15980530 125.19932556]
[47.40564728 134.51811218]
[35.65148926 143.83689880]
[50.64398193 143.36235046]
[64.19316864 149.79815674]
[73.29801178 161.71879578]
[75.94184113 176.48396301]
[71.53908539 190.82327271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[17 39]
[18 38]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[51 151]
[52 150]
[53 149]
[54 148]
[55 147]
[56 83]
[57 82]
[59 81]
[60 80]
[61 79]
[62 78]
[65 75]
[66 74]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 96]
[90 95]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
[128 145]
[129 144]
[131 143]
[132 142]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
