%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCCAGUGGUCCUGGCCGUGCGCCGGAGGCAGCGGCGGCGUGGCGCAGCGGCGACAUGGCCGUUGUCUCAGAGGACGACUUUCAGCACAGUUCAAACUCCACCUACAGAACCACAAGCAGCAGUCUCCGAGCUGACCAGGAGGCACUGCUUGAGA\
) } def
/len { sequence length } bind def

/coor [
[67.75597382 123.08002472]
[61.96286392 111.20451355]
[60.39321899 98.08489990]
[45.81817627 94.53973389]
[30.07837486 105.00672913]
[11.98252010 100.77328491]
[2.83796978 84.96050262]
[-11.86649036 81.99759674]
[-26.57095146 79.03468323]
[-41.62755203 83.89363098]
[-52.57573318 73.79478455]
[-67.28019714 70.83187866]
[-81.98465729 67.86896515]
[-96.68911743 64.90605164]
[-111.39357758 61.94314194]
[-125.85641479 65.92137146]
[-136.97694397 75.98784637]
[-148.09745789 86.05432892]
[-150.32749939 101.94163513]
[-164.21185303 109.97931671]
[-179.09962463 104.00155640]
[-183.57020569 88.59397125]
[-174.19413757 75.57595062]
[-158.16394043 74.93379974]
[-147.04341125 64.86732483]
[-135.92289734 54.80084991]
[-143.77120972 45.27483368]
[-144.84503174 34.34683228]
[-158.67451477 28.53776550]
[-172.50399780 22.72869873]
[-186.33349609 16.91963005]
[-200.16297913 11.11056328]
[-213.99246216 5.30149555]
[-227.82194519 -0.50757217]
[-241.65144348 -6.31663990]
[-255.48092651 -12.12570763]
[-269.31042480 -17.93477440]
[-283.13989258 -23.74384308]
[-289.82415771 -23.28733444]
[-294.94113159 -25.91429710]
[-297.39639282 -30.06860352]
[-310.98397827 -36.42288971]
[-324.57159424 -42.77717972]
[-338.15921021 -49.13146591]
[-353.93762207 -47.96872330]
[-362.18884277 -60.36899948]
[-375.77642822 -66.72328949]
[-389.36404419 -73.07757568]
[-405.64688110 -71.12802887]
[-415.25875854 -84.41502380]
[-408.31176758 -99.27003479]
[-391.95239258 -100.41149902]
[-383.00976562 -86.66517639]
[-369.42214966 -80.31089020]
[-355.83453369 -73.95660400]
[-341.02798462 -75.57384491]
[-331.80490112 -62.71907043]
[-318.21731567 -56.36478424]
[-304.62969971 -50.01049805]
[-291.04208374 -43.65621185]
[-277.33084106 -37.57332993]
[-263.50134277 -31.76426315]
[-249.67185974 -25.95519447]
[-235.84237671 -20.14612770]
[-222.01287842 -14.33705997]
[-208.18339539 -8.52799225]
[-194.35391235 -2.71892476]
[-180.52441406 3.09014297]
[-166.69493103 8.89921093]
[-152.86544800 14.70827770]
[-139.03596497 20.51734543]
[-122.28557587 14.71165657]
[-106.97820282 26.44394493]
[-108.43066406 47.23868179]
[-93.72620392 50.20159531]
[-79.02174377 53.16450500]
[-64.31728363 56.12741470]
[-49.61282349 59.09032822]
[-35.60798264 54.01945496]
[-23.60803986 64.33022308]
[-8.90357971 67.29313660]
[5.80088091 70.25604248]
[13.75862598 61.99192810]
[24.83927727 58.58408356]
[36.30099106 60.99761581]
[45.24826050 68.74184418]
[49.36334229 79.96469116]
[63.93838501 83.50986481]
[75.36447144 68.92822266]
[92.16743469 61.12821198]
[110.67990875 61.81224823]
[126.86141968 70.83103180]
[138.92617798 61.91801453]
[150.99092102 53.00500107]
[163.05566406 44.09198380]
[159.35568237 29.34822083]
[161.58448792 14.31156921]
[169.40219116 1.27500963]
[181.61666870 -7.77347755]
[196.36528015 -11.45406342]
[211.39898682 -9.20548534]
[224.42524719 -1.37063515]
[233.45767212 10.85572910]
[237.11885071 25.60917664]
[234.85049438 40.63991165]
[226.99851990 53.65585709]
[214.76028442 62.67218018]
[200.00202942 66.31394958]
[184.97428894 64.02582550]
[171.96868896 56.15673447]
[159.90393066 65.06974792]
[147.83918762 73.98276520]
[135.77444458 82.89578247]
[139.25375366 94.38684082]
[139.13439941 106.39250183]
[135.42729187 117.81211090]
[147.31245422 126.96324158]
[159.19760132 136.11436462]
[171.08276367 145.26550293]
[182.96791077 154.41662598]
[194.85305786 163.56774902]
[206.73822021 172.71887207]
[219.64202881 171.83837891]
[229.36108398 179.75024414]
[231.00669861 191.76882935]
[242.70756531 201.15444946]
[254.40841675 210.54006958]
[266.10928345 219.92568970]
[277.81015015 229.31130981]
[289.51098633 238.69692993]
[303.79476929 233.05163574]
[318.98516846 235.32041931]
[330.99606323 244.89300537]
[336.59655762 259.19439697]
[334.28015137 274.37762451]
[324.66998291 286.35842896]
[310.35110474 291.91406250]
[295.17520142 289.55010986]
[283.22457886 279.90240479]
[277.71383667 265.56619263]
[280.12536621 250.39779663]
[268.42453003 241.01217651]
[256.72366333 231.62655640]
[245.02279663 222.24093628]
[233.32194519 212.85531616]
[221.62107849 203.46969604]
[204.17784119 201.77125549]
[197.58709717 184.60403442]
[185.70193481 175.45289612]
[173.81678772 166.30177307]
[161.93162537 157.15065002]
[150.04647827 147.99952698]
[138.16133118 138.84838867]
[126.27616882 129.69726562]
[115.05998230 136.68190002]
[102.17160034 139.59355164]
[89.04209900 138.10891724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[7 82]
[8 81]
[9 80]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 26]
[17 25]
[18 24]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[41 60]
[42 59]
[43 58]
[44 57]
[46 55]
[47 54]
[48 53]
[92 113]
[93 112]
[94 111]
[95 110]
[116 154]
[117 153]
[118 152]
[119 151]
[120 150]
[121 149]
[122 148]
[125 146]
[126 145]
[127 144]
[128 143]
[129 142]
[130 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
