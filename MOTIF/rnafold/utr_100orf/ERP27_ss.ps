%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACAAAGUCCAGGGUUGGAGCAGGAGCAGGAGAGGGACAAUGGAAGCUGCCCCGUCCAGGUUCAUGUUCCUCUUAUUUCUCCUCACGUGUGAGCUGGCUGCAGAAGUUGCUGCAGAAGUUGAGAAAUCCUCAGAUGGUC\
) } def
/len { sequence length } bind def

/coor [
[70.84591675 100.01005554]
[85.77338409 101.47129822]
[72.67379761 94.16371155]
[59.57421494 86.85611725]
[46.47463226 79.54852295]
[39.70914078 85.14286041]
[31.77380562 88.79528809]
[23.20955086 90.28130341]
[14.59393501 89.52325439]
[6.50222063 86.59407806]
[-2.99763632 98.20237732]
[-12.49749374 109.81068420]
[-21.99735069 121.41898346]
[-24.11090088 137.68136597]
[-39.35320663 143.73149109]
[-52.04429245 133.34553528]
[-49.12865448 117.20764923]
[-33.60565567 111.91912842]
[-24.10579681 100.31082916]
[-14.60593987 88.70252228]
[-5.10608292 77.09421539]
[-11.10677910 64.52097321]
[-11.41497993 50.59259415]
[-5.97631311 37.76622772]
[-15.98034573 26.58949471]
[-25.98437881 15.41276360]
[-35.98841095 4.23603249]
[-45.99244690 -6.94069862]
[-62.75495529 -4.98181009]
[-77.25294495 -13.29216480]
[-83.90089417 -28.44301414]
[-80.27307129 -44.41570663]
[-90.52190399 -55.36839294]
[-100.77074432 -66.32108307]
[-111.01957703 -77.27376556]
[-121.26841736 -88.22645569]
[-131.51725769 -99.17913818]
[-141.76609802 -110.13182831]
[-152.01492310 -121.08451080]
[-162.26376343 -132.03720093]
[-172.51260376 -142.98988342]
[-183.48594666 -142.72761536]
[-192.58154297 -148.46862793]
[-196.88511658 -158.08488464]
[-195.17875671 -168.25752258]
[-204.93309021 -179.65283203]
[-214.68742371 -191.04814148]
[-229.53944397 -196.50047302]
[-231.93792725 -211.20069885]
[-241.69224548 -222.59599304]
[-251.44657898 -233.99130249]
[-267.08059692 -233.65663147]
[-279.23959351 -243.48985291]
[-282.18252563 -258.84802246]
[-274.51980591 -272.47946167]
[-259.86950684 -277.94784546]
[-245.14910889 -272.67117310]
[-237.30908203 -259.14089966]
[-240.05128479 -243.74563599]
[-230.29695129 -232.35032654]
[-220.54261780 -220.95501709]
[-206.38829041 -216.31776428]
[-203.29211426 -200.80247498]
[-193.53778076 -189.40716553]
[-183.78344727 -178.01185608]
[-165.15014648 -173.02183533]
[-161.55992126 -153.23872375]
[-151.31108093 -142.28604126]
[-141.06224060 -131.33334351]
[-130.81340027 -120.38066101]
[-120.56456757 -109.42797852]
[-110.31573486 -98.47528839]
[-100.06689453 -87.52260590]
[-89.81805420 -76.56991577]
[-79.56922150 -65.61723328]
[-69.32038116 -54.66454697]
[-56.23768997 -57.53713989]
[-43.34660339 -53.51881790]
[-34.06538010 -43.56251144]
[-30.91065216 -30.21026611]
[-34.81571198 -16.94473267]
[-24.81167984 -5.76800013]
[-14.80764771 5.40873098]
[-4.80361462 16.58546257]
[5.20041800 27.76219368]
[24.08855629 23.58897018]
[42.21944809 30.67209816]
[53.41577148 46.74362946]
[53.78222656 66.44893646]
[66.88180542 73.75653076]
[79.98139191 81.06412506]
[93.08097839 88.37171936]
[103.43869019 78.14517212]
[123.05371857 79.70175171]
[138.02069092 80.69659424]
[152.98767090 81.69143677]
[167.95463562 82.68628693]
[178.20344543 74.77053070]
[190.69532776 75.95504761]
[198.74046326 85.05459595]
[213.68176270 86.38030243]
[228.62306213 87.70600128]
[243.56437683 89.03170013]
[258.50567627 90.35740662]
[273.44696045 91.68310547]
[285.40383911 81.34827423]
[301.16018677 82.57854462]
[311.36801147 94.64401245]
[309.97122192 110.38645935]
[297.79852295 120.46616364]
[282.07171631 118.90301514]
[272.12127686 106.62440491]
[257.17996216 105.29870605]
[242.23866272 103.97300720]
[227.29736328 102.64730072]
[212.35606384 101.32160187]
[197.41476440 99.99590302]
[181.96987915 108.25659943]
[166.95979309 97.65325928]
[151.99282837 96.65840912]
[137.02584839 95.66356659]
[122.05887604 94.66872406]
[114.75128174 107.76831055]
[123.46032715 119.98110962]
[132.16937256 132.19390869]
[147.69090271 136.25119019]
[154.06434631 150.97390747]
[146.40054321 165.06808472]
[130.57850647 167.72184753]
[118.73554230 156.89947510]
[119.95656586 140.90295410]
[111.24752045 128.69015503]
[102.53848267 116.47734833]
[105.63864136 131.15348816]
[101.29708862 145.51144409]
[90.58435822 156.01083374]
[76.14198303 160.06274414]
[61.53116989 156.66802979]
[50.35464096 146.66377258]
[45.36830139 132.51681519]
[47.80168152 117.71550751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 92]
[3 91]
[4 90]
[5 89]
[10 21]
[11 20]
[12 19]
[13 18]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[32 76]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[45 65]
[46 64]
[47 63]
[49 61]
[50 60]
[51 59]
[94 122]
[95 121]
[96 120]
[97 119]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
