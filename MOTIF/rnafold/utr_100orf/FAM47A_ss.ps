%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAUCUGGGACCUCAGAAGCUGGAGACGUGGCACCACAGCGAGGGCCACCAUGGGGGACCAGAGGCUGCAGGACUGGCUGAGGUCCCCGGGCAUGGACUCCAAGCCCUGGUACUGUAACAAACGGCCUUCCAAGUGCUUCGCGAAGUGCA\
) } def
/len { sequence length } bind def

/coor [
[117.52503204 187.83139038]
[124.36017609 176.18276978]
[118.94155121 162.19567871]
[113.52292633 148.20860291]
[108.10430145 134.22151184]
[91.33131409 132.33924866]
[78.18126678 123.12552643]
[71.42195892 109.47150421]
[72.01151276 95.06871796]
[58.44961548 88.65974426]
[44.88771820 82.25076294]
[31.32582092 75.84178925]
[17.76392555 69.43281555]
[4.20202875 63.02383804]
[-9.35986805 56.61486435]
[-22.92176437 50.20588684]
[-36.48366165 43.79691315]
[-50.04555511 37.38793564]
[-66.34579468 47.29336929]
[-85.18196869 45.46181870]
[-99.04858398 32.80249405]
[-102.52796173 14.50317574]
[-116.45867920 8.94123840]
[-130.38940430 3.37930083]
[-146.07476807 5.44799709]
[-155.02581787 -6.45696449]
[-168.95652771 -12.01890182]
[-185.02111816 2.45086598]
[-209.28028870 2.43759084]
[-229.31550598 -15.51882076]
[-244.25151062 -16.90284729]
[-259.18753052 -18.28687286]
[-274.12353516 -19.67089653]
[-289.05953979 -21.05492210]
[-297.95608521 -18.72091293]
[-304.28692627 -22.62378120]
[-319.19137573 -24.31417847]
[-330.40359497 -13.41369629]
[-346.00302124 -12.32207298]
[-358.62411499 -21.55473709]
[-362.30755615 -36.75230789]
[-355.31417847 -50.73896027]
[-340.94598389 -56.91061783]
[-325.98724365 -52.35321808]
[-317.50097656 -39.21862411]
[-302.59652710 -37.52822876]
[-287.67553711 -35.99093628]
[-272.73950195 -34.60691071]
[-257.80349731 -33.22288513]
[-242.86749268 -31.83885956]
[-227.93147278 -30.45483398]
[-224.58843994 -37.16856003]
[-217.90235901 -50.59600830]
[-214.55932617 -57.30973434]
[-224.66476440 -68.39486694]
[-234.77018738 -79.48000336]
[-250.55314636 -83.93311310]
[-254.32530212 -99.89253235]
[-242.20619202 -110.94056702]
[-226.66290283 -105.71194458]
[-223.68505859 -89.58543396]
[-213.57962036 -78.50029755]
[-203.47418213 -67.41516876]
[-188.02987671 -66.70154572]
[-174.92120361 -60.34283066]
[-165.97825623 -49.99132919]
[-162.14347839 -37.78849792]
[-163.39459229 -25.94961739]
[-149.46388245 -20.38768005]
[-134.77491760 -22.85420418]
[-124.82746124 -10.55141544]
[-110.89674377 -4.98947811]
[-96.96602631 0.57245922]
[-88.74218750 -7.11759949]
[-78.18409729 -11.17446995]
[-66.82376099 -10.96802807]
[-56.32524109 -6.48980808]
[-48.24087906 1.64010024]
[-43.78180313 12.25863075]
[-43.63658142 23.82604027]
[-30.07468414 30.23501587]
[-16.51278877 36.64398956]
[-2.95089197 43.05296707]
[10.61100388 49.46194077]
[24.17290115 55.87091827]
[37.73479843 62.27989197]
[51.29669189 68.68886566]
[64.85858917 75.09784698]
[78.42048645 81.50682068]
[97.66843414 71.67621613]
[118.26486206 78.22689819]
[130.59614563 69.68643951]
[142.92742920 61.14598083]
[155.25871277 52.60552216]
[162.19830322 38.38747787]
[177.06654358 37.50175095]
[189.39782715 28.96129227]
[201.72911072 20.42083359]
[211.30766296 6.43199444]
[227.40142822 11.76371956]
[226.73326111 28.70449638]
[210.26956177 32.75211716]
[197.93827820 41.29257584]
[185.60699463 49.83303452]
[179.54943848 63.44020844]
[163.79917908 64.93680573]
[151.46789551 73.47726440]
[139.13659668 82.01772308]
[126.80532074 90.55818176]
[131.52526855 95.87637329]
[135.05964661 102.75909424]
[149.71237183 105.96809387]
[156.21467590 104.30593872]
[161.72998047 105.97006989]
[164.89498901 109.62135315]
[179.40361023 113.42921448]
[193.91224670 117.23707581]
[208.42086792 121.04492950]
[222.94276428 114.22628784]
[237.26368713 121.45751953]
[240.39784241 137.19145203]
[229.94097900 149.35835266]
[213.91470337 148.62481689]
[204.61300659 135.55355835]
[190.10438538 131.74569702]
[175.59576416 127.93784332]
[161.08712769 124.12998199]
[146.50338745 120.62081146]
[131.85066223 117.41181946]
[122.09138489 128.80288696]
[127.51000977 142.78997803]
[132.92863464 156.77705383]
[138.34725952 170.76414490]
[154.45628357 177.50849915]
[160.61145020 193.49116516]
[153.47358704 208.68833923]
[159.17825317 222.56121826]
[164.88291931 236.43409729]
[170.58758545 250.30697632]
[176.29225159 264.17987061]
[181.99690247 278.05273438]
[195.30497742 287.63540649]
[193.39120483 303.92248535]
[178.22431946 310.15927124]
[165.40670776 299.92987061]
[168.12402344 283.75741577]
[162.41935730 269.88452148]
[156.71470642 256.01165771]
[151.01004028 242.13876343]
[145.30537415 228.26588440]
[139.60070801 214.39300537]
[127.09933472 211.12684631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 133]
[3 132]
[4 131]
[5 130]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[18 80]
[22 73]
[23 72]
[24 71]
[26 69]
[27 68]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[36 46]
[37 45]
[54 63]
[55 62]
[56 61]
[91 109]
[92 108]
[93 107]
[94 106]
[96 104]
[97 103]
[98 102]
[111 129]
[112 128]
[115 127]
[116 126]
[117 125]
[118 124]
[136 151]
[137 150]
[138 149]
[139 148]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
