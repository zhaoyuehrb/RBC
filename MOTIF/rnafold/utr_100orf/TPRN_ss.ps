%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGCCCUGGGGCGGCCGGGCUCGGGGCCGCGCGCUGCGGUGCCCGCUUGGAAGCGUGAGAUCCUGGAGCGGAAGCGGGCCAAGCUAGCCGCGCUGG\
) } def
/len { sequence length } bind def

/coor [
[111.34288025 117.40236664]
[102.56211853 120.03540039]
[93.76606750 118.60799408]
[83.92713928 129.93034363]
[74.08821106 141.25268555]
[64.24928284 152.57502747]
[54.41035080 163.89736938]
[44.57142258 175.21971130]
[34.73249054 186.54205322]
[32.13903427 202.73483276]
[16.72450447 208.33164978]
[4.34605169 197.57498169]
[7.73756599 181.53036499]
[23.41014862 176.70312500]
[33.24907684 165.38078308]
[43.08800507 154.05844116]
[52.92693329 142.73609924]
[62.76586533 131.41375732]
[72.60478973 120.09140778]
[82.44372559 108.76906586]
[78.51660919 97.45336151]
[81.90473175 84.78290558]
[66.99353790 83.15312195]
[52.08233643 81.52334595]
[37.17114258 79.89356232]
[20.76883125 84.18315125]
[12.10626984 69.60932159]
[23.71250916 57.25086212]
[38.80092239 64.98236084]
[53.71212006 66.61214447]
[68.62332153 68.24192810]
[83.53451538 69.87171173]
[97.95057678 65.72718048]
[109.71949005 56.42704010]
[121.48841095 47.12689590]
[133.25732422 37.82675552]
[145.02622986 28.52661133]
[156.64909363 19.04456520]
[168.12307739 9.38290787]
[179.44541931 -0.45602083]
[190.61338806 -10.46984291]
[189.16575623 -25.80641747]
[196.93553162 -38.90159988]
[210.76283264 -44.84042358]
[225.26220703 -41.53791809]
[236.43016052 -51.55173874]
[247.59812927 -61.56556320]
[258.76608276 -71.57938385]
[269.93405151 -81.59320831]
[281.10202026 -91.60702515]
[292.26995850 -101.62084961]
[303.43792725 -111.63467407]
[301.75360107 -123.61594391]
[306.09741211 -134.77864075]
[315.25030518 -142.31617737]
[326.80062866 -144.39575195]
[337.77896118 -140.60290527]
[349.54788208 -149.90306091]
[349.05651855 -165.29995728]
[357.62539673 -177.88676453]
[371.79516602 -182.95446777]
[386.06115723 -178.75692749]
[397.83007812 -188.05706787]
[406.50857544 -202.62139893]
[422.90618896 -198.31387329]
[423.30630493 -181.36463928]
[407.13021851 -176.28816223]
[395.36129761 -166.98800659]
[396.14718628 -152.13807678]
[387.94104004 -139.52366638]
[373.71426392 -134.09667969]
[358.84802246 -138.13414001]
[347.07910156 -128.83399963]
[346.17327881 -110.68120575]
[332.16458130 -98.61340332]
[313.45175171 -100.46671295]
[302.28378296 -90.45288849]
[291.11584473 -80.43906403]
[279.94787598 -70.42524719]
[268.77990723 -60.41142273]
[257.61193848 -50.39760208]
[246.44398499 -40.38377762]
[235.27601624 -30.36995697]
[236.98359680 -15.59761047]
[229.57756042 -2.49742985]
[215.71569824 3.80353689]
[200.62721252 0.69811869]
[189.45924377 10.71194077]
[186.52908325 17.64300156]
[177.78472900 20.85689545]
[166.31074524 30.51855278]
[163.16644287 37.35513306]
[154.32638550 40.29552460]
[142.55746460 49.59566879]
[130.78854370 58.89581299]
[119.01963806 68.19595337]
[107.25072479 77.49610138]
[115.92863464 83.31288147]
[121.06719971 92.11356354]
[121.82763672 102.01940918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[22 32]
[23 31]
[24 30]
[25 29]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[38 91]
[39 90]
[40 88]
[41 87]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[57 73]
[58 72]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
