%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACAUUGUUUGCCAAAAUCCCAGGCAGCAUGGACCUCAGUCUUCUCUGGGUACUUCUGCCCCUAGUCACCAUGGCCUGGGGCCAGUAUGGCGAUUAUGGAUACCCAUACCAGCAGUAUCAUGACUACA\
) } def
/len { sequence length } bind def

/coor [
[171.46748352 315.19055176]
[168.96122742 300.40142822]
[166.45497131 285.61227417]
[163.94869995 270.82312012]
[154.19364929 259.56756592]
[159.51638794 244.66859436]
[157.01013184 229.87945557]
[154.50387573 215.09031677]
[151.99761963 200.30117798]
[149.49134827 185.51203918]
[143.87596130 171.60278320]
[135.41201782 159.21885681]
[126.94805908 146.83493042]
[118.48411560 134.45100403]
[110.02016449 122.06708527]
[101.55621338 109.68315887]
[98.47790527 111.57747650]
[94.46636200 112.36504364]
[89.94092560 111.68258667]
[85.44546509 109.32614899]
[81.58905792 105.28995514]
[66.83103180 102.60654449]
[52.07300568 99.92313385]
[37.31497955 97.23972321]
[22.55695343 94.55631256]
[7.79892778 91.87290192]
[1.61999023 99.64064789]
[-6.94207430 104.54505157]
[-16.65286446 105.92876434]
[-26.13059044 103.63843536]
[-34.04267883 98.04046631]
[-39.29314041 89.96312714]
[-41.17429733 80.57424164]
[-55.60746002 76.48965454]
[-70.04061890 72.40506744]
[-84.47378540 68.32048035]
[-100.23059082 72.86525726]
[-111.85562134 61.29846191]
[-107.39003754 45.51902390]
[-91.42765045 41.75947952]
[-80.38919067 53.88731766]
[-65.95603180 57.97190857]
[-51.52287292 62.05649567]
[-37.08971024 66.14108276]
[-20.30822754 54.62364197]
[-0.15532450 59.08970261]
[10.48233795 77.11488342]
[25.24036217 79.79828644]
[39.99838638 82.48169708]
[54.75641251 85.16510773]
[69.51444244 87.84851837]
[84.27246094 90.53192902]
[96.95278168 82.51883698]
[100.86401367 68.03774261]
[104.77524567 53.55664062]
[108.68647766 39.07553864]
[102.67103577 29.86367035]
[102.77352142 19.08298874]
[108.71477509 10.35245419]
[118.29658508 6.46729326]
[122.89761353 -7.80962944]
[127.49864197 -22.08655167]
[132.09967041 -36.36347580]
[136.70069885 -50.64039612]
[129.74624634 -64.57859039]
[134.61572266 -78.99188232]
[147.94651794 -85.53599548]
[152.54754639 -99.81291962]
[157.14857483 -114.08984375]
[161.74961853 -128.36676025]
[160.85316467 -145.29699707]
[176.87358093 -150.84516907]
[186.63983154 -136.98670959]
[176.02653503 -123.76573181]
[171.42550659 -109.48880768]
[166.82447815 -95.21189117]
[162.22344971 -80.93496704]
[169.22465515 -67.83844757]
[164.76193237 -53.29407501]
[150.97763062 -46.03936768]
[146.37660217 -31.76244545]
[141.77557373 -17.48552322]
[137.17454529 -3.20859957]
[132.57350159 11.06832314]
[138.09577942 29.53824234]
[123.16757965 42.98677444]
[119.25634766 57.46787262]
[115.34511566 71.94897461]
[111.43387604 86.43006897]
[113.94013977 101.21921539]
[122.40409088 113.60313416]
[130.86804199 125.98706055]
[139.33198547 138.37098694]
[147.79592896 150.75491333]
[156.25988770 163.13883972]
[168.32345581 150.63044739]
[190.10234070 148.17430115]
[204.62930298 151.91162109]
[219.15625000 155.64894104]
[233.68321228 159.38626099]
[248.21017456 163.12356567]
[263.85345459 158.20227051]
[275.75253296 169.48696899]
[271.66659546 185.36895752]
[255.79895020 189.51019287]
[244.47285461 177.65052795]
[229.94589233 173.91320801]
[215.41894531 170.17588806]
[200.89198303 166.43858337]
[186.36502075 162.70126343]
[180.84388733 167.77738953]
[184.11517334 182.41633606]
[169.80162048 177.92964172]
[164.28048706 183.00578308]
[166.78675842 197.79492188]
[169.29301453 212.58406067]
[171.79927063 227.37319946]
[174.30552673 242.16233826]
[184.23985291 254.47573853]
[178.73783875 268.31686401]
[181.24411011 283.10601807]
[183.75036621 297.89514160]
[186.25662231 312.68429565]
[200.21697998 319.45837402]
[207.49971008 333.16024780]
[205.30447388 348.52127075]
[194.47537231 359.63479614]
[179.17642212 362.22744751]
[165.29039001 355.30230713]
[158.15672302 341.52224731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 95]
[12 94]
[13 93]
[14 92]
[15 91]
[16 90]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[33 44]
[34 43]
[35 42]
[36 41]
[53 89]
[54 88]
[55 87]
[56 86]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[67 77]
[68 76]
[69 75]
[70 74]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
