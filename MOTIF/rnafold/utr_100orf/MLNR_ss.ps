%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCAGCCCCUGGAACGGCAGCGACGGCCCCGAGGGGGCGCGGGAGCCGCCGUGGCCCGCGCUGCCGCCUUGCGACGAGCGCCGCUGCUCGCCCUUUC\
) } def
/len { sequence length } bind def

/coor [
[96.54138947 242.39320374]
[102.79540253 228.42373657]
[114.83215332 218.96989441]
[112.04893494 204.23036194]
[109.26572418 189.49084473]
[106.48250580 174.75131226]
[103.69928741 160.01177979]
[100.91606903 145.27224731]
[98.13285828 130.53273010]
[84.58596039 126.42235565]
[74.34040833 116.65289307]
[69.59058380 103.31674957]
[71.35379028 89.27023315]
[79.25238037 77.52178955]
[72.09158325 64.34139252]
[66.42417145 60.40444183]
[64.08589172 54.97837830]
[64.92446899 50.11139297]
[58.59694672 36.51130295]
[52.26942062 22.91121483]
[45.94189453 9.31112671]
[39.61436844 -4.28896236]
[33.28684616 -17.88905144]
[26.95931816 -31.48914146]
[20.63179398 -45.08922958]
[14.05927086 -51.69184875]
[14.32633209 -59.21210098]
[8.42482853 -73.00239563]
[2.52332473 -86.79269409]
[-9.23175240 -92.37615204]
[-13.81425571 -104.12456512]
[-9.24507999 -115.44448853]
[-14.71485233 -129.41165161]
[-20.18462563 -143.37881470]
[-32.42142105 -153.40733337]
[-29.85789871 -168.07968140]
[-35.32767105 -182.04684448]
[-47.56446838 -192.07537842]
[-45.00094604 -206.74771118]
[-50.47071838 -220.71487427]
[-55.94049072 -234.68203735]
[-70.51999664 -240.78233337]
[-76.43831635 -255.43664551]
[-70.18422699 -269.95083618]
[-55.46815491 -275.71389771]
[-41.02089310 -269.30670166]
[-35.41374207 -254.53051758]
[-41.97332764 -240.15180969]
[-36.50355530 -226.18464661]
[-31.03378296 -212.21748352]
[-19.18822289 -203.18797302]
[-21.36050987 -187.51661682]
[-15.89073753 -173.54945374]
[-4.04517698 -164.51994324]
[-6.21746445 -148.84858704]
[-0.74769163 -134.88142395]
[4.72208118 -120.91426086]
[18.99071884 -110.82924652]
[16.31361961 -92.69419861]
[22.21512413 -78.90390015]
[28.11662865 -65.11360168]
[34.23188400 -51.41675568]
[40.55940628 -37.81666565]
[46.88693237 -24.21657753]
[53.21445847 -10.61648846]
[59.54198456 2.98360109]
[65.86950684 16.58369064]
[72.19703674 30.18377876]
[78.52455902 43.78386688]
[85.27198792 57.18059158]
[92.43278503 70.36099243]
[110.25248718 71.17951965]
[124.58565521 81.79893494]
[130.55807495 98.60791779]
[145.25253296 101.62002563]
[159.94699097 104.63213348]
[174.07601929 97.03277588]
[188.76948547 103.47340393]
[192.75581360 119.01331329]
[182.97705078 131.73161316]
[166.93461609 131.87191772]
[156.93489075 119.32659149]
[142.24041748 116.31449127]
[127.54595947 113.30238342]
[121.46137238 121.79777527]
[112.87238312 127.74950409]
[115.65560150 142.48902893]
[118.43881989 157.22856140]
[121.22203064 171.96809387]
[124.00524902 186.70762634]
[126.78846741 201.44714355]
[129.57168579 216.18667603]
[144.22698975 220.60034180]
[155.14436340 231.32739258]
[159.81506348 245.90281677]
[157.16581726 260.97729492]
[147.80537415 273.08682251]
[133.88470459 279.44873047]
[118.60269165 278.60107422]
[105.47101593 270.73867798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[14 71]
[15 70]
[18 69]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[27 61]
[28 60]
[29 59]
[32 57]
[33 56]
[34 55]
[36 53]
[37 52]
[39 50]
[40 49]
[41 48]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
