%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCCGUUGGGGCAGAACCAUGGAGGAAAAGCCUUCGAAAGUGUCGCUCAAGUCUUCCGACCGCCAAGGCUCGGACGAGGAGAGCGUGCAUAGCGACACUCGGGACCUGUGGACCACGA\
) } def
/len { sequence length } bind def

/coor [
[133.34338379 218.34553528]
[129.11738586 203.95314026]
[124.89140320 189.56076050]
[120.66541290 175.16836548]
[116.43942261 160.77597046]
[112.21343231 146.38357544]
[98.62785339 146.30690002]
[86.08148193 142.46713257]
[75.55562592 135.43991089]
[65.01809692 146.11512756]
[54.48056030 156.79035950]
[56.12459183 172.34127808]
[47.34522247 185.28178406]
[32.28780746 189.50177002]
[18.06199455 183.00866699]
[11.38477802 168.86834717]
[15.40893555 153.75741577]
[28.23438263 144.81080627]
[43.80533600 146.25282288]
[54.34286880 135.57760620]
[64.88040161 124.90237427]
[60.38700485 116.86194611]
[57.70677567 108.04970551]
[42.70804214 108.24442291]
[27.70930481 108.43914795]
[12.71056938 108.63386536]
[-2.28816724 108.82859039]
[-14.46888256 119.26936340]
[-30.19865799 116.11441040]
[-37.41095352 101.78394318]
[-30.57311630 87.27106476]
[-14.93054867 83.70881653]
[-2.48288846 93.82985687]
[12.51584721 93.63513184]
[27.51458359 93.44041443]
[42.51332092 93.24568939]
[57.51205444 93.05097198]
[61.74015427 80.25921631]
[69.71485901 69.40058136]
[80.65523529 61.53840256]
[93.48995972 57.44258118]
[106.96217346 57.51420593]
[111.92948914 43.36055756]
[116.89679718 29.20690727]
[121.86411285 15.05325794]
[126.64727020 0.83631748]
[131.24546814 -13.44151688]
[135.84367371 -27.71935081]
[140.44187927 -41.99718475]
[145.04006958 -56.27502060]
[136.05953979 -68.79125977]
[136.16967773 -84.01760101]
[145.11866760 -96.11634064]
[159.30607605 -100.57227325]
[163.90428162 -114.85011292]
[160.76988220 -130.35772705]
[172.03617859 -140.10040283]
[176.63436890 -154.37823486]
[181.23257446 -168.65608215]
[185.83078003 -182.93391418]
[190.42897034 -197.21174622]
[194.84144592 -211.54806519]
[199.06742859 -225.94046021]
[192.67175293 -240.65354919]
[200.31425476 -254.75927734]
[216.13226318 -257.43695068]
[227.99156189 -246.63247681]
[226.79470825 -230.63414001]
[213.45982361 -221.71447754]
[209.23384094 -207.32208252]
[210.38226318 -199.92852783]
[204.70681763 -192.61354065]
[200.10861206 -178.33570862]
[195.51040649 -164.05787659]
[190.91221619 -149.78004456]
[186.31401062 -135.50221252]
[189.77729797 -121.01583862]
[178.18211365 -110.25190735]
[173.58390808 -95.97407532]
[182.50454712 -84.07616425]
[182.71109009 -69.02885437]
[173.91479492 -56.59991455]
[159.31790161 -51.67681885]
[154.71971130 -37.39898682]
[150.12150574 -23.12115097]
[145.52330017 -8.84331703]
[140.92510986 5.43451738]
[141.88119507 12.85539055]
[136.01776123 20.02057076]
[131.05044556 34.17422104]
[126.08313751 48.32786942]
[121.11582947 62.48152161]
[137.57553101 75.80783081]
[146.15649414 96.02642822]
[144.17329407 118.69019318]
[157.81777954 124.92141724]
[171.46226501 131.15263367]
[188.38177490 132.23251343]
[192.02790833 148.78974915]
[177.12707520 156.87687683]
[165.23103333 144.79711914]
[151.58654785 138.56588745]
[137.94207764 132.33467102]
[126.60582733 142.15757751]
[130.83181763 156.54997253]
[135.05780029 170.94236755]
[139.28379822 185.33476257]
[143.50978088 199.72715759]
[147.73577881 214.11955261]
[152.51893616 228.33648682]
[157.85200500 242.35641479]
[163.18508911 256.37634277]
[174.46778870 269.03085327]
[165.43116760 283.37576294]
[149.14529419 278.66336060]
[149.16516113 261.70941162]
[143.83207703 247.68949890]
[138.49900818 233.66957092]
[135.32293701 231.88925171]
[132.89865112 228.41899109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[5 105]
[6 104]
[9 21]
[10 20]
[11 19]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[42 92]
[43 91]
[44 90]
[45 89]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[54 79]
[55 78]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 70]
[63 69]
[95 103]
[96 102]
[97 101]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
