%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAACAAAUCAAUGGAAAUAGAGUUCAUUCUCCUAGGAUUGACAGAUGACCCACAGUUGCAAAUUGUGAUUUUCCUGUUUCUAUUUCUCAACUACA\
) } def
/len { sequence length } bind def

/coor [
[78.76277161 407.76400757]
[63.76352692 406.36029053]
[49.45286942 401.65359497]
[36.54861069 393.88006592]
[25.69802284 383.42959595]
[17.44536972 370.82635498]
[12.20459938 356.70254517]
[10.23858738 341.76660156]
[11.64594746 326.76770020]
[16.35608673 312.45819092]
[24.13274765 299.55581665]
[34.58585358 288.70776367]
[47.19108582 280.45816040]
[61.31616592 275.22079468]
[76.25259399 273.25842285]
[77.65028381 258.32366943]
[79.04796600 243.38893127]
[80.44565582 228.45419312]
[81.84334564 213.51945496]
[83.24103546 198.58471680]
[84.63872528 183.64997864]
[86.03641510 168.71522522]
[87.43410492 153.78048706]
[88.83179474 138.84574890]
[90.22948456 123.91101074]
[70.69124603 104.44190979]
[78.73617554 74.16979218]
[67.56821442 64.15597534]
[56.40025330 54.14215088]
[40.96026993 50.68997955]
[36.64975739 36.43274307]
[25.48179436 26.41892242]
[14.31383324 16.40509987]
[3.14587116 6.39127779]
[-8.02209091 -3.62254429]
[-23.85127640 -9.69487572]
[-22.39820862 -26.58643913]
[-5.76452541 -29.86620903]
[1.99173164 -14.79050636]
[13.15969372 -4.77668381]
[24.32765579 5.23713827]
[35.49561691 15.25096035]
[46.66357803 25.26478195]
[61.30475235 28.00070000]
[66.41407776 42.97418976]
[77.58203888 52.98801041]
[88.75000000 63.00183487]
[77.82514191 52.72333908]
[74.56330109 38.08228683]
[80.09168243 24.13822174]
[92.49983215 15.70982647]
[107.49983215 15.70972347]
[119.90809631 24.13794708]
[125.43666840 38.08193588]
[122.17503357 52.72303391]
[111.25000000 63.00183487]
[122.41796112 52.98801041]
[133.58592224 42.97418976]
[144.75389099 32.96036911]
[155.92184448 22.94654465]
[167.08981323 12.93272305]
[178.25776672 2.91890121]
[186.01402283 -12.15680122]
[202.64770508 -8.87703228]
[204.10078430 8.01453209]
[188.27159119 14.08686256]
[177.10363770 24.10068512]
[165.93566895 34.11450577]
[154.76770020 44.12833023]
[143.59974670 54.14215088]
[132.43177795 64.15597534]
[121.26382446 74.16979218]
[127.41627502 82.79586029]
[130.39045715 92.60308838]
[130.08451843 102.49971008]
[126.74981689 111.45344543]
[120.94247437 118.59913635]
[113.44445801 123.32202148]
[105.16422272 125.30870056]
[103.76653290 140.24343872]
[102.36884308 155.17817688]
[100.97115326 170.11291504]
[99.57346344 185.04765320]
[98.17577362 199.98240662]
[96.77808380 214.91714478]
[95.38040161 229.85188293]
[93.98271179 244.78662109]
[92.58502197 259.72137451]
[91.18733215 274.65609741]
[105.50026703 279.35583496]
[118.40829468 287.12310791]
[129.26394653 297.56832886]
[137.52270508 310.16757202]
[142.77032471 324.28884888]
[144.74357605 339.22384644]
[143.34347534 354.22341919]
[138.64027405 368.53521729]
[130.86987305 381.44134521]
[120.42201996 392.29446411]
[107.82078552 400.55017090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[25 79]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
