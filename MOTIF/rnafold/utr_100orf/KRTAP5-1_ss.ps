%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUACCUGCUCCACCCUCAAUCCACCAGAACCAUGGGCUGUUGCGGCUGCUCCGGAGGCUGUGGCUCCAGCUGUGGGGGCUGUGGCUCCGGCUGUGGGGGCUGUGGCUCCGGCUGUGGGGGCUGUGGCUCUG\
) } def
/len { sequence length } bind def

/coor [
[107.77503204 364.17752075]
[93.15219879 368.32974243]
[78.05404663 366.56503296]
[64.78293610 359.15246582]
[55.36262131 347.22241211]
[51.22962952 332.59411621]
[53.01420975 317.49832153]
[60.44422913 304.23696899]
[72.38665771 294.83233643]
[87.02037048 290.71859741]
[88.76176453 275.82003784]
[90.50315857 260.92144775]
[84.29572296 247.38198853]
[93.58280945 234.57337952]
[95.32420349 219.67480469]
[96.89212799 204.75697327]
[98.28637695 189.82191467]
[99.68062592 174.88685608]
[101.07487488 159.95178223]
[102.46912384 145.01672363]
[103.86336517 130.08166504]
[98.65342712 124.68661499]
[91.61119080 137.93074036]
[76.83914185 135.32565308]
[74.75209808 120.47154999]
[88.23355865 113.89652252]
[83.02362061 108.50147247]
[68.04899597 109.37364197]
[53.07437134 110.24581909]
[42.75629807 122.21715546]
[26.98934364 123.30284882]
[15.12776661 112.85877991]
[14.20882893 97.08123016]
[24.77772141 85.33073425]
[40.56410599 84.57865906]
[52.20220184 95.27119446]
[67.17682648 94.39902496]
[82.15144348 93.52684784]
[94.58700562 85.13895416]
[101.00526428 71.58145142]
[107.42352295 58.02394485]
[113.84178162 44.46643829]
[108.75859833 29.74234009]
[115.46075439 16.08452988]
[129.52925110 11.32923317]
[135.94750977 -2.22827291]
[134.85914612 -18.01199913]
[147.29817200 -26.20467377]
[153.71643066 -39.76218033]
[152.62806702 -55.54590607]
[165.06709290 -63.73857880]
[171.48535156 -77.29608917]
[177.90361023 -90.85359192]
[184.32186890 -104.41110229]
[190.74011230 -117.96860504]
[183.46588135 -131.54768372]
[185.55778503 -146.63003540]
[196.00602722 -157.46046448]
[210.65287781 -160.03103638]
[217.07113647 -173.58853149]
[223.48939514 -187.14604187]
[229.90765381 -200.70355225]
[236.32591248 -214.26106262]
[235.23754883 -230.04478455]
[247.67657471 -238.23745728]
[254.09483337 -251.79496765]
[260.51309204 -265.35247803]
[266.93133545 -278.90997314]
[265.84298706 -294.69369507]
[278.28201294 -302.88638306]
[284.70025635 -316.44387817]
[291.11853027 -330.00137329]
[297.53677368 -343.55889893]
[303.95501709 -357.11639404]
[299.93151855 -372.64672852]
[309.67980957 -385.38839722]
[325.72186279 -385.56710815]
[335.75158691 -373.04574585]
[332.07504272 -357.42965698]
[317.51254272 -350.69815063]
[311.09426880 -337.14062500]
[304.67602539 -323.58312988]
[298.25775146 -310.02563477]
[291.83950806 -296.46810913]
[293.38696289 -281.65411377]
[280.48886108 -272.49172974]
[274.07058716 -258.93420410]
[267.65234375 -245.37670898]
[261.23406982 -231.81919861]
[262.78152466 -217.00520325]
[249.88342285 -207.84280396]
[243.46516418 -194.28529358]
[237.04690552 -180.72778320]
[230.62864685 -167.17027283]
[224.21038818 -153.61277771]
[231.50576782 -140.65455627]
[229.75115967 -125.70847321]
[219.41130066 -114.53077698]
[204.29762268 -111.55034637]
[197.87936401 -97.99284363]
[191.46110535 -84.43533325]
[185.04286194 -70.87783051]
[178.62460327 -57.32032394]
[180.17204285 -42.50632095]
[167.27394104 -33.34392166]
[160.85568237 -19.78641701]
[162.40312195 -4.97241306]
[149.50502014 4.18998337]
[143.08676147 17.74748993]
[148.32572937 31.64313126]
[142.00982666 45.48380280]
[127.39928436 50.88469315]
[120.98102570 64.44219971]
[114.56277466 77.99970245]
[108.14451599 91.55721283]
[119.67515564 96.18653870]
[125.88206482 111.57323456]
[118.79843140 131.47590637]
[117.40418243 146.41098022]
[116.00993347 161.34603882]
[114.61568451 176.28109741]
[113.22143555 191.21615601]
[111.82719421 206.15122986]
[114.15981293 215.07983398]
[110.22277832 221.41619873]
[108.48138428 236.31477356]
[114.56426239 250.91987610]
[105.40173340 262.66284180]
[103.66033936 277.56143188]
[101.91894531 292.45999146]
[115.20951080 299.83761597]
[124.66117859 311.74285889]
[128.83264160 326.36019897]
[127.08778381 341.46066284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 130]
[11 129]
[12 128]
[14 126]
[15 125]
[16 123]
[17 122]
[18 121]
[19 120]
[20 119]
[21 118]
[27 38]
[28 37]
[29 36]
[39 115]
[40 114]
[41 113]
[42 112]
[45 109]
[46 108]
[48 106]
[49 105]
[51 103]
[52 102]
[53 101]
[54 100]
[55 99]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[65 89]
[66 88]
[67 87]
[68 86]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
