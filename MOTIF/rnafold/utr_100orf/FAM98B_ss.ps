%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUAGAGCGCCGAACAGCUCUGGGCCAAAGGACCAUGAGAGGGCCGGAGCCGGGUCCCCAACCGACGAUGGAGGGAGACGUGCUGGACACACUGGAGGCGCUGGGGUAUAAAGGACCAUUGUUAGAAGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[221.23078918 297.46090698]
[212.47016907 285.28503418]
[203.70954895 273.10919189]
[194.94892883 260.93331909]
[183.01246643 258.65100098]
[175.62370300 248.50076294]
[177.21746826 235.64241028]
[168.74041748 223.26744080]
[160.26336670 210.89248657]
[151.78633118 198.51751709]
[143.30928040 186.14256287]
[134.83222961 173.76759338]
[121.90831757 173.18063354]
[111.54485321 165.11479187]
[107.68963623 152.35704041]
[111.97547913 139.53150940]
[103.78652954 126.96405029]
[95.59757996 114.39659119]
[82.49324036 107.09752655]
[67.49724579 106.75105286]
[52.50124741 106.40458679]
[37.50524902 106.05812073]
[22.50925064 105.71165466]
[7.51325226 105.36518097]
[-6.46195364 112.78166199]
[-19.00711441 104.75245667]
[-34.00311279 104.40598297]
[-40.11106110 118.32580566]
[-51.08441544 128.84503174]
[-65.24981689 134.35954285]
[-80.44714355 134.02841187]
[-94.35891724 127.90216064]
[-104.86369324 116.91497803]
[-110.35956573 102.74234009]
[-110.00845337 87.54545593]
[-103.86390686 73.64175415]
[-92.86291504 63.15144348]
[-78.68305206 57.67421722]
[-63.48664856 58.04531860]
[-49.59104156 64.20815277]
[-39.11521149 75.22293091]
[-33.65664291 89.40998840]
[-18.66064644 89.75645447]
[-5.75805473 82.31519318]
[7.85972071 90.36918640]
[22.85571861 90.71565247]
[37.85171509 91.06211853]
[52.84771347 91.40859222]
[67.84371185 91.75505829]
[82.83971405 92.10152435]
[93.80738831 81.86873627]
[94.50014496 66.88474274]
[95.19289398 51.90074539]
[95.88564301 36.91675186]
[96.05889130 21.91775131]
[95.71242523 6.92175388]
[95.36595917 -8.07424450]
[94.84631348 -23.06524086]
[94.15355682 -38.04923630]
[93.46080780 -53.03322983]
[84.44006348 -62.33396149]
[84.21955109 -74.88674164]
[92.36963654 -83.90141296]
[92.02317047 -98.89740753]
[80.42105865 -109.62897491]
[79.88898468 -125.42430878]
[90.74261475 -136.91230774]
[106.54268646 -137.27735901]
[117.91529846 -126.30287170]
[118.11327362 -110.49981689]
[107.01916504 -99.24387360]
[107.36563110 -84.24787903]
[117.29648590 -69.82562256]
[108.44480133 -53.72598267]
[109.13755035 -38.74198532]
[109.83030701 -23.75799179]
[113.31278992 -17.16247177]
[110.36195374 -8.42071247]
[110.70841980 6.57528543]
[111.05489349 21.57128334]
[113.42398834 24.29652214]
[114.54259491 28.33670807]
[113.79280853 33.06831360]
[110.86964417 37.60950470]
[110.17688751 52.59349823]
[109.48413849 67.57749176]
[108.79138184 82.56148529]
[112.37985992 86.95558929]
[114.27197266 91.84326172]
[114.51129150 96.64967346]
[113.31908417 100.87248230]
[111.05509186 104.13251495]
[108.16503906 106.20764160]
[116.35398865 118.77510834]
[124.54293823 131.34255981]
[141.68537903 134.60647583]
[151.01785278 148.95178223]
[147.20719910 165.29055786]
[155.68424988 177.66551208]
[164.16128540 190.04048157]
[172.63833618 202.41543579]
[181.11538696 214.79040527]
[189.59242249 227.16535950]
[206.35842896 234.67881775]
[207.12478638 252.17269897]
[215.88540649 264.34857178]
[224.64602661 276.52441406]
[233.40664673 288.70028687]
[240.43666077 286.92507935]
[247.66862488 286.85247803]
[254.69705200 288.47796631]
[261.12994385 291.70199585]
[266.61056519 296.33612061]
[270.83731079 302.11398315]
[273.58020020 308.70660400]
[274.69345093 315.74118042]
[274.12319946 322.82196045]
[271.91006470 329.55282593]
[268.18621826 335.55908203]
[263.16781616 340.50869751]
[269.22665405 354.23062134]
[275.28546143 367.95251465]
[281.34426880 381.67440796]
[287.40307617 395.39633179]
[301.78317261 402.50918579]
[305.04699707 418.21673584]
[294.69082642 430.46948242]
[278.65905762 429.86816406]
[269.24984741 416.87405396]
[273.68118286 401.45513916]
[267.62237549 387.73324585]
[261.56353760 374.01132202]
[255.50473022 360.28942871]
[249.44592285 346.56750488]
[226.50856018 341.13986206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[16 95]
[17 94]
[18 93]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[26 43]
[27 42]
[51 87]
[52 86]
[53 85]
[54 84]
[55 80]
[56 79]
[57 78]
[58 76]
[59 75]
[60 74]
[63 72]
[64 71]
[120 134]
[121 133]
[122 132]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
