%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGAAACACUCUCCAGGCCCCCCAGCCCUGGCCCUCCUCUCUCAGUCUCUGCUCACUACAGGAAAUGGCGACACUUUGAUUAUCAAUUGCCCAGGCU\
) } def
/len { sequence length } bind def

/coor [
[174.08651733 158.01560974]
[168.94805908 141.39352417]
[168.51382446 123.98857880]
[153.92013550 120.52093506]
[139.32646179 117.05329132]
[124.73278809 113.58564758]
[110.13910675 110.11799622]
[96.68864441 113.93593597]
[86.39324951 104.47567749]
[71.79956818 101.00803375]
[60.09171295 117.77568054]
[42.50056458 128.12310791]
[22.23986435 130.20036316]
[2.99426007 123.66474152]
[-11.75080204 109.73667145]
[-19.34028625 90.97203827]
[-34.33847046 91.20531464]
[-49.33665848 91.43859100]
[-64.33484650 91.67186737]
[-79.32759094 92.13836670]
[-94.31126404 92.83797455]
[-104.76656342 104.68965149]
[-120.54498291 105.59363556]
[-132.28544617 95.01361847]
[-133.02256775 79.22652435]
[-122.31901550 67.59856415]
[-106.52501678 67.02840424]
[-95.01087189 77.85429382]
[-80.02719116 77.15469360]
[-73.37535858 73.63637543]
[-64.56812286 76.67368317]
[-49.56993484 76.44040680]
[-34.57175064 76.20713043]
[-19.57356262 75.97385406]
[-17.00984764 65.89179230]
[-12.30692196 56.60227585]
[-5.68716145 48.55345154]
[2.53448033 42.13459396]
[11.96545506 37.65727234]
[22.15435791 35.34024429]
[32.61253738 35.29874802]
[42.83752823 37.53880310]
[52.33719254 41.95670700]
[60.65340805 48.34383774]
[67.38415527 56.39650345]
[72.20296478 65.73037720]
[74.87474060 75.89884186]
[75.26721191 86.41435242]
[89.86089325 89.88200378]
[103.31135559 86.06406403]
[113.60675049 95.52432251]
[128.20042419 98.99196625]
[142.79411316 102.45960999]
[157.38778687 105.92725372]
[171.98146057 109.39489746]
[177.67774963 97.77593231]
[185.60592651 87.55652618]
[195.43531799 79.15893555]
[206.75675964 72.92951965]
[219.09962463 69.12443542]
[231.95138550 67.89913940]
[244.77891541 69.30199432]
[257.05056763 73.27241516]
[268.25827026 79.64343262]
[277.93850708 88.14875031]
[285.69146729 98.43386841]
[291.19760132 110.07082367]
[294.23086548 122.57605743]
[294.66781616 135.43045044]
[292.49279785 148.10090637]
[306.37319946 153.78723145]
[320.25360107 159.47355652]
[334.13400269 165.15988159]
[348.01443481 170.84622192]
[352.69638062 170.00370789]
[356.93023682 170.73609924]
[360.24765015 172.67768860]
[362.36199951 175.34197998]
[363.19305420 178.19744873]
[376.26049805 185.56236267]
[389.32794189 192.92726135]
[402.39538574 200.29217529]
[419.16256714 202.80175781]
[421.39266968 219.60838318]
[405.86022949 226.40388489]
[395.03045654 213.35961914]
[381.96301270 205.99470520]
[368.89556885 198.62980652]
[355.82812500 191.26489258]
[342.32809448 184.72662354]
[328.44769287 179.04029846]
[314.56729126 173.35397339]
[300.68688965 167.66764832]
[286.80645752 161.98132324]
[276.43551636 175.82919312]
[262.68563843 186.34970093]
[246.58506775 192.74772644]
[229.34025574 194.53677368]
[212.24523926 191.57594299]
[196.58462524 184.08102417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[9 49]
[10 48]
[16 34]
[17 33]
[18 32]
[19 31]
[20 29]
[21 28]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
