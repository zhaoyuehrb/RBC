%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCAAUUUGACUUCAAUGAGUGGAUUCCUUCUUAUGGGGUUUUCUGAUGAGCGUAAGCUUCAGAUUUUACAUGCAUUGGUAUUUCUGGUGACAUACC\
) } def
/len { sequence length } bind def

/coor [
[80.38092041 131.19230652]
[79.68156433 116.20907593]
[72.18972778 116.55887604]
[64.22335815 129.26860046]
[56.25699234 141.97831726]
[48.29062653 154.68803406]
[40.32425690 167.39776611]
[37.03538895 184.02964783]
[20.14303207 185.47348022]
[14.07936192 169.64096069]
[27.61453819 159.43139648]
[35.58090591 146.72167969]
[43.54727173 134.01194763]
[51.51363754 121.30223083]
[59.48000717 108.59251404]
[75.83758545 92.64139557]
[93.66468811 93.47420502]
[92.26699829 78.53946686]
[90.86930847 63.60472488]
[89.47162628 48.66998291]
[88.07393646 33.73524475]
[79.08440399 20.71606827]
[85.60212708 7.32321167]
[84.20443726 -7.61152840]
[82.80674744 -22.54626846]
[75.23950195 -35.49759293]
[62.91516876 -44.04807663]
[50.59083557 -52.59856033]
[38.26650238 -61.14904404]
[25.94216728 -69.69953156]
[13.61783218 -78.25001526]
[-1.42069519 -73.96320343]
[-15.67520428 -80.39305878]
[-22.41515160 -94.50359344]
[-18.45813942 -109.63224030]
[-5.67254972 -118.63572693]
[9.90465450 -117.26287079]
[20.91839218 -106.16189575]
[22.16831589 -90.57434845]
[34.49264908 -82.02386475]
[46.81698608 -73.47338104]
[59.14131927 -64.92289734]
[71.46565247 -56.37241364]
[83.78998566 -47.82192993]
[92.88887024 -62.16740417]
[107.84041595 -66.00617981]
[113.31018829 -79.97334290]
[118.77996063 -93.94050598]
[124.24973297 -107.90766144]
[129.71951294 -121.87482452]
[129.08056641 -128.74584961]
[131.72503662 -134.02944946]
[135.98808289 -136.52287292]
[142.31561279 -150.12295532]
[148.64312744 -163.72305298]
[146.66154480 -180.00202942]
[159.92958069 -189.64002991]
[174.79824829 -182.72230530]
[175.97190857 -166.36520386]
[162.24322510 -157.39552307]
[155.91569519 -143.79544067]
[149.58816528 -130.19534302]
[143.68667603 -116.40505219]
[138.21690369 -102.43788910]
[132.74711609 -88.47073364]
[127.27735138 -74.50357056]
[121.80757904 -60.53640747]
[127.58554077 -52.96511078]
[129.34098816 -43.26459503]
[126.39099884 -33.50879669]
[119.09247589 -25.92393684]
[108.82623291 -22.38168907]
[97.74148560 -23.94395828]
[99.13917542 -9.00921726]
[100.53686523 5.92552280]
[109.42642212 17.87646675]
[103.00867462 32.33755493]
[104.40636444 47.27229691]
[105.80405426 62.20703506]
[107.20174408 77.14177704]
[108.59943390 92.07651520]
[114.06920624 106.04367828]
[123.18519592 117.95580292]
[132.30117798 129.86791992]
[141.41717529 141.78004456]
[155.94850159 148.03713989]
[157.53877258 162.84660339]
[166.65475464 174.75872803]
[181.99691772 180.55097961]
[184.38438416 196.77540588]
[171.36114502 206.74169922]
[156.32438660 200.19740295]
[154.74263000 183.87471008]
[145.62664795 171.96258545]
[131.74736023 166.55754089]
[129.50505066 150.89604187]
[120.38906097 138.98391724]
[111.27307129 127.07179260]
[102.15708160 115.15966797]
[94.66523743 115.50946808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[23 75]
[24 74]
[25 73]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[53 62]
[54 61]
[55 60]
[82 99]
[83 98]
[84 97]
[85 96]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
