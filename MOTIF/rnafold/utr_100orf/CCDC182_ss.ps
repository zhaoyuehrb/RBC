%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAUUGACCUGGUUGGUCUCUUGGCUUCCUCUCUUUGUCCAACGUAGAAGAGACAAUGGAACCCCUCUACCAGGCUGGGUCCAUUCUCAUGACGGUGAAUACCCUACAGGGGAAAAAAAUGAUAGAGAGUGGCCUCCAGUCUGGAGACUUUUCCC\
) } def
/len { sequence length } bind def

/coor [
[142.78361511 186.85380554]
[127.78907013 187.25837708]
[113.51547241 182.64704895]
[101.59186554 173.54608154]
[93.37908936 160.99417114]
[89.81446838 146.42387390]
[91.30482483 131.49809265]
[97.68151855 117.91824341]
[89.75522614 130.65299988]
[81.82893372 143.38774109]
[73.90264130 156.12249756]
[76.12408447 172.01100159]
[64.98287201 183.55451965]
[49.02558517 181.89785767]
[40.49328995 168.31185913]
[45.93123245 153.21853638]
[61.16788864 148.19619751]
[69.09418488 135.46145630]
[77.02047729 122.72669983]
[84.94676971 109.99195099]
[82.11112213 103.04866791]
[68.22447968 108.71974945]
[62.55361557 94.83301544]
[76.43982697 89.16211700]
[73.60418701 82.21883392]
[59.02914429 78.67366791]
[43.79127121 82.93017578]
[33.25323868 72.40406036]
[18.67819977 68.85888672]
[4.10315895 65.31372070]
[-10.47188091 61.76855850]
[-25.17634201 58.80564499]
[-39.98697281 56.42967606]
[-54.79760361 54.05370712]
[-69.60823059 51.67773438]
[-84.41886139 49.30176544]
[-99.22949219 46.92579269]
[-114.04012299 44.54982376]
[-123.66711426 56.51713943]
[-137.99377441 62.05267715]
[-153.16632080 59.66740417]
[-165.10340881 50.00295258]
[-170.59400940 35.65900421]
[-168.16119385 20.49401093]
[-158.45936584 8.58728313]
[-144.09828186 3.14166760]
[-128.94097900 5.62200880]
[-117.06472778 15.36110687]
[-111.66415405 29.73919296]
[-96.85352325 32.11516571]
[-82.04289246 34.49113464]
[-67.23226166 36.86710358]
[-52.42163086 39.24307632]
[-37.61100006 41.61904526]
[-22.80037117 43.99501419]
[-20.42671204 42.40822220]
[-17.26472092 41.69260025]
[-13.65293694 42.15963745]
[-10.03847027 43.98889160]
[-6.92671442 47.19351578]
[7.64832544 50.73868179]
[22.22336578 54.28385162]
[36.79840469 57.82901764]
[50.99377441 53.31893921]
[62.57431030 64.09863281]
[77.14935303 67.64379883]
[101.24481964 73.30725098]
[108.99610901 89.49318695]
[122.82559204 83.68412018]
[136.65507507 77.87505341]
[143.40003967 71.63266754]
[150.81774902 72.09099579]
[164.75999451 66.55803680]
[178.70225525 61.02508163]
[192.64450073 55.49212265]
[206.58674622 49.95916367]
[220.52900696 44.42620468]
[234.47125244 38.89324570]
[248.41349792 33.36028671]
[262.35574341 27.82732773]
[276.29800415 22.29436874]
[287.35238647 7.59905005]
[304.59085083 10.75919151]
[318.42034912 4.95012379]
[332.24984741 -0.85894358]
[346.07931519 -6.66801119]
[359.90881348 -12.47707844]
[373.73831177 -18.28614616]
[387.56777954 -24.09521484]
[401.39727783 -29.90428162]
[398.60244751 -44.69507980]
[398.94393921 -59.73789215]
[402.40441895 -74.37523651]
[408.83023071 -87.96787262]
[417.93832397 -99.92269135]
[429.32864380 -109.71861267]
[442.50170898 -116.92929840]
[456.88055420 -121.24169922]
[471.83596802 -122.46963501]
[486.71405029 -120.56186676]
[500.86477661 -115.60419464]
[513.67041016 -107.81562042]
[524.57244873 -97.53865814]
[533.09613037 -85.22428894]
[546.92559814 -91.03335571]
[560.75506592 -96.84242249]
[570.23712158 -110.22235107]
[586.53820801 -108.43139648]
[592.88909912 -93.31194305]
[582.75659180 -80.41758728]
[566.56414795 -83.01293945]
[552.73468018 -77.20387268]
[538.90515137 -71.39480591]
[541.73199463 -56.68749619]
[541.43890381 -41.70801163]
[538.03625488 -27.11115456]
[531.67041016 -13.53551865]
[522.61743164 -1.57553732]
[511.27114868 8.24454308]
[498.12588501 15.49364185]
[483.75500488 19.85276604]
[468.78604126 21.12904739]
[453.87301636 19.26427650]
[439.66815186 14.33755016]
[426.79312134 6.56192017]
[415.81198120 -3.72481632]
[407.20632935 -16.07479477]
[393.37686157 -10.26572609]
[379.54736328 -4.45665884]
[365.71786499 1.35240901]
[351.88839722 7.16147661]
[338.05889893 12.97054386]
[324.22940063 18.77961159]
[310.39993286 24.58868027]
[305.51510620 35.69241333]
[293.99609375 40.62902832]
[281.83096313 36.23661804]
[267.88870239 41.76957703]
[253.94645691 47.30253601]
[240.00421143 52.83549500]
[226.06196594 58.36845398]
[212.11970520 63.90141296]
[198.17745972 69.43437195]
[184.23521423 74.96733093]
[170.29295349 80.50028992]
[156.35070801 86.03324890]
[142.46415710 91.70454407]
[128.63465881 97.51361084]
[114.80517578 103.32267761]
[129.22113037 99.17778778]
[144.19459534 100.06961060]
[158.01664734 105.89634705]
[169.10977173 115.99300385]
[176.20793152 129.20724487]
[178.50097656 144.03094482]
[175.72724915 158.77226257]
[168.20327759 171.74877930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[11 17]
[25 66]
[26 65]
[28 63]
[29 62]
[30 61]
[31 60]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[68 149]
[69 148]
[70 147]
[72 146]
[73 145]
[74 144]
[75 143]
[76 142]
[77 141]
[78 140]
[79 139]
[80 138]
[81 137]
[83 134]
[84 133]
[85 132]
[86 131]
[87 130]
[88 129]
[89 128]
[90 127]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
