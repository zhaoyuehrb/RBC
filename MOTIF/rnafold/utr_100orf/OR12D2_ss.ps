%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGAAGGAUUCUGAUUGCGAUUAGUGUUCCAUAGAUUAUUUUGUCUUUUGUCUGAAGUGAUGCUGAAUACAACCUCAGUCACCGAAUUUCUCCUCUUGGGAGUGACAGACAUUCAAGAACUGCAGCCUUUUCUCUUCGUGGUUUUCCUCACCAUCUACU\
) } def
/len { sequence length } bind def

/coor [
[47.67598343 117.58578491]
[58.78863144 107.51061249]
[73.41917419 104.19326782]
[88.24863434 101.93784332]
[74.15325165 96.80754089]
[60.05785751 91.67723846]
[44.44362640 94.22798920]
[35.13021469 82.60431671]
[21.03482628 77.47401428]
[6.93943691 72.34371185]
[-7.15595245 67.21340942]
[-21.25134087 62.08311081]
[-35.34672928 56.95280838]
[-49.53895187 52.09679794]
[-63.82266998 47.51691055]
[-78.10639191 42.93701935]
[-92.39010620 38.35712814]
[-106.67382812 33.77723694]
[-120.95754242 29.19734955]
[-130.30619812 39.83142471]
[-142.96755981 46.07195282]
[-157.00906372 47.00333786]
[-170.30154419 42.51753616]
[-180.84207153 33.32543564]
[-187.05572510 20.84439659]
[-188.03094482 6.97979450]
[-202.22315979 2.12378526]
[-216.41539001 -2.73222399]
[-230.60760498 -7.58823299]
[-244.79983521 -12.44424248]
[-258.99206543 -17.30025101]
[-264.20953369 -16.26844215]
[-268.82501221 -17.27223778]
[-272.15560913 -19.73043823]
[-273.85403442 -22.87334633]
[-287.73986816 -28.54634285]
[-301.68008423 -34.08443451]
[-315.67333984 -39.48710251]
[-329.66659546 -44.88976669]
[-343.65985107 -50.29243469]
[-357.65310669 -55.69509888]
[-371.64636230 -61.09776688]
[-385.63961792 -66.50043488]
[-399.63287354 -71.90309906]
[-411.10748291 -61.77430344]
[-425.97753906 -58.14947128]
[-440.82608032 -61.86156082]
[-452.24099731 -72.05756378]
[-457.59921265 -86.39451599]
[-455.66946411 -101.57788086]
[-446.89517212 -114.11864471]
[-433.29263306 -121.13501740]
[-417.98760986 -121.01470184]
[-404.49707031 -113.78533936]
[-395.92102051 -101.10818481]
[-394.23022461 -85.89635468]
[-380.23696899 -80.49368286]
[-366.24371338 -75.09101868]
[-352.25045776 -69.68835449]
[-338.25720215 -64.28569031]
[-324.26394653 -58.88302231]
[-310.27069092 -53.48035812]
[-296.27743530 -48.07769012]
[-288.86837769 -48.60478592]
[-282.06689453 -42.43220139]
[-268.18103027 -36.75920486]
[-254.13604736 -31.49247360]
[-239.94381714 -26.63646507]
[-225.75160217 -21.78045464]
[-211.55937195 -16.92444611]
[-197.36715698 -12.06843758]
[-183.17492676 -7.21242809]
[-172.19451904 -18.79076385]
[-157.21376038 -24.45308495]
[-141.20437622 -23.02210617]
[-127.36565399 -14.73301029]
[-118.48526764 -1.19657218]
[-116.37765503 14.91363049]
[-102.09393311 19.49352074]
[-87.81021881 24.07341003]
[-73.52649689 28.65330124]
[-59.24278259 33.23318863]
[-44.95906448 37.81307983]
[-40.33829498 36.43915176]
[-34.80604172 37.98847961]
[-30.21642876 42.85741806]
[-16.12104034 47.98772049]
[-2.02565026 53.11802292]
[12.06973934 58.24832535]
[26.16512871 63.37862778]
[40.26051712 68.50892639]
[54.86655426 65.59123230]
[65.18816376 77.58184814]
[79.28355408 82.71215057]
[93.37893677 87.84245300]
[108.32186127 86.53511810]
[121.31224060 79.03511810]
[134.30262756 71.53511810]
[147.29299927 64.03511810]
[160.28338623 56.53511810]
[173.27377319 49.03511810]
[186.26414490 41.53511810]
[194.34680176 27.93433380]
[209.23759460 28.27139473]
[222.22796631 20.77139473]
[227.75238037 5.70950937]
[243.01759338 0.77464008]
[256.31344604 9.75239658]
[257.44049072 25.75581360]
[245.53414917 36.50843811]
[229.72796631 33.76177597]
[216.73759460 41.26177597]
[209.58409119 54.32611084]
[193.76414490 54.52549744]
[180.77377319 62.02549744]
[167.78338623 69.52549744]
[154.79299927 77.02549744]
[141.80262756 84.52549744]
[128.81224060 92.02549744]
[115.82186127 99.52549744]
[113.95104980 106.78842163]
[128.94686890 106.43447113]
[143.94270325 106.08052826]
[158.93852234 105.72657776]
[171.98092651 98.31742859]
[186.91851807 96.95055389]
[201.08903503 101.86956024]
[211.96691895 112.19775391]
[217.61344910 126.09439850]
[217.02229309 141.08274841]
[210.29878235 154.49148560]
[198.64122009 163.93084717]
[184.12730408 167.71849060]
[169.34378052 165.17935181]
[156.92543030 156.76599121]
[149.08558655 143.97799683]
[136.12687683 136.42341614]
[123.16815186 128.86885071]
[110.20943451 121.31427002]
[108.33862305 128.57719421]
[116.08911896 141.41970825]
[123.83960724 154.26220703]
[131.59010315 167.10470581]
[139.34059143 179.94720459]
[154.81729126 182.18458557]
[165.19635010 193.88113403]
[165.57711792 209.51408386]
[155.77978516 221.70202637]
[140.43035889 224.69021606]
[126.77637482 217.06770325]
[121.26481628 202.43360901]
[126.49808502 187.69770813]
[118.74759674 174.85519409]
[110.99710083 162.01269531]
[103.24661255 149.17019653]
[95.49612427 136.32768250]
[96.14079285 151.31382751]
[84.43655396 160.69523621]
[69.63346100 163.11775208]
[55.54933929 157.95660400]
[45.81655884 146.54287720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[35 66]
[36 65]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[104 112]
[105 111]
[140 156]
[141 155]
[142 154]
[143 153]
[144 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
