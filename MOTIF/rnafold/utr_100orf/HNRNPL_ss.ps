%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCGCCGCCAUGUCGCGGAGGCUGCUGCCCCGGGCGGAGAAGCGGCGUCGGCGGCUGGAGCAGAGGCAGCAGCCGGACGAGCAGCGGAGGCGGUCGGGAGCGAUGGUGA\
) } def
/len { sequence length } bind def

/coor [
[125.67361450 182.03915405]
[117.34006500 169.56710815]
[109.00650787 157.09507751]
[100.67295837 144.62303162]
[92.33940125 132.15098572]
[78.91747284 125.45383453]
[63.94107437 126.29489136]
[48.96467209 127.13594818]
[33.98826981 127.97700500]
[19.01186562 128.81805420]
[6.64493942 144.47796631]
[-12.93449974 146.20086670]
[-27.39892387 133.33886719]
[-42.25164032 135.43571472]
[-57.10435867 137.53257751]
[-71.95707703 139.62942505]
[-80.15433502 143.98362732]
[-87.25512695 141.57073975]
[-102.16081238 143.25021362]
[-117.06649017 144.92967224]
[-125.38264465 149.05224609]
[-132.41297913 146.44117737]
[-147.35989380 147.70193481]
[-162.30682373 148.96269226]
[-175.45315552 158.76603699]
[-190.40725708 152.03498840]
[-191.78561401 135.69387817]
[-178.17030334 126.55302429]
[-163.56758118 134.01576233]
[-148.62065125 132.75500488]
[-133.67373657 131.49424744]
[-118.74595642 130.02398682]
[-103.84027863 128.34452820]
[-88.93459320 126.66505432]
[-74.05393219 124.77671051]
[-59.20121384 122.67985535]
[-44.34849548 120.58300018]
[-29.49577904 118.48614502]
[-25.65262222 108.70236969]
[-17.98283195 101.39567566]
[-7.86978054 97.97893524]
[2.82196522 99.15467834]
[12.09037018 104.77194214]
[18.17080879 113.84165955]
[33.14721298 113.00060272]
[48.12361526 112.15954590]
[63.10001755 111.31848907]
[78.07641602 110.47743225]
[82.59469604 86.98870850]
[103.03191376 81.07784271]
[111.01239777 68.37697601]
[118.99287415 55.67611313]
[119.19190979 37.32992554]
[134.88873291 29.62170219]
[142.50987244 16.70201302]
[150.13099670 3.78232265]
[157.75213623 -9.13736725]
[165.37326050 -22.05705643]
[172.99438477 -34.97674561]
[169.26724243 -50.10110092]
[177.18019104 -63.09493637]
[191.62193298 -66.55500031]
[199.24305725 -79.47468567]
[198.85523987 -95.86924744]
[212.99832153 -104.17016602]
[227.12312317 -95.83815765]
[226.69924927 -79.44448853]
[212.16275024 -71.85356140]
[204.54161072 -58.93386841]
[208.49902344 -44.62042999]
[200.95416260 -31.40946198]
[185.91407776 -27.35561562]
[178.29295349 -14.43592644]
[170.67181396 -1.51623666]
[163.05068970 11.40345287]
[155.42956543 24.32314301]
[147.80842590 37.24283218]
[150.52061462 49.12366867]
[144.15635681 59.98575211]
[131.69374084 63.65659714]
[123.71325684 76.35746002]
[115.73278046 89.05831909]
[120.31712341 97.69654083]
[120.16555786 108.09867096]
[114.72273254 117.68960571]
[104.81144714 123.81742859]
[113.14500427 136.28947449]
[121.47855377 148.76152039]
[129.81210327 161.23356628]
[138.14566040 173.70561218]
[156.57849121 181.62611389]
[157.35629272 200.86135864]
[166.37605286 212.84651184]
[180.85650635 219.22042847]
[182.32745361 234.04222107]
[191.34721375 246.02737427]
[200.36695862 258.01254272]
[209.38671875 269.99768066]
[224.68173218 275.91333008]
[226.93844604 292.15646362]
[213.83535767 302.01754761]
[198.85179138 295.35235596]
[197.40156555 279.01745605]
[188.38180542 267.03228760]
[179.36204529 255.04713440]
[170.34230042 243.06198120]
[156.50698853 237.54531860]
[154.39088440 221.86627197]
[145.37112427 209.88110352]
[134.99177551 209.33499146]
[126.49614716 202.97067261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[13 38]
[14 37]
[15 36]
[16 35]
[18 34]
[19 33]
[20 32]
[22 31]
[23 30]
[24 29]
[50 82]
[51 81]
[52 80]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[62 69]
[63 68]
[92 109]
[93 108]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
