%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGCUGGUUGAGGCUGUGUGGGUCGGGGACGGGCCGAGGCGAUGGCGGAGAAGUUUGACCACCUAGAGGAGCACCUGGAGAAGUUCGUGGAGAACAUUCGGCAGCUCGGCAUCAUCGUCAGUGACUUCCAGCCCAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[41.62847519 595.70391846]
[47.67481613 579.86474609]
[47.67481613 564.86474609]
[47.67481613 549.86474609]
[47.67481613 534.86474609]
[47.67481613 519.86474609]
[47.67481613 504.86477661]
[47.67481613 489.86477661]
[47.67481613 474.86477661]
[35.13940811 483.10269165]
[20.81503868 478.65158081]
[15.15610600 464.75997925]
[22.29268456 451.56646729]
[37.01626587 448.70007324]
[48.58168793 458.25405884]
[50.21469116 443.34323120]
[51.84769440 428.43237305]
[53.48069763 413.52154541]
[46.33921432 406.08453369]
[44.47129440 395.72033691]
[48.74195480 385.85317993]
[57.94639587 379.88085938]
[60.22824478 365.05541992]
[62.51009750 350.23001099]
[64.79194641 335.40460205]
[67.07379913 320.57916260]
[69.35565186 305.75375366]
[60.36864471 293.93133545]
[62.47157288 278.86373901]
[74.93293762 269.51751709]
[77.21479034 254.69207764]
[79.49664307 239.86665344]
[81.77848816 225.04122925]
[84.06034088 210.21582031]
[85.69334412 195.30496216]
[86.67439270 180.33708191]
[87.65544128 165.36920166]
[88.63648987 150.40132141]
[89.61753082 135.43342590]
[86.89575958 128.50074768]
[90.78675842 120.15084839]
[92.09409332 105.20793152]
[89.67597198 100.46099854]
[90.13368225 94.69620514]
[93.79833984 89.64653015]
[95.75623322 74.77485657]
[89.88641357 60.08282471]
[99.21876526 48.47435760]
[101.17665863 33.60268402]
[103.13454437 18.73101234]
[105.09243774 3.85933971]
[97.92694855 -4.45005083]
[96.58802032 -15.11807156]
[101.28151703 -24.54552460]
[110.21878815 -29.68701935]
[112.82350922 -44.45913696]
[115.42823029 -59.23125458]
[118.03295135 -74.00337219]
[111.27058411 -85.04469299]
[113.79444122 -97.33396149]
[123.70576477 -104.35114288]
[126.63211823 -119.06291962]
[129.55847168 -133.77470398]
[132.48483276 -148.48648071]
[134.44271851 -163.35815430]
[135.42376709 -178.32603455]
[125.28068542 -190.14785767]
[126.48883057 -205.31344604]
[137.82164001 -214.91047668]
[138.80268860 -229.87835693]
[139.78373718 -244.84625244]
[132.04924011 -259.30685425]
[140.93389893 -273.09072876]
[157.29794312 -272.01818848]
[164.30743408 -257.19256592]
[154.75161743 -243.86520386]
[153.77056885 -228.89730835]
[152.78952026 -213.92942810]
[162.77272034 -202.93527222]
[161.99102783 -187.74174500]
[150.39164734 -177.34498596]
[149.41061401 -162.37710571]
[161.66946411 -171.02120972]
[176.48307800 -168.66392517]
[185.45332336 -156.64167786]
[183.49479675 -141.77008057]
[171.71780396 -132.48016357]
[156.79898071 -134.03854370]
[147.19660950 -145.56011963]
[144.27024841 -130.84834290]
[141.34390259 -116.13656616]
[138.41754150 -101.42478943]
[144.96675110 -85.17849731]
[132.80506897 -71.39864349]
[130.20034790 -56.62652969]
[127.59562683 -41.85441208]
[124.99090576 -27.08229828]
[132.97088623 -9.51821232]
[119.96411133 5.81723261]
[118.00621796 20.68890572]
[116.04832458 35.56057739]
[114.09043884 50.43225098]
[120.10029602 64.06056213]
[110.62790680 76.73274994]
[108.67001343 91.60442352]
[107.03701019 106.51526642]
[105.72967529 121.45819092]
[104.58541870 136.41447449]
[103.60437012 151.38237000]
[102.62332153 166.35025024]
[101.64227295 181.31813049]
[100.66123199 196.28601074]
[102.81414032 200.25563049]
[103.47560120 204.29434204]
[102.81495667 207.91053772]
[101.14784241 210.72250366]
[98.88576508 212.49766541]
[96.60391235 227.32308960]
[94.32205963 242.14851379]
[92.04021454 256.97393799]
[89.75836182 271.79934692]
[98.83251190 284.46023560]
[96.30719757 299.46279907]
[84.18106842 308.03558350]
[81.89922333 322.86102295]
[79.61737061 337.68643188]
[77.33551788 352.51187134]
[75.05366516 367.33728027]
[72.77182007 382.16271973]
[80.96765900 400.52517700]
[68.39154053 415.15454102]
[66.75853729 430.06536865]
[65.12553406 444.97622681]
[63.49253464 459.88708496]
[62.67481613 474.86477661]
[62.67481613 489.86477661]
[62.67481613 504.86477661]
[62.67481613 519.86474609]
[62.67481613 534.86474609]
[62.67481613 549.86474609]
[62.67481613 564.86474609]
[62.67481613 579.86474609]
[68.72115326 595.70391846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 142]
[3 141]
[4 140]
[5 139]
[6 138]
[7 137]
[8 136]
[9 135]
[15 134]
[16 133]
[17 132]
[18 131]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[30 121]
[31 120]
[32 119]
[33 118]
[34 117]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[41 107]
[42 106]
[45 105]
[46 104]
[48 102]
[49 101]
[50 100]
[51 99]
[55 97]
[56 96]
[57 95]
[58 94]
[61 92]
[62 91]
[63 90]
[64 89]
[65 82]
[66 81]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
