%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUGUCGUGGGGGAUUGUGGGAAAAGAUGGCGGCUGCCGCACAAUCCCGGGUUGUCCGGGUCCUGUCAAUGUCACGUUCUGCCAUUACUGCAAUAGCCACAUCUGUGUGUCACGGCCCACCCUGUC\
) } def
/len { sequence length } bind def

/coor [
[206.19485474 224.35366821]
[204.03579712 220.81719971]
[203.08276367 216.34158325]
[192.60508728 205.60758972]
[182.12741089 194.87361145]
[167.70046997 191.17057800]
[163.59768677 175.89059448]
[153.12002563 165.15661621]
[138.69306946 161.45358276]
[134.59030151 146.17359924]
[124.11263275 135.43962097]
[113.63496399 124.70562744]
[103.15728760 113.97164917]
[89.74980164 110.00543976]
[86.10872650 96.50602722]
[75.63105774 85.77204132]
[65.15338135 75.03805542]
[49.97700119 70.56726074]
[46.62366104 56.05504227]
[36.14599228 45.32106018]
[25.66832161 34.58707428]
[15.19065094 23.85309029]
[4.71298075 13.11910534]
[-8.69862270 17.28242874]
[-22.52646255 15.24880600]
[-34.06147003 7.47464466]
[-41.06887436 -4.46471691]
[-42.22106552 -18.19393349]
[-37.34878922 -31.01015282]
[-47.56402588 -41.99418259]
[-57.77926636 -52.97821426]
[-67.99449921 -63.96224213]
[-78.20973969 -74.94627380]
[-86.43318176 -79.15597534]
[-88.53514862 -86.32132721]
[-98.48198700 -97.54898834]
[-108.42882538 -108.77664948]
[-114.72177887 -111.28948975]
[-118.20605469 -115.94045258]
[-118.56891632 -120.79544830]
[-127.96169281 -132.49057007]
[-137.35447693 -144.18568420]
[-152.02850342 -150.10034180]
[-153.96556091 -164.86845398]
[-163.35833740 -176.56356812]
[-172.75111389 -188.25868225]
[-182.14389038 -199.95379639]
[-191.53668213 -211.64891052]
[-200.92945862 -223.34402466]
[-215.56185913 -231.90725708]
[-211.38392639 -248.33836365]
[-194.43838501 -248.87229919]
[-189.23434448 -232.73680115]
[-179.84155273 -221.04168701]
[-170.44877625 -209.34657288]
[-161.05599976 -197.65145874]
[-151.66322327 -185.95634460]
[-142.27044678 -174.26123047]
[-128.26824951 -169.18307495]
[-125.65935516 -153.57846069]
[-116.26657867 -141.88334656]
[-106.87380219 -130.18823242]
[-97.20116425 -118.72348785]
[-87.25432587 -107.49582672]
[-77.30748749 -96.26816559]
[-67.22570801 -85.16151428]
[-57.01047134 -74.17748260]
[-46.79523468 -63.19345093]
[-36.57999802 -52.20942307]
[-26.36475945 -41.22539139]
[-10.75759315 -45.22797775]
[4.83614302 -40.81631470]
[16.16317177 -29.09597397]
[20.08496666 -13.17913914]
[15.44696522 2.64143538]
[25.92463493 13.37541962]
[36.40230560 24.10940361]
[46.87997818 34.84338760]
[57.35764694 45.57737350]
[71.78459167 49.28040314]
[75.88736725 64.56038666]
[86.36503601 75.29437256]
[96.84271240 86.02835083]
[110.25019836 89.99456024]
[113.89127350 103.49397278]
[124.36894226 114.22795868]
[134.84661865 124.96194458]
[145.32427979 135.69592285]
[160.50067139 140.16673279]
[163.85400391 154.67893982]
[174.33168030 165.41291809]
[189.50805664 169.88372803]
[192.86140442 184.39593506]
[203.33906555 195.12992859]
[213.81674194 205.86390686]
[224.80076599 216.07914734]
[236.26550293 225.75177002]
[247.73023987 235.42440796]
[259.19497681 245.09704590]
[272.70419312 238.18498230]
[287.78991699 236.97489929]
[302.15081787 241.62016296]
[313.60809326 251.38327026]
[320.43603516 264.75277710]
[321.62194824 279.67721558]
[317.01608276 293.87988281]
[328.48083496 303.55252075]
[339.94555664 313.22515869]
[351.41030884 322.89779663]
[362.87503052 332.57043457]
[378.88006592 338.16284180]
[377.93682861 355.09054565]
[361.40957642 358.87020874]
[353.20239258 344.03515625]
[341.73767090 334.36251831]
[330.27291870 324.68988037]
[318.80819702 315.01724243]
[307.34344482 305.34463501]
[294.11895752 312.27584839]
[279.20788574 313.61950684]
[264.87966919 309.13986206]
[253.32701111 299.48980713]
[246.33029175 286.11596680]
[244.98332214 271.04187012]
[249.52233887 256.56176758]
[238.05760193 246.88914490]
[226.59288025 237.21650696]
[215.12814331 227.54388428]
[212.23272705 227.70986938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[5 93]
[7 91]
[8 90]
[10 88]
[11 87]
[12 86]
[13 85]
[15 83]
[16 82]
[17 81]
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[35 65]
[36 64]
[37 63]
[40 62]
[41 61]
[42 60]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[96 128]
[97 127]
[98 126]
[99 125]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
