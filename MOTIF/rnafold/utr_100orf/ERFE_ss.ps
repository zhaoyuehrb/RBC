%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCCGGCCCGCCGCCCCGCCGGAGCCCGCCUGCUGCUCGUCUACGCGGGCCUGCUGGCCGCCGCCGCCGCGGGCCUGGGGUCCCCGGAGCCUGGGG\
) } def
/len { sequence length } bind def

/coor [
[184.54899597 332.64797974]
[183.88253784 328.40322876]
[184.79776001 323.73495483]
[179.32798767 309.76779175]
[173.85821533 295.80062866]
[168.38844299 281.83346558]
[162.91867065 267.86630249]
[157.44889832 253.89915466]
[151.76257324 240.01873779]
[145.86106873 226.22845459]
[139.95956421 212.43815613]
[134.05805969 198.64785767]
[128.15655518 184.85755920]
[122.25505066 171.06726074]
[116.35354614 157.27696228]
[104.23290253 148.62022400]
[105.91676331 132.88888550]
[100.01525879 119.09858704]
[86.60430145 113.61291504]
[80.90364075 100.29193115]
[86.19445038 86.80291748]
[80.29294586 73.01261902]
[67.75018311 63.36950302]
[69.85615540 48.62453461]
[63.95465469 34.83423996]
[58.05315018 21.04394341]
[51.72562408 7.44385433]
[44.97819901 -5.95287085]
[38.23077393 -19.34959602]
[23.49268723 -24.39207840]
[16.84068108 -38.07438278]
[21.73874283 -52.09381866]
[14.99131584 -65.49053955]
[8.24389076 -78.88726807]
[1.49646497 -92.28399658]
[-5.25096083 -105.68071747]
[-11.99838638 -119.07744598]
[-27.30268288 -119.27000427]
[-40.75895691 -126.56297302]
[-49.27505112 -139.28047180]
[-50.89403152 -154.50010681]
[-45.24386597 -168.72453308]
[-33.62292862 -178.68507385]
[-18.70161629 -182.09286499]
[-3.90874195 -178.16482544]
[7.35640001 -167.80358887]
[12.50516319 -153.39010620]
[10.35439968 -138.23646545]
[1.39833891 -125.82486725]
[8.14576435 -112.42814636]
[14.89319038 -99.03141785]
[21.64061546 -85.63469696]
[28.38804245 -72.23796844]
[35.13546753 -58.84124374]
[49.31589890 -54.43092728]
[56.34959030 -40.94086075]
[51.62749863 -26.09702110]
[58.37492371 -12.70029640]
[65.12235260 0.69642889]
[69.46088409 3.05606246]
[72.26838684 8.25487328]
[71.84344482 15.14243984]
[77.74494934 28.93273544]
[83.64645386 42.72303009]
[95.76709747 51.37977219]
[94.08323669 67.11111450]
[99.98474121 80.90141296]
[113.39569855 86.38708496]
[119.09635925 99.70806885]
[113.80554962 113.19708252]
[119.70705414 126.98738098]
[132.24981689 136.63049316]
[130.14384460 151.37545776]
[136.04534912 165.16575623]
[141.94685364 178.95605469]
[147.84835815 192.74635315]
[153.74986267 206.53665161]
[159.65136719 220.32695007]
[165.55287170 234.11723328]
[171.91687012 240.92106628]
[171.41606140 248.42938232]
[176.88583374 262.39654541]
[182.35560608 276.36370850]
[187.82537842 290.33087158]
[193.29515076 304.29803467]
[198.76492310 318.26516724]
[205.09245300 331.86526489]
[212.25325012 345.04568481]
[219.41404724 358.22607422]
[226.57484436 371.40646362]
[233.73564148 384.58688354]
[246.60990906 395.61816406]
[239.57366943 411.04309082]
[222.80374146 408.55184937]
[220.55523682 391.74768066]
[213.39443970 378.56726074]
[206.23364258 365.38687134]
[199.07284546 352.20648193]
[191.91204834 339.02606201]
[189.06985474 338.15072632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[17 71]
[18 70]
[21 67]
[22 66]
[24 64]
[25 63]
[26 62]
[27 59]
[28 58]
[29 57]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
