%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCUGCGCUGGUAAGCCUGUGUUUUGGUUCGCUAUGGCCCGUACUAAGCAGACUGCUCGCAAGUCGACCGGCGGCAAGGCCCCGAGGAAGCAGCUGGCCACCAAGGCGGCCCGCAAGAGCGCGCCGGCCACGG\
) } def
/len { sequence length } bind def

/coor [
[180.14656067 215.67028809]
[180.06716919 200.09365845]
[169.52154541 189.42643738]
[158.97592163 178.75920105]
[148.30868530 168.21357727]
[137.52124023 157.79095459]
[126.73380280 147.36833191]
[115.94636536 136.94570923]
[105.15892029 126.52307892]
[79.81448364 104.73387909]
[65.87544250 99.19282532]
[51.93640900 93.65177917]
[37.99737167 88.11072540]
[24.05833626 82.56967163]
[10.11929893 77.02861786]
[-4.25085592 83.03997803]
[-18.30808640 77.22199249]
[-23.95043755 63.48520279]
[-37.88947678 57.94415283]
[-53.57173538 60.03635406]
[-62.54061127 48.14482117]
[-76.47964478 42.60377121]
[-90.41868591 37.06271744]
[-104.35771942 31.52166557]
[-115.47032928 39.76007843]
[-129.09730530 41.39596176]
[-141.64402771 36.10611343]
[-149.85443115 25.38005257]
[-151.65582275 12.10248375]
[-165.46414185 6.24327612]
[-179.27246094 0.38406804]
[-193.08078003 -5.47513962]
[-208.80688477 -3.74307084]
[-217.50073242 -15.83712673]
[-231.30905151 -21.69633484]
[-245.11737061 -27.55554199]
[-254.32907104 -28.04080772]
[-259.17266846 -33.71066284]
[-272.84301758 -39.88494492]
[-286.51336670 -46.05922699]
[-301.20761108 -40.24074173]
[-315.67892456 -46.59344101]
[-321.34170532 -61.34838104]
[-314.83636475 -75.75171661]
[-300.02239990 -81.25820160]
[-285.68862915 -74.60094452]
[-280.33908081 -59.72956848]
[-266.66873169 -53.55528641]
[-252.99839783 -47.38100433]
[-239.25816345 -41.36386108]
[-225.44984436 -35.50465393]
[-211.64152527 -29.64544678]
[-196.90307617 -31.79660606]
[-187.22157288 -19.28345871]
[-173.41325378 -13.42425156]
[-159.60493469 -7.56504345]
[-145.79661560 -1.70583558]
[-132.04884338 -10.60267639]
[-115.53981018 -9.57344341]
[-102.74988556 1.17513430]
[-98.81666565 17.58262825]
[-84.87763214 23.12368011]
[-70.93859100 28.66473198]
[-56.99955750 34.20578384]
[-42.31431198 31.71724892]
[-32.34842300 44.00511551]
[-18.40938568 49.54616547]
[-4.87593222 43.43214798]
[9.33916759 48.85299683]
[15.66035080 63.08958435]
[29.59938812 68.63063812]
[43.53842545 74.17168427]
[57.47745895 79.71273804]
[71.41649628 85.25379181]
[85.35553741 90.79484558]
[99.53395081 85.89867401]
[107.08354187 72.93704987]
[114.63314056 59.97542953]
[117.38037872 43.24554825]
[134.21696472 41.25413513]
[140.79138184 56.88146210]
[127.59475708 67.52502441]
[120.04516602 80.48664856]
[112.49557495 93.44826508]
[121.17854309 81.21691132]
[135.23385620 75.97781372]
[149.80438232 79.54146576]
[159.85496521 90.67636108]
[161.91238403 105.53459167]
[155.26565552 118.98155975]
[142.21170044 126.37036896]
[127.26161957 125.14764404]
[115.58154297 115.73563385]
[126.36898804 126.15826416]
[137.15643311 136.58088684]
[147.94387817 147.00350952]
[158.73130798 157.42613220]
[167.15583801 161.18356323]
[169.64315796 168.21357727]
[180.18878174 178.88081360]
[190.73440552 189.54803467]
[206.30909729 189.80603027]
[216.85189819 200.77435303]
[216.50996399 215.62084961]
[227.05558777 226.28808594]
[242.63027954 226.54606628]
[253.17308044 237.51438904]
[252.83114624 252.36088562]
[263.37677002 263.02813721]
[273.92239380 273.69534302]
[284.58963013 284.24096680]
[295.37707520 294.66360474]
[306.16452026 305.08621216]
[321.46527100 309.11077881]
[325.24206543 323.51858521]
[336.02951050 333.94122314]
[346.81695557 344.36386108]
[362.85034180 347.80807495]
[367.62603760 363.49642944]
[356.23123169 375.29010010]
[340.38790894 371.05673218]
[336.39431763 355.15127563]
[325.60687256 344.72866821]
[314.81942749 334.30603027]
[300.29025269 331.02697754]
[295.74188232 315.87365723]
[284.95443726 305.45104980]
[274.16699219 295.02841187]
[267.10894775 292.62185669]
[263.25515747 284.24096680]
[252.70954895 273.57373047]
[242.16392517 262.90652466]
[227.31446838 263.07818604]
[216.46775818 252.41033936]
[216.38835144 236.83370972]
[205.84272766 226.16647339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 101]
[3 100]
[4 99]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[18 67]
[19 66]
[21 64]
[22 63]
[23 62]
[24 61]
[29 57]
[30 56]
[31 55]
[32 54]
[34 52]
[35 51]
[36 50]
[38 49]
[39 48]
[40 47]
[76 84]
[77 83]
[78 82]
[104 136]
[105 135]
[108 132]
[109 131]
[110 130]
[111 128]
[112 127]
[113 126]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
