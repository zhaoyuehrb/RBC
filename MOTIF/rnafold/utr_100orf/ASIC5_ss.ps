%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAUUGGGUUACCCUGAGGACUCUUGCUUAACUGAAAUCACAAAUGGAGCAGACAGAAAAAUCAAAAGUAUAUGCUGAGAACGGACUCUUAGAAAAGAUAAAGCUUUGCCUUUCAAAGAAACCACUGCCAUCUCCCACUGAGC\
) } def
/len { sequence length } bind def

/coor [
[93.67029572 249.00619507]
[78.88320923 245.58470154]
[66.33285522 237.04931641]
[57.71654892 224.55436707]
[54.19958878 209.78970337]
[56.25760651 194.75210571]
[63.61227798 181.47531128]
[75.26894379 171.75489807]
[89.65113068 166.90544128]
[90.28774261 151.91896057]
[90.92436218 136.93247986]
[91.56098175 121.94599152]
[86.97897339 136.22903442]
[74.00208282 143.75234985]
[59.33030319 140.63163757]
[50.53870773 128.47811890]
[52.16641617 113.56669617]
[63.37303925 103.59616089]
[78.37448120 103.71507263]
[63.94198227 99.62815094]
[49.50948334 95.54122162]
[38.47076416 106.12866211]
[23.71216774 109.74538422]
[9.22113705 105.51733398]
[-1.13861752 94.67613983]
[-4.65723085 80.20254517]
[-19.08972931 76.11562347]
[-33.52222824 72.02869415]
[-48.07751846 68.40329742]
[-62.74084854 65.24311066]
[-77.40417480 62.08292007]
[-92.06750488 58.92272949]
[-106.73083496 55.76254272]
[-119.14402771 67.20326996]
[-135.76284790 68.99866486]
[-150.04693604 60.64045715]
[-156.49247742 45.57756424]
[-171.21958923 42.72932053]
[-184.17160034 51.78586197]
[-199.71920776 48.94911957]
[-208.63830566 35.90208054]
[-205.63734436 20.38532257]
[-192.49673462 11.60466385]
[-177.01257324 14.76951122]
[-168.37133789 28.00221825]
[-153.64424133 30.85046196]
[-144.74523926 20.84687614]
[-131.95716858 16.52881050]
[-118.60253143 19.13153076]
[-108.20744324 28.07726479]
[-103.57064819 41.09921265]
[-88.90731812 44.25940323]
[-74.24398804 47.41959000]
[-59.58065796 50.57978058]
[-44.91733170 53.73996735]
[-41.72787094 52.08881378]
[-37.56493759 51.94214630]
[-33.16411972 53.74710083]
[-29.43530273 57.59619522]
[-15.00280285 61.68312073]
[-0.57030374 65.77005005]
[10.01450920 55.29019547]
[24.52025795 51.49029922]
[39.07659149 55.48774338]
[49.74768829 66.30552673]
[53.59641266 81.10872650]
[68.02890778 85.19564819]
[82.46141052 89.28257751]
[71.75508118 78.77664948]
[59.33882141 70.36019897]
[53.10168457 56.71842575]
[54.85895920 41.82171631]
[64.09919739 30.00571060]
[78.13305664 24.70941925]
[92.87603760 27.47431374]
[104.03723145 37.49567795]
[108.36821747 51.85682297]
[104.60822296 66.37841797]
[103.51227570 81.33832550]
[111.64622498 68.73519897]
[119.78017426 56.13206863]
[127.91411591 43.52893829]
[136.04806519 30.92580795]
[144.18202209 18.32267761]
[140.60778809 2.92785859]
[149.03700256 -10.44090843]
[164.46875000 -13.85216999]
[177.74765015 -5.28208542]
[180.99557495 10.18486595]
[172.28556824 23.37241554]
[156.78514099 26.45662498]
[148.65119934 39.05975723]
[140.51724243 51.66288757]
[132.38330078 64.26601410]
[124.24935150 76.86914825]
[116.11540222 89.47227478]
[118.42980194 91.41203308]
[120.50008392 93.80520630]
[122.24321747 96.61885834]
[123.58103943 99.80551910]
[137.82708740 104.50129700]
[152.07312012 109.19707489]
[166.31916809 113.89285278]
[175.81126404 108.40536499]
[186.53414917 109.07373810]
[194.91979980 115.43135834]
[198.31304932 125.15933228]
[212.34696960 130.45550537]
[226.60966492 124.19348145]
[240.76660156 129.76446533]
[246.64859009 143.40036011]
[260.68249512 148.69653320]
[272.78118896 144.09727478]
[284.38775635 148.84921265]
[289.45120239 159.88273621]
[303.36953735 165.47558594]
[317.28787231 171.06843567]
[331.20620728 176.66128540]
[348.15759277 176.95666504]
[352.56634521 193.32734680]
[338.05590820 202.09567261]
[325.61337280 190.57962036]
[311.69503784 184.98677063]
[297.77670288 179.39392090]
[283.85836792 173.80107117]
[266.67874146 177.23501587]
[255.38633728 162.73043823]
[241.35241699 157.43428040]
[227.92808533 163.78428650]
[213.62025452 158.61314392]
[207.05079651 144.48941040]
[193.01689148 139.19325256]
[174.27319336 143.77561951]
[161.62338257 128.13888550]
[147.37734985 123.44311523]
[133.13130188 118.74733734]
[118.88526154 114.05155945]
[106.54747009 122.58261108]
[105.91085052 137.56909180]
[105.27423096 152.55557251]
[104.63761139 167.54206848]
[118.55672455 173.59373474]
[129.34704590 184.26770020]
[135.54927063 198.12037659]
[136.32460022 213.27832031]
[131.56817627 227.69154358]
[121.92327118 239.41076660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 141]
[10 140]
[11 139]
[12 138]
[19 68]
[20 67]
[21 66]
[26 61]
[27 60]
[28 59]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[37 46]
[38 45]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[100 137]
[101 136]
[102 135]
[103 134]
[107 132]
[108 131]
[111 128]
[112 127]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
