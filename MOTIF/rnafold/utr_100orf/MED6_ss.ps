%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUUACGUUUACUUUGCGCCGGAAAGAGAACCUGUAAACGCUCUCGGAAUUAUGGCGGCGGUGGAUAUCCGAGACAAUCUGCUGGGAAUUUCUUGGGUUGACAGCUCUUGGAUCCCUAUUUUGAACAGUGGUAGUGUCCUGGAUUACUUUU\
) } def
/len { sequence length } bind def

/coor [
[30.80570984 218.10903931]
[16.04707909 215.42897034]
[3.04789710 207.94422913]
[-6.67928934 196.52574158]
[-12.00265121 182.50212097]
[-12.30277729 167.50512695]
[-7.54474545 153.27975464]
[1.71781313 141.48124695]
[14.40318203 133.48405457]
[-0.59681749 133.48405457]
[-15.59681797 133.48405457]
[-30.59681702 133.48405457]
[-45.59681702 133.48405457]
[-60.59681702 133.48405457]
[-75.59681702 133.48405457]
[-83.98902893 144.06501770]
[-96.76219940 147.80726624]
[-109.16855621 143.55421448]
[-116.73092651 133.07846069]
[-131.72779846 132.77249146]
[-146.72468567 132.46650696]
[-161.72155762 132.16053772]
[-176.71844482 131.85455322]
[-185.66484070 147.92477417]
[-201.42868042 157.23558044]
[-219.65225220 157.31217957]
[-235.34762573 148.21888733]
[-244.26194763 132.51821899]
[-259.24948120 133.13005066]
[-274.23699951 133.74188232]
[-289.22448730 134.35371399]
[-295.23318481 148.38433838]
[-306.74011230 158.41197205]
[-321.46060181 162.44558716]
[-336.47186279 159.68434143]
[-348.79342651 150.67645264]
[-355.97882080 137.21046448]
[-356.60137939 121.96004486]
[-350.53750610 107.95318604]
[-338.99114990 97.97095490]
[-324.25491333 93.99533081]
[-309.25463867 96.81568146]
[-296.96862793 105.87200928]
[-289.83633423 119.36619568]
[-274.84881592 118.75436401]
[-259.86129761 118.14253998]
[-244.87377930 117.53070831]
[-240.87492371 106.34912872]
[-233.29777527 97.16043854]
[-223.02282715 91.06947327]
[-211.25674438 88.81893921]
[-199.39060974 90.69892883]
[-188.83551025 96.50973511]
[-180.85470581 105.58283997]
[-176.41246033 116.85767365]
[-161.41558838 117.16365814]
[-146.41870117 117.46963501]
[-131.42182922 117.77561188]
[-116.42494202 118.08158875]
[-104.83334351 105.93415833]
[-87.70577240 105.89894867]
[-75.59681702 118.48404694]
[-60.59681702 118.48404694]
[-45.59681702 118.48404694]
[-30.59681702 118.48404694]
[-15.59681797 118.48404694]
[-0.59681749 118.48404694]
[14.40318203 118.48404694]
[29.20386887 116.04690552]
[43.41191483 111.23738861]
[57.61996078 106.42787170]
[71.82800293 101.61835480]
[86.03604889 96.80883789]
[95.40724945 86.43231964]
[109.15443420 88.98311615]
[123.36248016 84.17359924]
[137.57052612 79.36408234]
[151.77856445 74.55456543]
[156.48986816 69.77812195]
[162.07113647 68.35820770]
[166.66529846 69.85152435]
[181.05769348 65.62553406]
[195.45008850 61.39954376]
[209.84248352 57.17355728]
[224.23487854 52.94756699]
[237.94219971 46.85583878]
[250.72380066 39.00531769]
[263.50540161 31.15479851]
[276.28701782 23.30427933]
[279.81732178 17.59922600]
[284.94268799 14.97296524]
[289.75396729 15.40654373]
[302.84512329 8.08390141]
[315.93630981 0.76125795]
[320.33422852 -14.18183613]
[333.71487427 -21.42154884]
[347.93371582 -17.13671684]
[361.02490234 -24.45936012]
[374.11605835 -31.78200340]
[387.20724487 -39.10464478]
[400.29843140 -46.42728806]
[411.17025757 -59.43648911]
[426.68069458 -52.59082413]
[424.39627075 -35.79148865]
[407.62106323 -33.33611298]
[394.52987671 -26.01346970]
[381.43872070 -18.69082642]
[368.34753418 -11.36818314]
[355.25634766 -4.04554033]
[351.46578979 10.31298542]
[338.29379272 17.92567635]
[323.25897217 13.85243416]
[310.16778564 21.17507744]
[297.07659912 28.49772072]
[284.13751221 36.08588028]
[271.35592651 43.93640137]
[258.57431030 51.78691864]
[245.79272461 59.63743973]
[260.77484131 60.36929703]
[274.21374512 67.03235626]
[283.86593628 78.51431274]
[288.12011719 92.89839935]
[286.26611328 107.78337860]
[278.61340332 120.68440247]
[266.43954468 129.44781494]
[251.77679443 132.61065674]
[237.07290649 129.64495850]
[224.78248596 121.04579163]
[216.95727539 108.24868011]
[214.90359497 93.38993073]
[218.96426392 78.95001984]
[228.46086121 67.33996582]
[214.06846619 71.56594849]
[199.67607117 75.79193878]
[185.28367615 80.01792908]
[170.89128113 84.24391937]
[156.58808899 88.76261139]
[142.38003540 93.57212830]
[128.17199707 98.38164520]
[113.96395111 103.19116211]
[104.59275055 113.56768036]
[90.84556580 111.01688385]
[76.63751984 115.82640076]
[62.42947769 120.63591766]
[48.22143173 125.44543457]
[34.01338577 130.25495911]
[48.59710693 133.76425171]
[61.15284348 141.97116089]
[70.21965027 153.92076111]
[74.74253082 168.22264099]
[74.19522858 183.21264648]
[68.64141083 197.14660645]
[58.72731781 208.40319824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[28 47]
[29 46]
[30 45]
[31 44]
[69 146]
[70 145]
[71 144]
[72 143]
[73 142]
[75 140]
[76 139]
[77 138]
[78 137]
[81 136]
[82 135]
[83 134]
[84 133]
[85 132]
[86 118]
[87 117]
[88 116]
[89 115]
[92 114]
[93 113]
[94 112]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
