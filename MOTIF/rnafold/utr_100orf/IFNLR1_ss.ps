%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGACGCCGCGGCAGGAAGGCCAUGGCGGGGCCCGAGCGCUGGGGCCCCCUGCUCCUGUGCCUGCUGCAGGCCGCUCCAGGGAGGCCCCGUCUGGCCCCUCCCCAGAAUGUGACGCUGCUCU\
) } def
/len { sequence length } bind def

/coor [
[120.70360565 226.64596558]
[120.33548737 211.65048218]
[119.96736908 196.65499878]
[119.59925079 181.65951538]
[116.85365295 166.91293335]
[111.80030060 152.78977966]
[106.74695587 138.66661072]
[101.69360352 124.54345703]
[96.64025879 110.42029572]
[95.24440765 111.39871216]
[93.66606140 112.20807648]
[80.61475372 119.60154724]
[67.56344604 126.99501801]
[54.51214600 134.38848877]
[46.31849670 147.92269897]
[31.43095970 147.46382141]
[18.37965584 154.85729980]
[5.32835102 162.25076294]
[1.35522950 177.54750061]
[-12.31274891 185.48234558]
[-27.56661415 181.34771729]
[-35.35651779 167.59661865]
[-31.06085205 152.38731384]
[-17.22815514 144.74324036]
[-2.06512213 149.19946289]
[10.98618317 141.80598450]
[24.03748703 134.41252136]
[31.29762077 121.40714264]
[47.11867142 121.33718872]
[60.16997528 113.94371796]
[73.22128296 106.55023956]
[86.27258301 99.15676880]
[95.20807648 87.10865784]
[98.49459839 72.47312164]
[101.78111267 57.83759308]
[105.06763458 43.20206070]
[108.35414886 28.56652832]
[111.64067078 13.93099594]
[107.11500549 -1.22911394]
[117.45286560 -11.95188808]
[120.73937988 -26.58741951]
[119.19805145 -30.90630722]
[119.18186951 -35.05795288]
[120.43653870 -38.56496811]
[122.57405853 -41.08889771]
[125.13268280 -42.46276855]
[129.83790588 -56.70569229]
[134.54313660 -70.94861603]
[139.24836731 -85.19153595]
[143.95358276 -99.43445587]
[148.65881348 -113.67738342]
[153.36404419 -127.92030334]
[157.89413452 -142.21989441]
[162.24839783 -156.57400513]
[166.60267639 -170.92810059]
[170.95693970 -185.28221130]
[175.31121826 -199.63632202]
[166.16589355 -210.02859497]
[163.39878845 -223.48165894]
[167.63267517 -236.43327332]
[177.65095520 -245.50834656]
[190.74472046 -248.39830017]
[195.44995117 -262.64120483]
[195.17828369 -271.87979126]
[200.44937134 -277.17346191]
[205.50271606 -291.29660034]
[210.55606079 -305.41976929]
[215.60940552 -319.54293823]
[220.66276550 -333.66607666]
[220.30590820 -350.61627197]
[236.49488831 -355.65145874]
[245.81486511 -341.48904419]
[234.78591919 -328.61273193]
[229.73257446 -314.48959351]
[224.67922974 -300.36642456]
[219.62586975 -286.24325562]
[214.57252502 -272.12008667]
[209.69287109 -257.93600464]
[204.98765564 -243.69306946]
[214.98167419 -230.73126221]
[215.32202148 -214.20191956]
[205.67887878 -200.56941223]
[189.66531372 -195.28204346]
[185.31105042 -180.92794800]
[180.95677185 -166.57383728]
[176.60250854 -152.21972656]
[172.24822998 -137.86563110]
[173.32858276 -130.47372437]
[167.60696411 -123.21508026]
[162.90173340 -108.97215271]
[158.19651794 -94.72923279]
[153.49128723 -80.48631287]
[148.78605652 -66.24338531]
[144.08082581 -52.00046539]
[139.37561035 -37.75754166]
[135.37490845 -23.30090141]
[132.08839417 -8.66536999]
[136.84913635 5.44790888]
[126.27619934 17.21751404]
[122.98968506 31.85304642]
[119.70316315 46.48857880]
[116.41664886 61.12411118]
[113.13012695 75.75964355]
[109.84360504 90.39517212]
[110.76342010 105.36694336]
[115.81676483 119.49010468]
[120.87011719 133.61326599]
[125.92346191 147.73643494]
[130.97680664 161.85958862]
[135.30184937 147.49664307]
[144.99360657 136.04808044]
[158.44561768 129.41154480]
[173.42810059 128.68708801]
[187.45765686 133.99479675]
[198.20877075 144.45489502]
[203.89938354 158.33354187]
[203.58624268 173.33027649]
[197.32125854 186.95928955]
[186.14288330 196.96148682]
[171.90402222 201.67893982]
[156.96481323 200.32971191]
[143.80155945 193.13745117]
[134.59472656 181.29139709]
[134.96284485 196.28688049]
[135.33096313 211.28236389]
[135.69908142 226.27784729]
[138.36187744 245.47575378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[11 32]
[12 31]
[13 30]
[14 29]
[16 27]
[17 26]
[18 25]
[33 104]
[34 103]
[35 102]
[36 101]
[37 100]
[38 99]
[40 97]
[41 96]
[46 95]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[62 79]
[63 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
