%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGCCGCAGCCUGCGCGCCUUCUCCAGUCCGCGGUGCCAUGGCCCCCGCCCGUCUGUUCGCGCUGCUGCUGUUCUUCGUAGGCGGAGUCGCCGAGUCGAUCCGAGAGACUGAGGUCAUCGACCCCCAGGACCUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[138.86022949 176.27218628]
[144.98475647 163.48776245]
[135.17332458 152.14157104]
[125.36190033 140.79537964]
[115.55047607 129.44920349]
[93.80461121 132.72138977]
[74.76013184 121.72605896]
[66.72100830 101.25749207]
[51.98920822 98.43363953]
[37.25741196 95.60978699]
[22.52561378 92.78594208]
[7.79381609 89.96208954]
[-3.34993005 96.56081390]
[-15.60292149 93.85128021]
[-22.46998978 83.83152008]
[-37.13521957 80.68016052]
[-51.80044937 77.52880096]
[-66.46567535 74.37744904]
[-81.13090515 71.22608948]
[-86.81255341 78.38236237]
[-94.49879456 83.24217224]
[-103.31487274 85.28652954]
[-112.26858521 84.31494141]
[-120.36196899 80.46471405]
[-126.70252228 74.19234467]
[-130.60159302 66.21962738]
[-131.64913940 57.45063019]
[-145.87310791 52.68841934]
[-160.09707642 47.92620850]
[-173.69337463 57.92280960]
[-190.40338135 57.87617111]
[-203.67776489 48.00156403]
[-208.43081665 32.32767868]
[-222.75735474 27.88354492]
[-237.08389282 23.43941116]
[-251.41043091 18.99527740]
[-269.22540283 23.50427246]
[-280.67654419 10.25175095]
[-295.09854126 6.12790012]
[-310.86764526 10.62977791]
[-322.46115112 -0.96860790]
[-317.95263672 -16.73583221]
[-301.98010254 -20.45192719]
[-290.97467041 -8.29409218]
[-276.55267334 -4.17024183]
[-265.77709961 -9.77726841]
[-253.69129944 -6.39925909]
[-246.96629333 4.66873980]
[-232.63975525 9.11287403]
[-218.31321716 13.55700779]
[-203.98667908 18.00114059]
[-194.03996277 9.02916050]
[-180.84872437 6.14052916]
[-167.85554504 10.19914722]
[-158.50595093 20.24136925]
[-155.33486938 33.70223618]
[-141.11090088 38.46444702]
[-126.88693237 43.22665787]
[-108.97998047 31.91279030]
[-88.23075867 37.39093018]
[-77.97954559 56.56085968]
[-63.31431961 59.71221542]
[-48.64908981 62.86357498]
[-33.98386002 66.01493073]
[-19.31863213 69.16629028]
[-2.97682071 62.86525726]
[10.61766624 75.23029327]
[25.34946442 78.05414581]
[40.08126068 80.87799072]
[54.81306076 83.70184326]
[69.54486084 86.52569580]
[73.89530182 79.32109070]
[79.91295624 73.43717957]
[87.21350098 69.24974823]
[95.33068085 67.02622223]
[103.74607086 66.90861511]
[111.92221069 68.90444183]
[119.33692169 72.88623810]
[130.57310486 62.94902420]
[141.80928040 53.01181030]
[142.19281006 34.13402939]
[155.96102905 21.68104553]
[174.15008545 23.13803864]
[184.93244934 12.71015167]
[195.71479797 2.28226495]
[206.49716187 -8.14562130]
[210.48297119 -24.05301857]
[226.32423401 -28.29409981]
[237.72479248 -16.50600433]
[232.95674133 -0.81531405]
[216.92504883 2.63673377]
[206.14268494 13.06462002]
[195.36033630 23.49250603]
[184.57797241 33.92039490]
[186.87054443 45.19273758]
[183.36555481 56.27519226]
[174.83322144 64.34478760]
[163.33950806 67.28679657]
[151.74650574 64.24799347]
[140.51031494 74.18520355]
[129.27413940 84.12242126]
[133.05886841 95.97704315]
[132.22769165 108.39337921]
[126.89665985 119.63777161]
[136.70808411 130.98396301]
[146.51951599 142.33013916]
[156.33093262 153.67633057]
[171.96292114 149.30166626]
[187.88427734 152.15242004]
[200.93319702 161.61119080]
[208.54064941 175.75343323]
[209.23606873 191.73881531]
[202.93139648 206.38169861]
[212.99316406 217.50646973]
[223.05494690 228.63125610]
[233.11671448 239.75604248]
[243.17848206 250.88081360]
[253.24024963 262.00561523]
[267.86672974 257.64337158]
[282.93606567 260.06781006]
[295.45623779 268.79754639]
[302.94134521 282.09927368]
[303.90521240 297.33190918]
[298.15649414 311.47103882]
[286.83657837 321.70932007]
[272.19302368 326.01391602]
[257.13336182 323.53015137]
[244.64767456 314.75119019]
[237.21499634 301.42007446]
[236.31111145 286.18374634]
[242.11547852 272.06738281]
[232.05369568 260.94259644]
[221.99192810 249.81781006]
[211.93016052 238.69302368]
[201.86839294 227.56825256]
[191.80661011 216.44346619]
[178.66574097 221.02067566]
[164.72973633 220.22621155]
[152.11593628 214.14756775]
[142.75355530 203.67755127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 107]
[3 106]
[4 105]
[5 104]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[27 58]
[28 57]
[29 56]
[33 51]
[34 50]
[35 49]
[36 48]
[38 45]
[39 44]
[78 101]
[79 100]
[80 99]
[83 94]
[84 93]
[85 92]
[86 91]
[113 136]
[114 135]
[115 134]
[116 133]
[117 132]
[118 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
