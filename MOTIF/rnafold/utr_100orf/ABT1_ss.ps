%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:02:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCACUUUACGGCCGUCGUGCCGCUCGUGUCAGUCAACAUGGAGGCAGAGGAAUCGGAGAAGGCCGCAACGGAGCAAGAGCCGCUGGAAGGGACAGAACAGACACUAGAUGCGGAGGAGGAGCAGGAGGAAUCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[59.02485657 119.16034698]
[69.22305298 108.16049194]
[83.54505157 103.69984436]
[68.54598236 103.86695099]
[53.54691315 104.03404999]
[44.92022705 107.28007507]
[38.21270752 104.03404999]
[23.21363831 103.86695099]
[8.21457005 103.69984436]
[-6.78449965 103.53274536]
[-22.56951714 112.94216919]
[-37.32878876 103.51233673]
[-52.32785797 103.67944336]
[-67.32692719 103.84654236]
[-82.31855011 104.34777069]
[-97.29528809 105.18286896]
[-105.76880646 108.80995941]
[-112.61426544 105.86595917]
[-127.60589600 106.36717987]
[-136.15812683 109.80459595]
[-142.93629456 106.70881653]
[-157.93536377 106.87591553]
[-172.93443298 107.04301453]
[-187.93350220 107.21012115]
[-197.53956604 115.89629364]
[-210.08673096 115.68167877]
[-218.81199646 107.23052216]
[-233.81106567 107.06342316]
[-248.81013489 106.89631653]
[-263.80920410 106.72921753]
[-278.80825806 106.56211090]
[-293.80734253 106.39501190]
[-304.92980957 117.62294006]
[-320.73410034 117.61396790]
[-331.84378052 106.37342072]
[-331.66772461 90.57011414]
[-320.31036377 79.57986450]
[-304.50979614 79.92300415]
[-293.64022827 91.39594269]
[-278.64117432 91.56304169]
[-263.64208984 91.73014832]
[-248.64303589 91.89724731]
[-233.64396667 92.06435394]
[-218.64489746 92.23145294]
[-203.88562012 82.80162048]
[-188.10060120 92.21105194]
[-173.10153198 92.04394531]
[-158.10246277 91.87684631]
[-143.10339355 91.70974731]
[-128.10711670 91.37555695]
[-113.11549377 90.87433624]
[-98.13038635 90.20613098]
[-83.15364838 89.37103271]
[-79.31259155 86.41046906]
[-73.55129242 85.88597107]
[-67.49402618 88.84747314]
[-52.49496078 88.68037415]
[-37.49589157 88.51326752]
[-28.77063179 80.06211853]
[-16.22346878 79.84750366]
[-6.61739683 88.53367615]
[8.38167191 88.70077515]
[23.38074112 88.86788177]
[38.37981033 89.03498077]
[53.37981033 89.03498077]
[68.37888336 88.86788177]
[83.37795258 88.70077515]
[94.38995361 78.51569366]
[95.72502899 63.57522964]
[85.39770508 51.61187363]
[86.63786316 35.85631561]
[98.70973969 25.65605354]
[114.45130157 27.06271744]
[124.52336121 39.24176025]
[122.95034790 54.96757507]
[110.66549683 64.91030884]
[109.33042145 79.85077667]
[115.11139679 84.62888336]
[120.62707520 70.67978668]
[135.59788513 71.61502075]
[139.33464050 86.14212036]
[126.67335510 94.18508911]
[132.45433044 98.96319580]
[146.87632751 94.83934021]
[161.29832458 90.71549225]
[175.72030640 86.59164429]
[179.53112793 71.77864838]
[190.17451477 60.93358612]
[204.72056580 56.89889908]
[219.23599243 60.66165924]
[229.84759521 71.11438751]
[244.26959229 66.99053955]
[245.96682739 51.88465500]
[253.32002258 38.58055878]
[265.20785522 29.10703087]
[279.81753540 24.90871620]
[294.92117310 26.62582588]
[308.21557617 33.99651718]
[317.67346191 45.89680862]
[321.85256958 60.51199341]
[320.11557007 75.61335754]
[312.72741699 88.89806366]
[300.81469727 98.34028625]
[286.19403076 102.50014496]
[271.09494019 100.74330139]
[257.81997681 93.33766174]
[248.39343262 81.41252899]
[233.97145081 85.53638458]
[230.48988342 100.01893616]
[220.15791321 110.88660431]
[205.67774963 115.15172577]
[190.90994263 111.57278442]
[179.84416199 101.01363373]
[165.42216492 105.13748169]
[151.00018311 109.26133728]
[136.57818604 113.38518524]
[133.42117310 120.18836975]
[148.05474854 123.48361969]
[162.68473816 120.17257690]
[175.70166016 127.62643433]
[180.25074768 141.91998291]
[173.93647766 155.52622986]
[160.08393860 161.28010559]
[145.98788452 156.15161133]
[139.07141113 142.84217834]
[127.10715485 133.79473877]
[123.95014191 140.59791565]
[130.11219788 154.27377319]
[136.27424622 167.94963074]
[149.89309692 177.08522034]
[148.52105713 193.42686462]
[133.56956482 200.16369629]
[120.41943359 190.36543274]
[122.59838867 174.11167908]
[116.43633270 160.43582153]
[110.27428436 146.75996399]
[99.92248535 157.61538696]
[85.53979492 161.87428284]
[70.94640350 158.40541077]
[60.01849365 148.13015747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[7 64]
[8 63]
[9 62]
[10 61]
[12 58]
[13 57]
[14 56]
[15 53]
[16 52]
[18 51]
[19 50]
[21 49]
[22 48]
[23 47]
[24 46]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[68 77]
[69 76]
[83 116]
[84 115]
[85 114]
[86 113]
[91 108]
[92 107]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
