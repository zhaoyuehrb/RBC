%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGAAAUGGAUACUGACACAUUGUGCCUCAGCCUUUCCCCACCUGCCCGGCUGCUGCUGCUGCUGCUUUUUGUUGCUGUUCUUGGUGUCUUCCGUCC\
) } def
/len { sequence length } bind def

/coor [
[78.91148376 162.73281860]
[74.28218842 148.46504211]
[74.95828247 133.48028564]
[80.85363770 119.68735504]
[91.21536255 108.84463501]
[76.36206818 110.93737030]
[61.50876999 113.03009796]
[46.65547180 115.12282562]
[31.80217171 117.21556091]
[23.57170868 121.58042908]
[16.45517540 119.13494110]
[1.54397786 120.76471710]
[-2.94440842 124.08160400]
[-7.77417946 125.11054993]
[-11.96874046 124.13059235]
[-14.82351112 121.78425598]
[-29.82169724 122.01753235]
[-44.81988144 122.25080872]
[-59.81806946 122.48408508]
[-74.80174255 123.18369293]
[-89.75641632 124.34894562]
[-104.71109009 125.51420593]
[-120.03265381 132.77272034]
[-131.24893188 120.05928040]
[-122.13731384 105.76190948]
[-105.87634277 110.55953217]
[-90.92167664 109.39427948]
[-75.96700287 108.22901917]
[-72.13880157 105.10882568]
[-66.26373291 104.48167419]
[-60.05134583 107.48590088]
[-45.05316162 107.25262451]
[-30.05497360 107.01934814]
[-15.05678844 106.78606415]
[-0.08580434 105.85352325]
[14.82539272 104.22373962]
[29.70944214 102.36225891]
[44.56274033 100.26953125]
[59.41603851 98.17679596]
[74.26934052 96.08406830]
[89.12263489 93.99134064]
[95.61242676 88.42584229]
[104.12810516 88.38249969]
[116.71240234 80.21943665]
[129.29669189 72.05637360]
[141.88098145 63.89331055]
[140.83113098 47.47670746]
[148.11520386 32.83124924]
[161.68453979 23.86590576]
[177.82720947 22.92102623]
[192.18325806 30.15810013]
[204.50758362 21.60761642]
[216.83192444 13.05713272]
[229.15626526 4.50664854]
[236.08427429 -9.71703339]
[250.95179749 -10.61485004]
[263.27612305 -19.16533470]
[261.71624756 -35.54134750]
[268.54132080 -50.40625381]
[281.82525635 -59.78926849]
[297.93075562 -61.23572540]
[312.50491333 -54.44862366]
[324.55737305 -63.37825394]
[330.58752441 -78.62847900]
[346.84710693 -80.76333618]
[356.60968018 -67.58666992]
[349.83230591 -52.65350342]
[333.48699951 -51.32580185]
[321.43453979 -42.39616776]
[323.87951660 -28.86393547]
[320.20117188 -15.54467106]
[311.07058716 -5.08484221]
[298.24798584 0.41138148]
[284.24368286 -0.19471738]
[271.82662964 -6.84099960]
[259.50228882 1.70948422]
[253.45578003 15.32157803]
[237.70674133 16.83098412]
[225.38240051 25.38146782]
[213.05807495 33.93194962]
[200.73373413 42.48243332]
[202.75668335 56.08415985]
[198.66589355 69.28258514]
[189.21441650 79.45339203]
[176.22709656 84.54817963]
[162.24842834 83.50684357]
[150.04405212 76.47760773]
[137.45976257 84.64067078]
[124.87546539 92.80372620]
[112.29116821 100.96678925]
[127.22677612 102.35520935]
[140.72352600 108.90025330]
[151.06217957 119.76821136]
[156.92575073 133.57467651]
[157.56732178 148.56094360]
[152.90518188 162.81803894]
[143.53318787 174.52981567]
[130.64518738 182.20442200]
[115.88288879 184.86422729]
[101.12676239 182.17042542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[11 36]
[12 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 28]
[21 27]
[22 26]
[43 90]
[44 89]
[45 88]
[46 87]
[51 81]
[52 80]
[53 79]
[54 78]
[56 76]
[57 75]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
