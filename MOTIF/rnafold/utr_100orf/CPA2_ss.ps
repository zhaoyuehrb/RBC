%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGACUCCAGGAAAACCCAUGGCCAUGAGGUUGAUCCUGUUUUUUGGUGCCCUUUUUGGGCAUAUCUACUGUCUAGAAACAUUUGUGGGAGACCAAGUUCUUGAGAUUGUACCAAGCA\
) } def
/len { sequence length } bind def

/coor [
[198.06472778 158.38392639]
[184.69963074 151.57406616]
[171.33453369 144.76420593]
[157.96943665 137.95434570]
[144.60433960 131.14450073]
[131.23924255 124.33463287]
[109.48640442 138.44570923]
[83.66626740 136.07318115]
[64.84922791 118.23425293]
[50.46693039 122.49448395]
[36.08463287 126.75471497]
[21.70233727 131.01493835]
[7.32004070 135.27517700]
[-4.96448326 148.91569519]
[-21.84226227 144.30522156]
[-36.10810852 148.94047546]
[-50.37395859 153.57572937]
[-64.63980865 158.21098328]
[-78.84375763 163.03257751]
[-92.98338318 168.03967285]
[-107.12300110 173.04678345]
[-117.35615540 185.86140442]
[-133.52781677 183.13935852]
[-139.00195312 167.68083191]
[-128.14726257 155.38824463]
[-112.13010406 158.90715027]
[-97.99048615 153.90005493]
[-83.85086060 148.89294434]
[-78.53059387 143.62937927]
[-69.27506256 143.94512939]
[-55.00921249 139.30987549]
[-40.74336624 134.67462158]
[-26.47751808 130.03936768]
[-20.65228844 119.34983063]
[-8.70697021 115.41663361]
[3.05981064 120.89287567]
[17.44210625 116.63264465]
[31.82440186 112.37241364]
[46.20669937 108.11218262]
[60.58899307 103.85195160]
[60.47509384 97.58199310]
[61.35243988 91.37266541]
[63.19902420 85.37970734]
[65.96853638 79.75341034]
[69.59152985 74.63487244]
[73.97712708 70.15247345]
[79.01535797 66.41860962]
[84.57985687 63.52693939]
[81.46118164 48.85472488]
[78.34250641 34.18251038]
[75.22383118 19.51029778]
[72.10515594 4.83808422]
[68.98648071 -9.83413029]
[56.36891174 -19.74253845]
[56.39278412 -35.78557205]
[69.03977966 -45.65639114]
[84.60820770 -41.78294754]
[91.15530396 -27.13661385]
[83.65869141 -12.95280552]
[86.77736664 1.71940863]
[89.89604187 16.39162254]
[93.01471710 31.06383705]
[96.13339233 45.73604965]
[99.25206757 60.40826416]
[108.44474030 61.31212997]
[117.17790985 64.32109070]
[124.97638702 69.27143097]
[131.41583252 75.89377594]
[136.14588928 83.82780457]
[138.90914917 92.64179993]
[139.55526733 101.85617065]
[138.04910278 110.96953583]
[151.41419983 117.77939606]
[164.77929688 124.58925629]
[178.14439392 131.39910889]
[191.50949097 138.20896912]
[204.87458801 145.01882935]
[225.84851074 135.58731079]
[246.89703369 144.19493103]
[255.06588745 165.14263916]
[269.44818115 169.40287781]
[283.83047485 173.66310120]
[299.25985718 170.16389465]
[309.26550293 181.19731140]
[323.64779663 185.45753479]
[337.41668701 178.17359924]
[351.94168091 182.69895935]
[358.80096436 195.87037659]
[373.18325806 200.13059998]
[387.56555176 204.39083862]
[401.94784546 208.65106201]
[416.33013916 212.91128540]
[430.09786987 205.15083313]
[445.29797363 209.47901917]
[452.91244507 223.32804871]
[448.42376709 238.48150635]
[434.49502563 245.94914246]
[419.38986206 241.30050659]
[412.06991577 227.29359436]
[397.68762207 223.03335571]
[383.30532837 218.77313232]
[368.92303467 214.51289368]
[354.54074097 210.25267029]
[341.61441040 217.56332397]
[326.96801758 213.44772339]
[319.38757324 199.83982849]
[305.00527954 195.57960510]
[290.60461426 199.38352966]
[279.57025146 188.04539490]
[265.18795776 183.78517151]
[250.80564880 179.52493286]
[245.80378723 185.66642761]
[239.27766418 190.20272827]
[231.72660828 192.76847839]
[223.73344421 193.14976501]
[215.91949463 191.30189514]
[208.89636230 187.35406494]
[203.21794128 181.60040283]
[199.33686829 174.47811890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[15 33]
[16 32]
[17 31]
[18 30]
[19 28]
[20 27]
[21 26]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[80 111]
[81 110]
[82 109]
[84 107]
[85 106]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
