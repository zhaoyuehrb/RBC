%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGCGCCCUUGCCGCUGCCACCGCACCCCGCCAUGGAGCGGCCGUCGCUGCGCGCCCUGCUCCUCGGCGCCGCUGGGCUGCUGCUCCUGCUCCUGCCCCUCUCCUCUUCCUCCUCUUCGGACACCUGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[86.35472870 257.28152466]
[82.52526855 271.99218750]
[73.35379791 284.11456299]
[60.23889542 291.80014038]
[45.18048477 293.87686157]
[30.47486877 290.02804565]
[18.36454582 280.84063721]
[10.69625092 267.71563721]
[8.63934422 252.65451050]
[12.50748825 237.95396423]
[21.71082115 225.85572815]
[34.84589767 218.20471191]
[49.90972137 216.16761780]
[53.70764923 201.65638733]
[57.50557327 187.14515686]
[61.30350113 172.63394165]
[65.10143280 158.12271118]
[53.17461777 149.02593994]
[40.18423843 156.52593994]
[27.19385529 164.02593994]
[19.46734047 178.49082947]
[3.07042503 178.76141357]
[-5.12914848 164.55932617]
[3.30363750 150.49447632]
[19.69385529 151.03555298]
[32.68423843 143.53555298]
[45.67461777 136.03555298]
[38.02080536 117.09106445]
[36.67722702 96.98659515]
[41.60220337 77.74031067]
[52.13352585 61.22948837]
[41.71364975 50.43939209]
[31.29377556 39.64929581]
[20.87389946 28.85919952]
[5.30329609 28.41869164]
[-5.11023045 17.32756424]
[-4.59431791 2.48608708]
[-15.01419353 -8.30400944]
[-25.43406868 -19.09410667]
[-35.85394287 -29.88420296]
[-46.27381897 -40.67430115]
[-56.94194794 -51.21901703]
[-67.85255432 -61.51264191]
[-78.76316071 -71.80626678]
[-89.79279327 -81.97224426]
[-100.93996429 -92.00920868]
[-112.08713531 -102.04616547]
[-128.23168945 -104.92462158]
[-133.55595398 -120.43540192]
[-122.58277893 -132.62234497]
[-106.60043335 -128.94856262]
[-102.05017853 -113.19333649]
[-90.90300751 -103.15637970]
[-79.75583649 -93.11941528]
[-72.61481476 -90.96173859]
[-68.46953583 -82.71687317]
[-57.55892944 -72.42324829]
[-46.64832306 -62.12961960]
[-41.84687424 -61.38047409]
[-37.49472427 -57.54826355]
[-35.48372269 -51.09417725]
[-25.06384850 -40.30408096]
[-14.64397240 -29.51398277]
[-4.22409630 -18.72388458]
[6.19577932 -7.93378830]
[21.04621887 -7.93142653]
[31.76716423 2.86283088]
[31.66399765 18.43932343]
[42.08387375 29.22941971]
[52.50374985 40.01951599]
[62.92362213 50.80961609]
[76.25759888 43.16119003]
[91.07013702 39.05240631]
[106.43877411 38.73913193]
[121.40644073 42.24087906]
[135.04103088 49.33957672]
[146.49342346 59.59315491]
[158.92898560 51.20526123]
[171.36454773 42.81736755]
[183.80010986 34.42947388]
[182.83561707 19.16457939]
[189.59666443 5.55630589]
[202.17779541 -2.78523326]
[217.14486694 -3.70326543]
[230.47212219 2.94881034]
[242.90768433 -5.43908310]
[249.60635376 -20.40771103]
[265.94445801 -21.82142067]
[275.11474609 -8.22591209]
[267.68362427 6.39292336]
[251.29557800 6.99648046]
[238.86001587 15.38437366]
[240.03523254 30.23309135]
[233.57728577 43.76641846]
[221.13017273 52.30665207]
[205.98007202 53.47763062]
[192.18800354 46.86503601]
[179.75244141 55.25292969]
[167.31687927 63.64082336]
[154.88131714 72.02871704]
[157.53062439 77.98683929]
[159.53526306 84.19162750]
[160.87277222 90.57356262]
[161.52816772 97.06112671]
[161.49409485 103.58162689]
[160.77095032 110.06198120]
[159.36682129 116.42959595]
[157.29747009 122.61309814]
[154.58604431 128.54321289]
[151.26296997 134.15348816]
[162.64067078 143.92834473]
[174.01837158 153.70320129]
[189.08555603 149.99382019]
[203.44274902 155.88029480]
[211.56932068 169.09916687]
[210.34042358 184.56750488]
[200.22860718 196.33741760]
[185.12207031 199.88313293]
[170.82957458 193.84124756]
[162.84689331 180.53500366]
[164.24351501 165.08090210]
[152.86581421 155.30604553]
[141.48809814 145.53118896]
[133.18542480 152.60415649]
[123.67792511 158.16062927]
[113.24306488 161.99577332]
[102.19300842 163.95555115]
[90.86531830 163.94267273]
[79.61265564 161.92063904]
[75.81472778 176.43186951]
[72.01679993 190.94308472]
[68.21887207 205.45431519]
[64.42095184 219.96554565]
[76.55540466 229.12106323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 27]
[19 26]
[20 25]
[31 71]
[32 70]
[33 69]
[34 68]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[42 58]
[43 57]
[44 56]
[45 54]
[46 53]
[47 52]
[77 100]
[78 99]
[79 98]
[80 97]
[85 92]
[86 91]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
