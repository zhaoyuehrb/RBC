%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAACCAUACAACAGUAGCAAACUUUAUUCUUCUUGGACUGACAGAUGAUCCACAAUUACAGGUGAUUAUUUUUCUUCUCCUUUUUUUCACCUACA\
) } def
/len { sequence length } bind def

/coor [
[119.70383453 227.46246338]
[130.78778076 216.60308838]
[128.46430969 201.78413391]
[126.14083099 186.96517944]
[123.81735992 172.14622498]
[121.49388885 157.32727051]
[119.17041779 142.50831604]
[116.84693909 127.68935394]
[110.04689789 124.52558899]
[97.76723480 133.14010620]
[96.44680786 118.19806671]
[89.64676666 115.03430176]
[76.81468964 122.80204773]
[63.98261261 130.56979370]
[56.55768967 145.19177246]
[40.16991043 145.80229187]
[31.67761803 131.77328491]
[39.81695557 117.53659821]
[56.21487045 117.73771667]
[69.04694366 109.96997070]
[81.87902069 102.20222473]
[67.54975891 106.63758087]
[52.55004883 106.54448700]
[38.27694702 101.93162537]
[26.05983162 93.22863007]
[17.03660202 81.24608612]
[12.04766750 67.10004425]
[11.55769634 52.10804749]
[15.61232185 37.66644287]
[23.83390236 25.12030220]
[35.45668411 15.63816452]
[49.39813614 10.10318851]
[64.35975647 9.03089523]
[78.94804382 12.52115726]
[91.80425262 20.24889565]
[101.73096466 31.49435425]
[107.80361938 45.21014404]
[109.45661163 60.11878586]
[106.53598785 74.83170319]
[99.31330109 87.97915649]
[109.49959564 76.96827698]
[119.68589020 65.95740509]
[118.64144897 48.58063126]
[130.19517517 36.01123047]
[146.92768860 35.60780716]
[156.76661682 24.28546524]
[159.97825623 8.79366112]
[174.16671753 4.26194096]
[184.00564575 -7.06040287]
[193.84457397 -18.38274765]
[203.68351746 -29.70509148]
[213.52244568 -41.02743530]
[223.36137390 -52.34978104]
[233.20030212 -63.67212296]
[243.03923035 -74.99446869]
[246.38871765 -83.68776703]
[253.36451721 -86.50979614]
[263.55081177 -97.52066803]
[260.39752197 -112.71397400]
[266.80752563 -126.84519196]
[280.31607056 -134.48059082]
[295.72879028 -132.68420410]
[307.11923218 -122.14676666]
[310.10751343 -106.92015076]
[303.54458618 -92.85929871]
[289.95404053 -85.37089539]
[274.56167603 -87.33438110]
[264.37539673 -76.32350159]
[254.36157227 -65.15554047]
[244.52264404 -53.83319473]
[234.68371582 -42.51084900]
[224.84478760 -31.18850708]
[215.00585938 -19.86616135]
[205.16693115 -8.54381847]
[195.32800293 2.77852607]
[185.48905945 14.10087013]
[182.98117065 28.78282356]
[168.08895874 34.12439346]
[158.25003052 45.44673920]
[160.93791199 58.15332031]
[155.68743896 70.24610901]
[144.23344421 77.16034698]
[130.69676208 76.14369202]
[120.51047516 87.15457153]
[110.32418060 98.16545105]
[120.39561462 102.20899963]
[128.23130798 111.65855408]
[131.66589355 125.36588287]
[133.98936462 140.18482971]
[136.31285095 155.00379944]
[138.63632202 169.82275391]
[140.95979309 184.64170837]
[143.28326416 199.46066284]
[145.60673523 214.27961731]
[159.48237610 221.22555542]
[166.59538269 235.01631165]
[164.21066284 250.34904480]
[153.24517822 261.32800293]
[137.91539001 263.73156738]
[124.11590576 256.63552856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[12 21]
[13 20]
[14 19]
[40 85]
[41 84]
[42 83]
[45 79]
[46 78]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
