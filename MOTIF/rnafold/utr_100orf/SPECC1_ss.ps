%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGCAGAAAAGGUUGGAUAAAAGAUAAGGACAGACCCACGAAGUCAAGCAUGCGGAGUGCAGCCAAGCCCUGGAACCCAGCCAUCAGAGCAGGGGGCCACGGCCCAGACCGGGUGCGGCCUCUGCCUGCAGCCUCUUCCGGCAUGAAGA\
) } def
/len { sequence length } bind def

/coor [
[86.18537140 326.61520386]
[81.89817810 311.96655273]
[84.39983368 296.90985107]
[93.19361877 284.43460083]
[106.53353882 277.01776123]
[105.60405731 262.04660034]
[95.12294769 248.00491333]
[103.37708282 231.57704163]
[102.13838959 216.62828064]
[100.89970398 201.67950439]
[92.13781738 189.63464355]
[98.70908356 175.24267578]
[97.47039032 160.29389954]
[96.23169708 145.34513855]
[94.99301147 130.39636230]
[93.75431824 115.44760132]
[87.67455292 129.16023254]
[81.59478760 142.87287903]
[82.27943420 157.85723877]
[77.84064484 172.18544006]
[68.80474854 184.15843201]
[56.24322128 192.35647583]
[41.64559555 195.80747986]
[26.74284554 194.10218811]
[13.30212021 187.44284058]
[2.91720939 176.61909485]
[-3.18045449 162.91439819]
[-4.26781654 147.95385742]
[-0.21593888 133.51148987]
[8.49471188 121.29982758]
[20.83123398 112.76693726]
[35.33077621 108.92463684]
[50.27228546 110.22808838]
[64.22445679 104.72018433]
[78.17662811 99.21228790]
[63.29181671 97.35689545]
[48.40700531 95.50151062]
[37.07474518 106.27712250]
[21.46417618 107.19588470]
[8.94613171 97.82398224]
[5.43124819 82.58654022]
[12.57914734 68.67821503]
[27.01481056 62.66609192]
[41.92215729 67.38890839]
[50.26239777 80.61669922]
[65.14720154 82.47209167]
[80.03201294 84.32747650]
[88.83196259 83.59996033]
[95.90641785 86.29945374]
[100.15018463 91.24473572]
[108.61217499 78.85948181]
[117.07417297 66.47422028]
[118.47074127 50.71477509]
[132.03916931 44.57093430]
[140.50117493 32.18567657]
[148.96316528 19.80041695]
[157.42515564 7.41515827]
[165.88716125 -4.97010088]
[174.34915161 -17.35536003]
[182.55337524 -29.91285706]
[190.49632263 -42.63722992]
[198.43927002 -55.36159897]
[206.38220215 -68.08596802]
[207.12632751 -83.88967133]
[220.42927551 -90.58897400]
[228.37222290 -103.31334686]
[221.77023315 -124.04295349]
[232.35887146 -142.72680664]
[252.99038696 -147.58534241]
[259.57833862 -161.06120300]
[266.16629028 -174.53706360]
[265.27615356 -190.33322144]
[277.81704712 -198.36907959]
[284.40499878 -211.84495544]
[290.99295044 -225.32081604]
[286.09500122 -240.10755920]
[292.96810913 -253.68016052]
[307.09518433 -258.25848389]
[313.68313599 -271.73434448]
[320.27108765 -285.21020508]
[319.38095093 -301.00634766]
[331.92184448 -309.04220581]
[338.50979614 -322.51806641]
[331.99761963 -336.73516846]
[336.19738770 -351.79821777]
[349.12609863 -360.59497070]
[364.67919922 -358.97180176]
[375.51300049 -347.69519043]
[376.51214600 -332.08953857]
[367.20480347 -319.52340698]
[351.98565674 -315.93014526]
[345.39770508 -302.45425415]
[346.75906372 -287.62200928]
[333.74694824 -278.62225342]
[327.15899658 -265.14639282]
[320.57104492 -251.67051697]
[325.63516235 -237.71020508]
[319.14602661 -223.94992065]
[304.46881104 -218.73286438]
[297.88085938 -205.25700378]
[291.29290771 -191.78114319]
[292.65426636 -176.94888306]
[279.64215088 -167.94912720]
[273.05419922 -154.47325134]
[266.46624756 -140.99739075]
[271.94985962 -134.13540649]
[274.88879395 -125.81142426]
[274.92959595 -116.94028473]
[272.03903198 -108.50701141]
[266.51098633 -101.45742035]
[258.93676758 -96.59207916]
[250.14199829 -94.47541809]
[241.09658813 -95.37039948]
[233.15365601 -82.64602661]
[232.97766113 -67.75246429]
[219.10658264 -60.14302444]
[211.16363525 -47.41865540]
[203.22068787 -34.69428253]
[195.27774048 -21.96991158]
[195.48060608 -17.14071655]
[192.60836792 -12.14475060]
[186.73440552 -8.89336586]
[178.27241516 3.49189353]
[169.81042480 15.87715244]
[161.34841919 28.26241302]
[152.88642883 40.64767075]
[144.42443848 53.03293228]
[143.63313293 67.90650177]
[129.45942688 74.93621826]
[120.99743652 87.32147217]
[112.53543854 99.70673370]
[108.70308685 114.20890808]
[109.94178009 129.15766907]
[111.18046570 144.10644531]
[112.41915894 159.05520630]
[113.65785217 174.00398254]
[122.50833130 187.11807251]
[115.84846497 200.44081116]
[117.08715820 215.38958740]
[118.32585144 230.33834839]
[127.66972351 239.28936768]
[128.36146545 251.80801392]
[120.57523346 261.11709595]
[121.50471497 276.08828735]
[135.65959167 281.79809570]
[145.92895508 293.08984375]
[150.27380371 307.72146606]
[147.83145142 322.78793335]
[139.08686829 335.29769897]
[125.77625275 342.76699829]
[110.54246521 343.71279907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 144]
[6 143]
[8 140]
[9 139]
[10 138]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[35 47]
[36 46]
[37 45]
[50 131]
[51 130]
[52 129]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
[60 119]
[61 118]
[62 117]
[63 116]
[65 114]
[66 113]
[69 105]
[70 104]
[71 103]
[73 101]
[74 100]
[75 99]
[78 96]
[79 95]
[80 94]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
