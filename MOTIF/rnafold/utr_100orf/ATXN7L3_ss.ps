%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACAACACCCCCACCCCCGUGUGUGCAGCCGUGUUGCCGCCCGCUGUGCUAUGAGCAGUCAGAGCGCCGUCUCCACAAGAGUUUACAAAUGAAAAUGGAGGAAAUGUCUUUGUCUGGCCUGGAUAACAGCAAACUAGAGGCCAUCGCUCAGGAGAUAUACGCGGACCUGGUCGAGGAUUCUUGUUUGG\
) } def
/len { sequence length } bind def

/coor [
[157.80244446 180.90080261]
[163.87393188 194.61709595]
[166.14398193 209.44433594]
[164.45431519 224.34886169]
[158.92272949 238.29167175]
[149.93486023 250.30075073]
[138.11724854 259.53894043]
[124.29374695 265.36221313]
[109.42800903 267.36465454]
[94.55635071 265.40661621]
[80.71551514 259.62463379]
[68.87038422 250.42176819]
[59.84669113 238.43957520]
[54.27350616 224.51335144]
[52.53934860 209.61393738]
[54.76510620 194.77998352]
[60.79561996 181.04562378]
[70.21048737 169.36828613]
[82.35337830 160.56202698]
[96.37677765 155.24098206]
[106.70961761 144.36750793]
[92.42867279 148.95605469]
[78.14773560 153.54460144]
[63.86679459 158.13314819]
[56.63977432 163.74645996]
[49.31451797 162.67787170]
[34.96041107 167.03215027]
[20.60630608 171.38641357]
[6.25220156 175.74067688]
[-8.10190296 180.09495544]
[-22.45600891 184.44921875]
[-36.81011200 188.80349731]
[-49.07250977 202.53088379]
[-65.99281311 197.90164185]
[-80.27375793 202.49018860]
[-94.55469513 207.07872009]
[-105.16077423 219.58644104]
[-121.24526215 216.38935852]
[-126.26181030 200.77633667]
[-115.04982758 188.80873108]
[-99.14324188 192.79779053]
[-84.86230469 188.20924377]
[-70.58135986 183.62069702]
[-64.77001953 173.00001526]
[-52.89707184 169.06622314]
[-41.16438293 174.44938660]
[-26.81027794 170.09512329]
[-12.45617390 165.74084473]
[1.89793158 161.38658142]
[16.25203705 157.03230286]
[30.60614204 152.67803955]
[44.96024704 148.32376099]
[59.27824783 143.85220337]
[73.55918884 139.26367188]
[87.84012604 134.67512512]
[102.12107086 130.08657837]
[79.38784790 119.25810242]
[73.99431610 96.38085938]
[87.44644928 79.18930054]
[84.04030609 64.58114624]
[80.63416290 49.97299194]
[69.96528625 38.29027939]
[74.61040497 24.13852310]
[71.20426178 9.53036880]
[67.79811859 -5.07778597]
[64.39197540 -19.68593979]
[60.98583221 -34.29409409]
[57.46028900 -48.87389374]
[53.81558609 -63.42436218]
[39.57590103 -69.30123138]
[31.62010956 -82.28424835]
[32.82050705 -97.28501892]
[42.50782776 -108.56747437]
[38.86312485 -123.11794281]
[35.21842194 -137.66841125]
[31.57371902 -152.21887207]
[27.92901611 -166.76934814]
[24.28431320 -181.31980896]
[9.39100552 -184.47430420]
[-2.60689211 -193.74453735]
[-9.36241627 -207.24946594]
[-9.58355236 -222.28649902]
[-3.27999473 -235.87231445]
[8.24939251 -245.33480835]
[4.60469007 -259.88528442]
[0.95998746 -274.43572998]
[-10.82728291 -285.83715820]
[-6.58505535 -301.67810059]
[9.32262993 -305.66278076]
[20.53131104 -293.69207764]
[15.51045609 -278.08044434]
[19.15515900 -263.52996826]
[22.79986191 -248.97950745]
[37.42845917 -246.06925964]
[49.39201355 -237.05909729]
[56.28539276 -223.69338989]
[56.69373322 -208.59857178]
[50.48249435 -194.76718140]
[38.83478165 -184.96452332]
[42.47948456 -170.41404724]
[46.12418747 -155.86358643]
[49.76889038 -141.31311035]
[53.41359329 -126.76264191]
[57.05829620 -112.21217346]
[70.92026520 -106.82850647]
[79.05023193 -94.16487885]
[78.15399933 -78.96453857]
[68.36605835 -67.06906891]
[72.01075745 -52.51859665]
[76.69325256 -46.78488159]
[75.59398651 -37.70023727]
[79.00012970 -23.09208488]
[82.40627289 -8.48392963]
[85.81241608 6.12422466]
[89.21855927 20.73237991]
[99.64379883 31.37022018]
[95.24231720 46.56684875]
[98.64846039 61.17500305]
[102.05460358 75.78315735]
[116.04930115 79.21987152]
[126.59259796 90.58889008]
[129.34719849 106.96009827]
[142.08523560 99.03907776]
[154.82325745 91.11806488]
[159.85191345 75.88348389]
[174.94747925 70.45179749]
[188.52995300 78.98971558]
[190.18000793 94.94769287]
[178.63186646 106.08412170]
[162.74427795 103.85609436]
[150.00624084 111.77711487]
[137.26821899 119.69812775]
[137.14549255 134.69763184]
[149.75222778 142.82600403]
[162.35894775 150.95437622]
[174.96568298 159.08274841]
[187.57240295 167.21112061]
[203.36351013 168.18652344]
[209.86735535 181.58612061]
[222.47407532 189.71449280]
[235.08079529 197.84286499]
[250.34127808 194.71951294]
[263.01049805 203.14242554]
[265.89410400 217.71020508]
[278.50082397 225.83857727]
[287.42477417 227.86408997]
[291.24581909 234.20449829]
[303.71786499 242.53805542]
[316.18991089 250.87161255]
[331.96295166 252.10523987]
[338.24667358 265.60946655]
[350.71871948 273.94302368]
[363.19076538 282.27658081]
[375.66281128 290.61013794]
[388.13485718 298.94369507]
[400.99179077 290.78164673]
[416.05795288 288.56109619]
[430.72299194 292.66668701]
[442.44613647 302.38717651]
[449.19628906 316.03839111]
[449.80389404 331.25518799]
[444.16372681 345.40115356]
[433.25296021 356.02542114]
[418.96194458 361.28726196]
[403.76672363 360.27505493]
[390.29989624 353.16415405]
[380.89474487 341.18655396]
[377.18069458 326.41748047]
[379.80130005 311.41571045]
[367.32925415 303.08218384]
[354.85720825 294.74862671]
[342.38516235 286.41506958]
[329.91311646 278.08151245]
[315.03216553 277.44393921]
[307.85635376 263.34365845]
[295.38430786 255.01010132]
[282.91226196 246.67654419]
[270.37246704 238.44531250]
[257.76574707 230.31694031]
[243.30638123 233.70259094]
[230.40557861 225.63885498]
[226.95242310 210.44960022]
[214.34570312 202.32122803]
[201.73898315 194.19284058]
[186.84957886 193.79884338]
[179.44403076 179.81785583]
[166.83729553 171.68946838]
[154.23057556 163.56109619]
[141.62385559 155.43272400]
[129.01712036 147.30435181]
[136.18360901 160.48165894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 56]
[22 55]
[23 54]
[24 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[34 43]
[35 42]
[36 41]
[59 119]
[60 118]
[61 117]
[63 115]
[64 114]
[65 113]
[66 112]
[67 111]
[68 109]
[69 108]
[73 104]
[74 103]
[75 102]
[76 101]
[77 100]
[78 99]
[84 93]
[85 92]
[86 91]
[122 132]
[123 131]
[124 130]
[133 190]
[134 189]
[135 188]
[136 187]
[137 186]
[139 184]
[140 183]
[141 182]
[144 179]
[145 178]
[147 177]
[148 176]
[149 175]
[151 173]
[152 172]
[153 171]
[154 170]
[155 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
