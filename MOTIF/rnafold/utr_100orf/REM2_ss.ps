%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAGGGAGAGGGUGCUGCGAGCUGCUGGGCUGCACACGCACACGCACACGCACACGCACACUGAUGCACACGGACCUGGACACAGACAUGGACAUGGACACAGAAACCACAGCACUCUGCCCCUCUGGCAGCCGCCGGGCCUCCCCUCCAGGGACGCCCACAC\
) } def
/len { sequence length } bind def

/coor [
[282.85604858 298.21127319]
[283.24768066 290.12051392]
[285.75018311 282.62734985]
[290.07501221 276.25680542]
[280.85003662 264.42889404]
[271.62506104 252.60095215]
[262.40008545 240.77302551]
[253.17509460 228.94511414]
[238.40756226 227.37803650]
[228.88363647 215.51425171]
[230.62744141 200.03533936]
[221.40246582 188.20741272]
[212.17749023 176.37948608]
[202.95251465 164.55155945]
[193.72753906 152.72364807]
[184.50256348 140.89572144]
[175.27758789 129.06779480]
[166.05261230 117.23986816]
[156.82763672 105.41194153]
[154.77635193 146.05628967]
[122.74219513 182.98657227]
[66.78797150 194.88244629]
[53.84516144 202.46423340]
[40.90235138 210.04603577]
[27.95954323 217.62783813]
[20.32443047 232.14117432]
[3.92954922 232.51518250]
[-4.35945320 218.36512756]
[3.98443866 204.24734497]
[20.37774467 204.68502808]
[33.32055283 197.10322571]
[46.26336288 189.52142334]
[59.20617294 181.93963623]
[54.19461060 167.80158997]
[39.36620331 170.06394958]
[26.90837669 180.72859192]
[11.53574657 175.01770020]
[9.06235600 158.80615234]
[22.03261757 148.77099609]
[37.10383606 155.23554993]
[51.93224716 152.97317505]
[52.49946213 145.49465942]
[37.54243851 144.36000061]
[38.67733383 129.40298462]
[53.63389206 130.53761292]
[54.20111084 123.05909729]
[39.88354874 118.58612823]
[24.00972366 122.70362091]
[12.70137978 110.82702637]
[17.59156990 95.17397308]
[33.64968872 91.84697723]
[44.35651779 104.26856995]
[58.67407608 108.74153900]
[62.70714951 102.41822052]
[50.06064224 94.35188293]
[58.12717438 81.70549774]
[70.77329254 89.77158356]
[74.80636597 83.44827271]
[64.71327972 72.35189056]
[54.62018967 61.25551605]
[38.82371902 60.75849152]
[28.06643295 49.18022156]
[28.73044014 33.38988495]
[40.42179489 22.75561523]
[56.20422745 23.58652878]
[66.71429443 35.38966370]
[65.71656799 51.16242981]
[75.80965424 62.25880432]
[85.90274048 73.35517883]
[92.87187958 70.58369446]
[87.32890320 56.64542389]
[81.78591919 42.70714951]
[76.24317932 28.76878738]
[90.18163300 23.22627258]
[95.72418976 37.16417313]
[101.26717377 51.10244370]
[106.81015015 65.04071808]
[113.77928162 62.26922607]
[113.49542236 47.27191162]
[113.21156311 32.27460098]
[104.28591156 18.51724243]
[111.97733307 4.03366089]
[128.37353516 3.72332120]
[136.60752869 17.90547371]
[128.20887756 31.99073792]
[128.49273682 46.98805237]
[128.77659607 61.98536682]
[135.86901855 64.42414093]
[147.18550110 54.57847595]
[150.05384827 69.30170441]
[157.14625549 71.74047852]
[166.59341431 60.08924866]
[176.04057312 48.43801498]
[171.44822693 32.18087387]
[177.37658691 16.53924751]
[191.31150818 7.58933926]
[207.67063904 8.68177986]
[216.89561462 -3.14614487]
[218.62715149 -19.45362091]
[233.72337341 -25.85959053]
[246.65455627 -15.77414036]
[244.11822510 0.42768246]
[228.72354126 6.07883167]
[219.49856567 17.90675735]
[224.36811829 30.36389542]
[222.41975403 43.70585632]
[214.05789185 54.42116928]
[201.38899231 59.63615036]
[187.69180298 57.88517380]
[178.24464417 69.53640747]
[168.79748535 81.18763733]
[168.65554810 96.18696594]
[177.88053894 108.01489258]
[187.10551453 119.84281158]
[196.33049011 131.67074585]
[205.55546570 143.49867249]
[214.78044128 155.32658386]
[224.00541687 167.15451050]
[233.23039246 178.98243713]
[242.45536804 190.81036377]
[257.89288330 192.88900757]
[267.07983398 205.01562500]
[265.00302124 219.72012329]
[274.22799683 231.54804993]
[283.45297241 243.37597656]
[292.67794800 255.20390320]
[301.90292358 267.03182983]
[329.57904053 266.64065552]
[347.13510132 291.90924072]
[361.27313232 296.92080688]
[375.41119385 301.93237305]
[391.42944336 298.41851807]
[402.28027344 310.71450806]
[396.80123901 326.17129517]
[380.62872314 328.88824463]
[370.39962769 316.07040405]
[356.26156616 311.05883789]
[342.12353516 306.04727173]
[333.01089478 317.96197510]
[341.54983521 330.29431152]
[350.08877563 342.62664795]
[358.62768555 354.95898438]
[372.84487915 361.90032959]
[373.72875977 376.76867676]
[382.26770020 389.10101318]
[390.80664062 401.43334961]
[399.34558105 413.76571655]
[414.80938721 418.03771973]
[420.97814941 432.84738159]
[413.11972046 446.83395386]
[397.26242065 449.26818848]
[385.57061768 438.28268433]
[387.01321411 422.30462646]
[378.47430420 409.97229004]
[369.93536377 397.63995361]
[361.39642334 385.30761719]
[347.79000854 379.24835205]
[346.29534912 363.49792480]
[337.75640869 351.16558838]
[329.21749878 338.83325195]
[320.67855835 326.50088501]
[311.37875366 326.71023560]
[302.56195068 324.45056152]
[294.85653687 319.99398804]
[288.78149414 313.76483154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 127]
[5 126]
[6 125]
[7 124]
[8 123]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[17 114]
[18 113]
[19 112]
[22 33]
[23 32]
[24 31]
[25 30]
[34 41]
[35 40]
[46 53]
[47 52]
[58 69]
[59 68]
[60 67]
[78 87]
[79 86]
[80 85]
[91 111]
[92 110]
[93 109]
[97 104]
[98 103]
[129 138]
[130 137]
[131 136]
[139 161]
[140 160]
[141 159]
[142 158]
[144 156]
[145 155]
[146 154]
[147 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
