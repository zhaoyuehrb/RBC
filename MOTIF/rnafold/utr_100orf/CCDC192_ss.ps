%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGCCUGUUGACGUCUGUCCCAGGGACAGGGGAUCCCAGUGGGUCUGGCUUGAGAUGGGACAAUGCUAUAGCAAGAAAUCUGUGGUCCCAGAGUCUG\
) } def
/len { sequence length } bind def

/coor [
[30.23714447 256.11450195]
[21.28741646 268.15206909]
[7.32958460 273.64559937]
[-7.42387056 270.93716431]
[-18.52034950 260.84420776]
[-22.61092758 246.41273499]
[-18.46058273 231.99742126]
[-31.52802658 239.36233521]
[-44.59547043 246.72724915]
[-57.66291428 254.09216309]
[-61.93610382 266.38430786]
[-73.11706543 272.21615601]
[-84.86642456 268.90396118]
[-98.15659332 275.85891724]
[-111.44676208 282.81387329]
[-119.76636505 296.94598389]
[-136.16040039 296.53646851]
[-143.76408386 282.00665283]
[-134.75540161 268.30352783]
[-118.40171814 269.52371216]
[-105.11154175 262.56875610]
[-91.82137299 255.61380005]
[-83.34638977 240.33387756]
[-65.02782440 241.02471924]
[-51.96038055 233.65980530]
[-38.89293671 226.29489136]
[-25.82549286 218.92997742]
[-13.91336823 209.81399536]
[-3.38956594 199.12522888]
[7.13423681 188.43646240]
[6.23659468 171.72319031]
[17.87047195 159.22793579]
[35.27586746 158.91932678]
[45.46216202 147.90844727]
[55.64845276 136.89756775]
[65.83474731 125.88669586]
[76.02104187 114.87581635]
[86.20733643 103.86493683]
[89.48538971 90.27280426]
[102.78179169 85.94876862]
[112.96807861 74.93788910]
[123.15437317 63.92701340]
[119.46263885 50.54322433]
[122.88413239 37.20013046]
[132.40902710 27.40040588]
[145.44021606 23.66091537]
[158.50077820 26.86688614]
[169.02458191 16.17812538]
[179.54838562 5.48936653]
[183.71693420 -9.77280331]
[198.15969849 -13.41366482]
[208.68348694 -24.10242462]
[219.20729065 -34.79118347]
[219.25486755 -50.36794662]
[230.07975769 -61.05795288]
[244.92953491 -60.91660690]
[255.45333862 -71.60536957]
[265.80963135 -82.45649719]
[275.99594116 -93.46737671]
[275.13122559 -109.24799347]
[285.74044800 -120.96208954]
[301.52932739 -121.65989685]
[313.13058472 -110.92742157]
[313.66143799 -95.13204956]
[302.80691528 -83.64489746]
[287.00680542 -83.28108215]
[276.82052612 -72.27020264]
[274.54891968 -65.09626770]
[266.14208984 -61.08156204]
[255.61828613 -50.39280319]
[255.99055481 -35.54703140]
[245.47019958 -24.55719185]
[229.89605713 -24.26738167]
[219.37225342 -13.57862186]
[208.84844971 -2.88986230]
[205.43264771 11.60777569]
[190.23715210 16.01316833]
[179.71334839 26.70192909]
[169.18954468 37.39068985]
[172.42202759 53.40177155]
[165.46247864 68.36132050]
[150.84382629 76.36083984]
[134.16525269 74.11330414]
[123.97895813 85.12418365]
[113.79266357 96.13506317]
[110.51461029 109.72719574]
[97.21820831 114.05123138]
[87.03192139 125.06211090]
[76.84562683 136.07298279]
[66.65933228 147.08386230]
[56.47303772 158.09474182]
[46.28674698 169.10562134]
[48.35190201 182.52239990]
[42.34835434 194.47891235]
[30.69998550 200.65293884]
[17.82299614 198.96026611]
[7.29919338 209.64903259]
[-3.22460914 220.33778381]
[11.77348137 220.09846497]
[24.63477898 227.81771851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 27]
[8 26]
[9 25]
[10 24]
[13 22]
[14 21]
[15 20]
[28 98]
[29 97]
[30 96]
[33 92]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[40 85]
[41 84]
[42 83]
[47 79]
[48 78]
[49 77]
[51 75]
[52 74]
[53 73]
[56 70]
[57 69]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
