%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGGAAGAAUGUCUACGUCUAAUCACACCCAGUUCCAUCCUUCUUCAUUCCUACUGCUGGGUAUCCCAGGGCUAGAAGAUGUGCACAUUUGGAUUG\
) } def
/len { sequence length } bind def

/coor [
[58.17249680 497.81539917]
[42.98922348 502.99688721]
[29.54970551 494.23568726]
[28.16358566 478.25262451]
[39.89418030 467.30856323]
[41.75566101 452.42449951]
[43.61714172 437.54046631]
[32.63862610 427.50997925]
[29.63608360 412.76385498]
[35.96635056 398.91534424]
[49.39242172 391.36239624]
[51.25390625 376.47836304]
[53.11538696 361.59432983]
[54.97686768 346.71026611]
[56.83834839 331.82623291]
[58.69982910 316.94216919]
[52.60177994 303.35308838]
[61.99185181 290.61978149]
[63.85333252 275.73574829]
[65.71481323 260.85168457]
[67.57629395 245.96763611]
[69.43777466 231.08358765]
[71.29925537 216.19953918]
[73.16074371 201.31550598]
[70.87282562 196.93872070]
[71.43820953 191.05738831]
[75.62873077 185.57481384]
[78.41194916 170.83528137]
[68.07826233 160.14169312]
[65.99829102 145.23739624]
[73.17726898 131.80923462]
[87.04692841 125.10560608]
[89.83014679 110.36608124]
[76.91627502 85.33164978]
[73.67601013 70.68580627]
[70.43574524 56.03996658]
[67.19547272 41.39412689]
[52.12839508 40.17982864]
[38.08924103 34.57683182]
[26.32636642 25.08335304]
[17.88571358 12.54354382]
[13.51782322 -1.92756295]
[13.61108398 -17.04320717]
[18.15720367 -31.45931625]
[26.75194550 -43.89402008]
[38.63106918 -53.24163055]
[52.73828888 -58.67096710]
[67.81920624 -59.69925690]
[82.53282928 -56.23506546]
[95.57083893 -48.58642197]
[105.77390289 -37.43344498]
[112.23477173 -23.76784515]
[114.37894440 -8.80475903]
[112.01576233 6.12530518]
[105.35536957 19.69477654]
[94.98999023 30.69706535]
[81.84131622 38.15385818]
[85.08158112 52.79969788]
[88.32185364 67.44554138]
[91.56211853 82.09138489]
[105.35241699 87.99288940]
[118.18448639 80.22514343]
[131.01657104 72.45739746]
[143.84863281 64.68965149]
[156.68070984 56.92190933]
[167.09954834 43.54714584]
[182.83584595 49.85630798]
[181.12948608 66.72416687]
[164.44845581 69.75398254]
[151.61637878 77.52172852]
[138.78430176 85.28947449]
[125.95223236 93.05721283]
[113.12016296 100.82495880]
[104.56967926 113.14929199]
[101.78646088 127.88882446]
[112.25662231 139.18846130]
[114.04468536 154.30984497]
[106.67306519 167.42941284]
[93.15147400 173.61849976]
[90.36826324 188.35801697]
[88.04478455 203.17698669]
[86.18330383 218.06103516]
[84.32182312 232.94508362]
[82.46034241 247.82911682]
[80.59886169 262.71316528]
[78.73738098 277.59722900]
[76.87590027 292.48126221]
[82.84080505 307.13494873]
[73.58387756 318.80364990]
[71.72239685 333.68771362]
[69.86091614 348.57174683]
[67.99943542 363.45581055]
[66.13795471 378.33984375]
[64.27647400 393.22390747]
[75.42887878 403.85073853]
[78.15357208 418.83172607]
[71.61184692 432.38418579]
[58.50119019 439.40194702]
[56.63970947 454.28598022]
[54.77822876 469.17004395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[27 80]
[28 79]
[32 75]
[33 74]
[34 60]
[35 59]
[36 58]
[37 57]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
