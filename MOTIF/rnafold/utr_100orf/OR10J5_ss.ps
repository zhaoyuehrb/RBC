%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAGAAAGAACUUCACAGAAGUGUCAGAAUUCAUUUUCUUGGGAUUUUCUAGCUUUGGAAAGCAUCAGAUAACCCUCUUUGUGGUUUUCCUAACUG\
) } def
/len { sequence length } bind def

/coor [
[124.03539276 177.18367004]
[122.32526398 162.28146362]
[127.55837250 148.22392273]
[138.59689331 138.06759644]
[153.03894043 134.02084351]
[139.53890991 127.48257446]
[126.03886414 120.94431305]
[112.53882599 114.40604401]
[98.81772614 119.06196594]
[85.77711487 112.74620819]
[80.92290497 99.09399414]
[67.42286682 92.55572510]
[53.92282867 86.01746368]
[40.42279053 79.47919464]
[25.65418053 84.43156433]
[12.05636120 77.60852051]
[7.42604637 63.49839401]
[-6.07399321 56.96012497]
[-21.86675453 57.90843582]
[-29.94876289 45.39722443]
[-43.44880295 38.85895920]
[-57.14565277 32.74370575]
[-71.02606201 27.05737877]
[-84.90646362 21.37105370]
[-98.78687286 15.68472767]
[-112.66728210 9.99840164]
[-126.54768372 4.31207561]
[-139.67523193 12.58534431]
[-155.15629578 11.52878666]
[-167.03808594 1.54867029]
[-170.75181580 -13.51744652]
[-164.86947632 -27.87633514]
[-151.65293884 -36.00670624]
[-136.18424988 -34.78227234]
[-124.41143036 -24.67384911]
[-120.86135864 -9.56833172]
[-106.98095703 -3.88200545]
[-93.10054779 1.80432069]
[-79.22013855 7.49064684]
[-65.33972931 13.17697239]
[-51.45932770 18.86329842]
[-46.63674927 17.79863548]
[-41.10753250 19.88129425]
[-36.91053772 25.35892105]
[-23.41049767 31.89718628]
[-8.58335018 30.48121452]
[0.46427301 43.46008682]
[13.96431255 49.99835205]
[27.90587997 44.88285446]
[41.68997955 51.32127380]
[46.96105576 65.97915649]
[60.46109390 72.51742554]
[73.96113586 79.05568695]
[87.46117401 85.59395599]
[101.18227386 80.93803406]
[114.22288513 87.25379181]
[119.07709503 100.90600586]
[132.57713318 107.44427490]
[146.07716370 113.98253632]
[159.57720947 120.52080536]
[173.99327087 124.66532898]
[188.90446472 126.29511261]
[203.81567383 127.92489624]
[218.72686768 129.55467224]
[233.63806152 131.18446350]
[248.54925537 132.81423950]
[263.46044922 134.44403076]
[275.71139526 124.82360840]
[290.81024170 126.68885040]
[299.90634155 138.42753601]
[314.81753540 140.05731201]
[329.72872925 141.68708801]
[344.63995361 143.31687927]
[354.97052002 131.73851013]
[370.14086914 128.47650146]
[384.31762695 134.78514099]
[392.04956055 148.23863220]
[390.36361694 163.66384888]
[379.90802002 175.12945557]
[364.70318604 178.22671509]
[350.59570312 171.76466370]
[343.01016235 158.22807312]
[328.09896851 156.59829712]
[313.18777466 154.96850586]
[298.27658081 153.33872986]
[286.85946655 162.83532715]
[271.71417236 161.39491272]
[261.83068848 149.35522461]
[246.91947937 147.72543335]
[232.00828552 146.09565735]
[217.09709167 144.46588135]
[202.18588257 142.83609009]
[187.27468872 141.20631409]
[172.36349487 139.57652283]
[182.45210266 150.67697144]
[186.41047668 165.14526367]
[183.37794495 179.83551025]
[174.01385498 191.55361938]
[160.35427856 197.75167847]
[145.36923218 197.08203125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 60]
[6 59]
[7 58]
[8 57]
[11 54]
[12 53]
[13 52]
[14 51]
[17 48]
[18 47]
[20 45]
[21 44]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[70 85]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
