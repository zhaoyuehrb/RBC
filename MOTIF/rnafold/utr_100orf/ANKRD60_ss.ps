%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCGCGGCCGCGCCUGGGGGAUGCGGCGGGCGGCGGCGGGGGCGGGCGGAGCGCGGGCGGCGGGGCCAACUGGGGGCGCCUCUCGCCUGCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[111.21709442 122.92385101]
[101.87960815 125.45178223]
[92.27207184 124.32293701]
[83.77484894 119.69950867]
[77.60875702 112.24575806]
[62.91429901 115.25785828]
[48.21983337 118.26996613]
[33.57399368 121.51023865]
[18.98031616 124.97788239]
[6.00255632 137.92488098]
[-10.59496593 132.46376038]
[-25.07374191 136.38359070]
[-39.55251694 140.30342102]
[-54.03129196 144.22325134]
[-68.51007080 148.14308167]
[-82.98884583 152.06291199]
[-97.40490723 156.20744324]
[-111.75477600 160.57565308]
[-122.55208588 172.91867065]
[-138.58546448 169.47441101]
[-143.36114502 153.78604126]
[-131.96630859 141.99241638]
[-116.12299347 146.22579956]
[-101.77312469 141.85757446]
[-96.19265747 136.80941772]
[-86.90866852 137.58413696]
[-72.42989349 133.66430664]
[-57.95112228 129.74447632]
[-43.47234726 125.82464600]
[-28.99357033 121.90482330]
[-14.51479435 117.98499298]
[-8.13934422 107.57482147]
[4.02847576 104.26291656]
[15.51267052 110.38420105]
[30.10634804 106.91655731]
[35.98986435 102.22510529]
[45.20772934 103.57550812]
[59.90219116 100.56340027]
[74.59665680 97.55129242]
[84.19525146 79.96163177]
[103.53714752 74.72521210]
[120.69847107 85.07018280]
[134.90554810 80.25779724]
[149.11260986 75.44540405]
[163.31968689 70.63301849]
[177.45021057 65.60027313]
[191.50074768 60.34837341]
[205.55128479 55.09647751]
[219.60182190 49.84458160]
[233.65235901 44.59268188]
[247.70288086 39.34078598]
[261.75341797 34.08889008]
[275.72058105 28.61911774]
[289.60098267 22.93279076]
[303.48141479 17.24646568]
[310.38339233 10.98904419]
[317.88299561 11.60656261]
[331.93353271 6.35466576]
[345.98406982 1.10276902]
[347.60147095 -12.88797569]
[355.08639526 -24.73971558]
[366.91149902 -32.14201736]
[380.71026611 -33.68147278]
[393.75042725 -29.11127090]
[403.47509766 -19.38861847]
[417.68215942 -24.20100403]
[431.88925171 -29.01339149]
[438.66290283 -43.29251099]
[453.57730103 -48.52090836]
[467.78399658 -41.59667206]
[472.85443115 -26.62782669]
[465.78036499 -12.49512196]
[450.75875854 -7.58324194]
[436.70162964 -14.80631733]
[422.49456787 -9.99393082]
[408.28747559 -5.18154430]
[405.55618286 10.66178322]
[395.18710327 23.06988335]
[379.90551758 28.63565445]
[363.80166626 25.76980972]
[351.23596191 15.15330601]
[337.18542480 20.40520287]
[323.13488770 25.65709877]
[309.16772461 31.12687302]
[295.28732300 36.81319809]
[281.40692139 42.49952316]
[276.32110596 48.04570007]
[267.00531006 48.13942719]
[252.95478821 53.39132309]
[238.90425110 58.64321899]
[224.85371399 63.89511871]
[210.80317688 69.14701080]
[196.75263977 74.39891052]
[182.70210266 79.65081024]
[177.44627380 85.03613281]
[168.13208008 84.84009552]
[153.92500305 89.65248108]
[139.71792603 94.46486664]
[125.51085663 99.27725220]
[123.94721222 108.82366943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 39]
[6 38]
[7 37]
[8 35]
[9 34]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 24]
[18 23]
[42 99]
[43 98]
[44 97]
[45 96]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[51 89]
[52 88]
[53 86]
[54 85]
[55 84]
[57 83]
[58 82]
[59 81]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
