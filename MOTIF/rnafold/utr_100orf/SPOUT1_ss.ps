%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCAUUGGCAGAGGCGGGACCGACGGUGUGUGCGGAACAUGGCGGAGCGCGGCAGGAAGCGGCCGUGCGGCCCGGGUGAACACGGCCAAAGGAUUGAGUGGCGAAAAUGGAAGCAACAGAAGAAAGAGGAGAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[358.81991577 281.54199219]
[346.60711670 272.83294678]
[334.39431763 264.12390137]
[322.18151855 255.41487122]
[309.96871948 246.70582581]
[297.93957520 248.38697815]
[287.67938232 241.16351318]
[285.04101562 228.48533630]
[273.02386475 219.50823975]
[261.00671387 210.53115845]
[248.98957825 201.55407715]
[236.97242737 192.57699585]
[220.70364380 202.21092224]
[201.82133484 203.87629700]
[184.02693176 197.20472717]
[170.82678223 183.46624756]
[164.84117126 165.32771301]
[167.28425598 146.33523560]
[154.34954834 138.73963928]
[141.41482544 131.14404297]
[128.48010254 123.54844666]
[121.06082916 122.86840820]
[115.34591675 115.63904572]
[102.58238983 107.75916290]
[99.04679108 119.87179565]
[87.19235229 128.90089417]
[69.33230591 130.60832214]
[54.36533356 129.61347961]
[40.08238602 136.41847229]
[27.89629745 127.85409546]
[12.92932510 126.85925293]
[-2.03764820 125.86440277]
[-17.00462151 124.86956024]
[-31.97159386 123.87471771]
[-44.94161987 133.31706238]
[-60.37180328 128.92514038]
[-66.42542267 114.06804657]
[-58.45866776 100.14287567]
[-42.58294296 97.83183289]
[-30.97674942 108.90774536]
[-16.00977707 109.90258789]
[-1.04280376 110.89743042]
[13.92416954 111.89227295]
[28.89114189 112.88712311]
[42.10355377 106.01096344]
[55.36017990 114.64649963]
[70.32714844 115.64134216]
[74.47666931 109.39382172]
[82.77569580 96.89878082]
[86.92520905 90.65126038]
[80.20420837 77.24125671]
[73.48320770 63.83125687]
[66.76220703 50.42125320]
[60.04120636 37.01125336]
[53.32020569 23.60125160]
[46.59920120 10.19124985]
[31.26824379 7.79513693]
[20.29742241 -3.17849851]
[17.90523911 -18.51007080]
[25.01154137 -32.30427551]
[38.88380814 -39.25696182]
[54.18787003 -36.69467926]
[65.03900146 -25.60267639]
[67.26472473 -10.24605656]
[60.00920486 3.47024798]
[66.73020172 16.88024902]
[73.45121002 30.29025078]
[80.17221069 43.70025253]
[86.89321136 57.11025238]
[93.61421204 70.52025604]
[100.33521271 83.93025970]
[110.46227264 94.99564362]
[123.22579193 102.87551880]
[136.07569885 110.61373138]
[149.01042175 118.20932770]
[161.94512939 125.80491638]
[174.87985229 133.40051270]
[183.36688232 125.82655334]
[193.52099609 120.73414612]
[204.63624573 118.46820831]
[215.94223022 119.17744446]
[226.65751648 122.80467224]
[236.04360962 129.09127808]
[243.45587158 137.59570312]
[248.38780212 147.72436523]
[250.50563049 158.77316284]
[249.67091370 169.97640991]
[245.94950867 180.55984497]
[257.96664429 189.53692627]
[269.98379517 198.51400757]
[282.00097656 207.49108887]
[294.01812744 216.46818542]
[312.31631470 218.17384338]
[318.67776489 234.49302673]
[330.89056396 243.20207214]
[343.10336304 251.91111755]
[355.31616211 260.62014771]
[367.52896118 269.32919312]
[373.71746826 269.22302246]
[378.88235474 271.56072998]
[382.20028687 275.50155640]
[396.96597290 278.14257812]
[411.91284180 272.95593262]
[423.07901001 282.81323242]
[437.84466553 285.45425415]
[447.68460083 273.66140747]
[462.10815430 268.38351440]
[477.23553467 271.04034424]
[488.99746704 280.91717529]
[494.23013306 295.35720825]
[491.52590942 310.47616577]
[481.61224365 322.20712280]
[467.15585327 327.39447021]
[452.04547119 324.64288330]
[440.34564209 314.69250488]
[435.20364380 300.21994019]
[420.43795776 297.57888794]
[406.54724121 302.95446777]
[394.32495117 292.90826416]
[379.55926514 290.26721191]
[390.84225464 300.15127563]
[399.24972534 312.57360840]
[404.23196411 326.72201538]
[405.46325684 341.67138672]
[402.86306763 356.44430542]
[396.60140991 370.07482910]
[387.08767700 381.67178345]
[374.94393921 390.47689819]
[360.96420288 395.91442871]
[346.06250000 397.62887573]
[331.21316528 395.50814819]
[317.38711548 389.69091797]
[305.48837280 380.55749512]
[296.29486084 368.70507812]
[290.40771484 354.90866089]
[288.21188354 340.07025146]
[289.85092163 325.16006470]
[295.21768188 311.15298462]
[303.96121216 298.96487427]
[315.50988770 289.39257812]
[329.10855103 283.06204224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 94]
[8 92]
[9 91]
[10 90]
[11 89]
[12 88]
[18 77]
[19 76]
[20 75]
[21 74]
[23 73]
[24 72]
[27 47]
[28 46]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[101 120]
[102 119]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
