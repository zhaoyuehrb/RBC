%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAGAGUUUCAUCUGCAAAGCCAAAUGCCCUCAAUAAGACUCAUCUUCAGAAGGCUGUCCUUAGGCAGAAUUAAACCCAGUCAGAGCCCCAGGUGUU\
) } def
/len { sequence length } bind def

/coor [
[188.49111938 342.28887939]
[194.97320557 333.42968750]
[189.07170105 319.63940430]
[183.17019653 305.84912109]
[177.26869202 292.05880737]
[162.72940063 288.93676758]
[152.69776917 277.71936035]
[151.17712402 262.56875610]
[158.95916748 249.27415466]
[153.05766296 235.48385620]
[147.15615845 221.69355774]
[141.25465393 207.90327454]
[125.44855499 202.39810181]
[118.29620361 186.89576721]
[124.60881805 170.67250061]
[118.28128815 157.07241821]
[111.95376587 143.47233582]
[105.62624359 129.87223816]
[99.29871368 116.27215576]
[85.34142303 107.09936523]
[86.79815674 90.46133423]
[80.05073547 77.06461334]
[73.30330658 63.66788483]
[60.20305252 64.14639282]
[47.96097183 59.59193039]
[38.42803192 50.73163223]
[33.03081131 38.94068146]
[32.55807877 26.02896690]
[37.04573822 13.96329880]
[45.77683258 4.56779194]
[39.87532806 -9.22250366]
[33.97382355 -23.01279831]
[21.43106270 -32.65591431]
[23.53703690 -47.40088654]
[17.63553238 -61.19118118]
[4.54242325 -64.77523804]
[-3.92779350 -75.13169098]
[-4.81658649 -88.28513336]
[1.97875845 -99.35334778]
[-3.49101448 -113.32050323]
[-8.96078682 -127.28766632]
[-14.43056011 -141.25482178]
[-27.57505226 -151.06066895]
[-25.38673782 -167.31315613]
[-10.11676979 -173.29312134]
[2.52641988 -162.84890747]
[-0.46339926 -146.72459412]
[5.00637388 -132.75744629]
[10.47614670 -118.79027557]
[15.94591904 -104.82312012]
[31.57315445 -98.82904816]
[38.23992920 -83.11177063]
[31.42582703 -67.09268188]
[37.32733154 -53.30239105]
[49.44797897 -44.64564896]
[47.76411819 -28.91430283]
[53.66562271 -15.12400723]
[59.56712723 -1.33371174]
[76.58330536 0.01447635]
[90.70562744 9.75782108]
[98.08213806 25.34564781]
[96.64741516 42.61906052]
[86.70003510 56.92045975]
[93.44745636 70.31718445]
[100.19488525 83.71391296]
[111.10804749 88.08840942]
[116.23286438 98.66999054]
[112.89880371 109.94462585]
[119.22632599 123.54471588]
[125.55385590 137.14480591]
[131.88137817 150.74488831]
[138.20890808 164.34498596]
[151.40715027 167.52011108]
[160.19534302 177.60813904]
[161.49278259 190.72756958]
[155.04493713 202.00177002]
[160.94644165 215.79205322]
[166.84794617 229.58235168]
[172.74945068 243.37265015]
[187.73974609 246.92190552]
[197.64994812 258.48223877]
[198.83868408 273.48394775]
[191.05899048 286.15731812]
[196.96049500 299.94760132]
[202.86199951 313.73788452]
[208.76348877 327.52819824]
[227.68344116 333.76382446]
[236.05184937 351.51321411]
[229.04008484 369.52178955]
[236.20088196 382.70217896]
[243.36167908 395.88259888]
[256.23596191 406.91387939]
[249.19970703 422.33880615]
[232.42979431 419.84756470]
[230.18128967 403.04339600]
[223.02047729 389.86297607]
[215.85968018 376.68258667]
[205.29261780 376.49966431]
[195.72271729 371.82550049]
[188.97927856 363.47656250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[9 79]
[10 78]
[11 77]
[12 76]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[21 65]
[22 64]
[23 63]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[39 50]
[40 49]
[41 48]
[42 47]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
