%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACAAGGGGACGGAAGACAGGAUCCAGGCUGUAUCUACGGAGAGACACAGAAGGGAGAUGCUGCUGCUGCUGCUGCUGCUGCUGCUGCUGCCGCCACUAGUCCUCAGGGUUGCUGCAAGCCGAUGUCUACAUGAUGAGACACAGAAGUCUGUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[59.73329163 136.96633911]
[55.18859863 128.30895996]
[52.39577484 119.24401093]
[51.35016632 110.11032104]
[51.98402023 101.23131561]
[54.17191315 92.90374756]
[57.73811722 85.38773346]
[62.46563339 78.89866638]
[50.87047577 69.38276672]
[39.27532196 59.86687088]
[27.68016434 50.35097122]
[16.08500671 40.83507156]
[4.48985052 31.31917191]
[-11.54759026 37.66917419]
[-28.98991394 33.62801361]
[-41.48554230 19.90464020]
[-44.05708694 0.86185884]
[-59.05419540 0.56735343]
[-67.74764252 3.53969669]
[-74.34207916 0.11695778]
[-89.33052063 -0.47193944]
[-98.12767792 9.76823997]
[-111.03223419 13.00845337]
[-123.25973511 8.27916527]
[-130.40959167 -2.47653389]
[-145.38357544 -3.35959601]
[-160.35755920 -4.24265814]
[-170.23149109 7.58154058]
[-185.00193787 11.28115940]
[-198.95361328 5.64071989]
[-206.81462097 -6.98237514]
[-221.78860474 -7.86543703]
[-236.76260376 -8.74849892]
[-251.73658752 -9.63156128]
[-265.96832275 -2.72010756]
[-278.21801758 -11.19325352]
[-293.19198608 -12.07631493]
[-308.16598511 -12.95937729]
[-319.81185913 -2.27530980]
[-335.59768677 -3.03886628]
[-346.15802002 -14.79704189]
[-345.22763062 -30.57392120]
[-333.35845947 -41.00935745]
[-317.59228516 -39.91219711]
[-307.28292847 -27.93336105]
[-292.30892944 -27.05029869]
[-277.33496094 -26.16723633]
[-264.17425537 -33.14185333]
[-250.85351562 -24.60554504]
[-235.87953186 -23.72248268]
[-220.90554810 -22.83942032]
[-205.93156433 -21.95635986]
[-196.64135742 -33.56799316]
[-182.12342834 -37.52949142]
[-167.89019775 -32.11943817]
[-159.47448730 -19.21664238]
[-144.50050354 -18.33358002]
[-129.52651978 -17.45051765]
[-117.47144318 -29.14356613]
[-100.35156250 -28.51261139]
[-88.74162292 -15.46037483]
[-73.75318146 -14.87147808]
[-58.75968933 -14.42975521]
[-43.76258087 -14.13525009]
[-32.94977570 -24.53156090]
[-32.65527344 -39.52866745]
[-40.12013245 -53.47809219]
[-32.13444138 -66.05100250]
[-31.83993530 -81.04811096]
[-39.30479431 -94.99753571]
[-31.31910324 -107.57044220]
[-31.02459717 -122.56755066]
[-38.48945618 -136.51696777]
[-30.50376511 -149.08987427]
[-30.20926094 -164.08699036]
[-37.67412186 -178.03640747]
[-29.68842888 -190.60931396]
[-29.39392281 -205.60643005]
[-37.78258133 -219.69764709]
[-29.53852844 -233.87394714]
[-13.14254284 -233.55197144]
[-5.46140623 -219.06294250]
[-14.39681435 -205.31192017]
[-14.69132042 -190.31481934]
[-7.20539474 -177.43807983]
[-15.21215153 -163.79248047]
[-15.50665760 -148.79537964]
[-8.02073193 -135.91864014]
[-16.02748871 -122.27304077]
[-16.32199478 -107.27593231]
[-8.83606911 -94.39920044]
[-16.84282684 -80.75360107]
[-17.13733101 -65.75649261]
[-9.65140629 -52.87976456]
[-17.65816307 -39.23416519]
[-17.95266914 -24.23705482]
[-6.23234701 -23.52973175]
[4.22742128 -18.80765533]
[12.13479137 -10.86044312]
[16.58758926 -0.86151201]
[17.17427826 9.80265903]
[14.00574970 19.72401619]
[25.60090637 29.23991585]
[37.19606400 38.75581360]
[48.79122162 48.27171326]
[60.38637543 57.78761292]
[71.98153687 67.30351257]
[96.56070709 49.87606430]
[131.05976868 51.70041275]
[160.48094177 77.28180695]
[175.33947754 75.22662354]
[190.19802856 73.17144012]
[205.05656433 71.11624908]
[214.39430237 58.36547852]
[230.02577209 56.03470230]
[242.67710876 65.50672913]
[244.84249878 81.16197205]
[235.23724365 93.71245575]
[219.55998230 95.71219635]
[207.11175537 85.97479248]
[192.25320435 88.02997589]
[177.39466858 90.08515930]
[162.53613281 92.14035034]
[161.29020691 99.53613281]
[172.85417175 109.08990479]
[158.79835510 114.32771301]
[157.55242920 121.72349548]
[170.91752625 128.53335571]
[184.28262329 135.34321594]
[199.92340088 131.77308655]
[212.37615967 141.88784790]
[212.08821106 157.92831421]
[199.28044128 167.58961487]
[183.77789307 163.46043396]
[177.47276306 148.70831299]
[164.10766602 141.89845276]
[150.74256897 135.08859253]
[145.38746643 140.33956909]
[155.88925171 151.04995728]
[145.17871094 161.55158997]
[134.67724609 150.84153748]
[129.32212830 156.09251404]
[135.86827087 169.58874512]
[142.41441345 183.08496094]
[148.96054077 196.58119202]
[155.50668335 210.07742310]
[169.37831116 218.82441711]
[168.46871948 235.19831848]
[153.71360779 242.35505676]
[140.29179382 232.93238831]
[142.01046753 216.62355042]
[135.46432495 203.12733459]
[128.91818237 189.63110352]
[122.37204742 176.13488770]
[115.82590485 162.63865662]
[104.29055786 162.80305481]
[93.20741272 160.91438293]
[82.92941284 157.13893127]
[73.76486969 151.70143127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[13 102]
[17 64]
[18 63]
[20 62]
[21 61]
[25 58]
[26 57]
[27 56]
[31 52]
[32 51]
[33 50]
[34 49]
[36 47]
[37 46]
[38 45]
[65 96]
[66 95]
[68 93]
[69 92]
[71 90]
[72 89]
[74 87]
[75 86]
[77 84]
[78 83]
[110 123]
[111 122]
[112 121]
[113 120]
[127 137]
[128 136]
[129 135]
[142 155]
[143 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
