%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUAGCCGAAUUCAGUCCGCCAGUGUCCCAUAAUCCUCUUCUCUCGGUUCCUCUUUCCUCGCUCAAGAUGGCGCUGCUCGCGAUGCAUUCUUGGCGCUGGGCGGCCGCGGCGGCUGCUUUCGAAAAGCGCCGGCACUCCGCGAUUCUGAUCCGGCCUUUAGUCUCUG\
) } def
/len { sequence length } bind def

/coor [
[125.38698578 487.43365479]
[123.43405914 472.43228149]
[126.21438599 457.56201172]
[133.45558167 444.27969360]
[144.44822693 433.88656616]
[158.11538696 427.40087891]
[156.16900635 412.52767944]
[154.22264099 397.65451050]
[152.27626038 382.78131104]
[141.04402161 376.41961670]
[135.45475769 364.56790161]
[137.75848389 351.47061157]
[147.33283997 341.96276855]
[145.66326904 327.05599976]
[143.99369812 312.14920044]
[142.32412720 297.24240112]
[128.75360107 287.33953857]
[126.47993469 270.35421753]
[137.38899231 256.70373535]
[135.44262695 241.83055115]
[133.49624634 226.95736694]
[122.08545685 213.64733887]
[129.23262024 196.69708252]
[127.01011658 181.86265564]
[124.78761292 167.02821350]
[122.56510925 152.19378662]
[120.34260559 137.35934448]
[118.12010193 122.52490997]
[112.95852661 136.60887146]
[107.79695129 150.69284058]
[109.59662628 165.58448792]
[107.59806824 180.45074463]
[101.92942047 194.33839417]
[92.95417023 206.35690308]
[81.24781036 215.73567200]
[67.56097412 221.87330627]
[52.77127457 224.37625122]
[37.82704163 223.08403015]
[23.68651199 218.07948303]
[11.25639725 209.68351746]
[1.33372593 198.43449402]
[-5.44524813 185.05369568]
[-8.64585018 170.39913940]
[-8.06285477 155.41047668]
[-3.73484540 141.05148315]
[11.18972206 139.54905701]
[26.11429024 138.04663086]
[12.29644871 132.20991516]
[-0.37859702 141.00462341]
[-15.79708958 141.52770996]
[-29.03904533 133.61227417]
[-35.87900162 119.78409576]
[-34.13435745 104.45569611]
[-24.36182022 92.51831818]
[-9.67976952 87.78112793]
[5.22680330 91.75575256]
[15.60126591 103.17389679]
[18.13316536 118.39207458]
[31.95100594 124.22879791]
[41.25697327 112.46363068]
[50.56212234 100.69953156]
[41.70028687 88.59713745]
[32.83845139 76.49474335]
[23.97661591 64.39235687]
[8.32149792 62.22606277]
[-1.14979482 49.57418060]
[1.18188834 33.94284058]
[13.93320084 24.60584068]
[29.53901672 27.10265732]
[38.74068069 39.95197296]
[36.07900620 55.53051758]
[44.94084167 67.63291168]
[53.80267715 79.73529816]
[62.66451263 91.83769226]
[69.67713165 89.17815399]
[90.71499634 81.19954681]
[89.32280731 66.26428986]
[87.93061829 51.32904053]
[74.96824646 42.58198547]
[70.71070862 27.53514481]
[77.16828918 13.29317570]
[91.29190826 6.58069944]
[106.41283417 10.56714249]
[115.39141846 23.37022781]
[113.98825073 38.94473267]
[102.86586761 49.93684769]
[104.25806427 64.87210083]
[105.65025330 79.80735779]
[112.29117584 83.29277802]
[114.81671143 68.50691986]
[129.65936279 66.33995056]
[136.30673218 79.78660583]
[125.57301331 90.26362610]
[132.21392822 93.74905396]
[145.29626465 86.41060638]
[158.37858582 79.07216644]
[171.46092224 71.73372650]
[184.54324341 64.39528656]
[197.62557983 57.05685043]
[210.27851868 49.00062180]
[222.46275330 40.25165558]
[234.64700317 31.50268936]
[246.83123779 22.75372314]
[259.01547241 14.00475693]
[271.19970703 5.25579071]
[283.38394165 -3.49317527]
[295.56817627 -12.24214172]
[307.75241089 -20.99110794]
[317.09164429 -35.14084625]
[333.27374268 -30.08362961]
[332.89382935 -13.13393974]
[316.50137329 -8.80687237]
[304.31713867 -0.05790627]
[292.13290405 8.69106007]
[279.94866943 17.44002533]
[267.76443481 26.18899155]
[255.58020020 34.93795776]
[243.39596558 43.68692398]
[231.21173096 52.43589020]
[219.02749634 61.18485641]
[233.55061340 64.93706512]
[241.31445312 77.77150726]
[237.89622498 92.37683868]
[225.24317932 100.43291473]
[210.56330872 97.35047150]
[202.21922302 84.88546753]
[204.96401978 70.13917542]
[191.88168335 77.47761536]
[178.79936218 84.81605530]
[165.71702576 92.15449524]
[152.63470459 99.49293518]
[139.55236816 106.83137512]
[132.95454407 120.30240631]
[135.17704773 135.13684082]
[137.39955139 149.97128296]
[139.62205505 164.80570984]
[141.84455872 179.64015198]
[144.06706238 194.47457886]
[153.97187805 202.77757263]
[155.49884033 215.20735168]
[148.36943054 225.01100159]
[150.31581116 239.88418579]
[152.26217651 254.75737000]
[163.83369446 261.69760132]
[169.20486450 273.86300659]
[166.61431885 286.70791626]
[157.23092651 295.57281494]
[158.90049744 310.47961426]
[160.57006836 325.38641357]
[162.23963928 340.29321289]
[176.09848022 350.93630981]
[177.95573425 367.97219849]
[167.14944458 380.83493042]
[169.09582520 395.70812988]
[171.04219055 410.58129883]
[172.98857117 425.45449829]
[187.86439514 428.20492554]
[201.16125488 435.41940308]
[211.57644653 446.39114380]
[218.08959961 460.04522705]
[220.06263733 475.04397583]
[217.30223083 489.91796875]
[210.07884216 503.20996094]
[199.10012817 513.61779785]
[185.44169617 520.12182617]
[170.44163513 522.08477783]
[155.56950378 519.31445312]
[142.28231812 512.08215332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 156]
[7 155]
[8 154]
[9 153]
[13 150]
[14 149]
[15 148]
[16 147]
[19 143]
[20 142]
[21 141]
[23 138]
[24 137]
[25 136]
[26 135]
[27 134]
[28 133]
[47 59]
[48 58]
[61 74]
[62 73]
[63 72]
[64 71]
[76 88]
[77 87]
[78 86]
[94 132]
[95 131]
[96 130]
[97 129]
[98 128]
[99 127]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
