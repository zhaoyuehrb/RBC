%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGAACUCGCUGCUGUUCGGGGAGAUGGCCUUGGCCUUCGGCUGCCCGCCGGGCGGCGGCGGCGGGGGCUGCCCUGGCGGGGGCGGCGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[83.19104767 318.93783569]
[71.33235931 328.54690552]
[56.47685623 332.05075073]
[41.57410812 328.75363159]
[29.58307076 319.31024170]
[22.88456726 305.59555054]
[22.80859375 290.33261108]
[29.37023354 276.55191040]
[41.26667023 266.98962402]
[56.13585281 263.54431152]
[59.37612152 248.89848328]
[62.61639023 234.25263977]
[65.85665894 219.60679626]
[69.09692383 204.96095276]
[72.33718872 190.31510925]
[75.57746124 175.66926575]
[78.81772614 161.02343750]
[82.05799103 146.37759399]
[85.29826355 131.73175049]
[88.53852844 117.08590698]
[80.37546539 104.50161743]
[65.68099976 101.48950958]
[50.98654175 98.47740173]
[36.29207993 95.46529388]
[21.59761620 92.45319366]
[8.54553127 101.36490631]
[-6.96952534 98.35515594]
[-15.74274445 85.20957947]
[-12.56913185 69.72721100]
[0.66846520 61.09346390]
[16.11641502 64.43058777]
[24.60972214 77.75872803]
[39.30418396 80.77083588]
[53.99864578 83.78294373]
[68.69310760 86.79504395]
[83.38757324 89.80715179]
[96.09729004 81.84078979]
[99.79147339 67.30280304]
[103.48565674 52.76481628]
[107.17984009 38.22682953]
[110.87402344 23.68884659]
[114.56820679 9.15086079]
[118.26239014 -5.38712406]
[117.34338379 -14.65794086]
[122.30414581 -20.31624222]
[126.44866943 -34.73230743]
[130.59320068 -49.14836884]
[134.73771667 -63.56443405]
[138.88224792 -77.98049927]
[138.25199890 -87.27541351]
[143.38633728 -92.77669525]
[147.97718811 -107.05689240]
[152.56805420 -121.33708954]
[148.58157349 -137.24432373]
[160.55099487 -148.45436096]
[176.16319275 -143.43528748]
[179.35768127 -127.35028839]
[166.84825134 -116.74623108]
[162.25738525 -102.46603394]
[157.66653442 -88.18583679]
[153.29830933 -73.83597565]
[149.15377808 -59.41990662]
[145.00926208 -45.00384521]
[140.86473083 -30.58778000]
[136.72019958 -16.17171669]
[132.80038452 -1.69294035]
[129.10620117 12.84504509]
[125.41201019 27.38302994]
[121.71782684 41.92101288]
[118.02364349 56.45899963]
[114.32946014 70.99698639]
[110.63527679 85.53497314]
[116.83584595 90.64622498]
[120.50391388 98.40906525]
[134.85377502 102.77728271]
[149.20364380 107.14550781]
[163.55351257 111.51372528]
[177.90338135 115.88195038]
[193.74668884 111.64856720]
[205.14152527 123.44219971]
[200.36584473 139.13056946]
[184.33247375 142.57482910]
[173.53515625 130.23181152]
[159.18528748 125.86359406]
[144.83541870 121.49537659]
[130.48556519 117.12715149]
[116.13569641 112.75893402]
[103.18437195 120.32617188]
[99.94409943 134.97201538]
[96.70383453 149.61785889]
[93.46356964 164.26370239]
[90.22329712 178.90954590]
[86.98303223 193.55537415]
[83.74276733 208.20121765]
[80.50249481 222.84706116]
[77.26222992 237.49290466]
[74.02196503 252.13874817]
[70.78169250 266.78457642]
[82.80982971 276.18069458]
[89.56228638 289.86889648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[51 60]
[52 59]
[53 58]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
