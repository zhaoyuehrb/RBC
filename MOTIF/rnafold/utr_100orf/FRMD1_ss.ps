%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUCUGGGAGGUGCUGAGCACCCACCUGCGACCCAUGGCGGGGGAGGGCCGAGUAACGACAGCAUGGCGGUGCCCCCGAGAGGGAGGGGCAUAGACCCCGCCCGGACAAACCCUGACACGUUCCCUCCUUCAGGGGCGCGAUGUAUGGAACCCAGUCCUGAGA\
) } def
/len { sequence length } bind def

/coor [
[83.15202332 264.61471558]
[88.55609131 250.16481018]
[100.92815399 240.94876099]
[99.79372406 225.99172974]
[96.13610840 219.53134155]
[98.78208923 210.74136353]
[97.93090820 195.76553345]
[97.07972717 180.78970337]
[96.22854614 165.81387329]
[95.37737274 150.83804321]
[84.31727600 148.57908630]
[74.02407837 143.94459534]
[64.57691956 155.59582520]
[55.12976456 167.24705505]
[45.68260574 178.89828491]
[36.23544693 190.54951477]
[30.95628357 206.66059875]
[14.01341724 206.04772949]
[9.91207695 189.59733582]
[24.58421707 181.10235596]
[34.03137589 169.45112610]
[43.47853088 157.79989624]
[52.92568970 146.14866638]
[62.37284851 134.49743652]
[55.42950821 127.51427460]
[49.81037903 119.12587738]
[45.80014801 109.58912659]
[31.48258781 114.06209564]
[28.19724846 129.06549072]
[17.83850479 140.40533447]
[3.19280744 145.03125000]
[-11.80022430 141.69889832]
[-23.10754013 131.30467224]
[-27.68753052 116.64453888]
[-24.30819893 101.66203308]
[-13.87856960 90.38735199]
[0.79583931 85.85333252]
[15.76768589 89.27960968]
[27.00961876 99.74452972]
[41.32717896 95.27156067]
[44.42734146 80.59542847]
[33.14194870 70.71413422]
[21.85655594 60.83284378]
[10.57116318 50.95155334]
[-0.71422929 41.07025909]
[-11.99962139 31.18896866]
[-28.41889954 35.16283417]
[-43.82498550 28.64681816]
[-52.24116516 14.38320446]
[-50.53045273 -1.92287171]
[-62.00082016 -11.58882713]
[-73.47118378 -21.25478172]
[-84.94155121 -30.92073822]
[-100.48031616 -33.89688492]
[-105.22685242 -48.01494598]
[-116.69721985 -57.68090057]
[-132.07083130 -54.81978226]
[-145.66130066 -62.55497742]
[-151.05162048 -77.23416901]
[-145.69664001 -91.92627716]
[-132.12481689 -99.69415283]
[-116.74436951 -96.87003326]
[-106.81745148 -84.78739166]
[-107.03126526 -69.15126801]
[-95.56089783 -59.48530960]
[-80.84257507 -57.20053864]
[-75.27559662 -42.39110565]
[-63.80522919 -32.72514725]
[-52.33486557 -23.05919266]
[-40.86449814 -13.39323807]
[-28.23200989 -17.78790855]
[-14.97333241 -15.33606625]
[-4.58212090 -6.57470131]
[0.14971586 6.28246498]
[-2.11833072 19.90357590]
[9.16706181 29.78486824]
[20.45245361 39.66616058]
[31.73784637 49.54745102]
[43.02323914 59.42874146]
[54.30863190 69.31003571]
[66.75683594 57.39071274]
[82.02290344 50.09447098]
[98.49278259 47.97560120]
[114.49084473 51.05216217]
[120.81581879 37.45088959]
[127.14080048 23.84961319]
[125.94403839 8.07373524]
[138.32649231 -0.20418949]
[144.65147400 -13.80546379]
[150.97645569 -27.40673828]
[157.30142212 -41.00801086]
[151.64569092 -55.76565933]
[158.15791321 -70.16587830]
[172.97453308 -75.66528320]
[187.30509949 -69.00115967]
[192.64753723 -54.12723160]
[185.83229065 -39.86792374]
[170.90269470 -34.68303680]
[164.57772827 -21.08176041]
[158.25274658 -7.48048687]
[151.92776489 6.12078762]
[153.57693481 20.92381096]
[140.74206543 30.17459106]
[134.41709900 43.77586365]
[128.09211731 57.37714005]
[133.18470764 61.21017456]
[137.75993347 65.64795685]
[141.74645996 70.62129974]
[145.08215332 76.05266571]
[147.71499634 81.85738373]
[149.60394287 87.94495392]
[150.71954346 94.22045898]
[151.04440308 100.58607483]
[150.57347107 106.94255066]
[164.97311401 111.14377594]
[178.71202087 103.80344391]
[193.25544739 108.26920319]
[200.16867065 121.41237640]
[214.56831360 125.61360168]
[228.96795654 129.81481934]
[243.40670776 133.87959290]
[257.88327026 137.80755615]
[272.35986328 141.73553467]
[287.70458984 137.88200378]
[297.96160889 148.68212891]
[312.43817139 152.61009216]
[326.91476440 156.53805542]
[341.39132690 160.46603394]
[354.97674561 152.39064026]
[370.27243042 156.36772156]
[378.20373535 170.03776550]
[374.06515503 185.29055786]
[360.31204224 193.07688904]
[345.10385132 188.77728271]
[337.46334839 174.94259644]
[322.98678589 171.01463318]
[308.51022339 167.08666992]
[294.03363037 163.15869141]
[279.72436523 167.29318237]
[268.43188477 156.21209717]
[253.95530701 152.28413391]
[239.47874451 148.35617065]
[232.16757202 149.64515686]
[224.76673889 144.21446228]
[210.36709595 140.01324463]
[195.96745300 135.81202698]
[183.07121277 143.17561340]
[168.40806580 139.12011719]
[160.77189636 125.54341888]
[146.37225342 121.34220123]
[137.59106445 134.53675842]
[125.18609619 144.40197754]
[110.35320282 149.98686218]
[111.20437622 164.96269226]
[112.05555725 179.93852234]
[112.90673828 194.91435242]
[113.75791931 209.89018250]
[114.75076294 224.85728455]
[115.88520050 239.81433105]
[129.50573730 247.05894470]
[137.02738953 260.52847290]
[136.05001831 275.92486572]
[126.88549042 288.33514404]
[112.45819855 293.79925537]
[97.37181091 290.57363892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 159]
[4 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[27 40]
[28 39]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[50 70]
[51 69]
[52 68]
[53 67]
[55 65]
[56 64]
[84 105]
[85 104]
[86 103]
[88 101]
[89 100]
[90 99]
[91 98]
[114 150]
[115 149]
[118 146]
[119 145]
[120 144]
[121 142]
[122 141]
[123 140]
[125 138]
[126 137]
[127 136]
[128 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
