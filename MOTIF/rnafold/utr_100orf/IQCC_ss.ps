%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGACGUACUUCGCAGGCGCGCGGGCGGGCCUGGCAGUUGGCGCCCAUGGAGCCAGAGCUGCUGGUUCGGAAGGUGUCUGCAUUGCAGGUGCGGGGGCGGGCGCGGGGUUCACAGGAUUUUUCCUUUAGGGAAAUCAUGGGGUCUC\
) } def
/len { sequence length } bind def

/coor [
[90.09162903 194.41484070]
[79.21649933 182.94718933]
[79.71898651 167.15087891]
[91.30097961 156.39759827]
[91.61936188 141.40098572]
[91.93774414 126.40436554]
[77.57778931 116.10697937]
[72.40348053 99.21109009]
[78.53456116 82.63838959]
[69.87305450 70.39183044]
[61.21154022 58.14527512]
[52.55002975 45.89871216]
[43.88851929 33.65215302]
[35.22700882 21.40559387]
[26.56549835 9.15903473]
[20.63086128 5.99858999]
[17.67759323 1.04107809]
[17.80930519 -3.79617357]
[9.67535782 -16.39930344]
[-4.30891514 -23.79867554]
[-4.70949936 -38.68789291]
[-12.84344769 -51.29102325]
[-20.97739601 -63.89415359]
[-36.35087585 -64.87513733]
[-48.06201172 -74.60666656]
[-51.75361252 -89.19557190]
[-46.21312332 -102.99560547]
[-54.34707260 -115.59873962]
[-68.33134460 -122.99810791]
[-68.73192596 -137.88732910]
[-76.86587524 -150.49044800]
[-84.99982452 -163.09358215]
[-93.13377380 -175.69671631]
[-101.26772308 -188.29985046]
[-108.60272217 -193.86190796]
[-109.43725586 -201.25793457]
[-117.30186462 -214.03086853]
[-125.16647339 -226.80380249]
[-133.03108215 -239.57675171]
[-151.17041016 -248.26522827]
[-151.04931641 -267.56057739]
[-159.44892883 -279.98822021]
[-167.84855652 -292.41586304]
[-176.24818420 -304.84350586]
[-184.64779663 -317.27114868]
[-193.04742432 -329.69879150]
[-208.31140137 -328.71987915]
[-221.92604065 -335.46807861]
[-230.27944946 -348.04135132]
[-231.21160889 -363.00756836]
[-224.57209778 -376.34106445]
[-232.97172546 -388.76870728]
[-241.37135315 -401.19635010]
[-249.77096558 -413.62399292]
[-258.17059326 -426.05163574]
[-266.57022095 -438.47927856]
[-274.96981812 -450.90695190]
[-290.38458252 -455.35269165]
[-296.38632202 -470.23080444]
[-288.37103271 -484.12811279]
[-272.48733521 -486.38372803]
[-260.91986084 -475.26736450]
[-262.54217529 -459.30654907]
[-254.14256287 -446.87890625]
[-245.74295044 -434.45126343]
[-237.34332275 -422.02362061]
[-228.94369507 -409.59597778]
[-220.54408264 -397.16833496]
[-212.14445496 -384.74069214]
[-197.29685974 -385.92993164]
[-183.75744629 -379.48474121]
[-175.20547485 -367.04568481]
[-174.02020264 -351.89669800]
[-180.61978149 -338.09841919]
[-172.22015381 -325.67077637]
[-163.82052612 -313.24313354]
[-155.42091370 -300.81546021]
[-147.02128601 -288.38781738]
[-138.62167358 -275.96017456]
[-128.37254333 -274.90988159]
[-120.24716187 -268.22280884]
[-117.11585999 -257.94555664]
[-120.25814819 -247.44136047]
[-112.39353943 -234.66841125]
[-104.52893066 -221.89547729]
[-96.66432190 -209.12254333]
[-88.66458893 -196.43379211]
[-80.53063965 -183.83065796]
[-72.39669800 -171.22753906]
[-64.26274872 -158.62440491]
[-56.12879944 -146.02127075]
[-42.72632217 -139.52336121]
[-41.74394226 -123.73268127]
[-33.60999298 -111.12955475]
[-18.75287437 -110.49394989]
[-6.97962618 -101.12087250]
[-2.93581343 -86.44092560]
[-8.37426472 -72.02809906]
[-0.24031711 -59.42497253]
[7.89363098 -46.82184219]
[21.29610825 -40.32392883]
[22.27848816 -24.53325081]
[30.41243553 -11.93012142]
[38.81205750 0.49752328]
[47.47356796 12.74408340]
[56.13507843 24.99064255]
[64.79659271 37.23720169]
[73.45809937 49.48376083]
[82.11961365 61.73032379]
[90.78112030 73.97688293]
[106.51921082 73.17295837]
[120.13323975 81.10971069]
[127.18753815 95.20121765]
[125.38369751 110.85624695]
[137.05422974 120.27954865]
[152.65199280 122.92919159]
[157.69354248 136.94461060]
[169.36407471 146.36791992]
[181.03460693 155.79121399]
[192.70513916 165.21452332]
[204.37568665 174.63781738]
[216.04621887 184.06111145]
[227.71675110 193.48442078]
[239.38729858 202.90771484]
[255.42819214 202.64480591]
[265.52349854 215.11332703]
[261.92898560 230.74851990]
[247.40200806 237.55638123]
[233.08647156 230.31451416]
[229.96398926 214.57824707]
[218.29345703 205.15495300]
[206.62292480 195.73165894]
[194.95237732 186.30834961]
[183.28184509 176.88505554]
[171.61131287 167.46176147]
[159.94078064 158.03845215]
[148.27023315 148.61515808]
[133.50723267 146.63952637]
[127.63093567 131.95008850]
[115.96040344 122.52678680]
[113.12849426 124.28647614]
[110.10511780 125.69196320]
[106.93436432 126.72274017]
[106.61598206 141.71936035]
[106.29759979 156.71598816]
[117.41277313 167.95112610]
[117.24439240 183.75451660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 145]
[5 144]
[6 143]
[9 110]
[10 109]
[11 108]
[12 107]
[13 106]
[14 105]
[15 104]
[18 103]
[19 102]
[21 100]
[22 99]
[23 98]
[27 94]
[28 93]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[36 86]
[37 85]
[38 84]
[39 83]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[114 140]
[115 139]
[117 137]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
