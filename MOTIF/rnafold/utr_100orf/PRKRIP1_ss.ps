%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGUCAUACUUGCGCGCCGACGCCGCCGCUCGCUUGUGAAACUGGAAGGCUGCCAUGGCUAGCCCAGCCGCCUCCUCGGUGCGACCACCGAGGCCCAAGAAAGAGCCGCAGACGCUCGUCAUCCCCAAGAAUGCGGCGGAGGAGCAGAAGCUCA\
) } def
/len { sequence length } bind def

/coor [
[42.12062073 375.80883789]
[35.41864395 389.22836304]
[28.71666718 402.64788818]
[22.01469040 416.06738281]
[32.00609589 427.52340698]
[36.84818649 441.93252563]
[35.80257797 457.09744263]
[29.02872086 470.70565796]
[17.55957413 480.68197632]
[3.14410162 485.50512695]
[-12.01944065 484.43957520]
[-25.61872482 477.64779663]
[-35.57995605 466.16555786]
[-40.38412094 451.74374390]
[-39.29861832 436.58160400]
[-32.48898315 422.99127197]
[-20.99362755 413.04516602]
[-6.56551647 408.25997925]
[8.59517097 409.36541748]
[15.29714775 395.94589233]
[21.99912453 382.52636719]
[28.70110130 369.10687256]
[33.34339142 339.79888916]
[54.95040131 330.44650269]
[57.35657120 315.64074707]
[59.76274109 300.83499146]
[62.16890717 286.02923584]
[64.57508087 271.22348022]
[66.98124695 256.41772461]
[69.38741302 241.61196899]
[58.78420258 231.18557739]
[56.32456207 216.33921814]
[63.15852737 202.73222351]
[76.85260010 195.67683411]
[79.25877380 180.87109375]
[81.66493988 166.06533813]
[84.07111359 151.25958252]
[73.78328705 147.24638367]
[64.46994781 141.17849731]
[56.53926849 133.28642273]
[50.34593582 123.88127899]
[46.17536926 113.34255981]
[44.23066711 102.10283661]
[44.62290955 90.63005066]
[47.36523819 79.40801239]
[52.37107849 68.91597748]
[59.45656967 59.60821915]
[68.34717560 51.89437103]
[58.86049271 40.27529526]
[49.37381363 28.65622139]
[39.88713074 17.03714752]
[25.16592598 11.24088478]
[23.10997391 -3.51114345]
[13.62329292 -15.13021755]
[7.50223637 -17.86538696]
[4.21572113 -22.59018707]
[3.99994230 -27.41351700]
[-5.01119137 -39.40515900]
[-14.02232552 -51.39680099]
[-29.64028740 -55.06542587]
[-36.37919235 -69.62449646]
[-29.06953239 -83.90554810]
[-13.31864929 -86.95337677]
[-1.20927453 -76.42994690]
[-2.03068399 -60.40793228]
[6.98044968 -48.41629028]
[15.99158382 -36.42465210]
[25.24236679 -24.61689758]
[34.72904587 -12.99782372]
[48.77170181 -8.03263569]
[51.50620651 7.55046606]
[60.99288940 19.16954041]
[70.47956848 30.78861427]
[79.96624756 42.40768814]
[94.63215637 39.25947189]
[98.51443481 24.77058601]
[102.39672089 10.28169823]
[106.27900696 -4.20718956]
[110.16129303 -18.69607735]
[114.04357910 -33.18496323]
[117.92586517 -47.67385101]
[121.80815125 -62.16273880]
[117.04340363 -77.85443115]
[128.44644165 -89.64012909]
[144.28680420 -85.39572144]
[148.26927185 -69.48748016]
[136.29704285 -58.28045273]
[132.41474915 -43.79156494]
[128.53247070 -29.30267906]
[124.65018463 -14.81379128]
[120.76789856 -0.32490379]
[116.88561249 14.16398335]
[113.00332642 28.65287018]
[109.12104034 43.14175797]
[118.30645752 46.08949661]
[126.76802826 50.49034500]
[134.28134155 56.18634796]
[140.65417480 62.98588181]
[145.73143005 70.66993713]
[149.39874268 78.99907684]
[163.88761902 75.11679077]
[171.02787781 64.33034515]
[183.21864319 61.41700363]
[193.76559448 67.41355896]
[208.32971191 63.82382584]
[222.89384460 60.23408890]
[237.45797729 56.64435577]
[244.18788147 42.52903366]
[258.43780518 36.08904648]
[273.47940063 40.36516190]
[282.21041870 53.33832169]
[280.50839233 68.88300323]
[269.17697144 79.65948486]
[253.56646729 80.57942963]
[241.04769897 71.20848083]
[226.48358154 74.79821777]
[211.91944885 78.38795471]
[197.35533142 81.97768402]
[185.40884399 94.79918671]
[167.76991272 89.60568237]
[153.28102112 93.48796082]
[152.95779419 108.76047516]
[148.34552002 123.32347870]
[139.81774902 135.99751282]
[128.06513977 145.75611877]
[114.03952789 151.80892944]
[98.87686157 153.66574097]
[96.47069550 168.47149658]
[94.06452942 183.27725220]
[91.65835571 198.08300781]
[102.41346741 209.11177063]
[104.58683777 224.18260193]
[97.55241394 237.48602295]
[84.19316864 244.01814270]
[81.78700256 258.82391357]
[79.38082886 273.62963867]
[76.97466278 288.43539429]
[74.56849670 303.24114990]
[72.16232300 318.04690552]
[69.75615692 332.85266113]
[82.29407501 339.61596680]
[89.55654144 354.72268677]
[86.34415436 373.76028442]
[90.80670166 388.08111572]
[95.26924133 402.40191650]
[99.73178864 416.72271729]
[112.14558411 427.43859863]
[108.80690002 443.49429321]
[93.15029144 448.37307739]
[81.28193665 437.05609131]
[85.41098022 421.18527222]
[80.94843292 406.86447144]
[76.48588562 392.54364014]
[72.02333832 378.22283936]
[64.54766083 377.61932373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[24 140]
[25 139]
[26 138]
[27 137]
[28 136]
[29 135]
[30 134]
[34 130]
[35 129]
[36 128]
[37 127]
[48 74]
[49 73]
[50 72]
[51 71]
[53 69]
[54 68]
[57 67]
[58 66]
[59 65]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[100 121]
[101 120]
[104 118]
[105 117]
[106 116]
[107 115]
[143 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
