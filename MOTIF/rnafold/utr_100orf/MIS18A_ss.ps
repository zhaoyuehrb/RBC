%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:48:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGUUUUUUUUCCCAUGGCGCUCUGGGGCGCGGGCGAUUUGUAGGUAAUGGCAGGCGUUCGGUCACUGAGGUGUAGCAGAGGAUGCGCUGGCGGCUGUGAGUGCGGCGACAAGGGCAAAUGCAGCGACUCCUCGCUGUUGGGCAAGA\
) } def
/len { sequence length } bind def

/coor [
[88.06227112 100.75080109]
[92.84532166 98.51109314]
[79.50848389 91.64604950]
[63.69731522 92.20953369]
[55.92234421 79.50524139]
[42.58551025 72.64019012]
[29.24867630 65.77514648]
[15.91184235 58.91009903]
[2.09862566 65.72927856]
[-12.90591621 63.13753891]
[-23.38331604 52.33531570]
[-25.46594048 37.61116028]
[-38.80277634 30.74611664]
[-52.13961029 23.88106918]
[-65.47644043 17.01602364]
[-78.81327820 10.15097713]
[-90.19835663 18.33652115]
[-103.93644714 20.79282951]
[-117.32476807 17.09480095]
[-127.75441742 8.02243042]
[-133.21871948 -4.60288668]
[-132.69915771 -18.28380966]
[-145.89126587 -25.42302132]
[-159.08337402 -32.56223297]
[-172.27548218 -39.70144272]
[-185.46757507 -46.84065247]
[-201.28701782 -46.60405731]
[-208.79777527 -59.46632004]
[-221.98988342 -66.60552979]
[-235.18199158 -73.74474335]
[-248.44715881 -80.74724579]
[-261.78399658 -87.61228943]
[-275.12081909 -94.47734070]
[-284.24652100 -95.63720703]
[-288.66018677 -101.62456512]
[-301.85229492 -108.76377869]
[-315.04437256 -115.90299225]
[-328.23648071 -123.04219818]
[-341.42858887 -130.18141174]
[-354.62069702 -137.32061768]
[-363.72048950 -138.66883850]
[-368.00946045 -144.74613953]
[-381.05117798 -152.15646362]
[-394.09292603 -159.56678772]
[-407.13467407 -166.97712708]
[-420.17642212 -174.38745117]
[-434.25201416 -167.85617065]
[-449.47186279 -170.87870789]
[-459.98364258 -182.29283142]
[-461.74533081 -197.70957947]
[-454.07955933 -211.20088196]
[-439.93395996 -217.57908630]
[-424.74780273 -214.39161682]
[-414.36044312 -202.86413574]
[-412.76608276 -187.42918396]
[-399.72436523 -180.01885986]
[-386.68261719 -172.60853577]
[-373.64086914 -165.19821167]
[-360.59912109 -157.78788757]
[-347.48150635 -150.51272583]
[-334.28939819 -143.37351990]
[-321.09729004 -136.23431396]
[-307.90518188 -129.09509277]
[-294.71307373 -121.95588684]
[-281.52096558 -114.81667328]
[-268.25579834 -107.81417084]
[-254.91894531 -100.94912720]
[-241.58212280 -94.08408356]
[-234.14855957 -93.81747437]
[-228.04277039 -86.93685150]
[-214.85066223 -79.79763794]
[-201.65856934 -72.65842438]
[-186.78271484 -73.40567017]
[-178.32836914 -60.03276062]
[-165.13626099 -52.89355087]
[-151.94415283 -45.75433731]
[-138.75204468 -38.61512756]
[-125.55994415 -31.47591591]
[-112.03490448 -40.26494980]
[-95.83065033 -41.05667877]
[-81.34692383 -33.54173279]
[-72.56381989 -19.67898178]
[-71.94823456 -3.18585634]
[-58.61139679 3.67918968]
[-45.27456284 10.54423618]
[-31.93772888 17.40928268]
[-18.60089493 24.27432823]
[-5.40749741 17.41340637]
[9.47205448 19.66350174]
[20.30013084 30.36892891]
[22.77688789 45.57326508]
[36.11372375 52.43831253]
[49.45055771 59.30335617]
[62.78739166 66.16840363]
[77.64462280 65.11388397]
[86.37353516 78.30921173]
[99.71036530 85.17425537]
[114.69755554 85.79413605]
[128.55574036 80.05387878]
[142.41394043 74.31362915]
[156.27212524 68.57337952]
[170.13032532 62.83312607]
[179.67878723 49.50049973]
[195.97073364 51.37246323]
[202.24642944 66.52330017]
[192.04994202 79.36712646]
[175.87057495 76.69132233]
[162.01239014 82.43157196]
[148.15419006 88.17182159]
[134.29598999 93.91207123]
[120.43780518 99.65232849]
[118.97462463 107.00821686]
[133.88835144 108.61463928]
[148.87588501 108.00288391]
[154.80442810 121.78157043]
[144.05516052 132.24356079]
[130.44151306 125.94308472]
[116.04827118 121.71999359]
[114.58509064 129.07588196]
[125.19169617 139.68247986]
[138.64372253 136.51722717]
[151.79421997 140.39726257]
[161.22311401 150.20152283]
[164.53381348 163.28312683]
[160.96174622 176.18328857]
[171.34687805 187.00683594]
[181.73200989 197.83038330]
[192.11714172 208.65391541]
[202.50227356 219.47746277]
[212.88740540 230.30101013]
[223.27253723 241.12454224]
[239.16403198 245.17329407]
[243.34239197 261.03121948]
[231.50926208 272.38504028]
[215.83757019 267.55490112]
[212.44898987 251.50967407]
[202.06385803 240.68614197]
[191.67874146 229.86259460]
[181.29360962 219.03904724]
[170.90847778 208.21551514]
[160.52334595 197.39196777]
[150.13821411 186.56842041]
[133.98561096 189.32908630]
[119.21212769 181.86361694]
[111.70444489 166.92573547]
[114.58509064 150.28909302]
[103.97849274 139.68247986]
[94.10737610 134.73175049]
[87.08650970 127.71381378]
[83.22122192 119.75828552]
[82.43212128 111.98741150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[5 94]
[6 93]
[7 92]
[8 91]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[28 72]
[29 71]
[30 70]
[31 68]
[32 67]
[33 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[119 147]
[120 146]
[125 142]
[126 141]
[127 140]
[128 139]
[129 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
