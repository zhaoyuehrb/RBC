%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUGGCUCUCUGGCGCGGGGCCCCUUAGUCCGGGCUUUUUGCCAUGGGGUCUCUGUUCCCUCUGUCGCUGCUGUUUUUUUUGGCGGCCGCCUACCCGGGAGUUGGGAGCGCGCUGGGACGCCGGACUAAGCGGGCGCAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[96.51287079 119.83411407]
[88.60036469 132.57743835]
[80.68785095 145.32075500]
[72.77534485 158.06407166]
[64.86283875 170.80738831]
[56.95032501 183.55072021]
[49.03781891 196.29403687]
[41.26192856 209.12117004]
[33.62355042 222.03067017]
[25.98516846 234.94017029]
[26.35108566 251.33523560]
[12.19692421 259.61724854]
[-1.91672635 251.26638794]
[-1.47095346 234.87330627]
[13.07567024 227.30178833]
[20.71405029 214.39228821]
[28.35243034 201.48278809]
[29.05662537 194.07202148]
[36.29449844 188.38153076]
[44.20700836 175.63819885]
[52.11951447 162.89488220]
[60.03202438 150.15156555]
[67.94453430 137.40824890]
[75.85704041 124.66492462]
[83.76955414 111.92160797]
[81.58525848 91.84834290]
[97.91355896 79.97004700]
[102.02757263 65.54524994]
[106.14157867 51.12044525]
[110.25559235 36.69564438]
[114.36960602 22.27084351]
[118.48361969 7.84604216]
[122.59763336 -6.57875967]
[126.71164703 -21.00356102]
[111.64472198 -20.49097633]
[102.77982330 -31.10803604]
[88.02663422 -33.81792450]
[73.27345276 -36.52781296]
[59.30336761 -28.64008331]
[44.48081207 -34.77779007]
[40.17638397 -50.23260880]
[49.69207001 -63.14892578]
[65.72824860 -63.61845016]
[75.98333740 -51.28099823]
[90.73652649 -48.57110977]
[105.48971558 -45.86122131]
[115.34450531 -52.07844925]
[127.44578552 -49.54550934]
[134.78309631 -38.72309875]
[142.96611023 -51.29441833]
[144.01005554 -67.08114624]
[157.43775940 -73.52675629]
[165.62078857 -86.09807587]
[173.80380249 -98.66939545]
[181.98683167 -111.24072266]
[190.16986084 -123.81204224]
[197.80824280 -136.72154236]
[204.88801575 -149.94563293]
[211.96780396 -163.16972351]
[219.04759216 -176.39381409]
[226.12738037 -189.61791992]
[233.20715332 -202.84201050]
[240.28694153 -216.06610107]
[239.24136353 -234.41769409]
[254.43389893 -243.14085388]
[261.22946167 -256.51321411]
[260.58374023 -272.32125854]
[273.24740601 -280.16220093]
[280.04299927 -293.53457642]
[285.96783447 -307.31484985]
[290.99758911 -321.44644165]
[288.33566284 -337.04211426]
[299.89270020 -346.43807983]
[304.92245483 -360.56967163]
[309.95220947 -374.70123291]
[314.98199463 -388.83282471]
[320.01174927 -402.96438599]
[325.04150391 -417.09597778]
[318.03491211 -431.26223755]
[323.17666626 -446.20675659]
[337.41622925 -453.06317139]
[352.30551147 -447.76373291]
[359.01101685 -433.45245361]
[353.55444336 -418.62002563]
[339.17309570 -412.06622314]
[334.14331055 -397.93463135]
[329.11355591 -383.80307007]
[324.08380127 -369.67147827]
[319.05404663 -355.53991699]
[314.02429199 -341.40832520]
[317.04595947 -326.82345581]
[305.12918091 -316.41668701]
[300.09939575 -302.28509521]
[314.24157715 -307.28503418]
[327.86102295 -300.99932861]
[333.23168945 -286.99377441]
[327.30688477 -273.21347046]
[313.44763184 -267.47579956]
[299.51605225 -273.03561401]
[293.41534424 -286.73901367]
[286.61978149 -273.36663818]
[287.75158691 -258.51510620]
[274.60183716 -249.71765137]
[267.80627441 -236.34529114]
[271.25790405 -224.70538330]
[265.64770508 -213.48736572]
[253.51103210 -208.98631287]
[246.43125916 -195.76222229]
[239.35147095 -182.53813171]
[232.27168274 -169.31404114]
[225.19189453 -156.08995056]
[218.11212158 -142.86584473]
[211.03233337 -129.64175415]
[211.77078247 -126.86758423]
[211.41491699 -123.62428284]
[209.77662659 -120.34230804]
[206.83267212 -117.51328278]
[202.74118042 -115.62902069]
[194.55815125 -103.05769348]
[186.37513733 -90.48637390]
[178.19210815 -77.91505432]
[170.00907898 -65.34373474]
[169.55044556 -50.45618820]
[155.53744507 -43.11139679]
[147.35441589 -30.54007530]
[141.13644409 -16.88954926]
[137.02243042 -2.46474671]
[132.90841675 11.96005440]
[128.79440308 26.38485718]
[124.68039703 40.80965805]
[120.56638336 55.23445892]
[116.45236969 69.65926361]
[112.33835602 84.08406067]
[119.25865173 94.11302948]
[119.12844849 106.29718018]
[111.99542236 116.17597198]
[115.80023956 130.68539429]
[119.60505676 145.19480896]
[132.67437744 154.49925232]
[133.40455627 170.52568054]
[121.23545837 180.97999573]
[105.50218201 177.84254456]
[98.27394867 163.52011108]
[105.09563446 148.99963379]
[101.29081726 134.49021912]
[97.48600006 119.98078918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 17]
[9 16]
[10 15]
[27 133]
[28 132]
[29 131]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
[36 46]
[37 45]
[38 44]
[49 125]
[50 124]
[52 122]
[53 121]
[54 120]
[55 119]
[56 118]
[57 113]
[58 112]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
[65 104]
[66 103]
[68 101]
[69 100]
[70 93]
[71 92]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[136 146]
[137 145]
[138 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
