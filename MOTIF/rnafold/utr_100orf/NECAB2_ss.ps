%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGGCGCGGCGCGAUGUGCGAGCGGGCGGCGCGCCUGUGCAGGGCCGGCGCGCACAGGCUGCUCCGGGAGCCGCCGCAGCAGGGCCGGGCGCUGGGCGGGCUGCUGCGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[-52.46238327 159.53544617]
[-66.43242645 164.99784851]
[-80.40247345 170.46025085]
[-87.36289978 176.57656860]
[-94.81781006 175.87667847]
[-108.92831421 180.96527100]
[-123.03881836 186.05384827]
[-137.14932251 191.14242554]
[-151.25982666 196.23101807]
[-165.37033081 201.31959534]
[-179.48083496 206.40817261]
[-193.59133911 211.49676514]
[-203.94837952 223.45680237]
[-218.54571533 220.49589539]
[-232.65621948 225.58448792]
[-246.76672363 230.67306519]
[-253.00393677 242.05839539]
[-264.96121216 245.96508789]
[-275.98782349 240.79917908]
[-290.22879028 245.51033020]
[-304.46975708 250.22148132]
[-314.96792603 262.81991577]
[-331.07928467 259.76123047]
[-336.22988892 244.19190979]
[-325.12118530 232.12835693]
[-309.18090820 235.98051453]
[-294.93994141 231.26936340]
[-280.69897461 226.55821228]
[-269.83047485 212.84988403]
[-251.85530090 216.56256104]
[-237.74479675 211.47398376]
[-223.63429260 206.38539124]
[-214.28654480 194.78933716]
[-198.67993164 197.38626099]
[-184.56942749 192.29766846]
[-170.45892334 187.20909119]
[-156.34841919 182.12051392]
[-142.23791504 177.03192139]
[-128.12741089 171.94334412]
[-114.01689911 166.85476685]
[-99.90639496 161.76617432]
[-85.86487579 156.49021912]
[-71.89483643 151.02780151]
[-57.92479324 145.56539917]
[-55.67412567 134.22837830]
[-48.10740280 125.33216858]
[-37.05233002 121.20702362]
[-25.26887131 123.00827026]
[-15.76036549 130.39573669]
[-1.51940131 125.68457794]
[12.72156239 120.97342682]
[26.96252632 116.26228333]
[41.20349121 111.55113220]
[55.44445419 106.83998108]
[69.68541718 102.12882996]
[83.92638397 97.41767883]
[89.83173370 87.28639221]
[101.01309967 83.75182343]
[111.66880035 88.64796448]
[126.03012848 84.31758881]
[140.39146423 79.98720551]
[151.37034607 68.59534454]
[165.78941345 72.32894897]
[180.15075684 67.99856567]
[194.51208496 63.66819000]
[208.87341309 59.33781052]
[216.29965210 53.79633713]
[223.67495728 55.08879852]
[238.14646912 51.14225769]
[252.61799622 47.19572067]
[267.08950806 43.24917984]
[274.21520996 32.39780045]
[286.44607544 29.45757675]
[297.02536011 35.48679733]
[311.59683228 31.92689514]
[326.16827393 28.36699486]
[340.63980103 24.42045593]
[355.00112915 20.09007645]
[369.36245728 15.75969791]
[375.36117554 1.31845665]
[389.26284790 -5.84235954]
[404.50354004 -2.34163165]
[413.88708496 10.16770267]
[412.98281860 25.77911949]
[402.21771240 37.12138367]
[386.67477417 38.83902740]
[373.69284058 30.12102890]
[359.33151245 34.45140839]
[344.97015381 38.78178787]
[341.91442871 42.60367584]
[336.37432861 44.46879578]
[329.72817993 42.93844223]
[315.15673828 46.49834442]
[300.58526611 50.05824280]
[288.65768433 62.85571289]
[271.03604126 57.72069931]
[256.56451416 61.66723633]
[242.09300232 65.61377716]
[227.62149048 69.56031799]
[213.20379639 73.69914246]
[198.84245300 78.02951813]
[184.48112488 82.35990143]
[170.11979675 86.69027710]
[160.16812134 97.77239990]
[144.72183228 94.34854126]
[130.36050415 98.67891693]
[115.99917603 103.00929260]
[104.90689087 115.52262878]
[88.63753510 111.65863800]
[74.39656830 116.36978912]
[60.15560532 121.08094025]
[45.91464233 125.79209137]
[31.67367744 130.50325012]
[17.43271446 135.21440125]
[3.19174933 139.92555237]
[-11.04921436 144.63668823]
[-18.79002571 161.81723022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[14 32]
[15 31]
[16 30]
[19 28]
[20 27]
[21 26]
[49 116]
[50 115]
[51 114]
[52 113]
[53 112]
[54 111]
[55 110]
[56 109]
[59 107]
[60 106]
[61 105]
[63 103]
[64 102]
[65 101]
[66 100]
[68 99]
[69 98]
[70 97]
[71 96]
[74 94]
[75 93]
[76 92]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
