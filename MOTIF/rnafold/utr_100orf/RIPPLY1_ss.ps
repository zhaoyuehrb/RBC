%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCUGGGAAGUAGGAGACCCCACUGGCUUUGGUCCCCUAAGAAUGGACUCUGCUGCCUGUGCUGCUGCUGCCACCCCUGUUCCAGCCCUGGCUUUGGCCCUAGCUCCAGACCUAGCACAAGCCCCACUGGCACUCCCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[104.75074005 244.72123718]
[104.75074005 229.72123718]
[104.75074005 214.72123718]
[104.75074005 199.72123718]
[96.39933777 190.90623474]
[96.32051086 178.36177063]
[105.10501099 168.85150146]
[105.42997742 153.85502625]
[105.75494385 138.85853577]
[106.07991028 123.86206055]
[92.33302307 117.86013794]
[81.55548096 128.29298401]
[70.77793121 138.72584534]
[66.24394226 153.88346863]
[51.71787643 157.17631531]
[40.94033051 167.60917664]
[36.96184540 183.51840210]
[21.12255096 187.76678467]
[9.71655464 175.98394775]
[14.47736835 160.29106140]
[30.50747490 156.83161926]
[41.28502274 146.39877319]
[45.04813004 131.98736572]
[60.34507370 127.94830322]
[71.12261963 117.51544189]
[81.90016937 107.08258820]
[77.88724518 92.62934113]
[63.27372742 89.24627686]
[48.66020966 85.86321259]
[38.09035492 94.28269958]
[24.79376602 95.04216003]
[13.66487217 88.08755493]
[8.67025280 76.16315460]
[-5.86654329 72.46429443]
[-20.40333939 68.76543427]
[-34.94013596 65.06657410]
[-49.47692871 61.36771011]
[-60.68999100 71.96350098]
[-75.85574341 74.79254913]
[-90.13484955 68.95211792]
[-98.97090149 56.30586624]
[-99.54434204 40.88916397]
[-91.67219543 27.62142754]
[-77.86643219 20.73634338]
[-62.53241730 22.43091583]
[-50.56318283 32.16441345]
[-45.77806854 46.83091354]
[-31.24127197 50.52977371]
[-16.70447731 54.22863770]
[-2.16768169 57.92749786]
[12.36911392 61.62635803]
[26.40591812 52.42402649]
[43.09145355 56.26155090]
[52.04327011 71.24969482]
[66.65678406 74.63275909]
[81.27030182 78.01582336]
[96.01665497 75.26897430]
[108.43199158 66.85116577]
[120.84732819 58.43336105]
[127.92750549 44.28480530]
[142.80380249 43.54650497]
[155.21913147 35.12869644]
[167.63447571 26.71089172]
[170.73535156 11.44582462]
[183.44618225 3.08583379]
[197.97998047 6.13612461]
[210.39530945 -2.28168106]
[222.81065369 -10.69948673]
[225.91152954 -25.96455383]
[238.62236023 -34.32454681]
[253.15615845 -31.27425385]
[265.57150269 -39.69206238]
[277.98681641 -48.10986710]
[275.83743286 -63.18107605]
[280.42605591 -77.63208008]
[290.79156494 -88.61280823]
[304.83905029 -93.98207092]
[319.76315308 -92.72493744]
[332.60827637 -85.14411926]
[345.02362061 -93.56192780]
[357.43893433 -101.97973633]
[357.97702026 -111.52543640]
[362.81515503 -119.61100769]
[370.73666382 -124.45310974]
[379.86282349 -125.05376434]
[388.09768677 -121.40365601]
[401.03356934 -128.99726868]
[413.96942139 -136.59089661]
[415.59976196 -151.90911865]
[425.81790161 -163.19819641]
[440.54989624 -166.26945496]
[454.10324097 -160.15025330]
[467.03912354 -167.74386597]
[479.97500610 -175.33749390]
[487.59683228 -189.85780334]
[503.99139404 -190.24679565]
[512.29333496 -176.10430908]
[503.96231079 -161.97891235]
[487.56860352 -162.40161133]
[474.63275146 -154.80799866]
[461.69686890 -147.21437073]
[460.43344116 -132.39743042]
[450.57080078 -121.03115082]
[435.73297119 -117.61183929]
[421.56304932 -123.65501404]
[408.62716675 -116.06139374]
[395.69131470 -108.46777344]
[387.23696899 -89.68399048]
[365.85675049 -89.56439972]
[353.44140625 -81.14659119]
[341.02606201 -72.72878265]
[343.31402588 -57.99003220]
[338.95788574 -43.66056824]
[328.77044678 -32.59814835]
[314.73294067 -27.03321838]
[299.60986328 -28.11934662]
[286.40463257 -35.69453049]
[273.98928833 -27.27672577]
[261.57397461 -18.85891914]
[259.02810669 -4.22832966]
[246.55709839 4.48538399]
[231.22845459 1.71584785]
[218.81312561 10.13365364]
[206.39778137 18.55146027]
[203.85192871 33.18204880]
[191.38092041 41.89576340]
[176.05227661 39.12622833]
[163.63693237 47.54403305]
[151.22160339 55.96183777]
[145.02944946 69.50830078]
[129.26513672 70.84870148]
[116.84979248 79.26650238]
[104.43446350 87.68431091]
[116.73517609 90.14691925]
[125.41813660 104.12669373]
[121.07639313 124.18702698]
[120.75142670 139.18350220]
[120.42645264 154.17999268]
[120.10148621 169.17646790]
[129.34333801 185.06379700]
[119.75074005 199.72123718]
[119.75074005 214.72123718]
[119.75074005 229.72123718]
[119.75074005 244.72123718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 141]
[7 139]
[8 138]
[9 137]
[10 136]
[11 26]
[12 25]
[13 24]
[15 22]
[16 21]
[27 56]
[28 55]
[29 54]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[57 133]
[58 132]
[59 131]
[61 129]
[62 128]
[63 127]
[66 124]
[67 123]
[68 122]
[71 119]
[72 118]
[73 117]
[79 111]
[80 110]
[81 109]
[86 107]
[87 106]
[88 105]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
