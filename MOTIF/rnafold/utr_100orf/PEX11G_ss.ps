%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUCGCGGUGACGUCACGGAGUUGCCAUGGCGUCGCUGAGCGGCCUGGCGUCGGCGCUGGAGUCGUACAGGGGCCGGGACCGCCUGAUCCGAGUGCUGGGGUACUGCUGCCAGCUGGUUGGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[12.27411938 236.57072449]
[0.51418048 245.88221741]
[-11.24575806 255.19369507]
[-23.00569725 264.50518799]
[-34.76563644 273.81668091]
[-46.52557373 283.12817383]
[-58.28551102 292.43966675]
[-64.30173492 307.07235718]
[-79.08292389 308.90698242]
[-90.84285736 318.21847534]
[-102.60279846 327.52996826]
[-114.36273956 336.84146118]
[-126.12267303 346.15295410]
[-137.88261414 355.46444702]
[-137.10585022 370.96206665]
[-145.61488342 383.93804932]
[-160.13781738 389.40286255]
[-175.09028625 385.25515747]
[-184.72274780 373.08984375]
[-185.33134460 357.58468628]
[-176.68205261 344.70178223]
[-162.10069275 339.39483643]
[-147.19410706 343.70449829]
[-135.43415833 334.39300537]
[-123.67422485 325.08151245]
[-111.91428375 315.77005005]
[-100.15435028 306.45855713]
[-88.39440918 297.14706421]
[-83.21933746 283.18038940]
[-67.59700012 280.67971802]
[-55.83706284 271.36822510]
[-44.07712555 262.05673218]
[-32.31718826 252.74525452]
[-20.55724716 243.43376160]
[-8.79730988 234.12226868]
[2.96262908 224.81077576]
[13.10769939 213.76191711]
[21.38421440 201.25193787]
[29.66073036 188.74197388]
[37.93724823 176.23200989]
[39.01525116 168.84136963]
[46.57072830 163.52157593]
[55.14942169 151.21685791]
[63.72811127 138.91213989]
[72.30680847 126.60742188]
[80.88549805 114.30270386]
[76.13011932 100.40049744]
[80.41643524 86.34658813]
[92.12083435 77.46446228]
[106.80978394 77.11859894]
[115.38848114 64.81388092]
[116.93395233 49.06834412]
[130.55986023 43.05303955]
[139.13854980 30.74832344]
[147.71725464 18.44360733]
[156.29594421 6.13889122]
[164.87463379 -6.16582489]
[173.45332336 -18.47054100]
[182.03201294 -30.77525711]
[190.61071777 -43.07997131]
[199.03894043 -55.48823547]
[207.31546021 -67.99819946]
[215.59197998 -80.50817108]
[212.35838318 -87.58745575]
[211.84725952 -95.28462219]
[214.07635498 -102.59784698]
[218.70993042 -108.59251404]
[225.10832214 -112.52064514]
[232.41590881 -113.91406250]
[239.67546082 -112.63976288]
[249.41023254 -124.05178833]
[259.14501953 -135.46380615]
[268.87979126 -146.87582397]
[278.47488403 -158.40553284]
[287.92886353 -170.05120850]
[286.04693604 -185.74305725]
[295.87756348 -198.11779785]
[311.58840942 -199.83374023]
[323.85852051 -189.87283325]
[325.40826416 -174.14469910]
[315.31817627 -161.98057556]
[299.57455444 -160.59722900]
[290.12057495 -148.95153809]
[288.32885742 -141.70077515]
[280.29180908 -137.14105225]
[270.55703735 -125.72902679]
[260.82223511 -114.31700897]
[251.08747864 -102.90499115]
[249.74295044 -80.50180817]
[228.10194397 -72.23165131]
[219.82542419 -59.72168732]
[211.54890442 -47.21171951]
[210.47090149 -39.82107544]
[202.91542053 -34.50128174]
[194.33673096 -22.19656372]
[185.75804138 -9.89184856]
[177.17935181 2.41286755]
[168.60066223 14.71758366]
[160.02197266 27.02229881]
[151.44326782 39.32701492]
[142.86457825 51.63173294]
[141.93270874 66.49715424]
[127.69319153 73.39257812]
[119.11450195 85.69729614]
[123.86988068 99.59950256]
[119.58356476 113.65341187]
[107.87916565 122.53553772]
[93.19021606 122.88140106]
[84.61151886 135.18611145]
[76.03282928 147.49082947]
[67.45413971 159.79554749]
[58.87544250 172.10026550]
[50.44721603 184.50852966]
[42.17070007 197.01849365]
[33.89418411 209.52845764]
[25.61766624 222.03842163]
[39.69853973 216.86840820]
[54.67315674 217.74066162]
[68.05854797 224.51052856]
[77.63526917 236.05551147]
[81.81536865 250.46130371]
[79.90574646 265.33923340]
[72.22303772 278.22241211]
[60.04112625 286.97460938]
[45.37991714 290.14462280]
[30.67041779 287.20684814]
[18.35163498 278.64837646]
[10.46616745 265.88830566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[37 116]
[38 115]
[39 114]
[40 113]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[50 104]
[51 103]
[53 101]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 92]
[62 91]
[63 90]
[70 88]
[71 87]
[72 86]
[73 85]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
