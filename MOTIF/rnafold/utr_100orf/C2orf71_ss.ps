%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGUGUACACCUUCACACAGUGACCUUGUAAACAGCGUUGCAAAGAGUGGCAUUCAGUUCUUGAAAAAGCCCAAAGCAAUUCGGCCAGGAUGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[131.05072021 181.84111023]
[134.63742065 172.39842224]
[124.79850006 161.07608032]
[114.95957184 149.75373840]
[105.12063599 138.43139648]
[90.14965820 137.49885559]
[78.98169708 147.51266479]
[67.81373596 157.52648926]
[56.64577103 167.54031372]
[58.36964035 182.96133423]
[50.67078018 196.43379211]
[36.50956345 202.77726746]
[21.33126259 199.55253601]
[10.97224712 187.99960327]
[9.41576862 172.56077576]
[17.26032448 159.17263794]
[31.48952484 152.98316956]
[46.63195038 156.37236023]
[57.79991150 146.35853577]
[68.96787262 136.34471130]
[80.13583374 126.33088684]
[70.28465271 105.65748596]
[76.51711273 85.66041565]
[66.33081818 74.64953613]
[51.27968216 69.77369690]
[48.31639862 55.17684174]
[38.13010406 44.16596222]
[27.77380371 33.31483078]
[17.25000191 22.62607193]
[6.72619867 11.93731308]
[-3.96256089 1.41351008]
[-14.81369209 -8.94279003]
[-25.66482353 -19.29909134]
[-36.51595306 -29.65539169]
[-52.30810928 -29.03621292]
[-63.85579300 -39.82632446]
[-64.30797577 -55.62414169]
[-53.39637756 -67.05710602]
[-37.59465790 -67.34223175]
[-26.27770233 -56.31037140]
[-26.15965271 -40.50652313]
[-15.30852222 -30.15022087]
[-4.45739126 -19.79392052]
[6.39373970 -9.43762112]
[13.53148174 -7.05473900]
[17.41495895 1.41351008]
[27.93876076 12.10226917]
[38.46256256 22.79102898]
[45.52274704 25.39474106]
[49.14098358 33.97966766]
[59.32727432 44.99054718]
[73.64981842 49.07881546]
[77.34169769 64.46324158]
[87.52799225 75.47412109]
[99.57209015 72.48842621]
[111.70322418 75.09810638]
[121.54215240 63.77576447]
[131.38108826 52.45341873]
[141.22001648 41.13107681]
[141.53700256 25.09115410]
[154.36224365 15.45306110]
[169.85729980 19.61031532]
[176.13569641 34.37382889]
[168.38117981 48.41829681]
[152.54235840 50.97000504]
[142.70343018 62.29234695]
[132.86450195 73.61469269]
[123.02557373 84.93703461]
[127.69306183 92.82048035]
[129.62538147 102.13594055]
[128.39346313 111.92486572]
[123.90617371 121.10556030]
[116.44298553 128.59246826]
[126.28191376 139.91481018]
[136.12083435 151.23715210]
[145.95977783 162.55949402]
[166.80680847 162.38819885]
[181.08917236 177.18315125]
[180.20774841 197.44415283]
[191.37570190 207.45797729]
[202.54367065 217.47180176]
[211.18382263 220.95608521]
[213.89701843 227.97491455]
[224.74815369 238.33122253]
[235.59928894 248.68751526]
[251.60696411 249.75227356]
[260.63638306 263.01309204]
[255.76097107 278.29739380]
[240.72070312 283.88037109]
[227.05319214 275.47924805]
[225.24298096 259.53866577]
[214.39186096 249.18235779]
[203.54072571 238.82604980]
[192.52984619 228.63975525]
[181.36187744 218.62593079]
[170.19392395 208.61212158]
[161.08920288 212.09660339]
[151.28332520 211.92294312]
[142.19960022 208.07246399]
[135.17292786 201.06332397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[6 21]
[7 20]
[8 19]
[9 18]
[23 54]
[24 53]
[26 51]
[27 50]
[28 48]
[29 47]
[30 46]
[31 44]
[32 43]
[33 42]
[34 41]
[56 68]
[57 67]
[58 66]
[59 65]
[79 96]
[80 95]
[81 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
