%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCGGAAGAGCUGACUCCAGCCUGUCCAUGCACGGCUACAAUGUUUAGGAUUGGGAGGAGACAGCUCUGGAAGCAUAGCGUCACUCGAGUUUUAACGCAAAGACUGAAGGGAGAGAAGGAAGCCAAGCGGGCUCUUUUGG\
) } def
/len { sequence length } bind def

/coor [
[58.61306000 120.52243805]
[53.89943695 102.96433258]
[38.97267914 101.48382568]
[24.04591942 100.00331879]
[9.11916161 98.52281952]
[4.22544670 100.74720001]
[-0.54417926 100.81154633]
[-4.37069654 99.13903046]
[-6.73057222 96.42139435]
[-21.52741623 93.96103668]
[-36.32426071 91.50067139]
[-51.12110519 89.04030609]
[-65.91795349 86.57994080]
[-80.71479797 84.11957550]
[-95.51164246 81.65921021]
[-110.39401245 87.02815247]
[-121.67980194 77.30806732]
[-136.47665405 74.84770203]
[-151.27349854 72.38733673]
[-166.07034302 69.92697144]
[-178.83964539 78.84786987]
[-193.81069946 76.14192200]
[-202.23672485 63.91335678]
[-217.03356934 61.45299149]
[-231.91593933 66.82193756]
[-243.20173645 57.10184479]
[-257.99856567 54.64148331]
[-272.79541016 52.18111801]
[-287.59225464 49.72075272]
[-296.65039062 51.40670013]
[-302.68563843 47.04038239]
[-317.42486572 44.25556564]
[-332.42160034 49.29628754]
[-343.49114990 39.33061981]
[-358.23037720 36.54580307]
[-372.96960449 33.76098251]
[-384.95504761 43.80502319]
[-400.59249878 43.74340439]
[-412.49844360 33.60522079]
[-415.05123901 18.17741203]
[-407.04553223 4.74451780]
[-392.26138306 -0.35085991]
[-377.67941284 5.29716063]
[-370.18478394 19.02175713]
[-355.44555664 21.80657578]
[-340.70632935 24.59139633]
[-326.76385498 19.35148430]
[-314.64004517 29.51633835]
[-299.90081787 32.30115891]
[-285.13189697 34.92390823]
[-270.33505249 37.38427353]
[-255.53820801 39.84463882]
[-240.74136353 42.30500031]
[-226.91735840 36.76007462]
[-214.57319641 46.65614700]
[-199.77635193 49.11651230]
[-187.84649658 40.27264786]
[-172.80534363 42.55702209]
[-163.60997009 55.13012695]
[-148.81312561 57.59049225]
[-134.01628113 60.05085373]
[-119.21943665 62.51121902]
[-105.39543915 56.96629333]
[-93.05127716 66.86236572]
[-78.25443268 69.32273102]
[-63.45758438 71.78309631]
[-48.66073990 74.24346161]
[-33.86389542 76.70382690]
[-19.06705093 79.16419220]
[-4.27020741 81.62454987]
[10.59966660 83.59606171]
[25.52642441 85.07656097]
[40.45318222 86.55706787]
[55.37994003 88.03757477]
[59.93478394 77.00374603]
[67.16481018 67.50538635]
[76.58726501 60.17672348]
[87.57300568 55.50708771]
[99.38851166 53.80827713]
[111.24484253 55.19371796]
[122.35034180 59.57090759]
[131.96350098 66.64757538]
[139.44242859 75.95121002]
[153.34744263 70.32532501]
[163.23826599 57.97695923]
[177.93840027 60.37596512]
[191.84341431 54.75007629]
[198.07772827 40.47523499]
[212.25953674 34.96786499]
[225.82998657 40.99930191]
[239.73500061 35.37341309]
[253.64001465 29.74752617]
[267.54504395 24.12163734]
[281.45004272 18.49575043]
[295.35507202 12.86986256]
[301.29165649 -1.77706313]
[315.87875366 -7.85917091]
[330.46209717 -1.76805401]
[336.38964844 12.88253498]
[330.14468384 27.40066338]
[315.43225098 33.17298126]
[300.98095703 26.77487564]
[287.07592773 32.40076447]
[273.17092896 38.02664948]
[259.26589966 43.65253830]
[245.36090088 49.27842712]
[231.45588684 54.90431595]
[225.89733887 68.67523193]
[211.87582397 74.57876587]
[197.46929932 68.65509033]
[183.56430054 74.28097534]
[174.66804504 86.22694397]
[158.97332764 84.23033905]
[145.06831360 89.85622406]
[145.92019653 105.03828430]
[141.79672241 119.67444611]
[133.14462280 132.17892456]
[142.06770325 144.23622131]
[150.99078369 156.29353333]
[159.91386414 168.35084534]
[168.83694458 180.40815735]
[177.76000977 192.46546936]
[185.44207764 197.55250549]
[186.74322510 204.88708496]
[195.39927673 217.13749695]
[204.05532837 229.38790894]
[219.55914307 233.51237488]
[225.86875916 248.26257324]
[218.14396667 262.32342529]
[202.31057739 264.90863037]
[190.51460266 254.03504944]
[191.80491638 238.04396057]
[183.14886475 225.79354858]
[174.49279785 213.54313660]
[165.70271301 201.38853455]
[156.77963257 189.33123779]
[147.85655212 177.27392578]
[138.93347168 165.21661377]
[130.01039124 153.15930176]
[121.08731842 141.10200500]
[103.59542084 146.05564880]
[85.54668427 143.87654114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[17 62]
[18 61]
[19 60]
[20 59]
[23 56]
[24 55]
[26 53]
[27 52]
[28 51]
[29 50]
[31 49]
[32 48]
[34 46]
[35 45]
[36 44]
[83 114]
[84 113]
[86 111]
[87 110]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[124 134]
[125 133]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
