%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAUGGGAAAACCAAACCAUUCUGGUGGAAUUUUUUCUGAAGGGACAUUCUGUUCACCCAAGGCUUGAGUUACUCUUUUUUGUGCUAAUCUUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[84.18037415 143.23007202]
[83.96898651 128.23156738]
[92.22187042 115.70558929]
[80.45295715 125.00572968]
[68.68404388 134.30587769]
[56.91512680 143.60601807]
[45.14621353 152.90615845]
[33.37730026 162.20629883]
[21.60838509 171.50645447]
[23.90936470 186.69200134]
[18.29435349 200.98771667]
[6.27376366 210.54809570]
[-8.91892910 212.80146790]
[-23.19696426 207.14167786]
[-32.71962357 195.09117126]
[-34.92536163 179.89149475]
[-29.22084045 165.63127136]
[-17.14055252 156.14642334]
[-1.93403220 153.98834229]
[12.30824184 159.73753357]
[24.07715607 150.43739319]
[35.84606934 141.13725281]
[47.61498260 131.83711243]
[59.38389969 122.53696442]
[71.15280914 113.23681641]
[82.92172241 103.93667603]
[86.61590576 89.39868927]
[80.71440887 75.60839844]
[74.81290436 61.81809998]
[68.91139984 48.02780533]
[63.00989532 34.23750687]
[57.10839081 20.44721222]
[41.11644745 20.75613213]
[26.25267410 14.95249557]
[14.75643635 3.94205475]
[8.34775829 -10.58737564]
[7.97001028 -26.42460823]
[13.65115166 -41.17158890]
[24.50392342 -52.60649490]
[18.17639732 -66.20658112]
[11.84887123 -79.80667114]
[-1.87981820 -88.77635193]
[-0.70614922 -105.13344574]
[14.16250801 -112.05117798]
[27.43055534 -102.41318512]
[25.44896126 -86.13420105]
[31.77648544 -72.53411102]
[38.10401154 -58.93402100]
[52.18241501 -60.06113434]
[65.82120514 -56.27904510]
[77.35739899 -48.02751160]
[85.37705994 -36.29254913]
[88.88854980 -22.48863220]
[87.44517517 -8.28822517]
[81.20182037 4.58086538]
[70.89868927 14.54570866]
[76.80018616 28.33600426]
[82.70169067 42.12630081]
[88.60319519 55.91659546]
[94.50469971 69.70689392]
[100.40620422 83.49718475]
[110.70231628 86.70326233]
[117.12448883 95.80966187]
[131.81895447 98.82176971]
[146.51341248 101.83386993]
[161.20788574 104.84597778]
[169.83209229 96.36006165]
[181.38719177 93.20504761]
[192.89237976 96.07220459]
[201.43933105 104.11487579]
[204.92729187 115.19384766]
[219.40606689 119.11367798]
[233.88484192 123.03350830]
[243.16883850 122.25878906]
[248.74929810 127.30694580]
[263.09915161 131.67515564]
[275.39871216 122.21467590]
[290.91085815 121.82411957]
[303.67089844 130.65368652]
[308.77230835 145.30821228]
[304.25350952 160.15274048]
[291.85208130 169.47924805]
[276.33657837 169.70149231]
[263.67309570 160.73403931]
[258.73095703 146.02502441]
[244.38107300 141.65681458]
[229.96501160 137.51228333]
[215.48623657 133.59245300]
[201.00746155 129.67262268]
[185.88249207 139.75131226]
[167.84655762 135.67942810]
[158.19577026 119.54044342]
[143.50131226 116.52833557]
[128.80685425 113.51622772]
[114.11238861 110.50411987]
[127.11745453 117.97862244]
[133.67559814 131.46900940]
[131.52050781 146.31340027]
[121.39691925 157.38194275]
[106.80326843 160.84970093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[39 48]
[40 47]
[41 46]
[63 95]
[64 94]
[65 93]
[66 92]
[71 89]
[72 88]
[73 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
