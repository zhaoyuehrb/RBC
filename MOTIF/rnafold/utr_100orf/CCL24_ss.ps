%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGGCCUGAUGACCAUAGUAACCAGCCUUCUGUUCCUUGGUGUCUGUGCCCACCACAUCAUCCCUACGGGCUCUGUGGUCAUCCCCUCUCCCUGCU\
) } def
/len { sequence length } bind def

/coor [
[96.98749542 492.68615723]
[84.10115814 481.66894531]
[91.12052155 466.23635864]
[92.05306244 451.26538086]
[92.98561096 436.29440308]
[93.91815186 421.32342529]
[94.85070038 406.35241699]
[95.78324127 391.38143921]
[79.95238495 380.24990845]
[73.74255371 361.77328491]
[79.72193146 343.07421875]
[95.72588348 331.46475220]
[94.79333496 316.49377441]
[93.86079407 301.52279663]
[92.92824554 286.55178833]
[91.99570465 271.58081055]
[91.06315613 256.60983276]
[90.13061523 241.63885498]
[89.19806671 226.66786194]
[88.26552582 211.69688416]
[87.33297729 196.72590637]
[86.40043640 181.75491333]
[84.44551086 180.18823242]
[82.95867157 177.78643799]
[82.24210358 174.71182251]
[82.53865051 171.22608948]
[84.00123596 167.66871643]
[86.66996002 164.42649841]
[88.06764984 149.49176025]
[89.46533203 134.55702209]
[90.86302185 119.62227631]
[92.26071167 104.68753815]
[90.09969330 101.25382233]
[89.55326080 96.85253143]
[91.02928162 92.26991272]
[94.54865265 88.44870758]
[97.33187103 73.70918274]
[87.49068451 65.67814636]
[82.09447479 54.25965500]
[82.13698578 41.70321655]
[87.54723358 30.45284653]
[97.21556091 22.67137718]
[109.22061920 19.82471657]
[112.91480255 5.28673124]
[116.60898590 -9.25125408]
[120.30316925 -23.78923798]
[114.36122131 -35.36724091]
[117.86196136 -47.48208237]
[128.37002563 -53.69486618]
[132.51454163 -68.11093140]
[136.65907288 -82.52699280]
[140.80360413 -96.94306183]
[134.32481384 -111.61973572]
[141.88742065 -125.76846313]
[157.69003296 -128.53555298]
[169.61024475 -117.79832458]
[168.50389099 -101.79346466]
[155.21966553 -92.79853058]
[151.07513428 -78.38246918]
[146.93061829 -63.96640396]
[142.78608704 -49.55033875]
[147.98841858 -32.86989594]
[134.84115601 -20.09505463]
[131.14697266 -5.55707026]
[127.45278931 8.98091507]
[123.75860596 23.51889992]
[135.63560486 36.39575958]
[137.55522156 53.96403122]
[128.58337402 69.36972046]
[112.07140350 76.49239349]
[109.28818512 91.23192596]
[107.19544983 106.08522034]
[105.79776764 121.01996613]
[104.40007782 135.95469666]
[103.00238800 150.88945007]
[101.60469818 165.82418823]
[101.37142181 180.82237244]
[102.30396271 195.79335022]
[103.23651123 210.76434326]
[104.16905212 225.73532104]
[105.10160065 240.70629883]
[106.03414154 255.67729187]
[106.96669006 270.64828491]
[107.89923096 285.61926270]
[108.83177948 300.59024048]
[109.76432037 315.56121826]
[110.69686890 330.53219604]
[120.99689484 334.40399170]
[129.32995605 341.53067017]
[134.71440125 351.03799438]
[136.52786255 361.77328491]
[134.57902527 372.44543457]
[129.12748718 381.77999878]
[120.84950256 388.67141724]
[110.75422668 392.31399536]
[109.82167816 407.28497314]
[108.88913727 422.25595093]
[107.95658875 437.22692871]
[107.02404785 452.19793701]
[106.09149933 467.16891479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[28 76]
[29 75]
[30 74]
[31 73]
[32 72]
[36 71]
[37 70]
[43 66]
[44 65]
[45 64]
[46 63]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
