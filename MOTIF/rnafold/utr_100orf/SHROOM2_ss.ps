%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCGGCGCUCGGAGCCUCCCUUGCGAUCCCACGGCCGGGACUGCCCGGAGUGCAUGGGCGCGGGCCAGGGACGCUGAGCGGUCGCGCCAUGGAGGGCGCCGAGCCCCGCGCGCGGCCCGAGCGCCUGGCCGAGGCCGAGACGCGGGCGGCGGACGGCGGGCGCCUGGUGGAGGUGCAGCUGAGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[96.15665436 591.94354248]
[81.30307007 598.00579834]
[67.37329102 590.04705811]
[65.05304718 574.17272949]
[76.12223816 562.56011963]
[77.10841370 547.59252930]
[70.22460938 534.38409424]
[78.85246277 521.12249756]
[79.83863831 506.15493774]
[80.82481384 491.18740845]
[81.81098938 476.21984863]
[82.79716492 461.25231934]
[83.78334045 446.28475952]
[84.76951599 431.31723022]
[74.04881287 413.69168091]
[86.18196106 396.04150391]
[86.42867279 381.04351807]
[86.67538452 366.04556274]
[86.92209625 351.04757690]
[87.16880798 336.04959106]
[87.41551971 321.05163574]
[87.53887939 306.05215454]
[87.53887939 291.05215454]
[77.95541382 276.35961914]
[87.27241516 260.48559570]
[87.02570343 245.48760986]
[86.77899933 230.48963928]
[84.01829529 226.57356262]
[83.69984436 220.87797546]
[86.77899933 214.99621582]
[87.02570343 199.99824524]
[87.27241516 185.00027466]
[85.08084106 182.21768188]
[84.13733673 178.22975159]
[84.99613190 173.63896179]
[87.91947174 169.27349854]
[88.90564728 154.30593872]
[89.89182281 139.33839417]
[90.87799835 124.37084961]
[78.19841766 114.20704651]
[74.02101898 98.50277710]
[79.97490692 83.38239288]
[93.73818970 74.74254608]
[94.47805023 59.76080322]
[95.21791840 44.77906036]
[95.95777893 29.79731941]
[96.69764709 14.81557751]
[97.43751526 -0.16616483]
[98.17737579 -15.14790726]
[90.10704041 -25.22361183]
[91.04180145 -37.69688797]
[99.93529510 -45.91216278]
[100.92147064 -60.87971115]
[90.32743073 -67.55210876]
[83.62024689 -78.03849792]
[82.02407837 -90.31081390]
[85.78160095 -102.02642059]
[94.11943054 -110.97531128]
[105.40636444 -115.49694824]
[106.88429260 -130.42396545]
[108.36222076 -145.35096741]
[96.94010162 -155.68737793]
[93.83087921 -170.59329224]
[100.02176666 -184.30958557]
[112.94753265 -191.66232300]
[114.42546082 -206.58932495]
[115.90338898 -221.51634216]
[117.38131714 -236.44335938]
[118.85925293 -251.37037659]
[120.33718109 -266.29739380]
[121.81510925 -281.22439575]
[119.43205261 -287.42092896]
[120.40272522 -293.04223633]
[123.59503174 -296.61523438]
[125.56311798 -311.48556519]
[127.53120422 -326.35589600]
[129.49928284 -341.22622681]
[120.55606842 -349.08996582]
[116.56768799 -360.18362427]
[118.41848755 -371.70477295]
[125.53300476 -380.80206299]
[136.04777527 -385.28082275]
[138.50389099 -400.07836914]
[140.95999146 -414.87594604]
[143.41610718 -429.67349243]
[145.87220764 -444.47103882]
[148.32832336 -459.26858521]
[150.78443909 -474.06613159]
[153.24053955 -488.86367798]
[143.87431335 -495.52346802]
[137.70448303 -505.15850830]
[135.59336853 -516.35095215]
[137.80937195 -527.47076416]
[143.99349976 -536.91290283]
[153.21685791 -543.32934570]
[164.12008667 -545.82116699]
[167.30308533 -560.47955322]
[170.48608398 -575.13793945]
[173.66908264 -589.79632568]
[166.23475647 -604.01287842]
[172.84603882 -618.63037109]
[188.43130493 -622.43548584]
[201.03488159 -612.50927734]
[200.98838806 -596.46630859]
[188.32748413 -586.61334229]
[185.14448547 -571.95495605]
[181.96148682 -557.29650879]
[178.77847290 -542.63812256]
[192.00686646 -529.45989990]
[194.66088867 -510.82574463]
[185.49304199 -494.21588135]
[168.03808594 -486.40759277]
[165.58198547 -471.61001587]
[163.12586975 -456.81246948]
[160.66976929 -442.01492310]
[158.21365356 -427.21737671]
[155.75753784 -412.41983032]
[153.30143738 -397.62228394]
[150.84532166 -382.82470703]
[162.37364197 -368.62039185]
[159.83192444 -350.18191528]
[144.36961365 -339.25814819]
[142.40153503 -324.38781738]
[140.43344116 -309.51748657]
[138.46536255 -294.64715576]
[136.74212646 -279.74645996]
[135.26419067 -264.81945801]
[133.78625488 -249.89244080]
[132.30833435 -234.96542358]
[130.83039856 -220.03840637]
[129.35247803 -205.11140442]
[127.87454224 -190.18438721]
[139.10748291 -180.43969727]
[142.48841858 -165.77568054]
[136.51654053 -151.76890564]
[123.28923798 -143.87304688]
[121.81130981 -128.94602966]
[120.33337402 -114.01901245]
[134.05450439 -102.92266846]
[138.41888428 -85.66238403]
[131.50027466 -69.08786774]
[115.88901520 -59.89353180]
[114.90283966 -44.92598724]
[123.49960327 -29.63519478]
[113.15911865 -14.40804195]
[112.41925812 0.57370067]
[111.67938995 15.55544281]
[110.93952179 30.53718567]
[110.19966125 45.51892853]
[109.45979309 60.50066757]
[108.71992493 75.48241425]
[119.65890503 82.95075226]
[125.50460815 94.83625793]
[124.74251556 108.05959320]
[117.57008362 119.19483185]
[105.84555054 125.35702515]
[104.85937500 140.32456970]
[103.87319946 155.29211426]
[102.88701630 170.25967407]
[102.27038574 185.24699402]
[102.02368164 200.24496460]
[101.77696991 215.24293518]
[101.77696991 230.24293518]
[102.02368164 245.24090576]
[102.27038574 260.23886108]
[110.98569489 269.76220703]
[110.87300873 282.26992798]
[102.53887939 291.05215454]
[102.53887939 306.05215454]
[105.67257690 314.65078735]
[102.41349030 321.29833984]
[102.16677856 336.29632568]
[101.92006683 351.29428101]
[101.67335510 366.29226685]
[101.42664337 381.29022217]
[101.17993164 396.28820801]
[108.60375977 402.15048218]
[112.43173218 410.64984131]
[111.91711426 419.81927490]
[107.30258942 427.59994507]
[99.73706055 432.30340576]
[98.75088501 447.27093506]
[97.76470947 462.23849487]
[96.77853394 477.20602417]
[95.79235840 492.17358398]
[94.80618286 507.14111328]
[93.82000732 522.10864258]
[100.63327789 536.38769531]
[92.07595825 548.57873535]
[91.08978271 563.54626465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 190]
[6 189]
[8 187]
[9 186]
[10 185]
[11 184]
[12 183]
[13 182]
[14 181]
[16 176]
[17 175]
[18 174]
[19 173]
[20 172]
[21 171]
[22 169]
[23 168]
[25 165]
[26 164]
[27 163]
[30 162]
[31 161]
[32 160]
[36 159]
[37 158]
[38 157]
[39 156]
[43 151]
[44 150]
[45 149]
[46 148]
[47 147]
[48 146]
[49 145]
[52 143]
[53 142]
[59 138]
[60 137]
[61 136]
[65 132]
[66 131]
[67 130]
[68 129]
[69 128]
[70 127]
[71 126]
[74 125]
[75 124]
[76 123]
[77 122]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[88 113]
[89 112]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
