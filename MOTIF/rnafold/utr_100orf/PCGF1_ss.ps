%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCCGGCUGGGAUCAGCCUUUAAGAUGGCGUCUCCUCAGGGGGGCCAGAUUGCGAUCGCGAUGAGGCUUCGGAACCAGCUCCAGUCAGUGUACAAGAUGGACCCGCUACGGAACGAGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[12.03945065 231.19009399]
[5.40685511 233.11581421]
[-1.44193792 232.83761597]
[-7.79918718 230.41731262]
[-19.22333145 240.13786316]
[-30.64747429 249.85839844]
[-41.05548096 260.65994263]
[-50.34553146 272.43682861]
[-59.63558197 284.21371460]
[-68.92563629 295.99060059]
[-78.21568298 307.76748657]
[-80.03711700 324.06515503]
[-95.16841888 330.38778687]
[-108.04380798 320.23120117]
[-105.41818237 304.04360962]
[-89.99256897 298.47741699]
[-80.70251465 286.70053101]
[-71.41246796 274.92364502]
[-62.12241364 263.14678955]
[-52.83236313 251.36988831]
[-67.71565247 253.23744202]
[-80.94498444 246.16744995]
[-87.66283417 232.75587463]
[-85.40255737 217.92715454]
[-74.99407196 207.12606812]
[-60.25915527 204.31854248]
[-46.60814285 210.53544617]
[-39.05340195 223.49406433]
[-40.36801529 238.43424988]
[-28.94387245 228.71371460]
[-17.51972961 218.99316406]
[-12.75464630 196.33374023]
[10.52989578 191.14450073]
[20.39099121 179.84146118]
[30.25208473 168.53840637]
[40.11318207 157.23536682]
[49.97427368 145.93232727]
[59.83536911 134.62927246]
[69.69646454 123.32623291]
[61.01746368 106.56281281]
[61.28312302 87.06443787]
[71.01641083 69.45135498]
[88.42893982 58.17121506]
[84.04139709 43.82724380]
[79.65384674 29.48327637]
[75.26629639 15.13930798]
[70.87875366 0.79533964]
[66.49120331 -13.54862881]
[52.81665802 -21.00815010]
[48.57139587 -35.61747742]
[55.76718140 -48.60809708]
[51.37963486 -62.95206833]
[46.99208832 -77.29603577]
[42.60454178 -91.64000702]
[38.21699524 -105.98397064]
[25.85944557 -116.76465607]
[29.28210068 -132.80265808]
[44.96402359 -137.59945679]
[56.77299881 -126.22052002]
[52.56096268 -110.37152100]
[56.94850922 -96.02754974]
[61.33605576 -81.68358612]
[65.72360229 -67.33961487]
[70.11115265 -52.99564743]
[83.34284210 -46.25340271]
[87.99677277 -31.76907921]
[80.83517456 -17.93617630]
[85.22272491 -3.59220719]
[89.61026764 10.75176144]
[93.99781799 25.09572983]
[98.38536072 39.43969727]
[102.77291107 53.78366852]
[117.40270233 57.09563446]
[127.54035187 46.03995895]
[137.67800903 34.98427963]
[136.74374390 19.20763016]
[147.30122375 7.44687796]
[163.08686829 6.67946959]
[174.73533630 17.36069489]
[175.33581543 33.15357208]
[164.53202820 44.68846893]
[148.73368835 45.12193298]
[138.59603882 56.17761230]
[128.45837402 67.23329163]
[137.93374634 78.38002014]
[143.21199036 92.11904907]
[158.21084595 91.93352509]
[173.20968628 91.74800110]
[186.91311646 83.84060669]
[199.73510742 91.41990662]
[214.73396301 91.23438263]
[224.49598694 79.01812744]
[239.83670044 75.98554230]
[253.51268005 83.56851196]
[259.06655884 98.18659973]
[253.87594604 112.93759155]
[240.39170837 120.85651398]
[224.98068237 118.20429230]
[214.91947937 106.23323822]
[199.92062378 106.41875458]
[187.29002380 114.31288147]
[173.39521790 106.74685669]
[158.39636230 106.93237305]
[143.39750671 107.11789703]
[138.48086548 121.28923035]
[150.14195251 130.72422791]
[161.80302429 140.15922546]
[177.91960144 145.42158508]
[177.32441711 162.36508179]
[160.87831116 166.48358154]
[152.36802673 151.82031250]
[140.70693970 142.38531494]
[129.04586792 132.95030212]
[117.01589966 138.94927979]
[104.15322113 140.87269592]
[91.75711823 138.79637146]
[80.99951172 133.18733215]
[71.13841248 144.49037170]
[61.27732086 155.79341125]
[51.41622543 167.09646606]
[41.55513000 178.39950562]
[31.69403458 189.70254517]
[21.83294106 201.00559998]
[24.13892365 207.79125977]
[24.17044258 214.90589905]
[21.95728302 221.61285400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[6 29]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[38 118]
[39 117]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[73 84]
[74 83]
[75 82]
[86 104]
[87 103]
[88 102]
[90 100]
[91 99]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
