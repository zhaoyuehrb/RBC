%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAAGGAGAAAACUUCACCAUUUGGAGCAUUUUUUUCUUGGAGGGAUUUUCCCAGUACCCAGGGUUAGAAGUGGUUCUCUUCGUCUUCAGCCUUGUAA\
) } def
/len { sequence length } bind def

/coor [
[83.77848816 144.08155823]
[71.25437927 137.14848328]
[61.40013123 126.76510620]
[55.13099670 113.89581299]
[40.27769852 115.98854828]
[25.42440033 118.08127594]
[10.57110214 120.17400360]
[-4.28219604 122.26673889]
[-19.13549423 124.35946655]
[-33.98879242 126.45219421]
[-48.84209061 128.54492188]
[-63.69538879 130.63764954]
[-78.54869080 132.73039246]
[-93.40198517 134.82312012]
[-108.18302155 137.37677002]
[-122.87747955 140.38887024]
[-137.57194519 143.40098572]
[-152.26640320 146.41308594]
[-166.96086121 149.42520142]
[-176.96058655 161.97052002]
[-193.00302124 161.83021545]
[-202.78179932 149.11190796]
[-198.79547119 133.57200623]
[-184.10200500 127.13137817]
[-169.97297668 134.73072815]
[-155.27850342 131.71862793]
[-140.58404541 128.70652771]
[-125.88958740 125.69441223]
[-111.19512177 122.68231201]
[-107.78372955 119.11115265]
[-102.03190613 117.75976562]
[-95.49472046 119.96981812]
[-80.64141846 117.87709045]
[-65.78812408 115.78435516]
[-50.93482208 113.69162750]
[-36.08152390 111.59889984]
[-21.22822571 109.50616455]
[-6.37492609 107.41343689]
[8.47837257 105.32070923]
[23.33167076 103.22798157]
[38.18497086 101.13524628]
[53.03826904 99.04251862]
[58.19359970 78.58631134]
[71.78163910 62.44943237]
[91.06156158 53.88682175]
[90.59506226 38.89407730]
[90.12857056 23.90133095]
[89.66207123 8.90858746]
[83.12606049 -6.73484278]
[96.34879303 -17.34595490]
[110.20563507 -7.57742119]
[104.65481567 8.44209003]
[105.12130737 23.43483353]
[105.58780670 38.42757797]
[106.05430603 53.42032242]
[115.91238403 55.80591583]
[125.02853394 60.25212479]
[132.97767639 66.55162811]
[139.38920593 74.41071320]
[143.96415710 83.46293640]
[146.48921204 93.28621674]
[146.84663391 103.42254639]
[161.44030762 106.89019012]
[176.03399658 110.35783386]
[190.62767029 113.82547760]
[205.22134399 117.29312134]
[219.81501770 120.76076508]
[234.40870667 124.22840881]
[243.66410828 123.16533661]
[249.39886475 128.03749084]
[263.87765503 131.95732117]
[278.35641479 135.87715149]
[292.83520508 139.79698181]
[307.37316895 143.49116516]
[321.96685791 146.95881653]
[336.56054688 150.42645264]
[349.88345337 141.92497253]
[365.29742432 145.41578674]
[373.65756226 158.82785034]
[370.00399780 174.20402527]
[356.50427246 182.42190552]
[341.16760254 178.60597229]
[333.09289551 165.02014160]
[318.49920654 161.55249023]
[303.90554810 158.08483887]
[296.54052734 159.62828064]
[288.91537476 154.27575684]
[274.43658447 150.35592651]
[259.95782471 146.43609619]
[245.47904968 142.51628113]
[230.94105530 138.82208252]
[216.34738159 135.35444641]
[201.75370789 131.88679504]
[187.16001892 128.41915894]
[172.56634521 124.95150757]
[157.97267151 121.48386383]
[143.37898254 118.01622009]
[135.93798828 130.24537659]
[125.15909576 139.66535950]
[112.04344940 145.40127563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[45 55]
[46 54]
[47 53]
[48 52]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[70 90]
[71 89]
[72 88]
[73 87]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
