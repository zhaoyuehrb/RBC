%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGGGGCUCGGCUUUGCCGCGCUCGCUGCACUUGGGCGAGAGCUGGAACGUGGACCAGAGCUCGGAUCCCAUCGCAGCUACCGCGAUGAGAGGCGCUCGCGGCGCCUGGGAUUUUCUCUGCGUUCUGCUCCUACUGCUUCGCGUCCAGACAGGCUCUUCUCAACCAUCUGUGAGUCCAGGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[98.95597076 177.40158081]
[97.70413208 162.45391846]
[96.45229340 147.50624084]
[95.20045471 132.55856323]
[93.94862366 117.61089325]
[79.32869720 114.25563049]
[71.68444824 127.16165161]
[64.04019928 140.06767273]
[56.39594650 152.97369385]
[56.02033615 168.79045105]
[42.87712097 175.79795837]
[35.23287201 188.70397949]
[27.58862114 201.61000061]
[19.94437218 214.51602173]
[17.07476616 231.22535706]
[0.22405824 233.09349060]
[-6.23581696 217.41847229]
[7.03834867 206.87178040]
[14.68259811 193.96575928]
[22.32684708 181.05972290]
[29.97109795 168.15370178]
[29.79994202 153.26008606]
[43.48992538 145.32945251]
[51.13417435 132.42343140]
[58.77842331 119.51740265]
[66.42267609 106.61138153]
[69.77793884 91.99145508]
[68.52610016 77.04378510]
[67.27426910 62.09611130]
[54.97782516 55.84320450]
[47.44087982 44.41870880]
[46.54550171 30.86991119]
[52.41904068 18.74788666]
[63.42876434 11.17676735]
[62.42687225 -3.78973556]
[61.42498398 -18.75623894]
[60.42309570 -33.72274017]
[59.42120361 -48.68924332]
[58.41931534 -63.65574646]
[57.41742706 -78.62225342]
[48.77565384 -91.87480927]
[55.64558792 -105.09045410]
[54.64369965 -120.05696106]
[53.51679611 -135.01457214]
[52.26495743 -149.96223450]
[38.97298813 -166.75469971]
[48.47699356 -185.06326294]
[46.47768784 -199.92942810]
[44.47838211 -214.79559326]
[34.97073746 -227.44134521]
[40.94262314 -241.08634949]
[38.94331741 -255.95249939]
[34.69039917 -264.05947876]
[37.03696060 -271.08355713]
[35.28634644 -285.98104858]
[33.53573227 -300.87854004]
[31.78511810 -315.77603149]
[29.91009331 -330.65838623]
[27.91078758 -345.52453613]
[25.91148376 -360.39068604]
[23.91217995 -375.25686646]
[21.91287422 -390.12301636]
[12.87869835 -396.22534180]
[8.78893089 -406.09362793]
[10.77489376 -416.36581421]
[17.94087029 -423.68420410]
[16.43943405 -438.60888672]
[14.93799877 -453.53353882]
[13.43656349 -468.45822144]
[11.93512821 -483.38287354]
[10.43369293 -498.30755615]
[8.93225765 -513.23223877]
[4.96932650 -527.69927979]
[-1.34469509 -541.30560303]
[-7.65871668 -554.91198730]
[-13.97273827 -568.51837158]
[-20.28676033 -582.12469482]
[-35.43010712 -586.02508545]
[-44.48135376 -598.77691650]
[-43.16677856 -614.35913086]
[-32.10708618 -625.41430664]
[-16.52432060 -626.72253418]
[-3.77618980 -617.66613770]
[0.11802870 -602.52117920]
[-6.68039560 -588.43872070]
[-0.36637428 -574.83233643]
[5.94764709 -561.22601318]
[12.26166821 -547.61962891]
[18.57568932 -534.01324463]
[26.03802299 -534.76397705]
[32.19979095 -548.44000244]
[40.96269226 -536.26544189]
[48.42502594 -537.01611328]
[51.90232849 -551.60754395]
[55.37962723 -566.19891357]
[58.85692978 -580.79028320]
[62.33423233 -595.38165283]
[65.81153870 -609.97302246]
[69.28884125 -624.56445312]
[67.07904053 -641.37371826]
[82.61970520 -648.15045166]
[93.43367767 -635.09313965]
[83.88021851 -621.08709717]
[80.40291595 -606.49572754]
[76.92561340 -591.90435791]
[73.44831085 -577.31298828]
[69.97100830 -562.72161865]
[66.49370575 -548.13024902]
[63.01640320 -533.53881836]
[23.85692406 -514.73364258]
[25.35836029 -499.80899048]
[26.85979462 -484.88430786]
[28.36123085 -469.95965576]
[29.86266518 -455.03497314]
[31.36410141 -440.11032104]
[32.86553574 -425.18563843]
[45.28781128 -410.38262939]
[36.77903748 -392.12234497]
[38.77834320 -377.25616455]
[40.77764511 -362.39001465]
[42.77695084 -347.52383423]
[44.77625656 -332.65768433]
[48.79174805 -326.43518066]
[46.68261337 -317.52664185]
[48.43322754 -302.62915039]
[50.18384171 -287.73165894]
[51.93445587 -272.83416748]
[53.80947876 -257.95181274]
[55.80878448 -243.08564758]
[65.17342377 -231.50321960]
[59.34454727 -216.79489136]
[61.34384918 -201.92872620]
[63.34315491 -187.06257629]
[71.21458435 -182.88056946]
[76.34750366 -175.42561340]
[77.47989655 -166.30674744]
[74.23039246 -157.56443787]
[67.21263123 -151.21408081]
[68.46446991 -136.26640320]
[72.16310120 -129.85049438]
[69.61019897 -121.05884552]
[70.61209106 -106.09234619]
[79.18219757 -93.91029358]
[72.38392639 -79.62413788]
[73.38581848 -64.65763855]
[74.38771057 -49.69113541]
[75.38959503 -34.72463226]
[76.39148712 -19.75812721]
[77.39337921 -4.79162502]
[78.39526367 10.17487812]
[92.55785370 18.45737457]
[99.06472778 33.69929504]
[95.17298889 49.97940826]
[82.22193909 60.84427261]
[83.47377777 75.79194641]
[84.72560883 90.73961639]
[88.01766968 79.11443329]
[99.51670837 69.70877838]
[117.14971924 67.76688385]
[135.81213379 76.69419098]
[148.81739807 96.47858429]
[157.91563416 108.40426636]
[167.01388550 120.32995605]
[176.11212158 132.25564575]
[191.62121582 131.75804138]
[204.44189453 140.49932861]
[209.64431763 155.11830139]
[205.22807312 169.99365234]
[192.89129639 179.40553284]
[177.37771606 179.73486328]
[164.65263367 170.85501099]
[159.60908508 156.18046570]
[164.18643188 141.35388184]
[155.08819580 129.42819214]
[145.98995972 117.50251007]
[136.89170837 105.57682800]
[129.89285278 108.27238464]
[108.89629364 116.35905457]
[110.14813232 131.30673218]
[111.39997101 146.25440979]
[112.65180206 161.20207214]
[113.90364075 176.14974976]
[126.13291931 186.16075134]
[127.61831665 201.89508057]
[117.47856903 214.01783752]
[101.72941589 215.33679199]
[89.71454620 205.06945801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 182]
[2 181]
[3 180]
[4 179]
[5 178]
[6 26]
[7 25]
[8 24]
[9 23]
[11 21]
[12 20]
[13 19]
[14 18]
[27 156]
[28 155]
[29 154]
[34 150]
[35 149]
[36 148]
[37 147]
[38 146]
[39 145]
[40 144]
[42 142]
[43 141]
[44 139]
[45 138]
[47 133]
[48 132]
[49 131]
[51 129]
[52 128]
[54 127]
[55 126]
[56 125]
[57 124]
[58 122]
[59 121]
[60 120]
[61 119]
[62 118]
[66 116]
[67 115]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[99 103]
[161 176]
[162 175]
[163 174]
[164 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
