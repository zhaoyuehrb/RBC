%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAGGAUGGCCGCGGCCGCGGCCGGUGGAGCCCCGGGCCCGGCCCCCGGCCCCGCCGGGCCCCCGCCACCCGCCGCGCCGACCUCGGCCGCUCGGGCCCCGCCGC\
) } def
/len { sequence length } bind def

/coor [
[135.86361694 322.88415527]
[147.46617126 312.96731567]
[143.58387756 298.47842407]
[139.70159912 283.98953247]
[135.81930542 269.50064087]
[131.93702698 255.01176453]
[128.18832397 251.82801819]
[126.49638367 246.19656372]
[128.27656555 239.56706238]
[125.24330139 224.87695312]
[122.21003723 210.18684387]
[119.17677307 195.49673462]
[116.14350891 180.80662537]
[113.11024475 166.11651611]
[109.22795868 151.62762451]
[104.50978851 137.38899231]
[99.79161835 123.15035248]
[95.07344818 108.91171265]
[89.67081451 102.74819946]
[90.43165588 94.18983459]
[86.12960815 79.81999207]
[81.82756042 65.45014954]
[77.52551270 51.08030701]
[73.22346497 36.71046448]
[61.85327530 25.70912743]
[65.61530304 11.29745102]
[61.31325531 -3.07239127]
[57.01120758 -17.44223404]
[52.70915985 -31.81207657]
[48.40711212 -46.18191910]
[36.83791351 -48.09647751]
[26.90302658 -54.22806168]
[20.06593513 -63.62722397]
[17.31620598 -74.86672211]
[19.02641487 -86.25816345]
[24.90218735 -96.10565948]
[34.03197861 -102.95825195]
[30.99871445 -117.64836121]
[27.96545029 -132.33847046]
[24.93218613 -147.02857971]
[21.89892387 -161.71868896]
[18.86565971 -176.40879822]
[15.83239651 -191.09890747]
[12.79913235 -205.78901672]
[9.76586914 -220.47912598]
[-4.83848572 -225.23394775]
[-15.09687614 -236.66465759]
[-18.24984741 -251.69642639]
[-13.44926453 -266.28582764]
[-1.98646164 -276.50833130]
[13.05512524 -279.61416626]
[27.62938499 -274.76788330]
[37.81591415 -263.27307129]
[40.87458801 -248.22183228]
[35.98263931 -233.66284180]
[24.45597839 -223.51239014]
[27.48924255 -208.82228088]
[30.52250481 -194.13217163]
[33.55577087 -179.44206238]
[36.58903122 -164.75195312]
[39.62229538 -150.06184387]
[42.65555954 -135.37173462]
[45.68882370 -120.68162537]
[48.72208786 -105.99150848]
[66.06303406 -99.46146393]
[76.19831848 -83.77395630]
[75.00512695 -64.98798370]
[62.77695465 -50.48396683]
[67.07900238 -36.11412430]
[71.38105011 -21.74428177]
[75.68309784 -7.37443972]
[79.98514557 6.99540281]
[91.04762268 16.96891403]
[87.59330750 32.40841675]
[91.89535522 46.77825928]
[96.19740295 61.14810181]
[100.49945068 75.51794434]
[104.80149841 89.88778687]
[109.31208801 104.19354248]
[114.03025818 118.43218231]
[118.74842834 132.67082214]
[123.46659851 146.90945435]
[127.10957336 149.88533020]
[129.29460144 153.53266907]
[129.99424744 157.27471924]
[129.38346863 160.59120178]
[127.80035400 163.08325195]
[130.83361816 177.77336121]
[133.86688232 192.46347046]
[136.90014648 207.15357971]
[139.93341064 221.84368896]
[142.96667480 236.53379822]
[146.42590332 251.12947083]
[150.30819702 265.61837769]
[154.19047546 280.10723877]
[158.07276917 294.59613037]
[161.95504761 309.08502197]
[176.96157837 311.87197876]
[189.26768494 320.90093994]
[196.43000793 334.37921143]
[197.02645874 349.63067627]
[190.93859863 363.62713623]
[179.37519836 373.58956909]
[164.63215637 377.53997803]
[149.63673401 374.69393921]
[137.36625671 365.61657715]
[130.25706482 352.11019897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[9 92]
[10 91]
[11 90]
[12 89]
[13 88]
[14 87]
[15 82]
[16 81]
[17 80]
[18 79]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
