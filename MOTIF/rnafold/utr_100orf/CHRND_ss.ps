%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCACAGCCCUGUAGACAGGAGGGGCAGAUGCACGUCCCAGUCAGAGGGAUGGGAUGGAGGGGCCAGUGCUGACACUGGGGCUGCUGGCUGCCCUGGCGGUGUGUGGCAGCUGGGGGCUGAACGAGGAGGAGCGGCUGAUCCGGCACCUGUUUC\
) } def
/len { sequence length } bind def

/coor [
[69.91407013 120.48348999]
[56.04156113 126.18906403]
[42.16905212 131.89463806]
[28.29654694 137.60020447]
[14.42403889 143.30577087]
[0.55153120 149.01133728]
[-3.07759237 159.33972168]
[-11.63560295 165.80747986]
[-22.12264252 166.45240784]
[-31.02714348 161.30230713]
[-45.11682129 166.44827271]
[-59.20649719 171.59423828]
[-73.29617310 176.74021912]
[-77.54785156 189.55584717]
[-88.25888062 197.45300293]
[-101.36884308 197.71736145]
[-112.06656647 190.47682190]
[-126.25638580 195.33984375]
[-140.44621277 200.20286560]
[-143.46080017 209.24205017]
[-150.22091675 215.75988770]
[-159.09899902 218.36482239]
[-168.03805542 216.58657837]
[-175.02806091 210.95542908]
[-189.48408508 214.95838928]
[-203.94009399 218.96133423]
[-218.39611816 222.96429443]
[-232.85212708 226.96723938]
[-238.16564941 241.54620361]
[-251.05245972 250.18968201]
[-266.55731201 249.57406616]
[-278.71829224 239.93609619]
[-282.85922241 224.98176575]
[-277.38787842 210.46130371]
[-264.40805054 201.95812988]
[-248.91078186 202.74189758]
[-236.85507202 212.51123047]
[-222.39906311 208.50827026]
[-207.94305420 204.50532532]
[-193.48703003 200.50236511]
[-179.03102112 196.49942017]
[-165.99031067 180.54129028]
[-145.30923462 186.01303101]
[-131.11940002 181.15002441]
[-116.92958832 176.28700256]
[-110.21286774 160.89622498]
[-94.13609314 154.98352051]
[-78.44214630 162.65052795]
[-64.35246277 157.50456238]
[-50.26279068 152.35859680]
[-36.17311096 147.21263123]
[-24.94575119 131.50996399]
[-5.15403938 135.13883972]
[8.71846867 129.43327332]
[22.59097481 123.72769928]
[36.46348190 118.02212524]
[50.33599091 112.31655884]
[64.20849609 106.61098480]
[62.95509338 99.32558441]
[63.19588470 91.80635071]
[64.97315979 84.36179352]
[68.26513672 77.30767059]
[72.98487091 70.95362091]
[78.98189545 65.58967590]
[86.04672241 61.47319412]
[93.91796112 58.81686401]
[90.93643188 44.11616898]
[87.95490265 29.41547012]
[84.97336578 14.71477509]
[81.99183655 0.01407839]
[79.01030731 -14.68661785]
[67.75186157 -26.61051750]
[72.70764160 -42.24292755]
[88.77956390 -45.50256729]
[99.43421936 -33.03619766]
[93.71100616 -17.66814995]
[96.69253540 -2.96745276]
[99.67406464 11.73324299]
[102.65559387 26.43393898]
[105.63713074 41.13463593]
[108.61865997 55.83533096]
[122.65614319 61.12200928]
[134.59440613 52.04027557]
[146.53266907 42.95854568]
[158.47093201 33.87681198]
[164.76974487 19.36351776]
[179.58370972 17.81580162]
[191.52197266 8.73406887]
[203.46023560 -0.34766358]
[215.39849854 -9.42939568]
[227.33676147 -18.51112938]
[239.27502441 -27.59286118]
[251.21328735 -36.67459488]
[263.15155029 -45.75632477]
[275.08981323 -54.83805847]
[277.14373779 -59.75875854]
[280.55883789 -63.03792572]
[284.46615601 -64.43106079]
[288.02783203 -64.08077240]
[300.48944092 -72.42991638]
[304.99768066 -87.82652283]
[319.90005493 -93.76786041]
[333.76470947 -85.69624329]
[335.95587158 -69.80353546]
[324.79269409 -58.28125000]
[308.83859253 -59.96830750]
[296.37698364 -51.61915970]
[284.17153931 -42.89979553]
[272.23327637 -33.81806183]
[260.29501343 -24.73633003]
[248.35676575 -15.65459728]
[236.41850281 -6.57286501]
[224.48023987 2.50886750]
[212.54197693 11.59060001]
[200.60371399 20.67233276]
[188.66545105 29.75406456]
[183.22055054 43.61777115]
[167.55267334 45.81507492]
[155.61441040 54.89680862]
[143.67614746 63.97853851]
[131.73788452 73.06027222]
[135.98924255 80.60581970]
[138.51872253 88.72599030]
[139.27583313 97.04087067]
[138.29147339 105.17507935]
[135.67370605 112.77472687]
[131.60023499 119.52275085]
[126.30787659 125.15218353]
[134.78128052 137.52963257]
[143.25468445 149.90708923]
[151.72808838 162.28454590]
[165.90826416 169.30119324]
[166.71327209 184.17404175]
[175.18667603 196.55149841]
[190.46549988 199.58387756]
[198.88241577 212.25708008]
[195.89733887 226.80441284]
[204.37074280 239.18186951]
[212.84414673 251.55932617]
[221.31755066 263.93679810]
[235.25419617 273.59112549]
[229.83520508 289.65570068]
[212.89830017 288.89559937]
[208.94009399 272.41018677]
[200.46669006 260.03274536]
[191.99328613 247.65527344]
[183.51988220 235.27781677]
[168.87802124 232.79760742]
[160.10845947 220.36581421]
[162.80921936 205.02490234]
[154.33581543 192.64744568]
[140.76171875 186.51611328]
[139.35063171 170.75794983]
[130.87722778 158.38049316]
[122.40382385 146.00303650]
[113.93041992 133.62557983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 54]
[6 53]
[10 51]
[11 50]
[12 49]
[13 48]
[17 45]
[18 44]
[19 43]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
[82 121]
[83 120]
[84 119]
[85 118]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[99 107]
[100 106]
[128 156]
[129 155]
[130 154]
[131 153]
[133 151]
[134 150]
[137 147]
[138 146]
[139 145]
[140 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
