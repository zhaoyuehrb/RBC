%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGACGAGCGGCACCAGAGCCGGGGCCAGUCGGAGCGGGGCGCGCGCCGCAUGGCGGAAGCGGAAGGGAGUUCUCUGCUCUUGUUGCCGCCGCCGCCACCCCCGCCCAGGAUGGCGGAAGUGGAGGCGCCGACGGCGGCCGAGACGGACA\
) } def
/len { sequence length } bind def

/coor [
[148.58906555 333.08087158]
[137.85975647 343.56335449]
[124.82282257 350.98211670]
[110.33065033 354.85214233]
[95.33080292 354.92034912]
[80.80403137 351.18231201]
[67.70014954 343.88244629]
[56.87593842 333.49801636]
[49.03913116 320.70800781]
[44.70212173 306.34866333]
[44.14848328 291.35888672]
[47.41316223 276.72222900]
[37.13603592 287.64837646]
[26.85890961 298.57452393]
[16.58178329 309.50067139]
[17.31577301 325.28790283]
[6.60991240 336.91372681]
[-9.18420124 337.48077393]
[-20.69619942 326.65258789]
[-21.09622002 310.85336304]
[-10.14693546 299.45648193]
[5.65563631 299.22354126]
[15.93276215 288.29739380]
[26.20988846 277.37124634]
[36.48701477 266.44509888]
[37.92654419 258.50225830]
[44.78472900 252.62118530]
[49.59424591 238.41314697]
[54.40376282 224.20509338]
[59.21327972 209.99705505]
[53.99565887 191.41461182]
[69.20769501 178.24797058]
[73.43368530 163.85557556]
[77.65967560 149.46318054]
[81.88565826 135.07078552]
[86.11164856 120.67839050]
[78.13747406 111.93784332]
[75.09562683 100.50404358]
[60.70323181 96.27805328]
[46.31083679 92.05207062]
[31.91844177 87.82608032]
[19.71313095 97.40782928]
[4.20559549 97.95188904]
[-8.64119911 89.24904633]
[-13.88739967 74.64572144]
[-9.51573467 59.75719833]
[2.79280210 50.30841064]
[18.30532646 49.93261719]
[31.05695534 58.77431107]
[36.14442825 73.43368530]
[50.53682327 77.65967560]
[64.92922211 81.88565826]
[79.32160950 86.11164856]
[84.00324249 78.35659027]
[91.63066864 72.32020569]
[101.52214813 69.11610413]
[100.29951477 54.16601562]
[99.07687378 39.21592712]
[97.85423279 24.26583672]
[96.63159180 9.31574917]
[87.79519653 -3.80784273]
[94.46936035 -17.12342834]
[93.24671936 -32.07351685]
[92.02407837 -47.02360535]
[90.80144501 -61.97369385]
[88.11408997 -65.55804443]
[86.87128448 -69.42530823]
[86.98008728 -73.07465363]
[88.19084930 -76.08981323]
[90.13970184 -78.18385315]
[90.13970184 -93.18385315]
[90.13970184 -108.18385315]
[90.13970184 -123.18385315]
[90.13970184 -138.18385315]
[79.85793304 -150.49906921]
[83.21681213 -166.18656921]
[97.63970184 -173.21223450]
[112.06259155 -166.18656921]
[115.42147064 -150.49906921]
[105.13970184 -138.18385315]
[105.13970184 -123.18385315]
[105.13970184 -108.18385315]
[105.13970184 -93.18385315]
[105.13970184 -78.18385315]
[105.75153351 -63.19633484]
[106.97416687 -48.24624252]
[108.19680786 -33.29615402]
[109.41944885 -18.34606743]
[118.16839600 -6.29180574]
[111.58168030 8.09310913]
[112.80432129 23.04319763]
[114.02696228 37.99328613]
[115.24960327 52.94337463]
[116.47223663 67.89346313]
[128.10371399 77.36494446]
[142.99148560 75.53353119]
[157.87925720 73.70211029]
[170.63151550 64.33777618]
[184.20823669 70.46326447]
[199.09602356 68.63185120]
[213.98379517 66.80043030]
[228.87158203 64.96901703]
[238.59124756 52.79668045]
[253.71565247 51.15144730]
[265.26022339 60.49268341]
[280.14801025 58.66126633]
[295.03576660 56.82985306]
[309.92355347 54.99843979]
[324.81134033 53.16702271]
[334.33984375 40.55817413]
[350.00460815 38.46282578]
[362.51202393 48.12411118]
[364.44161987 63.81016159]
[354.64865112 76.21472168]
[338.94308472 77.97838593]
[326.64276123 68.05480194]
[311.75497437 69.88621521]
[296.86718750 71.71762848]
[281.97940063 73.54904175]
[267.09164429 75.38046265]
[258.15521240 87.24114990]
[243.08299255 89.31054688]
[230.70298767 79.85679626]
[215.81521606 81.68820953]
[200.92742920 83.51962280]
[186.03965759 85.35104370]
[174.35227966 94.58438110]
[159.71067810 88.58988953]
[144.82290649 90.42130280]
[129.93511963 92.25272369]
[122.24568939 116.86418152]
[100.50404358 124.90437317]
[96.27805328 139.29676819]
[92.05207062 153.68916321]
[87.82608032 168.08155823]
[83.60009003 182.47395325]
[89.39075470 191.77081299]
[89.08076477 202.49876404]
[83.01689911 211.08560181]
[73.42132568 214.80656433]
[68.61180878 229.01461792]
[63.80228806 243.22265625]
[58.99277115 257.43069458]
[70.37774658 247.66432190]
[83.86732483 241.10449219]
[98.57950592 238.18013000]
[113.55233765 239.08244324]
[127.80685425 243.75244141]
[140.41102600 251.88476562]
[150.54075623 262.94769287]
[157.53372192 276.21789551]
[160.93269348 290.82772827]
[160.51542664 305.82192993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 25]
[13 24]
[14 23]
[15 22]
[27 143]
[28 142]
[29 141]
[30 140]
[32 136]
[33 135]
[34 134]
[35 133]
[36 132]
[38 53]
[39 52]
[40 51]
[41 50]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[62 88]
[63 87]
[64 86]
[65 85]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
[95 130]
[96 129]
[97 128]
[99 126]
[100 125]
[101 124]
[102 123]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
