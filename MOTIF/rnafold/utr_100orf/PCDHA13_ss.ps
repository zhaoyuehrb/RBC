%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGUCUUCCUGGCAAGGAGGCCCAAGACCGCGGCAACUACUGCUCUGGCUUCUGAUCCUCGCAGCCUGGGAGACGGGUAGUGGCCAGCUCCACUACU\
) } def
/len { sequence length } bind def

/coor [
[248.07485962 356.86029053]
[246.19197083 353.91189575]
[245.19154358 350.19796753]
[245.34046936 346.00131226]
[237.37411499 333.29159546]
[229.40774536 320.58187866]
[221.44137573 307.87216187]
[213.47500610 295.16244507]
[205.50863647 282.45272827]
[197.54226685 269.74301147]
[189.57591248 257.03329468]
[181.60954285 244.32356262]
[168.29426575 237.64877319]
[167.52105713 221.84646606]
[159.55468750 209.13674927]
[151.58831787 196.42703247]
[136.74092102 195.59477234]
[125.09279633 186.06663513]
[121.24370575 171.33442688]
[126.87251282 156.99487305]
[118.90614319 144.28515625]
[110.93977356 131.57543945]
[102.97341156 118.86571503]
[88.87459564 115.52358246]
[81.17934418 103.24639893]
[84.31687164 89.10065460]
[76.35050201 76.39093781]
[67.99272156 63.93511581]
[59.25160599 51.74524689]
[51.56811142 46.47679520]
[50.43516922 39.03757858]
[42.07738495 26.58176041]
[33.71960068 14.12594032]
[19.60538292 6.97755480]
[18.93889236 -7.90213108]
[10.58110714 -20.35795021]
[2.22332335 -32.81377029]
[-6.13446093 -45.26958847]
[-21.53418541 -49.76715088]
[-27.48585510 -64.66538239]
[-19.42385864 -78.53562927]
[-3.53267121 -80.73783112]
[7.99735022 -69.58264160]
[6.32135916 -53.62737274]
[14.67914295 -41.17155457]
[23.03692627 -28.71573448]
[31.39471054 -16.25991440]
[44.91112518 -10.00245380]
[46.17542267 5.76815605]
[54.53320694 18.22397614]
[62.89099121 30.67979622]
[71.44147491 43.00413132]
[80.18258667 55.19400024]
[84.83425903 56.85312271]
[88.41316986 61.55430984]
[89.06022644 68.42456818]
[97.02658844 81.13428497]
[111.12540436 84.47641754]
[118.82065582 96.75360107]
[115.68312836 110.89934540]
[123.64949799 123.60906219]
[131.61585999 136.31878662]
[139.58222961 149.02850342]
[154.94137573 150.21295166]
[166.52264404 160.09869385]
[170.02075195 174.73518372]
[164.29803467 188.46066284]
[172.26440430 201.17037964]
[180.23077393 213.88009644]
[194.11584473 221.46397400]
[194.31925964 236.35719299]
[202.28562927 249.06690979]
[210.25199890 261.77664185]
[218.21836853 274.48635864]
[226.18472290 287.19607544]
[234.15109253 299.90579224]
[242.11746216 312.61550903]
[250.08383179 325.32522583]
[258.05020142 338.03497314]
[266.97982788 350.08740234]
[276.81875610 361.40975952]
[286.65768433 372.73208618]
[296.49661255 384.05444336]
[306.33554077 395.37680054]
[316.17446899 406.69912720]
[326.01339722 418.02148438]
[341.79455566 418.87649536]
[352.28659058 430.69567871]
[351.26477051 446.46688843]
[339.33532715 456.83337402]
[323.57577515 455.64486694]
[313.33599854 443.60650635]
[314.69107056 427.86041260]
[304.85214233 416.53805542]
[295.01321411 405.21572876]
[285.17428589 393.89337158]
[275.33535767 382.57104492]
[265.49642944 371.24868774]
[255.65748596 359.92633057]
[253.15287781 359.87023926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[14 69]
[15 68]
[16 67]
[20 63]
[21 62]
[22 61]
[23 60]
[26 57]
[27 56]
[28 53]
[29 52]
[31 51]
[32 50]
[33 49]
[35 47]
[36 46]
[37 45]
[38 44]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
