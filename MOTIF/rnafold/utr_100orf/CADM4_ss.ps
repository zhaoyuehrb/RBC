%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAGGUGCCGGGCCGGGAGCGAGCGGCGGCGGCGGCGGCGGCGGCACCAUGGGCCGGGCCCGGCGCUUCCAGUGGCCGCUGCUGCUGCUGUGGGCGGCCGCGGCGGGGCCAGGGGCAGGACAGGAAGUACAGACAGAGAACGUGACAG\
) } def
/len { sequence length } bind def

/coor [
[96.34680939 203.19184875]
[96.03266907 188.19514465]
[95.56150818 173.20254517]
[94.93338013 158.21569824]
[86.66989899 145.82360840]
[93.82252502 131.71153259]
[93.19438934 116.72468567]
[87.23716736 102.95836639]
[76.74221802 92.24127960]
[66.24726868 81.52418518]
[55.75231934 70.80709839]
[45.14571762 60.20049667]
[34.42862701 49.70554352]
[23.71153641 39.21059418]
[12.99444675 28.71564484]
[2.27735639 18.22069550]
[-12.93303204 20.66001320]
[-26.50458908 13.75594044]
[-33.32774353 0.34294125]
[-30.97262192 -14.34008980]
[-41.68971252 -24.83503914]
[-50.06943893 -28.63775635]
[-52.51845169 -35.66378021]
[-63.01340485 -46.38087082]
[-73.50835419 -57.09796143]
[-84.00330353 -67.81504822]
[-94.49825287 -78.53214264]
[-104.99320221 -89.24922943]
[-115.48815155 -99.96632385]
[-125.98310089 -110.68341064]
[-136.47805786 -121.40050507]
[-146.97300720 -132.11759949]
[-157.46795654 -142.83468628]
[-167.96290588 -153.55177307]
[-178.45785522 -164.26885986]
[-188.95280457 -174.98594666]
[-199.44775391 -185.70304871]
[-214.63131714 -190.14938354]
[-218.00804138 -204.65617371]
[-228.50299072 -215.37327576]
[-239.10958862 -225.97987366]
[-249.82667542 -236.47482300]
[-265.10003662 -240.60220337]
[-268.77981567 -255.03509521]
[-279.49688721 -265.53005981]
[-290.21398926 -276.02499390]
[-305.48733521 -280.15237427]
[-309.16711426 -294.58526611]
[-319.88421631 -305.08023071]
[-326.28457642 -307.12377930]
[-330.07788086 -311.46707153]
[-330.81875610 -316.24621582]
[-341.08694458 -327.18072510]
[-351.35516357 -338.11526489]
[-361.62335205 -349.04980469]
[-376.87359619 -356.45703125]
[-373.97750854 -373.16177368]
[-357.12387085 -375.00323486]
[-350.68884277 -359.31799316]
[-340.42062378 -348.38348389]
[-330.15243530 -337.44894409]
[-319.88421631 -326.51440430]
[-309.38925171 -315.79733276]
[-298.67218018 -305.30236816]
[-284.16537476 -301.92565918]
[-279.71905518 -286.74209595]
[-269.00195312 -276.24713135]
[-258.28485107 -265.75219727]
[-243.77806091 -262.37548828]
[-239.33172607 -247.19190979]
[-228.61463928 -236.69696045]
[-221.58860779 -234.24794006]
[-217.78588867 -225.86822510]
[-207.29093933 -215.15112305]
[-192.85804749 -211.47134399]
[-188.73066711 -196.19799805]
[-178.23571777 -185.48091125]
[-167.74076843 -174.76380920]
[-157.24581909 -164.04672241]
[-146.75086975 -153.32963562]
[-136.25592041 -142.61254883]
[-125.76096344 -131.89544678]
[-115.26601410 -121.17835999]
[-104.77106476 -110.46127319]
[-94.27611542 -99.74417877]
[-83.78116608 -89.02709198]
[-73.28621674 -78.31000519]
[-62.79126358 -67.59291077]
[-52.29631424 -56.87582016]
[-41.80136490 -46.15873337]
[-31.19476128 -35.55213165]
[-20.47767067 -25.05718040]
[-5.84718275 -27.71928406]
[7.70576811 -21.17852592]
[14.89254665 -7.75453329]
[12.77230644 7.50360441]
[23.48939705 17.99855423]
[34.20648575 28.49350548]
[44.92357635 38.98845291]
[55.64066696 49.48340607]
[62.66669464 51.93242264]
[66.46940613 60.31214523]
[76.96435547 71.02923584]
[87.45931244 81.74633026]
[97.95426178 92.46341705]
[100.63628387 85.20241547]
[107.50018311 79.51675415]
[117.64491272 77.21906281]
[129.48526001 79.66566467]
[144.48197937 79.97979736]
[159.47868347 80.29393005]
[175.44096375 74.58062744]
[185.34979248 88.33750153]
[174.87358093 101.66736603]
[159.16455078 95.29064178]
[144.16784668 94.97650909]
[129.17112732 94.66236877]
[123.92365265 100.02091980]
[136.93389893 107.48640442]
[149.94415283 114.95188904]
[162.95439148 122.41737366]
[175.96464539 129.88285828]
[188.97488403 137.34834290]
[203.76890564 139.82563782]
[216.45979309 147.82197571]
[225.08000183 160.09764099]
[228.29309082 174.74946594]
[225.60090637 189.50588989]
[217.42085266 202.07914734]
[205.02111816 210.51991272]
[190.32409668 213.51956177]
[175.60838318 210.61305237]
[163.15544128 202.25100708]
[154.89590454 189.72981262]
[152.11027527 174.99324036]
[144.37396240 162.14219666]
[136.63764954 149.29115295]
[128.90133667 136.44010925]
[121.16502380 123.58905792]
[113.42870331 110.73800659]
[108.18122864 116.09654999]
[108.80936432 131.08338928]
[117.11776733 144.54745483]
[109.92021942 157.58757019]
[110.54835510 172.57441711]
[114.05377197 181.08279419]
[111.02938080 187.88101196]
[111.34352112 202.87771606]
[113.93717957 222.08508301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 145]
[4 144]
[6 142]
[7 141]
[8 105]
[9 104]
[10 103]
[11 102]
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[20 92]
[21 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[37 76]
[39 74]
[40 73]
[41 71]
[42 70]
[44 68]
[45 67]
[46 66]
[48 64]
[49 63]
[52 62]
[53 61]
[54 60]
[55 59]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
