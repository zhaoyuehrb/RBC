%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAGCGAGCUCAGGGAGGUGCGGGCUGGUGCGGUGGCUGCAGGUACUGUUGCCCUUCCUGUUGUCUUUGUUCCCCGGGGCUCUCCCAGUCCAGAUCC\
) } def
/len { sequence length } bind def

/coor [
[110.29347229 388.01446533]
[102.03195953 375.40451050]
[97.02894592 361.18365479]
[95.57527924 346.17864990]
[97.75548553 331.26187134]
[103.44281006 317.30056763]
[112.30658722 305.10644531]
[123.83150482 295.38842773]
[137.34751892 288.71151733]
[134.10725403 274.06570435]
[130.86698914 259.41986084]
[127.62671661 244.77400208]
[124.38644409 230.12815857]
[121.14617920 215.48233032]
[108.61190796 203.30885315]
[114.06578064 185.80735779]
[110.37159729 171.26937866]
[106.67741394 156.73138428]
[102.98323059 142.19340515]
[99.28904724 127.65541840]
[79.62915802 118.71780396]
[72.38330078 98.37352753]
[81.96711731 79.02042389]
[75.63959503 65.42033386]
[69.31206512 51.82024384]
[62.98454285 38.22015762]
[56.65701675 24.62006760]
[42.08288193 19.12167168]
[35.85960770 5.23910952]
[41.19130325 -8.62121582]
[34.86377716 -22.22130394]
[17.86138535 -32.82805634]
[19.95129395 -51.94467545]
[12.79049587 -65.12507629]
[5.62969828 -78.30548096]
[-1.53109992 -91.48587799]
[-8.69189835 -104.66628265]
[-15.85269642 -117.84667969]
[-31.25450897 -119.73448181]
[-42.58223343 -130.33930969]
[-45.48012543 -145.58338928]
[-38.83388901 -159.60505676]
[-25.19913673 -167.01269531]
[-9.81871033 -164.95791626]
[1.39330447 -154.23083496]
[4.12565804 -138.95622253]
[-2.67229509 -125.00747681]
[4.48850298 -111.82707977]
[11.64930153 -98.64667511]
[18.81009865 -85.46627808]
[25.97089767 -72.28587341]
[33.13169479 -59.10547256]
[43.35684204 -57.02639389]
[50.83659363 -49.43642426]
[52.84822845 -38.74604797]
[48.46386719 -28.54883003]
[54.79139328 -14.94874096]
[68.82780457 -10.09954834]
[75.43855286 3.60273814]
[70.25710297 18.29254150]
[76.58463287 31.89262962]
[82.91215515 45.49271774]
[89.23967743 59.09280777]
[95.56720734 72.69289398]
[104.07575226 72.63732910]
[112.19874573 75.17021942]
[119.16775513 80.05195618]
[124.32353973 86.82073975]
[127.17835999 94.83625031]
[127.46215820 103.34024811]
[125.14809418 111.52825928]
[120.45507050 118.62572479]
[113.82703400 123.96123505]
[117.52121735 138.49922180]
[121.21540070 153.03720093]
[124.90958405 167.57518005]
[128.60375977 182.11317444]
[139.35209656 189.45008850]
[142.05947876 201.76652527]
[135.79202271 212.24205017]
[139.03228760 226.88789368]
[142.27255249 241.53373718]
[145.51281738 256.17959595]
[148.75309753 270.82540894]
[151.99336243 285.47125244]
[167.06449890 285.82348633]
[181.61322021 289.77294922]
[194.79368591 297.08996582]
[205.83958435 307.34918213]
[214.10873413 319.95413208]
[219.12037659 334.17196655]
[220.58314514 349.17608643]
[218.41198730 364.09417725]
[212.73312378 378.05892944]
[203.87673950 390.25842285]
[192.35771179 399.98339844]
[178.84574890 406.66848755]
[164.12643433 409.92501831]
[149.05549622 409.56365967]
[134.50917053 405.60540771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[30 57]
[31 56]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
