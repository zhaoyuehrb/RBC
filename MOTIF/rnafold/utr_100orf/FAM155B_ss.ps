%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGCCUCGCGCCUGCCUGUUCCCUCCAGCCCGGACCCCCCUGAAAUAUGUUCAGGGGCGCUUGGAUGUGGCCCGGGAAAGACGCCGCCGCGCUGACUAUCUGCUGCUGCUGCUGCUGCUGGGCUCCCAGGCCGAGCGACAAACCUU\
) } def
/len { sequence length } bind def

/coor [
[67.98396301 484.92770386]
[67.48397827 469.75817871]
[72.50131989 455.43371582]
[82.35741425 443.89154053]
[95.71932983 436.69265747]
[93.82678223 421.81253052]
[89.83577728 415.53146362]
[92.05461121 406.59912109]
[90.47619629 391.68240356]
[88.89778900 376.76568604]
[85.04010010 370.40185547]
[87.44675446 361.51831055]
[86.18318176 346.57162476]
[84.91960907 331.62493896]
[83.65603638 316.67825317]
[82.39247131 301.73156738]
[70.37942505 297.58782959]
[60.80614853 289.15991211]
[55.13174820 277.68484497]
[54.23905563 264.86761475]
[58.29746628 252.62773132]
[66.73221588 242.81184387]
[78.30550385 236.91510010]
[77.67315674 221.92843628]
[77.04080200 206.94177246]
[65.93447113 197.08352661]
[65.07968903 181.89392090]
[75.49522400 170.31141663]
[74.86287689 155.32475281]
[74.23052979 140.33808899]
[73.59818268 125.35142517]
[65.64640808 112.63256073]
[52.45034409 105.50067139]
[39.25428009 98.36878204]
[26.05821419 91.23689270]
[12.11064339 97.77688599]
[-2.83873820 94.88389587]
[-13.09676361 83.87313080]
[-14.88283253 69.11006927]
[-28.07889748 61.97817993]
[-41.27496338 54.84628677]
[-54.47102737 47.71439743]
[-67.66709137 40.58250809]
[-80.86315918 33.45061874]
[-94.05922699 26.31872749]
[-107.25528717 19.18683815]
[-122.97801971 22.37670898]
[-135.18188477 11.96300793]
[-134.50512695 -4.06576490]
[-121.46689606 -13.41370678]
[-106.06900787 -8.90987682]
[-100.12339783 5.99077225]
[-86.92733765 13.12266254]
[-73.73126984 20.25455284]
[-60.53520584 27.38644218]
[-47.33913803 34.51833344]
[-34.14307404 41.65022278]
[-20.94700813 48.78211212]
[-7.75094223 55.91400146]
[5.57777500 49.31981659]
[20.40906334 51.86871719]
[31.01963997 62.78975296]
[33.19010544 78.04082489]
[46.38616943 85.17272186]
[59.58223343 92.30461121]
[72.77829742 99.43650055]
[70.66741943 83.24617767]
[78.79521942 65.69153595]
[97.40656281 53.18674088]
[101.16140747 38.66430664]
[104.91625977 24.14187241]
[108.67110443 9.61943722]
[112.42595673 -4.90299702]
[111.00608826 -11.47248745]
[112.88162994 -16.92760086]
[116.65734863 -19.95191765]
[121.02108002 -34.30315018]
[111.55673218 -46.59973145]
[111.16132355 -62.11176682]
[119.98688507 -74.87456512]
[134.63981628 -79.98056793]
[149.48576355 -75.46641541]
[158.81614685 -63.06789398]
[159.04325867 -47.55247879]
[150.07977295 -34.88617325]
[135.37231445 -29.93942451]
[131.00857544 -15.58819103]
[126.94839478 -1.14814746]
[123.19354248 13.37428665]
[119.43869019 27.89672089]
[115.68384552 42.41915512]
[111.92899323 56.94158936]
[123.93280029 65.93650818]
[136.81648254 58.25465775]
[144.70716858 44.54160690]
[159.60122681 44.66933441]
[172.48489380 36.98748398]
[182.99284363 23.68262100]
[198.68664551 30.09676170]
[196.86764526 46.95284653]
[180.16674805 49.87116241]
[167.28306580 57.55301285]
[160.31391907 70.71660614]
[144.49833679 71.13833618]
[131.61465454 78.82019043]
[133.79652405 85.99580383]
[140.34210205 107.52265167]
[155.32127380 106.73235321]
[168.76927185 97.34707642]
[183.50440979 104.54486084]
[184.36842346 120.92122650]
[170.47250366 129.62957764]
[156.11157227 121.71151733]
[141.13241577 122.50182343]
[111.61436462 135.18913269]
[88.58484650 124.71907806]
[89.21719360 139.70573425]
[89.84954071 154.69241333]
[90.48188782 169.67907715]
[101.83609009 180.34301758]
[102.26389313 195.55064392]
[92.02747345 206.30941772]
[92.65982056 221.29608154]
[93.29216766 236.28274536]
[109.01370239 244.00526428]
[118.64420319 258.52981567]
[119.62816620 275.84051514]
[111.78608704 291.20501709]
[97.33914948 300.46801758]
[98.60272217 315.41470337]
[99.86629486 330.36138916]
[101.12986755 345.30807495]
[102.39344025 360.25473022]
[103.81450653 375.18728638]
[105.39292145 390.10400391]
[106.97132874 405.02072144]
[108.70690918 419.91998291]
[110.59945679 434.80010986]
[125.33799744 438.42498779]
[137.76957703 447.13247681]
[146.21293640 459.74493408]
[149.52615356 474.55667114]
[147.26116943 489.56445312]
[139.72428894 502.73867798]
[127.93481445 512.29760742]
[113.48718262 516.94842529]
[98.33531189 516.06225586]
[84.52837372 509.75885010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 138]
[6 137]
[8 136]
[9 135]
[10 134]
[12 133]
[13 132]
[14 131]
[15 130]
[16 129]
[23 124]
[24 123]
[25 122]
[28 119]
[29 118]
[30 117]
[31 116]
[32 66]
[33 65]
[34 64]
[35 63]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[76 87]
[77 86]
[93 105]
[94 104]
[96 102]
[97 101]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
