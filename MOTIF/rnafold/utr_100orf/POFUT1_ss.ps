%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:18:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCUCCCCGACUGUGCGCCGCGGCUGGCUCGGGUUCCCGGGCCGACAUGGGCGCCGCCGCGUGGGCACGGCCGCUGAGCGUGUCUUUCCUGCUGCUGCUUCUGCCGCUCCCGGGGAUGCCUGCGGGCUCCUGGGACCCGGCCGGUU\
) } def
/len { sequence length } bind def

/coor [
[128.31089783 232.40739441]
[117.16508484 242.83493042]
[102.59614563 247.38563538]
[87.49676514 245.15594482]
[74.86493683 236.58859253]
[67.20870972 223.38461304]
[66.04824829 208.16567993]
[71.61395264 193.95350647]
[82.80075073 183.56994629]
[97.38748932 179.07666016]
[99.57873535 164.23756409]
[101.76998138 149.39848328]
[85.67092133 146.57836914]
[71.59548187 138.73690796]
[61.03334808 126.87815857]
[55.04447174 112.42093658]
[54.15378952 97.02996826]
[58.30841064 82.42451477]
[45.64349365 74.38711548]
[32.97857285 66.34971619]
[20.31365395 58.31231308]
[0.19922450 58.44423294]
[-8.13779354 41.04051971]
[-21.12817383 33.54051971]
[-34.11855698 26.04051971]
[-47.10893631 18.54051971]
[-60.09931946 11.04052067]
[-73.08969879 3.54052067]
[-86.08007812 -3.95947933]
[-99.14828491 -11.32303524]
[-112.29288483 -18.54934120]
[-125.43748474 -25.77564621]
[-138.58209229 -33.00194931]
[-151.72668457 -40.22825623]
[-167.54734802 -40.09629059]
[-174.97286987 -53.00794983]
[-188.11746216 -60.23425674]
[-200.57258606 -55.00431824]
[-213.57150269 -57.88176727]
[-222.39341736 -67.59111023]
[-223.96791077 -80.41844177]
[-236.95828247 -87.91844177]
[-249.94866943 -95.41844177]
[-263.01687622 -102.78199768]
[-276.16146851 -110.00830841]
[-289.30609131 -117.23461151]
[-304.41101074 -112.58522797]
[-318.34011841 -120.05215454]
[-322.82955933 -135.20539856]
[-315.21578979 -149.05479431]
[-300.01593018 -153.38375854]
[-286.24780273 -145.62399292]
[-282.07977295 -130.37921143]
[-268.93518066 -123.15290833]
[-255.79057312 -115.92660522]
[-248.36477661 -115.45723724]
[-242.44866943 -108.40882874]
[-229.45828247 -100.90882874]
[-216.46791077 -93.40882874]
[-200.45838928 -98.46156311]
[-185.43704224 -90.23847961]
[-180.89115906 -73.37885284]
[-167.74656677 -66.15254974]
[-152.86608887 -66.80139160]
[-144.50038147 -53.37285614]
[-131.35578918 -46.14655304]
[-118.21118164 -38.92024612]
[-105.06658173 -31.69394112]
[-91.92198181 -24.46763611]
[-84.49618530 -23.99827194]
[-78.58007812 -16.94985962]
[-65.58969879 -9.44986057]
[-52.59931946 -1.94986045]
[-39.60893631 5.55013943]
[-26.61855507 13.05013943]
[-13.62817478 20.55014038]
[-0.63779354 28.05014038]
[9.03409863 24.51115036]
[19.26305962 26.96609879]
[26.57561111 34.83189392]
[28.35105705 45.64739227]
[41.01597595 53.68479538]
[53.68089294 61.72219849]
[66.34580994 69.75959778]
[71.64538574 64.74234772]
[77.68264008 60.64238739]
[84.30052185 57.56637192]
[91.32685089 55.59434128]
[98.57882690 54.77758789]
[105.86777496 55.13737106]
[113.00406647 56.66432953]
[119.80203247 59.31873322]
[126.08482361 63.03152084]
[131.68896484 67.70610809]
[143.82421875 58.88932800]
[149.99641418 43.69604111]
[166.27522278 41.71299744]
[175.91439819 54.98018646]
[168.99798584 69.84945679]
[152.64100647 71.02458191]
[140.50575256 79.84136200]
[144.88691711 89.57411194]
[146.91824341 100.25045013]
[146.39968872 111.30065918]
[143.26979065 122.11367798]
[137.61384583 132.07087708]
[150.60423279 139.57087708]
[163.59460449 147.07087708]
[176.58499146 154.57087708]
[194.96289062 154.11598206]
[203.19090271 169.58456421]
[216.33549500 176.81086731]
[229.48010254 184.03717041]
[242.62469482 191.26347351]
[255.76930237 198.48977661]
[268.91390991 205.71607971]
[282.05850220 212.94238281]
[295.20309448 220.16870117]
[301.91723633 220.41578674]
[306.73880005 223.57897949]
[308.73757935 227.98283386]
[321.56805420 235.75323486]
[334.39849854 243.52363586]
[350.79647827 243.32592773]
[358.93286133 257.56430054]
[350.43765259 271.59155273]
[334.04998779 270.97763062]
[326.62811279 256.35409546]
[313.79763794 248.58369446]
[300.96716309 240.81329346]
[287.97680664 233.31329346]
[274.83218384 226.08699036]
[261.68759155 218.86068726]
[248.54299927 211.63438416]
[235.39839172 204.40808105]
[222.25379944 197.18176270]
[209.10919189 189.95545959]
[195.96459961 182.72915649]
[184.22175598 185.80097961]
[173.19316101 179.83328247]
[169.08499146 167.56126404]
[156.09460449 160.06126404]
[143.10423279 152.56126404]
[130.11384583 145.06126404]
[116.60906982 151.58973694]
[114.41782379 166.42881775]
[112.22657776 181.26789856]
[124.89204407 189.78544617]
[132.60020447 202.95916748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 147]
[11 146]
[12 145]
[18 84]
[19 83]
[20 82]
[21 81]
[23 77]
[24 76]
[25 75]
[26 74]
[27 73]
[28 72]
[29 71]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[36 63]
[37 62]
[41 59]
[42 58]
[43 57]
[44 55]
[45 54]
[46 53]
[94 101]
[95 100]
[106 144]
[107 143]
[108 142]
[109 141]
[111 138]
[112 137]
[113 136]
[114 135]
[115 134]
[116 133]
[117 132]
[118 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
