%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCUGCUCCACCCUCAACCCACCAGAACCAUGGGCUGCUGUGGCUGCUCUGGAGGCUGUGGCUCCGGCUGUGGGGGCUGCGGCUCUGGCUGUGGGGGAUGUGGCUCUAGCUGCUGUGUGCCCAUCUGCU\
) } def
/len { sequence length } bind def

/coor [
[146.17333984 307.98211670]
[134.31062317 317.16232300]
[120.56967926 323.17782593]
[105.77758789 325.66659546]
[90.82469177 324.47879028]
[76.61101532 319.68594360]
[63.99209213 311.57653809]
[53.72746277 300.63864136]
[46.43496323 287.53063965]
[42.55353546 273.04153442]
[42.31680298 258.04339600]
[45.73901749 243.43899536]
[52.61418915 230.10737610]
[62.52849960 218.85098267]
[74.88520050 210.34735107]
[88.94052887 205.10829163]
[103.84849548 203.44917297]
[118.71176147 205.46984863]
[132.63571167 211.04870605]
[144.78027344 219.84808350]
[139.53831482 205.79383850]
[134.29634094 191.73959351]
[129.05438232 177.68534851]
[123.31413269 163.82714844]
[117.08290863 150.18266296]
[110.85167694 136.53819275]
[104.62045288 122.89370728]
[98.38922882 109.24922943]
[84.01750946 118.07363892]
[62.81481552 111.30235291]
[49.17033768 105.07112885]
[35.52585602 98.83990479]
[26.32105637 98.10343170]
[21.63355064 92.29460144]
[8.14122295 85.74043274]
[-5.35110426 79.18627167]
[-18.84343147 72.63210297]
[-34.63729858 73.56180573]
[-42.70455933 61.04108047]
[-56.19688797 54.48691177]
[-72.50674438 56.19588089]
[-81.92142487 42.76845169]
[-74.75590515 28.01760674]
[-58.38146210 27.11775398]
[-49.64271927 40.99458313]
[-36.15039444 47.54875183]
[-21.32158852 46.15025330]
[-12.28926373 59.13977432]
[1.20306361 65.69393921]
[14.69539070 72.24810791]
[28.18771744 78.80227661]
[41.75708008 85.19542694]
[55.40156174 91.42665100]
[69.04604340 97.65787506]
[75.79220581 94.38079071]
[89.28453064 87.82662201]
[96.03069305 84.54953766]
[99.56707764 69.97236633]
[103.10346222 55.39519501]
[106.63984680 40.81801987]
[110.17623138 26.24084663]
[113.71261597 11.66367340]
[117.24900055 -2.91350055]
[120.78538513 -17.49067497]
[124.32176971 -32.06784821]
[127.85815430 -46.64501953]
[131.39453125 -61.22219467]
[121.97781372 -73.70655823]
[122.84059906 -89.32032013]
[133.57551575 -100.69114685]
[149.11386108 -102.45007324]
[162.11889648 -93.76659393]
[166.45005798 -78.74077606]
[160.06230164 -64.46736145]
[145.97171021 -57.68581009]
[142.43531799 -43.10863876]
[138.89894104 -28.53146362]
[135.36256409 -13.95429039]
[131.82617188 0.62288350]
[128.28979492 15.20005703]
[124.75340271 29.77723122]
[121.21701813 44.35440445]
[117.68063354 58.93157578]
[114.14425659 73.50875092]
[110.60787201 88.08592224]
[112.03370667 103.01800537]
[118.26493835 116.66248322]
[124.49616241 130.30696106]
[130.72738647 143.95144653]
[136.95860291 157.59591675]
[141.37777710 160.72755432]
[143.84117126 164.85121155]
[144.30319214 169.02790833]
[143.10862732 172.44337463]
[148.35058594 186.49761963]
[153.59255981 200.55186462]
[158.83451843 214.60610962]
[167.68014526 226.72035217]
[179.47094727 235.99273682]
[191.26174927 245.26512146]
[203.05253601 254.53750610]
[214.84333801 263.80990601]
[223.61503601 266.69570923]
[226.80093384 273.44592285]
[238.36772156 282.99627686]
[249.93452454 292.54663086]
[261.43725586 289.11260986]
[273.04119873 291.67687988]
[281.84536743 299.47842407]
[285.70718384 310.46221924]
[283.76321411 321.81945801]
[294.86248779 331.90936279]
[310.99316406 334.86465454]
[316.24353027 350.40060425]
[305.21246338 362.53515625]
[289.24780273 358.78533936]
[284.77258301 343.00863647]
[273.67330933 332.91873169]
[255.55134583 334.94656372]
[241.39630127 322.95474243]
[240.38417053 304.11343384]
[228.81736755 294.56307983]
[217.25057983 285.01272583]
[205.57095337 275.60067749]
[193.78015137 266.32830811]
[181.98936462 257.05590820]
[170.19856262 247.78353882]
[158.40776062 238.51115417]
[163.09199524 252.76098633]
[164.16561890 267.72253418]
[161.56402588 282.49517822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 97]
[21 96]
[22 95]
[23 94]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[30 54]
[31 53]
[32 52]
[34 51]
[35 50]
[36 49]
[37 48]
[39 46]
[40 45]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[98 128]
[99 127]
[100 126]
[101 125]
[102 124]
[104 123]
[105 122]
[106 121]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
