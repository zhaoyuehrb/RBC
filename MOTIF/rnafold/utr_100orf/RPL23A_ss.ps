%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUGGAGACCCUUUUCACAAGAUGGCGCCGAAAGCGAAGAAGGAAGCUCCUGCCCCUCCUAAAGCUGAAGCCAAAGCGAAGGCUUUAAAGGCCAAGAAGGCAGUGUUGAAAGGUGUCCACA\
) } def
/len { sequence length } bind def

/coor [
[85.87414551 425.03836060]
[70.40116119 423.86950684]
[58.59209442 413.80343628]
[54.98777771 398.71075439]
[60.97414780 384.39492798]
[74.24932098 376.36065674]
[75.37921906 361.40328979]
[76.50912476 346.44589233]
[77.63902283 331.48852539]
[70.88240814 318.21456909]
[79.63725281 305.03643799]
[80.76715088 290.07907104]
[81.89705658 275.12167358]
[75.14044189 261.84774780]
[83.89528656 248.66960144]
[85.02518463 233.71221924]
[86.15509033 218.75483704]
[77.68612671 203.43930054]
[88.04928589 188.28097534]
[88.80295563 173.29991150]
[89.55661774 158.31886292]
[79.52827454 155.59732056]
[70.12965393 151.16557312]
[61.64986420 145.15995789]
[54.34974670 137.76516724]
[48.45385742 129.20872498]
[44.14355850 119.75378418]
[41.55143738 109.69121552]
[40.75722885 99.33053589]
[25.90030670 97.26367950]
[11.04338646 95.19682312]
[-2.57109737 103.68360138]
[-17.64613342 98.19517517]
[-22.61744499 82.94179535]
[-13.67146587 69.62454987]
[2.32921290 68.45928955]
[13.11024094 80.33990479]
[27.96716118 82.40676117]
[42.82408524 84.47361755]
[45.67375946 76.36075592]
[49.66778564 68.74584961]
[54.72202301 61.78928375]
[60.73001480 55.63760376]
[67.56520081 50.42038727]
[61.00846481 36.92930984]
[54.45172501 23.43823051]
[47.89498901 9.94715309]
[30.71095657 -0.44911030]
[32.64102554 -19.62245941]
[25.41472054 -32.76705933]
[11.11481667 -40.79481125]
[11.18768787 -57.19379425]
[25.55837059 -65.09414673]
[39.44353867 -56.36865616]
[38.55931854 -39.99336243]
[45.78562546 -26.84876442]
[55.94517136 -24.84710884]
[63.43953323 -17.38501358]
[65.57263184 -6.80100298]
[61.38607025 3.39041615]
[67.94280243 16.88149452]
[74.49954224 30.37257385]
[81.05628204 43.86365128]
[91.14910889 41.41829681]
[101.51387787 40.77279282]
[111.83213043 41.94696426]
[121.78684998 44.90474701]
[131.07220459 49.55525589]
[139.40290833 55.75561905]
[150.71667480 45.90683365]
[162.03044128 36.05804443]
[173.34422302 26.20925903]
[184.65798950 16.36047363]
[195.97175598 6.51168728]
[207.28552246 -3.33709908]
[205.78823853 -18.78176689]
[213.68406677 -32.13974762]
[227.93687439 -38.27462769]
[243.06620789 -34.82741928]
[253.25448608 -23.12364388]
[254.58415222 -7.66364241]
[246.54388428 5.60789919]
[232.22535706 11.58780193]
[217.13430786 7.97667170]
[205.82054138 17.82545853]
[194.50677490 27.67424393]
[183.19300842 37.52302933]
[171.87922668 47.37181854]
[160.56546021 57.22060394]
[149.25169373 67.06938934]
[154.38868713 76.50479126]
[157.73736572 86.71273041]
[159.18759155 97.35755920]
[158.69171143 108.08927155]
[173.17243958 112.00189972]
[187.65316772 115.91452026]
[202.22396851 109.20101166]
[216.49224854 116.53556061]
[219.51260376 132.29173279]
[208.96807861 144.38273621]
[192.94752502 143.53340149]
[183.74053955 130.39524841]
[169.25982666 126.48262024]
[154.77909851 122.56999969]
[134.82424927 147.93147278]
[104.53767395 159.07252502]
[103.78400421 174.05358887]
[103.03034210 189.03463745]
[111.12001038 199.17416382]
[110.11717987 211.70298767]
[101.11247253 219.88473511]
[99.98256683 234.84211731]
[98.85266876 249.79949951]
[105.52846527 264.14328003]
[96.85443878 276.25158691]
[95.72454071 291.20895386]
[94.59463501 306.16635132]
[101.27043152 320.51013184]
[92.59640503 332.61840820]
[91.46650696 347.57580566]
[90.33660126 362.53317261]
[89.20670319 377.49057007]
[101.12426758 387.42794800]
[104.89209747 402.48062134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 122]
[7 121]
[8 120]
[9 119]
[11 117]
[12 116]
[13 115]
[15 113]
[16 112]
[17 111]
[19 108]
[20 107]
[21 106]
[29 39]
[30 38]
[31 37]
[44 63]
[45 62]
[46 61]
[47 60]
[49 56]
[50 55]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
