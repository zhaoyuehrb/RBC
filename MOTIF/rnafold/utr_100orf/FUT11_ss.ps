%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUCGGUGCUGGCCGAGGGGGCGCCGGCUGCCGGAGUGGACAUGGCGGCCGGCCCCAUUAGGGUGGUGUUGGUCCUUCUAGGGGUGCUCAGUGUCUGUGCAGCCAGCGGCCAUGGGUCCGUAGCGGAGAGGGAGGCCGGCG\
) } def
/len { sequence length } bind def

/coor [
[-62.40161514 257.39636230]
[-76.50431824 249.74827576]
[-79.17572784 233.92919922]
[-68.36656189 222.07418823]
[-67.71227264 207.08845520]
[-67.05797577 192.10273743]
[-66.40368652 177.11700439]
[-65.74939728 162.13128662]
[-65.09510803 147.14556885]
[-74.61100769 135.55041504]
[-89.43643188 133.26855469]
[-104.26184845 130.98670959]
[-119.08727264 128.70484924]
[-133.90385437 134.25277710]
[-145.30598450 124.66941071]
[-160.13140869 122.38755798]
[-169.78497314 134.25161743]
[-183.98706055 139.65507507]
[-198.88792419 137.24037170]
[-210.50173950 127.75484467]
[-215.77279663 113.82353210]
[-230.59822083 111.54167938]
[-245.42364502 109.25982666]
[-254.45907593 111.05466461]
[-260.54617310 106.76309204]
[-275.31829834 104.15837097]
[-290.09039307 101.55364227]
[-304.86251831 98.94892120]
[-319.63464355 96.34420013]
[-334.40673828 93.73947906]
[-349.17886353 91.13475037]
[-363.95098877 88.53002930]
[-378.72311401 85.92530823]
[-393.49520874 83.32058716]
[-408.26733398 80.71586609]
[-418.65917969 92.11819458]
[-433.57177734 96.07010651]
[-448.24661255 91.31056213]
[-458.00094604 79.35831451]
[-459.72222900 64.02727509]
[-452.86123657 50.20952988]
[-439.60723877 42.31427002]
[-424.18954468 42.86084366]
[-411.52792358 51.67484283]
[-405.66259766 65.94374847]
[-390.89050293 68.54846954]
[-376.11837769 71.15319061]
[-361.34625244 73.75791168]
[-346.57415771 76.36264038]
[-331.80203247 78.96736145]
[-317.02990723 81.57208252]
[-302.25778198 84.17680359]
[-287.48568726 86.78153229]
[-272.71356201 89.38625336]
[-257.94143677 91.99097443]
[-243.14179993 94.43440247]
[-228.31637573 96.71625519]
[-213.49095154 98.99810791]
[-204.27462769 87.29661560]
[-190.34597778 81.74245453]
[-175.40866089 83.92028046]
[-163.48873901 93.34429932]
[-157.84954834 107.56214142]
[-143.02412415 109.84398651]
[-129.26795959 104.13285828]
[-116.80541992 113.87943268]
[-101.98000336 116.16128540]
[-87.15457916 118.44313812]
[-72.32915497 120.72498322]
[-69.36248779 107.38473511]
[-60.94950104 97.05455017]
[-49.11237717 91.73123169]
[-36.48809433 92.26400757]
[-25.74267006 98.23310089]
[-19.00815010 108.10300446]
[-4.13647652 106.14511108]
[10.73519611 104.18721771]
[25.60686874 102.22932434]
[40.47854233 100.27143097]
[55.35021591 98.31353760]
[70.22188568 96.35564423]
[80.31505585 77.36108398]
[100.52752686 70.00434875]
[120.46881104 78.06726074]
[133.11968994 70.00776672]
[140.60137939 56.06736755]
[155.49270630 55.75458145]
[168.14356995 47.69508743]
[180.79444885 39.63559341]
[188.27613831 25.69519234]
[203.16746521 25.38240814]
[215.81834412 17.32291412]
[228.46920776 9.26342010]
[238.57910156 -4.34637117]
[254.45571899 1.60085821]
[253.13598633 18.50336266]
[236.52870178 21.91429138]
[223.87783813 29.97378540]
[211.22695923 38.03327942]
[204.65013123 51.39720917]
[188.85394287 52.28646469]
[176.20306396 60.34595871]
[163.55220032 68.40545654]
[156.97537231 81.76938629]
[141.17918396 82.65863800]
[128.52830505 90.71813202]
[129.78457642 96.40885925]
[129.91691589 102.23509216]
[144.12086487 107.05668640]
[158.32481384 111.87827301]
[172.52876282 116.69986725]
[186.78446960 121.36623383]
[201.09022522 125.87682343]
[218.01443481 124.87324524]
[223.66389465 140.85824585]
[209.86752319 150.71199036]
[196.57963562 140.18257141]
[182.27388000 135.67199707]
[174.89294434 136.66795349]
[167.70716858 130.90382385]
[153.50321960 126.08222961]
[139.29927063 121.26063538]
[125.09532166 116.43904114]
[117.62246704 124.27892303]
[107.85272217 128.95431519]
[97.05945587 129.85583496]
[86.64945984 126.86597443]
[77.97956085 120.37443542]
[72.17977905 111.22731781]
[57.30810928 113.18521118]
[42.43643570 115.14310455]
[27.56476212 117.10099792]
[12.69308949 119.05889130]
[-2.17858386 121.01678467]
[-17.05025673 122.97467804]
[-27.24790764 142.16644287]
[-50.10938263 147.79985046]
[-50.76367569 162.78558350]
[-51.41796494 177.77130127]
[-52.07225800 192.75701904]
[-52.72654724 207.74275208]
[-53.38083649 222.72846985]
[-43.64603806 235.48046875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 142]
[5 141]
[6 140]
[7 139]
[8 138]
[9 137]
[10 69]
[11 68]
[12 67]
[13 66]
[15 64]
[16 63]
[21 58]
[22 57]
[23 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[75 135]
[76 134]
[77 133]
[78 132]
[79 131]
[80 130]
[81 129]
[84 106]
[85 105]
[87 103]
[88 102]
[89 101]
[91 99]
[92 98]
[93 97]
[108 123]
[109 122]
[110 121]
[111 120]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
