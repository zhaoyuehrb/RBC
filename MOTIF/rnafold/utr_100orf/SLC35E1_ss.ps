%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCCGCUCGGGCAGGAUGGCGGCGGCCGCGGUGGGCGCGGGCCACGGCGCGGGGGGCCCGGGCGCAGCGAGCAGCAGUGGUGGGGCGCGCGAGGGCGCGCGGGUGGCGGCGCUGU\
) } def
/len { sequence length } bind def

/coor [
[90.53260803 119.13553619]
[79.58182526 129.38641357]
[68.63105011 139.63728333]
[63.84381104 154.71682739]
[49.26463318 157.76591492]
[38.31385040 168.01678467]
[27.36307144 178.26765442]
[16.41229057 188.51853943]
[5.46151066 198.76940918]
[-5.21486282 209.30577087]
[-15.60938931 220.12030029]
[-15.04594135 235.91453552]
[-25.87673378 247.42407227]
[-41.67604828 247.82051086]
[-53.07043457 236.86863708]
[-53.29980469 221.06600952]
[-42.22807312 209.78805542]
[-26.42390823 209.72576904]
[-16.02938271 198.91125488]
[-15.23928642 194.08444214]
[-11.32766151 189.74464417]
[-4.78936291 187.81861877]
[6.16141748 177.56774902]
[17.11219788 167.31687927]
[28.06297874 157.06600952]
[39.01375961 146.81513977]
[43.01772308 132.46879578]
[58.38017273 128.68650818]
[69.33095551 118.43563080]
[80.28173828 108.18475342]
[79.12490845 95.52444458]
[85.37014771 84.45111847]
[79.58419800 70.61194611]
[67.12252808 60.86425781]
[69.35176086 46.13741684]
[63.56581116 32.29824066]
[51.10414505 22.55055237]
[53.33337402 7.82371330]
[47.54742432 -6.01546144]
[35.08575821 -15.76315117]
[37.31498718 -30.48999023]
[31.52903557 -44.32916641]
[25.74308395 -58.16833878]
[19.95713234 -72.00751495]
[14.17117977 -85.84668732]
[8.38522816 -99.68586731]
[-6.86739302 -100.95713806]
[-19.77590179 -109.18082428]
[-27.37401581 -122.46717834]
[-27.91574478 -137.76309204]
[-21.27660370 -151.55368042]
[-8.98221970 -160.66996765]
[6.14225054 -163.01710510]
[20.62131310 -158.05570984]
[31.12778473 -146.92590332]
[35.24735641 -132.18522644]
[32.03337860 -117.22097015]
[22.22440338 -105.47181702]
[28.01035500 -91.63264465]
[33.79630661 -77.79346466]
[39.58226013 -63.95429230]
[45.36820984 -50.11511612]
[51.15416336 -36.27594376]
[63.20198059 -27.51812363]
[61.38659668 -11.80141354]
[67.17254639 2.03776121]
[79.22036743 10.79558086]
[77.40498352 26.51229095]
[83.19093323 40.35146332]
[95.23875427 49.10928345]
[93.42337036 64.82599640]
[99.20932007 78.66516876]
[114.79450989 84.60771179]
[121.34941101 99.94541931]
[135.40679932 105.17894745]
[149.46418762 110.41247559]
[163.52157593 115.64601135]
[177.57896423 120.87953949]
[186.84204102 120.95517731]
[191.93528748 126.44120789]
[205.84963989 132.04399109]
[221.54101562 130.02130127]
[230.45709229 141.95246887]
[244.37142944 147.55525208]
[259.32241821 137.48435974]
[277.17471313 138.29946899]
[290.90451050 149.49427795]
[295.22064209 166.51524353]
[309.41128540 171.37588501]
[323.60192871 176.23652649]
[337.79254150 181.09715271]
[351.98318481 185.95779419]
[366.17382812 190.81842041]
[382.15374756 187.13409424]
[393.13497925 199.31378174]
[387.82095337 214.82807922]
[371.67831421 217.71719360]
[361.31320190 205.00906372]
[347.12255859 200.14842224]
[332.93191528 195.28779602]
[318.74127197 190.42715454]
[304.55062866 185.56652832]
[290.36001587 180.70588684]
[281.45654297 189.16418457]
[269.71704102 193.00968933]
[257.39059448 191.44009399]
[246.86705017 184.69691467]
[240.21354675 174.03070068]
[238.76866150 161.46958923]
[224.85432434 155.86682129]
[210.15818787 158.29023743]
[200.24685669 145.95832825]
[186.33251953 140.35554504]
[172.34542847 134.93692017]
[158.28804016 129.70339966]
[144.23065186 124.46986389]
[130.17326355 119.23633575]
[116.11587524 114.00280762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 19]
[11 18]
[32 72]
[33 71]
[35 69]
[36 68]
[38 66]
[39 65]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[74 118]
[75 117]
[76 116]
[77 115]
[78 114]
[80 113]
[81 112]
[83 110]
[84 109]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
