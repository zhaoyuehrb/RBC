%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAACAUCACCUGGAUGGCCAGCCACACUGGAUGGUCGGAUUUCAUCCUGAUGGGACUCUUCAGACAAUCCAAACAUCCAAUGGCCAAUAUCACCU\
) } def
/len { sequence length } bind def

/coor [
[66.35366821 190.23527527]
[68.53745270 175.39540100]
[57.36948776 185.40922546]
[46.20152664 195.42304993]
[46.96539688 205.13780212]
[43.12699890 213.94290161]
[35.70812607 219.82214355]
[26.53309059 221.49691772]
[17.78107452 218.70259094]
[5.72862053 227.63223267]
[-6.32383394 236.56185913]
[-18.37628746 245.49148560]
[-22.15070534 261.08422852]
[-36.75513077 267.72427368]
[-50.98630142 260.31796265]
[-53.92727661 244.54678345]
[-43.32199478 232.50903320]
[-27.30592155 233.43904114]
[-15.25346661 224.50939941]
[-3.20101261 215.57977295]
[8.85144138 206.65013123]
[15.06687832 187.07507324]
[36.18770599 184.25508118]
[47.35566711 174.24125671]
[58.52362823 164.22743225]
[67.45326233 152.17498779]
[73.78078461 138.57489014]
[80.10831451 124.97480774]
[86.43583679 111.37471771]
[82.41592407 102.04232788]
[84.18982697 92.03701019]
[91.17304993 84.65543365]
[101.06468201 82.32976532]
[108.22548676 69.14936829]
[115.38628387 55.96896362]
[122.54708099 42.78856277]
[129.70787048 29.60816193]
[136.86868286 16.42776108]
[130.35926819 2.46588826]
[133.28503418 -12.47711563]
[144.31825256 -22.71098137]
[159.08518982 -24.46468544]
[166.24598694 -37.64508820]
[173.40678406 -50.82548904]
[180.56758118 -64.00588989]
[187.72837830 -77.18628693]
[182.09999084 -86.61093903]
[180.99784851 -97.45067596]
[184.56027222 -107.66092682]
[192.05232239 -115.34519958]
[202.01612854 -119.10732269]
[212.55427551 -118.30480957]
[220.91204834 -130.76063538]
[229.26983643 -143.21644592]
[237.62762451 -155.67227173]
[231.40364075 -169.78842163]
[233.82205200 -185.02505493]
[244.11111450 -196.52020264]
[258.98764038 -200.60583496]
[273.70458984 -195.97821045]
[283.56585693 -184.11399841]
[285.42468262 -168.79902649]
[278.68798828 -154.92025757]
[265.50540161 -146.90634155]
[250.08343506 -147.31448364]
[241.72566223 -134.85867310]
[233.36787415 -122.40284729]
[225.01008606 -109.94702911]
[230.31332397 -91.36346436]
[220.32743835 -74.47105408]
[200.90878296 -70.02548981]
[193.74798584 -56.84508896]
[186.58718872 -43.66468811]
[179.42639160 -30.48428917]
[172.26559448 -17.30388832]
[178.83055115 -3.96074843]
[176.24914551 10.86491680]
[165.30487061 21.45152855]
[150.04907227 23.58856010]
[142.88827515 36.76895905]
[135.72747803 49.94935989]
[128.56668091 63.12976074]
[121.40588379 76.31016541]
[114.24508667 89.49056244]
[115.81017303 107.96298981]
[100.03592682 117.70223999]
[93.70840454 131.30233765]
[87.38087463 144.90242004]
[81.05335236 158.50251770]
[94.61438751 152.09172058]
[109.60576630 151.58332825]
[123.56996155 157.06066895]
[134.21781921 167.62583923]
[139.80384827 181.54692078]
[139.41233826 196.54180908]
[133.10745239 210.15240479]
[121.92275238 220.14753723]
[107.69174957 224.88868713]
[92.74732971 223.59866333]
[79.53931427 216.48893738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[9 21]
[10 20]
[11 19]
[12 18]
[26 89]
[27 88]
[28 87]
[29 86]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[52 68]
[53 67]
[54 66]
[55 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
