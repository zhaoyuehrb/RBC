%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCGACGGCCGUAGGGAGCGCUUCCUCCUCCCCGCCGCCGCCCUCGCCAUGGCCGCGCCGGCCCCGGGCCUCAUCUCGGUGUUCUCGAGUUCCCAGGAGCUGGGUGCGGCGCUAGCGCAGCUGGUGGCCCAGCGCGCAGCAUGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[63.14934921 148.76309204]
[66.46886444 134.13500977]
[75.61837769 122.24861145]
[88.90712738 115.29738617]
[75.52084351 122.06549835]
[62.13455963 128.83361816]
[48.74827576 135.60173035]
[35.57969284 142.78424072]
[22.64163780 150.37414551]
[9.70358181 157.96405029]
[-3.23447394 165.55397034]
[-11.22260761 179.21047974]
[-26.11537743 178.97668457]
[-39.05343246 186.56660461]
[-47.04156876 200.22311401]
[-61.93433762 199.98931885]
[-74.87239075 207.57922363]
[-87.81044769 215.16914368]
[-100.74850464 222.75904846]
[-113.68656158 230.34895325]
[-114.21098328 245.76739502]
[-123.00677490 258.44168091]
[-137.26724243 264.32748413]
[-152.44190979 261.54669189]
[-163.68861389 250.98658752]
[-167.41854858 236.01692200]
[-162.44151306 221.41442871]
[-150.34567261 211.83871460]
[-134.99076843 210.34536743]
[-121.27646637 217.41090393]
[-108.33841705 209.82098389]
[-95.40036011 202.23107910]
[-82.46230316 194.64117432]
[-69.52424622 187.05126953]
[-62.46152878 173.93763733]
[-46.64334106 173.62854004]
[-33.70528793 166.03863525]
[-26.64256859 152.92500305]
[-10.82438183 152.61590576]
[2.11367393 145.02600098]
[15.05173016 137.43609619]
[27.98978615 129.84617615]
[29.22270203 126.47759247]
[32.18523026 123.55781555]
[36.63915634 121.91010284]
[41.98016357 122.21544647]
[55.36644745 115.44733429]
[68.75273132 108.67921448]
[82.13901520 101.91110229]
[83.20504761 95.94850922]
[86.12278748 90.90781403]
[90.40688324 87.31462860]
[95.44207764 85.48052979]
[100.56845093 85.47926331]
[105.17401123 71.20380402]
[109.77957916 56.92834473]
[114.38514709 42.65288544]
[118.99070740 28.37742424]
[123.59627533 14.10196304]
[128.20184326 -0.17349784]
[132.80740356 -14.44895840]
[137.26422119 -28.77155495]
[141.57180786 -43.13973999]
[145.87937927 -57.50792313]
[150.03727722 -71.92014313]
[154.04501343 -86.37483215]
[150.27616882 -101.74057770]
[161.13269043 -111.93788910]
[165.14042664 -126.39257812]
[169.14816284 -140.84727478]
[162.02714539 -147.64898682]
[157.93093872 -156.54002380]
[157.39479065 -166.25631714]
[160.45112610 -175.43363953]
[166.63098145 -182.79922485]
[175.03536987 -187.34815979]
[184.46594238 -188.48049927]
[189.66136169 -202.55201721]
[194.85676575 -216.62355042]
[200.05218506 -230.69506836]
[205.24760437 -244.76658630]
[199.86776733 -259.88070679]
[208.45228577 -273.43377686]
[224.41583252 -275.02905273]
[235.51254272 -263.44274902]
[233.22998047 -247.56289673]
[219.31912231 -239.57116699]
[214.12370300 -225.49964905]
[208.92828369 -211.42813110]
[203.73287964 -197.35661316]
[198.53746033 -183.28509521]
[208.68183899 -165.60380554]
[202.52488708 -145.86692810]
[183.60285950 -136.83952332]
[179.59512329 -122.38484192]
[175.58737183 -107.93015289]
[179.64288330 -93.59829712]
[168.49971008 -82.36708832]
[164.49195862 -67.91239929]
[165.74368286 -60.57899475]
[160.24757385 -53.20034027]
[155.93998718 -38.83215714]
[151.63240051 -24.46397209]
[152.73129272 -17.10611153]
[147.08285522 -9.84339428]
[142.47729492 4.43206644]
[137.87173462 18.70752716]
[133.26617432 32.98298645]
[128.66059875 47.25844955]
[124.05503845 61.53390884]
[119.44947815 75.80937195]
[114.84391022 90.08483124]
[119.74546051 104.26139069]
[132.18490601 112.64353180]
[144.62434387 121.02567291]
[153.55242920 123.24855804]
[157.23289490 129.71383667]
[169.49525452 138.35295105]
[181.75762939 146.99206543]
[194.01998901 155.63117981]
[202.89990234 158.03932190]
[206.44506836 164.57977295]
[218.52505493 173.47212219]
[230.60504150 182.36447144]
[242.68502808 191.25682068]
[254.76501465 200.14916992]
[271.11434937 201.42636108]
[277.93783569 216.33851624]
[268.21603394 229.54528809]
[251.94992065 227.46067810]
[245.87266541 212.22915649]
[233.79267883 203.33680725]
[221.71269226 194.44445801]
[209.63270569 185.55210876]
[197.55271912 176.65975952]
[185.38087463 167.89355469]
[173.11851501 159.25444031]
[160.85614014 150.61532593]
[148.59376526 141.97621155]
[136.24220276 133.46511841]
[123.80275726 125.08296967]
[111.36331940 116.70082855]
[123.68526459 125.25475311]
[131.28250122 138.18850708]
[132.75357056 153.11619568]
[127.82711029 167.28411865]
[117.41189575 178.07870483]
[103.42922211 183.50869751]
[88.45846558 182.57241821]
[75.26129913 175.44258118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 49]
[5 48]
[6 47]
[7 46]
[8 42]
[9 41]
[10 40]
[11 39]
[13 37]
[14 36]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[60 106]
[61 105]
[62 103]
[63 102]
[64 101]
[65 99]
[66 98]
[68 96]
[69 95]
[70 94]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[113 142]
[114 141]
[115 140]
[117 139]
[118 138]
[119 137]
[120 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
