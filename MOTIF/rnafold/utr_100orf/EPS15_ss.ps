%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCGCCUGCGGCCGCUCCCUCCGCCUCCUCCCCGCCCCGAGCCCCAGUCAGCCCGUCUUCCUUCCCCUCCCUUGCAUGAUGGAAACACCAUGGCUGCGGCGGCCCAGCUCUCUCUGACACAGUUAUCAAGUGGGAAUCCUGUAUAUGAAAAAUACUAUAGACAGGUUGAUACAGGCAAUACUGGAAGGG\
) } def
/len { sequence length } bind def

/coor [
[61.60910797 304.64038086]
[57.51107025 319.06973267]
[53.41303253 333.49908447]
[49.31499481 347.92843628]
[59.00473785 360.04818726]
[59.68645859 375.55029297]
[51.09801865 388.47384644]
[36.54185104 393.84948730]
[21.61509895 389.61019897]
[12.05740356 377.38601685]
[11.54389191 361.87744141]
[20.27202034 349.04782104]
[34.88564682 343.83038330]
[38.98368454 329.40106201]
[43.08172226 314.97171021]
[47.17975998 300.54235840]
[41.41234207 292.08486938]
[41.25709534 281.62948608]
[47.00732803 272.63400269]
[56.96335983 268.20657349]
[61.52889252 253.91825867]
[66.09442902 239.62994385]
[70.65996552 225.34164429]
[75.10906219 211.01664734]
[79.44142151 196.65591431]
[83.06761932 182.10081482]
[85.97900391 167.38606262]
[88.89038849 152.67131042]
[91.80177307 137.95657349]
[78.40553284 131.21324158]
[68.84523010 120.10425568]
[64.38698578 106.50115204]
[65.46565247 92.56910706]
[71.65560913 80.42295837]
[81.77532959 71.80621338]
[70.38114166 62.05057526]
[58.98695755 52.29493713]
[47.59276962 42.53929901]
[36.19858170 32.78366089]
[22.96957970 35.36297607]
[10.84935188 29.92704773]
[4.17600775 18.66732407]
[5.19576359 5.81366301]
[-6.03812265 -4.12614584]
[-17.27200890 -14.06595421]
[-28.50589561 -24.00576401]
[-43.57353592 -20.80071259]
[-57.47673035 -27.00994682]
[-64.96916199 -40.06090164]
[-63.35924530 -54.84421158]
[-74.59313202 -64.78401947]
[-89.13052368 -60.02887726]
[-103.99803162 -63.16799545]
[-115.22348022 -73.26035309]
[-119.85908508 -87.52104187]
[-116.75511169 -102.08918762]
[-127.98899841 -112.02899170]
[-139.22288513 -121.96880341]
[-150.45677185 -131.90861511]
[-161.69065857 -141.84841919]
[-174.47479248 -133.80215454]
[-189.00836182 -129.68484497]
[-204.11317444 -129.83027649]
[-218.56477356 -134.22665405]
[-231.19160461 -142.51759338]
[-240.97009277 -154.03096008]
[-247.10752869 -167.83345032]
[-249.10638428 -182.80613708]
[-246.80461121 -197.73524475]
[-240.38880920 -211.41056824]
[-230.37907410 -222.72348022]
[-217.58686829 -230.75689697]
[-203.04916382 -234.85960388]
[-187.94450378 -234.69898987]
[-173.49734497 -230.28810120]
[-160.87882996 -221.98448181]
[-151.11192322 -210.46128845]
[-144.98834229 -196.65264893]
[-143.00454712 -181.67796326]
[-145.32130432 -166.75115967]
[-151.75083923 -153.08230591]
[-140.51695251 -143.14250183]
[-129.28306580 -133.20268250]
[-118.04918671 -123.26287842]
[-106.81529999 -113.32307434]
[-92.73358154 -118.17804718]
[-78.01451111 -115.31360626]
[-66.63024139 -105.40074921]
[-61.70392990 -91.02618408]
[-64.65332031 -76.01790619]
[-53.41943359 -66.07809448]
[-38.94221115 -69.47633362]
[-25.07596588 -63.62901306]
[-17.21982193 -50.58545685]
[-18.56608582 -35.23965073]
[-7.33220053 -25.29984093]
[3.90168595 -15.36003208]
[15.13557243 -5.42022371]
[31.85562706 -7.16628790]
[44.92728043 3.93349504]
[45.95421982 21.38947296]
[57.34840775 31.14511108]
[68.74259186 40.90074921]
[80.13677979 50.65638733]
[91.53096771 60.41202545]
[106.52649689 60.04581451]
[117.43090057 49.74561310]
[128.33529663 39.44541550]
[139.23968506 29.14521408]
[132.84489441 14.56023121]
[131.82987976 -1.30581117]
[136.29891968 -16.53529358]
[145.69458008 -29.29382706]
[158.86718750 -38.05120850]
[174.21548462 -41.76492691]
[189.88121033 -40.00424957]
[203.97419739 -33.00009155]
[214.70948792 -43.47641754]
[225.44479370 -53.95274353]
[232.55773926 -69.34242249]
[249.31504822 -66.76773071]
[251.47985840 -49.95256042]
[235.92111206 -43.21744919]
[225.18582153 -32.74112320]
[214.45051575 -22.26479530]
[220.66729736 -9.53763390]
[222.65037537 4.50888538]
[220.19255066 18.50194550]
[213.52128601 31.06981277]
[203.27778625 40.97630692]
[190.45529175 47.24239349]
[176.30287170 49.24291992]
[162.20370483 46.76897430]
[149.53988647 40.04961014]
[138.63549805 50.34981155]
[127.73109436 60.65001297]
[116.82669830 70.95021057]
[126.47170258 77.27755737]
[133.71385193 86.81183624]
[137.49180603 98.63367462]
[137.09718323 111.47652435]
[151.34786987 116.15820312]
[165.59855652 120.83987427]
[179.84922791 125.52154541]
[194.09991455 130.20321655]
[209.62561035 127.15962219]
[219.30220032 138.48274231]
[233.55287170 143.16441345]
[247.80355835 147.84608459]
[262.05422974 152.52775574]
[274.55816650 143.33911133]
[290.07516479 143.28862000]
[302.63861084 152.39572144]
[307.41763306 167.15853882]
[302.57458496 181.90046692]
[289.97171021 190.95292664]
[274.45507812 190.83508301]
[261.99114990 181.59222412]
[257.37255859 166.77844238]
[243.12188721 162.09677124]
[228.87120056 157.41510010]
[214.62051392 152.73342896]
[200.11413574 156.11187744]
[189.41824341 144.45390320]
[175.16755676 139.77223206]
[160.91688538 135.09056091]
[146.66619873 130.40887451]
[132.41551208 125.72721100]
[125.94076538 129.51239014]
[139.93345642 134.91651917]
[144.43278503 149.22583008]
[136.05073547 161.66532898]
[121.09902954 162.86802673]
[110.83636475 151.92829895]
[112.99127197 137.08276367]
[106.51652527 140.86795044]
[103.60514069 155.58270264]
[100.69374847 170.29745483]
[97.78236389 185.01220703]
[110.86563873 177.67546082]
[125.34488678 181.59355164]
[132.94309998 194.52673340]
[129.31678772 209.08180237]
[116.53891754 216.93840027]
[101.91391754 213.60534668]
[93.80215454 200.98826599]
[89.46979523 215.34899902]
[89.98653412 224.48435974]
[84.94828033 229.90718079]
[80.38274384 244.19548035]
[75.81720734 258.48379517]
[71.25167084 272.77212524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[20 192]
[21 191]
[22 190]
[23 189]
[24 187]
[25 186]
[26 179]
[27 178]
[28 177]
[29 176]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[43 98]
[44 97]
[45 96]
[46 95]
[50 91]
[51 90]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[106 137]
[107 136]
[108 135]
[109 134]
[117 125]
[118 124]
[119 123]
[141 168]
[142 167]
[143 166]
[144 165]
[145 164]
[147 162]
[148 161]
[149 160]
[150 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
