%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAAACCUUCCACCCGUCAGUCUAGAAGGAUAAGAGAAAGAAAGUUAAGCAACUACAGGAAAUGGCUUUGGGAGUUCCAAUAUCAGUCUAUCUUUUAUUCAACGCAAUGACAGCACUGACCGAAGAGGCAGCCGUGACUGUAACACCUCCAAUCACAGCCC\
) } def
/len { sequence length } bind def

/coor [
[207.01405334 340.96087646]
[201.50115967 336.75799561]
[197.10012817 331.37823486]
[194.05694580 325.10891724]
[192.54475403 318.28729248]
[192.65409851 311.28262329]
[194.38751221 304.47604370]
[197.65893555 298.23989868]
[202.29791260 292.91729736]
[195.42451477 279.58477783]
[188.55111694 266.25222778]
[181.67771912 252.91970825]
[169.01698303 253.67698669]
[156.97099304 249.55969238]
[147.35206604 241.14967346]
[141.62150574 229.67742920]
[140.66781616 216.84213257]
[144.66897583 204.55990601]
[153.06060791 194.67787170]
[146.69976807 181.09333801]
[140.33894348 167.50878906]
[133.97810364 153.92425537]
[127.61726379 140.33970642]
[121.25643158 126.75516510]
[108.21771240 132.40847778]
[94.31684875 132.19929504]
[82.01395416 126.41844940]
[73.38237000 116.32052612]
[69.75993347 103.86119843]
[71.54559326 91.32147980]
[78.17131042 80.89072418]
[69.82292175 68.42860413]
[61.47453690 55.96648788]
[53.12614441 43.50436783]
[44.77775574 31.04224968]
[36.42936707 18.58013153]
[28.08097839 6.11801338]
[19.73258781 -6.34410524]
[11.38419914 -18.80622292]
[3.03581023 -31.26834106]
[-11.07301426 -38.42736816]
[-11.72828484 -53.30755234]
[-20.07667542 -65.76966858]
[-28.42506409 -78.23178864]
[-48.48724747 -76.05738068]
[-66.35501099 -94.29521179]
[-80.22682953 -100.00246429]
[-94.09864044 -105.70972443]
[-107.97045898 -111.41697693]
[-124.14341736 -108.70266724]
[-134.37042236 -121.52219391]
[-128.13082886 -136.68792725]
[-111.84336853 -138.59864807]
[-102.26320648 -125.28878784]
[-88.39138794 -119.58153534]
[-74.51957703 -113.87428284]
[-60.64775848 -108.16703033]
[-54.88715363 -112.96968079]
[-64.49245453 -124.49089050]
[-74.09775543 -136.01208496]
[-83.70288086 -147.53344727]
[-72.18138123 -157.13839722]
[-62.57655334 -145.61740112]
[-52.97125244 -134.09619141]
[-43.36595154 -122.57498169]
[-37.60534668 -127.37763214]
[-40.72402191 -142.04985046]
[-43.84269714 -156.72206116]
[-56.81388474 -165.34680176]
[-59.76765442 -180.27093506]
[-51.46535110 -192.58383179]
[-54.58402634 -207.25604248]
[-57.70270157 -221.92825317]
[-60.82137680 -236.60046387]
[-73.43894196 -246.50888062]
[-73.41507721 -262.55191040]
[-60.76808167 -272.42272949]
[-45.19964981 -268.54928589]
[-38.65255356 -253.90295410]
[-46.14916229 -239.71914673]
[-43.03048706 -225.04693604]
[-39.91181183 -210.37472534]
[-36.79313660 -195.70249939]
[-24.20050049 -187.83096313]
[-20.82871056 -172.99568176]
[-29.17048454 -159.84074402]
[-26.05180931 -145.16851807]
[-22.93313217 -130.49630737]
[-7.12320232 -107.02211761]
[-15.96294498 -86.58017731]
[-7.61455631 -74.11805725]
[0.73383313 -61.65594101]
[14.24552441 -55.38829041]
[15.49792862 -39.61672974]
[23.84631729 -27.15461349]
[32.19470596 -14.69249439]
[40.54309464 -2.23037577]
[48.89148712 10.23174286]
[57.23987579 22.69386101]
[65.58826447 35.15597916]
[73.93665314 47.61809921]
[82.28504181 60.08021545]
[90.63343048 72.54233551]
[102.80307770 69.82863617]
[115.53306580 72.49121857]
[126.46435547 80.48549652]
[133.39184570 92.74329376]
[146.91520691 86.25342560]
[150.61897278 71.06079102]
[163.25239563 61.84500122]
[178.85035706 62.95747375]
[190.04797363 73.87293243]
[191.55809021 89.43742371]
[182.66766357 102.30188751]
[167.57447815 106.39209747]
[153.40509033 99.77679443]
[139.88171387 106.26667023]
[134.84097290 120.39433289]
[141.20181274 133.97888184]
[147.56263733 147.56341553]
[153.92347717 161.14796448]
[160.28431702 174.73249817]
[166.64515686 188.31704712]
[184.14720154 189.39131165]
[198.63621521 199.10932922]
[206.19389343 214.73509216]
[204.83103943 231.95001221]
[195.01025391 246.04631042]
[201.88365173 259.37884521]
[208.75704956 272.71136475]
[215.63044739 286.04388428]
[239.23049927 290.73739624]
[251.75119019 310.99142456]
[245.53211975 333.71682739]
[254.57833862 345.68203735]
[269.07284546 352.02392578]
[270.57653809 366.84243774]
[279.62277222 378.80761719]
[288.66900635 390.77282715]
[297.71520996 402.73800659]
[312.20971680 409.07989502]
[313.71343994 423.89840698]
[322.75964355 435.86361694]
[338.13412476 434.58728027]
[351.74725342 441.84582520]
[359.25512695 455.32305908]
[358.26199341 470.71841431]
[349.08480835 483.11932373]
[334.65191650 488.56869507]
[319.56884766 485.32763672]
[308.64852905 474.43038940]
[305.37561035 459.35418701]
[310.79446411 444.90982056]
[301.74822998 432.94464111]
[287.90075684 427.45855713]
[285.75003052 411.78424072]
[276.70379639 399.81903076]
[267.65759277 387.85385132]
[258.61135864 375.88864136]
[244.76388550 370.40258789]
[242.61314392 354.72824097]
[233.56692505 342.76306152]
[226.98200989 344.68270874]
[220.11323547 345.02575684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 131]
[10 130]
[11 129]
[12 128]
[19 123]
[20 122]
[21 121]
[22 120]
[23 119]
[24 118]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[40 94]
[42 92]
[43 91]
[44 90]
[46 57]
[47 56]
[48 55]
[49 54]
[66 88]
[67 87]
[68 86]
[71 83]
[72 82]
[73 81]
[74 80]
[107 117]
[108 116]
[134 162]
[135 161]
[137 159]
[138 158]
[139 157]
[140 156]
[142 154]
[143 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
