%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGGGCUUCCUGUCACGUGGUCCUUCAAUGAAGCUGUGCAUGGGCCUGGCAUGUGUCUUGUCCCUUUGGAACACAGUGUCUGGCAUCAAAGGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[81.71604919 104.45227051]
[66.93502045 101.89861298]
[52.15398788 99.34496307]
[37.37295914 96.79131317]
[22.59192848 94.23765564]
[7.81089878 91.68400574]
[-6.97013140 89.13034821]
[-21.75116158 86.57669830]
[-36.53219223 84.02304077]
[-51.31322098 81.46939087]
[-66.09425354 78.91573334]
[-77.17567444 85.73915100]
[-89.52585602 83.19011688]
[-96.53617096 73.19644928]
[-111.23063660 70.18434143]
[-120.44850159 71.53474426]
[-126.33201599 66.84328461]
[-140.92568970 63.37564468]
[-155.51936340 59.90799713]
[-170.11305237 56.44035339]
[-176.57273865 62.33319855]
[-184.78131104 65.05614471]
[-193.29255676 64.21116638]
[-200.63986206 60.02182007]
[-205.58895874 53.28115463]
[-207.34506226 45.20272827]
[-221.39559937 39.95083237]
[-235.44613647 34.69893265]
[-249.49667358 29.44703674]
[-266.45022583 29.56495857]
[-271.25674438 13.30661678]
[-256.96435547 4.18718052]
[-244.24478149 15.39650059]
[-230.19424438 20.64839745]
[-216.14370728 25.90029335]
[-202.09317017 31.15219116]
[-181.38681030 25.10008049]
[-166.64540100 41.84667587]
[-152.05172729 45.31431961]
[-137.45805359 48.78196335]
[-122.86436462 52.24961090]
[-108.21852875 55.48987579]
[-93.52406311 58.50198364]
[-77.29816437 52.01957321]
[-63.54059982 64.13470459]
[-48.75956726 66.68836212]
[-33.97853851 69.24201202]
[-19.19750786 71.79566956]
[-4.41647816 74.34931946]
[10.36455250 76.90296936]
[25.14558220 79.45662689]
[39.92661285 82.01027679]
[54.70764160 84.56393433]
[69.48867035 87.11758423]
[84.26970673 89.67124176]
[90.86635590 83.54697418]
[99.55274200 81.18709564]
[108.34146118 83.13152313]
[115.22168732 88.93538666]
[118.61926270 97.27078247]
[133.09803772 101.19061279]
[147.57681274 105.11044312]
[162.91937256 101.24829102]
[173.18247986 112.04264832]
[187.66125488 115.96247864]
[202.14002991 119.88230133]
[211.42401123 119.10758209]
[217.00448608 124.15573883]
[231.35433960 128.52395630]
[245.70420837 132.89218140]
[260.05407715 137.26040649]
[274.40393066 141.62861633]
[284.84020996 132.47225952]
[298.34042358 129.73556519]
[311.31195068 134.03645325]
[320.35760498 144.13456726]
[323.16510010 157.28654480]
[337.37219238 162.09893799]
[351.57925415 166.91131592]
[368.52093506 166.26620483]
[373.83074951 182.36720276]
[359.82888794 191.92671204]
[346.76687622 181.11839294]
[332.55978394 176.30601501]
[318.35272217 171.49362183]
[305.35168457 181.38185120]
[288.85449219 181.63887024]
[275.28286743 171.96890259]
[270.03573608 155.97848511]
[255.68585205 151.61026001]
[241.33599854 147.24205017]
[226.98612976 142.87382507]
[212.63626099 138.50559998]
[198.22019958 134.36108398]
[183.74142456 130.44125366]
[169.26264954 126.52142334]
[154.95570374 130.66395569]
[143.65698242 119.58921814]
[129.17820740 115.66938782]
[114.69943237 111.74956512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[14 43]
[15 42]
[17 41]
[18 40]
[19 39]
[20 38]
[26 36]
[27 35]
[28 34]
[29 33]
[60 100]
[61 99]
[62 98]
[64 96]
[65 95]
[66 94]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
