%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGGGUCUGUAGGUUAAGGGAGAAGAUGGCGGCGCUAGGGGAACCCGUGCGGCUGGAGAGAGAUAUUUGUAGAGCAAUUGAAUUAUUGGAAAAACUACAAAGGAGUGGAGAAGUACCACCACAGA\
) } def
/len { sequence length } bind def

/coor [
[94.93324280 199.21136475]
[94.56512451 184.21588135]
[94.19700623 169.22039795]
[93.82888794 154.22491455]
[93.46076965 139.22943115]
[93.09265137 124.23395538]
[79.45513153 117.98751068]
[67.85997772 127.50341034]
[56.26481628 137.01931763]
[44.66965866 146.53520203]
[49.43769455 160.94459534]
[48.67457581 176.10314941]
[42.48351669 189.96083069]
[31.70179939 200.64347839]
[17.78756714 206.70637512]
[2.62260318 207.32952881]
[-11.74215317 202.42869568]
[-23.36398888 192.66665649]
[-30.67114449 179.36364746]
[-32.67538834 164.31880188]
[-29.10566139 149.56680298]
[-20.44474220 137.10273743]
[-7.86394644 128.61227417]
[6.93527460 125.24366760]
[21.95144844 127.45250702]
[35.15376282 134.94004822]
[46.74891663 125.42415619]
[58.34407425 115.90825653]
[69.93923187 106.39235687]
[68.83576202 91.43299866]
[55.96983337 83.72145844]
[43.10390472 76.00991821]
[27.28933525 75.55171204]
[20.35055733 62.37208557]
[7.48462772 54.66054153]
[-5.38130140 46.94900131]
[-18.24723053 39.23746109]
[-25.01149559 38.73561859]
[-29.73715973 35.34432220]
[-31.54204559 30.81861115]
[-44.01409149 22.48505783]
[-56.48613358 14.15150452]
[-73.01506042 10.37910175]
[-73.96574402 -6.54817057]
[-57.96317291 -12.14763832]
[-48.15258026 1.67946005]
[-35.68053818 10.01301384]
[-23.20849228 18.34656715]
[-10.53568935 26.37153053]
[2.33023977 34.08307266]
[15.19616890 41.79461288]
[28.06209755 49.50615311]
[42.95640945 49.41277695]
[50.81544495 63.14398575]
[63.68137360 70.85552979]
[76.54730225 78.56707001]
[66.03728485 67.86475372]
[60.35662842 53.98202896]
[60.34954834 38.98202896]
[66.01709747 25.09394646]
[76.51701355 14.38171768]
[90.28887177 8.43731403]
[105.28600311 8.14414787]
[119.27965546 13.54578590]
[130.19020081 23.83947754]
[136.39617920 37.49545670]
[136.97532654 52.48427200]
[131.84109497 66.57918549]
[144.89241028 59.18571472]
[157.94371033 51.79224396]
[170.99501038 44.39876938]
[184.04632568 37.00529480]
[197.09762573 29.61182404]
[210.14892578 22.21835136]
[214.24703979 1.69986773]
[231.78814697 -9.16977119]
[251.43032837 -3.85697460]
[263.69409180 -12.49409771]
[275.95788574 -21.13121986]
[288.22164917 -29.76834297]
[290.67630005 -45.38084793]
[303.50070190 -54.61718750]
[319.08639526 -51.99761200]
[328.18661499 -39.07626724]
[325.40240479 -23.51915550]
[312.38558960 -14.55603695]
[296.85876465 -17.50457191]
[284.59500122 -8.86744785]
[272.33123779 -0.23032522]
[260.06744385 8.40679741]
[261.40554810 17.90212440]
[259.12158203 27.27539444]
[253.49777222 35.18596268]
[245.29711914 40.48600769]
[235.66017151 42.38698196]
[225.94639587 40.57670593]
[217.54240417 35.26965714]
[204.49108887 42.66312790]
[191.43978882 50.05660248]
[178.38848877 57.45007324]
[165.33718872 64.84354401]
[152.28587341 72.23702240]
[139.23457336 79.63049316]
[137.86177063 87.00378418]
[152.60830688 89.74961090]
[149.86225891 104.49610901]
[135.11618042 101.75036621]
[133.74337769 109.12365723]
[143.25927734 120.71881104]
[152.77517700 132.31396484]
[168.41275024 132.30361938]
[180.36521912 142.38688660]
[182.98898315 157.80279541]
[175.04519653 171.27238464]
[160.28465271 176.43576050]
[145.67683411 170.85491943]
[138.11912537 157.16496277]
[141.18002319 141.82986450]
[131.66412354 130.23471069]
[122.14821625 118.63955688]
[108.08813477 123.86583710]
[108.45625305 138.86131287]
[108.82437134 153.85679626]
[109.19248962 168.85227966]
[109.56060791 183.84776306]
[109.92872620 198.84324646]
[112.59151459 218.04115295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 29]
[8 28]
[9 27]
[10 26]
[30 56]
[31 55]
[32 54]
[34 52]
[35 51]
[36 50]
[37 49]
[40 48]
[41 47]
[42 46]
[68 103]
[69 102]
[70 101]
[71 100]
[72 99]
[73 98]
[74 97]
[77 90]
[78 89]
[79 88]
[80 87]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
