%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUACCCAAGCGAGCCAUUUAACAUGGCGGAGGAUGUUUCCUCAGCGGCCCCGAGCCCGCGGGGCUGUGCGGAUGGUAGGGAUGCCGACCCUACUGAGGAGCAGAUGGCAGAAACAGAGAGAA\
) } def
/len { sequence length } bind def

/coor [
[101.69056702 231.90884399]
[96.56026459 246.00422668]
[105.98484039 258.21820068]
[107.28717041 273.59048462]
[100.05167389 287.21588135]
[86.58718109 294.74655151]
[71.19016266 293.77947998]
[58.77373886 284.62326050]
[53.29996109 270.19964600]
[56.51548004 255.11109924]
[67.39424133 244.17236328]
[82.46487427 240.87391663]
[87.59517670 226.77853394]
[85.62747955 221.37771606]
[86.60224915 215.04852295]
[90.87823486 209.42712402]
[91.25219727 194.43179321]
[91.62615967 179.43646240]
[92.00012207 164.44111633]
[92.37407684 149.44578552]
[92.74803925 134.45043945]
[93.12200165 119.45510101]
[91.77519989 134.39451599]
[82.87642670 146.46977234]
[69.00575256 152.17980957]
[54.18480301 149.86907959]
[42.71071625 140.20753479]
[37.91024780 125.99642944]
[41.17523193 111.35607910]
[51.55902863 100.53125763]
[66.05099487 96.66047668]
[80.44729614 100.86473083]
[66.35190582 95.73442841]
[52.25651932 90.60412598]
[38.16113281 85.47382355]
[24.06574249 80.34352112]
[8.01848602 83.72251892]
[-2.72852397 71.33567810]
[2.88031483 55.92552185]
[19.07510948 53.34469604]
[29.19604301 66.24813080]
[43.29143143 71.37843323]
[57.38682175 76.50873566]
[71.48220825 81.63903809]
[85.57759857 86.76934052]
[91.20095825 81.80670166]
[108.07103729 66.91876984]
[104.73322296 52.29484940]
[101.39540863 37.67092896]
[98.05759430 23.04701233]
[94.71977997 8.42309284]
[91.38196564 -6.20082569]
[88.04415131 -20.82474518]
[84.70633698 -35.44866180]
[81.36852264 -50.07258224]
[67.85498810 -58.26769638]
[64.17549896 -73.63769531]
[72.51302338 -87.06383514]
[87.92106628 -90.58061981]
[101.25830841 -82.10160828]
[104.61199188 -66.65724182]
[95.99244690 -53.41039658]
[99.33026123 -38.78647614]
[102.66807556 -24.16255760]
[106.00588226 -9.53864002]
[109.34369659 5.08527899]
[112.68151093 19.70919800]
[116.01932526 34.33311462]
[119.35713959 48.95703506]
[122.69495392 63.58095551]
[135.86828613 70.75476074]
[149.96366882 65.62445831]
[154.36883545 49.34821701]
[167.45228577 38.97560120]
[183.97346497 38.41046143]
[197.46229553 47.67739868]
[211.42539978 42.19728470]
[225.38850403 36.71716690]
[239.35160828 31.23705292]
[253.31472778 25.75693703]
[267.27783203 20.27682304]
[281.24093628 14.79670715]
[295.20404053 9.31659222]
[300.01257324 -5.56333303]
[313.28811646 -13.82731915]
[328.76242065 -11.57336330]
[339.12893677 0.13428311]
[339.49295044 15.76762867]
[329.68258667 27.94508553]
[314.32995605 30.91683197]
[300.68414307 23.27969742]
[286.72103882 28.75981331]
[272.75793457 34.23992920]
[258.79483032 39.72004318]
[244.83172607 45.20016098]
[230.86862183 50.68027496]
[216.90551758 56.16038895]
[202.94241333 61.64050674]
[200.77485657 74.87543488]
[192.26080322 85.37768555]
[179.55798340 90.31462097]
[165.97149658 88.28618622]
[155.09396362 79.71984863]
[140.99858093 84.85015106]
[108.11734009 119.82906342]
[107.74337769 134.82440186]
[107.36941528 149.81974792]
[106.99546051 164.81507874]
[106.62149811 179.81040955]
[106.24753571 194.80575562]
[105.87357330 209.80108643]
[114.80018616 197.74639893]
[127.39160156 189.59431458]
[142.04388428 186.38330078]
[156.89057922 188.52235413]
[170.04048157 195.73899841]
[179.81851196 207.11398315]
[184.97911072 221.19830322]
[184.86491394 236.19787598]
[179.49046326 250.20199585]
[169.54037476 261.42678833]
[156.28213501 268.44238281]
[141.40458679 270.35513306]
[126.80289459 266.92138672]
[114.33705902 258.57855225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[21 106]
[22 105]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[71 104]
[72 103]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
