%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACUGGGAAAAUUGCUCCUCAUUAACUGAUUUUUUUCUCUUGGGAAUUACCAAUAACCCAGAGAUGAAAGUGACCCUAUUUGCUGUAUUCUUGGCUG\
) } def
/len { sequence length } bind def

/coor [
[80.81285095 301.65292358]
[73.29840088 287.07672119]
[82.39094543 273.42910767]
[82.85744476 258.43637085]
[79.86650085 251.53131104]
[83.57880402 242.98663330]
[84.51135254 228.01565552]
[85.44389343 213.04466248]
[86.37644196 198.07368469]
[87.30898285 183.10270691]
[88.24153137 168.13171387]
[89.17407227 153.16073608]
[82.24298859 139.97705078]
[90.82327271 126.68460083]
[91.75582123 111.71362305]
[85.70376587 99.10948181]
[93.27319336 87.35383606]
[94.20574188 72.38285065]
[80.99678040 68.46518707]
[68.92923737 61.83083725]
[58.55400848 52.78591919]
[50.34405518 41.74651718]
[44.67282104 29.21955872]
[41.79726410 15.77952003]
[41.84619141 2.04208446]
[44.81452560 -11.36405849]
[50.56363297 -23.82598495]
[58.82781601 -34.77456665]
[69.22659302 -43.71044540]
[81.28220367 -50.22683716]
[94.44155884 -54.02801132]
[108.10163116 -54.94274521]
[110.42510223 -69.76170349]
[112.74858093 -84.58065796]
[115.07205200 -99.39961243]
[117.39552307 -114.21857452]
[119.71899414 -129.03753662]
[114.21269989 -143.86962891]
[123.82804871 -155.24479675]
[126.15151978 -170.06375122]
[128.47499084 -184.88270569]
[130.79846191 -199.70167542]
[133.12193298 -214.52062988]
[131.34307861 -223.66548157]
[135.75502014 -229.76139832]
[138.53823853 -244.50093079]
[141.32145691 -259.24044800]
[129.00691223 -268.25793457]
[121.83202362 -281.72952271]
[121.22135162 -296.98043823]
[127.29615021 -310.98254395]
[138.85025024 -320.95578003]
[153.58959961 -324.91992188]
[168.58767700 -322.08789062]
[180.86660767 -313.02197266]
[187.98840332 -299.52224731]
[188.53901672 -284.26904297]
[182.40911865 -270.29095459]
[170.81582642 -260.36331177]
[156.06098938 -256.45724487]
[153.27777100 -241.71771240]
[150.49455261 -226.97817993]
[147.94090271 -212.19715881]
[145.61741638 -197.37818909]
[143.29394531 -182.55923462]
[140.97047424 -167.74028015]
[138.64700317 -152.92132568]
[144.31948853 -139.14916992]
[134.53794861 -126.71405792]
[132.21447754 -111.89510345]
[129.89100647 -97.07614136]
[127.56753540 -82.25718689]
[125.24406433 -67.43823242]
[122.92058563 -52.61927414]
[137.96965027 -46.28302383]
[150.93362427 -36.33869171]
[160.96551514 -23.42948914]
[167.40829468 -8.39254951]
[169.83782959 7.79536772]
[168.09091187 24.08132362]
[162.27612305 39.40468216]
[152.76718140 52.76619720]
[140.17881775 63.29315186]
[125.32715607 70.29638672]
[109.17672729 73.31539917]
[108.24417877 88.28637695]
[114.29623413 100.89051819]
[106.72680664 112.64616394]
[105.79425812 127.61714935]
[112.65864563 141.87165833]
[104.14505768 154.09327698]
[103.21251678 169.06427002]
[102.27996826 184.03524780]
[101.34742737 199.00622559]
[100.41487885 213.97721863]
[99.48233795 228.94819641]
[98.54978943 243.91918945]
[97.85018921 258.90286255]
[97.38368988 273.89559937]
[105.61016846 288.08212280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[14 89]
[15 88]
[17 86]
[18 85]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[45 62]
[46 61]
[47 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
