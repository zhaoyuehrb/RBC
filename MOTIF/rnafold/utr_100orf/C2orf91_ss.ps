%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAGCAAGUCACCCAGGUCAAGCCUGUUCUAGAAGAAACAACUAUAGCAAAAGCCCUAAGGUUGGAGUGUGGCUGCCAGAGCUCACACAUGGUGAGGAUGUCCAGACCAUUAUUCCUCGAUUGGGCCUGGAGACCCCUCUGCAGCCCCUCCCAAUCUCUCCCACUGACCUACGGACCAGAAGGCUGGA\
) } def
/len { sequence length } bind def

/coor [
[74.48545837 335.73764038]
[59.95135117 339.44705200]
[45.01148605 338.10525513]
[31.37094688 331.86541748]
[20.58652878 321.43966675]
[13.88905334 308.01788330]
[12.04290485 293.13192749]
[15.25878334 278.48071289]
[23.16966057 265.73638916]
[34.87266922 256.35345459]
[49.03215027 251.40277100]
[64.03207397 251.44937134]
[78.16051483 256.48794556]
[89.80498505 265.94345093]
[97.63744354 278.73904419]
[97.63744354 263.73904419]
[97.39073181 248.74107361]
[96.89737701 233.74919128]
[96.40402222 218.75730896]
[95.91066742 203.76541138]
[95.41731262 188.77352905]
[94.92395782 173.78164673]
[85.00677490 172.42030334]
[75.36427307 169.73219299]
[66.17311096 165.76655579]
[57.60167313 160.59603882]
[49.80699539 154.31538391]
[42.93187332 147.03962708]
[37.10226822 138.90209961]
[23.61075592 145.45794678]
[10.11924648 152.01379395]
[-3.37226391 158.56964111]
[-14.97592545 170.93052673]
[-30.06595230 163.20216370]
[-26.81695938 146.56245422]
[-9.92811298 145.07814026]
[3.56339741 138.52227783]
[17.05490685 131.96643066]
[30.54641724 125.41058350]
[26.68328285 109.70345306]
[26.32731247 93.53214264]
[11.59485626 90.71173096]
[-3.13759995 87.89131927]
[-17.87005615 85.07089996]
[-32.60251236 82.25048828]
[-47.61136627 87.25497437]
[-58.65680695 77.26260376]
[-73.38925934 74.44218445]
[-88.12171936 71.62177277]
[-99.34761810 82.33432770]
[-114.73069763 84.36917114]
[-128.35583496 76.94387054]
[-134.98390198 62.91360855]
[-132.06626892 47.67329788]
[-120.72481537 37.08315659]
[-105.32057190 35.21530533]
[-91.77677917 42.78797531]
[-85.30130768 56.88931656]
[-70.56884766 59.70973206]
[-55.83639526 62.53014374]
[-41.88130188 57.32392502]
[-29.78209877 67.51803589]
[-15.04964256 70.33844757]
[-0.31718668 73.15885925]
[14.41526985 75.97927094]
[29.14772606 78.79969025]
[36.80107498 59.65407944]
[49.58932877 43.12157440]
[66.65234375 30.56720734]
[59.11676025 17.59743500]
[51.58117676 4.62766266]
[44.04559708 -8.34210968]
[36.51001358 -21.31188202]
[28.86802101 -34.21924210]
[21.12013817 -47.06332016]
[13.37225628 -59.90739822]
[-1.79286087 -65.14178467]
[-7.01973534 -80.30948639]
[1.70124376 -93.77515411]
[17.68008804 -95.20906830]
[28.65919495 -83.51125336]
[26.21633339 -67.65528107]
[33.96421432 -54.81120300]
[41.71209717 -41.96712494]
[47.86962128 -37.85657120]
[49.47978592 -28.84746552]
[57.01536942 -15.87769222]
[64.55094910 -2.90792036]
[72.08653259 10.06185150]
[79.62211609 23.03162384]
[94.41967010 20.57551384]
[97.36114502 5.86675119]
[100.30261993 -8.84201241]
[103.24410248 -23.55077553]
[106.18557739 -38.25953674]
[97.68573761 -51.31290817]
[100.87834930 -66.18778229]
[113.37512207 -74.21063995]
[116.31659698 -88.91940308]
[110.55154419 -104.27180481]
[121.17220306 -116.76715088]
[137.25294495 -113.55130005]
[142.25129700 -97.93244934]
[131.02536011 -85.97792053]
[128.08389282 -71.26915741]
[136.53410339 -59.05730057]
[133.76055908 -44.09862137]
[120.89434052 -35.31806183]
[117.95286560 -20.60929871]
[115.01138306 -5.90053511]
[112.06990814 8.80822849]
[109.12843323 23.51699066]
[119.35304260 25.79750824]
[129.12875366 29.43180656]
[138.27813721 34.34045792]
[146.63697815 40.42103958]
[154.05723572 47.55023956]
[160.40965271 55.58635330]
[165.58593750 64.37207031]
[169.50071716 73.73756409]
[172.09280396 83.50373840]
[186.97880554 81.65802002]
[201.86482239 79.81229401]
[216.75082397 77.96656799]
[231.63684082 76.12084198]
[246.52284241 74.27511597]
[261.40884399 72.42938995]
[278.21951294 57.62504578]
[297.84396362 66.73944092]
[312.57644653 63.91902542]
[327.30889893 61.09861374]
[339.40808105 50.90450668]
[353.36318970 56.11072159]
[368.09564209 53.29030991]
[382.82809448 50.46989822]
[394.87454224 39.34266281]
[410.45175171 44.46928406]
[413.53524780 60.57593536]
[400.95297241 71.09346771]
[385.64849854 65.20235443]
[370.91604614 68.02276611]
[356.18359375 70.84317780]
[345.13815308 80.83555603]
[330.12930298 75.83106995]
[315.39685059 78.65148163]
[300.66439819 81.47189331]
[297.71676636 88.81786346]
[292.03207397 94.45999908]
[284.48904419 97.42109680]
[276.29617310 97.14673615]
[268.79800415 93.60737610]
[263.25457764 87.31539917]
[248.36857605 89.16112518]
[233.48255920 91.00685120]
[218.59655762 92.85257721]
[203.71054077 94.69830322]
[188.82453918 96.54402924]
[173.93852234 98.38975525]
[173.23004150 110.33727264]
[170.60366821 122.01406097]
[166.12821960 133.11430359]
[159.92086792 143.34730530]
[152.14419556 152.44502258]
[143.00187683 160.16923523]
[132.73335266 166.31761169]
[121.60754395 170.72914124]
[109.91584015 173.28829956]
[110.40919495 188.28018188]
[110.90254974 203.27206421]
[111.39590454 218.26394653]
[111.88925934 233.25582886]
[112.38261414 248.24771118]
[115.55809021 254.07801819]
[115.33335876 259.77807617]
[112.63744354 263.73904419]
[112.63744354 278.73904419]
[117.86144257 288.23687744]
[114.95180511 297.40466309]
[118.61519623 311.95043945]
[122.27859497 326.49621582]
[125.94199371 341.04199219]
[137.74391174 352.42825317]
[133.52203369 368.27462769]
[117.61948395 372.27972412]
[106.39543152 360.32345581]
[111.39621735 344.70538330]
[107.73282623 330.15960693]
[104.06942749 315.61383057]
[100.40602875 301.06805420]
[95.93692780 315.38684082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 176]
[16 175]
[17 172]
[18 171]
[19 170]
[20 169]
[21 168]
[22 167]
[29 39]
[30 38]
[31 37]
[32 36]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[47 60]
[48 59]
[49 58]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 84]
[75 83]
[76 82]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[98 105]
[99 104]
[121 158]
[122 157]
[123 156]
[124 155]
[125 154]
[126 153]
[127 152]
[129 146]
[130 145]
[131 144]
[133 142]
[134 141]
[135 140]
[178 189]
[179 188]
[180 187]
[181 186]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
