%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGAAACUGCAUGUGUUGGGCAAGAUGAACUUUUCUGUAAUCACCUGCCCCAACGGUGGUACCAACCAAGGGCUUCUGCCUUACCUGAUGGCCCUGGAUCAGUAUCAGCUGGAGGAAUUCAAGC\
) } def
/len { sequence length } bind def

/coor [
[106.05240631 293.83465576]
[104.93145752 278.87661743]
[103.81050873 263.91854858]
[102.68955231 248.96049500]
[89.94310760 241.30111694]
[84.08162689 227.44084167]
[87.54601288 212.61346436]
[99.21178436 202.55284119]
[98.09082794 187.59477234]
[89.42405701 175.48130798]
[96.10842896 161.14151001]
[94.98748016 146.18345642]
[91.30994415 139.67720032]
[94.02979279 130.83932495]
[93.28210449 115.85797119]
[83.49779510 104.48839569]
[68.79520416 101.51619720]
[54.09261703 98.54400635]
[39.39002991 95.57181549]
[24.68744278 92.59962463]
[9.98485565 89.62743378]
[-3.08624053 98.09999084]
[-17.95441437 94.87631989]
[-25.95114899 82.36281586]
[-40.65373611 79.39061737]
[-55.71340179 84.24005890]
[-66.65520477 74.13430786]
[-81.35779572 71.16211700]
[-96.06037903 68.18992615]
[-110.83249664 65.58520508]
[-125.66496277 63.34956741]
[-138.23062134 72.93495178]
[-153.88243103 70.74480438]
[-163.33442688 58.07849884]
[-160.97891235 42.45072937]
[-148.21337891 33.13317871]
[-132.61138916 35.65377808]
[-123.42932892 48.51710510]
[-108.59686279 50.75273895]
[-104.21221161 48.61903000]
[-98.42963409 49.29560471]
[-93.08818817 53.48733902]
[-78.38560486 56.45952988]
[-63.68301392 59.43172073]
[-49.67497635 54.36969376]
[-37.68154526 64.68803406]
[-22.97895622 67.66022491]
[-10.74947548 59.23553467]
[4.20337915 62.04031754]
[12.95704842 74.92484283]
[27.65963554 77.89703369]
[42.36222076 80.86923218]
[57.06481171 83.84142303]
[71.76739502 86.81361389]
[86.46998596 89.78580475]
[93.56016541 85.79479980]
[101.03705597 85.79689026]
[106.96842194 89.16181183]
[119.56880951 81.02362061]
[132.16920471 72.88542938]
[144.76959229 64.74723053]
[157.36997986 56.60903931]
[169.97036743 48.47084427]
[170.64328003 31.62244034]
[181.09057617 18.59854698]
[197.07177734 14.37126446]
[212.28451538 20.40431404]
[224.67808533 11.95451355]
[237.07167053 3.50471258]
[242.47438049 -3.99971747]
[249.88124084 -4.99673653]
[262.48162842 -13.13493061]
[275.08200073 -21.27312469]
[287.68240356 -29.41131783]
[300.28277588 -37.54951096]
[312.78076172 -45.84415436]
[325.17431641 -54.29395676]
[323.94656372 -69.60369873]
[330.55264282 -83.46930695]
[343.21557617 -92.16101837]
[358.52908325 -93.34078979]
[372.37393188 -86.69127655]
[381.02590942 -74.00116730]
[382.15765381 -58.68403244]
[375.46478271 -44.86010361]
[362.74761963 -36.24795151]
[347.42700195 -35.16419983]
[333.62411499 -41.90037537]
[321.23056030 -33.45057297]
[317.43472290 -27.01260757]
[308.42098999 -24.94912338]
[295.82058716 -16.81093025]
[283.22021484 -8.67273617]
[270.61981201 -0.53454185]
[258.01943970 7.60365200]
[245.52146912 15.89829445]
[233.12788391 24.34809494]
[220.73431396 32.79789734]
[221.56614685 46.18331909]
[215.60252380 58.31681442]
[204.31677246 65.95661926]
[190.61955261 67.00231934]
[178.10856628 61.07123184]
[165.50817871 69.20942688]
[152.90779114 77.34761810]
[140.30738831 85.48581696]
[127.70700836 93.62400818]
[115.10662079 101.76220703]
[108.26345825 115.11028290]
[109.01114655 130.09162903]
[109.94554138 145.06250000]
[111.06649017 160.02055359]
[119.81344604 173.20393372]
[113.04888916 186.47383118]
[114.16983795 201.43188477]
[127.20476532 209.64144897]
[132.84036255 223.78688049]
[129.11012268 238.36595154]
[117.64761353 247.83953857]
[118.76856232 262.79760742]
[119.88951874 277.75564575]
[121.01046753 292.71371460]
[130.69047546 305.95114136]
[123.81990051 320.84164429]
[107.46660614 322.06716919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[8 115]
[9 114]
[11 112]
[12 111]
[14 110]
[15 109]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[24 47]
[25 46]
[27 44]
[28 43]
[29 42]
[30 39]
[31 38]
[58 108]
[59 107]
[60 106]
[61 105]
[62 104]
[63 103]
[67 98]
[68 97]
[69 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
[76 89]
[77 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
