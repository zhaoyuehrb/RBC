%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUGAACAAUCAGAGAAAAACAAUUCCAUUCAAGAGAGACACACAGAUCAUAGUUUUCCUGAGAAGAACUGUCAAAUUGGACAGAAACAACUGCAAC\
) } def
/len { sequence length } bind def

/coor [
[80.86735535 124.37792969]
[89.95566559 112.44466400]
[76.25881195 118.55992126]
[62.56196594 124.67517853]
[48.86511612 130.79043579]
[35.16827011 136.90568542]
[21.47142029 143.02093506]
[23.85777664 157.91952515]
[22.30581665 172.92797852]
[16.92135811 187.02301025]
[8.07151985 199.24360657]
[-3.64030075 208.75653076]
[-17.41557121 214.91317749]
[-32.31507492 217.29377747]
[-47.32293320 215.73602295]
[-61.41588593 210.34611511]
[-73.63305664 201.49156189]
[-83.14145660 189.77607727]
[-89.29278564 175.99842834]
[-91.66763306 161.09800720]
[-90.10408783 146.09074402]
[-84.70874786 131.99987793]
[-75.84947205 119.78612518]
[-64.13031006 110.28224945]
[-50.35028839 104.13624573]
[-35.44895172 101.76714325]
[-20.44230080 103.33648682]
[-6.35351229 108.73727417]
[5.85681677 117.60125732]
[15.35616589 129.32409668]
[29.05301476 123.20883942]
[42.74986267 117.09358215]
[56.44671249 110.97832489]
[70.14356232 104.86307526]
[83.84040833 98.74781799]
[91.60815430 85.91574097]
[90.67560577 70.94476318]
[82.09532166 57.65230942]
[89.02640533 44.46863174]
[88.09386444 29.49764633]
[87.16131592 14.52666283]
[86.22877502 -0.44432122]
[85.29622650 -15.41530514]
[71.14018250 -21.12223244]
[60.86851120 -32.41185379]
[56.52067184 -47.04261398]
[58.95993042 -62.10955429]
[67.70196533 -74.62113190]
[81.01103973 -82.09316254]
[96.24463654 -83.04206085]
[110.37810516 -77.27943420]
[120.60523224 -65.94944763]
[124.89542389 -51.30168533]
[122.39685059 -36.24446487]
[113.60561371 -23.76740837]
[100.26721191 -16.34784889]
[101.19976044 -1.37686574]
[102.13230133 13.59411812]
[103.06484985 28.56510162]
[103.99739075 43.53608704]
[112.51097107 55.75771332]
[105.64659119 70.01221466]
[106.57913971 84.98320007]
[107.40467834 70.00593567]
[116.50310516 58.08039093]
[130.73027039 53.32771301]
[145.16963196 57.39029312]
[154.83137512 68.86421204]
[156.37664795 83.78440857]
[149.27143860 96.99486542]
[135.97114563 103.93041229]
[121.07162476 102.19418335]
[135.66529846 105.66182709]
[150.25897217 109.12947083]
[164.85266113 112.59711456]
[179.44633484 116.06475830]
[192.76925659 107.56327820]
[208.18321228 111.05408478]
[216.54336548 124.46614838]
[212.88978577 139.84233093]
[199.39007568 148.06021118]
[184.05339050 144.24427795]
[175.97868347 130.65843201]
[161.38500977 127.19079590]
[146.79133606 123.72315216]
[132.19766235 120.25550079]
[117.60397339 116.78785706]
[128.74865723 126.82758331]
[138.71928406 138.03413391]
[144.08352661 152.04216003]
[144.14840698 167.04202271]
[138.90554810 181.09593201]
[129.03224182 192.38830566]
[115.80400085 199.46032715]
[100.92972565 201.39839172]
[86.33099365 197.95211792]
[73.89374542 189.56671143]
[65.22472382 177.32546997]
[61.44384766 162.80978394]
[63.03955460 147.89489746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
