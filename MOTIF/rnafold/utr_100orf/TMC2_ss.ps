%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGCUGCUGACCAUGAGCCACCAGGUAAAGGGCCUGAAAGAGGAAGCACGAGGCGGAGUGAAAGGGCGGGUGAAGAGCGGCUCUCCACACACAGGUGACAGGCUGGGAAGGA\
) } def
/len { sequence length } bind def

/coor [
[283.83840942 333.29354858]
[281.88745117 329.56585693]
[281.24182129 324.95944214]
[271.53103638 313.52700806]
[257.39450073 308.83578491]
[254.35754395 293.30877686]
[244.64674377 281.87634277]
[234.93594360 270.44393921]
[225.22515869 259.01150513]
[215.51435852 247.57905579]
[205.80355835 236.14663696]
[190.99075317 237.45751953]
[178.09384155 229.70291138]
[172.16679382 215.67710876]
[175.67564392 200.67729187]
[165.96484375 189.24487305]
[156.25404358 177.81243896]
[141.43397522 176.86334229]
[131.42298889 165.40756226]
[132.51896667 149.86933899]
[122.80817413 138.43690491]
[113.09738159 127.00447083]
[91.57487488 132.34567261]
[69.79825592 121.09037018]
[59.93974686 96.11015320]
[45.13734818 93.68342590]
[30.33495140 91.25669098]
[15.53255367 88.82996368]
[0.73015541 86.40323639]
[-13.08624077 94.55717468]
[-28.02366829 88.70458984]
[-32.62341309 73.33507538]
[-23.35694313 60.23881149]
[-7.33270073 59.46213150]
[3.15688539 71.60083771]
[17.95928383 74.02756500]
[32.76168060 76.45429993]
[47.56407928 78.88102722]
[62.36647797 81.30775452]
[67.88078308 76.22421265]
[56.05389404 66.99790955]
[44.22700500 57.77160645]
[31.41061783 49.97800446]
[29.92504692 35.05175018]
[40.95387650 24.88489723]
[55.71021271 27.57758522]
[62.43737411 40.98378754]
[70.67338562 53.52045822]
[78.90940094 66.05712891]
[84.42370605 60.97358322]
[83.20632935 46.02306747]
[81.98894501 31.07254791]
[68.66699982 23.11607552]
[62.59699249 8.83550835]
[66.11295319 -6.27798319]
[77.86293793 -16.41295242]
[93.32881927 -17.67229843]
[106.56366730 -9.57177734]
[112.47840881 4.77379751]
[108.79869843 19.84825897]
[96.93946075 29.85516739]
[98.15684509 44.80568695]
[99.37422180 59.75620270]
[115.73514557 65.18962097]
[127.50805664 76.53836060]
[132.90692139 91.03108215]
[131.57609558 105.55016327]
[124.52980804 117.29367828]
[134.24060059 128.72610474]
[143.95140076 140.15853882]
[159.46224976 141.59080505]
[169.14750671 153.32324219]
[167.68647766 168.10163879]
[177.39727783 179.53407288]
[187.10806274 190.96650696]
[202.47795105 189.93057251]
[215.36010742 198.04867554]
[220.92605591 212.03022766]
[217.23599243 226.43583679]
[226.94679260 237.86827087]
[236.65757751 249.30070496]
[246.36837769 260.73312378]
[256.07916260 272.16555786]
[265.78997803 283.59799194]
[280.62109375 289.10693359]
[282.96347046 303.81619263]
[292.67425537 315.24862671]
[302.98974609 326.13858032]
[313.87969971 336.45407104]
[327.13519287 331.76571655]
[341.04809570 333.26788330]
[352.88442993 340.60760498]
[360.34338379 352.29040527]
[362.00436401 365.98452759]
[357.59729004 378.98593140]
[368.20388794 389.59252930]
[378.81048584 400.19912720]
[394.11489868 397.63882446]
[407.98626709 404.59329224]
[415.09078979 418.38839722]
[412.69665527 433.71966553]
[401.72442627 444.69189453]
[386.39315796 447.08602905]
[372.59802246 439.98150635]
[365.64358521 426.11013794]
[368.20388794 410.80572510]
[357.59729004 400.19912720]
[346.99069214 389.59252930]
[331.55450439 394.15902710]
[315.82214355 390.33306885]
[304.07202148 379.05856323]
[299.54800415 363.31805420]
[303.56420898 347.34399414]
[292.67425537 337.02850342]
[289.74328613 337.04766846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 87]
[4 86]
[6 84]
[7 83]
[8 82]
[9 81]
[10 80]
[11 79]
[15 75]
[16 74]
[17 73]
[20 70]
[21 69]
[22 68]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[50 63]
[51 62]
[52 61]
[88 114]
[89 113]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
