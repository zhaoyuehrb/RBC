%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUGAAACAUCCCUGUCUUCUCAGUGCUUCCCUAUGUCGGUCCUCAAUAAUACCAUUGCUGAGCCUCUGAUCUUCCUCCUGAUGGGCAUUCCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[47.30496597 161.95686340]
[44.40795135 163.21144104]
[41.59298706 163.44657898]
[39.17037582 162.80847168]
[26.58608437 170.97152710]
[14.00179195 179.13458252]
[1.41749942 187.29765320]
[-11.16679287 195.46070862]
[-19.40813446 215.11070251]
[-39.92722321 215.99476624]
[-51.69613647 225.29492188]
[-63.46504974 234.59506226]
[-69.01800537 250.02543640]
[-85.20334625 252.66493225]
[-95.37097168 239.79826355]
[-89.06130981 224.66154480]
[-72.76519012 222.82614136]
[-60.99628067 213.52600098]
[-49.22736359 204.22586060]
[-49.63750458 195.04774475]
[-45.62327957 186.62918091]
[-38.00961304 181.00447083]
[-28.50741768 179.60041809]
[-19.32985497 182.87641907]
[-6.74556351 174.71336365]
[5.83872890 166.55029297]
[18.42302132 158.38723755]
[31.00731277 150.22416687]
[42.91943741 141.10818481]
[54.08739853 131.09436035]
[65.25536346 121.08053589]
[76.42332458 111.06671906]
[74.03608704 97.94886780]
[78.45346069 85.36857605]
[88.51774597 76.62287903]
[101.59128571 74.00385284]
[114.24778748 78.19788361]
[125.72177887 68.53622437]
[137.19577026 58.87456894]
[148.66975403 49.21291351]
[160.14373779 39.55125809]
[165.71626282 24.74390984]
[180.43544006 22.46465302]
[191.90943909 12.80299759]
[203.38342285 3.14134097]
[211.93391418 -9.18299389]
[216.96665955 -23.31350708]
[221.99940491 -37.44402313]
[227.03215027 -51.57453537]
[224.37355042 -67.17076111]
[235.93255615 -76.56430054]
[240.96530151 -90.69480896]
[245.99806213 -104.82532501]
[251.03080750 -118.95584106]
[250.64924622 -135.90548706]
[266.83087158 -140.96427917]
[276.17147827 -126.81544495]
[265.16131592 -113.92308807]
[260.12857056 -99.79257202]
[255.09582520 -85.66206360]
[250.06306458 -71.53154755]
[253.08166504 -56.94602585]
[241.16267395 -46.54178619]
[236.12992859 -32.41127014]
[231.09716797 -18.28075790]
[226.06442261 -4.15024328]
[238.79660034 -12.08065605]
[253.38304138 -15.57865143]
[268.32717896 -14.28534031]
[282.09579468 -8.33341694]
[293.27624512 1.66646600]
[300.72143555 14.68833828]
[303.66748047 29.39618301]
[301.81219482 44.28100204]
[295.34585571 57.81564331]
[284.93191528 68.61147308]
[271.63885498 75.56087494]
[256.83047485 77.95084381]
[242.02609253 75.53617096]
[228.74462891 68.56459808]
[218.34873962 57.75140381]
[211.90499878 44.20598984]
[210.07452393 29.31809616]
[213.04507446 14.61532879]
[201.57109070 24.27698517]
[190.09710693 33.93864059]
[185.34527588 48.05492401]
[169.80540466 51.02524567]
[158.33140564 60.68690109]
[146.85742188 70.34855652]
[135.38343811 80.01021576]
[123.90944672 89.67186737]
[125.39520264 105.78061676]
[117.08353424 119.65921783]
[102.18106079 125.95332336]
[86.43714142 122.23468018]
[75.26918030 132.24850464]
[64.10121918 142.26231384]
[52.93325806 152.27613831]
[51.91685486 156.35058594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[10 19]
[11 18]
[12 17]
[29 99]
[30 98]
[31 97]
[32 96]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[43 86]
[44 85]
[45 84]
[46 66]
[47 65]
[48 64]
[49 63]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
