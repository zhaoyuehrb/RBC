%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGGAAUAAAUAAAACUGCAAAGAUGCAGUUUUUCUUUCGUCCAUUCUCACCUGACCCUGAGGUCCAGAUGCUGAUUUUUGUGGUCUUCCUGAUGA\
) } def
/len { sequence length } bind def

/coor [
[91.80241394 107.62841034]
[76.80422974 107.86168671]
[61.80604172 108.09496307]
[46.80785751 108.32823944]
[31.80966949 108.56151581]
[18.13149643 116.51250458]
[5.28543425 108.97406769]
[-9.71275139 109.20734406]
[-24.71093750 109.44062042]
[-39.70912552 109.67389679]
[-45.15602493 119.20458221]
[-54.05805206 125.48699188]
[-64.70197296 127.39670563]
[-75.07478333 124.64283752]
[-83.24436951 117.80992126]
[-87.71942139 108.23545837]
[-102.67408752 107.07019806]
[-117.62876129 105.90494537]
[-132.58343506 104.73968506]
[-147.53810120 103.57442474]
[-162.49276733 102.40917206]
[-177.44744873 101.24391174]
[-192.40211487 100.07865143]
[-207.35678101 98.91339874]
[-221.91154480 106.46926117]
[-235.58497620 97.41557312]
[-234.31101990 81.06597900]
[-219.40022278 74.23954773]
[-206.19152832 83.95872498]
[-191.23686218 85.12398529]
[-176.28218079 86.28923798]
[-161.32751465 87.45449829]
[-146.37284851 88.61975861]
[-131.41816711 89.78501129]
[-116.46350098 90.95027161]
[-101.50883484 92.11553192]
[-86.55416107 93.28078461]
[-72.96870422 79.53639221]
[-53.34965515 79.94164276]
[-39.94240189 94.67571259]
[-24.94421577 94.44243622]
[-9.94602871 94.20915985]
[5.05215693 93.97588348]
[17.65756035 86.04158783]
[31.57639313 93.56333160]
[46.57457733 93.33005524]
[61.57276535 93.09677887]
[76.57095337 92.86350250]
[91.56913757 92.63022614]
[106.56188202 92.16372681]
[121.54555511 91.46411896]
[136.51654053 90.53157806]
[151.47120667 89.36631775]
[166.42588806 88.20105743]
[175.00335693 73.72166443]
[190.34344482 67.21172333]
[206.39559937 71.02635956]
[216.95362854 83.48957825]
[231.86482239 81.85980225]
[246.77603149 80.23001862]
[261.68722534 78.60023499]
[272.29678345 64.79876709]
[289.26242065 62.88952255]
[302.15713501 73.56033325]
[317.01040649 71.46760559]
[331.86370850 69.37487793]
[346.71701050 67.28215027]
[361.57031250 65.18941498]
[376.42361450 63.09668732]
[383.58450317 49.33074188]
[397.48419189 42.43306351]
[412.77798462 45.05595398]
[423.58511353 56.19085693]
[425.74996948 71.55617523]
[418.44018555 85.24362946]
[404.46646118 91.99011230]
[389.20202637 89.20146942]
[378.51635742 77.94998169]
[363.66305542 80.04271698]
[348.80975342 82.13544464]
[333.95645142 84.22817230]
[319.10314941 86.32090759]
[304.24984741 88.41363525]
[297.94412231 99.76791382]
[286.04891968 105.45188904]
[272.86795044 103.15791321]
[263.31701660 93.51142883]
[248.40580750 95.14121246]
[233.49461365 96.77099609]
[218.58341980 98.40077972]
[213.00112915 110.63575745]
[201.98768616 118.54142761]
[188.39334106 119.93868256]
[175.80307007 114.35032654]
[167.59114075 103.15573120]
[152.63647461 104.32099152]
[137.68179321 105.48624420]
[131.14259338 109.20973206]
[122.24516296 106.44779968]
[107.26148987 107.14739990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[7 43]
[8 42]
[9 41]
[10 40]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[50 100]
[51 99]
[52 97]
[53 96]
[54 95]
[58 90]
[59 89]
[60 88]
[61 87]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
