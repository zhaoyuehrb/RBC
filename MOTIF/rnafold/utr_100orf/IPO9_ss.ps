%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCGGUGGCGGGUCCCGGCCGCGGGGCUGGCGGGCUGAGGGGAGAAAAGAUGGCGGCGGCGGCGGCAGCUGGUGCGGCCUCCGGGCUGCCGGGUCCAGUGGCACAAGGAUUAAAGGAAGCGUUAGUGGAUACGCUCACCGGGAUCCUAU\
) } def
/len { sequence length } bind def

/coor [
[106.32360840 280.03649902]
[94.13480377 289.11953735]
[79.39666748 292.84185791]
[64.35665894 290.63586426]
[51.30825806 282.83792114]
[42.24126053 270.63720703]
[38.53831482 255.89418030]
[40.76409531 240.85707092]
[48.57918167 227.81893921]
[60.79183960 218.76800537]
[75.53971863 215.08445740]
[77.71655273 200.24325562]
[79.89338684 185.40203857]
[82.07022858 170.56083679]
[84.24706268 155.71963501]
[86.42390442 140.87843323]
[88.60073853 126.03722382]
[90.77757263 111.19602203]
[87.37459564 96.58712769]
[78.86351013 84.23554993]
[70.35241699 71.88397980]
[61.84132767 59.53240967]
[53.33023453 47.18083572]
[44.69112015 34.91846848]
[35.92491150 22.74663162]
[27.15870476 10.57479382]
[12.81521702 3.89834952]
[11.65570068 -10.95105457]
[2.88949370 -23.12289047]
[-5.87671375 -35.29472733]
[-14.64292049 -47.46656418]
[-23.40912819 -59.63840103]
[-32.17533493 -71.81024170]
[-40.94154358 -83.98207855]
[-55.28503036 -90.65851593]
[-56.44454575 -105.50792694]
[-65.21075439 -117.67975616]
[-73.97695923 -129.85159302]
[-74.28712463 -114.85480499]
[-81.41832733 -101.65837097]
[-93.79322052 -93.18122101]
[-108.67458344 -91.29842377]
[-122.77080536 -96.42643738]
[-132.96392822 -107.43099976]
[-136.99932861 -121.87799072]
[-133.98440552 -136.57186890]
[-124.58603668 -148.26249695]
[-110.88305664 -154.36401367]
[-95.90644073 -153.52680969]
[-82.96744537 -145.93469238]
[-88.74372101 -159.77790833]
[-94.97631836 -166.54595947]
[-94.49285126 -173.96969604]
[-99.97988129 -187.93008423]
[-105.46691132 -201.89048767]
[-117.71609497 -211.90388489]
[-115.17070770 -226.57937622]
[-120.65773773 -240.53976440]
[-126.14476776 -254.50015259]
[-138.39395142 -264.51354980]
[-135.84857178 -279.18905640]
[-141.33560181 -293.14944458]
[-146.82263184 -307.10983276]
[-152.30966187 -321.07022095]
[-165.46626282 -330.85980225]
[-163.29803467 -347.11499023]
[-148.03547668 -353.11383057]
[-135.37937927 -342.68524170]
[-138.34927368 -326.55725098]
[-132.86224365 -312.59686279]
[-127.37520599 -298.63647461]
[-121.88817596 -284.67608643]
[-110.03146362 -275.66122437]
[-112.18437958 -259.98718262]
[-106.69734955 -246.02679443]
[-101.21031952 -232.06640625]
[-89.35360718 -223.05154419]
[-91.50652313 -207.37751770]
[-86.01949310 -193.41712952]
[-80.53246307 -179.45672607]
[-74.90050507 -165.55416870]
[-69.12422943 -151.71095276]
[-61.80512619 -138.61779785]
[-53.03891754 -126.44596863]
[-44.27270889 -114.27413177]
[-30.55624008 -108.46829987]
[-28.76970482 -92.74828339]
[-20.00349808 -80.57644653]
[-11.23729134 -68.40460968]
[-2.47108388 -56.23277283]
[6.29512310 -44.06093597]
[15.06133080 -31.88909721]
[23.82753754 -19.71726227]
[37.54400635 -13.91142845]
[39.33054352 1.80858684]
[48.09674835 13.98042393]
[56.86295700 26.15225983]
[63.36617279 29.76527023]
[65.68180847 38.66974640]
[74.19290161 51.02131653]
[82.70398712 63.37289047]
[91.21508026 75.72446442]
[99.72616577 88.07603455]
[98.17864227 73.15607452]
[92.89543152 59.11728668]
[92.60929871 44.12001419]
[97.35317230 29.88991928]
[106.58120728 18.06437874]
[119.23157501 10.00409222]
[133.84866333 6.63651514]
[148.75057983 8.34913635]
[162.22262573 14.94489384]
[172.71464539 25.66484833]
[179.01939392 39.27551270]
[180.41139221 54.21078491]
[176.73049927 68.75213623]
[168.40023804 81.22638702]
[156.37628174 90.19962311]
[141.44102478 88.80738831]
[153.88047791 97.18952942]
[166.31991577 105.57167816]
[178.75935364 113.95381927]
[191.19879150 122.33596039]
[205.73095703 116.89574432]
[220.67637634 121.06874084]
[230.28823853 133.25035095]
[230.87059021 148.75650024]
[222.19950867 161.62474060]
[207.60919189 166.90699768]
[192.70991516 162.57211304]
[183.23075867 150.28695679]
[182.81665039 134.77540588]
[170.37721252 126.39325714]
[157.93777466 118.01111603]
[145.49832153 109.62897491]
[133.05888367 101.24682617]
[126.19886017 104.27833557]
[124.58958435 119.19175720]
[112.47880554 110.34134674]
[105.61878204 113.37285614]
[103.44194031 128.21406555]
[101.26510620 143.05526733]
[99.08827209 157.89646912]
[96.91143036 172.73767090]
[94.73459625 187.57888794]
[92.55776215 202.42008972]
[90.38092041 217.26129150]
[103.44979095 225.02487183]
[112.54885864 237.20170593]
[116.29057312 251.93493652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 147]
[12 146]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[18 140]
[19 103]
[20 102]
[21 101]
[22 100]
[23 99]
[24 97]
[25 96]
[26 95]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[36 85]
[37 84]
[38 83]
[50 82]
[51 81]
[53 80]
[54 79]
[55 78]
[57 76]
[58 75]
[59 74]
[61 72]
[62 71]
[63 70]
[64 69]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
