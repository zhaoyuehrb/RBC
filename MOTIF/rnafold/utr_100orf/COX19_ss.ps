%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUCGGCGCUCCCGGGGUGCCUGCUCGGCGCUCCGCCGGCCGCCCUGCGUACGCUCGCAAGGCGCUCGCAGACUCCGGAGUCGCCAACAUGUCGACCGCCAUGAAUUUCGGGACCAAGAGCUUCCAGCCGCGGCCCCCGGACAAGGGCAGCUUCCCGCUGGAUCACUUAGGUGAAUGUAAAAGCUUUA\
) } def
/len { sequence length } bind def

/coor [
[100.48561859 161.75248718]
[115.48017120 161.34820557]
[129.83108521 165.71078491]
[116.67935181 158.49745178]
[103.52762604 151.28411865]
[90.37590790 144.07080078]
[75.44889069 145.54872131]
[63.96704102 155.20103455]
[52.48518753 164.85334778]
[41.00333786 174.50566101]
[29.60125542 184.25205994]
[18.27971077 194.09191895]
[17.02348709 209.61801147]
[5.40165997 219.43574524]
[-9.39235783 218.14244080]
[-20.71390152 227.98228455]
[-32.03544235 237.82214355]
[-43.35698700 247.66198730]
[-54.67852783 257.50183105]
[-66.00006866 267.34170532]
[-77.32161713 277.18154907]
[-88.64315796 287.02139282]
[-99.96469879 296.86123657]
[-102.51512146 312.70028687]
[-116.55895233 320.45593262]
[-131.32298279 314.17874146]
[-135.48149109 298.68402100]
[-125.84444427 285.85800171]
[-109.80455017 285.53970337]
[-98.48300934 275.69985962]
[-87.16146851 265.86001587]
[-75.83992004 256.02014160]
[-64.51837921 246.18029785]
[-53.19683838 236.34045410]
[-41.87529373 226.50059509]
[-30.55375099 216.66075134]
[-19.23220825 206.82089233]
[-18.45128250 191.99099731]
[-7.10980129 181.85072327]
[8.43986034 182.77037048]
[19.76140404 172.93052673]
[22.75264740 166.15820312]
[31.35102654 163.02380371]
[42.83287811 153.37149048]
[54.31472778 143.71917725]
[65.79657745 134.06687927]
[63.58418274 119.23092651]
[49.78573227 113.34851837]
[35.98728180 107.46611023]
[22.18882942 101.58370209]
[8.39037895 95.70129395]
[-6.12336159 101.35718536]
[-20.03315544 95.19502258]
[-25.33574104 81.32353210]
[-39.13419342 75.44112396]
[-52.93264389 69.55871582]
[-66.73109436 63.67630386]
[-82.09193420 68.30492401]
[-95.20558929 59.06308365]
[-96.01238251 43.04032898]
[-83.89341736 32.52795029]
[-68.14531708 35.59014130]
[-60.84868622 49.87785339]
[-47.05023575 55.76026154]
[-33.25178528 61.64266968]
[-19.45333290 67.52507782]
[-5.77351284 61.74596786]
[8.30387688 67.51500702]
[14.27278709 81.90283966]
[28.07123947 87.78524780]
[41.86968994 93.66765594]
[55.66814041 99.55006409]
[69.46659088 105.43247986]
[72.41274261 91.55220795]
[80.84573364 81.41241455]
[92.11688995 76.77188873]
[91.87017822 61.77392197]
[91.62347412 46.77595139]
[91.37676239 31.77797890]
[91.13005066 16.78000832]
[90.88333893 1.78203762]
[89.40541077 -13.14497566]
[86.70625305 -27.90012932]
[84.00708771 -42.65528107]
[81.30792999 -57.41043472]
[71.21366882 -69.59306335]
[76.53447723 -83.50486755]
[73.83531952 -98.26002502]
[65.03752136 -112.75260925]
[76.52825928 -125.21853638]
[91.68796539 -117.62776947]
[88.59047699 -100.95918274]
[91.28963470 -86.20402527]
[101.19083405 -75.07678223]
[96.06308746 -60.10959244]
[98.76224518 -45.35443878]
[101.46140289 -30.59928703]
[104.16056061 -15.84413433]
[110.83705139 -29.27635002]
[123.27452087 -37.66142273]
[138.23023987 -38.81317902]
[151.80491638 -32.43133545]
[160.45935059 -20.17977142]
[161.93713379 -5.25274324]
[155.85296631 8.45794582]
[143.79313660 17.37761688]
[128.90191650 19.18071747]
[115.06174469 13.39713764]
[105.88130951 1.53532684]
[106.12802124 16.53329849]
[106.37473297 31.53126907]
[106.62144470 46.52923965]
[106.86814880 61.52721024]
[107.11486053 76.52518463]
[118.04376984 81.82608795]
[125.48680115 92.07489777]
[127.29187012 105.13702393]
[122.55052185 117.99710846]
[111.92326355 127.45503998]
[97.58923340 130.91906738]
[110.74095917 138.13240051]
[123.89268494 145.34573364]
[137.04440308 152.55905151]
[147.85859680 142.68603516]
[166.16383362 142.45394897]
[181.15115356 143.07058716]
[196.13847351 143.68721008]
[211.12579346 144.30384827]
[226.11311340 144.92047119]
[241.10043335 145.53710938]
[260.10827637 133.68515015]
[277.97546387 145.88986206]
[292.97091675 145.51980591]
[306.57598877 137.44442749]
[319.49026489 144.86538696]
[334.48571777 144.49534607]
[349.48114014 144.12530518]
[364.47659302 143.75524902]
[373.17361450 130.90452576]
[387.77456665 125.65173340]
[402.66506958 130.01667786]
[412.11941528 142.32093811]
[412.50222778 157.83329773]
[403.66629028 170.58891296]
[389.00921631 175.68301392]
[374.16693115 171.15679932]
[364.84661865 158.75068665]
[349.85119629 159.12072754]
[334.85574341 159.49078369]
[319.86032104 159.86082458]
[307.32778931 167.90974426]
[293.34094238 160.51524353]
[278.34552002 160.88529968]
[274.23486328 167.64947510]
[267.70303345 172.28463745]
[259.77694702 173.97067261]
[251.73957825 172.35850525]
[244.92214966 167.63916016]
[240.48379517 160.52442932]
[225.49647522 159.90779114]
[210.50915527 159.29116821]
[195.52183533 158.67453003]
[180.53451538 158.05790710]
[165.54719543 157.44126892]
[158.77033997 170.82313538]
[168.13645935 182.53961182]
[177.50257874 194.25608826]
[186.86868286 205.97256470]
[202.33003235 211.43873596]
[205.06042480 227.60899353]
[192.25106812 237.84873962]
[177.07914734 231.62422180]
[175.15220642 215.33868408]
[165.78610229 203.62220764]
[156.41998291 191.90573120]
[147.05386353 180.18925476]
[153.81790161 193.57759094]
[155.99623108 208.41857910]
[153.36479187 223.18595886]
[146.19422913 236.36103821]
[135.22193909 246.58889771]
[121.57635498 252.81770325]
[106.66077423 254.40684509]
[92.00912476 251.19293213]
[79.12820435 243.50646973]
[69.34268188 232.13793945]
[63.65890884 218.25648499]
[62.66141510 203.28968811]
[66.45277405 188.77673340]
[74.64308929 176.21015930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[5 121]
[6 120]
[7 46]
[8 45]
[9 44]
[10 43]
[11 41]
[12 40]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[54 66]
[55 65]
[56 64]
[57 63]
[76 114]
[77 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 98]
[83 97]
[84 96]
[85 95]
[87 93]
[88 92]
[125 164]
[126 163]
[127 162]
[128 161]
[129 160]
[130 159]
[132 153]
[133 152]
[135 150]
[136 149]
[137 148]
[138 147]
[165 176]
[166 175]
[167 174]
[168 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
