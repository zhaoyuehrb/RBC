%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCGGGCUGCAGGAGAAGAUGGCGGUCUCCACAGGAGUUAAAGUUCCUCGUAAUUUUCGCUUGUUGGAAGAACUUGAAGAAGGACAAAAAGGAGUAGGCGACGGUACAGUUAGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[159.54089355 267.29901123]
[167.95237732 256.29330444]
[162.61930847 242.27339172]
[157.28623962 228.25346375]
[151.95315552 214.23353577]
[146.62008667 200.21360779]
[135.65744019 194.92359924]
[131.13922119 183.18867493]
[136.02568054 171.16665649]
[131.05838013 157.01301575]
[126.09105682 142.85935974]
[121.12374878 128.70571899]
[91.76448822 134.69093323]
[68.20166779 116.16184235]
[54.25215149 121.67646790]
[40.30263901 127.19109344]
[26.35312653 132.70571899]
[12.40361404 138.22035217]
[9.51939297 153.37570190]
[-1.11713529 164.55012512]
[-16.11189270 168.17790222]
[-30.68010902 163.10142517]
[-40.17311478 150.94056702]
[-41.56173325 135.57583618]
[-34.40285492 121.91003418]
[-20.98085403 114.30388641]
[-5.57864332 115.18448639]
[6.88898849 124.27083588]
[20.83850098 118.75621033]
[34.78801346 113.24158478]
[48.73752594 107.72695923]
[62.68703842 102.21233368]
[64.82176208 87.36500549]
[52.99095154 78.14373016]
[41.04143524 69.07681274]
[28.97522163 60.16578293]
[16.90900803 51.25474930]
[4.84279490 42.34371567]
[-7.22341824 33.43268204]
[-22.81266975 36.03091049]
[-35.62441635 26.77700996]
[-38.05767822 11.16115952]
[-28.66884422 -1.55203521]
[-13.02814007 -3.82006073]
[-0.41492116 5.70266151]
[1.68761468 21.36647034]
[13.75382805 30.27750206]
[25.82003975 39.18853378]
[37.88625336 48.09956741]
[49.95246506 57.01060104]
[57.29081726 58.47076797]
[62.21222687 66.31291962]
[74.04303741 75.53420258]
[82.18183136 71.62601471]
[90.54377747 70.12097168]
[98.47534180 70.86526489]
[101.56861877 56.18767166]
[104.66189575 41.51008224]
[107.75516510 26.83249283]
[110.84844208 12.15490150]
[100.34602356 0.73217219]
[98.59693909 -14.68601036]
[106.27376556 -28.17103958]
[120.42459106 -34.53764725]
[135.60813904 -31.33774185]
[145.98603821 -19.80175400]
[147.56774902 -4.36550474]
[139.74508667 9.03545284]
[125.52603149 15.24817657]
[122.43276215 29.92576599]
[119.33948517 44.60335541]
[116.24620819 59.28094864]
[113.15293884 73.95853424]
[124.88646698 79.24170685]
[134.17939758 89.90052795]
[146.69186401 81.62778473]
[159.20433044 73.35504913]
[166.04089355 58.44889450]
[182.39135742 57.18606567]
[191.43574524 70.86565399]
[183.86997986 85.41526794]
[167.47706604 85.86751556]
[154.96459961 94.14025116]
[142.45213318 102.41298676]
[157.39901733 101.15177155]
[171.32090759 95.56778717]
[186.20481873 97.43038940]
[198.32136536 106.27286530]
[204.63456726 119.87960815]
[203.56256104 134.84124756]
[195.37394714 147.40893555]
[182.12051392 154.43365479]
[167.12310791 154.15524292]
[154.13952637 146.64346313]
[146.42224121 133.77793884]
[135.27740479 123.73840332]
[140.24470520 137.89204407]
[145.21202087 152.04570007]
[150.17933655 166.19935608]
[164.41175842 177.79470825]
[160.63999939 194.88053894]
[165.97308350 208.90045166]
[171.30615234 222.92037964]
[176.63923645 236.94030762]
[181.97230530 250.96023560]
[198.30572510 255.12661743]
[208.86756897 268.05087280]
[209.68115234 284.55642700]
[200.62464905 298.18118286]
[206.31988525 312.05792236]
[212.01513672 325.93469238]
[225.31669617 335.52636719]
[223.39187622 351.81216431]
[208.22074890 358.03863525]
[195.41007996 347.80053711]
[198.13838196 331.62994385]
[192.44314575 317.75317383]
[186.74789429 303.87643433]
[173.47511292 301.91146851]
[162.84022522 293.55358887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[9 99]
[10 98]
[11 97]
[12 96]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[33 53]
[34 52]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[75 84]
[76 83]
[77 82]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
