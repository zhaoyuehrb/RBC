%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUUCCGCUUCCGCUCUUCCCUGGUCCAGUCCACCCUGGCGGGGUCGCAGGGUUGGGAUGGCGGCUGGAGGCGAUCAUGGUUCGCCCGACAGCUACCGCUCACCUCUUGCCUCCCGCUAUGCCAGCCCGGAGAUGUGCUUCGUGUUUAGCGACAGGU\
) } def
/len { sequence length } bind def

/coor [
[118.65609741 207.36422729]
[121.39385223 195.18054199]
[129.11293030 185.27265930]
[123.10169983 171.52984619]
[117.09046936 157.78701782]
[111.07923889 144.04420471]
[105.06800079 130.30137634]
[99.05677032 116.55856323]
[102.06918335 131.25296021]
[94.45036316 144.17401123]
[80.13391113 148.65054321]
[66.51145935 142.37132263]
[60.61629868 128.57830811]
[65.49211884 114.39288330]
[78.62355042 107.13871765]
[64.26944733 111.49298859]
[60.78932953 122.92530823]
[52.29231644 131.15643311]
[40.98725128 134.20874023]
[29.73555565 131.43026733]
[21.32707596 123.62986755]
[6.81308889 127.41724396]
[-7.70089722 131.20462036]
[-22.21488380 134.99198914]
[-36.72887039 138.77935791]
[-41.75761414 143.19981384]
[-47.41428757 144.22297668]
[-51.88715363 142.41854858]
[-66.53864288 145.63317871]
[-81.19013214 148.84782410]
[-95.84162140 152.06245422]
[-104.15016174 165.50656128]
[-119.55057526 169.05657959]
[-132.90608215 160.60636902]
[-136.29307556 145.16928101]
[-127.70214081 131.90385437]
[-112.23010254 128.68025208]
[-99.05625916 137.41096497]
[-84.40476990 134.19633484]
[-69.75328064 130.98168945]
[-55.10179138 127.76705933]
[-40.51624298 124.26538086]
[-26.00225830 120.47800446]
[-11.48827076 116.69062805]
[3.02571535 112.90325928]
[17.53970146 109.11588287]
[25.78056145 92.81166077]
[43.61220169 87.56845093]
[59.91517639 97.13888550]
[74.26927948 92.78461456]
[88.21582031 85.43113708]
[99.32469940 89.26815796]
[105.60459900 75.64601135]
[111.88449860 62.02386093]
[118.16439056 48.40171432]
[124.44429016 34.77956772]
[130.72418213 21.15741920]
[137.00407410 7.53527212]
[135.75508118 -8.23655605]
[148.11004639 -16.55544472]
[154.38995361 -30.17759323]
[160.66984558 -43.79973984]
[166.94973755 -57.42188644]
[173.22962952 -71.04403687]
[178.96989441 -84.90222931]
[184.16163635 -98.97509766]
[189.35339355 -113.04796600]
[186.87080383 -128.67318726]
[198.53500366 -137.93579102]
[203.72676086 -152.00865173]
[208.91851807 -166.08152771]
[214.11027527 -180.15440369]
[219.30201721 -194.22726440]
[216.81942749 -209.85247803]
[228.48362732 -219.11508179]
[233.67538452 -233.18795776]
[228.53233337 -242.84622192]
[229.56221008 -253.51867676]
[236.17985535 -261.67309570]
[245.99154663 -264.74575806]
[251.73179626 -278.60394287]
[257.47204590 -292.46212769]
[263.21231079 -306.32031250]
[259.00201416 -318.54782104]
[264.10778809 -329.99093628]
[275.28057861 -334.71130371]
[281.29180908 -348.45413208]
[275.29895020 -363.07812500]
[281.47906494 -377.62396240]
[296.16558838 -383.46188354]
[310.64529419 -377.12835693]
[316.32760620 -362.38092041]
[309.84133911 -347.96899414]
[295.03463745 -342.44290161]
[289.02340698 -328.70007324]
[291.92935181 -311.41577148]
[277.07049561 -300.58007812]
[271.33026123 -286.72189331]
[265.58999634 -272.86367798]
[259.84973145 -259.00549316]
[263.81710815 -240.11155701]
[247.74824524 -227.99620056]
[242.55648804 -213.92332458]
[245.41043091 -199.30470276]
[233.37489319 -189.03550720]
[228.18313599 -174.96264648]
[222.99137878 -160.88977051]
[217.79962158 -146.81689453]
[212.60786438 -132.74403381]
[215.46180725 -118.12540436]
[203.42626953 -107.85621643]
[198.23451233 -93.78334045]
[193.04275513 -79.71047211]
[194.13874817 -77.07682037]
[194.22976685 -73.83960724]
[193.07644653 -70.38980865]
[190.58911133 -67.19909668]
[186.85177612 -64.76413727]
[180.57188416 -51.14199066]
[174.29199219 -37.51984406]
[168.01210022 -23.89769745]
[161.73219299 -10.27554893]
[163.43037415 4.52193213]
[150.62622070 13.81516838]
[144.34632874 27.43731689]
[138.06643677 41.05946350]
[131.78654480 54.68161011]
[125.50664520 68.30375671]
[119.22674561 81.92590332]
[112.94685364 95.54805756]
[112.79959106 110.54733276]
[118.81082153 124.29015350]
[124.82205200 138.03297424]
[130.83328247 151.77578735]
[136.84451294 165.51861572]
[142.85575867 179.26142883]
[160.63638306 182.58534241]
[172.78578186 195.77439880]
[174.60968018 213.45608521]
[165.56904602 228.57870483]
[172.11518860 242.07492065]
[178.79351807 255.50622559]
[185.60336304 268.87133789]
[192.41322327 282.23641968]
[199.22308350 295.60153198]
[213.97520447 301.90664673]
[218.10438538 317.40921021]
[208.44308472 330.21697998]
[192.40261841 330.50491333]
[182.28785706 318.05215454]
[185.85798645 302.41137695]
[179.04812622 289.04629517]
[172.23826599 275.68118286]
[165.42842102 262.31610107]
[159.55924988 257.76034546]
[158.61897278 248.62106323]
[152.07283020 235.12483215]
[139.87980652 234.77680969]
[128.93638611 229.22673035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 136]
[4 135]
[5 134]
[6 133]
[7 132]
[8 131]
[15 50]
[16 49]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[28 41]
[29 40]
[30 39]
[31 38]
[52 130]
[53 129]
[54 128]
[55 127]
[56 126]
[57 125]
[58 124]
[60 122]
[61 121]
[62 120]
[63 119]
[64 118]
[65 113]
[66 112]
[67 111]
[69 109]
[70 108]
[71 107]
[72 106]
[73 105]
[75 103]
[76 102]
[80 100]
[81 99]
[82 98]
[83 97]
[86 95]
[87 94]
[140 157]
[141 156]
[142 154]
[143 153]
[144 152]
[145 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
