%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUAUUGAGAUUCAUCUGUGUGAAAUAUGAGUUGGCGAGGAAGAUCGACCUAUCGGCCUAGACCAAGACGCUACGUAGAGCCUCCUGAAAUGAUUGGGCCUAUGCGGCCCGAGCAGUUCAGUGAUG\
) } def
/len { sequence length } bind def

/coor [
[84.90105438 163.80963135]
[87.39247131 149.01812744]
[84.77204132 134.24879456]
[82.15161133 119.47945404]
[74.88027954 121.31732178]
[70.09912872 135.53494263]
[65.31797791 149.75254822]
[69.09166718 165.71160889]
[56.97360992 176.76080322]
[41.42982483 171.53367615]
[38.45042419 155.40745544]
[51.10036087 144.97140503]
[55.88151169 130.75378418]
[60.66266632 116.53617096]
[74.44749451 101.51198578]
[91.80854797 97.64685822]
[85.13596344 84.21269989]
[78.46337891 70.77854156]
[71.79079437 57.34438705]
[65.11820984 43.91022873]
[50.40848160 38.78560638]
[43.83290482 25.06640816]
[48.80909729 11.07451439]
[42.13651276 -2.35964322]
[35.46392822 -15.79380131]
[18.18583679 -26.14759064]
[20.17228127 -45.36754608]
[13.04492855 -58.56606293]
[5.91757488 -71.76457977]
[-1.20977843 -84.96309662]
[-8.67278194 -97.97476959]
[-16.46654129 -110.79106140]
[-24.26029968 -123.60735321]
[-32.05405807 -136.42364502]
[-47.39577866 -137.81568909]
[-58.84229660 -147.85713196]
[-62.14215851 -162.53961182]
[-56.23434830 -176.18643188]
[-64.02810669 -189.00271606]
[-71.82186890 -201.81901550]
[-79.61562347 -214.63529968]
[-94.95734406 -216.02735901]
[-106.40386200 -226.06880188]
[-109.70372009 -240.75126648]
[-103.79591370 -254.39808655]
[-111.58966827 -267.21438599]
[-117.22890472 -270.73889160]
[-119.83296204 -275.82400513]
[-119.42209625 -280.60397339]
[-126.77375031 -293.67889404]
[-142.82405090 -302.68240356]
[-141.96740723 -320.20031738]
[-149.54121399 -333.14779663]
[-157.11502075 -346.09527588]
[-164.68884277 -359.04275513]
[-172.26264954 -371.99026489]
[-179.83645630 -384.93774414]
[-187.41026306 -397.88522339]
[-194.98408508 -410.83270264]
[-206.45538330 -409.96368408]
[-217.36985779 -413.43356323]
[-226.15415955 -420.70181274]
[-231.55711365 -430.68331909]
[-232.82791138 -441.91021729]
[-229.82020569 -452.74780273]
[-223.00781250 -461.63247681]
[-229.90879822 -474.95074463]
[-236.80976868 -488.26904297]
[-243.71073914 -501.58731079]
[-250.61172485 -514.90557861]
[-257.51269531 -528.22387695]
[-264.41366577 -541.54211426]
[-279.71917725 -541.55877686]
[-293.25839233 -548.69659424]
[-301.92010498 -561.31530762]
[-303.71392822 -576.51538086]
[-298.22766113 -590.80377197]
[-286.72198486 -600.89727783]
[-271.84082031 -604.47631836]
[-257.00378418 -600.71862793]
[-245.62026978 -590.48754883]
[-240.30616760 -576.13421631]
[-242.28259277 -560.95684814]
[-251.09539795 -548.44311523]
[-244.19441223 -535.12481689]
[-237.29344177 -521.80657959]
[-230.39247131 -508.48828125]
[-223.49148560 -495.17001343]
[-216.59051514 -481.85171509]
[-209.68954468 -468.53344727]
[-191.10180664 -466.83142090]
[-177.16557312 -454.19052124]
[-173.60783386 -435.56234741]
[-182.03659058 -418.40652466]
[-174.46278381 -405.45904541]
[-166.88897705 -392.51153564]
[-159.31515503 -379.56405640]
[-151.74134827 -366.61657715]
[-144.16754150 -353.66909790]
[-136.59373474 -340.72161865]
[-129.01992798 -327.77410889]
[-117.38808441 -324.39935303]
[-110.97666931 -313.65414429]
[-113.69884491 -301.03054810]
[-106.34719086 -287.95562744]
[-98.77338409 -275.00814819]
[-90.97962189 -262.19186401]
[-76.14482880 -261.15887451]
[-64.62663269 -251.47409058]
[-60.97712326 -236.69117737]
[-66.79933167 -222.42906189]
[-59.00557327 -209.61277771]
[-51.21181488 -196.79647827]
[-43.41805649 -183.98019409]
[-28.58326721 -182.94721985]
[-17.06506920 -173.26243591]
[-13.41555977 -158.47952271]
[-19.23776817 -144.21740723]
[-11.44400978 -131.40110779]
[-3.65025020 -118.58481598]
[4.14350891 -105.76852417]
[7.48882198 -104.58509064]
[10.42040920 -101.70903778]
[12.14287663 -97.35577393]
[11.98873806 -92.09044647]
[19.11609077 -78.89192963]
[26.24344444 -65.69342041]
[33.37079620 -52.49489975]
[43.41276169 -50.45321655]
[50.81951904 -43.05700302]
[52.96405792 -32.58722305]
[48.89808273 -22.46638680]
[55.57067108 -9.03222942]
[62.24325562 4.40192842]
[76.39886475 8.89128304]
[83.35719299 22.42037582]
[78.55236816 37.23764420]
[85.22495270 50.67179871]
[91.89753723 64.10595703]
[98.57012177 77.54011536]
[105.24270630 90.97427368]
[114.20389557 103.00328827]
[125.16643524 113.24158478]
[136.12896729 123.47988129]
[147.09150696 133.71818542]
[158.05404663 143.95648193]
[173.42083740 147.72113037]
[177.44125366 162.06286621]
[188.40379333 172.30116272]
[203.77058411 176.06581116]
[207.79101562 190.40756226]
[218.75355530 200.64585876]
[229.71609497 210.88415527]
[240.67863464 221.12245178]
[251.64117432 231.36074829]
[262.60369873 241.59904480]
[273.56625366 251.83734131]
[289.58450317 252.72885132]
[298.75686646 265.89117432]
[294.04708862 281.22732544]
[279.06811523 286.97271729]
[265.31051636 278.71997070]
[263.32794189 262.79986572]
[252.36541748 252.56158447]
[241.40287781 242.32328796]
[230.44033813 232.08499146]
[219.47779846 221.84669495]
[208.51525879 211.60839844]
[197.55271912 201.37010193]
[182.97004700 198.33775330]
[178.16549683 183.26370239]
[167.20295715 173.02540588]
[152.62030029 169.99305725]
[147.81575012 154.91902161]
[136.85321045 144.68072510]
[125.89067078 134.44242859]
[114.92813110 124.20412445]
[103.96559143 113.96582794]
[96.69426727 115.80370331]
[101.40629578 130.04437256]
[106.11833191 144.28504944]
[115.33884430 156.11645508]
[110.46952057 170.30410767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[7 12]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[23 134]
[24 133]
[25 132]
[27 128]
[28 127]
[29 126]
[30 125]
[31 121]
[32 120]
[33 119]
[34 118]
[38 114]
[39 113]
[40 112]
[41 111]
[45 107]
[46 106]
[49 105]
[50 104]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[59 94]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[142 178]
[143 177]
[144 176]
[145 175]
[146 174]
[148 172]
[149 171]
[151 169]
[152 168]
[153 167]
[154 166]
[155 165]
[156 164]
[157 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
