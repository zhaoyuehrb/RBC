%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGUCAGCCAGACCCCCAUCCUGACAAGGCUUGUGGAACUGCUGACUCAGGAUGUCGGGGUUCAGGCUGGGUGACCACGUGUGGCUGGAGCCUCCCUCCACCCACAAGACCGGCGUGGCCAUCGGGGGCAUCAUCAAAGAGGCAAAGCCAG\
) } def
/len { sequence length } bind def

/coor [
[81.69839478 160.09863281]
[67.01815796 157.01795959]
[56.06365204 146.77105713]
[52.01099777 132.32890320]
[56.03520584 117.87879181]
[66.96951294 107.61034393]
[81.64121246 104.50061035]
[66.64433289 104.19463348]
[51.64745712 103.88864899]
[36.65057755 103.58267212]
[21.65369797 103.27669525]
[5.76954889 112.53678894]
[-8.89641762 102.94638824]
[-23.89641762 102.94638824]
[-38.89641953 102.94638824]
[-53.89641953 102.94638824]
[-68.89641571 102.94638824]
[-83.89641571 102.94638824]
[-98.89329529 103.25236511]
[-113.88081360 103.86419678]
[-128.86833191 104.47602844]
[-143.85585022 105.08785248]
[-158.84336853 105.69968414]
[-173.83088684 106.31150818]
[-188.81840515 106.92333984]
[-203.80590820 107.53517151]
[-212.45382690 120.28349304]
[-226.78266907 125.43498230]
[-241.22650146 121.21130371]
[-250.30497742 109.43338013]
[-265.29248047 110.04521179]
[-280.27999878 110.65703583]
[-287.33935547 124.29745483]
[-300.28179932 132.56721497]
[-315.62588501 133.24177551]
[-329.24411011 126.13970184]
[-337.47323608 113.17140961]
[-338.09970093 97.82529449]
[-330.95498657 84.22940063]
[-317.96096802 76.04093933]
[-302.61294556 75.46257782]
[-289.03952026 82.64988708]
[-280.89184570 95.66951752]
[-265.90432739 95.05769348]
[-250.91680908 94.44586182]
[-242.82855225 81.96715546]
[-228.77703857 76.58021545]
[-214.07598877 80.54663086]
[-204.41773987 92.54765320]
[-189.43022156 91.93582153]
[-174.44270325 91.32399750]
[-159.45520020 90.71216583]
[-144.46768188 90.10033417]
[-129.48016357 89.48851013]
[-114.49264526 88.87667847]
[-99.50512695 88.26485443]
[-95.63233185 85.37732697]
[-89.89047241 84.93273163]
[-83.89641571 87.94638824]
[-68.89641571 87.94638824]
[-53.89641953 87.94638824]
[-38.89641953 87.94638824]
[-23.89641762 87.94638824]
[-8.89641762 87.94638824]
[-0.08937490 79.59916687]
[12.44619179 79.51210785]
[21.95967484 88.27981567]
[36.95655441 88.58579254]
[51.95343399 88.89177704]
[66.95030975 89.19775391]
[81.94718933 89.50373077]
[105.94581604 79.59038544]
[117.48007202 70.00076294]
[129.01432800 60.41114044]
[140.54858398 50.82151413]
[146.21371460 36.04935074]
[160.94688416 33.86230087]
[172.48114014 24.27267647]
[184.01539612 14.68305206]
[195.54965210 5.09342813]
[207.08390808 -4.49619627]
[218.61816406 -14.08582115]
[229.43891907 -24.47385597]
[239.49102783 -35.60736847]
[249.54313660 -46.74087906]
[259.59524536 -57.87439346]
[263.10043335 -73.30242920]
[277.37237549 -77.56396484]
[287.42446899 -88.69747925]
[297.47659302 -99.83099365]
[307.52868652 -110.96450043]
[317.58081055 -122.09801483]
[318.20227051 -138.12902832]
[331.20816040 -147.52189636]
[346.62152100 -143.07121277]
[352.61849976 -128.19116211]
[344.59872437 -114.29645538]
[328.71432495 -112.04590607]
[318.66220093 -100.91239166]
[308.61010742 -89.77887726]
[298.55798340 -78.64537048]
[288.50588989 -67.51185608]
[285.71969604 -52.88016129]
[270.72875977 -47.82228088]
[260.67666626 -36.68877029]
[250.62454224 -25.55525780]
[240.57243347 -14.42174625]
[255.56704712 -14.82372475]
[267.41793823 -5.62828064]
[270.75308228 8.99625206]
[264.06057739 22.42051125]
[250.37423706 28.55922508]
[235.89810181 24.62968826]
[227.19425964 12.41317558]
[228.20779419 -2.55156279]
[216.67353821 7.03806162]
[205.13928223 16.62768555]
[193.60502625 26.21730995]
[182.07075500 35.80693436]
[170.53649902 45.39656067]
[165.69638062 59.48281097]
[150.13821411 62.35577393]
[138.60395813 71.94539642]
[127.06969452 81.53501892]
[115.53543854 91.12464905]
[113.70402527 106.01242065]
[122.57023621 118.11160278]
[141.34815979 120.23786926]
[152.46943665 135.12207031]
[149.29591370 153.10664368]
[158.64825439 164.83412170]
[173.30178833 170.79939270]
[175.18785095 185.57411194]
[184.54019165 197.30157471]
[200.27119446 198.82182312]
[210.25509644 211.07324219]
[208.56863403 226.78729248]
[196.21234131 236.64109802]
[180.51699829 234.78858948]
[170.79437256 222.32881165]
[172.81272888 206.65393066]
[163.46037292 194.92645264]
[149.47578430 189.80000305]
[146.92079163 174.18646240]
[137.56843567 162.45899963]
[126.15299225 163.66712952]
[115.47233582 159.14263916]
[108.25012970 149.91271973]
[106.38912964 138.21992493]
[110.47106171 126.97782135]
[101.60484314 114.87863922]
[107.48879242 128.67643738]
[105.36455536 143.52525330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[13 64]
[14 63]
[15 62]
[16 61]
[17 60]
[18 59]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[30 45]
[31 44]
[32 43]
[72 125]
[73 124]
[74 123]
[75 122]
[77 120]
[78 119]
[79 118]
[80 117]
[81 116]
[82 115]
[83 107]
[84 106]
[85 105]
[86 104]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[126 151]
[127 150]
[130 145]
[131 144]
[133 142]
[134 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
