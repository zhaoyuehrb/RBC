%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGCCGAAAGGGUUGUAGACAUGGCGGCCAUCAGGAUGGGAAAACUGACAACCAUGCCUGCAGGUCUGAUAUAUGCAUCUGUAAGUGUACAUGCAGCCAAACAAGAGGAAUCCAAAAAGC\
) } def
/len { sequence length } bind def

/coor [
[100.73694611 145.20622253]
[109.88468170 133.31997681]
[98.61770630 143.22225952]
[87.35072327 153.12454224]
[76.08374786 163.02682495]
[64.81676483 172.92910767]
[53.54978943 182.83139038]
[57.00720978 196.45173645]
[54.24654007 210.16247559]
[45.86725235 221.27734375]
[33.56384659 227.64405823]
[19.78343964 228.06092834]
[7.23910093 222.50337219]
[-4.27910566 232.11227417]
[-15.79731274 241.72116089]
[-24.08662796 256.51046753]
[-40.59267426 252.63919067]
[-41.44201279 235.70652771]
[-25.40620995 230.20295715]
[-13.88800335 220.59405518]
[-2.36979675 210.98516846]
[-5.52734566 195.19352722]
[-0.29242694 179.86508179]
[12.00621986 169.18118286]
[28.09969902 166.10594177]
[43.64750671 171.56440735]
[54.91448593 161.66212463]
[66.18146515 151.75984192]
[77.44844055 141.85755920]
[88.71542358 131.95527649]
[99.98239899 122.05299377]
[83.21422577 110.88899994]
[83.59082031 92.69038391]
[73.68853760 81.42340088]
[63.78625488 70.15642548]
[53.88397598 58.88944626]
[43.83745193 47.75089264]
[33.64834976 36.74261093]
[23.45925140 25.73433304]
[13.27015018 14.72605133]
[-1.30516684 19.25626945]
[-16.40139771 17.00536919]
[-29.02117538 8.42026806]
[-36.65883255 -4.79445601]
[-37.79790878 -20.01501083]
[-32.21223831 -34.21934128]
[-21.01086044 -44.58716965]
[-6.41781521 -49.05995560]
[8.66943455 -46.74962616]
[21.25530624 -38.11489487]
[28.84086609 -24.87019539]
[29.91999435 -9.64527321]
[24.27843094 4.53695154]
[34.46752930 15.54523182]
[44.65663147 26.55351257]
[54.84572983 37.56179428]
[61.78046036 40.36653519]
[65.15095520 48.98716354]
[75.05323792 60.25414276]
[84.95552063 71.52112579]
[94.85779572 82.78810120]
[108.25605011 82.52542114]
[119.07488251 91.98625946]
[120.83460236 107.22872162]
[133.88888550 99.84049988]
[139.90451050 92.80576324]
[147.37576294 92.43506622]
[160.61595154 85.38541412]
[173.85614014 78.33576202]
[180.05090332 71.45824432]
[187.52922058 71.28003693]
[200.94653320 64.57363129]
[214.36384583 57.86722565]
[223.24861145 44.77633667]
[238.09230042 46.00696945]
[251.50959778 39.30056381]
[264.92691040 32.59415436]
[278.34420776 25.88774872]
[291.76150513 19.18134117]
[296.52288818 4.11134243]
[310.58413696 -3.10372400]
[325.60293579 1.81671286]
[332.66894531 15.95344543]
[327.58999634 30.91940117]
[313.37933350 37.83554459]
[298.46792603 32.59864807]
[285.05062866 39.30505371]
[271.63330078 46.01146317]
[258.21600342 52.71786880]
[244.79870605 59.42427444]
[236.87362671 72.03547668]
[221.07025146 71.28453064]
[207.65293884 77.99093628]
[194.23562622 84.69734192]
[180.90577698 91.57594299]
[167.66560364 98.62559509]
[154.42541504 105.67524719]
[141.27709961 112.89478302]
[128.22282410 120.28300476]
[142.45585632 115.54795074]
[157.40284729 114.28792572]
[172.22770691 116.57341003]
[186.10119629 122.27657318]
[198.24731445 131.07838440]
[207.98663330 142.48652649]
[214.77438354 155.86286926]
[218.23089600 170.45918274]
[218.16281128 185.45903015]
[214.57395935 200.02337646]
[207.66505432 213.33753967]
[197.82258606 224.65679932]
[185.59707642 233.34800720]
[171.67237854 238.92498779]
[156.82737732 241.07582092]
[141.89245605 239.68016052]
[127.70298767 234.81611633]
[115.05268097 226.75572205]
[104.64914703 215.94987488]
[97.07431030 203.00299072]
[92.75187683 188.63926697]
[91.92362976 173.66213989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[13 21]
[14 20]
[15 19]
[33 61]
[34 60]
[35 59]
[36 58]
[37 56]
[38 55]
[39 54]
[40 53]
[64 99]
[65 98]
[67 97]
[68 96]
[69 95]
[71 94]
[72 93]
[73 92]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
