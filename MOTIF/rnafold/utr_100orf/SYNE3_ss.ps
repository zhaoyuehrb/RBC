%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCUGCAGGUGCCAUGACUCAGCAGCCCCAGGACGACUUUGACAGGAGCGUGGAGGAUGCCCAGGCAUGGAUGAAGGCUGUGCAGGACCAGCUGCAGGUCAAUGACAACACGC\
) } def
/len { sequence length } bind def

/coor [
[157.74902344 456.22897339]
[162.91850281 442.02447510]
[172.04649353 429.97576904]
[184.32133484 421.15423584]
[179.53181458 406.93945312]
[174.74227905 392.72463989]
[169.95275879 378.50985718]
[165.16323853 364.29504395]
[160.37371826 350.08026123]
[155.58419800 335.86544800]
[144.18807983 326.27493286]
[147.11393738 310.72662354]
[142.32441711 296.51184082]
[131.02073669 295.20645142]
[121.00597382 289.69616699]
[113.78810883 280.76602173]
[110.47084808 269.71920776]
[111.58493805 258.18695068]
[117.00373077 247.88775635]
[125.95619202 240.37126160]
[122.33612061 225.81463623]
[109.48091888 218.37963867]
[105.60228729 203.66871643]
[113.48796844 190.23541260]
[109.86789703 175.67880249]
[106.24783325 161.12217712]
[102.62776184 146.56556702]
[99.00769043 132.00894165]
[95.38762665 117.45232391]
[71.50092316 99.53395081]
[61.18542862 88.64402008]
[45.89417648 90.51052856]
[32.59140778 83.10176849]
[26.27666664 69.44204712]
[29.18141556 54.85779190]
[18.86592484 43.96786118]
[8.55043316 33.07792664]
[0.26098981 28.92610550]
[-1.89199722 21.75063705]
[-11.90881348 10.58536148]
[-21.92563057 -0.57991481]
[-31.94244576 -11.74519062]
[-47.68943405 -16.32388306]
[-51.33434677 -32.31283569]
[-39.12761307 -43.26398849]
[-23.62647438 -37.91172791]
[-20.77717018 -21.76200676]
[-10.76035404 -10.59673119]
[-0.74353760 0.56854486]
[9.27327919 11.73382092]
[19.44036484 22.76243591]
[29.75585747 33.65237045]
[40.07135010 44.54230118]
[54.79147339 42.43138885]
[68.08928680 49.47639084]
[74.76698303 63.16075134]
[72.07536316 78.32852173]
[82.39085388 89.21846008]
[97.08248138 86.19255829]
[102.25517273 72.11267090]
[107.42787170 58.03278732]
[112.60056305 43.95289993]
[109.26987457 27.89554787]
[121.68899536 17.18586159]
[137.08221436 22.84104729]
[139.61428833 39.04353333]
[126.68045044 49.12559509]
[121.50775909 63.20548248]
[116.33506012 77.28536987]
[111.16236877 91.36525726]
[122.81945038 81.92531586]
[137.81584167 81.59623718]
[149.87579346 90.51573944]
[153.95240784 104.95115662]
[148.33970642 118.86149597]
[135.38648987 126.42550659]
[120.51348114 124.47777557]
[109.94424438 113.83226013]
[113.56430817 128.38887024]
[117.18437958 142.94549561]
[120.80445099 157.50210571]
[124.42451477 172.05873108]
[128.04458618 186.61534119]
[141.30395508 194.79011536]
[144.76785278 209.60417175]
[136.89274597 222.19456482]
[140.51280212 236.75119019]
[158.44227600 243.02485657]
[169.01869202 258.62557983]
[168.22105408 277.30895996]
[156.53921509 291.72232056]
[161.32873535 305.93710327]
[173.06742859 316.54434204]
[169.79899597 331.07592773]
[174.58851624 345.29074097]
[179.37803650 359.50552368]
[184.16755676 373.72030640]
[188.95707703 387.93511963]
[193.74661255 402.14990234]
[198.53613281 416.36471558]
[213.64662170 415.95907593]
[228.20491028 420.02691650]
[240.91648865 428.20660400]
[250.65106201 439.77075195]
[256.54302979 453.69110107]
[258.06845093 468.72988892]
[255.09175110 483.54980469]
[247.87756348 496.83316040]
[237.06739807 507.39874268]
[223.62246704 514.30706787]
[208.73829651 516.94390869]
[193.73837280 515.07476807]
[179.95648193 508.86584473]
[168.61810303 498.86920166]
[160.73143005 485.97378540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[12 92]
[13 91]
[20 87]
[21 86]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 58]
[31 57]
[35 53]
[36 52]
[37 51]
[39 50]
[40 49]
[41 48]
[42 47]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
