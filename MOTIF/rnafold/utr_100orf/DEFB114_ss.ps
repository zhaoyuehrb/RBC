%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGAUCUUUUACUAUCUCCAUUUUCUGUGUUAUGUGACCUUCAUUCUACCAGCCACAUGUACCUUGGUGAAUGCUGAUCGUUGCACCAAACGUUACG\
) } def
/len { sequence length } bind def

/coor [
[75.88956451 135.17840576]
[65.36576080 145.86717224]
[54.84196091 156.55592346]
[50.67341614 171.81809998]
[36.23065567 175.45895386]
[25.70685196 186.14772034]
[15.18304920 196.83647156]
[4.65924644 207.52523804]
[7.33849955 222.80924988]
[0.49211133 236.73429871]
[-13.24734211 243.94587708]
[-28.59676170 241.67102051]
[-39.65398026 230.78445435]
[-42.16727448 215.47225952]
[-35.17022705 201.62231445]
[-21.35334969 194.56019592]
[-6.02951288 197.00143433]
[4.49428940 186.31268311]
[15.01809216 175.62391663]
[25.54189491 164.93515015]
[28.95770454 150.43751526]
[44.15320206 146.03211975]
[54.67700195 135.34336853]
[65.20080566 124.65460968]
[58.71804428 110.70671082]
[57.60469818 95.36622620]
[62.00557327 80.62844086]
[71.34826660 68.41025543]
[63.38190079 55.70053482]
[55.41553497 42.99081421]
[48.07444382 37.25487518]
[47.40618515 29.75961685]
[39.83894348 16.80829048]
[24.52406693 15.14674759]
[13.25584888 4.90562105]
[10.21461678 -9.83259106]
[16.36142731 -23.37344551]
[8.79418373 -36.32477188]
[1.22694075 -49.27609634]
[-6.34030199 -62.22742081]
[-19.55141449 -72.85299683]
[-12.99828911 -88.48926544]
[3.84099340 -86.52079010]
[6.61102343 -69.79466248]
[14.17826653 -56.84333801]
[21.74551010 -43.89201355]
[29.31275177 -30.94068909]
[44.12709045 -29.64708138]
[55.47324753 -19.76129913]
[58.86230850 -4.91651297]
[52.79026794 9.24104786]
[60.35751343 22.19237328]
[68.12525940 35.02444839]
[76.09162140 47.73416901]
[84.05799103 60.44388962]
[100.01323700 57.35221863]
[115.96656799 60.45379639]
[129.60125732 69.29821777]
[138.93728638 82.60110474]
[142.61889648 98.43064117]
[157.47219849 100.52336884]
[172.32550049 102.61610413]
[187.17880249 104.70883179]
[192.34580994 102.59950256]
[197.28022766 102.79172516]
[201.10424805 104.77452850]
[203.29324341 107.75167084]
[217.88691711 111.21931458]
[232.48059082 114.68695831]
[247.07427979 118.15460205]
[261.66793823 121.62224579]
[276.26162720 125.08988953]
[290.90747070 128.33015442]
[305.60192871 131.34226990]
[320.29638672 134.35437012]
[334.99084473 137.36648560]
[349.11987305 129.76712036]
[363.81335449 136.20774841]
[367.79968262 151.74765015]
[358.02090454 164.46595764]
[341.97848511 164.60626221]
[331.97875977 152.06094360]
[317.28430176 149.04882812]
[302.58981323 146.03672791]
[287.89535522 143.02462769]
[280.58190918 144.79635620]
[272.79397583 139.68357849]
[258.20031738 136.21592712]
[243.60662842 132.74827576]
[229.01295471 129.28063965]
[214.41926575 125.81298828]
[199.82559204 122.34534454]
[185.08605957 119.56213379]
[170.23277283 117.46939850]
[155.37947083 115.37667084]
[140.52616882 113.28394318]
[134.56333923 124.98416901]
[125.32343292 134.31555176]
[113.68251038 140.39334106]
[100.74429321 142.64129639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[5 20]
[6 19]
[7 18]
[8 17]
[28 55]
[29 54]
[30 53]
[32 52]
[33 51]
[37 47]
[38 46]
[39 45]
[40 44]
[60 96]
[61 95]
[62 94]
[63 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
