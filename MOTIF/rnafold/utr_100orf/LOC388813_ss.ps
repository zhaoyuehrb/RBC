%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAUCCCAGAGCAACAAGCUAACCAAGAAAACAUGUCUAGUAGAACUGAUUCUCCUAUCCCACCCUUUGGAGAGAGUGAACAAACACCAAACAAUCUCUUCGUGGGAGUUUCUAAUUUAGAGAAUGCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[116.74829102 148.52339172]
[115.00690460 133.62481689]
[107.92984009 131.14183044]
[102.96388245 145.29595947]
[97.99793243 159.45008850]
[97.64871216 174.44602966]
[83.27876282 178.74771118]
[74.74720764 166.41026306]
[83.84380341 154.48414612]
[88.80976105 140.33001709]
[93.77571106 126.17588806]
[86.69864655 123.69290924]
[76.03051758 134.23762512]
[65.36238861 144.78233337]
[63.83158493 160.75219727]
[50.31327438 169.39134216]
[35.17754745 164.07257080]
[30.03524017 148.87597656]
[38.83108902 135.45910645]
[54.81767273 134.11421204]
[65.48580170 123.56949615]
[76.15393066 113.02478027]
[75.97941589 105.52680969]
[61.56184387 109.66609955]
[47.14427185 113.80538177]
[32.72670364 117.94466400]
[21.06863213 127.38338470]
[6.32583427 130.14923096]
[-7.96061611 125.57786560]
[-18.35925102 114.76729584]
[-22.37241936 100.31411743]
[-19.03619766 85.68983459]
[-9.15191364 74.40705872]
[4.90632343 69.17581177]
[19.76186180 71.25257874]
[31.84676361 80.13880920]
[46.44129944 83.60282898]
[61.03583908 87.06684875]
[75.63037872 90.53087616]
[75.45586395 83.03290558]
[64.30868530 72.99594116]
[53.16151810 62.95898438]
[37.72872543 59.47480011]
[33.44778442 45.20866013]
[22.30061150 35.17169952]
[11.15343857 25.13474274]
[0.00626653 15.09778309]
[-16.13828468 12.21932602]
[-21.46254539 -3.29145360]
[-10.48937416 -15.47839546]
[5.49297190 -11.80461788]
[10.04322529 3.95061040]
[21.19039726 13.98756981]
[32.33757019 24.02452850]
[43.48474121 34.06148911]
[58.12021255 36.82775879]
[63.19847488 51.81181335]
[74.34564972 61.84877014]
[85.49282074 71.88573456]
[100.48876190 71.53669739]
[111.15689087 60.99198151]
[121.82501984 50.44726562]
[132.49314880 39.90254974]
[143.16127014 29.35783386]
[153.82940674 18.81311798]
[139.17771912 15.59934521]
[132.34208679 2.24741673]
[138.30102539 -11.51815319]
[152.71453857 -15.67158413]
[165.08489990 -7.18783760]
[166.40238953 7.75450516]
[178.22256470 -1.48041713]
[190.04272461 -10.71533966]
[201.86288452 -19.95026207]
[213.68304443 -29.18518257]
[225.50320435 -38.42010498]
[237.32336426 -47.65502930]
[248.35299683 -57.82100677]
[258.51898193 -68.85063934]
[268.68496704 -79.88027954]
[267.79116821 -95.65927124]
[278.37878418 -107.39290619]
[294.16635132 -108.11981201]
[305.78738403 -97.40874481]
[306.34735107 -81.61437225]
[295.51400757 -70.10723114]
[279.71459961 -69.71429443]
[269.54861450 -58.68466187]
[259.38262939 -47.65502930]
[274.38262939 -47.66864014]
[286.00662231 -38.18800354]
[289.00897217 -23.49154282]
[282.03475952 -10.21147537]
[268.23129272 -4.34083128]
[253.82781982 -8.52891445]
[245.32434082 -20.88572693]
[246.55828857 -35.83486557]
[234.73812866 -26.59994507]
[222.91796875 -17.36502266]
[211.09780884 -8.13010025]
[199.27763367 1.10482204]
[187.45747375 10.33974457]
[175.63731384 19.57466698]
[164.37411499 29.48124504]
[153.70599365 40.02596283]
[143.03785706 50.57067871]
[132.36973572 61.11539459]
[121.70160675 71.66011047]
[111.03347778 82.20482635]
[140.02616882 80.74590302]
[167.41401672 108.06415558]
[178.08213806 118.60887146]
[188.75027466 129.15357971]
[199.41839600 139.69830322]
[210.08653259 150.24301147]
[220.75465393 160.78773499]
[236.27005005 167.62213135]
[233.99781799 184.42312622]
[217.22441101 186.89068604]
[210.20994568 171.45585632]
[199.54180908 160.91114807]
[188.87368774 150.36642456]
[178.20555115 139.82171631]
[167.53742981 129.27699280]
[156.86929321 118.73228455]
[150.12834167 122.02006531]
[136.64643860 128.59562683]
[129.90547180 131.88342285]
[131.64686584 146.78199768]
[144.19789124 156.38653564]
[146.19851685 172.06369019]
[136.46180725 184.51246643]
[120.76438904 186.34722900]
[108.41925049 176.47946167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[12 22]
[13 21]
[14 20]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
[46 53]
[47 52]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 89]
[79 88]
[80 87]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
