%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGACUUUGUGUUCCUUUCUUCAGAUCAGCAGAAAUAUGCAUCAAGAAAACCAAACCACCAUCACUGAAUUCAUUCUCCUGGGACUCUCCAACCAGG\
) } def
/len { sequence length } bind def

/coor [
[113.60378265 127.85208130]
[105.90264130 114.97989655]
[98.40354919 115.09653473]
[89.66242981 127.28639984]
[80.92131805 139.47627258]
[79.16716766 155.19993591]
[65.46268463 161.03401184]
[56.72157288 173.22387695]
[52.40506363 189.61912537]
[35.45562363 190.00996399]
[30.38798523 173.83110046]
[44.53170395 164.48275757]
[53.27281952 152.29289246]
[54.40174484 137.44113159]
[68.73144531 130.73515320]
[77.47256470 118.54528809]
[86.21367645 106.35541534]
[74.66881561 96.77856445]
[82.72846985 84.12698364]
[70.67601776 75.19734955]
[58.62356186 66.26771545]
[46.57110977 57.33808136]
[34.51865387 48.40845108]
[22.46619987 39.47881699]
[15.66696835 38.30000687]
[11.25801182 34.36671066]
[9.96526241 29.60020638]
[-1.50872564 19.93855095]
[-12.98271370 10.27689457]
[-19.69550705 8.67765999]
[-23.85140228 4.47786713]
[-24.84531975 -0.35978436]
[-35.69644928 -10.71608448]
[-46.54758072 -21.07238579]
[-62.33973694 -20.45320702]
[-73.88742065 -31.24331856]
[-74.33959961 -47.04113770]
[-63.42800522 -58.47409821]
[-47.62628555 -58.75922775]
[-36.30932999 -47.72736359]
[-36.19128036 -31.92351532]
[-25.34015083 -21.56721497]
[-14.48901939 -11.21091557]
[-3.32105732 -1.19709325]
[8.15293026 8.46456337]
[19.62691879 18.12621880]
[31.39583206 27.42636299]
[43.44828796 36.35599518]
[55.50074005 45.28562927]
[67.55319214 54.21525955]
[79.60565186 63.14489365]
[91.65810394 72.07452393]
[84.59323883 58.84245682]
[80.15795898 44.51317596]
[78.51229095 29.60372353]
[79.71562195 14.65206909]
[83.72453308 0.19770518]
[90.39437103 -13.23781776]
[99.48446655 -25.16971207]
[110.66683197 -35.16744614]
[123.53797913 -42.87027359]
[137.63348389 -48.00025558]
[152.44474792 -50.37229538]
[167.43733215 -49.90080261]
[182.07028198 -46.60278320]
[195.81558228 -40.59724808]
[208.17729187 -32.10088348]
[218.70936584 -21.42026329]
[227.03175354 -8.94077110]
[232.84419250 4.88730049]
[235.93695068 19.56500244]
[236.19841003 34.56272125]
[233.61915588 49.33930969]
[228.29226685 63.36157990]
[220.40992737 76.12358093]
[210.25656128 87.16483307]
[198.19851685 96.08692169]
[184.67089844 102.56793213]
[170.16180420 106.37400818]
[155.19476318 107.36781311]
[140.31204224 105.51398468]
[149.42803955 117.42610931]
[158.54402161 129.33824158]
[167.66001892 141.25036621]
[176.77600098 153.16249084]
[191.99551392 151.09794617]
[206.20216370 156.93460083]
[215.57444763 169.10241699]
[217.59127808 184.32832336]
[211.71011353 198.51661682]
[199.51298523 207.85070801]
[184.28083801 209.81979370]
[170.11105347 203.89419556]
[160.81523132 191.66786194]
[158.89389038 176.42961121]
[164.86387634 162.27847290]
[155.74789429 150.36634827]
[146.63189697 138.45422363]
[137.51591492 126.54209900]
[128.39991760 114.62997437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[7 13]
[8 12]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[27 46]
[28 45]
[29 44]
[32 43]
[33 42]
[34 41]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
