%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCAAGUGAAUAGUCCUCGCGCAAGCGGGACACUGUGGUGGAUGCAAUUCCCCUCGCCUCCAGCCGCGAGGAGCUCCCCGGCGCCGCAGGCAGCGUCCUCCUCCGAAGCAGCUGCACCUGCAACUGGGCAGCCUGGACCCU\
) } def
/len { sequence length } bind def

/coor [
[99.50688934 209.23092651]
[98.85260010 194.24519348]
[90.56751251 181.86753845]
[97.69548798 167.74299622]
[97.04119873 152.75727844]
[96.38690948 137.77156067]
[89.81145477 134.16413879]
[83.20111084 147.62902832]
[83.00651550 162.62777710]
[70.04930115 170.18493652]
[56.89862823 162.96969604]
[56.31130219 147.98118591]
[68.85611725 139.75909424]
[76.66055298 126.94931030]
[70.08510590 123.34188843]
[57.09472656 130.84188843]
[44.10434341 138.34188843]
[31.11396217 145.84188843]
[25.19079590 152.89714050]
[17.75737572 153.36026001]
[4.60647392 160.57510376]
[-8.54442692 167.78993225]
[-16.58465385 182.08282471]
[-32.98357010 181.99563599]
[-40.87137604 167.61807251]
[-32.13377380 153.74052429]
[-15.75925827 154.63902283]
[-2.60835743 147.42419434]
[10.54254436 140.20936584]
[23.61396217 132.85151672]
[36.60434341 125.35150909]
[49.59472656 117.85150909]
[62.58510590 110.35150909]
[70.41566467 80.32147217]
[95.91775513 68.01721954]
[90.17750549 54.15903091]
[84.43725586 40.30083847]
[78.69699860 26.44264412]
[72.95674896 12.58445072]
[67.21649933 -1.27374184]
[61.47624588 -15.13193512]
[-1.82570505 -11.55364132]
[-14.97660637 -18.76847267]
[-28.12750816 -25.98330498]
[-43.22837067 -21.32074165]
[-57.16400909 -28.77550888]
[-61.66665649 -43.92482376]
[-54.06496811 -57.78086472]
[-38.86889648 -62.12309265]
[-25.09399796 -54.37533569]
[-20.91267586 -39.13420486]
[-7.76177502 -31.91937447]
[5.38912630 -24.70454216]
[16.66672325 -34.59473038]
[11.23015308 -48.57484818]
[5.79358244 -62.55496597]
[0.35701191 -76.53508759]
[-5.07955885 -90.51520538]
[-10.51612949 -104.49532318]
[-25.55557442 -108.31562042]
[-35.45131683 -120.26777649]
[-36.39823914 -135.75593567]
[-28.03223228 -148.82456970]
[-13.57019615 -154.44854736]
[1.42692125 -150.46533203]
[11.19242287 -138.40652466]
[11.97127342 -122.90901184]
[3.46398878 -109.93189240]
[8.90055943 -95.95177460]
[14.33712959 -81.97165680]
[19.77370071 -67.99153900]
[25.21027184 -54.01141739]
[30.64684105 -40.03129959]
[45.64393997 -40.35854721]
[60.63970184 -40.68574524]
[65.46129608 -54.88969803]
[70.28288269 -69.09365082]
[66.55462646 -85.06337738]
[78.70407104 -96.07804871]
[94.23291779 -90.80670929]
[97.16641998 -74.67207336]
[84.48683929 -64.27205658]
[79.66524506 -50.06810760]
[74.84365082 -35.86415482]
[75.33444214 -20.87218666]
[81.07469177 -7.01399326]
[86.81494141 6.84419966]
[92.55519867 20.70239258]
[98.29544830 34.56058502]
[104.03569794 48.41877747]
[109.77594757 62.27696991]
[123.30060577 68.76416016]
[137.70135498 64.56672668]
[145.34109497 50.99203873]
[160.00529480 46.94038773]
[172.89961243 54.30736923]
[187.30035400 50.10993576]
[192.41688538 35.46068192]
[205.18603516 26.64429283]
[220.69778442 27.05085564]
[232.98754883 36.52403641]
[237.32968140 51.42119980]
[232.05451965 66.01409149]
[219.19049072 74.69143677]
[203.68406677 74.11662292]
[191.49778748 64.51068115]
[177.09704590 68.70811462]
[170.18037415 81.84947205]
[155.63575745 86.31141663]
[141.89878845 78.96747589]
[127.49804688 83.16490936]
[129.56932068 97.72217560]
[124.98073578 110.43235016]
[136.67900085 119.82120514]
[148.37727356 129.21005249]
[160.07553101 138.59890747]
[171.77380371 147.98776245]
[180.49613953 150.95111084]
[183.62191772 157.71125793]
[195.11259460 167.35307312]
[210.48014832 164.45964050]
[224.08685303 172.16622925]
[229.50802612 186.83406067]
[224.18394470 201.53739929]
[210.62849426 209.33378601]
[195.24214172 206.54202271]
[185.28984070 194.48027039]
[185.47077942 178.84373474]
[173.98010254 169.20191956]
[162.38494873 159.68601990]
[150.68669128 150.29718018]
[138.98841858 140.90832520]
[127.29014587 131.51947021]
[115.59188080 122.13061523]
[114.49453735 129.58630371]
[111.37263489 137.11726379]
[112.02692413 152.10298157]
[112.68121338 167.08871460]
[121.01310730 180.53825378]
[113.83832550 193.59091187]
[114.49261475 208.57662964]
[121.22409058 224.13694763]
[108.13533783 234.91288757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[4 138]
[5 137]
[6 136]
[15 33]
[16 32]
[17 31]
[18 30]
[20 29]
[21 28]
[22 27]
[35 91]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[42 53]
[43 52]
[44 51]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[75 84]
[76 83]
[77 82]
[92 111]
[93 110]
[96 107]
[97 106]
[113 134]
[114 133]
[115 132]
[116 131]
[117 130]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
