%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCGCCCGCCGCCCGCCGCCCGGGCCACUGCAGGGGCCGCUAACGGUCCGGCGCCCCUCGGCGUCCGCGCGCCCCCAGCCUGGCGGACGAGCCCGGCGGCGGAGAUGGGGGCGACGGGGGCGGCGGAGCCGCUGCAAUCCGUGCUGUGGGUGAAGCAGCAGCGCUGCGCCGUGAGCCUGGAGCCCGCGCGGGCUCUGCUGCGCU\
) } def
/len { sequence length } bind def

/coor [
[478.53991699 212.10964966]
[464.09085083 208.08166504]
[449.64178467 204.05369568]
[435.19271851 200.02571106]
[420.85522461 204.06115723]
[409.63961792 192.90225220]
[395.19055176 188.87426758]
[380.74148560 184.84629822]
[366.29241943 180.81831360]
[351.84338379 176.79034424]
[344.55438232 178.02256775]
[337.20736694 172.59086609]
[322.82080078 168.34512329]
[308.43420410 164.09938049]
[290.02084351 169.99708557]
[276.35256958 155.18225098]
[261.84432983 151.37297058]
[247.33607483 147.56367493]
[232.82781982 143.75437927]
[218.31958008 139.94509888]
[203.81132507 136.13580322]
[189.30307007 132.32650757]
[174.79483032 128.51722717]
[167.52526855 129.85940552]
[160.09707642 124.53928375]
[145.64801025 120.51130676]
[131.19894409 116.48332977]
[116.74988556 112.45535278]
[105.84264374 123.02857971]
[88.78540039 124.16790771]
[73.45553589 112.93423462]
[58.59390640 114.96697235]
[43.73227692 116.99971771]
[35.65164566 121.26410675]
[28.63103294 118.94917297]
[13.74040031 120.75722504]
[-1.15023267 122.56526947]
[-16.04086494 124.37332153]
[-30.93149948 126.18137360]
[-45.82213211 127.98942566]
[-53.96625137 132.13128662]
[-60.95109940 129.71057129]
[-75.86734009 131.29351807]
[-90.78358459 132.87648010]
[-98.41159821 146.38917542]
[-112.53932190 152.80690002]
[-127.73433685 149.66191101]
[-138.15386963 138.16351318]
[-139.79138184 122.73307800]
[-132.01722717 109.30393219]
[-117.82071686 103.03984070]
[-102.66070557 106.34947968]
[-92.36653137 117.96022797]
[-77.45028687 116.37728119]
[-62.53404617 114.79433441]
[-47.63018036 113.09878540]
[-32.73954773 111.29074097]
[-17.84891510 109.48268890]
[-2.95828295 107.67463684]
[11.93235016 105.86658478]
[26.82298279 104.05854034]
[41.69953918 102.13808441]
[56.56116486 100.10534668]
[71.42279053 98.07260895]
[76.31583405 83.89311218]
[65.87063599 73.12752533]
[55.42543793 62.36193848]
[44.98023987 51.59635162]
[34.53504181 40.83076477]
[24.08984375 30.06517982]
[13.64464664 19.29959297]
[-3.84754872 19.35638618]
[-15.73559093 6.98901129]
[-15.01633358 -9.81235504]
[-25.62293625 -20.41895676]
[-41.60142517 -21.85682869]
[-50.31906891 -35.32464981]
[-45.08843994 -50.49106216]
[-29.92202568 -55.72169113]
[-16.45420456 -47.00404739]
[-15.01633358 -31.02555847]
[-4.40973186 -20.41895676]
[8.35016346 -22.22163963]
[19.99198532 -16.25623131]
[26.16251373 -4.50157499]
[24.41023254 8.85439587]
[34.85543060 19.61998177]
[45.30062866 30.38556671]
[55.74582672 41.15115356]
[66.19102478 51.91674042]
[76.63622284 62.68232346]
[87.08142090 73.44791412]
[112.32785034 78.02053070]
[120.77786255 98.00629425]
[135.22692871 102.03427124]
[149.67599487 106.06224823]
[164.12504578 110.09022522]
[178.60412598 114.00897217]
[193.11236572 117.81826019]
[207.62062073 121.62755585]
[222.12886047 125.43684387]
[236.63711548 129.24613953]
[251.14537048 133.05541992]
[265.65362549 136.86471558]
[280.16186523 140.67401123]
[289.22393799 134.65306091]
[299.88421631 134.61552429]
[308.62078857 140.33226013]
[312.67996216 149.71279907]
[327.06652832 153.95854187]
[341.45312500 158.20429993]
[355.87133789 162.34127808]
[370.32040405 166.36924744]
[384.76947021 170.39723206]
[399.21853638 174.42521667]
[413.66760254 178.45318604]
[429.03860474 174.70585632]
[439.22070312 185.57664490]
[453.66976929 189.60462952]
[468.11883545 193.63261414]
[482.56790161 197.66058350]
[502.95605469 191.06729126]
[516.76812744 206.40156555]
[531.38482666 209.77091980]
[546.00152588 213.14027405]
[560.61822510 216.50964355]
[575.23486328 219.87899780]
[589.85156250 223.24836731]
[604.46826172 226.61772156]
[619.08496094 229.98707581]
[633.70159912 233.35644531]
[648.31829834 236.72579956]
[662.93499756 240.09515381]
[677.57666016 243.35404968]
[692.24261475 246.50225830]
[701.29229736 245.24359131]
[707.10546875 249.81036377]
[721.72210693 253.17971802]
[737.38775635 242.52920532]
[755.55255127 246.63861084]
[764.78607178 262.44354248]
[779.49786377 265.36990356]
[794.20965576 268.29626465]
[808.92138672 271.22262573]
[823.96588135 266.32626343]
[834.93914795 276.39785767]
[849.65093994 279.32421875]
[864.36267090 282.25057983]
[875.76354980 271.89074707]
[890.90161133 270.24972534]
[903.94891357 277.74853516]
[910.00628662 291.32965088]
[924.71807861 294.25601196]
[939.42980957 297.18234253]
[944.37646484 295.50106812]
[949.00958252 295.85183716]
[952.60723877 297.77447510]
[954.73492432 300.58889771]
[969.29907227 304.17861938]
[983.86315918 307.76834106]
[998.42730713 311.35809326]
[1012.99145508 314.94781494]
[1029.81726074 312.86773682]
[1036.47399902 328.46020508]
[1023.33361816 339.17315674]
[1009.40167236 329.51196289]
[994.83758545 325.92221069]
[980.27343750 322.33248901]
[965.70928955 318.74273682]
[951.14520264 315.15301514]
[936.50347900 311.89413452]
[921.79168701 308.96777344]
[907.07989502 306.04141235]
[896.28637695 316.27069092]
[881.36260986 318.20568848]
[868.00482178 310.89651489]
[861.43634033 296.96234131]
[846.72454834 294.03601074]
[832.01281738 291.10964966]
[818.02056885 296.21530151]
[805.99505615 285.93438721]
[791.28326416 283.00802612]
[776.57147217 280.08169556]
[761.85974121 277.15533447]
[753.97064209 285.40097046]
[742.96655273 288.84909058]
[731.54766846 286.53228760]
[722.57482910 278.91293335]
[718.35278320 267.79641724]
[703.73608398 264.42703247]
[689.09436035 261.16815186]
[674.42846680 258.01995850]
[667.22717285 259.69003296]
[659.56561279 254.71183777]
[644.94891357 251.34248352]
[630.33227539 247.97312927]
[615.71557617 244.60375977]
[601.09887695 241.23440552]
[586.48217773 237.86503601]
[571.86553955 234.49568176]
[557.24884033 231.12632751]
[542.63214111 227.75695801]
[528.01550293 224.38760376]
[513.39880371 221.01824951]
[506.73477173 226.89158630]
[497.98171997 229.07171631]
[489.07366943 226.94648743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[6 116]
[7 115]
[8 114]
[9 113]
[10 112]
[12 111]
[13 110]
[14 109]
[16 105]
[17 104]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 98]
[25 97]
[26 96]
[27 95]
[28 94]
[31 64]
[32 63]
[33 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[42 55]
[43 54]
[44 53]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[74 82]
[75 81]
[123 204]
[124 203]
[125 202]
[126 201]
[127 200]
[128 199]
[129 198]
[130 197]
[131 196]
[132 195]
[133 194]
[134 192]
[135 191]
[137 190]
[138 189]
[141 184]
[142 183]
[143 182]
[144 181]
[146 179]
[147 178]
[148 177]
[152 173]
[153 172]
[154 171]
[158 170]
[159 169]
[160 168]
[161 167]
[162 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
