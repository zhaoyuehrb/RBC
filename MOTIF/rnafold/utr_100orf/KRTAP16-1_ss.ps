%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:11:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGCAGUUGCUCUUCUAGGAAAUGCUUCUCCGUGCCAGCCACCUCUCUCUGCUCCACUGAGGUGAGCUGUGGAGGCCCCAUCUGCCUGCCCAGUU\
) } def
/len { sequence length } bind def

/coor [
[111.16893005 124.36054230]
[100.83203888 125.83602142]
[91.10035706 123.25517273]
[83.44465637 117.30736542]
[78.90449524 109.16648102]
[63.94982147 110.33174133]
[48.99515152 111.49699402]
[34.04048157 112.66225433]
[19.08580971 113.82751465]
[4.23251152 115.92024231]
[-10.46195030 118.93235016]
[-19.18059921 131.84059143]
[-34.12578201 134.68597412]
[-46.37809753 126.29452515]
[-61.07255936 129.30662537]
[-69.79120636 142.21487427]
[-84.73638916 145.06025696]
[-96.98870087 136.66880798]
[-111.68316650 139.68090820]
[-126.37762451 142.69302368]
[-140.67997742 151.79681396]
[-153.38728333 140.57357788]
[-146.12037659 125.25598907]
[-129.38973999 127.99855804]
[-114.69527435 124.98645020]
[-100.00080872 121.97434998]
[-92.03808594 109.43917084]
[-77.17871857 106.17514038]
[-64.08466339 114.61216736]
[-49.39020157 111.60006714]
[-41.42747879 99.06488800]
[-26.56811142 95.80085754]
[-13.47405720 104.23788452]
[1.22040522 101.22577667]
[2.88550377 98.76168060]
[5.71383142 96.87236023]
[9.46627235 96.03925323]
[13.72112751 96.63781738]
[17.92055321 98.87284088]
[32.87522125 97.70758057]
[47.82989502 96.54232788]
[62.78456497 95.37706757]
[77.73923492 94.21180725]
[91.35360718 75.63953400]
[117.00633240 76.88394928]
[122.90783691 63.09365082]
[128.80934143 49.30335617]
[134.71084595 35.51306152]
[140.61235046 21.72276497]
[146.51385498 7.93246937]
[136.12960815 -3.20698571]
[131.18009949 -17.60914612]
[132.52285767 -32.77875137]
[139.92521667 -46.08757401]
[152.10470581 -55.22978210]
[166.95114136 -58.62143326]
[181.89228821 -55.67490005]
[194.33950806 -46.90068817]
[202.13623047 -33.81898499]
[203.93164062 -18.69627571]
[199.41467285 -4.15265656]
[189.36790466 7.29209948]
[175.53201294 13.65511990]
[160.30415344 13.83397293]
[154.40264893 27.62426949]
[148.50114441 41.41456604]
[142.59963989 55.20486069]
[136.69813538 68.99515533]
[130.79663086 82.78545380]
[135.16485596 97.13531494]
[147.74914551 105.29837799]
[160.33343506 113.46144104]
[172.91772461 121.62450409]
[185.50201416 129.78756714]
[194.57760620 131.89144897]
[198.34526062 138.40530396]
[210.66958618 146.95579529]
[223.12541199 155.31358337]
[235.70970154 163.47663879]
[248.29399109 171.63970947]
[260.87829590 179.80276489]
[275.77621460 175.05033875]
[290.22381592 181.03376770]
[297.39932251 194.92785645]
[293.91473389 210.17225647]
[281.41534424 219.56901550]
[265.80297852 218.68127441]
[254.44931030 207.92819214]
[252.71522522 192.38705444]
[240.13093567 184.22399902]
[227.54664612 176.06092834]
[214.96235657 167.89787292]
[207.50640869 166.88075256]
[202.11911011 159.28012085]
[189.79476929 150.72964478]
[177.33895874 142.37185669]
[164.75466919 134.20880127]
[152.17036438 126.04573059]
[139.58607483 117.88267517]
[127.00178528 109.71961212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 34]
[11 33]
[14 30]
[15 29]
[18 26]
[19 25]
[20 24]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[70 100]
[71 99]
[72 98]
[73 97]
[74 96]
[76 95]
[77 94]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
