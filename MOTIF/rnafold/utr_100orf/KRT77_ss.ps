%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCUGCUUCUCUGGAUGCUCCAGCAAACAUGAGCCACCAAUUUAGUUCUCAGUCCGCGUUUAGUUCAAUGAGCAGGCGGGUUUAUAGUACCAGCUCUUCUGCAGGCUCUGGUGGUGGGAGUCCGGCAG\
) } def
/len { sequence length } bind def

/coor [
[88.42586517 101.25553894]
[74.40062714 95.93647003]
[60.37538147 90.61739349]
[46.35013962 85.29832458]
[32.32489395 79.97924805]
[18.29965019 74.66017151]
[4.27440691 69.34110260]
[-4.96301317 69.21196747]
[-10.02289295 63.72032928]
[-23.91551208 58.06390762]
[-38.33501053 63.95592117]
[-52.34352493 58.02159882]
[-57.87179947 44.23850250]
[-71.76441956 38.58207703]
[-85.65703583 32.92565536]
[-99.54965973 27.26923370]
[-113.44227600 21.61281013]
[-123.59758759 31.51877785]
[-136.72879028 36.77229691]
[-150.82746887 36.60563660]
[-163.75093079 31.07735252]
[-173.54772949 21.05834007]
[-178.75245667 8.09480476]
[-178.60475159 -5.83030367]
[-192.35664368 -11.82077217]
[-206.91429138 -6.27890682]
[-220.77532959 -12.54999447]
[-225.96893311 -26.46265221]
[-239.72082520 -32.45312119]
[-248.94120789 -33.02839279]
[-253.72985840 -38.75807953]
[-267.33297729 -45.07909775]
[-280.93609619 -51.40011215]
[-294.53921509 -57.72113037]
[-306.96664429 -54.02878571]
[-318.19982910 -59.65221786]
[-322.41101074 -71.05972290]
[-335.85739136 -77.70759583]
[-350.10333252 -71.25876617]
[-365.14755249 -75.52554321]
[-373.88665771 -88.49327850]
[-372.19427490 -104.03901672]
[-360.86953735 -114.82252502]
[-345.25961304 -115.75216675]
[-332.73501587 -106.38898468]
[-329.20953369 -91.15399933]
[-315.76312256 -84.50612640]
[-298.38562012 -86.62046814]
[-288.21820068 -71.32424164]
[-274.61508179 -65.00322723]
[-261.01196289 -58.68221283]
[-247.40884399 -52.36119461]
[-233.73034668 -46.20500183]
[-219.97846985 -40.21453476]
[-206.25373840 -45.88615799]
[-192.22203064 -40.00687408]
[-186.36616516 -25.57265472]
[-172.61428833 -19.58218575]
[-160.75411987 -30.22152328]
[-145.39237976 -34.66300201]
[-129.57019043 -31.97488022]
[-116.44271851 -22.64207840]
[-108.64994812 -8.47961617]
[-107.78585052 7.72019053]
[-93.89323425 13.37661266]
[-80.00061798 19.03303528]
[-66.10799408 24.68945885]
[-52.21537399 30.34588051]
[-38.63169861 24.34427261]
[-24.46202850 29.88278389]
[-18.25909042 44.17128754]
[-4.36647034 49.82770920]
[9.59348011 55.31585693]
[23.61872292 60.63492966]
[37.64396667 65.95400238]
[51.66921234 71.27307892]
[65.69445801 76.59214783]
[79.71969604 81.91122437]
[93.74494171 87.23030090]
[108.67491913 85.78258514]
[121.41693878 77.86798859]
[134.15895081 69.95338440]
[136.19760132 54.44925690]
[147.76004028 43.92099380]
[163.38681030 43.33971786]
[175.69944763 52.97988892]
[178.88430786 68.28971100]
[171.43757629 82.04035950]
[156.87538147 87.73919678]
[142.07356262 82.69540405]
[129.33154297 90.61000061]
[116.58952332 98.52460480]
[115.59560394 105.95845795]
[128.45893860 98.24259949]
[142.51167297 103.48864746]
[147.17204285 117.74630737]
[138.93078613 130.27954102]
[123.99359894 131.65078735]
[113.60776520 120.82615662]
[112.61384583 128.26000977]
[122.82907867 139.24403381]
[133.04432678 150.22807312]
[143.25955200 161.21209717]
[160.94903564 166.15510559]
[164.30812073 183.33546448]
[174.78579712 194.06944275]
[185.26345825 204.80343628]
[195.74113464 215.53741455]
[206.21881104 226.27139282]
[216.69647217 237.00538635]
[232.27525330 235.65046692]
[245.05046082 244.66865540]
[248.99006653 259.80184937]
[242.23387146 273.90463257]
[227.97196960 280.31805420]
[212.93838501 276.01394653]
[204.23152161 263.02453613]
[205.96249390 247.48304749]
[195.48481750 236.74906921]
[185.00715637 226.01509094]
[174.52947998 215.28109741]
[164.05180359 204.54711914]
[153.57414246 193.81312561]
[141.42362976 193.33319092]
[132.60418701 184.38751221]
[132.27552795 171.42733765]
[122.06028748 160.44329834]
[111.84505463 149.45927429]
[101.62981415 138.47525024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[9 72]
[10 71]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[24 58]
[25 57]
[28 54]
[29 53]
[31 52]
[32 51]
[33 50]
[34 49]
[37 47]
[38 46]
[80 92]
[81 91]
[82 90]
[100 129]
[101 128]
[102 127]
[103 126]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
