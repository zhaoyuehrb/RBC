%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGAGUCCACCUAGGGGCUGGGGCUGCGGAGAGCUGCUGCUGCCCUUCAUGCUCCUGGGGACGCUGUGCGAGCCAGGAUCCGGGCAGAUCCGCUACU\
) } def
/len { sequence length } bind def

/coor [
[70.69522858 209.14135742]
[78.92171478 194.95484924]
[78.45521545 179.96209717]
[77.98871613 164.96936035]
[77.52221680 149.97660828]
[67.30217743 122.26032257]
[75.71421814 101.14945221]
[92.05392456 95.62673187]
[80.57993317 85.96507263]
[69.10594940 76.30342102]
[57.63196182 66.64176178]
[48.88761902 63.42786789]
[45.95745087 56.49680710]
[34.78948975 46.48298645]
[26.14932823 42.99869919]
[23.43613243 35.97986221]
[12.58500195 25.62356186]
[1.73387051 15.26726151]
[-9.11726093 4.91096067]
[-19.96839142 -5.44533968]
[-30.81952286 -15.80163956]
[-41.83039856 -25.98793221]
[-52.99836349 -36.00175476]
[-64.47235107 -45.66341019]
[-76.24126434 -54.96355438]
[-88.01017761 -64.26369476]
[-99.77909088 -73.56384277]
[-115.40383148 -76.04943848]
[-120.59236908 -90.01110840]
[-132.36128235 -99.31125641]
[-144.13020325 -108.61139679]
[-155.89910889 -117.91153717]
[-171.17506409 -114.56796265]
[-185.00225830 -121.87157440]
[-190.85191345 -136.37382507]
[-185.96202087 -151.22721863]
[-172.64141846 -159.41839600]
[-157.17968750 -157.07977295]
[-146.87741089 -145.31555176]
[-146.59896851 -129.68045044]
[-134.83006287 -120.38031006]
[-123.06114197 -111.08016968]
[-111.29222870 -101.78002167]
[-96.50928497 -99.95963287]
[-90.47895050 -85.33275604]
[-78.71003723 -76.03260803]
[-66.94112396 -66.73246765]
[-55.17220688 -57.43232346]
[-50.24320221 -57.12305450]
[-45.50467300 -53.59373856]
[-42.98453903 -47.16971588]
[-31.81657791 -37.15589523]
[-24.60818100 -34.99614716]
[-20.46322250 -26.65277100]
[-9.61209106 -16.29647064]
[1.23903978 -5.94017029]
[12.09017086 4.41613007]
[22.94130135 14.77243042]
[33.79243469 25.12873077]
[44.80331039 35.31502533]
[55.97127151 45.32884598]
[67.29361725 55.16777420]
[78.76760101 64.82942963]
[90.24159241 74.49108887]
[101.71558380 84.15274048]
[116.41004181 87.16484833]
[130.75990295 82.79663086]
[145.10977173 78.42840576]
[153.89703369 65.00589752]
[169.88275146 63.65077209]
[180.80404663 75.40256500]
[178.28306580 91.24629974]
[164.25364685 99.02803040]
[149.47799683 92.77827454]
[135.12812805 97.14649200]
[120.77826691 101.51471710]
[119.38665771 108.88448334]
[116.60343933 123.62400818]
[115.21183014 130.99377441]
[126.98074341 140.29391479]
[138.74966431 149.59405518]
[150.51856995 158.89419556]
[162.28749084 168.19435120]
[177.95324707 166.10635376]
[190.45610046 175.77352905]
[192.37834167 191.46047974]
[182.57952881 203.86042786]
[166.87313843 205.61671448]
[154.57746887 195.68734741]
[152.98735046 179.96325684]
[141.21842957 170.66311646]
[129.44950867 161.36297607]
[117.68060303 152.06283569]
[105.91168976 142.76268005]
[92.51496124 149.51011658]
[92.98146057 164.50285339]
[93.44795990 179.49560547]
[93.91445923 194.48834229]
[103.00699615 208.13597107]
[95.49254608 222.71215820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 95]
[8 65]
[9 64]
[10 63]
[11 62]
[13 61]
[14 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 52]
[23 51]
[24 48]
[25 47]
[26 46]
[27 45]
[29 43]
[30 42]
[31 41]
[32 40]
[66 76]
[67 75]
[68 74]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
