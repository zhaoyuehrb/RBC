%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUACCAACUCACCACUCCUGACACCAUGAACUACUACGGCAACUACUAUGGAGGCCUGGGCUACGGCUACGGAGGCUUCGAUGACCUGGGCUAUGGCUAUGGCUGUGGAUGUGGCAGCUUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[56.04149246 383.55303955]
[41.21982956 385.85919189]
[26.53231239 382.81338501]
[13.84988308 374.80364990]
[4.78806496 362.85028076]
[0.50118041 348.47589111]
[1.53530490 333.51159668]
[7.75870848 319.86352539]
[18.37863731 309.27026367]
[32.04228973 303.08120728]
[47.00915527 302.08471680]
[61.37270355 306.40771484]
[73.30326843 315.49957275]
[81.28021240 328.19989014]
[82.01622772 313.21795654]
[82.75224304 298.23602295]
[83.48825836 283.25408936]
[84.04036713 268.26425171]
[84.40848541 253.26878357]
[84.77660370 238.27330017]
[82.11572266 234.19171143]
[82.06412506 228.37533569]
[85.54874420 222.55601501]
[86.65221405 207.59666443]
[87.75568390 192.63729858]
[88.67549133 177.66552734]
[89.41150665 162.68359375]
[90.14752197 147.70167542]
[90.88353729 132.71974182]
[91.61955261 117.73780823]
[85.25402832 112.93901062]
[81.32335663 106.00373077]
[80.47657776 98.07711029]
[82.85349274 90.46800232]
[88.06164551 84.43281555]
[95.24105835 80.96807861]
[97.44200897 66.13043213]
[99.64296722 51.29278183]
[94.01432037 36.50667953]
[103.53535461 25.05245781]
[105.73631287 10.21481037]
[107.93727112 -4.62283754]
[94.95545197 -12.48083591]
[85.99530792 -24.67750931]
[82.39712524 -39.33584213]
[84.67897034 -54.21471405]
[92.46234131 -67.05153656]
[104.53454590 -75.90632629]
[119.03755188 -79.45485687]
[121.23850250 -94.29250336]
[123.43946075 -109.13014984]
[117.81081390 -123.91625214]
[127.33184814 -135.37048340]
[129.53280640 -150.20812988]
[131.73376465 -165.04577637]
[133.93472290 -179.88342285]
[136.13568115 -194.72106934]
[138.33663940 -209.55871582]
[140.53759766 -224.39636230]
[131.33555603 -243.67152405]
[144.48861694 -259.50082397]
[145.59208679 -274.46017456]
[146.69555664 -289.41952515]
[139.07963562 -303.94293213]
[148.07675171 -317.65365601]
[164.43147278 -316.44726562]
[171.31944275 -301.56478882]
[161.65492249 -288.31607056]
[160.55145264 -273.35668945]
[159.44798279 -258.39733887]
[166.39793396 -252.58152771]
[169.88777161 -244.06809998]
[168.99314880 -234.77145386]
[163.79182434 -226.84786987]
[155.37524414 -222.19540405]
[153.17428589 -207.35775757]
[150.97332764 -192.52011108]
[148.77236938 -177.68246460]
[146.57141113 -162.84481812]
[144.37045288 -148.00717163]
[142.16949463 -133.16952515]
[147.95556641 -119.44470215]
[138.27711487 -106.92919159]
[136.07615662 -92.09154510]
[133.87519836 -77.25389862]
[146.72361755 -69.64816284]
[155.70559692 -57.67028427]
[159.42747498 -43.12681961]
[157.29196167 -28.22624397]
[149.59362793 -15.24359035]
[137.47879028 -6.17309332]
[122.77491760 -2.42188025]
[120.57395935 12.41576767]
[118.37300110 27.25341415]
[124.15908051 40.97822952]
[114.48061371 53.49374008]
[112.27966309 68.33139038]
[110.07870483 83.16903687]
[119.52342224 101.92288971]
[106.60148621 118.47382355]
[105.86547089 133.45574951]
[105.12945557 148.43768311]
[104.39344025 163.41961670]
[103.65742493 178.40155029]
[106.38330078 187.23300171]
[102.71503448 193.74076843]
[101.61157227 208.70013428]
[100.50810242 223.65948486]
[99.77208710 238.64141846]
[99.40396881 253.63690186]
[99.03585052 268.63238525]
[101.97763824 277.39428711]
[98.47019196 283.99011230]
[97.73417664 298.97204590]
[96.99816132 313.95397949]
[96.26214600 328.93591309]
[100.12919617 334.89236450]
[100.61742401 341.31021118]
[98.21685028 346.56210327]
[102.21754456 361.01873779]
[114.28106689 372.12747192]
[110.42887878 388.06774902]
[94.62377167 392.44161987]
[83.12468719 380.74960327]
[87.76090240 365.01943970]
[83.76021576 350.56280518]
[78.75856781 364.70434570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 116]
[15 115]
[16 114]
[17 113]
[18 111]
[19 110]
[20 109]
[23 108]
[24 107]
[25 106]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[36 98]
[37 97]
[38 96]
[40 94]
[41 93]
[42 92]
[49 85]
[50 84]
[51 83]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[61 70]
[62 69]
[63 68]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
