%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCGAGCCCUAGAAUUAUGGCGACCUCCGCGACGUCGCCGCACGCGCCUGGUUUUCCAGCUGAGGGUAGAUGCGGUUACUAUGUGGAAAAGAAGAAACGGUUCUGCAGGAUGGUGG\
) } def
/len { sequence length } bind def

/coor [
[96.31897736 114.77453613]
[85.99365234 125.65515137]
[86.23274994 141.23014832]
[75.60640717 152.11755371]
[60.75655365 152.24951172]
[50.43123627 163.13012695]
[57.21707535 176.68476868]
[58.95463562 191.74320984]
[55.43409729 206.48707581]
[47.08058548 219.13597107]
[34.90282440 228.16249084]
[20.37133980 232.47662354]
[5.24087763 231.55741882]
[-8.66148472 225.51588440]
[-19.65696907 215.08155823]
[-26.41781616 201.51443481]
[-28.12762260 186.45281982]
[-24.57992172 171.71546936]
[-16.20311356 159.08198547]
[-4.00873852 150.07792664]
[10.53067207 145.79058838]
[25.65941429 146.73767090]
[39.55062103 152.80480957]
[49.87593842 141.92419434]
[49.23052979 127.08778381]
[59.54687500 115.90620422]
[75.11303711 115.32983398]
[85.43836212 104.44921875]
[90.81388092 90.44551086]
[90.42122650 75.45065308]
[90.02857208 60.45579529]
[89.63591766 45.46093369]
[89.24326324 30.46607399]
[88.85060883 15.47121525]
[77.66835785 4.62709141]
[77.48375702 -10.58542252]
[87.89088440 -21.17916107]
[87.49822998 -36.17402267]
[79.40233612 -49.76692581]
[86.80381775 -62.69237518]
[86.41116333 -77.68723297]
[86.01851654 -92.68209839]
[85.62586212 -107.67695618]
[85.23320770 -122.67181396]
[84.84055328 -137.66667175]
[73.48681641 -154.22428894]
[83.14303589 -170.89265442]
[81.96614838 -185.84640503]
[78.13249207 -194.27658081]
[80.95941925 -201.20614624]
[80.17438507 -216.18557739]
[79.38934326 -231.16502380]
[78.40829468 -246.13290405]
[77.23140717 -261.08666992]
[76.05451965 -276.04043579]
[74.87763977 -290.99420166]
[65.14819336 -304.19531250]
[71.96302795 -319.11141968]
[88.31162262 -320.39810181]
[97.37594604 -306.73168945]
[89.83139801 -292.17108154]
[91.00828552 -277.21731567]
[92.18517303 -262.26354980]
[93.36205292 -247.30979919]
[97.06929016 -240.80850220]
[94.36878967 -231.95007324]
[95.15382385 -216.97062683]
[95.93886566 -201.99118042]
[96.91991425 -187.02330017]
[98.09680176 -172.06953430]
[106.54274750 -166.05471802]
[110.29958344 -156.15356445]
[107.87044525 -145.61894226]
[99.83541107 -138.05932617]
[100.22806549 -123.06446838]
[100.62071991 -108.06961060]
[101.01337433 -93.07474518]
[101.40602875 -78.07988739]
[101.79868317 -63.08502960]
[109.86649323 -50.56465912]
[102.49308777 -36.56667709]
[102.88574219 -21.57181549]
[113.83303833 -11.53726196]
[114.44485474 3.66406465]
[103.84546661 15.07856083]
[104.23812103 30.07341957]
[104.63077545 45.06827927]
[105.02342987 60.06314087]
[105.41608429 75.05799866]
[105.80873871 90.05285645]
[112.65306854 76.70538330]
[121.11011505 64.31674194]
[134.47001648 57.49668884]
[149.46421814 57.91377640]
[162.42433167 65.46595764]
[170.17961121 78.30556488]
[170.83270264 93.29134369]
[164.22383118 106.75695801]
[151.97102356 115.40755463]
[138.58839417 108.63221741]
[147.08448792 120.99411011]
[161.27749634 127.98474121]
[162.10978699 142.85607910]
[170.60588074 155.21797180]
[179.10197449 167.57986450]
[187.59806824 179.94175720]
[202.62458801 186.50955200]
[204.18081665 202.83468628]
[190.66584778 212.12326050]
[175.98272705 204.81999207]
[175.23617554 188.43785095]
[166.74008179 176.07595825]
[158.24398804 163.71406555]
[149.74789429 151.35217285]
[136.16258240 145.24574280]
[134.72259521 129.49020386]
[126.22649384 117.12831116]
[118.74961090 116.53987122]
[110.25377655 128.90193176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[5 24]
[6 23]
[29 90]
[30 89]
[31 88]
[32 87]
[33 86]
[34 85]
[37 82]
[38 81]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[47 70]
[48 69]
[50 68]
[51 67]
[52 66]
[53 64]
[54 63]
[55 62]
[56 61]
[100 117]
[101 116]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
