%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCCCCGCAGGCGGUAGCGAAGGCAGCAGCAGCGGUGGCGACAUGAGCAGCGGGGCGGCGUCCGGGACAGGGCGGGGGCGGCCCCGGGGCGGGGGACCUGGGCCCGGGGACCCCCCGCCCAGCGAGACACACAAGCUGGUGG\
) } def
/len { sequence length } bind def

/coor [
[39.09410477 197.88172913]
[24.26307106 200.12681580]
[13.11220551 190.09396362]
[13.78290939 175.11048889]
[0.90144962 182.79605103]
[-11.89657784 190.61976624]
[-24.60969162 198.58071899]
[-37.23641968 206.67799377]
[-49.77530289 214.91062927]
[-62.31418610 223.14328003]
[-74.85306549 231.37591553]
[-78.25258636 243.86706543]
[-88.92599487 250.45660400]
[-100.82835388 248.05676270]
[-113.54147339 256.01770020]
[-121.13126373 269.89956665]
[-136.02456665 270.09661865]
[-148.73767090 278.05755615]
[-156.32746887 291.93942261]
[-171.22077942 292.13647461]
[-183.93388367 300.09744263]
[-191.13679504 314.83004761]
[-207.51345825 315.68838501]
[-216.21697998 301.78942871]
[-208.29391479 287.43124390]
[-191.89483643 287.38430786]
[-179.18171692 279.42337036]
[-172.50125122 266.11093140]
[-156.69862366 265.34445190]
[-143.98551941 257.38351440]
[-137.30505371 244.07107544]
[-121.50241852 243.30459595]
[-108.78930664 235.34364319]
[-101.45661926 219.43406677]
[-83.08570862 218.83703613]
[-70.54682922 210.60440063]
[-58.00794601 202.37174988]
[-45.46906281 194.13909912]
[-41.57577896 187.79278564]
[-32.57064056 185.86759949]
[-19.85752869 177.90666199]
[-15.82859707 171.64558411]
[-6.78412151 169.91459656]
[6.09733772 162.22901917]
[18.54692268 153.86195374]
[30.52861214 144.83760071]
[42.51030350 135.81323242]
[48.02164078 121.97580719]
[63.69987869 119.85368347]
[75.68157196 110.82932281]
[87.66326141 101.80496216]
[85.08171082 96.25976562]
[85.29084778 89.12638092]
[89.03859711 81.84920502]
[88.07097626 66.88044739]
[87.10334778 51.91169357]
[86.13571930 36.94293594]
[85.16809082 21.97417831]
[84.20046234 7.00542021]
[75.58905029 -6.26688766]
[82.48921967 -19.46677208]
[81.52159119 -34.43552780]
[72.91017914 -47.70783615]
[79.81034851 -60.90772247]
[78.84272003 -75.87648010]
[77.87509918 -90.84523773]
[76.90747070 -105.81399536]
[63.72021103 -113.99175262]
[57.88944244 -128.37165833]
[61.65722275 -143.42434692]
[73.57476044 -153.36175537]
[89.05951691 -154.36274719]
[102.15728760 -146.04240417]
[107.83171082 -131.60008240]
[103.90086365 -116.58915710]
[91.87622833 -106.78162384]
[92.84385681 -91.81286621]
[93.81147766 -76.84410858]
[94.77910614 -61.87534714]
[103.32131195 -49.67370605]
[96.49034882 -35.40315628]
[97.45797729 -20.43439865]
[106.00018311 -8.23275661]
[99.16921997 6.03779316]
[100.13684845 21.00654984]
[101.10447693 35.97530746]
[102.07210541 50.94406509]
[103.03972626 65.91282654]
[104.00735474 80.88157654]
[115.58970642 90.41306305]
[130.46485901 88.48184204]
[145.34002686 86.55062103]
[160.21517944 84.61940002]
[175.09034729 82.68817139]
[189.96549988 80.75695038]
[204.84066772 78.82572937]
[219.71582031 76.89450836]
[234.59098816 74.96328735]
[249.95350647 61.98512268]
[267.50164795 70.00472260]
[282.27996826 67.43532562]
[297.05825806 64.86592865]
[311.83657837 62.29653168]
[324.07055664 51.37582397]
[339.55828857 56.76668167]
[342.36737061 72.92345428]
[329.60800171 83.22543335]
[314.40597534 77.07482910]
[299.62765503 79.64422607]
[284.84936523 82.21363068]
[270.07104492 84.78302765]
[264.91067505 93.70480347]
[255.47669983 98.37609100]
[244.81539917 97.01639557]
[236.52220154 89.83843994]
[221.64704895 91.76966858]
[206.77188110 93.70088959]
[191.89672852 95.63211060]
[177.02156067 97.56333160]
[162.14640808 99.49456024]
[147.27124023 101.42578125]
[132.39608765 103.35700226]
[117.52092743 105.28822327]
[132.45945740 106.64489746]
[145.82553101 113.45282745]
[155.70700073 124.73806000]
[160.69021606 138.88612366]
[160.06225586 153.87297058]
[153.91296387 167.55456543]
[143.12205505 177.97361755]
[129.23332214 183.63954163]
[114.23366547 183.74179077]
[100.26897430 178.26571655]
[89.33705139 167.99472046]
[83.00183105 154.39822388]
[82.16963196 139.42132568]
[86.95951843 125.20664978]
[96.68762207 113.78665161]
[84.70593262 122.81101227]
[72.72424316 131.83537292]
[66.35589600 146.31828308]
[51.53466415 147.79492188]
[39.55297470 156.81929016]
[27.57128334 165.84364319]
[41.69937515 170.88319397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 41]
[7 40]
[8 38]
[9 37]
[10 36]
[11 35]
[14 33]
[15 32]
[17 30]
[18 29]
[20 27]
[21 26]
[45 144]
[46 143]
[47 142]
[49 140]
[50 139]
[51 138]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[61 82]
[62 81]
[64 79]
[65 78]
[66 77]
[67 76]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
