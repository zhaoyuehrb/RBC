%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGGGCCGGGCCGGGGGCGCGCGCUCUGCGAGCUGGAUGUCCAGGCUGCGGGCGCUGCUGGGCCUCGGGCUGCUGGUUGCGGGCUCGCGCGUGCCGCGGAUCAAAAGCCAGACCAUCGCCUGUCGCUCGGGACCCA\
) } def
/len { sequence length } bind def

/coor [
[115.89820099 364.20336914]
[115.56163025 349.20715332]
[115.22505951 334.21093750]
[114.55208588 319.22604370]
[113.54305267 304.26000977]
[112.53401947 289.29397583]
[111.52497864 274.32797241]
[110.51594543 259.36193848]
[109.50691223 244.39591980]
[108.16232300 229.45631409]
[106.48285675 214.55062866]
[104.80339050 199.64494324]
[103.12391663 184.73925781]
[101.44445038 169.83357239]
[87.87538910 159.96105957]
[85.55979919 143.00120544]
[96.40381622 129.32478333]
[94.39031219 114.46053314]
[89.59529114 100.24758911]
[82.19267273 87.20146942]
[74.79004669 74.15534973]
[67.38742065 61.10923767]
[59.98479843 48.06311798]
[52.58217621 35.01700211]
[45.17955399 21.97088432]
[37.77693176 8.92476845]
[30.37430763 -4.12134886]
[22.53682899 -16.91095161]
[14.27337360 -29.42955017]
[6.00991917 -41.94815063]
[-2.25353575 -54.46674728]
[-10.51699066 -66.98534393]
[-17.91902733 -72.48072052]
[-18.82173347 -79.87884521]
[-26.80221558 -92.57970428]
[-34.78269577 -105.28057098]
[-42.76317596 -117.98143005]
[-50.74365997 -130.68229675]
[-58.72414017 -143.38316345]
[-73.87200165 -147.01359558]
[-81.78441620 -160.00776672]
[-78.22999573 -174.42655945]
[-86.21047974 -187.12742615]
[-94.19096375 -199.82827759]
[-102.17144012 -212.52914429]
[-110.29392242 -225.13967896]
[-118.55737305 -237.65826416]
[-126.82083130 -250.17686462]
[-135.08428955 -262.69546509]
[-143.34774780 -275.21408081]
[-151.89001465 -287.54409790]
[-160.70678711 -299.67935181]
[-169.52355957 -311.81460571]
[-178.34034729 -323.94985962]
[-192.54194641 -333.21005249]
[-187.57505798 -349.42010498]
[-170.62350464 -349.13470459]
[-166.20509338 -332.76663208]
[-157.38830566 -320.63137817]
[-148.57153320 -308.49612427]
[-139.75476074 -296.36087036]
[-135.18357849 -294.73654175]
[-131.62025452 -290.17626953]
[-130.82914734 -283.47750854]
[-122.56568909 -270.95892334]
[-114.30223083 -258.44033813]
[-106.03878021 -245.92172241]
[-97.77532196 -233.40312195]
[-91.41281891 -229.52168274]
[-89.47058105 -220.50962830]
[-81.49009705 -207.80876160]
[-73.50962067 -195.10789490]
[-65.52913666 -182.40704346]
[-50.99604416 -179.35337830]
[-42.72177505 -166.58657837]
[-46.02327728 -151.36364746]
[-38.04279709 -138.66278076]
[-30.06231499 -125.96191406]
[-22.08183289 -113.26105499]
[-14.10135174 -100.56018829]
[-6.12087107 -87.85932922]
[2.00160837 -75.24880219]
[10.26506329 -62.73020172]
[18.52851868 -50.21160507]
[26.79197311 -37.69300461]
[35.05542755 -25.17440605]
[38.50309753 -24.12395477]
[41.59141922 -21.30298996]
[43.47142029 -16.90971947]
[43.42042542 -11.52397251]
[50.82304764 1.52214491]
[58.22566986 14.56826210]
[65.62829590 27.61437798]
[73.03091431 40.66049576]
[80.43354034 53.70661163]
[87.83616638 66.75273132]
[95.23878479 79.79884338]
[102.64141083 92.84496307]
[109.27597046 84.36817169]
[118.88703156 78.35511780]
[130.75088501 75.56591797]
[145.71690369 76.57495880]
[155.55767822 64.57749939]
[170.57942200 60.68819427]
[185.00598145 66.40255737]
[193.29005432 79.52329254]
[192.24623108 95.00521851]
[182.27589417 106.89521790]
[167.21284485 110.62133789]
[152.84912109 104.75081635]
[144.70787048 91.54097748]
[129.74185181 90.53194427]
[124.62002563 96.01071930]
[128.98774719 110.36073303]
[114.37638092 106.96826172]
[109.25456238 112.44702911]
[111.26805878 127.31127930]
[122.88990784 134.21624756]
[128.30938721 146.38746643]
[125.74133301 159.26200867]
[116.35013580 168.15411377]
[118.02960205 183.05978394]
[119.70906830 197.96546936]
[121.38853455 212.87115479]
[123.06800842 227.77684021]
[126.75378418 233.42611694]
[126.94097900 239.21041870]
[124.47293091 243.38688660]
[125.48197174 258.35290527]
[126.49100494 273.31893921]
[127.50003815 288.28494263]
[128.50907898 303.25097656]
[129.51811218 318.21701050]
[132.94671631 324.02593994]
[132.87422180 329.81283569]
[130.22128296 333.87435913]
[130.55786133 348.87057495]
[130.89442444 363.86682129]
[133.51681519 383.07028198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 133]
[5 132]
[6 131]
[7 130]
[8 129]
[9 128]
[10 125]
[11 124]
[12 123]
[13 122]
[14 121]
[17 117]
[18 116]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[34 81]
[35 80]
[36 79]
[37 78]
[38 77]
[39 76]
[42 73]
[43 72]
[44 71]
[45 70]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 61]
[52 60]
[53 59]
[54 58]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
