%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCUUCUCUUCCCUGCCUACUGAAAUACAGUCAUUACUCUUUCUGACAUUUCUAACCAUCUACCUGGUCACCCUGAUGGGAAACUGCCUCAUCAUUC\
) } def
/len { sequence length } bind def

/coor [
[125.90872955 343.79125977]
[123.58525848 328.97229004]
[121.26178741 314.15335083]
[118.93830872 299.33438110]
[116.61483765 284.51541138]
[103.06735229 281.12591553]
[91.81910706 272.77615356]
[84.60852051 260.71502686]
[82.56587982 246.76811218]
[86.03629303 233.06138611]
[94.52189636 221.69714355]
[106.75302124 214.43157959]
[104.89154053 199.54753113]
[103.03005981 184.66348267]
[101.16857147 169.77943420]
[99.30709076 154.89538574]
[85.22531891 152.87431335]
[72.13562775 147.30287170]
[60.91695404 138.55516052]
[52.32260513 127.21856689]
[46.92966461 114.05432129]
[45.10026169 99.94636536]
[46.95722961 85.84201050]
[52.37587738 72.68833160]
[60.99235916 61.36855698]
[51.87636948 49.45643234]
[42.76037979 37.54430771]
[33.64439011 25.63218307]
[24.52839851 13.72005844]
[19.36658859 11.59801865]
[15.98525810 7.99912643]
[14.65143204 3.90332866]
[15.18031883 0.24610031]
[7.21395206 -12.46362019]
[-0.75241494 -25.17334175]
[-8.71878147 -37.88306046]
[-24.06444168 -37.24564743]
[-37.66543198 -44.38067627]
[-45.86315536 -57.36885834]
[-46.45246506 -72.71643829]
[-39.27484131 -86.29499817]
[-26.26102448 -94.45197296]
[-10.91167068 -94.99317169]
[2.64432335 -87.77301788]
[10.76046276 -74.73369598]
[11.25354671 -59.38272476]
[3.99093866 -45.84943008]
[11.95730591 -33.13970947]
[19.92367172 -20.42998695]
[27.89003944 -7.72026682]
[36.44052505 4.60406780]
[45.55651474 16.51619339]
[54.67250443 28.42831802]
[63.78849411 40.34044266]
[72.90448761 52.25256729]
[94.54780579 45.37163925]
[117.12416077 47.83921814]
[136.77006531 59.23302460]
[148.24406433 49.57136917]
[159.71804810 39.90971375]
[171.19203186 30.24805641]
[172.29237366 14.48211956]
[184.27328491 4.17516661]
[200.02670288 5.44213152]
[210.20642090 17.53134537]
[208.77296448 33.27049255]
[196.57679749 43.32181931]
[180.85368347 41.72204590]
[169.37969971 51.38370132]
[157.90571594 61.04535675]
[146.43173218 70.70701599]
[151.07250977 79.86091614]
[153.92845154 89.71862030]
[154.89973450 99.93563843]
[153.95240784 110.15490723]
[151.11958313 120.01927948]
[146.50027466 129.18403625]
[140.25590515 137.32888794]
[132.60469055 144.16920471]
[123.81404114 149.46591187]
[114.19113922 153.03390503]
[116.05261993 167.91795349]
[117.91410065 182.80200195]
[119.77558899 197.68605042]
[121.63706970 212.57009888]
[137.02786255 217.58380127]
[148.67956543 228.73652649]
[154.32107544 243.78501892]
[152.88293457 259.73370361]
[144.69969177 273.43096924]
[131.43379211 282.19195557]
[133.75726318 297.01089478]
[136.08073425 311.82986450]
[138.40422058 326.64883423]
[140.72769165 341.46777344]
[153.64518738 350.57348633]
[156.25817871 366.16024780]
[147.01643372 378.98077393]
[131.40289307 381.42883301]
[118.68080139 372.05203247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[33 50]
[34 49]
[35 48]
[36 47]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
