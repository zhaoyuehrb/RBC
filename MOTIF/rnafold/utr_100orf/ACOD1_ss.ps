%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAUCACAGAAAGCUUUGCCACAGCAAUCCAUGGCUUGAAAGUGGGACACCUGACAGAUCGUGUUAUUCAGAGGAGCAAGAGGAUGAUUCUAGACACUC\
) } def
/len { sequence length } bind def

/coor [
[93.64022064 125.90719604]
[82.81963348 121.41938019]
[74.68895721 112.52411652]
[70.98655701 100.70202637]
[72.67943573 88.08982086]
[57.68125153 87.85654449]
[42.68306732 87.62326813]
[27.68488121 87.38998413]
[17.79554749 101.00714874]
[1.91561198 106.05937958]
[-13.71126938 100.76561737]
[-23.06205177 87.37283325]
[-38.06023788 87.60610962]
[-53.05842209 87.83938599]
[-68.05661011 88.07266235]
[-83.05479431 88.30593872]
[-97.98953247 89.70362854]
[-112.77056885 92.25727844]
[-127.55159760 94.81093597]
[-142.33262634 97.36458588]
[-154.57823181 108.27225494]
[-170.06024170 102.86489868]
[-172.85208130 86.70514679]
[-160.08175659 76.41676331]
[-144.88627625 82.58355713]
[-130.10525513 80.02990723]
[-115.32421875 77.47624969]
[-100.54319000 74.92259979]
[-99.19818878 72.80902100]
[-96.97215271 71.07002258]
[-93.99360657 70.02363586]
[-90.49629211 69.93969727]
[-86.80106354 71.00710297]
[-83.28807068 73.30775452]
[-68.28988647 73.07447815]
[-53.29169846 72.84120178]
[-38.29351425 72.60791779]
[-23.29532814 72.37464142]
[-16.59727859 60.71305084]
[-4.89510727 53.86799622]
[8.77028084 53.74353027]
[20.78505707 60.48072815]
[27.91815948 72.39179993]
[42.91634369 72.62507629]
[57.91453171 72.85835266]
[72.91271973 73.09163666]
[85.36853790 64.73384857]
[90.83831024 50.76668930]
[96.30808258 36.79952621]
[101.77785492 22.83236694]
[107.24762726 8.86520481]
[97.60005951 -3.08552742]
[95.23624420 -18.26142693]
[100.79203033 -32.58025360]
[112.77294922 -42.19031525]
[127.95618439 -44.50654984]
[142.25752258 -38.90590668]
[151.82998657 -26.89492798]
[154.09861755 -11.70450783]
[148.45317078 2.57920766]
[136.41224670 12.11397076]
[121.21479034 14.33497810]
[115.74501801 28.30213928]
[110.27524567 42.26929855]
[104.80547333 56.23646164]
[99.33569336 70.20362091]
[108.54749298 72.26531219]
[116.41294861 77.01918793]
[122.19736481 83.83733368]
[125.42010498 91.90998840]
[125.89231110 100.33987427]
[123.72190094 108.24129486]
[135.77435303 117.17092896]
[147.82681274 126.10056305]
[161.33726501 119.08422852]
[176.49252319 118.63146973]
[190.28503418 124.77855682]
[200.00094604 136.25732422]
[203.75402832 150.75642395]
[200.85174561 165.38661194]
[212.90420532 174.31623840]
[224.95664978 183.24588013]
[237.00910950 192.17550659]
[253.02519226 191.24549866]
[263.63046265 203.28324890]
[260.68948364 219.05444336]
[246.45832825 226.46073914]
[231.85389709 219.82069397]
[228.07948303 204.22796631]
[216.02702332 195.29832458]
[203.97456360 186.36869812]
[191.92211914 177.43905640]
[178.77122498 184.47607422]
[163.80760193 185.10801697]
[149.99693298 179.15600586]
[140.09968567 167.75140381]
[136.11938477 153.12115479]
[138.89717102 138.15301514]
[126.84471893 129.22338867]
[114.79226685 120.29374695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[8 43]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 28]
[18 27]
[19 26]
[20 25]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[72 100]
[73 99]
[74 98]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
