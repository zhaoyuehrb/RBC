%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUAUCCGCAGGGCUACUUGUACCAGCCGUCCGCCUCGCUGGCGCUCUACUCGUGCCCGGCGUACAGCACCAGCGUCAUUUCGGGGCCCCGCACGG\
) } def
/len { sequence length } bind def

/coor [
[51.66430664 351.03085327]
[38.22457504 358.04150391]
[23.19716263 360.02966309]
[8.39670277 356.75518799]
[-4.38957644 348.61349487]
[-13.61767006 336.58776855]
[-18.17324066 322.13015747]
[-17.50618172 306.98648071]
[-11.69704247 292.98541260]
[-1.44730532 281.81768799]
[12.00532436 274.83178711]
[27.03637505 272.87136841]
[30.27664185 258.22552490]
[25.47134209 244.12734985]
[36.00704193 232.32440186]
[39.24731064 217.67855835]
[42.48757935 203.03271484]
[45.72784424 188.38687134]
[48.96811295 173.74102783]
[36.83723450 182.56382751]
[22.02451706 184.92675781]
[7.75071907 180.31604004]
[-2.88058257 169.73420715]
[-7.55780554 155.48205566]
[-5.26397181 140.65847778]
[3.50216508 128.48660278]
[16.83456802 121.61295319]
[31.83435059 121.53209686]
[45.24008179 128.26161194]
[54.13692856 140.33828735]
[56.59056091 155.13452148]
[64.55692291 142.42480469]
[72.52329254 129.71508789]
[64.00009155 118.49222565]
[59.84178162 105.02724457]
[60.55253601 90.95272064]
[66.04618073 77.97515106]
[75.65663147 67.66802979]
[88.21864319 61.28107452]
[102.20911407 59.58867264]
[115.93173218 62.79602814]
[124.28951263 50.34020615]
[132.64729309 37.88438797]
[141.00508118 25.42856789]
[149.36286926 12.97274876]
[157.72065735 0.51692873]
[158.98495483 -15.25368118]
[172.50135803 -21.51114273]
[180.85914612 -33.96696091]
[189.21693420 -46.42278290]
[190.48123169 -62.19338989]
[203.99763489 -68.45085144]
[212.35542297 -80.90666962]
[220.71321106 -93.36249542]
[228.87626648 -105.94678497]
[236.84263611 -118.65650177]
[244.80900574 -131.36622620]
[244.86293030 -147.76528931]
[259.22448730 -155.68223572]
[273.11972046 -146.97279358]
[272.25442505 -130.59648132]
[257.51873779 -123.39985657]
[249.55235291 -110.69013977]
[241.58599854 -97.98041534]
[240.68495178 -90.50956726]
[233.16902161 -85.00470734]
[224.81124878 -72.54888916]
[216.45346069 -60.09306717]
[215.78697205 -45.21338272]
[201.67274475 -38.06499863]
[193.31497192 -25.60917854]
[184.95718384 -13.15335846]
[184.29069519 1.72632790]
[170.17646790 8.87471294]
[161.81867981 21.33053207]
[153.46090698 33.78635406]
[145.10311890 46.24217224]
[136.74533081 58.69799042]
[128.38755798 71.15380859]
[137.24035645 84.15348816]
[140.46911621 99.54630280]
[137.58625793 115.00763702]
[129.02711487 128.20251465]
[116.08432007 137.13825989]
[100.71246338 140.46539307]
[85.23301697 137.68145752]
[77.26664734 150.39117432]
[69.30027771 163.10089111]
[63.61395264 176.98129272]
[60.37368774 191.62713623]
[57.13341904 206.27297974]
[53.89315033 220.91882324]
[50.65288544 235.56466675]
[55.22642136 250.71040344]
[44.92248535 261.46578979]
[41.68221664 276.11163330]
[54.48347855 284.22970581]
[63.73371887 296.23840332]
[68.31592560 310.68762207]
[67.67677307 325.83248901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 96]
[13 95]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[31 88]
[32 87]
[33 86]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[48 72]
[49 71]
[50 70]
[52 68]
[53 67]
[54 66]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
