%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAUGGCCGGAGCGGCGGCGGCGGUGGCCGCGGGAGCAGCAGCUGGAGCCGCCGCGGCAGCCGUGUCGGUGGCGGCUCCCGGCCGGGCCUCGGCGCCUCCGC\
) } def
/len { sequence length } bind def

/coor [
[4.66820717 403.66213989]
[4.75005341 418.86285400]
[-0.99602091 432.93591309]
[-11.69378090 443.73529053]
[-25.71189690 449.61413574]
[-40.91270447 449.67599487]
[-54.97819519 443.91140747]
[-65.76348114 433.19943237]
[-71.62388611 419.17361450]
[-71.66574097 403.97271729]
[-65.88266754 389.91482544]
[-55.15652847 379.14364624]
[-41.12299347 373.30169678]
[-25.92207527 373.27984619]
[-20.23369408 359.40026855]
[-14.54531097 345.52072144]
[-8.85692978 331.64114380]
[-11.18978119 316.93035889]
[1.20295286 307.09518433]
[6.89133501 293.21563721]
[12.57971668 279.33605957]
[18.26809883 265.45648193]
[15.93524742 250.74571228]
[28.32798195 240.91053772]
[34.01636124 227.03097534]
[39.70474625 213.15141296]
[39.32266235 205.64601135]
[45.77650452 198.94581604]
[51.87755203 185.24264526]
[57.97860336 171.53945923]
[64.07965088 157.83627319]
[63.92226791 150.32281494]
[70.57366180 143.81869507]
[77.08191681 130.30415344]
[83.59017181 116.78962708]
[73.12401581 98.61862183]
[81.12588501 76.23789978]
[71.95001984 64.37183380]
[62.77415466 52.50577164]
[47.40301895 46.79085159]
[44.93387985 30.57865143]
[57.90676880 20.54689598]
[72.97629547 27.01539040]
[74.64022064 43.32990646]
[83.81608582 55.19597244]
[92.99195099 67.06203461]
[107.99027252 67.28643036]
[117.51700592 55.70017242]
[127.04373932 44.11391830]
[136.57048035 32.52766418]
[146.09721375 20.94141006]
[155.62394714 9.35515594]
[165.15069580 -2.23109818]
[174.67742920 -13.81735229]
[184.20416260 -25.40360641]
[193.73089600 -36.98986053]
[203.25762939 -48.57611465]
[212.60998535 -60.30358887]
[221.78584290 -72.16965485]
[230.96171570 -84.03572083]
[240.13757324 -95.90178680]
[241.80149841 -112.21630096]
[256.87103271 -118.68479156]
[269.84390259 -108.65303802]
[267.37478638 -92.44084167]
[252.00364685 -86.72592163]
[242.82777405 -74.85985565]
[233.65191650 -62.99378967]
[224.47604370 -51.12772369]
[222.84765625 -43.79115295]
[214.84388733 -39.04937744]
[205.31715393 -27.46312523]
[195.79042053 -15.87687016]
[186.26368713 -4.29061604]
[176.73693848 7.29563856]
[167.21020508 18.88189316]
[157.68347168 30.46814728]
[148.15673828 42.05440140]
[138.62998962 53.64065552]
[129.10325623 65.22691345]
[119.57652283 76.81316376]
[127.88380432 93.51209259]
[124.65518188 110.78650665]
[112.46112061 121.89685822]
[97.10470581 123.29788208]
[90.59645081 136.81240845]
[84.08819580 150.32695007]
[77.78283691 163.93733215]
[71.68178558 177.64050293]
[65.58073425 191.34368896]
[59.47968674 205.04687500]
[53.58430862 218.83978271]
[47.89592743 232.71936035]
[42.20754623 246.59892273]
[44.13352585 262.30245972]
[32.14766312 271.14486694]
[26.45928192 285.02444458]
[20.77089882 298.90399170]
[15.08251762 312.78356934]
[17.00849724 328.48712158]
[5.02263498 337.32952881]
[-0.66574687 351.20910645]
[-6.35412884 365.08865356]
[-12.04251099 378.96823120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 104]
[15 103]
[16 102]
[17 101]
[19 99]
[20 98]
[21 97]
[22 96]
[24 94]
[25 93]
[26 92]
[28 91]
[29 90]
[30 89]
[31 88]
[33 87]
[34 86]
[35 85]
[37 46]
[38 45]
[39 44]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
