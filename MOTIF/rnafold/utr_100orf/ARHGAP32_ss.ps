%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGACUGAAAGUGAGAGUAGCACUUUAGGGGAUGACAGUGUCUUCUGGUUGGAGUCUGAAGUUAUAAUCCAGGUGACUGACUGUGAAGAGGAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[-9.08480263 190.75244141]
[-22.16679001 199.11447144]
[-36.94793320 203.82997131]
[-52.43343735 204.58753967]
[-67.58262634 201.34197998]
[-81.37889099 194.31692505]
[-92.89791870 183.98937988]
[-101.36959839 171.05747986]
[-115.57666779 175.86987305]
[-126.16501617 187.62561035]
[-140.70182800 184.38055420]
[-154.90890503 189.19294739]
[-169.11596680 194.00532532]
[-183.32304382 198.81771851]
[-197.53012085 203.63011169]
[-211.73719788 208.44248962]
[-217.24533081 223.07788086]
[-230.89752197 230.70358276]
[-246.24765015 227.71897888]
[-256.04782104 215.53332520]
[-255.67073059 199.90028381]
[-245.29438782 188.20132446]
[-229.81822205 185.96032715]
[-216.54957581 194.23541260]
[-202.34251404 189.42303467]
[-188.13543701 184.61064148]
[-173.92835999 179.79826355]
[-159.72128296 174.98587036]
[-145.51420593 170.17349243]
[-135.94204712 158.76196289]
[-120.38905334 161.66279602]
[-106.18198395 156.85041809]
[-107.36018372 142.41407776]
[-105.02211761 128.11006165]
[-99.30116272 114.78271484]
[-90.53051758 103.21988678]
[-79.22380829 94.10630035]
[-66.04499817 87.98301697]
[-51.76942825 85.21533966]
[-37.23816681 85.97100067]
[-23.30847740 90.21001434]
[-10.80324554 97.68675232]
[-0.46235767 107.96418762]
[7.10106754 120.43943024]
[21.45093346 116.07120514]
[35.80080032 111.70298767]
[50.15066528 107.33476257]
[64.50053406 102.96654510]
[78.85039520 98.59832764]
[86.20133209 83.91065216]
[101.83766937 78.88381195]
[116.37057495 86.53617859]
[130.57765198 81.72378540]
[144.78472900 76.91139984]
[155.37307739 65.15565491]
[169.90988159 68.40071106]
[184.11695862 63.58832932]
[198.32403564 58.77593994]
[212.53109741 53.96355438]
[216.19700623 49.75541306]
[220.69047546 47.70744324]
[224.99768066 47.75815964]
[228.29190063 49.43242264]
[242.88558960 45.96477890]
[257.47927856 42.49713516]
[272.07293701 39.02948761]
[286.66662598 35.56184387]
[301.26028442 32.09420013]
[308.10818481 18.03573227]
[322.41152954 11.71530437]
[337.41677856 16.11722946]
[346.03887939 29.16305542]
[344.20672607 44.69293976]
[332.78543091 55.37414551]
[317.16778564 56.16333389]
[304.72793579 46.68787766]
[290.13427734 50.15552139]
[275.54058838 53.62316895]
[260.94689941 57.09081268]
[246.35322571 60.55845642]
[231.75955200 64.02610016]
[217.34349060 68.17063141]
[203.13641357 72.98301697]
[188.92933655 77.79540253]
[174.72227478 82.60778809]
[165.15010071 94.01931763]
[149.59710693 91.11847687]
[135.39004517 95.93086243]
[121.18296814 100.74324799]
[116.90695953 112.78379059]
[106.48719025 120.17887115]
[93.71006775 120.24122620]
[83.21862030 112.94818878]
[68.86875153 117.31641388]
[54.51888657 121.68463135]
[40.16902161 126.05284882]
[25.81915474 130.42106628]
[11.46928787 134.78929138]
[12.05580521 150.34869385]
[8.62606525 165.52536011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 32]
[9 31]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[52 89]
[53 88]
[54 87]
[56 85]
[57 84]
[58 83]
[59 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
