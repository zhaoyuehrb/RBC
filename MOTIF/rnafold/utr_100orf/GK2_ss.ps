%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGACCUACUGGUGUCAUGGCAGCCCCAAAGACAGCAGCUGUGGGGCCGUUGGUGGGAGCGGUGGUCCAGGGCACCAACUCCACUCGCUUUCUGGUUUUCAAUUCAAAAACAGCGG\
) } def
/len { sequence length } bind def

/coor [
[108.21741486 116.84114838]
[96.06687927 117.30039215]
[86.87014008 129.15028381]
[77.67340851 141.00018311]
[68.47666931 152.85008240]
[59.91813660 165.16882324]
[52.02165604 177.92208862]
[44.12517166 190.67533875]
[44.16126251 207.07444763]
[29.84338951 215.07011414]
[15.90055370 206.43707275]
[16.67594910 190.05625916]
[31.37191582 182.77885437]
[39.26839828 170.02560425]
[47.16487885 157.27235413]
[46.55864716 154.41209412]
[47.12244034 151.12631226]
[49.02954483 147.88807678]
[52.26803589 145.22579956]
[56.62677383 143.65335083]
[65.82350922 131.80345154]
[75.02024078 119.95355225]
[84.21697998 108.10366058]
[80.92842865 94.92151642]
[88.16470337 81.77531433]
[74.25036621 76.17253876]
[60.33602524 70.56976318]
[46.42168427 64.96698761]
[32.50734329 59.36420822]
[18.59300041 53.76143265]
[2.90162230 55.78410721]
[-6.01446009 43.85293961]
[-19.92880249 38.25016403]
[-33.64129257 45.76692200]
[-48.96715927 42.66019058]
[-58.66999817 30.39687347]
[-58.16842651 14.76733685]
[-47.69926834 3.15136719]
[-32.20574188 1.03367138]
[-19.00341606 9.41415977]
[-14.32602501 24.33582306]
[-0.41168362 29.93860054]
[14.28444767 27.51517487]
[24.19577789 39.84708786]
[38.11011887 45.44986725]
[52.02445984 51.05264282]
[65.93880463 56.65541840]
[79.85314178 62.25819778]
[93.76748657 67.86096954]
[108.75572205 68.45481873]
[123.06972504 63.97046280]
[137.38372803 59.48611069]
[151.69772339 55.00175858]
[166.01171875 50.51740646]
[172.98301697 29.63141060]
[194.38206482 20.09076500]
[217.17044067 29.97788048]
[228.38800049 20.01964569]
[239.60554504 10.06141090]
[250.82310486 0.10317570]
[262.04064941 -9.85505962]
[273.25820923 -19.81329536]
[284.47576904 -29.77153015]
[295.56091309 -39.87696457]
[306.51168823 -50.12783813]
[317.46246338 -60.37871170]
[328.41323853 -70.62958527]
[325.04421997 -85.54926300]
[329.56555176 -100.05630493]
[340.66741943 -110.28445435]
[355.30038452 -113.56045532]
[369.51269531 -109.10221100]
[380.46347046 -119.35308838]
[387.89486694 -134.59155273]
[404.59500122 -131.66903687]
[406.40975952 -114.81249237]
[390.71435547 -108.40230560]
[379.76358032 -98.15142822]
[383.27478027 -83.67604065]
[379.04083252 -69.29098511]
[368.10278320 -58.88786316]
[353.32913208 -55.33312607]
[338.66412354 -59.67880249]
[327.71334839 -49.42792892]
[316.76257324 -39.17705536]
[305.81176758 -28.92618370]
[303.04425049 -21.97071838]
[294.43402100 -18.55397415]
[283.21646118 -8.59573936]
[271.99890137 1.36249614]
[260.78134155 11.32073116]
[249.56378174 21.27896690]
[238.34622192 31.23720169]
[227.12867737 41.19543839]
[227.72251892 56.18367767]
[239.69277954 65.22319794]
[251.66304016 74.26271820]
[266.46694946 69.61254883]
[281.16610718 74.58390045]
[290.10836792 87.26519775]
[289.85531616 102.78020477]
[280.50418091 115.16310120]
[265.65069580 119.65239716]
[251.00633240 114.52188110]
[242.20214844 101.74432373]
[242.62351990 86.23297119]
[230.65325928 77.19345856]
[218.68299866 68.15393829]
[209.28552246 75.84387207]
[198.05256653 79.23904419]
[186.78103638 78.11981964]
[177.15539551 72.96453857]
[170.49607849 64.83140564]
[156.18206787 69.31575775]
[141.86807251 73.80010986]
[127.55407715 78.28446198]
[113.24007416 82.76881409]
[120.14817810 95.10906219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[6 15]
[7 14]
[8 13]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[33 41]
[50 117]
[51 116]
[52 115]
[53 114]
[54 113]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 86]
[65 85]
[66 84]
[67 83]
[72 78]
[73 77]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
