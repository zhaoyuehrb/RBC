%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:38:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCUUCCUGGGGCCUGGAGCCCUGGUUGCCAUCAGCCAUGGCUCCCAAAAAGAGUGUGAGCAAGGCAGGCAAGGAGCUUGAAGUCAAGAAGAAAGGGGGCAAGAAGGAGCCGGUGGUGGCCGUGGAGCCGCCUCUGG\
) } def
/len { sequence length } bind def

/coor [
[156.08309937 189.52339172]
[158.05647278 166.58158875]
[147.27412415 156.15370178]
[136.49176025 145.72581482]
[125.70941162 135.29792786]
[114.92705536 124.87004089]
[104.14469910 114.44215393]
[91.41218567 106.51226807]
[77.29784393 101.43434143]
[63.18349838 96.35642242]
[49.06915283 91.27849579]
[34.46255112 101.90732574]
[16.55542946 101.70504761]
[2.44104743 90.93843079]
[-2.40118194 74.02194977]
[-16.72772026 69.57781219]
[-31.05425644 65.13368225]
[-45.38079453 60.68954468]
[-60.28780746 59.02193832]
[-75.24222565 60.19049835]
[-90.19663239 61.35905457]
[-105.15104675 62.52761078]
[-120.10546112 63.69616699]
[-135.05987549 64.86472321]
[-148.21534729 73.65359497]
[-161.50669861 66.93131256]
[-176.46110535 68.09986877]
[-191.41552734 69.26842499]
[-206.36993408 70.43698120]
[-221.32435608 71.60553741]
[-236.27876282 72.77409363]
[-249.48532104 82.49618530]
[-264.39761353 75.67304230]
[-265.67517090 59.32373428]
[-252.00373840 50.26702499]
[-237.44732666 57.81968307]
[-222.49290466 56.65112686]
[-207.53849792 55.48257065]
[-192.58407593 54.31401062]
[-177.62966919 53.14545441]
[-162.67526245 51.97689819]
[-150.58943176 43.27161026]
[-136.22843933 49.91030884]
[-121.27401733 48.74175262]
[-106.31960297 47.57319641]
[-91.36519623 46.40464020]
[-76.41078186 45.23608398]
[-61.45636749 44.06752777]
[-57.70636749 37.57233810]
[-71.39033508 31.42831421]
[-86.34559631 30.27062607]
[-93.33840179 17.00033379]
[-85.83853149 4.00987625]
[-70.84973145 3.43036819]
[-62.36922836 15.80330276]
[-50.20636749 24.58195496]
[-46.45636749 18.08676529]
[-52.92157364 4.55158472]
[-66.74057770 -4.27831888]
[-65.73294830 -20.64648056]
[-50.93525696 -27.71473885]
[-37.57009125 -18.21187592]
[-39.38639450 -1.91362214]
[-32.92118454 11.62155819]
[-31.66069031 32.29642868]
[-40.93666077 46.36300659]
[-26.61012268 50.80714035]
[-12.28358555 55.25127411]
[2.04295158 59.69540787]
[10.65542221 51.01169205]
[22.22179985 46.81898117]
[34.54249954 47.98051834]
[45.24617767 54.33499527]
[52.24614716 64.71566772]
[54.14707947 77.16415405]
[68.26142120 82.24208069]
[82.37576294 87.31999969]
[96.49010468 92.39792633]
[96.49729156 82.09469604]
[101.29776001 71.91379547]
[110.59400940 60.14180374]
[119.89025879 48.36981583]
[129.18650818 36.59782410]
[131.01651001 20.30110359]
[146.15113831 13.98643017]
[159.02117920 24.14980125]
[156.38703918 40.33600998]
[140.95849609 45.89407349]
[131.66224670 57.66606140]
[122.36599731 69.43805695]
[113.06974792 81.21004486]
[124.53257751 71.53514862]
[139.52392578 72.04443359]
[150.30374146 82.47495270]
[151.30636597 97.44140625]
[142.01414490 109.21658325]
[127.22468567 111.72093201]
[114.57258606 103.65979767]
[125.35494232 114.08768463]
[136.13729858 124.51557159]
[146.91964722 134.94345093]
[157.70201111 145.37133789]
[168.48435974 155.79922485]
[175.89302063 152.74565125]
[183.82714844 151.83547974]
[191.68133545 153.12324524]
[198.86032104 156.49633789]
[204.82415771 161.68470764]
[209.12873840 168.28234863]
[211.45893860 175.77917480]
[211.65158081 183.60029602]
[209.70681763 191.15022278]
[205.78698730 197.85816956]
[214.81866455 209.83435059]
[223.85034180 221.81053162]
[232.88200378 233.78671265]
[247.36880493 240.14620972]
[248.85449219 254.96653748]
[257.88616943 266.94271851]
[266.91784668 278.91888428]
[275.94952393 290.89508057]
[284.98117065 302.87124634]
[294.01284790 314.84744263]
[309.69696045 316.79266357]
[319.34579468 329.30969238]
[317.23483276 344.97235107]
[304.61651611 354.48831177]
[288.97702026 352.21188354]
[279.59503174 339.49365234]
[282.03668213 323.87911987]
[273.00500488 311.90292358]
[263.97332764 299.92675781]
[254.94165039 287.95056152]
[245.90998840 275.97439575]
[236.87831116 263.99819946]
[223.03752136 258.49533081]
[220.90582275 242.81837463]
[211.87416077 230.84219360]
[202.84248352 218.86601257]
[193.81080627 206.88984680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 78]
[9 77]
[10 76]
[11 75]
[15 69]
[16 68]
[17 67]
[18 66]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[57 64]
[58 63]
[80 91]
[81 90]
[82 89]
[83 88]
[113 140]
[114 139]
[115 138]
[116 137]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
