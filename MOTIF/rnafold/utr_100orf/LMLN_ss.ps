%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGAGGCGUCACGCACUCCAUGGUAACGACGCUCGGCCCGAAGAUGGCGGCCGAAUGGGGCGGAGGAGUGGGUUACUCGGGCUCAGGCCCGGGCCGGAGCCGGUGGCGCUGGAGCGGGU\
) } def
/len { sequence length } bind def

/coor [
[97.88049316 406.79290771]
[107.52002716 393.96875000]
[106.75411987 378.98831177]
[105.98821259 364.00787354]
[93.42698669 356.04837036]
[87.89585114 342.05300903]
[91.71089172 327.31195068]
[103.61196136 317.53079224]
[102.84605408 302.55038452]
[102.08014679 287.56994629]
[101.31423950 272.58950806]
[100.54832458 257.60906982]
[99.78241730 242.62863159]
[99.01651001 227.64820862]
[98.25060272 212.66777039]
[85.68938446 204.70826721]
[80.15824127 190.71289062]
[83.97328186 175.97183228]
[95.87435150 166.19068909]
[95.10844421 151.21025085]
[94.34253693 136.22982788]
[93.57662964 121.24938965]
[77.80409241 109.38462067]
[76.90692139 88.05902100]
[94.01156616 72.75337982]
[87.35576630 59.31089401]
[80.69996643 45.86841202]
[74.04417419 32.42593002]
[67.38837433 18.98344421]
[60.73257446 5.54096174]
[45.19189072 -4.23556995]
[46.85788727 -21.65526390]
[39.86095810 -34.92338181]
[24.07566261 -44.29983902]
[25.29623795 -61.75639725]
[17.96274185 -74.84149933]
[10.62924480 -87.92659760]
[-2.86721277 -96.18227386]
[-2.34001684 -111.06755066]
[-9.67351341 -124.15264893]
[-17.00700951 -137.23774719]
[-24.34050751 -150.32284546]
[-38.38122177 -149.78323364]
[-51.21333694 -155.34274292]
[-60.33534622 -165.85499573]
[-63.99613190 -179.21440125]
[-61.53091812 -192.77767944]
[-53.48117065 -203.88690186]
[-60.47809982 -217.15502930]
[-67.47502899 -230.42314148]
[-80.21161652 -241.61312866]
[-72.98478699 -256.94964600]
[-56.24702835 -254.25082397]
[-54.20691299 -237.42007446]
[-47.20998383 -224.15196228]
[-40.21305466 -210.88383484]
[-24.10906410 -210.67996216]
[-10.20812893 -202.36346436]
[-2.32346368 -188.10620117]
[-2.67278504 -171.72416687]
[-11.25540733 -157.65634155]
[-3.92191076 -144.57124329]
[3.41158581 -131.48614502]
[10.74508286 -118.40104675]
[23.71699905 -111.08129883]
[23.71434402 -95.26009369]
[31.04784012 -82.17499542]
[38.38133621 -69.08989716]
[49.99929047 -65.46820831]
[56.19227982 -54.52765656]
[53.12907410 -41.92031097]
[60.12600327 -28.65219307]
[71.64767456 -24.73497963]
[77.55923462 -13.63983917]
[74.17505646 -1.11483610]
[80.83085632 12.32764721]
[87.48665619 25.77013016]
[94.14244843 39.21261215]
[100.79824829 52.65509796]
[107.45404816 66.09757996]
[121.06212616 72.40790558]
[135.62272644 68.80386353]
[150.18331909 65.19982147]
[164.74391174 61.59578323]
[179.30450439 57.99174118]
[190.73880005 46.23637009]
[206.56784058 50.52283478]
[210.50804138 66.44158936]
[198.50608826 77.61678314]
[182.90853882 72.55233765]
[168.34794617 76.15637970]
[153.78735352 79.76041412]
[139.22676086 83.36445618]
[124.66616821 86.96849823]
[126.44144440 95.90045166]
[125.21116638 104.54616547]
[121.35566711 111.96315765]
[115.52797699 117.42332458]
[108.55706024 120.48348236]
[109.32296753 135.46391296]
[110.08887482 150.44435120]
[110.85478973 165.42477417]
[123.69136047 173.94114685]
[128.98991394 188.21626282]
[124.91498566 202.70275879]
[113.23103333 211.90185547]
[113.99694061 226.88229370]
[114.76285553 241.86273193]
[115.52876282 256.84317017]
[116.29467010 271.82360840]
[117.06057739 286.80401611]
[117.82648468 301.78445435]
[118.59239960 316.76489258]
[131.42897034 325.28128052]
[136.72752380 339.55636597]
[132.65258789 354.04287720]
[120.96864319 363.24197388]
[121.73455048 378.22241211]
[122.50046539 393.20285034]
[133.39764404 404.97702026]
[130.84414673 420.81555176]
[116.79881287 428.56848145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 119]
[3 118]
[4 117]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 108]
[14 107]
[15 106]
[19 102]
[20 101]
[21 100]
[22 99]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[32 72]
[33 71]
[35 68]
[36 67]
[37 66]
[39 64]
[40 63]
[41 62]
[42 61]
[48 56]
[49 55]
[50 54]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
