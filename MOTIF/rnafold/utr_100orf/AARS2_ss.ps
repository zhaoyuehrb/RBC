%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAUGGCAGCGUCAGUGGCAGCUGCAGCCCGGAGGCUGCGGCGGGCCAUUCGAAGGUCGCCCGCAUGGCGGGGCCUCAGCCAUCGGCCGCUCUCAUCGGAGC\
) } def
/len { sequence length } bind def

/coor [
[139.56292725 218.56474304]
[145.09118652 202.05271912]
[138.12033081 188.77087402]
[131.14949036 175.48902893]
[124.17864227 162.20719910]
[117.20779419 148.92535400]
[110.23694611 135.64350891]
[103.26609802 122.36167145]
[91.62359619 122.06119537]
[81.18749237 115.84596252]
[74.87503815 104.88688660]
[74.72042847 91.74018860]
[81.24999237 79.75523376]
[67.76367188 73.18872070]
[54.17971039 66.82664490]
[40.50121307 60.67044830]
[26.82271385 54.51425934]
[13.14421654 48.35806656]
[-0.53428131 42.20187378]
[-14.21277905 36.04568100]
[-32.39945984 38.38250732]
[-42.21138382 23.91957855]
[-56.06957626 18.17932701]
[-69.92777252 12.43907452]
[-83.78596497 6.69882345]
[-97.64415741 0.95857185]
[-111.50234985 -4.78167963]
[-125.36054230 -10.52193069]
[-139.21873474 -16.26218224]
[-153.07691956 -22.00243378]
[-169.25630188 -19.32662582]
[-179.45277405 -32.17045593]
[-173.17709351 -47.32129288]
[-156.88513184 -49.19325256]
[-147.33666992 -35.86062622]
[-133.47848511 -30.12037468]
[-119.62029266 -24.38012505]
[-105.76209259 -18.63987350]
[-91.90390015 -12.89962101]
[-78.04570770 -7.15936947]
[-64.18751526 -1.41911817]
[-50.32932281 4.32113314]
[-36.47113037 10.06138515]
[-25.07085991 5.71367455]
[-13.41726875 10.51585484]
[-8.05658722 22.36718369]
[5.62191057 28.52337646]
[19.30040932 34.67956924]
[32.97890472 40.83576202]
[46.65740204 46.99195099]
[60.33590317 53.14814377]
[67.85234070 53.02091217]
[74.33018494 59.70240021]
[87.81650543 66.26891327]
[102.67813110 64.23617554]
[113.90579224 54.28933334]
[125.13345337 44.34249496]
[136.36111450 34.39565659]
[138.91371155 28.00187111]
[143.65913391 24.50304794]
[148.58013916 24.21237183]
[160.38789368 14.96158886]
[172.19564819 5.71080542]
[184.00338745 -3.53997755]
[195.81114197 -12.79076099]
[204.55055237 -27.31863213]
[220.92997742 -22.94247437]
[221.25912476 -5.99172163]
[205.06193542 -0.98300850]
[193.25418091 8.26777458]
[181.44642639 17.51855850]
[169.63867188 26.76934052]
[157.83091736 36.02012253]
[146.30795288 45.62331772]
[135.08029175 55.57015610]
[123.85263062 65.51699829]
[112.62496948 75.46383667]
[122.99081421 88.01148224]
[124.04549408 103.24796295]
[116.54794312 115.39082336]
[123.51879120 128.67266846]
[130.48963928 141.95451355]
[137.46047974 155.23634338]
[144.43133545 168.51818848]
[151.40217590 181.80003357]
[158.37303162 195.08186340]
[171.70252991 197.61979675]
[180.96232605 207.26875305]
[182.89227295 220.30438232]
[177.00285339 231.87373352]
[183.56936646 245.36004639]
[190.13587952 258.84637451]
[196.70239258 272.33270264]
[203.26890564 285.81900024]
[217.15373230 294.54504395]
[216.26887512 310.92031860]
[201.52459717 318.09933472]
[188.08854675 308.69696045]
[189.78259277 292.38552856]
[183.21606445 278.89920044]
[176.64955139 265.41287231]
[170.08303833 251.92655945]
[163.51652527 238.44024658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[13 54]
[14 53]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[55 77]
[56 76]
[57 75]
[58 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
