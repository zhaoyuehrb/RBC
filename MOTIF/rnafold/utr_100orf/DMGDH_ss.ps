%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUGCCCGCUGGCCUCGGAGCAGGCGCCUGCGCCCUCGGCCUCGGCCUAGUCAUGCUCCGUCCCGGCGCGCAGCUGCUGCGGGGCCUCCUGCUGCGGAGCUGCCCGCUGCAGGGCUCCCCCGGGCGCCCGCGCUCUGUCUGCGGCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[72.41383362 118.39563751]
[68.37297821 106.54163361]
[53.37991333 106.08566284]
[38.38684464 105.62969208]
[23.39377594 105.17372894]
[8.40070724 104.71775818]
[-6.59236097 104.26179504]
[-20.62135315 111.57601929]
[-33.10754776 103.45541382]
[-48.10061264 102.99945068]
[-63.09368134 102.54347992]
[-78.08675385 102.08751678]
[-93.07981873 101.63154602]
[-108.07288361 101.17558289]
[-116.78218079 111.49600983]
[-129.66221619 114.84864044]
[-141.93315125 110.22171783]
[-149.17436218 99.52246857]
[-164.15510559 98.76273346]
[-179.13584900 98.00299072]
[-194.11660767 97.24325562]
[-209.09735107 96.48352051]
[-224.07809448 95.72378540]
[-239.05883789 94.96404266]
[-253.90812683 97.08509064]
[-268.07708740 102.00851440]
[-282.24606323 106.93194580]
[-296.41503906 111.85536957]
[-306.72378540 124.60928345]
[-322.87905884 121.79167938]
[-328.26171875 106.30107117]
[-317.33456421 94.07286835]
[-301.33847046 97.68639374]
[-287.16949463 92.76296997]
[-273.00051880 87.83953857]
[-258.83154297 82.91611481]
[-259.59127808 67.93536377]
[-274.18566895 64.47064972]
[-289.39984131 68.81114197]
[-299.99575806 58.34331131]
[-314.59014893 54.87859344]
[-329.18450928 51.41387939]
[-344.73294067 56.62716293]
[-356.84115601 45.56718445]
[-353.05325317 29.61149979]
[-337.26593018 25.17394829]
[-325.71978760 36.81950378]
[-311.12542725 40.28422165]
[-296.53103638 43.74893570]
[-282.36077881 39.16062546]
[-270.72094727 49.87627411]
[-256.12658691 53.34099197]
[-246.91629028 58.22884750]
[-240.77154541 65.19081879]
[-237.97544861 72.87497711]
[-238.29910278 79.98329926]
[-223.31835938 80.74303436]
[-208.33761597 81.50276947]
[-193.35685730 82.26251221]
[-178.37611389 83.02224731]
[-163.39537048 83.78198242]
[-148.41462708 84.54172516]
[-136.45989990 72.75054169]
[-119.33847809 73.23489380]
[-107.61692047 86.18251038]
[-92.62384796 86.63848114]
[-77.63078308 87.09444427]
[-62.63771439 87.55041504]
[-47.64464569 88.00637817]
[-32.65157700 88.46234894]
[-19.69499207 81.11550903]
[-6.13639355 89.26872253]
[8.85667515 89.72469330]
[23.84974289 90.18065643]
[38.84281158 90.63662720]
[53.83588028 91.09259796]
[68.82894897 91.54856110]
[74.06383514 79.34300232]
[83.97801971 69.99152374]
[97.12231445 65.24040222]
[111.41896057 66.13412476]
[124.48961639 72.80055237]
[134.05091858 84.38495636]
[146.44856262 75.94113922]
[158.84622192 67.49731445]
[171.24388123 59.05349731]
[183.64154053 50.60968018]
[196.03919983 42.16585922]
[199.29576111 36.30290985]
[204.28968811 33.43823624]
[209.11480713 33.64303207]
[221.84446716 25.70857239]
[234.57412720 17.77411270]
[247.30378723 9.83965206]
[254.92247009 -4.02635813]
[269.81616211 -4.19241142]
[282.54580688 -12.12687111]
[295.27548218 -20.06133080]
[308.00515747 -27.99579239]
[311.33306885 -43.44572449]
[324.65615845 -51.94696045]
[340.07003784 -48.45586395]
[348.42996216 -35.04364395]
[344.77609253 -19.66753387]
[331.27624512 -11.44990253]
[315.93960571 -15.26612759]
[303.20993042 -7.33166790]
[290.48028564 0.60279238]
[277.75061035 8.53725243]
[271.04244995 21.83573723]
[255.23825073 22.56931496]
[242.50859070 30.50377655]
[229.77893066 38.43823624]
[217.04925537 46.37269592]
[204.48301697 54.56351852]
[192.08535767 63.00733566]
[179.68769836 71.45115662]
[167.29003906 79.89497375]
[154.89239502 88.33879089]
[142.49473572 96.78261566]
[140.97720337 111.70565033]
[151.42135620 122.47225952]
[161.86550903 133.23886108]
[172.30964661 144.00546265]
[182.75379944 154.77206421]
[197.91616821 159.29016113]
[201.22424316 173.81275940]
[211.66839600 184.57937622]
[222.11253357 195.34597778]
[237.68409729 195.75141907]
[248.12257385 206.81906128]
[247.64009094 221.66166687]
[258.08422852 232.42826843]
[274.03903198 234.10885620]
[282.55093384 247.70764160]
[277.09036255 262.79278564]
[261.84619141 267.79226685]
[248.51245117 258.87091064]
[247.31762695 242.87242126]
[236.87347412 232.10581970]
[222.02307129 232.13690186]
[211.27784729 221.36680603]
[211.34593201 205.79011536]
[200.90177917 195.02351379]
[190.45764160 184.25691223]
[176.04229736 180.50891113]
[171.98719788 165.21621704]
[161.54304504 154.44961548]
[151.09890747 143.68301392]
[140.65475464 132.91641235]
[130.21060181 122.14980316]
[119.25443268 131.12583923]
[106.04009247 135.22509766]
[92.58110809 134.08035278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[25 36]
[26 35]
[27 34]
[28 33]
[37 52]
[38 51]
[40 49]
[41 48]
[42 47]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[88 115]
[91 114]
[92 113]
[93 112]
[94 111]
[96 109]
[97 108]
[98 107]
[99 106]
[121 151]
[122 150]
[123 149]
[124 148]
[125 147]
[127 145]
[128 144]
[129 143]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
