%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCUGUGGACCUUCCCAACCUGCUGAAGACCGGAGACGUGUACGCGCGCCCAAGAAGGGCUGGAAAGAGGAAUUCAAGGCUGAUGUCAGUGUGCCUC\
) } def
/len { sequence length } bind def

/coor [
[98.22140503 119.51351929]
[91.97237396 116.29774475]
[87.70931244 111.36611176]
[85.77609253 105.67382812]
[86.11422729 100.17732239]
[71.26092529 98.08459473]
[56.37688065 96.22311401]
[41.46568298 94.59333038]
[26.55448532 92.96354675]
[11.64328861 91.33376312]
[-2.91585898 97.52584076]
[-14.72710896 88.45149994]
[-29.63830566 86.82172394]
[-46.20773315 94.66398621]
[-60.01087570 83.95068359]
[-74.96554565 82.78542328]
[-89.92021942 81.62017059]
[-104.87488556 80.45491028]
[-113.08682251 91.64950562]
[-125.67709351 97.23786163]
[-139.27142334 95.84060669]
[-150.28486633 87.93493652]
[-155.86715698 75.69995880]
[-170.77835083 74.07017517]
[-184.13781738 82.95299530]
[-199.36747742 77.90952301]
[-204.78446960 62.80866623]
[-196.23332214 49.23451996]
[-180.27375793 47.60000229]
[-169.14857483 59.15897751]
[-154.23738098 60.78876114]
[-143.67935181 48.32553864]
[-127.62718201 44.51090622]
[-112.28710175 51.02083969]
[-103.70963287 65.50023651]
[-88.75495911 66.66549683]
[-73.80028534 67.83075714]
[-58.84561539 68.99600983]
[-49.34693909 61.32834625]
[-36.77323532 62.29092407]
[-28.00852394 71.91052246]
[-13.09732723 73.54030609]
[0.39527181 67.23165894]
[13.27307034 76.42256927]
[28.18426704 78.05235291]
[43.09546661 79.68213654]
[58.00666428 81.31191254]
[65.12319946 78.86642456]
[73.35366058 83.23129272]
[88.20695496 85.32402802]
[101.27439880 77.95911407]
[107.17590332 64.16882324]
[113.07740784 50.37852478]
[118.97891235 36.58823013]
[114.37155914 21.22099495]
[123.63154602 8.12014675]
[139.65539551 7.33553362]
[150.15100098 19.46904373]
[147.06700134 35.21288681]
[132.76921082 42.48973083]
[126.86770630 56.28002930]
[120.96620178 70.07032013]
[115.06469727 83.86061859]
[124.03620148 71.83929443]
[138.75279236 68.93728638]
[151.61628723 76.65290070]
[155.98521423 91.00255585]
[149.60389709 104.57748413]
[135.76701355 110.36892700]
[121.61702728 105.38541412]
[134.20132446 113.54847717]
[146.78561401 121.71154022]
[159.36990356 129.87460327]
[164.12687683 129.91545105]
[168.15133667 131.42070007]
[171.05087280 133.94412231]
[172.63417053 136.95446777]
[172.92094421 139.91453552]
[184.39494324 149.57620239]
[197.40518188 149.27510071]
[206.78265381 157.70645142]
[207.79386902 169.87178040]
[218.96183777 179.88560486]
[230.12979126 189.89942932]
[241.29776001 199.91325378]
[257.44824219 202.75822449]
[262.80465698 218.25793457]
[251.85678101 230.46760559]
[235.86685181 226.82696533]
[231.28393555 211.08120728]
[220.11596680 201.06739807]
[208.94801331 191.05357361]
[197.78004456 181.03974915]
[180.49998474 178.45111084]
[174.73327637 161.05018616]
[163.25929260 151.38853455]
[151.20684814 142.45889282]
[138.62254333 134.29583740]
[126.03825378 126.13277435]
[113.45396423 117.96971130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 50]
[6 49]
[7 47]
[8 46]
[9 45]
[10 44]
[12 42]
[13 41]
[15 38]
[16 37]
[17 36]
[18 35]
[23 31]
[24 30]
[51 63]
[52 62]
[53 61]
[54 60]
[70 100]
[71 99]
[72 98]
[73 97]
[78 96]
[79 95]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
