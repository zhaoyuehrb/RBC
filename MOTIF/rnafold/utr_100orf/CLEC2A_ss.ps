%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAAAGCUUUCUAGUCCUCUCCUACUGAUCUCCAUCGGUUAGCGCCUUGCCAUGAUUAAUCCAGAGCUGCGGGAUGGCAGAGCUGAUGGCUUCAUACAUCGGAUAGUUCCCAAGUUGAUACAAAACUGGAAGAUUGGCCUUAUGUGCUUCC\
) } def
/len { sequence length } bind def

/coor [
[132.03488159 433.67886353]
[117.58216858 427.70782471]
[110.39473724 413.81988525]
[113.86627197 398.57250977]
[126.35760498 389.16503906]
[126.97343445 374.17770386]
[127.58925629 359.19033813]
[128.20507812 344.20297241]
[114.99521637 337.27731323]
[106.06558990 325.25354004]
[103.23034668 310.48455811]
[107.10444641 295.88964844]
[116.97126007 284.37734985]
[130.91441345 278.26589966]
[131.53024292 263.27856445]
[124.32198334 250.24436951]
[132.61932373 236.77348328]
[133.23515320 221.78613281]
[133.54312134 206.78929138]
[133.54312134 191.78929138]
[133.54312134 176.78929138]
[133.38912964 161.79008484]
[133.08116150 146.79324341]
[100.46840668 149.96551514]
[76.04806519 135.26441956]
[67.07341766 112.70097351]
[52.25093460 115.00184631]
[37.42845154 117.30271912]
[22.60597038 119.60359955]
[7.78348780 121.90447235]
[-7.03899431 124.20534515]
[-16.16437340 137.10894775]
[-31.75512314 139.69818115]
[-44.56152725 130.43688965]
[-46.98577118 114.81963348]
[-37.58959961 102.11185455]
[-21.94758987 99.85285950]
[-9.33986950 109.38286591]
[5.48261261 107.08199310]
[20.30509567 104.78111267]
[35.12757874 102.48023987]
[49.95005798 100.17936707]
[64.77254486 97.87849426]
[68.40853882 84.26932526]
[77.07771301 73.16637421]
[69.98130798 59.95119095]
[56.63587952 51.45354080]
[57.43134689 36.58019257]
[50.33494186 23.36500740]
[43.23854065 10.14982510]
[36.14213562 -3.06535792]
[29.04573250 -16.28054047]
[21.94932938 -29.49572372]
[14.85292625 -42.71090698]
[9.12004471 -28.84966278]
[-4.66120577 -22.92706680]
[-18.66317558 -28.30710793]
[-24.93284798 -41.93396378]
[-19.90909767 -56.06768036]
[-6.44537497 -62.68040848]
[7.81162024 -58.01566315]
[2.39299536 -72.00274658]
[-3.02562952 -85.98983002]
[-18.06015968 -89.82942963]
[-27.94055557 -101.79427338]
[-28.86760139 -117.28363037]
[-20.48482895 -130.34152222]
[-6.01558781 -135.94694519]
[8.97640610 -131.94447327]
[18.72642326 -119.87315369]
[19.48538589 -104.37464905]
[10.96145344 -91.40845490]
[16.38007927 -77.42137146]
[21.79870415 -63.43428802]
[28.06810951 -49.80730820]
[35.16451263 -36.59212875]
[42.26091385 -23.37694359]
[49.35731888 -10.16176128]
[56.45372391 3.05342174]
[63.55012512 16.26860428]
[70.64653015 29.48378754]
[83.48437500 37.03620148]
[83.19649506 52.85478973]
[90.29289246 66.06996918]
[109.94258118 54.78157043]
[137.41989136 56.59813309]
[147.06170654 45.10746384]
[156.70352173 33.61679840]
[166.34533691 22.12613297]
[162.46089172 7.10312605]
[168.17991638 -7.32158613]
[181.30334473 -15.60140800]
[196.78492737 -14.55257797]
[208.67169189 -4.57839441]
[212.39294434 10.48586655]
[206.51776123 24.84768867]
[193.30529785 32.98466110]
[177.83599854 31.76794624]
[168.19418335 43.25861359]
[158.55236816 54.74927902]
[148.91055298 66.23994446]
[157.45101929 78.57122803]
[171.59832764 73.58590698]
[185.74565125 68.60058594]
[195.99851990 55.80173492]
[212.16596985 58.54868698]
[217.61630249 74.01561737]
[206.74269104 86.29147339]
[190.73097229 82.74790192]
[176.58364868 87.73322296]
[162.43634033 92.71854401]
[162.74424744 100.21222687]
[163.36007690 115.19957733]
[163.66798401 122.69325256]
[178.17662048 126.50111389]
[192.68524170 130.30897522]
[207.19386292 134.11683655]
[219.85182190 124.93476868]
[235.44676208 126.08884430]
[246.61523438 137.03413391]
[248.08381653 152.60260010]
[239.15910339 165.44329834]
[224.05506897 169.49324036]
[209.90336609 162.84016418]
[203.38600159 148.62545776]
[188.87738037 144.81759644]
[174.36875916 141.00973511]
[159.86012268 137.20187378]
[148.07798767 146.48526001]
[148.38597107 161.48210144]
[151.70768738 170.05892944]
[148.54312134 176.78929138]
[148.54312134 191.78929138]
[148.54312134 206.78929138]
[151.55786133 212.78546143]
[151.11215210 218.52908325]
[148.22250366 222.40194702]
[147.60667419 237.38931274]
[154.77088928 251.49549866]
[146.51759338 263.89437866]
[145.90176392 278.88174438]
[159.29653931 286.11648560]
[168.18560791 298.39944458]
[170.84927368 313.26300049]
[166.81192017 327.74957275]
[156.92596436 339.00024414]
[143.19242859 344.81881714]
[142.57661438 359.80615234]
[141.96078491 374.79351807]
[141.34495544 389.78085327]
[153.02239990 400.18142700]
[155.23130798 415.66220093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 150]
[6 149]
[7 148]
[8 147]
[14 141]
[15 140]
[17 138]
[18 137]
[19 134]
[20 133]
[21 132]
[22 130]
[23 129]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[45 84]
[46 83]
[48 81]
[49 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[61 74]
[62 73]
[63 72]
[86 101]
[87 100]
[88 99]
[89 98]
[102 111]
[103 110]
[104 109]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
