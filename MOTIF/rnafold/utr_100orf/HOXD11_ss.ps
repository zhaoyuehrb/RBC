%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACGACUUUGACGAGUGCGGCCAGAGCGCAGCCAGCAUGUACCUGCCGGGCUGCGCCUACUAUGUGGCCCCGUCUGACUUCGCUAGCAAGCCUUCGU\
) } def
/len { sequence length } bind def

/coor [
[100.05400848 215.78923035]
[84.87073517 220.97071838]
[71.43121338 212.20950317]
[70.04508972 196.22645569]
[81.77568817 185.28237915]
[83.63716888 170.39833069]
[85.49864960 155.51428223]
[87.36013031 140.63023376]
[70.50936890 130.67384338]
[59.89815140 114.22756958]
[57.77157211 94.77106476]
[64.57955933 76.42088318]
[78.88171387 63.05950928]
[73.84896088 48.92899323]
[68.81620789 34.79848099]
[63.78346252 20.66796684]
[55.32425308 18.45550728]
[48.57269287 13.05073833]
[44.64973068 5.45036602]
[44.16595459 -2.99354291]
[47.12773514 -10.81390381]
[52.94947815 -16.68350410]
[49.70920944 -31.32934570]
[46.46894455 -45.97518539]
[43.22867584 -60.62102890]
[39.98840714 -75.26686859]
[20.00956917 -85.24845886]
[13.44294167 -106.32173920]
[23.96359444 -125.42862701]
[18.06208992 -139.21891785]
[12.16058731 -153.00921631]
[6.25908327 -166.79951477]
[0.35757926 -180.58981323]
[-5.54392481 -194.38011169]
[-11.44542885 -208.17039490]
[-17.34693146 -221.96069336]
[-32.31431198 -232.54486084]
[-29.75854301 -249.82981873]
[-36.08606720 -263.42990112]
[-42.41359329 -277.02999878]
[-57.34415054 -282.21209717]
[-64.16207886 -296.47012329]
[-58.82242203 -311.34503174]
[-44.49310684 -318.01184082]
[-29.67545891 -312.51522827]
[-23.16052628 -298.11621094]
[-28.81350327 -283.35751343]
[-22.48597908 -269.75741577]
[-16.15845299 -256.15734863]
[-4.81487322 -251.64721680]
[0.52017981 -240.22085571]
[-3.55663681 -227.86219788]
[2.34486723 -214.07189941]
[8.24637127 -200.28161621]
[14.14787483 -186.49131775]
[20.04937935 -172.70101929]
[25.95088196 -158.91072083]
[31.85238647 -145.12042236]
[37.75389099 -131.33013916]
[46.30955887 -131.22483826]
[54.45795441 -128.50428772]
[61.41598129 -123.40791321]
[66.50826263 -116.40449524]
[69.23265076 -108.14913177]
[69.30970001 -99.42193604]
[66.71118164 -91.05434418]
[61.66477966 -83.84991455]
[54.63425064 -78.50713348]
[57.87451553 -63.86129379]
[61.11478424 -49.21545410]
[64.35504913 -34.56961441]
[67.59532166 -19.92377090]
[83.94124603 -5.84569216]
[77.91397095 15.63521671]
[82.94672394 29.76572990]
[87.97947693 43.89624405]
[93.01222229 58.02676010]
[105.80185699 57.84646606]
[118.06721497 61.47523117]
[128.69999695 68.58515930]
[136.73939514 78.53378296]
[141.45896912 90.42212677]
[142.43225098 103.17594147]
[139.57127380 115.64277649]
[133.13458252 126.69610596]
[142.97351074 138.01844788]
[152.81243896 149.34078979]
[168.48501587 154.16802979]
[171.87652588 170.21264648]
[159.49807739 180.96931458]
[144.08354187 175.37249756]
[141.49008179 159.17971802]
[131.65115356 147.85737610]
[121.81223297 136.53503418]
[115.64091492 139.57200623]
[109.06092072 141.57501221]
[102.24417877 142.49171448]
[100.38269806 157.37576294]
[98.52121735 172.25981140]
[96.65973663 187.14385986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[13 77]
[14 76]
[15 75]
[16 74]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[38 49]
[39 48]
[40 47]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
