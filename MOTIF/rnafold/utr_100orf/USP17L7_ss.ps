%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGACGACUCACUCUAUUUGGGAGGUGACUGGCAGUUCAAUCACUUUUCAAAACUCACAUCUUCUCGGCUAGAUGCAGCUUUUGCUGAAAUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[84.15151215 202.76887512]
[92.37799835 188.58236694]
[91.91149902 173.58961487]
[91.44499969 158.59687805]
[90.97850037 143.60412598]
[77.01134491 138.13435364]
[66.48754120 148.82312012]
[55.96373749 159.51187134]
[58.64299011 174.79589844]
[51.79660034 188.72093201]
[38.05714798 195.93252563]
[22.70772934 193.65766907]
[11.65051079 182.77108765]
[9.13721752 167.45890808]
[16.13426399 153.60896301]
[29.95113945 146.54684448]
[45.27497864 148.98806763]
[55.79877853 138.29931641]
[66.32258606 127.61055756]
[59.24963379 101.24688721]
[69.20386505 77.75516510]
[59.01757431 66.74428558]
[48.83128357 55.73340607]
[38.64498901 44.72252655]
[28.45869637 33.71165085]
[18.27240372 22.70077133]
[8.08611012 11.68989372]
[-2.10018301 0.67901623]
[-12.28647614 -10.33186150]
[-22.47276878 -21.34273911]
[-32.65906143 -32.35361862]
[-42.84535599 -43.36449432]
[-57.89649200 -48.24033737]
[-60.85977554 -62.83719254]
[-71.04606628 -73.84806824]
[-81.23236084 -84.85894775]
[-97.04749298 -89.19643402]
[-100.93634796 -105.12781525]
[-88.89841461 -116.26424408]
[-73.31728363 -111.14952850]
[-70.22148895 -95.04524231]
[-60.03519058 -84.03436279]
[-49.84889984 -73.02348328]
[-35.52635193 -68.93521881]
[-31.83447838 -53.55078888]
[-21.64818382 -42.53990936]
[-11.46189117 -31.52903366]
[-1.27559817 -20.51815414]
[8.91069508 -9.50727654]
[19.09698868 1.50360107]
[29.28328133 12.51447868]
[39.46957397 23.52535629]
[49.65586853 34.53623581]
[59.84215927 45.54711151]
[70.02845001 56.55799103]
[80.21474457 67.56887054]
[90.18479919 62.37456894]
[101.48869324 60.24861526]
[113.18180084 61.52133560]
[124.24257660 66.23249817]
[133.66169739 74.11532593]
[140.53379822 84.60782623]
[154.74087524 79.79544067]
[168.94793701 74.98304749]
[183.15501404 70.17066193]
[197.36209106 65.35827637]
[201.84439087 50.50268555]
[214.22288513 41.14572906]
[229.73777771 40.88534546]
[242.42327881 49.82165909]
[247.40155029 64.51847076]
[242.75836182 79.32456207]
[230.27908325 88.54669189]
[214.76228333 88.63874817]
[202.17446899 79.56535339]
[187.96740723 84.37773895]
[173.76033020 89.19012451]
[159.55325317 94.00251007]
[145.34617615 98.81489563]
[143.25344849 113.66819763]
[155.57778931 122.21868134]
[167.90211487 130.76916504]
[180.22645569 139.31964111]
[196.60514832 140.13836670]
[203.84365845 154.85354614]
[194.49560547 168.32743835]
[178.17749023 166.69929504]
[171.67597961 151.64398193]
[159.35163879 143.09350586]
[147.02729797 134.54301453]
[134.70297241 125.99253082]
[128.95687866 132.33497620]
[122.06988525 137.43154907]
[114.30783081 141.08088684]
[105.97124481 143.13763428]
[106.43774414 158.13037109]
[106.90424347 173.12312317]
[107.37074280 188.11585999]
[116.46327972 201.76348877]
[108.94883728 216.33967590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 95]
[6 19]
[7 18]
[8 17]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[34 43]
[35 42]
[36 41]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
