%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCUUCUCACUCACGUUCACCGAGCUGGCCAACAUCGCCAUCCCACAGUGCGGGGUGCUGAACUUCAAGGCCCUGCACCUCCUGCUGCACGGCAUCU\
) } def
/len { sequence length } bind def

/coor [
[54.54637527 210.50491333]
[52.73166275 195.61376953]
[42.54537201 206.62464905]
[32.35907745 217.63551331]
[22.17278481 228.64639282]
[11.98649120 239.65727234]
[17.16455841 254.06027222]
[15.04461670 269.21826172]
[6.11381674 281.64804077]
[-7.57561064 288.49334717]
[-22.87793541 288.18115234]
[-36.27679443 280.78323364]
[-44.69322968 267.99957275]
[-46.19320297 252.76774597]
[-40.43203354 238.58792114]
[-28.73359680 228.71850586]
[-13.78610611 225.42744446]
[0.97561365 229.47097778]
[11.16190720 218.46009827]
[21.34819984 207.44923401]
[31.53449249 196.43835449]
[41.72078705 185.42747498]
[50.65041733 173.37501526]
[58.21766281 160.42369080]
[65.78490448 147.47236633]
[65.52503967 132.58003235]
[79.16754913 124.56799316]
[86.73478699 111.61666870]
[83.95157623 96.87713623]
[72.18265533 87.57699585]
[60.41374588 78.27685547]
[48.64482880 68.97670746]
[33.36888504 72.32028198]
[19.54169273 65.01667023]
[13.69202900 50.51441574]
[18.58192825 35.66103745]
[31.90252876 27.46984673]
[47.36425018 29.80847359]
[57.66654205 41.57269287]
[57.94497299 57.20779800]
[69.71389008 66.50794220]
[81.48280334 75.80808258]
[93.25171661 85.10822296]
[83.54549408 73.67191315]
[82.87071228 58.68709946]
[91.50975800 46.42468262]
[105.84732819 42.01628876]
[119.88339233 47.30675125]
[127.74407196 60.08210754]
[126.13980865 74.99607086]
[115.74082947 85.80797577]
[128.06517029 77.25749207]
[140.38949585 68.70700836]
[152.71383667 60.15652084]
[165.03817749 51.60603714]
[177.36250305 43.05555344]
[189.68684387 34.50506973]
[202.01116943 25.95458603]
[214.33551025 17.40410233]
[217.27249146 2.10665345]
[229.89291382 -6.38918829]
[244.45860291 -3.49495649]
[256.78292847 -12.04544067]
[269.10726929 -20.59592438]
[278.67443848 -34.59254837]
[294.77252197 -29.27391243]
[294.11813354 -12.33259869]
[277.65774536 -8.27158928]
[265.33340454 0.27889439]
[253.00907898 8.82937813]
[250.62028503 23.48643303]
[238.24346924 32.33340454]
[222.88598633 29.72843552]
[210.56166077 38.27891922]
[198.23731995 46.82940292]
[185.91299438 55.37988663]
[173.58865356 63.93037033]
[161.26431274 72.48085785]
[148.93998718 81.03134155]
[136.61564636 89.58182526]
[124.29131317 98.13230896]
[138.97395325 101.20150757]
[149.81524658 111.56812286]
[153.53828430 126.09873962]
[149.01777649 140.40136719]
[137.62007141 150.15289307]
[122.79022217 152.40583801]
[109.01069641 146.47923279]
[100.44647217 134.16444397]
[99.68611145 119.18391418]
[92.11887360 132.13523865]
[91.83747101 147.95393372]
[78.73622894 155.03961182]
[71.16899109 167.99093628]
[63.60174561 180.94226074]
[78.37457275 178.34156799]
[91.49125671 185.61840820]
[97.10417175 199.52867126]
[92.71098328 213.87091064]
[80.27024841 222.25112915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[23 95]
[24 94]
[25 93]
[27 91]
[28 90]
[29 43]
[30 42]
[31 41]
[32 40]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
