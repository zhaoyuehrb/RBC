%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGACGCCUCGCUCCGACAUGCCCCGCUCUGGCGGCCGGGCUCGCGGAGGAUCAUGACUGCGGCAGCGAACUGGGUGGCGAACGGGGCGAGCCUGGAGGAUUGUCACUCCAACCUCUUUUCGCUGGCUGAACUCACGGGAAUCAAAUGGCGUA\
) } def
/len { sequence length } bind def

/coor [
[85.15049744 138.38446045]
[77.73587799 139.51293945]
[71.57968903 153.19143677]
[65.42349243 166.86993408]
[59.26730347 180.54843140]
[53.11111069 194.22692871]
[52.43245697 203.39501953]
[46.69076157 208.11694336]
[40.26037216 221.66870117]
[38.93282318 238.57060242]
[22.32396126 241.97383118]
[14.45592976 226.95616150]
[26.70861626 215.23831177]
[33.13900375 201.68655396]
[39.43261337 188.07073975]
[45.58880615 174.39224243]
[51.74499893 160.71374512]
[57.90119171 147.03524780]
[64.05738068 133.35675049]
[63.11244583 114.36217499]
[69.86683655 99.83374786]
[80.81092072 92.28382874]
[91.85261536 92.26969910]
[80.42692566 82.55096436]
[69.00124359 72.83223724]
[57.57555771 63.11350250]
[46.14987564 53.39477158]
[34.72418976 43.67604065]
[19.19931221 40.62829590]
[14.51790905 26.48850250]
[3.09222460 16.76977158]
[-3.42159605 15.18275642]
[-7.50594711 11.12775993]
[-8.58762074 6.42233181]
[-19.61270523 -3.74858332]
[-35.00226974 -7.41898251]
[-39.11052704 -21.73580933]
[-50.13561249 -31.90672302]
[-61.16069412 -42.07763672]
[-76.55026245 -45.74803925]
[-80.65851593 -60.06486511]
[-91.68360138 -70.23577881]
[-107.07316589 -73.90618134]
[-111.18141937 -88.22300720]
[-122.20650482 -98.39392090]
[-133.23159790 -108.56483459]
[-144.65727234 -118.28356171]
[-156.46502686 -127.53434753]
[-172.10003662 -129.95449829]
[-177.34700012 -143.89431763]
[-189.15473938 -153.14511108]
[-204.03894043 -148.75871277]
[-218.64744568 -153.99046326]
[-227.36299133 -166.82864380]
[-226.83428955 -182.33670044]
[-217.26460266 -194.55148315]
[-202.33370972 -198.77615356]
[-187.78282166 -193.38624573]
[-179.20704651 -180.45426941]
[-179.90396118 -164.95286560]
[-168.09620667 -155.70207214]
[-153.30577087 -153.94360352]
[-147.21424866 -139.34210205]
[-135.40649414 -130.09132385]
[-132.55879211 -130.33207703]
[-129.44221497 -129.42634583]
[-126.50539398 -127.26510620]
[-124.22820282 -123.90814209]
[-123.06067657 -119.58992004]
[-112.03559113 -109.41900635]
[-101.01050568 -99.24808502]
[-86.40953064 -96.30518341]
[-81.51268768 -81.26086426]
[-70.48760223 -71.08995056]
[-55.88662338 -68.14704132]
[-50.98978043 -53.10272217]
[-39.96469498 -42.93180847]
[-28.93961143 -32.76089478]
[-14.33863354 -29.81798553]
[-9.44179058 -14.77366829]
[1.58329427 -4.60275316]
[12.81095505 5.34408712]
[24.23664093 15.06281757]
[38.94427490 17.41541672]
[44.44292068 32.25035858]
[55.86860657 41.96908951]
[67.29428864 51.68782043]
[78.71997833 61.40655136]
[90.14566040 71.12528229]
[101.57134247 80.84400940]
[116.49536896 82.35184479]
[129.63414001 75.11495209]
[142.77291870 67.87805939]
[147.26844788 52.96403885]
[160.69612122 45.81196976]
[174.88665771 50.18967819]
[188.02543640 42.95278931]
[201.16419983 35.71589661]
[214.30297852 28.47900581]
[227.44175720 21.24211502]
[229.24046326 5.82964373]
[239.77961731 -5.55920982]
[255.00668335 -8.54520035]
[269.06655884 -1.98015261]
[276.55291748 11.61153793]
[274.58709717 27.00358963]
[263.92501831 38.27744293]
[248.66647339 41.09807205]
[234.67864990 34.38088989]
[221.53987122 41.61777878]
[208.40109253 48.85467148]
[195.26232910 56.09156418]
[182.12355042 63.32845306]
[178.23918152 77.66188812]
[165.01770020 85.18829346]
[150.00981140 81.01683807]
[136.87103271 88.25372314]
[123.73225403 95.49061584]
[122.45469666 102.88100433]
[137.23542786 105.43637848]
[134.67980957 120.21707153]
[119.89956665 117.66178131]
[118.62200165 125.05216980]
[128.56884766 136.27983093]
[138.51568604 147.50749207]
[148.46252441 158.73515320]
[158.40936279 169.96281433]
[173.94668579 171.07165527]
[183.87425232 182.59979248]
[182.72138977 197.40541077]
[192.66822815 208.63307190]
[202.61506653 219.86073303]
[215.45526123 221.42929077]
[223.50843811 231.03388977]
[222.85607910 243.14880371]
[232.57481384 254.57449341]
[248.19549561 259.56707764]
[251.41728210 275.64663696]
[238.92584229 286.27191162]
[223.57131958 280.51251221]
[221.14912415 264.29321289]
[211.43038940 252.86753845]
[194.62216187 247.90843201]
[191.38740540 229.80758667]
[181.44056702 218.57992554]
[171.49372864 207.35226440]
[156.65708923 206.71209717]
[146.40963745 195.46734619]
[147.18170166 179.90965271]
[137.23486328 168.68199158]
[127.28802490 157.45433044]
[117.34117889 146.22666931]
[107.39434052 134.99900818]
[99.97972870 136.12748718]
[102.23646545 150.95675659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[8 14]
[9 13]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[30 83]
[31 82]
[34 81]
[35 80]
[37 78]
[38 77]
[39 76]
[41 74]
[42 73]
[44 71]
[45 70]
[46 69]
[47 64]
[48 63]
[50 61]
[51 60]
[91 118]
[92 117]
[93 116]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[123 153]
[124 152]
[125 151]
[126 150]
[127 149]
[130 146]
[131 145]
[132 144]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
