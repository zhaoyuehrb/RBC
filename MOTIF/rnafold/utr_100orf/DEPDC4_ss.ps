%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUGGUGCCAGGGGAGGAGCCAGCGCGCGAGCUUAUGGCGGUUCUUUUGACUCCGAGGUUCCGUAGACUUGUCAGUCAGAACGAGCUUCCGGGCCCAGGGC\
) } def
/len { sequence length } bind def

/coor [
[95.86246490 310.17266846]
[95.86246490 295.17266846]
[95.86246490 280.17266846]
[88.12516785 267.44537354]
[95.86246490 253.64521790]
[95.86246490 238.64521790]
[95.86246490 223.64521790]
[92.66160583 216.84320068]
[96.09585571 208.19387817]
[96.54890442 193.20072937]
[97.00195312 178.20756531]
[89.65258026 165.25241089]
[97.80316162 151.69223022]
[98.25620270 136.69906616]
[98.70925140 121.70590973]
[92.23907471 135.23872375]
[77.88385010 139.58929443]
[64.98960876 131.92518616]
[61.95121384 117.23612976]
[70.74681854 105.08552551]
[85.64958191 103.38392639]
[71.32876587 98.92137909]
[57.00795746 94.45883942]
[42.68714142 89.99629211]
[27.44208527 98.41037750]
[11.12402153 93.37477875]
[3.57438684 78.43179321]
[-10.87467480 74.40381622]
[-26.61354828 79.01032257]
[-38.28383255 67.48918915]
[-33.88013840 51.69237137]
[-17.93260956 47.87027740]
[-6.84669733 59.95475388]
[7.60236502 63.98273468]
[17.92060852 56.10434723]
[31.09059525 55.65293884]
[42.25062180 63.02179337]
[47.14968872 75.67547607]
[61.47050095 80.13802338]
[75.79131317 84.60057068]
[90.11212921 89.06311798]
[104.72881317 85.69375610]
[115.65092468 75.41234589]
[126.57303619 65.13093567]
[137.49514771 54.84952164]
[148.41726685 44.56811142]
[159.18286133 34.12291336]
[169.78945923 23.51630974]
[180.39605713 12.90970898]
[191.00265503 2.30310678]
[201.60926819 -8.30349445]
[212.21586609 -18.91009712]
[222.82246399 -29.51669884]
[233.42906189 -40.12329865]
[231.14915466 -55.35839844]
[238.19497681 -68.85691071]
[251.67868042 -75.53923798]
[266.33624268 -73.03048706]
[276.94284058 -83.63708496]
[287.54946899 -94.24369049]
[298.15606689 -104.85028839]
[308.76266479 -115.45689392]
[310.20053101 -131.43537903]
[323.66836548 -140.15303040]
[338.83477783 -134.92239380]
[344.06539917 -119.75598145]
[335.34774780 -106.28816223]
[319.36926270 -104.85028839]
[308.76266479 -94.24369049]
[298.15606689 -83.63708496]
[287.54946899 -73.03048706]
[276.94284058 -62.42388535]
[279.45159912 -47.76631927]
[272.76928711 -34.28260422]
[259.27075195 -27.23679352]
[244.03567505 -29.51669884]
[233.42906189 -18.91009712]
[222.82246399 -8.30349445]
[212.21586609 2.30310678]
[201.60926819 12.90970898]
[191.00265503 23.51630974]
[180.39605713 34.12291336]
[169.78945923 44.72951508]
[167.24305725 51.80261993]
[158.69868469 55.49022293]
[147.77656555 65.77163696]
[136.85444641 76.05304718]
[125.93233490 86.33445740]
[115.01022339 96.61586761]
[113.70240784 122.15895844]
[113.24935913 137.15211487]
[112.79631805 152.14526367]
[120.11328125 166.17283630]
[111.99510956 178.66061401]
[111.54206085 193.65376282]
[111.08901215 208.64692688]
[110.86246490 223.64521790]
[110.86246490 238.64521790]
[110.86246490 253.64521790]
[118.59976959 267.44537354]
[110.86246490 280.17266846]
[110.86246490 295.17266846]
[110.86246490 310.17266846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[5 99]
[6 98]
[7 97]
[9 96]
[10 95]
[11 94]
[13 92]
[14 91]
[15 90]
[21 41]
[22 40]
[23 39]
[24 38]
[27 34]
[28 33]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[47 83]
[48 82]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
