%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCUGUGCUACUGGAAGGUGGCGUGCCCUCCUCUGGCUGGUACCAUGCAGCUCCCACUGGCCCUGUGUCUCGUCUGCCUGCUGGUACACACAGCCUUCCGUGUAGUGGAGGGCCAGGGGUGGCAGGCGUUCAAGAAUGAUGCCA\
) } def
/len { sequence length } bind def

/coor [
[90.94712067 144.35351562]
[96.70811462 158.20309448]
[90.22420502 171.72932434]
[75.81921387 175.91218567]
[63.09917450 167.96229553]
[60.54649734 153.18110657]
[69.86284637 141.42579651]
[73.47126770 126.86629486]
[77.07968903 112.30678558]
[69.65097046 111.27524567]
[59.50408173 122.32244873]
[49.35719299 133.36964417]
[39.21030426 144.41685486]
[29.06341553 155.46405029]
[18.91652870 166.51126099]
[15.87828827 182.62649536]
[0.31552947 187.79685974]
[-11.76211643 176.70350647]
[-7.93020248 160.75833130]
[7.86932659 156.36436462]
[18.01621437 145.31716919]
[28.16310310 134.26995850]
[38.30998993 123.22276306]
[48.45687866 112.17556000]
[58.60376740 101.12835693]
[77.86811066 87.63626099]
[95.34622955 91.95882416]
[97.25149536 77.08032227]
[99.15676880 62.20181274]
[101.06203461 47.32330704]
[93.78818512 36.61709976]
[95.72562408 24.22601128]
[105.28815460 16.74702072]
[107.50879669 1.91230619]
[109.72943878 -12.92240810]
[111.95008087 -27.75712395]
[114.17071533 -42.59183884]
[116.39135742 -57.42655182]
[118.61199951 -72.26126862]
[120.83263397 -87.09597778]
[109.02274323 -117.47280884]
[104.63040161 -131.81530762]
[100.08608246 -146.11038208]
[95.39031219 -160.35643005]
[90.69453430 -174.60246277]
[85.99875641 -188.84851074]
[81.30297852 -203.09454346]
[76.60720062 -217.34059143]
[70.91040039 -224.57144165]
[71.96642303 -231.93910217]
[67.57408142 -246.28160095]
[63.18173981 -260.62411499]
[58.78939819 -274.96661377]
[43.67761230 -275.26876831]
[29.41842651 -280.22036743]
[17.40416145 -289.32452393]
[8.80381107 -301.67965698]
[4.44930696 -316.06857300]
[4.75505447 -331.07846069]
[9.67852974 -345.23968506]
[18.72567558 -357.16943359]
[31.00044823 -365.70706177]
[26.60810661 -380.04956055]
[22.21576500 -394.39205933]
[8.77850151 -403.15673828]
[7.39649773 -419.14013672]
[19.12990952 -430.08120728]
[34.97786713 -427.58685303]
[42.78317261 -413.57055664]
[36.55826569 -398.78439331]
[40.95060730 -384.44189453]
[45.34294891 -370.09939575]
[60.29356766 -369.89947510]
[74.46958160 -365.08169556]
[86.47864532 -356.10604858]
[95.13713074 -343.84140015]
[99.58681488 -329.48162842]
[99.37989807 -314.42932129]
[94.52406311 -300.15875244]
[85.48294830 -288.07153320]
[73.13189697 -279.35894775]
[77.52423859 -265.01644897]
[81.91658020 -250.67393494]
[86.30892181 -236.33143616]
[90.85324097 -222.03636169]
[95.54901886 -207.79032898]
[100.24479675 -193.54428101]
[104.94057465 -179.29824829]
[109.63635254 -165.05220032]
[114.33212280 -150.80616760]
[119.44863892 -145.40071106]
[118.97290039 -136.20764160]
[123.36524200 -121.86515045]
[126.27561951 -136.58009338]
[139.95704651 -142.72976685]
[152.89405823 -135.13807678]
[154.19773865 -120.19483948]
[142.77072144 -110.47755432]
[157.43405151 -113.63774872]
[172.09738159 -116.79793549]
[186.76071167 -119.95812225]
[201.42404175 -123.11831665]
[216.08737183 -126.27850342]
[225.96002197 -138.92405701]
[242.00306702 -138.94560242]
[251.90963745 -126.32659149]
[248.08027649 -110.74726105]
[233.45252991 -104.15873718]
[219.24755859 -111.61517334]
[204.58422852 -108.45498657]
[189.92089844 -105.29479980]
[175.25756836 -102.13460541]
[160.59423828 -98.97441864]
[145.93092346 -95.81423187]
[135.66735840 -84.87534332]
[133.44671631 -70.04062653]
[131.22607422 -55.20591354]
[129.00543213 -40.37119675]
[126.78479004 -25.53648376]
[124.56415558 -10.70176792]
[122.34351349 4.13294649]
[120.12287140 18.96766090]
[127.43865204 34.88652039]
[115.94053650 49.22857285]
[114.03527069 64.10707855]
[112.13000488 78.98558807]
[110.22473907 93.86408997]
[112.75975037 108.64833069]
[119.51280975 122.04222107]
[126.26586151 135.43611145]
[133.01892090 148.83000183]
[139.77197266 162.22387695]
[146.47648621 168.53169250]
[146.52281189 175.97450256]
[152.99006653 189.50871277]
[166.81039429 198.33653259]
[165.80523682 214.70484924]
[151.00860596 221.77532959]
[137.64201355 212.27447510]
[139.45585632 195.97595215]
[132.98861694 182.44174194]
[126.37808990 168.97694397]
[119.62503052 155.58305359]
[112.87197113 142.18916321]
[106.11891937 128.79527283]
[99.36585999 115.40139008]
[91.93714142 114.36985016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[27 127]
[28 126]
[29 125]
[30 124]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 93]
[42 92]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[50 84]
[51 83]
[52 82]
[53 81]
[62 72]
[63 71]
[64 70]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[128 146]
[129 145]
[130 144]
[131 143]
[132 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
