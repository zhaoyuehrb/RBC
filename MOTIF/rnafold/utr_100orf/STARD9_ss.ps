%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCCUGGGAUGCUGCCGCUGAGCUGACCCGCUGGACUUGGGUUGUGGCAGACGGAUGGCGAACGUGCAGGUCGCCGUGCGGGUCCGGCCGCUCAGCAAGAGGGAGACCAAAGAAGGGGGAAGAAUUAUUGUGGAAGUUGAUGGCAAAGUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[178.48860168 138.60227966]
[172.65663147 132.59179688]
[169.67288208 124.66558838]
[155.09783936 121.12042236]
[140.52279663 117.57525635]
[125.94776154 114.03009033]
[111.37272644 110.48492432]
[121.31878662 121.71327209]
[122.31051636 136.68045044]
[113.93289948 149.12294006]
[99.69181824 153.83375549]
[85.54695129 148.84150696]
[77.41767883 136.23535156]
[78.70598602 121.29077911]
[88.87383270 110.26123810]
[74.23119354 113.51592255]
[59.58854675 116.77060699]
[44.94589996 120.02528381]
[30.30325508 123.27996826]
[15.66061115 126.53465271]
[1.01796639 129.78933716]
[12.83912277 139.02297974]
[14.85107517 153.88743591]
[5.90990448 165.93133545]
[-8.90077877 168.30697632]
[-21.16018295 159.66365051]
[-23.89807701 144.91563416]
[-15.55853844 132.44859314]
[-30.48447037 133.93739319]
[-45.41040421 135.42620850]
[-60.33633423 136.91500854]
[-75.26226807 138.40382385]
[-90.18820190 139.89262390]
[-98.85118866 152.91133118]
[-113.87017059 157.26614380]
[-128.15362549 150.90084839]
[-134.95735168 136.82096863]
[-131.06884766 121.67456055]
[-118.32411957 112.61331940]
[-102.74086761 113.91567230]
[-91.67700958 124.96669006]
[-76.75107574 123.47788239]
[-61.82514191 121.98907471]
[-46.89921188 120.50027466]
[-31.97327805 119.01146698]
[-17.04734612 117.52265930]
[-2.23671579 115.14669037]
[12.40592861 111.89200592]
[27.04857445 108.63732147]
[41.69121933 105.38263702]
[56.33386230 102.12796021]
[70.97650909 98.87327576]
[85.61915588 95.61859131]
[87.52143860 93.53907776]
[89.67263031 91.98857880]
[83.86356354 78.15908813]
[71.38562775 68.43223572]
[73.59024811 53.70169067]
[67.78118134 39.87220383]
[61.97211456 26.04271507]
[56.16304779 12.21322632]
[50.35398102 -1.61626101]
[44.54491425 -15.44574928]
[38.30252457 -22.19071388]
[38.76085663 -29.60841370]
[33.22789764 -43.55066299]
[18.62092018 -49.58488083]
[12.63630390 -64.21224976]
[18.82461548 -78.75461578]
[33.51443863 -84.58424377]
[47.99056244 -78.24253082]
[53.66456223 -63.49188995]
[47.17014694 -49.08362198]
[52.70310593 -35.14137268]
[58.37440109 -21.25481606]
[64.18347168 -7.42532873]
[69.99253845 6.40415907]
[75.80160522 20.23364639]
[81.61067200 34.06313324]
[87.41973877 47.89262390]
[99.48217010 56.63029861]
[97.69305420 72.35002136]
[103.50212097 86.17951202]
[114.91789246 95.90988159]
[129.49293518 99.45504761]
[144.06796265 103.00022125]
[158.64300537 106.54538727]
[173.21804810 110.09055328]
[194.13218689 102.12122345]
[209.39421082 117.44071960]
[224.20483398 119.81668854]
[239.01547241 122.19265747]
[253.82609558 124.56863403]
[268.63671875 126.94460297]
[283.44735718 129.32057190]
[296.16561890 120.32702637]
[311.15185547 122.94757843]
[319.64743042 135.12791443]
[334.45806885 137.50387573]
[340.48831177 124.33747864]
[349.72167969 113.19696045]
[361.52038574 104.84199524]
[375.07196045 99.84016418]
[389.44525146 98.52841949]
[403.65441895 100.99040222]
[416.72647095 107.05112457]
[427.76800537 116.28939819]
[436.02615356 128.06710815]
[440.94000244 141.57325745]
[442.17861938 155.87985229]
[456.93908691 158.54981995]
[471.69955444 161.21978760]
[483.73184204 149.36911011]
[500.28967285 147.02844238]
[514.84375000 154.92146301]
[521.77325439 169.77537537]
[536.58392334 172.15135193]
[546.21087646 160.18403625]
[560.53759766 154.64849854]
[575.71008301 157.03376770]
[587.64721680 166.69822693]
[593.13781738 181.04217529]
[590.70495605 196.20716858]
[581.00317383 208.11389160]
[566.64208984 213.55950928]
[551.48480225 211.07916260]
[539.60852051 201.34007263]
[534.20794678 186.96197510]
[519.39733887 184.58601379]
[510.82913208 194.86384583]
[498.19519043 199.59077454]
[484.77078247 197.42677307]
[474.09317017 188.83334351]
[469.02957153 175.98025513]
[454.26910400 173.31028748]
[439.50863647 170.64031982]
[432.66055298 184.62498474]
[422.14868164 196.13237000]
[408.81423950 204.22952271]
[393.72769165 208.25689697]
[378.10281372 207.88203430]
[363.19915771 203.12699890]
[350.22027588 194.36726379]
[340.21682739 182.30207825]
[334.00131226 167.89860535]
[332.08209229 152.31451416]
[317.27148438 149.93853760]
[305.39221191 158.85026550]
[290.33828735 156.65168762]
[281.07138062 144.13119507]
[266.26077271 141.75523376]
[251.45013428 139.37925720]
[236.63949585 137.00329590]
[221.82887268 134.62731934]
[207.01823425 132.25135803]
[201.68479919 138.21058655]
[194.33117676 141.58702087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[55 83]
[56 82]
[58 80]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[65 74]
[66 73]
[90 155]
[91 154]
[92 153]
[93 152]
[94 151]
[95 150]
[98 147]
[99 146]
[110 136]
[111 135]
[112 134]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
