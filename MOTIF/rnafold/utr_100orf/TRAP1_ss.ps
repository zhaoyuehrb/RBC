%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAAGCCCCGCCCCGCGCAGCCCCGUCCCGCCCCUUCCCAUCGUGUACGGUCCCGCGUGGCUGCGCGCGGCGCUCUGGGAGUACGACAUGGCGCGCGAGCUGCGGGCGCUGCUGCUGUGGGGCCGCCGCCUGCGGCCUUUGCUGCGGGCGCCGGCGCUGGCGGCCGUGCCGGGAGGAAAACCAAUUC\
) } def
/len { sequence length } bind def

/coor [
[84.77997589 254.39083862]
[88.93478394 239.44033813]
[101.10468292 229.81364441]
[100.36092377 214.83210754]
[86.34267426 206.30589294]
[80.10020447 190.95283508]
[84.27400208 174.74180603]
[97.41275024 164.10322571]
[96.42138672 149.13601685]
[95.30632782 134.17752075]
[94.06763458 119.22875214]
[82.23052979 110.01556396]
[67.43511200 112.48448181]
[52.63969040 114.95339966]
[40.30125046 124.85660553]
[26.47404480 119.31967926]
[11.67862511 121.78859711]
[-3.11679435 124.25751495]
[-17.91221428 126.72643280]
[-32.70763397 129.19535828]
[-47.50305176 131.66427612]
[-62.29847336 134.13319397]
[-77.09389496 136.60211182]
[-91.88931274 139.07102966]
[-104.22775269 148.97422791]
[-118.05495453 143.43730164]
[-132.85037231 145.90621948]
[-147.64579773 148.37513733]
[-154.64306641 162.09899902]
[-168.22096252 168.99060059]
[-183.07760620 166.59391785]
[-193.54887390 156.03500366]
[-208.34428406 158.50392151]
[-223.13970947 160.97283936]
[-225.88452148 175.88061523]
[-233.56524658 188.94898987]
[-245.25439453 198.59988403]
[-259.54043579 203.66792297]
[-274.69824219 203.54109192]
[-288.89749146 198.23472595]
[-300.42349243 188.38958740]
[-307.88449097 175.19451904]
[-310.37945557 160.24290466]
[-307.60717773 145.34020996]
[-299.90237427 132.28601074]
[-288.19546509 122.65667725]
[-273.90011597 117.61498260]
[-258.74255371 117.76974487]
[-244.55313110 123.10227203]
[-233.04527283 132.96862793]
[-225.60862732 146.17742920]
[-210.81320190 143.70851135]
[-196.01779175 141.23959351]
[-189.54235840 127.85276794]
[-176.26889038 120.76200867]
[-161.18898010 122.87145996]
[-150.11471558 133.57971191]
[-135.31929016 131.11079407]
[-120.52387238 128.64187622]
[-109.24370575 118.91526794]
[-94.35823059 124.27560425]
[-79.56281281 121.80668640]
[-64.76739502 119.33776855]
[-49.97197342 116.86885071]
[-35.17655182 114.39993286]
[-20.38113213 111.93101501]
[-5.58571339 109.46209717]
[9.20970631 106.99317169]
[24.00512505 104.52425385]
[35.28529739 94.79764557]
[50.17076874 100.15798187]
[64.96618652 97.68906403]
[79.76161194 95.22014618]
[86.12584686 81.63719940]
[78.55436707 68.68834686]
[70.98287964 55.73950195]
[63.41139984 42.79065704]
[50.19680786 32.16940689]
[56.74481583 16.53099251]
[73.58473969 18.49395561]
[76.36024475 35.21917343]
[83.93173218 48.16801834]
[91.50321198 61.11686707]
[99.07469940 74.06571198]
[108.04504395 82.02146149]
[110.33615875 91.40612030]
[123.97126007 85.15438843]
[133.29093933 72.36947632]
[148.08486938 74.09823608]
[161.71997070 67.84650421]
[175.35507202 61.59477997]
[188.99017334 55.34305191]
[202.62527466 49.09132385]
[216.26036072 42.83959579]
[222.77127075 36.40667725]
[230.17297363 36.59930420]
[243.90957642 30.57387161]
[257.64617920 24.54844093]
[267.17596436 11.91936111]
[281.93930054 13.89248753]
[295.67590332 7.86705589]
[309.41250610 1.84162462]
[316.02890015 -4.48276186]
[323.42639160 -4.16778326]
[337.26074219 -9.96527100]
[346.99804688 -22.43505859]
[361.72671509 -20.21810532]
[375.56106567 -26.01559258]
[389.39541626 -31.81308174]
[403.22976685 -37.61056900]
[417.06411743 -43.40805435]
[430.89846802 -49.20554352]
[444.68441772 -55.11720657]
[458.42102051 -61.14263535]
[467.95080566 -73.77171326]
[482.71414185 -71.79859161]
[496.45074463 -77.82402039]
[499.82110596 -88.18946075]
[508.17428589 -94.84396362]
[518.59301758 -95.77288818]
[527.60467529 -90.90960693]
[541.53302002 -96.47756195]
[555.46130371 -102.04552460]
[569.38958740 -107.61347961]
[583.31793213 -113.18144226]
[597.24621582 -118.74939728]
[611.17456055 -124.31735992]
[625.10284424 -129.88531494]
[632.72161865 -144.00387573]
[648.53515625 -146.70812988]
[660.41259766 -135.92359924]
[659.24261475 -119.92326355]
[645.92272949 -110.98120880]
[630.67083740 -115.95700836]
[616.74249268 -110.38904572]
[602.81420898 -104.82109070]
[588.88586426 -99.25312805]
[574.95758057 -93.68517303]
[561.02923584 -88.11721039]
[547.10095215 -82.54925537]
[533.17266846 -76.98129272]
[522.37731934 -60.95175171]
[502.47616577 -64.08741760]
[488.73956299 -58.06198883]
[480.19229126 -45.86388779]
[464.44644165 -47.40603638]
[450.70983887 -41.38060379]
[445.83853149 -35.80453491]
[436.69595337 -35.37119675]
[422.86160278 -29.57370949]
[409.02725220 -23.77622223]
[395.19290161 -17.97873497]
[381.35855103 -12.18124676]
[367.52423096 -6.38375950]
[358.77645874 5.67135334]
[343.05822754 3.86907554]
[329.22387695 9.66656303]
[315.43792725 15.57822418]
[301.70132446 21.60365677]
[287.96475220 27.62908745]
[279.41748047 39.82718658]
[263.67160034 38.28504181]
[249.93501282 44.31047058]
[236.19841003 50.33590317]
[222.51210022 56.47469330]
[208.87699890 62.72642136]
[195.24189758 68.97814941]
[181.60679626 75.22987366]
[167.97171021 81.48160553]
[154.33660889 87.73332977]
[145.99220276 100.07108307]
[130.22299194 98.78948975]
[116.58788300 105.04121399]
[109.01640320 117.99006653]
[110.25509644 132.93882751]
[114.08847046 141.25024414]
[111.38859558 148.14465332]
[112.37995148 163.11186218]
[124.56477356 169.57727051]
[131.90164185 181.12998962]
[132.56207275 194.69119263]
[126.48030853 206.70890808]
[115.34247589 214.08834839]
[116.08623505 229.06990051]
[129.14978027 237.44387817]
[134.76492310 251.90933228]
[130.77255249 266.90402222]
[118.70780182 276.66217041]
[103.20980835 277.43154907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 184]
[4 183]
[8 178]
[9 177]
[10 175]
[11 174]
[12 73]
[13 72]
[14 71]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[26 59]
[27 58]
[28 57]
[32 53]
[33 52]
[34 51]
[74 84]
[75 83]
[76 82]
[77 81]
[86 173]
[87 172]
[89 170]
[90 169]
[91 168]
[92 167]
[93 166]
[94 165]
[96 164]
[97 163]
[98 162]
[100 160]
[101 159]
[102 158]
[104 157]
[105 156]
[107 154]
[108 153]
[109 152]
[110 151]
[111 150]
[112 149]
[113 147]
[114 146]
[116 144]
[117 143]
[121 141]
[122 140]
[123 139]
[124 138]
[125 137]
[126 136]
[127 135]
[128 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
