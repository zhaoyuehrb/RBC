%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAACAACAUGGCCAAGAUUGCCGAGGCCCGCAAGACGGUGGAACAGCUGAAGCUGGAGGUGAACAUCGACCGCAUGAAGGUGUCGCAGGCAGCAG\
) } def
/len { sequence length } bind def

/coor [
[10.17176723 267.85665894]
[-1.98508799 265.75054932]
[-11.10107899 277.66268921]
[-13.34338188 293.32418823]
[-27.22267342 298.72921753]
[-36.33866501 310.64135742]
[-45.45465469 322.55346680]
[-43.12329102 338.18487549]
[-52.59484100 350.83654785]
[-68.25000763 353.00253296]
[-80.80084991 343.39773560]
[-82.80117798 327.72055054]
[-73.06423950 315.27194214]
[-57.36677933 313.43746948]
[-48.25078964 301.52536011]
[-39.13479996 289.61322021]
[-37.54453278 274.80377197]
[-23.01320267 268.54669189]
[-13.89721298 256.63455200]
[-19.75018501 240.12336731]
[-14.60304356 223.21669006]
[-0.29362670 212.58325195]
[17.68900681 212.53135681]
[26.04678917 200.07553101]
[34.40457535 187.61972046]
[42.76235962 175.16389465]
[51.12014389 162.70808411]
[47.13697815 146.45158386]
[56.25036621 132.01464844]
[73.29625702 128.48187256]
[81.26262665 115.77215576]
[89.22899628 103.06243134]
[96.99674225 90.23036194]
[104.56398010 77.27902985]
[95.44135284 65.15248108]
[91.66666412 50.49660110]
[93.78496552 35.55249023]
[101.44262695 22.59302139]
[113.44593048 13.57717323]
[127.94705963 9.85392094]
[142.72853088 11.96046829]
[150.29577637 -0.99085706]
[157.86300659 -13.94218254]
[165.43025208 -26.89350891]
[165.71165466 -42.71221161]
[178.81289673 -49.79787827]
[186.38014221 -62.74920654]
[184.90148926 -84.00609589]
[202.82971191 -94.02573395]
[209.15724182 -107.62582397]
[207.96343994 -123.40192413]
[220.34744263 -131.67753601]
[226.67497253 -145.27761841]
[219.02297974 -158.77674866]
[220.80043030 -174.19169617]
[231.32385254 -185.59507751]
[246.54678345 -188.60206604]
[260.61569214 -182.05642700]
[268.12078857 -168.47506714]
[266.17620850 -153.08032227]
[255.52970886 -141.79177856]
[240.27505493 -138.95008850]
[233.94752502 -125.35000610]
[235.59391785 -110.54667664]
[222.75732422 -101.29830170]
[216.42979431 -87.69821167]
[220.92468262 -79.68558502]
[221.12641907 -70.36112976]
[216.85668945 -61.91278076]
[209.00172424 -56.38444138]
[199.33146667 -55.18196106]
[191.76422119 -42.23063660]
[192.02407837 -27.33829880]
[178.38157654 -19.32626534]
[170.81433105 -6.37493944]
[163.24710083 6.57638597]
[155.67985535 19.52771187]
[164.77261353 31.37047386]
[168.64901733 45.83141708]
[166.68829346 60.71497726]
[159.15835571 73.74906921]
[147.17967224 82.93192291]
[132.55867004 86.83950806]
[117.51530457 84.84627533]
[109.94806671 97.79759979]
[108.88883209 105.94457245]
[101.93871307 111.02880096]
[93.97235107 123.73851776]
[86.00598145 136.44824219]
[90.52473450 149.24885559]
[86.84393311 162.11169434]
[76.54341125 170.33982849]
[63.57596207 171.06585693]
[55.21817780 183.52168274]
[46.86039352 195.97749329]
[38.50260925 208.43331909]
[30.14482498 220.88914490]
[36.03266907 232.14434814]
[36.50127411 244.76501465]
[31.52207184 256.29208374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[5 16]
[6 15]
[7 14]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[30 89]
[31 88]
[32 87]
[33 85]
[34 84]
[41 77]
[42 76]
[43 75]
[44 74]
[46 72]
[47 71]
[49 66]
[50 65]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
