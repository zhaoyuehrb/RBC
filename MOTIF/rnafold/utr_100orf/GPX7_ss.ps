%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUUGCCCUCGCGACGCCGCCACCUCCGGAACAAGCCAUGGUGGCGGCGACGGUGGCAGCGGCGUGGCUGCUCCUGUGGGCUGCGGCCUGCGCGCAGCAGGAGCAGGACUUCUACGACUUCAAGGCGGUCAACAUCC\
) } def
/len { sequence length } bind def

/coor [
[81.19236755 105.54563904]
[66.25275421 106.89022827]
[51.31314087 108.23481750]
[38.26208878 117.17800903]
[24.89248848 110.61271667]
[9.95287418 111.95730591]
[-4.98674011 113.30189514]
[-19.92635536 114.64648438]
[-34.86597061 115.99107361]
[-47.91701889 124.93426514]
[-61.28662109 118.36898041]
[-76.22623444 119.71356964]
[-91.16584778 121.05815887]
[-97.71111298 129.87507629]
[-107.83692169 133.51509094]
[-118.06926727 130.98883057]
[-125.03922272 123.37957764]
[-140.02412415 124.05255127]
[-155.00901794 124.72552490]
[-169.99391174 125.39849854]
[-184.97880554 126.07147217]
[-199.96369934 126.74443817]
[-214.94859314 127.41741180]
[-229.93350220 128.09039307]
[-244.91839600 128.76336670]
[-259.90328979 129.43632507]
[-267.82223511 140.39244080]
[-280.43026733 144.69906616]
[-293.02276611 140.98730469]
[-301.03726196 130.83682251]
[-316.03347778 131.17340088]
[-326.77270508 142.76841736]
[-342.56838989 143.29006958]
[-354.04922485 132.42886353]
[-354.40383911 116.62854767]
[-343.42184448 105.26318359]
[-327.61865234 105.07563782]
[-316.37005615 116.17716980]
[-301.37380981 115.84059906]
[-290.32473755 103.21112823]
[-273.22558594 102.42512512]
[-260.57626343 114.45143890]
[-245.59136963 113.77846527]
[-230.60647583 113.10549164]
[-215.62156677 112.43251801]
[-200.63667297 111.75954437]
[-185.65177917 111.08657074]
[-170.66688538 110.41359711]
[-155.68199158 109.74063110]
[-140.69709778 109.06765747]
[-125.71219635 108.39468384]
[-110.31368256 96.77973938]
[-92.51043701 106.11854553]
[-77.57082367 104.77395630]
[-62.63121033 103.42935944]
[-50.64874268 94.58234406]
[-36.21055984 101.05146027]
[-21.27094460 99.70687103]
[-6.33132982 98.36228180]
[8.60828495 97.01769257]
[23.54789925 95.67310333]
[35.53036880 86.82608795]
[49.96855164 93.29520416]
[64.90816498 91.95061493]
[79.84777832 90.60601807]
[107.24709320 77.86560059]
[119.57712555 69.32333374]
[131.90715027 60.78106689]
[144.23718262 52.23880005]
[156.06884766 43.01861954]
[167.36492920 33.14953995]
[178.66099548 23.28045845]
[189.95706177 13.41137695]
[201.25314331 3.54229641]
[212.54920959 -6.32678461]
[223.84529114 -16.19586563]
[235.14135742 -26.06494713]
[246.43742371 -35.93402863]
[257.73348999 -45.80310822]
[259.39614868 -58.64799881]
[269.07730103 -66.63426971]
[281.20166016 -65.87384033]
[292.71633911 -75.48697662]
[297.34838867 -83.45775604]
[304.59893799 -85.18311310]
[316.32641602 -94.53546143]
[328.05386353 -103.88780975]
[331.27172852 -119.60483551]
[345.63095093 -126.75975037]
[360.11633301 -119.86390686]
[363.61596680 -104.20721436]
[353.44522095 -91.80014038]
[337.40621948 -92.16033936]
[325.67874146 -82.80799103]
[313.95129395 -73.45564270]
[302.32946777 -63.97230530]
[290.81481934 -54.35916901]
[285.71560669 -37.60417175]
[267.60256958 -34.50703430]
[256.30651855 -24.63795471]
[245.01043701 -14.76887417]
[233.71437073 -4.89979315]
[222.41828918 4.96928740]
[211.12222290 14.83836842]
[199.82615662 24.70744896]
[188.53007507 34.57653046]
[177.23400879 44.44561005]
[165.93792725 54.31469345]
[180.37860107 58.37268829]
[186.42066956 72.10197449]
[179.65826416 85.49114990]
[165.02253723 88.77680206]
[153.18586731 79.56303406]
[152.77944946 64.56883240]
[140.44941711 73.11109924]
[128.11940002 81.65336609]
[115.78936005 90.19563293]
[113.60921478 105.03635406]
[122.96156311 116.76382446]
[132.31390381 128.49130249]
[141.66625977 140.21876526]
[157.30244446 140.42771912]
[169.11231995 150.67764282]
[171.51963806 166.12881470]
[163.38771057 179.48568726]
[148.55621338 184.44152832]
[134.02810669 178.65637207]
[126.66312408 164.86177063]
[129.93878174 149.57112122]
[120.58644104 137.84364319]
[111.23409271 126.11617279]
[101.88174438 114.38870239]
[107.88774872 128.13380432]
[105.13280487 142.87864685]
[94.56893158 153.52780151]
[79.84672546 156.40122986]
[66.05377197 150.50595093]
[57.95652771 137.87921143]
[58.35318756 122.88445282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[11 55]
[12 54]
[13 53]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[30 39]
[31 38]
[66 117]
[67 116]
[68 115]
[69 114]
[70 108]
[71 107]
[72 106]
[73 105]
[74 104]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[82 97]
[83 96]
[85 95]
[86 94]
[87 93]
[118 132]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
