%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCGGCGGCGGCGAGCGGAGCUGGCGGGGCUGCCGGGGCCGGGACUGGGGGAGCCGGGCCCGCGGGCCGCCUGCUGCCUCCGCCCGCGCCGGGGU\
) } def
/len { sequence length } bind def

/coor [
[178.17105103 320.70529175]
[176.84332275 315.94897461]
[177.70101929 310.43429565]
[172.23123169 296.46716309]
[160.38568115 287.43765259]
[162.55796814 271.76626587]
[157.08819580 257.79910278]
[151.61842346 243.83195496]
[146.14865112 229.86479187]
[140.67887878 215.89762878]
[135.20910645 201.93046570]
[129.52278137 188.05006409]
[123.62126923 174.25976562]
[117.71976471 160.46946716]
[111.81826019 146.67918396]
[105.91676331 132.88888550]
[100.01525879 119.09858704]
[86.60430145 113.61291504]
[80.90364075 100.29193115]
[86.19445038 86.80291748]
[80.29294586 73.01261902]
[74.39144135 59.22232437]
[68.48993683 45.43202972]
[62.12593460 38.62820053]
[62.62674713 31.11989212]
[57.15697098 17.15273094]
[51.68719864 3.18557024]
[46.55216599 -1.42426383]
[44.90533066 -7.09856272]
[46.34141541 -11.82385731]
[41.75055313 -26.10405350]
[37.15969467 -40.38425064]
[23.38056564 -47.64877319]
[18.92820740 -62.19632339]
[25.93873787 -75.28784943]
[21.34787941 -89.56804657]
[9.75822449 -100.33793640]
[13.22896194 -114.82251740]
[8.63810349 -129.10272217]
[4.04724407 -143.38291931]
[-0.54361463 -157.66311646]
[-15.32770061 -162.37590027]
[-24.49101830 -174.89840698]
[-24.51008797 -190.41548157]
[-15.37757206 -202.96046448]
[-0.60511327 -207.70957947]
[14.12697792 -202.83668518]
[23.15391159 -190.21551514]
[23.00464821 -174.69915771]
[13.73658180 -162.25396729]
[18.32744026 -147.97377014]
[22.91829872 -133.69357300]
[27.50915909 -119.41338348]
[38.77044296 -109.66490936]
[35.62807465 -94.15890503]
[40.21893311 -79.87870789]
[53.54506683 -73.32509613]
[58.40427780 -58.90834808]
[51.43989182 -44.97510910]
[56.03075027 -30.69491386]
[60.62160873 -16.41471672]
[65.65435791 -2.28420258]
[71.12413025 11.68295860]
[76.59390259 25.65011978]
[82.28023529 39.53052521]
[88.18173981 53.32081985]
[94.08323669 67.11111450]
[99.98474121 80.90141296]
[113.39569855 86.38708496]
[119.09635925 99.70806885]
[113.80554962 113.19708252]
[119.70705414 126.98738098]
[125.60855865 140.77767944]
[131.51005554 154.56796265]
[137.41156006 168.35826111]
[143.31306458 182.14855957]
[149.67707825 188.95239258]
[149.17626953 196.46069336]
[154.64604187 210.42785645]
[160.11581421 224.39501953]
[165.58558655 238.36218262]
[171.05535889 252.32934570]
[176.52513123 266.29650879]
[188.76191711 276.32504272]
[186.19839478 290.99737549]
[191.66816711 304.96453857]
[197.78343201 318.66137695]
[204.53085327 332.05810547]
[211.27827454 345.45483398]
[218.02571106 358.85156250]
[233.11019897 363.56680298]
[240.36825562 377.60589600]
[235.49378967 392.63970947]
[221.37873840 399.74893188]
[206.39732361 394.71578979]
[199.43772888 380.52636719]
[204.62898254 365.59899902]
[197.88154602 352.20227051]
[191.13412476 338.80554199]
[184.38670349 325.40881348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[20 68]
[21 67]
[22 66]
[23 65]
[25 64]
[26 63]
[27 62]
[30 61]
[31 60]
[32 59]
[35 56]
[36 55]
[38 53]
[39 52]
[40 51]
[41 50]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
