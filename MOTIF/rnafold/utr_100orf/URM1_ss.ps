%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAAUUUGCGGGCGCGCCGGAAGUUGAGGGGAGUUUCCUGCGAGCUCGGCUUCCUCAACAUGGCUGCGCCCUUGUCAGUGGAGGUGGAGUUCGGAGGUGGUGCGGAGCUCCUGUUUGACGGUAUUAAGAAACAUCGAGUCACUUUGCCUGGACAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[193.53039551 218.91339111]
[189.25399780 233.29087830]
[184.97760010 247.66838074]
[194.51652527 259.90719604]
[195.00622559 275.41653442]
[186.25842285 288.23275757]
[171.63679504 293.42776489]
[156.76368713 289.00393677]
[147.35809326 276.66238403]
[147.03665161 261.14862061]
[155.92298889 248.42805481]
[170.60009766 243.39198303]
[174.87649536 229.01448059]
[179.15289307 214.63699341]
[167.36515808 198.77546692]
[169.77522278 178.77166748]
[159.32305908 168.01286316]
[148.87088013 157.25404358]
[138.41870117 146.49523926]
[127.96651459 135.73643494]
[117.51433563 124.97762299]
[107.06215668 114.21881866]
[92.39801025 111.06244659]
[78.44498444 116.56818390]
[64.49195862 122.07392120]
[54.49498749 134.33650208]
[39.81608963 131.81079102]
[25.86306572 137.31652832]
[18.18133926 151.40093994]
[2.35593247 154.03457642]
[-9.47325516 143.19715881]
[-8.23188305 127.20220184]
[5.12777376 118.31967926]
[20.35733032 123.36351013]
[34.31035233 117.85777283]
[43.30931091 105.98899078]
[58.98622513 108.12089539]
[72.93924713 102.61515808]
[86.89227295 97.10942078]
[92.39801025 83.15640259]
[85.96427155 69.60623169]
[79.53053284 56.05606461]
[66.62197113 46.90840530]
[68.15249634 32.09264374]
[61.71875763 18.54247665]
[55.28501892 4.99231005]
[48.85128403 -8.55785751]
[42.41754532 -22.10802460]
[35.98381042 -35.65819168]
[29.55007362 -49.20835876]
[16.64151382 -58.35601807]
[18.17203331 -73.17177582]
[11.73829651 -86.72194672]
[5.30455971 -100.27210999]
[-1.12917709 -113.82228088]
[-7.56291389 -127.37244415]
[-13.99665070 -140.92260742]
[-30.64225006 -143.79434204]
[-42.19452667 -155.88941956]
[-44.25808334 -172.32005310]
[-36.21816254 -186.60700989]
[-42.91184616 -200.03065491]
[-49.60553360 -213.45431519]
[-65.18524170 -223.22869873]
[-63.48836899 -240.67494202]
[-70.43951416 -253.96710205]
[-77.39066315 -267.25927734]
[-90.08860016 -278.49307251]
[-82.80894470 -293.80462646]
[-66.08058929 -291.04809570]
[-64.09850311 -274.21041870]
[-57.14735413 -260.91824341]
[-50.19620514 -247.62608337]
[-38.72467804 -243.69451904]
[-32.83561325 -232.63694763]
[-36.18187714 -220.14801025]
[-29.48818970 -206.72434998]
[-22.79450417 -193.30068970]
[-9.45318127 -192.32185364]
[1.74534404 -184.80825806]
[7.80616856 -172.64013672]
[7.04474020 -158.95892334]
[-0.44648352 -147.35635376]
[5.98725319 -133.80618286]
[12.42098999 -120.25601959]
[18.85472679 -106.70584869]
[25.28846359 -93.15568542]
[31.72220039 -79.60551453]
[44.17057419 -71.42705536]
[43.10023880 -55.64209747]
[49.53397751 -42.09192657]
[55.96771240 -28.54176140]
[62.40145111 -14.99159431]
[68.83518982 -1.44142687]
[75.26892090 12.10873985]
[81.70265961 25.65890694]
[94.15103912 33.83736801]
[93.08070374 49.62232590]
[99.51443481 63.17249298]
[105.94817352 76.72266388]
[117.82096863 103.76663971]
[128.27314758 114.52544403]
[138.72532654 125.28425598]
[149.17750549 136.04306030]
[159.62968445 146.80186462]
[170.08186340 157.56068420]
[180.53404236 168.31948853]
[195.80502319 165.38529968]
[210.06697083 171.20033264]
[218.76335144 183.73190308]
[219.21147156 198.83024597]
[232.15339661 206.41354370]
[245.09532166 213.99684143]
[258.03726196 221.58013916]
[270.97918701 229.16345215]
[283.92111206 236.74674988]
[296.86303711 244.33004761]
[309.80496216 251.91334534]
[322.74688721 259.49664307]
[333.15362549 256.13146973]
[343.47512817 259.01638794]
[350.34054565 266.95687866]
[351.64782715 277.15014648]
[364.28790283 285.22659302]
[376.92797852 293.30300903]
[389.56805420 301.37942505]
[396.22180176 302.06527710]
[400.81335449 305.51562500]
[402.53121948 310.01858521]
[414.85067749 318.57611084]
[427.17010498 327.13366699]
[442.52905273 324.53747559]
[454.90081787 333.39154053]
[457.28121948 348.04995728]
[469.60067749 356.60748291]
[485.58087158 355.18899536]
[496.54870605 366.89736938]
[494.09054565 382.75097656]
[480.09213257 390.58828735]
[465.29180908 384.39718628]
[461.04312134 368.92694092]
[448.72369385 360.36938477]
[434.15634155 363.25527954]
[421.54080200 354.75222778]
[418.61257935 339.45309448]
[406.29312134 330.89556885]
[393.97369385 322.33801270]
[381.49160767 314.01950073]
[368.85153198 305.94308472]
[356.21148682 297.86666870]
[343.57141113 289.79022217]
[324.27230835 290.38647461]
[315.16360474 272.43856812]
[302.22167969 264.85528564]
[289.27975464 257.27197266]
[276.33779907 249.68867493]
[263.39587402 242.10537720]
[250.45394897 234.52207947]
[237.51202393 226.93876648]
[224.57009888 219.35546875]
[211.62815857 211.77217102]
[206.26493835 215.65985107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[23 39]
[24 38]
[25 37]
[27 35]
[28 34]
[40 100]
[41 99]
[42 98]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[61 78]
[62 77]
[63 76]
[65 73]
[66 72]
[67 71]
[111 161]
[112 160]
[113 159]
[114 158]
[115 157]
[116 156]
[117 155]
[118 154]
[119 153]
[123 151]
[124 150]
[125 149]
[126 148]
[129 147]
[130 146]
[131 145]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
