%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCGGCUCCAAAAGCGUGAGCCCCCCGGGCUACGCGGCGCAGAAGACUGCGGCGCCGGCGCCCCGGGGAGGCCCCGAACACCGCUCUGCGUGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[119.10839844 155.83291626]
[106.32064819 163.67341614]
[91.33696747 162.97390747]
[79.33530426 153.97613525]
[74.46309662 139.78945923]
[78.40405273 125.31642914]
[89.79660797 115.55835724]
[77.21231079 123.72142029]
[64.62802124 131.88449097]
[52.04372787 140.04754639]
[39.45943832 148.21061707]
[39.62769699 163.63705444]
[31.40973473 176.69342041]
[17.42786789 183.21347046]
[2.14366198 181.11666870]
[-9.56575012 171.07209778]
[-13.96393681 156.28495789]
[-9.64745331 141.47377014]
[2.00632715 131.36471558]
[17.27872467 129.18356323]
[31.29637337 135.62631226]
[43.88066483 127.46325684]
[56.46495819 119.30019379]
[69.04924774 111.13713074]
[81.63354492 102.97406769]
[87.96106720 89.37397766]
[86.09958649 74.48992920]
[84.23810577 59.60588455]
[82.37662506 44.72183609]
[80.51514435 29.83778763]
[78.65366364 14.95373917]
[76.56092834 0.10044044]
[74.23745728 -14.71851635]
[61.74989700 -24.02972221]
[59.60466766 -39.09135056]
[68.55843353 -50.93894958]
[66.23496246 -65.75790405]
[63.68130875 -80.53894043]
[60.89809418 -95.27846527]
[50.73455811 -107.40336609]
[55.97598648 -121.34526825]
[53.19276810 -136.08479309]
[50.40955353 -150.82432556]
[47.62633514 -165.56385803]
[44.84312057 -180.30337524]
[33.74633026 -192.37786865]
[38.91225815 -207.94210815]
[55.02663803 -210.98492432]
[65.51237488 -198.37614441]
[59.58264923 -183.08659363]
[62.36586380 -168.34707642]
[65.14907837 -153.60754395]
[67.93229675 -138.86801147]
[70.71551514 -124.12848663]
[80.67997742 -113.05785370]
[75.63761902 -98.06168365]
[78.42083740 -83.32215118]
[82.83277893 -77.22622681]
[81.05391693 -68.08138275]
[83.37739563 -53.26242447]
[95.52754211 -44.72372055]
[98.09497833 -29.72828865]
[89.05641174 -17.04198837]
[91.37989044 -2.22303224]
[95.60011292 4.00715303]
[93.53771210 13.09225750]
[95.39919281 27.97630501]
[97.26067352 42.86035538]
[99.12215424 57.74440384]
[100.98363495 72.62844849]
[102.84511566 87.51249695]
[110.80247498 88.32250214]
[118.14880371 94.34963989]
[121.57226562 104.83885193]
[133.34117126 114.13899994]
[145.11009216 123.43914032]
[156.87899780 132.73928833]
[168.64791870 142.03942871]
[180.41683960 151.33956909]
[184.60482788 151.64749146]
[188.18806458 153.04553223]
[190.91441345 155.23762512]
[192.64387512 157.87876892]
[193.35481262 160.61260986]
[193.13844299 163.10848999]
[203.32473755 174.11936951]
[213.51103210 185.13023376]
[228.70553589 192.65110779]
[225.68484497 209.33378601]
[208.81791687 211.04937744]
[202.50015259 195.31652832]
[192.31385803 184.30566406]
[182.12756348 173.29478455]
[171.11668396 163.10848999]
[159.34777832 153.80834961]
[147.57885742 144.50819397]
[135.80995178 135.20805359]
[124.04103088 125.90791321]
[112.27211761 116.60777283]
[122.70569611 127.38462067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 64]
[33 63]
[36 60]
[37 59]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
