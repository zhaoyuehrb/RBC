%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGCGCUGCUGGCGGCCCCGGCGGCCGGGCGUGCUGCCUGCAAGAUGUCCGUGCGCCGCGGCCGGCGGCCGGCGCGGCCGGGGACCCGCCUCUCCUGGCUGCUGUGCUGCAGCGCCCUGCUGUCCCCGGCCGCGGGCUACGUGA\
) } def
/len { sequence length } bind def

/coor [
[100.80619049 191.23239136]
[100.16524506 176.24609375]
[99.36419678 161.26750183]
[98.40314484 146.29832458]
[97.44209290 131.32913208]
[96.48104095 116.35995483]
[86.51575470 105.14866638]
[71.76257324 102.43877411]
[57.00938416 99.72888184]
[42.25619888 97.01899719]
[27.47489738 94.46690369]
[12.66717148 92.07290649]
[-2.14055562 89.67890930]
[-16.99870682 95.11452484]
[-28.32796478 85.44512939]
[-43.13569260 83.05113220]
[-57.94342041 80.65713501]
[-72.75114441 78.26313782]
[-87.55887604 75.86914062]
[-102.41702271 81.30475616]
[-113.74628448 71.63536072]
[-128.55401611 69.24136353]
[-143.36174011 66.84736633]
[-158.16946411 64.45336914]
[-172.97718811 62.05936813]
[-185.70637512 71.03742981]
[-200.68940735 68.39862823]
[-209.17018127 56.20796585]
[-223.97790527 53.81396866]
[-238.78562927 51.41997147]
[-253.59335327 49.02597046]
[-268.40109253 46.63197327]
[-283.20880127 44.23797607]
[-298.01654053 41.84397507]
[-310.74572754 50.82203293]
[-325.72875977 48.18323898]
[-334.20953369 35.99257278]
[-349.01724243 33.59857559]
[-364.14529419 39.92898941]
[-377.02590942 29.77901077]
[-374.40859985 13.59007168]
[-358.98583984 8.01596260]
[-346.62326050 18.79084969]
[-331.81552124 21.18484879]
[-319.92541504 12.28758621]
[-304.87417603 14.50449944]
[-295.62252808 27.03624916]
[-280.81481934 29.43024826]
[-266.00708008 31.82424545]
[-251.19935608 34.21824265]
[-236.39163208 36.61224365]
[-221.58390808 39.00624084]
[-206.77618408 41.40023804]
[-194.88607788 32.50297928]
[-179.83483887 34.71989059]
[-170.58319092 47.25164032]
[-155.77546692 49.64564133]
[-140.96774292 52.03963852]
[-126.16001129 54.43363571]
[-111.35228729 56.82763290]
[-97.55328369 51.22078323]
[-85.16487122 61.06141281]
[-70.35714722 63.45541000]
[-55.54941940 65.84941101]
[-40.74169540 68.24340820]
[-25.93396759 70.63740540]
[-12.13496399 65.03055573]
[0.25344276 74.87118530]
[15.06116962 77.26518250]
[29.86889648 79.65917969]
[37.02465439 77.60723877]
[44.96608734 82.26580811]
[59.71927261 84.97570038]
[74.47245789 87.68558502]
[89.22564697 90.39547729]
[104.22479248 90.23519897]
[118.91669464 87.21065521]
[133.60859680 84.18611145]
[148.30050659 81.16156769]
[162.99241638 78.13702393]
[177.68432617 75.11248016]
[192.37623596 72.08794403]
[207.06814575 69.06340027]
[221.76005554 66.03885651]
[236.45195007 63.01431656]
[251.14385986 59.98977280]
[265.83578491 56.96522903]
[273.60400391 46.61086655]
[285.95462036 44.42438126]
[296.13131714 51.04523087]
[310.88452148 48.33534241]
[313.38244629 39.57403183]
[318.59909058 32.15833282]
[325.92993164 26.89765167]
[334.54162598 24.35455704]
[343.46694946 24.78472710]
[351.71310425 28.11153030]
[358.37246704 33.93776321]
[362.72219849 41.59285355]
[377.68026733 40.47190475]
[392.63830566 39.35095215]
[401.03131104 35.56593704]
[407.92739868 38.36936188]
[422.90600586 37.56831360]
[437.88458252 36.76726913]
[452.86318970 35.96622467]
[467.84179688 35.16517639]
[483.33541870 28.28160858]
[494.23904419 41.26418686]
[484.78225708 55.33562851]
[468.64282227 50.14377213]
[453.66424561 50.94482040]
[438.68563843 51.74586487]
[423.70703125 52.54690933]
[408.72845459 53.34795761]
[393.75927734 54.30900955]
[378.80120850 55.42996216]
[363.84313965 56.55091095]
[351.69692993 73.91390228]
[330.43041992 76.85570526]
[313.59439087 63.08852768]
[298.84121704 65.79841614]
[286.15588379 77.88104248]
[268.86032104 71.65713501]
[254.16841125 74.68167877]
[239.47650146 77.70622253]
[224.78459167 80.73076630]
[210.09268188 83.75531006]
[195.40077209 86.77984619]
[180.70886230 89.80438995]
[166.01696777 92.82893372]
[151.32505798 95.85347748]
[136.63314819 98.87802124]
[121.94123840 101.90255737]
[107.24932861 104.92710114]
[109.29476929 107.96390533]
[110.72171021 111.48896790]
[111.45021820 115.39890289]
[112.41127777 130.36808777]
[113.37232971 145.33726501]
[114.33338165 160.30644226]
[118.02849579 168.73939514]
[115.15154266 175.60514832]
[115.79249573 190.59144592]
[122.51010895 206.15776062]
[109.41176605 216.92202759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 141]
[4 140]
[5 139]
[6 138]
[7 75]
[8 74]
[9 73]
[10 72]
[11 70]
[12 69]
[13 68]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[37 44]
[38 43]
[76 135]
[77 134]
[78 133]
[79 132]
[80 131]
[81 130]
[82 129]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
[90 122]
[91 121]
[99 118]
[100 117]
[101 116]
[103 115]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
