%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCCGGUGAGCAACGGCUCUGCGGCCAUGGCGAGCGGCGAGCAUUCCCCCGGCAGCGGCGCGGCCCGGCGGCCGCUGCACUCCGCGCAGGCUGUGGACGUGGCCUCGGCCUCCAACUUCCGGGCCU\
) } def
/len { sequence length } bind def

/coor [
[89.28135681 139.86534119]
[76.83458710 131.49407959]
[80.94979858 117.06971741]
[73.45472717 117.34152222]
[64.93375397 129.68627930]
[56.41278076 142.03103638]
[47.89181137 154.37579346]
[39.37083817 166.72055054]
[44.64791489 181.31274414]
[40.30775070 196.21047974]
[28.01922798 205.68528748]
[12.50753403 206.09388733]
[-0.26276886 197.27919006]
[-5.38123751 182.63061523]
[-0.87971693 167.78082275]
[11.51086712 158.43989563]
[27.02608109 158.19958496]
[35.54705048 145.85482788]
[44.06802368 133.51007080]
[52.58899307 121.16531372]
[61.10996628 108.82054901]
[70.99947357 96.10582733]
[83.54988861 91.22579193]
[94.68138885 93.98808289]
[93.59486389 79.02748108]
[92.50833893 64.06688690]
[83.79175568 50.86341476]
[90.58683014 37.60912704]
[89.50031281 22.64852715]
[88.41378784 7.68793058]
[87.32726288 -7.27266645]
[86.24074554 -22.23326302]
[85.15422058 -37.19386292]
[84.06769562 -52.15445709]
[72.39533997 -62.46919250]
[71.50656891 -77.65684509]
[81.41202545 -88.72109222]
[80.32550812 -103.68168640]
[79.23898315 -118.64228058]
[67.56661987 -128.95701599]
[66.67785645 -144.14466858]
[76.58331299 -155.20890808]
[75.49678802 -170.16950989]
[74.41026306 -185.13011169]
[65.10984039 -173.36141968]
[51.29509735 -167.51737976]
[36.37247467 -169.03898621]
[24.02158356 -177.55107117]
[17.28790474 -190.95471191]
[17.83182716 -205.94483948]
[25.51922607 -218.82521057]
[38.45454788 -226.41978455]
[53.44820786 -226.85588074]
[66.80307007 -220.02597046]
[75.22569275 -207.61532593]
[77.39302826 -222.45793152]
[79.56036377 -237.30052185]
[81.72769928 -252.14311218]
[83.89503479 -266.98571777]
[86.06237030 -281.82830811]
[88.22970581 -296.67089844]
[90.39704132 -311.51348877]
[92.38488007 -326.38119507]
[94.19293213 -341.27182007]
[84.25006104 -353.55657959]
[85.98907471 -369.26489258]
[98.37825012 -379.07733154]
[114.06730652 -377.17233276]
[123.74820709 -364.68011475]
[121.67744446 -349.01205444]
[109.08356476 -339.46377563]
[107.27551270 -324.57315063]
[109.61601257 -317.48211670]
[105.23963928 -309.34616089]
[103.07230377 -294.50357056]
[100.90496826 -279.66098022]
[98.73763275 -264.81838989]
[96.57029724 -249.97578430]
[94.40296173 -235.13317871]
[92.23562622 -220.29058838]
[90.06829071 -205.44799805]
[93.96875000 -196.36337280]
[89.37086487 -186.21662903]
[90.45738220 -171.25604248]
[91.54390717 -156.29544067]
[102.94408417 -146.77851868]
[104.25908661 -131.62182617]
[94.19957733 -119.72880554]
[95.28610229 -104.76821136]
[96.37262726 -89.80760956]
[107.77279663 -80.29070282]
[109.08780670 -65.13400269]
[99.02829742 -53.24098206]
[100.11482239 -38.28038406]
[101.20133972 -23.31978607]
[102.28786469 -8.35918903]
[103.37438202 6.60140848]
[104.46090698 21.56200600]
[105.54743195 36.52260208]
[114.18630219 48.65599442]
[107.46894073 62.98036194]
[108.55545807 77.94096375]
[109.64198303 92.90155792]
[115.13013458 106.86151123]
[124.52291107 118.55662537]
[133.91567993 130.25173950]
[143.30847168 141.94685364]
[151.20538330 146.74116516]
[152.78279114 154.03994751]
[161.89022827 165.95861816]
[170.99768066 177.87727356]
[186.21865845 175.82366943]
[200.42111206 181.67051697]
[209.78466797 193.84506226]
[211.79055786 209.07240295]
[205.89921570 223.25646973]
[193.69538879 232.58180237]
[178.46182251 234.53996277]
[164.29629517 228.60418701]
[155.00926208 216.37118530]
[153.09886169 201.13156128]
[159.07901001 186.98471069]
[149.97157288 175.06605530]
[140.86413574 163.14738464]
[131.61334229 151.33963013]
[122.22057343 139.64451599]
[112.82779694 127.94940186]
[103.43501282 116.25428772]
[95.93994141 116.52609253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[24 103]
[25 102]
[26 101]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[33 94]
[34 93]
[37 90]
[38 89]
[39 88]
[42 85]
[43 84]
[44 83]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 72]
[64 71]
[104 128]
[105 127]
[106 126]
[107 125]
[109 124]
[110 123]
[111 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
