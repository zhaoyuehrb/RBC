%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:21:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGAAGAAAGAAAAUCAAUCCUUUAACCUGGAUUUUAUUCUCCUGGGAGUUACUAGUCAGCAAGAACAGAAUAAUGUCUUCUUUGUGAUUUUUUUGUGCA\
) } def
/len { sequence length } bind def

/coor [
[76.37416077 262.69589233]
[84.60920715 248.51435852]
[84.15176392 233.52133179]
[83.69432068 218.52830505]
[83.23687744 203.53527832]
[82.77944183 188.54226685]
[82.32199860 173.54924011]
[81.86455536 158.55621338]
[81.40711212 143.56318665]
[80.94966888 128.57017517]
[70.58845520 117.72373199]
[55.63204193 116.58105469]
[40.67562866 115.43837738]
[25.71921349 114.29570007]
[17.52692604 125.50009155]
[4.94944334 131.10812378]
[-8.64375114 129.73582458]
[-19.66948700 121.85356140]
[-25.27542496 109.63338470]
[-40.19003296 108.03512573]
[-55.10464478 106.43686676]
[-70.01925659 104.83861542]
[-84.93386078 103.24035645]
[-95.23995209 114.84053040]
[-110.40335083 118.13461304]
[-124.59342194 111.85594940]
[-132.35379028 98.41883087]
[-130.70043945 82.99008942]
[-120.26911163 71.50239563]
[-105.07087708 68.37300110]
[-90.94975281 74.80522919]
[-83.33560181 88.32574463]
[-68.42099762 89.92400360]
[-53.50638580 91.52226257]
[-38.59177780 93.12051392]
[-23.67716789 94.71877289]
[-13.14245510 82.23183441]
[2.90552258 78.38627625]
[18.25978279 84.87080383]
[26.86189079 99.33928680]
[41.81830215 100.48196411]
[56.77471542 101.62464142]
[71.73113251 102.76731873]
[78.60605621 80.63484955]
[99.94470215 70.69062042]
[99.94470215 55.69062424]
[99.94470215 40.69062424]
[99.94470215 25.69062233]
[88.59356689 14.69393253]
[88.42647552 -1.10947263]
[99.54255676 -12.34371281]
[115.34684753 -12.34371281]
[126.46293640 -1.10947263]
[126.29584503 14.69393253]
[114.94470215 25.69062233]
[114.94470215 40.69062424]
[114.94470215 55.69062424]
[114.94470215 70.69062042]
[126.40262604 80.37132263]
[141.19206238 77.86678314]
[155.98149109 75.36224365]
[165.13928223 62.76174164]
[180.17353821 60.43246460]
[192.12976074 69.24066162]
[206.91918945 66.73612213]
[221.70861816 64.23159027]
[236.49806213 61.72704697]
[251.20422363 58.77265167]
[265.81347656 55.37115097]
[280.42269897 51.96965027]
[288.55886841 38.42053223]
[303.91268921 34.67410660]
[317.37503052 42.95305252]
[320.95889282 58.34562683]
[312.53808594 71.71968079]
[297.10848999 75.14063263]
[283.82421875 66.57888794]
[269.21496582 69.98038483]
[254.60572815 73.38188934]
[251.29325867 77.03671265]
[245.58825684 78.54082489]
[239.00259399 76.51647949]
[224.21316528 79.02101898]
[209.42373657 81.52555847]
[194.63429260 84.03009796]
[186.24482727 96.28376770]
[171.28192139 99.03440857]
[158.48603821 90.15167999]
[143.69659424 92.65621948]
[128.90716553 95.16075897]
[120.63339233 120.17357635]
[95.94268799 128.11273193]
[96.40013123 143.10574341]
[96.85757446 158.09877014]
[97.31501770 173.09179688]
[97.77246094 188.08482361]
[98.22990417 203.07783508]
[98.68734741 218.07086182]
[99.14479065 233.06388855]
[99.60223389 248.05691528]
[108.68653107 261.71002197]
[101.16327667 276.28167725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 43]
[12 42]
[13 41]
[14 40]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[45 58]
[46 57]
[47 56]
[48 55]
[59 90]
[60 89]
[61 88]
[64 85]
[65 84]
[66 83]
[67 82]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
