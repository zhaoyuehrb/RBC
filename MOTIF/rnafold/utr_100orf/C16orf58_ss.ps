%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCCACCGUGCGGCAGGGGCGGGGCUGGGAUCCAAAAGCUCGGCAUGGCUGACGACGCGGGUUUGGAGACCCCGCUGUGUUCCGAGCAGUUCGGCUCCGGGGAGGCACGGGGCUGCCGCGCCGCCGCGGACGGGAGCCUGCAGU\
) } def
/len { sequence length } bind def

/coor [
[102.97869110 130.90344238]
[91.19476318 131.11791992]
[83.55638123 144.02742004]
[75.91800690 156.93692017]
[68.27962494 169.84642029]
[60.64124298 182.75592041]
[61.40516663 202.85314941]
[44.27777863 211.73802185]
[37.19799423 224.96211243]
[38.26413345 241.32656860]
[24.47678757 250.20582581]
[10.01919651 242.46566772]
[9.76409054 226.06849670]
[23.97389984 217.88233948]
[31.05368423 204.65823364]
[27.20512581 195.09916687]
[29.33543777 184.79182434]
[36.97122955 177.23114014]
[47.73174286 175.11753845]
[55.37012482 162.20803833]
[63.00850677 149.29853821]
[70.64688873 136.38903809]
[78.28526306 123.47954559]
[69.96837616 110.99637604]
[55.11287308 113.07339478]
[40.25737000 115.15040588]
[25.40186501 117.22742462]
[10.54636097 119.30443573]
[4.85712767 133.57077026]
[-7.21298885 143.06854248]
[-22.41718674 145.24291992]
[-36.66561508 139.50900269]
[-46.12551498 127.40917206]
[-48.25222397 112.19823456]
[-42.47366714 97.96784973]
[-30.34424782 88.54592133]
[-15.12671757 86.46690369]
[-0.91451526 92.29003906]
[8.46934700 104.44892883]
[23.32485199 102.37191772]
[38.18035507 100.29490662]
[53.03585815 98.21788788]
[67.89136505 96.14087677]
[87.81310272 74.28067017]
[113.18566132 79.25427246]
[124.71059418 69.65345001]
[136.23553467 60.05262375]
[140.86900330 52.09652328]
[148.11087036 50.37296295]
[159.83834839 41.02061462]
[171.56582642 31.66826820]
[183.29328918 22.31592178]
[185.20487976 6.85682678]
[197.23143005 -2.46072078]
[211.95753479 -0.54304767]
[223.68501282 -9.89539433]
[229.97312927 -27.16773415]
[247.37585449 -29.18069077]
[258.90078735 -38.78151703]
[270.42572021 -48.38233948]
[281.95065308 -57.98316574]
[293.47561646 -67.58399200]
[304.79275513 -77.42890930]
[315.89691162 -87.51342010]
[320.91107178 -102.51904297]
[335.53460693 -105.34784698]
[346.63876343 -115.43235779]
[357.74291992 -125.51686859]
[368.73870850 -135.71946716]
[379.62484741 -146.03897095]
[383.73904419 -154.27558899]
[390.85562134 -156.45959473]
[401.95977783 -166.54411316]
[413.06396484 -176.62861633]
[424.16812134 -186.71313477]
[435.27227783 -196.79765320]
[439.56158447 -204.94447327]
[446.72317505 -206.97590637]
[458.04031372 -216.82081604]
[469.35745239 -226.66574097]
[474.69116211 -241.56077576]
[489.37176514 -244.07643127]
[500.68890381 -253.92135620]
[512.00604248 -263.76626587]
[523.32318115 -273.61117554]
[534.42736816 -283.69570923]
[545.31347656 -294.01519775]
[556.19964600 -304.33471680]
[567.08575439 -314.65420532]
[567.25732422 -330.45758057]
[578.61157227 -341.45104980]
[594.41223145 -341.11242676]
[605.28503418 -329.64257812]
[604.77935791 -313.84640503]
[593.19525146 -303.09542847]
[577.40527344 -303.76806641]
[566.51910400 -293.44857788]
[555.63299561 -283.12905884]
[544.74688721 -272.80957031]
[543.72985840 -268.07711792]
[539.68518066 -263.95858765]
[533.16809082 -262.29403687]
[521.85095215 -252.44912720]
[510.53381348 -242.60421753]
[499.21670532 -232.75929260]
[494.69247437 -218.56843567]
[479.20236206 -215.34860229]
[467.88522339 -205.50367737]
[456.56808472 -195.65876770]
[445.35681152 -185.69348145]
[434.25262451 -175.60896301]
[423.14846802 -165.52445984]
[412.04428101 -155.43994141]
[400.94012451 -145.35542297]
[389.94433594 -135.15283203]
[379.05822754 -124.83332825]
[376.34848022 -117.89987946]
[367.82745361 -114.41270447]
[356.72326660 -104.32818604]
[345.61911011 -94.24367523]
[341.39916992 -79.95936584]
[325.98141479 -76.40924835]
[314.87725830 -66.32473755]
[313.75936890 -61.61510086]
[309.62756348 -57.58395004]
[303.07641602 -56.05905151]
[291.55148315 -46.45822906]
[280.02655029 -36.85740280]
[268.50161743 -27.25657845]
[256.97668457 -17.65575409]
[255.55001831 -5.59897804]
[245.96501160 2.49087977]
[233.03735352 1.83207750]
[221.30987549 11.18442440]
[219.90260315 25.96803665]
[208.14251709 35.61970901]
[192.64564514 34.04339218]
[180.91816711 43.39574051]
[169.19068909 52.74808884]
[157.46322632 62.10043335]
[145.83634949 71.57756042]
[134.31141663 81.17838287]
[122.78648376 90.77921295]
[125.87239838 99.67210388]
[125.43391418 109.54936218]
[121.18878174 119.00104523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[8 15]
[9 14]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[45 143]
[46 142]
[47 141]
[49 140]
[50 139]
[51 138]
[52 137]
[55 134]
[56 133]
[58 130]
[59 129]
[60 128]
[61 127]
[62 126]
[63 123]
[64 122]
[66 120]
[67 119]
[68 118]
[69 116]
[70 115]
[72 114]
[73 113]
[74 112]
[75 111]
[76 110]
[78 109]
[79 108]
[80 107]
[82 105]
[83 104]
[84 103]
[85 102]
[86 99]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
