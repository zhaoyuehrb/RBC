%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUGGAGUGCAAGAUUGAGGGAAAAGAAAAAUACCAACAUAGCUUGAAUUUACUGAAUAAAAUUCAGAACAUGAAAGAAUUAGCAGAAAUGAUUGAUGUGG\
) } def
/len { sequence length } bind def

/coor [
[129.32952881 185.11276245]
[133.88758850 172.83314514]
[123.28098297 162.22654724]
[112.67438507 151.61994934]
[102.06777954 141.01333618]
[91.46118164 130.40673828]
[78.39593506 123.03791809]
[63.83181000 119.44818115]
[49.26768494 115.85845184]
[34.70355606 112.26871490]
[19.45273399 116.47858429]
[8.94695091 105.92028046]
[-5.61717606 102.33054352]
[-20.18130302 98.74081421]
[-34.74542999 95.15107727]
[-49.45464325 104.47028351]
[-66.04698181 100.42913055]
[-74.48507690 85.96925354]
[-89.15097809 82.82102966]
[-102.32269287 91.13629913]
[-117.15116119 87.73463440]
[-124.99732208 75.12617493]
[-139.66322327 71.97795868]
[-148.98359680 84.06487274]
[-162.62911987 90.90316772]
[-177.89047241 91.13510132]
[-191.73750305 84.71462250]
[-201.42086792 72.91652679]
[-205.01792908 58.08332062]
[-201.81449890 43.16016006]
[-192.44659424 31.11004639]
[-178.77424622 24.32553673]
[-163.51210022 24.15370178]
[-149.69046021 30.62866020]
[-140.05363464 42.46480179]
[-136.51501465 57.31205368]
[-121.84910583 60.46026993]
[-109.51951599 52.18278122]
[-94.60135651 55.16659927]
[-86.00276184 68.15512848]
[-71.33686066 71.30334473]
[-61.51312637 62.81633377]
[-48.39442062 61.57056427]
[-36.80983734 68.25215149]
[-31.15569496 80.58695221]
[-16.59156799 84.17668152]
[-2.02744102 87.76641846]
[12.53668594 91.35615540]
[26.74578476 86.88951874]
[38.29329300 97.70458984]
[52.85741806 101.29431915]
[67.42154694 104.88405609]
[81.98567200 108.47379303]
[85.37261200 89.39185333]
[102.00414276 83.89378357]
[110.52510834 71.54902649]
[119.04608154 59.20426559]
[127.56705475 46.85950851]
[136.08802795 34.51474762]
[144.60899353 22.16999054]
[148.63061523 5.69992876]
[165.57031250 5.00500822]
[170.92744446 21.09032440]
[156.95375061 30.69096184]
[148.43278503 43.03572083]
[139.91180420 55.38047791]
[131.39083862 67.72523499]
[122.86987305 80.06999207]
[114.34889984 92.41474915]
[117.21994019 102.86243439]
[112.80345917 113.60475159]
[102.06777954 119.80014038]
[112.67438507 130.40673828]
[123.28098297 141.01333618]
[133.88758850 151.61994934]
[144.49418640 162.22654724]
[161.20211792 157.26419067]
[178.06082153 161.32736206]
[190.54641724 173.23512268]
[195.35406494 189.71382141]
[191.27235413 206.29669189]
[202.50001526 216.24353027]
[213.72767639 226.19036865]
[224.95533752 236.13720703]
[236.18299866 246.08404541]
[247.55961609 255.86018372]
[259.08258057 265.46337891]
[275.32540894 267.72213745]
[281.23913574 283.01788330]
[270.74017334 295.61566162]
[254.62899780 292.55596924]
[249.47938538 276.98632812]
[237.95642090 267.38314819]
[230.68188477 265.48730469]
[226.23616028 257.31170654]
[215.00849915 247.36486816]
[203.78083801 237.41802979]
[192.55317688 227.47119141]
[181.32551575 217.52435303]
[169.66734314 222.84631348]
[156.81298828 223.30714417]
[144.71530151 218.80076599]
[135.22596741 209.97843933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[7 53]
[8 52]
[9 51]
[10 50]
[12 48]
[13 47]
[14 46]
[15 45]
[18 41]
[19 40]
[22 37]
[23 36]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
