%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCAGGUUCUUGGGGGUAGCCAAAAUGAGGUUCUUUGUCCCUCUGUUCCUGGUGGGCAUCCUGUUCCCUGCCAUCCUGGCCAAGCAAUUCACAAAAUGUGAGCUGUCCCAGCUGCUGAAAGACA\
) } def
/len { sequence length } bind def

/coor [
[96.80101013 394.64633179]
[107.30558014 382.83828735]
[106.19344330 367.87957764]
[105.08129883 352.92086792]
[103.96916199 337.96215820]
[102.85701752 323.00344849]
[101.74488068 308.04470825]
[89.74130249 302.06607056]
[82.22181702 290.83169556]
[81.25516510 277.23873901]
[87.20321655 264.85751343]
[98.59739685 256.99356079]
[97.85559082 242.01190186]
[97.11378479 227.03025818]
[96.37197876 212.04861450]
[95.63017273 197.06697083]
[94.88836670 182.08532715]
[86.10019684 173.67533875]
[85.42001343 161.12762451]
[93.76450348 151.20042419]
[93.39348602 136.20501709]
[93.02247620 121.20960999]
[89.03990936 135.67124939]
[76.38793945 143.72903442]
[61.59881592 141.22268677]
[52.30818558 129.44627380]
[53.31282425 114.47994995]
[64.09403992 104.05088043]
[79.08739471 103.54428864]
[64.59053802 99.69187164]
[50.09367752 95.83946228]
[35.59681702 91.98705292]
[24.27231216 102.46365356]
[9.07748699 105.13214111]
[-5.13904715 99.14100647]
[-13.84084511 86.40200043]
[-14.25119495 70.98009491]
[-6.23915482 57.79636383]
[7.63866138 51.05768585]
[22.95389366 52.91435242]
[34.81950760 62.77390289]
[39.44922638 77.49019623]
[53.94608688 81.34260559]
[68.44294739 85.19501495]
[82.93980408 89.04742432]
[95.57681274 80.96620941]
[98.16123199 66.19052887]
[100.74565125 51.41484833]
[103.33007050 36.63916397]
[105.36457825 21.77777863]
[106.84637451 6.85114956]
[100.51019287 -7.64586163]
[109.46692657 -19.54653931]
[110.94872284 -34.47317123]
[101.20726013 -46.62807083]
[102.92264557 -61.74468994]
[114.57052612 -70.95677948]
[116.05232239 -85.88340759]
[117.53411865 -100.81003571]
[119.01591492 -115.73667145]
[106.49179077 -124.62722015]
[100.10545349 -138.59541321]
[101.57478333 -153.88385010]
[110.50455475 -166.38005066]
[124.49269104 -172.72257996]
[139.77645874 -171.20532227]
[152.24459839 -162.23643494]
[158.54324341 -148.22848511]
[156.97808838 -132.94955444]
[147.97016907 -120.50958252]
[133.94253540 -114.25487518]
[132.46073914 -99.32823944]
[130.97894287 -84.40161133]
[129.49714661 -69.47498322]
[139.10653687 -58.15264130]
[137.81642151 -42.99380875]
[125.87535095 -32.99137497]
[124.39355469 -18.06474304]
[130.83572388 -4.63538504]
[121.77300262 8.33294582]
[120.29120636 23.25957489]
[122.32717133 26.26263237]
[122.94731140 30.43235016]
[121.60543060 35.06237411]
[118.10575104 39.22358322]
[115.52133179 53.99926758]
[112.93691254 68.77494812]
[110.35249329 83.55062866]
[114.61715698 86.55317688]
[118.00974274 90.66124725]
[120.24440002 95.62116241]
[135.18821716 96.91822815]
[150.13203430 98.21529388]
[165.07585144 99.51236725]
[180.01965332 100.80943298]
[196.32229614 96.15537262]
[205.30749512 110.53252411]
[193.97956848 123.14656830]
[178.72259521 115.75325012]
[163.77877808 114.45617676]
[148.83496094 113.15911102]
[133.89114380 111.86204529]
[118.94733429 110.56497955]
[108.01788330 120.83859253]
[108.38890076 135.83399963]
[108.75991821 150.82940674]
[118.73232269 166.25003052]
[109.87001801 181.34352112]
[110.61182404 196.32516479]
[111.35362244 211.30680847]
[112.09542847 226.28845215]
[112.83723450 241.27009583]
[113.57904053 256.25173950]
[127.83083344 265.26522827]
[133.87931824 280.82858276]
[129.54119873 296.78109741]
[116.70359039 306.93258667]
[117.81573486 321.89129639]
[118.92787170 336.85000610]
[120.04001617 351.80871582]
[121.15216064 366.76742554]
[122.26429749 381.72616577]
[134.39952087 391.85098267]
[135.73785400 407.59848022]
[125.48530579 419.62597656]
[109.72451782 420.79776001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[12 113]
[13 112]
[14 111]
[15 110]
[16 109]
[17 108]
[20 106]
[21 105]
[22 104]
[29 45]
[30 44]
[31 43]
[32 42]
[46 88]
[47 87]
[48 86]
[49 85]
[50 81]
[51 80]
[53 78]
[54 77]
[57 74]
[58 73]
[59 72]
[60 71]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
