%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUGCCAGUUAUGCGAAAACAUGGCUGCGGCCGGUUUGGCCCUUCUUUGUAGGAGAGUUUCAUCCGCCCUGAAAUCUUCCCGAUCGUUAAUAACUCCUCAGGUCCCUGCCUGCACAGGGU\
) } def
/len { sequence length } bind def

/coor [
[126.54319763 142.65873718]
[110.19281006 150.56512451]
[91.63261414 152.25627136]
[73.20527649 147.18443298]
[57.35391998 135.67666626]
[46.29884338 118.93338776]
[34.36944962 128.02676392]
[29.36687279 135.81176758]
[22.01727676 137.19540405]
[9.85954189 145.98115540]
[-2.29819298 154.76692200]
[-14.45592785 163.55267334]
[-26.61366272 172.33842468]
[-38.77139664 181.12417603]
[-50.92913055 189.90992737]
[-53.19356537 205.55116272]
[-65.90460205 214.94291687]
[-81.52101135 212.51322937]
[-90.77785492 199.70361328]
[-88.18320465 184.11376953]
[-75.27642822 174.99287415]
[-59.71488571 177.75219727]
[-47.55715179 168.96644592]
[-35.39941788 160.18069458]
[-23.24168205 151.39492798]
[-11.08394814 142.60917664]
[1.07378674 133.82342529]
[13.23152161 125.03767395]
[25.27606773 116.09737396]
[37.20545959 107.00399017]
[34.72659683 92.21023560]
[20.48461342 87.50216675]
[6.24263048 82.79409790]
[-7.99935341 78.08602905]
[-22.91938782 83.98281860]
[-36.75986481 75.86982727]
[-38.90356064 59.97063828]
[-27.70600891 48.48175812]
[-11.75701618 50.21646881]
[-3.29128504 63.84404755]
[10.95069885 68.55211639]
[25.19268227 73.26018524]
[39.43466568 77.96825409]
[48.67964935 66.15596008]
[40.68758392 53.46237946]
[32.69552231 40.76880264]
[24.70345688 28.07522392]
[16.71139336 15.38164520]
[1.96117365 8.21484375]
[1.06274617 -8.15967464]
[14.94033623 -16.89720917]
[29.31786919 -9.00933456]
[29.40497208 7.38958168]
[37.39703369 20.08316040]
[45.38909912 32.77673721]
[53.38116074 45.47031403]
[61.37322617 58.16389465]
[71.32744598 51.79409790]
[82.22498322 47.70216370]
[93.56089020 45.99909973]
[104.82570648 46.68705750]
[115.52834320 49.66234589]
[125.21748352 54.72315979]
[133.50062561 61.58149719]
[140.05982971 69.87866211]
[144.66380310 79.20346069]
[147.17552185 89.11231232]
[147.55548096 99.15016174]
[162.40771484 101.25040436]
[177.25994873 103.35064697]
[192.11218262 105.45088959]
[206.96443176 107.55113220]
[221.81666565 109.65137482]
[232.57183838 93.63964081]
[253.20126343 87.54070282]
[275.05755615 96.81067657]
[287.64804077 88.65716553]
[300.23852539 80.50365448]
[304.98666382 65.17933655]
[319.97998047 59.47145081]
[333.71688843 67.75860596]
[335.65960693 83.68359375]
[324.31784058 95.03013611]
[308.39202881 93.09413147]
[295.80154419 101.24765015]
[283.21105957 109.40116119]
[282.44616699 116.86205292]
[297.40435791 115.74286652]
[312.36251831 114.62368774]
[327.32070923 113.50450134]
[341.30038452 108.06676483]
[355.58389282 112.64733124]
[363.79388428 125.20104980]
[362.26473999 140.12290955]
[351.67922974 150.75053406]
[336.76354980 152.33888245]
[324.17608643 144.17713928]
[309.75616455 140.04603577]
[295.33624268 135.91493225]
[280.91632080 131.78384399]
[280.15142822 139.24473572]
[290.82553101 149.78338623]
[301.49963379 160.32205200]
[312.17376709 170.86070251]
[322.84786987 181.39936829]
[338.84307861 185.01675415]
[343.44885254 200.75584412]
[331.92718506 212.42559814]
[316.13058472 208.02117920]
[312.30920410 192.07347107]
[301.63510132 181.53482056]
[290.96099854 170.99615479]
[280.28686523 160.45750427]
[269.61276245 149.91883850]
[245.46583557 154.54592896]
[226.18287659 143.39570618]
[219.71643066 124.50360870]
[204.86418152 122.40336609]
[190.01194763 120.30313110]
[175.15971375 118.20288849]
[160.30746460 116.10264587]
[145.45523071 114.00240326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 30]
[7 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[31 43]
[32 42]
[33 41]
[34 40]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[68 122]
[69 121]
[70 120]
[71 119]
[72 118]
[73 117]
[76 86]
[77 85]
[78 84]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
