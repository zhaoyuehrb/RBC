%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUCUGUUAGCAAAGCUGUUUGUCUUUCUCGGAAACAACAGUAACGAUAAGCCUCUUUGAAUAUGGAGGCCGCUGCAGACGGCCCGGCUGAGACCCAAAGCCCGGUGGAAAAAGACAGCCCGGCGAAGACCCAAAGCCCAGCCCAAGACACCUCAAUCAUGU\
) } def
/len { sequence length } bind def

/coor [
[187.19964600 158.90782166]
[193.18502808 145.15373230]
[202.23313904 133.18995667]
[213.83786011 123.68572235]
[227.34892273 117.17303467]
[212.38220215 116.17417908]
[197.41549683 115.17531586]
[182.44879150 114.17646027]
[167.48208618 113.17760468]
[160.56730652 115.88212585]
[152.24079895 112.01457977]
[137.29583740 110.73095703]
[122.35085297 109.44732666]
[116.46467590 121.81460571]
[103.70465851 130.16915894]
[86.90292358 130.79121399]
[70.79614258 121.93826294]
[57.03549957 127.90858459]
[43.27485657 133.87890625]
[29.51421547 139.84922791]
[15.75357246 145.81954956]
[1.99293089 151.78987122]
[-4.11278677 168.15998840]
[-19.85011292 174.93705750]
[-35.31792831 168.38743591]
[-48.96240997 174.61865234]
[-62.60689163 180.84988403]
[-69.53800964 195.31843567]
[-85.20318604 198.77990723]
[-97.58543396 188.57894897]
[-97.18615723 172.54087830]
[-84.31163788 162.96870422]
[-68.83811188 167.20539856]
[-55.19363403 160.97418213]
[-41.54915619 154.74295044]
[-38.76789093 142.13450623]
[-29.07838249 133.30888367]
[-15.87901306 131.66543579]
[-3.97739029 138.02922058]
[9.78325176 132.05889893]
[23.54389381 126.08858490]
[37.30453491 120.11826324]
[51.06517792 114.14794159]
[64.82582092 108.17761993]
[66.31524658 100.82700348]
[51.37682343 99.46924591]
[36.80900574 103.04397583]
[25.98894310 92.65522003]
[28.96844864 77.95410919]
[42.97956848 72.59794617]
[55.00543594 81.56134033]
[69.29410553 86.12576294]
[70.78353119 78.77514648]
[60.43234634 67.91913605]
[50.08116150 57.06312180]
[39.72997665 46.20711136]
[29.37879181 35.35110092]
[19.02760696 24.49509048]
[3.66662097 26.69047737]
[-10.03532600 19.40787697]
[-16.80955505 5.44759512]
[-14.05123615 -9.82235241]
[-2.82100058 -20.53036118]
[12.56289768 -22.55898094]
[26.18503571 -15.12816811]
[32.80742264 -1.09522140]
[29.88361740 14.14390564]
[40.23480225 24.99991608]
[50.58598709 35.85592651]
[60.93717194 46.71193695]
[71.28836060 57.56794739]
[81.63954163 68.42395782]
[112.05422974 72.09663391]
[123.63448334 94.50235748]
[138.57945251 95.78598022]
[153.52442932 97.06960297]
[168.48095703 98.21089935]
[183.44766235 99.20975494]
[198.41436768 100.20861053]
[213.38107300 101.20747375]
[228.34777832 102.20632935]
[236.31826782 98.15031433]
[244.14628601 99.78112030]
[258.12423706 94.33900452]
[272.10220337 88.89688873]
[278.52413940 74.70545959]
[292.77731323 69.38550568]
[306.26708984 75.59529114]
[320.24505615 70.15317535]
[334.22299194 64.71105957]
[348.20095825 59.26894379]
[346.58615112 44.27469254]
[348.90591431 29.38495827]
[354.99615479 15.61379910]
[364.43624878 3.89751935]
[376.57800293 -4.96899033]
[390.59027100 -10.38617992]
[405.51565552 -11.99038029]
[420.33612061 -9.67821026]
[434.04232788 -3.61321664]
[445.70242310 5.78567791]
[454.52529907 17.87310600]
[468.50326538 12.43099117]
[482.48123169 6.98887587]
[492.53396606 -5.22804499]
[507.20120239 -2.63548541]
[521.17913818 -8.07760143]
[535.10467529 -13.65253830]
[548.97650146 -19.35979080]
[552.50378418 -34.47064590]
[564.26135254 -44.59681320]
[579.72814941 -45.84457397]
[592.95697021 -37.73414230]
[598.86096191 -23.38414192]
[595.16992188 -8.31244183]
[583.30322266 1.68558288]
[567.82379150 2.76548648]
[554.68377686 -5.48797512]
[540.81195068 0.21927758]
[535.79992676 5.69726562]
[526.62127686 5.90035915]
[512.64331055 11.34247494]
[503.59039307 23.17013931]
[487.92333984 20.96683693]
[473.94540405 26.40895081]
[459.96743774 31.85106659]
[461.64044189 46.72219467]
[459.40527344 61.53100586]
[453.40835571 75.26713562]
[444.05291748 86.99183655]
[431.97207642 95.90212250]
[417.98568726 101.38578796]
[403.04504395 103.06342316]
[388.16787720 100.81472015]
[374.36923218 94.78701019]
[362.59213257 85.38568115]
[353.64309692 73.24690247]
[339.66513062 78.68901825]
[325.68716431 84.13113403]
[311.70919800 89.57324982]
[305.96963501 103.26970673]
[291.87152100 108.98790741]
[277.54431152 102.87484741]
[263.56637573 108.31696320]
[249.58840942 113.75907898]
[264.43200684 115.91957855]
[278.35305786 121.50563812]
[290.57290649 130.20480347]
[300.40798950 141.53047180]
[307.30822754 154.84913635]
[310.88760376 169.41581726]
[310.94589233 184.41571045]
[307.47988892 199.00976562]
[300.68341064 212.38168335]
[290.93667603 223.78347778]
[278.78482056 232.57737732]
[264.90759277 238.27148438]
[250.08125305 240.54731750]
[235.13510132 239.27755737]
[220.90515137 234.53323364]
[208.18737793 226.57972717]
[197.69316101 215.86190796]
[190.00950623 202.97930908]
[185.56620789 188.65251160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 81]
[6 80]
[7 79]
[8 78]
[9 77]
[11 76]
[12 75]
[13 74]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[25 35]
[26 34]
[27 33]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[83 145]
[84 144]
[85 143]
[88 140]
[89 139]
[90 138]
[91 137]
[102 126]
[103 125]
[104 124]
[106 122]
[107 121]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
