%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAAAGCUGGGGGAAGAGAGGGGGGUUGUGUGCAGAUGGCCCUUCAAUCUCGAAAGAAAGAUGUCGGAAUCUGAAGGCGGGAAAGACACCACCCCAGAGCCCAGUCCAGCCAAUGGGGCAGGCCCUGGUCCCGAAUGGGGGCUGUGCCCCGGGCCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[119.10109711 242.55152893]
[114.64105988 257.32012939]
[102.88971710 267.31561279]
[87.59687042 269.34841919]
[73.64241028 262.76992798]
[65.47915649 249.67929077]
[65.71198273 234.25367737]
[74.26657867 221.41535950]
[88.41321564 215.26098633]
[90.71688843 200.43894958]
[93.02056122 185.61689758]
[95.32424164 170.79484558]
[97.62791443 155.97280884]
[99.93159485 141.15075684]
[88.53556824 138.24363708]
[78.76482391 132.35276794]
[71.34770203 124.15182495]
[66.76781464 114.47486877]
[52.07393265 117.48977661]
[37.38004303 120.50468445]
[22.68615723 123.51959991]
[8.05310345 126.81713104]
[-6.51368093 130.39607239]
[-21.08046532 133.97500610]
[-35.64725113 137.55393982]
[-50.21403503 141.13288879]
[-64.78081512 144.71182251]
[-79.34760284 148.29075623]
[-93.91438293 151.86968994]
[-108.48117065 155.44863892]
[-123.04795837 159.02757263]
[-131.01872253 172.67463684]
[-146.32583618 176.60752869]
[-159.88786316 168.49293518]
[-163.65870667 153.14509583]
[-155.40116882 139.66960144]
[-140.01432800 136.06124878]
[-126.62689209 144.46078491]
[-112.06011200 140.88185120]
[-97.49332428 137.30291748]
[-82.92653656 133.72396851]
[-68.35975647 130.14503479]
[-53.79297256 126.56610107]
[-39.22618866 122.98715973]
[-24.65940285 119.40822601]
[-10.09261894 115.82928467]
[4.47416544 112.25035095]
[7.69049454 108.66106415]
[13.21308041 107.08359528]
[19.67124748 108.82570648]
[34.36513519 105.81079865]
[49.05902100 102.79589081]
[63.75290680 99.78097534]
[64.28547668 93.80546570]
[65.79633331 87.99963379]
[68.24410248 82.52251434]
[71.56172943 77.52413940]
[75.65834045 73.14142609]
[80.42171478 69.49442291]
[85.72138214 66.68302917]
[91.41217041 64.78425598]
[97.33819580 63.85011292]
[99.35578156 48.98641968]
[101.37337494 34.12273026]
[94.26183319 25.81307602]
[92.95165253 15.17635822]
[97.63781738 5.78352308]
[106.54257202 0.65350568]
[109.13146973 -14.12139130]
[100.32192230 -26.96777344]
[103.15791321 -41.91473770]
[115.45925903 -50.23413467]
[118.04816437 -65.00903320]
[120.63706970 -79.78392792]
[123.22597504 -94.55882263]
[116.45806885 -105.57547760]
[118.95030212 -117.85308838]
[128.82489014 -124.89196014]
[131.69805908 -139.61421204]
[126.74737549 -154.64089966]
[136.77925110 -165.65046692]
[139.65242004 -180.37272644]
[128.98014832 -191.63693237]
[127.00042725 -207.02720642]
[134.47448730 -220.62565613]
[148.52841187 -227.20343018]
[163.75816345 -224.23121643]
[174.30761719 -212.85189819]
[176.12026978 -197.44105530]
[168.49913025 -183.92448425]
[154.37467957 -177.49955750]
[151.50151062 -162.77729797]
[156.65769958 -148.80364990]
[146.42031860 -136.74104309]
[143.54714966 -122.01878357]
[150.14739990 -105.78032684]
[138.00086975 -91.96991730]
[135.41197205 -77.19502258]
[132.82305908 -62.42012787]
[130.23416138 -47.64522934]
[138.97398376 -35.63893509]
[136.55892944 -20.61820793]
[123.90637207 -11.53248692]
[121.31746674 3.24240947]
[129.29614258 20.82509804]
[116.23706818 36.14031982]
[114.21947479 51.00401306]
[112.20188141 65.86770630]
[130.76708984 77.89932251]
[139.50979614 99.27421570]
[134.28105164 122.76397705]
[147.89259338 129.06683350]
[161.50413513 135.36970520]
[168.18968201 135.15435791]
[173.20361328 137.95574951]
[175.51155090 142.18672180]
[188.87007141 149.00946045]
[202.22860718 155.83218384]
[215.58712769 162.65492249]
[228.94566345 169.47766113]
[242.30418396 176.30039978]
[255.66271973 183.12312317]
[269.08636475 189.81681824]
[282.57391357 196.38082886]
[296.06146240 202.94483948]
[309.54898071 209.50886536]
[323.03652954 216.07287598]
[336.52407837 222.63688660]
[352.31860352 221.71871948]
[360.37673950 234.24533081]
[373.86425781 240.80934143]
[389.43704224 236.95344543]
[402.07290649 246.83851624]
[402.07870483 262.88156128]
[389.44998169 272.77575684]
[373.87442017 268.93109131]
[367.30026245 254.29689026]
[353.81271362 247.73286438]
[338.98287964 249.12054443]
[329.96005249 236.12443542]
[316.47250366 229.56040955]
[302.98498535 222.99639893]
[289.49743652 216.43238831]
[276.00988770 209.86836243]
[262.52236938 203.30435181]
[255.09622192 203.20445251]
[248.83998108 196.48165894]
[235.48146057 189.65892029]
[222.12292480 182.83618164]
[208.76440430 176.01345825]
[195.40586853 169.19071960]
[182.04733276 162.36798096]
[168.68881226 155.54525757]
[155.20127869 148.98123169]
[141.58973694 142.67837524]
[127.97819519 136.37551880]
[114.75363922 143.45443726]
[112.44996643 158.27647400]
[110.14628601 173.09852600]
[107.84261322 187.92057800]
[105.53893280 202.74261475]
[103.23526001 217.56466675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 162]
[10 161]
[11 160]
[12 159]
[13 158]
[14 157]
[18 53]
[19 52]
[20 51]
[21 50]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[62 108]
[63 107]
[64 106]
[68 104]
[69 103]
[72 100]
[73 99]
[74 98]
[75 97]
[78 95]
[79 94]
[81 92]
[82 91]
[111 156]
[112 155]
[113 154]
[116 153]
[117 152]
[118 151]
[119 150]
[120 149]
[121 148]
[122 147]
[123 145]
[124 144]
[125 143]
[126 142]
[127 141]
[128 140]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
