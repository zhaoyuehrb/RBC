%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAACCAUACAGAAAUAACAGAGUUUAUUCUUCUGGGAUUAACAGAUGACCCAAAUUUUCAGGUUGUAAUCUUUGUCUUCCUGCUCAUCACCUACA\
) } def
/len { sequence length } bind def

/coor [
[109.60022736 236.67155457]
[105.90604401 222.13356018]
[102.21186066 207.59558105]
[98.51767731 193.05760193]
[94.82349396 178.51960754]
[86.76011658 191.16799927]
[72.89131927 196.88259888]
[58.25798416 193.58633423]
[48.17884827 182.47727966]
[46.31735611 167.59323120]
[53.35010147 154.34407043]
[66.72090912 147.54542542]
[81.56991577 149.66839600]
[92.50000000 159.94137573]
[92.50000000 144.94137573]
[92.50000000 129.94137573]
[80.29508209 123.75820923]
[71.96173859 112.90706635]
[69.13730621 99.51997375]
[72.37670898 86.22718811]
[81.04348755 75.64046478]
[93.43479919 69.83985138]
[93.90129852 54.84711075]
[94.36779785 39.85436630]
[94.83429718 24.86162186]
[95.30078888 9.86887646]
[95.76728821 -5.12386751]
[88.46291351 -19.15799332]
[96.59229279 -31.63847923]
[97.05878448 -46.63122559]
[97.52528381 -61.62397003]
[97.99178314 -76.61671448]
[87.63249969 -85.38941193]
[84.32150269 -98.35236359]
[89.06423950 -110.65315247]
[99.89435577 -117.82187653]
[100.82689667 -132.79286194]
[101.75944519 -147.76383972]
[102.69198608 -162.73483276]
[103.62453461 -177.70581055]
[104.55707550 -192.67680359]
[105.48962402 -207.64778137]
[91.41384125 -213.19102478]
[79.74122620 -222.81419373]
[71.61534119 -235.57449341]
[67.83227539 -250.22180176]
[68.76265717 -265.32110596]
[74.31533813 -279.39318848]
[83.94631958 -291.05935669]
[96.71205902 -299.17666626]
[111.36190033 -302.94992065]
[126.46059418 -302.00942993]
[140.52893066 -296.44732666]
[152.18864441 -286.80853271]
[160.29742432 -274.03735352]
[164.06085205 -259.38497925]
[163.11022949 -244.28692627]
[157.53869629 -230.22230530]
[147.89208984 -218.56906128]
[135.11549377 -210.46884155]
[120.46060181 -206.71524048]
[119.52806091 -191.74424744]
[118.59551239 -176.77326965]
[117.66297150 -161.80227661]
[116.73043060 -146.83129883]
[115.79788208 -131.86032104]
[114.86534119 -116.88933563]
[126.50561523 -104.86255646]
[125.92009735 -87.79985046]
[112.98452759 -76.15021515]
[112.51802826 -61.15747070]
[112.05152893 -46.16472626]
[111.58503723 -31.17198181]
[118.92277527 -18.21023750]
[110.76003265 -4.65736961]
[110.29353333 10.33537483]
[109.82704163 25.32811928]
[109.36054230 40.32086182]
[108.89404297 55.31360626]
[108.42754364 70.30635071]
[122.15223694 78.50547791]
[129.93409729 92.47098541]
[129.68547058 108.45632172]
[121.47304535 122.17305756]
[107.50000000 129.94137573]
[107.50000000 144.94137573]
[107.50000000 159.94137573]
[109.36148071 174.82542419]
[113.05566406 189.36341858]
[116.74984741 203.90139771]
[120.44403076 218.43937683]
[124.13821411 232.97737122]
[138.80317688 237.76719666]
[148.53282166 249.73956299]
[150.22245789 265.07412720]
[143.33293152 278.87768555]
[130.06266785 286.74554443]
[114.64614868 286.16714478]
[102.00273895 277.32702637]
[96.16690063 263.04605103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[14 87]
[15 86]
[16 85]
[22 80]
[23 79]
[24 78]
[25 77]
[26 76]
[27 75]
[29 73]
[30 72]
[31 71]
[32 70]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
