%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGGCGCCUUGGACGCGGAGCCGUGGGACGAGGGCGGCGAUGGCGUCCCAUGUAGAGUGCCGUCCUCUGGGAGUGUUUGAGUGUGAACUCUGUACCUUGACAGCUCCGUACAGCUAUGUGGGACAGAAGCCCCCCAACA\
) } def
/len { sequence length } bind def

/coor [
[-1.86509335 247.78404236]
[-11.10582542 259.59967041]
[-20.34655762 271.41528320]
[-29.58728981 283.23089600]
[-38.69675446 295.14801025]
[-47.67383957 307.16516113]
[-56.65092468 319.18231201]
[-58.71125793 334.86880493]
[-72.52686310 340.43460083]
[-81.50395203 352.45175171]
[-76.77678680 367.23126221]
[-81.67155457 381.95608521]
[-94.30612183 390.96426392]
[-109.82224274 390.79196167]
[-122.25364685 381.50543213]
[-126.82020569 366.67550659]
[-121.76598358 352.00463867]
[-109.03443909 343.13406372]
[-93.52110291 343.47467041]
[-84.54402161 331.45751953]
[-83.12578583 316.63058472]
[-68.66807556 310.20523071]
[-59.69099426 298.18807983]
[-50.71390915 286.17092896]
[-49.21898270 278.87207031]
[-41.40290833 273.99017334]
[-32.16217804 262.17456055]
[-22.92144585 250.35893250]
[-13.68071270 238.54330444]
[-20.08878899 223.74893188]
[-18.17317009 207.64630127]
[-8.36044884 194.61863708]
[6.76031446 188.25979614]
[23.12013817 190.38313293]
[32.09722137 178.36598206]
[41.07430649 166.34883118]
[42.49253845 151.52189636]
[56.95024872 145.09654236]
[65.92733002 133.07937622]
[74.90441895 121.06223297]
[68.78991699 109.96675873]
[67.34197235 97.38105011]
[70.77708435 85.18692780]
[78.58164215 75.20766449]
[89.58869171 68.93538666]
[102.15245056 67.30790710]
[114.39437103 70.56858826]
[123.89422607 58.96028519]
[133.39408875 47.35198212]
[142.89393616 35.74367905]
[152.39379883 24.13537407]
[161.89364624 12.52707005]
[171.39350891 0.91876632]
[180.89337158 -10.68953705]
[190.39321899 -22.29784203]
[199.89308167 -33.90614319]
[209.39294434 -45.51445007]
[211.90632629 -63.71929169]
[228.49092102 -69.35265350]
[237.73165894 -81.16827393]
[246.97238159 -92.98388672]
[256.21310425 -104.79950714]
[241.48042297 -101.98039246]
[227.50442505 -107.42755890]
[218.56517029 -119.47287750]
[217.40019226 -134.42756653]
[224.36628723 -147.71189880]
[237.33013916 -155.25767517]
[252.32167053 -154.75407410]
[264.74990845 -146.35530090]
[270.80877686 -132.63342285]
[268.64376831 -117.79273224]
[280.03909302 -127.54706573]
[291.43438721 -137.30139160]
[302.82968140 -147.05572510]
[314.22500610 -156.81005859]
[315.59808350 -172.32626343]
[327.29348755 -182.05621338]
[342.07736206 -180.65155029]
[353.47265625 -190.40588379]
[364.86798096 -200.16021729]
[376.26327515 -209.91455078]
[387.65856934 -219.66888428]
[392.18997192 -227.69325256]
[399.41555786 -229.50956726]
[411.02386475 -239.00942993]
[422.63217163 -248.50927734]
[422.64343262 -264.14685059]
[432.74322510 -276.08538818]
[448.16275024 -278.68783569]
[461.62133789 -270.72540283]
[466.76431274 -255.95774841]
[461.16326904 -241.35766602]
[447.46286011 -233.81887817]
[432.13201904 -236.90097046]
[420.52374268 -227.40112305]
[408.91543579 -217.90126038]
[397.41290283 -208.27357483]
[386.01760864 -198.51924133]
[374.62231445 -188.76492310]
[363.22698975 -179.01058960]
[351.83169556 -169.25625610]
[350.93914795 -154.43266296]
[339.52163696 -144.37805176]
[323.97933960 -145.41474915]
[312.58401489 -135.66041565]
[301.18872070 -125.90608978]
[289.79339600 -116.15175629]
[278.39810181 -106.39742279]
[268.02874756 -95.55877686]
[258.78799438 -83.74315643]
[249.54727173 -71.92753601]
[240.30654907 -60.11191940]
[241.45394897 -48.02020645]
[233.78372192 -38.08957672]
[221.00123596 -36.01459122]
[211.50138855 -24.40628815]
[202.00152588 -12.79798412]
[192.50167847 -1.18968046]
[183.00181580 10.41862297]
[173.50195312 22.02692795]
[164.00210571 33.63523102]
[154.50224304 45.24353409]
[145.00238037 56.85183716]
[135.50253296 68.46014404]
[126.00267029 80.06844330]
[132.49938965 95.85330200]
[130.17436218 112.76375580]
[119.65869904 126.20957184]
[103.80680084 132.54095459]
[86.92156982 130.03932190]
[77.94448853 142.05647278]
[68.96739960 154.07362366]
[66.90706635 169.76010132]
[53.09146118 175.32591248]
[44.11437607 187.34306335]
[35.13729095 199.36021423]
[41.32882690 211.95108032]
[41.47345734 225.91487122]
[35.60009003 238.51106262]
[24.91310692 247.29226685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 24]
[6 23]
[7 22]
[9 20]
[10 19]
[34 137]
[35 136]
[36 135]
[38 133]
[39 132]
[40 131]
[47 126]
[48 125]
[49 124]
[50 123]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
[59 113]
[60 112]
[61 111]
[62 110]
[72 109]
[73 108]
[74 107]
[75 106]
[76 105]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
