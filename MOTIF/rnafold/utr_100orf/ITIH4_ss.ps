%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCCAUUCCCCACUUGCUGUCGAGUUCAGAAGCCUCCUGGCAGACACUGGAGCCACGAUGAAGCCCCCAAGGCCUGUCCGUACCUGCAGCAAAGUUCUCGUCCUGCUUUCACUGCUGGCCAUCCACCAGACUACUACUGCCGAAAAGAAUGGCAUCG\
) } def
/len { sequence length } bind def

/coor [
[10.56503487 405.29705811]
[2.65340972 392.13262939]
[2.39999294 376.77584839]
[9.87295246 363.35754395]
[23.06209946 355.48724365]
[22.76759338 340.49011230]
[22.47308922 325.49301147]
[22.17858315 310.49591064]
[21.88407707 295.49880981]
[21.58957291 280.50167847]
[16.81161690 279.39276123]
[12.20344257 277.71249390]
[7.83309650 275.48568726]
[3.76511192 272.74523926]
[0.05955894 269.53158569]
[-12.24646282 278.10842896]
[-24.55248451 286.68524170]
[-29.83852959 294.19979858]
[-37.18537903 295.30685425]
[-49.65742493 303.64041138]
[-62.12946701 311.97396851]
[-63.65191269 327.53726196]
[-74.85818481 338.44384766]
[-90.45702362 339.54394531]
[-103.08313751 330.31814575]
[-106.77485657 315.12258911]
[-99.78907013 301.13214111]
[-85.42424774 294.95266724]
[-70.46302032 299.50192261]
[-57.99097824 291.16836548]
[-45.51893234 282.83480835]
[-33.12930298 274.37921143]
[-20.82328224 265.80239868]
[-8.51726055 257.22558594]
[-12.13471699 242.39105225]
[-9.98498249 227.22998047]
[-2.34287953 213.91038513]
[9.72905159 204.34904480]
[24.52817917 199.93563843]
[39.95188904 201.33088684]
[46.76174927 187.96578979]
[53.57160568 174.60069275]
[60.38146210 161.23558044]
[67.19132233 147.87048340]
[74.00117493 134.50538635]
[60.96496582 118.51558685]
[56.82959366 98.30383301]
[62.53801727 78.47883606]
[76.78858185 63.56113052]
[71.04833221 49.70293808]
[65.30808258 35.84474564]
[52.87865067 26.05598640]
[55.15646744 11.33658314]
[49.41621780 -2.52160954]
[35.09049988 -8.63811111]
[29.46648407 -22.77406120]
[35.38591766 -36.39374924]
[29.64566612 -50.25194168]
[23.90541458 -64.11013794]
[8.71044540 -65.04517365]
[-4.51781940 -72.45462036]
[-13.18181038 -84.82213593]
[-15.60694218 -99.66396332]
[-11.36506557 -114.02766418]
[-1.34890163 -125.07944489]
[-7.08915329 -138.93763733]
[-12.82940483 -152.79583740]
[-27.04135323 -160.23895264]
[-29.94149399 -176.01770020]
[-19.30508804 -188.02796936]
[-3.29147482 -187.05650330]
[5.81507158 -173.84852600]
[1.02878845 -158.53608704]
[6.76904011 -144.67788696]
[12.50929165 -130.81970215]
[27.40657997 -130.08740234]
[40.56270981 -122.93019104]
[49.34263992 -110.72061157]
[51.96142578 -95.84909058]
[47.84690475 -81.25601959]
[37.76360703 -69.85038757]
[43.50386047 -55.99219513]
[49.24411011 -42.13399887]
[63.06035614 -36.68909836]
[69.07920074 -22.71669197]
[63.27441025 -8.26186085]
[69.01466370 5.59633207]
[81.03350830 14.39386177]
[79.16627502 30.10449409]
[84.90652466 43.96268845]
[90.64678192 57.82088089]
[110.08570862 57.99000931]
[127.48270416 66.66440582]
[138.88879395 56.92268372]
[150.29487610 47.18096161]
[161.70097351 37.43923950]
[173.10705566 27.69752121]
[170.91876221 12.42614460]
[177.35494995 -1.59451735]
[190.36187744 -9.89052391]
[205.78904724 -9.81464958]
[218.71372986 -1.39110518]
[225.01170349 12.69218636]
[222.67329407 27.94129944]
[212.44470215 39.49029541]
[197.58981323 43.65393448]
[182.84878540 39.10361099]
[171.44268799 48.84532928]
[160.03660583 58.58705139]
[148.63050842 68.32877350]
[137.22442627 78.07049561]
[140.11608887 83.96065521]
[142.08239746 90.22080231]
[143.07800293 96.70652008]
[158.00576782 98.17678070]
[172.93353271 99.64703369]
[187.42564392 93.29964447]
[199.33325195 102.24718475]
[214.26101685 103.71743774]
[229.18878174 105.18769836]
[243.89472961 97.93048096]
[257.38052368 107.26138306]
[255.77311707 123.58155823]
[240.72608948 130.10221863]
[227.71853638 120.11546326]
[212.79075623 118.64521027]
[197.86299133 117.17494965]
[184.43861389 123.62750244]
[171.46328735 114.57480621]
[156.53550720 113.10455322]
[141.60774231 111.63429260]
[138.47950745 119.64403534]
[133.82695007 126.87560272]
[127.83437347 133.04252625]
[120.73917389 137.90049744]
[112.82240295 141.25708008]
[104.39768982 142.97930908]
[95.79876709 142.99896240]
[87.36627197 141.31524658]
[80.55641937 154.68034363]
[73.74655914 168.04544067]
[66.93670654 181.41053772]
[60.12684631 194.77563477]
[53.31698990 208.14073181]
[64.97643280 222.54216003]
[69.08795929 240.54571533]
[64.86480713 258.45925903]
[53.22373199 272.63385010]
[36.58668137 280.20718384]
[36.88118744 295.20428467]
[37.17569351 310.20141602]
[37.47019577 325.19851685]
[37.76470184 340.19561768]
[38.05920792 355.19271851]
[51.54717255 362.53918457]
[59.54117203 375.65374756]
[59.89085388 391.00863647]
[52.50216293 404.47351074]
[39.36261368 412.42636108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[15 34]
[16 33]
[17 32]
[19 31]
[20 30]
[21 29]
[40 144]
[41 143]
[42 142]
[43 141]
[44 140]
[45 139]
[49 91]
[50 90]
[51 89]
[53 87]
[54 86]
[57 83]
[58 82]
[59 81]
[65 75]
[66 74]
[67 73]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
[114 131]
[115 130]
[116 129]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
