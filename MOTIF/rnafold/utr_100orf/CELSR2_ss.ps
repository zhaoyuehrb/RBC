%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGCCGGAGGAGGAGCCGCCGCCGCCGUUGACCCGGCCGCCGGCCGGGAGCUGGGAGAGAUGCGGAGCCCGGCCACCGGCGUCCCCCUCCCAACGCCGCCGCCGCCGCUGCUGCUGCUGUUGCUGCUGCUGCUGCCGCCGCCACUAUUGGGAGACCAAG\
) } def
/len { sequence length } bind def

/coor [
[75.49154663 111.65852356]
[73.14173126 103.90112305]
[58.27972412 101.87115479]
[43.41772079 99.84118652]
[28.53672981 97.95541382]
[13.63815403 96.21401978]
[-1.26042163 94.47262573]
[-16.15899658 92.73123169]
[-31.05757141 90.98983765]
[-45.66267776 97.07272339]
[-57.40564728 87.91019440]
[-72.30422211 86.16880035]
[-90.38409424 95.01067352]
[-105.43228912 82.91387177]
[-120.38718414 81.75148773]
[-132.33106995 91.75054932]
[-147.48089600 90.35868835]
[-156.93986511 78.91038513]
[-171.89476013 77.74800110]
[-186.84965515 76.58561707]
[-201.80455017 75.42323303]
[-209.84849548 89.53973389]
[-223.18876648 98.71217346]
[-239.13453674 101.15178680]
[-254.49600220 96.42173004]
[-266.22256470 85.51426697]
[-272.00845337 70.64313507]
[-286.98309326 69.77095795]
[-294.44595337 83.03997803]
[-306.87924194 91.71758270]
[-321.78619385 94.12653351]
[-336.20156860 89.84191132]
[-347.28140259 79.76489258]
[-352.86413574 65.93382263]
[-367.83877563 65.06165314]
[-382.81338501 64.18947601]
[-397.78802490 63.31730652]
[-412.76263428 62.44513321]
[-427.73727417 61.57296371]
[-442.71188354 60.70079041]
[-458.87579346 65.81593323]
[-468.26562500 51.69974136]
[-457.30047607 38.76909256]
[-441.83972168 45.72616577]
[-426.86508179 46.59833908]
[-411.89047241 47.47051239]
[-396.91583252 48.34268570]
[-381.94122314 49.21485901]
[-366.96661377 50.08702850]
[-351.99197388 50.95920181]
[-344.84130859 37.86977005]
[-332.66650391 29.14717865]
[-317.85116577 26.56505394]
[-303.32467651 30.68831062]
[-291.98287964 40.75065231]
[-286.11093140 54.79633713]
[-271.13629150 55.66851044]
[-264.98992920 43.20254135]
[-254.51747131 33.99855042]
[-241.28340149 29.47562408]
[-227.28170776 30.35022545]
[-214.63539124 36.52293015]
[-205.27462769 47.08845901]
[-200.64216614 60.46833420]
[-185.68727112 61.63072205]
[-170.73237610 62.79310608]
[-155.77748108 63.95549393]
[-144.66314697 54.10628128]
[-129.48019409 55.07206726]
[-119.22479248 66.79659271]
[-104.26989746 67.95897675]
[-97.08743286 60.60667038]
[-86.82317352 58.40119171]
[-76.84441376 62.31467438]
[-70.56282806 71.27022552]
[-55.66425323 73.01161957]
[-42.12479401 66.80417633]
[-29.31617928 76.09126282]
[-14.41760349 77.83265686]
[0.48097214 79.57405090]
[15.37954712 81.31544495]
[30.27812195 83.05683899]
[37.32150650 80.69828033]
[45.44768906 84.97917938]
[60.30969620 87.00914764]
[75.17169952 89.03911591]
[91.12058258 74.35353088]
[112.73563385 76.03358459]
[126.22377014 93.00720215]
[141.22094727 93.29806519]
[156.21812439 93.58893585]
[171.21530151 93.87980652]
[186.21249390 94.17067719]
[201.20967102 94.46154785]
[216.20684814 94.75241852]
[224.58523560 80.52486420]
[238.90628052 72.49725342]
[255.22776794 72.77117157]
[269.11102295 81.17774200]
[276.82794189 95.34921265]
[291.82794189 95.34921265]
[305.62811279 87.61190796]
[318.35537720 95.34921265]
[333.35537720 95.34921265]
[347.15554810 87.61190796]
[359.88281250 95.34921265]
[374.88281250 95.34921265]
[388.68298340 87.61190796]
[401.41027832 95.34921265]
[416.41027832 95.34921265]
[430.21044922 87.61190796]
[442.93771362 95.34921265]
[457.93771362 95.34921265]
[471.73788452 87.61190796]
[484.46514893 95.34921265]
[499.46514893 95.34921265]
[513.26531982 87.61190796]
[525.99261475 95.34921265]
[540.99261475 95.34921265]
[554.91638184 86.68550873]
[569.25183105 94.64963531]
[569.25183105 111.04878235]
[554.91638184 119.01291656]
[540.99261475 110.34921265]
[525.99261475 110.34921265]
[513.26531982 118.08650970]
[499.46514893 110.34921265]
[484.46514893 110.34921265]
[471.73788452 118.08650970]
[457.93771362 110.34921265]
[442.93771362 110.34921265]
[430.21044922 118.08650970]
[416.41027832 110.34921265]
[401.41027832 110.34921265]
[388.68298340 118.08650970]
[374.88281250 110.34921265]
[359.88281250 110.34921265]
[347.15554810 118.08650970]
[333.35537720 110.34921265]
[318.35537720 110.34921265]
[305.62811279 118.08650970]
[291.82794189 110.34921265]
[276.82794189 110.34921265]
[270.77798462 122.62245178]
[259.97183228 131.12419128]
[246.49017334 134.14472961]
[232.96040344 131.03677368]
[222.04464722 122.35319519]
[215.91596985 109.74959564]
[200.91879272 109.45872498]
[185.92161560 109.16786194]
[170.92443848 108.87699127]
[155.92726135 108.58612061]
[140.93008423 108.29524994]
[125.93289948 108.00437927]
[122.41263580 115.30551910]
[116.89330292 121.24150848]
[109.86719513 125.28287506]
[101.96098328 127.06916809]
[93.87986755 126.44105530]
[86.34463501 123.45455933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 82]
[6 81]
[7 80]
[8 79]
[9 78]
[11 76]
[12 75]
[14 71]
[15 70]
[18 67]
[19 66]
[20 65]
[21 64]
[27 57]
[28 56]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[89 155]
[90 154]
[91 153]
[92 152]
[93 151]
[94 150]
[95 149]
[100 143]
[101 142]
[103 140]
[104 139]
[106 137]
[107 136]
[109 134]
[110 133]
[112 131]
[113 130]
[115 128]
[116 127]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
