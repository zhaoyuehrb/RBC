%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGUCGCAGGUGUUGCAGAUCCUGCGCCAGGGGGUGUGGGCCUCGCUCACCGGCGGUUGGUUCUUCGACCCGCACCAGAGCACCUUCUCCAACUGCU\
) } def
/len { sequence length } bind def

/coor [
[91.03488922 157.96563721]
[102.11883545 147.10626221]
[99.79535675 132.28730774]
[97.47188568 117.46835327]
[84.18171692 110.51340485]
[70.68167877 117.05166626]
[64.18206787 123.72607422]
[56.65857697 123.57600403]
[42.96172714 129.69125366]
[29.26487923 135.80650330]
[15.56803036 141.92176819]
[1.87118149 148.03701782]
[-11.82566738 154.15226746]
[-13.33544254 169.43678284]
[-22.29823494 181.90930176]
[-36.30310059 188.21479797]
[-51.58280182 186.65711975]
[-64.02716827 177.65528870]
[-70.28874207 163.63072205]
[-68.68317413 148.35597229]
[-59.64236832 135.93988037]
[-45.59824753 129.72230530]
[-30.32861519 131.37574768]
[-17.94092178 140.45542908]
[-4.24407291 134.34016418]
[9.45277596 128.22491455]
[23.14962387 122.10966492]
[36.84647369 115.99440765]
[50.54332352 109.87915039]
[64.14340973 103.55162811]
[77.64344788 97.01335907]
[79.83855438 93.41017914]
[82.55564880 90.49255371]
[85.62171936 88.32256317]
[76.88059998 76.13269806]
[68.13948822 63.94282913]
[59.39836884 51.75296021]
[50.65725327 39.56309128]
[35.50265884 33.29649734]
[33.62092209 17.00566864]
[46.94781876 7.44921207]
[61.77378082 14.45799160]
[62.84712219 30.82197571]
[71.58824158 43.01184464]
[80.32935333 55.20171356]
[89.07047272 67.39157867]
[97.81158447 79.58145142]
[112.59261322 82.13510132]
[124.91695404 73.58461761]
[137.24128723 65.03413391]
[149.56561279 56.48365021]
[148.40074158 41.23274231]
[154.98248291 27.53684998]
[167.45298767 19.03080368]
[182.40670776 17.91629219]
[195.82017517 24.39276886]
[208.14450073 15.84228611]
[220.46884155 7.29180193]
[232.79316711 -1.25868189]
[244.98304749 -9.99979782]
[257.03549194 -18.92943001]
[269.08795166 -27.85906410]
[281.14041138 -36.78869629]
[287.17056274 -52.03891754]
[303.43014526 -54.17377472]
[313.19271851 -40.99711227]
[306.41534424 -26.06394577]
[290.07003784 -24.73624229]
[278.01757812 -15.80660915]
[265.96511841 -6.87697601]
[253.91267395 2.05265689]
[250.34942627 8.68053246]
[241.34365845 11.06565285]
[229.01931763 19.61613655]
[216.69499207 28.16662025]
[204.37065125 36.71710587]
[205.74078369 51.54910660]
[199.46112061 65.16607666]
[187.12722778 73.86904144]
[171.99382019 75.23888397]
[158.11610413 68.80798340]
[145.79176331 77.35846710]
[133.46743774 85.90895081]
[121.14309692 94.45943451]
[135.33134460 89.59181213]
[149.53042603 94.42772675]
[157.79826355 106.94343567]
[156.67489624 121.90131378]
[146.63043213 133.04173279]
[131.86833191 135.70260620]
[118.56627655 128.77040100]
[112.29084778 115.14488220]
[114.61431885 129.96383667]
[116.93778992 144.78279114]
[130.81343079 151.72872925]
[137.92643738 165.51948547]
[135.54171753 180.85221863]
[124.57623291 191.83119202]
[109.24643707 194.23475647]
[95.44696045 187.13870239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 31]
[6 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[48 84]
[49 83]
[50 82]
[51 81]
[56 76]
[57 75]
[58 74]
[59 73]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
