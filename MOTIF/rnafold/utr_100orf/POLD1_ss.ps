%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGGCAAGCGGCGGCCAGGCCCAGGGCCCGGGGUGCCCCCAAAGCGGGCCCGUGGGGGCCUCUGGGAUGAUGAUGAUGCACCUCGGCCAUCCCAAU\
) } def
/len { sequence length } bind def

/coor [
[106.02666473 408.69436646]
[107.90779877 393.17034912]
[119.36273956 382.52523804]
[118.43019104 367.55426025]
[117.49765015 352.58328247]
[116.56510925 337.61230469]
[115.63256073 322.64129639]
[114.70001984 307.67031860]
[113.76747131 292.69934082]
[103.27013397 278.73126221]
[111.36913300 262.28579712]
[109.97144318 247.35105896]
[98.37564087 238.07350159]
[96.74543762 222.94746399]
[106.55521393 210.84762573]
[105.15752411 195.91288757]
[103.75983429 180.97814941]
[89.02346039 170.33935547]
[86.52274323 152.01937866]
[98.26116943 137.32878113]
[95.93769836 122.50981903]
[80.97449493 112.69742584]
[77.65438080 95.11454773]
[88.00917053 80.52143860]
[84.76890564 65.87559509]
[81.52864075 51.22975159]
[78.28836823 36.58391190]
[75.04810333 21.93807030]
[71.58045959 7.34439278]
[67.88627625 -7.19359255]
[64.19209290 -21.73157692]
[60.49790955 -36.26956177]
[56.80372238 -50.80754852]
[40.23218918 -59.69509888]
[35.32353592 -77.52149963]
[44.68581390 -93.10008240]
[40.09495163 -107.38027954]
[34.39261627 -114.74749756]
[35.59086609 -122.17647552]
[31.44633865 -136.59254456]
[27.30181313 -151.00860596]
[23.15728760 -165.42466736]
[8.79473019 -171.60940552]
[1.81406677 -185.60241699]
[5.51135254 -200.79663086]
[18.14084244 -210.01780701]
[33.73927689 -208.91197205]
[44.94155121 -198.00129700]
[46.45829773 -182.43743896]
[37.57335281 -169.56919861]
[41.71787643 -155.15313721]
[45.86240387 -140.73706055]
[50.00692749 -126.32099915]
[54.37514877 -111.97113800]
[58.96600723 -97.69094086]
[70.19560242 -94.72351074]
[78.62815857 -86.56096649]
[82.02880096 -75.20201874]
[79.41615295 -63.51234818]
[71.34170532 -54.50173187]
[75.03589630 -39.96374512]
[78.73007965 -25.42576027]
[82.42426300 -10.88777637]
[86.11844635 3.65020895]
[90.90083313 9.46005154]
[89.69394684 18.69780350]
[92.93421173 33.34364319]
[96.17447662 47.98948669]
[99.41474915 62.63532639]
[102.65501404 77.28116608]
[113.35476685 81.43000793]
[120.69287872 90.25325775]
[122.82221985 101.52993011]
[119.20678711 112.42150116]
[110.75666046 120.18634796]
[113.08013153 135.00531006]
[124.04846954 140.11248779]
[131.04953003 149.83151245]
[132.39212036 161.61231995]
[127.85105133 172.43423462]
[118.69458008 179.58045959]
[120.09226990 194.51519775]
[121.48995209 209.44993591]
[133.37448120 219.51947021]
[134.57919312 234.68533325]
[124.90618134 245.95336914]
[126.30387115 260.88809204]
[135.78599548 269.80136108]
[136.55291748 282.38851929]
[128.73844910 291.76678467]
[129.67100525 306.73779297]
[130.60354614 321.70877075]
[131.53608704 336.67974854]
[132.46862793 351.65072632]
[133.40118408 366.62170410]
[134.33372498 381.59271240]
[147.02116394 390.73397827]
[150.81427002 405.90454102]
[143.92205811 419.94134521]
[129.59881592 426.21661377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 96]
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[9 90]
[11 87]
[12 86]
[15 83]
[16 82]
[17 81]
[20 76]
[21 75]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[36 55]
[37 54]
[39 53]
[40 52]
[41 51]
[42 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
