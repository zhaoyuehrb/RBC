%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCCAUCUUGUUAAAAGAGCCCGCCUCUCCCUCGGCCGGUCACUCUUUCGCCACGGGCGGGGUUGCACCAUCCGGCAGGGCGGGGCCCGGCCAUGGCGACCGCGGAGCCCAGCGGGCGCGCGUUGCGGUUGUCUACCCCGGGACCCCGGCCCAGCGGGGCUCGGGACCGCGCGCCGGGAGCUGCGGGGCCAC\
) } def
/len { sequence length } bind def

/coor [
[121.04626465 194.86470032]
[113.29472351 181.28355408]
[116.13734436 165.90650940]
[128.23193359 155.99414062]
[128.23193359 140.99414062]
[128.23193359 125.99414062]
[120.92189789 124.31681824]
[98.99179077 119.28485870]
[92.45245361 132.78437805]
[85.91310883 146.28388977]
[79.37376404 159.78341675]
[83.25812531 175.34912109]
[73.39617920 188.00303650]
[57.35316467 188.03816223]
[47.43590927 175.42755127]
[51.25208664 159.84497070]
[65.87424469 153.24406433]
[72.41358948 139.74455261]
[78.95293427 126.24503326]
[85.49227142 112.74551392]
[74.34510040 102.70855713]
[61.60308456 110.62316132]
[48.86106491 118.53776550]
[41.22077179 132.39187622]
[26.32685089 132.53471375]
[13.58483219 140.44931030]
[0.84281278 148.36392212]
[-0.14680949 163.84941101]
[-10.07546711 175.77423096]
[-25.12538910 179.55305481]
[-39.50957108 173.73283386]
[-47.69700623 160.55157471]
[-46.53945541 145.07774353]
[-36.48201752 133.26132202]
[-21.39199066 129.64598083]
[-7.07179070 135.62190247]
[5.67022800 127.70729828]
[18.41224670 119.79269409]
[25.14114571 106.50468445]
[40.94646072 105.79574585]
[53.68848038 97.88114166]
[66.43049622 89.96653748]
[67.57391357 82.55420685]
[54.55779266 90.00945282]
[40.61357498 84.48144531]
[36.24131775 70.13281250]
[44.73335266 57.76812744]
[59.69513702 56.69806290]
[69.86074066 67.72955322]
[71.00415039 60.31722641]
[61.23947906 48.93077850]
[51.47481155 37.54433060]
[41.71014023 26.15788269]
[31.94546700 14.77143383]
[22.18079758 3.38498616]
[9.39520454 1.61959338]
[1.49685705 -8.07646370]
[2.30146265 -20.15460777]
[-7.27850533 -31.69688797]
[-16.85847282 -43.23916626]
[-31.62589264 -48.91665649]
[-33.80060959 -63.65164566]
[-43.38057709 -75.19392395]
[-52.96054459 -86.73620605]
[-62.54051208 -98.27848816]
[-72.12048340 -109.82076263]
[-77.04197693 -111.63867188]
[-80.42776489 -114.84692383]
[-82.00504303 -118.62411499]
[-81.86811066 -122.15999603]
[-90.87924194 -134.15164185]
[-105.35511780 -140.53596497]
[-106.81539917 -155.35881042]
[-115.82653046 -167.35044861]
[-124.83766937 -179.34208679]
[-140.12841797 -185.26872253]
[-142.37345886 -201.51347351]
[-129.26327515 -211.36512756]
[-114.28450775 -204.68916321]
[-112.84602356 -188.35322571]
[-103.83489227 -176.36158752]
[-94.82376099 -164.36994934]
[-80.99241638 -158.84333801]
[-78.88760376 -143.16276550]
[-69.87646484 -131.17112732]
[-60.57820129 -119.40073395]
[-50.99823380 -107.85845184]
[-41.41826630 -96.31616974]
[-31.83829880 -84.77389526]
[-22.25833130 -73.23161316]
[-8.17613506 -68.37970734]
[-5.31619310 -52.81913376]
[4.26377439 -41.27685547]
[13.84374237 -29.73457527]
[30.60264778 -24.54739571]
[33.56724548 -6.37968493]
[43.33191681 5.00676346]
[53.09658813 16.39321136]
[62.86125946 27.77965927]
[72.62593079 39.16610718]
[82.39060211 50.55255508]
[153.01879883 100.18827057]
[168.00663757 99.58428192]
[182.99447632 98.98029327]
[197.98231506 98.37630463]
[212.97013855 97.77231598]
[227.95797729 97.16831970]
[238.64340210 85.83432007]
[253.85179138 85.43529510]
[264.59118652 95.69205475]
[279.57901001 95.08806610]
[294.56686401 94.48407745]
[298.17541504 92.01509857]
[301.99783325 90.93948364]
[305.56732178 91.15232086]
[308.49975586 92.40715027]
[310.53280640 94.35546112]
[325.52844238 94.71791840]
[340.52404785 95.08037567]
[355.51968384 95.44283295]
[370.51528931 95.80529022]
[385.51092529 96.16774750]
[400.50653076 96.53019714]
[415.50216675 96.89265442]
[420.81674194 84.17671967]
[431.39257812 74.54615784]
[445.54455566 70.12789154]
[460.75628662 72.16658783]
[474.12673950 80.71562195]
[487.97332764 74.94747925]
[501.81994629 69.17932892]
[509.23443604 54.95241928]
[525.00732422 52.02050781]
[537.03894043 62.63270569]
[536.09973145 78.64824677]
[522.91015625 87.78137207]
[507.58810425 83.02593231]
[493.74148560 88.79408264]
[479.89486694 94.56223297]
[481.22229004 109.50337982]
[495.86889648 112.74014282]
[510.51550293 115.97690582]
[525.16210938 119.21366882]
[539.80871582 122.45043182]
[548.87719727 121.24612427]
[554.66436768 125.85912323]
[569.25689697 129.33142090]
[583.84948730 132.80372620]
[598.44207764 136.27601624]
[613.03460693 139.74832153]
[626.36029053 131.25108337]
[641.77313232 134.74681091]
[650.12896729 148.16154480]
[646.47052002 163.53656006]
[632.96813965 171.75013733]
[617.63269043 167.92930603]
[609.56231689 154.34089661]
[594.96978760 150.86859131]
[580.37719727 147.39628601]
[565.78460693 143.92399597]
[551.19201660 140.45169067]
[536.57196045 137.09704590]
[521.92535400 133.86029053]
[507.27874756 130.62351990]
[492.63214111 127.38676453]
[477.98550415 124.15000153]
[461.03915405 137.61828613]
[440.33969116 139.08766174]
[423.20782471 129.04832458]
[415.13970947 111.88827515]
[400.14407349 111.52581787]
[385.14846802 111.16336060]
[370.15283203 110.80091095]
[355.15722656 110.43845367]
[340.16159058 110.07599640]
[325.16598511 109.71353912]
[310.17034912 109.35108185]
[295.17083740 109.47191620]
[280.18301392 110.07590485]
[265.19515991 110.67989349]
[255.31593323 121.76755524]
[240.12474060 122.59358978]
[228.56196594 112.15615845]
[213.57412720 112.76014709]
[198.58630371 113.36413574]
[183.59846497 113.96812439]
[168.61062622 114.57211304]
[153.62278748 115.17610168]
[143.23193359 125.99414062]
[143.23193359 140.99414062]
[143.23193359 155.99414062]
[155.32650757 165.90650940]
[158.16912842 181.28355408]
[150.41758728 194.86470032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 191]
[5 190]
[6 189]
[8 20]
[9 19]
[10 18]
[11 17]
[21 42]
[22 41]
[23 40]
[25 38]
[26 37]
[27 36]
[50 101]
[51 100]
[52 99]
[53 98]
[54 97]
[55 96]
[58 94]
[59 93]
[60 92]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[70 85]
[71 84]
[73 82]
[74 81]
[75 80]
[102 188]
[103 187]
[104 186]
[105 185]
[106 184]
[107 183]
[110 180]
[111 179]
[112 178]
[117 177]
[118 176]
[119 175]
[120 174]
[121 173]
[122 172]
[123 171]
[124 170]
[129 139]
[130 138]
[131 137]
[140 166]
[141 165]
[142 164]
[143 163]
[144 162]
[146 161]
[147 160]
[148 159]
[149 158]
[150 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
