%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUCCGUCUCAGGUCGCCGCUGCGAAGGGAGCCGCCGCCAUGUCUGCGCAUCUGCAAUGGAUGGUCGUGCGGAACUGCUCCAGUUUCCUGAUCAAGAGGAAUAAGCAGACCUACAGCACUGAGCCCAAUAACUUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[128.47467041 378.45117188]
[131.69561768 363.70233154]
[138.77732849 350.36996460]
[149.19430542 339.44345093]
[162.17350769 331.73352051]
[158.26470947 317.25177002]
[154.35591125 302.77001953]
[143.56936646 292.49871826]
[147.44319153 277.15908813]
[143.53439331 262.67733765]
[139.46675110 248.23939514]
[135.24076843 233.84700012]
[121.90731812 222.48793030]
[126.29443359 204.64093018]
[121.75330353 190.34483337]
[117.21216583 176.04875183]
[112.67103577 161.75267029]
[108.12990570 147.45657349]
[103.43201447 133.21122742]
[98.57792664 119.01835632]
[78.42889404 105.27166748]
[86.66837311 78.44997406]
[76.47729492 67.44352722]
[66.28620911 56.43708420]
[56.09513092 45.43064117]
[47.90169907 41.21640778]
[45.80434418 34.06867218]
[35.85750580 22.84101105]
[20.32018852 21.73217392]
[10.39262009 10.20403194]
[11.54547977 -4.60159254]
[1.59863949 -15.82925415]
[-13.93867779 -16.93809319]
[-23.86624527 -28.46623421]
[-22.71338654 -43.27185822]
[-32.66022491 -54.49951935]
[-42.60706711 -65.72718048]
[-52.55390549 -76.95484161]
[-62.62347412 -88.07256317]
[-72.81455994 -99.07901001]
[-83.12592316 -109.97284698]
[-93.55632782 -120.75276947]
[-103.98673248 -131.53268433]
[-114.41714478 -142.31260681]
[-131.09181213 -139.70463562]
[-145.90177917 -147.44709778]
[-153.13185120 -162.32981873]
[-150.12458801 -178.43168640]
[-160.78927612 -188.97987366]
[-171.45397949 -199.52806091]
[-187.25465393 -199.19064331]
[-198.60806274 -210.18499756]
[-198.77841187 -225.98837280]
[-187.66464233 -237.22489929]
[-171.86035156 -237.22814941]
[-160.74194336 -225.99620056]
[-160.90579224 -210.19276428]
[-150.24108887 -199.64457703]
[-139.57640076 -189.09638977]
[-126.61551666 -192.47267151]
[-113.57942963 -188.95668030]
[-103.92006683 -179.36813354]
[-100.25018311 -166.14918518]
[-103.63722229 -152.74301147]
[-93.20681763 -141.96308899]
[-82.77641296 -131.18316650]
[-72.34600830 -120.40325928]
[-65.38050079 -117.76303864]
[-61.80811310 -109.27009583]
[-51.61702728 -98.26364899]
[-44.71120453 -95.47105408]
[-41.32624435 -86.90167999]
[-31.37940407 -75.67401886]
[-21.43256569 -64.44635773]
[-11.48572540 -53.21869659]
[3.35091114 -52.57852936]
[13.59836388 -41.33378220]
[12.82630062 -25.77609444]
[22.77313995 -14.54843235]
[37.60977554 -13.90826511]
[47.85722733 -2.66351676]
[47.08516693 12.89417171]
[57.03200531 24.12183380]
[67.10157776 35.23955536]
[77.29265594 46.24600220]
[87.48374176 57.25244904]
[97.67481995 68.25889587]
[112.47166443 70.71926117]
[125.67613220 63.60293961]
[138.88059998 56.48661804]
[152.08506775 49.37030029]
[165.28953552 42.25397873]
[168.27745056 26.90450478]
[180.46524048 17.10695457]
[196.09819031 17.48743248]
[207.79490662 27.86628914]
[210.03256226 43.34294510]
[201.75460815 56.60979843]
[186.86962891 61.40264511]
[172.40585327 55.45845032]
[159.20138550 62.57476807]
[145.99691772 69.69108582]
[132.79244995 76.80741119]
[119.58798218 83.92372894]
[122.66762543 92.83467102]
[122.14363098 101.66208649]
[118.52982330 109.08850098]
[112.77080536 114.16426849]
[117.62489319 128.35714722]
[123.40639496 135.53114319]
[122.42599487 142.91545105]
[126.96712494 157.21153259]
[131.50825500 171.50761414]
[136.04939270 185.80371094]
[140.59051514 200.09979248]
[151.70217896 206.74809265]
[155.16322327 218.80810547]
[149.63316345 229.62100220]
[153.85914612 244.01339722]
[159.31996155 251.43443298]
[158.01614380 258.76852417]
[161.92495728 273.25027466]
[172.99107361 284.55743408]
[168.83766174 298.86120605]
[172.74645996 313.34298706]
[176.65527344 327.82473755]
[191.75112915 327.95681763]
[206.25125122 332.15792847]
[219.07958984 340.11633301]
[229.28424072 351.24142456]
[236.10792542 364.70767212]
[239.04428101 379.51577759]
[237.87542725 394.56692505]
[232.68809509 408.74414062]
[223.86720276 420.99545288]
[212.06733704 430.41171265]
[198.16410828 436.29412842]
[183.18925476 438.20626831]
[168.25398254 436.00616455]
[154.46661377 429.85708618]
[142.85025024 420.21539307]
[134.26689148 407.79650879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 126]
[6 125]
[7 124]
[9 122]
[10 121]
[11 119]
[12 118]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[19 109]
[20 108]
[22 87]
[23 86]
[24 85]
[25 84]
[27 83]
[28 82]
[31 79]
[32 78]
[35 75]
[36 74]
[37 73]
[38 72]
[39 70]
[40 69]
[41 67]
[42 66]
[43 65]
[44 64]
[48 59]
[49 58]
[50 57]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
