%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCACUUCAGUUCCUUUUGCAUGAAGAGCUCAGAAUCAAAAGAGGAAACCAACCCCUAAGAUGAGCUUUCCAUGUAAAUUUGUAGCCAGCUUCCUUCUGAUUUUCAAUGUUUCUUCCAAAGGUGCAGUCUCCAAAGAGAUUACGAAUGCCUUGGAAACCU\
) } def
/len { sequence length } bind def

/coor [
[220.21073914 266.43869019]
[206.68963623 260.95034790]
[194.50177002 252.91645813]
[184.12068176 242.64680481]
[175.95014954 230.53810120]
[170.30853271 217.05863953]
[167.41630554 202.73019409]
[167.38751221 188.10780334]
[170.22521973 173.75831604]
[175.82131958 160.23834229]
[163.38932800 151.84515381]
[150.95733643 143.45196533]
[138.52534485 135.05877686]
[120.21461487 148.00718689]
[98.15688324 152.05691528]
[76.44079590 146.45733643]
[59.09166336 132.24636841]
[49.32534409 112.05817413]
[48.95213699 89.63487244]
[34.83503723 84.56461334]
[20.71793556 79.49436188]
[6.60083532 74.42411041]
[-7.51626539 69.35385895]
[-21.63336563 64.28360748]
[-35.75046539 59.21335220]
[-49.86756897 54.14309692]
[-65.47080231 56.76028824]
[-74.83361053 45.17637253]
[-88.95070648 40.10612106]
[-103.06781006 35.03586578]
[-117.18491364 29.96561432]
[-131.30201721 24.89536095]
[-145.41911316 19.82510757]
[-159.53620911 14.75485420]
[-173.65332031 9.68460178]
[-178.88073730 10.63611984]
[-183.47665405 9.56489182]
[-186.76861572 7.06071615]
[-188.42138672 3.89633226]
[-202.22396851 -1.97638798]
[-214.08094788 4.47175407]
[-227.29231262 2.92119002]
[-237.04400635 -5.83679008]
[-239.91336060 -18.42622566]
[-253.60092163 -24.56225586]
[-262.75909424 -25.22547340]
[-267.49014282 -30.94914627]
[-281.05764771 -37.34623337]
[-294.59579468 -29.76347160]
[-310.00140381 -31.61983681]
[-321.35076904 -42.20152283]
[-324.27975464 -57.43965149]
[-317.66213989 -71.47485352]
[-304.04254150 -78.91030884]
[-288.65795898 -76.88693237]
[-277.42407227 -66.18274689]
[-274.66055298 -50.91374207]
[-261.09304810 -44.51665497]
[-247.46488953 -38.24980927]
[-233.77732849 -32.11378098]
[-218.35618591 -38.77111816]
[-202.57218933 -32.10499573]
[-196.35124207 -15.77896595]
[-182.54866028 -9.90624523]
[-168.58305359 -4.43249941]
[-154.46595764 0.63775384]
[-140.34886169 5.70800686]
[-126.23175812 10.77826023]
[-112.11465454 15.84851360]
[-97.99755859 20.91876602]
[-83.88045502 25.98901939]
[-69.76335144 31.05927277]
[-55.16987228 28.07942200]
[-44.79731369 40.02599716]
[-30.68021393 45.09624863]
[-16.56311226 50.16650391]
[-2.44601226 55.23675537]
[11.67108822 60.30701065]
[25.78818893 65.37726593]
[39.90528870 70.44751740]
[54.02239227 75.51776886]
[58.61252594 68.37094116]
[64.30314636 62.06512451]
[70.94293213 56.76798630]
[78.35533905 52.62037277]
[86.34327698 49.73257446]
[94.69433594 48.18137360]
[103.18647766 48.00801468]
[111.59388733 49.21710968]
[119.69302368 51.77650833]
[127.26852417 55.61815643]
[134.11895752 60.63990784]
[140.06217957 66.70823669]
[144.94017029 73.66178131]
[148.62319946 81.31565094]
[151.01335144 89.46633148]
[152.04707336 97.89710236]
[151.69688416 106.38378906]
[149.97207642 114.70072937]
[146.91853333 122.62678528]
[159.35052490 131.01997375]
[171.78251648 139.41316223]
[184.21450806 147.80635071]
[195.32296753 137.03767395]
[208.41555786 128.80532837]
[222.92364502 123.46411133]
[238.21765137 121.24330139]
[253.63444519 122.23683167]
[268.50601196 126.39931488]
[282.18850708 133.54811096]
[294.09002686 143.37133789]
[303.69625854 155.44145203]
[310.59274292 169.23393250]
[314.48266602 184.14997864]
[315.19967651 199.54257202]
[312.71508789 214.74450684]
[307.13888550 229.09735107]
[319.72937012 237.25086975]
[332.31982422 245.40437317]
[344.91030884 253.55789185]
[357.50079346 261.71139526]
[370.09127808 269.86492920]
[379.04089355 271.91836548]
[382.84277344 278.29714966]
[395.27474976 286.69033813]
[407.70675659 295.08352661]
[420.13873291 303.47668457]
[442.52322388 303.29803467]
[451.46572876 322.99002075]
[464.50372314 330.40692139]
[477.54174805 337.82382202]
[490.57974243 345.24072266]
[503.61776733 352.65762329]
[516.65576172 360.07452393]
[533.04217529 359.42880249]
[541.56463623 373.43951416]
[533.45587158 387.69366455]
[517.05755615 387.52777100]
[509.23886108 373.11251831]
[496.20086670 365.69561768]
[483.16284180 358.27871704]
[470.12484741 350.86181641]
[457.08682251 343.44491577]
[444.04882812 336.02801514]
[436.98046875 339.73184204]
[428.92764282 340.32012939]
[421.21804810 337.62063599]
[415.15264893 332.00936890]
[411.78652954 324.36007690]
[411.74554443 315.90869141]
[399.31356812 307.51550293]
[386.88156128 299.12231445]
[374.44958496 290.72912598]
[361.93777466 282.45541382]
[349.34729004 274.30187988]
[336.75680542 266.14837646]
[324.16632080 257.99487305]
[311.57583618 249.84135437]
[298.98535156 241.68783569]
[288.81491089 252.11056519]
[276.79534912 260.34136963]
[263.39151001 266.05963135]
[249.12222290 269.04183960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 103]
[11 102]
[12 101]
[13 100]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[39 64]
[40 63]
[44 60]
[45 59]
[47 58]
[48 57]
[117 159]
[118 158]
[119 157]
[120 156]
[121 155]
[122 154]
[124 153]
[125 152]
[126 151]
[127 150]
[129 144]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
