%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:32:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAUUACAAUCAAACAUCAACUGAUUUCAUCUUAUUGGGGCUGUUUCCACCAUCAAGAAUUGACCUUUUCUUCUUCAUUCUCAUUGUUUUCAUUU\
) } def
/len { sequence length } bind def

/coor [
[82.79326630 422.17257690]
[81.86071777 407.20159912]
[80.92817688 392.23062134]
[79.99562836 377.25961304]
[79.06308746 362.28863525]
[78.13054657 347.31765747]
[75.92285156 345.32507324]
[74.44660187 342.26080322]
[74.14516449 338.42883301]
[75.33148956 334.29910278]
[78.13054657 330.45257568]
[79.06308746 315.48159790]
[79.99562836 300.51058960]
[80.92817688 285.53961182]
[81.86071777 270.56863403]
[67.49014282 266.36288452]
[54.40956497 259.06103516]
[43.27657700 249.02651978]
[34.65167618 236.76020813]
[28.97006035 222.87541199]
[26.51964760 208.06729126]
[27.42650795 193.07797241]
[31.64836884 178.65940857]
[38.97657776 165.53562927]
[49.04642105 154.36639404]
[61.35525131 145.71401978]
[75.28760529 140.01507568]
[90.14595032 137.55834961]
[91.07849121 122.58737183]
[77.51828766 109.18452454]
[77.81480408 90.12074280]
[91.78527069 77.14609528]
[91.31877899 62.15335083]
[90.85227966 47.16060638]
[89.91973114 32.18962479]
[88.52204132 17.25488281]
[87.12435150 2.32014322]
[85.72666931 -12.61459732]
[73.84213257 -22.68413925]
[72.63742828 -37.84999847]
[82.31044006 -49.11803055]
[80.91275024 -64.05277252]
[79.51506042 -78.98751068]
[77.88527679 -93.89870453]
[76.02379608 -108.78275299]
[63.39572906 -118.28577423]
[61.26874542 -133.94628906]
[70.90474701 -146.47317505]
[86.58686829 -148.43446350]
[99.01118469 -138.66656494]
[100.80656433 -122.96458435]
[90.90784454 -110.64423370]
[92.76932526 -95.76018524]
[96.79375458 -89.40177155]
[94.44979858 -80.38520050]
[95.84748840 -65.45045471]
[97.24517822 -50.51571655]
[108.84098053 -41.23815918]
[110.47118378 -26.11212158]
[100.66140747 -14.01228619]
[102.05909729 0.92245424]
[103.45678711 15.85719490]
[104.85446930 30.79193497]
[108.03382874 34.57114792]
[108.75226593 40.43574905]
[105.84502411 46.69411087]
[106.31151581 61.68685532]
[106.77801514 76.67959595]
[115.96505737 81.69973755]
[122.18519592 90.12074280]
[124.28250122 100.37768555]
[121.86722565 110.56443024]
[115.38819885 118.78791809]
[106.04947662 123.51992035]
[105.11693573 138.49090576]
[119.55554962 142.77253723]
[132.67297363 150.15640259]
[143.81289673 160.26940918]
[152.41880798 172.60195923]
[158.06173706 186.53370667]
[160.46162415 201.36474609]
[159.50132751 216.35073853]
[155.23217773 230.74029541]
[147.87139893 243.81268311]
[137.79093933 254.91383362]
[125.49874115 263.48919678]
[111.61312866 269.11129761]
[96.83170319 271.50119019]
[95.89916229 286.47216797]
[94.96661377 301.44314575]
[94.03407288 316.41412354]
[93.10152435 331.38510132]
[93.10152435 346.38510132]
[94.03407288 361.35610962]
[94.96661377 376.32708740]
[95.89916229 391.29806519]
[96.83170319 406.26904297]
[97.76425171 421.24002075]
[104.78360748 436.67263794]
[91.89727783 447.68981934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[11 92]
[12 91]
[13 90]
[14 89]
[15 88]
[28 75]
[29 74]
[32 68]
[33 67]
[34 66]
[35 63]
[36 62]
[37 61]
[38 60]
[41 57]
[42 56]
[43 55]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
