%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGAGUGGGGUCAGCAGGAGGAACUCUACAGCUAUGGGAGAACCUGCGUUCACCUCUUUUCCAAGCCUGCCUGUUCUGGGGAAGCUCAAAAGGAACAUGAUGCCCUGGGCUUUACAGAAGAAACGAGAAAUCC\
) } def
/len { sequence length } bind def

/coor [
[74.13381195 127.03967285]
[67.56668091 118.66235352]
[63.62410736 108.77484894]
[48.63324356 109.29833984]
[33.64237976 109.82183075]
[18.65151978 110.34532166]
[3.32310820 120.47245026]
[-11.85666561 111.74493408]
[-26.83128738 112.61710358]
[-41.80591202 113.48928070]
[-56.78053284 114.36145020]
[-71.75515747 115.23362732]
[-83.70862579 129.83869934]
[-102.21899414 131.14230347]
[-115.63516235 118.78592682]
[-130.55299377 120.35385895]
[-145.47082520 121.92178345]
[-160.38864136 123.48970795]
[-175.30647278 125.05764008]
[-179.81420898 134.90319824]
[-187.97322083 141.89834595]
[-198.23527527 144.80545044]
[-208.69030762 143.15422058]
[-217.42184448 137.31634521]
[-222.85829163 128.42449951]
[-237.84915161 128.94799805]
[-252.84001160 129.47148132]
[-267.83087158 129.99497986]
[-276.38873291 133.44818115]
[-283.17578125 130.35212708]
[-298.17477417 130.52665710]
[-311.99682617 139.35179138]
[-326.42395020 131.55499268]
[-326.61474609 115.15695190]
[-312.37295532 107.02656555]
[-298.34930420 115.52767944]
[-283.35031128 115.35314941]
[-268.35437012 115.00411224]
[-253.36351013 114.48062134]
[-238.37265015 113.95713043]
[-223.38179016 113.43363953]
[-211.30584717 98.24718475]
[-191.66520691 96.66967010]
[-176.87440491 110.13980865]
[-161.95657349 108.57188416]
[-147.03874207 107.00395203]
[-132.12091064 105.43602753]
[-117.20308685 103.86810303]
[-112.05488586 93.56726074]
[-102.45072937 86.99761200]
[-90.74444580 85.91104126]
[-79.87469482 90.69782257]
[-72.62732697 100.25900269]
[-57.65270615 99.38683319]
[-42.67808151 98.51465607]
[-27.70346069 97.64248657]
[-12.72883797 96.77030945]
[-4.40457869 87.91462708]
[8.12592602 87.11631775]
[18.12802696 95.35446167]
[33.11888885 94.83097076]
[48.10975266 94.30747223]
[63.10061264 93.78398132]
[71.16959381 76.14604187]
[86.98470306 64.91716003]
[106.29674530 63.11430359]
[123.91699219 71.22186279]
[135.11123657 87.06150055]
[149.93995667 84.80121613]
[154.56100464 69.24562073]
[165.44775391 57.29026794]
[180.39636230 51.28038025]
[196.41313171 52.36517715]
[210.31405640 60.27844620]
[219.35766602 73.40156555]
[234.12979126 70.79683685]
[248.90190125 68.19211578]
[263.67401123 65.58739471]
[278.44613647 62.98267365]
[286.51684570 52.84499741]
[298.93951416 51.02062225]
[308.92306519 57.95207977]
[323.75180054 55.69179535]
[338.58053589 53.43151093]
[353.40924072 51.17122269]
[368.23797607 48.91093826]
[383.06671143 46.65065384]
[397.89544678 44.39036560]
[412.72415161 42.13008118]
[418.72216797 32.91849518]
[428.61788940 28.66408348]
[438.99517822 30.56940651]
[446.41677856 37.75479889]
[461.33459473 36.18687057]
[468.18096924 22.36186790]
[481.42660522 14.45257187]
[496.84484863 14.98281288]
[509.51580811 23.78339195]
[515.39624023 38.04607773]
[512.60968018 53.21969604]
[502.04534912 64.46240234]
[487.07427979 68.18669128]
[472.47366333 63.20415497]
[462.90252686 51.10470200]
[447.98471069 52.67262650]
[433.31875610 65.19149780]
[414.98443604 56.95880890]
[400.15573120 59.21909332]
[385.32699585 61.47937775]
[370.49826050 63.73966599]
[355.66952515 65.99994659]
[340.84082031 68.26023865]
[326.01208496 70.52052307]
[311.18334961 72.78080750]
[298.14984131 84.47365570]
[281.05087280 77.75479126]
[266.27874756 80.35951233]
[251.50662231 82.96423340]
[236.73451233 85.56895447]
[221.96238708 88.17368317]
[218.84809875 101.74167633]
[210.75837708 113.12398529]
[198.89505005 120.57228088]
[185.04263306 122.92698669]
[171.29986572 119.79765320]
[159.76174927 111.62728882]
[152.20024109 99.62994385]
[137.37152100 101.89022827]
[135.32719421 112.33663940]
[130.42414856 121.78474426]
[123.05912018 129.47000122]
[113.82811737 134.77049255]
[103.47811890 137.25729370]
[92.84666443 136.72918701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 63]
[4 62]
[5 61]
[6 60]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[25 41]
[26 40]
[27 39]
[28 38]
[30 37]
[31 36]
[68 128]
[69 127]
[75 120]
[76 119]
[77 118]
[78 117]
[79 116]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
