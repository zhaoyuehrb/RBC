%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUUCGGCGUCGGACUCUGCGCCCCGCGUAGUUCCGGUGGCGACUGCGGCGCAUGGCGGCCCUGGGACAUCUUGCUGGGGAGGCAGCGGCGGCCCCAGGCCCGGGUACUCCCUGCGCGUCCCGCGGAGCCCGGCUUCCCGGCCCAGUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[-159.56565857 421.87557983]
[-159.86967468 406.87866211]
[-160.17367554 391.88174438]
[-160.47767639 376.88482666]
[-167.03527832 373.24505615]
[-180.15048218 365.96554565]
[-186.70806885 362.32577515]
[-199.59593201 370.00061035]
[-207.49407959 383.70935059]
[-222.38806152 383.57354736]
[-235.27590942 391.24838257]
[-248.16377258 398.92321777]
[-261.05163574 406.59805298]
[-273.93948364 414.27288818]
[-286.82733154 421.94772339]
[-299.71520996 429.62255859]
[-303.65475464 441.94467163]
[-314.59561157 448.06210327]
[-326.37606812 445.15701294]
[-339.41680908 452.56909180]
[-352.45758057 459.98114014]
[-365.49832153 467.39321899]
[-378.53909302 474.80526733]
[-391.57983398 482.21734619]
[-402.36239624 495.30062866]
[-417.91931152 488.56127930]
[-415.74990845 471.74670410]
[-398.99191284 469.17657471]
[-385.95114136 461.76452637]
[-372.91040039 454.35244751]
[-359.86962891 446.94039917]
[-346.82888794 439.52832031]
[-333.78811646 432.11627197]
[-325.77587891 416.53128052]
[-307.39004517 416.73471069]
[-294.50216675 409.05987549]
[-281.61431885 401.38504028]
[-268.72647095 393.71020508]
[-255.83860779 386.03533936]
[-242.95075989 378.36050415]
[-230.06289673 370.68566895]
[-223.08657837 357.52587891]
[-207.27076721 357.11276245]
[-194.38291931 349.43792725]
[-150.39872742 352.01919556]
[-139.73851013 341.46646118]
[-129.07830811 330.91375732]
[-118.41809845 320.36102295]
[-115.86196899 313.37921143]
[-107.43327332 309.70520020]
[-96.56137848 299.37069702]
[-85.68949127 289.03619385]
[-89.86039734 273.45278931]
[-85.59516907 257.79782104]
[-73.96244049 246.35231018]
[-58.05875015 242.29533386]
[-42.18465805 246.82124329]
[-31.52444839 236.26852417]
[-20.86423683 225.71580505]
[-10.42008877 214.94918823]
[-0.19629154 203.97312927]
[10.02750587 192.99707031]
[20.13954735 181.91795349]
[30.13879395 170.73693848]
[40.02421570 159.45516968]
[49.79480362 148.07380676]
[59.56539154 136.69242859]
[69.33597565 125.31105804]
[79.10656738 113.92968750]
[88.87715149 102.54831696]
[76.17670441 110.52944946]
[61.28482437 108.73166656]
[50.84857178 97.95740509]
[49.52620316 83.01580811]
[57.90796280 70.57611084]
[72.25261688 66.19081879]
[86.15716553 71.81713104]
[92.62626648 58.28381348]
[99.09535980 44.75049210]
[105.56446075 31.21717072]
[112.03355408 17.68384933]
[118.50265503 4.15052843]
[113.47477722 -10.59254360]
[120.22814941 -24.22510147]
[134.31439209 -28.92755890]
[140.78349304 -42.46088028]
[138.97187805 -58.75965500]
[152.33978271 -68.25867462]
[167.13543701 -61.18616486]
[168.13835144 -44.81771469]
[154.31681824 -35.99178314]
[147.84771729 -22.45846176]
[153.03448486 -8.54325485]
[146.66668701 5.27361155]
[132.03598022 10.61962605]
[125.56687927 24.15294647]
[119.09777832 37.68626785]
[112.62868500 51.21958923]
[106.15958405 64.75290680]
[99.69048309 78.28623199]
[109.22840118 89.86328125]
[123.74955750 86.10350037]
[135.16981506 75.15414429]
[149.43017578 79.45432281]
[163.95132446 75.69453430]
[178.47248840 71.93475342]
[192.99363708 68.17496490]
[202.33857727 55.13457489]
[218.36718750 54.45412064]
[228.78370667 66.65558624]
[225.59745789 82.37905121]
[211.25267029 89.56282043]
[196.75343323 82.69612122]
[182.23226929 86.45590973]
[167.71112061 90.21569824]
[153.18995667 93.97547913]
[142.80834961 104.65590668]
[127.50934601 100.62465668]
[112.98818970 104.38444519]
[100.25852203 112.31890106]
[90.48793793 123.70027161]
[80.71735382 135.08164978]
[70.94676208 146.46301270]
[61.17617798 157.84439087]
[51.40559006 169.22575378]
[48.16320038 177.82972717]
[41.31980896 180.73619080]
[31.32056046 191.91720581]
[27.90446281 200.45368958]
[21.00356865 203.22087097]
[10.77977180 214.19692993]
[0.55597442 225.17298889]
[-1.32363713 231.61088562]
[-5.56055164 235.50886536]
[-10.31151676 236.37600708]
[-20.97172546 246.92872620]
[-31.63193703 257.48144531]
[-27.37802696 270.84039307]
[-29.29849625 284.66116333]
[-36.96036530 296.24362183]
[-48.81461716 303.34976196]
[-62.50905991 304.63629150]
[-75.35498810 299.90808105]
[-86.22687531 310.24258423]
[-97.09877014 320.57708740]
[-107.86537170 331.02124023]
[-118.52558136 341.57397461]
[-129.18579102 352.12667847]
[-139.84600830 362.67941284]
[-145.48075867 376.58081055]
[-145.17675781 391.57772827]
[-144.87275696 406.57467651]
[-144.56874084 421.57159424]
[-141.98806763 440.78070068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[7 44]
[8 43]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[45 149]
[46 148]
[47 147]
[48 146]
[50 145]
[51 144]
[52 143]
[57 137]
[58 136]
[59 135]
[60 132]
[61 131]
[62 130]
[63 128]
[64 127]
[65 125]
[66 124]
[67 123]
[68 122]
[69 121]
[70 120]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[85 92]
[86 91]
[101 119]
[102 118]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
