%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCAUGCUGACUCAUGUGCCCGCAGCUAGCAGGAGCUGGCAGCAUGGGCUCCCCAGGGGCUACGACAGGCUGGGGGCUUCUGGAUUAUAAGACGGAGAAGUAUGUGAUGACCA\
) } def
/len { sequence length } bind def

/coor [
[90.59590912 346.18005371]
[88.56359863 331.11557007]
[92.45574188 316.42138672]
[101.67881775 304.33819580]
[114.82637024 296.70861816]
[112.80136871 281.84594727]
[110.77637482 266.98324585]
[108.75137329 252.12057495]
[106.72637177 237.25788879]
[104.70137024 222.39520264]
[95.21414185 214.75701904]
[93.47243500 202.29565430]
[100.96568298 191.69073486]
[99.34390259 176.77867126]
[97.72211456 161.86660767]
[93.81877899 155.47233582]
[96.26395416 146.52954102]
[95.04656982 131.57901001]
[93.82919312 116.62850189]
[84.75157928 104.68710327]
[70.67169189 99.51440430]
[56.59180450 94.34171295]
[42.51191711 89.16902161]
[28.29711914 84.37949371]
[13.95783615 79.97665405]
[-1.50554049 83.32248688]
[-11.40113068 72.19025421]
[-25.74041367 67.78741455]
[-40.07969666 63.38457489]
[-54.41897583 58.98173904]
[-68.75826263 54.57889938]
[-83.09754181 50.17605972]
[-98.95102692 54.37119675]
[-110.31735992 42.55009460]
[-105.50384521 26.87329483]
[-89.46220398 23.46774292]
[-78.69470215 35.83677673]
[-64.35542297 40.23961639]
[-50.01613998 44.64245605]
[-35.67685699 49.04529572]
[-21.33757401 53.44813156]
[-6.99829245 57.85097122]
[7.43944263 54.19022369]
[18.36067390 65.63737488]
[32.69995499 70.04021454]
[37.37060928 68.56549835]
[43.01626205 70.10591888]
[47.68460846 75.08913422]
[61.76449966 80.26182556]
[75.84438324 85.43451691]
[89.92427063 90.60721588]
[92.38905334 87.97966766]
[95.54354858 86.01305389]
[99.20686340 84.88858795]
[103.15071106 84.73712921]
[112.22832489 72.79573059]
[121.30593872 60.85433197]
[130.38356018 48.91293716]
[139.46116638 36.97154236]
[148.53878784 25.03014565]
[157.61639404 13.08874989]
[166.69400024 1.14735353]
[175.77162170 -10.79404259]
[177.60523987 -29.05443382]
[193.93353271 -35.32768250]
[202.68446350 -47.51051331]
[199.88059998 -63.06409836]
[208.96450806 -75.99692535]
[224.54685974 -78.63619232]
[237.38293457 -69.41605377]
[239.85729980 -53.80666351]
[230.50196838 -41.06879425]
[214.86729431 -38.75959778]
[206.11637878 -26.57676315]
[207.75128174 -14.50710964]
[200.44607544 -4.26244831]
[187.71301270 -1.71642923]
[178.63540649 10.22496700]
[169.55778503 22.16636276]
[160.48017883 34.10775757]
[151.40255737 46.04915619]
[142.32495117 57.99055099]
[133.24732971 69.93194580]
[124.16972351 81.87334442]
[115.09210968 93.81473541]
[128.02279663 86.21227264]
[142.99096680 87.18899536]
[154.82402039 96.40737915]
[159.43280029 110.68180084]
[155.22463989 125.07941437]
[143.65374756 134.62480164]
[128.71871948 136.01934814]
[115.58067322 128.78112793]
[108.77970886 115.41111755]
[109.99709320 130.36163330]
[111.21446991 145.31214905]
[112.63418579 160.24481201]
[114.25596619 175.15689087]
[115.87775421 190.06895447]
[127.10421753 204.58689880]
[119.56405640 220.37020874]
[121.58905792 235.23289490]
[123.61405182 250.09558105]
[125.63905334 264.95825195]
[127.66405487 279.82095337]
[129.68905640 294.68362427]
[144.39849854 298.51776123]
[156.51799011 307.69308472]
[164.19938660 320.81042480]
[166.27131653 335.86947632]
[162.41784668 350.57388306]
[153.22659302 362.68127441]
[140.09916687 370.34539795]
[125.03738403 372.39752197]
[110.33807373 368.52471924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 106]
[6 105]
[7 104]
[8 103]
[9 102]
[10 101]
[13 99]
[14 98]
[15 97]
[17 96]
[18 95]
[19 94]
[20 51]
[21 50]
[22 49]
[23 48]
[24 45]
[25 44]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
