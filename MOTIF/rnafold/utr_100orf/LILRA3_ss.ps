%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCUCCAAGUGUCCACACCCUGUGUGUCCUCUGUCCUGCCAGCACCGAGGGCUCAUCCAUCCACAGAGCAGUGCAGUGGGAGGAGACGCCAUGACCCCCAUCCUCACGGUCCUGAUCUGUCUCGGGCUGAGCCUGGACCCCAGGACCCACGUGCAGGCAGGGCCCCUCCCCAAGCCCACCCUCUGGGCUG\
) } def
/len { sequence length } bind def

/coor [
[61.88026047 441.19586182]
[59.27681732 455.96820068]
[56.67337418 470.74053955]
[54.06993103 485.51287842]
[51.46648788 500.28521729]
[51.62432480 515.28442383]
[37.79031754 521.08270264]
[27.20642471 510.45343018]
[33.06404877 496.64422607]
[36.28210831 481.99346924]
[39.50016785 467.34274292]
[42.71822357 452.69201660]
[45.93628311 438.04125977]
[49.15434265 423.39053345]
[52.37240219 408.73980713]
[45.01502609 407.28408813]
[35.16697693 418.59851074]
[25.31892776 429.91293335]
[15.47087765 441.22732544]
[5.62282753 452.54174805]
[-0.21542458 468.45877075]
[-17.12657928 467.25494385]
[-20.65127373 450.67141724]
[-5.69158411 442.69369507]
[4.15646553 431.37930298]
[14.00451469 420.06488037]
[23.85256386 408.75045776]
[33.70061493 397.43606567]
[21.71184158 381.74203491]
[15.83772564 363.22766113]
[16.56167793 344.14282227]
[23.57883072 326.73034668]
[35.85763550 312.96237183]
[51.78535843 304.31726074]
[69.37750244 301.62228394]
[71.08296204 286.71954346]
[72.78842163 271.81680298]
[74.49388123 256.91409302]
[76.19934845 242.01135254]
[77.90480804 227.10861206]
[79.61026764 212.20588684]
[81.31572723 197.30316162]
[75.07566071 183.77870178]
[84.33182526 170.94772339]
[86.03728485 156.04499817]
[87.74275208 141.14227295]
[89.44821167 126.23953247]
[78.01892090 119.77918243]
[70.31792450 108.43847656]
[68.36559296 94.28450775]
[73.07216644 80.18125153]
[83.94750977 69.21012878]
[73.21221161 58.73379898]
[62.47691345 48.25747299]
[51.65670776 37.86886597]
[40.75231171 27.56866455]
[32.35127258 23.94315910]
[29.75598145 17.01095772]
[19.02068520 6.53463030]
[8.28538799 -3.94169593]
[-6.99510622 -8.04255581]
[-10.69994354 -22.46903992]
[-21.43523979 -32.94536591]
[-32.17053604 -43.42169189]
[-42.90583038 -53.89801788]
[-53.64112854 -64.37434387]
[-64.51060486 -63.61339188]
[-73.80898285 -68.85971832]
[-78.57705688 -78.16589355]
[-77.45159149 -88.34063721]
[-87.84020233 -99.16083527]
[-103.17147827 -106.39881134]
[-100.46048737 -123.13460541]
[-83.62825775 -125.16249084]
[-77.01999664 -109.54944611]
[-66.63138580 -98.72924042]
[-47.72096634 -94.73626709]
[-43.16480255 -75.10964203]
[-32.42950439 -64.63331604]
[-21.69421005 -54.15699005]
[-10.95891285 -43.68066406]
[-0.22361684 -33.20433807]
[14.28901768 -29.85281372]
[18.76171494 -14.67699242]
[29.49701118 -4.20066595]
[40.23230743 6.27566051]
[51.05251312 16.66426849]
[61.95690918 26.96446800]
[68.98895264 29.27558899]
[72.95323944 37.52217484]
[83.68853760 47.99850464]
[94.42383575 58.47483063]
[90.02534485 44.13421249]
[85.62685394 29.79359627]
[76.65679932 17.77119446]
[72.51941681 3.35307741]
[73.74971008 -11.59638309]
[80.18859100 -25.14410973]
[91.00345612 -35.53827286]
[104.79586792 -41.43483734]
[119.78235626 -42.07132339]
[134.02505493 -37.36543274]
[145.68228149 -27.92567444]
[153.24667358 -14.97267723]
[155.74006653 -0.18136486]
[152.84008789 14.53563499]
[144.92169189 27.27530098]
[133.00691223 36.39126968]
[124.85785675 48.98464203]
[116.70880890 61.57801437]
[129.89785767 54.43315125]
[143.08689880 47.28829193]
[156.27595520 40.14342880]
[169.46499634 32.99856949]
[182.65403748 25.85370636]
[195.84309387 18.70884514]
[196.95101929 6.85391235]
[203.58209229 -2.89048672]
[213.98931885 -8.16311169]
[225.52879333 -7.75439692]
[235.33105469 -1.88194335]
[248.74568176 -8.59372044]
[262.16030884 -15.30549717]
[268.44650269 -21.95421219]
[275.84835815 -22.01534462]
[289.37042236 -28.50788307]
[302.89251709 -35.00041962]
[316.41461182 -41.49295807]
[329.93670654 -47.98549652]
[341.59817505 -60.29185486]
[356.65182495 -52.49285126]
[353.32485962 -35.86854172]
[336.42926025 -34.46340561]
[322.90716553 -27.97086906]
[309.38507080 -21.47833061]
[295.86297607 -14.98579121]
[282.34088135 -8.49325275]
[268.87207031 -1.89087641]
[255.45745850 4.82090044]
[242.04283142 11.53267765]
[237.32723999 29.20972061]
[220.91415405 37.99037170]
[202.98796082 31.89789200]
[189.79890442 39.04275513]
[176.60986328 46.18761444]
[163.42080688 53.33247757]
[150.23176575 60.47733688]
[137.04272461 67.62220001]
[123.85366821 74.76705933]
[132.03340149 91.61437988]
[130.08212280 109.35248566]
[119.52799988 122.63166046]
[104.35094452 127.94499969]
[102.64547729 142.84773254]
[100.94001770 157.75045776]
[99.23455811 172.65319824]
[105.35264587 187.24359131]
[96.21846008 199.00862122]
[94.51300049 213.91134644]
[92.80754089 228.81407166]
[91.10207367 243.71681213]
[89.39661407 258.61953735]
[87.69115448 273.52227783]
[85.98569489 288.42501831]
[84.28023529 303.32772827]
[96.81223297 307.75173950]
[107.94219971 315.32199097]
[116.88500977 325.60943604]
[122.98359680 337.99053955]
[125.75672150 351.68475342]
[124.93590546 365.80364990]
[120.48876953 379.40853882]
[112.62683868 391.57293701]
[101.79698181 401.44549561]
[88.65663147 408.30938721]
[93.45413208 422.52148438]
[98.25163269 436.73358154]
[103.04913330 450.94570923]
[107.84663391 465.15780640]
[112.64413452 479.36990356]
[126.32466125 487.74981689]
[128.15959167 503.68759155]
[116.74132538 514.95715332]
[100.82897949 512.91345215]
[92.62914276 499.12420654]
[98.43202972 484.16741943]
[93.63452911 469.95529175]
[88.83702850 455.74319458]
[84.03952789 441.53109741]
[79.24202728 427.31896973]
[74.44452667 413.10687256]
[67.08715057 411.65118408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[35 165]
[36 164]
[37 163]
[38 162]
[39 161]
[40 160]
[41 159]
[42 158]
[44 156]
[45 155]
[46 154]
[47 153]
[52 92]
[53 91]
[54 90]
[55 88]
[56 87]
[58 86]
[59 85]
[60 84]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[70 76]
[71 75]
[110 149]
[111 148]
[112 147]
[113 146]
[114 145]
[115 144]
[116 143]
[121 140]
[122 139]
[123 138]
[125 137]
[126 136]
[127 135]
[128 134]
[129 133]
[175 191]
[176 190]
[177 189]
[178 188]
[179 187]
[180 186]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
