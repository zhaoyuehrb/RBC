%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUAUUUCAUUUACCACAGUAGUUUGAGUCAUUUCCACAUCUUGCGAGUCCUUCCGAACGAGUCUCCUUUCCUUGGGGCUCGCAACCACCCAAUGAUCGAUUCAGGAGAAAAGAAGCCUGGGCGGAGAGCAGAGGAGGCAGUGACCUUCAAGGAUGUGGCUGUGAUCUUCACUGAGGAGGAGCUGGGGCUGC\
) } def
/len { sequence length } bind def

/coor [
[46.14682770 471.91482544]
[52.70134735 485.50527954]
[55.51410294 500.32925415]
[54.39331818 515.37609863]
[49.41540527 529.61975098]
[40.91976929 542.08917236]
[29.48565865 551.93414307]
[15.89266682 558.48345947]
[1.06758738 561.29046631]
[-13.97878075 560.16387939]
[-28.22055054 555.18048096]
[-40.68669510 546.67999268]
[-50.52725601 535.24212646]
[-57.07127762 521.64660645]
[-59.87258530 506.82040405]
[-58.74018097 491.77447510]
[-53.75127029 477.53463745]
[-45.24600983 465.07177734]
[-33.80429840 455.23562622]
[-20.20625305 448.69686890]
[-5.37901068 445.90127563]
[9.66648293 447.03948975]
[14.62066936 432.88125610]
[19.57485580 418.72299194]
[24.52904129 404.56475830]
[29.48322678 390.40649414]
[34.43741226 376.24822998]
[39.39159775 362.08999634]
[36.29204178 347.52145386]
[48.15305710 337.05117798]
[53.10724258 322.89294434]
[58.06142807 308.73468018]
[61.04671478 294.03475952]
[62.00776672 279.06558228]
[62.96881866 264.09637451]
[52.97094727 253.11557007]
[53.73235321 237.92100525]
[65.31782532 227.50877380]
[66.27887726 212.53959656]
[67.23992920 197.57041931]
[68.20098114 182.60122681]
[69.16203308 167.63204956]
[70.12308502 152.66287231]
[71.08414459 137.69369507]
[72.04519653 122.72451019]
[65.21392059 109.37034607]
[52.51306152 101.38986206]
[39.81219864 93.40937805]
[27.11133575 85.42890167]
[14.41047287 77.44841766]
[1.70960951 69.46793365]
[-10.99125385 61.48745728]
[-23.69211578 53.50697327]
[-36.39297867 45.52649307]
[-49.09384155 37.54601288]
[-63.43964005 43.15888214]
[-78.16755676 39.29342651]
[-87.68275452 27.63473320]
[-88.49851227 12.78641701]
[-101.19937897 4.80593586]
[-107.80094147 4.17574549]
[-112.39633179 0.80562502]
[-114.17368317 -3.63940048]
[-126.61222839 -12.02286434]
[-139.05078125 -20.40632820]
[-155.43902588 -21.00404739]
[-162.87536621 -35.62023544]
[-153.70993042 -49.21900940]
[-137.37132263 -47.81111908]
[-130.66731262 -32.84487915]
[-118.22876740 -24.46141434]
[-105.79021454 -16.07795143]
[-93.21889496 -7.89492750]
[-80.51803589 0.08555379]
[-66.78621674 -5.62191296]
[-52.15360641 -2.10753870]
[-42.28074646 9.48470020]
[-41.11336136 24.84514999]
[-28.41249847 32.82563019]
[-15.71163559 40.80611038]
[-3.01077247 48.78659439]
[9.69009018 56.76707458]
[22.39095306 64.74755859]
[35.09181595 72.72803497]
[47.79267883 80.70851898]
[60.49354172 88.68899536]
[73.19440460 96.66947937]
[79.59127808 76.33306122]
[100.85044098 64.51941681]
[105.80462646 50.36116791]
[103.05942535 34.77994537]
[114.56608582 25.32235527]
[119.52027130 11.16410542]
[124.47445679 -2.99414444]
[129.42864990 -17.15239525]
[119.52973938 -28.81254005]
[116.81420898 -43.76321411]
[121.91280365 -57.97133636]
[133.36198425 -67.65494537]
[148.02223206 -70.28982544]
[152.97642517 -84.44807434]
[146.37026978 -98.55468750]
[151.59620667 -112.84259033]
[165.08541870 -119.05361176]
[170.03961182 -133.21186829]
[174.99378967 -147.37011719]
[171.41500854 -163.37399292]
[183.66691589 -174.27458191]
[199.14579773 -168.85829163]
[201.92831421 -152.69692993]
[189.15203857 -142.41592407]
[184.19786072 -128.25767517]
[179.24366760 -114.09942627]
[185.91744995 -100.83306885]
[181.09489441 -86.40401459]
[167.13467407 -79.49388885]
[162.18048096 -65.33563995]
[171.99951172 -54.13508606]
[174.91320801 -39.42569351]
[170.04083252 -25.13841248]
[158.59614563 -15.14261341]
[143.58689880 -12.19820881]
[138.63270569 1.96004140]
[133.67852783 16.11829185]
[128.72433472 30.27654076]
[131.82389832 44.84506989]
[119.96287537 55.31535339]
[115.00868988 69.47360229]
[119.59027863 75.41153717]
[130.72581482 65.36166382]
[137.23374939 51.84698105]
[152.15237427 50.28651810]
[161.31608582 62.16196823]
[156.02374268 76.19731903]
[141.29922485 79.06524658]
[128.75346375 87.28739929]
[133.33505249 93.22533417]
[148.28691101 92.02447510]
[163.23875427 90.82362366]
[178.19061279 89.62277222]
[193.14247131 88.42191315]
[203.19512939 76.22685242]
[218.93443298 74.79512024]
[231.02253723 84.97615051]
[232.28776550 100.72971344]
[221.97950745 112.70950317]
[206.21345520 113.80811310]
[194.34332275 103.37377167]
[179.39146423 104.57462311]
[164.43960571 105.77548218]
[149.48776245 106.97633362]
[134.53590393 108.17718506]
[121.66182709 124.44850922]
[103.32802582 129.65188599]
[87.01437378 123.68556213]
[86.05332184 138.65473938]
[85.09226990 153.62391663]
[84.13121796 168.59310913]
[83.17016602 183.56228638]
[82.20910645 198.53146362]
[81.24805450 213.50064087]
[80.28700256 228.46983337]
[90.44586945 240.27809143]
[89.25798798 255.44528198]
[77.93800354 265.05743408]
[76.97694397 280.02661133]
[76.01589203 294.99578857]
[87.47699738 294.99224854]
[99.22733307 302.75466919]
[108.00516510 314.91815186]
[116.78299713 327.08160400]
[125.56082916 339.24505615]
[134.33865356 351.40850830]
[149.97840881 353.68313599]
[159.36187744 366.40029907]
[156.92202759 382.01510620]
[144.10636902 391.26361084]
[128.51821899 388.65881348]
[119.40573883 375.74609375]
[122.17520142 360.18634033]
[113.39736938 348.02288818]
[104.61953735 335.85943604]
[95.84170532 323.69598389]
[87.06387329 311.53250122]
[72.21968079 313.68887329]
[67.26549530 327.84710693]
[62.31130981 342.00537109]
[65.05651093 357.58657837]
[53.54985046 367.04418945]
[48.59566116 381.20242310]
[43.64147568 395.36068726]
[38.68729019 409.51892090]
[33.73310471 423.67718506]
[28.77891922 437.83541870]
[23.82473373 451.99368286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 195]
[23 194]
[24 193]
[25 192]
[26 191]
[27 190]
[28 189]
[30 187]
[31 186]
[32 185]
[33 167]
[34 166]
[35 165]
[38 162]
[39 161]
[40 160]
[41 159]
[42 158]
[43 157]
[44 156]
[45 155]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[59 74]
[60 73]
[63 72]
[64 71]
[65 70]
[89 128]
[90 127]
[92 125]
[93 124]
[94 123]
[95 122]
[100 117]
[101 116]
[104 113]
[105 112]
[106 111]
[137 152]
[138 151]
[139 150]
[140 149]
[141 148]
[169 184]
[170 183]
[171 182]
[172 181]
[173 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
