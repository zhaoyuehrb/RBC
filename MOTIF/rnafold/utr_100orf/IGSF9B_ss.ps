%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUUUGGUAUGUGGCCACUUUCAUAGCAAGUGUGAUCGGCACCCGAGGGCUUGCGGCUGAAGGCGCCCACGGCCUGCGAGAGGAGCCCGAGUUUGUGA\
) } def
/len { sequence length } bind def

/coor [
[88.36820221 244.26022339]
[91.86575317 229.14245605]
[103.60337067 218.99317932]
[102.20568848 204.05844116]
[100.80799866 189.12370300]
[99.41030884 174.18894958]
[98.01261902 159.25421143]
[96.61492920 144.31947327]
[95.21723938 129.38473511]
[80.40671539 122.41519165]
[71.51894379 108.66987610]
[71.24055481 92.30379486]
[79.65570068 78.26415253]
[72.49490356 65.08375549]
[65.33410645 51.90335083]
[58.17330933 38.72294998]
[42.91751099 36.58592224]
[31.97324371 25.99930763]
[29.39183998 11.17364311]
[35.95679474 -2.16949606]
[28.79599571 -15.34989738]
[21.63519859 -28.53029823]
[14.47439957 -41.71069717]
[7.31360197 -54.89110184]
[0.15280379 -68.07150269]
[-16.64048386 -72.65718079]
[-24.83870888 -87.63275909]
[-19.85258675 -103.61017609]
[-27.41983032 -116.56150055]
[-34.98707199 -129.51283264]
[-42.55431366 -142.46415710]
[-50.12155914 -155.41548157]
[-57.68880081 -168.36680603]
[-69.76425171 -169.12269592]
[-79.82730103 -175.61956787]
[-85.37334442 -186.09962463]
[-85.09117126 -197.83229065]
[-79.17105865 -207.82536316]
[-85.91847992 -221.22209167]
[-92.66590881 -234.61882019]
[-99.41333008 -248.01554871]
[-111.93830109 -259.44189453]
[-104.42575073 -274.64050293]
[-87.74142456 -271.62896729]
[-86.01660919 -254.76296997]
[-79.26918030 -241.36624146]
[-72.52175903 -227.96952820]
[-65.77433014 -214.57279968]
[-48.17319489 -210.04020691]
[-39.16425323 -193.89353943]
[-44.73747635 -175.93405151]
[-37.17023468 -162.98272705]
[-29.60298920 -150.03140259]
[-22.03574753 -137.08007812]
[-14.46850395 -124.12874603]
[-6.90126085 -111.17742157]
[5.99597073 -109.64661407]
[15.76502609 -100.79401398]
[18.63902473 -87.72722626]
[13.33320522 -75.23229980]
[20.49400330 -62.05189896]
[27.65480042 -48.87149811]
[34.81559753 -35.69109726]
[41.97639847 -22.51069450]
[49.13719559 -9.33029366]
[63.90413666 -7.57658911]
[74.93735504 2.65727592]
[77.86310577 17.60028076]
[71.35370636 31.56215286]
[78.51450348 44.74255371]
[85.67530823 57.92295456]
[92.83610535 71.10335541]
[110.62220764 72.18801880]
[124.60300446 83.23606110]
[129.77000427 100.28961945]
[144.24879456 104.20944977]
[158.72756958 108.12928009]
[173.30171204 101.42301941]
[187.56632996 108.76467133]
[190.57885742 124.52234650]
[180.02830505 136.60810852]
[164.00817871 135.75079346]
[154.80773926 122.60805511]
[140.32896423 118.68822479]
[125.85018158 114.76839447]
[122.86613464 119.06508636]
[119.17607880 122.77312469]
[114.89395905 125.77803802]
[110.15197754 127.98704529]
[111.54966736 142.92178345]
[112.94735718 157.85652161]
[114.34504700 172.79125977]
[115.74273682 187.72601318]
[117.14042664 202.66075134]
[118.53811646 217.59548950]
[131.95509338 225.39064026]
[138.19697571 239.59692383]
[134.86363220 254.75173950]
[123.23680115 265.02774048]
[107.78723145 266.47360229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[13 72]
[14 71]
[15 70]
[16 69]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[38 48]
[39 47]
[40 46]
[41 45]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
