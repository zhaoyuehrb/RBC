%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGGGCGUCUCGGGCGAGGAGAGGAGGUGACCCCGCGAAAGGAGGAUGGACAGAAGAAAAAGAUAAUAAAUCAUCAUUGAUCAAGAUGUCUUCAGCACCUGAGCCUCCAACAUUCAAAAAGGAACCACCCAAAGAGAAAGAGUUUCAAAGCCCAGGGCUCAGAGGGGUGCGCACAACAACCUUAU\
) } def
/len { sequence length } bind def

/coor [
[104.43047333 197.70249939]
[103.68671417 182.72094727]
[102.94295502 167.73939514]
[88.79644775 162.75178528]
[78.82108307 173.95410156]
[68.84571075 185.15643311]
[58.87034225 196.35874939]
[48.89497375 207.56106567]
[38.91960526 218.76339722]
[29.03719139 230.04780579]
[19.24840546 241.41352844]
[9.45961857 252.77925110]
[-0.32916781 264.14495850]
[-10.11795425 275.51068115]
[-19.90674019 286.87640381]
[-13.76145554 300.84774780]
[-14.29526234 316.10153198]
[-21.40217209 329.60910034]
[-33.67110443 338.68853760]
[-48.66605377 341.53710938]
[-63.40975952 337.58920288]
[-74.97484589 327.62872314]
[-81.06507111 313.63327026]
[-80.47119904 298.38171387]
[-73.31114960 284.90225220]
[-61.00655746 275.87118530]
[-46.00050735 273.08169556]
[-31.27246284 277.08764648]
[-21.48367691 265.72189331]
[-11.69489098 254.35618591]
[-1.90610445 242.99046326]
[7.88268185 231.62474060]
[17.67146873 220.25901794]
[19.65786171 213.12623596]
[27.71728516 208.78802490]
[37.69265366 197.58570862]
[47.66802216 186.38337708]
[57.64339066 175.18106079]
[67.61875916 163.97874451]
[77.59412384 152.77641296]
[60.36472321 137.96325684]
[50.90067291 118.39127350]
[50.07703018 97.64878082]
[57.25770569 79.22009277]
[70.52341461 65.90094757]
[62.73886871 53.07905579]
[54.95432663 40.25716782]
[47.16978455 27.43527603]
[39.38523865 14.61338520]
[28.68585205 14.74313831]
[18.97578049 10.44379330]
[11.98724270 2.55586362]
[8.93622780 -7.44677162]
[10.31126690 -17.73200607]
[15.79655170 -26.44503784]
[8.65734100 -39.63714600]
[1.51812983 -52.82925034]
[-13.58241940 -51.32954788]
[-28.06767082 -55.71367264]
[-39.73932266 -65.28373718]
[-46.83854294 -78.55735016]
[-48.31098175 -93.49711609]
[-43.96325302 -107.82341003]
[-34.48768234 -119.36216736]
[-41.62689590 -132.55427551]
[-48.76610565 -145.74638367]
[-55.90531540 -158.93849182]
[-63.04452515 -172.13058472]
[-70.18373871 -185.32269287]
[-86.70738220 -185.60488892]
[-100.75629425 -194.12812805]
[-108.54963684 -208.48802185]
[-108.04595947 -224.72474670]
[-99.47710419 -238.41490173]
[-106.83345795 -251.48716736]
[-114.18981171 -264.55944824]
[-121.54616547 -277.63168335]
[-135.92500305 -285.51718140]
[-136.01483154 -301.91607666]
[-121.72322845 -309.95861816]
[-107.75218201 -301.37130737]
[-108.47389984 -284.98803711]
[-101.11754608 -271.91577148]
[-93.76119995 -258.84353638]
[-86.40484619 -245.77125549]
[-72.75865173 -246.52003479]
[-60.06164932 -241.28752136]
[-50.81651688 -231.04333496]
[-46.87207031 -217.75091553]
[-49.05374908 -203.99127197]
[-56.99163055 -192.46191406]
[-49.85242081 -179.26980591]
[-42.71321106 -166.07769775]
[-35.57399750 -152.88558960]
[-28.43478775 -139.69348145]
[-21.29557610 -126.50137329]
[-6.45307302 -128.12290955]
[7.91840076 -123.92694092]
[19.62012863 -114.52297974]
[26.84944344 -101.31977844]
[28.47739601 -86.31433105]
[24.22495270 -71.78987885]
[14.71023655 -59.96846008]
[21.84944725 -46.77635574]
[28.98865700 -33.58424759]
[48.00700760 -29.43366241]
[58.02002335 -12.38625622]
[52.20713043 6.82884121]
[59.99167252 19.65073204]
[67.77621460 32.47262192]
[75.56076050 45.29451370]
[83.34530640 58.11640549]
[93.07136536 55.46228027]
[103.14405823 55.03635406]
[113.05946350 56.85993958]
[122.32150269 60.84179688]
[130.46681213 66.78271484]
[142.30392456 57.56952667]
[154.14102173 48.35633469]
[155.84695435 32.64438629]
[168.21542358 22.80587387]
[183.90846252 24.67781448]
[193.61566162 37.14962006]
[191.57789612 52.82198715]
[179.00416565 62.39678192]
[163.35421753 60.19344330]
[151.51710510 69.40663147]
[139.68000793 78.61982727]
[151.06903076 103.72254181]
[145.99746704 134.22872925]
[160.33801270 138.62747192]
[174.67854309 143.02622986]
[189.01908875 147.42497253]
[203.35961914 151.82373047]
[193.60852051 140.42564392]
[189.25000000 126.07283783]
[191.01649475 111.17721558]
[198.61112976 98.24193573]
[210.75767517 89.44071960]
[225.41494751 86.25257111]
[240.11985779 89.21325684]
[252.40130615 97.82523346]
[260.19543457 110.64129639]
[262.19247437 125.50775909]
[258.05685425 139.92637634]
[248.48352051 151.47415161]
[235.08123779 158.21054077]
[220.10316467 159.00366211]
[233.17543030 166.36001587]
[246.24769592 173.71636963]
[261.29296875 169.68188477]
[274.44531250 177.32849121]
[278.19885254 191.69673157]
[291.27111816 199.05308533]
[304.34338379 206.40943909]
[317.41564941 213.76579285]
[334.18447876 216.26438904]
[336.42559814 233.06954956]
[320.89758301 239.87522888]
[310.05929565 226.83805847]
[296.98703003 219.48170471]
[283.91476440 212.12535095]
[270.84252930 204.76899719]
[256.61267090 209.01718140]
[243.25073242 201.74301147]
[238.89134216 186.78863525]
[225.81907654 179.43228149]
[212.74681091 172.07592773]
[198.96087646 166.16426086]
[184.62033081 161.76551819]
[170.27980042 157.36676025]
[155.93925476 152.96801758]
[141.59872437 148.56925964]
[135.68017578 153.17585754]
[146.15629578 163.91134644]
[156.63243103 174.64683533]
[169.38829041 182.53912354]
[170.19285583 197.51753235]
[158.35583496 206.73083496]
[144.03318787 202.27418518]
[139.51354980 187.97099304]
[131.67829895 175.18002319]
[123.84306335 162.38905334]
[117.92450714 166.99563599]
[118.66826630 181.97718811]
[119.41201782 196.95874023]
[128.75546265 210.43583679]
[121.51193237 225.14852905]
[105.13295746 225.96166992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 186]
[2 185]
[3 184]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[55 105]
[56 104]
[57 103]
[64 96]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[74 85]
[75 84]
[76 83]
[77 82]
[117 128]
[118 127]
[119 126]
[130 173]
[131 172]
[132 171]
[133 170]
[134 169]
[148 168]
[149 167]
[150 166]
[153 163]
[154 162]
[155 161]
[156 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
