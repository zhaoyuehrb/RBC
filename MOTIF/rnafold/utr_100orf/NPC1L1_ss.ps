%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGCUGUUCCUGAGGCCUGGCCUGGCUCCCCGCUGACCCCUUCCCAGACCUGGGAUGGCGGAGGCCGGCCUGAGGGGCUGGCUGCUGUGGGCCCUGCUCCUGCGCUUGGCCCAGAGUGAGCCUUACACAACCAUCCACCAGCCUGGCUACUGCG\
) } def
/len { sequence length } bind def

/coor [
[89.25585938 188.44204712]
[89.41643524 177.83903503]
[94.02592468 168.19911194]
[102.30274963 161.31372070]
[99.91177368 146.50550842]
[97.52079773 131.69729614]
[95.12982178 116.88907623]
[84.68358612 106.12449646]
[69.95379639 103.29019165]
[55.22400665 100.45589447]
[40.49421692 97.62158966]
[25.76442719 94.78728485]
[11.03463650 91.95298004]
[-3.97893000 96.94331360]
[-15.01494312 86.94052887]
[-29.74473381 84.10622406]
[-44.47452545 81.27191925]
[-59.20431519 78.43762207]
[-73.93410492 75.60331726]
[-83.00998688 77.05809021]
[-88.92896271 72.56212616]
[-103.59909058 69.43366241]
[-118.26921844 66.30520630]
[-132.93934631 63.17674255]
[-147.60948181 60.04827881]
[-162.58245850 60.94819641]
[-176.77227783 65.81121826]
[-190.96211243 70.67424011]
[-199.27879333 84.39328003]
[-215.20793152 86.30172729]
[-226.53004456 74.93557739]
[-224.55976868 59.01396942]
[-210.80854797 50.75059891]
[-195.82511902 56.48441696]
[-181.63529968 51.62139511]
[-167.44548035 46.75837326]
[-166.92063904 39.27676010]
[-165.87097168 24.31353378]
[-165.34613037 16.83191872]
[-178.71803284 10.03543758]
[-192.15727234 3.37307978]
[-205.66249084 -3.15448594]
[-221.45449829 -2.19366002]
[-229.54641724 -14.69846153]
[-243.05163574 -21.22602654]
[-256.55685425 -27.75359344]
[-270.06207275 -34.28115845]
[-283.56729126 -40.80872345]
[-299.87374878 -39.06761551]
[-309.31484985 -52.47646713]
[-302.17843628 -67.24140167]
[-285.80578613 -68.17352295]
[-277.03970337 -54.31394196]
[-263.53451538 -47.78637695]
[-250.02928162 -41.25881195]
[-236.52406311 -34.73124313]
[-223.01884460 -28.20367813]
[-208.19282532 -29.63139915]
[-199.13491821 -16.65970230]
[-185.62969971 -10.13213730]
[-178.19723511 -10.05240345]
[-171.92155457 -3.33646727]
[-158.54965210 3.46001482]
[-144.48101807 45.37815094]
[-129.81088257 48.50661087]
[-115.14076233 51.63507080]
[-100.47062683 54.76353455]
[-85.80049896 57.89199448]
[-71.09980011 60.87352371]
[-56.37001038 63.70782852]
[-41.64022064 66.54212952]
[-26.91043091 69.37643433]
[-12.18064022 72.21073914]
[1.77935326 67.01767731]
[13.86893940 77.22319031]
[28.59873009 80.05749512]
[43.32852173 82.89179993]
[58.05831146 85.72609711]
[72.78810120 88.56040192]
[87.51789093 91.39470673]
[95.91673279 82.18814850]
[110.56189728 81.40313721]
[123.02350616 73.05399323]
[135.48512268 64.70484924]
[147.94673157 56.35570145]
[160.32418823 47.88229752]
[172.61624146 39.28548431]
[184.90830994 30.68866730]
[191.78273010 16.43900681]
[206.64677429 15.48523140]
[218.93882751 6.88841629]
[231.23089600 -1.70839942]
[243.52294922 -10.30521488]
[255.81501770 -18.90203094]
[268.10708618 -27.49884605]
[270.98645020 -42.80723953]
[283.57479858 -51.35052872]
[298.15127563 -48.51114655]
[310.44335938 -57.10796356]
[312.94921875 -72.71232605]
[325.80389404 -81.90651703]
[341.38088989 -79.23578644]
[350.43865967 -66.28463745]
[347.60339355 -50.73674774]
[334.55718994 -41.81641006]
[319.04016113 -44.81590271]
[306.74810791 -36.21908569]
[304.41448975 -21.55314445]
[292.07107544 -12.65964508]
[276.70388794 -15.20678520]
[264.41183472 -6.60996962]
[252.11976624 1.98684609]
[239.82771301 10.58366203]
[227.53564453 19.18047714]
[215.24359131 27.77729225]
[209.24836731 41.41205215]
[193.50512695 42.98072815]
[181.21305847 51.57754517]
[168.92100525 60.17435837]
[165.22138977 66.62112427]
[156.29586792 68.81731415]
[143.83425903 77.16645813]
[131.37265015 85.51560211]
[118.91104126 93.86475372]
[133.84992981 92.51210022]
[146.53570557 84.50766754]
[161.16194153 81.18002319]
[176.06204224 82.90835571]
[189.53819275 89.49571228]
[200.05485535 100.19149780]
[206.41368103 113.77697754]
[207.89013672 128.70413208]
[204.31596375 143.27209473]
[196.09841919 155.82089233]
[184.17388916 164.92062378]
[169.90109253 169.53445435]
[154.90637207 169.13662720]
[140.89830017 163.77249146]
[129.47305298 154.05325317]
[121.93247223 141.08638000]
[119.13574982 126.34723663]
[109.93803406 114.49810028]
[112.32901001 129.30632019]
[114.71998596 144.11453247]
[117.11096191 158.92274475]
[133.99043274 169.72372437]
[137.52018738 189.14199829]
[125.88423920 204.70693970]
[129.15931702 219.34503174]
[140.65409851 231.04127502]
[136.01208496 246.76971436]
[120.00860596 250.35028076]
[109.10664368 238.09959412]
[114.52121735 222.62010193]
[111.24613953 207.98200989]
[101.32751465 204.98677063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 145]
[5 144]
[6 143]
[7 142]
[8 80]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[15 73]
[16 72]
[17 71]
[18 70]
[19 69]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 36]
[27 35]
[28 34]
[39 63]
[40 62]
[41 60]
[42 59]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[82 124]
[83 123]
[84 122]
[85 121]
[86 119]
[87 118]
[88 117]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[98 107]
[99 106]
[148 155]
[149 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
