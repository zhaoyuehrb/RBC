%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGUAGUCACUGUCCCGGAACCUGGGGCAGCGGAGUCCCGUGCGCCCUGUGGUGACAGCUCAGGAGGGUGUGUGCGCUCAGCAGGGGCCAGCAUGGACCAGUCUGUGGCAAUCCAGGAGACGCUGGCUGAGGGGGAAUACUGCGUCAUCGCGGUGCAAGGUGUGCUGUGUGAGGGGGACAGCCGGCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[42.38108444 798.40069580]
[28.43477821 792.35345459]
[17.86783409 781.42608643]
[12.29163933 767.28485107]
[12.55652046 752.08624268]
[18.62208557 738.14788818]
[29.56338120 727.59533691]
[43.71193695 722.03771973]
[43.95358658 707.03967285]
[44.19523621 692.04162598]
[34.85034943 677.19439697]
[44.42671585 661.47344971]
[44.42671585 646.47344971]
[44.42671585 631.47344971]
[44.42671585 616.47344971]
[44.42671585 601.47344971]
[44.42671585 586.47344971]
[44.42671585 571.47344971]
[42.52809525 569.39385986]
[41.34449005 566.43200684]
[41.21797180 562.85839844]
[42.38563538 559.06311035]
[44.94108963 555.51525879]
[45.90706635 540.54638672]
[46.87303925 525.57751465]
[35.31303406 516.22314453]
[31.43199730 501.68350220]
[36.92079163 487.48043823]
[49.86999512 479.13632202]
[50.83597183 464.16744995]
[51.80194855 449.19860840]
[52.76792145 434.22973633]
[53.73389816 419.26086426]
[54.69987106 404.29202271]
[46.07905960 398.67745972]
[40.52923965 389.91897583]
[39.11172485 379.56594849]
[42.14965439 369.48324585]
[49.15748215 361.51522827]
[58.91722488 357.14849854]
[60.60526657 342.24377441]
[54.34939575 328.72662354]
[63.59056473 315.88485718]
[65.27861023 300.98013306]
[66.96665192 286.07540894]
[68.65469360 271.17071533]
[70.34273529 256.26599121]
[72.03078461 241.36128235]
[69.80012512 237.12463379]
[70.21651459 231.44001770]
[74.02084351 226.00640869]
[76.18817902 211.16380310]
[78.35551453 196.32121277]
[80.52285004 181.47860718]
[82.69018555 166.63601685]
[84.85752106 151.79342651]
[87.02485657 136.95082092]
[89.19219208 122.10823059]
[62.17515564 100.18754578]
[77.12931061 54.36864853]
[71.47288513 40.47602844]
[65.81645966 26.58340836]
[60.04831314 12.73680305]
[54.16881561 -1.06288862]
[48.28931427 -14.86258030]
[42.40981674 -28.66227150]
[28.02323914 -34.63421631]
[22.25717163 -48.71282196]
[28.03916931 -62.39142227]
[22.15966988 -76.19111633]
[16.28017044 -89.99080658]
[3.75280643 -99.65391541]
[5.88229799 -114.39550781]
[0.00279897 -128.19520569]
[-5.87670040 -141.99488831]
[-11.75619888 -155.79458618]
[-17.63569832 -169.59426880]
[-23.73674774 -183.29745483]
[-30.05776405 -196.90057373]
[-36.37878036 -210.50369263]
[-42.69979858 -224.10681152]
[-57.21372223 -230.94241333]
[-60.77836227 -246.58444214]
[-50.65923691 -259.03366089]
[-34.61886978 -258.74008179]
[-24.96205902 -245.92892456]
[-29.09668350 -230.42782593]
[-22.77566528 -216.82470703]
[-16.45464897 -203.22158813]
[-10.13363266 -189.61846924]
[-6.02297449 -187.16337585]
[-3.41801357 -182.09361267]
[-3.83600688 -175.47377014]
[2.04349232 -161.67408752]
[7.92299128 -147.87438965]
[13.80249023 -134.07470703]
[19.68198967 -120.27500916]
[31.78881264 -111.59894562]
[30.07986259 -95.87030792]
[35.95936203 -82.07061005]
[41.83885956 -68.27091980]
[55.70922852 -62.96541214]
[61.86846161 -49.05431747]
[56.20950699 -34.54177094]
[62.08900833 -20.74207878]
[67.96850586 -6.94238758]
[73.84800720 6.85730410]
[79.36946106 11.78520012]
[79.70908356 20.92698479]
[85.36550140 34.81960678]
[91.02192688 48.71222305]
[98.38220215 50.15317535]
[108.23804474 38.84555054]
[113.10275269 53.03507614]
[120.46302795 54.47602463]
[130.94070435 43.74204254]
[141.41836548 33.00805664]
[151.89604187 22.27407265]
[151.45449829 6.47595358]
[162.37377930 -4.94966316]
[178.17568970 -5.22416115]
[189.48521423 5.81531429]
[189.59263611 21.61923790]
[178.43420410 32.81142426]
[162.63002014 32.75174332]
[152.15235901 43.48572922]
[141.67468262 54.21971130]
[131.19702148 64.95369720]
[135.05116272 71.38763428]
[150.04922485 71.14595032]
[142.75947571 84.25550079]
[146.61361694 90.68943787]
[161.02139282 86.51617432]
[166.16250610 71.87552643]
[178.94642639 63.08058167]
[194.45747375 63.51317596]
[206.73132324 73.00696564]
[211.04844666 87.91139984]
[205.74880981 102.49541473]
[192.87023926 111.15116119]
[177.36479187 110.55032349]
[165.19465637 100.92395020]
[150.78688049 105.09720612]
[136.32162476 121.54500580]
[118.87177277 127.58142090]
[104.03478241 124.27556610]
[101.86744690 139.11816406]
[99.70011139 153.96075439]
[97.53277588 168.80335999]
[95.36544037 183.64595032]
[93.19810486 198.48854065]
[91.03076935 213.33114624]
[88.86343384 228.17373657]
[86.93549347 243.04931641]
[85.24745178 257.95404053]
[83.55941010 272.85876465]
[81.87136841 287.76345825]
[80.18331909 302.66818237]
[78.49527740 317.57290649]
[84.63040924 332.15612793]
[75.50997925 343.93182373]
[73.82193756 358.83654785]
[87.15805054 373.84756470]
[85.20679474 393.52572632]
[69.66873932 405.25799561]
[68.70275879 420.22683716]
[67.73678589 435.19570923]
[66.77081299 450.16458130]
[65.80483246 465.13345337]
[64.83885956 480.10229492]
[76.60819244 490.04156494]
[80.22595978 504.83227539]
[74.50833893 518.75250244]
[61.84190369 526.54351807]
[60.87593079 541.51232910]
[59.90995407 556.48120117]
[59.42671585 571.47344971]
[59.42671585 586.47344971]
[59.42671585 601.47344971]
[59.42671585 616.47344971]
[59.42671585 631.47344971]
[59.42671585 646.47344971]
[59.42671585 661.47344971]
[67.98298645 671.13665771]
[67.66667175 683.63854980]
[59.19329071 692.28326416]
[58.95164108 707.28131104]
[58.70999146 722.27935791]
[72.67215729 728.28991699]
[83.26781464 739.18945312]
[88.88119507 753.31597900]
[88.65630341 768.51525879]
[82.62742615 782.46948242]
[71.71393585 793.05078125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 188]
[9 187]
[10 186]
[12 183]
[13 182]
[14 181]
[15 180]
[16 179]
[17 178]
[18 177]
[23 176]
[24 175]
[25 174]
[29 170]
[30 169]
[31 168]
[32 167]
[33 166]
[34 165]
[40 162]
[41 161]
[43 159]
[44 158]
[45 157]
[46 156]
[47 155]
[48 154]
[51 153]
[52 152]
[53 151]
[54 150]
[55 149]
[56 148]
[57 147]
[58 146]
[60 111]
[61 110]
[62 109]
[63 107]
[64 106]
[65 105]
[66 104]
[69 101]
[70 100]
[71 99]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[78 90]
[79 89]
[80 88]
[81 87]
[115 128]
[116 127]
[117 126]
[118 125]
[132 143]
[133 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
