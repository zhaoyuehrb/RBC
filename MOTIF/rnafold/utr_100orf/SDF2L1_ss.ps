%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGGCGCUGUCAGAACCGGAUUGGGCCGCGGCGGGGACGGAAGCGGCCCCUGGGCCCGAGGGGCUGGAGCCGGGCCGGGGCGAUGUGGAGCGCGGGCCGCGGCGGGGCUGCCUGGCCGGUGCUGUUGGGGCUGCUGCUGGCGCUGUUAGUGCCGGGCGGUGGUGCCGCCAAGACCGGUGCGG\
) } def
/len { sequence length } bind def

/coor [
[140.35945129 152.33993530]
[148.08784485 139.48413086]
[162.22392273 134.46864319]
[148.71728516 127.94399261]
[135.21066284 121.41934967]
[121.70403290 114.89470673]
[108.19740295 108.37005615]
[105.34489441 111.80918884]
[101.06552887 114.16926575]
[95.80442047 114.87576294]
[90.22904968 113.54684448]
[85.14476013 110.07553101]
[70.42987823 112.98627472]
[55.71500397 115.89701080]
[41.00012589 118.80774689]
[32.19270325 131.65559387]
[17.22826004 134.39787292]
[5.03408337 125.92216492]
[-9.68079281 128.83290100]
[-13.64059162 132.30364990]
[-18.09208488 133.74812317]
[-22.17529678 133.32078552]
[-25.21813011 131.49705505]
[-40.06213760 133.65469360]
[-54.90614700 135.81233215]
[-69.75015259 137.96997070]
[-84.59416199 140.12760925]
[-99.43817139 142.28524780]
[-114.28218079 144.44290161]
[-122.34618378 148.78314209]
[-129.39634705 146.50892639]
[-144.27485657 148.41418457]
[-159.15336609 150.31945801]
[-167.28990173 154.52214050]
[-174.30043030 152.12852478]
[-189.20915222 153.78088379]
[-204.11785889 155.43322754]
[-212.78489685 165.00563049]
[-225.25205994 166.06373596]
[-234.77674866 158.58354187]
[-249.71136475 159.98248291]
[-262.76647949 169.90699768]
[-277.78219604 163.31454468]
[-279.31164551 146.98687744]
[-265.78143311 137.72048950]
[-251.11032104 145.04785156]
[-236.17568970 143.64891052]
[-222.44465637 132.73634338]
[-205.77020264 140.52450562]
[-190.86149597 138.87216187]
[-175.95277405 137.21981812]
[-161.05862427 135.44094849]
[-146.18011475 133.53567505]
[-131.30162048 131.63041687]
[-116.43981934 129.59889221]
[-101.59580994 127.44124603]
[-86.75180817 125.28360748]
[-71.90779877 123.12596130]
[-57.06378937 120.96832275]
[-42.21977997 118.81068420]
[-27.37577057 116.65303802]
[-12.59153175 114.11802673]
[2.12334466 111.20729065]
[10.17228985 98.72730255]
[25.05380249 95.56578064]
[38.08938599 104.09287262]
[52.80426407 101.18213654]
[67.51914215 98.27139282]
[82.23401642 95.36065674]
[91.35701752 83.45389557]
[90.33890533 68.48848724]
[89.32079315 53.52308273]
[88.30268097 38.55767441]
[76.67760468 28.18968010]
[75.85827637 12.99812412]
[85.81421661 1.97928178]
[84.79610443 -12.98612690]
[83.77799225 -27.95153427]
[82.75988007 -42.91694260]
[74.10375214 -56.16012955]
[80.95935822 -69.38320923]
[79.94124603 -84.34861755]
[78.92313385 -99.31402588]
[69.72718048 -108.37951660]
[69.19915009 -120.88035583]
[77.07685852 -130.07899475]
[76.31301880 -145.05953979]
[75.54917908 -160.04006958]
[74.78533173 -175.02061462]
[67.94026947 -190.53129578]
[80.94989014 -201.40264893]
[94.99779510 -191.91093445]
[89.76587677 -175.78445435]
[90.52971649 -160.80390930]
[91.29355621 -145.82337952]
[92.05739594 -130.84283447]
[102.37736511 -116.66102600]
[93.88854218 -100.33213806]
[94.90665436 -85.36672974]
[95.92476654 -70.40132141]
[104.50807190 -58.22856522]
[97.72528839 -43.93505478]
[98.74340057 -28.96964645]
[99.76151276 -14.00423813]
[100.77962494 0.96117020]
[112.13616943 10.53010368]
[113.38186646 25.69265175]
[103.26808929 37.53956223]
[104.28620148 52.50497055]
[105.30431366 67.47037506]
[106.32242584 82.43578339]
[114.72204590 94.86343384]
[128.22866821 101.38807678]
[141.73530579 107.91271973]
[155.24192810 114.43736267]
[168.74856567 120.96200562]
[182.61891174 126.67282867]
[196.80398560 131.54966736]
[210.98907471 136.42649841]
[225.17414856 141.30332947]
[239.35923767 146.18016052]
[253.54431152 151.05699158]
[267.61465454 144.37393188]
[281.93087769 149.52180481]
[288.21542358 162.97691345]
[302.40051270 167.85374451]
[317.96652222 165.02354431]
[327.48678589 176.47840881]
[341.67184448 181.35523987]
[355.85693359 186.23207092]
[371.42294312 183.40187073]
[380.94320679 194.85673523]
[395.12826538 199.73356628]
[409.31335449 204.61039734]
[423.49844360 209.48722839]
[437.68353271 214.36405945]
[451.86859131 219.24089050]
[466.05368042 224.11772156]
[480.23876953 228.99455261]
[494.42382812 233.87138367]
[508.64981079 238.62759399]
[522.91564941 243.26284790]
[537.18151855 247.89810181]
[551.44738770 252.53335571]
[565.71319580 257.16860962]
[579.97906494 261.80386353]
[596.91137695 260.94802856]
[602.42114258 276.98171997]
[588.53930664 286.71469116]
[575.34381104 276.06973267]
[561.07794189 271.43447876]
[546.81213379 266.79922485]
[532.54626465 262.16397095]
[518.28039551 257.52868652]
[504.01455688 252.89344788]
[496.66470337 253.81880188]
[489.54699707 248.05645752]
[475.36193848 243.17962646]
[461.17684937 238.30279541]
[446.99176025 233.42596436]
[432.80670166 228.54913330]
[418.62161255 223.67230225]
[404.43652344 218.79547119]
[390.25143433 213.91864014]
[376.06637573 209.04180908]
[361.51498413 212.22084045]
[350.98010254 200.41716003]
[336.79501343 195.54032898]
[322.60995483 190.66348267]
[308.05853271 193.84251404]
[297.52368164 182.03883362]
[283.33859253 177.16200256]
[270.10885620 183.90809631]
[255.65370178 179.16436768]
[248.66748047 165.24206543]
[234.48240662 160.36523438]
[220.29731750 155.48840332]
[206.11224365 150.61157227]
[191.92715454 145.73474121]
[177.74208069 140.85791016]
[184.24879456 154.37318420]
[180.68461609 168.94358826]
[168.67379761 177.92913818]
[153.68986511 177.23498535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 114]
[6 113]
[7 112]
[12 69]
[13 68]
[14 67]
[15 66]
[18 63]
[19 62]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[31 54]
[32 53]
[33 52]
[35 51]
[36 50]
[37 49]
[40 47]
[41 46]
[70 111]
[71 110]
[72 109]
[73 108]
[76 105]
[77 104]
[78 103]
[79 102]
[81 100]
[82 99]
[83 98]
[86 96]
[87 95]
[88 94]
[89 93]
[117 180]
[118 179]
[119 178]
[120 177]
[121 176]
[122 175]
[125 172]
[126 171]
[128 169]
[129 168]
[130 167]
[132 165]
[133 164]
[134 163]
[135 162]
[136 161]
[137 160]
[138 159]
[139 158]
[140 157]
[141 155]
[142 154]
[143 153]
[144 152]
[145 151]
[146 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
