%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUUGGGUAAAUGACAGCAUCAUACAGGAGUUUAUUCUGCUGGGUUUCUCAGAUCGACCUUGGCUGGAGUUUCCACUCCUUGUGGUCUUCUUGAUUU\
) } def
/len { sequence length } bind def

/coor [
[98.64089203 131.70877075]
[109.35911560 121.21498108]
[123.35928345 115.83112335]
[109.15220642 111.01873016]
[95.40451050 113.56675720]
[86.03540802 103.18833923]
[71.82833099 98.37595367]
[57.62125778 93.56356812]
[43.41418457 88.75118256]
[29.20711136 83.93879700]
[19.89291954 84.13483429]
[14.63708782 78.74950409]
[0.58655137 73.49761200]
[-13.46398544 68.24571228]
[-27.51452255 62.99381638]
[-39.66958618 67.64260864]
[-51.33234406 62.84629059]
[-56.36662292 51.72541046]
[-70.24703217 46.03908539]
[-84.12743378 40.35275650]
[-98.00784302 34.66643143]
[-111.88825226 28.98010635]
[-126.32040405 34.84105682]
[-140.31610107 28.87658119]
[-145.81468201 15.08161068]
[-159.69509888 9.39528465]
[-173.57550049 3.70895863]
[-186.70304871 11.98222733]
[-202.18411255 10.92566967]
[-214.06590271 0.94555342]
[-217.77963257 -14.12056351]
[-211.89727783 -28.47945213]
[-198.68075562 -36.60982513]
[-183.21206665 -35.38539124]
[-171.43923950 -25.27696609]
[-167.88917542 -10.17144871]
[-154.00875854 -4.48512220]
[-140.12835693 1.20120382]
[-126.53179169 -4.77113962]
[-112.37407684 0.79787183]
[-106.20192719 15.09969902]
[-92.32151794 20.78602600]
[-78.44110870 26.47235107]
[-64.56070709 32.15867615]
[-50.68029785 37.84500504]
[-33.53335953 34.48583984]
[-22.26262474 48.94327927]
[-8.21208858 54.19517517]
[5.83844805 59.44707489]
[19.88898468 64.69896698]
[34.01949692 69.73171997]
[48.22657394 74.54410553]
[62.43364716 79.35649109]
[76.64071655 84.16887665]
[90.84779358 88.98126984]
[104.59548950 86.43324280]
[113.96459198 96.81166077]
[128.17166138 101.62404633]
[143.05570984 103.48552704]
[158.01039124 102.32026672]
[172.96505737 101.15501404]
[187.91972351 99.98975372]
[192.44309998 87.68589783]
[201.29843140 78.08410645]
[213.11123657 72.62153625]
[226.06814575 72.09697723]
[238.19534302 76.55420685]
[247.65921021 85.28086853]
[253.04357910 96.92200470]
[268.04177856 96.68872833]
[283.03994751 96.45544434]
[298.03814697 96.22216797]
[313.03631592 95.98889160]
[326.82369995 87.10969543]
[341.28128052 94.84992218]
[341.53631592 111.24708557]
[327.32644653 119.43319702]
[313.26959229 110.98707581]
[298.27142334 111.22035980]
[283.27322388 111.45363617]
[268.27505493 111.68691254]
[253.27685547 111.92018890]
[245.57867432 127.15519714]
[231.20895386 136.52984619]
[213.98823547 137.44662476]
[198.54798889 129.57083130]
[189.08499146 114.94442749]
[174.13031006 116.10968018]
[159.17564392 117.27494049]
[144.22097778 118.44020081]
[156.46420288 127.10640717]
[164.26777649 139.91673279]
[166.35246277 154.77116394]
[162.37651062 169.23461914]
[152.99169922 180.93612671]
[139.73646545 187.95745850]
[124.78375244 189.14759827]
[110.58475494 184.31144714]
[99.46709442 174.24180603]
[93.25328827 160.58938599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[12 50]
[13 49]
[14 48]
[15 47]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[25 38]
[26 37]
[27 36]
[59 90]
[60 89]
[61 88]
[62 87]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
