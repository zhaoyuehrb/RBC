%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCAUUUCUAAAUGGCACCAGCCUAACUCCAGCUUCAUUCAUCCUAAAUGGCAUCCCUGGUUUGGAAGAUGUGCAUUUGUGGAUCUCCUUCCCACUGU\
) } def
/len { sequence length } bind def

/coor [
[75.75841522 160.73091125]
[66.47846985 156.14450073]
[57.36247635 168.05662537]
[48.24648666 179.96875000]
[39.13049316 191.88087463]
[30.01450539 203.79299927]
[20.89851379 215.70512390]
[11.78252316 227.61724854]
[10.20077991 243.93992615]
[-4.83597898 250.48423767]
[-17.85922432 240.51794434]
[-15.47175884 224.29350281]
[-0.12960134 218.50125122]
[8.98638916 206.58912659]
[18.10237885 194.67700195]
[27.21837044 182.76487732]
[36.33436203 170.85275269]
[45.45035172 158.94062805]
[54.56634140 147.02850342]
[42.47876740 131.09992981]
[35.76986694 112.26326752]
[35.06697464 92.27989960]
[20.47329903 88.81225586]
[5.87962008 85.34461212]
[-5.16383410 96.11705780]
[-20.28276825 99.18648529]
[-34.65278244 93.57344818]
[-43.68846130 81.06904602]
[-44.50655365 65.66339111]
[-36.84600449 52.27236938]
[-23.15126801 45.16900253]
[-7.79228735 46.61995697]
[4.32994318 56.16223526]
[9.34726524 70.75093079]
[23.94094276 74.21857452]
[38.53462219 77.68621826]
[47.19692230 61.42886353]
[60.04970169 48.23252869]
[76.07295227 39.14448166]
[93.99506378 34.88595963]
[112.39373016 35.79491425]
[129.80882263 41.79921722]
[144.85827637 52.42235565]
[156.33227539 42.76070023]
[167.80625916 33.09904480]
[179.28024292 23.43738937]
[190.60258484 13.59846020]
[201.77055359 3.58463788]
[212.93850708 -6.42918444]
[224.10647583 -16.44300652]
[235.27442932 -26.45682907]
[246.44239807 -36.47064972]
[257.45327759 -46.65694427]
[268.30441284 -57.01324463]
[279.15554810 -67.36954498]
[290.00668335 -77.72584534]
[300.85778809 -88.08214569]
[311.38159180 -98.77090454]
[321.56790161 -109.78178406]
[320.70318604 -125.56240082]
[331.31240845 -137.27648926]
[347.10128784 -137.97430420]
[358.70257568 -127.24182892]
[359.23339844 -111.44645691]
[348.37887573 -99.95930481]
[332.57876587 -99.59548950]
[322.39248657 -88.58460999]
[321.70123291 -83.69452667]
[317.81448364 -79.24448395]
[311.21411133 -77.23101044]
[300.36297607 -66.87471008]
[289.51184082 -56.51841354]
[278.66070557 -46.16211319]
[267.80957031 -35.80581284]
[265.09637451 -28.78697586]
[256.45620728 -25.30268860]
[245.28825378 -15.28886700]
[234.12030029 -5.27504492]
[222.95233154 4.73877764]
[211.78437805 14.75259972]
[200.61640930 24.76642227]
[197.68624878 31.69748306]
[188.94189453 34.91137695]
[177.46791077 44.57303238]
[165.99392700 54.23468781]
[154.51994324 63.89634705]
[159.53417969 72.95228577]
[163.05651855 82.68603516]
[164.99867249 92.85366058]
[165.31198120 103.20037842]
[163.98860168 113.46688843]
[161.06167603 123.39592743]
[156.60456848 132.73867798]
[150.72895813 141.26100159]
[143.58210754 148.74932861]
[135.34310913 155.01602173]
[126.21840668 159.90402222]
[116.43669128 163.29086304]
[106.24307251 165.09164429]
[95.89300537 165.26124573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[22 36]
[23 35]
[24 34]
[43 86]
[44 85]
[45 84]
[46 83]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
