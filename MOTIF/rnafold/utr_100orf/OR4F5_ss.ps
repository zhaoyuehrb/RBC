%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGACUGAAUUCAUUUUUCUGGGUCUCUCUGAUUCUCAGGAACUCCAGACCUUCCUAUUUAUGUUGUUUUUUGUAUUCUAUGGAGGAAUCGUGUUUG\
) } def
/len { sequence length } bind def

/coor [
[100.39308167 162.27978516]
[102.20879364 147.39007568]
[109.42591858 134.23844910]
[100.30992889 146.15057373]
[91.19393921 158.06269836]
[82.07794952 169.97482300]
[72.96195984 181.88694763]
[75.29331970 197.51834106]
[65.82176971 210.17002869]
[50.16660690 212.33599854]
[37.61576462 202.73121643]
[35.61543274 187.05403137]
[45.35237503 174.60542297]
[61.04983521 172.77096558]
[70.16582489 160.85882568]
[79.28181458 148.94670105]
[88.39780426 137.03457642]
[97.51379395 125.12245941]
[85.13876343 117.97406006]
[79.48027039 106.07153320]
[81.42018127 94.15967560]
[69.94619751 84.49802399]
[58.47220993 74.83636475]
[46.99822235 65.17471313]
[35.52423477 55.51305389]
[23.90137672 46.03100586]
[12.13246250 36.73086166]
[3.29239869 33.79047012]
[0.14809278 26.95389175]
[-11.32589531 17.29223442]
[-20.07023621 14.07834053]
[-23.00040436 7.14727974]
[-34.16836548 -2.86654258]
[-45.33632660 -12.88036442]
[-56.50429153 -22.89418602]
[-72.33347321 -28.96651840]
[-70.88040924 -45.85808182]
[-54.24672318 -49.13785172]
[-46.49046707 -34.06214905]
[-35.32250595 -24.04832649]
[-24.15454483 -14.03450394]
[-12.98658276 -4.02068186]
[-1.66423905 5.81824684]
[9.80974865 15.47990322]
[21.43260574 24.96195030]
[33.20151901 34.26209259]
[40.53024292 35.96951675]
[45.18589020 44.03906631]
[56.65987778 53.70072174]
[68.13386536 63.36237717]
[79.60785675 73.02403259]
[91.08184052 82.68569183]
[114.27929688 82.79244232]
[124.18981934 107.22299957]
[138.66859436 103.30316925]
[153.14736938 99.38333893]
[167.62614441 95.46350861]
[182.10491943 91.54368591]
[186.11199951 74.59010315]
[198.01478577 61.99038315]
[214.54487610 57.07617569]
[231.22698975 61.08613968]
[243.59054565 72.85517120]
[257.79763794 68.04278564]
[272.00469971 63.23040009]
[286.21176147 58.41801453]
[290.69409180 43.56242371]
[303.07257080 34.20546341]
[318.58746338 33.94507980]
[331.27294922 42.88139343]
[336.25122070 57.57820892]
[331.60803223 72.38430023]
[319.12878418 81.60642242]
[303.61196899 81.69848633]
[291.02416992 72.62508392]
[276.81707764 77.43746948]
[262.61001587 82.24986267]
[248.40293884 87.06224823]
[247.23646545 99.83514404]
[241.24911499 111.23123932]
[231.32035828 119.49898529]
[218.93850708 123.35208130]
[205.97766113 122.16954803]
[194.41406250 116.09544373]
[186.02474976 106.02246094]
[171.54597473 109.94228363]
[157.06719971 113.86211395]
[142.58842468 117.78194427]
[128.10964966 121.70177460]
[143.01380920 120.00881958]
[157.48063660 123.97250366]
[169.44050598 133.02577209]
[177.18240356 145.87345886]
[179.59878540 160.67755127]
[176.34394836 175.32015991]
[167.88352966 187.70649719]
[155.42790222 196.06455994]
[140.75895691 199.19862366]
[125.97528839 196.66033936]
[113.19183350 188.81283569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 46]
[27 45]
[29 44]
[30 43]
[32 42]
[33 41]
[34 40]
[35 39]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[63 78]
[64 77]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
