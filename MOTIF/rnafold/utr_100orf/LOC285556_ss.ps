%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGGGACAAGGCUUCACAAGAAACAGCACAUGCUUUCCUUUCAUUUCUGGAAGUCCCGGGGUCAACCUACAGAUGCUGCUUCUUCCGUGGCCGAUGGCAUUCAGACUCCUCGCUGCUGCCGACGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[70.00627136 124.92308044]
[56.84108353 132.11181641]
[43.67589951 139.30055237]
[30.51071358 146.48928833]
[17.34552956 153.67802429]
[4.18034410 160.86676025]
[-8.98484135 168.05549622]
[-22.15002632 175.24423218]
[-24.95841789 179.87553406]
[-28.89583206 182.62683105]
[-33.02892685 183.38565063]
[-36.52091599 182.43777466]
[-50.16539383 188.66900635]
[-63.80987549 194.90022278]
[-61.84664917 209.88812256]
[-64.39004517 224.78854370]
[-71.21390533 238.27655029]
[-81.71146393 249.15280151]
[-94.94927216 256.45019531]
[-109.75024414 259.51980591]
[-124.79827881 258.08874512]
[-138.75532532 252.28425598]
[-150.38032532 242.62243652]
[-158.63960266 229.96241760]
[-162.79872131 215.42993164]
[-162.48788452 200.31719971]
[-157.73471069 185.96803284]
[-148.96186829 173.65832520]
[-136.94941711 164.48268127]
[-122.76550293 159.25698853]
[-107.67134857 158.44589233]
[-93.00911713 162.12152100]
[-80.08255768 169.95706177]
[-70.04109955 181.25575256]
[-56.39661789 175.02452087]
[-42.75214005 168.79330444]
[-29.33876038 162.07904053]
[-16.17357635 154.89030457]
[-3.00839090 147.70156860]
[10.15679359 140.51283264]
[23.32197952 133.32409668]
[36.48716354 126.13536835]
[49.65234756 118.94663239]
[62.81753159 111.75789642]
[61.00285339 99.91868591]
[62.86688614 88.08715057]
[68.23379517 77.37938690]
[76.59729767 68.80548859]
[87.16844177 63.17425919]
[98.95002747 61.01690674]
[101.43747711 46.22459030]
[103.92492676 31.43227577]
[106.41237640 16.63996124]
[108.89982605 1.84764576]
[111.38727570 -12.94466972]
[100.69290161 -24.03233910]
[98.60234070 -39.11487961]
[105.70972443 -52.37945938]
[119.10464478 -58.83811188]
[121.59209442 -73.63042450]
[124.07954407 -88.42274475]
[118.73785400 -103.31491852]
[128.47859192 -114.58289337]
[130.96603394 -129.37521362]
[133.45349121 -144.16752625]
[122.49049377 -155.14898682]
[120.10924530 -170.48225403]
[127.22537994 -184.27139282]
[141.10260010 -191.21418762]
[156.40483093 -188.64099121]
[167.24806213 -177.54124451]
[169.46282959 -162.18304443]
[162.19752502 -148.47192383]
[148.24580383 -141.68008423]
[145.75834656 -126.88776398]
[143.27090454 -112.09544373]
[148.79051208 -98.26131439]
[138.87185669 -85.93529510]
[136.38439941 -71.14297485]
[133.89695740 -56.35066223]
[144.44274902 -45.86618042]
[146.82080078 -31.00654411]
[139.91221619 -17.43728828]
[126.17959595 -10.45721912]
[123.69214630 4.33509588]
[121.20469666 19.12741089]
[118.71724701 33.91972733]
[116.22979736 48.71203995]
[113.74234772 63.50435638]
[129.89973450 74.96421814]
[138.34245300 92.88376617]
[136.89212036 112.63942719]
[149.88250732 120.13942719]
[162.87289429 127.63942719]
[175.86326599 135.13941956]
[191.68321228 135.33880615]
[198.83671570 148.40315247]
[211.82708740 155.90315247]
[224.81747437 163.40315247]
[237.80784607 170.90315247]
[250.79823303 178.40315247]
[263.50097656 175.82501221]
[274.19146729 182.41723633]
[277.37957764 194.14924622]
[290.18780518 201.95626831]
[302.99603271 209.76329041]
[317.26538086 203.66699219]
[332.38531494 207.15512085]
[342.54190063 218.88641357]
[343.82974243 234.34996033]
[335.75360107 247.59970093]
[321.41894531 253.54083252]
[306.33773804 249.88890076]
[296.30899048 238.04811096]
[295.18899536 222.57150269]
[282.38076782 214.76448059]
[269.57257080 206.95747375]
[252.07456970 207.53031921]
[243.29823303 191.39352417]
[230.30784607 183.89352417]
[217.31747437 176.39352417]
[204.32708740 168.89352417]
[191.33671570 161.39352417]
[176.44592285 161.73059082]
[168.36326599 148.12980652]
[155.37289429 140.62980652]
[142.38250732 133.12980652]
[129.39212036 125.62980652]
[118.95044708 134.08320618]
[106.25970459 138.49156189]
[92.82605743 138.33169556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[12 36]
[13 35]
[14 34]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[59 80]
[60 79]
[61 78]
[63 76]
[64 75]
[65 74]
[92 128]
[93 127]
[94 126]
[95 125]
[97 123]
[98 122]
[99 121]
[100 120]
[101 119]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
