%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACUUCUCCCUGGGCUCCCAGGCCCUCCUGCAGCAGCCCCCGCCUGGGCCAUGUCUUCCUCAGAUGAAGAGACGCUCAGUGAGCGGUCAUGUCGGAGUGAGCGGUCUUGUCGGAGUGAGCGAUCUUACAGGAGCGAGCGGUCGGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[93.60662842 237.65383911]
[96.26340485 252.59727478]
[93.33874512 267.49057007]
[85.22818756 280.31958008]
[73.02862549 289.34927368]
[58.38993835 293.35842896]
[43.29189682 291.80484009]
[29.77638245 284.89868164]
[19.67126083 273.57388306]
[14.34316444 259.36206055]
[14.51267529 244.18524170]
[20.15686798 230.09597778]
[30.51241302 218.99971008]
[44.17880630 212.39712524]
[59.30778122 211.18116760]
[63.56062698 196.79669189]
[67.81347656 182.41220093]
[72.06632233 168.02772522]
[76.31916809 153.64323425]
[80.57201385 139.25875854]
[84.82485962 124.87428284]
[71.89407349 107.68580627]
[74.27889252 86.30915833]
[63.29808807 76.09044647]
[52.31728745 65.87174225]
[41.33648300 55.65303421]
[30.25135040 45.54759979]
[19.06305504 35.55650330]
[7.87475777 25.56540489]
[-3.41552234 15.68969822]
[-14.80659580 5.93042374]
[-26.19766998 -3.82885075]
[-34.80751801 -7.06401873]
[-37.71977234 -13.90733433]
[-48.90806961 -23.89843178]
[-60.09636688 -33.88952637]
[-70.74862671 -17.74876595]
[-95.24087524 -12.25003052]
[-109.74950409 -16.05788803]
[-124.25812531 -19.86574745]
[-138.76675415 -23.67360687]
[-152.28477478 -15.48590088]
[-167.61291504 -19.33609200]
[-175.65724182 -32.93992615]
[-171.64520264 -48.22649384]
[-157.95707703 -56.12654495]
[-142.71377563 -51.95311737]
[-134.95889282 -38.18223190]
[-120.45027161 -34.37437439]
[-105.94164276 -30.56651497]
[-91.43301392 -26.75865555]
[-86.73108673 -32.60176086]
[-92.15000153 -46.58872986]
[-77.32723236 -44.28796768]
[-72.62530518 -50.13107300]
[-79.44887543 -63.48917389]
[-86.27245331 -76.84727478]
[-93.09603119 -90.20536804]
[-99.91960144 -103.56346893]
[-111.96215820 -108.29428101]
[-117.35710144 -119.61090088]
[-113.69163513 -131.17924500]
[-120.23950958 -144.67463684]
[-134.11225891 -153.41984558]
[-133.20475769 -169.79386902]
[-118.45057678 -176.95249939]
[-105.02754211 -167.53155518]
[-106.74412537 -151.22250366]
[-100.19625092 -137.72711182]
[-85.16596985 -128.71961975]
[-86.56150818 -110.38704681]
[-79.73793030 -97.02894592]
[-72.91435242 -83.67084503]
[-66.09078217 -70.31274414]
[-59.26720428 -56.95464706]
[-50.10527039 -45.07782364]
[-38.91697311 -35.08672714]
[-27.72867584 -25.09563065]
[-16.43839455 -15.21992397]
[-5.04732180 -5.46064997]
[6.34375238 4.29862452]
[13.51374245 6.27433634]
[17.86585426 14.37710762]
[29.05415154 24.36820412]
[40.24244690 34.35930252]
[47.37036133 36.48181152]
[51.55519104 44.67222977]
[62.53599548 54.89093781]
[73.51679993 65.10964203]
[84.49759674 75.32835388]
[92.51155090 71.84085083]
[101.19924164 70.88683319]
[109.77903748 72.55213928]
[117.47900391 76.68693542]
[123.60638428 82.91921997]
[127.60989380 90.68826294]
[129.12933350 99.29508209]
[143.71307373 102.80425262]
[158.94039917 98.51013184]
[169.50437927 109.01020050]
[184.08813477 112.51937103]
[197.46102905 104.53166962]
[212.20103455 108.29821777]
[219.73367310 121.09645844]
[234.31742859 124.60562897]
[249.54473877 120.31150818]
[260.10873413 130.81156921]
[274.69247437 134.32073975]
[289.27621460 137.82991028]
[303.85998535 141.33908081]
[318.44372559 144.84825134]
[333.02746582 148.35740662]
[348.25479126 144.06329346]
[358.81878662 154.56335449]
[373.40252686 158.07252502]
[387.98626709 161.58169556]
[399.70288086 151.40815735]
[415.16455078 150.09797668]
[428.42593384 158.15493774]
[434.38781738 172.48100281]
[430.75769043 187.56747437]
[418.93139648 197.61331177]
[403.45645142 198.75569153]
[390.28320312 190.55532837]
[384.47711182 176.16545105]
[369.89337158 172.65628052]
[355.30960083 169.14710999]
[341.12542725 173.69223022]
[329.51831055 162.94116211]
[314.93457031 159.43199158]
[300.35079956 155.92282104]
[285.76705933 152.41366577]
[271.18331909 148.90449524]
[256.59954834 145.39532471]
[242.41537476 149.94044495]
[230.80825806 139.18937683]
[216.22450256 135.68020630]
[203.69441223 143.65092468]
[188.85443115 140.29988098]
[180.57896423 127.10311890]
[165.99520874 123.59394836]
[151.81103516 128.13906860]
[140.20390320 117.38800049]
[125.62016296 113.87882996]
[114.56892395 125.23412323]
[99.20934296 129.12712097]
[94.95649719 143.51161194]
[90.70365143 157.89608765]
[86.45080566 172.28056335]
[82.19795227 186.66505432]
[77.94510651 201.04953003]
[73.69226074 215.43400574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 152]
[16 151]
[17 150]
[18 149]
[19 148]
[20 147]
[21 146]
[23 90]
[24 89]
[25 88]
[26 87]
[27 85]
[28 84]
[29 83]
[30 81]
[31 80]
[32 79]
[34 78]
[35 77]
[36 76]
[38 51]
[39 50]
[40 49]
[41 48]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[62 69]
[63 68]
[97 144]
[98 143]
[100 141]
[101 140]
[104 137]
[105 136]
[107 134]
[108 133]
[109 132]
[110 131]
[111 130]
[112 129]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
