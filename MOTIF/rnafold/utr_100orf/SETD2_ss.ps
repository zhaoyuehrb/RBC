%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCGCCCUGCUGCGGGGAGGGGGCUCGCGUCGCCGUCUCCAGCCGCUCCCGAUGAAGCAGCUGCAGCCGCAGCCGCCUCCGAAGAUGGGGGAUUUCUACGACCCGGAGCACCCGACCCCUGAAGAAGAAGAAAAUGAGGCAAAGAUUGAAA\
) } def
/len { sequence length } bind def

/coor [
[129.85354614 169.53945923]
[126.51573944 154.91554260]
[116.14034271 144.22908020]
[120.61282349 129.05320740]
[117.27500916 114.42928314]
[102.35297394 112.90193939]
[96.12174988 126.54641724]
[101.87892151 141.26478577]
[95.46594238 155.70948792]
[80.68751526 161.31072998]
[66.31143188 154.74539185]
[60.86675644 139.90856934]
[67.58371735 125.60269928]
[82.47727203 120.31519318]
[88.70849609 106.67071533]
[89.32032013 91.68319702]
[84.22198486 77.57621765]
[79.12364197 63.46923447]
[74.02530670 49.36225128]
[59.99532318 42.59487534]
[55.02584076 28.21576118]
[61.56396484 14.88202381]
[56.46562576 0.77504158]
[51.36728668 -13.33193970]
[46.12532043 -27.38618660]
[40.74028015 -41.38623428]
[35.35523987 -55.38628006]
[29.97020149 -69.38632965]
[13.87691593 -76.16997528]
[7.76094103 -92.16840363]
[14.93716145 -107.34822845]
[9.26766109 -121.23551178]
[3.59816003 -135.12280273]
[-2.07134032 -149.01008606]
[-20.94982910 -155.71965027]
[-28.77756691 -173.83325195]
[-20.97026062 -191.62553406]
[-27.47851753 -205.14007568]
[-33.98677444 -218.65460205]
[-40.49502945 -232.16912842]
[-47.00328445 -245.68367004]
[-53.51154327 -259.19821167]
[-66.06652832 -259.79989624]
[-77.09902954 -265.67001343]
[-84.52615356 -275.63034058]
[-86.97569275 -287.73718262]
[-84.03932190 -299.66070557]
[-76.33917236 -309.13314819]
[-82.29077148 -322.90191650]
[-94.00386047 -328.39578247]
[-98.66128540 -340.03433228]
[-94.26203918 -351.34304810]
[-99.93154144 -365.23034668]
[-104.98719788 -369.64068604]
[-106.74581146 -375.12463379]
[-105.53627777 -379.80154419]
[-110.63461304 -393.90853882]
[-122.60180664 -404.25729370]
[-119.65100861 -418.85665894]
[-124.74935150 -432.96365356]
[-136.71653748 -443.31240845]
[-133.76574707 -457.91180420]
[-138.86408997 -472.01876831]
[-143.96241760 -486.12576294]
[-149.06076050 -500.23272705]
[-154.15910339 -514.33972168]
[-167.03956604 -524.48986816]
[-164.42204285 -540.67877197]
[-148.99920654 -546.25268555]
[-136.63676453 -535.47760010]
[-140.05212402 -519.43804932]
[-134.95378113 -505.33108521]
[-129.85543823 -491.22409058]
[-124.75710297 -477.11712646]
[-119.65876007 -463.01013184]
[-108.05623627 -453.67041016]
[-110.64236450 -438.06198120]
[-105.54402924 -423.95501709]
[-93.94149780 -414.61526489]
[-96.52763367 -399.00686646]
[-91.42929840 -384.89987183]
[-86.04425049 -370.89984131]
[-80.37475586 -357.01254272]
[-65.95252991 -347.05935669]
[-68.52202606 -328.85351562]
[-62.57042313 -315.08474731]
[-45.21847153 -312.06781006]
[-33.01065826 -299.15667725]
[-30.93306541 -281.35229492]
[-39.99700928 -265.70645142]
[-33.48875427 -252.19192505]
[-26.98049736 -238.67739868]
[-20.47224045 -225.16285706]
[-13.96398449 -211.64833069]
[-7.45572853 -198.13378906]
[2.89093256 -197.46403503]
[12.08236504 -192.49334717]
[18.40438080 -184.07173157]
[20.64592934 -173.69960022]
[18.33061028 -163.26058960]
[11.81594753 -154.67959595]
[17.48544884 -140.79229736]
[23.15494919 -126.90501404]
[28.82444954 -113.01773071]
[41.31674957 -109.72031403]
[49.74020386 -99.66786957]
[50.83302689 -86.40272522]
[43.97024918 -74.77136993]
[49.35528946 -60.77132034]
[54.74032974 -46.77127457]
[60.12537003 -32.77122498]
[65.49436951 -27.62636185]
[65.47426605 -18.43027878]
[70.57260895 -4.32329798]
[75.67094421 9.78368378]
[89.22280884 15.85679245]
[94.59420776 30.09065056]
[88.13228607 44.26391220]
[93.23062897 58.37089157]
[98.32896423 72.47787476]
[103.42730713 86.58485413]
[99.17270660 72.20089722]
[99.67575073 57.20933151]
[104.88501740 43.14293289]
[114.26789856 31.43987656]
[126.86506653 23.29669762]
[141.38856506 19.54597473]
[156.35348511 20.57118797]
[170.22979736 26.26751518]
[181.59873962 36.05255508]
[189.29794312 48.92586899]
[192.54023743 63.57126236]
[190.99411011 78.49136353]
[184.81764221 92.16072083]
[174.64231873 103.18174744]
[161.50849915 110.42762756]
[146.75900269 113.15753937]
[131.89892578 111.09146881]
[135.23674011 125.71538544]
[145.85087585 137.44784546]
[141.13966370 151.57772827]
[144.47747803 166.20166016]
[159.36929321 169.54777527]
[171.32919312 179.03056335]
[177.98254395 192.76722717]
[178.00830078 208.03031921]
[171.40136719 221.78935242]
[159.47352600 231.31245422]
[144.59309387 234.70883179]
[129.71456909 231.30409241]
[117.79209137 221.77427673]
[111.19289398 208.01152039]
[111.22724152 192.74844360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[4 139]
[5 138]
[6 15]
[7 14]
[16 121]
[17 120]
[18 119]
[19 118]
[22 115]
[23 114]
[24 113]
[25 111]
[26 110]
[27 109]
[28 108]
[31 104]
[32 103]
[33 102]
[34 101]
[37 95]
[38 94]
[39 93]
[40 92]
[41 91]
[42 90]
[48 86]
[49 85]
[52 83]
[53 82]
[56 81]
[57 80]
[59 78]
[60 77]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
