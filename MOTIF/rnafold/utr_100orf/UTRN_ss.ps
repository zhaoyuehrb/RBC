%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUUGAUGUCAAGCUGAACCAUCGUAGGAAGUUGAAAGCCUUAGAAAGAGGACUUGGUAAAGUUUUUGGAUUAUCUUGAAACUCUGGCAAGAUGGCCAAGUAUGGAGAACAUGAAGCCAGUCCUGACAAUGGGCAGAACGAAUUCAGUGAUAUCAUUAAGUCCAGAUCUGAUGAACACAAUGACGUACAGA\
) } def
/len { sequence length } bind def

/coor [
[223.77090454 428.66894531]
[231.47366333 407.55642700]
[224.00892639 394.54574585]
[210.96405029 387.35684204]
[210.80758667 371.53640747]
[203.34284973 358.52572632]
[195.87812805 345.51504517]
[188.41339111 332.50436401]
[180.94865417 319.49368286]
[173.48393250 306.48303223]
[166.01919556 293.47235107]
[161.71138000 291.37863159]
[158.68046570 286.54873657]
[158.53115845 279.91442871]
[151.49386597 266.66766357]
[144.45658875 253.42091370]
[137.41931152 240.17414856]
[130.38201904 226.92738342]
[123.34474182 213.68063354]
[113.32701111 211.57421875]
[105.97388458 204.13977051]
[103.89176941 193.66844177]
[108.00720215 183.57945251]
[101.40482330 170.11064148]
[94.80244446 156.64184570]
[88.20007324 143.17303467]
[87.53691101 158.15837097]
[91.79688263 172.54074097]
[89.63386536 187.38397217]
[81.44649506 199.95246887]
[68.74369812 207.92987061]
[53.86657715 209.84594727]
[39.55697632 205.34759521]
[28.45212555 195.26382446]
[22.59863853 181.45307922]
[23.07530594 166.46066284]
[29.79427719 153.04963684]
[41.51725388 143.69165039]
[56.08190536 140.11141968]
[68.68405151 131.97595215]
[53.72427368 133.07369995]
[38.76449585 134.17146301]
[23.80471992 135.26922607]
[12.27498055 146.42471313]
[-3.61626363 144.22290039]
[-11.67860889 130.35285950]
[-5.72731495 115.45448303]
[9.67229557 110.95653534]
[22.70695877 120.30945587]
[37.66673660 119.21169281]
[52.62651062 118.11392975]
[67.58628845 117.01616669]
[66.27564240 98.69969177]
[73.83638000 83.57857513]
[63.44776917 72.75836945]
[53.05916214 61.93816376]
[42.67055511 51.11795807]
[27.53163719 46.52189636]
[24.29833984 31.98246574]
[13.90973282 21.16226006]
[-1.22918367 16.56619835]
[-4.46248102 2.02676821]
[-14.85108852 -8.79343700]
[-25.23969650 -19.61364174]
[-35.62830353 -30.43384743]
[-46.01691055 -41.25405121]
[-56.40551758 -52.07425690]
[-71.54443359 -56.67031860]
[-74.77773285 -71.20974731]
[-85.16633606 -82.02995300]
[-95.55494690 -92.85015869]
[-110.88622284 -100.08813477]
[-108.17523193 -116.82392883]
[-91.34300232 -118.85181427]
[-84.73474121 -103.23876953]
[-74.34613800 -92.41856384]
[-63.95752716 -81.59835815]
[-49.56167221 -77.77622986]
[-45.58531189 -62.46286392]
[-35.19670486 -51.64265823]
[-24.80809784 -40.82245255]
[-14.41949081 -30.00224876]
[-4.03088331 -19.18204498]
[6.35772419 -8.36183929]
[20.75357819 -4.53971195]
[24.72993851 10.77365303]
[35.11854553 21.59385681]
[49.51440048 25.41598511]
[53.49076080 40.72935104]
[63.87936783 51.54955673]
[74.26797485 62.36975861]
[84.65657806 73.18996429]
[92.39637756 66.55264282]
[102.74069977 62.38834763]
[107.76889801 48.25621414]
[112.79708862 34.12407684]
[117.82528687 19.99194145]
[110.72131348 10.43681049]
[109.13523102 -1.24261200]
[113.34713745 -12.12244797]
[122.20014191 -19.53531837]
[133.41526794 -21.72415161]
[138.90080261 -35.68513489]
[144.38632202 -49.64611435]
[149.87185669 -63.60709763]
[144.80598450 -78.82933044]
[153.66914368 -92.20183563]
[169.66229248 -93.46636963]
[180.51683044 -81.65288544]
[177.90611267 -65.82368469]
[163.83283997 -58.12157059]
[158.34730530 -44.16058731]
[152.86178589 -30.19960594]
[147.37625122 -16.23862457]
[155.69129944 0.05784196]
[149.35989380 17.56219864]
[131.95742798 25.02013779]
[126.92922211 39.15227127]
[121.90103149 53.28440857]
[116.87283325 67.41654205]
[128.50180054 76.89109802]
[141.32635498 69.11094666]
[154.15092468 61.33079529]
[166.97547913 53.55064774]
[169.17707825 38.06882095]
[180.84960938 27.66275215]
[196.48162842 27.24586678]
[208.69219971 37.01500320]
[211.71585083 52.35747910]
[204.12490845 66.02904510]
[189.50358582 71.57440186]
[174.75563049 66.37520599]
[161.93106079 74.15535736]
[149.10650635 81.93550110]
[136.28195190 89.71565247]
[136.86952209 106.48616791]
[130.14648438 121.72691345]
[117.55220032 132.44038391]
[101.66886902 136.57066345]
[108.27124786 150.03947449]
[114.87362671 163.50827026]
[121.47599792 176.97706604]
[138.70016479 187.43133545]
[136.59150696 206.64334106]
[143.62878418 219.89010620]
[150.66606140 233.13687134]
[157.70335388 246.38362122]
[164.74063110 259.63040161]
[171.77790833 272.87713623]
[179.02987671 286.00759888]
[186.49461365 299.01828003]
[193.95933533 312.02896118]
[201.42407227 325.03964233]
[208.88879395 338.05032349]
[216.35353088 351.06100464]
[223.81826782 364.07168579]
[237.39706421 372.19119263]
[237.01960754 387.08102417]
[244.48434448 400.09170532]
[252.77114868 399.36755371]
[260.87127686 401.10614014]
[268.07208252 405.13415527]
[273.74597168 411.07778931]
[277.40524292 418.39730835]
[278.74380493 426.43612671]
[277.66284180 434.47949219]
[274.27764893 441.81829834]
[268.90591431 447.81137085]
[275.06637573 461.48794556]
[281.22683716 475.16452026]
[287.38732910 488.84109497]
[293.65890503 502.46707153]
[300.04116821 516.04156494]
[306.42343140 529.61602783]
[321.73458862 530.82623291]
[334.38021851 539.54309082]
[340.95870972 553.42181396]
[339.70053101 568.72906494]
[330.94406128 581.34735107]
[317.04479980 587.88232422]
[301.74154663 586.57611084]
[289.15081787 577.78015137]
[282.65945435 563.86047363]
[284.01358032 548.56140137]
[292.84896851 535.99829102]
[286.46667480 522.42382812]
[280.08441162 508.84933472]
[274.38464355 504.12667847]
[273.71075439 495.00155640]
[267.55029297 481.32498169]
[261.38980103 467.64840698]
[255.22933960 453.97183228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 159]
[3 158]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[11 150]
[14 149]
[15 148]
[16 147]
[17 146]
[18 145]
[19 144]
[23 142]
[24 141]
[25 140]
[26 139]
[40 52]
[41 51]
[42 50]
[43 49]
[54 92]
[55 91]
[56 90]
[57 89]
[59 87]
[60 86]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[69 77]
[70 76]
[71 75]
[94 120]
[95 119]
[96 118]
[97 117]
[102 114]
[103 113]
[104 112]
[105 111]
[121 135]
[122 134]
[123 133]
[124 132]
[168 192]
[169 191]
[170 190]
[171 189]
[172 187]
[173 186]
[174 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
