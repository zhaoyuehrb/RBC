%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGCUAACAAAGGGAGCCACUUCCUUCCUCUCUGCACAUACCCCAUGUCUCACCACGAUGAUGGAGCUACAGUGGGACUUGGAAUCCAGAUGUGUGAAGGAUGGAGGGUUGAAGCCGCACUCAGCUUCCUGCCCCACCAGAGGA\
) } def
/len { sequence length } bind def

/coor [
[79.93517303 123.36017609]
[74.60457611 137.38104248]
[69.27397919 151.40191650]
[63.94337845 165.42277527]
[72.54863739 178.33514404]
[71.88711548 193.83810425]
[62.21316528 205.97047424]
[47.24662399 210.06709290]
[32.74243546 204.55274963]
[24.27775192 191.54779053]
[25.10741806 176.05291748]
[34.91241074 164.02619934]
[49.92250824 160.09217834]
[55.25310898 146.07131958]
[60.58370972 132.05044556]
[65.91430664 118.02957916]
[54.51430511 127.77841949]
[42.45712662 118.85517120]
[37.31885529 104.76268768]
[40.80293655 90.17292023]
[51.75432587 79.92269897]
[66.54240417 77.41018677]
[80.26583862 83.46937561]
[91.45491028 93.45960999]
[86.42514801 79.32803345]
[81.39539337 65.19645691]
[69.47859955 54.78968811]
[72.50027466 40.20481110]
[67.47052002 26.07323074]
[62.44075775 11.94165230]
[57.41099930 -2.18992639]
[51.54468918 -9.28605652]
[52.42826843 -16.67757988]
[47.70164490 -30.91341591]
[41.98831940 -38.13328934]
[43.02965546 -45.50424194]
[38.60832596 -59.83783340]
[34.18700027 -74.17142487]
[29.76567078 -88.50502014]
[25.34434319 -102.83860779]
[20.92301559 -117.17220306]
[1.74830329 -122.52433777]
[-10.30716801 -138.18737793]
[-10.56912136 -157.80848694]
[0.89630103 -173.55754089]
[-4.73270416 -187.46128845]
[-10.36170959 -201.36503601]
[-22.71229172 -211.25309753]
[-20.31658363 -225.95376587]
[-25.94558907 -239.85751343]
[-31.57459450 -253.76127625]
[-37.20359802 -267.66500854]
[-42.83260345 -281.56878662]
[-48.46160889 -295.47253418]
[-54.09061432 -309.37628174]
[-59.55800629 -295.40817261]
[-72.10182953 -287.18307495]
[-87.09159088 -287.73721313]
[-98.99388123 -296.86602783]
[-103.41503143 -311.19967651]
[-98.72299194 -325.44692993]
[-86.64980316 -334.34851074]
[-71.65222931 -334.61843872]
[-59.26694107 -326.15750122]
[-62.44829941 -340.81625366]
[-75.87349701 -349.15530396]
[-79.38854218 -364.56375122]
[-70.90802002 -377.90002441]
[-55.46328354 -381.25198364]
[-42.21740723 -372.63092041]
[-39.02894592 -357.15161133]
[-47.78955078 -343.99761963]
[-44.60818863 -329.33886719]
[-40.18686295 -315.00527954]
[-34.55785751 -301.10153198]
[-28.92885208 -287.19778442]
[-23.29984665 -273.29403687]
[-17.67084312 -259.39028931]
[-12.04183769 -245.48652649]
[-6.41283226 -231.58277893]
[5.53512621 -222.68920898]
[3.54204226 -206.99404907]
[9.17104721 -193.09028625]
[14.80005264 -179.18653870]
[25.29551315 -178.94931030]
[35.13692093 -175.18550110]
[43.17061996 -168.30867004]
[48.44559860 -159.09887695]
[50.32603073 -148.61425781]
[48.56782150 -138.06948853]
[43.34994888 -128.69502258]
[35.25660706 -121.59352875]
[39.67793655 -107.25994110]
[44.09926224 -92.92634583]
[48.52059174 -78.59275055]
[52.94191742 -64.25916290]
[57.36324692 -49.92557144]
[61.93748093 -35.64004135]
[66.66410828 -21.40420341]
[71.54257965 -7.21968651]
[76.57233429 6.91189194]
[81.60209656 21.04347038]
[86.63185883 35.17504883]
[98.18888092 44.57102585]
[95.52696991 60.16669464]
[100.55673218 74.29827118]
[105.58648682 88.42984772]
[115.30991364 99.85153961]
[128.45759583 107.07222748]
[141.60528564 114.29291534]
[154.75297546 121.51359558]
[173.11470032 120.66416931]
[181.67501831 135.94905090]
[194.97401428 142.88713074]
[208.27301025 149.82521057]
[221.57199097 156.76327515]
[234.87098694 163.70135498]
[248.70339966 156.66972351]
[264.02182007 159.14476013]
[274.93597412 170.17474365]
[277.24917603 185.51843262]
[270.07192993 199.27586365]
[256.16406250 206.15701294]
[240.87339783 203.51596069]
[230.07952881 192.36822510]
[227.93290710 177.00035095]
[214.63391113 170.06227112]
[201.33493042 163.12419128]
[188.03593445 156.18612671]
[174.73695374 149.24804688]
[163.06082153 152.57511902]
[151.90339661 146.84536743]
[147.53228760 134.66128540]
[134.38459778 127.44059753]
[121.23691559 120.21991730]
[108.08922577 112.99922943]
[101.05071259 115.58946228]
[109.12711334 128.22955322]
[117.20351410 140.86962891]
[127.34344482 151.92321777]
[126.71517181 166.91006470]
[115.68566895 177.07618713]
[100.69738007 176.48345947]
[90.50512695 165.47808838]
[91.06153107 150.49012756]
[89.01760864 135.63003540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[24 107]
[25 106]
[26 105]
[28 103]
[29 102]
[30 101]
[31 100]
[33 99]
[34 98]
[36 97]
[37 96]
[38 95]
[39 94]
[40 93]
[41 92]
[45 84]
[46 83]
[47 82]
[49 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[64 73]
[65 72]
[108 136]
[109 135]
[110 134]
[111 133]
[113 130]
[114 129]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
