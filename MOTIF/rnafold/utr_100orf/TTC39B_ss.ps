%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGCCCGGCCAGCGGCGCGGCGUCCGGGGAGGAAAUGGAUGCUGUGCUGGCCUGCCGGCUCCGGGGGCGGGGAAAUCGAGUAGCUGCACUCAGGCCCCGCCCGAGACCCGGAGGGAGCGCCGGGCCGUCCCCUU\
) } def
/len { sequence length } bind def

/coor [
[81.47911072 279.97961426]
[78.53888702 265.03723145]
[81.93681335 250.19221497]
[91.08415985 238.01658630]
[104.39611053 230.61984253]
[103.03208923 215.68199158]
[101.66806793 200.74414062]
[100.30403900 185.80628967]
[98.94001770 170.86843872]
[97.57599640 155.93058777]
[96.21197510 140.99272156]
[94.84795380 126.05487823]
[88.16494751 123.77670288]
[82.31835938 119.81816864]
[77.72138214 114.45903015]
[74.69889832 108.07802582]
[59.70278931 108.41947174]
[44.70667267 108.76092529]
[29.71056175 109.10237122]
[14.71444798 109.44381714]
[-0.28166562 109.78527069]
[-15.27777863 110.12671661]
[-30.27389145 110.46816254]
[-45.27000427 110.80960846]
[-60.26611710 111.15106201]
[-75.26222992 111.49250793]
[-90.25834656 111.83395386]
[-105.25445557 112.17539978]
[-120.25057220 112.51685333]
[-128.20571899 125.73498535]
[-142.05436707 132.53341675]
[-157.37745667 130.74276733]
[-169.28544617 120.93444824]
[-173.97854614 106.23824310]
[-169.95921326 91.34366608]
[-158.50997925 81.00352478]
[-143.28425598 78.51731110]
[-129.14053345 84.67837524]
[-120.59201813 97.52073669]
[-105.59590912 97.17929077]
[-90.59979248 96.83784485]
[-75.60368347 96.49639130]
[-60.60756683 96.15494537]
[-45.61145401 95.81349945]
[-30.61533928 95.47204590]
[-15.61922646 95.13059998]
[-0.62311357 94.78915405]
[14.37300014 94.44770813]
[29.36911201 94.10625458]
[44.36522675 93.76480865]
[59.36133957 93.42336273]
[74.35745239 93.08191681]
[89.41871643 75.63944244]
[112.44641876 76.53754425]
[122.93160248 65.81089783]
[133.41679382 55.08425903]
[137.53025818 39.80715561]
[151.95980835 36.11423111]
[162.44499207 25.38758850]
[172.93017578 14.66094494]
[183.41535950 3.93430281]
[187.52883911 -11.34280109]
[201.95837402 -15.03572464]
[212.44355774 -25.76236725]
[210.74430847 -39.17564011]
[217.01390076 -50.93392944]
[228.74966431 -56.82249069]
[241.53791809 -54.87880707]
[252.26455688 -65.36399078]
[262.99121094 -75.84918213]
[273.71783447 -86.33436584]
[284.44448853 -96.81954956]
[295.17111206 -107.30474091]
[305.89776611 -117.78992462]
[316.62442017 -128.27511597]
[313.17803955 -140.39338684]
[315.23361206 -152.74987793]
[322.33502197 -162.98059082]
[333.06680298 -169.15512085]
[345.33605957 -170.14085388]
[356.78033447 -165.81019592]
[367.97308350 -175.79629517]
[379.16586304 -185.78240967]
[390.35861206 -195.76850891]
[391.00726318 -211.55947876]
[402.68826294 -222.20512390]
[418.47149658 -221.38955688]
[428.99304199 -209.59666443]
[428.01065063 -193.82293701]
[416.10717773 -183.42665100]
[400.34469604 -184.57574463]
[389.15194702 -174.58964539]
[377.95919800 -164.60354614]
[366.76644897 -154.61744690]
[369.37881470 -137.22085571]
[361.00939941 -121.57043457]
[344.80770874 -113.95107269]
[327.10958862 -117.54846954]
[316.38296509 -107.06328583]
[305.65631104 -96.57809448]
[294.92965698 -86.09291077]
[284.20303345 -75.60772705]
[273.47637939 -65.12253571]
[262.74975586 -54.63735199]
[252.02310181 -44.15216446]
[252.57476807 -27.38232040]
[240.62176514 -15.13213158]
[223.17021179 -15.27718067]
[212.68501282 -4.55053806]
[209.32151794 9.95932388]
[194.14199829 14.41948986]
[183.65681458 25.14613152]
[173.17163086 35.87277603]
[162.68644714 46.59941864]
[159.32293701 61.10927963]
[144.14343262 65.56944275]
[133.65824890 76.29608917]
[123.17305756 87.02272797]
[126.46458435 97.75810242]
[125.02585602 108.89418793]
[119.11404419 118.44054413]
[109.78580475 124.69084930]
[111.14982605 139.62870789]
[112.51384735 154.56655884]
[113.87786865 169.50440979]
[115.24189758 184.44226074]
[116.60591888 199.38011169]
[117.96994019 214.31796265]
[119.33396149 229.25581360]
[133.76542664 234.11923218]
[144.96670532 244.43675232]
[150.99710083 258.42083740]
[150.81181335 273.64862061]
[144.44294739 287.48181152]
[132.99394226 297.52374268]
[118.44841766 302.03457642]
[103.32646942 300.23278809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[12 122]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[54 118]
[55 117]
[56 116]
[58 114]
[59 113]
[60 112]
[61 111]
[63 109]
[64 108]
[68 105]
[69 104]
[70 103]
[71 102]
[72 101]
[73 100]
[74 99]
[75 98]
[81 94]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
