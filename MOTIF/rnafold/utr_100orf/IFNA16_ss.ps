%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCAAUGGCCCUGUCCUUUUCUUUACUGAUGGCCGUGCUGGUGCUCAGCUACAAAUCCAUCUGUUCUCUGGGCUGUGAUCUGCCUCAGACUCACAGCCUGGGUA\
) } def
/len { sequence length } bind def

/coor [
[123.63640594 160.85299683]
[110.50748444 168.10774231]
[95.51132202 167.76824951]
[82.72414398 159.92681885]
[75.62171936 146.71487427]
[76.13459778 131.72364807]
[84.12238312 119.02892303]
[69.58708954 122.73367310]
[55.05179214 126.43842316]
[40.51649475 130.14317322]
[25.98119926 133.84791565]
[11.44590282 137.55267334]
[6.26135969 142.05899048]
[0.45349306 143.00210571]
[-4.05131435 141.02148438]
[-18.77898026 143.86680603]
[-33.50664520 146.71212769]
[-37.35048294 161.48330688]
[-47.22917938 173.11834717]
[-61.18131256 179.30709839]
[-76.43668365 178.82078552]
[-89.96631622 171.75596619]
[-99.08390045 159.51535034]
[-101.97913361 144.52934265]
[-98.07716370 129.77342224]
[-88.15272522 118.17737579]
[-74.17632294 112.04361725]
[-58.92298889 112.58999634]
[-45.42127991 119.70804596]
[-36.35196686 131.98445129]
[-21.62430191 129.13914490]
[-6.89663506 126.29381561]
[7.74115467 123.01737213]
[22.27645111 119.31262207]
[36.81174850 115.60787201]
[51.34704590 111.90312958]
[65.88233948 108.19837952]
[80.41763306 104.49362946]
[86.41120911 90.74310303]
[79.23126221 77.57312012]
[72.05131531 64.40314484]
[64.87136841 51.23316193]
[49.94914246 45.34191895]
[45.38920975 29.96054649]
[54.68955994 16.88832283]
[70.71575928 16.15313530]
[81.17388153 28.31896019]
[78.04134369 44.05321503]
[85.22129059 57.22319412]
[92.40124512 70.39317322]
[99.58119202 83.56314850]
[93.09017944 70.04032898]
[91.21342468 55.15819931]
[94.14394379 40.44724655]
[101.58036041 27.42036247]
[112.75789642 17.41723251]
[126.52706146 11.46658802]
[141.47181702 10.18039608]
[156.05523682 13.69093037]
[168.77755737 21.63716507]
[178.33039856 33.20190430]
[183.73135376 47.19582367]
[184.42495728 62.17977905]
[180.33992004 76.61280823]
[171.89631653 89.01061249]
[159.96250916 98.09819794]
[145.76576233 102.94098663]
[130.76609802 103.04093933]
[116.50666046 98.38808441]
[130.50773621 103.77045441]
[144.50880432 109.15282440]
[158.50987244 114.53519440]
[172.51095581 119.91756439]
[186.51202393 125.29994202]
[200.51310730 130.68231201]
[214.51417542 136.06468201]
[228.51524353 141.44705200]
[242.51632690 146.82942200]
[256.51739502 152.21179199]
[270.51846313 157.59416199]
[284.59704590 162.77043152]
[298.75009155 167.73945618]
[312.90313721 172.70848083]
[327.05618286 177.67750549]
[344.00396729 177.21957397]
[349.13558960 193.37825012]
[335.02899170 202.78251648]
[322.08715820 191.83056641]
[307.93411255 186.86152649]
[293.78106689 181.89250183]
[279.62802124 176.92347717]
[272.15670776 177.68939209]
[265.13610840 171.59524536]
[251.13502502 166.21287537]
[237.13395691 160.83050537]
[223.13287354 155.44812012]
[209.13180542 150.06575012]
[195.13073730 144.68338013]
[181.12965393 139.30101013]
[167.12858582 133.91864014]
[153.12750244 128.53627014]
[139.12643433 123.15390015]
[125.12535858 117.77153015]
[111.12428284 112.38916016]
[124.08939362 119.93276215]
[131.49548340 132.97691345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[15 32]
[16 31]
[17 30]
[39 51]
[40 50]
[41 49]
[42 48]
[69 104]
[70 103]
[71 102]
[72 101]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
