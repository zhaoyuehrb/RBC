%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUUUCCGCUAGUGGGACAUCAUUUUUUAAGGGUAUGUUGCUUGGGAGCAUUUCCUGGGUUUUGAUAACUAUGUUUGGCCAAAUUCACAUUCGACACA\
) } def
/len { sequence length } bind def

/coor [
[93.70087433 116.37945557]
[82.84973907 126.73575592]
[71.99861145 137.09205627]
[61.14748001 147.44836426]
[50.29634857 157.80465698]
[45.65517044 172.92980957]
[31.10616302 176.11973572]
[20.25503159 186.47604370]
[9.40390110 196.83233643]
[10.58354759 212.42536926]
[1.42226052 225.09835815]
[-13.75428104 228.86752319]
[-27.78017807 221.95317078]
[-34.03282928 207.62005615]
[-29.55992699 192.63581848]
[-16.47343636 184.07557678]
[-0.95239884 185.98120117]
[9.89873219 175.62490845]
[20.74986267 165.26861572]
[24.61489487 150.88421631]
[39.94004822 146.95353699]
[50.79117966 136.59722900]
[61.64231110 126.24092865]
[72.49343872 115.88462830]
[83.34457397 105.52832794]
[69.53382874 111.38182831]
[55.36318588 106.46321869]
[48.14896774 93.31197357]
[51.61589432 78.71813202]
[63.97398758 70.21650696]
[78.84272766 72.19651794]
[88.54603577 83.63780975]
[83.51329041 69.50729370]
[78.48053741 55.37678146]
[73.44779205 41.24626923]
[61.52879715 30.84202766]
[64.54738617 16.25650787]
[59.51463699 2.12599397]
[54.48188782 -12.00452042]
[49.44913864 -26.13503456]
[44.41638565 -40.26554871]
[29.69711113 -45.54540634]
[21.86001015 -59.07736206]
[24.60552406 -74.47204590]
[36.63730621 -84.46054840]
[52.27431488 -84.32661438]
[64.13323975 -74.13347626]
[66.61464691 -58.69402695]
[58.54690170 -45.29829788]
[63.57965088 -31.16778374]
[68.61240387 -17.03726959]
[73.64514923 -2.90675640]
[78.67790222 11.22375774]
[90.23691559 20.61729050]
[87.57830048 36.21352005]
[92.61105347 50.34403229]
[97.64380646 64.47454834]
[102.67655182 78.60506439]
[107.30683899 84.45514679]
[108.75964355 90.67872620]
[123.10950470 86.31050873]
[137.45936584 81.94229126]
[151.80923462 77.57406616]
[158.63685608 66.49523926]
[170.81361389 63.21635437]
[181.57006836 68.98841095]
[196.04884338 65.06858063]
[210.52761841 61.14875412]
[225.00639343 57.22892761]
[236.18235779 45.22767639]
[252.10086060 49.16890335]
[256.38632202 64.99820709]
[244.63021851 76.43176270]
[228.92622375 71.70770264]
[214.44744873 75.62753296]
[199.96867371 79.54735565]
[185.48989868 83.46718597]
[173.91427612 96.55559540]
[156.17745972 91.92393494]
[141.82759094 96.29215240]
[127.47772980 100.66037750]
[113.12786102 105.02859497]
[127.92999268 102.60022736]
[142.80432129 104.53786469]
[156.49032593 110.67732239]
[167.82824707 120.49830627]
[175.85723877 133.16856384]
[179.89691162 147.61434937]
[179.60490417 162.61151123]
[175.00599670 176.88911438]
[166.48989868 189.23724365]
[154.77830505 198.60945129]
[140.86367798 204.21151733]
[125.92520142 205.56871033]
[111.22881317 202.56600952]
[98.01993561 195.45787048]
[87.41793823 184.84666443]
[80.32127380 171.63162231]
[77.33132935 156.93263245]
[78.70148468 141.99534607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[32 58]
[33 57]
[34 56]
[35 55]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[60 82]
[61 81]
[62 80]
[63 79]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
