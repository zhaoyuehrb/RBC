%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCCCCCCAACGGCUGACCCCUGCACACUCCACCCUGGCCCCCCAGCCAGUCCAGCAAUGAUGGAAAAAAACACCUCCGAGGGCCCUGCCUGCAGUCCAGAGGAGACCGCAUCUGAAUCUGCCAAGGUGCCCACAGCAGAGCCUCCCGGAGAAGUGG\
) } def
/len { sequence length } bind def

/coor [
[64.95806122 216.20103455]
[47.73591232 232.20193481]
[24.50231171 234.92726135]
[18.76206017 248.78544617]
[13.02180958 262.64364624]
[7.28155804 276.50183105]
[14.66219521 290.28805542]
[11.40389252 305.58242798]
[-0.95487821 315.16339111]
[-16.57868385 314.50711060]
[-28.09044266 303.92346191]
[-30.05465126 288.40972900]
[-21.54387283 275.29101562]
[-6.57663488 270.76159668]
[-0.83638346 256.90338135]
[4.90386820 243.04519653]
[10.64411926 229.18699646]
[4.91568518 224.49969482]
[0.21102361 218.77290344]
[-3.28436875 212.22639465]
[-5.43149805 205.11239624]
[-6.14339781 197.70582581]
[-5.38864565 190.29371643]
[-3.19272852 183.16404724]
[0.36279786 176.59458923]
[5.14333248 170.84205627]
[10.96632004 166.13208008]
[17.60822296 162.65040588]
[24.81310081 160.53550720]
[32.30247116 159.87309265]
[39.78606796 160.69267273]
[46.97311020 162.96623230]
[55.54993057 150.66021729]
[64.12674713 138.35418701]
[72.70356750 126.04817200]
[62.59380722 115.92716980]
[56.45938110 101.87672424]
[41.69298172 99.23978424]
[26.92658424 96.60283661]
[12.16018581 93.96588898]
[-2.60621238 91.32894897]
[-15.42713451 100.57013702]
[-31.01380157 97.95644379]
[-40.11891937 85.03853607]
[-37.34058380 69.48036957]
[-24.32713318 60.51234055]
[-8.79921436 63.45500946]
[0.03073177 76.56254578]
[14.79713058 79.19949341]
[29.56352806 81.83644104]
[44.32992554 84.47338104]
[59.09632492 87.11032867]
[66.03706360 73.81272888]
[55.43046188 63.20612335]
[44.82386017 52.59952164]
[34.21725845 41.99291992]
[18.65599442 43.53598022]
[5.77274513 34.67280197]
[1.65058911 19.58831024]
[8.23588181 5.40494299]
[22.41925049 -1.18035018]
[37.50374222 2.94180560]
[46.36691666 15.82505417]
[44.82386017 31.38632011]
[55.43046188 41.99291992]
[66.03706360 52.59952164]
[76.64366913 63.20612335]
[83.58929443 60.25902176]
[90.84326172 58.58932114]
[98.17595673 58.21386337]
[105.36136627 59.10908890]
[112.18402863 61.21279144]
[118.44551849 64.42707825]
[123.97016144 68.62233734]
[128.61000061 73.64217377]
[132.24862671 79.30897522]
[134.80403137 85.43011475]
[149.51580811 82.50376129]
[164.22760010 79.57740021]
[178.93937683 76.65104675]
[193.65115356 73.72469330]
[207.17747498 61.26528168]
[223.56274414 67.48740387]
[238.21421814 64.27276611]
[252.86570740 61.05812836]
[267.51721191 57.84349060]
[279.33856201 47.32845688]
[293.42831421 52.15841675]
[308.07980347 48.94377899]
[322.73129272 45.72914124]
[337.38278198 42.51450348]
[350.09481812 34.55184555]
[359.38122559 22.77208900]
[368.66763306 10.99233627]
[368.21746826 -5.04440022]
[380.56729126 -15.28459072]
[396.24337769 -11.87283802]
[403.22036743 2.57365274]
[396.14611816 16.97277069]
[380.44738770 20.27874565]
[371.16098022 32.05849838]
[361.87457275 43.83825302]
[365.27947998 50.52080154]
[375.49429321 70.56845093]
[390.48272705 69.97955322]
[401.17953491 58.65631485]
[416.38833618 58.27260208]
[427.11740112 68.54016876]
[442.10583496 67.95127106]
[457.09426880 67.36237335]
[472.05886841 66.33235168]
[486.98663330 64.86209869]
[501.91439819 63.39183807]
[509.64425659 49.93713379]
[523.82000732 43.62628174]
[538.99084473 46.88593292]
[549.32324219 58.46268463]
[550.84417725 73.90504456]
[542.96887207 87.27510071]
[528.72546387 93.43180084]
[513.59088135 90.00776672]
[503.38464355 78.31961060]
[488.45687866 79.78986359]
[473.52911377 81.26012421]
[471.00274658 83.78954315]
[467.10543823 85.19488525]
[462.39132690 84.83612823]
[457.68316650 82.35081482]
[442.69473267 82.93971252]
[427.70629883 83.52861023]
[417.81588745 94.60631561]
[402.62387085 95.41705322]
[391.07162476 84.96798706]
[376.08319092 85.55688477]
[360.37677002 83.80209351]
[348.49920654 76.83206940]
[341.83843994 67.07204437]
[340.59741211 57.16599274]
[325.94592285 60.38063049]
[311.29443359 63.59526825]
[296.64294434 66.80990601]
[285.86953735 77.09500885]
[270.73184204 72.49497986]
[256.08035278 75.70961761]
[241.42886353 78.92425537]
[226.77737427 82.13889313]
[219.96800232 92.17610168]
[207.74865723 94.95132446]
[196.57749939 88.43647003]
[181.86572266 91.36283112]
[167.15394592 94.28918457]
[152.44216919 97.21553802]
[137.73039246 100.14189148]
[129.75370789 123.20170593]
[109.33335876 136.55804443]
[85.00959015 134.62498474]
[76.43276978 146.93101501]
[67.85594940 159.23703003]
[59.27913284 171.54306030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[32 159]
[33 158]
[34 157]
[35 156]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[53 67]
[54 66]
[55 65]
[56 64]
[77 153]
[78 152]
[79 151]
[80 150]
[81 149]
[83 146]
[84 145]
[85 144]
[86 143]
[88 141]
[89 140]
[90 139]
[91 138]
[92 102]
[93 101]
[94 100]
[104 134]
[105 133]
[108 130]
[109 129]
[110 128]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
