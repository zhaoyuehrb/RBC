%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUGGCGGCUUCGUUCCUUCUUCCCAUCGGCCUCGGCUUGCGGGCCUUUCAAACAUGGAGGAGCGGGAGCGGGGGGCGAGGUCGGCUGGCGCCGGGAGCCCCGCGCGCCCGCCCAGCCCGCGGCUGGAUGUCAGCUCUGACAGCUUCGACCCGC\
) } def
/len { sequence length } bind def

/coor [
[-21.66072083 107.78648376]
[-25.61801338 105.02269745]
[-40.61726379 104.87261963]
[-55.61651230 104.72254944]
[-70.61576080 104.57247925]
[-84.49265289 112.17131805]
[-97.14187622 104.30706787]
[-112.14112854 104.15699768]
[-119.50747681 112.25532532]
[-129.90911865 114.87776184]
[-139.81875610 111.38592529]
[-146.01313782 103.17353821]
[-160.99436951 102.42346954]
[-175.97560120 101.67340088]
[-190.95684814 100.92333221]
[-205.93807983 100.17326355]
[-220.91931152 99.42319489]
[-235.90054321 98.67313385]
[-250.88179016 97.92306519]
[-265.86300659 97.17299652]
[-280.84423828 96.42292786]
[-295.82550049 95.67285919]
[-301.49307251 111.06630707]
[-311.61010742 123.95491028]
[-325.18627930 133.09548950]
[-340.89828491 137.61088562]
[-357.21884155 137.07405090]
[-372.56521606 131.54847717]
[-385.45263672 121.58090973]
[-394.63800049 108.14727020]
[-399.23968506 92.55708313]
[-414.23892212 92.40700531]
[-429.23818970 92.25693512]
[-444.23742676 92.10685730]
[-452.90594482 95.16377258]
[-459.53451538 91.80072021]
[-474.52777100 91.35056305]
[-487.14599609 101.25811005]
[-502.72561646 97.42994690]
[-509.31527710 82.80271149]
[-501.85995483 68.59716797]
[-486.07870483 65.71058655]
[-474.07760620 76.35731506]
[-459.08435059 76.80747986]
[-444.08737183 77.10761261]
[-429.08810425 77.25768280]
[-414.08886719 77.40775299]
[-399.08959961 77.55783081]
[-395.27493286 64.40716553]
[-388.16421509 52.69049835]
[-378.24136353 43.21791840]
[-366.18484497 36.64638519]
[-352.82156372 33.43415070]
[-339.06991577 33.80884552]
[-325.87686157 37.75131989]
[-314.15252686 44.99653244]
[-304.70764160 55.05134964]
[-298.19723511 67.22810364]
[-295.07540894 80.69162750]
[-280.09417725 81.44169617]
[-265.11294556 82.19176483]
[-250.13171387 82.94182587]
[-235.15048218 83.69189453]
[-220.16925049 84.44196320]
[-205.18800354 85.19203186]
[-190.20677185 85.94210052]
[-175.22554016 86.69216919]
[-160.24430847 87.44223022]
[-145.26307678 88.19229889]
[-128.80503845 78.10466766]
[-111.99105072 89.15774536]
[-96.99180603 89.30782318]
[-84.18775940 81.69824219]
[-70.46569061 89.57322693]
[-55.46643829 89.72329712]
[-40.46718979 89.87337494]
[-25.46793938 90.02344513]
[-10.46868992 89.87337494]
[4.52455330 89.42321014]
[19.51779747 88.97305298]
[26.14635658 85.61000061]
[34.81488037 88.66691589]
[49.81412888 88.51683807]
[64.81337738 88.36676788]
[79.81262970 88.21669769]
[94.81187439 88.06661987]
[108.90155792 82.92065430]
[120.46690369 73.36854553]
[126.17998505 58.61486053]
[140.92018127 56.47568130]
[152.48551941 46.92357635]
[164.05087280 37.37147141]
[175.61622620 27.81936455]
[187.18156433 18.26725769]
[198.65077209 8.59992027]
[210.02267456 -1.18168199]
[221.39457703 -10.96328449]
[232.76649475 -20.74488640]
[240.83171082 -35.65758896]
[257.39428711 -32.03580856]
[258.49902344 -15.11789322]
[242.54809570 -9.37298107]
[231.17619324 0.40862185]
[219.80427551 10.19022465]
[208.43237305 19.97182655]
[205.39518738 26.75588036]
[196.73367310 29.83260727]
[185.16833496 39.38471222]
[173.60298157 48.93681717]
[162.03762817 58.48892593]
[150.47229004 68.04103088]
[145.58642578 82.11148834]
[130.01901245 84.93389130]
[118.45365906 94.48600006]
[122.31178284 108.98133850]
[137.09533691 111.52034760]
[151.87889099 114.05936432]
[166.66244507 116.59837341]
[181.44599915 119.13738251]
[196.22953796 121.67639160]
[212.86357117 118.39834595]
[220.61825562 133.47485352]
[208.27766418 145.10008240]
[193.69053650 136.45994568]
[178.90698242 133.92092896]
[164.12342834 131.38192749]
[149.33987427 128.84291077]
[134.55632019 126.30390167]
[119.77277374 123.76489258]
[116.30780792 130.41651917]
[105.91291809 150.37136841]
[116.46632385 161.03089905]
[127.01973724 171.69042969]
[137.57315063 182.34996033]
[148.12655640 193.00947571]
[164.07952881 196.80879211]
[168.50578308 212.59930420]
[156.85197449 224.13710022]
[141.10653687 219.55307007]
[137.46702576 203.56289673]
[126.91362000 192.90336609]
[116.36020660 182.24383545]
[105.80680084 171.58430481]
[95.25338745 160.92477417]
[86.78913116 148.29266357]
[82.80461121 135.03204346]
[83.16428375 122.35102844]
[87.44423676 111.37165070]
[94.96195221 103.06587219]
[79.96269989 103.21594238]
[64.96345520 103.36602020]
[49.96420288 103.51609039]
[34.96495438 103.66616058]
[19.96795845 103.96629333]
[4.97471380 104.41645813]
[-10.01852989 104.86661530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 74]
[7 72]
[8 71]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[31 48]
[32 47]
[33 46]
[34 45]
[36 44]
[37 43]
[78 156]
[79 155]
[80 154]
[82 153]
[83 152]
[84 151]
[85 150]
[86 149]
[87 114]
[88 113]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 105]
[96 104]
[97 103]
[98 102]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
[131 144]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
