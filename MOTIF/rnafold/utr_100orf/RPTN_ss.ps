%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCUCUGACUCCUGAAUCUUCUGCUCCUUCCUCCUCAAGCAGGUUCACCCGUACUUGUCAAAAUGGCUCAACUCCUGAAUAGCAUACUCAGUGUGAUUGACGUAUUCCACAAAUAUGCCAAAGGGAAUGGGGACUGUGCCUUACUAUGCAAGGAAGAGUUGA\
) } def
/len { sequence length } bind def

/coor [
[-50.42304230 542.64318848]
[-44.53646851 556.52844238]
[-42.28876114 571.44146729]
[-43.82120514 586.44488525]
[-49.03747559 600.59552002]
[-57.60967636 613.00390625]
[-68.99893951 622.89007568]
[-82.48934174 629.63244629]
[-97.23285675 632.80731201]
[-112.30269623 632.21502686]
[-126.75155640 627.89282227]
[-139.67117310 620.11242676]
[-150.24938965 609.36291504]
[-157.82128906 596.32000732]
[-161.91085815 581.80358887]
[-162.26104736 566.72619629]
[-158.84982300 552.03558350]
[-151.89163208 538.65521240]
[-141.82388306 527.42620850]
[-129.27940369 519.05438232]
[-115.04679871 514.06604004]
[-100.02070618 512.77471924]
[-85.14569092 515.26165771]
[-79.07923889 501.54315186]
[-81.00823975 486.77398682]
[-68.35073853 477.28195190]
[-62.28429031 463.56344604]
[-56.21783829 449.84490967]
[-50.15138626 436.12637329]
[-50.32293320 428.70440674]
[-43.83813477 422.20733643]
[-37.51315689 408.60604858]
[-31.18818092 395.00479126]
[-24.86320305 381.40350342]
[-18.53822708 367.80221558]
[-28.07484818 356.33407593]
[-31.70143318 341.80282593]
[-28.64669800 327.07769775]
[-19.46408844 315.09020996]
[-5.93240118 308.25057983]
[9.28859806 307.96322632]
[15.61357498 294.36196899]
[13.10810661 277.01171875]
[28.22018814 266.52575684]
[34.28664017 252.80722046]
[40.35309219 239.08868408]
[46.41954422 225.37014771]
[44.49054337 210.60098267]
[57.14804077 201.10897827]
[63.21449280 187.39044189]
[68.88911438 173.50524902]
[74.16732788 159.46458435]
[79.44554138 145.42390442]
[84.72376251 131.38323975]
[90.00197601 117.34255981]
[76.81154633 124.48487091]
[63.34969330 117.86833191]
[60.94707870 103.06200409]
[71.62595367 92.52816010]
[86.39810944 95.13305664]
[76.95095062 83.48182678]
[67.50379181 71.83059692]
[58.05663681 60.17935944]
[43.38449860 51.68438339]
[47.48583603 35.23399353]
[64.42870331 34.62112808]
[69.70787048 50.73220444]
[79.15502930 62.38343430]
[88.60218811 74.03466797]
[98.04933929 85.68589783]
[105.54631805 85.89878082]
[101.31787872 71.50710297]
[113.69853210 63.03836823]
[125.57859039 72.19609833]
[120.54027557 86.32453918]
[128.03726196 86.53742218]
[138.13034058 75.44104767]
[148.22343445 64.34466553]
[158.31651306 53.24829102]
[153.37062073 40.13830948]
[154.55969238 26.24344063]
[161.59405518 14.27867126]
[173.04743958 6.55708313]
[186.64595032 4.54275036]
[199.71934509 8.57342243]
[210.02061462 -2.32996464]
[220.32188416 -13.23335171]
[230.62315369 -24.13673782]
[240.92442322 -35.04012680]
[237.37953186 -48.38600159]
[240.87539673 -61.63273621]
[250.39230347 -71.33672333]
[263.35998535 -75.03034210]
[276.35119629 -71.84891510]
[286.85696411 -82.55540466]
[297.36273193 -93.26190186]
[301.16241455 -101.61816406]
[308.17004395 -104.06922913]
[318.87655640 -114.57498932]
[315.63940430 -129.65890503]
[321.09252930 -144.09037781]
[333.49578857 -153.26435852]
[348.89141846 -154.25347900]
[362.36669922 -146.74212646]
[369.62170410 -133.12712097]
[368.34140015 -117.75296783]
[358.93432617 -105.52551270]
[344.40225220 -100.34648895]
[329.38232422 -103.86849976]
[318.67581177 -93.36273956]
[308.06921387 -82.75613403]
[297.56344604 -72.04964447]
[287.05770874 -61.34315491]
[290.30142212 -45.27166367]
[283.27059937 -30.27665710]
[268.54910278 -22.33414459]
[251.82781982 -24.73885536]
[241.52655029 -13.83546829]
[231.22528076 -2.93208170]
[220.92401123 7.97130489]
[210.62274170 18.87469101]
[215.62417603 34.21883774]
[212.19773865 50.08551025]
[201.18359375 62.13676453]
[185.50949097 67.02924347]
[169.41290283 63.34138107]
[159.31980896 74.43775940]
[149.22671509 85.53413391]
[139.13363647 96.63050842]
[104.04264832 122.62078094]
[98.76443481 136.66145325]
[93.48621368 150.70211792]
[88.20800018 164.74279785]
[82.92978668 178.78346252]
[83.80288696 184.01939392]
[82.66619873 188.59527588]
[80.11773682 191.84893799]
[76.93302917 193.45689392]
[70.86657715 207.17543030]
[72.36166382 222.92584229]
[60.13807678 231.43659973]
[54.07162476 245.15513611]
[48.00517273 258.87365723]
[41.93872070 272.59219360]
[45.85805893 284.91070557]
[40.48899841 296.22720337]
[29.21484947 300.68692017]
[22.88987160 314.28820801]
[32.47850037 326.11273193]
[35.96808243 340.86773682]
[32.71860504 355.61428833]
[23.42688560 367.43905640]
[9.97800541 374.02972412]
[-4.93695259 374.12719727]
[-11.26192951 387.72848511]
[-17.58690643 401.32974243]
[-23.91188431 414.93103027]
[-30.23686028 428.53231812]
[-36.43285370 442.19281006]
[-42.49930573 455.91134644]
[-48.56575775 469.62988281]
[-54.63220978 483.34841919]
[-53.13711929 499.09881592]
[-65.36071014 507.60958862]
[-71.42716217 521.32812500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 165]
[24 164]
[26 162]
[27 161]
[28 160]
[29 159]
[31 158]
[32 157]
[33 156]
[34 155]
[35 154]
[41 148]
[42 147]
[44 144]
[45 143]
[46 142]
[47 141]
[49 139]
[50 138]
[51 134]
[52 133]
[53 132]
[54 131]
[55 130]
[60 70]
[61 69]
[62 68]
[63 67]
[76 129]
[77 128]
[78 127]
[79 126]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[94 113]
[95 112]
[96 111]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
