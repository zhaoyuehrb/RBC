%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGGGGAGGCUGCCCGCGCCGAGCUGCUGCUGCCCGAGGCGGACCGACCCGGGCCCCGCACAGAUCUGUCCUGCGAUGCGGCCGCUGCCACCACCA\
) } def
/len { sequence length } bind def

/coor [
[213.27848816 168.78335571]
[225.41374207 159.96656799]
[239.64385986 155.22039795]
[225.43679810 150.40800476]
[211.22972107 145.59562683]
[197.02264404 140.78323364]
[182.81556702 135.97085571]
[168.60848999 131.15846252]
[154.40142822 126.34607697]
[141.20245361 133.15216064]
[126.72590637 128.47410583]
[119.67655182 114.58366394]
[105.46948242 109.77127838]
[91.18928528 105.18041992]
[76.83941650 100.81219482]
[62.48955154 96.44397736]
[48.13968658 92.07575226]
[33.78981781 87.70753479]
[19.37375450 83.56301117]
[4.89497948 79.64318085]
[-10.44758606 83.50533295]
[-20.71068192 72.71097565]
[-35.18945694 68.79114532]
[-41.95037460 70.17285919]
[-47.49003220 68.11812592]
[-50.43188095 64.15122223]
[-64.63895416 59.33884048]
[-78.84602356 54.52645111]
[-94.81333160 58.26506042]
[-105.83587646 46.12275314]
[-100.57460022 30.59049416]
[-84.44186401 27.64654160]
[-74.03363800 40.31937790]
[-59.82656860 45.13176727]
[-45.61949539 49.94415283]
[-31.26962852 54.31237411]
[-16.79085159 58.23220062]
[-2.48390508 54.08967590]
[8.81480885 65.16440582]
[23.29358482 69.08423615]
[30.70302773 67.77059174]
[38.15803909 73.35766602]
[52.50790405 77.72589111]
[66.85777283 82.09410858]
[81.20763397 86.46233368]
[95.55750275 90.83055115]
[103.72865295 89.97769928]
[110.28186798 95.56420135]
[124.48893738 100.37658691]
[138.52879333 93.62973785]
[152.86824036 98.71256256]
[159.21380615 112.13900757]
[173.42088318 116.95139313]
[187.62796021 121.76377869]
[201.83503723 126.57616425]
[216.04209900 131.38854980]
[230.24917603 136.20094299]
[244.45625305 141.01332092]
[252.33580017 139.18028259]
[259.08822632 141.92475891]
[273.78268433 138.91264343]
[288.47717285 135.90054321]
[303.17163086 132.88842773]
[317.86608887 129.87632751]
[332.40408325 126.18214417]
[346.75393677 121.81392670]
[361.10379028 117.44570160]
[367.06442261 102.98870087]
[380.94717407 95.79126740]
[396.19705200 99.25180817]
[405.61352539 111.73635864]
[404.75042725 127.35010529]
[394.01525879 138.72070312]
[378.47689819 140.47932434]
[365.47201538 131.79556274]
[351.12216187 136.16378784]
[336.77227783 140.53201294]
[334.77261353 143.63948059]
[331.07928467 145.85618591]
[326.16635132 146.35481262]
[320.87820435 144.57078552]
[306.18371582 147.58290100]
[291.48925781 150.59500122]
[276.79479980 153.60711670]
[262.10034180 156.61921692]
[275.63082886 163.09420776]
[286.57827759 173.34864807]
[293.92306519 186.42741394]
[296.98104858 201.11239624]
[295.46743774 216.03584290]
[289.52322388 229.80778503]
[279.70205688 241.14550781]
[266.91860962 248.99305725]
[252.36358643 252.61949158]
[237.39259338 251.68707275]
[223.40002441 246.28262329]
[211.68913269 236.90951538]
[203.35067749 224.44075012]
[199.16125488 210.03767395]
[199.51110840 195.04174805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[12 49]
[13 48]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[19 40]
[20 39]
[22 37]
[23 36]
[26 35]
[27 34]
[28 33]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[65 77]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
