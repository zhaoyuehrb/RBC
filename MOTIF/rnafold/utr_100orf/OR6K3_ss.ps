%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAGCGGAAACCAAUCAACAGUGACUGAAUUUAUCUUCACUGGAUUCCCUCAGCUUCAGGAUGGUAGUCUCCUGUACUUCUUUCCUUUACUUUUCA\
) } def
/len { sequence length } bind def

/coor [
[93.57624817 438.85256958]
[96.36493683 419.67257690]
[96.83143616 404.67980957]
[97.29793549 389.68707275]
[97.76443481 374.69433594]
[98.23093414 359.70159912]
[98.69742584 344.70883179]
[99.16392517 329.71609497]
[87.65908051 312.70278931]
[98.54164124 294.38308716]
[97.60909271 279.41207886]
[96.67655182 264.44110107]
[95.74400330 249.47012329]
[94.81146240 234.49914551]
[82.24861908 230.52180481]
[71.79306030 222.44862366]
[64.73265839 211.24601746]
[61.94668961 198.26754761]
[63.79636383 185.09036255]
[70.07820129 173.32359314]
[80.04611969 164.41180420]
[92.50000000 159.45768738]
[92.50000000 144.45768738]
[92.50000000 129.45768738]
[92.50000000 114.45768738]
[83.71471405 100.25329590]
[92.05399323 85.78255463]
[91.58750153 70.78981018]
[91.12100220 55.79706573]
[90.65450287 40.80432129]
[90.18800354 25.81157684]
[87.22982025 21.07908630]
[86.57917786 16.18397903]
[87.88201904 12.07822037]
[90.44303894 9.41434956]
[91.37558746 -5.55663443]
[92.30812836 -20.52761841]
[93.24067688 -35.49860382]
[94.17321777 -50.46958542]
[95.10576630 -65.44056702]
[96.03830719 -80.41155243]
[82.98208618 -93.94445801]
[83.76488495 -112.41775513]
[97.44583130 -124.38337708]
[97.44583130 -139.38337708]
[97.44583130 -154.38337708]
[97.44583130 -169.38337708]
[86.09469604 -180.38006592]
[85.92760468 -196.18347168]
[97.04369354 -207.41770935]
[112.84797668 -207.41770935]
[123.96406555 -196.18347168]
[123.79697418 -180.38006592]
[112.44583130 -169.38337708]
[112.44583130 -154.38337708]
[112.44583130 -139.38337708]
[112.44583130 -124.38337708]
[122.22835541 -118.12144470]
[127.75804901 -107.76974487]
[127.51902008 -95.91509247]
[121.45403290 -85.58599091]
[111.00929260 -79.47901154]
[110.07675171 -64.50802612]
[109.14420319 -49.53704071]
[108.21166229 -34.56605911]
[107.27911377 -19.59507370]
[106.34657288 -4.62409019]
[105.41402435 10.34689426]
[105.18074799 25.34507942]
[105.64724731 40.33782578]
[106.11374664 55.33056641]
[106.58023834 70.32331085]
[107.04673767 85.31605530]
[115.09609222 93.88585663]
[115.27893829 105.64170074]
[107.50000000 114.45768738]
[107.50000000 129.45768738]
[107.50000000 144.45768738]
[107.50000000 159.45768738]
[122.98931885 166.50509644]
[133.87353516 179.51522827]
[138.04869080 195.89962769]
[134.73959351 212.42498779]
[124.64317322 225.85118103]
[109.78244781 233.56658936]
[110.71498871 248.53758240]
[111.64753723 263.50857544]
[112.58007812 278.47955322]
[113.51262665 293.45053101]
[121.60836792 298.87445068]
[126.13695526 307.34527588]
[126.15000916 316.81127930]
[121.77542114 325.04833984]
[114.15666962 330.18258667]
[113.69017029 345.17535400]
[113.22367859 360.16809082]
[112.75717926 375.16082764]
[112.29067993 390.15356445]
[111.82418060 405.14633179]
[111.35768127 420.13906860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[22 79]
[23 78]
[24 77]
[25 76]
[27 73]
[28 72]
[29 71]
[30 70]
[31 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
