%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAGGGCUCCCGCGGGCGUCACUCCGGCCAUCGUCCCCACCUCCACCUGGGCCGCCCGGCAGGCAGGCGACGGAGGCCCGGGAGCCAUGGGUGACUGGGGCUUCCUGGAGAAGUUGCUGGACCAGGUCCAGGAGCACUCGACCGUGGUGGGUAAGAUCUGGCUGACGGUGCUCUUCAUCUUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[224.11444092 371.36083984]
[217.83172607 357.74002075]
[211.54899597 344.11917114]
[195.43472290 343.04147339]
[181.98223877 333.93643188]
[174.91168213 319.20773315]
[176.23568726 302.82937622]
[185.68762207 289.27371216]
[179.17936707 275.75918579]
[172.67111206 262.24462891]
[166.16285706 248.73010254]
[159.54249573 235.27012634]
[152.81051636 221.86564636]
[146.07852173 208.46115112]
[139.34654236 195.05665588]
[132.61454773 181.65217590]
[125.88256073 168.24768066]
[113.25627136 160.34666443]
[113.97706604 144.54188538]
[107.24507904 131.13740540]
[89.50484467 130.19735718]
[75.00548553 119.93246460]
[68.22435760 103.51247406]
[71.25546265 86.00784302]
[59.68505859 76.46186066]
[48.11465454 66.91587830]
[36.54425049 57.36989975]
[23.08427429 50.74954605]
[8.46035576 47.41173172]
[-6.16356277 44.07392120]
[-20.78748131 40.73610687]
[-35.96336746 45.20858765]
[-46.64982605 34.83319473]
[-61.27374649 31.49538040]
[-75.89766693 28.15756607]
[-90.52158356 24.81975174]
[-105.14550018 21.48193741]
[-119.79665375 18.26577759]
[-134.47402954 15.17149544]
[-147.61509705 23.53512383]
[-162.45596313 20.18799782]
[-170.34841919 7.60846233]
[-185.02580261 4.51417971]
[-199.70317078 1.41989720]
[-206.87281799 7.59563446]
[-215.94857788 9.73708248]
[-224.85551453 7.48510218]
[-231.61691284 1.47043324]
[-234.79287720 -6.85613441]
[-249.29777527 -10.67817783]
[-263.80267334 -14.50022030]
[-278.30755615 -18.32226372]
[-292.81246948 -22.14430618]
[-309.66943359 -20.33339500]
[-316.07601929 -36.03026199]
[-302.76611328 -46.53182602]
[-288.99041748 -36.64920044]
[-274.48553467 -32.82715988]
[-259.98062134 -29.00511551]
[-245.47573853 -25.18307304]
[-230.97084045 -21.36103058]
[-211.62660217 -28.52701187]
[-196.60888672 -13.25748062]
[-181.93151855 -10.16319752]
[-167.25413513 -7.06891537]
[-154.95506287 -15.39167309]
[-140.02603149 -12.46271610]
[-131.37974548 0.49411801]
[-116.70236969 3.58840060]
[-109.49517059 1.88862491]
[-101.80768585 6.85801888]
[-87.18376923 10.19583321]
[-72.55985260 13.53364658]
[-57.93593216 16.87146187]
[-43.31201172 20.20927429]
[-29.18212891 15.49804974]
[-17.44966698 26.11218643]
[-2.82574868 29.45000076]
[11.79817009 32.78781509]
[26.42208862 36.12562943]
[26.67115021 22.59029007]
[35.46337128 14.10884476]
[35.46337128 -0.89115536]
[35.46337128 -15.89115524]
[35.46337128 -30.89115524]
[35.46337128 -45.89115524]
[35.46337128 -60.89115524]
[35.46337128 -75.89115906]
[24.56881905 -87.02427673]
[24.78249931 -102.23641205]
[35.46337128 -112.55409241]
[35.46337128 -127.55409241]
[26.79966927 -141.47790527]
[34.76379776 -155.81333923]
[51.16294479 -155.81333923]
[59.12707520 -141.47790527]
[50.46337128 -127.55409241]
[50.46337128 -112.55409241]
[61.14424515 -102.23641205]
[61.35792542 -87.02427673]
[50.46337128 -75.89115906]
[50.46337128 -60.89115524]
[50.46337128 -45.89115524]
[50.46337128 -30.89115524]
[50.46337128 -15.89115524]
[50.46337128 -0.89115536]
[50.46337128 14.10884476]
[59.67303467 30.26717758]
[46.09023285 45.79949570]
[57.66063690 55.34547806]
[69.23104095 64.89145660]
[80.80144501 74.43743896]
[94.92833710 68.43566132]
[110.22431183 69.70986176]
[123.16345978 77.96631622]
[136.15383911 70.46631622]
[149.14422607 62.96631622]
[157.22686768 49.36553192]
[172.11766052 49.70259476]
[185.10804749 42.20259476]
[198.09841919 34.70259476]
[211.08880615 27.20259476]
[224.07919312 19.70259476]
[237.06956482 12.20259476]
[247.76348877 -0.95325518]
[263.36557007 5.68084192]
[261.30981445 22.50969315]
[244.56956482 25.19297600]
[231.57919312 32.69297409]
[218.58880615 40.19297409]
[205.59841919 47.69297409]
[192.60804749 55.19297409]
[179.61766052 62.69297409]
[172.46417236 75.75730896]
[156.64422607 75.95669556]
[143.65383911 83.45669556]
[130.66345215 90.95669556]
[131.96911621 100.06549835]
[130.62614441 109.16886902]
[126.74580383 117.51259613]
[120.64956665 124.40541077]
[127.38156128 137.80990601]
[140.48936462 146.66969299]
[139.28704834 161.51570129]
[146.01904297 174.92018127]
[152.75102234 188.32467651]
[159.48301697 201.72915649]
[166.21501160 215.13365173]
[172.94699097 228.53814697]
[179.60771179 234.81724548]
[179.67738342 242.22184753]
[186.18563843 255.73638916]
[192.69389343 269.25091553]
[199.20214844 282.76544189]
[213.19670105 283.08740234]
[225.62606812 289.38125610]
[234.08726501 300.36621094]
[236.97213745 313.86093140]
[233.77276611 327.21652222]
[225.16984558 337.83642578]
[231.45256042 351.45727539]
[237.73529053 365.07812500]
[244.24354553 378.59265137]
[250.97554016 391.99716187]
[264.08334351 400.85693359]
[262.88104248 415.70294189]
[269.61300659 429.10742188]
[282.72082520 437.96722412]
[281.51852417 452.81320190]
[288.25048828 466.21771240]
[294.98248291 479.62219238]
[301.71447754 493.02667236]
[316.42965698 499.41751099]
[320.46859741 514.94384766]
[310.73294067 527.69519043]
[294.69107056 527.88983154]
[284.64892578 515.37841797]
[288.30999756 499.75866699]
[281.57800293 486.35418701]
[274.84600830 472.94970703]
[268.11401367 459.54519653]
[255.48773193 451.64419556]
[256.20852661 435.83941650]
[249.47654724 422.43493652]
[236.85025024 414.53390503]
[237.57104492 398.72912598]
[230.83905029 385.32464600]
[226.65048218 382.99450684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[8 154]
[9 153]
[10 152]
[11 151]
[12 149]
[13 148]
[14 147]
[15 146]
[16 145]
[17 144]
[19 142]
[20 141]
[24 112]
[25 111]
[26 110]
[27 109]
[28 80]
[29 79]
[30 78]
[31 77]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 69]
[39 68]
[42 65]
[43 64]
[44 63]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[91 98]
[92 97]
[115 137]
[116 136]
[117 135]
[119 133]
[120 132]
[121 131]
[122 130]
[123 129]
[124 128]
[163 187]
[164 186]
[166 184]
[167 183]
[169 181]
[170 180]
[171 179]
[172 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
