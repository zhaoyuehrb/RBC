%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAAUCGGCUGGUUUAUAUUGGCGCGGCCCAGACGGCAGAGGUCUCUGCGGCGCGGUCCUCGGAGACACGCGGCGGUGUCCUGUGUUGGCCAUGGCCGACUACCUGAUUAGUGGGGGCACGUCCUACGUGCCAGACGACGGACUCACAGCACAGCAGCUCUUCAACUGCGGAGACGGCCUCACCUACAAUG\
) } def
/len { sequence length } bind def

/coor [
[168.59043884 180.23138428]
[153.59667969 180.66432190]
[139.03652954 177.05851746]
[125.97766113 169.67840576]
[115.37770844 159.06515503]
[108.01361847 145.99618530]
[108.81484985 131.01759338]
[100.93058777 143.77841187]
[93.15043640 156.60296631]
[85.47492218 169.49041748]
[77.79940033 182.37786865]
[70.12388611 195.26533508]
[62.44837189 208.15278625]
[54.77285767 221.04023743]
[55.09156799 237.43629456]
[40.91362381 245.67752075]
[26.82407379 237.28605652]
[27.31704140 220.89431763]
[41.88540268 213.36471558]
[49.56092072 200.47726440]
[57.23643494 187.58981323]
[64.91194916 174.70236206]
[72.58746338 161.81491089]
[80.26298523 148.92745972]
[80.98564911 141.56072998]
[88.16976929 135.89414978]
[96.05403900 123.13333130]
[87.15843201 111.05574036]
[72.63333893 114.80027771]
[58.10824203 118.54481506]
[43.61410141 122.40744019]
[29.15187645 126.38790894]
[14.68965340 130.36837769]
[0.22743030 134.34883118]
[-7.22969294 139.65101624]
[-14.50263882 138.27433777]
[-29.02773476 142.01887512]
[-43.55283356 145.76341248]
[-54.87303543 157.62869263]
[-70.74273682 153.49534607]
[-74.83655548 137.61540222]
[-62.94311142 126.32478333]
[-47.29736710 131.23831177]
[-32.77227020 127.49377441]
[-18.24717522 123.74923706]
[-3.75303435 119.88661194]
[10.70918941 115.90615082]
[25.17141151 111.92568207]
[39.63363647 107.94522095]
[45.25693512 103.13175201]
[54.36370468 104.01971436]
[68.88880157 100.27517700]
[83.41390228 96.53063965]
[85.11936188 81.62791443]
[71.81576538 74.69867706]
[58.51216507 67.76943970]
[45.15261459 60.94870377]
[31.73799515 54.23692703]
[18.32337379 47.52515030]
[3.40985799 52.75607681]
[-10.79802036 45.83424759]
[-15.87097931 30.86626053]
[-8.79932213 16.73235703]
[6.22146273 11.81793213]
[20.27980995 19.03862762]
[25.03515053 34.11053085]
[38.44977188 40.82230759]
[51.86439133 47.53408432]
[59.26425552 47.71568680]
[65.44140625 54.46584320]
[78.74500275 61.39507675]
[92.04859924 68.32431793]
[107.02426147 67.47019958]
[119.45375061 59.07331085]
[131.88323975 50.67642212]
[138.98724365 36.53981018]
[153.86476135 35.82655716]
[166.29425049 27.42967033]
[173.39823914 13.29305649]
[188.27575684 12.57980537]
[200.70524597 4.18291807]
[213.13473511 -4.21397018]
[231.34138489 -29.17578316]
[241.18943787 -40.49019241]
[251.03749084 -51.80460739]
[260.88552856 -63.11901855]
[270.73358154 -74.43343353]
[280.58163452 -85.74784088]
[290.42968750 -97.06225586]
[297.46697998 -110.30901337]
[301.32958984 -124.80315399]
[305.19223022 -139.29730225]
[303.90139771 -143.47912598]
[304.00708008 -147.45210266]
[305.27020264 -150.80050659]
[307.34060669 -153.22988892]
[309.80661011 -154.59289551]
[314.60412598 -168.80500793]
[311.68698120 -184.35494995]
[323.08850098 -193.93907166]
[327.88598633 -208.15116882]
[332.68350220 -222.36328125]
[337.48098755 -236.57539368]
[330.24319458 -250.62493896]
[335.13934326 -265.65170288]
[349.26461792 -272.74053955]
[364.23876953 -267.68579102]
[371.17788696 -253.48635864]
[365.96511841 -238.56648254]
[351.69308472 -231.77789307]
[346.89559937 -217.56578064]
[342.09808350 -203.35366821]
[337.30059814 -189.14157104]
[340.56088257 -174.60815430]
[328.81622314 -164.00750732]
[324.01873779 -149.79539490]
[319.68637085 -135.43466187]
[315.82373047 -120.94052887]
[311.96112061 -106.44638824]
[317.57806396 -101.47647858]
[328.81195068 -91.53667450]
[334.42889404 -86.56676483]
[348.34475708 -92.16574097]
[362.26062012 -97.76470947]
[376.17651367 -103.36367798]
[382.43844604 -117.62642670]
[396.63085938 -123.10634613]
[410.18963623 -117.04866028]
[424.10549927 -122.64762878]
[438.02136230 -128.24659729]
[445.60870361 -142.38209534]
[461.41613770 -145.12155151]
[473.31756592 -134.36351013]
[472.18322754 -118.36061096]
[458.88330078 -109.38890839]
[443.62033081 -114.33072662]
[429.70446777 -108.73175049]
[415.78860474 -103.13278198]
[410.20343018 -89.37265015]
[396.17050171 -83.49626160]
[381.77548218 -89.44780731]
[367.85958862 -83.84883118]
[353.94372559 -78.24986267]
[340.02786255 -72.65089417]
[326.63684082 -70.87438965]
[315.03106689 -73.52937317]
[306.47735596 -79.46533203]
[301.74411011 -87.21420288]
[291.89605713 -75.89979553]
[282.04800415 -64.58538055]
[272.19995117 -53.27096939]
[262.35189819 -41.95655823]
[252.50386047 -30.64214516]
[242.65580750 -19.32773209]
[244.72459412 -4.47108030]
[257.28912354 3.72238064]
[269.85363770 11.91584206]
[282.41815186 20.10930252]
[296.86657715 14.45039654]
[311.87326050 18.39737511]
[321.66787720 30.43254089]
[322.48416138 45.92813110]
[314.00827026 58.92577362]
[299.49932861 64.42760468]
[284.53631592 60.31806946]
[274.87283325 48.17735672]
[274.22470093 32.67382431]
[261.66018677 24.48036385]
[249.09565735 16.28690147]
[236.53112793 8.09344101]
[221.53163147 8.21552181]
[209.10214233 16.61240959]
[196.67263794 25.00929832]
[190.45768738 38.54531097]
[174.69113159 39.85916138]
[162.26164246 48.25605011]
[156.04669189 61.79206467]
[140.28013611 63.10591507]
[127.85063934 71.50279999]
[115.42115021 79.89968872]
[130.35473633 78.48974609]
[144.06042480 72.39433289]
[158.89900208 70.19967651]
[173.78236389 72.06671906]
[187.61907959 77.85854340]
[199.39451599 87.15042877]
[208.24516296 99.26100159]
[213.52200317 113.30219269]
[214.83808899 128.24433899]
[212.09689331 142.99174500]
[205.49945068 156.46296692]
[195.52954102 167.67015076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 27]
[8 26]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[28 53]
[29 52]
[30 51]
[31 49]
[32 48]
[33 47]
[34 46]
[36 45]
[37 44]
[38 43]
[54 72]
[55 71]
[56 70]
[57 68]
[58 67]
[59 66]
[73 180]
[74 179]
[75 178]
[77 176]
[78 175]
[80 173]
[81 172]
[82 171]
[83 154]
[84 153]
[85 152]
[86 151]
[87 150]
[88 149]
[89 148]
[90 119]
[91 118]
[92 117]
[97 116]
[98 115]
[100 113]
[101 112]
[102 111]
[103 110]
[122 144]
[123 143]
[124 142]
[125 141]
[128 138]
[129 137]
[130 136]
[155 170]
[156 169]
[157 168]
[158 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
