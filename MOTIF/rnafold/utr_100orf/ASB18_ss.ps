%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAACUCGGAUUACCUUCCCGACUACCCACUCAACUCAGAUUUAGUGAAGAGAUUAAAGUCUGCCCUGGAUGCCAAAGAUGAGGAGAGAGUGAGGG\
) } def
/len { sequence length } bind def

/coor [
[-35.79611206 267.11001587]
[-39.13927841 275.46173096]
[-44.41934967 282.72540283]
[-51.30741119 288.46197510]
[-59.37766266 292.32696533]
[-68.13370514 294.09136963]
[-77.03907776 293.65505981]
[-85.55013275 291.05255127]
[-93.14923096 286.45028687]
[-99.37619781 280.13616943]
[-112.87624359 286.67443848]
[-126.37628174 293.21270752]
[-139.87631226 299.75097656]
[-141.62376404 315.07904053]
[-151.39848328 327.01464844]
[-166.08139038 331.74917603]
[-180.98724365 327.77182007]
[-191.35961914 316.35177612]
[-193.88874817 301.13314819]
[-187.76757812 286.97210693]
[-174.94935608 278.38742065]
[-159.52433777 278.11840820]
[-146.41458130 286.25094604]
[-132.91455078 279.71267700]
[-119.41450500 273.17440796]
[-105.91446686 266.63613892]
[-104.58453369 244.78160095]
[-90.74694061 227.66143799]
[-69.42959595 221.71441650]
[-48.50560760 229.27932739]
[-37.03162003 219.61767578]
[-25.70927429 209.77874756]
[-14.54131317 199.76492310]
[-3.37335134 189.75109863]
[7.79461002 179.73728943]
[18.96257210 169.72346497]
[18.73810577 151.54946899]
[31.96945763 138.63409424]
[50.76129913 139.32044983]
[61.28509903 128.63168335]
[71.80890656 117.94293213]
[82.33270264 107.25417328]
[82.32498932 92.76464844]
[92.49064636 82.43965149]
[106.97853088 82.22203064]
[117.50233459 71.53326416]
[128.02613831 60.84450912]
[132.19468689 45.58234024]
[146.63745117 41.94147873]
[157.16125488 31.25271797]
[156.18273926 12.47382355]
[168.89076233 -0.95678568]
[187.06605530 -1.01498520]
[196.90498352 -12.33732891]
[206.20512390 -24.10624313]
[214.94624329 -36.29611206]
[223.68736267 -48.48598099]
[232.42848206 -60.67584991]
[233.50181580 -77.03983307]
[248.32777405 -84.04861450]
[261.65466309 -74.49215698]
[259.77294922 -58.20132828]
[244.61834717 -51.93473434]
[235.87722778 -39.74486542]
[227.13610840 -27.55499649]
[218.39498901 -15.36512756]
[218.69549561 -11.68209362]
[217.10960388 -7.67714167]
[213.51107788 -4.29542732]
[208.22732544 -2.49840021]
[198.38839722 8.82394409]
[201.66508484 19.96722794]
[199.04905701 31.40801048]
[191.09281921 40.19939041]
[179.73968506 44.01783371]
[167.85000610 41.77651978]
[157.32620239 52.46527863]
[153.91040039 66.96292114]
[138.71490479 71.36830902]
[128.19110107 82.05706787]
[117.66729736 92.74582672]
[117.67501068 107.23535156]
[107.50935364 117.56034851]
[93.02146912 117.77796936]
[82.49766541 128.46673584]
[71.97386169 139.15548706]
[61.45005798 149.84425354]
[63.87600708 161.69763184]
[60.23458862 173.10877991]
[51.56800461 181.20077515]
[40.16928864 183.99441528]
[28.97639465 180.89141846]
[17.80843163 190.90524292]
[6.64047050 200.91906738]
[-4.52749109 210.93289185]
[-15.69545269 220.94671631]
[-20.09788513 229.15715027]
[-27.36996269 231.09165955]
[-38.84395218 240.75332642]
[-35.63576889 249.20910645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 26]
[11 25]
[12 24]
[13 23]
[30 99]
[31 98]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[39 87]
[40 86]
[41 85]
[42 84]
[45 81]
[46 80]
[47 79]
[49 77]
[50 76]
[53 71]
[54 70]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
