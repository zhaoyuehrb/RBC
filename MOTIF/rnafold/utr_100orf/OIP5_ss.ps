%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUGUGCUUGGGGCGGGGCCUGGCGUGUAUUCGAAAGGAAGGCGCCGGCUGCGGGAAGAUGGCGGCUCAGCCGCUGCGGCAUCGCUCACGUUGUGCAACGCCGCCCCGGGGGGACUUUUGUGGUGGCACUGAGAGGGCGAUUGACCAAGCUUCUUUUA\
) } def
/len { sequence length } bind def

/coor [
[65.47782898 114.10455322]
[50.73481750 116.86925507]
[35.99180603 119.63396454]
[21.24879265 122.39866638]
[6.50578070 125.16336823]
[-8.23723221 127.92807770]
[-22.98024368 130.69277954]
[-31.91461563 143.45266724]
[-46.90550995 146.04644775]
[-59.01505661 137.45025635]
[-73.75806427 140.21496582]
[-78.93001556 154.60934448]
[-90.53587341 164.41754150]
[-105.39411926 167.08193970]
[-119.49668884 161.98551941]
[-129.09017944 150.59120178]
[-143.83319092 153.35589600]
[-155.97084045 163.50419617]
[-169.90614319 158.24526978]
[-184.64915466 161.00997925]
[-199.39216614 163.77467346]
[-214.13517761 166.53938293]
[-222.04023743 171.21867371]
[-229.19265747 169.21125793]
[-243.98680115 171.68777466]
[-258.78094482 174.16429138]
[-273.57510376 176.64080811]
[-288.36926270 179.11732483]
[-294.20098877 188.37406921]
[-303.97570801 192.77642822]
[-314.33786011 191.07975769]
[-321.87503052 184.08914185]
[-336.75451660 185.98655701]
[-351.63403320 187.88398743]
[-362.54974365 199.64097595]
[-378.53610229 198.29345703]
[-387.32974243 184.87513733]
[-382.18493652 169.67939758]
[-367.04833984 164.36311340]
[-353.53146362 173.00447083]
[-338.65194702 171.10705566]
[-323.77243042 169.20964050]
[-309.33972168 156.38594055]
[-290.84576416 164.32316589]
[-276.05163574 161.84664917]
[-261.25747681 159.37013245]
[-246.46331787 156.89361572]
[-231.66917419 154.41709900]
[-216.89988708 151.79637146]
[-202.15687561 149.03166199]
[-187.41386414 146.26696777]
[-172.67085266 143.50225830]
[-161.58772278 133.55171204]
[-146.59788513 138.61288452]
[-131.85487366 135.84819031]
[-127.04150391 121.75218964]
[-115.74359131 111.89251709]
[-100.92951965 108.99256134]
[-86.55857086 113.92942047]
[-76.52277374 125.47195435]
[-61.77975845 122.70724487]
[-53.60747528 110.30767822]
[-38.69535065 107.29385376]
[-25.74494743 115.94976807]
[-11.00193596 113.18506622]
[3.74107599 110.42035675]
[18.48408890 107.65565491]
[33.22710037 104.89095306]
[47.97011185 102.12624359]
[62.71312332 99.36154175]
[68.10892487 80.66924286]
[82.18463135 67.23826599]
[101.10920715 62.72415924]
[119.73188019 68.35554504]
[132.98406982 82.59970856]
[147.38764954 78.41203308]
[161.79124451 74.22435760]
[168.69874573 63.29266739]
[180.82002258 60.11977768]
[191.49064636 65.88441467]
[205.97319031 61.97856903]
[220.41696167 57.93161774]
[234.82054138 53.74394226]
[249.18258667 49.41593552]
[263.50173950 44.94801712]
[277.82086182 40.48009872]
[292.14001465 36.01218033]
[306.45913696 31.54426003]
[320.77828979 27.07633972]
[323.07894897 12.02747822]
[331.65045166 -0.47917593]
[344.74847412 -7.99328375]
[359.74847412 -9.07092476]
[373.67141724 -3.55177951]
[383.77551270 7.41966677]
[398.09466553 2.95174742]
[412.41378784 -1.51617193]
[426.73294067 -5.98409128]
[431.54595947 -10.63536739]
[437.14624023 -11.92474651]
[441.69860840 -10.33518600]
[456.18115234 -14.24102688]
[470.66372681 -18.14686775]
[485.14627075 -22.05270767]
[499.62881470 -25.95854950]
[514.11138916 -29.86438942]
[528.34063721 -34.61085129]
[542.26776123 -40.18167114]
[556.19494629 -45.75249100]
[568.65570068 -57.24884415]
[583.15222168 -48.45757675]
[578.71759033 -32.09389496]
[561.76574707 -31.82532310]
[547.83862305 -26.25450325]
[533.91143799 -20.68368340]
[547.07843018 -13.49826908]
[551.48077393 0.84116882]
[544.61401367 14.17712116]
[530.38458252 18.92294884]
[516.88739014 12.37881470]
[511.80078125 -1.73241174]
[518.01721191 -15.38183403]
[503.53466797 -11.47599411]
[489.05212402 -7.57015324]
[474.56954956 -3.66431236]
[460.08700562 0.24152824]
[445.60443115 4.14736891]
[431.20086670 8.33504581]
[416.88171387 12.80296516]
[402.56259155 17.27088547]
[388.24343872 21.73880386]
[386.17150879 36.50947189]
[377.85772705 48.96701813]
[364.90652466 56.61082077]
[349.85952759 57.87865448]
[335.69665527 52.46567154]
[325.24618530 41.39547729]
[310.92706299 45.86339569]
[296.60791016 50.33131790]
[282.28878784 54.79923630]
[267.96963501 59.26715469]
[253.65051270 63.73507309]
[248.17430115 68.75482941]
[239.00822449 68.14752960]
[224.60462952 72.33520508]
[219.03150940 77.24715424]
[209.87904358 76.46112823]
[195.39648438 80.36696625]
[183.72750854 93.44545746]
[165.97891235 88.62794495]
[151.57533264 92.81562042]
[137.17173767 97.00329590]
[136.52679443 107.51747131]
[132.96740723 117.43183899]
[126.77758789 125.95533752]
[118.45121765 132.40788269]
[108.65264893 136.27465820]
[98.16368866 137.24710083]
[87.82125092 135.24765015]
[78.45053864 130.43582153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[10 61]
[11 60]
[16 55]
[17 54]
[19 52]
[20 51]
[21 50]
[22 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[32 42]
[33 41]
[34 40]
[75 152]
[76 151]
[77 150]
[80 148]
[81 147]
[82 145]
[83 144]
[84 142]
[85 141]
[86 140]
[87 139]
[88 138]
[89 137]
[95 131]
[96 130]
[97 129]
[98 128]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
