%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUCCUUCUGCCGCGGGCGGCUGGCCCAGCUGGAGGAAGCGGCGGCGGCGGCCACGAUGAGUGCGGGCGACGCAGUGUGCACCGGCUGGCUCGUUAAGUCGCCCCCCGAGAGGAAGCUACAGCGCUACGCCUGGCGCAAGCGCUGGUUUGUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[98.15610504 141.81509399]
[88.87554169 130.03074646]
[93.10749054 115.64002228]
[81.64864349 125.31962585]
[70.18978882 134.99922180]
[58.73093414 144.67883301]
[47.27207947 154.35842896]
[35.81322861 164.03802490]
[24.35437393 173.71763611]
[12.89552021 183.39723206]
[7.34617615 198.21328735]
[-7.36941862 200.51556396]
[-18.82827187 210.19517517]
[-19.11984253 221.13523865]
[-25.28265381 229.91120911]
[-35.06402588 233.73840332]
[-45.11555481 231.56784058]
[-56.94787216 240.78718567]
[-68.78018951 250.00653076]
[-80.61250305 259.22586060]
[-84.00759888 274.90557861]
[-98.44667053 281.89788818]
[-112.85329437 274.83895874]
[-116.17594910 259.14373779]
[-105.86576843 246.85229492]
[-89.83184814 247.39355469]
[-77.99953461 238.17420959]
[-66.16721344 228.95486450]
[-54.33489990 219.73551941]
[-48.46147537 201.34550476]
[-28.50787354 198.73631287]
[-17.04902077 189.05671692]
[-12.31928921 174.93301392]
[3.21591926 171.93838501]
[14.67477226 162.25877380]
[26.13362503 152.57917786]
[37.59247971 142.89958191]
[49.05133057 133.21997070]
[60.51018524 123.54037476]
[71.96903992 113.86077118]
[83.42789459 104.18116760]
[88.78957367 90.17215729]
[86.72154236 75.31539917]
[84.65351868 60.45864487]
[80.35027313 52.33963394]
[82.69440460 45.28824997]
[80.92030334 30.39353180]
[76.77830505 22.19108963]
[79.26129150 15.18739319]
[77.78182220 0.26053274]
[76.30234528 -14.66632748]
[74.82287598 -29.59318733]
[73.34339905 -44.52004623]
[71.86392212 -59.44690704]
[60.50989151 -66.75163269]
[55.52478027 -79.08842468]
[58.52742767 -91.85098267]
[68.19831085 -100.41250610]
[67.01403809 -115.36567688]
[65.82976532 -130.31886292]
[64.64549255 -145.27203369]
[63.46121597 -160.22520447]
[62.27694321 -175.17839050]
[61.09267044 -190.13156128]
[57.27796173 -198.49124146]
[60.03570175 -205.39137268]
[59.14709091 -220.36503601]
[58.25848389 -235.33868408]
[49.71723938 -248.65626526]
[56.68698120 -261.81954956]
[55.79837036 -276.79318237]
[44.26341629 -287.26138306]
[43.57554626 -302.45944214]
[53.62643433 -313.39175415]
[52.73782349 -328.36541748]
[51.84921646 -343.33905029]
[44.87517548 -358.79217529]
[57.79378128 -369.77151489]
[71.92027283 -360.39718628]
[66.82286835 -344.22766113]
[67.71147919 -329.25399780]
[68.60009003 -314.28036499]
[79.87342834 -304.61352539]
[80.98791504 -289.44076538]
[70.77202606 -277.68179321]
[71.66063690 -262.70816040]
[80.13832092 -250.46159363]
[73.23213959 -236.22729492]
[74.12075043 -221.25364685]
[75.00935364 -206.27998352]
[76.04584503 -191.31584167]
[77.23011780 -176.36265564]
[78.41439819 -161.40948486]
[79.59867096 -146.45631409]
[80.78294373 -131.50312805]
[81.96721649 -116.54994965]
[83.15148926 -101.59677887]
[96.39082336 -91.26470947]
[98.12088776 -74.22142029]
[86.79078674 -60.92638397]
[88.27025604 -45.99952316]
[89.74973297 -31.07266235]
[91.22920990 -16.14580154]
[92.70867920 -1.21894133]
[94.18815613 13.70791912]
[95.81501770 28.61943436]
[97.58911896 43.51415253]
[99.51027679 58.39061356]
[101.57830048 73.24737549]
[103.64633179 88.10413361]
[115.19782257 89.78623962]
[124.08224487 102.17136383]
[136.43994141 110.67356873]
[148.79763794 119.17576599]
[161.15533447 127.67796326]
[173.51303101 136.18016052]
[186.76956177 128.69512939]
[201.89967346 127.71205902]
[215.89894104 133.37249756]
[226.01077271 144.50407410]
[230.26918030 158.86288452]
[227.88087463 173.58570862]
[240.23857117 182.08790588]
[252.59626770 190.59010315]
[264.95394897 199.09230042]
[277.31164551 207.59449768]
[289.66934204 216.09669495]
[302.02703857 224.59889221]
[320.38919067 225.60223389]
[327.35897827 241.68307495]
[339.88226318 249.93945312]
[352.40551758 258.19583130]
[368.95742798 261.86611938]
[370.01260376 278.78720093]
[354.04492188 284.48535156]
[344.14913940 270.71911621]
[331.62585449 262.46270752]
[319.10260010 254.20632935]
[307.15975952 256.32812500]
[296.64755249 249.50686646]
[293.52484131 236.95658875]
[281.16714478 228.45439148]
[268.80944824 219.95219421]
[256.45175171 211.44999695]
[244.09407043 202.94779968]
[231.73637390 194.44560242]
[219.37867737 185.94340515]
[206.48222351 193.43652344]
[191.54989624 194.59194946]
[177.53930664 189.12710571]
[167.24885559 178.07600403]
[162.75877380 163.59407043]
[165.01083374 148.53785706]
[152.65313721 140.03565979]
[140.29544067 131.53346252]
[127.93774414 123.03125763]
[115.58004761 114.52906036]
[121.21075439 128.43212891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[12 32]
[13 31]
[17 29]
[18 28]
[19 27]
[20 26]
[42 110]
[43 109]
[44 108]
[46 107]
[47 106]
[49 105]
[50 104]
[51 103]
[52 102]
[53 101]
[54 100]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[66 90]
[67 89]
[68 88]
[70 86]
[71 85]
[74 82]
[75 81]
[76 80]
[112 157]
[113 156]
[114 155]
[115 154]
[116 153]
[122 147]
[123 146]
[124 145]
[125 144]
[126 143]
[127 142]
[128 141]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
