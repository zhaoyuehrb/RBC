%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGAGGACUCACUCUACUUGGGUGGUGAGUGGCAGUUCAACCACUUUUCAAAACUCACAUCUUCUCGGCUCGAUGCAGCUUUUGCUGAAAUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[168.76559448 185.92761230]
[161.34672546 180.04837036]
[157.50833130 171.24327087]
[158.27220154 161.52851868]
[147.10423279 151.51469421]
[135.93627930 141.50086975]
[124.76831055 131.48706055]
[113.60034943 121.47322845]
[102.43238831 111.45941162]
[96.07791138 118.34138489]
[84.79144287 120.83756256]
[70.44158173 125.20578003]
[62.98656464 130.79286194]
[55.57712173 129.47921753]
[41.09834671 133.39904785]
[26.61957169 137.31887817]
[12.14079571 141.23870850]
[-2.33798027 145.15853882]
[-11.53842068 158.30126953]
[-27.55854988 159.15858459]
[-38.10909653 147.07283020]
[-35.09658432 131.31515503]
[-20.83195305 123.97350311]
[-6.25780916 130.67976379]
[8.22096634 126.75992584]
[22.69974136 122.84009552]
[37.17851639 118.92027283]
[51.65729141 115.00044250]
[66.07335663 110.85591888]
[80.42322540 106.48769379]
[85.23561096 92.28062439]
[76.49449158 80.09075165]
[67.75337982 67.90088654]
[59.01226425 55.71101379]
[50.27114868 43.52114487]
[41.53003311 31.33127785]
[26.01300430 31.36941338]
[13.45679951 22.25232124]
[8.68953705 7.48570919]
[13.54432487 -7.25235891]
[26.15439987 -16.29479599]
[41.67092896 -16.16459846]
[54.12749100 -6.91183233]
[58.73428345 7.90562630]
[53.71990204 22.59016228]
[62.46101761 34.78002930]
[71.20213318 46.96989822]
[79.94324493 59.15976715]
[88.68436432 71.34963989]
[97.42547607 83.53950500]
[93.66972351 69.01730347]
[95.57629395 54.13896561]
[102.87243652 41.03300095]
[114.51435089 31.57436562]
[128.83653259 27.11622238]
[143.79003906 28.29636192]
[157.23559570 34.94594955]
[167.24966431 46.11368561]
[172.39962769 60.20190430]
[171.94873047 75.19512177]
[165.96145630 88.94840240]
[155.29437256 99.49417114]
[141.47351074 105.32374573]
[126.47612000 105.60314178]
[112.44621277 100.29145050]
[123.61417389 110.30526733]
[134.78213501 120.31909180]
[145.95010376 130.33291626]
[157.11805725 140.34674072]
[168.28602600 150.36056519]
[189.40684509 153.18055725]
[195.62228394 172.75561523]
[207.67474365 181.68524170]
[219.72718811 190.61488342]
[235.42167664 192.61334229]
[241.04191589 206.40690613]
[253.09436035 215.33653259]
[265.14682007 224.26617432]
[283.40951538 225.85398865]
[289.92276001 242.06752014]
[302.24710083 250.61801147]
[314.57144165 259.16848755]
[326.89578247 267.71896362]
[343.27447510 268.53768921]
[350.51296997 283.25286865]
[341.16491699 296.72677612]
[324.84680176 295.09863281]
[318.34527588 280.04330444]
[306.02096558 271.49282837]
[293.69662476 262.94235229]
[281.37228394 254.39186096]
[269.30270386 256.22036743]
[258.93191528 249.04603577]
[256.21719360 236.31861877]
[244.16473389 227.38899231]
[232.11227417 218.45935059]
[217.27987671 217.09959412]
[210.79756165 202.66732788]
[198.74510193 193.73770142]
[186.69264221 184.80807495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[11 30]
[12 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[72 100]
[73 99]
[74 98]
[76 96]
[77 95]
[78 94]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
