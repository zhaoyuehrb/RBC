%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGUUACAGGCUUUACCAUAACUGAUGAGAAAGUACACUUAUAUCACAGCAUUGAGAAGGAGAAAACUGUAAGACAUAUUGGCGAUUUGUGUUCCU\
) } def
/len { sequence length } bind def

/coor [
[182.90501404 246.53372192]
[174.54722595 234.07789612]
[166.18945312 221.62208557]
[157.83166504 209.16625977]
[149.47387695 196.71044922]
[141.11608887 184.25462341]
[136.51826477 182.45162964]
[133.08729553 177.64141846]
[132.65422058 170.75436401]
[125.08697510 157.80303955]
[117.51973724 144.85171509]
[109.95249176 131.90039062]
[102.38524628 118.94905853]
[88.39720154 115.17008209]
[81.08748627 102.65950775]
[84.66342926 88.61818695]
[77.09618378 75.66685486]
[69.52893829 62.71553421]
[55.88643646 54.70349884]
[56.14629745 39.81116104]
[48.57905579 26.85983658]
[28.98692322 28.15674019]
[11.38986397 19.61800957]
[0.36989310 3.55030751]
[-1.24486244 -15.79030132]
[6.89437199 -33.32559967]
[-2.58767438 -44.94845581]
[-12.06972027 -56.57131195]
[-20.06588936 -61.35189056]
[-21.65913200 -68.70628357]
[-30.77512169 -80.61840820]
[-39.89111328 -92.53053284]
[-57.19202805 -94.45961761]
[-67.61099243 -107.98455048]
[-65.15992737 -124.54147339]
[-74.64196777 -136.16433716]
[-84.12401581 -147.78718567]
[-99.63889313 -153.09950256]
[-102.52977753 -169.24183655]
[-89.82278442 -179.60833740]
[-74.58977509 -173.53483582]
[-72.50115967 -157.26922607]
[-63.01911163 -145.64637756]
[-53.53706741 -134.02351379]
[-40.55838013 -134.50894165]
[-29.53598022 -127.27640533]
[-24.67264938 -114.81250763]
[-27.97898865 -101.64652252]
[-18.86299706 -89.73439789]
[-9.74700737 -77.82227325]
[-0.44686410 -66.05335999]
[9.03518200 -54.43050385]
[18.51722908 -42.80764771]
[28.77286339 -46.50033188]
[39.67754745 -47.10699081]
[50.32105637 -44.56474304]
[59.81145859 -39.07407379]
[67.34988403 -31.08305359]
[72.29772186 -21.25081635]
[74.23075867 -10.39318562]
[72.97548676 0.58500737]
[68.62462616 10.76533222]
[61.53038025 19.29259300]
[69.09762573 32.24391937]
[82.19886780 39.32958603]
[82.48026276 55.14828873]
[90.04750824 68.09961700]
[97.61475372 81.05094147]
[111.60279846 84.82991791]
[118.91251373 97.34049225]
[115.33657074 111.38181305]
[122.90381622 124.33314514]
[130.47105408 137.28446960]
[138.03829956 150.23579407]
[145.60554504 163.18711853]
[153.57191467 175.89683533]
[161.92970276 188.35266113]
[170.28747559 200.80847168]
[178.64526367 213.26429749]
[187.00305176 225.72012329]
[195.36083984 238.17593384]
[208.89160156 239.26837158]
[219.13635254 247.87335205]
[222.45030212 260.63348389]
[217.82662964 272.77035522]
[225.79299927 285.48007202]
[233.13409424 291.21600342]
[233.80235291 298.71127319]
[241.36959839 311.66259766]
[248.93684387 324.61392212]
[263.44158936 332.26535034]
[263.79718018 348.66064453]
[249.63778687 356.93371582]
[235.52940369 348.57397461]
[235.98551941 332.18115234]
[228.41827393 319.22982788]
[220.85102844 306.27850342]
[213.08328247 293.44644165]
[205.11691284 280.73672485]
[188.64884949 277.74633789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[16 68]
[17 67]
[18 66]
[20 64]
[21 63]
[26 53]
[27 52]
[28 51]
[30 50]
[31 49]
[32 48]
[35 44]
[36 43]
[37 42]
[85 99]
[86 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
