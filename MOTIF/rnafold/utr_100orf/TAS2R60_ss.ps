%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUGGAGACCACAUGGUUCUAGGAUCUUCGGUGACUGACAAGAAGGCCAUCAUCUUGGUUACCAUUUUACUCCUUUUACGCCUGGUAGCAAUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[167.18290710 244.96960449]
[171.43344116 228.08837891]
[163.46707153 215.37864685]
[155.50070190 202.66893005]
[147.53433228 189.95921326]
[134.21907043 183.28442383]
[133.44584656 167.48211670]
[125.47947693 154.77239990]
[117.51310730 142.06268311]
[109.54673767 129.35295105]
[95.92150116 130.59577942]
[83.09760284 125.82721710]
[73.59465027 115.98416901]
[69.27976227 103.00057983]
[71.00073242 89.42744446]
[78.41942596 77.93158722]
[70.85218048 64.98025513]
[63.28493881 52.02893448]
[55.71769333 39.07760620]
[48.15045166 26.12628174]
[31.98529053 17.48136520]
[32.37626266 0.01286103]
[24.40989685 -12.69685936]
[16.44352913 -25.40657997]
[8.47716236 -38.11630249]
[0.51079494 -50.82602310]
[-7.45557213 -63.53574371]
[-15.42193890 -76.24546051]
[-19.71773148 -78.28915405]
[-22.73162842 -81.35158539]
[-24.29608917 -84.86261749]
[-24.46175194 -88.25990295]
[-23.47310638 -91.06470490]
[-29.80063057 -104.66479492]
[-36.12815475 -118.26488495]
[-42.45568085 -131.86497498]
[-55.29227448 -141.11334229]
[-53.64588547 -155.91667175]
[-59.97341156 -169.51676941]
[-75.22806549 -172.35844421]
[-85.87458038 -183.64700317]
[-87.81915283 -199.04174805]
[-80.31404877 -212.62309265]
[-66.24514008 -219.16874695]
[-51.02220917 -216.16174316]
[-40.49878311 -204.75836182]
[-38.72133255 -189.34342957]
[-46.37332535 -175.84429932]
[-40.04579926 -162.24420166]
[-27.66179085 -153.96859741]
[-28.85559273 -138.19250488]
[-22.52806664 -124.59240723]
[-16.20054245 -110.99231720]
[-9.87301636 -97.39222717]
[-2.71221852 -84.21183014]
[5.25414848 -71.50210571]
[13.22051525 -58.79238892]
[21.18688202 -46.08266830]
[29.15324974 -33.37294769]
[37.11961746 -20.66322708]
[45.08598328 -7.95350599]
[56.90157700 -4.88597631]
[63.61338425 5.78998613]
[61.10177612 18.55903816]
[68.66902161 31.51036453]
[76.23626709 44.46168900]
[83.80350494 57.41301346]
[91.37075043 70.36434174]
[107.35436249 70.02251434]
[121.36500549 77.72282410]
[129.64401245 91.39947510]
[129.97033691 107.38341522]
[122.25646210 121.38658905]
[130.22282410 134.09631348]
[138.18919373 146.80603027]
[146.15556335 159.51574707]
[160.04063416 167.09962463]
[160.24404907 181.99284363]
[168.21041870 194.70256042]
[176.17678833 207.41229248]
[184.14315796 220.12200928]
[197.63339233 221.63470459]
[207.60557556 230.55413818]
[210.52108765 243.41116333]
[205.52220154 255.39836121]
[213.08944702 268.34970093]
[220.65669250 281.30102539]
[234.29919434 289.31304932]
[234.03933716 304.20538330]
[241.60658264 317.15670776]
[256.11132812 324.80813599]
[256.46691895 341.20343018]
[242.30752563 349.47650146]
[228.19914246 341.11676025]
[228.65525818 324.72396851]
[221.08801270 311.77261353]
[207.98677063 304.68695068]
[207.70536804 288.86825562]
[200.13812256 275.91693115]
[192.57087708 262.96560669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[7 76]
[8 75]
[9 74]
[10 73]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[33 54]
[34 53]
[35 52]
[36 51]
[38 49]
[39 48]
[85 100]
[86 99]
[87 98]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
