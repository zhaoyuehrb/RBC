%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCUCCCAGCUGGAGUAGGUGGGGGAGGCCAGACAUGGAGGCCCUUCCUCCAGUCAGAUCCAGCCUUUUGGGGAUCCUGUUGCAGGUUACGAGGCUCUCAGUGCUGUUGGUUCAGAACCGAGAUCACCUCUAUA\
) } def
/len { sequence length } bind def

/coor [
[71.78792572 142.48362732]
[61.74244690 153.62312317]
[51.69697189 164.76261902]
[41.65149307 175.90211487]
[31.60601807 187.04162598]
[21.56054115 198.18112183]
[11.51506424 209.32061768]
[1.46958709 220.46011353]
[-8.57588959 231.59960938]
[-18.62136650 242.73910522]
[-22.11734581 258.16921997]
[-36.38675308 262.43927002]
[-46.43223190 273.57876587]
[-56.47770691 284.71826172]
[-62.59494019 300.53015137]
[-79.48230743 299.02914429]
[-82.71485901 282.38623047]
[-67.61720276 274.67279053]
[-57.57172775 263.53329468]
[-47.52625275 252.39378357]
[-44.74879456 237.76043701]
[-29.76086426 232.69363403]
[-19.71538734 221.55413818]
[-9.66990948 210.41462708]
[0.37556687 199.27513123]
[10.42104340 188.13563538]
[20.46652031 176.99613953]
[30.51199722 165.85664368]
[40.55747223 154.71714783]
[50.60295105 143.57765198]
[60.64842606 132.43815613]
[51.86754608 116.85369873]
[49.00849915 99.19569397]
[52.42303467 81.63665009]
[39.37570572 74.23616791]
[26.32837677 66.83567810]
[17.23267555 65.29972839]
[13.06953430 59.11296844]
[0.19532382 51.41526031]
[-12.67888737 43.71755219]
[-25.55309868 36.01984406]
[-38.42730713 28.32213783]
[-51.30152130 20.62443161]
[-67.14784241 23.12914276]
[-78.88840485 12.19576359]
[-77.51684570 -3.78855395]
[-64.08531952 -12.56200790]
[-48.89733124 -7.39435673]
[-43.60381317 7.75022078]
[-30.72960091 15.44792747]
[-17.85539055 23.14563560]
[-4.98118019 30.84334183]
[7.89303064 38.54104996]
[20.76724243 46.23875427]
[33.72886276 53.78834915]
[46.77619171 61.18883514]
[59.82352066 68.58932495]
[75.03784943 53.01306534]
[96.15522003 44.71933746]
[96.15522003 29.71933746]
[96.15522003 14.71933842]
[96.15522003 -0.28066191]
[96.15522003 -15.28066158]
[93.12117767 -21.31489754]
[93.58691406 -27.09031105]
[96.51493835 -30.96441650]
[97.20263672 -45.94864273]
[89.18640137 -60.25500870]
[97.79938507 -74.21024323]
[114.18128967 -73.45839691]
[121.47981262 -58.77290726]
[112.18685913 -45.26094437]
[111.49916077 -30.27671814]
[111.15522003 -15.28066158]
[111.15522003 -0.28066191]
[111.15522003 14.71933842]
[111.15522003 29.71933746]
[111.15522003 44.71933746]
[125.33364105 49.61550522]
[134.58963013 37.81183624]
[143.84562683 26.00816345]
[148.86148071 9.81317806]
[165.81208801 10.14979458]
[170.18101501 26.53114891]
[155.64929199 35.26415253]
[146.39329529 47.06782532]
[137.13731384 58.87149429]
[143.62643433 67.03890991]
[148.38958740 76.16313171]
[151.30113220 85.89063263]
[152.30599976 95.85520172]
[151.41984558 105.69171906]
[148.72671509 115.04948425]
[162.25189209 121.53559875]
[175.77706909 128.02171326]
[189.30224609 134.50781250]
[209.24333191 131.98257446]
[219.61488342 148.24076843]
[233.42320251 154.09997559]
[247.23152161 159.95918274]
[261.03982544 165.81838989]
[276.76596069 164.08631897]
[285.45980835 176.18037415]
[299.26812744 182.03958130]
[314.99423218 180.30751038]
[323.68807983 192.40156555]
[337.49639893 198.26077271]
[351.30471802 204.11997986]
[365.86169434 197.96609497]
[380.47485352 203.98530579]
[386.47448730 218.60652161]
[380.30111694 233.15524292]
[365.61727905 238.99995422]
[351.13464355 232.67311096]
[345.44549561 217.92829895]
[331.63717651 212.06909180]
[317.82885742 206.20988464]
[303.09042358 208.36105347]
[293.40890503 195.84790039]
[279.60058594 189.98869324]
[264.86215210 192.13984680]
[255.18063354 179.62670898]
[241.37231445 173.76750183]
[227.56399536 167.90829468]
[213.75567627 162.04908752]
[204.56248474 166.75032043]
[194.08563232 165.54290771]
[185.86569214 158.58888245]
[182.81613159 148.03298950]
[169.29095459 141.54687500]
[155.76577759 135.06077576]
[142.24060059 128.57466125]
[133.46055603 138.48597717]
[122.42488098 145.80288696]
[109.87748718 150.03213501]
[96.66423798 150.88862610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[12 20]
[13 19]
[14 18]
[34 57]
[35 56]
[36 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[66 73]
[67 72]
[79 87]
[80 86]
[81 85]
[93 132]
[94 131]
[95 130]
[96 129]
[98 125]
[99 124]
[100 123]
[101 122]
[103 120]
[104 119]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
