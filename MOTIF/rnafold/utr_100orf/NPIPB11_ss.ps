%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGAAGCUCUCUAUUGUCCUGACCCCACAGUUCCUGUCCCAUGACCAGGGCCAGCUCACCAAGGAGCUGCAGCAGCACGUAAAGUCAGUGACAUGCC\
) } def
/len { sequence length } bind def

/coor [
[19.52695847 316.39556885]
[11.56059170 329.10528564]
[3.59422445 341.81500244]
[-4.37214279 354.52471924]
[-5.14536333 370.32702637]
[-18.46063232 377.00180054]
[-26.42700005 389.71154785]
[-29.71586990 406.34341431]
[-46.60822678 407.78723145]
[-52.67189407 391.95474243]
[-39.13671875 381.74517822]
[-31.17035294 369.03543091]
[-30.96693993 354.14224243]
[-17.08186340 346.55834961]
[-9.11549664 333.84863281]
[-1.14912915 321.13891602]
[6.81723785 308.42919922]
[13.77219105 295.13900757]
[19.67369461 281.34872437]
[25.57519913 267.55844116]
[31.47670174 253.76812744]
[37.16302872 239.88772583]
[42.63280106 225.92056274]
[48.10257339 211.95339966]
[53.57234573 197.98623657]
[59.04211807 184.01908875]
[50.87204742 171.59379578]
[51.59364700 156.56237793]
[61.13953400 144.69943237]
[76.01219177 140.68569946]
[81.48197174 126.71853638]
[70.83439636 116.67071533]
[65.41517639 102.55706787]
[66.67721558 87.01153564]
[74.78284454 73.12958527]
[88.49236298 63.85210419]
[82.59085846 50.06180573]
[76.68935394 36.27151108]
[70.78784943 22.48121643]
[64.67259979 8.78436661]
[58.34507370 -4.81572199]
[44.61638260 -13.78539944]
[45.79005051 -30.14249420]
[60.65871048 -37.06023026]
[73.92675781 -27.42223167]
[71.94515991 -11.14324760]
[78.27268982 2.45684147]
[84.05003357 7.27843618]
[84.57814789 16.57971191]
[90.47965240 30.37000656]
[96.38115692 44.16030121]
[102.28266144 57.95059967]
[116.87633514 61.41824341]
[128.35032654 51.75658798]
[139.51828003 41.74276352]
[150.36941528 31.38646507]
[161.22055054 21.03016472]
[172.07168579 10.67386436]
[182.92280579 0.31756386]
[193.77394104 -10.03873634]
[193.89198303 -25.84258461]
[205.20895386 -36.87444687]
[221.01066589 -36.58931732]
[231.92225647 -25.15635872]
[231.47007751 -9.35853958]
[219.92239380 1.43157232]
[204.13024902 0.81239456]
[193.27911377 11.16869450]
[182.42797852 21.52499580]
[171.57684326 31.88129616]
[160.72572327 42.23759460]
[149.87458801 52.59389496]
[148.88067627 57.43154907]
[144.72477722 61.63134003]
[138.01197815 63.23057556]
[126.53799438 72.89223480]
[134.41477966 86.32842255]
[136.09790039 101.43517303]
[131.59790039 115.56137848]
[121.98438263 126.35094452]
[109.15116119 132.13533020]
[95.44912720 132.18830872]
[89.97935486 146.15547180]
[98.17108917 159.20161438]
[97.12236023 174.39218140]
[87.44443512 185.91615295]
[73.00927734 189.48886108]
[67.53950500 203.45602417]
[62.06973648 217.42317200]
[56.59996033 231.39033508]
[51.13018799 245.35749817]
[50.89159775 254.67070007]
[45.26699829 259.66964722]
[39.36549377 273.45993042]
[33.46398926 287.25021362]
[27.56248665 301.04052734]
[28.35967827 305.16345215]
[27.94659805 308.98751831]
[26.54313087 312.19198608]
[24.44571495 314.55154419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[6 12]
[7 11]
[18 96]
[19 95]
[20 94]
[21 93]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[30 83]
[31 82]
[36 52]
[37 51]
[38 50]
[39 49]
[40 47]
[41 46]
[53 76]
[54 75]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
