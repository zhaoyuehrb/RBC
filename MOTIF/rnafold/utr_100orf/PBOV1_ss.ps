%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUAAAUAUAUCGAGGUGGCUAAUUGAUGUAUAAUAAUUUACAAAAUUAUUCUUCUAUGCUACAGAGCUACAAUUCAAUUUACAGUAGUAAAUAUGAGGGCCUUCUUAAGGAACCAGAAAUAUGAGGAUAUGCACAAUAUUAUUCACAUUUUACAGAUCAGAAAAUUGAGGCACAGAUUAAGUAACUUCCCAA\
) } def
/len { sequence length } bind def

/coor [
[112.69432831 216.85757446]
[125.32318115 208.62498474]
[120.36899567 194.46673584]
[115.41481018 180.30848694]
[110.46062469 166.15023804]
[105.50643921 151.99198914]
[100.55225372 137.83374023]
[85.76418304 135.32115173]
[76.41184235 147.04861450]
[67.05949402 158.77609253]
[57.70714569 170.50355530]
[48.35479736 182.23103333]
[39.00245285 193.95851135]
[29.65010452 205.68597412]
[20.29775620 217.41345215]
[10.94540977 229.14091492]
[15.98924351 243.72047424]
[12.32788467 258.70706177]
[1.12965882 269.31854248]
[-14.03211975 272.16879272]
[-28.31938362 266.34835815]
[-37.17311859 253.71447754]
[-37.76813126 238.29858398]
[-29.91455078 225.01985168]
[-16.11843109 218.11546326]
[-0.78206229 219.78857422]
[8.57028484 208.06109619]
[17.92263222 196.33363342]
[27.27497864 184.60615540]
[36.62732697 172.87869263]
[45.97967148 161.15121460]
[55.33201981 149.42373657]
[64.68436432 137.69627380]
[74.03671265 125.96879578]
[66.46741486 113.01867676]
[51.65968704 115.41267395]
[36.85196304 117.80667114]
[22.04423523 120.20066833]
[7.23650885 122.59466553]
[-7.57121801 124.98866272]
[-22.37894440 127.38265991]
[-37.18667221 129.77665710]
[-51.85778046 138.27342224]
[-64.08384705 126.52780151]
[-56.18176651 111.52802277]
[-39.58066940 114.96893311]
[-24.77294350 112.57493591]
[-9.96521664 110.18093872]
[4.84251022 107.78694153]
[19.65023613 105.39294434]
[34.45796204 102.99893951]
[49.26568985 100.60494232]
[64.07341766 98.21094513]
[65.44806671 90.83799744]
[50.70216751 88.08870697]
[35.82840729 90.03068542]
[29.38525772 76.48499298]
[40.27695084 66.17135620]
[53.45146179 73.34281158]
[68.19735718 76.09210205]
[69.57199860 68.71915436]
[56.62187576 61.14986038]
[43.67175293 53.58056259]
[27.27887535 54.03406906]
[18.92135620 39.92435837]
[27.19669151 25.76629257]
[43.59192657 26.12447357]
[51.24105072 40.63043594]
[64.19117737 48.19973373]
[77.14129639 55.76903152]
[82.96736908 51.04601669]
[73.52133942 39.39387131]
[64.07550049 27.74157143]
[75.72795868 18.29592514]
[85.17348480 29.94783974]
[94.61951447 41.59998322]
[100.44558716 36.87696838]
[95.71896362 22.64113235]
[90.99234009 8.40529537]
[86.15177917 -5.79220343]
[81.19759369 -19.95045280]
[76.24340820 -34.10870361]
[71.28922272 -48.26695251]
[66.33503723 -62.42520523]
[61.38085175 -76.58345032]
[48.60458374 -86.86445618]
[51.38710022 -103.02582550]
[66.86598206 -108.44211578]
[79.11788177 -97.54152679]
[75.53910065 -81.53763580]
[80.49328613 -67.37938690]
[85.44747162 -53.22113800]
[90.40165710 -39.06288910]
[95.35584259 -24.90464020]
[100.31002808 -10.74638939]
[105.49307251 -5.46466351]
[105.22817993 3.67867208]
[109.95480347 17.91450882]
[114.68141937 32.15034485]
[129.68093872 32.27055740]
[134.63513184 18.11230659]
[130.78874207 0.11022045]
[144.51388550 -10.81687260]
[149.24050903 -25.05270767]
[153.96713257 -39.28854370]
[158.69375610 -53.52437973]
[157.94648743 -70.46185303]
[174.01516724 -75.86868286]
[183.65895081 -61.92472458]
[172.92959595 -48.79775620]
[168.20297241 -34.56192017]
[163.47634888 -20.32608604]
[158.74972534 -6.09024906]
[163.89144897 4.86776304]
[160.06060791 16.77186584]
[148.79338074 23.06649399]
[143.83918762 37.22474289]
[141.71412659 76.10368347]
[119.51869965 98.44950104]
[133.67695618 93.49531555]
[147.83520508 88.54113007]
[161.99345398 83.58694458]
[176.15170288 78.63275909]
[186.62197876 66.77174377]
[201.19050598 69.87129974]
[215.34875488 64.91711426]
[229.50701904 59.96292877]
[241.18342590 45.73158264]
[258.28405762 49.64941025]
[272.36108398 44.46893311]
[286.43811035 39.28845596]
[300.51513672 34.10798264]
[314.59216309 28.92750549]
[322.59866333 15.02514172]
[338.48092651 12.75943375]
[350.05541992 23.86844063]
[348.44323730 39.83028030]
[334.88107300 48.40039825]
[319.77264404 43.00453186]
[305.69561768 48.18500900]
[291.61859131 53.36548233]
[277.54156494 58.54595947]
[263.46453857 63.72643661]
[258.10302734 74.57860565]
[246.40753174 79.00561523]
[234.46119690 74.12117767]
[220.30294800 79.07536316]
[206.14469910 84.02954865]
[196.68710327 95.53620911]
[181.10588074 92.79100800]
[166.94763184 97.74519348]
[152.78938293 102.69937897]
[138.63113403 107.65356445]
[124.47288513 112.60774994]
[139.27308655 115.04787445]
[154.07327271 117.48799133]
[168.81430054 114.71271515]
[183.12625122 119.20362854]
[193.63902283 129.90322876]
[197.87716675 144.29205322]
[194.84268188 158.98190308]
[185.25013733 170.51373291]
[171.35830688 176.17208862]
[156.43833923 174.62457275]
[144.00350952 166.23559570]
[136.98156738 152.97929382]
[125.84603882 142.92942810]
[114.71050262 132.87954712]
[119.66468811 147.03779602]
[124.61887360 161.19604492]
[129.57305908 175.35430908]
[134.52725220 189.51255798]
[139.48143005 203.67080688]
[154.48800659 202.23333740]
[169.40240479 204.42964172]
[183.35755920 210.13201904]
[195.54211426 219.00897217]
[205.24768066 230.54437256]
[211.90998840 244.06758118]
[215.14169312 258.79235840]
[214.75491333 273.86267090]
[210.77215576 288.40228271]
[203.42492676 301.56594849]
[193.14042664 312.58831787]
[180.51657104 320.82855225]
[166.28727722 325.80758667]
[151.27984619 327.23596191]
[136.36676025 325.03060913]
[122.41507721 319.31976318]
[110.23590851 310.43545532]
[100.53733826 298.89416504]
[93.88323212 285.36691284]
[90.66045380 270.64016724]
[91.05636597 255.57011414]
[95.04795074 241.03289795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 173]
[3 172]
[4 171]
[5 170]
[6 169]
[7 168]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[61 70]
[62 69]
[63 68]
[77 99]
[78 98]
[79 97]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[100 117]
[101 116]
[103 113]
[104 112]
[105 111]
[106 110]
[119 154]
[120 153]
[121 152]
[122 151]
[123 150]
[125 148]
[126 147]
[127 146]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
