%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUCAGGUUUAUCGAAAUUCCACCAAGAUGUCCUGCCAGCAGAACCAACAGCAGUGCCAGCCCCCUCCCAAGUGUCCUAUCCCCAAGUAUCCCCCAAAAUGUCCCUCAAAGUGUGCAUCCUCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[140.24682617 141.42552185]
[124.33889771 152.37841797]
[105.70932007 157.47421265]
[86.44130707 156.14305115]
[68.68946838 148.53381348]
[54.43886566 135.49737549]
[41.50932312 143.10177612]
[28.57977676 150.70617676]
[15.65023232 158.31057739]
[11.62938786 170.63563538]
[0.62021154 176.68589783]
[-11.16019630 173.67141724]
[-24.26971626 180.96118164]
[-37.37923813 188.25093079]
[-50.48875809 195.54067993]
[-49.09907532 210.70605469]
[-54.00399780 225.12345886]
[-64.35371399 236.29499817]
[-78.35508728 242.28512573]
[-93.58227539 242.05601501]
[-107.39709473 235.64735413]
[-117.40602875 224.16950989]
[-121.87497711 209.61106873]
[-120.02967072 194.49435425]
[-112.18981171 181.43846130]
[-99.71370697 172.70538330]
[-84.76291656 169.80816650]
[-69.92775726 173.24880981]
[-57.77850723 182.43115234]
[-44.66898727 175.14140320]
[-31.55946732 167.85165405]
[-18.44994736 160.56190491]
[-10.31847382 145.05941772]
[8.04583454 145.38102722]
[20.97537994 137.77662659]
[33.90492249 130.17222595]
[46.83446884 122.56783295]
[43.50310135 111.99921417]
[42.25138092 100.98889923]
[43.12538910 89.94218445]
[46.09295654 79.26569366]
[51.04483795 69.35243988]
[57.79876328 60.56731796]
[66.10611725 53.23371506]
[75.66110229 47.62158203]
[86.11199951 43.93749619]
[97.07411957 42.31707382]
[108.14394379 42.81995773]
[118.91398621 45.42764282]
[128.98780823 50.04413605]
[137.99458313 56.49950790]
[145.60276794 64.55612946]
[151.53233337 73.91744232]
[165.68200684 68.93882751]
[179.83168030 63.96020508]
[193.65493774 58.13633728]
[207.10134888 51.48846436]
[220.54776001 44.84058762]
[233.99415588 38.19271469]
[247.35925293 31.38285828]
[260.64108276 24.41201019]
[255.25222778 10.39499569]
[251.52713013 -4.15285826]
[249.51614380 -19.03480911]
[249.24647522 -34.04959488]
[250.72178650 -48.99415970]
[253.92211914 -63.66639328]
[258.80419922 -77.86786652]
[265.30197144 -91.40653229]
[273.32757568 -104.09928131]
[282.77252197 -115.77446747]
[293.50900269 -126.27420044]
[305.39187622 -135.45646667]
[318.26037598 -143.19711304]
[331.94055176 -149.39143372]
[346.24734497 -153.95565796]
[360.98727417 -156.82807922]
[375.96102905 -157.96983337]
[390.96606445 -157.36547852]
[405.79949951 -155.02320862]
[420.26068115 -150.97467041]
[434.15405273 -145.27464294]
[447.29174805 -138.00019836]
[459.49606323 -129.24972534]
[470.60198975 -119.14154053]
[480.45928955 -107.81237030]
[488.93466187 -95.41542053]
[495.91351318 -82.11833954]
[501.30145264 -68.10096741]
[505.02557373 -53.55286407]
[507.03558350 -38.67078018]
[507.30422974 -23.65597343]
[505.82791138 -8.71150875]
[502.62661743 5.96050978]
[497.74359131 20.16166115]
[491.24490356 33.69989014]
[483.21844482 46.39210510]
[473.77273560 58.06666183]
[463.03555298 68.56567383]
[451.15206909 77.74715424]
[438.28305054 85.48693848]
[424.60244751 91.68034363]
[410.29534912 96.24362183]
[395.55523682 99.11505127]
[380.58142090 100.25580597]
[365.57641602 99.65045929]
[350.74316406 97.30718994]
[336.28222656 93.25769043]
[322.38922119 87.55673218]
[309.25201416 80.28141022]
[297.04827881 71.53011322]
[285.94305420 61.42119598]
[276.08648682 50.09136963]
[267.61193848 37.69385147]
[254.33010864 44.66469955]
[249.82386780 50.61905289]
[240.64202881 51.63912201]
[227.19563293 58.28699493]
[213.74922180 64.93486786]
[200.30281067 71.58274078]
[213.16757202 79.29624176]
[215.40289307 94.12874603]
[205.38281250 105.29108429]
[190.39593506 104.66375732]
[181.34373474 92.70308685]
[184.81030273 78.10988617]
[170.66062927 83.08850098]
[156.51094055 88.06711578]
[157.28550720 107.36552429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[12 32]
[13 31]
[14 30]
[15 29]
[53 128]
[54 127]
[55 126]
[56 120]
[57 119]
[58 118]
[59 117]
[60 115]
[61 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
