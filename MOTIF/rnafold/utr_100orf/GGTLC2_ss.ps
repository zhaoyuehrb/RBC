%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUAACGGAUUAAUAAGCGCAGCCAGGCCAGCUCUGGGGUCUCGGCAGGUGGUCCACAACAUGACCUCUGAGUUCUUCGCUGCCCAGCUCCGGGCCCAGAUCUCUGACGACACCACUCACCCGAUCUCCUACUACAAGCCCGAGUUCUACACGCCGGUUG\
) } def
/len { sequence length } bind def

/coor [
[36.11936569 242.58843994]
[24.89420891 247.17636108]
[18.72281075 260.84799194]
[12.55141258 274.51965332]
[6.38001442 288.19128418]
[0.20861670 301.86294556]
[8.69212246 314.74835205]
[8.83967590 330.17498779]
[0.60419255 343.22033691]
[-13.38641357 349.72158813]
[-28.66779137 347.60427856]
[-40.36370850 337.54400635]
[-44.74204254 322.75097656]
[-40.40568161 307.94558716]
[-28.73833847 297.85217285]
[-13.46302700 295.69152832]
[-7.29162931 282.01989746]
[-1.12023139 268.34826660]
[5.05116653 254.67660522]
[11.22256470 241.00495911]
[8.52033710 223.68592834]
[23.50915909 213.02755737]
[29.41592598 199.23951721]
[35.32269287 185.45147705]
[41.22945786 171.66343689]
[47.13622665 157.87539673]
[46.87833405 150.45306396]
[53.29198837 143.88027954]
[59.46338272 130.20863342]
[65.63478088 116.53699493]
[61.91563797 102.00537109]
[49.93513870 92.97943115]
[37.95463943 83.95349121]
[25.97413826 74.92754364]
[12.91187477 78.32825470]
[0.46305138 73.63877106]
[-6.89025831 62.78767776]
[-6.63974333 49.87707901]
[-18.44406700 40.62191772]
[-30.24838829 31.36676025]
[-42.05271149 22.11160088]
[-50.78202438 19.25931931]
[-53.99307632 12.56255722]
[-65.61683655 3.08161974]
[-77.24060059 -6.39931774]
[-88.86435699 -15.88025475]
[-100.48812103 -25.36119270]
[-109.16084290 -28.38117981]
[-112.24223328 -35.13858414]
[-123.68111420 -44.84177780]
[-135.11999512 -54.54497147]
[-146.55888367 -64.24816132]
[-162.08789062 -67.27481079]
[-166.78849792 -81.40822601]
[-178.22738647 -91.11141968]
[-193.61021423 -88.30030060]
[-207.17546082 -96.07963562]
[-212.51803589 -110.77626801]
[-207.11531067 -125.45089722]
[-193.51832581 -133.17460632]
[-178.14712524 -130.30050659]
[-168.25955200 -118.18564606]
[-168.52418518 -102.55030060]
[-157.08531189 -92.84710693]
[-142.37448120 -90.51450348]
[-136.85568237 -75.68704987]
[-125.41680145 -65.98385620]
[-113.97792053 -56.28065872]
[-102.53903961 -46.57746506]
[-91.00718689 -36.98495483]
[-79.38342285 -27.50401688]
[-67.75965881 -18.02307892]
[-56.13589859 -8.54214191]
[-44.51213837 0.93879586]
[-32.79755402 10.30727863]
[-20.99322891 19.56243706]
[-9.18890762 28.81759644]
[2.61541533 38.07275772]
[19.18610382 35.32966232]
[32.89735413 45.60356140]
[35.00008011 62.94704819]
[46.98057938 71.97299194]
[58.96107864 80.99893188]
[70.94158173 90.02487183]
[82.11283875 76.58983612]
[98.17455292 71.85881042]
[113.45313263 76.66062164]
[123.00605774 88.59515381]
[137.80522156 86.14875031]
[152.60438538 83.70234680]
[167.40353394 81.25594330]
[182.20269775 78.80953979]
[190.20426941 74.30273438]
[197.31040955 76.46146393]
[212.15397644 74.30073547]
[226.99752808 72.13999939]
[241.84109497 69.97926331]
[253.85966492 49.69253922]
[276.65325928 44.75287628]
[295.57052612 57.95018005]
[309.90615845 53.53543091]
[324.24179077 49.12068176]
[338.57739258 44.70593262]
[352.91302490 40.29118347]
[360.78738403 24.69591331]
[377.17495728 19.69602394]
[391.82574463 27.90984344]
[406.07360840 23.21963120]
[420.32147217 18.52942085]
[424.08621216 3.56846189]
[435.35745239 -6.96544218]
[450.53854370 -9.71096134]
[464.78527832 -3.79201055]
[473.55157471 8.90269470]
[474.04013062 24.32232094]
[466.09506226 37.54652023]
[452.25161743 44.35549927]
[436.92715454 42.57653809]
[425.01168823 32.77729416]
[410.76382446 37.46750641]
[396.51593018 42.15771866]
[392.36184692 54.38431549]
[381.75717163 62.08875656]
[368.45556641 62.26616669]
[357.32775879 54.62680054]
[342.99215698 59.04154968]
[328.65652466 63.45630264]
[314.32089233 67.87104797]
[299.98529053 72.28579712]
[299.40817261 79.49434662]
[297.04223633 86.35131836]
[293.02691650 92.41872406]
[287.60742188 97.30611420]
[281.11968994 100.69570160]
[273.96963501 102.36299896]
[266.60766602 102.19165039]
[259.50045776 100.18150330]
[253.10124207 96.44930267]
[247.82095337 91.22196960]
[244.00181580 84.82282257]
[229.15826416 86.98355865]
[214.31471252 89.14429474]
[199.47114563 91.30502319]
[184.64909363 93.60870361]
[169.84994507 96.05510712]
[155.05078125 98.50151062]
[140.25161743 100.94791412]
[125.45246124 103.39431763]
[123.84336853 111.33030701]
[119.75682831 118.57744598]
[113.47214508 124.36319733]
[105.50857544 128.02444458]
[96.58351898 129.08142090]
[87.54818726 127.29618073]
[79.30642700 122.70838928]
[73.13502502 136.38003540]
[66.96363068 150.05168152]
[60.92426682 163.78216553]
[55.01750183 177.57020569]
[49.11073303 191.35824585]
[43.20396805 205.14628601]
[37.29720306 218.93432617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[22 162]
[23 161]
[24 160]
[25 159]
[26 158]
[28 157]
[29 156]
[30 155]
[31 84]
[32 83]
[33 82]
[34 81]
[38 78]
[39 77]
[40 76]
[41 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[49 69]
[50 68]
[51 67]
[52 66]
[54 64]
[55 63]
[88 148]
[89 147]
[90 146]
[91 145]
[92 144]
[94 143]
[95 142]
[96 141]
[97 140]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
