%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGCUGCGCGCGGCGGUGGCGGAGCCGCUACGGCUGUAGCAGCAGCCGCGAAGAUGGCGGAAGGGCUGGAGCGUGUGCGGAUCUCCGCGUCGGAGCUGCGCGGGAUCCUGGCUACUCUGGCCCCGCAGGCCGGGAGCAGAGAAAACAUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[120.66744232 254.55223083]
[115.06702423 240.63694763]
[109.46660614 226.72164917]
[103.86618042 212.80636597]
[98.26576233 198.89106750]
[92.66533661 184.97578430]
[86.92508698 171.11758423]
[81.04558563 157.31790161]
[75.16608429 143.51820374]
[60.93804169 138.76818848]
[47.94765854 146.26818848]
[35.03345490 153.89860535]
[22.19673538 161.65867615]
[9.36001682 169.41874695]
[-3.47670269 177.17880249]
[-16.31342125 184.93887329]
[-24.12055206 198.69966125]
[-39.01511002 198.66252136]
[-51.85182953 206.42259216]
[-64.68855286 214.18266296]
[-77.52526855 221.94273376]
[-90.36198425 229.70278931]
[-103.19870758 237.46286011]
[-110.63237762 252.08041382]
[-127.02051544 252.68112183]
[-135.50440979 238.64703369]
[-127.35656738 224.41522217]
[-110.95877075 224.62614441]
[-98.12205505 216.86607361]
[-85.28533936 209.10600281]
[-72.44861603 201.34594727]
[-59.61189651 193.58587646]
[-46.77517700 185.82580566]
[-39.88621521 172.62007141]
[-24.07348824 172.10215759]
[-11.23676968 164.34208679]
[1.59994924 156.58201599]
[14.43666840 148.82196045]
[27.27338791 141.06188965]
[31.39422607 134.87461853]
[40.44765854 133.27780151]
[53.43804169 125.77780914]
[53.89088058 118.29148865]
[39.37114334 122.05675507]
[31.30347252 109.41109467]
[40.83730698 97.83068085]
[54.79655838 103.31885529]
[55.24939346 95.83254242]
[43.25775528 86.82140350]
[31.26611328 77.81027222]
[19.27447128 68.79914093]
[4.08437109 72.51328278]
[-9.91637802 65.54815674]
[-16.11705208 51.19247055]
[-11.58988094 36.22454834]
[1.52754283 27.71177864]
[17.04157257 29.67363739]
[27.62695885 41.18378830]
[28.28560448 56.80749512]
[40.27724457 65.81862640]
[52.26888657 74.82976532]
[64.26052856 83.84089661]
[79.41617584 72.03109741]
[96.29893494 69.99651337]
[109.75990295 76.18756104]
[119.24658203 64.56848907]
[128.73326111 52.94941330]
[138.21994019 41.33033752]
[147.70661926 29.71126366]
[157.19329834 18.09218788]
[166.67997742 6.47311401]
[176.16667175 -5.14596033]
[185.65335083 -16.76503563]
[182.76492310 -29.95583153]
[187.94268799 -42.21568298]
[199.08093262 -49.13680649]
[211.97680664 -48.37239456]
[221.69554138 -59.79808044]
[220.61035156 -75.33706665]
[230.62928772 -86.78588867]
[245.45002747 -87.72469330]
[255.16874695 -99.15037537]
[264.88748169 -110.57606506]
[274.60620117 -122.00174713]
[284.32495117 -133.42742920]
[287.52752686 -142.04473877]
[294.35626221 -144.98278809]
[304.30310059 -156.21044922]
[314.24993896 -167.43811035]
[324.19677734 -178.66577148]
[334.14361572 -189.89343262]
[344.09045410 -201.12109375]
[341.61065674 -216.56080627]
[349.67977905 -229.95568848]
[364.48785400 -234.98110962]
[379.04296875 -229.26419067]
[386.47259521 -215.50431824]
[383.26876831 -200.19845581]
[370.94415283 -190.57357788]
[355.31811523 -191.17425537]
[345.37127686 -179.94659424]
[335.42443848 -168.71893311]
[325.47760010 -157.49127197]
[315.53076172 -146.26361084]
[305.58392334 -135.03594971]
[295.75064087 -123.70870209]
[286.03189087 -112.28301239]
[276.31317139 -100.85733032]
[266.59442139 -89.43164825]
[256.87570190 -78.00595856]
[258.32647705 -63.22655487]
[248.63305664 -51.50083923]
[233.12121582 -50.07934952]
[223.40249634 -38.65366364]
[225.48457336 -21.99132156]
[214.68046570 -8.69952965]
[197.27241516 -7.27835417]
[187.78573608 4.34072018]
[178.29905701 15.95979500]
[168.81237793 27.57886887]
[159.32569885 39.19794464]
[149.83901978 50.81701660]
[140.35234070 62.43609238]
[130.86566162 74.05516815]
[121.37897491 85.67424011]
[126.19012451 119.20817566]
[88.96578217 137.63870239]
[94.84527588 151.43840027]
[100.72477722 165.23809814]
[107.00320435 171.95343018]
[106.58062744 179.37536621]
[112.18104553 193.29064941]
[117.78147125 207.20593262]
[123.38188934 221.12123108]
[128.98231506 235.03651428]
[134.58273315 248.95181274]
[149.61585999 247.47468567]
[164.45593262 250.29406738]
[177.89993286 257.18139648]
[188.85803223 267.57836914]
[196.44187927 280.64212036]
[200.03671265 295.31365967]
[199.35110474 310.40359497]
[194.44062805 324.68869019]
[185.70335388 337.01089478]
[173.84759521 346.37133789]
[159.83441162 352.01113892]
[144.79980469 353.47317505]
[129.96258545 350.63888550]
[116.52549744 343.73803711]
[105.57785797 333.33007812]
[98.00713348 320.25869751]
[94.42704010 305.58355713]
[95.12781525 290.49432373]
[100.05263519 276.21414185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[6 131]
[7 129]
[8 128]
[9 127]
[10 42]
[11 41]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[48 62]
[49 61]
[50 60]
[51 59]
[65 125]
[66 124]
[67 123]
[68 122]
[69 121]
[70 120]
[71 119]
[72 118]
[73 117]
[77 114]
[78 113]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
