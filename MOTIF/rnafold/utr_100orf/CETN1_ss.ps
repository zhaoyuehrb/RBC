%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:18:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGGGCGCCCGAAUGAGAGCGCGGGGCGGUGCCGUUGGGACCACGGCGGCCAGAGCGGCAGGAUGGCUUCCGGCUUCAAGAAGCCCAGCGCUGCCUCCACCGGCCAAAAGAGAAAGGUGGCACCUAAGCCCGAGCUCACUGAGGAUCAGAAGCAAGAAGUUC\
) } def
/len { sequence length } bind def

/coor [
[101.27710724 148.95701599]
[98.86682129 134.15193176]
[91.49913788 135.55451965]
[86.51642609 149.70275879]
[81.53371429 163.85099792]
[76.55100250 177.99923706]
[82.15804291 193.03054810]
[73.77880859 206.71148682]
[57.84112549 208.54719543]
[46.57102203 197.12947083]
[48.61395645 181.21702576]
[62.40276337 173.01652527]
[67.38547516 158.86828613]
[72.36818695 144.72004700]
[77.35090637 130.57180786]
[69.89615631 119.75283051]
[66.91655731 107.68361664]
[68.32403564 96.04283142]
[73.45180511 86.28754425]
[81.19712830 79.47100067]
[90.21495056 76.13101959]
[88.80612946 61.19732666]
[87.39731598 46.26363373]
[85.98850250 31.32993698]
[76.98927307 18.31746292]
[83.49701691 4.91975403]
[82.08820343 -10.01394081]
[80.67938232 -24.94763565]
[79.27056885 -39.88132858]
[64.23475647 -51.35179520]
[62.34536362 -69.84888458]
[74.33418274 -83.64190674]
[72.36463165 -98.51203918]
[70.39508820 -113.38217163]
[68.42553711 -128.25230408]
[66.45598602 -143.12243652]
[64.48643494 -157.99256897]
[53.73125076 -168.44847107]
[38.81146622 -169.99769592]
[23.89168358 -171.54690552]
[8.97189999 -173.09613037]
[-3.13834047 -162.94143677]
[-18.87449074 -164.40744019]
[-28.90056992 -176.62435913]
[-27.26828575 -192.34413147]
[-14.94604206 -202.24049377]
[0.75559312 -200.44209290]
[10.52111721 -188.01591492]
[25.44090080 -186.46669006]
[40.36068344 -184.91748047]
[55.28046799 -183.36825562]
[65.83706665 -194.02462769]
[64.14759064 -208.92918396]
[62.45810699 -223.83372498]
[60.76862335 -238.73828125]
[45.38211441 -243.96638489]
[33.84982681 -255.33297729]
[28.43857384 -270.53274536]
[30.18099594 -286.51422119]
[38.67892456 -300.09228516]
[52.19291687 -308.58303833]
[50.22336960 -323.45315552]
[48.25381851 -338.32330322]
[46.28427124 -353.19345093]
[44.31472015 -368.06356812]
[28.14561272 -376.18948364]
[20.13136673 -392.23928833]
[23.29528618 -409.73831177]
[36.19289780 -421.75204468]
[33.66540146 -436.53756714]
[31.13790512 -451.32308960]
[28.61041069 -466.10861206]
[26.08291626 -480.89413452]
[23.55541992 -495.67965698]
[9.31735802 -501.61944580]
[0.56964535 -514.32696533]
[0.10364477 -529.74731445]
[8.06805611 -542.95983887]
[21.92146301 -549.74859619]
[37.24329758 -547.94720459]
[49.14441299 -538.13049316]
[53.82720947 -523.43103027]
[49.79742432 -508.53927612]
[38.34094620 -498.20715332]
[40.86844254 -483.42163086]
[43.39593506 -468.63610840]
[45.92343140 -453.85058594]
[48.45092773 -439.06506348]
[50.97842026 -424.27954102]
[62.58269119 -420.55310059]
[71.54286194 -412.18478394]
[76.10586548 -400.72735596]
[75.34307098 -388.34591675]
[69.33856964 -377.40841675]
[59.18485260 -370.03311157]
[61.15440369 -355.16299438]
[63.12395096 -340.29284668]
[65.09349823 -325.42272949]
[67.06304932 -310.55258179]
[80.46193695 -306.87066650]
[91.47537231 -298.32678223]
[98.41547394 -286.18841553]
[100.20266724 -272.27706909]
[96.53351593 -258.69491577]
[87.93161774 -247.50708008]
[75.67317963 -240.42776489]
[77.36265564 -225.52320862]
[79.05213928 -210.61866760]
[80.74162292 -195.71411133]
[90.39489746 -207.19514465]
[103.63023376 -214.25389099]
[118.54246521 -215.87423706]
[132.98501587 -211.82296753]
[144.87893677 -202.68324280]
[152.51214600 -189.77069092]
[154.78585815 -174.94401550]
[151.37280273 -160.33747864]
[142.76426697 -148.05361938]
[130.19940186 -139.86067200]
[115.48690033 -136.93797302]
[100.74455261 -139.70623779]
[88.09447479 -147.76698303]
[79.35657501 -159.96212769]
[81.32611847 -145.09199524]
[83.29566956 -130.22186279]
[85.26522064 -115.35172272]
[87.23477173 -100.48159027]
[89.20431519 -85.61145782]
[99.59211731 -80.77386475]
[106.40937805 -71.41429138]
[107.85719299 -59.80493546]
[103.45810699 -48.83466339]
[94.20426178 -41.29014587]
[95.61308289 -26.35645103]
[97.02189636 -11.42275620]
[98.43070984 3.51093888]
[107.32917023 15.45525646]
[100.92219543 29.92112160]
[102.33100891 44.85481644]
[103.73983002 59.78851318]
[105.14864349 74.72220612]
[129.32135010 87.37918854]
[132.29771423 120.11157227]
[142.13031006 131.43940735]
[151.96290588 142.76725769]
[161.79551697 154.09509277]
[176.74429321 162.09321594]
[173.19697571 178.67190552]
[156.28419495 179.85266113]
[150.46766663 163.92768860]
[140.63507080 152.59985352]
[130.80247498 141.27201843]
[120.96987152 129.94416809]
[113.60218811 131.34675598]
[116.80024719 146.00187683]
[119.99831390 160.65699768]
[123.19637299 175.31210327]
[126.39443970 189.96722412]
[129.59249878 204.62232971]
[138.18777466 216.91548157]
[132.53700256 230.81039429]
[117.80162048 233.61547852]
[107.44092560 222.76853943]
[110.91824341 208.17736816]
[108.50795746 193.37228394]
[106.09767151 178.56719971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[21 141]
[22 140]
[23 139]
[24 138]
[26 136]
[27 135]
[28 134]
[29 133]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[37 123]
[38 51]
[39 50]
[40 49]
[41 48]
[52 109]
[53 108]
[54 107]
[55 106]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[143 153]
[144 152]
[145 151]
[146 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
