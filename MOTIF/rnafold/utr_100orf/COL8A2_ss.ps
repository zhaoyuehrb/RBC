%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGGCGCCCGGCGGCCGCGCCCGCAGGCCCUGCCUCUGCUGGAACCUUCCCAGGCCCCUCCGACCUGAAAGCACGUCCACGGACGCCAUGCUGGGGACUCUGACACCCCUGUCUUCGCUGCUGCUGCUGCUACUGGUGCUGGUGCUGGGGUGUGGGCCGCGGGCGUCCUCUGGUGGCGGGGCCGGUG\
) } def
/len { sequence length } bind def

/coor [
[110.03636932 798.18334961]
[102.28482819 784.60223389]
[105.12744904 769.22515869]
[117.22203064 759.31280518]
[117.22203064 744.31280518]
[117.22203064 729.31280518]
[117.22203064 714.31280518]
[114.07239532 707.61187744]
[117.34809113 699.06530762]
[117.59609985 684.06738281]
[117.84410858 669.06939697]
[114.80569458 662.31732178]
[118.22225189 653.82611084]
[118.71820068 638.83428955]
[111.40593719 625.85815430]
[119.59528351 612.32135010]
[120.09123993 597.32952881]
[120.58718872 582.33776855]
[120.46318054 567.33825684]
[119.71942139 552.35668945]
[118.97566986 537.37518311]
[118.23191071 522.39361572]
[117.48815155 507.41207886]
[116.74440002 492.43051147]
[116.00064087 477.44897461]
[115.25688171 462.46740723]
[111.77886963 455.93093872]
[114.62676239 447.23242188]
[114.13081360 432.24063110]
[113.63485718 417.24884033]
[113.13890839 402.25701904]
[112.64295959 387.26522827]
[112.02308655 372.27804565]
[111.27932739 357.29650879]
[110.53556824 342.31494141]
[109.79181671 327.33340454]
[109.04805756 312.35183716]
[108.30430603 297.37030029]
[96.64851379 281.95510864]
[106.07618713 264.15039062]
[104.83749390 249.20162964]
[103.59880829 234.25286865]
[102.36011505 219.30409241]
[101.12142181 204.35533142]
[92.35954285 192.31047058]
[98.93080902 177.91848755]
[97.69211578 162.96972656]
[96.45342255 148.02095032]
[79.87686920 143.74528503]
[65.84381866 133.94032288]
[56.12801743 119.84539795]
[51.95752335 103.24206543]
[53.85947037 86.22894287]
[40.32960129 79.75262451]
[26.79973412 73.27631378]
[13.26986504 66.79999542]
[0.19752820 74.99252319]
[-15.22856045 74.79423523]
[-28.08599281 66.26839447]
[-34.27201080 52.13556671]
[-31.81267357 36.90549088]
[-21.49275017 25.43802452]
[-6.60529089 21.39239883]
[8.09917068 26.05955315]
[17.92849541 37.95021820]
[19.74617958 53.27012634]
[33.27605057 59.74644089]
[46.80591583 66.22275543]
[60.33578491 72.69907379]
[63.49384308 61.57646561]
[69.68074799 50.73225403]
[78.88330841 40.96461105]
[73.08582306 27.13026619]
[67.28833008 13.29591942]
[61.49084473 -0.53842682]
[55.35205841 -14.22474384]
[48.87574005 -27.75461197]
[42.39942551 -41.28448105]
[35.92311096 -54.81435013]
[22.09686470 -63.63290405]
[23.09105301 -80.00189209]
[37.88293839 -87.08229065]
[51.25590134 -77.59040070]
[49.45298004 -61.29066467]
[55.92929459 -47.76079559]
[62.40560913 -34.23092651]
[68.88192749 -20.70105934]
[72.08637238 -19.18987465]
[74.71202850 -16.04191780]
[75.99327087 -11.54905701]
[75.32519531 -6.33591413]
[81.12268066 7.49843216]
[86.92016602 21.33277893]
[92.71765137 35.16712570]
[107.68486023 34.17576599]
[111.60705566 19.69763184]
[115.52925873 5.21949863]
[119.45145416 -9.25863552]
[109.02953339 -20.63347626]
[106.43427277 -35.84098053]
[112.49382019 -50.02848816]
[125.27459717 -58.66881943]
[140.69830322 -59.00487518]
[153.84327698 -50.92942047]
[160.51502991 -37.01930237]
[158.58460999 -21.71319199]
[148.66801453 -9.89521122]
[133.92959595 -5.33643579]
[130.00738525 9.14169788]
[126.08518982 23.61983109]
[122.16299438 38.09796524]
[128.19396973 42.55636597]
[137.11076355 30.49441719]
[141.86383057 16.26738548]
[156.86331177 16.39144325]
[161.38040161 30.69514656]
[149.17271423 39.41122055]
[140.25592041 51.47316742]
[146.28689575 55.93157196]
[158.97831726 47.93609619]
[166.53034973 34.03367233]
[181.42306519 33.79612350]
[194.11450195 25.80064964]
[201.27732849 11.04850292]
[217.65161133 10.14567280]
[226.39286804 24.02091408]
[218.50886536 38.40056610]
[202.10997009 38.49207687]
[189.41854858 46.48755264]
[182.77427673 59.81808472]
[166.97380066 60.62752151]
[154.28236389 68.62300110]
[159.09117126 90.89129639]
[155.53074646 112.31430054]
[144.86444092 129.99980164]
[129.26109314 141.84521484]
[111.40219116 146.78227234]
[112.64088440 161.73103333]
[113.87957001 176.67980957]
[122.73005676 189.79389954]
[116.07019043 203.11663818]
[117.30888367 218.06541443]
[118.54756927 233.01417542]
[119.78626251 247.96293640]
[121.02495575 262.91171265]
[129.73440552 269.46511841]
[133.31607056 279.52642822]
[130.81172180 289.68222046]
[123.28585052 296.62652588]
[124.02960968 311.60809326]
[124.77336884 326.58963013]
[125.51712036 341.57119751]
[126.26087952 356.55273438]
[127.00463104 371.53430176]
[130.56111145 379.96789551]
[127.63475800 386.76928711]
[128.13070679 401.76107788]
[128.62666321 416.75286865]
[129.12260437 431.74468994]
[129.61856079 446.73648071]
[130.23843384 461.72366333]
[130.98219299 476.70520020]
[131.72595215 491.68676758]
[132.46971130 506.66830444]
[133.21345520 521.64984131]
[133.95721436 536.63140869]
[134.70097351 551.61297607]
[135.44473267 566.59448242]
[147.35705566 557.47875977]
[161.95140076 560.94360352]
[168.49520874 574.44091797]
[162.17619324 588.04498291]
[147.64132690 591.75140381]
[135.57899475 582.83367920]
[135.08303833 597.82550049]
[134.58708191 612.81732178]
[141.86387634 626.86572266]
[133.71000671 639.33026123]
[133.21405029 654.32202148]
[132.84205627 669.31744385]
[132.59403992 684.31536865]
[132.34603882 699.31335449]
[132.22203064 714.31280518]
[132.22203064 729.31280518]
[132.22203064 744.31280518]
[132.22203064 759.31280518]
[144.31660461 769.22515869]
[147.15922546 784.60223389]
[139.40768433 798.18334961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 186]
[5 185]
[6 184]
[7 183]
[9 182]
[10 181]
[11 180]
[13 179]
[14 178]
[16 176]
[17 175]
[18 174]
[19 168]
[20 167]
[21 166]
[22 165]
[23 164]
[24 163]
[25 162]
[26 161]
[28 160]
[29 159]
[30 158]
[31 157]
[32 156]
[33 154]
[34 153]
[35 152]
[36 151]
[37 150]
[38 149]
[40 145]
[41 144]
[42 143]
[43 142]
[44 141]
[46 139]
[47 138]
[48 137]
[53 69]
[54 68]
[55 67]
[56 66]
[72 94]
[73 93]
[74 92]
[75 91]
[76 87]
[77 86]
[78 85]
[79 84]
[95 111]
[96 110]
[97 109]
[98 108]
[119 132]
[120 131]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
