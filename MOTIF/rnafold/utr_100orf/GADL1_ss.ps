%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUGCGGGAGCCGCGCCCGGGGCAGCCUGGAGUGGGGGAGCGGAGAUGAGCAGCGACUCGGACCGCCAGUGUCCUGUGGACGGAGAUAUUGAUCAACAAGAGAUGAUUCCAAGUAAGAAGAAUGCUGUUCUUGUGGAUGGGGUUG\
) } def
/len { sequence length } bind def

/coor [
[135.81927490 213.95324707]
[141.86561584 198.11410522]
[141.86561584 183.11410522]
[141.86561584 168.11410522]
[141.86561584 153.11410522]
[134.12831116 140.38684082]
[141.86561584 126.58666229]
[141.86561584 111.58666229]
[131.70849609 127.11994171]
[116.52153778 136.43873596]
[99.54530334 138.29153442]
[84.10807800 132.94667053]
[72.97431183 122.02542114]
[59.58042526 128.77847290]
[50.74125290 141.90020752]
[35.89338303 140.72123718]
[22.49949455 147.47428894]
[9.10560703 154.22734070]
[-4.21585417 161.12217712]
[-17.46338844 168.15798950]
[-30.71092224 175.19381714]
[-43.95845795 182.22964478]
[-57.20598984 189.26547241]
[-65.43930817 203.44801331]
[-81.83553314 203.13845825]
[-89.52763367 188.65522766]
[-80.60263824 174.89746094]
[-64.24181366 176.01794434]
[-50.99428177 168.98211670]
[-37.74674988 161.94628906]
[-24.49921417 154.91046143]
[-11.25167942 147.87463379]
[-6.78868389 141.91819763]
[2.35255075 140.83345032]
[15.74643898 134.08039856]
[29.14032745 127.32733917]
[37.02147675 114.68864441]
[52.82736588 115.38459015]
[66.22125244 108.63153076]
[67.72875214 80.46652222]
[90.66875458 60.50642395]
[123.16490173 63.25265503]
[112.33556366 52.87357330]
[101.50621796 42.49448776]
[90.67687988 32.11540604]
[77.29119110 33.94719696]
[65.47719574 27.80473328]
[59.46675491 16.14198303]
[61.26570511 3.34239149]
[50.65910339 -7.26421022]
[40.05250168 -17.87081146]
[29.44589996 -28.47741318]
[13.64359856 -28.22677994]
[2.35075140 -39.28332520]
[2.26720405 -55.08739090]
[13.44252396 -66.26271057]
[29.24659157 -66.17916107]
[40.30313492 -54.88631821]
[40.05250168 -39.08401489]
[50.65910339 -28.47741318]
[61.26570511 -17.87081146]
[71.87230682 -7.26421022]
[88.64262390 -8.00207138]
[101.02449036 3.82585001]
[101.05596161 21.28606415]
[111.88530731 31.66514778]
[122.71464539 42.04423141]
[133.54399109 52.42331314]
[148.05998230 48.64364243]
[152.45231628 34.30113983]
[156.84466553 19.95864105]
[161.23699951 5.61613941]
[165.62934875 -8.72636127]
[170.02168274 -23.06886292]
[174.41403198 -37.41136551]
[178.65390015 -51.79967499]
[182.74082947 -66.23217010]
[186.82775879 -80.66467285]
[182.28553772 -96.42221832]
[193.85421753 -108.04537201]
[209.63291931 -103.57723236]
[213.38989258 -87.61423492]
[201.26025391 -76.57774353]
[197.17332458 -62.14524460]
[193.08639526 -47.71274567]
[194.29856873 -40.36916351]
[188.75653076 -33.01902390]
[184.36419678 -18.67652130]
[179.97184753 -4.33402014]
[175.57951355 10.00848103]
[171.18716431 24.35098267]
[166.79483032 38.69348145]
[162.40248108 53.03598404]
[173.55674744 63.06505203]
[187.35324097 57.17804337]
[201.14973450 51.29103470]
[214.94622803 45.40402603]
[218.27687073 30.24861717]
[229.90187073 19.97053719]
[245.35118103 18.52191734]
[258.68423462 26.45978165]
[264.77416992 40.73186111]
[261.27929688 55.85024643]
[249.54348755 66.00160980]
[234.07937622 67.28254700]
[220.83323669 59.20051575]
[207.03674316 65.08752441]
[193.24024963 70.97453308]
[179.44375610 76.86154175]
[178.17167664 91.80750275]
[190.77481079 99.94145203]
[203.37792969 108.07540131]
[215.98106384 116.20935059]
[222.66613770 116.92912292]
[227.25488281 120.42800140]
[228.93627930 124.96553802]
[241.18283081 133.62704468]
[253.42939758 142.28855896]
[265.67596436 150.95007324]
[277.92251587 159.61158752]
[290.16906738 168.27310181]
[304.82061768 163.16314697]
[319.66778564 167.67330933]
[329.00149536 180.06932068]
[329.23278809 195.58467102]
[320.27270508 208.25338745]
[305.56658936 213.20410156]
[290.76922607 208.53314209]
[281.57052612 196.03660583]
[281.50756836 180.51965332]
[269.26098633 171.85813904]
[257.01443481 163.19664001]
[244.76788330 154.53512573]
[232.52131653 145.87361145]
[220.27476501 137.21209717]
[207.84712219 128.81248474]
[195.24398804 120.67852783]
[182.64085388 112.54458618]
[170.03771973 104.41063690]
[156.86561584 111.58666229]
[156.86561584 126.58666229]
[164.60290527 140.38684082]
[156.86561584 153.11410522]
[156.86561584 168.11410522]
[156.86561584 183.11410522]
[156.86561584 198.11410522]
[162.91195679 213.95324707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 146]
[3 145]
[4 144]
[5 143]
[7 141]
[8 140]
[13 39]
[14 38]
[16 36]
[17 35]
[18 34]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[42 68]
[43 67]
[44 66]
[45 65]
[49 62]
[50 61]
[51 60]
[52 59]
[69 93]
[70 92]
[71 91]
[72 90]
[73 89]
[74 88]
[75 87]
[76 85]
[77 84]
[78 83]
[94 109]
[95 108]
[96 107]
[97 106]
[110 139]
[111 138]
[112 137]
[113 136]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
