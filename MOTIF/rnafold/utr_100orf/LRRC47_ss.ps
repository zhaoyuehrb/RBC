%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGUGCCUGCCAGCAGCUGAGGCGCCAUGGCGGCGGCAGCGGUGUCAGAGUCUUGGCCGGAGCUGGAGCUGGCUGAGCGCGAGCGGCGGCGGGAGCUGCUGCUGACGGGGCCCGGGCUGGAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[65.40219879 437.36950684]
[50.36437607 442.95907593]
[36.69318008 434.56396484]
[34.87598419 418.62417603]
[46.30678558 407.36734009]
[47.76568222 392.43844604]
[41.30291367 379.01898193]
[50.34573364 366.03677368]
[51.80463028 351.10787964]
[53.26352310 336.17898560]
[50.75706863 329.14328003]
[54.94404602 320.90588379]
[56.76604080 306.01693726]
[58.58803940 291.12802124]
[60.41003799 276.23907471]
[62.23203278 261.35015869]
[59.98127747 257.03097534]
[60.49347687 251.23963928]
[64.52241516 245.78724670]
[67.06716156 231.00468445]
[69.61190033 216.22210693]
[67.62570953 209.02220154]
[72.40280914 201.11241150]
[75.30676270 186.39619446]
[78.21072388 171.67997742]
[73.08377075 157.69557190]
[83.34636688 145.65440369]
[86.25032043 130.93818665]
[70.47593689 116.56970215]
[66.42861176 95.61968231]
[52.35416412 90.43220520]
[38.27971268 85.24473572]
[24.20526314 80.05726624]
[10.13081360 74.86978912]
[-5.49364328 77.35713959]
[-14.75979805 65.69577026]
[-28.83424759 60.50829697]
[-44.89508820 63.82213211]
[-55.59173203 51.39176941]
[-49.92039108 36.00450516]
[-33.71525574 33.48943329]
[-23.64677620 46.43384552]
[-9.57232666 51.62131882]
[5.04543161 48.76292419]
[15.31828499 60.79534149]
[29.39273453 65.98281097]
[43.46718597 71.17028809]
[57.54163361 76.35775757]
[71.61608124 81.54522705]
[78.27413940 74.03440094]
[86.84168243 68.80570221]
[96.56571960 66.31868744]
[98.38771820 51.42975235]
[100.02828979 36.51973724]
[101.48718262 21.59085274]
[102.94607544 6.66196680]
[104.40497589 -8.26691914]
[105.86386871 -23.19580460]
[107.32276917 -38.12469101]
[108.78166199 -53.05357361]
[110.24055481 -67.98246002]
[111.69945526 -82.91134644]
[100.00353241 -93.10865021]
[96.56797791 -108.24062347]
[102.71384430 -122.48871613]
[116.07790375 -130.37423706]
[131.52140808 -128.86505127]
[143.10601807 -118.54146576]
[146.37722778 -103.37311554]
[140.07716370 -89.19253540]
[126.62834167 -81.45245361]
[125.16944122 -66.52356720]
[123.71054840 -51.59468079]
[122.25165558 -36.66579437]
[120.79275513 -21.73690796]
[119.33386230 -6.80802298]
[117.87496185 8.12086296]
[116.41606903 23.04974747]
[114.95716858 37.97863388]
[117.46363068 45.01435471]
[113.27664948 53.25175095]
[111.45465088 68.14068604]
[124.08508301 76.20642853]
[131.99642944 88.93412781]
[146.90644836 87.29355621]
[161.81646729 85.65299225]
[176.72647095 84.01242065]
[191.63648987 82.37185669]
[206.54650879 80.73128510]
[221.45652771 79.09072113]
[236.36653137 77.45014954]
[251.27655029 75.80958557]
[264.16925049 65.67498779]
[279.28973389 72.02346039]
[281.08334351 88.32422638]
[267.70495605 97.80846405]
[252.91711426 90.71959686]
[238.00709534 92.36016846]
[223.09709167 94.00073242]
[208.18707275 95.64130402]
[193.27705383 97.28186798]
[178.36705017 98.92243958]
[163.45703125 100.56300354]
[148.54701233 102.20357513]
[133.63699341 103.84413910]
[130.17103577 115.36014557]
[122.89806366 124.93800354]
[112.73580933 131.36917114]
[100.96653748 133.84214783]
[98.06257629 148.55836487]
[102.98182678 163.59536743]
[92.92694092 174.58393860]
[90.02297974 189.30015564]
[87.11901855 204.01637268]
[84.39447021 218.76686096]
[81.84972382 233.54942322]
[79.30498505 248.33198547]
[77.12096405 263.17214966]
[75.29896545 278.06106567]
[73.47697449 292.95001221]
[71.65497589 307.83892822]
[69.83297729 322.72787476]
[68.19241333 337.63787842]
[66.73351288 352.56677246]
[65.27462006 367.49566650]
[71.63303375 381.98294067]
[62.69456482 393.89733887]
[61.23566818 408.82623291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 128]
[6 127]
[8 125]
[9 124]
[10 123]
[12 122]
[13 121]
[14 120]
[15 119]
[16 118]
[19 117]
[20 116]
[21 115]
[23 114]
[24 113]
[25 112]
[27 110]
[28 109]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[36 43]
[37 42]
[52 82]
[53 81]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
