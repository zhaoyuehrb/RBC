%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCCUGAACCAGCUAAGUCAGCUCCUGCUCCGAAGAAGGGUUCCAAGAAGGCUGUGACCAAGGCGCAGAAGAAGGAUGGCAAGAAGCGCAAGCGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[129.33439636 130.82965088]
[118.28034210 138.42919922]
[105.40988159 142.21028137]
[92.00187683 141.79718018]
[79.38858795 137.23095703]
[68.82333374 128.96531677]
[61.35591125 117.82158661]
[57.72831345 104.90702057]
[42.75676346 103.98361206]
[27.78521347 103.06019592]
[12.81366253 102.13677979]
[-2.15788722 101.21337128]
[-7.33072472 115.39511108]
[-16.28109550 127.53237152]
[-28.27675819 136.64660645]
[-42.34038162 142.00595093]
[-57.32917786 143.18409729]
[-72.02774048 140.09405518]
[-85.24662781 132.99462891]
[-95.91857910 122.46870422]
[-103.18473053 109.37541199]
[-106.46368408 94.78000641]
[-121.43523407 93.85659790]
[-136.40678406 92.93318176]
[-150.83752441 100.72328949]
[-164.65548706 91.89176178]
[-163.64593506 75.52371979]
[-148.84741211 68.45719910]
[-135.48336792 77.96163177]
[-120.51181793 78.88504791]
[-105.54026794 79.80845642]
[-100.49256897 65.72662354]
[-91.67247772 53.62549591]
[-79.78789520 44.49081039]
[-65.79676819 39.06964111]
[-50.82988358 37.80930328]
[-36.09947586 40.82046127]
[-22.80104637 47.86745071]
[-12.01633739 58.38672256]
[-4.62533426 71.53189087]
[-1.23447359 86.24182129]
[13.73707676 87.16522980]
[28.70862579 88.08864594]
[43.68017578 89.01206207]
[58.65172577 89.93547058]
[65.56752014 74.99243164]
[77.63822937 63.79329300]
[93.05674744 58.01469803]
[109.51473999 58.52176285]
[124.54827881 65.23857880]
[135.90666199 77.15955353]
[141.88943481 92.50000000]
[156.88943481 92.50000000]
[171.88943481 92.50000000]
[186.88943481 92.50000000]
[201.88943481 92.50000000]
[216.88943481 92.50000000]
[231.88943481 92.50000000]
[237.05738831 81.93849945]
[245.81176758 74.16703796]
[256.81338501 70.32170868]
[268.39910889 70.94200134]
[278.83343506 75.89547729]
[286.56826782 84.40356445]
[290.47268677 95.16364288]
[305.40869141 96.54766846]
[320.34469604 97.93168640]
[335.28073120 99.31571198]
[341.03533936 85.33803558]
[350.65560913 73.67860413]
[363.28604126 65.37418365]
[377.80358887 61.16318512]
[392.91732788 61.42005920]
[407.28338623 66.12195587]
[419.62432861 74.85079193]
[428.84280396 86.83039856]
[434.11911011 100.99555969]
[434.98410034 116.08672333]
[431.36087036 130.76199341]
[423.57153320 143.71644592]
[412.30877686 153.79818726]
[398.57403564 160.11074829]
[383.58862305 162.09283447]
[368.68499756 159.56819153]
[355.18841553 152.76130676]
[344.29898071 142.27745056]
[336.98495483 129.04882812]
[333.89669800 114.25173187]
[318.96069336 112.86770630]
[304.02465820 111.48368073]
[289.08865356 110.09965515]
[277.80783081 124.77460480]
[259.87576294 129.92280579]
[242.25338745 123.36457062]
[231.88943481 107.50000000]
[216.88943481 107.50000000]
[201.88943481 107.50000000]
[186.88943481 107.50000000]
[171.88943481 107.50000000]
[156.88943481 107.50000000]
[141.88943481 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[22 31]
[23 30]
[24 29]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[65 91]
[66 90]
[67 89]
[68 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
