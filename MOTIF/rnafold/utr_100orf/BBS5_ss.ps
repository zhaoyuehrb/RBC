%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGACGCAGCUAGGCCUGCACGGCUGUGGAGAGAUCCUGCCACGGGCCUUGUUCACCAUGUCGGUGCUGGAUGCGCUUUGGGAGGAUCGGGAUGUCCGUUUCGACCUGUCCGCGCAGCAAAUGAAAACAAGACCUGGAGAAGUCCUUAUUGAUUGUU\
) } def
/len { sequence length } bind def

/coor [
[156.16284180 196.53573608]
[142.29570007 190.81936646]
[131.20030212 180.68460083]
[124.22879028 167.34037781]
[122.23971558 152.38833618]
[125.49226379 137.63052368]
[133.61273193 124.85227966]
[124.51072693 112.92946625]
[83.74317169 120.71643829]
[69.53327179 125.52048492]
[55.32337952 130.32453918]
[44.72813416 142.07406616]
[30.19323158 138.82048035]
[15.98333645 143.62452698]
[1.77344108 148.42857361]
[-12.43645382 153.23262024]
[-26.64634895 158.03666687]
[-40.85624313 162.84071350]
[-55.06613922 167.64476013]
[-59.34862900 177.71603394]
[-68.29999542 183.62120056]
[-78.80342102 183.59547424]
[-87.35908508 177.89062500]
[-101.74768066 182.12953186]
[-116.13626862 186.36845398]
[-120.81330109 196.26266479]
[-129.99096680 201.80958557]
[-140.48518372 201.36892700]
[-148.80879211 195.33053589]
[-163.35360718 198.99769592]
[-177.89843750 202.66484070]
[-189.28164673 214.46971130]
[-205.12911987 210.25193787]
[-209.13833618 194.35041809]
[-197.18496704 183.12327576]
[-181.56559753 188.12002563]
[-167.02076721 184.45286560]
[-152.47595215 180.78570557]
[-139.68745422 166.32386780]
[-120.37518311 171.97985840]
[-105.98659515 167.74095154]
[-91.59799957 163.50202942]
[-79.39083099 148.54626465]
[-59.87018967 153.43486023]
[-45.66029358 148.63081360]
[-31.45039749 143.82676697]
[-17.24050140 139.02272034]
[-3.03060675 134.21867371]
[11.17928886 129.41462708]
[25.38918304 124.61058044]
[34.96804047 113.20466614]
[50.51932907 116.11463928]
[64.72922516 111.31059265]
[78.93912506 106.50654602]
[82.74979401 91.99865723]
[72.73487854 80.83167267]
[62.71996307 69.66468811]
[52.70504761 58.49771118]
[36.82823181 56.19418335]
[28.85487556 42.27279282]
[34.90145874 27.41283417]
[50.32955551 23.01359558]
[63.30405807 32.44979858]
[63.87202835 48.48279572]
[73.88694763 59.64977646]
[83.90185547 70.81675720]
[93.91677094 81.98374176]
[101.40360260 81.53943634]
[95.93154144 67.57317352]
[107.52341461 58.05326462]
[120.15936279 66.13613129]
[116.37725830 80.65082550]
[123.86408234 80.20652008]
[132.48794556 67.93342590]
[141.11181641 55.66032791]
[149.73568726 43.38722992]
[158.35954285 31.11413193]
[155.86228943 20.45890427]
[159.59342957 10.40522385]
[168.08161926 4.21868420]
[178.35479736 3.76450825]
[187.45680237 -8.15830803]
[189.68072510 -23.82243156]
[203.55366516 -29.24376488]
[212.65567017 -41.16658020]
[221.75765991 -53.08939743]
[224.49917603 -61.85982132]
[231.15916443 -65.15549469]
[240.49494934 -76.89615631]
[249.83073425 -88.63681793]
[259.16653442 -100.37747955]
[268.50231934 -112.11813354]
[277.83810425 -123.85879517]
[287.17388916 -135.59945679]
[289.05868530 -151.88993835]
[304.21447754 -158.15367126]
[317.05026245 -147.94706726]
[314.36169434 -131.76982117]
[298.91455078 -126.26367188]
[289.57876587 -114.52301025]
[280.24298096 -102.78234863]
[270.90719604 -91.04169464]
[261.57141113 -79.30103302]
[252.23561096 -67.56037140]
[242.89982605 -55.81971359]
[233.68048096 -43.98739624]
[224.57847595 -32.06457901]
[215.47648621 -20.14176369]
[213.90359497 -5.33043957]
[199.37962341 0.94369370]
[190.27761841 12.86651039]
[189.26876831 32.14530945]
[170.63264465 39.73799896]
[162.00878906 52.01109695]
[153.38491821 64.28419495]
[144.76104736 76.55728912]
[136.13717651 88.83039093]
[136.43353271 103.82746124]
[145.53553772 115.75027466]
[160.00233459 111.28517151]
[175.09558105 112.03762054]
[188.99455261 117.89752197]
[200.02926636 128.13984680]
[206.88102722 141.51426697]
[208.74002075 156.39776611]
[205.40106201 170.99160767]
[197.28594971 183.53872681]
[206.38795471 195.46154785]
[215.48995972 207.38436890]
[224.59196472 219.30717468]
[233.69395447 231.22999573]
[250.39649963 227.44389343]
[267.02621460 231.30087280]
[280.27111816 241.98344421]
[287.51480103 257.31970215]
[287.35333252 274.22470093]
[279.86697388 289.32101440]
[289.43289185 300.87490845]
[298.99880981 312.42883301]
[314.55172729 317.62872314]
[317.55938721 333.74969482]
[304.92776489 344.20791626]
[289.65118408 338.24481201]
[287.44488525 321.99478149]
[277.87896729 310.44085693]
[268.31304932 298.88693237]
[255.94491577 303.03948975]
[242.87005615 302.72470093]
[230.65641785 297.95852661]
[220.77610779 289.29193115]
[214.42796326 277.74746704]
[212.39216614 264.69857788]
[214.93432617 251.70617676]
[221.77114868 240.33200073]
[212.66914368 228.40917969]
[203.56713867 216.48635864]
[194.46513367 204.56355286]
[185.36312866 192.64073181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 119]
[8 118]
[9 54]
[10 53]
[11 52]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[23 42]
[24 41]
[25 40]
[29 38]
[30 37]
[31 36]
[55 67]
[56 66]
[57 65]
[58 64]
[73 117]
[74 116]
[75 115]
[76 114]
[77 113]
[81 111]
[82 110]
[84 108]
[85 107]
[86 106]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
[127 158]
[128 157]
[129 156]
[130 155]
[131 154]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
