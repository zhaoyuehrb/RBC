%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUCAGCAGGCAACAUGGCCGAGAGGCCGGGGCCUCCGGGCGGCGCCGUGUCCGCGACCGCGUACCCUGACACCCCCGCGGAAUUCCCUCCGCACCUCCAGGCGGGUGCGAUGC\
) } def
/len { sequence length } bind def

/coor [
[213.71559143 170.17481995]
[200.52853394 163.02629089]
[187.34147644 155.87776184]
[174.15441895 148.72921753]
[160.96736145 141.58068848]
[147.78030396 134.43215942]
[134.59324646 127.28363037]
[121.40618134 120.13510132]
[97.24221039 129.25819397]
[75.20851135 115.78064728]
[60.91797256 120.33922577]
[46.62744141 124.89780426]
[32.33690643 129.45639038]
[28.98496437 141.02452087]
[20.50718307 149.40852356]
[9.13507748 152.56695557]
[-2.21740174 149.81251526]
[-10.70042038 141.95768738]
[-25.21504211 145.74261475]
[-39.72966385 149.52755737]
[-54.24428558 153.31250000]
[-68.75891113 157.09744263]
[-80.04605103 168.99417114]
[-95.92719269 164.90499878]
[-100.06517792 149.03651428]
[-88.20320129 137.71284485]
[-72.54384613 142.58280945]
[-58.02922440 138.79788208]
[-43.51460266 135.01293945]
[-28.99998093 131.22799683]
[-14.48535824 127.44306183]
[-6.31548405 111.16829681]
[11.42037487 105.81528473]
[27.77832794 115.16584778]
[42.06886292 110.60726929]
[56.35939789 106.04869080]
[70.64993286 101.49011993]
[70.97598267 95.38986969]
[72.55619049 89.48883820]
[75.32228851 84.04200745]
[79.15473938 79.28473663]
[83.88793945 75.42259979]
[79.13792419 61.19455338]
[74.38790131 46.96650696]
[69.63787842 32.73846054]
[64.69727325 18.57546616]
[59.56697083 4.48007774]
[54.43666840 -9.61531162]
[39.68125153 -14.79330254]
[31.75080109 -28.27076530]
[34.38983917 -43.68405533]
[46.35229492 -53.75548553]
[61.98985672 -53.72963715]
[73.91894531 -43.61871719]
[76.50701904 -28.19678688]
[68.53205872 -14.74561405]
[73.66236115 -0.65022457]
[78.79266357 13.44516468]
[84.10652924 18.72310638]
[83.86592865 27.98844147]
[88.61594391 42.21648788]
[93.36596680 56.44453430]
[98.11598969 70.67258453]
[107.21712494 71.51210785]
[115.62019348 75.10710144]
[122.51241302 81.10984039]
[127.22714233 88.93971252]
[129.30833435 97.83938599]
[128.55471802 106.94804382]
[141.74177551 114.09657288]
[154.92883301 121.24510193]
[168.11589050 128.39363098]
[181.30294800 135.54216003]
[194.49000549 142.69070435]
[207.67706299 149.83923340]
[220.86412048 156.98776245]
[232.53218079 147.04145813]
[246.94479370 141.93205261]
[262.19107056 142.30621338]
[276.26062012 148.08560181]
[287.30847168 158.48101807]
[293.89718628 172.10008240]
[308.83099365 170.69245911]
[320.12701416 159.30038452]
[336.06048584 161.17231750]
[344.40859985 174.87226868]
[338.76739502 189.89080811]
[323.46432495 194.70700073]
[310.23858643 185.62626648]
[295.30477905 187.03388977]
[294.04559326 194.17431641]
[291.56573486 200.98767090]
[287.94055176 207.26695251]
[298.47570801 217.94451904]
[309.01086426 228.62208557]
[319.54605103 239.29965210]
[330.08120728 249.97720337]
[340.61636353 260.65475464]
[351.15151978 271.33233643]
[366.95516968 271.18777466]
[378.17352295 282.31988525]
[378.15100098 298.12414551]
[366.90090942 309.22421265]
[351.09774780 309.03457642]
[340.11724854 297.66775513]
[340.47396851 281.86749268]
[329.93881226 271.18994141]
[319.40362549 260.51235962]
[308.86846924 249.83480835]
[298.33331299 239.15724182]
[287.79815674 228.47969055]
[277.26300049 217.80212402]
[261.45248413 224.42295837]
[244.26843262 224.11579895]
[228.62110901 216.89562988]
[217.17550659 203.95133972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[10 37]
[11 36]
[12 35]
[13 34]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[42 63]
[43 62]
[44 61]
[45 60]
[46 58]
[47 57]
[48 56]
[82 90]
[83 89]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
