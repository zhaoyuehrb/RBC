%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGCCGGGCUGGCGGCGGCGGUGGCGGCCGGCUGGGCGCGCACUCUCGGGAUGGAGGGCGAGCGCCGGGCAUCGCAGGCGCCCUCCUCGGGCCUCCCGGCCGGGGGCGCCAACGGGGAGAGCCCGGGGGGCGGCGCCCCCUUUCCGGGCA\
) } def
/len { sequence length } bind def

/coor [
[79.04814911 304.95101929]
[63.27383804 303.97811890]
[52.87042236 292.08087158]
[54.01007080 276.31771851]
[66.01664734 266.04067993]
[66.94006348 251.06912231]
[67.86347198 236.09756470]
[60.92435074 222.91812134]
[69.49652863 209.62043762]
[70.41993713 194.64888000]
[58.76040649 182.56756592]
[59.42948532 165.45370483]
[72.50086212 153.87242126]
[73.11668396 138.88505554]
[59.97505188 131.65336609]
[47.64376831 140.19381714]
[35.31248474 148.73428345]
[22.98120117 157.27473450]
[16.04161835 171.49278259]
[1.17337227 172.37850952]
[-11.15791130 180.91896057]
[-17.67166901 195.96897888]
[-33.99111176 197.58386230]
[-43.32819366 184.10235596]
[-36.07772827 169.39308167]
[-19.69836998 168.58767700]
[-7.36708641 160.04722595]
[-1.30951941 146.44004822]
[14.44074345 144.94345093]
[26.77202606 136.40299988]
[39.10330963 127.86253357]
[51.43459320 119.32207489]
[51.28059769 104.32286835]
[38.77656174 96.03739166]
[26.27252579 87.75191498]
[10.49485588 86.57901764]
[4.15918541 73.09908295]
[-8.34485054 64.81361389]
[-20.84888649 56.52813721]
[-33.35292053 48.24266434]
[-45.85695648 39.95718765]
[-60.33436966 45.22128296]
[-74.96444702 41.00057602]
[-84.19474030 29.11505318]
[-84.65097046 14.25134373]
[-97.15500641 5.96586943]
[-109.65904236 -2.31960511]
[-122.16307831 -10.60507965]
[-134.66711426 -18.89055443]
[-150.10394287 -15.50240421]
[-163.37001038 -24.09236336]
[-166.59475708 -39.56415939]
[-157.86502075 -52.73865509]
[-142.36000061 -55.79964828]
[-129.27853394 -46.93111420]
[-126.38163757 -31.39459038]
[-113.87760162 -23.10911560]
[-101.37356567 -14.82364082]
[-88.86952972 -6.53816652]
[-76.36549377 1.74730825]
[-62.49959183 -3.62621045]
[-47.95630646 0.24120843]
[-38.36684036 12.06895256]
[-37.57148361 27.45315170]
[-25.06744766 35.73862839]
[-12.56341171 44.02410126]
[-0.05937585 52.30957413]
[12.44466019 60.59505081]
[27.32795715 61.17531586]
[34.55800247 75.24787903]
[47.06203461 83.53335571]
[59.56607056 91.81883240]
[66.15522766 79.21772766]
[76.31930542 70.05239105]
[88.54251099 65.19555664]
[101.15903473 64.91446686]
[112.57756805 68.87793732]
[121.48181915 76.24130249]
[126.98170471 85.79354858]
[141.56544495 82.28438568]
[156.14920044 78.77521515]
[170.73295593 75.26604462]
[185.31669617 71.75688171]
[199.90045166 68.24771118]
[214.44740295 64.58900452]
[228.95602417 60.78115082]
[243.46466064 56.97328949]
[257.97326660 53.16543198]
[272.48190308 49.35757446]
[286.99053955 45.54971313]
[301.49914551 41.74185562]
[316.00778198 37.93399811]
[330.51641846 34.12613678]
[345.02502441 30.31827927]
[359.49380493 26.36166954]
[373.92117310 22.25672340]
[388.34857178 18.15177917]
[402.77593994 14.04683399]
[417.20333862 9.94188976]
[419.91842651 -3.81416345]
[428.26654053 -14.99697113]
[440.56573486 -21.44913483]
[454.37899780 -21.95681953]
[466.99703979 -16.47771835]
[475.96972656 -6.13814163]
[490.47836304 -9.94600010]
[501.74670410 -21.86055374]
[517.63427734 -17.79647064]
[521.79730225 -1.93453050]
[509.95324707 9.40786076]
[494.28622437 4.56262493]
[479.77758789 8.37048340]
[475.91439819 24.03163147]
[464.62814331 35.68698883]
[448.91900635 40.10271835]
[433.03164673 35.98772049]
[421.30828857 24.36927414]
[406.88088989 28.47421837]
[392.45352173 32.57916260]
[378.02612305 36.68410873]
[363.59875488 40.78905487]
[357.99133301 45.67465973]
[348.83288574 44.82690430]
[334.32427979 48.63476181]
[319.81564331 52.44262314]
[305.30700684 56.25048065]
[290.79840088 60.05833817]
[276.28976440 63.86619949]
[261.78112793 67.67405701]
[247.27250671 71.48191833]
[232.76388550 75.28977203]
[218.25526428 79.09763336]
[212.54872131 83.86708069]
[203.40962219 82.83146667]
[188.82586670 86.34062958]
[174.24211121 89.84980011]
[159.65837097 93.35896301]
[145.07461548 96.86813354]
[130.49087524 100.37729645]
[121.22002411 128.92404175]
[88.10404205 139.50088501]
[87.48821259 154.48823547]
[97.71627045 163.30847168]
[100.93055725 176.22549438]
[96.17041779 188.44718933]
[85.39148712 195.57229614]
[84.46807861 210.54385376]
[91.34114838 224.79415894]
[82.83502197 237.02098083]
[81.91161346 251.99252319]
[80.98819733 266.96408081]
[91.64083862 278.63870239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 151]
[6 150]
[7 149]
[9 147]
[10 146]
[13 142]
[14 141]
[15 32]
[16 31]
[17 30]
[18 29]
[20 27]
[21 26]
[33 72]
[34 71]
[35 70]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[79 139]
[80 138]
[81 137]
[82 136]
[83 135]
[84 134]
[85 132]
[86 131]
[87 130]
[88 129]
[89 128]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
