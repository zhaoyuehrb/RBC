%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCUGGGAGCGCGAUGGUCGGCCGCCGAGGCGCGGCAAGAUGCUGGAUGGGUCCCCGCUGGCGCGCUGGCUGGCCGCGGCCUUCGGGCUGACGCUGCUGCUCGCCGCGCUGCGCCCUUCGGCCGCCUACUUCGGGCUGA\
) } def
/len { sequence length } bind def

/coor [
[233.02044678 319.47470093]
[225.23884583 306.65103149]
[217.45724487 293.82733154]
[204.23997498 286.96054077]
[203.69552612 271.14871216]
[195.91392517 258.32504272]
[188.13232422 245.50135803]
[180.21130371 232.76332092]
[172.15180969 220.11245728]
[164.09231567 207.46157837]
[155.89530945 194.89938354]
[147.56175232 182.42733765]
[139.22819519 169.95529175]
[130.89465332 157.48324585]
[122.42554474 145.10284424]
[113.82189941 132.81556702]
[105.21825409 120.52828217]
[92.51947021 119.81621552]
[82.51793671 111.95901489]
[78.81990814 99.78976440]
[82.75876617 87.69631958]
[74.42521667 75.22427368]
[66.09165955 62.75222778]
[57.75811005 50.28018570]
[49.42455673 37.80813980]
[41.09100342 25.33609772]
[32.75744629 12.86405277]
[19.28815842 11.76210976]
[9.07750607 3.20965338]
[5.73001957 -9.48043442]
[10.25713539 -21.59106636]
[2.19764113 -34.24193954]
[-5.86185312 -46.89281082]
[-13.92134666 -59.54368210]
[-21.98084068 -72.19455719]
[-30.17785263 -84.75675964]
[-38.51140594 -97.22880554]
[-46.84495926 -109.70085144]
[-55.17851257 -122.17288971]
[-63.51206589 -134.64494324]
[-74.29642487 -134.05018616]
[-84.26401520 -137.99432373]
[-91.60934448 -145.68986511]
[-95.03263092 -155.67665100]
[-93.96945190 -166.09858704]
[-88.68266296 -175.04861450]
[-96.18266296 -188.03898621]
[-103.68266296 -201.02937317]
[-111.18266296 -214.01974487]
[-118.68266296 -227.01013184]
[-125.73791504 -232.93330383]
[-126.20103455 -240.36671448]
[-133.41586304 -253.51762390]
[-146.83709717 -261.89505005]
[-146.17527771 -276.77493286]
[-153.39010620 -289.92584229]
[-160.60493469 -303.07675171]
[-175.84606934 -307.25805664]
[-183.59382629 -321.03295898]
[-179.25158691 -336.22903442]
[-165.39555359 -343.83071899]
[-150.24623108 -339.32806396]
[-142.79147339 -325.39242554]
[-147.45402527 -310.29156494]
[-140.23919678 -297.14068604]
[-133.02436829 -283.98977661]
[-120.11919403 -276.55297852]
[-120.26496887 -260.73245239]
[-113.05013275 -247.58155823]
[-105.69228363 -234.51013184]
[-98.19228363 -221.51974487]
[-90.69228363 -208.52937317]
[-83.19228363 -195.53898621]
[-75.69228363 -182.54861450]
[-56.60365677 -178.99592590]
[-46.01884079 -162.35919189]
[-51.04002380 -142.97848511]
[-42.70647049 -130.50643921]
[-34.37291718 -118.03440094]
[-26.03936195 -105.56235504]
[-17.70580864 -93.09030914]
[-11.32612896 -89.24714661]
[-9.32996941 -80.25405121]
[-1.27047539 -67.60317993]
[6.78901863 -54.95230484]
[14.84851265 -42.30143356]
[22.90800667 -29.65056229]
[39.43795395 -26.74356651]
[48.96889114 -12.52144718]
[45.22949219 4.53049898]
[53.56304550 17.00254250]
[61.89659882 29.47458839]
[70.23015594 41.94663239]
[78.56370544 54.41867447]
[86.89726257 66.89071655]
[95.23081207 79.36276245]
[111.45716858 82.18501282]
[120.75622559 95.77865601]
[117.50553131 111.92463684]
[126.10917664 124.21192169]
[134.71282959 136.49920654]
[142.25747681 141.78492737]
[143.36669922 149.14968872]
[151.70024109 161.62173462]
[160.03379822 174.09378052]
[168.36735535 186.56582642]
[175.79489136 192.01487732]
[176.74319458 199.40208435]
[184.80268860 212.05296326]
[192.86218262 224.70382690]
[200.16908264 230.31361389]
[200.95600891 237.71975708]
[208.73760986 250.54344177]
[216.51919556 263.36712646]
[230.29307556 271.15115356]
[230.28092957 286.04574585]
[238.06253052 298.86941528]
[245.84413147 311.69311523]
[256.63342285 313.68841553]
[264.35501099 321.17016602]
[266.59548950 331.46026611]
[262.84362793 341.06408691]
[270.05844116 354.21499634]
[277.27328491 367.36587524]
[284.48812866 380.51678467]
[291.70294189 393.66769409]
[298.91778564 406.81860352]
[314.27456665 407.07342529]
[327.43823242 414.98626709]
[334.86785889 428.42858887]
[334.56491089 443.78448486]
[326.61083984 456.92330933]
[313.14529419 464.31076050]
[297.79040527 463.95965576]
[284.67660522 455.96447754]
[277.33139038 442.47583008]
[277.73062134 427.12213135]
[285.76687622 414.03341675]
[278.55206299 400.88253784]
[271.33721924 387.73162842]
[264.12237549 374.58071899]
[256.90756226 361.42980957]
[249.69271851 348.27893066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[5 114]
[6 113]
[7 112]
[8 110]
[9 109]
[10 108]
[11 106]
[12 105]
[13 104]
[14 103]
[15 101]
[16 100]
[17 99]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[52 69]
[53 68]
[55 66]
[56 65]
[57 64]
[122 143]
[123 142]
[124 141]
[125 140]
[126 139]
[127 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
