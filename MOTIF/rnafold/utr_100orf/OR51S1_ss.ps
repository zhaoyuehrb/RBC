%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCAACAUUACCAACUCAGAUAGCCCCCAAUAGCAGCACUUCAAUGGCCCCCACCUUCUUGCUGGUGGGCAUGCCAGGCCUAUCAGGUGCACCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[111.11967468 267.92526245]
[107.41833496 282.46142578]
[101.21566010 296.11889648]
[92.70540619 308.47106934]
[82.15344238 319.13201904]
[69.88938141 327.76873779]
[56.29634857 334.11138916]
[41.79898071 337.96188354]
[26.85015869 339.19992065]
[11.91687012 337.78683472]
[-2.53438473 333.76672363]
[-16.05216217 327.26519775]
[-28.21417999 318.48538208]
[-38.64051056 307.70150757]
[-47.00543976 295.25048828]
[-53.04766083 281.52127075]
[-56.57841873 266.94274902]
[-57.48741531 251.97030640]
[-55.74625397 237.07170105]
[-51.40932846 222.71234131]
[-44.61212158 209.34080505]
[-35.56696701 197.37480164]
[-24.55643082 187.18814087]
[-11.92446995 179.09904480]
[1.94093108 173.35812378]
[-12.26614285 168.54573059]
[-24.85395432 177.61914062]
[-40.37075806 177.52706909]
[-52.85002136 168.30494690]
[-57.49321747 153.49885559]
[-52.51493835 138.80204773]
[-39.82943726 129.86572266]
[-24.31454849 130.12611389]
[-11.93605995 139.48307800]
[-7.45375586 154.33866882]
[6.75331783 159.15104675]
[10.56136703 157.79890442]
[14.81233311 157.75872803]
[26.58124733 148.45858765]
[38.35016251 139.15844727]
[50.11907578 129.85829163]
[61.88798904 120.55815887]
[73.65690613 111.25801086]
[71.55300140 96.61329651]
[77.03636169 82.87187195]
[88.64448547 73.69878387]
[103.28131104 71.54064941]
[117.04295349 76.97307587]
[128.81187439 67.67292786]
[140.58078003 58.37278748]
[152.34970093 49.07264328]
[163.03845215 38.54884338]
[172.52050781 26.92598534]
[182.00254822 15.30312824]
[191.48458862 3.68027210]
[200.96664429 -7.94258451]
[210.44868469 -19.56544113]
[206.35693359 -34.53331375]
[211.87600708 -49.03570557]
[224.88372803 -57.49615479]
[240.37832642 -56.66144180]
[252.40184021 -46.85253525]
[256.33099365 -31.84115410]
[250.65490723 -17.39948654]
[237.55618286 -9.08064461]
[222.07154846 -10.08339500]
[212.58949280 1.53946185]
[203.10745239 13.16231823]
[193.62541199 24.78517532]
[184.14335632 36.40803146]
[174.66131592 48.03088760]
[189.65867615 47.74986649]
[201.48988342 56.97063828]
[204.88037109 71.58243561]
[198.31861877 85.07107544]
[184.72996521 91.42310333]
[170.17243958 87.80668640]
[161.13603210 75.83407593]
[161.64984131 60.84155655]
[149.88092041 70.14170074]
[138.11201477 79.44184113]
[126.34309387 88.74198914]
[128.44700623 103.38670349]
[122.96363831 117.12812805]
[111.35551453 126.30121613]
[96.71868896 128.45935059]
[82.95704651 123.02692413]
[71.18813324 132.32707214]
[59.41921997 141.62721252]
[47.65030289 150.92735291]
[35.88138962 160.22749329]
[24.11247635 169.52764893]
[39.09345627 170.28274536]
[53.70750427 173.66352844]
[67.49808502 179.56437683]
[80.03439331 187.80093384]
[90.92481232 198.11590576]
[99.82913971 210.18707275]
[106.46920013 223.63732910]
[110.63757324 238.04652405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 36]
[26 35]
[38 92]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[48 82]
[49 81]
[50 80]
[51 79]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
