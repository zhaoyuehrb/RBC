%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGCGCAGCGCGGUUGCCAAUGGUCGCUCCCUGAGAGGAUGCCGCUCGUGGUGUUUUGCGGGCUGCCGUACAGCGGCAAGAGCCGGCGUGCUGAAGAGUUGCGCGUGGCGCUGGCUGCCGAGGGCCGCGCGGUGUACG\
) } def
/len { sequence length } bind def

/coor [
[73.95344543 488.95199585]
[66.20190430 475.37084961]
[69.04451752 459.99380493]
[81.13910675 450.08142090]
[81.13910675 435.08142090]
[81.13910675 420.08142090]
[81.13910675 405.08142090]
[73.40180206 392.35415649]
[81.13910675 378.55398560]
[81.13910675 363.55398560]
[81.13910675 348.55398560]
[81.13910675 333.55398560]
[81.13910675 318.55398560]
[81.13910675 303.55398560]
[81.13910675 288.55398560]
[78.39569855 284.55300903]
[78.19337463 278.76919556]
[81.49077606 272.88479614]
[82.16374969 257.89990234]
[74.21391296 248.71411133]
[74.70324707 236.17355347]
[83.91573334 227.06939697]
[84.92477417 212.10336304]
[85.93380737 197.13734436]
[86.94284058 182.17132568]
[80.07921600 168.95240784]
[88.72731781 155.70396423]
[89.73635101 140.73794556]
[90.74538422 125.77191925]
[75.56768036 112.36533356]
[73.75239563 92.19594574]
[86.29235840 76.29471588]
[82.62725067 61.74937439]
[70.30536652 56.18905640]
[63.55722809 44.70116043]
[64.66763306 31.62004280]
[73.00418091 21.73237038]
[69.66636658 7.10845089]
[59.05223083 -4.62401104]
[63.76345825 -18.75389481]
[60.42564392 -33.37781525]
[57.08782959 -48.00173187]
[53.75001526 -62.62565231]
[50.41220093 -77.24957275]
[47.07438660 -91.87348938]
[43.57270813 -106.45903778]
[39.90760040 -121.00437927]
[36.24249649 -135.54972839]
[25.36777687 -147.04107666]
[29.76076889 -161.27310181]
[26.09566307 -175.81845093]
[15.22094440 -187.30979919]
[19.61393738 -201.54183960]
[15.94883060 -216.08717346]
[12.28372478 -230.63252258]
[8.61861801 -245.17785645]
[-2.25610042 -256.66921997]
[2.13689184 -270.90124512]
[-1.52821434 -285.44659424]
[-5.19332027 -299.99194336]
[-8.85842609 -314.53726196]
[-12.52353287 -329.08261108]
[-24.32678223 -340.46749878]
[-20.10677528 -356.31436157]
[-4.20469427 -360.32135010]
[7.02076435 -348.36639404]
[2.02181029 -332.74771118]
[5.68691635 -318.20239258]
[9.35202217 -303.65704346]
[13.01712799 -289.11169434]
[16.68223381 -274.56634521]
[27.29479980 -264.11538696]
[23.16396141 -248.84297180]
[26.82906723 -234.29762268]
[30.49417305 -219.75228882]
[34.15927887 -205.20693970]
[44.77184677 -194.75598145]
[40.64100647 -179.48355103]
[44.30611038 -164.93821716]
[54.91867828 -154.48724365]
[50.78783798 -139.21482849]
[54.45294571 -124.66948700]
[58.11804962 -110.12414551]
[62.84154892 -104.35910797]
[61.69830704 -95.21130371]
[65.03611755 -80.58738708]
[68.37393188 -65.96346283]
[71.71174622 -51.33954620]
[75.04956055 -36.71562958]
[78.38737488 -22.09170914]
[88.76277161 -11.40524769]
[84.29029083 3.77063680]
[87.62810516 18.39455605]
[102.21722412 26.68573761]
[106.41715240 43.27968597]
[97.17259216 58.08427048]
[100.83769989 72.62961578]
[108.12109375 73.84875488]
[114.81385803 76.96981812]
[120.42924500 81.76580811]
[124.55886078 87.88793182]
[126.90236664 94.89094543]
[141.84197998 96.23553467]
[156.78160095 97.58012390]
[171.72120667 98.92471313]
[188.03857422 94.32251740]
[196.97799683 108.72817993]
[185.61000061 121.30612946]
[170.37661743 113.86432648]
[155.43701172 112.51973724]
[140.49739075 111.17514801]
[125.55777740 109.83055878]
[117.78396606 120.82234955]
[105.71141052 126.78096008]
[104.70237732 141.74697876]
[103.69333649 156.71299744]
[110.48478699 171.00239563]
[101.90886688 183.18035889]
[100.89982605 198.14637756]
[99.89079285 213.11241150]
[98.88175964 228.07843018]
[107.39029694 244.36581421]
[97.14864349 258.57287598]
[96.47567749 273.55776978]
[96.13910675 288.55398560]
[96.13910675 303.55398560]
[96.13910675 318.55398560]
[96.13910675 333.55398560]
[96.13910675 348.55398560]
[96.13910675 363.55398560]
[96.13910675 378.55398560]
[103.87640381 392.35415649]
[96.13910675 405.08142090]
[96.13910675 420.08142090]
[96.13910675 435.08142090]
[96.13910675 450.08142090]
[108.23368835 459.99380493]
[111.07630920 475.37084961]
[103.32476807 488.95199585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 136]
[5 135]
[6 134]
[7 133]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[18 124]
[19 123]
[22 121]
[23 120]
[24 119]
[25 118]
[27 116]
[28 115]
[29 114]
[32 97]
[33 96]
[37 93]
[38 92]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 83]
[47 82]
[48 81]
[50 79]
[51 78]
[53 76]
[54 75]
[55 74]
[56 73]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
