%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACACACCCCAGCCGAGGCCCGGAAGGGGCCAGGCGCGCUUCCGUCUCCGCCGGGGAUGCACGGAGGGCGGAGCUGCGGCCCGAGGACGCGACGCGAGCCCAGUUCCGGCGAGGAGGCCGCGCCAGUGACAGCGAUGGCGGCGGAGUCGGCGCUCC\
) } def
/len { sequence length } bind def

/coor [
[90.84320068 105.36161804]
[76.00354004 107.54900360]
[61.16388702 109.73638916]
[46.34628296 112.06845093]
[31.55213165 114.54496765]
[24.56191444 128.27243042]
[10.98755550 135.17098999]
[-3.87031960 132.78193665]
[-14.34700203 122.22840881]
[-29.14115143 124.70492554]
[-43.91043472 127.32566071]
[-58.65344620 130.09036255]
[-73.39646149 132.85507202]
[-88.13947296 135.61976624]
[-100.27712250 145.76806641]
[-114.21243286 140.50914001]
[-128.95544434 143.27384949]
[-141.09309387 153.42214966]
[-155.02841187 148.16320801]
[-169.77142334 150.92791748]
[-184.51443481 153.69262695]
[-199.25744629 156.45732117]
[-214.00045776 159.22203064]
[-219.32386780 163.27925110]
[-225.03640747 163.90563965]
[-229.37193298 161.79519653]
[-244.21157837 163.98257446]
[-259.05123901 166.16995239]
[-273.89089966 168.35734558]
[-288.73056030 170.54472351]
[-297.06225586 180.43402100]
[-309.50265503 181.92684937]
[-319.28894043 174.76292419]
[-334.16845703 176.66033936]
[-345.08416748 188.41734314]
[-361.07052612 187.06982422]
[-369.86416626 173.65148926]
[-364.71936035 158.45574951]
[-349.58276367 153.13946533]
[-336.06588745 161.78083801]
[-321.18637085 159.88342285]
[-307.84521484 148.51567078]
[-290.91793823 155.70507812]
[-276.07827759 153.51768494]
[-261.23861694 151.33030701]
[-246.39897156 149.14291382]
[-231.55931091 146.95553589]
[-216.76516724 144.47901917]
[-202.02215576 141.71430969]
[-187.27914429 138.94961548]
[-172.53613281 136.18490601]
[-157.79310608 133.42019653]
[-146.70997620 123.46965027]
[-131.72015381 128.53083801]
[-116.97714233 125.76612854]
[-105.89400482 115.81557465]
[-90.90417480 120.87675476]
[-76.16116333 118.11205292]
[-61.41815186 115.34735107]
[-46.67514038 112.58264160]
[-40.65005112 108.23693848]
[-31.61766815 109.91077423]
[-16.82351875 107.43425751]
[-10.35496712 94.04411316]
[2.91486382 86.94654083]
[17.99585342 89.04824829]
[29.07561493 99.75081635]
[43.86976624 97.27429962]
[49.97849655 93.04698181]
[58.97650528 94.89673615]
[73.81616211 92.70935059]
[88.65581512 90.52196503]
[100.82538605 81.75261688]
[107.59609222 68.36764526]
[114.36680603 54.98266983]
[121.13751221 41.59769821]
[127.90821838 28.21272278]
[134.67892456 14.82775116]
[141.44964600 1.44277823]
[148.22035217 -11.94219398]
[149.31289673 -21.06316185]
[155.25598145 -25.52034760]
[162.28656006 -38.77066422]
[169.31715393 -52.02098083]
[168.95059204 -67.83793640]
[181.75071716 -75.45411682]
[188.78129578 -88.70442963]
[180.09100342 -101.30353546]
[178.26275635 -116.49945831]
[183.71664429 -130.80029297]
[195.19941711 -140.91979980]
[210.07241821 -144.53259277]
[224.91795349 -140.80848694]
[236.32460022 -130.60325623]
[241.67121887 -116.26197052]
[239.72918701 -101.08016968]
[230.94476318 -88.54651642]
[217.33654785 -81.54114532]
[202.03161621 -81.67384338]
[195.00103760 -68.42353058]
[195.87046814 -53.55432129]
[182.56747437 -44.99039459]
[175.53688049 -31.74007988]
[168.50630188 -18.48976326]
[161.60531616 -5.17148495]
[154.83460999 8.21348763]
[148.06390381 21.59846115]
[141.29319763 34.98343277]
[134.52249146 48.36840439]
[127.75177765 61.75337982]
[120.98106384 75.13835144]
[114.21035767 88.52332306]
[118.25730896 102.96708679]
[130.99694824 110.88551331]
[143.73658752 118.80393982]
[158.94323730 115.42821503]
[171.75025940 123.64010620]
[174.87477112 138.15812683]
[187.61442566 146.07655334]
[202.82107544 142.70083618]
[215.62808228 150.91273499]
[218.75259399 165.43075562]
[231.49224854 173.34918213]
[244.23188782 181.26760864]
[256.97152710 189.18603516]
[269.78781128 196.97979736]
[282.67953491 204.64814758]
[295.57125854 212.31649780]
[308.46298218 219.98483276]
[324.27899170 220.38999939]
[331.26193237 233.54627991]
[344.15365601 241.21463013]
[360.54953003 240.88679504]
[368.79864502 255.06016541]
[360.41500854 269.15438843]
[344.02301025 268.67053223]
[336.48532104 254.10635376]
[323.59359741 246.43800354]
[308.69967651 246.58132935]
[300.79461670 232.87655640]
[287.90292358 225.20820618]
[275.01119995 217.53985596]
[262.11947632 209.87152100]
[254.72569275 209.15113831]
[249.05310059 201.92567444]
[236.31346130 194.00724792]
[223.57382202 186.08882141]
[210.83416748 178.17039490]
[196.43289185 181.79510498]
[183.40028381 173.94616699]
[179.69598389 158.81620789]
[166.95634460 150.89776611]
[152.55505371 154.52249146]
[139.52244568 146.67355347]
[135.81816101 131.54357910]
[123.07852173 123.62515259]
[110.33888245 115.70672607]
[104.37148285 116.59951019]
[98.95826721 115.49188232]
[94.69687653 112.83590698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 68]
[5 67]
[9 63]
[10 62]
[11 60]
[12 59]
[13 58]
[14 57]
[16 55]
[17 54]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[33 41]
[34 40]
[73 112]
[74 111]
[75 110]
[76 109]
[77 108]
[78 107]
[79 106]
[80 105]
[82 104]
[83 103]
[84 102]
[86 100]
[87 99]
[113 157]
[114 156]
[115 155]
[118 152]
[119 151]
[122 148]
[123 147]
[124 146]
[125 145]
[126 143]
[127 142]
[128 141]
[129 140]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
