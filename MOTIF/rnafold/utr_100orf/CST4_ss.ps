%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUCACCCUCCUCUCCUGCAGCUCCAGCUUUGUGCUCUGCCUCUGAGGAGACCAUGGCCCGGCCUCUGUGUACCCUGCUACUCCUGAUGGCUACCCUGGCUGGGGCUCUGGCCUCGAGCUCCAAGGAGGAGAAUAGGAUAAUCCCAGGUGGCA\
) } def
/len { sequence length } bind def

/coor [
[-38.51691818 153.82778931]
[-52.80120087 158.40591431]
[-67.08548737 162.98403931]
[-81.36976624 167.56216431]
[-82.79437256 181.65301514]
[-89.47103119 194.09394836]
[-100.35871124 203.01522827]
[-113.78642273 207.09053040]
[-127.70961761 205.73391724]
[-140.02148438 199.18399048]
[-148.87176514 188.46260071]
[-163.24479675 192.75399780]
[-177.61781311 197.04539490]
[-191.99084473 201.33679199]
[-206.36387634 205.62818909]
[-220.73689270 209.91958618]
[-224.37509155 224.77592468]
[-234.89154053 235.74409485]
[-249.38966370 239.94778442]
[-263.94790649 236.35418701]
[-274.68041992 226.02565002]
[-289.05343628 230.31704712]
[-303.42645264 234.60845947]
[-317.79949951 238.89985657]
[-320.74392700 242.26312256]
[-324.26196289 244.27703857]
[-327.84732056 244.92871094]
[-331.04339600 244.37486267]
[-333.49563599 242.90985107]
[-348.16577148 246.03831482]
[-362.83590698 249.16677856]
[-372.73590088 261.79095459]
[-388.77893066 261.77777100]
[-398.65820312 249.13737488]
[-394.79513550 233.56636047]
[-380.15316772 227.00950623]
[-365.96435547 234.49664307]
[-351.29421997 231.36817932]
[-336.62411499 228.23973083]
[-322.09088135 224.52682495]
[-307.71786499 220.23542786]
[-293.34484863 215.94403076]
[-278.97180176 211.65263367]
[-275.65902710 197.13053894]
[-265.45419312 186.14337158]
[-251.02465820 181.71003723]
[-236.21620178 185.11688232]
[-225.02828979 195.54655457]
[-210.65527344 191.25515747]
[-196.28224182 186.96376038]
[-181.90921021 182.67236328]
[-167.53619385 178.38096619]
[-153.16316223 174.08956909]
[-150.95236206 158.28955078]
[-142.05131531 144.97955322]
[-128.19352722 136.84265137]
[-112.11762238 135.54553223]
[-97.02621460 141.39730835]
[-85.94789124 153.27789307]
[-71.66361237 148.69976807]
[-57.37932587 144.12164307]
[-43.09504318 139.54350281]
[-36.52955246 126.22322845]
[-22.10847664 121.37686920]
[-8.18145275 128.35366821]
[6.10283089 123.77555084]
[20.38711548 119.19742584]
[34.62487793 114.47661591]
[48.81470108 109.61359406]
[63.00452423 104.75057220]
[77.19434357 99.88755035]
[84.36459351 83.39744568]
[101.25487518 77.22861481]
[117.36503601 85.21601868]
[131.34893799 79.78916168]
[141.41499329 67.58322144]
[156.07939148 70.19178772]
[170.06327820 64.76493835]
[184.04718018 59.33807755]
[198.03106689 53.91122437]
[211.90357971 48.20565414]
[225.65914917 42.22365189]
[235.22879028 29.62474442]
[249.98580933 31.64450645]
[263.74139404 25.66250610]
[277.49694824 19.68050385]
[291.25253296 13.69850445]
[305.00808716 7.71650362]
[308.46966553 -7.29428005]
[319.97189331 -17.27187729]
[334.96636963 -18.54826355]
[347.68499756 -10.84276867]
[361.44058228 -16.82476807]
[375.19613647 -22.80677032]
[388.95172119 -28.78877068]
[390.03640747 -41.30640411]
[396.32345581 -52.10115814]
[406.55673218 -59.13897705]
[418.74340820 -61.12434769]
[430.54217529 -57.73843002]
[439.71276855 -49.68837738]
[453.69665527 -55.11523056]
[467.68054199 -60.54208755]
[481.66442871 -65.96894073]
[495.64834595 -71.39579773]
[509.63223267 -76.82265472]
[519.47839355 -89.93697357]
[535.72406006 -87.69876099]
[541.65710449 -72.41049957]
[531.17413330 -59.79944229]
[515.05908203 -62.83876419]
[501.07519531 -57.41190720]
[487.09130859 -51.98505020]
[473.10739136 -46.55819702]
[459.12350464 -41.13134003]
[445.13961792 -35.70448303]
[441.46615601 -18.47610092]
[428.09664917 -6.76683760]
[410.22225952 -5.37216806]
[394.93371582 -15.03320122]
[381.17813110 -9.05120087]
[367.42257690 -3.06920028]
[353.66699219 2.91280031]
[350.62997437 17.47008324]
[339.47140503 27.56711006]
[324.32992554 29.17627525]
[310.99008179 21.47207260]
[297.23452759 27.45407295]
[283.47894287 33.43607330]
[269.72338867 39.41807556]
[255.96781921 45.40007401]
[247.38206482 57.57110977]
[231.64114380 55.97922134]
[217.88557434 61.96121979]
[215.31776428 66.04840088]
[210.12936401 68.53534698]
[203.45791626 67.89511871]
[189.47402954 73.32196808]
[175.49014282 78.74882507]
[161.50624084 84.17568207]
[152.44041443 95.99346161]
[136.77578735 93.77305603]
[122.79189301 99.19991302]
[120.36195374 110.27139282]
[112.90201569 118.80554199]
[102.25491333 122.69418335]
[91.05078125 120.97669983]
[82.05736542 114.07736969]
[67.86754608 118.94039154]
[53.67772293 123.80341339]
[39.48789978 128.66642761]
[32.33604431 134.44042969]
[24.96524048 133.48170471]
[10.68095589 138.05982971]
[-3.60332751 142.63795471]
[-10.88013268 156.41061401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[21 43]
[22 42]
[23 41]
[24 40]
[29 39]
[30 38]
[31 37]
[65 155]
[66 154]
[67 153]
[68 151]
[69 150]
[70 149]
[71 148]
[74 143]
[75 142]
[77 140]
[78 139]
[79 138]
[80 137]
[81 134]
[82 133]
[84 131]
[85 130]
[86 129]
[87 128]
[88 127]
[92 123]
[93 122]
[94 121]
[95 120]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
