%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGGCCGCUGGGCACCCAGAGCCCCUUGACAGCAGGGGCUCCUUCUCCCUCCCCACGAUGGGUGCCAACGUCUCUCAGGACAAUGGCACUGGCCACA\
) } def
/len { sequence length } bind def

/coor [
[121.53465271 242.88293457]
[107.03495026 237.61393738]
[97.70384216 225.32843018]
[96.51884460 209.94664001]
[103.85809326 196.37686157]
[117.37966156 188.94914246]
[118.31220245 173.97816467]
[119.24475098 159.00718689]
[120.17729187 144.03619385]
[121.10984039 129.06521606]
[94.64952087 132.62626648]
[75.37644196 117.48803711]
[73.06723785 95.28938293]
[59.56719971 88.75111389]
[46.06716156 82.21284485]
[35.26161957 91.46643829]
[21.77570915 95.85753632]
[7.68013906 94.74701691]
[-4.87418747 88.33782196]
[-13.98439693 77.63888550]
[-18.28404427 64.30642700]
[-17.14799690 50.38763809]
[-30.43816757 43.43268585]
[-43.72833633 36.47773361]
[-57.01850891 29.52277946]
[-70.30867767 22.56782722]
[-83.59884644 15.61287403]
[-96.88902283 8.65792084]
[-110.17919159 1.70296788]
[-124.56948090 7.82290030]
[-139.51173401 3.21171880]
[-147.95068359 -9.95331860]
[-145.90170288 -25.45608330]
[-134.33227539 -35.97664261]
[-118.70510864 -36.54751205]
[-106.39889526 -26.89914513]
[-103.22423553 -11.58720207]
[-89.93406677 -4.63224936]
[-76.64389801 2.32270336]
[-63.35372543 9.27765656]
[-50.06355667 16.23260880]
[-36.77338409 23.18756294]
[-23.48321342 30.14251518]
[-10.19304371 37.09746933]
[2.36085677 27.34357834]
[17.95945168 23.98735237]
[33.52645111 27.74198723]
[45.96951294 37.91321945]
[52.79452133 52.52707291]
[52.60542679 68.71280670]
[66.10546875 75.25107574]
[79.60550690 81.78933716]
[89.72468567 72.36147308]
[104.10139465 68.63506317]
[119.51535797 72.43108368]
[132.04606628 83.76850128]
[140.40385437 71.31268311]
[148.76162720 58.85686493]
[152.56616211 42.33530426]
[169.49525452 41.41753006]
[175.06359863 57.43095779]
[161.21745300 67.21464539]
[152.85966492 79.67047119]
[144.50189209 92.12628937]
[150.40338135 105.91658020]
[165.18441772 108.47023773]
[179.96545410 111.02388763]
[194.74647522 113.57754517]
[209.52751160 116.13119507]
[224.30853271 118.68485260]
[237.13386536 109.84468079]
[252.08755493 112.64500427]
[260.43627930 124.92647552]
[275.21731567 127.48013306]
[289.99832153 130.03378296]
[304.77935791 132.58743286]
[319.97485352 126.42064667]
[332.74517822 136.70903015]
[329.95330811 152.86878967]
[314.47131348 158.27613831]
[302.22570801 147.36846924]
[287.44467163 144.81481934]
[272.66366577 142.26116943]
[257.88262939 139.70750427]
[245.89720154 148.47593689]
[230.87075806 146.09674072]
[221.75488281 133.46588135]
[206.97386169 130.91223145]
[192.19282532 128.35856628]
[177.41178894 125.80491638]
[162.63076782 123.25126648]
[147.84973145 120.69761658]
[136.08082581 129.99775696]
[135.14826965 144.96873474]
[134.21572876 159.93972778]
[133.28318787 174.91070557]
[132.35064697 189.88169861]
[144.84591675 198.92999268]
[150.44442749 213.30566406]
[147.35974121 228.42149353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[13 52]
[14 51]
[15 50]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[56 64]
[57 63]
[58 62]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
