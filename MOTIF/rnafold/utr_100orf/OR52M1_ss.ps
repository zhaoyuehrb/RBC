%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCACUUUUCAUAAUGUCUGCUCAGUACCCAGCUCCUUCUGGCUCACUGGCAUCCCAGGGCUGGAGUCCCUACACGUCUGGCUCUCCAUCCCCUUUG\
) } def
/len { sequence length } bind def

/coor [
[127.20996094 161.21734619]
[119.13275146 164.20190430]
[110.73942566 166.12571716]
[102.16867065 166.95701599]
[93.56208038 166.68206787]
[85.06185913 165.30541992]
[76.80844116 162.84980774]
[68.93819427 159.35578918]
[61.58113861 154.88111877]
[54.85883331 149.49971008]
[48.88233948 143.30047607]
[43.75040436 136.38583374]
[39.54781342 128.87004089]
[36.34400177 120.87725830]
[34.19190216 112.53955078]
[33.12707138 103.99466705]
[33.16709900 95.38378143]
[34.31132889 86.84915924]
[36.54085541 78.53182220]
[39.81883621 70.56916809]
[44.09112167 63.09277344]
[49.28712463 56.22614670]
[39.10083008 45.21527100]
[28.91453743 34.20439148]
[20.63663101 29.93017960]
[18.58924866 22.68906593]
[8.75032043 11.36672211]
[-1.08860898 0.04437774]
[-10.92753792 -11.27796650]
[-28.31491661 -12.12772846]
[-39.55456543 -24.97875786]
[-38.13757706 -41.65603256]
[-48.32387161 -52.66691208]
[-58.51016235 -63.67778778]
[-68.69645691 -74.68866730]
[-84.49655914 -75.05248260]
[-95.35108948 -86.53963470]
[-94.82024384 -102.33500671]
[-83.21897125 -113.06748199]
[-67.43009949 -112.36966705]
[-56.82087708 -100.65557861]
[-57.68557739 -84.87496185]
[-47.49928665 -73.86408234]
[-37.31299210 -62.85320282]
[-27.12669945 -51.84232712]
[-14.20329762 -53.13369370]
[-2.75257468 -46.60039902]
[2.87622476 -34.46296310]
[0.39480612 -21.11689568]
[10.23373508 -9.79455090]
[20.07266426 1.52779281]
[29.91159248 12.85013676]
[39.92541504 24.01809883]
[50.11170959 35.02897644]
[60.29800034 46.03985596]
[82.63671875 35.29712296]
[107.35256958 33.41257095]
[131.06181335 40.64420700]
[150.51850891 56.00198364]
[163.05895996 77.38333130]
[166.96627808 101.86102295]
[181.81958008 103.95375061]
[196.67288208 106.04648590]
[211.41755676 100.31018829]
[222.94088745 109.74746704]
[237.79417419 111.84020233]
[252.64747620 113.93292999]
[267.50076294 116.02565765]
[282.35406494 118.11839294]
[294.89828491 108.88362885]
[309.93182373 111.21754456]
[318.65844727 123.23342896]
[333.51174927 125.32616425]
[343.50338745 113.57155609]
[358.27053833 109.10671234]
[373.10104370 113.35634613]
[383.26257324 124.96440125]
[385.51257324 140.22680664]
[379.13311768 154.27337646]
[366.15985107 162.62190247]
[350.73251343 162.60839844]
[337.77386475 154.23718262]
[331.41900635 140.17945862]
[316.56570435 138.08673096]
[304.85879517 147.22366333]
[289.76562500 145.31292725]
[280.26135254 132.97169495]
[265.40805054 130.87895203]
[250.55474854 128.78622437]
[235.70144653 126.69349670]
[220.84814453 124.60076904]
[207.16587830 130.48674011]
[194.58013916 120.89978027]
[179.72685242 118.80705261]
[164.87355042 116.71432495]
[162.19366455 124.89766693]
[158.48623657 132.66966248]
[153.81250000 139.90190125]
[148.24967957 146.47486877]
[141.88969421 152.27999878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 55]
[23 54]
[24 53]
[26 52]
[27 51]
[28 50]
[29 49]
[32 45]
[33 44]
[34 43]
[35 42]
[61 95]
[62 94]
[63 93]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[72 84]
[73 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
