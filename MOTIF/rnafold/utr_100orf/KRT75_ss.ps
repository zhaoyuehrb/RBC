%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCGGCCUUCCUCACCCACCAUGUCUCGGCAGUCCUCCAUCACCUUCCAGUCUGGCAGCCGCAGGGGCUUCAGCACCACCUCGGCCAUCACCCCGGCAGCUGGCCGCUCCCGCUUCAGCU\
) } def
/len { sequence length } bind def

/coor [
[133.55233765 183.88018799]
[131.54354858 179.48188782]
[131.48852539 174.02693176]
[123.82323456 161.13339233]
[116.15795898 148.23983765]
[108.49267578 135.34629822]
[100.82740021 122.45275116]
[104.26315308 137.05397034]
[102.79953003 151.98239136]
[96.59335327 165.63829041]
[86.30970001 176.55828857]
[73.05055237 183.57220459]
[58.23676300 185.92842102]
[43.45578766 183.37443542]
[30.29155731 176.18395996]
[20.15474892 165.12751770]
[14.13162518 151.38989258]
[12.86762810 136.44325256]
[16.49820518 121.88925171]
[24.63430405 109.28751373]
[36.40406036 99.98843384]
[50.54622269 94.98851013]
[65.54531097 94.82352448]
[79.79654694 99.51248932]
[67.00194550 91.68318176]
[54.20734024 83.85387421]
[41.41273499 76.02455902]
[28.63562012 78.27704620]
[18.11254311 71.39855957]
[15.23957825 59.57318497]
[2.64909720 51.41967010]
[-9.94138432 43.26615906]
[-21.52251244 52.98052216]
[-35.45312881 58.84817505]
[-50.49453354 60.34736252]
[-65.30924988 57.34478760]
[-78.57997131 50.10742950]
[-89.12667084 39.27882767]
[-96.01154327 25.82186317]
[-98.62239075 10.93311214]
[-96.72705841 -4.06352472]
[-90.49407196 -17.83455658]
[-80.47767639 -29.15547371]
[-67.56851196 -37.01962662]
[-52.91445923 -40.72774124]
[-37.81854248 -39.95009613]
[-23.62308311 -34.75583267]
[-11.59033012 -25.60682869]
[-2.79023004 -13.31660366]
[1.99472022 1.02200353]
[2.33904552 16.13401413]
[-1.78787100 30.67567635]
[10.80261040 38.82918930]
[23.39309120 46.98270416]
[40.89196014 46.87852097]
[49.24204636 63.22995758]
[62.03665161 71.05926514]
[74.83125305 78.88858032]
[87.62586212 86.71788788]
[102.31381226 83.67420197]
[110.94359589 71.40526581]
[119.57337189 59.13632202]
[128.20315552 46.86738205]
[130.62368774 37.93581390]
[137.21330261 34.39913177]
[146.15359497 22.35458374]
[155.09390259 10.31003857]
[163.87965393 -1.84769607]
[172.50942993 -14.11663628]
[167.36157227 -28.75491333]
[171.83328247 -43.61369705]
[184.20509338 -52.97948074]
[199.71978760 -53.25093079]
[212.41166687 -44.32366943]
[217.40042114 -29.63040924]
[212.76779175 -14.82100868]
[200.29510498 -5.58998537]
[184.77836609 -5.48685646]
[176.14859009 6.78208399]
[174.85891724 14.14875126]
[167.13844299 19.25033569]
[158.19815063 31.29488182]
[149.25784302 43.33942795]
[140.47209167 55.49716187]
[131.84231567 67.76610565]
[123.21253204 80.03504181]
[114.58275604 92.30398560]
[126.08872223 82.68043518]
[141.07800293 82.11367035]
[153.27784729 90.84086609]
[157.58279419 105.20983887]
[152.19129944 119.20740509]
[139.35963440 126.97580719]
[124.45761108 125.26409912]
[113.72093964 114.78747559]
[121.38622284 127.68101501]
[129.05149841 140.57455444]
[136.71678162 153.46810913]
[144.38206482 166.36164856]
[152.53556824 178.95213318]
[161.16535950 191.22106934]
[169.79513550 203.49000549]
[178.42491150 215.75895691]
[187.05470276 228.02789307]
[195.68447876 240.29682922]
[208.30453491 243.30723572]
[215.22767639 253.80097961]
[213.16487122 265.79425049]
[221.47850037 278.27957153]
[236.40693665 285.06732178]
[237.72326660 301.41357422]
[224.07333374 310.50265503]
[209.49905396 302.98455811]
[208.99316406 286.59320068]
[200.67953491 274.10787964]
[184.58024597 267.24972534]
[183.41552734 248.92660522]
[174.78575134 236.65766907]
[166.15597534 224.38873291]
[157.52619934 212.11979675]
[148.89640808 199.85084534]
[140.26663208 187.58190918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[24 59]
[25 58]
[26 57]
[27 56]
[30 54]
[31 53]
[32 52]
[60 87]
[61 86]
[62 85]
[63 84]
[65 83]
[66 82]
[67 81]
[68 79]
[69 78]
[100 122]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
