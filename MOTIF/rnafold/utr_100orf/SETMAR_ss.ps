%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGUCCCAGCAUCCACCGCGCGGCCCAGGACUGUCAGGGUAGUGGGCGUUGCGUGAGGCGGGUAAAUGUUCGCGGAAGCGGCAAAGACGACACGGCCUUGUGGGAUGGCGGAGUUUAAGGAGAAGCCUGAGGCCCCGACUGAGCAGCUGGAUGUCGCGUGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[107.48838043 257.85644531]
[105.42312622 272.82012939]
[99.22451019 286.59524536]
[89.39504242 298.06512451]
[76.73154449 306.29995728]
[62.26058578 310.63217163]
[47.15527344 310.71060181]
[32.64011765 306.52883911]
[19.89180183 298.42593384]
[9.94377518 287.05871582]
[3.60247827 273.34869385]
[1.38197136 258.40728760]
[3.46226144 243.44570923]
[9.67470932 229.67681885]
[19.51569748 218.21681213]
[32.18746567 209.99470520]
[46.66276550 205.67703247]
[61.76815033 205.61378479]
[65.92068481 191.20002747]
[70.07321167 176.78627014]
[74.22574615 162.37251282]
[78.37828064 147.95875549]
[82.53081512 133.54498291]
[86.68334961 119.13122559]
[76.58400726 108.04054260]
[61.84551239 110.82921600]
[47.10701370 113.61788940]
[32.36851883 116.40656281]
[17.63002205 119.19523621]
[8.71640968 131.96963501]
[-6.27024746 134.58779907]
[-18.39375305 126.01129913]
[-33.13225174 128.79997253]
[-47.87074661 131.58865356]
[-58.05977631 143.98071289]
[-74.09823608 143.59687805]
[-83.68279266 130.73158264]
[-79.46099854 115.25399017]
[-64.67144775 109.03717041]
[-50.65942383 116.85015106]
[-35.92092514 114.06147766]
[-21.18242836 111.27280426]
[-13.03031826 98.85996246]
[1.87688816 95.82189178]
[14.84134674 104.45674133]
[29.57984352 101.66806030]
[44.31834030 98.87938690]
[59.05683899 96.09071350]
[73.79533386 93.30204010]
[79.27545166 79.33893585]
[70.36814880 67.26996613]
[61.46084595 55.20100021]
[52.55354309 43.13203430]
[43.64624023 31.06306839]
[29.82332993 33.34851456]
[16.43067932 29.46507645]
[6.07348156 20.22768211]
[0.74072731 7.48686981]
[1.42338192 -6.24174786]
[7.93075371 -18.27412987]
[-0.74931562 -30.50754356]
[-9.42938519 -42.74095535]
[-18.10945511 -54.97436905]
[-26.78952408 -67.20777893]
[-42.41053772 -69.60767365]
[-51.69178772 -82.39962006]
[-49.12687683 -97.99439240]
[-36.23751831 -107.13987732]
[-20.67073822 -104.41023254]
[-11.66203499 -91.42490387]
[-14.55611134 -75.88785553]
[-5.87604141 -63.65443802]
[2.80402803 -51.42102432]
[11.48409748 -39.18761444]
[20.16416740 -26.95419884]
[36.19103241 -28.86035728]
[51.08278275 -22.39779091]
[60.74846649 -9.23890972]
[62.48110962 7.09050322]
[55.71520615 22.15576553]
[64.62251282 34.22473145]
[73.52981567 46.29370117]
[82.43711853 58.36266708]
[91.34442139 70.43163300]
[100.22760010 72.38141632]
[107.24881744 76.67037201]
[111.89246368 82.40133667]
[113.99562073 88.60080719]
[113.74206543 94.34331512]
[111.61566925 98.86411285]
[126.57373047 97.74316406]
[141.53178406 96.62221527]
[156.48983765 95.50125885]
[171.44790649 94.38031006]
[186.38238525 92.97985840]
[201.28807068 91.30039215]
[216.19374084 89.62092590]
[231.09942627 87.94145203]
[236.69316101 84.29219818]
[242.42475891 84.07966614]
[246.59242249 86.48862457]
[261.55047607 85.36767578]
[276.50854492 84.24672699]
[281.26654053 74.61659241]
[289.54406738 67.89894104]
[299.79046631 65.26528168]
[310.12194824 67.13005829]
[318.66815186 73.08706665]
[323.91049194 81.99550629]
[338.90786743 81.71502686]
[353.90197754 81.29433441]
[368.89147949 80.73345947]
[383.88098145 80.17259216]
[397.38220215 71.92469788]
[410.38989258 79.18070221]
[425.37939453 78.61983490]
[440.36889648 78.05896759]
[455.35842896 77.49810028]
[468.85964966 69.25020599]
[481.86730957 76.50620270]
[496.85681152 75.94533539]
[511.84634399 75.38446808]
[523.76849365 64.64940643]
[539.57061768 67.41937256]
[547.13067627 81.56947327]
[540.64916992 96.24497223]
[525.09826660 100.18807983]
[512.40722656 90.37397766]
[497.41769409 90.93484497]
[482.42819214 91.49571228]
[469.99911499 99.70349121]
[455.91928101 92.48760986]
[440.92977905 93.04847717]
[425.94027710 93.60934448]
[410.95074463 94.17021179]
[398.52169800 102.37799072]
[384.44186401 95.16210175]
[369.45236206 95.72297668]
[354.46282959 96.28384399]
[347.86877441 99.69049835]
[339.18835449 96.71240234]
[324.19097900 96.99288177]
[311.80010986 111.97980499]
[292.08282471 113.10520935]
[277.62948608 99.20478058]
[262.67144775 100.32572937]
[247.71337891 101.44668579]
[232.77890015 102.84713745]
[217.87321472 104.52660370]
[202.96752930 106.20606995]
[188.06184387 107.88553619]
[184.41468811 111.02732086]
[178.74349976 111.88406372]
[172.56884766 109.33837128]
[157.61079407 110.45932007]
[142.65274048 111.58026886]
[127.69467926 112.70122528]
[112.73662567 113.82217407]
[101.09710693 123.28376007]
[96.94457245 137.69752502]
[92.79203796 152.11128235]
[88.63951111 166.52503967]
[84.48697662 180.93879700]
[80.33444214 195.35255432]
[76.18190765 209.76632690]
[88.93836212 217.85641479]
[98.89779663 229.21362305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 165]
[19 164]
[20 163]
[21 162]
[22 161]
[23 160]
[24 159]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[32 42]
[33 41]
[34 40]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[90 158]
[91 157]
[92 156]
[93 155]
[94 154]
[95 151]
[96 150]
[97 149]
[98 148]
[101 147]
[102 146]
[103 145]
[109 142]
[110 141]
[111 139]
[112 138]
[113 137]
[115 135]
[116 134]
[117 133]
[118 132]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
