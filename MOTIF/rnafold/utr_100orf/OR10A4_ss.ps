%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUGAAGUCCUGGGCAGAAGAAUGAUGUGGGAAAACUGGACAAUUGUCAGUGAAUUUGUUCUCGUGAGCUUCUCAGCCCUGUCCACUGAGCUUCAGGCUCUACUGUUUCUCCUUUUCUUGA\
) } def
/len { sequence length } bind def

/coor [
[258.28402710 523.17352295]
[269.92260742 513.50927734]
[264.35836792 499.57946777]
[258.79412842 485.64965820]
[253.22987366 471.71987915]
[247.66563416 457.79006958]
[235.75918579 448.84100342]
[237.82528687 433.15527344]
[232.26103210 419.22549438]
[226.79576111 414.12292480]
[226.73721313 404.87164307]
[221.52763367 390.80538940]
[216.31805420 376.73910522]
[211.10847473 362.67282104]
[205.89889526 348.60653687]
[200.68931580 334.54025269]
[194.94906616 320.68206787]
[188.68643188 307.05197144]
[182.42379761 293.42187500]
[168.41064453 288.50582886]
[161.86528015 274.77218628]
[167.11668396 260.10726929]
[160.85404968 246.47715759]
[145.93734741 247.12612915]
[131.87049866 242.00077820]
[120.80774689 231.85284424]
[114.45592499 218.20579529]
[113.81118774 203.12608337]
[119.00289154 188.91026306]
[129.26914978 177.73532104]
[123.00651550 164.10522461]
[116.74388123 150.47512817]
[110.48124695 136.84504700]
[104.21861267 123.21495056]
[97.95597839 109.58485413]
[80.67212677 118.50084686]
[56.89338684 107.23944855]
[45.51201630 97.46885681]
[34.13064194 87.69827271]
[22.74927139 77.92768097]
[14.09422112 74.65976715]
[11.20739460 67.76254272]
[0.07719108 57.70676804]
[-16.06247520 54.80104446]
[-21.36053085 39.28129578]
[-10.36679077 27.11290550]
[5.60932779 30.81367302]
[10.13296413 46.57656479]
[21.26316833 56.63233566]
[32.51985931 66.54631042]
[43.90122986 76.31690216]
[55.28260040 86.08748627]
[66.66397095 95.85807037]
[73.72954559 93.34258270]
[68.42572021 79.31156921]
[63.66963196 65.08554840]
[77.80088043 60.05486679]
[83.10444641 74.08563995]
[87.86069489 88.31160736]
[94.92626190 85.79611969]
[97.57256317 71.03139496]
[100.21885681 56.26666641]
[102.86515045 41.50194168]
[96.79377747 26.26808548]
[107.16204071 13.56253052]
[123.30397034 16.45566368]
[128.61412048 31.97127724]
[117.62988281 44.14823914]
[114.98358154 58.91296387]
[112.33728790 73.67768860]
[109.69098663 88.44241333]
[111.58606720 103.32221985]
[117.84870148 116.95231628]
[124.11133575 130.58241272]
[130.37397766 144.21249390]
[136.63661194 157.84259033]
[142.89924622 171.47268677]
[158.06549072 170.96212769]
[172.23358154 176.28266907]
[183.25547791 186.59439087]
[189.47288513 200.30319214]
[189.96673584 215.30722046]
[184.69288635 229.31907654]
[174.48414612 240.21452332]
[180.74678040 253.84461975]
[195.29454041 259.41241455]
[201.45158386 273.32446289]
[196.05387878 287.15924072]
[202.31651306 300.78933716]
[208.57914734 314.41943359]
[213.03466797 317.55911255]
[215.51416016 321.70590210]
[215.97055054 325.90533447]
[214.75559998 329.33065796]
[219.96517944 343.39694214]
[225.17475891 357.46322632]
[230.38433838 371.52951050]
[235.59391785 385.59579468]
[240.80348206 399.66207886]
[246.19082642 413.66122437]
[251.75508118 427.59103394]
[264.05950928 437.53646851]
[261.59542847 452.22583008]
[267.15966797 466.15560913]
[272.72390747 480.08541870]
[278.28814697 494.01519775]
[283.85238647 507.94500732]
[298.94635010 506.93099976]
[313.61437988 510.63290405]
[326.41946411 518.68798828]
[336.10714722 530.30712891]
[341.72827148 544.35198975]
[342.73214722 559.44659424]
[339.02044678 574.11212158]
[330.95678711 586.91186523]
[319.33114624 596.59173584]
[305.28253174 602.20343018]
[290.18722534 603.19720459]
[275.52416992 599.47564697]
[262.72988892 591.40344238]
[253.05778503 579.77130127]
[247.45549011 565.71893311]
[246.47184753 550.62298584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[8 101]
[9 100]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 90]
[18 89]
[19 88]
[22 85]
[23 84]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[37 53]
[38 52]
[39 51]
[40 50]
[42 49]
[43 48]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
