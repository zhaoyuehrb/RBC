%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGCCCCGGGUGAGAAACGGGGGAGACGCGAGGGGCGGAGCUUGUGGAGGAAGAUGGCUGCCGCCUGGGGGUCGUCCCUAACGGCCGCGACGCAGAGAGCGGUCACUCCCUGGCCGAGGGGCAGGCUCCUCACGGCCUCCCUGGGACCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[114.25009918 193.79563904]
[115.60874176 187.23037720]
[111.72645569 172.74150085]
[107.84416962 158.25260925]
[103.96188354 143.76371765]
[100.07959747 129.27484131]
[96.19731140 114.78594971]
[89.49533081 101.36642456]
[80.24455261 89.55867767]
[70.99376678 77.75092316]
[61.74298477 65.94316864]
[52.49220276 54.13541794]
[44.68964767 49.27387619]
[43.17689133 41.99546814]
[34.16575623 30.00382805]
[25.15462303 18.01218605]
[11.03083324 20.54462051]
[-2.73104191 16.76415634]
[-13.46208668 7.47307158]
[-19.11102104 -5.46445179]
[-18.63614082 -19.49608803]
[-31.91798019 -26.46693611]
[-45.19982147 -33.43778229]
[-58.48166275 -40.40863037]
[-71.76350403 -47.37947845]
[-87.57865143 -46.94169998]
[-95.25238800 -59.70739746]
[-108.53422546 -66.67824554]
[-121.81607056 -73.64909363]
[-133.26300049 -65.55570984]
[-147.01679993 -63.20746613]
[-160.37312317 -67.00804901]
[-170.73081970 -76.15779877]
[-176.09841919 -88.82116699]
[-175.47694397 -102.49475098]
[-188.61572266 -109.73164368]
[-201.75448608 -116.96853638]
[-214.89326477 -124.20542908]
[-228.03204346 -131.44232178]
[-241.17082214 -138.67921448]
[-254.38179016 -145.78343201]
[-267.66363525 -152.75428772]
[-280.94546509 -159.72512817]
[-294.22732544 -166.69598389]
[-306.15112305 -157.22273254]
[-320.89883423 -153.42463684]
[-335.91525269 -155.95973206]
[-348.59875488 -164.38879395]
[-356.75180054 -177.25143433]
[-358.96182251 -192.31913757]
[-354.84597778 -206.98132324]
[-345.11730957 -218.69767761]
[-331.46139526 -225.43827820]
[-316.24417114 -226.03526306]
[-302.10214233 -220.38520813]
[-291.48550415 -209.46702576]
[-286.23364258 -195.17234802]
[-287.25646973 -179.97782898]
[-273.97463989 -173.00697327]
[-260.69277954 -166.03613281]
[-247.41094971 -159.06527710]
[-239.98413086 -158.73965454]
[-233.93392944 -151.81797791]
[-220.79515076 -144.58108521]
[-207.65637207 -137.34420776]
[-194.51759338 -130.10731506]
[-181.37882996 -122.87042236]
[-168.24005127 -115.63352966]
[-154.64739990 -124.32259369]
[-138.43492126 -124.99153900]
[-124.00698090 -117.36421967]
[-115.33068085 -103.43115234]
[-114.84522247 -86.93093109]
[-101.56337738 -79.96008301]
[-88.28153992 -72.98923492]
[-73.41639709 -73.92562103]
[-64.79265594 -60.66131973]
[-51.51081467 -53.69047165]
[-38.22897339 -46.71962357]
[-24.94713211 -39.74877548]
[-11.66529274 -32.77792740]
[-3.63177252 -39.33080673]
[6.08669853 -42.94037247]
[16.45005989 -43.22032928]
[26.34923553 -40.14072418]
[36.06796646 -51.56641006]
[45.78669739 -62.99209595]
[55.50542831 -74.41777802]
[65.22415924 -85.84346771]
[74.94289398 -97.26914978]
[69.71132660 -111.70958710]
[72.41668701 -126.82833862]
[82.33123016 -138.55853271]
[96.78799438 -143.74479675]
[111.89819336 -140.99206543]
[123.59725189 -131.04081726]
[128.73817444 -116.56785583]
[125.93810272 -101.46636200]
[115.95021820 -89.79855347]
[101.46121979 -84.70301819]
[86.36857605 -87.55041504]
[76.64984131 -76.12473297]
[66.93111420 -64.69905090]
[57.21238327 -53.27336502]
[47.49365234 -41.84767914]
[37.77492142 -30.42199516]
[44.22280502 -10.75267982]
[37.14626312 9.00105190]
[46.15739822 20.99269295]
[55.16853333 32.98433685]
[64.29995728 44.88463593]
[73.55073547 56.69238663]
[82.80152130 68.50013733]
[92.05229950 80.30789185]
[101.30308533 92.11564636]
[108.71509552 81.81221008]
[121.56732178 75.89542389]
[137.77194214 76.43231964]
[151.90144348 81.46788788]
[166.03096008 86.50345612]
[180.16046143 91.53902435]
[194.28997803 96.57459259]
[208.41947937 101.61016083]
[224.44369507 98.12351990]
[235.27362061 110.43793488]
[229.76834106 125.88539886]
[213.59124756 128.57487488]
[203.38391113 115.73966980]
[189.25440979 110.70410156]
[175.12489319 105.66853333]
[160.99539185 100.63296509]
[146.86587524 95.59739685]
[132.73637390 90.56182861]
[127.22382355 95.64728546]
[116.19873810 105.81820679]
[110.68619537 110.90366364]
[114.56848145 125.39254761]
[118.45076752 139.88143921]
[122.33305359 154.37031555]
[126.21533966 168.85920715]
[130.09762573 183.34809875]
[134.27088928 197.75587463]
[138.73342896 212.07667542]
[143.19598389 226.39749146]
[147.65852356 240.71830750]
[152.12107849 255.03912354]
[164.53486633 265.75497437]
[161.19618225 281.81066895]
[145.53956604 286.68948364]
[133.67121887 275.37249756]
[137.80026245 259.50167847]
[133.33770752 245.18084717]
[128.87516785 230.86004639]
[124.41262054 216.53923035]
[119.95007324 202.21841431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 141]
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[14 110]
[15 109]
[16 108]
[21 81]
[22 80]
[23 79]
[24 78]
[25 77]
[27 75]
[28 74]
[29 73]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 61]
[42 60]
[43 59]
[44 58]
[85 106]
[86 105]
[87 104]
[88 103]
[89 102]
[90 101]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
[142 155]
[143 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
