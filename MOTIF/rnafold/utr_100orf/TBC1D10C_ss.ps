%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAGGAGGAGGAAGUGAGAGGAGGAGGUGAGGUGCUGCGGGAGGCCCCGGGCACCAUGGCCCAGGCCCUGGGGGAGGACCUGGUGCAGCCUCCCGAGCUGCAGGAUGACUCCAGCUCCUUGGGGUCCGACUCAGAGCUCAGCGGGCCUGGCCCAU\
) } def
/len { sequence length } bind def

/coor [
[190.02700806 402.76763916]
[185.33506775 388.52032471]
[180.64311218 374.27304077]
[164.87910461 369.78384399]
[154.78038025 356.66372681]
[154.46878052 339.94418335]
[164.26394653 326.18664551]
[159.28965759 312.03546143]
[154.31536865 297.88424683]
[140.81735229 291.69238281]
[135.57112122 277.41192627]
[142.15724182 263.29595947]
[137.18295288 249.14474487]
[132.20866394 234.99354553]
[118.62086487 233.35511780]
[107.01515961 225.97685242]
[99.69566345 214.25578308]
[98.14468384 200.45764160]
[102.72288513 187.27890015]
[112.58750153 177.31987000]
[107.89555359 163.07257080]
[103.20360565 148.82527161]
[98.51165771 134.57797241]
[93.81970215 120.33066559]
[75.09213257 94.05742645]
[64.80654907 83.13924408]
[54.52096176 72.22106171]
[44.23537445 61.30287933]
[33.94978714 50.38469696]
[23.66419983 39.46651459]
[8.39547157 44.95211411]
[-9.30340290 39.04688644]
[-21.02898788 21.49794769]
[-35.67163467 18.24326515]
[-50.31427765 14.98858261]
[-64.95692444 11.73390007]
[-79.59956360 8.47921848]
[-94.24221039 5.22453642]
[-103.35458374 6.41893673]
[-109.14225769 1.75683916]
[-123.71730042 -1.78832734]
[-138.29234314 -5.33349419]
[-152.86738586 -8.87866020]
[-168.44433594 -3.75121975]
[-180.49136353 -14.87782001]
[-176.61550903 -30.81236839]
[-160.80392456 -35.16276932]
[-149.32221985 -23.45370102]
[-134.74717712 -19.90853500]
[-120.17213440 -16.36336708]
[-105.59709167 -12.81820107]
[-90.98752594 -9.41810894]
[-76.34488678 -6.16342640]
[-61.70223999 -2.90874434]
[-47.05959702 0.34593785]
[-32.41695023 3.60062003]
[-17.77430534 6.85530186]
[-12.36661243 1.65849078]
[-15.96008873 -12.90471363]
[-1.55122483 -8.73513222]
[3.85646892 -13.93194294]
[1.18650055 -28.69240570]
[-1.63007832 -43.42559433]
[-4.59298944 -58.13005829]
[-7.55590010 -72.83451843]
[-10.51881123 -87.53897858]
[-13.48172188 -102.24343872]
[-23.79249001 -114.24338531]
[-18.72161865 -128.24821472]
[-21.68453026 -142.95268250]
[-24.64744186 -157.65715027]
[-37.15922546 -167.69879150]
[-36.96523285 -183.74067688]
[-24.21427536 -193.47682190]
[-8.68779755 -189.43850708]
[-2.29638386 -174.72357178]
[-9.94298077 -160.62005615]
[-6.98006964 -145.91558838]
[-4.01715851 -131.21113586]
[6.08168125 -120.26294708]
[1.22273839 -105.20635223]
[4.18564939 -90.50189209]
[7.14856005 -75.79742432]
[10.11147118 -61.09296799]
[13.07438183 -46.38850784]
[17.50269508 -40.42005920]
[15.94696331 -31.36237526]
[18.61693192 -16.60191154]
[40.00460052 4.89549255]
[34.58238220 29.18092918]
[44.86796951 40.09910965]
[55.15355682 51.01729202]
[65.43914032 61.93547440]
[75.72473145 72.85366058]
[86.01031494 83.77183533]
[87.50225830 68.84622192]
[101.55197906 63.59215164]
[112.47145081 73.87637329]
[108.06700897 88.21620178]
[121.77826691 82.13332367]
[135.48951721 76.05044556]
[149.20077515 69.96756744]
[158.67762756 57.29870605]
[173.44908142 59.21001434]
[187.16033936 53.12713623]
[194.24797058 38.73460007]
[209.94976807 35.44322586]
[222.22065735 45.77787018]
[221.64746094 61.81068039]
[208.66989136 71.24265289]
[193.24322510 66.83839417]
[179.53196716 72.92127228]
[171.03584290 85.15504456]
[155.28366089 83.67882538]
[141.57240295 89.76170349]
[127.86114502 95.84458160]
[114.14988708 101.92745972]
[108.06700897 115.63871765]
[112.75895691 129.88601685]
[117.45090485 144.13333130]
[122.14285278 158.38063049]
[126.83480072 172.62792969]
[143.03179932 175.82070923]
[155.34867859 186.67179871]
[160.49815369 202.15943909]
[157.16932678 218.04191589]
[146.35986328 230.01925659]
[151.33415222 244.17045593]
[156.30844116 258.32165527]
[170.27845764 265.21194458]
[175.12150574 279.63412476]
[168.46656799 292.90997314]
[173.44085693 307.06115723]
[178.41514587 321.21237183]
[191.90803528 324.17611694]
[202.08428955 333.35772705]
[206.34736633 346.26989746]
[203.68130493 359.49310303]
[194.89041138 369.58108521]
[199.58236694 383.82839966]
[204.27432251 398.07568359]
[218.90325928 402.90274048]
[227.78105164 415.27359009]
[227.67341614 430.32192993]
[218.83117676 442.27822876]
[223.52313232 456.52551270]
[228.21507263 470.77282715]
[232.90702820 485.02011108]
[243.60438538 498.17318726]
[233.92668152 512.09362793]
[217.87121582 506.64767456]
[218.65972900 489.71206665]
[213.96777344 475.46478271]
[209.27581787 461.21746826]
[204.58387756 446.97015381]
[190.36747742 442.60757446]
[181.33915710 430.56793213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[7 134]
[8 133]
[9 132]
[12 129]
[13 128]
[14 127]
[20 122]
[21 121]
[22 120]
[23 119]
[24 118]
[25 95]
[26 94]
[27 93]
[28 92]
[29 91]
[30 90]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[40 51]
[41 50]
[42 49]
[43 48]
[61 88]
[62 87]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[69 79]
[70 78]
[71 77]
[99 117]
[100 116]
[101 115]
[102 114]
[104 112]
[105 111]
[145 155]
[146 154]
[147 153]
[148 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
