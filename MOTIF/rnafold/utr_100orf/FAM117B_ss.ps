%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGACCAUGUCCCAGCGGGUGAGGCGCAAUGGGUCCCCCACGCCGGCCGGCUCCCUUGGGGGUGGUGCGGUGGCCACGGCCGGGGGACCCGGGAGCCGCUUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[-35.00431824 415.09756470]
[-39.86505890 419.54174805]
[-45.77283096 422.35937500]
[-52.20479202 423.32742310]
[-58.59931183 422.38546753]
[-67.34725952 434.57043457]
[-76.09520721 446.75540161]
[-84.84315491 458.94036865]
[-93.59109497 471.12533569]
[-97.91679382 487.51815796]
[-114.86644745 487.89950562]
[-119.92501831 471.71780396]
[-105.77606201 462.37741089]
[-97.02812195 450.19244385]
[-88.28017426 438.00747681]
[-79.53222656 425.82250977]
[-70.78427887 413.63754272]
[-72.08241272 389.87365723]
[-50.52827072 378.29086304]
[-44.34975433 364.62243652]
[-38.17123413 350.95401001]
[-31.99271584 337.28558350]
[-25.81419563 323.61715698]
[-19.63567734 309.94873047]
[-20.51435661 305.11773682]
[-18.26185799 299.69805908]
[-12.70139027 295.69723511]
[-5.75947571 282.40023804]
[1.18243921 269.10327148]
[-5.87237644 257.67373657]
[-6.32475138 244.14106750]
[0.05260925 232.07363892]
[11.67185402 224.70704651]
[25.52392769 224.07684326]
[32.83935165 210.98162842]
[40.15477753 197.88641357]
[47.47019958 184.79119873]
[54.78562546 171.69599915]
[62.10104752 158.60078430]
[69.41647339 145.50556946]
[76.73189545 132.41035461]
[84.04732513 119.31514740]
[91.36274719 106.21993256]
[83.85141754 100.26594543]
[82.01782227 87.92935181]
[90.12660980 74.69305420]
[94.31555176 60.28983688]
[98.50449371 45.88661575]
[102.69343567 31.48339653]
[106.67813873 17.02234077]
[110.45780945 2.50634694]
[114.23748016 -12.00964737]
[118.01715851 -26.52564240]
[114.00685120 -41.83015442]
[124.70149231 -52.19712448]
[128.48115540 -66.71311951]
[132.26083374 -81.22911072]
[136.04049683 -95.74510956]
[134.18037415 -112.59670258]
[149.85845947 -119.04911804]
[160.39884949 -105.76994324]
[150.55650330 -91.96543884]
[146.77682495 -77.44944000]
[142.99714661 -62.93344498]
[139.21748352 -48.41745377]
[143.49812317 -34.15122223]
[132.53314209 -22.74596977]
[128.75347900 -8.22997665]
[124.97380829 6.28601789]
[121.19413757 20.80201149]
[122.57438660 28.17559242]
[117.09665680 35.67234039]
[112.90771484 50.07556152]
[108.71877289 64.47878265]
[104.52982330 78.88200378]
[114.43994904 90.14208221]
[129.25857544 87.81653595]
[144.07720947 85.49098969]
[156.48947144 74.77333832]
[171.88629150 80.41865540]
[174.42877197 96.61951447]
[161.50138855 106.70986938]
[146.40275574 100.30961609]
[131.58412170 102.63516998]
[116.76549530 104.96071625]
[104.45795441 113.53535461]
[97.14253235 126.63056946]
[89.82711029 139.72578430]
[82.51168823 152.82099915]
[75.19625854 165.91619873]
[67.88083649 179.01141357]
[60.56541443 192.10662842]
[53.24998856 205.20184326]
[45.93456268 218.29705811]
[38.61914062 231.39225769]
[45.92163086 246.57112122]
[42.82220459 262.95944214]
[30.72308922 274.19821167]
[14.47942448 276.04516602]
[7.53750944 289.34216309]
[0.59559476 302.63916016]
[-5.96725035 316.12725830]
[-12.14576912 329.79568481]
[-18.32428741 343.46411133]
[-24.50280571 357.13253784]
[-30.68132591 370.80096436]
[-36.85984421 384.46939087]
[-32.76099396 389.88336182]
[-30.43138123 396.21826172]
[-30.05077362 402.91625977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[19 107]
[20 106]
[21 105]
[22 104]
[23 103]
[24 102]
[27 101]
[28 100]
[29 99]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[43 86]
[46 75]
[47 74]
[48 73]
[49 72]
[50 70]
[51 69]
[52 68]
[53 67]
[55 65]
[56 64]
[57 63]
[58 62]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
