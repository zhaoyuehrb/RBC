%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGCCAGCGUGGCUACGCCAUCACGACCGGCGGUGGCACAUGCGCAAUAGCGAGACGCUGGAGCGCGGCGUAGGUGGCUGCCGAGUCUUUUCCUGUUUAGGGUCUUAUCCUGGCAUUGAGGGCGCCGGACUGGCGCUUU\
) } def
/len { sequence length } bind def

/coor [
[141.93089294 253.07334900]
[132.24163818 244.69099426]
[126.44525909 233.21267700]
[125.44396973 220.34582520]
[129.42366028 208.01968384]
[137.82070923 198.09605408]
[131.43997192 184.52084351]
[125.05924988 170.94563293]
[118.67852783 157.37042236]
[112.29779816 143.79521179]
[92.04623413 144.78833008]
[73.37489319 136.88305664]
[62.71019363 147.43124390]
[52.04549789 157.97943115]
[41.38080215 168.52761841]
[30.71610641 179.07580566]
[23.70666504 194.51290894]
[6.93244648 192.05081177]
[4.65475512 175.25056458]
[20.16791916 168.41111755]
[30.83261490 157.86293030]
[41.49731064 147.31474304]
[52.16200638 136.76655579]
[62.82670212 126.21836853]
[55.88840866 111.10964966]
[54.84258270 94.51689911]
[59.82892609 78.65657806]
[70.18135834 65.64733887]
[62.35090256 52.85343552]
[54.52045059 40.05952835]
[46.54993820 27.35240936]
[38.44032669 14.73360538]
[30.33071327 2.11480260]
[22.22110176 -10.50400066]
[14.11148930 -23.12280273]
[6.00187683 -35.74160767]
[-2.10773563 -48.36040878]
[-16.07770348 -55.78675079]
[-16.44955444 -70.67671204]
[-24.55916786 -83.29551697]
[-32.94402313 -95.73313141]
[-41.60008240 -107.98354340]
[-58.47673798 -115.25959015]
[-59.48367310 -132.74659729]
[-68.40674591 -144.80389404]
[-77.32982635 -156.86120605]
[-86.25290680 -168.91851807]
[-95.17597961 -180.97583008]
[-110.55603027 -183.44400024]
[-119.43354034 -195.79893494]
[-116.98573303 -210.44624329]
[-125.90881348 -222.50355530]
[-134.83189392 -234.56086731]
[-143.75495911 -246.61817932]
[-152.67803955 -258.67547607]
[-166.96046448 -267.81051636]
[-162.13621521 -284.06359863]
[-145.18281555 -283.92718506]
[-140.62072754 -267.59857178]
[-131.69766235 -255.54124451]
[-122.77458191 -243.48394775]
[-113.85150146 -231.42663574]
[-104.92842102 -219.36932373]
[-90.20522308 -217.42950439]
[-80.98419189 -205.32879639]
[-83.11867523 -189.89889526]
[-74.19559479 -177.84159851]
[-65.27252197 -165.78428650]
[-56.34944153 -153.72697449]
[-47.42636490 -141.66966248]
[-35.46760178 -139.55107117]
[-27.94221306 -129.51158142]
[-29.34966469 -116.63960266]
[-20.69360924 -104.38918304]
[-16.14912224 -102.70513916]
[-12.64857674 -98.10472870]
[-11.94036388 -91.40512848]
[-3.83075190 -78.78633118]
[9.55916214 -72.26256561]
[10.51106739 -56.47002029]
[18.62067986 -43.85121918]
[26.73029137 -31.23241615]
[34.83990479 -18.61361313]
[42.94951630 -5.99480963]
[51.05912781 6.62399340]
[59.16873932 19.24279594]
[65.47989655 23.19985771]
[67.31435394 32.22907639]
[75.14480591 45.02297974]
[82.97526550 57.81688690]
[99.02032471 54.52146530]
[115.19242096 57.12288284]
[129.39463806 65.28382874]
[139.78547668 77.94614410]
[153.92417908 72.93645477]
[168.06288147 67.92676544]
[182.20159912 62.91706848]
[192.43240356 50.10057068]
[208.60455322 52.81966019]
[214.08152771 68.27717590]
[203.22908020 80.57174683]
[187.21128845 77.05577850]
[173.07258606 82.06546783]
[158.93386841 87.07515717]
[144.79516602 92.08484650]
[145.46534729 98.53063202]
[145.21276855 105.00624084]
[144.04255676 111.38023376]
[141.97846985 117.52326202]
[139.06239319 123.31064606]
[135.35351562 128.62490845]
[130.92710876 133.35821533]
[125.87300873 137.41448975]
[132.25373840 150.98970032]
[138.63446045 164.56491089]
[145.01518250 178.14012146]
[151.39591980 191.71533203]
[168.87277222 192.75068665]
[183.37065125 202.40638733]
[190.98478699 217.97465515]
[189.71862793 235.17005920]
[180.00648499 249.30921936]
[186.97734070 262.59106445]
[193.94818115 275.87289429]
[200.91903687 289.15475464]
[207.88987732 302.43658447]
[214.86073303 315.71841431]
[221.83157349 329.00027466]
[228.80242920 342.28210449]
[243.62965393 348.40850830]
[247.94584656 363.86004639]
[238.44000244 376.78363037]
[222.40419006 377.26535034]
[212.13969421 364.93572998]
[215.52058411 349.25296021]
[208.54974365 335.97109985]
[201.57888794 322.68927002]
[194.60804749 309.40744019]
[187.63719177 296.12557983]
[180.66635132 282.84375000]
[173.69549561 269.56192017]
[166.72465515 256.28005981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[28 90]
[29 89]
[30 88]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[39 78]
[40 77]
[41 74]
[42 73]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[94 105]
[95 104]
[96 103]
[97 102]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
