%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:15:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGUGUCUCAGCUCACAGGGCUUCCAGGAUCAUGGCCUAUAAAAUGCUUCAAGUAGUCCUGUGCUCAACAUUGCUUAUCGGAGCAUUGGGAGCGCCAUUUUUGUUGGAAGACCCUGCAAACCAGUUCCUAC\
) } def
/len { sequence length } bind def

/coor [
[99.86741638 487.39251709]
[91.81200409 486.69631958]
[86.94151306 500.88357544]
[82.07102203 515.07086182]
[87.79695129 530.05725098]
[79.52633667 543.80413818]
[63.60369873 545.76605225]
[52.24351120 534.43792725]
[54.16034317 518.50982666]
[67.88376617 510.20034790]
[72.75425720 496.01309204]
[77.62474823 481.82583618]
[60.47468948 466.20654297]
[52.95108032 444.20074463]
[56.96949005 421.23358154]
[71.59249878 402.99645996]
[93.24757385 394.03680420]
[93.60186005 379.04098511]
[93.95613861 364.04516602]
[94.31042480 349.04934692]
[94.66470337 334.05352783]
[94.84185791 319.05456543]
[94.84185791 304.05456543]
[94.84185791 289.05456543]
[94.84185791 274.05456543]
[94.84185791 259.05456543]
[94.84185791 244.05458069]
[94.84185791 229.05458069]
[80.68544769 221.35462952]
[72.27194214 207.50073242]
[71.96366882 191.20153809]
[79.93830872 176.87590027]
[94.11518097 168.45500183]
[93.76090240 153.45918274]
[93.40661621 138.46336365]
[93.05233765 123.46755219]
[92.69805908 108.47174072]
[92.16669464 93.48115540]
[91.45832825 78.49788666]
[79.36341858 71.77537537]
[72.24736023 60.03450012]
[71.88956451 46.41872025]
[78.27657318 34.51166153]
[89.63383484 27.39390182]
[89.27955627 12.39808559]
[88.92527008 -2.59772992]
[88.57099152 -17.59354591]
[88.21670532 -32.58935928]
[87.86242676 -47.58517838]
[87.50814056 -62.58099365]
[87.15386200 -77.57680511]
[86.26858521 -92.55065918]
[84.85343933 -107.48375702]
[83.43828583 -122.41685486]
[82.02313232 -137.34994507]
[80.60797882 -152.28305054]
[79.19282532 -167.21614075]
[77.77767944 -182.14923096]
[65.88137817 -192.20487976]
[64.65894318 -207.36930847]
[74.31876373 -218.64865112]
[72.90361786 -233.58174133]
[62.96493530 -246.62608337]
[69.54108429 -261.64892578]
[85.86708832 -263.19607544]
[95.14814758 -249.67596436]
[87.83670807 -234.99688721]
[89.25186157 -220.06379700]
[100.85849762 -210.79980469]
[102.50639343 -195.67568970]
[92.71076965 -183.56439209]
[94.12592316 -168.63128662]
[95.54107666 -153.69819641]
[96.95623016 -138.76510620]
[98.37138367 -123.83200836]
[99.78652954 -108.89891052]
[101.20168304 -93.96581268]
[103.76478577 -91.41445923]
[105.17066956 -87.45715332]
[104.75505066 -82.67502594]
[102.14967346 -77.93109131]
[102.50395966 -62.93527603]
[102.85823822 -47.93945694]
[103.21252441 -32.94364166]
[103.56680298 -17.94782829]
[103.92108917 -2.95201206]
[104.27536774 12.04380322]
[104.62965393 27.03961945]
[118.40074921 35.89389420]
[124.27169800 51.35425186]
[119.75949097 67.43637848]
[106.44158936 77.78952026]
[107.14995575 92.77278900]
[110.67471313 100.11428070]
[107.69387054 108.11745453]
[108.04815674 123.11327362]
[108.40243530 138.10908508]
[108.75671387 153.10490417]
[109.11100006 168.10072327]
[121.76119232 174.19058228]
[130.49542236 185.09783936]
[133.64274597 198.64402771]
[130.64074707 212.15519714]
[122.13513947 222.98968506]
[109.84185791 229.05458069]
[109.84185791 244.05458069]
[109.84185791 259.05456543]
[109.84185791 274.05456543]
[109.84185791 289.05456543]
[109.84185791 304.05456543]
[109.84185791 319.05456543]
[112.99525452 327.73153687]
[109.66052246 334.40780640]
[109.30623627 349.40362549]
[108.95195770 364.39944458]
[108.59767151 379.39526367]
[108.24339294 394.39108276]
[116.12143707 396.60699463]
[123.49259949 400.14892578]
[130.13580322 404.90838623]
[135.85217285 410.74047852]
[140.47100830 417.46820068]
[143.85491943 424.88781738]
[145.90379333 432.77508545]
[146.55789185 440.89205933]
[145.79951477 448.99411011]
[143.65347290 456.83752441]
[140.18632507 464.18664551]
[135.50428772 470.82104492]
[129.74995422 476.54208374]
[123.09799957 481.17895508]
[115.74987030 484.59365845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[22 111]
[23 110]
[24 109]
[25 108]
[26 107]
[27 106]
[28 105]
[33 99]
[34 98]
[35 97]
[36 96]
[37 95]
[38 93]
[39 92]
[44 88]
[45 87]
[46 86]
[47 85]
[48 84]
[49 83]
[50 82]
[51 81]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
