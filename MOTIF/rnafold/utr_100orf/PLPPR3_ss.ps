%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAGACGCGCUUUGUGCUGGGCGCCGGCCGCGCCAGCCACGGCCUGCGGCGCCCGCGGCACCAUGAUCUCCACCAAGGAGAAGAACAAGAUCCCGAAGGACAGCAUGACGCUUCUGCCCUGCUUCUACUUCGUGGAGCUGCCCAUAGUGGCUUCUUCCAUCG\
) } def
/len { sequence length } bind def

/coor [
[122.63182068 229.20689392]
[121.20597839 214.27482605]
[119.78013611 199.34274292]
[118.35430145 184.41065979]
[116.92845917 169.47857666]
[115.50261688 154.54650879]
[106.37871552 155.47082520]
[97.36655426 154.90289307]
[88.70486450 152.90332031]
[80.61576080 149.57000732]
[73.29903412 145.03443909]
[66.92724609 139.45704651]
[61.64170837 133.02188110]
[57.54947281 125.93086243]
[54.72134018 118.39749908]
[53.19097900 110.64065552]
[38.22427368 111.63951111]
[23.25756645 112.63837433]
[8.29086018 113.63722992]
[-6.67584562 114.63608551]
[-21.62082100 115.91971588]
[-36.53865051 117.48764038]
[-51.45647812 119.05556488]
[-66.37430573 120.62349701]
[-81.29213715 122.19142151]
[-96.20996094 123.75934601]
[-111.12779236 125.32727814]
[-125.99476624 127.32055664]
[-140.79875183 129.73756409]
[-155.60273743 132.15457153]
[-170.40672302 134.57159424]
[-185.21070862 136.98860168]
[-191.25666809 151.18191528]
[-204.02915955 159.83448792]
[-219.45252991 160.18531799]
[-232.60523987 152.12245178]
[-239.29031372 138.21873474]
[-237.37455750 122.91078949]
[-227.46929932 111.08331299]
[-212.73524475 106.51041412]
[-197.87400818 110.65129852]
[-187.62773132 122.18460846]
[-172.82373047 119.76760101]
[-158.01974487 117.35059357]
[-143.21575928 114.93357849]
[-128.41177368 112.51657104]
[-126.05339813 109.83805084]
[-122.26137543 108.19035339]
[-117.54465485 108.24336243]
[-112.69571686 110.40944672]
[-97.77789307 108.84152222]
[-82.86006165 107.27359009]
[-67.94223022 105.70566559]
[-53.02440643 104.13774109]
[-38.10657883 102.56980896]
[-23.18874931 101.00188446]
[-19.51621437 97.88455200]
[-13.83392143 97.07102203]
[-7.67470360 99.66938019]
[7.29200220 98.67052460]
[22.25870895 97.67166901]
[37.22541428 96.67280579]
[52.19211960 95.67395020]
[53.73080063 87.21448517]
[56.75395584 79.16522980]
[61.16458893 71.78442383]
[66.82118988 65.30886078]
[73.54228973 59.94631577]
[81.11223602 55.86882782]
[77.43724060 41.32598114]
[73.76224518 26.78313255]
[70.08724976 12.24028492]
[66.41224670 -2.30256200]
[53.42660904 -11.72342682]
[52.83969116 -27.75574112]
[65.10173035 -38.10088348]
[80.80633545 -34.82294846]
[87.90628052 -20.43648529]
[80.95510101 -5.97755814]
[84.63009644 8.56528950]
[88.30509186 23.10813713]
[91.98008728 37.65098190]
[95.65508270 52.19383240]
[108.38771820 51.47298813]
[121.18296051 54.16862488]
[133.11891174 60.25744629]
[143.29240417 69.46652985]
[150.88668823 81.28224945]
[155.23548889 94.97751617]
[155.87857056 109.65598297]
[170.14440918 105.02072906]
[180.87820435 93.39762878]
[195.37351990 96.82329559]
[209.63935852 92.18804169]
[223.90521240 87.55278778]
[238.12628174 82.78192902]
[252.30130005 77.87591553]
[266.47631836 72.96989441]
[280.65130615 68.06387329]
[294.82632446 63.15785599]
[299.51037598 46.92752075]
[312.80331421 36.77450562]
[329.36242676 36.53105164]
[342.67858887 46.09536743]
[356.75762939 40.92036057]
[370.83666992 35.74535370]
[384.91571045 30.57034874]
[387.72799683 18.96366119]
[395.72802734 10.25918293]
[406.82879639 6.55579758]
[418.21630859 8.66963959]
[427.06292725 15.95748711]
[441.32876587 11.32223225]
[451.89385986 -1.22013068]
[467.98873901 1.92431319]
[473.05633545 17.52082825]
[461.88357544 29.52505875]
[445.96401978 25.58807945]
[431.69818115 30.22333527]
[424.42553711 46.98702621]
[406.92507935 53.26202393]
[390.09069824 44.64938736]
[376.01165771 49.82439423]
[361.93261719 54.99939728]
[347.85357666 60.17440414]
[345.41232300 73.32550812]
[336.71304321 83.62821198]
[323.95349121 88.31346130]
[310.44033813 86.05281067]
[299.73236084 77.33287048]
[285.55734253 82.23888397]
[271.38232422 87.14490509]
[257.20730591 92.05092621]
[243.03230286 96.95694733]
[237.71571350 102.13986969]
[228.54046631 101.81863403]
[214.27461243 106.45388794]
[200.00877380 111.08914185]
[190.29536438 122.38069916]
[174.77966309 119.28657532]
[160.51382446 123.92182922]
[156.15101624 138.27334595]
[165.42340088 150.06413269]
[174.69578552 161.85493469]
[190.41607666 163.48210144]
[200.31643677 175.80113220]
[198.52314758 191.50335693]
[186.10014343 201.27291870]
[170.41777039 199.31372070]
[160.78009033 186.78811646]
[162.90498352 171.12731934]
[153.63259888 159.33651733]
[144.36021423 147.54573059]
[130.43469238 153.12066650]
[131.86053467 168.05273438]
[133.28637695 182.98481750]
[134.71221924 197.91690063]
[136.13806152 212.84898376]
[137.56390381 227.78105164]
[149.90893555 237.64895630]
[151.57748413 253.36492920]
[141.57962036 265.60494995]
[125.84689331 267.10723877]
[113.71325684 256.98052979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[90 141]
[91 140]
[93 138]
[94 137]
[95 136]
[96 134]
[97 133]
[98 132]
[99 131]
[100 130]
[104 125]
[105 124]
[106 123]
[107 122]
[112 119]
[113 118]
[142 153]
[143 152]
[144 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
