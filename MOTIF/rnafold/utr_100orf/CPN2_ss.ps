%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUGAGCUGACCACAGGCCACACCAGACUCCUCUCUGCUCCUGAGGAAGACAGGGCAGCCCGGCGCCACCCGCUCGGCCCUCACGAAGAUGCUCCCUGGAGCCUGGCUGCUCUGGACCUCCCUCCUGCUCCUGGCCAGGCCUGCCCAGCCCUGUCCCAUGGGUUGUGACUGCUUCGUCCAGGAGGUGU\
) } def
/len { sequence length } bind def

/coor [
[113.14788818 258.06497192]
[110.93549347 243.22903442]
[108.72309875 228.39308167]
[106.51069641 213.55712891]
[96.98083496 202.11026001]
[102.59808350 187.31982422]
[100.38568878 172.48387146]
[98.17329407 157.64793396]
[95.96089935 142.81198120]
[82.87697601 137.78201294]
[72.55867004 129.04783630]
[65.94715118 117.83141327]
[63.50173950 105.55088806]
[65.17826843 93.64479065]
[70.46764374 83.40435028]
[78.48686981 75.83346558]
[71.38194275 62.62285995]
[64.27701569 49.41225815]
[57.17208862 36.20165634]
[50.06716156 22.99105263]
[42.96223831 9.78044987]
[27.71562767 7.57884312]
[16.81628227 -3.05401397]
[14.29767513 -17.89047623]
[20.91906738 -31.20569801]
[13.81414223 -44.41630173]
[6.70921612 -57.62690353]
[-0.39570984 -70.83750916]
[-26.36646461 -68.51462555]
[-50.12190628 -79.04273224]
[-65.73532104 -99.69911194]
[-80.25047302 -95.91621399]
[-94.76563263 -92.13331604]
[-109.28078461 -88.35041809]
[-123.79593658 -84.56752014]
[-128.49612427 -69.87358093]
[-140.40884399 -60.07100677]
[-155.73280334 -58.28775024]
[-169.57817078 -65.09284973]
[-177.52693176 -78.31482697]
[-177.04269409 -93.73458862]
[-168.27995300 -106.43174744]
[-154.03486633 -112.35469055]
[-138.85301208 -109.61341858]
[-127.57883453 -99.08267212]
[-113.06368256 -102.86557007]
[-98.54853058 -106.64846802]
[-84.03337097 -110.43136597]
[-69.51821899 -114.21426392]
[-68.95419312 -129.26879883]
[-64.06561279 -143.51867676]
[-55.26925659 -155.74902344]
[-43.31505966 -164.91714478]
[-48.62525558 -178.94575500]
[-53.93545532 -192.97436523]
[-59.24565506 -207.00296021]
[-64.55585480 -221.03157043]
[-69.86605835 -235.06018066]
[-75.17625427 -249.08877563]
[-80.48645782 -263.11740112]
[-85.79665375 -277.14599609]
[-91.10685730 -291.17459106]
[-103.22853088 -301.34197998]
[-100.49792480 -315.98413086]
[-105.80812073 -330.01275635]
[-111.11832428 -344.04135132]
[-123.24000549 -354.20870972]
[-120.50939178 -368.85089111]
[-125.81958771 -382.87948608]
[-131.12979126 -396.90808105]
[-147.49932861 -401.13412476]
[-158.02488708 -414.15124512]
[-158.71691895 -430.71087646]
[-149.50068665 -444.28594971]
[-155.04090881 -458.22531128]
[-161.03659058 -471.97491455]
[-167.48126221 -485.51989746]
[-173.92593384 -499.06484985]
[-189.10612488 -502.81933594]
[-198.27966309 -515.48345947]
[-197.11511230 -531.07763672]
[-186.16232300 -542.23870850]
[-170.59286499 -543.69683838]
[-157.75817871 -534.76348877]
[-153.71838379 -519.65673828]
[-160.38096619 -505.50952148]
[-153.93629456 -491.96456909]
[-147.49162292 -478.41958618]
[-144.87966919 -477.35812378]
[-142.53462219 -475.18920898]
[-140.88371277 -472.01068115]
[-140.31030273 -468.07424927]
[-141.10153198 -463.76553345]
[-135.56132507 -449.82614136]
[-122.36598206 -447.73416138]
[-111.84576416 -439.32437134]
[-106.81878662 -426.71258545]
[-108.69916534 -413.15734863]
[-117.10118103 -402.21829224]
[-111.79098511 -388.18969727]
[-106.48078156 -374.16107178]
[-94.73892212 -364.99713135]
[-97.08971405 -349.35153198]
[-91.77951813 -335.32293701]
[-86.46931458 -321.29434204]
[-74.72745514 -312.13037109]
[-77.07824707 -296.48480225]
[-71.76805115 -282.45620728]
[-66.45784760 -268.42758179]
[-61.14764786 -254.39898682]
[-55.83744812 -240.37037659]
[-50.52725220 -226.34176636]
[-45.21705246 -212.31315613]
[-39.90685272 -198.28456116]
[-34.59665298 -184.25595093]
[-29.28645134 -170.22734070]
[-21.11854553 -171.37705994]
[-12.86669540 -171.21078491]
[-4.74170399 -169.73114014]
[3.04860926 -166.97430420]
[10.30472088 -163.00918579]
[16.84051704 -157.93562317]
[22.48806572 -151.88192749]
[27.10192490 -145.00160217]
[30.56290245 -137.46949768]
[32.78112030 -129.47731018]
[33.69835663 -121.22875214]
[33.28956604 -112.93431854]
[31.56357193 -104.80594635]
[28.56286812 -97.05159760]
[24.36258507 -89.86991119]
[19.06860542 -83.44514465]
[12.81489277 -77.94243622]
[19.91981888 -64.73182678]
[27.02474403 -51.52122879]
[34.12966919 -38.31062317]
[48.88905334 -36.49441147]
[59.87884521 -26.21392059]
[62.74129868 -11.25866222]
[56.17284012 2.67552376]
[63.27776718 15.88612652]
[70.38269043 29.09672928]
[77.48761749 42.30733109]
[84.59254456 55.51793671]
[91.69747162 68.72853851]
[114.84149170 67.30715179]
[135.36967468 82.52069092]
[141.90208435 109.66410828]
[155.28395081 116.44096375]
[168.66580200 123.21782684]
[182.04766846 129.99468994]
[195.42951965 136.77156067]
[208.81138611 143.54841614]
[222.55783081 136.35015869]
[237.90502930 138.63989258]
[248.95169067 149.53718567]
[251.45013428 164.85179138]
[244.43965149 178.69494629]
[230.61593628 185.74366760]
[215.29447937 183.28758240]
[204.36668396 172.27108765]
[202.03451538 156.93026733]
[188.65266418 150.15341187]
[175.27079773 143.37655640]
[161.88894653 136.59968567]
[148.50708008 129.82283020]
[135.12522888 123.04596710]
[129.04313660 127.43437195]
[141.14920044 136.29116821]
[136.46669006 150.54158020]
[121.46677399 150.49166870]
[116.87893677 136.21118164]
[110.79684448 140.59957886]
[113.00923920 155.43553162]
[115.22163391 170.27148438]
[117.43402863 185.10742188]
[127.12213898 197.61546326]
[121.34664917 211.34474182]
[123.55904388 226.18067932]
[125.77143860 241.01663208]
[127.98383331 255.85258484]
[142.30145264 261.41146851]
[151.90890503 273.39447021]
[154.22184753 288.57821655]
[148.61808777 302.87835693]
[136.60502625 312.44818115]
[121.41411591 314.71353149]
[107.13162994 309.06497192]
[97.59948730 297.02197266]
[95.38178253 281.82403564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 181]
[2 180]
[3 179]
[4 178]
[6 176]
[7 175]
[8 174]
[9 173]
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[25 136]
[26 135]
[27 134]
[28 133]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[53 116]
[54 115]
[55 114]
[56 113]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[62 107]
[64 105]
[65 104]
[66 103]
[68 101]
[69 100]
[70 99]
[74 94]
[75 93]
[76 88]
[77 87]
[78 86]
[148 167]
[149 166]
[150 165]
[151 164]
[152 163]
[153 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
