%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCGCAUUCCUAGCCUGGCGGCGCGCGCGGCUCCUUAAUGAGACUCGGGCCAAGGGCCGACCUCGCGAUUCCGCUCGCCCCUAUUUUAUGUUUGAUUUUUCCUUCCCAACGCCGGCUAGCGCUGGGACCCGAAUGGGGCCGGCCAGCUGCGGCGGGAGGAGCCUCCACCUCCCUCAGCUGCGUUUCU\
) } def
/len { sequence length } bind def

/coor [
[45.90974808 241.84606934]
[38.03897476 228.65719604]
[37.83316803 213.29968262]
[45.34769440 199.90463257]
[58.56117630 192.07522583]
[58.31316757 177.07728577]
[58.06515884 162.07933044]
[57.81715012 147.08137512]
[55.38907242 91.37112427]
[90.55542755 74.00105286]
[79.35310364 64.02568054]
[68.15077972 54.05031586]
[56.94845963 44.07494736]
[45.74613953 34.09957886]
[34.54381561 24.12420845]
[23.34149551 14.14884090]
[12.05708694 4.26642561]
[0.69136351 -5.52236080]
[-10.67435932 -15.31114769]
[-22.04008293 -25.09993362]
[-33.40580750 -34.88872147]
[-44.85206604 -44.58320999]
[-56.37808228 -54.18273544]
[-67.90409851 -63.78226471]
[-79.43011475 -73.38179016]
[-84.40756989 -57.40028000]
[-99.81506348 -44.71073532]
[-114.29319763 -40.78853607]
[-125.59009552 -29.71195793]
[-139.89772034 -33.85214233]
[-154.37585449 -29.92994308]
[-168.85398865 -26.00774384]
[-183.26528931 -21.84670067]
[-197.60583496 -17.44795036]
[-211.94636536 -13.04919910]
[-219.13087463 1.02767563]
[-234.19049072 5.82177114]
[-248.19062805 -1.51116383]
[-252.82522583 -16.62063026]
[-245.34468079 -30.54244804]
[-230.18707275 -35.01705170]
[-216.34512329 -27.38973618]
[-202.00457764 -31.78848648]
[-187.66404724 -36.18723679]
[-184.66744995 -39.92700195]
[-179.28263855 -41.81344223]
[-172.77618408 -40.48587799]
[-158.29804993 -44.40807724]
[-143.81991577 -48.33027649]
[-133.55859375 -59.12631226]
[-118.21539307 -55.26667023]
[-103.73725891 -59.18886948]
[-102.01657867 -66.48881531]
[-98.57521820 -81.08871460]
[-96.85453796 -88.38866425]
[-108.05686188 -98.36403656]
[-119.25918579 -108.33940125]
[-130.46150208 -118.31477356]
[-145.91326904 -121.71384430]
[-150.27276611 -135.95617676]
[-161.47509766 -145.93154907]
[-172.67741394 -155.90690613]
[-176.99893188 -156.63792419]
[-180.50300598 -158.52482605]
[-182.92518616 -161.16534424]
[-184.16014099 -164.11253357]
[-184.26235962 -166.93098450]
[-194.78089905 -177.62490845]
[-205.29945374 -188.31883240]
[-221.23994446 -192.17021179]
[-225.61462402 -207.97508240]
[-213.92320251 -219.47477722]
[-198.19281006 -214.83937073]
[-194.60552979 -198.83738708]
[-184.08697510 -188.14346313]
[-173.56842041 -177.44953918]
[-162.70204163 -167.10923767]
[-151.49972534 -157.13386536]
[-140.29740906 -147.15849304]
[-125.64691162 -144.47293091]
[-120.48613739 -129.51708984]
[-109.28382111 -119.54172516]
[-98.08149719 -109.56636047]
[-86.87917328 -99.59098816]
[-95.26467133 -112.02816772]
[-100.83205414 -125.95671082]
[-103.32977295 -140.74729919]
[-102.64498138 -155.73165894]
[-98.80860901 -170.23277283]
[-91.99400330 -183.59544373]
[-82.50904846 -195.21592712]
[-70.78231049 -204.56919861]
[-57.34360886 -211.23263550]
[-42.80014420 -214.90518188]
[-27.80901337 -215.42089844]
[-13.04754448 -212.75648499]
[0.81730777 -207.03234863]
[13.15910244 -198.50708008]
[23.42021179 -187.56588745]
[31.13702202 -174.70312500]
[35.96086884 -160.49993896]
[37.67380142 -145.59805298]
[36.19842529 -130.67079163]
[31.60140419 -116.39257812]
[24.09043884 -103.40853119]
[14.00489044 -92.30530548]
[1.80044258 -83.58455658]
[-11.97148323 -77.64031219]
[-26.68864250 -74.74113464]
[-41.68608856 -75.01802826]
[-56.28620148 -78.45848083]
[-69.83058929 -84.90780640]
[-58.30457306 -75.30828094]
[-46.77855682 -65.70875549]
[-35.25253677 -56.10922623]
[-28.08788872 -54.24103546]
[-23.61701965 -46.25444412]
[-12.25129604 -36.46565628]
[-0.88557315 -26.67687035]
[10.48015022 -16.88808441]
[21.84587288 -7.09929752]
[28.97865486 -5.11290455]
[33.31686401 2.94651866]
[44.51918411 12.92188740]
[55.72150803 22.89725494]
[66.92382812 32.87262344]
[78.12615204 42.84799194]
[89.32847595 52.82336044]
[100.53079987 62.79872894]
[115.13069153 66.24008942]
[129.60882568 62.31789017]
[144.08695984 58.39569092]
[155.26095581 46.39261246]
[171.18009949 50.33123398]
[175.46815491 66.15983582]
[163.71392822 77.59531403]
[148.00915527 72.87382507]
[133.53102112 76.79602051]
[119.05289459 80.71822357]
[119.79665375 95.69977570]
[134.59207153 98.16869354]
[149.38749695 100.63761139]
[164.18290710 103.10652924]
[175.15061951 92.12979126]
[190.48091125 89.72933197]
[204.27894592 96.82819366]
[211.23910522 110.69670868]
[208.68508911 126.00215149]
[197.59893799 136.85926819]
[182.24351501 139.09327698]
[168.52330017 131.84515381]
[161.71398926 117.90194702]
[146.91856384 115.43302917]
[132.12315369 112.96411133]
[117.32772827 110.49519348]
[110.62860107 123.91613007]
[121.49497986 134.25643921]
[132.36135864 144.59674072]
[143.22773743 154.93704224]
[154.09411621 165.27734375]
[164.96049500 175.61763000]
[180.19668579 172.67855835]
[194.23625183 179.28688049]
[201.68070984 192.90156555]
[199.66751099 208.28749084]
[188.97076416 219.52845764]
[173.70358276 222.30207825]
[159.73652649 215.54183960]
[152.44020081 201.84719849]
[154.62019348 186.48400879]
[143.75381470 176.14370728]
[132.88743591 165.80340576]
[122.02105713 155.46311951]
[111.15467834 145.12281799]
[100.28829956 134.78251648]
[93.41999817 137.79522705]
[103.39534760 148.99755859]
[95.82382202 161.94638062]
[81.16903687 158.74682617]
[79.68339539 143.82066345]
[72.81510162 146.83337402]
[73.06311035 161.83132935]
[73.31111908 176.82926941]
[73.55912781 191.82722473]
[87.02425385 199.21545410]
[94.97755432 212.35473633]
[95.27963257 227.71064758]
[87.84922791 241.15255737]
[74.68508911 249.06462097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 184]
[6 183]
[7 182]
[8 181]
[10 129]
[11 128]
[12 127]
[13 126]
[14 125]
[15 124]
[16 123]
[17 121]
[18 120]
[19 119]
[20 118]
[21 117]
[22 115]
[23 114]
[24 113]
[25 112]
[27 52]
[28 51]
[30 49]
[31 48]
[32 47]
[33 44]
[34 43]
[35 42]
[55 84]
[56 83]
[57 82]
[58 81]
[60 79]
[61 78]
[62 77]
[67 76]
[68 75]
[69 74]
[130 139]
[131 138]
[132 137]
[140 155]
[141 154]
[142 153]
[143 152]
[156 175]
[157 174]
[158 173]
[159 172]
[160 171]
[161 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
