%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCUGACUGAUAGAAAUACAAGUGGGACCACGUUCACCCUCUUGGGCUUCUCAGAUUACCCAGAACUGCAAGUCCCACUCUUCCUGGUUUUUCUGG\
) } def
/len { sequence length } bind def

/coor [
[46.52181625 390.82989502]
[43.08366776 405.59317017]
[34.80091858 418.28854370]
[22.67375374 427.38290405]
[8.16658592 431.77810669]
[-6.96877241 430.94342041]
[-20.90465546 424.97961426]
[-31.95823479 414.60684204]
[-38.79473877 401.07769775]
[-40.58862686 386.02587891]
[-37.12327576 371.26892090]
[-28.81714439 358.58886719]
[-16.67323875 349.51684570]
[-2.15799689 345.14837646]
[12.97579861 346.01095581]
[18.87730217 332.22067261]
[24.77880669 318.43038940]
[30.68030930 304.64007568]
[36.58181381 290.84979248]
[42.48331833 277.05947876]
[35.55296326 261.82434082]
[41.82936096 245.94714355]
[57.92375946 239.31288147]
[63.39353180 225.34573364]
[67.76174927 210.99586487]
[71.00202179 196.35002136]
[74.24228668 181.70417786]
[77.48255157 167.05833435]
[80.72282410 152.41249084]
[83.96308899 137.76666260]
[87.20335388 123.12081146]
[90.44362640 108.47497559]
[92.99727631 93.69393921]
[94.85875702 78.80989075]
[92.79635620 69.72479248]
[97.01657867 63.49460602]
[99.34004974 48.67564774]
[101.66352844 33.85668945]
[103.98699951 19.03773499]
[91.17971802 26.84628868]
[76.31267548 24.85351372]
[66.01384735 13.94781971]
[64.87461853 -1.00885630]
[73.40287781 -13.34858322]
[87.79657745 -17.57010841]
[101.63878632 -11.79140759]
[108.75862122 1.41265881]
[114.22839355 -12.55450249]
[119.69816589 -26.52166367]
[125.16793823 -40.48882294]
[114.74041748 -51.63465500]
[110.18973541 -66.20359802]
[112.41944122 -81.30297089]
[120.98680878 -93.93479156]
[134.19079590 -101.59100342]
[149.40972900 -102.75144958]
[163.62190247 -97.18572998]
[174.00544739 -85.99892426]
[178.49871826 -71.41217041]
[176.20957947 -56.32169342]
[167.59252930 -43.72370911]
[154.35848999 -36.11955643]
[139.13510132 -35.01905060]
[133.66532898 -21.05188942]
[128.19555664 -7.08472919]
[122.72578430 6.88243151]
[118.80595398 21.36120796]
[116.48248291 36.18016434]
[114.15901184 50.99911880]
[111.83553314 65.81807709]
[109.74280548 80.67137909]
[107.88132477 95.55542755]
[109.93450928 99.05467987]
[110.34380341 103.47083282]
[108.72597504 108.00533295]
[105.08946228 111.71524048]
[101.84919739 126.36108398]
[98.60893250 141.00692749]
[95.36865997 155.65277100]
[92.12839508 170.29859924]
[88.88813019 184.94444275]
[85.64785767 199.59028625]
[82.40759277 214.23612976]
[83.95594025 218.13955688]
[84.25958252 221.97384644]
[83.47506714 225.38307190]
[81.85188293 228.09083557]
[79.70130157 229.92231750]
[77.36069489 230.81550598]
[71.89092255 244.78266907]
[78.70632935 256.52255249]
[77.47612000 269.84500122]
[68.88117981 279.84149170]
[56.27361298 282.96099854]
[50.37210846 296.75128174]
[44.47060394 310.54159546]
[38.56910324 324.33187866]
[32.66759872 338.12216187]
[26.76609421 351.91247559]
[37.83877182 362.26483154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 99]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[23 90]
[24 89]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[32 76]
[33 72]
[34 71]
[36 70]
[37 69]
[38 68]
[39 67]
[47 66]
[48 65]
[49 64]
[50 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
