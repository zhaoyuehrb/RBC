%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUGCCAGCAGAACCAGCAGCAGUGCCAGCCUCCGCCCAAGUGCCCUGCAAAGAGCCCAGCACAGUGUCUGCCUCCAGCUUCCUCCAGCUGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[93.83929443 153.94458008]
[96.12835693 139.12026978]
[88.66098022 139.81910706]
[79.54499054 151.73123169]
[77.30268860 167.39273071]
[63.42339706 172.79777527]
[54.30740738 184.70989990]
[45.19141769 196.62202454]
[43.60967255 212.94471741]
[28.57291412 219.48902893]
[15.54966736 209.52272034]
[17.93713379 193.29829407]
[33.27929306 187.50604248]
[42.39528275 175.59391785]
[51.51127243 163.68179321]
[53.10153961 148.87232971]
[67.63286591 142.61523438]
[76.74885559 130.70310974]
[65.71941376 107.73952484]
[71.79611206 85.36861420]
[89.15830231 73.74759674]
[87.29682159 58.86354828]
[85.43534088 43.97949982]
[83.57386017 29.09545135]
[81.48112488 14.24215221]
[79.15765381 -0.57680452]
[76.37443542 -15.31633282]
[73.13417053 -29.96217537]
[69.89390564 -44.60801697]
[66.65363312 -59.25385666]
[51.78112793 -68.30104065]
[48.03982925 -84.95880890]
[57.24643326 -98.93656921]
[53.55224991 -113.47455597]
[49.63242340 -127.95333099]
[45.48789597 -142.36940002]
[31.94135666 -150.05892944]
[27.94358063 -164.73791504]
[35.35786438 -177.60508728]
[31.21333694 -192.02114868]
[16.21052551 -195.05003357]
[4.34111071 -204.71315002]
[-1.66740119 -218.78994751]
[-0.43429837 -234.04570007]
[7.75706100 -246.97474670]
[21.02436256 -254.60607910]
[36.31887817 -255.18608093]
[50.12603760 -248.58148193]
[59.27305984 -236.30993652]
[61.65802383 -221.19139099]
[56.73288345 -206.69996643]
[45.62940216 -196.16566467]
[49.77392578 -181.74960327]
[62.88979721 -174.78472900]
[67.29829407 -160.22383118]
[59.90396118 -146.51391602]
[64.04848480 -132.09785461]
[69.00924683 -126.43955231]
[68.09023285 -117.16873932]
[71.78441620 -102.63075256]
[83.75660706 -97.59601593]
[90.69937897 -86.38882446]
[89.85112000 -73.03662872]
[81.29947662 -62.49412537]
[84.53974152 -47.84828186]
[87.78001404 -33.20244217]
[91.02027893 -18.55660057]
[94.64405060 -15.20115662]
[96.08473206 -9.47104454]
[93.97660828 -2.90027714]
[96.30008698 11.91867924]
[100.52030945 18.14886475]
[98.45790863 27.23396873]
[100.31938934 42.11801910]
[102.18087006 57.00206375]
[104.04235077 71.88611603]
[119.54042053 76.02339935]
[131.47561646 88.65345001]
[135.30381775 106.97341156]
[128.54428101 125.85576630]
[139.71224976 135.86958313]
[150.88020325 145.88340759]
[162.04817200 155.89723206]
[173.21612549 165.91105652]
[188.98139954 164.80104065]
[200.85906982 175.22680664]
[201.80233765 191.00291443]
[191.25157166 202.76969910]
[175.46636963 203.54612732]
[163.81179810 192.87155151]
[163.20231628 177.07902527]
[152.03434753 167.06520081]
[140.86639404 157.05137634]
[129.69842529 147.03755188]
[118.53046417 137.02372742]
[111.06309509 137.72257996]
[116.06301880 151.86473083]
[122.35881805 165.47953796]
[114.87725067 178.48054504]
[99.94248199 179.87799072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[6 15]
[7 14]
[8 13]
[21 76]
[22 75]
[23 74]
[24 73]
[25 71]
[26 70]
[27 67]
[28 66]
[29 65]
[30 64]
[33 60]
[34 59]
[35 57]
[36 56]
[39 53]
[40 52]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
