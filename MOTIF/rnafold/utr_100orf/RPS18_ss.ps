%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUUCCACAGGAGGCCUACACGCCGCCGCUUGUGCUGCAGCCAUGUCUCUAGUGAUCCCUGAAAAGUUCCAGCAUAUUUUGCGAGUACUCAACACCAACAUCGAUGGGCGGCGGAAAAUAGCCUUUGCCAUCACUGCCAUUA\
) } def
/len { sequence length } bind def

/coor [
[110.50545502 508.34570312]
[95.41116333 509.54608154]
[80.74557495 505.77789307]
[68.09950256 497.44989014]
[58.84471130 485.46542358]
[53.98508072 471.12448120]
[54.04775238 455.98266602]
[59.02592468 441.68243408]
[68.37960052 429.77496338]
[81.09416962 421.55194092]
[95.79045105 417.90527344]
[97.07991791 402.96078491]
[98.36939240 388.01632690]
[99.49800873 373.05883789]
[100.46563721 358.09008789]
[101.27216339 343.11178589]
[101.91749573 328.12567139]
[102.56282806 313.13955688]
[102.40145111 298.14041138]
[101.43382263 283.17166138]
[100.46619415 268.20291138]
[87.05310059 261.72567749]
[78.62699890 249.32177734]
[77.53366852 234.26618958]
[84.16662598 220.59501648]
[96.83458710 212.02355957]
[95.86695862 197.05479431]
[94.89933777 182.08604431]
[93.93170929 167.11729431]
[92.96408081 152.14852905]
[91.99645233 137.17977905]
[91.02883148 122.21101379]
[90.06120300 107.24225616]
[84.39558411 93.35338593]
[74.61709595 81.97879791]
[64.83861542 70.60420990]
[55.06012726 59.22962570]
[45.28164291 47.85503769]
[35.50315857 36.48044968]
[25.72467232 25.10586357]
[10.86111355 19.68505096]
[8.43145752 4.98994780]
[-1.34702730 -6.38463926]
[-11.12551212 -17.75922585]
[-21.38430405 -28.70258904]
[-32.10440445 -39.19446564]
[-51.80504227 -43.23480988]
[-56.36099243 -61.98301315]
[-67.52255249 -72.00397491]
[-78.68411255 -82.02493286]
[-94.45007324 -80.92499542]
[-106.32108307 -91.35834503]
[-107.25426483 -107.13505554]
[-96.69599152 -118.89509583]
[-80.91029358 -119.66142273]
[-69.26255035 -108.97940826]
[-68.66315460 -93.18648529]
[-57.50159454 -83.16552734]
[-46.34003448 -73.14456940]
[-36.13806534 -74.60997772]
[-26.63153076 -70.08815765]
[-21.10393715 -60.87091064]
[-21.61252975 -49.91456604]
[-10.89242840 -39.42269135]
[-8.02085018 -39.35775757]
[-5.00408506 -38.10948944]
[-2.30893970 -35.61739731]
[-0.41493809 -31.99678421]
[0.24907489 -27.53771210]
[10.02756023 -16.16312408]
[19.80604553 -4.78853703]
[33.97018051 -0.18131107]
[37.09925842 15.32737827]
[46.87774277 26.70196533]
[56.65622711 38.07655334]
[66.43471527 49.45113754]
[76.21319580 60.82572556]
[85.99168396 72.20031738]
[95.77017212 83.57489777]
[90.25584412 69.62526703]
[96.83559418 56.14539719]
[111.22563934 51.91141891]
[124.05727386 59.67988586]
[126.97640991 74.39309692]
[118.08290863 86.47173309]
[130.44175720 77.97120667]
[142.80059814 69.47068024]
[155.06727600 60.83768463]
[167.24035645 52.07321167]
[165.03094482 36.92800903]
[170.12387085 22.49469185]
[181.34881592 12.08992290]
[196.12637329 8.10464573]
[211.06076050 11.45464706]
[222.72018433 21.37012100]
[228.42536926 35.57256317]
[226.86532593 50.79835892]
[218.39852905 63.54872894]
[204.97058105 70.89373779]
[189.66714478 71.14554596]
[176.00483704 64.24629974]
[163.83174133 73.01076508]
[160.21510315 79.51870728]
[151.30113220 81.82952881]
[138.94227600 90.33005524]
[126.58343506 98.83058167]
[121.56870270 104.16583252]
[115.78028107 107.15232086]
[110.01763916 107.77962494]
[105.02996063 106.27462769]
[105.99758148 121.24338531]
[106.96520996 136.21214294]
[107.93283844 151.18090820]
[108.90046692 166.14965820]
[109.86809540 181.11842346]
[110.83571625 196.08717346]
[111.80334473 211.05593872]
[125.46943665 217.92507935]
[133.80732727 230.62847900]
[134.66148376 245.69953918]
[127.90248108 259.08505249]
[115.43495178 267.23529053]
[116.40258026 282.20404053]
[117.37020874 297.17279053]
[129.33699036 288.12869263]
[143.92218018 291.63189697]
[150.47587585 305.12445068]
[144.21269226 318.75430298]
[129.70590210 322.56912231]
[117.54894257 313.78488159]
[116.90361023 328.77099609]
[116.25827026 343.75711060]
[119.03067017 352.53848267]
[115.43439484 359.05770874]
[114.46676636 374.02645874]
[117.04958344 382.86547852]
[113.31386566 389.30578613]
[112.02439117 404.25027466]
[110.73492432 419.19473267]
[124.58934021 425.30487061]
[135.70744324 435.58428955]
[142.88320923 448.91796875]
[145.33827209 463.85958862]
[142.80632019 478.78833008]
[135.56201172 492.08489990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 135]
[15 134]
[16 132]
[17 131]
[18 130]
[19 124]
[20 123]
[21 122]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[32 111]
[33 110]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[42 71]
[43 70]
[44 69]
[45 64]
[46 63]
[48 59]
[49 58]
[50 57]
[85 106]
[86 105]
[87 104]
[88 102]
[89 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
