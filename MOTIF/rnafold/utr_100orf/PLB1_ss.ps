%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCAGCUCUUCCAGAGGCCCGAGUCACCUGGAGCAUUCUGGCAUGGGGCUGCGGCCAGGCAUUUUCCUCCUGGAGCUGCUGCUGCUUCUGGGGCAAGGGACCCCUCAGAUCCAUACCUCUCCUAGAAAGAGUACAUUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[74.96057129 122.24375153]
[69.07794189 110.08409119]
[68.58794403 96.97946930]
[54.42586517 92.03623962]
[40.26378632 87.09300995]
[26.10170746 82.14978027]
[11.93962860 77.20655823]
[-2.22245026 72.26332855]
[-16.32394791 78.88038635]
[-30.61589241 73.66550446]
[-36.83734894 60.18110657]
[-50.99942780 55.23787689]
[-65.16150665 50.29464722]
[-79.32358551 45.35141754]
[-93.48566437 40.40819168]
[-107.64774323 35.46496201]
[-121.86254120 30.67543793]
[-136.12838745 26.04018402]
[-150.39424133 21.40492821]
[-159.86842346 26.93527603]
[-170.59982300 26.30890274]
[-179.01365662 19.97877312]
[-182.44236755 10.25702763]
[-196.49403381 5.00814533]
[-210.54570007 -0.24073707]
[-224.59735107 -5.48961973]
[-236.68365479 -0.84914273]
[-248.30799866 -5.56555414]
[-253.40574646 -16.58658028]
[-267.34039307 -22.13865280]
[-281.27505493 -27.69072342]
[-295.20971680 -33.24279785]
[-309.14434814 -38.79486847]
[-327.26119995 -35.69668961]
[-337.63528442 -49.81183624]
[-351.68695068 -55.06072235]
[-365.73861694 -60.30960464]
[-381.37377930 -57.89050674]
[-390.58892822 -69.59223175]
[-404.64059448 -74.84111786]
[-418.69223022 -80.08999634]
[-432.96575928 -73.30452728]
[-447.82849121 -78.67801666]
[-454.46267700 -93.02246094]
[-448.93234253 -107.82756805]
[-434.51855469 -114.30971527]
[-419.77276611 -108.62317657]
[-413.44335938 -94.14166260]
[-399.39169312 -88.89277649]
[-385.34002686 -83.64389801]
[-370.70993042 -86.43843079]
[-360.48971558 -74.36126709]
[-346.43804932 -69.11238098]
[-332.38638306 -63.86350250]
[-321.20632935 -68.60231018]
[-309.42736816 -64.28652954]
[-303.59228516 -52.72951889]
[-289.65762329 -47.17744827]
[-275.72299194 -41.62537384]
[-261.78833008 -36.07330322]
[-247.85368347 -30.52123070]
[-230.68667603 -34.00725555]
[-219.34848022 -19.54128265]
[-205.29681396 -14.29240036]
[-191.24514771 -9.04351711]
[-177.19348145 -3.79463482]
[-158.46931458 -8.44436169]
[-145.75898743 7.13908100]
[-131.49313354 11.77433586]
[-117.22728729 16.40958977]
[-109.83916473 15.47826290]
[-102.70451355 21.30288124]
[-88.54243469 26.24611092]
[-74.38035583 31.18934059]
[-60.21827698 36.13256836]
[-46.05619812 41.07579803]
[-31.89411926 46.01902771]
[-18.63293076 39.33498001]
[-4.20015001 44.14637375]
[2.72077847 58.10124588]
[16.88285828 63.04447556]
[31.04493713 67.98770142]
[45.20701599 72.93093109]
[59.36909485 77.87416077]
[73.53117371 82.81739044]
[85.84017944 70.18263245]
[103.72478485 65.74139404]
[122.01713562 71.62858582]
[134.97958374 86.86604309]
[148.91424561 81.31396484]
[162.84889221 75.76189423]
[176.78353882 70.20982361]
[190.65722656 64.50712585]
[204.46832275 58.65446854]
[218.27941895 52.80181122]
[221.64778137 37.65473938]
[233.29832458 27.40562248]
[248.75119019 25.99545479]
[262.06442261 33.96647644]
[268.11883545 48.25366592]
[264.58636475 63.36330795]
[252.82531738 73.48543549]
[237.35807800 74.72788239]
[224.13208008 66.61290741]
[210.32098389 72.46556854]
[196.50988770 78.31822205]
[191.54167175 83.86515808]
[182.33561707 84.14447021]
[168.40097046 89.69654846]
[154.46630859 95.24861908]
[140.53166199 100.80068970]
[137.46598816 115.48406982]
[148.01498413 126.14796448]
[158.56398010 136.81185913]
[169.11297607 147.47575378]
[183.53572083 142.60281372]
[198.58264160 144.46754456]
[211.27584839 152.64694214]
[219.12673950 165.47364807]
[220.62380981 180.37561035]
[215.52342224 194.39172363]
[226.07241821 205.05561829]
[236.62141418 215.71951294]
[252.19081116 214.26077271]
[265.02587891 223.19360352]
[269.06625366 238.30020142]
[262.40423584 252.44769287]
[248.18540955 258.95605469]
[233.12345886 254.75225830]
[224.33020020 241.82119751]
[225.95751953 226.26850891]
[215.40852356 215.60461426]
[204.85952759 204.94071960]
[190.78898621 209.88897705]
[175.90412903 208.23056030]
[163.16320801 200.24118042]
[155.12179565 187.46011353]
[153.42016602 172.39387512]
[158.44908142 158.02474976]
[147.90008545 147.36085510]
[137.35108948 136.69696045]
[126.80209351 126.03306580]
[113.79870605 133.67906189]
[99.21172333 135.41958618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[17 70]
[18 69]
[19 68]
[23 66]
[24 65]
[25 64]
[26 63]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[35 54]
[36 53]
[37 52]
[39 50]
[40 49]
[41 48]
[89 111]
[90 110]
[91 109]
[92 108]
[93 106]
[94 105]
[95 104]
[112 142]
[113 141]
[114 140]
[115 139]
[121 133]
[122 132]
[123 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
