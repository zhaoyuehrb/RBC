%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCUUAGACCCUCAGUCAUGCCAGUGCCUGCUCUGUGCCUGCUCUGGGCCCUGGCAAUGGUGACCCGGCCUGCCUCAGCGGCCCCCAUGGGCGGCCCAGAACUGGCACAGCAUGAGG\
) } def
/len { sequence length } bind def

/coor [
[16.99193764 449.77160645]
[16.05644417 465.00601196]
[8.59613323 478.32165527]
[-3.90774441 487.07470703]
[-18.97253418 489.52722168]
[-33.60711288 485.19226074]
[-44.90577316 474.93054199]
[-50.62515640 460.77951050]
[-49.62967682 445.54888916]
[-42.11698914 432.26272583]
[-29.57873917 423.55899048]
[-14.50440693 421.16583252]
[-10.24417686 406.78350830]
[-5.98394632 392.40121460]
[-1.72371626 378.01892090]
[2.53651381 363.63662720]
[6.60812044 349.19979858]
[10.49040604 334.71090698]
[2.84388828 321.98037720]
[6.57467842 307.23129272]
[19.97947311 299.29724121]
[23.86175919 284.80834961]
[27.74404526 270.31945801]
[31.62632942 255.83058167]
[35.50861740 241.34169006]
[39.39090347 226.85279846]
[43.27318573 212.36392212]
[29.43842888 218.16041565]
[15.46727657 212.70085144]
[9.22814655 199.05998230]
[14.23485470 184.92022705]
[27.66767311 178.24493408]
[41.96136856 182.79359436]
[49.06599426 196.00552368]
[55.16704559 182.30235291]
[61.26809692 168.59916687]
[67.36914825 154.89598083]
[65.47741699 140.12199402]
[78.15882874 130.66195679]
[84.25988007 116.95877838]
[90.36093140 103.25559235]
[90.51454163 95.08875275]
[96.80522919 89.27682495]
[103.26289368 75.73805237]
[109.72055817 62.19926834]
[116.17822266 48.66049194]
[113.00935364 27.55038261]
[130.18081665 16.22421455]
[135.55633545 2.22050738]
[140.93185425 -11.78319931]
[146.30737305 -25.78690529]
[151.68289185 -39.79061127]
[156.87464905 -53.86348343]
[161.88174438 -68.00310516]
[166.51701355 -82.26895142]
[170.77723694 -96.65124512]
[175.03746033 -111.03354645]
[179.29769897 -125.41584015]
[178.09190369 -132.12040710]
[180.21737671 -137.55926514]
[184.17562866 -140.42855835]
[189.18272400 -154.56817627]
[194.18983459 -168.70780945]
[187.16055298 -182.86282349]
[192.27832031 -197.81555176]
[206.50688171 -204.69479370]
[221.40464783 -199.41920471]
[228.13307190 -185.11871338]
[222.70027161 -170.27755737]
[208.32945251 -163.70069885]
[203.32235718 -149.56108093]
[198.31524658 -135.42146301]
[193.67999268 -121.15560913]
[189.41976929 -106.77331543]
[185.15953064 -92.39101410]
[180.89930725 -78.00872040]
[182.41505432 -73.36080933]
[180.93772888 -67.71135712]
[176.02137756 -62.99600220]
[171.01426697 -48.85638046]
[171.75668335 -41.40928650]
[165.68659973 -34.41509247]
[160.31108093 -20.41138649]
[154.93556213 -6.40768003]
[149.56004333 7.59602642]
[144.18452454 21.59973335]
[149.17469788 29.20165253]
[150.04818726 38.39251709]
[146.47360229 47.05506897]
[139.15930176 53.13286591]
[129.71701050 55.11815643]
[123.25933838 68.65693665]
[116.80167389 82.19571686]
[110.34400177 95.73449707]
[104.06410980 109.35664368]
[97.96305847 123.05982208]
[91.86200714 136.76300049]
[93.31735229 152.51713562]
[81.07232666 160.99703979]
[74.97127533 174.70021057]
[68.87022400 188.40339661]
[62.76917648 202.10658264]
[57.76207352 216.24620056]
[53.87978745 230.73509216]
[49.99750519 245.22396851]
[46.11521912 259.71286011]
[42.23293304 274.20175171]
[38.35064697 288.69064331]
[34.46836090 303.17953491]
[42.11022568 316.75302124]
[37.96663666 331.39151001]
[24.97929382 338.59320068]
[21.09700775 353.08209229]
[21.89672470 362.30841064]
[16.91880989 367.89685059]
[12.65857983 382.27917480]
[8.39834976 396.66146851]
[4.13811922 411.04376221]
[-0.12211078 425.42605591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[17 113]
[18 112]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[34 102]
[35 101]
[36 100]
[37 99]
[39 97]
[40 96]
[41 95]
[43 94]
[44 93]
[45 92]
[46 91]
[48 86]
[49 85]
[50 84]
[51 83]
[52 82]
[53 80]
[54 79]
[55 76]
[56 75]
[57 74]
[58 73]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
