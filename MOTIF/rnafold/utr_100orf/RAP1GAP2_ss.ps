%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACCCCGCUGUACCACGGCCCUCUUGCGGACAGCCCCGGGGACGUCGUUGGGACAUCGCUGGGACCCCGGGCUCUGCAGCCACAACCAUGUUUGGCCGGAAGCGCAGUGUCUCCUUUGGGGGCUUCGGAUGGAUCGACAAGACCAUGCUGGCAAGUCUGAAGGUCAAGAAGCAGGAGCUGGCCAACA\
) } def
/len { sequence length } bind def

/coor [
[114.93318176 348.56564331]
[109.52008820 362.63552856]
[100.89656830 375.00073242]
[89.56398010 384.94238281]
[76.18118286 391.88241577]
[61.52624512 395.41741943]
[46.45117569 395.34182739]
[31.83242226 391.66003418]
[18.51989937 384.58612061]
[7.28758192 374.53137207]
[-1.21150041 362.08029175]
[-6.48322105 347.95681763]
[-8.22108841 332.98205566]
[-6.32406712 318.02664185]
[-0.90244550 303.96002197]
[7.72856951 291.60006714]
[19.06718254 281.66531372]
[32.45418167 274.73336792]
[47.11126328 271.20727539]
[62.18628311 271.29199219]
[65.84967804 256.74621582]
[69.51307678 242.20045471]
[73.17647552 227.65467834]
[76.60013580 213.05062866]
[79.78313446 198.39222717]
[82.96613312 183.73384094]
[86.14913940 169.07543945]
[89.33213806 154.41705322]
[92.51513672 139.75865173]
[95.69813538 125.10025787]
[83.98165894 115.73413849]
[70.38414764 122.06719971]
[61.42005920 135.79954529]
[45.06248856 134.63253784]
[38.13870239 119.76669312]
[47.77129745 106.49472046]
[64.05108643 108.46968842]
[77.64859772 102.13662720]
[75.43620300 87.30068207]
[60.58256149 85.21037292]
[45.72892380 83.12005615]
[30.87528229 81.02974701]
[16.13154030 86.76844025]
[4.60667753 77.33303833]
[-10.24696159 75.24272919]
[-24.99070549 80.98142242]
[-36.51556778 71.54602051]
[-51.36920547 69.45571136]
[-66.22284698 67.36540222]
[-79.85071564 75.83066559]
[-94.91706848 70.31844330]
[-99.86428070 55.05723190]
[-90.89728546 41.75413132]
[-74.89479065 40.61413574]
[-64.13253784 52.51176071]
[-49.27889633 54.60206985]
[-34.42525482 56.69238281]
[-20.74394608 50.80417633]
[-8.15665054 60.38909149]
[6.69698858 62.47940063]
[20.37829971 56.59119415]
[32.96559525 66.17610931]
[47.81923294 68.26641846]
[62.67287445 70.35672760]
[77.52651215 72.44704437]
[91.55511475 67.13684082]
[101.30152893 55.73476028]
[111.04793549 44.33267593]
[120.79434967 32.93059540]
[123.72799683 14.75958633]
[140.47583008 9.54202843]
[150.03338623 -2.01881528]
[159.59094238 -13.57965851]
[169.14849854 -25.14050293]
[178.70605469 -36.70134354]
[188.26361084 -48.26218796]
[191.32719421 -56.88605499]
[198.07467651 -59.93289185]
[207.82109070 -71.33497620]
[217.56750488 -82.73706055]
[227.21981812 -94.21891022]
[236.77737427 -105.77975464]
[246.33493042 -117.34059906]
[240.03082275 -119.18647003]
[233.92674255 -122.97489166]
[228.52014160 -128.66645813]
[224.29585266 -136.10586548]
[221.70074463 -145.02601624]
[221.11936951 -155.05747986]
[220.13319397 -170.02502441]
[219.14701843 -184.99256897]
[209.58663940 -198.31665039]
[216.59104919 -213.14466858]
[232.95472717 -214.22283936]
[241.84410095 -200.44201660]
[234.11456299 -185.97874451]
[235.10073853 -171.01119995]
[236.08691406 -156.04365540]
[250.46980286 -151.78540039]
[259.44549561 -163.80358887]
[268.42117310 -175.82177734]
[277.39688110 -187.83996582]
[286.37255859 -199.85816956]
[271.67541504 -196.85916138]
[257.97015381 -202.95553589]
[250.35574341 -215.87918091]
[251.66505432 -230.82192993]
[261.41098022 -242.22442627]
[275.96762085 -245.84443665]
[289.91925049 -240.33517456]
[298.07525635 -227.74632263]
[297.40054321 -212.75950623]
[307.87548828 -223.49613953]
[318.35043335 -234.23277283]
[328.82540894 -244.96940613]
[339.30035400 -255.70605469]
[349.77529907 -266.44268799]
[356.50842285 -282.00228882]
[373.32388306 -279.83963013]
[375.90069580 -263.08264160]
[360.51193237 -255.96772766]
[350.03698730 -245.23109436]
[339.56204224 -234.49446106]
[329.08706665 -223.75782776]
[318.61212158 -213.02119446]
[308.13717651 -202.28454590]
[298.39074707 -190.88247681]
[289.41506958 -178.86427307]
[280.43936157 -166.84608459]
[271.46368408 -154.82789612]
[262.48797607 -142.80970764]
[269.80923462 -129.71774292]
[284.74789429 -131.07286072]
[299.68655396 -132.42797852]
[314.62521362 -133.78311157]
[322.90560913 -137.68080139]
[329.82040405 -135.03559875]
[344.77932739 -136.14482117]
[356.30053711 -147.30914307]
[372.19345093 -145.11953735]
[380.26641846 -131.25567627]
[374.32656860 -116.35273743]
[358.93041992 -111.84297943]
[345.88858032 -121.18589783]
[330.92965698 -120.07666016]
[315.98034668 -118.84444427]
[301.04168701 -117.48931885]
[286.10302734 -116.13420105]
[271.16436768 -114.77908325]
[257.89578247 -107.78303528]
[248.33821106 -96.22219849]
[238.78065491 -84.66135406]
[236.93869019 -77.49065399]
[228.96958923 -72.99064636]
[219.22317505 -61.58856583]
[209.47676086 -50.18648148]
[199.82444763 -38.70463181]
[190.26689148 -27.14378738]
[180.70933533 -15.58294487]
[171.15177917 -4.02210140]
[161.59422302 7.53874207]
[152.03666687 19.09958458]
[152.86421204 31.17849350]
[144.98149109 40.89030075]
[132.19642639 42.67700577]
[122.45001984 54.07908630]
[112.70361328 65.48117065]
[102.95719910 76.88325500]
[113.21224213 79.43803406]
[121.72711945 86.50560760]
[126.54541779 97.01744080]
[126.32745361 109.07681274]
[120.68859100 120.29911041]
[110.35652924 128.28326416]
[107.17353058 142.94165039]
[103.99053192 157.60005188]
[100.80753326 172.25843811]
[97.62452698 186.91683960]
[94.44152832 201.57522583]
[91.25852966 216.23362732]
[92.91393280 222.66291809]
[91.30390167 228.13548279]
[87.72224426 231.31808472]
[84.05885315 245.86384583]
[80.39545441 260.40963745]
[76.73205566 274.95538330]
[90.04886627 282.02124023]
[101.28727722 292.06918335]
[109.79390717 304.51510620]
[115.07418823 318.63537598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 186]
[21 185]
[22 184]
[23 183]
[24 180]
[25 179]
[26 178]
[27 177]
[28 176]
[29 175]
[30 174]
[31 38]
[32 37]
[39 65]
[40 64]
[41 63]
[42 62]
[44 60]
[45 59]
[47 57]
[48 56]
[49 55]
[66 168]
[67 167]
[68 166]
[69 165]
[71 162]
[72 161]
[73 160]
[74 159]
[75 158]
[76 157]
[78 156]
[79 155]
[80 154]
[81 152]
[82 151]
[83 150]
[89 98]
[90 97]
[91 96]
[99 131]
[100 130]
[101 129]
[102 128]
[103 127]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
[117 121]
[132 149]
[133 148]
[134 147]
[135 146]
[137 145]
[138 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
