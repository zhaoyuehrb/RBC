%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCUCUUCCAGAGGCAAGACCAACCAAGAUGAGUGACCUGGGAGCUGUCAUUUCCCUCCUGCUCUGGGGACGACAGCUUUUUGCACUGUACUCAGGCAAUGAUGUCACGGAUAUUUCAGAUGACCGCU\
) } def
/len { sequence length } bind def

/coor [
[70.28940582 126.81750488]
[78.25163269 114.10585785]
[70.75648499 113.83612823]
[61.70852661 125.80000305]
[59.55550766 141.47402954]
[45.70724106 146.95808411]
[36.65928268 158.92196655]
[27.61132050 170.88583374]
[18.56336021 182.84971619]
[9.65950394 194.92123413]
[0.90103072 207.09863281]
[-3.43882895 223.48771667]
[-20.38881111 223.85440063]
[-25.43339539 207.66835022]
[-11.27637291 198.34016418]
[-2.51789951 186.16275024]
[-1.15273559 178.82286072]
[6.59948111 173.80175781]
[15.64744186 161.83787537]
[24.69540215 149.87399292]
[33.74336243 137.91012573]
[35.24921036 123.09183502]
[49.74464798 116.75204468]
[58.79260635 104.78816223]
[45.41897583 97.99508667]
[36.30211258 86.08362579]
[33.23775101 71.39997101]
[36.82947540 56.83633423]
[46.36982727 45.26128769]
[59.97966385 38.95475006]
[74.97827148 39.15890884]
[88.41140747 45.83354950]
[97.63317108 57.66398239]
[100.82716370 72.31998444]
[97.36360168 86.91615295]
[102.30565643 72.75366974]
[107.24771118 58.59117889]
[112.18977356 44.42869186]
[117.13182831 30.26620483]
[105.12233734 16.60417938]
[103.39636993 -2.24915957]
[113.48370361 -19.14079094]
[132.26492310 -27.14751053]
[130.11401367 -41.99249649]
[127.96310425 -56.83748245]
[125.81219482 -71.68247223]
[123.66129303 -86.52745819]
[121.51038361 -101.37244415]
[119.35948181 -116.21742249]
[117.20857239 -131.06240845]
[115.05767059 -145.90739441]
[105.88285828 -151.97921753]
[101.70253754 -161.91694641]
[103.69529724 -172.28756714]
[110.95137024 -179.65336609]
[109.51467896 -194.58439636]
[108.07798767 -209.51544189]
[106.64129639 -224.44647217]
[105.20460510 -239.37751770]
[91.76731110 -247.13758850]
[85.48834229 -261.32751465]
[88.78209686 -276.49099731]
[100.38204956 -286.79733276]
[115.82778168 -288.28356934]
[129.18009949 -280.37817383]
[135.30476379 -266.12094116]
[131.84671021 -250.99411011]
[120.13564301 -240.81420898]
[121.57233429 -225.88316345]
[123.00902557 -210.95213318]
[124.44571686 -196.02108765]
[125.88240814 -181.09005737]
[138.27516174 -166.32344055]
[129.90264893 -148.05830383]
[132.05355835 -133.21331787]
[134.20446777 -118.36833191]
[136.35537720 -103.52334595]
[138.50627136 -88.67835999]
[140.65718079 -73.83337402]
[142.80809021 -58.98838806]
[144.95899963 -44.14340210]
[147.10990906 -29.29841805]
[159.79022217 -21.28532791]
[174.12127686 -25.71483994]
[188.45234680 -30.14435005]
[202.78341675 -34.57386017]
[210.14570618 -40.15105820]
[217.51148987 -38.93331528]
[231.94464111 -43.01790237]
[246.37780762 -47.10248947]
[257.41625977 -59.23033142]
[273.37866211 -55.47078323]
[277.84423828 -39.69134903]
[266.21920776 -28.12455559]
[250.46238708 -32.66933060]
[236.02923584 -28.58474159]
[221.59606934 -24.50015259]
[207.21292114 -20.24279594]
[192.88186646 -15.81328583]
[178.55079651 -11.38377476]
[164.21972656 -6.95426321]
[166.05033875 6.47630119]
[162.44618225 19.13584328]
[154.31416321 28.98247910]
[143.26329041 34.55965424]
[131.29431152 35.20826340]
[126.35225677 49.37075043]
[121.41020203 63.53323746]
[116.46814728 77.69572449]
[111.52608490 91.85821533]
[113.32040405 106.75051117]
[121.48495483 119.33383179]
[135.48716736 126.69918823]
[135.92395020 141.58738708]
[144.08850098 154.17071533]
[152.25306702 166.75404358]
[160.41761780 179.33735657]
[174.11111450 189.33357239]
[168.29629517 205.25915527]
[151.38339233 204.08021545]
[147.83428955 187.50192261]
[139.66973877 174.91859436]
[131.50517273 162.33526611]
[123.34062195 149.75195312]
[109.92239380 143.28663635]
[108.90163422 127.49839020]
[100.73707581 114.91506195]
[93.24192810 114.64533234]
[100.26979065 127.89709473]
[92.30725861 140.60922241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[6 21]
[7 20]
[8 19]
[9 18]
[10 16]
[11 15]
[35 110]
[36 109]
[37 108]
[38 107]
[39 106]
[43 82]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[83 101]
[84 100]
[85 99]
[86 98]
[88 97]
[89 96]
[90 95]
[111 127]
[112 126]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
