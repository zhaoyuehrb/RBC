%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUACUUCAAACCAUUCUUCAGGGGCUGAGUUUAUCCUGGCAGGCUUGACACAACGCCCAGAACUUCAACUGCCACUCUUCCUCCUGUUCCUUGGAA\
) } def
/len { sequence length } bind def

/coor [
[59.84547806 331.60235596]
[53.18856812 345.20251465]
[42.47461700 355.90252686]
[28.86580276 362.54171753]
[13.83830261 364.39993286]
[-0.97781235 361.27557373]
[-13.97539997 353.50759888]
[-23.74457932 341.93859863]
[-29.22566414 327.82348633]
[-29.82410431 312.69335938]
[-25.47498894 298.18945312]
[-16.65007591 285.88497925]
[-4.30662489 277.11471558]
[10.21643734 272.82992554]
[25.34375763 273.49542236]
[30.81353188 259.52825928]
[36.28330231 245.56109619]
[26.05419350 234.70610046]
[21.53389740 220.42758179]
[23.67005539 205.54141235]
[32.09199524 193.00781250]
[45.17372513 185.34262085]
[60.34764481 184.11238098]
[65.81742096 170.14521790]
[71.28719330 156.17805481]
[76.75696564 142.21089172]
[82.00885773 128.16035461]
[87.04161072 114.02983856]
[80.92243195 100.89584351]
[85.78390503 87.24622345]
[98.82787323 80.93740845]
[103.86062622 66.80689240]
[108.89337158 52.67638016]
[113.92612457 38.54586792]
[99.89237976 43.84246445]
[85.65325928 39.12574768]
[77.55679321 26.49850464]
[79.21252441 11.59016609]
[89.88230133 1.04711461]
[104.80935669 -0.43038580]
[117.33896637 7.81635904]
[121.88518524 22.11221123]
[129.85154724 9.40248966]
[137.81791687 -3.30723071]
[145.78428650 -16.01695061]
[153.75065613 -28.72667122]
[154.39770508 -35.59693146]
[157.97662354 -40.29811859]
[162.62829590 -41.95724106]
[171.36940002 -54.14710999]
[180.11051941 -66.33697510]
[188.85163879 -78.52684784]
[180.27668762 -91.02668762]
[176.49707031 -105.70627594]
[177.96920776 -120.79298401]
[184.51531982 -134.46501160]
[195.34492493 -145.07139587]
[209.15031433 -151.33135986]
[224.26440430 -152.48899841]
[238.86209106 -148.40449524]
[251.18064880 -139.57110596]
[259.73254395 -127.05547333]
[263.48510742 -112.36894989]
[261.98516846 -97.28498077]
[255.41387939 -83.62504578]
[244.56474304 -73.03863525]
[230.74784851 -66.80412292]
[215.63165283 -65.67433929]
[201.04150391 -69.78572845]
[192.30038452 -57.59586334]
[183.55928040 -45.40599442]
[174.81816101 -33.21612549]
[166.46037292 -20.76030540]
[158.49400330 -8.05058384]
[150.52763367 4.65913630]
[142.56127930 17.36885643]
[134.59490967 30.07857704]
[128.05664062 43.57861710]
[123.02388763 57.70912933]
[117.99114227 71.83964539]
[112.95838928 85.97016144]
[119.07756805 99.10415649]
[114.21609497 112.75377655]
[101.17212677 119.06259155]
[96.13937378 133.19309998]
[96.19053650 142.50921631]
[90.72412872 147.68066406]
[85.25435638 161.64782715]
[79.78457642 175.61499023]
[74.31480408 189.58215332]
[84.61791229 200.78961182]
[89.01534271 215.29994202]
[86.68614197 230.21955872]
[78.14521790 242.59751892]
[65.13070679 250.00912476]
[50.25046539 251.03086853]
[44.78069305 264.99801636]
[39.31092072 278.96517944]
[50.86718750 288.74942017]
[58.61822891 301.75711060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 98]
[16 97]
[17 96]
[23 90]
[24 89]
[25 88]
[26 87]
[27 85]
[28 84]
[31 81]
[32 80]
[33 79]
[34 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[49 72]
[50 71]
[51 70]
[52 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
