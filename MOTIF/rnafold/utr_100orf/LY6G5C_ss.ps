%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGUUUUAUGGCAGGCCCUGCAGGGAGCCAGAGUCUGGGUCCCCUGUGCUUCCACAGCAGCCCCCAAGCCCUCUACACGGUCCUCUUAAUAGUGCUGG\
) } def
/len { sequence length } bind def

/coor [
[159.91696167 171.69569397]
[151.61288452 184.18737793]
[138.80311584 191.99185181]
[123.89424896 193.64286804]
[109.68725586 188.83026123]
[98.85121918 178.45816040]
[93.42193604 164.47520447]
[94.41941833 149.50840759]
[101.65625000 136.36961365]
[113.77285767 127.52720642]
[128.49172974 124.64243317]
[115.42428589 117.27751923]
[102.35684204 109.91261292]
[94.19438934 108.98020935]
[89.00268555 102.11000061]
[76.17060852 94.34225464]
[63.33853531 86.57450867]
[50.50645828 78.80676270]
[44.92626572 78.71310425]
[40.46541977 76.59502411]
[37.72989273 73.26762390]
[36.88875198 69.66935730]
[24.83629608 60.73972702]
[12.78384209 51.81009674]
[0.73138791 42.88046265]
[-11.32106686 33.95082855]
[-23.51093483 25.20971298]
[-35.83526993 16.65922928]
[-51.58430862 15.14982510]
[-57.63080978 1.53773057]
[-69.95514679 -7.01275349]
[-82.27947998 -15.56323719]
[-94.60381317 -24.11372185]
[-111.06420898 -28.17473030]
[-111.71859741 -45.11604309]
[-95.62050629 -50.43468094]
[-86.05332947 -36.43805695]
[-73.72899628 -27.88757133]
[-61.40465927 -19.33708763]
[-49.08032608 -10.78660393]
[-34.21280289 -9.88878727]
[-27.28478622 4.33489466]
[-14.96045113 12.88537884]
[-7.53975391 14.13387680]
[-2.39143348 21.89837456]
[9.66102123 30.82800674]
[21.71347427 39.75764084]
[33.76593018 48.68727493]
[45.81838226 57.61690521]
[58.27420425 65.97469330]
[71.10627747 73.74243164]
[83.93835449 81.51017761]
[96.77043152 89.27792358]
[109.72175598 96.84516907]
[122.78919983 104.21007538]
[135.85664368 111.57498932]
[150.06372070 116.38737488]
[164.91700745 118.48010254]
[179.77030945 120.57283783]
[194.62361145 122.66556549]
[209.47691345 124.75829315]
[216.55290222 109.51766205]
[227.90480042 97.15277100]
[242.45605469 88.82046509]
[258.83148193 85.29591370]
[275.48721313 86.90049744]
[290.85626221 93.47255707]
[303.49597168 104.38357544]
[312.22338867 118.59829712]
[316.22595215 134.77294922]
[331.20962524 135.47254944]
[346.19329834 136.17216492]
[355.78408813 123.97394562]
[370.72225952 119.77510071]
[385.26382446 125.19017792]
[393.81719971 138.13696289]
[393.09347534 153.63714600]
[383.37094116 165.73060608]
[368.38806152 169.76715088]
[353.90612793 164.19464111]
[345.49368286 151.15583801]
[330.51000977 150.45622253]
[315.52633667 149.75662231]
[311.51101685 162.49409485]
[304.50250244 173.87516785]
[294.92034912 183.20863342]
[283.34066772 189.92614746]
[270.46139526 193.61688232]
[257.06027222 194.05258179]
[243.94779968 191.20173645]
[231.91836548 185.23176575]
[221.70199585 176.49920654]
[213.92008972 165.52842712]
[209.04762268 152.98014832]
[207.38418579 139.61158752]
[192.53088379 137.51885986]
[177.67758179 135.42613220]
[162.82427979 133.33340454]
[147.97097778 131.24067688]
[157.90722656 142.47772217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 56]
[12 55]
[13 54]
[15 53]
[16 52]
[17 51]
[18 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 43]
[28 42]
[30 40]
[31 39]
[32 38]
[33 37]
[57 99]
[58 98]
[59 97]
[60 96]
[61 95]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
