%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACAGCAUGGCCCGUACUAAGCAGACUGCCCGCAAGUCGACCGGCGGCAAGGCCCCGAGGAAGCAGCUGGCUACCAAAGCGGCCCGCAAGAGCGCGCCGGCCACGG\
) } def
/len { sequence length } bind def

/coor [
[123.26876831 293.47988892]
[109.59609985 300.18646240]
[94.37744904 300.74554443]
[80.24954224 295.06030273]
[69.66011810 284.11572266]
[64.44385529 269.80801392]
[65.50451660 254.61607361]
[72.65832520 241.17201233]
[84.66584015 231.80508423]
[99.44669342 228.13816833]
[102.02775574 213.36189270]
[104.60882568 198.58563232]
[107.18988800 183.80935669]
[109.77095795 169.03309631]
[100.42173767 180.76306152]
[95.79010773 195.03007507]
[84.78421021 205.22175598]
[70.20393372 208.74533081]
[55.75848389 204.70440674]
[45.12277222 194.12699890]
[41.00250626 179.70397949]
[44.44587708 165.10455322]
[54.57689667 154.04280090]
[68.81824493 149.33280945]
[83.54682922 152.17276001]
[98.33427429 149.65649414]
[84.15071106 144.77525330]
[69.96715546 139.89399719]
[55.78359222 135.01274109]
[42.47496414 143.22337341]
[27.00984573 140.90731812]
[16.69038963 129.15815735]
[16.38912964 113.52348328]
[26.24831009 101.38549805]
[41.61272812 98.47540283]
[55.22777557 106.16725159]
[60.66484451 120.82918549]
[74.84840393 125.71043396]
[89.03196716 130.59169006]
[103.21552277 135.47293091]
[80.37345886 128.01429749]
[68.29441833 108.37167358]
[71.65488434 86.53880310]
[87.61968994 72.71096802]
[85.03862000 57.93470383]
[82.45755768 43.15843582]
[77.83429718 35.09986115]
[80.02144623 27.91961288]
[77.86727905 13.07509995]
[75.71310425 -1.76941228]
[67.45475769 -16.57603455]
[79.39659882 -28.61052132]
[94.26660156 -20.46685410]
[90.55761719 -3.92358446]
[92.71179199 10.92092800]
[94.86595917 25.76543999]
[97.23382568 40.57736969]
[99.81488800 55.35363770]
[102.39595795 70.12990570]
[127.49617004 82.13133240]
[133.60070801 111.81784058]
[144.72857666 101.75948334]
[149.77803040 86.76570129]
[164.40815735 83.97131348]
[175.53602600 73.91294861]
[186.66389465 63.85459137]
[188.90553284 47.96891785]
[202.79573059 39.94136810]
[217.67915344 45.92998886]
[222.13848877 61.34082794]
[212.75291443 74.35200500]
[196.72225952 74.98246002]
[185.59439087 85.04081726]
[174.46652222 95.09917450]
[170.21299744 109.37351990]
[154.78692627 112.88735199]
[143.65907288 122.94570923]
[144.30674744 130.41769409]
[158.11901855 124.56780243]
[167.95080566 135.89634705]
[160.21487427 148.74763489]
[145.60212708 145.36164856]
[146.24981689 152.83363342]
[158.94245911 160.82717896]
[171.63510132 168.82073975]
[187.43569946 169.62777710]
[194.08198547 182.95730591]
[206.77462769 190.95085144]
[219.46726990 198.94439697]
[235.86618042 199.03341675]
[243.75236511 213.41188049]
[235.01319885 227.28845215]
[218.63879395 226.38810730]
[211.47370911 211.63703918]
[198.78108215 203.64349365]
[186.08843994 195.64993286]
[171.19569397 195.41465759]
[163.64154053 181.51338196]
[150.94889832 173.51982117]
[138.25625610 165.52627563]
[124.54722595 171.61415100]
[121.96615601 186.39042664]
[119.38509369 201.16668701]
[116.80402374 215.94296265]
[114.22296143 230.71922302]
[126.88541412 239.17985535]
[135.00640869 252.06275940]
[137.17892456 267.13592529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 105]
[11 104]
[12 103]
[13 102]
[14 101]
[26 40]
[27 39]
[28 38]
[29 37]
[44 59]
[45 58]
[46 57]
[48 56]
[49 55]
[50 54]
[61 77]
[62 76]
[64 74]
[65 73]
[66 72]
[83 100]
[84 99]
[85 98]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
