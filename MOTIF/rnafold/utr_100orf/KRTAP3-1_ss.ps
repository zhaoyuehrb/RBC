%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUUCUCUCAACUCAACAAAAACCCACCUCCCAUUGCCAUGUAUUGCUGUGCUCUCCGCUCCUGCAGCGUCCCCACCGGCCCUGCCACCACCUUCUGCUCAUUUGAUAAAAGCUGCCGCUGUGGAGUCUGCCUACCCA\
) } def
/len { sequence length } bind def

/coor [
[-47.95412064 277.13156128]
[-52.99956894 283.00234985]
[-58.51753616 288.43060303]
[-64.46936035 293.37844849]
[-70.81335449 297.81134033]
[-77.50509644 301.69836426]
[-84.49772644 305.01239014]
[-91.74230194 307.73034668]
[-99.18812561 309.83328247]
[-106.78308105 311.30661011]
[-114.47403717 312.14010620]
[-122.20719147 312.32800293]
[-129.92845154 311.86911011]
[-137.58381653 310.76672363]
[-145.11975098 309.02865601]
[-152.48356628 306.66711426]
[-159.62380981 303.69873047]
[-166.49053955 300.14437866]
[-173.03579712 296.02893066]
[-179.21385193 291.38131714]
[-184.98152161 286.23410034]
[-190.29855347 280.62335205]
[-195.12780762 274.58834839]
[-199.43559265 268.17138672]
[-203.19184875 261.41738892]
[-206.37039185 254.37367249]
[-208.94906616 247.08949280]
[-210.90991211 239.61585999]
[-212.23931885 232.00505066]
[-212.92808533 224.31033325]
[-212.97146606 216.58552551]
[-212.36926270 208.88465881]
[-211.12579346 201.26158142]
[-209.24981689 193.76960754]
[-223.24752808 188.37849426]
[-237.24522400 182.98738098]
[-252.90412903 185.24778748]
[-262.00012207 173.45320129]
[-275.99783325 168.06208801]
[-288.94723511 176.61149597]
[-304.44720459 175.88301086]
[-316.53768921 166.15673828]
[-320.56961060 151.17263794]
[-314.99264526 136.69241333]
[-301.95126343 128.28398132]
[-286.46011353 129.18057251]
[-274.47586060 139.03742981]
[-270.60671997 154.06437683]
[-256.60900879 159.45550537]
[-241.95132446 156.80947876]
[-231.85411072 168.98966980]
[-217.85639954 174.38078308]
[-203.85868835 179.77189636]
[-188.23811340 156.84736633]
[-166.50491333 139.58673096]
[-140.61457825 129.55299377]
[-112.89959717 127.65837097]
[-85.85929108 134.08149719]
[-61.93445206 148.25056458]
[-43.28702164 168.89419556]
[-30.13277245 161.68547058]
[-16.97852325 154.47673035]
[-3.82427454 147.26800537]
[9.32997417 140.05928040]
[13.71950436 134.03770447]
[22.85856628 132.84020996]
[36.17015076 125.92633820]
[49.48173904 119.01245880]
[62.79332733 112.09858704]
[76.10491180 105.18471527]
[89.41649628 98.27083588]
[74.41979218 97.95642090]
[60.04191971 93.68128967]
[49.67146301 82.84368896]
[46.03357315 68.29151917]
[50.08421707 53.84878922]
[60.75896072 43.31077194]
[75.25270081 39.44664383]
[89.75666046 43.27175140]
[88.23555756 58.19442749]
[96.72476196 45.82780457]
[105.21396637 33.46118164]
[109.19322968 16.98083496]
[126.13108063 16.24236679]
[131.52955627 32.31385803]
[117.58058929 41.95038986]
[109.09138489 54.31701279]
[100.60218048 66.68363190]
[103.68320465 73.52156067]
[117.06205750 66.73877716]
[130.44091797 59.95598221]
[140.03303528 48.42380524]
[154.89605713 50.44632339]
[161.05793762 64.12226105]
[152.72618103 76.59550476]
[137.73341370 76.14073181]
[123.78933716 81.66907501]
[109.84526062 87.19742584]
[112.92628479 94.03535461]
[127.81379700 95.86891937]
[138.41972351 84.69660950]
[153.39555359 81.94382477]
[166.96028137 88.46012878]
[174.00259399 101.55760193]
[188.89010620 103.39117432]
[203.77761841 105.22473907]
[218.65603638 98.32802582]
[231.91044617 107.98476410]
[229.90585327 124.26093292]
[214.70440674 130.41299438]
[201.94404602 120.11225128]
[187.05653381 118.27868652]
[172.16902161 116.44511414]
[162.15916443 127.44242096]
[147.41867065 130.47261047]
[133.55831909 124.16831970]
[125.98022461 110.75643158]
[111.09271240 108.92286682]
[96.33037567 111.58242798]
[83.01878357 118.49629974]
[69.70719910 125.41017151]
[56.39561462 132.32405090]
[43.08402634 139.23791504]
[29.77243996 146.15179443]
[16.53870010 153.21353149]
[3.38445187 160.42225647]
[-9.76979733 167.63098145]
[-22.92404556 174.83970642]
[-36.07829666 182.04844666]
[-33.22164154 189.25074768]
[-30.97695351 196.66604614]
[-29.35984612 204.24244690]
[-28.38154030 211.92691040]
[-28.04878616 219.66569519]
[-28.36381721 227.40467834]
[-29.32433891 235.08970642]
[-30.92354202 242.66706848]
[-33.15015030 250.08378601]
[-35.98850250 257.28799438]
[-39.41865921 264.22930908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 53]
[35 52]
[36 51]
[38 49]
[39 48]
[60 129]
[61 128]
[62 127]
[63 126]
[64 125]
[66 124]
[67 123]
[68 122]
[69 121]
[70 120]
[71 119]
[80 88]
[81 87]
[82 86]
[99 118]
[100 117]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
