%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGCGGCGGCUGGCGUCGGGAAAGUACAGUAAAAAGUCCGAGUGCAGCCGCCGGGCGCAGGAUGGGAUCCGGCUCCUCCAGCUACCGGCCCAAGGCCAUCUACCUGGACAUCGAUGGACGCAUUCAGAAGGUAAUCUUCAGCAAGUACUGCAACUCCAGCG\
) } def
/len { sequence length } bind def

/coor [
[-21.00928497 174.89494324]
[-25.08342934 175.60858154]
[-28.52811241 174.67095947]
[-42.21566772 180.80697632]
[-48.80397034 187.20280457]
[-56.22467041 186.92665100]
[-70.02725220 192.79937744]
[-83.82982635 198.67210388]
[-97.63240814 204.54481506]
[-111.43498230 210.41754150]
[-125.23756409 216.29025269]
[-139.04014587 222.16297913]
[-152.84271240 228.03570557]
[-166.64529419 233.90841675]
[-170.22581482 248.89128113]
[-181.80680847 258.77734375]
[-196.81094360 259.93475342]
[-209.46806335 252.12864685]
[-223.27062988 258.00137329]
[-237.07321167 263.87408447]
[-250.87579346 269.74679565]
[-264.67837524 275.61953735]
[-263.84735107 290.75509644]
[-268.24609375 305.26119995]
[-277.34344482 317.38613892]
[-290.04080200 325.66580200]
[-304.80493164 329.10034180]
[-319.85299683 327.27505493]
[-333.36785889 320.41033936]
[-343.71752930 309.33514404]
[-349.65225220 295.38687134]
[-350.45535278 280.24978638]
[-346.02990723 265.75183105]
[-336.91024780 253.64366150]
[-324.19763184 245.38742065]
[-309.42718506 241.98007202]
[-294.38253784 243.83308411]
[-280.88034058 250.72270203]
[-270.55108643 261.81695557]
[-256.74850464 255.94422913]
[-242.94593811 250.07150269]
[-229.14335632 244.19879150]
[-215.34077454 238.32606506]
[-212.18840027 223.79333496]
[-200.95008850 213.78511047]
[-185.79634094 212.29608154]
[-172.51802063 220.10583496]
[-158.71543884 214.23312378]
[-144.91285706 208.36039734]
[-131.11027527 202.48768616]
[-117.30770111 196.61495972]
[-103.50512695 190.74223328]
[-89.70254517 184.86952209]
[-75.89997101 178.99679565]
[-62.09739304 173.12408447]
[-48.35169601 167.11943054]
[-34.66414261 160.98339844]
[-21.15852547 154.45666504]
[-7.84599972 147.54458618]
[5.46652603 140.63252258]
[13.19661999 127.90087891]
[29.00967979 128.40856934]
[42.32220459 121.49649811]
[55.63473129 114.58443451]
[52.63106537 90.93688965]
[61.80747604 68.11074829]
[81.52976990 52.15916443]
[76.19003296 38.14177322]
[70.85029602 24.12438202]
[56.32811356 17.88885880]
[50.54623413 3.18017387]
[56.93494797 -11.27527237]
[71.70394135 -16.90131950]
[86.09103394 -10.36013317]
[91.56061554 4.46751642]
[84.86769104 18.78464699]
[90.20742035 32.80203629]
[95.54715729 46.81942749]
[110.52239227 47.68097687]
[117.43445587 34.36845016]
[124.34652710 21.05592346]
[131.25859070 7.74339819]
[138.17065430 -5.56912756]
[137.66296387 -21.38218689]
[150.39462280 -29.11227989]
[157.30668640 -42.42480469]
[151.71876526 -58.97819138]
[159.65467834 -74.16348267]
[175.78761292 -78.83900452]
[182.44340515 -92.28148651]
[189.09919739 -105.72397614]
[195.75500488 -119.16645813]
[197.36460876 -136.04382324]
[214.02799988 -139.16923523]
[221.64413452 -124.02226257]
[209.19747925 -112.51065826]
[202.54168701 -99.06817627]
[195.88589478 -85.62569427]
[189.23008728 -72.18321228]
[195.02633667 -60.64498901]
[193.07522583 -47.68386078]
[183.86933899 -38.08199310]
[170.61921692 -35.51274109]
[163.70713806 -22.20021439]
[164.70922852 -7.33935738]
[151.48318481 1.34293783]
[144.57112122 14.65546417]
[137.65905762 27.96798897]
[130.74697876 41.28051758]
[123.83492279 54.59304047]
[130.45889282 59.88753510]
[136.00352478 66.10252380]
[140.34985352 73.02964783]
[143.41758728 80.44700623]
[145.16629028 88.12615204]
[160.09754944 86.69164276]
[175.02879333 85.25713348]
[189.96003723 83.82262421]
[202.99148560 73.86704254]
[218.02285767 80.42371368]
[219.59117126 96.74769592]
[206.08308411 106.04627991]
[191.39454651 98.75387573]
[176.46330261 100.18837738]
[161.53205872 101.62288666]
[146.60079956 103.05739594]
[146.22325134 106.66288757]
[145.56715393 110.22823334]
[144.63648987 113.73194885]
[158.07897949 120.38774109]
[171.52145386 127.04354095]
[184.96394348 133.69934082]
[200.56265259 129.94967651]
[213.13084412 139.92065430]
[213.02726746 155.96336365]
[200.33139038 165.77124023]
[184.78239441 161.82049561]
[178.30815125 147.14181519]
[164.86566162 140.48602295]
[151.42317200 133.83023071]
[137.98069763 127.17443085]
[135.45355225 130.39784241]
[132.65368652 133.38742065]
[141.28346252 145.65635681]
[149.91323853 157.92530823]
[165.40818787 162.08299255]
[171.68615723 176.84667969]
[163.93125916 190.89093018]
[148.09236145 193.44219971]
[136.31971741 182.54336548]
[137.64430237 166.55508423]
[129.01452637 154.28613281]
[120.38474274 142.01719666]
[104.94680786 146.43826294]
[88.92397308 145.36854553]
[74.21074677 138.93452454]
[62.54679489 127.89695740]
[49.23427200 134.80902100]
[35.92174530 141.72108459]
[27.23944855 154.94714355]
[12.37859154 153.94505310]
[-0.93393433 160.85711670]
[-14.24645996 167.76918030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[58 163]
[59 162]
[60 161]
[62 159]
[63 158]
[64 157]
[67 78]
[68 77]
[69 76]
[79 110]
[80 109]
[81 108]
[82 107]
[83 106]
[85 104]
[86 103]
[89 99]
[90 98]
[91 97]
[92 96]
[115 126]
[116 125]
[117 124]
[118 123]
[129 141]
[130 140]
[131 139]
[132 138]
[143 153]
[144 152]
[145 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
