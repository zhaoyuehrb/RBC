%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUUCUCGUGUUGCUGCAAUUUGAUGCGAGGAGAUGUCUGGACGAGGGAAGCAGGGAGGAAAAGCACGCGCCAAGUCUAAGUCUCGCUCUUCUAGAGCGGGUUUGCAGUUUCCCGUAGGCCGGAUCCAUCGUC\
) } def
/len { sequence length } bind def

/coor [
[-70.13619995 399.90777588]
[-84.97689056 402.08816528]
[-98.34654999 395.28726196]
[-105.32351685 382.00863647]
[-103.33894348 367.13943481]
[-115.09721375 376.45303345]
[-126.85548401 385.76660156]
[-138.61375427 395.08020020]
[-150.37202454 404.39379883]
[-162.13029480 413.70739746]
[-173.88856506 423.02099609]
[-185.64683533 432.33459473]
[-197.40510559 441.64819336]
[-209.16337585 450.96179199]
[-220.92164612 460.27539062]
[-220.14212036 475.77285767]
[-228.64881897 488.75036621]
[-243.17077637 494.21777344]
[-258.12399292 490.07275391]
[-267.75863647 477.90914917]
[-268.37002563 462.40411377]
[-259.72302246 449.51968384]
[-245.14260864 444.21011353]
[-230.23524475 448.51712036]
[-218.47697449 439.20352173]
[-206.71870422 429.88992310]
[-194.96043396 420.57632446]
[-183.20216370 411.26272583]
[-171.44389343 401.94912720]
[-159.68562317 392.63552856]
[-147.92735291 383.32192993]
[-136.16908264 374.00833130]
[-124.41081238 364.69476318]
[-112.65254211 355.38116455]
[-101.80377960 345.02236938]
[-91.95708466 333.70678711]
[-82.11038971 322.39120483]
[-72.26368713 311.07559204]
[-62.68098831 299.53558350]
[-53.36739349 287.77731323]
[-44.05379868 276.01904297]
[-34.74020004 264.26077271]
[-25.42660522 252.50250244]
[-31.74281120 237.67404175]
[-29.73314667 221.58787537]
[-19.84948921 208.62022400]
[-4.69864416 202.34657288]
[11.64464283 204.55604553]
[20.68416214 192.58578491]
[29.72368240 180.61553955]
[38.76320267 168.64527893]
[47.80271912 156.67501831]
[56.84223938 144.70475769]
[65.88175964 132.73449707]
[56.20748138 117.82743073]
[52.71955872 100.40196228]
[55.91070938 82.91971588]
[65.33013153 67.85031891]
[79.64720154 57.32254410]
[96.83940887 52.82360458]
[98.22343445 37.88759232]
[99.60746002 22.95157814]
[86.76917267 12.00512886]
[82.99011993 -4.26766253]
[89.55892181 -19.44756699]
[103.72161865 -27.66614914]
[104.76028442 -42.63014603]
[97.08152771 -57.12044144]
[106.01918793 -70.86999512]
[122.37896729 -69.73444366]
[129.33132935 -54.88195038]
[119.72428131 -41.59148026]
[118.68561554 -26.62748337]
[129.70381165 -19.00086021]
[135.54098511 -6.81832981]
[134.56564331 6.76400042]
[126.92690277 18.16788101]
[114.54347229 24.33560371]
[113.15944672 39.27161407]
[111.77542114 54.20763016]
[118.83567047 56.63158798]
[125.42643738 60.13650894]
[131.38345337 64.63503265]
[136.55822754 70.01503754]
[140.82177734 76.14242554]
[154.80886841 70.72380066]
[168.79594421 65.30517578]
[182.78303528 59.88654709]
[196.77011108 54.46792221]
[210.75720215 49.04929733]
[224.74427795 43.63067245]
[238.73136902 38.21204758]
[251.31672668 26.85224915]
[265.71655273 35.80106354]
[261.10372925 52.11542130]
[244.14999390 52.19913101]
[230.16290283 57.61775589]
[216.17582703 63.03638077]
[202.18873596 68.45500946]
[188.20166016 73.87363434]
[174.21456909 79.29225922]
[160.22749329 84.71088409]
[146.24040222 90.12950897]
[146.97640991 105.36826324]
[142.82144165 120.04810333]
[134.20806885 132.64060974]
[122.03309631 141.83473206]
[107.56414032 146.67317200]
[92.30763245 146.65222168]
[77.85202026 141.77401733]
[68.81250000 153.74427795]
[59.77297974 165.71453857]
[50.73345947 177.68479919]
[41.69393921 189.65505981]
[32.65441895 201.62530518]
[23.61490059 213.59556580]
[29.74248123 226.22410583]
[29.81118393 240.19422913]
[23.86484337 252.76248169]
[13.12291527 261.48547363]
[-0.26916206 264.69482422]
[-13.66833496 261.81610107]
[-22.98193169 273.57437134]
[-32.29552460 285.33264160]
[-41.60912323 297.09091187]
[-50.92271805 308.84918213]
[-52.29166794 315.46612549]
[-56.24524307 319.70507812]
[-60.94810104 320.92230225]
[-70.79479218 332.23788452]
[-80.64148712 343.55346680]
[-90.48818970 354.86907959]
[-75.54428101 353.57305908]
[-62.60169601 361.15527344]
[-56.42489243 374.82446289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[35 132]
[36 131]
[37 130]
[38 129]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[48 116]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
[54 110]
[60 80]
[61 79]
[62 78]
[66 73]
[67 72]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
