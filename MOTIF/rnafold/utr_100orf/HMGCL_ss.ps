%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCGGGGCCCAGCUGGACUGCCGCGGGGGAUUCUGGGCCAAGAUGGCAGCAAUGAGGAAGGCGCUUCCGCGGCGACUGGUGGGCUUGGCGUCCCUCCGGGCUGUCAGCACCUCAUCUAUGGGCACUUUACCAAAGCGGGUGA\
) } def
/len { sequence length } bind def

/coor [
[83.69362640 104.90940857]
[90.55278778 98.37253571]
[77.30010986 91.34641266]
[64.04743195 84.32028198]
[50.79474640 77.29415894]
[34.97791290 77.66603851]
[27.35743141 64.86847687]
[14.10475063 57.84235001]
[0.85206985 50.81622696]
[-12.40061092 43.79010010]
[-25.65329170 36.76397324]
[-38.90597153 29.73784637]
[-52.15865326 22.71171951]
[-61.28054047 21.43868828]
[-65.61990356 15.38711262]
[-78.71726227 8.07552242]
[-91.81461334 0.76393276]
[-104.91196442 -6.54765701]
[-117.56062317 -3.78647423]
[-128.33895874 -10.20497894]
[-131.71311951 -21.86967659]
[-144.64900208 -29.46329880]
[-157.58486938 -37.05691910]
[-170.52075195 -44.65053940]
[-183.45663452 -52.24415970]
[-196.39250183 -59.83778000]
[-209.32838440 -67.43140411]
[-222.26426697 -75.02502441]
[-235.20013428 -82.61864471]
[-248.13601685 -90.21226501]
[-261.07189941 -97.80588531]
[-276.18829346 -94.04656219]
[-289.19894409 -101.93184662]
[-292.68972778 -116.36618042]
[-305.62557983 -123.95980072]
[-318.56146240 -131.55342102]
[-340.96954346 -122.78704834]
[-362.50262451 -132.95962524]
[-369.80908203 -155.36666870]
[-383.97116089 -160.30990601]
[-398.13323975 -165.25312805]
[-412.29531860 -170.19636536]
[-429.24221802 -169.70753479]
[-434.40328979 -185.85682678]
[-420.31387329 -195.28678894]
[-407.35208130 -184.35844421]
[-393.19000244 -179.41520691]
[-379.02792358 -174.47198486]
[-364.86584473 -169.52874756]
[-360.37435913 -174.87347412]
[-354.74267578 -179.03042603]
[-348.27807617 -181.76214600]
[-341.33575439 -182.90919495]
[-334.29943848 -182.39949036]
[-327.55993652 -180.25274658]
[-321.49374390 -176.57986450]
[-316.44171143 -171.57719421]
[-312.69012451 -165.51612854]
[-310.45434570 -158.72833252]
[-309.86651611 -151.58760071]
[-310.96783447 -144.48930359]
[-298.03198242 -136.89567566]
[-285.09609985 -129.30206299]
[-270.79110718 -133.28991699]
[-257.56411743 -125.77318573]
[-253.47827148 -110.74176025]
[-240.54240417 -103.14813995]
[-227.60652161 -95.55451965]
[-214.67063904 -87.96089935]
[-201.73477173 -80.36727905]
[-188.79888916 -72.77365875]
[-175.86300659 -65.18003845]
[-162.92713928 -57.58641815]
[-149.99125671 -49.99279785]
[-137.05537415 -42.39917374]
[-124.11949921 -34.80555344]
[-106.62287140 -35.65793228]
[-97.60037231 -19.64500999]
[-84.50302124 -12.33341980]
[-71.40567017 -5.02183056]
[-58.30831528 2.28975940]
[-45.13252640 9.45903778]
[-31.87984467 16.48516464]
[-18.62716484 23.51129150]
[-5.37448406 30.53741837]
[7.87819624 37.56354523]
[21.13087654 44.58967209]
[34.38355637 51.61579895]
[49.25247192 50.74135971]
[57.82087326 64.04147339]
[71.07355499 71.06760406]
[84.32623291 78.09372711]
[97.57891846 85.11985779]
[112.57803345 85.28234863]
[125.97982025 78.54498291]
[139.38160706 71.80761719]
[150.81736755 59.29123306]
[166.01033020 66.81519318]
[162.98625183 83.49725342]
[146.11897278 85.20940399]
[132.71719360 91.94676971]
[119.31539917 98.68413544]
[118.18228149 106.09804535]
[133.17352295 106.61061096]
[148.14549255 105.69402313]
[154.57371521 119.24680328]
[144.39123535 130.26121521]
[130.37600708 124.91452789]
[115.91604614 120.92586517]
[114.78292847 128.33976746]
[125.56047821 138.77262878]
[136.33802795 149.20549011]
[147.11557007 159.63833618]
[157.89311218 170.07119751]
[168.83378601 169.26692200]
[178.19816589 174.54551697]
[182.97424316 183.92913818]
[181.78187561 194.16860962]
[192.09736633 205.05854797]
[207.20498657 209.75646973]
[210.34028625 224.31735229]
[220.65577698 235.20727539]
[230.97126770 246.09721375]
[246.33937073 243.95225525]
[260.01733398 251.27980042]
[266.74569702 265.26223755]
[263.93728638 280.52307129]
[252.67195129 291.19415283]
[237.28147888 293.17224121]
[223.68380737 285.69674683]
[217.10751343 271.64215088]
[220.08132935 256.41268921]
[209.76583862 245.52276611]
[199.45034790 234.63284302]
[185.08056641 230.71383667]
[181.20744324 215.37403870]
[170.89195251 204.48410034]
[152.02932739 200.43240356]
[147.46026611 180.84873962]
[136.68272400 170.41589355]
[125.90516663 159.98303223]
[115.12762451 149.55017090]
[104.35007477 139.11732483]
[88.98780060 129.95539856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 93]
[3 92]
[4 91]
[5 90]
[7 88]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[15 81]
[16 80]
[17 79]
[18 78]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[34 63]
[35 62]
[36 61]
[39 49]
[40 48]
[41 47]
[42 46]
[94 102]
[95 101]
[96 100]
[110 143]
[111 142]
[112 141]
[113 140]
[114 139]
[118 137]
[119 136]
[121 134]
[122 133]
[123 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
