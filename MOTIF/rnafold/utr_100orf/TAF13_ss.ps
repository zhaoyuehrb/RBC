%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUAACCAGCUGGGAGCCAGCCGGCAGGACGCUGUGAGUUGGCGUGCUAGUGGGAUGGCAGAUGAGGAAGAAGACCCCACGUUUGAGGAAGAAAAUGAAGAAAUUGGAGGAGGUGCAGAAGGUGGACAGGGUAAAAGAAAGAGACUUUUUUCUA\
) } def
/len { sequence length } bind def

/coor [
[-130.34173584 194.55804443]
[-144.47125244 199.59361267]
[-147.32925415 214.61956787]
[-157.25903320 226.12156677]
[-171.51803589 231.07606506]
[-186.24395752 228.24705505]
[-197.50082397 218.49264526]
[-211.63032532 223.52821350]
[-225.75984192 228.56376648]
[-232.84201050 234.42529297]
[-240.22488403 233.55535889]
[-254.45292664 238.30537415]
[-268.68096924 243.05538940]
[-282.90902710 247.80540466]
[-290.41082764 263.57824707]
[-306.67004395 268.96694946]
[-321.51129150 261.11160278]
[-335.64080811 266.14718628]
[-349.77032471 271.18273926]
[-363.89984131 276.21832275]
[-378.02932739 281.25387573]
[-392.15884399 286.28945923]
[-398.98855591 300.28921509]
[-413.38961792 305.19470215]
[-426.69415283 298.59738159]
[-440.82363892 303.63293457]
[-454.95315552 308.66848755]
[-469.08267212 313.70407104]
[-479.29000854 326.53927612]
[-495.46710205 323.84979248]
[-500.97238159 308.40234375]
[-490.14245605 296.08792114]
[-474.11825562 299.57455444]
[-459.98873901 294.53900146]
[-445.85922241 289.50341797]
[-431.72970581 284.46786499]
[-425.59640503 270.94314575]
[-411.33880615 265.63507080]
[-397.19442749 272.15994263]
[-383.06491089 267.12438965]
[-368.93539429 262.08880615]
[-354.80587769 257.05325317]
[-340.67639160 252.01766968]
[-326.54687500 246.98210144]
[-322.68865967 234.65319824]
[-312.26763916 226.69302368]
[-298.96841431 226.19912720]
[-287.65905762 233.57736206]
[-273.43099976 228.82734680]
[-259.20294189 224.07733154]
[-244.97489929 219.32730103]
[-230.79541016 214.43426514]
[-216.66589355 209.39869690]
[-202.53639221 204.36312866]
[-199.98590088 189.68795776]
[-190.36833191 178.18325806]
[-176.18977356 173.00299072]
[-161.22372437 175.63246155]
[-149.50682068 185.46409607]
[-135.37730408 180.42854309]
[-133.61328125 170.21635437]
[-127.69853973 161.60803223]
[-118.65891266 156.21611023]
[-108.11277008 155.08477783]
[-97.98144531 158.48825073]
[-90.13916016 165.86833191]
[-75.73138428 161.69506836]
[-61.32361221 157.52180481]
[-46.91584015 153.34854126]
[-32.50806808 149.17527771]
[-18.10029793 145.00201416]
[-3.69252658 140.82876587]
[10.71524525 136.65550232]
[25.12301636 132.48223877]
[38.92270660 126.60273743]
[51.91308975 119.10273743]
[64.90347290 111.60273743]
[77.89385223 104.10273743]
[76.22997284 87.79148102]
[86.85935211 71.96681976]
[107.66904449 65.64709473]
[114.37101746 52.22757339]
[121.07299805 38.80805588]
[127.77497101 25.38853645]
[134.47694397 11.96901608]
[127.20198059 -1.73698449]
[129.40592957 -17.09674644]
[140.24131775 -28.20412636]
[155.54173279 -30.78811073]
[169.42384338 -23.85510445]
[176.54969788 -10.07099152]
[174.17926025 5.26395702]
[163.22401428 16.25314140]
[147.89646912 18.67099380]
[141.19448853 32.09051132]
[134.49252319 45.51003265]
[127.79054260 58.92955017]
[121.08856201 72.34906769]
[124.50694275 79.02474976]
[136.82214355 70.46111298]
[149.13734436 61.89747620]
[161.45252991 53.33383560]
[173.76773071 44.77019882]
[184.28010559 34.07020187]
[199.26954651 33.50748825]
[210.55458069 43.38919449]
[211.97564697 58.32173157]
[202.75709534 70.15467072]
[187.93110657 72.42952728]
[173.78425598 77.41617584]
[159.63740540 82.40281677]
[145.49055481 87.38946533]
[131.34370422 92.37610626]
[134.76208496 99.05178833]
[149.56784058 101.45795441]
[164.43045044 96.03455353]
[175.75175476 105.71325684]
[190.55751038 108.11942291]
[204.36256409 99.94630432]
[219.30810547 105.77813721]
[223.92919922 121.14125061]
[214.68092346 134.25036621]
[198.65777588 135.04930115]
[188.15133667 122.92517853]
[173.34558105 120.51901245]
[159.54197693 126.11451721]
[147.16166687 116.26371002]
[132.35591125 113.85753632]
[106.56169128 128.08473206]
[85.39385223 117.09311676]
[72.40347290 124.59311676]
[59.41308975 132.09312439]
[46.42270660 139.59312439]
[61.35836411 140.98100281]
[74.27241516 148.61169434]
[82.69343567 161.02484131]
[85.00986481 175.84490967]
[80.77838898 190.23568726]
[70.80880737 201.44316101]
[57.00904465 207.32249451]
[42.02003098 206.74853516]
[28.71027946 199.83113098]
[19.62694168 187.89408875]
[16.50833702 173.22186279]
[19.95129013 158.62234497]
[29.29627800 146.89001465]
[14.88850689 151.06326294]
[0.48073539 155.23652649]
[-13.92703629 159.40979004]
[-28.33480835 163.58305359]
[-42.74258041 167.75631714]
[-57.15035248 171.92958069]
[-71.55812073 176.10284424]
[-85.96589661 180.27610779]
[-94.63303375 198.34278870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[7 54]
[8 53]
[9 52]
[11 51]
[12 50]
[13 49]
[14 48]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[25 36]
[26 35]
[27 34]
[28 33]
[66 154]
[67 153]
[68 152]
[69 151]
[70 150]
[71 149]
[72 148]
[73 147]
[74 146]
[75 133]
[76 132]
[77 131]
[78 130]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[114 128]
[115 127]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
