%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGUGACCAGCAGAAGCAGCCACAGUUCCCUCCAUCUUGUGUGAAAGGUUCGGGACUAGGGGCUGGGCAGGGUAGCAAUGGUGCCUCUGUGAAAUGCC\
) } def
/len { sequence length } bind def

/coor [
[74.51614380 351.27291870]
[67.00169373 336.69674683]
[76.09423828 323.04910278]
[76.56072998 308.05636597]
[77.02722931 293.06362915]
[77.49372864 278.07089233]
[66.74256134 272.01800537]
[59.60063934 261.86810303]
[57.50950241 249.56083679]
[60.93801880 237.48146057]
[69.27910614 227.99845886]
[80.95616913 222.99920654]
[82.35385895 208.06446838]
[83.75154877 193.12973022]
[85.14923859 178.19499207]
[86.54692841 163.26023865]
[80.02920532 149.86738586]
[89.01873779 136.84822083]
[90.41641998 121.91347504]
[91.81410980 106.97873688]
[90.18433380 92.06753540]
[85.59347534 77.78733826]
[81.00260925 63.50714111]
[75.30027771 56.13991928]
[76.49852753 48.71094513]
[72.35399628 34.29487991]
[68.20947266 19.87881660]
[64.06494904 5.46275139]
[59.92042160 -8.95331287]
[55.77589417 -23.36937714]
[51.63137054 -37.78544235]
[36.47715378 -50.89781189]
[41.50296783 -69.45997620]
[36.47021866 -83.59049225]
[31.43746758 -97.72100830]
[25.75114250 -111.60141754]
[19.42361641 -125.20150757]
[13.09609127 -138.80158997]
[6.76856565 -152.40168762]
[0.44103995 -166.00177002]
[-14.48951530 -171.18385315]
[-21.30744362 -185.44189453]
[-15.96778870 -200.31681824]
[-1.63847327 -206.98362732]
[13.17917442 -201.48699951]
[19.69410706 -187.08799744]
[14.04112911 -172.32929993]
[20.36865425 -158.72920227]
[26.69618034 -145.12911987]
[33.02370453 -131.52902222]
[39.35123062 -117.92893982]
[42.70729446 -116.38237000]
[45.41760254 -113.03440094]
[46.59676743 -108.23909760]
[45.56798172 -102.75376129]
[50.60073090 -88.62324524]
[55.63348389 -74.49272919]
[65.41316986 -70.85488892]
[71.62696838 -62.19792557]
[71.95840454 -51.32498169]
[66.04743195 -41.92996597]
[70.19195557 -27.51390266]
[74.33648682 -13.09783840]
[78.48101044 1.31822562]
[82.62553406 15.73429012]
[86.77006531 30.15035439]
[90.91458893 44.56641769]
[95.28280640 58.91628265]
[99.87366486 73.19647980]
[104.46453094 87.47667694]
[110.06564331 73.56166840]
[120.72494507 63.00803375]
[134.69506836 57.54582977]
[149.68589783 58.07047653]
[163.23997498 64.49596405]
[173.13540649 75.76896667]
[177.75001526 90.04150391]
[176.32734680 104.97388458]
[169.10061646 118.11824799]
[157.25448608 127.31984711]
[142.73091125 131.07026672]
[127.91072083 128.75469971]
[115.22338104 120.75273132]
[106.74885559 108.37641907]
[105.35116577 123.31116486]
[103.95347595 138.24589539]
[110.37122345 152.70698547]
[101.48166656 164.65792847]
[100.08397675 179.59268188]
[98.68628693 194.52742004]
[97.28859711 209.46215820]
[95.89091492 224.39689636]
[109.79208374 235.80458069]
[114.15805054 253.08947754]
[107.45901489 269.44345093]
[92.48647308 278.53738403]
[92.01997375 293.53012085]
[91.55347443 308.52285767]
[91.08698273 323.51562500]
[99.31346130 337.70211792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[18 86]
[19 85]
[20 84]
[21 70]
[22 69]
[23 68]
[25 67]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[33 57]
[34 56]
[35 55]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
