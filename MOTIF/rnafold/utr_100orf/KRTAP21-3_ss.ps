%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCAUCUCCUGACACUAUGUAUUUCAAUUACAAAAGUGUGUGUGGGAGCUGUGGAUUUGGCUCUUGCUAUGGUUGUGGGUAUGGCUGUAUACACAGCACCCACUGUGGCUGUAACG\
) } def
/len { sequence length } bind def

/coor [
[144.97703552 169.14881897]
[138.18467712 182.52282715]
[127.50820160 193.05908203]
[114.04558563 199.67404175]
[99.18132019 201.68743896]
[84.44406891 198.89218140]
[71.34941864 191.57575989]
[61.24402618 180.49058533]
[55.16714096 166.77667236]
[53.74371338 151.84436035]
[57.12012863 137.22930908]
[64.94915009 124.43452454]
[76.42564392 114.77584839]
[90.36872101 109.24670410]
[75.47444916 111.02451324]
[60.58017349 112.80232239]
[45.68589783 114.58013153]
[30.79162407 116.35793304]
[16.38729477 127.73544312]
[0.52655238 120.35190582]
[-14.31560326 122.52225494]
[-29.15775871 124.69260406]
[-43.99991608 126.86296082]
[-52.05801392 140.26449585]
[-66.86194611 145.30209351]
[-81.42175293 139.59718323]
[-88.86273193 125.84342957]
[-85.67148590 110.53493500]
[-73.35482788 100.89990997]
[-57.72829056 101.48770905]
[-46.17026520 112.02079773]
[-31.32810783 109.85044861]
[-16.48595238 107.68009949]
[-1.64379752 105.50975037]
[5.89726400 95.95106506]
[18.33560944 94.08376312]
[29.01381683 101.46366119]
[43.90809250 99.68585205]
[58.80236435 97.90805054]
[73.69664001 96.13024139]
[88.59091187 94.35243225]
[88.56647491 91.91149139]
[89.04879761 89.34358978]
[90.07367706 86.75064087]
[87.70760345 71.93843079]
[85.34153748 57.12621307]
[82.97546387 42.31399918]
[80.60939026 27.50178337]
[78.24332428 12.68956757]
[75.87725067 -2.12264705]
[73.51117706 -16.93486214]
[71.14511108 -31.74707603]
[68.77903748 -46.55929184]
[55.83540726 -55.62780762]
[53.17760849 -71.20701599]
[62.38246536 -84.05403900]
[77.98889923 -86.54698181]
[90.73789215 -77.20681000]
[93.06568909 -61.57489014]
[83.59125519 -48.92536163]
[85.95732117 -34.11314774]
[88.32339478 -19.30093384]
[90.68946838 -4.48871803]
[93.05553436 10.32349682]
[95.42160797 25.13571167]
[97.78768158 39.94792557]
[100.15374756 54.76013947]
[102.51982117 69.57235718]
[104.88589478 84.38456726]
[115.42226410 95.06094360]
[130.20195007 97.62232208]
[144.98164368 100.18370819]
[159.76133728 102.74508667]
[174.54103088 105.30646515]
[189.32072449 107.86784363]
[204.10041809 110.42922211]
[218.96992493 112.40347290]
[233.90594482 113.78749847]
[248.84194946 115.17152405]
[263.77795410 116.55554962]
[278.71398926 117.93957520]
[293.64999390 119.32360077]
[298.61679077 117.02117157]
[303.46737671 116.95094299]
[307.34219360 118.67102051]
[309.69686890 121.45417023]
[324.47656250 124.01554871]
[339.25625610 126.57693481]
[354.03594971 129.13830566]
[368.81564331 131.69969177]
[384.01434326 125.54084778]
[396.77926636 135.83590698]
[393.97897339 151.99420166]
[378.49414062 157.39344788]
[366.25424194 146.47938538]
[351.47454834 143.91799927]
[336.69485474 141.35662842]
[321.91516113 138.79524231]
[307.13546753 136.23387146]
[292.26596069 134.25961304]
[277.32995605 132.87559509]
[262.39395142 131.49156189]
[247.45793152 130.10754395]
[232.52191162 128.72351074]
[217.58590698 127.33948517]
[214.58657837 129.41177368]
[210.39715576 130.06115723]
[205.73295593 128.72763062]
[201.53904724 125.20891571]
[186.75935364 122.64753723]
[171.97966003 120.08615875]
[157.19996643 117.52478027]
[142.42027283 114.96339417]
[127.64057159 112.40201569]
[112.86087799 109.84063721]
[126.49326324 116.09828186]
[137.44387817 126.34933472]
[144.58656311 139.53956604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[20 34]
[21 33]
[22 32]
[23 31]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[70 115]
[71 114]
[72 113]
[73 112]
[74 111]
[75 110]
[76 109]
[77 105]
[78 104]
[79 103]
[80 102]
[81 101]
[82 100]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
