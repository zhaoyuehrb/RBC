%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCCUGCCCCAGUCACCCUGCUGGCCCCUGGGGCAGCAUCCUCAAUGUCUUGCAGCCAGCCCGGGCAGCGCUCGCCAUCGAAUGACUUCCAGGUGC\
) } def
/len { sequence length } bind def

/coor [
[78.46107483 346.34393311]
[62.13327026 344.81585693]
[55.53955841 329.80072021]
[65.46297455 316.74475098]
[66.86066437 301.81002808]
[68.25835419 286.87527466]
[69.65604401 271.94055176]
[71.05373383 257.00579834]
[72.45142365 242.07106018]
[73.84911346 227.13632202]
[64.69263458 219.99009705]
[60.15156174 209.16819763]
[61.49415970 197.38737488]
[68.49521637 187.66835022]
[79.46356201 182.56117249]
[81.78703308 167.74221802]
[84.11050415 152.92326355]
[86.43397522 138.10430908]
[88.75744629 123.28534698]
[77.99280548 113.57518005]
[74.14578247 99.59786987]
[78.42563629 85.74696350]
[89.48706055 76.37627411]
[87.62557983 61.49222946]
[85.76409912 46.60818100]
[83.90261841 31.72413254]
[82.04113007 16.84008408]
[72.65106201 4.10677767]
[78.74910736 -9.48229980]
[76.88762665 -24.36634827]
[63.94740295 -39.66781998]
[71.78780365 -57.22745895]
[69.00458527 -71.96698761]
[66.22136688 -86.70652008]
[63.43815613 -101.44604492]
[51.11053467 -115.01353455]
[57.33981705 -131.33828735]
[54.09954834 -145.98413086]
[50.85927963 -160.62997437]
[47.16509628 -175.16795349]
[43.02057266 -189.58401489]
[38.87604523 -204.00007629]
[34.73151779 -218.41615295]
[21.44729233 -227.41108704]
[20.34093475 -243.41593933]
[32.26115036 -254.15316772]
[48.06377029 -251.38607788]
[55.62637329 -237.23735046]
[49.14758301 -222.56066895]
[53.29211044 -208.14460754]
[57.43663406 -193.72854614]
[61.58116150 -179.31248474]
[65.40653229 -176.18881226]
[67.20066071 -170.55935669]
[65.50511932 -163.87023926]
[68.74539185 -149.22439575]
[71.98565674 -134.57855225]
[82.08714294 -127.72451019]
[84.82793427 -115.41545868]
[78.17768097 -104.22926331]
[80.96089935 -89.48973083]
[83.74411774 -74.75020599]
[86.52732849 -60.01067734]
[95.62548828 -54.90188599]
[100.42334747 -45.38690567]
[99.06658173 -34.59384918]
[91.77167511 -26.22782898]
[93.63315582 -11.34378147]
[102.89009094 0.32491770]
[96.92517853 14.97860241]
[98.78666687 29.86264992]
[100.64814758 44.74670029]
[102.50962830 59.63074493]
[104.37110901 74.51479340]
[119.77912140 83.34501648]
[125.85732269 100.03139496]
[140.20718384 104.39961243]
[154.55705261 108.76783752]
[170.40037537 104.53445435]
[181.79519653 116.32808685]
[177.01953125 132.01646423]
[160.98614502 135.46070862]
[150.18884277 123.11769867]
[135.83897400 118.74948120]
[121.48910522 114.38126373]
[113.73260498 121.90930939]
[103.57640839 125.60881805]
[101.25293732 140.42778015]
[98.92945862 155.24673462]
[96.60598755 170.06568909]
[94.28251648 184.88464355]
[106.02094269 199.57524109]
[103.52022552 217.89521790]
[88.78385162 228.53401184]
[87.38616180 243.46875000]
[85.98847198 258.40347290]
[84.59078217 273.33822632]
[83.19309235 288.27297974]
[81.79540253 303.20770264]
[80.39772034 318.14245605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[29 68]
[30 67]
[32 63]
[33 62]
[34 61]
[35 60]
[37 57]
[38 56]
[39 55]
[40 52]
[41 51]
[42 50]
[43 49]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
