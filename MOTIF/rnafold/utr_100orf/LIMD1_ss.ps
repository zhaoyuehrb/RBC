%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACACACACACGGCACCUGGGCUAGGCCCGGACACCUGUCUGCAGCAUGGAUAAGUAUGACGACCUGGGCCUGGAGGCCAGUAAAUUCAUCGAGGACCUGAACAUGUAUGAGGCCUCUAAGGAUGGGCUCUUCCGAGUGGACAAGG\
) } def
/len { sequence length } bind def

/coor [
[90.88171387 317.55581665]
[76.06399536 314.43905640]
[63.06243515 306.67773438]
[53.28733444 295.11373901]
[47.79902649 281.00143433]
[47.19283676 265.87161255]
[51.53453064 251.36546326]
[60.35314178 239.05648804]
[72.69210052 230.27989197]
[87.21296692 225.98767090]
[87.84110260 211.00082397]
[88.46923828 196.01397705]
[81.27169037 182.97387695]
[89.58009338 169.50981140]
[90.20822906 154.52296448]
[90.83636475 139.53611755]
[74.83300018 131.83863831]
[63.64825439 118.04516602]
[59.42362213 100.79665375]
[62.96796799 83.39560699]
[50.65073013 74.83490753]
[38.33349228 66.27420044]
[26.01625252 57.71349716]
[5.91394281 57.00299835]
[-1.68697035 39.26543427]
[-14.35188961 31.22803116]
[-27.01680756 23.19062996]
[-39.68172836 15.15322781]
[-52.34664536 7.11582565]
[-65.01156616 -0.92157608]
[-77.67648315 -8.95897770]
[-90.34140015 -16.99637985]
[-103.00632477 -25.03378105]
[-115.67124176 -33.07118225]
[-125.27905273 -28.17347336]
[-135.97348022 -27.74517632]
[-145.79219055 -31.79700661]
[-152.96186829 -39.52380371]
[-156.21842957 -49.46355438]
[-155.02958679 -59.77374649]
[-167.16484070 -68.59052277]
[-179.30009460 -77.40730286]
[-191.43534851 -86.22408295]
[-203.66227722 -94.91329956]
[-215.97950745 -103.47400665]
[-228.29675293 -112.03470612]
[-241.84237671 -104.90908051]
[-257.14788818 -104.90621185]
[-270.69616699 -112.02676392]
[-279.37396240 -124.63448334]
[-281.18713379 -139.83221436]
[-275.71905518 -154.12762451]
[-264.22625732 -164.23573303]
[-249.34967041 -167.83377075]
[-234.50785828 -164.09494019]
[-223.11132812 -153.87838745]
[-217.77894592 -139.53181458]
[-219.73603821 -124.35194397]
[-207.41880798 -115.79124451]
[-195.10156250 -107.23053741]
[-187.76551819 -105.98754120]
[-182.61857605 -98.35933685]
[-170.48332214 -89.54255676]
[-158.34806824 -80.72578430]
[-146.21281433 -71.90900421]
[-127.31893921 -76.41913605]
[-110.88962555 -65.49942017]
[-107.63383484 -45.73610306]
[-94.96891785 -37.69869995]
[-82.30400085 -29.66129875]
[-69.63908386 -21.62389755]
[-56.97416306 -13.58649540]
[-44.30924225 -5.54909325]
[-31.64432526 2.48830891]
[-18.97940636 10.52571106]
[-6.31448746 18.56311226]
[6.35043144 26.60051537]
[16.16203690 23.46964645]
[26.27922440 26.35078430]
[33.25597382 34.51589966]
[34.57695770 45.39625931]
[46.89419556 53.95696259]
[59.21143341 62.51766586]
[71.52867126 71.07836914]
[85.31696320 62.16501999]
[101.50832367 59.44384003]
[117.45282745 63.36018372]
[130.54095459 73.27309418]
[138.63067627 87.56020355]
[153.51239014 85.68020630]
[168.39410400 83.80020142]
[183.27583313 81.92020416]
[198.15754700 80.04020691]
[213.03927612 78.16020966]
[227.82920837 75.65867615]
[242.50143433 72.54000092]
[257.17364502 69.42132568]
[271.84585571 66.30265045]
[279.65048218 61.42739105]
[286.85787964 63.27569580]
[301.59219360 60.46497726]
[316.32650757 57.65425873]
[320.71279907 42.99073792]
[331.41946411 32.05335999]
[345.98614502 27.35546303]
[361.06555176 29.97658348]
[373.19253540 39.31440735]
[379.58038330 53.22317123]
[378.76126099 68.50674438]
[370.92337036 81.65307617]
[357.86779785 89.64122772]
[342.59460449 90.63558960]
[328.61349487 84.40765381]
[319.13720703 72.38856506]
[304.40289307 75.19928741]
[289.66860962 78.01000214]
[274.96453857 80.97486877]
[260.29232788 84.09354401]
[245.62010193 87.21221924]
[230.94789124 90.33089447]
[229.30441284 92.67922211]
[226.60096741 94.49525452]
[223.04403687 95.36020660]
[218.99192810 94.94101715]
[214.91926575 93.04193115]
[200.03755188 94.92192841]
[185.15582275 96.80192566]
[170.27410889 98.68192291]
[155.39239502 100.56192017]
[140.51066589 102.44192505]
[138.91299438 111.52632141]
[135.30529785 120.01533508]
[129.87391663 127.47046661]
[122.89941406 133.50662231]
[114.74205017 137.81202698]
[105.82320404 140.16426086]
[105.19506836 155.15109253]
[104.56693268 170.13793945]
[111.71955872 184.25001526]
[103.45607758 196.64212036]
[102.82794189 211.62895203]
[102.19981384 226.61579895]
[116.31058502 232.10804749]
[127.87186432 241.88636780]
[135.62956238 254.89009094]
[138.74218750 269.70867920]
[136.87208557 284.73471069]
[130.22213745 298.33825684]
[119.51367188 309.04373169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 142]
[11 141]
[12 140]
[14 138]
[15 137]
[16 136]
[20 84]
[21 83]
[22 82]
[23 81]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[40 65]
[41 64]
[42 63]
[43 62]
[44 60]
[45 59]
[46 58]
[89 130]
[90 129]
[91 128]
[92 127]
[93 126]
[94 125]
[95 120]
[96 119]
[97 118]
[98 117]
[100 116]
[101 115]
[102 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
