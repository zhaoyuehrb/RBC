%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCCCCCCCUCCCCCGCCGCGGAUCCUGGCCGCUGCUCUCCAGACCCAGGAUGCCGGGGGGCAAGAGAGGGCUGGUGGCACCGCAGAACACAUUUUUGGAGAACAUCGUCAGGCGCUCCAGUGAAUCAAGUUUCUUACUGGGAAAUGCCC\
) } def
/len { sequence length } bind def

/coor [
[76.31722260 122.84402466]
[69.12986755 104.67159271]
[54.19385910 103.28756714]
[39.25784683 101.90354156]
[24.32183266 100.51951599]
[12.23097801 110.34036255]
[-2.89654708 108.72399139]
[-12.18470860 97.13668823]
[-27.12072182 95.75266266]
[-42.05673218 94.36863708]
[-57.00616837 93.13802338]
[-71.96745300 92.06095123]
[-86.92873383 90.98388672]
[-104.58423615 100.62810516]
[-120.16778564 89.24169922]
[-135.16067505 88.77976990]
[-150.15356445 88.31784821]
[-158.88952637 91.19510651]
[-165.44865417 87.68937683]
[-180.42889404 86.91971588]
[-189.22209167 89.61700439]
[-195.70785522 85.97734070]
[-210.66912842 84.90026855]
[-225.63041687 83.82320404]
[-240.60195923 82.89978790]
[-255.58219910 82.13012695]
[-270.56243896 81.36046600]
[-285.54269409 80.59080505]
[-300.52291870 79.82115173]
[-315.50317383 79.05149078]
[-330.48339844 78.28182983]
[-339.40817261 88.41879272]
[-352.35751343 91.50029755]
[-364.52969360 86.61493683]
[-371.54376221 75.76342773]
[-386.50506592 74.68635559]
[-401.46633911 73.60929108]
[-414.48803711 82.98022461]
[-429.89385986 78.50357819]
[-435.86575317 63.61344910]
[-427.82260132 49.73226547]
[-411.93441772 47.50848770]
[-400.38925171 58.64800644]
[-385.42797852 59.72507858]
[-370.46670532 60.80214691]
[-358.26632690 49.26726151]
[-341.16024780 50.11200333]
[-329.71374512 63.30158615]
[-314.73352051 64.07125092]
[-299.75326538 64.84090424]
[-284.77301025 65.61056519]
[-269.79278564 66.38022614]
[-254.81254578 67.14988708]
[-239.83230591 67.91954803]
[-232.94842529 65.10449219]
[-224.55334473 68.86192322]
[-209.59205627 69.93898773]
[-194.63078308 71.01605988]
[-179.65922546 71.93947601]
[-164.67898560 72.70913696]
[-149.69163513 73.32495880]
[-134.69874573 73.78688812]
[-119.70586395 74.24880981]
[-112.86329651 66.55879211]
[-102.69621277 63.88063812]
[-92.53591156 67.34364319]
[-85.85166168 76.02260590]
[-70.89038086 77.09967041]
[-55.92910004 78.17674255]
[-48.98888016 75.50362396]
[-40.67271042 79.43262482]
[-25.73669624 80.81665039]
[-10.80068302 82.20067596]
[0.45849144 72.51735687]
[15.62544823 73.70819092]
[25.70585823 85.58350372]
[40.64187241 86.96752930]
[55.57788467 88.35155487]
[70.51389313 89.73558044]
[74.14359283 80.83706665]
[80.46763611 73.22142792]
[89.03246307 67.70446014]
[99.13843536 64.94176483]
[109.89625549 65.35508728]
[120.30513763 69.07846069]
[129.34584045 75.93040466]
[138.74969482 64.24419403]
[148.15354919 52.55798340]
[157.55741882 40.87177658]
[166.96127319 29.18556595]
[166.67164612 13.14512730]
[179.12335205 3.02906919]
[194.76449585 6.59756517]
[201.59654236 21.11317062]
[194.37850952 35.44075775]
[178.64747620 38.58942413]
[169.24362183 50.27563095]
[159.83976746 61.96184158]
[150.43591309 73.64804840]
[141.03204346 85.33425903]
[154.88737488 79.58709717]
[168.74270630 73.83992767]
[180.25222778 64.22063446]
[194.92062378 61.08403015]
[209.35760498 65.15507507]
[220.22639465 75.49284363]
[225.01490784 89.70798492]
[222.61637878 104.51497650]
[213.58518982 116.49151611]
[200.00868225 122.86949158]
[185.02478027 122.17476654]
[172.09524536 114.56652069]
[157.48660278 111.16246796]
[142.87797546 107.75840759]
[154.06626892 117.74950409]
[165.25456238 127.74060059]
[176.44285583 137.73170471]
[196.31292725 140.87942505]
[201.69703674 159.41342163]
[213.28608704 168.93675232]
[224.87513733 178.46009827]
[236.46417236 187.98342896]
[248.05322266 197.50675964]
[259.64227295 207.03010559]
[271.23132324 216.55343628]
[282.82037354 226.07678223]
[297.16992188 220.60079956]
[312.33242798 223.04905701]
[324.22924805 232.76301575]
[329.66021729 247.12963867]
[327.16445923 262.28439331]
[317.41323853 274.15072632]
[303.02966309 279.53665161]
[287.88281250 276.99337769]
[276.04708862 267.20504761]
[270.70629883 252.80464172]
[273.29702759 237.66583252]
[261.70797729 228.14248657]
[250.11894226 218.61915588]
[238.52989197 209.09580994]
[226.94084167 199.57247925]
[215.35179138 190.04913330]
[203.76274109 180.52580261]
[192.17369080 171.00247192]
[182.05879211 172.91192627]
[172.37281799 168.82244873]
[166.44320679 159.87460327]
[166.45176697 148.91999817]
[155.26345825 138.92889404]
[144.07516479 128.93780518]
[132.88687134 118.94670868]
[115.15135193 132.95492554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 76]
[8 73]
[9 72]
[10 71]
[11 69]
[12 68]
[13 67]
[15 63]
[16 62]
[17 61]
[19 60]
[20 59]
[22 58]
[23 57]
[24 56]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[35 45]
[36 44]
[37 43]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[114 151]
[115 150]
[116 149]
[117 148]
[119 144]
[120 143]
[121 142]
[122 141]
[123 140]
[124 139]
[125 138]
[126 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
