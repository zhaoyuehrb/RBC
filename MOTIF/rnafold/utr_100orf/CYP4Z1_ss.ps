%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGGAGCCCUCCUGGCUUCAGGAACUCAUGGCUCACCCCUUCUUGCUGCUGAUCCUCCUCUGCAUGUCUCUGCUGCUGUUUCAGGUAAUCAGGUUGUACC\
) } def
/len { sequence length } bind def

/coor [
[27.25258255 170.13652039]
[13.29959202 175.73706055]
[-1.65103304 177.17752075]
[-16.38683891 174.34965515]
[-29.71520805 167.49105835]
[-40.55988693 157.16516113]
[-48.04789352 144.21498108]
[-62.61202240 147.80471802]
[-77.17614746 151.39445496]
[-91.74027252 154.98419189]
[-106.30440521 158.57392883]
[-121.19952393 176.28721619]
[-142.86192322 170.46185303]
[-156.72012329 176.20210266]
[-170.57830811 181.94235229]
[-184.43650818 187.68260193]
[-198.29469299 193.42285156]
[-207.84315491 206.75547791]
[-224.13511658 204.88351440]
[-230.41079712 189.73268127]
[-220.21432495 176.88885498]
[-204.03495789 179.56466675]
[-190.17675781 173.82440186]
[-176.31855774 168.08415222]
[-162.46037292 162.34390259]
[-148.60217285 156.60365295]
[-147.55287170 149.13941956]
[-143.85997009 142.48924255]
[-137.97259521 137.56407166]
[-130.64407349 135.05876160]
[-122.83562469 135.35430908]
[-115.59042358 138.46089172]
[-109.89413452 144.00979614]
[-95.33000946 140.42005920]
[-80.76588440 136.83032227]
[-66.20175171 133.24060059]
[-51.63762665 129.65086365]
[-51.02557755 114.70420074]
[-46.22177505 100.52129364]
[-37.60743713 88.25430298]
[-25.87370110 78.90229034]
[-11.96616650 73.22985077]
[2.99129295 71.70460510]
[17.78735352 74.45866394]
[31.22134399 81.27723694]
[42.20066833 91.61535645]
[49.82968140 104.64141083]
[64.39380646 101.05168152]
[78.95793915 97.46194458]
[87.09311676 83.18861389]
[102.98342896 79.01644897]
[117.08114624 87.45230103]
[131.53021240 83.42432404]
[145.97926331 79.39634705]
[160.42832947 75.36837006]
[174.87739563 71.34039307]
[189.19821167 66.87784576]
[203.37770081 61.98480225]
[217.55720520 57.09175873]
[219.28852844 40.99308395]
[227.80215454 27.28857803]
[241.36958313 18.66551590]
[257.27728271 16.78908348]
[272.36935425 21.98101044]
[283.67358398 33.16574478]
[297.69885254 27.84667397]
[311.72409058 22.52759933]
[318.78002930 16.45976830]
[326.25408936 17.26670647]
[340.43359375 12.37366390]
[350.76962280 -0.35811561]
[366.91885376 2.49411511]
[372.26828003 17.99622536]
[361.31491089 30.20097542]
[345.32662964 26.55316162]
[331.14712524 31.44620323]
[317.04315186 36.55284500]
[303.01791382 41.87191772]
[288.99267578 47.19099045]
[288.46044922 61.14085388]
[282.60485840 73.86137390]
[272.28967285 83.39640808]
[259.06710815 88.26565552]
[244.94453430 87.69437408]
[232.07948303 81.73644257]
[222.45024109 71.27125549]
[208.27073669 76.16429901]
[194.09124756 81.05734253]
[191.17529297 85.03201294]
[185.66056824 87.11737823]
[178.90536499 85.78945160]
[164.45631409 89.81742859]
[150.00724792 93.84540558]
[135.55818176 97.87338257]
[121.10912323 101.90136719]
[116.18411255 113.68520355]
[105.38242340 120.49974823]
[92.62629700 119.87055206]
[82.54766846 112.02606964]
[67.98354340 115.61580658]
[53.41941452 119.20554352]
[52.71777344 134.28492737]
[47.80042648 148.54121399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[47 101]
[48 100]
[49 99]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 88]
[58 87]
[59 86]
[65 79]
[66 78]
[67 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
