%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCUCAGUUCACAAUCCUGGGGCGAUAUGGCAGAAUCUUUUUUUUCGGAUUUUGGCUUGUUGUGGUAUCUGAAGGAGCUCAGAAAGGAAGAGUUUUGGAAAUUUAAGGAGCUCCUCAAACAACCUU\
) } def
/len { sequence length } bind def

/coor [
[103.20761108 126.53591919]
[95.36403656 127.27370453]
[87.37882233 125.66529846]
[79.95989227 121.69795990]
[70.50589752 133.34364319]
[61.05190277 144.98933411]
[51.59790802 156.63502502]
[42.14391327 168.28070068]
[32.68992233 179.92639160]
[37.60675812 194.54925537]
[33.81518936 209.50344849]
[22.52509499 220.01712036]
[7.33909941 222.73539734]
[-6.89700031 216.79090881]
[-15.64051628 204.08050537]
[-16.10142517 188.66001892]
[-8.13265133 175.45008850]
[5.72299814 168.66595459]
[21.04423523 170.47239685]
[30.49822807 158.82670593]
[39.95222092 147.18103027]
[49.40621567 135.53533936]
[58.86021042 123.88965607]
[68.31420135 112.24396515]
[66.13018799 97.40381622]
[53.72192383 88.97558594]
[41.31366348 80.54736328]
[28.90540123 72.11913300]
[16.49713898 63.69090271]
[1.96034849 68.78873444]
[-12.62039375 64.40064240]
[-21.71387100 52.41012192]
[-21.99973106 37.54216003]
[-34.40799332 29.11392975]
[-46.81625366 20.68570137]
[-59.22451401 12.25747204]
[-71.63277435 3.82924294]
[-84.04103851 -4.59898615]
[-96.44930267 -13.02721500]
[-108.85755920 -21.45544434]
[-123.40980530 -16.06917191]
[-138.33964539 -20.29758072]
[-147.90626526 -32.51476288]
[-148.43109131 -48.02296066]
[-139.71232605 -60.85895538]
[-125.10250854 -66.08704376]
[-110.21941376 -61.69692612]
[-100.78589630 -49.37668228]
[-100.42932892 -33.86370468]
[-88.02107239 -25.43547630]
[-75.61280823 -17.00724792]
[-63.20454788 -8.57901859]
[-50.79628754 -0.15078944]
[-38.38802338 8.27744007]
[-25.97976303 16.70566940]
[-13.57150173 25.13389778]
[0.35507339 19.91963768]
[14.85307980 23.95347214]
[24.30636787 35.89033508]
[24.92536736 51.28263855]
[37.33362961 59.71086884]
[49.74188995 68.13909912]
[62.15015411 76.56732941]
[74.55841064 84.99555969]
[102.15037537 73.82701874]
[121.43938446 91.71146393]
[136.42938232 91.16362762]
[151.41937256 90.61579895]
[160.61837769 76.48064423]
[176.26139832 70.63565063]
[192.15724182 75.18418121]
[202.13864136 88.15692139]
[217.11085510 87.24423218]
[232.08305359 86.33154297]
[240.55995178 82.65353394]
[247.43013000 85.58344269]
[262.42010498 85.03561401]
[277.41012573 84.48778534]
[292.40011597 83.93995667]
[307.39010620 83.39212036]
[322.38009644 82.84429169]
[337.37008667 82.29646301]
[340.06225586 67.47869873]
[345.87731934 53.58627319]
[354.54321289 41.26897049]
[365.65469360 31.10289001]
[378.69201660 23.56351852]
[393.04544067 19.00348282]
[408.04357910 17.63606644]
[422.98495483 19.52522659]
[437.17077637 24.58260345]
[449.93746948 32.57165146]
[460.68798828 43.11871338]
[468.91949463 55.73048019]
[474.24694824 69.81707764]
[476.42120361 84.71965027]
[475.34057617 99.74118042]
[471.05557251 114.17907715]
[463.76663208 127.35805511]
[453.81469727 138.66171265]
[441.66519165 147.56137085]
[427.88641357 153.64074707]
[413.12277222 156.61552429]
[398.06481934 156.34654236]
[383.41683960 152.84640503]
[369.86395264 146.27880859]
[358.04006958 136.95094299]
[348.49813843 125.29906464]
[341.68453979 111.86817932]
[337.91790771 97.28645325]
[322.92791748 97.83428192]
[307.93792725 98.38211823]
[292.94793701 98.92994690]
[277.95794678 99.47777557]
[262.96795654 100.02560425]
[247.97795105 100.57344055]
[232.99574280 101.30374908]
[218.02354431 102.21643829]
[203.05133057 103.12912750]
[196.91473389 115.05013275]
[185.58392334 122.41927338]
[171.98178101 123.20719147]
[159.68135071 117.09908295]
[151.96719360 105.60578918]
[136.97720337 106.15362549]
[121.98721313 106.70145416]
[119.95023346 113.19970703]
[115.96836853 119.05002594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[66 126]
[67 125]
[68 124]
[72 119]
[73 118]
[74 117]
[76 116]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
