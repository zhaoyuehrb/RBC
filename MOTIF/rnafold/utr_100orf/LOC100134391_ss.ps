%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGGUGCUCUGCAUCACUGGAGGAAGCAAGUGUGAAACCUCAGUCCACCCCAUCACUCAAUCAGGAGAAUUCCCAUUGGACAGCUGGCUUGCAUGUGGACCCUCUGGAAUGAAAAGGAAGAAAGAGCCUCUCACUCAUGUUUCCCGCUGUGCCCACCUGCAGUGCAUUGCUUUAGGACUGGACAGAUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[144.99632263 718.78778076]
[141.20103455 704.16687012]
[141.68006897 689.06890869]
[146.39457703 674.71795654]
[154.96238708 662.27734375]
[166.68893433 652.75555420]
[180.62361145 646.92443848]
[178.95263672 632.01782227]
[177.28166199 617.11120605]
[168.17472839 605.32507324]
[174.32655334 590.74884033]
[172.65556335 575.84222412]
[159.07865906 565.92602539]
[156.82447815 548.92456055]
[167.77061462 535.28607178]
[165.86213684 520.40795898]
[163.95365906 505.52987671]
[151.13519287 491.06213379]
[159.16481018 472.58013916]
[156.78285217 457.77047729]
[154.40090942 442.96081543]
[152.01895142 428.15115356]
[149.63700867 413.34146118]
[139.97683716 402.00436401]
[145.42454529 387.15063477]
[143.04258728 372.34097290]
[140.66064453 357.53128052]
[126.62503815 348.27572632]
[123.56037140 331.40151978]
[133.84175110 317.25515747]
[131.22393799 302.48535156]
[128.60612488 287.71554565]
[125.87063599 272.96710205]
[123.01763153 258.24090576]
[120.16462708 243.51472473]
[117.31162262 228.78855896]
[107.29483795 217.76524353]
[112.26609802 202.74536133]
[109.41309357 188.01918030]
[106.56009674 173.29299927]
[103.70709229 158.56681824]
[100.85408783 143.84063721]
[84.10084534 140.86499023]
[69.74169922 131.73588562]
[59.93886566 117.82797241]
[56.16845322 101.23551941]
[58.99821091 84.45701599]
[46.08829880 76.81933594]
[33.17838669 69.18165588]
[20.26847267 61.54397583]
[7.35856104 53.90629578]
[-4.45784092 64.41458893]
[-18.92464066 70.75092316]
[-34.62191772 72.30650330]
[-50.01301575 68.94110107]
[-63.59497833 60.99563980]
[-74.04531097 49.25768280]
[-80.35074615 34.88338852]
[-81.90550232 19.28363800]
[-78.56942749 3.98555303]
[-91.59949493 -3.44528818]
[-104.62956238 -10.87612915]
[-119.80529785 -6.46336794]
[-133.61604309 -14.14705944]
[-137.86810303 -29.36860466]
[-130.03883362 -43.09733200]
[-114.77317810 -47.18823242]
[-101.12799072 -39.21424484]
[-97.19872284 -23.90619469]
[-84.16865540 -16.47535324]
[-71.13858795 -9.04451275]
[-60.83200455 -18.89962959]
[-48.15073013 -25.45621300]
[-34.11967087 -28.17425346]
[-19.87566948 -26.82437706]
[-6.57540131 -21.50718307]
[4.69854832 -12.64579773]
[13.02580547 -0.95221609]
[17.72334099 12.62989235]
[18.40148544 27.00134277]
[14.99624062 40.99638367]
[27.90615273 48.63406372]
[40.81606674 56.27174377]
[53.72597885 63.90942383]
[66.63589478 71.54710388]
[74.16969299 64.56659698]
[83.12060547 59.53004837]
[79.79944611 44.90233612]
[66.29525757 36.69183350]
[62.63327408 21.31765366]
[70.98609161 7.90102339]
[86.39813232 4.40179157]
[99.72570038 12.89599133]
[103.06179047 28.34416389]
[94.42716217 41.58118439]
[97.74831390 56.20889282]
[105.29645538 56.47209549]
[112.68746185 58.02668381]
[119.70205688 60.82653809]
[128.63453674 48.77619934]
[137.56703186 36.72586060]
[146.40315247 24.60468102]
[155.14233398 12.41343307]
[152.77409363 -2.98231840]
[161.81054688 -15.22148514]
[176.50263977 -17.38436890]
[185.24182129 -29.57561684]
[193.98101807 -41.76686478]
[202.72019958 -53.95811462]
[193.92758179 -66.28566742]
[189.61651611 -80.80094910]
[190.25462341 -95.92945099]
[195.77270508 -110.03014374]
[205.57218933 -121.57349396]
[218.59010315 -129.30735779]
[233.41435242 -132.39283752]
[248.43693542 -130.49522400]
[262.02828979 -123.82037354]
[272.71414185 -113.09231567]
[279.33535767 -99.47474670]
[281.17373657 -84.44480896]
[278.02987671 -69.63282776]
[270.24475098 -56.64550400]
[258.66287231 -46.89160156]
[244.54052734 -41.42914581]
[229.40963745 -40.85067368]
[214.91145325 -45.21892166]
[206.17227173 -33.02767563]
[197.43307495 -20.83642578]
[188.69387817 -8.64517689]
[191.36355591 5.96332979]
[182.67443848 18.45148277]
[167.33358765 21.15262413]
[158.59439087 33.34387207]
[157.25096130 40.62026215]
[149.61737061 45.65834808]
[140.68487549 57.70868683]
[131.75239563 69.75902557]
[140.92410278 84.25359344]
[143.83367920 101.15764618]
[140.03590393 117.88455200]
[130.11192322 131.87480164]
[115.58026886 140.98764038]
[118.43327332 155.71382141]
[121.28627777 170.44000244]
[124.13927460 185.16616821]
[126.99227905 199.89234924]
[137.21313477 211.96897888]
[132.03781128 225.93554688]
[134.89080811 240.66172791]
[137.74380493 255.38790894]
[140.59681702 270.11407471]
[145.30638123 277.95462036]
[143.37593079 285.09774780]
[145.99374390 299.86755371]
[148.61154175 314.63735962]
[160.47181702 321.03540039]
[166.39192200 332.92425537]
[164.40939331 345.85983276]
[155.47030640 355.14935303]
[157.85226440 369.95901489]
[160.23420715 384.76867676]
[170.06475830 397.16510010]
[164.44667053 410.95953369]
[166.82862854 425.76919556]
[169.21057129 440.57885742]
[171.59252930 455.38851929]
[173.97447205 470.19821167]
[183.15460205 476.05917358]
[187.49824524 485.80700684]
[185.78930664 496.11843872]
[178.83175659 503.62139893]
[180.74023438 518.49951172]
[182.64871216 533.37762451]
[194.18943787 540.33551025]
[199.53419495 552.49389648]
[196.93531799 565.31982422]
[187.56221008 574.17126465]
[189.23318481 589.07788086]
[198.45964050 601.93023682]
[192.18830872 615.44018555]
[193.85928345 630.34686279]
[195.53025818 645.25347900]
[210.41014099 647.85455322]
[223.95387268 654.54364014]
[235.06352234 664.77850342]
[242.83847046 677.72943115]
[246.64845276 692.34661865]
[246.18458557 707.44500732]
[241.48449707 721.80065918]
[232.92918396 734.24993896]
[221.21220398 743.78350830]
[207.28340149 749.62854004]
[192.27189636 751.31127930]
[177.39462280 748.69525146]
[163.85762024 741.99255371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 183]
[8 182]
[9 181]
[11 179]
[12 178]
[15 174]
[16 173]
[17 172]
[19 168]
[20 167]
[21 166]
[22 165]
[23 164]
[25 162]
[26 161]
[27 160]
[30 156]
[31 155]
[32 154]
[33 152]
[34 151]
[35 150]
[36 149]
[38 147]
[39 146]
[40 145]
[41 144]
[42 143]
[47 85]
[48 84]
[49 83]
[50 82]
[51 81]
[60 71]
[61 70]
[62 69]
[87 96]
[88 95]
[99 138]
[100 137]
[101 136]
[102 134]
[103 133]
[106 130]
[107 129]
[108 128]
[109 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
