%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUCCUCCAGUUCAAUCCCCAGCAUGGCCGCGUCCACUAUGUCUGUCUGCUCCAGCGACCUGAGCUACGGCAGCCGCGUCUGCCUUCCUGGUUCCUGUGACUCUUGCUCCGACUCCUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[100.42112732 270.61627197]
[87.99440002 280.38110352]
[72.31276703 278.41595459]
[62.67985535 265.88668823]
[64.81070709 250.22669983]
[77.44111633 240.72679138]
[79.30627441 225.84321594]
[81.17143250 210.95962524]
[82.85089874 196.05393982]
[84.34441376 181.12847900]
[85.83793640 166.20301819]
[87.33145142 151.27755737]
[80.61543274 149.13368225]
[74.24475098 146.11450195]
[68.33288574 142.27378845]
[62.98517227 137.67999268]
[58.29686356 132.41493225]
[54.35148621 126.57241058]
[51.21932983 120.25650787]
[48.95618820 113.57973480]
[47.60238266 106.66104126]
[47.18202972 99.62368774]
[32.34956741 97.38805389]
[17.51710320 95.15242004]
[2.65792370 93.10186768]
[-12.22566414 91.23670959]
[-27.10925293 89.37155151]
[-41.99283981 87.50640106]
[-56.87643051 85.64124298]
[-66.68699646 97.54739380]
[-81.38407898 102.23772430]
[-96.27790070 98.21557617]
[-106.61589050 86.76439667]
[-109.09923553 71.53821564]
[-102.93550873 57.39565277]
[-90.09152985 48.84955215]
[-74.66577911 48.62693787]
[-61.58053970 56.79884720]
[-55.01127243 70.75765228]
[-40.12768555 72.62281036]
[-25.24409676 74.48796844]
[-10.36050892 76.35311890]
[4.52307940 78.21827698]
[11.62901688 75.90284729]
[19.75273705 80.31995392]
[34.58520126 82.55558777]
[49.41766357 84.79122162]
[54.32783890 73.46826172]
[61.73158264 63.59384918]
[71.22467041 55.70711136]
[82.28881073 50.23863602]
[79.31661987 35.53604889]
[76.34442139 20.83345985]
[73.37223053 6.13087320]
[68.55567932 -1.76257408]
[70.51403046 -8.97509289]
[67.90930939 -23.74720955]
[56.95938110 -35.95504379]
[62.31319427 -51.45564651]
[78.46320343 -54.30332947]
[88.79566193 -41.56863785]
[82.68141937 -26.35193253]
[85.28614807 -11.57981586]
[88.07482147 3.15868115]
[91.04701233 17.86126900]
[94.01920319 32.56385422]
[96.99139404 47.26644135]
[119.99559021 51.11180115]
[139.10098267 64.48954010]
[150.58233643 84.79122162]
[165.41479492 82.55558777]
[180.24726868 80.31995392]
[188.37098694 75.90284729]
[195.47691345 78.21827698]
[210.36050415 76.35311890]
[225.24409485 74.48796844]
[239.94668579 71.51576996]
[254.38604736 67.45316315]
[268.82540894 63.39056015]
[283.26477051 59.32795334]
[288.72872925 44.92478180]
[301.47705078 36.59806061]
[316.50616455 37.36555862]
[328.06317139 46.72363663]
[342.50253296 42.66102982]
[356.94189453 38.59842300]
[366.01211548 25.36548042]
[382.02301025 24.35001373]
[392.69238281 36.33100128]
[389.83560181 52.11765289]
[375.64416504 59.59980392]
[361.00451660 53.03778458]
[346.56515503 57.10039139]
[332.12579346 61.16299820]
[327.14392090 75.17439270]
[314.71990967 83.66600800]
[299.50006104 83.20830536]
[287.32739258 73.76731873]
[272.88803101 77.82992554]
[258.44866943 81.89253235]
[244.00929260 85.95513916]
[256.11224365 94.81620789]
[258.63159180 109.60311890]
[250.14572144 121.97203827]
[235.44299316 124.94351959]
[222.81973267 116.84083557]
[219.39891052 102.23611450]
[227.10925293 89.37155151]
[212.22566223 91.23670959]
[197.34207153 93.10186768]
[182.48289490 95.15242004]
[167.65043640 97.38805389]
[152.81797791 99.62368774]
[150.46160889 115.60469055]
[143.38542175 130.12614441]
[132.25128174 141.82981873]
[118.10060120 149.62104797]
[102.25691223 152.77107239]
[100.76339722 167.69653320]
[99.26987457 182.62199402]
[97.77635956 197.54745483]
[100.05229187 206.50991821]
[96.05501556 212.82478333]
[94.18986511 227.70835876]
[92.32470703 242.59194946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 125]
[7 124]
[8 123]
[9 121]
[10 120]
[11 119]
[12 118]
[22 47]
[23 46]
[24 45]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[51 67]
[52 66]
[53 65]
[54 64]
[56 63]
[57 62]
[70 113]
[71 112]
[72 111]
[74 110]
[75 109]
[76 108]
[77 101]
[78 100]
[79 99]
[80 98]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
