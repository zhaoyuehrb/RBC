%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:25:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGAUUUCCCUGGGCUGCGAGCAGUUCACCUGCAGAGGAGGCUCCAGAAAGCGGCAUGUCCCCUUUGCUCUUUGGGGCUGGGCUGGUCGUUCUGAAUCUAGUGACGUCUGCCAGGAGCCAGAAGACAGAACCUCUAAGUGGCUCUGGGGACCAGC\
) } def
/len { sequence length } bind def

/coor [
[87.21211243 491.75808716]
[73.59966278 484.85418701]
[64.33757782 472.72256470]
[61.26486588 457.77194214]
[64.99160004 442.97076416]
[74.77784729 431.25787354]
[88.68054199 424.95883179]
[88.98067474 409.96182251]
[89.28079987 394.96484375]
[89.58093262 379.96783447]
[89.88106537 364.97082520]
[82.39997101 352.09130859]
[90.41184998 338.44869995]
[90.71198273 323.45169067]
[91.01211548 308.45471191]
[91.31224823 293.45770264]
[91.61238098 278.46072388]
[91.91251373 263.46371460]
[92.21264648 248.46672058]
[82.91834259 233.60919189]
[92.50000000 217.91459656]
[92.50000000 202.91459656]
[81.81912994 192.59692383]
[81.60544586 177.38478088]
[92.50000000 166.25166321]
[92.50000000 151.25166321]
[92.50000000 136.25166321]
[92.50000000 121.25166321]
[84.05016327 117.38952637]
[77.54273224 110.17948914]
[74.28971100 100.58131409]
[75.13674927 90.05870056]
[80.27564240 80.35661316]
[66.90373993 73.56013489]
[53.53183746 66.76364899]
[40.15993118 59.96716690]
[26.78802681 53.17068481]
[13.41612244 46.37420273]
[0.04421772 39.57772064]
[-15.76384926 40.22237396]
[-23.60394478 27.55816841]
[-36.97584915 20.76168442]
[-50.34775543 13.96520329]
[-70.36624908 16.00001335]
[-80.30215454 -0.55006796]
[-93.93527985 -6.80610371]
[-107.98865509 0.05221483]
[-123.15003967 -3.77748919]
[-132.26066589 -16.48694611]
[-131.01879883 -32.07514191]
[-120.01080322 -43.18180084]
[-104.43431091 -44.56270599]
[-91.64407349 -35.56583023]
[-87.67924500 -20.43922615]
[-74.04611969 -14.18319035]
[-64.75835419 -18.60483932]
[-54.35645294 -17.12348175]
[-46.34297180 -9.99218082]
[-43.55127335 0.59329867]
[-30.17936707 7.38978100]
[-16.80746269 14.18626308]
[-1.95584416 13.05547905]
[6.84070015 26.20581627]
[20.21260452 33.00230026]
[33.58451080 39.79878235]
[46.95641327 46.59526443]
[60.32831955 53.39174652]
[73.70022583 60.18822861]
[87.07212830 66.98471069]
[101.88034058 64.59373474]
[112.43375397 53.93420792]
[122.98715973 43.27467728]
[133.54057312 32.61515045]
[144.09397888 21.95561981]
[144.81956482 9.04126167]
[153.87599182 0.37750024]
[166.00674438 0.23520857]
[176.77133179 -10.21102524]
[187.53590393 -20.65725899]
[198.30049133 -31.10349274]
[202.86561584 -50.70043945]
[221.74302673 -54.73412704]
[232.08103943 -65.60268402]
[242.41905212 -76.47123718]
[246.09434509 -84.89621735]
[253.07431030 -87.45121765]
[263.62771606 -98.11074829]
[267.83859253 -113.36129761]
[282.29138184 -116.96208191]
[292.84478760 -127.62161255]
[303.39819336 -138.28114319]
[313.95159912 -148.94067383]
[324.39785767 -159.70524597]
[334.73587036 -170.57380676]
[345.07388306 -181.44236755]
[348.39270020 -197.50216675]
[364.04327393 -202.40031433]
[375.92559814 -191.09800720]
[371.81619263 -175.22209167]
[355.94241333 -171.10435486]
[345.60440063 -160.23579407]
[335.26638794 -149.36723328]
[332.92202759 -142.31375122]
[324.61114502 -138.38726807]
[314.05773926 -127.72772980]
[303.50433350 -117.06820679]
[292.95089722 -106.40867615]
[289.49490356 -91.92057037]
[274.28723145 -87.55733490]
[263.73382568 -76.89781189]
[253.28759766 -66.13322449]
[242.94958496 -55.26467133]
[232.61157227 -44.39611816]
[233.78329468 -34.17649078]
[229.00964355 -24.81667709]
[219.66554260 -19.54799652]
[208.74671936 -20.33891106]
[197.98214722 -9.89267731]
[187.21755981 0.55355608]
[176.45298767 10.99978924]
[172.60466003 28.09717941]
[154.75350952 32.50902939]
[144.20010376 43.16856003]
[133.64668274 53.82808685]
[123.09327698 64.48761749]
[112.53987122 75.14714813]
[124.70417023 91.67159271]
[121.85002899 110.64070892]
[107.50000000 121.25166321]
[107.50000000 136.25166321]
[107.50000000 151.25166321]
[107.50000000 166.25166321]
[118.39455414 177.38478088]
[118.18087006 192.59692383]
[107.50000000 202.91459656]
[107.50000000 217.91459656]
[116.07041168 227.60249329]
[115.73007202 240.13101196]
[107.20964050 248.76684570]
[106.90950775 263.76385498]
[106.60937500 278.76083374]
[106.30924225 293.75784302]
[106.00910950 308.75485229]
[105.70897675 323.75183105]
[105.40884399 338.74884033]
[112.86847687 352.70104980]
[104.87806702 365.27096558]
[104.57793427 380.26797485]
[104.27780151 395.26495361]
[103.97766876 410.26196289]
[103.67753601 425.25894165]
[117.31707001 432.10919189]
[126.62685394 444.20428467]
[129.75842285 459.14266968]
[126.08999634 473.95840454]
[116.34995270 485.70974731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 151]
[8 150]
[9 149]
[10 148]
[11 147]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[21 136]
[22 135]
[25 132]
[26 131]
[27 130]
[28 129]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[41 61]
[42 60]
[43 59]
[45 55]
[46 54]
[70 126]
[71 125]
[72 124]
[73 123]
[74 122]
[77 120]
[78 119]
[79 118]
[80 117]
[82 113]
[83 112]
[84 111]
[86 110]
[87 109]
[89 107]
[90 106]
[91 105]
[92 104]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
