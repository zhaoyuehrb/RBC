%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUCUGCCUUUGGACGUGAGAGAGAGCGCACCUUUCACUUGAGCUUCAACAUGGGAAAGGGAAAUGAAGACCCCGAUCUCCACUGCUCCUCCAUCCAGUGCUCCACUGACCAGCCCCCUUUCCAACAGAUCUCCUUUACAGAAAAGGGCU\
) } def
/len { sequence length } bind def

/coor [
[163.31915283 261.24960327]
[160.10949707 253.56912231]
[159.32426453 245.24804688]
[161.05450439 237.03637695]
[165.16355896 229.68034363]
[171.29771423 223.85452271]
[166.48820496 209.64646912]
[161.67868042 195.43843079]
[156.86917114 181.23039246]
[153.82507324 179.34074402]
[151.56922913 175.85290527]
[150.85636902 171.16520691]
[152.22903442 166.00384521]
[148.29751587 151.52824402]
[144.36599731 137.05264282]
[140.43446350 122.57704163]
[136.50294495 108.10144043]
[106.48765564 132.05422974]
[77.16157532 116.22870636]
[63.05459595 121.32704163]
[48.94761276 126.42538452]
[34.84062958 131.52372742]
[20.73365021 136.62205505]
[6.62666798 141.72039795]
[-7.48031378 146.81874084]
[-10.81289864 161.88185120]
[-21.77627182 172.73579407]
[-36.87205887 175.91711426]
[-51.28324890 170.41064453]
[-60.41128540 157.97351074]
[-61.34344482 142.57432556]
[-53.78227997 129.12693787]
[-40.14052582 121.92234802]
[-24.77122116 123.25952148]
[-12.57865334 132.71176147]
[1.52832842 127.61341858]
[15.63531017 122.51508331]
[29.74229240 117.41674042]
[43.84927368 112.31840515]
[57.95625687 107.22006226]
[72.06324005 102.12171936]
[74.06999207 82.75325775]
[89.18437958 67.48514557]
[112.52635193 64.76949310]
[106.85684967 50.88220978]
[101.18734741 36.99492264]
[95.51785278 23.10763359]
[86.45967102 22.45581627]
[78.15802765 18.88268852]
[71.52244568 12.81092644]
[67.26961517 4.93518877]
[65.84605408 -3.85728979]
[67.38137054 -12.58662033]
[71.67702484 -20.28946114]
[78.23148346 -26.12532806]
[74.00549316 -40.51772308]
[69.77950287 -54.91011810]
[65.40693665 -69.25865936]
[60.88824463 -83.56185913]
[47.14596939 -90.89586639]
[42.76712799 -105.46570587]
[49.84367371 -118.52166748]
[45.32498169 -132.82485962]
[40.80628586 -147.12806702]
[25.79246330 -150.36544800]
[14.41958141 -160.68789673]
[9.74689007 -175.31874084]
[13.03131962 -190.32234192]
[23.38937569 -201.66281128]
[38.03479004 -206.28962708]
[53.02802658 -202.95817566]
[64.33597565 -192.56463623]
[68.91685486 -177.90478516]
[65.53842926 -162.92207336]
[55.10948181 -151.64675903]
[59.62817764 -137.34355164]
[64.14686584 -123.04035950]
[77.43973541 -116.41954803]
[82.22608948 -101.97843933]
[75.19143677 -88.08055115]
[79.71012878 -73.77735138]
[84.75440979 -68.31374359]
[84.17189789 -59.13610458]
[88.39788818 -44.74370956]
[92.62387848 -30.35131645]
[112.14315796 -22.08323097]
[119.42350006 -1.87651122]
[109.40513611 17.43813324]
[115.07463837 31.32542038]
[120.74414062 45.21270752]
[126.41364288 59.09999466]
[133.38583374 61.86377335]
[129.01310730 47.51528549]
[137.50469971 35.15030670]
[152.46644592 34.07969284]
[162.63211060 45.10962296]
[160.34692383 59.93453217]
[147.33023071 67.39133453]
[154.30242920 70.15511322]
[167.94689941 63.92388535]
[181.59138489 57.69266129]
[195.23587036 51.46143723]
[208.88034058 45.23021317]
[220.77638245 33.15045547]
[235.67721558 41.23758316]
[232.03109741 57.79482269]
[215.11157227 58.87469101]
[201.46708679 65.10591888]
[187.82261658 71.33714294]
[174.17813110 77.56836700]
[160.53364563 83.79959106]
[175.49522400 84.87268829]
[189.58081055 79.71556854]
[204.47096252 81.52755737]
[216.90864563 89.91231537]
[224.17327881 103.03577423]
[224.67579651 118.02735901]
[218.30628967 131.60783386]
[206.45802307 140.80667114]
[191.72262573 143.61170959]
[177.32330322 139.40940857]
[166.40969849 129.11895752]
[161.36875916 114.98857880]
[150.97854614 104.16991425]
[154.91006470 118.64551544]
[158.84159851 133.12112427]
[162.77311707 147.59672546]
[166.70465088 162.07232666]
[171.07720947 176.42086792]
[175.88673401 190.62892151]
[180.69624329 204.83695984]
[185.50576782 219.04499817]
[206.44001770 227.12522888]
[214.63735962 247.72256470]
[205.21316528 267.48849487]
[211.72142029 281.00302124]
[218.22967529 294.51754761]
[224.73794556 308.03207397]
[231.24620056 321.54663086]
[237.75445557 335.06115723]
[252.36137390 341.69567871]
[256.14169312 357.28698730]
[246.19543457 369.87475586]
[230.15254211 369.80270386]
[220.31973267 357.12612915]
[224.23991394 341.56939697]
[217.73165894 328.05487061]
[211.22340393 314.54034424]
[204.71514893 301.02581787]
[198.20689392 287.51126099]
[191.69863892 273.99673462]
[183.51435852 274.25927734]
[175.58915710 272.06854248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 132]
[7 131]
[8 130]
[9 129]
[13 128]
[14 127]
[15 126]
[16 125]
[17 124]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[44 91]
[45 90]
[46 89]
[47 88]
[55 85]
[56 84]
[57 83]
[58 81]
[59 80]
[62 77]
[63 76]
[64 75]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
[135 151]
[136 150]
[137 149]
[138 148]
[139 147]
[140 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
