%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGUGGGCAAUAAGUCUACCAUGUCUGAAUUUGUUUUGCUGGGGCUCUCUAAUUCCUGGGAACUACAGAUGUUUUUCUUUAUGGUGUUUUCAUUGC\
) } def
/len { sequence length } bind def

/coor [
[22.10408211 431.21945190]
[19.25008583 446.25650024]
[9.72584534 458.23764038]
[-4.28003883 464.40963745]
[-19.54911804 463.35427856]
[-32.57266617 455.31402588]
[-40.35797501 442.13647461]
[-41.11602783 426.84976196]
[-34.67263412 412.96661377]
[-22.50844193 403.67733765]
[-7.41868830 401.11648560]
[-2.82782960 386.83627319]
[1.76302922 372.55609131]
[6.35388803 358.27587891]
[10.94474697 343.99569702]
[0.06057303 333.79763794]
[-5.33866978 319.82775879]
[-4.13211060 304.83758545]
[3.49432588 291.80465698]
[16.07420921 283.34097290]
[31.14229393 281.16976929]
[35.73315430 266.88955688]
[40.32401276 252.60937500]
[44.91487122 238.32917786]
[49.50572968 224.04898071]
[54.09658813 209.76878357]
[58.68744659 195.48858643]
[51.21714020 184.86425781]
[51.28646851 171.68099976]
[59.09644318 160.81799316]
[71.94140625 156.42686462]
[76.97415924 142.29635620]
[82.00690460 128.16584778]
[71.57937622 117.58789825]
[66.76506042 103.53625488]
[68.51482391 88.78617859]
[76.48307037 76.25089264]
[89.09603119 68.40618134]
[103.86257935 66.80140686]
[108.89533234 52.67089462]
[113.92807770 38.54037857]
[118.96083069 24.40986633]
[118.90966797 15.09375000]
[124.37607574 9.92230606]
[129.84585571 -4.04485464]
[135.31562805 -18.01201439]
[129.23094177 -32.35127258]
[134.97703552 -46.43804169]
[148.68482971 -52.15049362]
[154.15460205 -66.11765289]
[159.62437439 -80.08481598]
[149.97680664 -92.03554535]
[147.61297607 -107.21144867]
[153.16877747 -121.53027344]
[165.14968872 -131.14033508]
[180.33291626 -133.45657349]
[194.63426208 -127.85592651]
[204.20672607 -115.84494781]
[206.47535706 -100.65452576]
[200.82991028 -86.37081146]
[188.78898621 -76.83605194]
[173.59152222 -74.61504364]
[168.12174988 -60.64788055]
[162.65197754 -46.68072128]
[168.83505249 -33.17867661]
[163.48689270 -18.93606949]
[149.28279114 -12.54224205]
[143.81301880 1.42491853]
[138.34324646 15.39207935]
[133.09133911 29.44261551]
[128.05859375 43.57313156]
[123.02584076 57.70364380]
[117.99309540 71.83415985]
[128.42062378 82.41210175]
[133.23493958 96.46374512]
[131.48516846 111.21382141]
[123.51692963 123.74910736]
[110.90396881 131.59382629]
[96.13742065 133.19859314]
[91.10466766 147.32910156]
[86.07192230 161.45962524]
[93.86873627 177.02409363]
[88.19200134 193.12542725]
[72.96764374 200.07945251]
[68.37678528 214.35964966]
[63.78592682 228.63984680]
[59.19506836 242.92004395]
[54.60420990 257.20022583]
[50.01335144 271.48043823]
[45.42248917 285.76062012]
[56.40243149 296.30587769]
[61.69345474 310.51473999]
[60.29630661 325.55032349]
[52.54143906 338.43530273]
[40.01287460 346.64169312]
[25.22494316 348.58654785]
[20.63408470 362.86676025]
[16.04322624 377.14694214]
[11.45236683 391.42715454]
[6.86150837 405.70733643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[31 81]
[32 80]
[33 79]
[39 73]
[40 72]
[41 71]
[42 70]
[44 69]
[45 68]
[46 67]
[49 64]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
