%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGAGUGCACUGGAAAUUGAAACUCUCACUUUCAACUUGGAGAUGGAGAGCCCCAAUCGAACCACCAUUCAGGAGUUUAUCUUCUCCGCUUUCCCUUAUUCCUGGGUUAAGUCUGUUGUCUGCUUUGUUCCACUGCUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[124.50521851 363.77233887]
[110.06607819 357.76858521]
[102.91013336 343.86437988]
[106.41619873 328.62490845]
[118.92881775 319.24578857]
[119.57860565 304.25985718]
[120.22838593 289.27392578]
[113.04967499 276.22344971]
[121.37751770 262.77139282]
[122.02729797 247.78547668]
[122.67708588 232.79956055]
[115.49837494 219.74905396]
[123.82621765 206.29701233]
[124.47599792 191.31109619]
[125.12577820 176.32516479]
[125.77555847 161.33924866]
[126.42534637 146.35333252]
[116.59127045 135.02676392]
[101.66250610 133.56661987]
[86.73374939 132.10647583]
[71.80498505 130.64631653]
[61.48218918 142.08074951]
[46.57999420 145.20771790]
[32.85632706 139.03317261]
[25.48821068 126.11618042]
[10.55944729 124.65602875]
[-4.36931515 123.19587708]
[-19.29807854 121.73572540]
[-34.22684097 120.27558136]
[-46.36760330 130.03465271]
[-61.48669434 128.34118652]
[-70.71566010 116.70668793]
[-85.64442444 115.24653625]
[-100.57318878 113.78638458]
[-115.50195312 112.32624054]
[-127.55137634 122.55301666]
[-143.29598999 121.18095398]
[-153.39480591 109.02408600]
[-151.85636902 93.29485321]
[-139.59339905 83.32513428]
[-123.88130951 85.02979279]
[-114.04180145 97.39747620]
[-99.11303711 98.85762787]
[-84.18428040 100.31777191]
[-69.25551605 101.77792358]
[-57.94712067 92.15213013]
[-42.78643036 93.42026520]
[-32.76669312 105.34681702]
[-17.83792877 106.80696869]
[-2.90916562 108.26711273]
[12.01959705 109.72726440]
[26.94836044 111.18741608]
[36.67966461 99.94287109]
[51.33963776 96.54447174]
[65.35353088 102.49966431]
[73.26513672 115.71755981]
[88.19389343 117.17770386]
[103.12265778 118.63785553]
[118.05142212 120.09800720]
[79.63718414 115.57773590]
[86.82051086 79.63024902]
[82.96439362 65.13437653]
[79.10827637 50.63850403]
[65.31166077 42.92948532]
[61.08752823 27.70016289]
[68.94197845 13.98582363]
[84.21511078 9.92294216]
[97.84564209 17.92195320]
[101.74681854 33.23718643]
[93.60414886 46.78238297]
[97.46026611 61.27825928]
[101.31638336 75.77413177]
[117.96974945 81.71344757]
[126.94498444 98.06310272]
[132.64767456 84.18941498]
[138.35038757 70.31572723]
[144.05308533 56.44203568]
[135.79530334 43.30473328]
[136.87013245 27.82492638]
[146.86425781 15.95492077]
[161.93473816 12.25897503]
[176.28668213 18.15825653]
[184.40145874 31.38436890]
[183.15876770 46.85160446]
[173.03646851 58.61249161]
[157.92677307 62.14473724]
[152.22407532 76.01842499]
[146.52137756 89.89211273]
[140.81866455 103.76580048]
[150.89581299 114.87665558]
[165.25874329 110.55155182]
[179.62165833 106.22644806]
[193.98457336 101.90134430]
[206.23843384 88.20236206]
[223.14277649 92.79606628]
[237.40861511 88.16081238]
[251.67446899 83.52555847]
[256.34124756 68.72688293]
[268.83520508 59.52466202]
[284.35211182 59.45732880]
[296.92547607 68.55077362]
[301.72048950 83.30839539]
[296.89346313 98.05557251]
[284.30041504 107.12171936]
[268.78366089 107.02072144]
[256.30972290 97.79140472]
[242.04386902 102.42666626]
[227.77803040 107.06192017]
[221.97518921 117.72855377]
[210.06904602 121.67997742]
[198.30967712 116.26425934]
[183.94676208 120.58936310]
[169.58384705 124.91447449]
[155.22091675 129.23957825]
[169.89913940 132.32989502]
[184.42866516 128.60256958]
[199.30044556 130.55958557]
[212.37104797 137.91889954]
[221.75662231 149.61979675]
[226.10443115 163.97586060]
[224.78782654 178.91796875]
[217.99658203 192.29252625]
[206.70950317 202.17190552]
[192.55339050 207.13217163]
[177.56852722 206.45841980]
[163.91467285 200.24777222]
[153.55972290 189.39533997]
[147.99615479 175.46528625]
[148.02566528 160.46601868]
[141.41127014 147.00311279]
[140.76147461 161.98902893]
[140.11169434 176.97496033]
[139.46191406 191.96087646]
[138.81213379 206.94679260]
[145.94436646 221.06918335]
[137.66299438 233.44934082]
[137.01321411 248.43525696]
[136.36343384 263.42117310]
[143.49566650 277.54354858]
[135.21430969 289.92370605]
[134.56452942 304.90963745]
[133.91473389 319.89556885]
[145.56857300 330.32254028]
[147.74241638 345.80828857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 142]
[6 141]
[7 140]
[9 138]
[10 137]
[11 136]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 59]
[19 58]
[20 57]
[21 56]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[32 45]
[33 44]
[34 43]
[35 42]
[61 72]
[62 71]
[63 70]
[74 89]
[75 88]
[76 87]
[77 86]
[90 114]
[91 113]
[92 112]
[93 111]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
