%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCGUCGGCCACGUUCAGCGGACACGGGAGCAAGAUGGCGAUUCCGGGCAGGCAGUAUGGGCUUAUUUUGCCAAAGAAAACACAGCAGUUGCACCCUGUUUUGCAAAAACCAUCAGUGUUUGGGAAUGAUUCUG\
) } def
/len { sequence length } bind def

/coor [
[94.31700134 340.27767944]
[79.67604828 337.01538086]
[68.40940094 327.11273193]
[63.29529953 313.01272583]
[57.63401413 326.90335083]
[51.97272491 340.79397583]
[54.74057007 356.95785522]
[41.95498276 367.22726440]
[26.76867294 361.03793335]
[24.80401993 344.75689697]
[38.08208847 335.13269043]
[43.74337387 321.24206543]
[49.40466309 307.35140991]
[47.79102325 297.47827148]
[54.86001587 288.70083618]
[57.57675934 273.94891357]
[60.29350281 259.19699097]
[63.01024628 244.44505310]
[65.72698975 229.69313049]
[59.10793304 219.50389099]
[61.31084824 207.14631653]
[71.68635559 199.38973999]
[74.73818970 184.70347595]
[77.79003143 170.01722717]
[80.84187317 155.33096313]
[83.89371490 140.64469910]
[86.94555664 125.95843506]
[89.99739075 111.27217865]
[89.82666016 96.27314758]
[86.44130707 81.66016388]
[83.05594635 67.04717255]
[72.40370941 55.34929657]
[77.06896210 41.20416260]
[73.68360138 26.59117699]
[70.29824829 11.97819138]
[66.91289520 -2.63479471]
[50.49890518 -11.95896626]
[46.09993362 -29.99058723]
[56.03103638 -45.29404068]
[51.98408508 -59.73780060]
[37.19160461 -63.62749100]
[26.40340805 -74.32850647]
[22.44627953 -88.89584351]
[26.28632355 -103.39102173]
[36.79544449 -113.94677734]
[32.74849319 -128.39053345]
[28.70153999 -142.83428955]
[13.32369041 -151.08654785]
[8.72073078 -167.57151794]
[17.25680542 -182.01684570]
[12.88211727 -196.36474609]
[8.50742817 -210.71263123]
[4.13273859 -225.06053162]
[-0.24195038 -239.40843201]
[-4.61663961 -253.75631714]
[-19.96765518 -266.73397827]
[-15.00819016 -285.37112427]
[-20.03138542 -299.50503540]
[-25.05457878 -313.63894653]
[-37.88084412 -323.85751343]
[-35.17720413 -340.03225708]
[-19.72492599 -345.52398682]
[-7.41999435 -334.68328857]
[-10.92066479 -318.66213989]
[-5.89747095 -304.52822876]
[-0.87427658 -290.39431763]
[8.80433559 -286.80334473]
[15.00057030 -278.27212524]
[15.43999672 -267.51647949]
[9.73125553 -258.13101196]
[14.10594463 -243.78311157]
[18.48063469 -229.43522644]
[22.85532379 -215.08732605]
[27.23001289 -200.73942566]
[31.60470200 -186.39154053]
[43.75560760 -181.95613098]
[51.22257614 -171.15577698]
[51.07633209 -157.83122253]
[43.14529800 -146.88124084]
[47.19224930 -132.43748474]
[51.23920441 -117.99372864]
[65.70300293 -114.43505096]
[76.51546478 -104.04532623]
[80.70337677 -89.54264069]
[77.04580688 -74.79411316]
[66.42784882 -63.78475189]
[70.47480011 -49.34099197]
[81.48710632 -45.99549484]
[89.57203674 -37.63585281]
[92.61016846 -26.28531075]
[89.72370911 -14.77106285]
[81.52587891 -6.02015066]
[84.91123199 8.59283543]
[88.29659271 23.20582199]
[91.68194580 37.81880951]
[102.09204102 48.47146988]
[97.66893768 63.66181946]
[101.05429077 78.27480316]
[104.43964386 92.88779449]
[113.67062378 87.38496399]
[125.59221649 86.74883270]
[140.40216064 89.12907410]
[155.21209717 91.50930786]
[170.02204895 93.88954926]
[184.83200073 96.26978302]
[201.42988586 92.81344604]
[209.34590149 107.80588531]
[197.13075256 119.56285858]
[182.45175171 111.07972717]
[167.64181519 108.69949341]
[152.83186340 106.31925201]
[138.02192688 103.93901825]
[123.21197510 101.55877686]
[136.63966370 108.24436951]
[140.76031494 122.66727448]
[132.89114380 135.43740845]
[118.15541840 138.24070740]
[106.14690399 129.25205994]
[104.68365479 114.32402039]
[101.63181305 129.01028442]
[98.57997894 143.69653320]
[95.52813721 158.38279724]
[92.47629547 173.06906128]
[89.42445374 187.75532532]
[86.37261200 202.44158936]
[92.56809998 219.73983765]
[80.47891235 232.40986633]
[77.76216888 247.16178894]
[75.04542542 261.91372681]
[72.32868195 276.66564941]
[69.61193848 291.41757202]
[81.51950836 282.29562378]
[96.34682465 280.02609253]
[110.43776703 285.16860962]
[120.31780243 296.45510864]
[123.55071259 311.10256958]
[119.33933258 325.49923706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[22 125]
[23 124]
[24 123]
[25 122]
[26 121]
[27 120]
[28 119]
[29 99]
[30 98]
[31 97]
[33 95]
[34 94]
[35 93]
[36 92]
[39 87]
[40 86]
[45 81]
[46 80]
[47 79]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[57 66]
[58 65]
[59 64]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
