%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCCAGUACACUUGCCUGUGGUGUCAGCAAGCACUGUCGACUUCUUCCUCUGGUGAAGUGGGUUUACUUGAACUUGAAGGAAAGAAAAAAAAAUGUCUCCACUUCUGAGAAGCAUCUGUGACAUCACUGAAAUUUUCAAUCAGUAUGUCUCUCAUGAUUGUGAUGGAGCAGCAUUAACUAAGAAAGACCUGA\
) } def
/len { sequence length } bind def

/coor [
[96.89069366 123.03279877]
[86.98545074 134.29718018]
[77.08020782 145.56155396]
[79.48463440 158.82180786]
[73.89089203 170.86822510]
[62.54642105 177.39326477]
[49.70865631 176.20684814]
[39.62414551 187.31101990]
[29.53963089 198.41519165]
[19.45511627 209.51936340]
[20.60537910 220.35110474]
[15.69911194 229.82949829]
[6.57446814 234.92950439]
[-3.63112092 234.17460632]
[-14.06635952 244.94984436]
[-24.50159645 255.72508240]
[-34.93683624 266.50033569]
[-45.37207413 277.27557373]
[-49.10055542 285.62835693]
[-56.06196976 288.13818359]
[-66.66857147 298.74478149]
[-66.41793823 314.54708862]
[-77.47447968 325.83993530]
[-93.27854919 325.92349243]
[-104.45387268 314.74816895]
[-104.37032318 298.94409180]
[-93.07747650 287.88757324]
[-77.27517700 288.13818359]
[-66.66857147 277.53158569]
[-56.14731598 266.84033203]
[-45.71207428 256.06509399]
[-35.27683640 245.28984070]
[-24.84159851 234.51460266]
[-14.40636158 223.73936462]
[-11.10062790 204.69517517]
[8.35094738 199.43484497]
[18.43546104 188.33067322]
[28.51997375 177.22650146]
[38.60448837 166.12232971]
[37.07588196 149.37976074]
[48.34654999 136.45349121]
[65.81583405 135.65631104]
[75.72107697 124.39193726]
[85.62631226 113.12755585]
[83.58899689 98.26655579]
[71.01766968 90.08353424]
[58.44635010 81.90051270]
[45.87503052 73.71749115]
[33.30370712 65.53446198]
[20.66720963 57.45245361]
[7.96634674 49.47197342]
[-4.79806519 41.59353256]
[-17.62520599 33.81764603]
[-33.43728256 33.28023529]
[-40.30995941 20.06601524]
[-53.13710022 12.29012680]
[-65.96424103 4.51423836]
[-84.37261963 4.55339956]
[-92.22407532 -11.13531494]
[-105.17420197 -18.70461273]
[-118.12432861 -26.27391243]
[-131.07444763 -33.84320831]
[-144.02456665 -41.41250992]
[-160.41744995 -40.95899963]
[-168.77496338 -55.06871033]
[-160.49963379 -69.22677612]
[-144.10440063 -68.86859894]
[-136.45527649 -54.36263275]
[-123.50514984 -46.79333496]
[-110.55503082 -39.22403717]
[-97.60490417 -31.65473747]
[-84.65477753 -24.08543968]
[-72.87014771 -26.84910011]
[-62.01601028 -20.63856125]
[-58.18835449 -8.31290340]
[-45.36120987 -0.53701466]
[-32.53406906 7.23887396]
[-17.63947678 7.22010088]
[-9.84931850 20.99050331]
[2.97782302 28.76639175]
[10.33663940 29.54639053]
[15.94682789 36.77111053]
[28.64769173 44.75159073]
[35.99306107 45.64943314]
[41.48673248 52.96314240]
[54.05805206 61.14616776]
[66.62937164 69.32919312]
[79.20069885 77.51221466]
[91.77201843 85.69523621]
[86.13386536 71.79519653]
[92.59348297 58.25734711]
[106.94531250 53.89557266]
[119.84552002 61.54962540]
[122.89537811 76.23629761]
[114.10963440 88.39353943]
[128.26788330 83.43935394]
[142.42613220 78.48516846]
[156.58438110 73.53098297]
[170.74263000 68.57679749]
[184.81965637 63.39632416]
[198.81184387 57.99088669]
[212.80403137 52.58545303]
[226.79621887 47.18001938]
[240.78840637 41.77458191]
[248.01226807 22.03907967]
[267.17037964 14.13956928]
[285.67376709 22.79936790]
[299.29089355 16.50855637]
[312.85714722 10.10881805]
[326.37167358 3.60056162]
[339.88619995 -2.90769434]
[353.40072632 -9.41595078]
[366.91528320 -15.92420673]
[352.30645752 -19.32756996]
[341.77490234 -30.00867653]
[338.57781982 -44.66400909]
[343.70407104 -58.76087570]
[355.56814575 -67.93931580]
[370.50067139 -69.36055756]
[383.88320923 -62.58503723]
[391.57672119 -49.70832825]
[391.20175171 -34.71301651]
[382.87408447 -22.23683548]
[397.18386841 -26.73468208]
[411.49362183 -31.23252869]
[425.80340576 -35.73037338]
[440.11315918 -40.22822189]
[447.37243652 -45.79360199]
[454.68844604 -44.68149567]
[469.06845093 -48.94940948]
[483.44848633 -53.21732330]
[497.82849121 -57.48523712]
[512.20849609 -61.75315094]
[516.41290283 -76.59654999]
[527.98992920 -86.79341888]
[543.24542236 -89.08995819]
[557.31134033 -82.75335693]
[565.69940186 -69.80561066]
[565.73291016 -54.37828064]
[557.40124512 -41.39418411]
[543.36297607 -34.99649429]
[528.09765625 -37.22669220]
[516.47644043 -47.37313080]
[502.09640503 -43.10521698]
[487.71640015 -38.83730316]
[473.33636475 -34.56938934]
[458.95635986 -30.30147743]
[444.61099243 -25.91845512]
[430.30123901 -21.42061043]
[415.99148560 -16.92276382]
[401.68170166 -12.42491722]
[387.37194824 -7.92707062]
[373.42352295 -2.40967369]
[359.90899658 4.09858227]
[346.39447021 10.60683823]
[332.87991333 17.11509514]
[319.36538696 23.62335014]
[314.69720459 29.36516953]
[305.58169556 30.12566757]
[291.96456909 36.41647720]
[291.59017944 45.79135132]
[287.79739380 54.43622971]
[281.07055664 61.14191818]
[272.30746460 64.95369720]
[262.69982910 65.30712891]
[253.57098389 62.11120987]
[246.19384766 55.76676941]
[232.20166016 61.17220306]
[218.20947266 66.57763672]
[204.21728516 71.98307037]
[190.22509766 77.38851166]
[187.50318909 81.32659149]
[182.27310181 83.58964539]
[175.69682312 82.73504639]
[161.53857422 87.68923187]
[147.38032532 92.64341736]
[133.22207642 97.59760284]
[119.06381989 102.55179596]
[133.42742920 98.22897339]
[148.42712402 98.32423401]
[162.73468018 102.82913208]
[175.08311462 111.34475708]
[184.37899780 123.11704254]
[189.79914856 137.10353088]
[190.86360168 152.06571960]
[187.47810364 166.67868042]
[179.94245911 179.64840698]
[168.92393494 189.82643127]
[155.39823914 196.31147766]
[140.56311035 198.52928162]
[125.73217773 196.28344727]
[112.21877289 189.77285767]
[101.21949768 179.57403564]
[93.70836639 166.59008789]
[90.35049438 151.97076416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[7 39]
[8 38]
[9 37]
[10 36]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[20 29]
[21 28]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 83]
[51 82]
[52 80]
[53 79]
[55 77]
[56 76]
[57 75]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[95 178]
[96 177]
[97 176]
[98 175]
[99 174]
[100 171]
[101 170]
[102 169]
[103 168]
[104 167]
[107 160]
[108 159]
[109 157]
[110 156]
[111 155]
[112 154]
[113 153]
[123 152]
[124 151]
[125 150]
[126 149]
[127 148]
[129 147]
[130 146]
[131 145]
[132 144]
[133 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
