%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCAGAGGAGGAAGGAGAGAAGAGGUGGAGGUGGCCGCAGGCUGAGUCGCGGCCGGGAUGUCCGGGCAGCCGCCGCCGCCGCCGCCGCAGCAGCAGCAACAGCAGCAGCAGCUGUCGCCGCCACCGCCGGCGGCCUUGGCCCCAGUCUCCGGAGUCG\
) } def
/len { sequence length } bind def

/coor [
[90.31439209 425.83605957]
[79.42102051 414.38574219]
[79.89835358 398.58865356]
[91.46321106 387.81695557]
[91.75772095 372.81985474]
[79.79030609 363.99267578]
[75.26188660 349.64144897]
[80.10897827 335.20681763]
[92.67142487 326.29101562]
[92.96593475 311.29391479]
[93.26043701 296.29681396]
[93.55493927 281.29971313]
[93.84944916 266.30258179]
[83.37320709 255.77719116]
[83.45823669 240.56379700]
[94.56927490 229.64672852]
[94.86378479 214.64961243]
[82.04285431 207.06744385]
[74.68962860 193.99893188]
[74.86618042 178.90470886]
[82.62522888 165.83972168]
[95.96909332 158.36386108]
[96.26359558 143.36674500]
[96.55810547 128.36964417]
[73.35767365 107.59307098]
[83.21359253 79.07157135]
[71.43383789 69.78516388]
[59.65408325 60.49875641]
[47.87432861 51.21234512]
[36.09457397 41.92593765]
[20.46694946 39.45856476]
[15.26212406 25.50295639]
[3.48236990 16.21654701]
[-8.29738426 6.93013763]
[-20.07713890 -2.35627151]
[-31.85689163 -11.64268112]
[-43.63664627 -20.92909050]
[-59.26427078 -23.39645958]
[-64.46909332 -37.35206985]
[-76.24884796 -46.63848114]
[-84.97428894 -49.51554871]
[-88.16635895 -56.22468567]
[-99.76151276 -65.74058533]
[-111.35667419 -75.25648499]
[-122.95182800 -84.77238464]
[-134.54698181 -94.28828430]
[-147.47013855 -93.80873871]
[-156.93840027 -102.01642609]
[-158.21223450 -114.07836914]
[-169.61831665 -123.82009125]
[-181.02441406 -133.56181335]
[-189.63017273 -136.77922058]
[-192.55638123 -143.60850525]
[-203.76901245 -153.57229614]
[-214.98162842 -163.53608704]
[-230.74177551 -162.35559082]
[-242.66593933 -172.72813416]
[-243.67973328 -188.49987793]
[-233.18170166 -200.31370544]
[-217.40013123 -201.16070557]
[-205.69793701 -190.53836060]
[-205.01783752 -174.74870300]
[-193.80522156 -164.78491211]
[-182.59259033 -154.82113647]
[-171.28268433 -144.96791077]
[-159.87660217 -135.22618103]
[-148.47052002 -125.48445892]
[-131.08691406 -123.24792480]
[-125.03108978 -105.88343811]
[-113.43592834 -96.36753845]
[-101.84077454 -86.85163879]
[-90.24562073 -77.33573914]
[-78.65045929 -67.81983948]
[-66.96244049 -58.41823196]
[-55.18268967 -49.13182449]
[-40.39762878 -47.32867813]
[-34.35023499 -32.70884323]
[-22.57048225 -23.42243385]
[-10.79072857 -14.13602543]
[0.98902512 -4.84961605]
[12.76877880 4.43679285]
[24.54853249 13.72320271]
[39.33359146 15.52634621]
[45.38098526 30.14618301]
[57.16073990 39.43259048]
[68.94049072 48.71900177]
[80.72024536 58.00540924]
[92.50000000 67.29181671]
[107.50000000 67.29181671]
[119.27975464 58.00540924]
[131.05950928 48.71900177]
[142.83926392 39.43259048]
[154.61901855 30.14618301]
[160.66641235 15.52634621]
[175.45146179 13.72320271]
[187.23121643 4.43679285]
[193.27861023 -10.18304348]
[208.06367493 -11.98618698]
[219.84342957 -21.27259636]
[220.14009094 -36.90736389]
[230.45610046 -48.65955734]
[245.92054749 -50.98014832]
[259.23156738 -42.77342606]
[264.10415649 -27.91435242]
[258.23757935 -13.41892910]
[244.40187073 -6.13145065]
[229.12983704 -9.49284267]
[217.35008240 -0.20643318]
[212.14524841 13.74917698]
[196.51762390 16.21654701]
[184.73786926 25.50295639]
[179.53305054 39.45856476]
[163.90542603 41.92593765]
[152.12567139 51.21234512]
[140.34591675 60.49875641]
[128.56616211 69.78516388]
[116.78640747 79.07157135]
[126.01718903 90.48295593]
[128.04473877 105.49326324]
[142.39884949 109.84753418]
[156.75294495 114.20180511]
[171.10705566 118.55607605]
[185.46115112 122.91034698]
[199.81526184 127.26461792]
[213.63349915 119.59442139]
[228.80491638 124.02201080]
[236.32858276 137.92057800]
[231.74084473 153.04432678]
[217.76351929 160.42063904]
[202.68910217 155.67324829]
[195.46099854 141.61871338]
[181.10688782 137.26445007]
[166.75277710 132.91017151]
[152.39868164 128.55590820]
[138.04457092 124.20163727]
[123.69046783 119.84736633]
[111.55521393 128.66415405]
[111.26070404 143.66125488]
[110.96620178 158.65837097]
[124.00627136 166.65234375]
[131.24641418 180.01188660]
[130.83023071 195.10137939]
[122.96961212 207.87113953]
[109.86089325 214.94412231]
[109.56638336 229.94122314]
[120.24025726 241.28610229]
[119.72794342 256.49111938]
[108.84655762 266.59710693]
[108.55204773 281.59420776]
[108.25754547 296.59130859]
[107.96304321 311.58843994]
[107.66853333 326.58554077]
[119.87126923 335.98764038]
[124.14791870 350.60144043]
[119.05957031 364.76382446]
[106.75482941 373.11434937]
[106.46031952 388.11145020]
[117.59336853 399.32888794]
[117.45014954 415.13253784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 157]
[5 156]
[9 152]
[10 151]
[11 150]
[12 149]
[13 148]
[16 145]
[17 144]
[22 139]
[23 138]
[24 137]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[39 75]
[40 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[49 67]
[50 66]
[51 65]
[53 64]
[54 63]
[55 62]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[95 111]
[96 110]
[98 108]
[99 107]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
