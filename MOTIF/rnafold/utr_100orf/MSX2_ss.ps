%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGUCUCCGCAGCAAAAAAGUUUGAGUCGCCGCUGCCGGGUUGCCAGCGGAGUCGCGCGUCGGGAGCUACGUAGGGCAGAGAAGUCAUGGCUUCUCCGUCCAAAGGCAAUGACUUGUUUUCGCCCGACGAGGAGGGCCCAGCAGUGGUGGCCGGACCAGGCCCGGGGCCUGGGGGCGCCGAGGGGG\
) } def
/len { sequence length } bind def

/coor [
[53.28664780 278.31460571]
[59.33298492 262.47549438]
[59.33298492 247.47547913]
[59.33298492 232.47547913]
[51.59568787 219.74821472]
[59.33298492 205.94804382]
[59.33298492 190.94804382]
[48.65211487 180.63035583]
[48.43843460 165.41822815]
[59.33298492 154.28509521]
[59.33298492 139.28509521]
[59.33298492 124.28510284]
[44.51134491 121.97880554]
[32.07155609 113.59718323]
[24.36792564 100.72651672]
[22.85842323 85.80266571]
[27.82873154 71.65006256]
[38.33818436 60.94719696]
[52.39780045 55.71965027]
[67.34669495 56.95677185]
[80.35569763 64.42443085]
[88.96276093 76.70932007]
[91.53900909 91.48486328]
[89.30337524 76.65240479]
[87.06774139 61.81994247]
[84.83210754 46.98748016]
[80.45109558 38.95012665]
[82.68471527 31.89010239]
[80.69592285 17.02252960]
[78.70713806 2.15495777]
[76.71834564 -12.71261501]
[74.72956085 -27.58018875]
[72.74076843 -42.44776154]
[70.75198364 -57.31533432]
[68.76319122 -72.18290710]
[66.77440643 -87.05047607]
[64.78561401 -101.91805267]
[62.79682541 -116.78562164]
[53.29812622 -129.43811035]
[59.27965927 -143.07887268]
[57.29087067 -157.94644165]
[55.30208206 -172.81401062]
[53.31329346 -187.68159485]
[51.32450485 -202.54916382]
[39.74807358 -216.85809326]
[47.03517151 -232.81373596]
[44.79953384 -247.64620972]
[34.71989441 -254.02166748]
[30.02188301 -264.54861450]
[15.34450531 -267.64291382]
[0.66712767 -270.73718262]
[-14.74439621 -265.13211060]
[-27.12861824 -275.88214111]
[-23.74571228 -291.92855835]
[-8.07572079 -296.76419067]
[3.76141024 -285.41455078]
[18.43878746 -282.32028198]
[33.11616516 -279.22601318]
[37.19766617 -283.57989502]
[42.39994431 -286.50415039]
[42.89851761 -301.49588013]
[43.39709091 -316.48757935]
[43.89566422 -331.47930908]
[44.39423752 -346.47100830]
[44.89281082 -361.46273804]
[45.39138412 -376.45443726]
[37.01813889 -379.78015137]
[29.75303078 -385.07470703]
[24.04805946 -391.99649048]
[20.25509834 -400.10293579]
[18.60420609 -408.87908936]
[19.18969154 -417.77005005]
[21.96478462 -426.21615601]
[26.74521065 -433.68829346]
[33.22138596 -439.72091675]
[40.97845840 -443.94107056]
[38.49659729 -458.73434448]
[36.01473618 -473.52758789]
[33.53287506 -488.32083130]
[23.61887550 -500.65060425]
[29.14371109 -514.48266602]
[26.66184807 -529.27587891]
[24.17998695 -544.06915283]
[21.69812584 -558.86242676]
[19.21626472 -573.65563965]
[16.73440170 -588.44891357]
[14.25254059 -603.24218750]
[3.40445328 -615.54058838]
[8.88690758 -630.99615479]
[25.06002426 -633.70953369]
[35.28628922 -620.88940430]
[29.04579353 -605.72406006]
[31.52765656 -590.93078613]
[34.00951767 -576.13751221]
[36.49137878 -561.34429932]
[38.97323990 -546.55102539]
[41.45510101 -531.75775146]
[43.93696594 -516.96453857]
[53.67344284 -505.69287109]
[48.32612610 -490.80270386]
[50.80799103 -476.00946045]
[53.28985214 -461.21618652]
[55.77171326 -446.42294312]
[62.15896225 -445.51770020]
[68.27308655 -443.46005249]
[77.13016510 -455.56594849]
[85.98723602 -467.67181396]
[94.84430695 -479.77767944]
[103.70137787 -491.88357544]
[112.55845642 -503.98944092]
[121.41552734 -516.09533691]
[122.64501953 -532.44830322]
[137.53720093 -539.31524658]
[150.77227783 -529.63201904]
[148.73512268 -513.35992432]
[133.52140808 -507.23825073]
[124.66432953 -495.13235474]
[115.80725861 -483.02648926]
[106.95018768 -470.92062378]
[98.09310913 -458.81472778]
[89.23603821 -446.70886230]
[80.37896729 -434.60299683]
[89.45280457 -411.96685791]
[81.61286163 -388.68182373]
[60.38309479 -375.95587158]
[59.88452148 -360.96414185]
[59.38594818 -345.97244263]
[58.88737488 -330.98071289]
[58.38880157 -315.98901367]
[57.89022827 -300.99731445]
[57.39165497 -286.00558472]
[69.57187653 -269.05535889]
[59.63199997 -249.88183594]
[61.86763382 -235.04937744]
[71.41833496 -227.60639954]
[73.39301300 -215.25376892]
[66.19207764 -204.53794861]
[68.18087006 -189.67037964]
[70.16965485 -174.80281067]
[72.15844727 -159.93522644]
[74.14723206 -145.06765747]
[83.50368500 -133.47860718]
[77.66439819 -118.77441406]
[79.65319061 -103.90683746]
[81.64197540 -89.03926849]
[83.63076782 -74.17169189]
[85.61955261 -59.30412292]
[87.60834503 -44.43655014]
[89.59712982 -29.56897736]
[91.58592224 -14.70140362]
[93.57470703 0.16616912]
[95.56349945 15.03374195]
[97.55228424 29.90131378]
[99.66456604 44.75184631]
[101.90019989 59.58430862]
[104.13583374 74.41677094]
[106.37146759 89.24922943]
[112.99182129 102.70920563]
[123.37577057 113.53388977]
[133.75971985 124.35856628]
[144.14366150 135.18324280]
[154.52760315 146.00791931]
[164.91156006 156.83259583]
[175.29550171 167.65727234]
[190.62365723 174.90185547]
[187.90547180 191.63647461]
[171.07235718 193.65711975]
[164.47082520 178.04121399]
[154.08688354 167.21653748]
[143.70292664 156.39186096]
[133.31898499 145.56718445]
[122.93503571 134.74250793]
[112.55109406 123.91783142]
[102.16714478 113.09315491]
[95.20860291 115.89114380]
[81.29152679 121.48711395]
[74.33298492 124.28510284]
[74.33298492 139.28509521]
[74.33298492 154.28509521]
[85.22753906 165.41822815]
[85.01385498 180.63035583]
[74.33298492 190.94804382]
[74.33298492 205.94804382]
[82.07028961 219.74821472]
[74.33298492 232.47547913]
[74.33298492 247.47547913]
[74.33298492 262.47549438]
[80.37932587 278.31460571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 187]
[3 186]
[4 185]
[6 183]
[7 182]
[10 179]
[11 178]
[12 177]
[23 157]
[24 156]
[25 155]
[26 154]
[28 153]
[29 152]
[30 151]
[31 150]
[32 149]
[33 148]
[34 147]
[35 146]
[36 145]
[37 144]
[38 143]
[40 141]
[41 140]
[42 139]
[43 138]
[44 137]
[46 134]
[47 133]
[49 58]
[50 57]
[51 56]
[60 131]
[61 130]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
[76 103]
[77 102]
[78 101]
[79 100]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
[158 174]
[159 173]
[160 172]
[161 171]
[162 170]
[163 169]
[164 168]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
