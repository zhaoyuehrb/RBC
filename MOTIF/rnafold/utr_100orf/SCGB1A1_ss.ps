%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGCCCACCAGACUCAGAGACGGAACCAGAGACGGGCCAGAGCAUCCCCCUCCUCCACCAUGAAACUCGCUGUCACCCUCACCCUGGUCACACUGGCUCUCUGCUGCAGCUCCGCUUCUGCAGAGAUCUGCCCGAGCUUUCAGCGUGUCAUCGAAACCC\
) } def
/len { sequence length } bind def

/coor [
[-148.52281189 343.56948853]
[-160.64633179 334.12768555]
[-171.94787598 343.99050903]
[-177.25798035 358.89398193]
[-191.93460083 361.43286133]
[-203.23614502 371.29568481]
[-214.53767395 381.15850830]
[-225.83921814 391.02133179]
[-223.64450073 400.58547974]
[-225.10340881 410.23034668]
[-229.97026062 418.61697388]
[-237.52929688 424.59686279]
[-246.69960022 427.36929321]
[-256.18963623 426.58834839]
[-264.67910767 422.40545654]
[-276.71093750 431.36285400]
[-288.74279785 440.32022095]
[-285.36224365 455.16918945]
[-288.31997681 470.10812378]
[-297.10348511 482.54876709]
[-310.19104004 490.33569336]
[-325.31509399 492.11978149]
[-339.85531616 487.59194946]
[-351.29254150 477.53662109]
[-357.64520264 463.69595337]
[-357.81265259 448.46795654]
[-351.76589966 434.49096680]
[-340.55255127 424.18655396]
[-326.11538696 419.34005737]
[-310.95578003 420.79113770]
[-297.70016479 428.28839111]
[-285.66833496 419.33099365]
[-273.63647461 410.37362671]
[-272.46478271 390.00906372]
[-256.48730469 376.86492920]
[-235.70204163 379.71978760]
[-224.40049744 369.85696411]
[-213.09895325 359.99417114]
[-201.79742432 350.13134766]
[-197.29568481 335.93331909]
[-181.81069946 332.68896484]
[-170.50915527 322.82614136]
[-177.89947510 310.23623657]
[-182.84008789 296.49453735]
[-185.15975952 282.07293701]
[-184.77725220 267.46682739]
[-181.70417786 253.17829895]
[-176.04467773 239.69882202]
[-167.99188232 227.49229431]
[-157.82128906 216.97911072]
[-145.88140869 208.52169800]
[-132.58174133 202.41198730]
[-118.37879181 198.86138916]
[-103.76038361 197.99339294]
[-89.22887421 199.83938599]
[-75.28394318 204.33741760]
[-62.40537262 211.33433533]
[-51.03654480 220.59095764]
[-39.54587936 210.94915771]
[-28.05521393 201.30734253]
[-27.01694298 186.49324036]
[-15.50112438 176.55137634]
[0.03022784 177.74085999]
[11.52089405 168.09904480]
[23.01156044 158.45722961]
[34.50222778 148.81541443]
[45.99289322 139.17359924]
[57.38953400 129.42082214]
[68.69107056 119.55799866]
[79.99260712 109.69518280]
[91.29415131 99.83235931]
[77.49720001 89.25820160]
[73.50370026 68.49877930]
[74.95585632 53.56923676]
[76.40802002 38.63969421]
[70.04307556 24.15528870]
[78.97616577 12.23685360]
[80.42832947 -2.69268799]
[81.88049316 -17.62223053]
[70.17997742 -27.81425858]
[66.73760223 -42.94468307]
[72.87702942 -57.19554138]
[86.23753357 -65.08708954]
[101.68172455 -63.58486938]
[113.27099609 -53.26651001]
[116.54902649 -38.09963608]
[110.25536346 -23.91621590]
[96.81003571 -16.17006683]
[95.35787201 -1.24052501]
[93.90570831 13.68901730]
[100.37452698 27.10556030]
[91.33756256 40.09185791]
[89.88539886 55.02139664]
[88.43323517 69.95094299]
[94.08400726 74.88234711]
[105.38554382 84.74517059]
[111.03631592 89.67658234]
[125.63198853 86.21734619]
[140.22766113 82.75810242]
[154.71655273 78.87581635]
[169.08639526 74.57376862]
[183.45623779 70.27172089]
[197.82608032 65.96967316]
[212.19592285 61.66762543]
[226.56576538 57.36557770]
[240.93560791 53.06352997]
[246.15940857 38.57152939]
[258.76754761 30.03406334]
[273.80737305 30.55164909]
[285.51831055 39.71633911]
[299.88815308 35.41429138]
[314.25799561 31.11224365]
[327.69760132 20.77719879]
[341.34921265 30.83056259]
[335.46789551 46.73170090]
[318.56005859 45.48208618]
[304.19021606 49.78413391]
[289.82037354 54.08618164]
[285.07208252 68.17844391]
[272.79092407 76.87539673]
[257.56555176 76.67073059]
[245.23765564 67.43337250]
[230.86781311 71.73542023]
[216.49797058 76.03746796]
[202.12812805 80.33951569]
[187.75828552 84.64156342]
[173.38844299 88.94361115]
[159.01860046 93.24565887]
[157.02389526 96.20938110]
[153.47096252 98.33359528]
[148.77998352 98.88584900]
[143.68690491 97.35377502]
[129.09123230 100.81301880]
[114.49555206 104.27225494]
[101.15696716 111.13389587]
[89.85543060 120.99671936]
[78.55389404 130.85954285]
[67.25234985 140.72236633]
[62.81541824 148.76440430]
[55.63470840 150.66426086]
[44.14404297 160.30607605]
[32.65337372 169.94789124]
[21.16270828 179.58970642]
[9.67204189 189.23152161]
[8.14645767 204.73345947]
[-3.64406395 214.34794617]
[-18.41339874 212.79800415]
[-29.90406609 222.43981934]
[-41.39473343 232.08163452]
[-33.94381332 245.59495544]
[-29.26064301 260.29364014]
[-27.52183914 275.61734009]
[-28.79183006 290.98239136]
[-33.02045822 305.80374146]
[-40.04496384 319.51751709]
[-49.59623337 331.60229492]
[-61.30913925 341.59893799]
[-74.73645782 349.12820435]
[-89.36598969 353.90490723]
[-104.64006042 355.74884033]
[-119.97679138 354.59158325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[5 39]
[6 38]
[7 37]
[8 36]
[15 33]
[16 32]
[17 31]
[58 149]
[59 148]
[60 147]
[63 144]
[64 143]
[65 142]
[66 141]
[67 140]
[68 138]
[69 137]
[70 136]
[71 135]
[73 94]
[74 93]
[75 92]
[77 90]
[78 89]
[79 88]
[97 134]
[98 133]
[99 132]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
