%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGAUGAAAGAAACCACAGCAUGGAGCUCUGGAACUUCACCUUGGGAAGUGGCUUCAUUUUGGUGGGGAUUCUGAAUGACAGUGGGUCUCCUGAACUGCUCUGUGCUACAAUUACAAUCC\
) } def
/len { sequence length } bind def

/coor [
[79.76052094 356.33401489]
[73.40180969 369.91955566]
[67.04309082 383.50509644]
[75.90025330 396.05285645]
[77.28092194 411.34954834]
[70.81370544 425.28048706]
[58.23824310 434.09826660]
[42.93728256 435.43096924]
[29.02669907 428.92013550]
[20.24837112 416.31707764]
[18.96362495 401.01202393]
[25.51805115 387.12191772]
[38.14854050 378.38314819]
[53.45755768 377.14636230]
[59.81627274 363.56082153]
[66.17498779 349.97531128]
[64.66859436 344.34613037]
[66.26493835 338.04376221]
[71.17311096 332.80465698]
[73.09908295 317.92883301]
[75.02506256 303.05297852]
[76.95103455 288.17715454]
[78.87701416 273.30130005]
[80.80298615 258.42547607]
[82.72896576 243.54962158]
[84.65493774 228.67378235]
[86.58090973 213.79794312]
[88.50688934 198.92210388]
[89.85697174 183.98298645]
[90.62915802 169.00288391]
[83.55729675 155.89418030]
[91.99475861 142.51060486]
[92.76693726 127.53049469]
[93.53911591 112.55038452]
[80.03482056 105.39530945]
[77.02439880 85.35366821]
[70.66567993 71.76813507]
[64.30696869 58.18259811]
[57.94824982 44.59706497]
[51.58953476 31.01152992]
[45.23081970 17.42599678]
[38.87210464 3.84046292]
[22.43951797 2.61597085]
[8.92428303 -6.64661980]
[1.93323708 -21.36150551]
[3.27472711 -37.50355911]
[12.49186516 -50.70925140]
[5.78545809 -64.12655640]
[-0.92094874 -77.54386139]
[-7.62735558 -90.96116638]
[-20.11730576 -102.42578888]
[-12.55829144 -117.60134888]
[4.11674547 -114.53875732]
[5.78995037 -97.66757965]
[12.49635792 -84.25026703]
[19.20276451 -70.83296204]
[25.90917206 -57.41565704]
[39.62930679 -57.48471451]
[52.08958435 -51.58430481]
[60.81383514 -40.82344055]
[64.04092407 -27.28317642]
[61.08005142 -13.61426926]
[52.45763779 -2.51825285]
[58.81635284 11.06728077]
[65.17507172 24.65281487]
[71.53378296 38.23834991]
[77.89250183 51.82388306]
[84.25121307 65.40941620]
[90.60993195 78.99494934]
[91.54288483 64.02399445]
[88.55756378 49.32406616]
[94.56936646 35.58149338]
[107.39093018 27.79640961]
[122.35722351 28.80136490]
[134.02287292 38.23070908]
[138.14341736 52.65364838]
[133.21963501 66.82249451]
[121.04431915 75.58158112]
[111.55962372 87.20227814]
[125.45448303 81.55136108]
[139.34934998 75.90044403]
[146.88380432 61.73670578]
[162.68089294 58.93820190]
[174.62243652 69.65170288]
[173.54789734 85.65873718]
[160.28158569 94.68006134]
[145.00025940 89.79530334]
[131.10540771 95.44622040]
[117.21054840 101.09713745]
[108.51922607 113.32256317]
[107.74704742 128.30267334]
[106.97486877 143.28279114]
[113.99149323 157.46296692]
[105.60926819 169.77505493]
[104.83708191 184.75517273]
[107.33329010 189.61108398]
[107.60500336 194.44259644]
[106.05525970 198.37861633]
[103.38272858 200.84808350]
[101.45675659 215.72392273]
[99.53077698 230.59976196]
[97.60480499 245.47560120]
[95.67882538 260.35144043]
[93.75285339 275.22729492]
[91.82687378 290.10311890]
[89.90090179 304.97897339]
[87.97492981 319.85479736]
[86.04895020 334.73065186]
[96.39523315 323.86996460]
[110.03519440 317.62884521]
[125.01747894 316.90017700]
[139.19871521 321.78817749]
[150.55010986 331.59356689]
[157.44772339 344.91357422]
[158.90478516 359.84265137]
[154.71281433 374.24499512]
[145.47155762 386.06018066]
[132.50305176 393.59796143]
[117.66259003 395.77990723]
[103.07328796 392.29394531]
[90.82228851 383.63870239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 95]
[30 94]
[32 92]
[33 91]
[34 90]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[47 57]
[48 56]
[49 55]
[50 54]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
