%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGGUUCAACGCAGUGACUGCUCAGUAGAAGCCAUGGCUCGCAGACACUGCUUCUCCUACUGGUUACUGGUAUGCUGGUUGGUGGUAACUGUGGCAGAAGCACUGUCCACUUUCUAUCUCCAGCAGCAUAUUA\
) } def
/len { sequence length } bind def

/coor [
[84.19705963 107.86711121]
[69.20105743 108.21358490]
[54.20506287 108.56005096]
[39.20906448 108.90651703]
[24.21306419 109.25299072]
[19.21205711 124.33606720]
[9.37785625 136.78388977]
[-4.09301043 145.11140442]
[-19.57157516 148.33308411]
[-35.19340134 146.07952881]
[-49.08316422 138.63972473]
[-59.57976532 126.92413330]
[-65.43499756 112.35329437]
[-80.41899109 113.04605103]
[-95.40298462 113.73880005]
[-110.38698578 114.43154907]
[-125.37097931 115.12430573]
[-140.35496521 115.81705475]
[-153.78308105 124.18344116]
[-166.85411072 117.04218292]
[-181.83810425 117.73493958]
[-196.82209778 118.42768860]
[-211.80609131 119.12043762]
[-221.10682678 128.14118958]
[-233.65960693 128.36169434]
[-242.67427063 120.21160889]
[-257.67025757 120.55808258]
[-272.66625977 120.90454865]
[-279.96594238 134.41789246]
[-293.05273438 142.45727539]
[-308.40634155 142.86016846]
[-321.89672852 135.51817322]
[-329.89505005 122.40625763]
[-330.24981689 107.05146790]
[-322.86557007 93.58415222]
[-309.72863770 85.62696075]
[-294.37280273 85.32033539]
[-280.92871094 92.74674988]
[-273.01272583 105.90855408]
[-258.01675415 105.56208038]
[-243.02073669 105.21561432]
[-228.59849548 95.28475952]
[-212.49884033 104.13644409]
[-197.51484680 103.44369507]
[-182.53085327 102.75093842]
[-167.54685974 102.05818939]
[-155.19050598 93.74135590]
[-141.04772949 100.83306122]
[-126.06372833 100.14031219]
[-111.07973480 99.44755554]
[-96.09574127 98.75480652]
[-81.11174774 98.06205750]
[-66.12774658 97.36930084]
[-62.29903793 83.69348907]
[-54.41108704 71.85801697]
[-43.22850800 63.03416443]
[-29.84273338 58.10012054]
[-15.56550884 57.55360031]
[-1.80033731 61.46165848]
[10.09548473 69.45279694]
[18.94470215 80.75222778]
[23.86659622 94.25698853]
[38.86259460 93.91052246]
[53.85859299 93.56404877]
[68.85459137 93.21758270]
[83.85058594 92.87111664]
[90.36207581 85.21031189]
[100.00000000 82.34711456]
[109.63792419 85.21031189]
[116.14941406 92.87111664]
[131.14541626 93.21758270]
[146.14140320 93.56404877]
[161.13740540 93.91052246]
[176.13340759 94.25698853]
[191.12939453 94.60345459]
[206.12539673 94.94992828]
[221.12139893 95.29639435]
[236.11740112 95.64286041]
[251.11338806 95.98933411]
[259.85516357 93.03849030]
[266.45068359 96.52098083]
[281.43466187 97.21372986]
[296.41867065 97.90648651]
[311.40264893 98.59923553]
[325.54544067 91.50753021]
[337.90179443 99.82436371]
[352.88580322 100.51711273]
[367.86978149 101.20986938]
[382.85379028 101.90261841]
[393.19564819 88.57249451]
[409.27651978 84.04592896]
[424.74362183 89.90666199]
[433.60751343 103.67469025]
[448.60351562 104.02116394]
[463.59948730 104.36763000]
[478.59548950 104.71409607]
[493.59448242 104.88734436]
[508.59448242 104.88734436]
[523.59448242 104.88734436]
[535.90972900 94.60557556]
[551.59722900 97.96445465]
[558.62286377 112.38734436]
[551.59722900 126.81022644]
[535.90972900 130.16911316]
[523.59448242 119.88734436]
[508.59448242 119.88734436]
[493.59448242 119.88734436]
[486.84518433 123.06150818]
[478.24902344 119.71009827]
[463.25302124 119.36362457]
[448.25701904 119.01715851]
[433.26104736 118.67069244]
[426.15139771 130.02935791]
[414.25146484 136.42292786]
[400.63858032 136.07591248]
[388.89407349 128.97198486]
[382.16104126 116.88661194]
[367.17703247 116.19386292]
[352.19305420 115.50111389]
[337.20904541 114.80835724]
[324.13803101 121.94961548]
[310.70989990 113.58322906]
[295.72592163 112.89048004]
[280.74191284 112.19772339]
[265.75793457 111.50497437]
[250.76692200 110.98532867]
[235.77093506 110.63886261]
[220.77493286 110.29238892]
[205.77893066 109.94592285]
[190.78292847 109.59945679]
[175.78694153 109.25299072]
[160.79093933 108.90651703]
[145.79493713 108.56005096]
[130.79893494 108.21358490]
[115.80294037 107.86711121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[20 46]
[21 45]
[22 44]
[23 43]
[26 41]
[27 40]
[28 39]
[70 135]
[71 134]
[72 133]
[73 132]
[74 131]
[75 130]
[76 129]
[77 128]
[78 127]
[79 126]
[81 125]
[82 124]
[83 123]
[84 122]
[86 120]
[87 119]
[88 118]
[89 117]
[93 112]
[94 111]
[95 110]
[96 109]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
