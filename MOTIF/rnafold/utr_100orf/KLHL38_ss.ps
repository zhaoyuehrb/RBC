%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCUUCCUUCCCUCUUUGUAGGAUGGACGAGGAGUCACUAGAUGGGCUGCUCUUCAAAGACCACGACUUCUCUUCUGACUUGUUGAGGCAGCUCAACAGCUUAAGGCAAAGCAGGAUCCUGA\
) } def
/len { sequence length } bind def

/coor [
[22.56554985 225.87638855]
[17.04368210 239.82304382]
[11.52181435 253.76968384]
[5.99994564 267.71633911]
[12.50581551 282.11944580]
[6.84355307 296.87457275]
[-7.62752295 303.22781372]
[-22.32197952 297.40985107]
[-28.52185631 282.87243652]
[-22.54887581 268.24029541]
[-7.94670153 262.19445801]
[-2.42483330 248.24781799]
[3.09703493 234.30117798]
[8.61890316 220.35452271]
[2.28544402 213.13552856]
[-0.94358522 204.02920532]
[-0.56819475 194.31617737]
[3.40144730 185.37948608]
[10.44032001 178.50761414]
[19.57760048 174.70881653]
[29.53043556 174.56324768]
[36.42413330 161.24121094]
[43.31782913 147.91915894]
[50.21152878 134.59710693]
[57.10522842 121.27506256]
[63.99892426 107.95301819]
[63.81043243 92.95420074]
[56.58412933 79.80960083]
[49.35782242 66.66500092]
[35.92929077 58.29929352]
[36.57812881 43.41882706]
[29.35182571 30.27422523]
[22.12551880 17.12962532]
[14.89921474 3.98502564]
[7.67290974 -9.15957451]
[0.44660440 -22.30417442]
[-6.77970076 -35.44877625]
[-14.00600624 -48.59337616]
[-21.79948807 -49.02286911]
[-28.87027550 -52.16261292]
[-34.31745529 -57.55918121]
[-37.46604919 -64.47518921]
[-37.95045471 -71.98983002]
[-35.75627899 -79.12138367]
[-31.21588326 -84.95549774]
[-36.73775101 -98.90214539]
[-42.25962067 -112.84879303]
[-54.53376007 -122.83158112]
[-52.02502441 -137.51338196]
[-57.54689026 -151.46003723]
[-72.70374298 -154.33638000]
[-83.88368988 -164.96710205]
[-87.51925659 -179.95997620]
[-82.45034027 -194.53082275]
[-70.29441833 -204.03015137]
[-54.93040085 -205.42674255]
[-41.26088715 -198.27496338]
[-33.64777374 -184.85691833]
[-34.52037430 -169.45425415]
[-43.60024261 -156.98190308]
[-38.07837677 -143.03524780]
[-26.19919395 -134.05003357]
[-28.31297302 -118.37065887]
[-22.79110336 -104.42401123]
[-17.26923561 -90.47736359]
[1.90677202 -78.81821442]
[-0.86140561 -55.81967926]
[6.36489964 -42.67507935]
[13.59120464 -29.53047943]
[20.81751060 -16.38587952]
[28.04381561 -3.24127960]
[35.27011871 9.90332031]
[42.49642563 23.04792023]
[49.72272873 36.19252014]
[62.63438797 43.61804199]
[62.50242233 59.43869781]
[69.72872925 72.58329773]
[76.95503235 85.72789764]
[84.43262482 76.80435181]
[95.25040436 71.63074493]
[107.58843231 71.39659882]
[119.23592377 76.43185425]
[127.98735809 86.09677887]
[142.89152527 84.40393066]
[157.79570007 82.71108246]
[172.69985962 81.01824188]
[187.60403442 79.32539368]
[202.50820923 77.63254547]
[217.41236877 75.93970490]
[230.26947021 65.75995636]
[245.41212463 72.05535889]
[247.26286316 88.34973907]
[233.91781616 97.88083649]
[219.10522461 90.84387207]
[204.20104980 92.53672028]
[189.29687500 94.22956085]
[174.39271545 95.92240906]
[159.48854065 97.61525726]
[144.58436584 99.30809784]
[129.68020630 101.00094604]
[125.40491486 115.37877655]
[136.96261597 124.94013214]
[148.52030945 134.50149536]
[160.07800293 144.06285095]
[175.78659058 142.32620239]
[188.06983948 152.27091980]
[189.64030457 167.99699402]
[179.56626892 180.17440796]
[163.82447815 181.57852173]
[151.75425720 171.37631226]
[150.51664734 155.62054443]
[138.95895386 146.05918884]
[127.40125275 136.49783325]
[115.84355164 126.93647003]
[104.54425812 129.87080383]
[93.35537720 128.41184998]
[83.86767578 123.05967712]
[77.32096863 114.84671783]
[70.42727661 128.16876221]
[63.53357697 141.49081421]
[56.63987732 154.81285095]
[49.74618149 168.13490295]
[42.85248184 181.45695496]
[50.63444901 200.87254333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[26 118]
[27 78]
[28 77]
[29 76]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[45 65]
[46 64]
[47 63]
[49 61]
[50 60]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
