%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAAUUAUUUUAUUGUUCAAAAUGUAUGUGUCAAAUUGCAAUCCUUGUGCUAUUCACAGAAAAAUCAAUUAUCCAAAUACCAAACUGGAUUUCGAGCAAGUGAACAACAUAACGGAAUUCA\
) } def
/len { sequence length } bind def

/coor [
[17.40169907 492.15521240]
[10.53768444 505.61114502]
[0.15973505 516.58721924]
[-12.89085484 524.19372559]
[-27.55613327 527.81402588]
[-42.64725113 527.15454102]
[-56.94083786 522.26885986]
[-69.27817535 513.55297852]
[-78.65913391 501.71343994]
[-84.32324219 487.71008301]
[-85.81133270 472.67803955]
[-83.00277710 457.83590698]
[-76.12525177 444.38687134]
[-65.73628235 433.42120361]
[-52.67805481 425.82781982]
[-38.00914764 422.22229004]
[-22.91870117 422.89691162]
[-18.06713104 408.70315552]
[-13.21556091 394.50942993]
[-8.36399078 380.31567383]
[-18.22315025 367.25601196]
[-18.39834404 350.72814941]
[-8.62452507 337.19409180]
[7.43512678 332.06204224]
[11.92557335 317.74993896]
[16.41602135 303.43786621]
[20.90646744 289.12576294]
[19.89532089 281.71746826]
[25.69619942 274.51058960]
[30.54776955 260.31686401]
[35.39933777 246.12310791]
[34.57619095 238.69155884]
[40.55777359 231.63395691]
[45.76735306 217.56767273]
[50.97693253 203.50138855]
[46.20356369 192.30880737]
[50.51776505 180.50201416]
[62.10076141 174.66038513]
[67.66500854 160.73059082]
[73.22924805 146.80079651]
[78.79349518 132.87100220]
[66.97227478 123.35407257]
[59.34716034 109.65224457]
[57.36382675 93.58888245]
[61.68627930 77.46818542]
[72.04644012 63.74464035]
[87.23138428 54.65030289]
[81.31604767 40.86593246]
[75.40071106 27.08156776]
[69.48537445 13.29720020]
[63.57003784 -0.48716739]
[49.26494217 -7.74966431]
[46.16515732 -23.49040413]
[56.64857483 -35.63443756]
[72.67321014 -34.86590195]
[81.94633484 -21.77435303]
[77.35440063 -6.40250540]
[83.26974487 7.38186216]
[89.18508148 21.16622925]
[95.10041809 34.95059586]
[101.01575470 48.73496246]
[108.14278412 51.07065582]
[109.56016541 36.13777161]
[110.97754669 21.20488739]
[109.99794006 6.23690796]
[119.84090424 -5.08193016]
[134.79995728 -6.18951321]
[146.20256042 3.55628133]
[147.43804932 18.50531387]
[137.78880310 29.99155426]
[130.09281921 42.86679840]
[122.39684296 55.74203873]
[129.52386475 58.07772827]
[142.45045471 50.46829224]
[155.37702942 42.85885620]
[168.30360413 35.24942017]
[181.23019409 27.63998222]
[181.02024841 12.28252506]
[188.53117371 -1.11455262]
[201.74253845 -8.94750404]
[217.10058594 -9.10930347]
[230.47406006 -1.55642974]
[238.26554871 11.67943382]
[238.37921143 27.03790474]
[230.78445435 40.38763428]
[217.52423096 48.13760757]
[202.16548157 48.20312500]
[188.83963013 40.56656265]
[175.91305542 48.17599869]
[162.98646545 55.78543472]
[150.05989075 63.39487457]
[137.13330078 71.00431061]
[144.24790955 88.25373840]
[143.98796082 106.37828827]
[136.81381226 122.44300842]
[124.27211761 134.01005554]
[108.68405914 139.50735474]
[92.72328949 138.43524170]
[87.15904236 152.36503601]
[81.59480286 166.29483032]
[76.03055573 180.22463989]
[79.12663269 198.32287598]
[65.04321289 208.71096802]
[59.83363724 222.77725220]
[54.62405777 236.84353638]
[49.59307861 250.97468567]
[44.74150848 265.16842651]
[39.88993835 279.36215210]
[35.21855545 293.61621094]
[30.72810936 307.92831421]
[26.23766327 322.24038696]
[21.74721527 336.55249023]
[30.79591179 347.03546143]
[33.43294907 360.51953125]
[29.06962395 373.43322754]
[18.95702934 382.41027832]
[5.82974911 385.16726685]
[0.97817951 399.36099243]
[-3.87339020 413.55474854]
[-8.72496033 427.74847412]
[3.62112975 436.45196533]
[13.01397896 448.28204346]
[18.69215202 462.27972412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 120]
[18 119]
[19 118]
[20 117]
[24 112]
[25 111]
[26 110]
[27 109]
[29 108]
[30 107]
[31 106]
[33 105]
[34 104]
[35 103]
[38 101]
[39 100]
[40 99]
[41 98]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
