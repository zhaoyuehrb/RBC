%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGGUAAGUUCCGUUUUUAGCCCCGGCCUUUUUCUAGCCAGGCUCUCAACUGUCUCCUGCGUUGCUGGGAAGUUCUGGAAGGAAGCAUGUGCUCCAGAGGUUGGGAUUCGUGUCUGGCUCUGGAAUUGCUACUGCUGCCUCUGUCACUCCUGGUGACCAGCAUUCAAGGUCACUUGGUACAUAUGA\
) } def
/len { sequence length } bind def

/coor [
[98.38726807 204.30795288]
[96.64587402 189.40937805]
[94.90447998 174.51080322]
[93.16308594 159.61222839]
[85.71379852 160.48292542]
[81.05484009 174.74104309]
[88.42902374 188.71949768]
[83.67935181 203.79318237]
[69.62372589 211.01916504]
[54.60109329 206.11039734]
[47.52411652 191.97915649]
[52.59144211 177.00926208]
[66.79671478 170.08209229]
[71.45567322 155.82395935]
[60.12685776 145.99249268]
[46.66688156 152.61283875]
[33.20690536 159.23318481]
[30.45290565 174.38975525]
[19.43113708 184.89566040]
[4.51297712 186.87365723]
[-8.55292988 179.77294922]
[-22.01290512 186.39331055]
[-35.47288132 193.01365662]
[-48.93285751 199.63400269]
[-53.82970810 211.57984924]
[-65.19218445 216.81253052]
[-76.69082642 213.01844788]
[-90.25897980 219.41415405]
[-103.82714081 225.80987549]
[-105.73593140 241.11869812]
[-115.63581848 252.95066833]
[-130.36778259 257.53027344]
[-145.23091125 253.39614868]
[-155.48243713 241.86749268]
[-157.85112000 226.62306213]
[-151.58114624 212.52728271]
[-138.67321777 204.07807922]
[-123.24621582 203.97155762]
[-110.22284698 212.24171448]
[-96.65469360 205.84599304]
[-83.08654022 199.45028687]
[-73.88390350 184.51724243]
[-55.55320740 186.17402649]
[-42.09323120 179.55368042]
[-28.63325691 172.93333435]
[-15.17327976 166.31297302]
[-12.82211781 151.62931824]
[-2.14919925 141.02021790]
[12.90016937 138.70292664]
[26.58655357 145.77320862]
[40.04653168 139.15286255]
[53.50650787 132.53251648]
[47.06206894 113.44232178]
[47.84516525 94.07080841]
[55.21356201 76.96377563]
[67.69407654 64.17988586]
[83.24060822 57.04436493]
[99.55480194 56.02016449]
[114.42060089 60.70775986]
[122.02830505 47.78015900]
[129.63600159 34.85255814]
[131.29687500 25.85068130]
[137.47912598 21.77480888]
[145.30065918 8.97544670]
[153.12217712 -3.82391691]
[160.94371033 -16.62327957]
[168.76524353 -29.42264366]
[176.58676147 -42.22200775]
[184.40829468 -55.02136993]
[192.22982788 -67.82073212]
[200.05134583 -80.62009430]
[207.87287903 -93.41945648]
[209.68313599 -102.39248657]
[215.93228149 -106.36503601]
[223.96546936 -119.03263092]
[220.72726440 -134.26914978]
[229.05451965 -147.00144958]
[243.60017395 -149.99470520]
[251.63336182 -162.66229248]
[259.66656494 -175.32987976]
[267.69973755 -187.99746704]
[269.65890503 -196.93917847]
[275.97320557 -200.80731201]
[284.21585083 -213.33961487]
[285.33474731 -229.12121582]
[298.79290771 -235.50297546]
[307.03555298 -248.03529358]
[315.27816772 -260.56762695]
[323.52081299 -273.09994507]
[325.62832642 -282.00784302]
[332.00607300 -285.77047729]
[340.45587158 -298.16406250]
[348.80236816 -310.62744141]
[357.04501343 -323.15975952]
[364.97262573 -335.89367676]
[372.58035278 -348.82125854]
[380.18804932 -361.74887085]
[387.79574585 -374.67648315]
[395.40344238 -387.60406494]
[403.01113892 -400.53167725]
[410.61886597 -413.45925903]
[405.44659424 -424.18875122]
[406.09820557 -435.96182251]
[412.29553223 -445.85159302]
[422.39620972 -451.45550537]
[433.82733154 -451.47872925]
[441.86050415 -464.14630127]
[449.89370728 -476.81390381]
[457.92691040 -489.48147583]
[458.06719971 -505.88003540]
[472.47021484 -513.72125244]
[486.31939697 -504.93875122]
[485.36788940 -488.56723022]
[470.59448242 -481.44830322]
[462.56130981 -468.78070068]
[454.52810669 -456.11312866]
[446.49490356 -443.44552612]
[451.57080078 -425.87136841]
[442.04223633 -409.88418579]
[423.54644775 -405.85156250]
[415.93875122 -392.92398071]
[408.33105469 -379.99636841]
[400.72335815 -367.06875610]
[393.11563110 -354.14117432]
[385.50793457 -341.21356201]
[377.90023804 -328.28598022]
[378.43649292 -324.78295898]
[377.29074097 -320.84582520]
[374.27743530 -317.27343750]
[369.57733154 -314.91711426]
[361.33468628 -302.38479614]
[360.28387451 -295.05480957]
[352.84942627 -289.71426392]
[344.39962769 -277.32067871]
[336.05313110 -264.85729980]
[327.81048584 -252.32498169]
[319.56787109 -239.79266357]
[311.32522583 -227.26034546]
[310.79589844 -212.37515259]
[296.74816895 -205.09698486]
[288.50552368 -192.56466675]
[280.36734009 -179.96427917]
[272.33413696 -167.29669189]
[264.30096436 -154.62910461]
[256.26776123 -141.96151733]
[259.76223755 -127.52806854]
[251.79588318 -114.56689453]
[236.63307190 -110.99943542]
[228.59986877 -98.33184814]
[220.67224121 -85.59793091]
[212.85070801 -72.79856873]
[205.02919006 -59.99920654]
[197.20765686 -47.19984055]
[189.38612366 -34.40047836]
[181.56460571 -21.60111618]
[173.74307251 -8.80175209]
[165.92153931 3.99761128]
[158.10002136 16.79697418]
[150.27848816 29.59633827]
[142.56361389 42.46026230]
[134.95590210 55.38786316]
[127.34819794 68.31546021]
[142.29353333 83.01288605]
[149.07832336 104.67009735]
[144.59199524 128.68705750]
[128.31031799 149.17860413]
[136.13183594 161.97796631]
[143.95336914 174.77732849]
[151.77490234 187.57669067]
[159.59642029 200.37606812]
[174.24945068 207.73956299]
[174.92872620 224.12463379]
[160.93548584 232.67572021]
[146.66476440 224.59620667]
[146.79705811 208.19758606]
[138.97554016 195.39822388]
[131.15400696 182.59886169]
[123.33248138 169.79949951]
[115.51094818 157.00013733]
[108.06166077 157.87083435]
[109.80305481 172.76940918]
[111.54444885 187.66798401]
[113.28584290 202.56655884]
[115.02723694 217.46513367]
[116.76863098 232.36370850]
[118.50977325 247.26231384]
[103.61114502 249.00321960]
[101.87005615 234.10510254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[15 52]
[16 51]
[17 50]
[21 46]
[22 45]
[23 44]
[24 43]
[27 41]
[28 40]
[29 39]
[59 162]
[60 161]
[61 160]
[63 159]
[64 158]
[65 157]
[66 156]
[67 155]
[68 154]
[69 153]
[70 152]
[71 151]
[72 150]
[74 149]
[75 148]
[78 145]
[79 144]
[80 143]
[81 142]
[83 141]
[84 140]
[86 138]
[87 137]
[88 136]
[89 135]
[91 134]
[92 133]
[93 131]
[94 130]
[95 126]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[106 117]
[107 116]
[108 115]
[109 114]
[166 179]
[167 178]
[168 177]
[169 176]
[170 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
