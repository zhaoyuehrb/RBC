%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:28:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUUCAUUUGCCAGGAAGAAUGUCAGAUUCCAACCUCAGUGAUAACCAUCUUCCAGACACCUUCUUCUUAACAGGGAUCCCAGGGCUGGAGGCUGCCCACUUCUGGAUUGCCAUCCCUU\
) } def
/len { sequence length } bind def

/coor [
[157.47787476 164.20365906]
[146.53810120 153.94104004]
[135.59832764 143.67842102]
[124.65854645 133.41580200]
[113.71877289 123.15318298]
[102.77899933 112.89056396]
[91.32948303 103.19992065]
[79.40009308 94.10654449]
[70.56778717 91.34567261]
[67.28610229 84.62543488]
[55.59283066 75.23036194]
[43.89956284 65.83528137]
[32.20629120 56.44020844]
[16.70377350 57.95996857]
[4.97897196 48.26544952]
[3.62564993 33.47680283]
[-8.06761932 24.08172798]
[-19.76088905 14.68665218]
[-31.45415878 5.29157639]
[-43.14743042 -4.10349941]
[-54.84069824 -13.49857521]
[-66.53396606 -22.89365005]
[-78.22723389 -32.28872681]
[-90.15663147 -41.38210678]
[-102.31436157 -50.16786194]
[-114.47209930 -58.95361710]
[-126.62983704 -67.73937225]
[-139.22032166 -75.89288330]
[-152.21069336 -83.39288330]
[-165.20108032 -90.89288330]
[-178.19145203 -98.39288330]
[-189.26145935 -88.09985352]
[-202.87429810 -81.52854919]
[-217.81953430 -79.26329041]
[-232.76823425 -81.50550842]
[-246.39118958 -88.05580902]
[-257.47705078 -98.33176422]
[-265.04006958 -111.41963196]
[-268.40774536 -126.15564728]
[-267.28060913 -141.22950745]
[-261.75891113 -155.30082703]
[-252.33363342 -167.11842346]
[-239.84284973 -175.63146973]
[-225.39724731 -180.08299255]
[-210.28132629 -180.07716370]
[-195.83915710 -175.61450195]
[-183.35494995 -167.09184265]
[-173.93878174 -155.26698303]
[-168.42793274 -141.19140625]
[-167.31243896 -126.11668396]
[-170.69145203 -111.38326263]
[-157.70108032 -103.88326263]
[-144.71069336 -96.38326263]
[-131.72032166 -88.88326263]
[-128.88755798 -89.56948090]
[-125.59823608 -89.10754395]
[-122.31443024 -87.31204987]
[-119.55828857 -84.17810059]
[-117.84407806 -79.89710999]
[-105.68634796 -71.11135101]
[-93.52861023 -62.32559586]
[-81.37087250 -53.53984070]
[-76.48977661 -53.42797089]
[-71.65500641 -50.16916656]
[-68.83216095 -43.98199463]
[-57.13889313 -34.58692169]
[-45.44562149 -25.19184494]
[-33.75235367 -15.79676914]
[-22.05908394 -6.40169334]
[-10.36581421 2.99338222]
[1.32745588 12.38845730]
[13.02072525 21.78353310]
[27.75372887 19.91960526]
[39.74620438 29.28097343]
[41.60136795 44.74694061]
[53.29463959 54.14201355]
[64.98790741 63.53709030]
[76.68117523 72.93216705]
[88.49346924 82.17714691]
[100.42286682 91.27053070]
[103.59467316 91.06702423]
[106.91002655 92.06964111]
[109.90074921 94.33293915]
[112.08590698 97.72956848]
[113.04161835 101.95079041]
[123.98139191 112.21340942]
[134.92117310 122.47602844]
[145.86094666 132.73864746]
[156.80072021 143.00126648]
[167.74049377 153.26388550]
[179.19000244 162.95452881]
[191.11940002 172.04791260]
[203.04879761 181.14129639]
[215.09333801 190.08158875]
[227.25106812 198.86734009]
[239.40881348 207.65309143]
[254.08779907 202.98046875]
[268.53466797 207.79101562]
[277.27536011 220.04109192]
[277.12841797 234.91107178]
[289.28613281 243.69682312]
[301.44387817 252.48257446]
[317.80383301 253.61592102]
[324.75817871 268.46746826]
[315.15292358 281.75924683]
[298.86911011 279.81777954]
[292.65811157 264.64031982]
[280.50039673 255.85456848]
[268.34265137 247.06880188]
[254.27023315 251.87557983]
[239.89576721 247.42153931]
[230.79385376 235.21463013]
[230.62304688 219.81083679]
[218.46531677 211.02508545]
[206.30758667 202.23931885]
[198.95799255 200.85568237]
[193.95541382 193.07067871]
[182.02601624 183.97731018]
[170.09661865 174.88392639]
[167.19953918 175.20376587]
[163.99583435 174.32666016]
[160.96743774 172.12756348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[7 80]
[8 79]
[10 78]
[11 77]
[12 76]
[13 75]
[16 72]
[17 71]
[18 70]
[19 69]
[20 68]
[21 67]
[22 66]
[23 65]
[24 62]
[25 61]
[26 60]
[27 59]
[28 54]
[29 53]
[30 52]
[31 51]
[91 119]
[92 118]
[93 117]
[94 115]
[95 114]
[96 113]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
