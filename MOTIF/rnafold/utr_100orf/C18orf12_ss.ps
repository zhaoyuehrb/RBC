%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAGAAUAGUGCAUUGUGAAGGUAUUGUGAGUUGGGACAACUUGUACAGAGAAUAUAACACAAUGGCAAGUACAUUUGGGCCUAAAGAUAUCUUAG\
) } def
/len { sequence length } bind def

/coor [
[135.33239746 287.90124512]
[143.08343506 274.89355469]
[154.63970947 265.10931396]
[149.16992188 251.14215088]
[134.73477173 247.56944275]
[125.05684662 236.04548645]
[124.00811768 220.85490417]
[132.19985962 207.80877686]
[126.73007965 193.84161377]
[121.26030731 179.87445068]
[115.79053497 165.90728760]
[110.32411957 160.73583984]
[110.37528229 151.41972351]
[105.34253693 137.28921509]
[100.30978394 123.15869904]
[95.27703094 109.02818298]
[89.72741699 102.97039795]
[90.31496429 94.37921906]
[85.72410583 80.09902191]
[81.13324738 65.81882477]
[76.54238892 51.53863144]
[73.23629761 48.94944763]
[71.03979492 45.79200745]
[69.99726868 42.45264053]
[70.03274536 39.29583359]
[70.96564484 36.62955856]
[72.53598022 34.67756653]
[70.21250916 19.85861015]
[67.88903809 5.03965425]
[65.56556702 -9.77930260]
[63.24209213 -24.59825897]
[60.91862106 -39.41721725]
[58.59514618 -54.23617172]
[52.69364548 -68.02646637]
[43.57765198 -79.93859100]
[34.46166229 -91.85071564]
[25.34567261 -103.76284027]
[16.22968102 -115.67496490]
[1.80207276 -124.57892609]
[6.36409950 -140.90756226]
[23.31749725 -141.04403687]
[28.14180565 -124.79095459]
[37.25779724 -112.87882996]
[46.37378693 -100.96670532]
[55.48977661 -89.05458069]
[64.60576630 -77.14245605]
[64.91191864 -92.13933563]
[70.19619751 -106.17772675]
[79.85501099 -117.65410614]
[92.78509521 -125.25759125]
[107.50950623 -128.11967468]
[122.34637451 -125.91344452]
[135.60095215 -118.89090729]
[145.75926208 -107.85419464]
[151.66094971 -94.06398010]
[152.63192749 -79.09544373]
[148.56126404 -64.65834808]
[139.91394043 -52.40176392]
[127.67768860 -43.72569656]
[113.25018311 -39.62116241]
[98.27940369 -40.55699539]
[84.47537994 -46.42630768]
[73.41410065 -56.55964661]
[75.73757935 -41.74068832]
[78.06105042 -26.92173195]
[80.38452148 -12.10277557]
[82.70799255 2.71618152]
[85.03147125 17.53513718]
[87.35494232 32.35409546]
[90.82258606 46.94777298]
[95.41344452 61.22797012]
[100.00430298 75.50816345]
[104.59516144 89.78836060]
[109.40754700 103.99543762]
[114.44029999 118.12595367]
[119.47304535 132.25646973]
[124.50579834 146.38697815]
[129.75769043 160.43751526]
[135.22746277 174.40467834]
[140.69723511 188.37184143]
[146.16700745 202.33900452]
[161.03967285 206.35273743]
[170.58555603 218.21568298]
[171.30715942 233.24708557]
[163.13708496 245.67237854]
[168.60685730 259.63955688]
[183.73417664 258.97402954]
[198.25724792 263.25881958]
[210.60069275 272.02911377]
[219.42561340 284.33358765]
[223.77471924 298.83749390]
[223.17628479 313.96762085]
[217.69520569 328.08273315]
[207.92602539 339.65173340]
[194.92843628 347.41970825]
[180.11231995 350.54403687]
[165.08482361 348.68585205]
[151.47599792 342.04666138]
[140.76205444 331.34664917]
[134.10514832 317.74649048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[8 81]
[9 80]
[10 79]
[11 78]
[13 77]
[14 76]
[15 75]
[16 74]
[18 73]
[19 72]
[20 71]
[21 70]
[27 69]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
