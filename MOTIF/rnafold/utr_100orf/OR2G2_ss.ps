%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAUGGUGAGACAUACCAAUGAGAGCAACCUAGCAGGUUUCAUCCUUUUAGGGUUUUCUGAUUAUCCUCAGUUACAGAAGGUUCUAUUUGUGCUCA\
) } def
/len { sequence length } bind def

/coor [
[239.94480896 265.51547241]
[242.93753052 255.86808777]
[232.41372681 245.17932129]
[221.88992310 234.49055481]
[211.36611938 223.80180359]
[200.84231567 213.11303711]
[190.31852722 202.42428589]
[179.79472351 191.73551941]
[169.27091980 181.04676819]
[158.74711609 170.35800171]
[148.22331238 159.66925049]
[133.78054810 156.02838135]
[129.61199951 140.76622009]
[119.08820343 130.07745361]
[108.56439972 119.38869476]
[95.86403656 120.78855896]
[84.66662598 114.63414001]
[79.04116058 103.16187286]
[81.03185272 90.54062653]
[70.84555817 79.52974701]
[60.65926361 68.51886749]
[47.71223450 67.20307922]
[39.45357132 57.67317963]
[39.95986938 45.47639465]
[30.12094116 34.15404892]
[20.28201294 22.83170509]
[10.44308281 11.50936127]
[0.60415399 0.18701674]
[-9.23477459 -11.13532734]
[-30.90749931 -16.43159294]
[-35.14604568 -37.58380890]
[-46.31401062 -47.59763336]
[-57.48197174 -57.61145401]
[-68.64993286 -67.62527466]
[-79.81789398 -77.63909912]
[-95.64707947 -83.71142578]
[-94.19401550 -100.60299683]
[-77.56032562 -103.88276672]
[-69.80406952 -88.80706024]
[-58.63610840 -78.79323578]
[-47.46814728 -68.77941895]
[-36.30018616 -58.76559448]
[-25.13222504 -48.75177002]
[-17.16040611 -50.94151688]
[-8.89338207 -49.68196106]
[-1.77489138 -45.11460495]
[2.92011976 -37.96532822]
[4.31357622 -29.42990875]
[2.08756900 -20.97425652]
[11.92649841 -9.65191269]
[21.76542664 1.67043185]
[31.60435677 12.99277592]
[41.44328690 24.31512070]
[51.28221512 35.63746262]
[68.10745239 40.35052490]
[71.67014313 58.33257675]
[81.85643768 69.34345245]
[92.04273224 80.35433197]
[108.46583557 80.56806946]
[119.80563354 92.44969177]
[119.25315857 108.86489105]
[129.77696228 119.55364990]
[140.30076599 130.24241638]
[155.49626160 134.64781189]
[158.91206360 149.14544678]
[169.43586731 159.83419800]
[179.95967102 170.52296448]
[190.48347473 181.21171570]
[201.00727844 191.90048218]
[211.53108215 202.58923340]
[222.05488586 213.27799988]
[232.57868958 223.96676636]
[243.10249329 234.65551758]
[253.62629700 245.34428406]
[274.42236328 243.87725830]
[289.59689331 257.75567627]
[289.97677612 278.03225708]
[301.74569702 287.33242798]
[313.51461792 296.63256836]
[325.28353882 305.93270874]
[337.05242920 315.23284912]
[348.82135010 324.53298950]
[363.72378540 320.20895386]
[378.31024170 325.50183105]
[386.97198486 338.37637329]
[386.37832642 353.88211060]
[376.75759888 366.05670166]
[361.80914307 370.21881104]
[347.28094482 364.76803589]
[338.75939941 351.80026245]
[339.52120972 336.30191040]
[327.75228882 327.00177002]
[315.98336792 317.70159912]
[304.21447754 308.40145874]
[292.44555664 299.10131836]
[280.67663574 289.80117798]
[271.80615234 293.84497070]
[262.00845337 294.28128052]
[252.70291138 291.00296021]
[245.25408936 284.44424438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[13 63]
[14 62]
[15 61]
[19 58]
[20 57]
[21 56]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
