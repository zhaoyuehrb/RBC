%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCGUCCGCCACGCCCCGCAACCUCCUGGUUCCAAGUGGGAGACAUGGUGCUGUCGGAGCUAGCGGCGCGCCUCAACUGCGCCGAGUACAAGAACUGGGUGAAGGCGGGCCACUGCCUGUUACUGCUGCGCAGCUGCCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[-73.44777679 333.58715820]
[-67.40143585 317.74801636]
[-67.40143585 302.74801636]
[-67.40143585 287.74801636]
[-67.40143585 272.74801636]
[-72.10288239 270.43930054]
[-76.14318848 267.10617065]
[-89.81161499 273.28469849]
[-103.48004913 279.46319580]
[-109.13738251 293.97637939]
[-123.08712769 300.04757690]
[-136.88836670 294.56472778]
[-150.55679321 300.74322510]
[-164.22521973 306.92175293]
[-177.89364624 313.10028076]
[-177.54505920 325.22860718]
[-181.32453918 336.72164917]
[-188.76055908 346.22116089]
[-198.95092773 352.61282349]
[-210.67218018 355.15719604]
[-222.52651978 353.57498169]
[-233.10842896 348.07760620]
[-241.17138672 339.33923340]
[-255.20529175 344.63540649]
[-269.23919678 349.93157959]
[-283.27310181 355.22775269]
[-293.24118042 368.24963379]
[-309.46527100 365.85995483]
[-315.25546265 350.51702881]
[-304.65527344 338.00430298]
[-288.56927490 341.19384766]
[-274.53536987 335.89767456]
[-260.50146484 330.60150146]
[-246.46754456 325.30532837]
[-244.40742493 307.37857056]
[-233.53352356 292.87265015]
[-216.74861145 285.80175781]
[-198.60549927 288.17630005]
[-184.07215881 299.43185425]
[-170.40373230 293.25332642]
[-156.73530579 287.07479858]
[-143.06687927 280.89630127]
[-138.06457520 266.91369629]
[-124.29086304 260.45309448]
[-109.65856171 265.79476929]
[-95.99013519 259.61627197]
[-82.32170868 253.43774414]
[-77.93938446 237.41476440]
[-63.56540680 228.51119995]
[-46.68552399 231.83903503]
[-34.81760406 222.66557312]
[-22.94968414 213.49211121]
[-11.17979336 204.19319153]
[0.49074334 194.76989746]
[12.16127968 185.34660339]
[23.83181572 175.92329407]
[27.08258820 169.22776794]
[35.85154343 166.42700195]
[47.71946335 157.25354004]
[53.05735397 143.34828186]
[68.70783234 141.03030396]
[80.57575226 131.85684204]
[92.44367218 122.68337250]
[79.59774017 114.91622925]
[73.36438751 100.35594177]
[76.96105957 84.08300781]
[89.97739410 72.39609528]
[91.88266754 57.51758575]
[93.78793335 42.63908005]
[95.69319916 27.76057243]
[97.59846497 12.88206673]
[99.50373077 -1.99644005]
[101.40900421 -16.87494659]
[90.67142487 -28.24325943]
[89.80499268 -43.85681915]
[99.21879578 -56.34338379]
[114.46793365 -59.80717850]
[128.35221863 -52.61270142]
[134.31593323 -38.15697098]
[129.54318237 -23.26553726]
[116.28750610 -14.96967888]
[114.38224030 -0.09117272]
[112.47697449 14.78733349]
[110.57170868 29.66584015]
[108.66643524 44.54434586]
[106.76116943 59.42285156]
[104.85590363 74.30136108]
[118.17736816 81.19618988]
[129.22456360 71.04930115]
[140.27177429 60.90241241]
[140.69203186 45.10371399]
[152.21789551 34.29029465]
[168.01126099 34.87756348]
[178.70222473 46.51710892]
[177.94801331 62.30339050]
[166.19607544 72.87068939]
[150.41865540 71.94961548]
[139.37145996 82.09650421]
[128.32424927 92.24339294]
[125.96279144 105.95952606]
[117.99746704 115.73926544]
[132.87597656 117.64453125]
[147.75448608 119.54979706]
[162.63299561 121.45507050]
[177.51148987 123.36033630]
[192.40939331 125.10758209]
[207.32498169 126.69661713]
[222.24057007 128.28565979]
[237.15617371 129.87469482]
[252.07176208 131.46372986]
[266.98736572 133.05276489]
[281.75061035 125.91284180]
[295.16168213 135.35078430]
[293.42443848 151.65765381]
[278.32598877 158.05833435]
[265.39831543 147.96835327]
[250.48272705 146.37931824]
[235.56713867 144.79028320]
[220.65153503 143.20124817]
[205.73594666 141.61221313]
[190.82034302 140.02317810]
[183.78726196 142.45898438]
[175.60623169 138.23884583]
[160.72772217 136.33357239]
[145.84921265 134.42829895]
[130.97070312 132.52304077]
[116.09220123 130.61776733]
[101.61714172 134.55128479]
[89.74922180 143.72476196]
[77.88130188 152.89822388]
[71.69453430 167.45962524]
[56.89292908 169.12145996]
[45.02500534 178.29492188]
[33.25511551 187.59384155]
[21.58457947 197.01713562]
[9.91404343 206.44042969]
[-1.75649297 215.86373901]
[-6.51022339 223.74668884]
[-13.77621841 225.36003113]
[-25.64413834 234.53349304]
[-37.51205826 243.70695496]
[-39.06588745 261.53018188]
[-52.40143967 272.74801636]
[-52.40143967 287.74801636]
[-52.40143967 302.74801636]
[-52.40143967 317.74801636]
[-46.35509872 333.58715820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 146]
[3 145]
[4 144]
[5 143]
[7 47]
[8 46]
[9 45]
[12 42]
[13 41]
[14 40]
[15 39]
[23 34]
[24 33]
[25 32]
[26 31]
[50 141]
[51 140]
[52 139]
[53 137]
[54 136]
[55 135]
[56 134]
[58 133]
[59 132]
[61 130]
[62 129]
[63 128]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[88 99]
[89 98]
[90 97]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
