%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGCUGCUCGAGGAAACGCUUUCGGCCGGGAGCUGCGGCCGCCGCCAGCAGUUUUCAUGUUUGGGAUUCAGGAGAAUAUUCCGCGCGGGGGGACGACCAUGAAGGAGGAGCCGCUGGGCAGCGGCAUGAACCCGGUGCGCUCGUGGAUGCACACGG\
) } def
/len { sequence length } bind def

/coor [
[292.18377686 448.06835938]
[287.94241333 429.61407471]
[295.68423462 412.17031860]
[287.59716797 399.53704834]
[279.51010132 386.90380859]
[271.42300415 374.27053833]
[263.33593750 361.63729858]
[255.24887085 349.00402832]
[247.16178894 336.37075806]
[239.07472229 323.73751831]
[230.98764038 311.10424805]
[222.90057373 298.47100830]
[214.81349182 285.83773804]
[198.82765198 278.65130615]
[198.07324219 260.27661133]
[189.73968506 247.80458069]
[174.98577881 249.99266052]
[160.68614197 245.53961182]
[149.69294739 235.27751160]
[144.22319031 221.20265198]
[145.41168213 206.08728027]
[153.07609558 192.93363953]
[144.74255371 180.46159363]
[136.40899658 167.98954773]
[128.07543945 155.51750183]
[119.74188995 143.04547119]
[111.40833282 130.57342529]
[96.22464752 132.41343689]
[81.87032318 127.13298035]
[71.49865723 115.89205170]
[67.38806152 101.16001892]
[52.67628479 98.23365784]
[37.96450424 95.30730438]
[23.25272560 92.38095093]
[8.54094601 89.45459747]
[-6.17083311 86.52824402]
[-20.88261223 83.60189056]
[-35.59439087 80.67552948]
[-50.30617142 77.74917603]
[-65.04596710 74.96739197]
[-79.81237030 72.33045197]
[-94.57876587 69.69350433]
[-109.80877686 75.77452850]
[-122.52089691 65.41431427]
[-119.63798523 49.27055740]
[-104.12574005 43.95057678]
[-91.94182587 54.92710876]
[-77.17542267 57.56405258]
[-62.40902710 60.20099640]
[-55.23427582 58.27103043]
[-47.37981796 63.03739929]
[-32.66803741 65.96375275]
[-17.95625687 68.89010620]
[-3.24447846 71.81645966]
[11.46730042 74.74282074]
[26.17907906 77.66917419]
[40.89085770 80.59552765]
[55.60263824 83.52188110]
[70.31441498 86.44823456]
[74.48066711 79.66166687]
[80.16662598 74.08627319]
[87.03368378 70.05406952]
[84.39674377 55.28767014]
[74.35391998 43.06260300]
[79.73331451 29.17334938]
[77.09637451 14.40695095]
[74.45942688 -0.35944787]
[71.82248688 -15.12584591]
[69.18553925 -29.89224434]
[66.54859924 -44.65864182]
[63.62224197 -59.37042236]
[60.40760422 -74.02191162]
[48.96119690 -85.76549530]
[53.66807175 -101.47464752]
[69.68619537 -104.98913574]
[80.53749847 -92.69355774]
[75.05908966 -77.23654938]
[78.27372742 -62.58506012]
[81.78501892 -59.27849579]
[83.22406769 -53.71307373]
[81.31499481 -47.29558945]
[83.95193481 -32.52919006]
[86.58888245 -17.76279068]
[89.22583008 -2.99639201]
[91.86277008 11.77000618]
[94.49971771 26.53640556]
[104.35392761 37.70528030]
[99.16313934 52.65072632]
[101.80008698 67.41712189]
[105.69689941 67.86856079]
[109.51139069 68.78433990]
[113.18843079 70.15122223]
[122.24176788 58.19141388]
[119.82838440 42.57247925]
[129.23339844 29.87124634]
[144.87698364 27.62313461]
[157.47805786 37.16190720]
[159.56065369 52.82838058]
[149.88919067 65.32791138]
[134.20158386 67.24475098]
[125.14823914 79.20455933]
[132.61840820 100.96096802]
[123.88037872 122.23986816]
[132.21392822 134.71191406]
[140.54748535 147.18395996]
[148.88104248 159.65600586]
[157.21458435 172.12803650]
[165.54814148 184.60008240]
[180.63356018 182.55276489]
[195.05316162 187.23913574]
[205.96345520 197.67875671]
[211.23748779 211.76228333]
[209.87933350 226.67753601]
[202.21173096 239.47102356]
[210.54528809 251.94306946]
[223.05117798 255.23556519]
[229.72917175 265.83831787]
[227.44674683 277.75067139]
[235.53382874 290.38391113]
[243.62089539 303.01718140]
[251.70797729 315.65042114]
[259.79504395 328.28369141]
[267.88211060 340.91696167]
[275.96920776 353.55020142]
[284.05627441 366.18347168]
[292.14334106 378.81674194]
[300.23043823 391.44998169]
[308.31750488 404.08325195]
[319.79223633 402.75216675]
[330.87844849 405.80987549]
[339.96670532 412.77236938]
[345.75262451 422.59170532]
[347.42410278 433.81359863]
[344.77520752 444.79278564]
[338.23043823 453.93414307]
[345.55975342 467.02160645]
[352.88906860 480.10903931]
[360.34652710 493.12390137]
[367.93139648 506.06491089]
[375.51626587 519.00592041]
[383.10110474 531.94696045]
[390.68597412 544.88793945]
[398.39752197 557.75390625]
[406.23498535 570.54345703]
[419.66625977 580.88934326]
[413.44287109 596.65979004]
[396.56594849 595.04522705]
[393.44540405 578.38098145]
[385.60791016 565.59136963]
[379.39941406 561.51013184]
[377.74496460 552.47283936]
[370.16009521 539.53179932]
[362.57522583 526.59075928]
[354.99038696 513.64978027]
[347.40551758 500.70874023]
[341.27832031 496.50643921]
[339.80163574 487.43835449]
[332.47232056 474.35092163]
[325.14300537 461.26348877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 128]
[4 127]
[5 126]
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[13 118]
[15 115]
[16 114]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 49]
[41 48]
[42 47]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 78]
[72 77]
[92 101]
[93 100]
[135 159]
[136 158]
[137 157]
[138 155]
[139 154]
[140 153]
[141 152]
[142 151]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
