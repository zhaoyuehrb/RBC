%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGUAGGAAGGAACAACACAAUUGUGACAAAAUUCAUUCUCCUGGGACUUUCAGACCAUCCUCAAAUGAAGAUUUUCCUUUUCAUGUUAUUUCUGG\
) } def
/len { sequence length } bind def

/coor [
[193.17706299 148.04086304]
[179.48020935 141.92561340]
[165.78337097 135.81034851]
[152.08651733 129.69509888]
[138.29621887 123.79359436]
[124.41581726 118.10726929]
[110.53540802 112.42094421]
[94.06082916 115.16577911]
[83.83149719 101.96324921]
[69.78096008 96.71134949]
[53.03244400 105.26070404]
[35.58778381 99.13214111]
[28.12487411 82.55959320]
[13.77500820 78.19136810]
[-0.57485759 73.82315063]
[-14.92472363 69.45492554]
[-19.65846443 75.44258118]
[-25.68525505 80.09621429]
[-32.64175415 83.14656830]
[-40.11127853 84.42069244]
[-47.64876938 83.85172272]
[-54.80730820 81.48236847]
[-61.16461563 77.46181488]
[-66.34795380 72.03635406]
[-70.05598450 65.53433990]
[-72.07628632 58.34630966]
[-72.29748535 50.90151596]
[-70.71538544 43.64231873]
[-83.29967499 35.47925568]
[-95.88396454 27.31619453]
[-108.46826172 19.15313148]
[-123.87129974 22.69175720]
[-137.22055054 14.23165989]
[-140.59611511 -1.20793295]
[-131.99536133 -14.46698570]
[-116.52094269 -17.67913628]
[-103.35356140 -8.93867493]
[-100.30519867 6.56883955]
[-87.72090149 14.73190212]
[-75.13661194 22.89496613]
[-62.55231857 31.05802727]
[-40.52218628 22.68607903]
[-18.86222458 32.55143356]
[-10.55650234 55.10506439]
[3.79336309 59.47328568]
[18.14322853 63.84150314]
[32.49309540 68.20972443]
[41.33243561 60.67477036]
[52.84579086 58.39931107]
[64.11703491 62.08023071]
[72.23223114 70.89033508]
[75.03285980 82.66081238]
[89.08339691 87.91271210]
[100.06496429 83.71287537]
[111.01268005 88.00018311]
[116.22173309 98.54053497]
[130.10214233 104.22686768]
[143.98254395 109.91319275]
[153.29090881 110.29659271]
[158.20176697 115.99825287]
[171.89862061 122.11351013]
[185.59547424 128.22875977]
[199.29231262 134.34400940]
[212.38644409 120.65841675]
[229.58845520 112.80368805]
[248.44580078 111.87506866]
[266.27902222 117.98207855]
[280.56250000 130.23611450]
[289.28210449 146.87971497]
[291.21923828 165.53852844]
[305.81289673 169.00616455]
[320.40658569 172.47381592]
[335.00027466 175.94146729]
[349.59393311 179.40910339]
[364.18762207 182.87675476]
[378.78128052 186.34439087]
[392.10421753 177.84291077]
[407.51815796 181.33372498]
[415.87832642 194.74578857]
[412.22473145 210.12196350]
[398.72503662 218.33984375]
[383.38833618 214.52391052]
[375.31365967 200.93807983]
[360.71997070 197.47042847]
[346.12628174 194.00277710]
[331.53262329 190.53514099]
[316.93893433 187.06748962]
[302.34524536 183.59985352]
[287.75158691 180.13220215]
[282.23583984 190.29202271]
[274.51776123 198.91227722]
[265.01046753 205.52455139]
[254.22456360 209.76808167]
[242.74057007 211.40950012]
[231.17774963 210.35560608]
[220.16067505 206.65867615]
[210.28555298 200.51387024]
[202.08789062 192.24896240]
[196.01348877 182.30680847]
[192.39421082 171.22169495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 58]
[6 57]
[7 56]
[9 53]
[10 52]
[13 47]
[14 46]
[15 45]
[16 44]
[28 41]
[29 40]
[30 39]
[31 38]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
