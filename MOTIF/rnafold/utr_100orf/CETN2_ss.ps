%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUACACGUCGGUUGCCUAACAACCGGCAGCGGACUCCUUUGGCUAUGGCCUCCAACUUUAAGAAGGCAAACAUGGCAUCAAGUUCUCAGCGAAAAAGAAUGAGCCCUAAGCCUGAGCUUACUGAAGAGCAAAAGCAGGAGAUCC\
) } def
/len { sequence length } bind def

/coor [
[16.92605019 238.44781494]
[16.90359688 247.43009949]
[14.58379269 256.08786011]
[10.13122368 263.84478760]
[3.85209727 270.18716431]
[-3.82679462 274.69784546]
[-12.38707924 277.08374023]
[-21.25379181 277.19476318]
[-29.83399200 275.03332520]
[-37.55641937 270.75347900]
[-48.81650543 280.66357422]
[-60.07658768 290.57369995]
[-71.33666992 300.48382568]
[-82.59675598 310.39395142]
[-93.85684204 320.30407715]
[-105.11692810 330.21420288]
[-116.37701416 340.12429810]
[-118.82880402 355.97891235]
[-132.82409668 363.82180786]
[-147.62690735 357.63662720]
[-151.88177490 342.16809082]
[-142.32473755 329.28234863]
[-126.28713226 328.86422729]
[-115.02704620 318.95410156]
[-103.76696014 309.04397583]
[-92.50688171 299.13388062]
[-81.24679565 289.22375488]
[-69.98670959 279.31362915]
[-58.72662354 269.40350342]
[-47.46654129 259.49337769]
[-51.51688004 238.39553833]
[-42.13429642 218.92753601]
[-22.88138199 208.83268738]
[-1.27959168 212.22689819]
[8.38929653 200.75900269]
[18.05818558 189.29110718]
[27.60481834 177.72125244]
[37.02811813 166.05070496]
[46.45141602 154.38017273]
[55.87471771 142.70964050]
[65.29801941 131.03909302]
[55.84094238 114.75231934]
[53.60966110 96.05159760]
[58.96928406 77.99696350]
[71.04280853 63.54270554]
[63.72738266 50.44749451]
[56.41196060 37.35228348]
[49.09653473 24.25707054]
[41.78110886 11.16185951]
[34.46568680 -1.93335259]
[26.73708344 -14.78903961]
[18.60313416 -27.39216995]
[10.46918678 -39.99530029]
[2.33523917 -52.59843063]
[-12.80358791 -50.65454865]
[-27.28390503 -55.47981262]
[-38.23063660 -66.11615753]
[-43.47029877 -80.45172882]
[-41.96255493 -95.64019775]
[-34.00676727 -108.66587067]
[-21.18256187 -116.94249725]
[-6.03619814 -118.82674408]
[8.42500591 -113.94449615]
[19.32976532 -103.26512909]
[24.51293564 -88.90903473]
[22.94539070 -73.72662354]
[14.93836880 -60.73237991]
[23.07231712 -48.12924957]
[31.20626450 -35.52611923]
[39.34021378 -22.92298698]
[42.76304626 -21.83524323]
[45.81039047 -18.99531174]
[47.64594650 -14.60716820]
[47.56089783 -9.24877644]
[54.87632370 3.84643483]
[62.19174576 16.94164658]
[69.50717163 30.03685760]
[76.82259369 43.13206863]
[84.13801575 56.22728348]
[96.62440491 53.56446838]
[109.36462402 54.39345551]
[121.40065765 58.65190506]
[131.82743835 66.01959229]
[139.86088562 75.94250488]
[144.89692688 87.67445374]
[159.81253052 86.08541870]
[174.72811890 84.49638367]
[189.64370728 82.90734863]
[204.55931091 81.31831360]
[219.45719910 79.57106018]
[234.33570862 77.66579437]
[249.21421814 75.76052856]
[235.62135315 69.41748047]
[224.76005554 59.07184219]
[217.76387024 45.80333328]
[215.36294556 30.99672699]
[217.80786133 16.19732285]
[224.84344482 2.94966435]
[235.73544312 -7.36365080]
[249.34709167 -13.66626930]
[264.25781250 -15.30041599]
[278.91143799 -12.09554291]
[291.77865601 -4.38612747]
[301.51654053 7.02323437]
[307.10879517 20.94179916]
[307.97183228 35.91695404]
[304.01553345 50.38580322]
[295.65280151 62.83831024]
[283.75643921 71.97485352]
[269.56906128 76.84172058]
[284.16201782 80.31243134]
[298.75497437 83.78314209]
[313.34793091 87.25386047]
[327.94085693 90.72457123]
[343.49145508 85.51766968]
[355.59512329 96.58262634]
[351.80065918 112.53675079]
[336.01150513 116.96781921]
[324.47015381 105.31752014]
[309.87719727 101.84680939]
[295.28427124 98.37609100]
[280.69131470 94.90538025]
[266.09835815 91.43466949]
[251.11947632 90.63903046]
[236.24096680 92.54429626]
[221.36245728 94.44956970]
[215.08383179 98.44659424]
[206.14834595 96.23390198]
[191.23274231 97.82294464]
[176.31715393 99.41197968]
[161.40156555 101.00101471]
[146.48596191 102.59004974]
[143.79838562 115.79096985]
[137.44377136 127.66979218]
[127.95416260 137.23194885]
[116.12409210 143.67684937]
[102.94401550 146.46488953]
[89.51745605 145.36264038]
[76.96855164 140.46240234]
[67.54525757 152.13293457]
[58.12195206 163.80346680]
[48.69865417 175.47401428]
[39.27535248 187.14454651]
[36.28909302 195.85208130]
[29.52607918 198.96000671]
[19.85719109 210.42788696]
[10.18830204 221.89578247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[34 147]
[35 146]
[36 145]
[37 143]
[38 142]
[39 141]
[40 140]
[41 139]
[45 79]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 70]
[52 69]
[53 68]
[54 67]
[85 132]
[86 131]
[87 130]
[88 129]
[89 128]
[90 126]
[91 125]
[92 124]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
