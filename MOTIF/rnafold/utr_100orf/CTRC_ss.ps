%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCAGUCCUGAGCACCUAACCAUGUUGGGCAUCACUGUCCUCGCUGCGCUCUUGGCCUGUGCCUCCAGCUGUGGGGUGCCCAGCUUCCCGCCCAACCUAUCCGCCCGAGUGGUGGGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[102.89588165 145.67309570]
[94.79196930 145.46751404]
[86.85146332 143.83531189]
[80.24555206 157.30238342]
[73.81076050 170.85203552]
[67.54812622 184.48213196]
[69.60728455 200.75149536]
[56.38532639 210.45260620]
[41.48386765 203.60581970]
[40.23225403 187.25450134]
[53.91803741 178.21949768]
[60.18067169 164.58940125]
[60.11358261 157.11271667]
[66.77848816 150.69645691]
[73.38439941 137.22940063]
[66.94058228 131.64637756]
[61.64418793 124.96497345]
[57.67904663 117.41709137]
[55.18277740 109.26469421]
[54.24201965 100.79074097]
[54.88942337 92.28934479]
[57.10252762 84.05557251]
[60.80450821 76.37519073]
[65.86688232 69.51477814]
[72.11395264 63.71244812]
[79.32888794 59.16957855]
[74.83843994 44.85749054]
[70.34799194 30.54540253]
[65.85754395 16.23331451]
[61.36709976 1.92122483]
[56.87665176 -12.39086437]
[52.38620377 -26.70295334]
[47.89575577 -41.01504135]
[40.28157043 -28.09125900]
[26.21393394 -22.88533592]
[12.02093220 -27.73906326]
[4.08703566 -40.46907806]
[5.98117065 -55.34900665]
[16.85129356 -65.68537140]
[31.80766869 -66.82854462]
[44.12268066 -58.26393127]
[42.22760391 -73.14373779]
[40.33252335 -88.02354431]
[38.43744659 -102.90335083]
[36.54236603 -117.78316498]
[34.64728928 -132.66296387]
[25.56390190 -138.90362549]
[21.55757713 -148.93260193]
[23.74976730 -159.28152466]
[31.16224670 -166.51574707]
[30.02325058 -181.47244263]
[28.88425255 -196.42913818]
[15.83943176 -204.62297058]
[10.18677044 -218.76159668]
[13.89942455 -233.34515381]
[25.35049438 -242.83256531]
[24.21149635 -257.78927612]
[23.07250023 -272.74597168]
[13.37653255 -285.97171021]
[20.22913361 -300.87048340]
[36.58093643 -302.11572266]
[45.61060715 -288.42642212]
[38.02919388 -273.88494873]
[39.16819000 -258.92825317]
[40.30718613 -243.97157288]
[53.06286621 -236.32757568]
[58.94106293 -222.47438049]
[55.49456787 -207.64282227]
[43.84094620 -197.56814575]
[44.97994232 -182.61145020]
[46.11893845 -167.65475464]
[58.22174835 -152.66098022]
[49.52709579 -134.55804443]
[51.42217255 -119.67823792]
[53.31725311 -104.79843140]
[55.21233368 -89.91862488]
[57.10741043 -75.03881836]
[59.00249100 -60.15900803]
[62.20784760 -45.50548935]
[66.69829559 -31.19339943]
[71.18874359 -16.88131142]
[75.67918396 -2.56922197]
[80.16963196 11.74286652]
[84.66007996 26.05495644]
[89.15052795 40.36704636]
[93.64097595 54.67913437]
[118.04644012 57.94355774]
[137.22789001 73.38230133]
[145.63278198 96.52622223]
[140.82809448 120.67571259]
[152.91851807 129.55386353]
[168.62136841 131.48539734]
[174.30038452 145.25485229]
[186.39080811 154.13301086]
[198.48123169 163.01116943]
[210.57165527 171.88932800]
[219.44985962 174.49060059]
[222.85208130 181.14871216]
[234.71371460 190.33029175]
[250.18614197 188.52980042]
[262.08474731 198.01020813]
[263.70587158 212.77189636]
[275.56750488 221.95349121]
[291.59963989 221.36114502]
[301.94891357 233.61967468]
[298.67630005 249.32539368]
[284.29226685 256.43020630]
[269.83096313 249.48391724]
[266.38592529 233.81512451]
[254.52429199 224.63354492]
[239.82749939 226.76419067]
[227.66731262 217.62173462]
[225.53213501 202.19194031]
[213.67048645 193.01034546]
[201.69349670 183.97975159]
[189.60307312 175.10159302]
[177.51264954 166.22343445]
[165.42222595 157.34527588]
[150.58415222 156.04878235]
[144.04035950 141.64428711]
[131.94993591 132.76614380]
[125.66749573 137.88928223]
[118.57969666 141.82359314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 12]
[6 11]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[50 71]
[51 70]
[52 69]
[56 65]
[57 64]
[58 63]
[90 121]
[91 120]
[93 118]
[94 117]
[95 116]
[96 115]
[98 114]
[99 113]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
