%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAUGGGCAAAUGGAUUCAUUUAGAGCUGCGGAACAGGACGCCCUCCGAUGUGAAAGAACUUUUCCUGGACAACAGUCAGUCAAAUGAAGGCAAAU\
) } def
/len { sequence length } bind def

/coor [
[60.01697159 337.91766357]
[51.51730728 350.41757202]
[39.70981598 359.85549927]
[25.64440918 365.39227295]
[10.57177353 366.53552246]
[-4.16784239 363.18365479]
[-17.26380157 355.63464355]
[-27.55162048 344.55981445]
[-34.11651230 330.94387817]
[-36.37473679 315.99758911]
[-34.12548447 301.04992676]
[-27.56876564 287.43005371]
[-17.28759384 276.34902954]
[-4.19616795 268.79217529]
[10.54143333 265.43145752]
[25.61475372 266.56567383]
[31.08452606 252.59852600]
[24.90145302 239.09648132]
[30.24961281 224.85386658]
[44.45372391 218.46003723]
[49.92349625 204.49287415]
[55.39326859 190.52572632]
[60.86304092 176.55856323]
[66.33281708 162.59140015]
[71.80258942 148.62423706]
[77.27236176 134.65707397]
[76.77154541 127.14876556]
[83.13555145 120.34494019]
[89.03705597 106.55464172]
[94.28895569 92.50410461]
[98.87981415 78.22390747]
[103.47067261 63.94371414]
[108.06153107 49.66351700]
[97.08158875 39.11826706]
[91.79056549 24.90939522]
[93.18771362 9.87383175]
[100.94258118 -3.01116109]
[113.47114563 -11.21753597]
[128.25907898 -13.16240788]
[132.84992981 -27.44260406]
[137.44079590 -41.72280121]
[142.03164673 -56.00299835]
[146.62251282 -70.28319550]
[148.94598389 -85.10214996]
[148.94598389 -100.10214996]
[148.94598389 -115.10214996]
[136.31372070 -124.11357117]
[131.42272949 -138.83966064]
[136.15368652 -153.61795044]
[148.68743896 -162.76586914]
[164.20452881 -162.76586914]
[176.73828125 -153.61795044]
[181.46923828 -138.83966064]
[176.57824707 -124.11357117]
[163.94598389 -115.10214996]
[163.94598389 -100.10214996]
[163.94598389 -85.10214996]
[174.13995361 -96.10591888]
[188.40838623 -100.73324585]
[203.12008667 -97.80653381]
[214.53111267 -88.07060242]
[219.73747253 -74.00312805]
[217.41421509 -59.18413925]
[208.15257263 -47.38489914]
[194.30953979 -41.60819626]
[179.40800476 -43.32412720]
[167.24026489 -52.09601212]
[160.90270996 -65.69233704]
[156.31184387 -51.41213989]
[151.72099304 -37.13194275]
[147.13012695 -22.85174561]
[142.53927612 -8.57154942]
[153.42344666 1.62650168]
[158.82269287 15.59638405]
[157.61613464 30.58655548]
[149.98970032 43.61949921]
[137.40980530 52.08315659]
[122.34172821 54.25437546]
[117.75086975 68.53456879]
[113.16000366 82.81476593]
[108.56914520 97.09496307]
[109.93740082 100.91442108]
[109.52017975 105.32983398]
[107.08908081 109.48541260]
[102.82735443 112.45614624]
[96.92584991 126.24644470]
[91.23951721 140.12684631]
[85.76974487 154.09400940]
[80.29997253 168.06117249]
[74.83020020 182.02833557]
[69.36042786 195.99549866]
[63.89065552 209.96264648]
[58.42088318 223.92980957]
[64.50556946 238.26907349]
[58.75947571 252.35583496]
[45.05168533 258.06829834]
[39.58191299 272.03546143]
[51.41684723 281.43896484]
[59.95288467 293.91403198]
[64.43100739 308.35140991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 97]
[17 96]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[28 86]
[29 85]
[30 81]
[31 80]
[32 79]
[33 78]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 57]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
