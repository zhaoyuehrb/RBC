%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCCCUUGGUUCCAUCCUCUGCCAUCUACUCCACUGUUCAGACACCUCCUAACCUCCGUCAUGACCUGUGGCUUCAACUCCAUAGGCUGUGGGUUCCGCCCUGGAAACUUCAGCUGUGUCUCUGCCUGCGGGCCCCGGCCAAGCCGCUGCUGCAUCACCG\
) } def
/len { sequence length } bind def

/coor [
[95.55450439 144.72319031]
[103.66104889 132.10278320]
[104.78022766 117.14459991]
[97.32181549 117.93332672]
[89.16830444 130.52380371]
[81.01479340 143.11428833]
[86.92118073 155.59757996]
[85.88416290 169.25994873]
[78.28246307 180.52899170]
[66.19722748 186.51136780]
[52.84327698 185.73536682]
[44.45009232 198.16735840]
[47.70475769 213.63288879]
[39.00051498 226.82423401]
[23.50143623 229.91520691]
[10.40285110 221.07199097]
[7.47591591 205.54109192]
[16.45713043 192.53674316]
[32.01810074 189.77416992]
[40.41128540 177.34217834]
[34.31066895 162.12510681]
[38.50803375 146.10556030]
[51.54534912 135.62727356]
[68.42430878 134.96076965]
[76.57781982 122.37029266]
[84.73133850 109.77980804]
[73.35897064 119.56087494]
[58.93257904 123.66931152]
[44.11340332 121.34724426]
[31.63513184 113.02301788]
[23.79963303 100.23220062]
[22.05231857 85.33432007]
[26.71551704 71.07758331]
[36.92900848 60.09192657]
[50.80870819 54.40387726]
[65.79423523 55.06270981]
[79.12120056 61.94688416]
[88.33119202 73.78648376]
[91.72519684 88.39439392]
[92.58674622 73.41915894]
[82.34962463 61.67866898]
[83.43668365 46.50392151]
[94.69253540 36.81674576]
[95.55408478 21.84150887]
[96.41563416 6.86627054]
[97.27718353 -8.10896683]
[98.13873291 -23.08420372]
[99.00027466 -38.05944061]
[94.40256500 -23.78145027]
[86.04831696 -11.32325649]
[74.58446503 -1.64957619]
[60.89872742 4.49049473]
[46.05086899 6.62149143]
[31.19066238 4.57839727]
[17.46882439 -1.48057735]
[5.94792604 -11.08624744]
[-2.47989607 -23.49478531]
[-7.16202211 -37.74531937]
[-7.73588514 -52.73433685]
[-4.15704727 -67.30114746]
[3.29735899 -80.31774139]
[14.05009174 -90.77617645]
[27.26849747 -97.86656952]
[41.92899323 -101.03987885]
[56.89632034 -100.05037689]
[71.01146698 -94.97467804]
[83.18139648 -86.20583344]
[92.46372986 -74.42285919]
[98.13846588 -60.54293060]
[96.13310242 -75.40827942]
[94.12773895 -90.27362061]
[92.12237549 -105.13896942]
[90.11701202 -120.00431824]
[88.11164856 -134.86965942]
[74.38804626 -142.11137390]
[67.57221222 -156.05137634]
[70.28498077 -171.32948303]
[81.48323059 -182.07093811]
[96.86100769 -184.14543152]
[110.50524902 -176.75527954]
[117.16945648 -162.74214172]
[114.29111481 -147.49436951]
[102.97699738 -136.87503052]
[104.98236084 -122.00968170]
[106.98772430 -107.14433289]
[108.99308777 -92.27898407]
[110.99845123 -77.41364288]
[113.00381470 -62.54829407]
[127.16883087 -57.61348343]
[137.97665405 -68.01496887]
[148.78446960 -78.41645813]
[159.59230042 -88.81794739]
[164.17033386 -103.96232605]
[178.70590210 -107.21293640]
[189.51371765 -117.61442566]
[189.98074341 -133.18426514]
[201.08958435 -143.57888794]
[215.93016052 -143.03770447]
[226.73797607 -153.43919373]
[237.54580688 -163.84068298]
[239.28947449 -179.78869629]
[252.92181396 -188.24676514]
[267.98526001 -182.72657776]
[272.92440796 -167.46275330]
[263.95040894 -154.16439819]
[247.94729614 -153.03285217]
[237.13946533 -142.63136292]
[226.33164978 -132.22987366]
[226.30400085 -117.37946320]
[215.49150085 -106.67691040]
[199.91520691 -106.80660248]
[189.10737610 -96.40511322]
[185.30239868 -82.00472260]
[169.99378967 -78.01012421]
[159.18595886 -67.60863495]
[148.37814331 -57.20714951]
[137.57031250 -46.80566025]
[125.90568542 -37.88608551]
[113.97551727 -37.19789505]
[113.11396790 -22.22265625]
[112.25241852 -7.24741888]
[111.39086914 7.72781849]
[110.52931976 22.70305634]
[109.66777802 37.67829514]
[119.73840332 48.59241486]
[119.07800293 63.79170609]
[107.56198120 74.28070831]
[106.70043182 89.25594330]
[122.78826904 88.94779205]
[137.76206970 104.17182159]
[148.36866760 114.77841949]
[158.97526550 125.38502502]
[169.58187866 135.99162292]
[177.90403748 139.87155151]
[180.28762817 146.90443420]
[190.68910217 157.71226501]
[206.25894165 158.17929077]
[216.65356445 169.28813171]
[216.11238098 184.12870789]
[226.51387024 194.93652344]
[236.91535950 205.74435425]
[247.31684875 216.55216980]
[262.65673828 223.77188110]
[259.96566772 240.51089478]
[243.13587952 242.55882263]
[236.50901794 226.95365906]
[226.10752869 216.14584351]
[215.70605469 205.33801270]
[205.30456543 194.53019714]
[190.45414734 194.50254822]
[179.75160217 183.69004822]
[179.88128662 168.11375427]
[169.47979736 157.30592346]
[158.97526550 146.59822083]
[148.36866760 135.99162292]
[137.76206970 125.38502502]
[127.15546417 114.77841949]
[119.69705200 115.56714630]
[123.92015076 129.96038818]
[134.48721313 140.60638428]
[134.97666931 155.59840393]
[125.12649536 166.91096497]
[110.20965576 168.48829651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[11 20]
[12 19]
[39 128]
[40 127]
[43 124]
[44 123]
[45 122]
[46 121]
[47 120]
[48 119]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[89 117]
[90 116]
[91 115]
[92 114]
[94 112]
[95 111]
[98 108]
[99 107]
[100 106]
[130 157]
[131 156]
[132 155]
[133 154]
[135 153]
[136 152]
[139 149]
[140 148]
[141 147]
[142 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
