%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUUACGCAAGGCCUGGUGUUUACCUCCCGUGGGAGCCUCCUCCCUCCCUAUAAAGCCUGAUGUGGUGGAGAGAUUUGACGAGACUGAGACUCUGGUUGAAGAGAGAGGCAAUCCCAGGAGAGGGGCGGAAAGCGGCAAAAGUUAAUGCGGGAGUCGGAG\
) } def
/len { sequence length } bind def

/coor [
[186.13175964 740.81176758]
[184.97648621 725.85626221]
[183.82121277 710.90081787]
[171.82690430 704.97753906]
[164.27519226 693.80468750]
[163.23426819 680.25061035]
[169.08390808 667.85961914]
[180.38795471 659.92504883]
[179.52113342 644.95013428]
[178.65429688 629.97521973]
[177.78747559 615.00030518]
[167.36709595 600.90533447]
[175.71015930 584.51452637]
[174.55488586 569.55908203]
[173.39962769 554.60363770]
[161.31057739 539.54821777]
[170.16458130 521.47332764]
[168.43382263 506.57351685]
[159.27967834 494.82400513]
[165.37298584 480.22326660]
[163.64222717 465.32345581]
[161.91146851 450.42364502]
[160.18070984 435.52380371]
[158.44995117 420.62399292]
[149.29580688 408.87448120]
[155.38909912 394.27374268]
[153.65835571 379.37393188]
[151.78408813 364.49148560]
[149.76649475 349.62777710]
[147.74890137 334.76409912]
[145.73130798 319.90039062]
[130.79499817 304.25979614]
[139.30421448 283.55569458]
[136.14784241 268.89154053]
[132.99147034 254.22738647]
[129.83509827 239.56323242]
[126.67873383 224.89907837]
[123.24033356 210.29849243]
[119.52118683 195.76686096]
[115.80204773 181.23524475]
[112.08290100 166.70362854]
[108.36375427 152.17201233]
[104.50473785 137.67691040]
[100.50622559 123.21966553]
[96.50771332 108.76242065]
[79.26302338 115.33023071]
[57.99648666 103.43762207]
[46.94003677 93.30080414]
[35.88359070 83.16399384]
[24.82714462 73.02717590]
[13.67352581 62.99738312]
[2.42377186 53.07553864]
[-8.82598209 43.15369034]
[-20.07573700 33.23184586]
[-31.32549095 23.30999756]
[-46.43959427 26.82332420]
[-60.71910095 20.75082207]
[-68.67324829 7.42749166]
[-67.24350739 -8.02357483]
[-56.97963715 -19.66112709]
[-41.82831192 -23.01028824]
[-27.61551857 -16.78323746]
[-19.80636978 -3.37440324]
[-21.40364456 12.06024456]
[-10.15388966 21.98209000]
[1.09586418 31.90393639]
[12.34561825 41.82578278]
[23.59537125 51.74763107]
[30.72616959 53.82348633]
[34.96395874 61.97073364]
[46.02040482 72.10754395]
[57.07685089 82.24436188]
[68.13330078 92.38117218]
[75.39910889 90.52159882]
[79.44374084 76.07719421]
[89.93072510 86.80245209]
[97.19653320 84.94287872]
[102.02383423 70.74086761]
[106.85112762 56.53884888]
[111.67842102 42.33683395]
[116.50571442 28.13482094]
[121.33300781 13.93280506]
[118.44849396 -1.62322688]
[129.87007141 -11.18340492]
[134.69735718 -25.38541985]
[139.52465820 -39.58743286]
[131.26348877 -52.86474991]
[133.52072144 -68.33856201]
[145.23057556 -78.70261383]
[160.86399841 -79.06330872]
[173.03936768 -69.25034332]
[176.00785828 -53.89709854]
[168.36782837 -40.25290680]
[153.72666931 -34.76013947]
[148.89936829 -20.55812454]
[144.07208252 -6.35611010]
[147.30187988 8.18409920]
[135.53501892 18.76009941]
[130.70773315 32.96211624]
[125.88043213 47.16413116]
[121.05313873 61.36614609]
[116.22584534 75.56816101]
[111.39855194 89.77017212]
[110.96495819 104.76390839]
[114.96347046 119.22114563]
[118.96198273 133.67839050]
[124.29011536 141.15820312]
[122.89537048 148.45286560]
[126.61451721 162.98448181]
[130.33366394 177.51609802]
[134.05281067 192.04771423]
[137.77195740 206.57934570]
[142.16450500 211.62397766]
[143.16278076 217.28001404]
[141.34288025 221.74272156]
[144.49925232 236.40686035]
[147.65562439 251.07101440]
[150.81199646 265.73516846]
[153.96836853 280.39932251]
[161.79853821 283.58749390]
[167.64414978 289.56399536]
[170.59088135 297.28662109]
[170.22085571 305.44964600]
[166.67041016 312.70455933]
[160.59500122 317.88281250]
[162.61259460 332.74649048]
[164.63018799 347.61019897]
[166.64778137 362.47387695]
[170.92140198 370.60238647]
[168.55816650 377.64315796]
[170.28892517 392.54296875]
[179.56686401 405.35821533]
[173.34976196 418.89324951]
[175.08052063 433.79306030]
[176.81127930 448.69287109]
[178.54203796 463.59268188]
[180.27279663 478.49249268]
[189.55073547 491.30773926]
[183.33363342 504.84277344]
[185.06439209 519.74255371]
[194.01419067 526.02947998]
[197.92076111 536.00921631]
[195.70980835 546.27069092]
[188.35507202 553.44836426]
[189.51034546 568.40380859]
[190.66560364 583.35925293]
[199.95368958 592.35388184]
[200.58341980 604.86602783]
[192.76240540 614.13342285]
[193.62924194 629.10839844]
[194.49606323 644.08331299]
[195.36288452 659.05822754]
[209.70730591 667.97790527]
[215.86418152 683.52911377]
[211.59846497 699.52996826]
[198.77665710 709.74560547]
[199.93193054 724.70104980]
[201.08720398 739.65649414]
[212.28692627 751.14324951]
[210.14624023 767.04284668]
[196.30729675 775.15844727]
[181.38613892 769.26446533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[8 152]
[9 151]
[10 150]
[11 149]
[13 146]
[14 145]
[15 144]
[17 140]
[18 139]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[26 131]
[27 130]
[28 128]
[29 127]
[30 126]
[31 125]
[33 119]
[34 118]
[35 117]
[36 116]
[37 115]
[38 112]
[39 111]
[40 110]
[41 109]
[42 108]
[43 106]
[44 105]
[45 104]
[47 73]
[48 72]
[49 71]
[50 70]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[77 103]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
