%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUCAGGACACAGAGCUUCCUCUCUCCCAGGAGCCAUGAAUAUCCUGAUGCUGACCUUCAUUAUCUGUGGGUUGCUAACUCGGGUGACCAAAGGUAGCUUUGAACCCCAAAAAUGUUGGAAGAAUAAUGUAGGAC\
) } def
/len { sequence length } bind def

/coor [
[80.21027374 193.65158081]
[72.57215118 179.13983154]
[81.54830933 165.41537476]
[81.88729858 150.41920471]
[82.22629547 135.42303467]
[70.33460236 126.28041077]
[55.92924881 130.46202087]
[41.52389908 134.64363098]
[27.11854553 138.82524109]
[12.71319580 143.00685120]
[-1.69215512 147.18846130]
[-10.10386086 164.08982849]
[-27.86929703 169.46852112]
[-43.69309616 160.38677979]
[-57.89477921 165.21505737]
[-64.92858887 179.11338806]
[-79.39988708 183.80763245]
[-92.60646820 177.01632690]
[-106.80814362 181.84460449]
[-121.00982666 186.67288208]
[-128.20030212 192.44520569]
[-135.58734131 191.44586182]
[-149.89451599 195.95195007]
[-164.20169067 200.45805359]
[-170.02291870 214.97174072]
[-183.83578491 222.30242920]
[-199.11825562 218.98878479]
[-208.65441895 206.59541321]
[-207.94158936 190.97409058]
[-197.31634521 179.50071716]
[-181.79560852 177.59266663]
[-168.70777893 186.15087891]
[-154.40060425 181.64479065]
[-140.09344482 177.13868713]
[-125.83810425 172.47120667]
[-111.63642883 167.64292908]
[-97.43474579 162.81465149]
[-91.10420227 149.38111877]
[-76.77046204 144.28224182]
[-62.72305679 151.01338196]
[-48.52137756 146.18510437]
[-45.78192139 135.00875854]
[-37.87767029 126.48092651]
[-26.71222687 122.82736969]
[-15.05929565 125.07869720]
[-5.87376595 132.78311157]
[8.53158474 128.60150146]
[22.93693542 124.41989136]
[37.34228516 120.23828125]
[51.74763870 116.05667114]
[66.15298462 111.87506104]
[71.45064545 70.79514313]
[116.14390564 57.12643051]
[113.44649506 42.37095642]
[108.78890228 34.41297150]
[110.85881042 27.25178909]
[108.49555206 12.43912601]
[106.13229370 -2.37353802]
[103.76903534 -17.18620110]
[101.40577698 -31.99886513]
[91.59088135 -44.40767288]
[97.22636414 -58.19500732]
[94.86310577 -73.00766754]
[82.76947784 -83.54919434]
[83.61483765 -99.56995392]
[96.75069427 -108.78020477]
[112.10034943 -104.11462402]
[117.88885498 -89.15224457]
[109.67576599 -75.37092590]
[112.03902435 -60.55826569]
[121.68488312 -49.20896149]
[116.21843719 -34.36212540]
[118.58169556 -19.54945946]
[120.94495392 -4.73679590]
[123.30821228 10.07586861]
[125.67147064 24.88853264]
[128.20196533 39.67354584]
[130.89938354 54.42901611]
[137.32279968 58.30067825]
[137.60519409 43.30333710]
[150.73443604 36.04915619]
[163.58140564 43.79224396]
[163.29927063 58.78958893]
[150.16961670 66.04399872]
[156.59303284 69.91566467]
[170.90020752 65.40956879]
[185.20736694 60.90346909]
[199.51454163 56.39737320]
[204.02552795 46.38347626]
[213.14205933 40.66350937]
[223.67999268 40.94694519]
[232.11503601 46.89467621]
[246.61122131 43.03968811]
[261.10739136 39.18469620]
[275.60357666 35.32970810]
[290.09973145 31.47471809]
[301.32928467 19.52360725]
[317.23001099 23.53603745]
[321.44458008 39.38436508]
[309.63742065 50.76518631]
[293.95474243 45.97089386]
[279.45855713 49.82588196]
[264.96237183 53.68087006]
[250.46620178 57.53586197]
[235.97003174 61.39085007]
[223.40670776 76.02448273]
[204.02064514 70.70454407]
[189.71347046 75.21063995]
[175.40629578 79.71673584]
[161.09913635 84.22283173]
[158.84608459 91.37641907]
[173.84547424 91.24099731]
[178.60914612 105.46447754]
[166.55377197 114.39015198]
[154.33998108 105.68358612]
[152.08694458 112.83717346]
[161.22956848 124.72886658]
[170.37219238 136.62055969]
[179.51481628 148.51225281]
[188.65744019 160.40394592]
[197.80006409 172.29565430]
[213.50158691 174.09498596]
[223.26635742 186.52175903]
[221.30111694 202.20338440]
[208.77178955 211.83622742]
[193.11181641 209.70530701]
[183.61198425 197.07484436]
[185.90835571 181.43827820]
[176.76573181 169.54656982]
[167.62310791 157.65487671]
[158.48048401 145.76318359]
[149.33786011 133.87149048]
[140.19523621 121.97979736]
[119.45254517 135.91082764]
[97.22246552 135.76202393]
[96.88346863 150.75819397]
[96.54447937 165.75436401]
[104.89129639 179.87040710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 137]
[4 136]
[5 135]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[14 41]
[15 40]
[18 37]
[19 36]
[20 35]
[22 34]
[23 33]
[24 32]
[53 78]
[54 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[62 70]
[63 69]
[85 110]
[86 109]
[87 108]
[88 107]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
