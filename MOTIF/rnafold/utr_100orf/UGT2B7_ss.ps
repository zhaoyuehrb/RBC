%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGAAAGGAACAGCAACUGGAAAACAAGCAUUGCAUUGCACCAGGAUGUCUGUGAAAUGGACUUCAGUAAUUUUGCUAAUACAACUGAGCUUUUGCUUUAGCUCUGGGAAUUGUGGAAAGGUGCUGGUGUGGGCAGCAGAAUACA\
) } def
/len { sequence length } bind def

/coor [
[-1.50552237 365.13739014]
[-6.53003550 374.06997681]
[-12.79611301 382.17672729]
[-20.17046738 389.28640747]
[-28.49641800 395.24905396]
[-37.59722137 399.93902588]
[-47.27982712 403.25769043]
[-57.33895493 405.13552856]
[-67.56147003 405.53350830]
[-77.73089600 404.44396973]
[-87.63197327 401.89074707]
[-97.05524445 397.92864990]
[-105.80147552 392.64230347]
[-115.71159363 403.90237427]
[-125.62171173 415.16247559]
[-131.54740906 431.04711914]
[-148.45169067 429.75033569]
[-151.88513184 413.14767456]
[-136.88180542 405.25234985]
[-126.97167969 393.99224854]
[-117.06155396 382.73217773]
[-128.65415955 365.67236328]
[-134.79592896 345.96850586]
[-134.95010376 325.31716919]
[-129.09582520 305.49884033]
[-117.73056030 288.22430420]
[-101.82789612 274.98715210]
[-82.75408173 266.93441772]
[-62.15067291 264.76742554]
[-41.79325867 268.68051147]
[-35.32601547 255.14631653]
[-36.07107925 250.36497498]
[-33.77142334 245.07249451]
[-28.28628731 241.18383789]
[-21.25046158 227.93630981]
[-14.21463680 214.68876648]
[-13.85246086 207.25463867]
[-6.88628578 201.23706055]
[0.42913860 188.14184570]
[7.74456263 175.04663086]
[15.05998707 161.95143127]
[22.37541199 148.85621643]
[29.69083595 135.76100159]
[37.00625992 122.66578674]
[44.32168198 109.57057953]
[51.63710785 96.47536469]
[50.04807281 81.55976868]
[40.13795090 70.29969025]
[25.21234894 65.05211639]
[22.61193848 50.38626862]
[12.70181847 39.12618637]
[2.79169726 27.86610031]
[-7.11842346 16.60601616]
[-17.02854538 5.34593153]
[-26.93866539 -5.91415310]
[-41.94200134 -13.80948734]
[-38.50855255 -30.41213226]
[-21.60427475 -31.70893669]
[-15.67858124 -15.82427406]
[-5.76845980 -4.56418943]
[4.14166117 6.69589520]
[14.05178165 17.95598030]
[23.96190262 29.21606445]
[33.87202454 40.47615051]
[48.08878708 44.91831970]
[51.39803696 60.38956833]
[61.30815506 71.64965057]
[75.28506470 66.20484161]
[74.96668243 51.20821762]
[74.64830780 36.21159744]
[74.32992554 21.21497536]
[65.37263489 7.47819996]
[73.03069305 -7.02304649]
[89.42614746 -7.37112474]
[97.69275665 6.79203844]
[89.32654572 20.89659500]
[89.64492798 35.89321518]
[89.96330261 50.88983536]
[90.28168488 65.88645935]
[102.69245148 67.42196655]
[112.80490875 72.97248840]
[119.50473022 81.14880371]
[132.75227356 74.11297607]
[145.99980164 67.07714844]
[159.24732971 60.04132843]
[172.49487305 53.00550079]
[185.51170349 45.55150604]
[198.28463745 37.68689728]
[210.97338867 29.68716812]
[223.57652283 21.55321884]
[236.17964172 13.41927147]
[248.78277588 5.28532362]
[261.38589478 -2.84862423]
[262.10736084 -18.34891891]
[271.82815552 -30.44379234]
[286.81042480 -34.48252106]
[301.29318237 -28.91213036]
[309.70751953 -15.87454796]
[308.81796265 -0.38299280]
[298.96652222 11.60571766]
[283.94134521 15.48167992]
[269.51986694 9.75450611]
[256.91671753 17.88845444]
[244.31359863 26.02240181]
[231.71046448 34.15634918]
[219.10733032 42.29029846]
[215.16555786 48.60377121]
[206.14924622 50.45983505]
[193.37631226 58.32444382]
[192.21615601 61.72341537]
[189.31219482 64.70980072]
[184.88607788 66.45179749]
[179.53070068 66.25303650]
[166.28315735 73.28886414]
[153.03562927 80.32468414]
[139.78808594 87.36051178]
[126.54055786 94.39633942]
[127.72858429 104.25343323]
[125.25685883 114.21057129]
[119.22132111 122.91271973]
[110.21669769 129.09284973]
[99.28329468 131.75378418]
[87.78830719 130.32247925]
[77.25496674 124.75322723]
[69.16089630 115.56307220]
[64.73232269 103.79079437]
[57.41689682 116.88600159]
[50.10147095 129.98121643]
[42.78604507 143.07643127]
[35.47062302 156.17163086]
[28.15519905 169.26684570]
[20.83977509 182.36206055]
[13.52435017 195.45727539]
[6.20892620 208.55249023]
[-0.96710271 221.72459412]
[-8.00292778 234.97213745]
[-15.03875351 248.21966553]
[-21.79180908 261.61355591]
[-28.25905418 275.14776611]
[-19.93680191 281.17431641]
[-12.57917786 288.34298706]
[-6.34143639 296.50149536]
[-1.35505092 305.47659302]
[2.27506566 315.07785034]
[4.47276497 325.10171509]
[5.19226027 335.33578491]
[4.41908264 345.56329346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 21]
[14 20]
[15 19]
[30 139]
[31 138]
[34 137]
[35 136]
[36 135]
[38 134]
[39 133]
[40 132]
[41 131]
[42 130]
[43 129]
[44 128]
[45 127]
[46 126]
[47 67]
[48 66]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[68 79]
[69 78]
[70 77]
[71 76]
[82 117]
[83 116]
[84 115]
[85 114]
[86 113]
[87 109]
[88 108]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
