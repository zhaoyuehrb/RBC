%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGGGACGCGCCGCCGCCAUGAUCAUCCCUGUACGCUGCUUCACUUGUGGCAAGAUCGUCGGCAACAAGUGGGAGGCUUACCUGGGGCUGCUGCAGGCCGAGUACACCGAGGGGGAUG\
) } def
/len { sequence length } bind def

/coor [
[49.80028915 207.55625916]
[45.06380463 208.74957275]
[35.16152191 220.01655579]
[25.25924110 231.28352356]
[26.09293175 246.83804321]
[15.89010811 258.12329102]
[1.05612409 258.82223511]
[-8.84615803 270.08920288]
[-12.21665192 278.70983887]
[-19.15138054 281.51458740]
[-29.34048080 292.52285767]
[-28.47980309 308.30371094]
[-39.09201050 320.01507568]
[-54.88106155 320.70886230]
[-66.47959900 309.97344971]
[-67.00640869 294.17794800]
[-56.14895248 282.69354248]
[-40.34875870 282.33377075]
[-30.15966034 271.32546997]
[-20.11313629 260.18692017]
[-10.21085453 248.91995239]
[-11.42235947 234.11900330]
[-1.54054034 222.55163574]
[13.99226189 221.38124084]
[23.89454460 210.11427307]
[33.79682541 198.84729004]
[43.40572357 187.32908630]
[52.71486664 175.56729126]
[62.02400970 163.80548096]
[71.33315277 152.04368591]
[80.64229584 140.28189087]
[89.95143127 128.52009583]
[80.20658875 121.74566650]
[74.06154633 111.98010254]
[72.27722931 100.91503906]
[74.88429260 90.35410309]
[81.21780396 81.91925812]
[90.06207275 76.80186462]
[88.51976013 61.88136292]
[86.97743988 46.96086502]
[77.43199921 38.17158127]
[76.51370239 25.63195801]
[84.17131805 16.17209053]
[83.01368713 1.21682775]
[81.85605621 -13.73843479]
[80.69842529 -28.69369888]
[79.54078674 -43.64896011]
[78.38315582 -58.60422516]
[77.22552490 -73.55948639]
[76.06789398 -88.51474762]
[74.91026306 -103.47000885]
[66.13100433 -116.63189697]
[72.86299133 -129.91833496]
[71.70536041 -144.87359619]
[62.38938904 -153.90574646]
[61.79426193 -166.46485901]
[69.69291687 -175.72442627]
[68.92073059 -190.70452881]
[62.06703186 -206.21141052]
[75.07059479 -217.08999634]
[89.12378693 -207.60610962]
[83.90084839 -191.47671509]
[84.67302704 -176.49659729]
[95.01304626 -162.38027954]
[86.66062164 -146.03123474]
[87.81826019 -131.07597351]
[96.51471710 -118.98378754]
[89.86552429 -104.62764740]
[91.02315521 -89.67237854]
[92.18078613 -74.71711731]
[93.33841705 -59.76185608]
[94.49605560 -44.80659103]
[95.65368652 -29.85132980]
[96.81131744 -14.89606667]
[97.96894836 0.05919578]
[99.12657928 15.01445866]
[109.82664490 28.85987282]
[101.89794159 45.41855240]
[103.44025421 60.33905029]
[104.98256683 75.25954437]
[117.61325836 80.21711731]
[126.37615204 91.41584015]
[128.32653809 106.15821838]
[122.27343750 120.45149231]
[136.01818848 126.45829773]
[149.76293945 132.46510315]
[165.50671387 130.90162659]
[174.07049561 143.08813477]
[187.81524658 149.09494019]
[202.37948608 143.57037354]
[216.23304749 149.85794067]
[221.41011047 163.77674866]
[235.15486145 169.78356934]
[248.89962769 175.79037476]
[262.64437866 181.79718018]
[275.96032715 173.83068848]
[291.41271973 175.24610901]
[303.05978394 185.49917603]
[306.42297363 200.64739990]
[300.20910645 214.86595154]
[286.80752563 222.68753052]
[271.37139893 221.10456848]
[259.83624268 210.72573853]
[256.63757324 195.54193115]
[242.89280701 189.53512573]
[229.14805603 183.52832031]
[215.40330505 177.52151489]
[201.67184448 183.17681885]
[187.64714050 177.28085327]
[181.80844116 162.83969116]
[168.06367493 156.83288574]
[153.30303955 158.82601929]
[143.75613403 146.20986938]
[130.01138306 140.20304871]
[116.26663208 134.19624329]
[101.71323395 137.82923889]
[92.40409088 149.59103394]
[83.09494781 161.35282898]
[73.78580475 173.11462402]
[64.47666168 184.87643433]
[55.16752243 196.63822937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[7 21]
[8 20]
[10 19]
[11 18]
[27 121]
[28 120]
[29 119]
[30 118]
[31 117]
[32 116]
[38 80]
[39 79]
[40 78]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[53 66]
[54 65]
[57 63]
[58 62]
[84 115]
[85 114]
[86 113]
[88 111]
[89 110]
[92 107]
[93 106]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
