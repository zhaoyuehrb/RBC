%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGGCGGGGGCUGAGCUGCGCCGGCCGGAAACCCAGCAGGCGGCGAAGAUGGCGGAGAACAGCGGUCGCGCCGGCAAGAGCAGCGGGAGCGGCGCGGGGAAGGGGGCGGUGUCCGCAGAGCAGGUGAUUGCUGGCUUCAACCGCCUUC\
) } def
/len { sequence length } bind def

/coor [
[112.72434235 133.19424438]
[105.52463531 135.11759949]
[98.08216095 135.49772644]
[90.72396088 134.31796265]
[83.77339172 131.63011169]
[74.26502991 143.23146057]
[64.75666809 154.83279419]
[61.99307632 170.41076660]
[47.94117355 175.34973145]
[38.43281555 186.95106506]
[35.66921997 202.52903748]
[21.61731911 207.46800232]
[12.10896111 219.06933594]
[13.91749191 234.76980591]
[4.02909517 247.09843445]
[-11.68961811 248.74087524]
[-23.91301537 238.72268677]
[-25.38916969 222.98748779]
[-15.24230766 210.87068176]
[0.50761992 209.56097412]
[10.01597881 197.95964050]
[12.09947205 183.21147156]
[26.83147430 177.44270325]
[36.33983231 165.84136963]
[38.42332840 151.09320068]
[53.15533066 145.32443237]
[62.66368866 133.72309875]
[72.17205048 122.12175751]
[67.10401917 113.47669983]
[64.64998627 103.76075745]
[65.00493622 93.74597931]
[68.14068604 84.22815704]
[73.80804443 75.96360016]
[81.55667877 69.60903168]
[76.65512848 55.43247604]
[71.75357056 41.25591660]
[59.93153763 30.74164009]
[63.08520126 16.18472862]
[58.18364716 2.00816989]
[49.32477570 4.92954588]
[38.56365585 3.67025352]
[27.87711334 -2.60999274]
[19.53754616 -13.84539795]
[10.02918816 -25.44673920]
[0.52082980 -37.04808044]
[-8.98752880 -48.64942169]
[-18.49588776 -60.25076294]
[-31.27091026 -62.31295776]
[-38.94903183 -72.22584534]
[-37.82472992 -84.31068420]
[-47.08967972 -96.10732269]
[-56.35462952 -107.90396118]
[-70.96343231 -113.97795868]
[-72.73965454 -128.76628113]
[-82.00460815 -140.56291199]
[-97.50518036 -139.84739685]
[-110.44743347 -148.40763855]
[-115.85480499 -162.95205688]
[-111.64806366 -177.88801575]
[-99.44477081 -187.47233582]
[-83.93734741 -188.01966858]
[-71.08872223 -179.31953430]
[-65.83943939 -164.71731567]
[-70.20796967 -149.82786560]
[-60.94301605 -138.03123474]
[-46.99690628 -132.80101013]
[-44.55799103 -117.16891479]
[-35.29304123 -105.37227631]
[-26.02809143 -93.57563019]
[-9.42828941 -87.96791077]
[-6.89454603 -69.75912476]
[2.61381245 -58.15777969]
[12.12217140 -46.55643845]
[21.63052940 -34.95509720]
[31.13888741 -23.35375786]
[38.61901093 -23.89941216]
[30.19387627 -36.30977249]
[36.72909164 -49.81129074]
[51.68936539 -50.90227509]
[60.11423111 -38.49172974]
[53.57926178 -24.99072266]
[61.05938721 -25.53637886]
[68.78347015 -38.39477921]
[69.25709534 -54.20889664]
[82.44348907 -61.13481903]
[90.16757202 -73.99321747]
[89.91072083 -90.39035797]
[104.11965942 -98.57803345]
[118.17745209 -90.13347626]
[117.62264252 -73.74371338]
[103.02597046 -66.26913452]
[95.30188751 -53.41073227]
[95.38073730 -38.51633453]
[81.64187622 -30.67069626]
[73.91778564 -17.81229401]
[72.36020660 -2.89338088]
[77.26175690 11.28317738]
[88.73320007 20.78345299]
[85.93013000 36.35436630]
[90.83168030 50.53092575]
[95.73323059 64.70748138]
[118.98112488 69.94199371]
[133.69998169 88.68284607]
[133.27600098 112.50898743]
[145.88713074 120.63053131]
[158.49826050 128.75207520]
[171.10939026 136.87361145]
[183.72052002 144.99516296]
[196.33163452 153.11669922]
[208.94276428 161.23823547]
[221.55389404 169.35978699]
[234.16502380 177.48132324]
[247.81333923 170.57691956]
[262.98492432 171.42546082]
[275.61083984 179.69906616]
[282.35513306 193.09199524]
[281.49594116 207.96234131]
[294.10705566 216.08387756]
[306.89819336 214.12405396]
[317.24908447 221.20065308]
[319.88958740 233.04696655]
[332.32901001 241.42910767]
[344.76846313 249.81124878]
[357.20791626 258.19338989]
[369.64733887 266.57553101]
[386.03564453 267.17150879]
[393.47354126 281.78692627]
[384.30953979 295.38665771]
[367.97079468 293.98049927]
[361.26519775 279.01498413]
[348.82574463 270.63284302]
[336.38632202 262.25070190]
[323.94686890 253.86854553]
[311.50744629 245.48640442]
[293.98767090 245.24632263]
[285.98553467 228.69500732]
[273.37438965 220.57347107]
[260.19161987 227.50746155]
[245.20841980 226.90792847]
[232.45272827 218.83581543]
[225.40382385 205.37440491]
[226.04348755 190.09245300]
[213.43235779 181.97091675]
[200.82122803 173.84936523]
[188.21009827 165.72782898]
[175.59896851 157.60627747]
[162.98783875 149.48474121]
[150.37670898 141.36320496]
[137.76557922 133.24165344]
[125.15445709 125.12011719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 28]
[6 27]
[7 26]
[9 24]
[10 23]
[12 21]
[13 20]
[34 101]
[35 100]
[36 99]
[38 97]
[39 96]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[50 69]
[51 68]
[52 67]
[54 65]
[55 64]
[82 95]
[83 94]
[85 92]
[86 91]
[104 150]
[105 149]
[106 148]
[107 147]
[108 146]
[109 145]
[110 144]
[111 143]
[112 142]
[117 137]
[118 136]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
