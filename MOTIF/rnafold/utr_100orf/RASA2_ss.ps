%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCGGCAGGGCUGCGGCACGGGCCGGGCGGCACCAUGGCGGCGGCGGCGCCUGCUGCUGCGGCGGCUUCUUCCGAGGCGCCAGCGGCGAGUGCGACUGCAGAGCCCGAGGCCGGGGACCAGGACAGUCGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[73.97124481 95.39286804]
[59.43910980 99.10998535]
[44.90697098 102.82710266]
[30.37483406 106.54421997]
[15.84269524 110.26133728]
[1.31055713 113.97845459]
[-13.22158146 117.69557190]
[-16.24901772 128.08215332]
[-23.29708862 136.18275452]
[-33.01700211 140.55088806]
[-43.59155655 140.44450378]
[-53.07478333 135.95124817]
[-59.75006866 127.95980835]
[-74.50199127 130.67655945]
[-89.25392151 133.39329529]
[-104.00584412 136.11004639]
[-118.75776672 138.82678223]
[-130.92835999 148.93556213]
[-144.84649658 143.63133240]
[-159.59841919 146.34808350]
[-169.21485901 160.91180420]
[-186.05010986 163.99662781]
[-199.65936279 154.18232727]
[-214.34561157 157.23417664]
[-228.99618530 160.45298767]
[-243.60917664 163.83833313]
[-258.22216797 167.22369385]
[-269.83139038 178.80633545]
[-285.59439087 174.28305054]
[-289.29553223 158.30702209]
[-277.12738037 147.31300354]
[-261.60751343 152.61070251]
[-246.99453735 149.22535706]
[-232.38154602 145.83999634]
[-226.52487183 141.22624207]
[-217.39746094 142.54791260]
[-202.71119690 139.49607849]
[-197.18922424 127.79884338]
[-185.75462341 121.34494019]
[-172.49856567 122.70224762]
[-162.31517029 131.59614563]
[-147.56323242 128.87940979]
[-136.44779968 118.96495819]
[-121.47451019 124.07485962]
[-106.72258759 121.35811615]
[-91.97066498 118.64137268]
[-77.21873474 115.92462921]
[-62.46681213 113.20788574]
[-52.74135971 96.41322327]
[-33.53619003 91.98538971]
[-16.93869781 103.16343689]
[-2.40655971 99.44631958]
[12.12557888 95.72920227]
[26.65771675 92.01208496]
[41.18985367 88.29496765]
[55.72199249 84.57785034]
[70.25413513 80.86073303]
[80.86073303 70.25413513]
[84.57785034 55.72199249]
[88.29496765 41.18985367]
[92.01208496 26.65771675]
[95.72920227 12.12557888]
[99.44631958 -2.40655971]
[102.99777985 -16.98006630]
[106.38314056 -31.59305191]
[109.76849365 -46.20603943]
[113.15385437 -60.81902313]
[112.04029846 -69.97415924]
[116.78616333 -75.72428894]
[120.50328064 -90.25643158]
[124.22039795 -104.78856659]
[127.93751526 -119.32070923]
[122.99446869 -134.95715332]
[134.26261902 -146.87187195]
[150.15026855 -142.80804443]
[154.31355286 -126.94616699]
[142.46965027 -115.60359192]
[138.75253296 -101.07144928]
[135.03541565 -86.53931427]
[131.31829834 -72.00717163]
[127.76683807 -57.43367004]
[124.38148499 -42.82068253]
[120.99612427 -28.20769691]
[117.61077118 -13.59471035]
[119.17912292 -6.30584764]
[113.97845459 1.31055713]
[110.26133728 15.84269524]
[106.54421997 30.37483406]
[102.82710266 44.90697098]
[99.10998535 59.43910980]
[95.39286804 73.97124481]
[110.76830292 77.61190033]
[120.41789246 88.87291718]
[121.49507141 102.69081116]
[134.81335449 109.59178925]
[148.13162231 116.49275970]
[161.44990540 123.39373779]
[174.76818848 130.29470825]
[188.08645630 137.19569397]
[201.40473938 144.09666443]
[214.72302246 150.99763489]
[228.67614746 139.85351562]
[246.03263855 135.88313293]
[263.34085083 139.82940674]
[277.17901611 150.86546326]
[284.83157349 166.76745605]
[284.82226562 184.36256409]
[298.58041382 190.33857727]
[312.33859253 196.31459045]
[326.09677124 202.29061890]
[342.31945801 199.89141846]
[352.29516602 212.90747070]
[345.76171875 227.94894409]
[329.44018555 229.54248047]
[320.12072754 216.04878235]
[306.36257935 210.07276917]
[292.60440063 204.09675598]
[278.84622192 198.12072754]
[270.39498901 207.15580750]
[259.54156494 213.14480591]
[247.34358215 215.48672485]
[234.99513245 213.93681335]
[223.70977783 208.63209534]
[214.60139465 200.07928467]
[208.57414246 189.10656738]
[206.23280334 176.78332520]
[207.82203674 164.31591797]
[194.50376892 157.41494751]
[181.18548584 150.51396179]
[167.86720276 143.61299133]
[154.54893494 136.71202087]
[141.23065186 129.81103516]
[127.91237640 122.91006470]
[114.59409332 116.00908661]
[105.42351532 121.95703125]
[94.05712128 122.80956268]
[83.24842834 117.91277313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[19 42]
[20 41]
[23 37]
[24 36]
[25 34]
[26 33]
[27 32]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[64 84]
[65 83]
[66 82]
[67 81]
[69 80]
[70 79]
[71 78]
[72 77]
[94 134]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
