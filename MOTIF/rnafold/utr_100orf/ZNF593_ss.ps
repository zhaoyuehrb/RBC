%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACGUAGCUGAUCGGCCCGGAAGUGCUCACACGUGUGCUCCCUGCCCUGCUCCUGGCCCCUUGGCCGGCCGGGCUGUUUCUGGCCAUGGGUCGCUCCCGCCGGACAGGCGCGCACCGAGCGCACUCUCUAGCCCGGCAGAUGAAGGCGAAGCGGCGGCGGCCGGACUUGGAUGAGAUUCACCGCG\
) } def
/len { sequence length } bind def

/coor [
[114.10999298 255.38221741]
[107.67471313 251.27479553]
[102.01379395 246.14393616]
[97.28839874 240.13307190]
[93.63346863 233.41075134]
[91.15392303 226.16590881]
[89.92159271 218.60246277]
[89.97317505 210.93368530]
[91.30915833 203.37615967]
[93.89369965 196.14363098]
[97.65564728 189.44096375]
[102.49044037 183.45837402]
[108.26306152 178.36602783]
[114.81177521 174.30915833]
[121.95268250 171.40396118]
[119.95337677 156.53779602]
[117.95407104 141.67163086]
[115.95476532 126.80547333]
[113.95546722 111.93931580]
[102.52089691 116.44235992]
[92.09834290 112.63600922]
[78.82547760 119.62392426]
[70.21878815 132.89929199]
[55.35245514 131.98202515]
[42.07958603 138.96994019]
[28.80671692 145.95785522]
[15.53384781 152.94577026]
[2.26097918 159.93368530]
[0.17203136 175.30950928]
[-10.57994461 186.49765015]
[-25.86059380 189.19606018]
[-39.79419708 182.36712646]
[-47.02299500 168.63671875]
[-44.76737213 153.28445435]
[-33.89466095 142.21360779]
[-18.58563614 139.68112183]
[-4.72693539 146.66081238]
[8.54593372 139.67289734]
[21.81880188 132.68498230]
[35.09167099 125.69707489]
[48.36454010 118.70915985]
[56.02186203 105.93360901]
[71.83756256 106.35105896]
[85.11042786 99.36314392]
[95.90194702 83.87821198]
[115.74692535 90.54820251]
[120.19106293 76.22166443]
[124.63519287 61.89512634]
[128.95947266 47.53195953]
[133.16358948 33.13315964]
[137.36770630 18.73436356]
[141.57182312 4.33556461]
[145.77595520 -10.06323338]
[149.61785889 -24.56287766]
[153.09516907 -39.15425491]
[156.57246399 -53.74563599]
[150.60145569 -67.50597382]
[137.56950378 -74.93350220]
[124.53754425 -82.36102295]
[111.50558472 -89.78855133]
[95.11863708 -89.15618134]
[86.60763550 -103.17384338]
[94.72797394 -117.42137146]
[111.12614441 -117.24213409]
[118.93311310 -102.82051086]
[131.96507263 -95.39298248]
[144.99702454 -87.96545410]
[158.02897644 -80.53793335]
[170.14308167 -96.01409912]
[187.74107361 -99.30545044]
[192.89753723 -113.39128876]
[198.05400085 -127.47712708]
[203.21046448 -141.56297302]
[208.36694336 -155.64880371]
[213.52340698 -169.73464966]
[218.67987061 -183.82048035]
[223.83633423 -197.90632629]
[228.99279785 -211.99215698]
[214.77572632 -226.45211792]
[213.32412720 -249.27122498]
[228.64442444 -269.60559082]
[228.39376831 -284.60348511]
[228.14312744 -299.60137939]
[227.89248657 -314.59930420]
[227.64183044 -329.59719849]
[227.39118958 -344.59509277]
[224.68232727 -349.10351562]
[224.05065918 -353.73577881]
[225.19253540 -357.67532349]
[227.52279663 -360.34646606]
[228.02401733 -375.33807373]
[228.52525330 -390.32971191]
[218.66073608 -402.98162842]
[222.54193115 -418.54809570]
[237.19152832 -425.08792114]
[251.37159729 -417.58422852]
[254.20440674 -401.79327393]
[243.51687622 -389.82849121]
[243.01564026 -374.83685303]
[242.51441956 -359.84521484]
[242.38909912 -344.84576416]
[242.63973999 -329.84783936]
[242.89038086 -314.84994507]
[243.14103699 -299.85205078]
[243.39167786 -284.85412598]
[243.64233398 -269.85623169]
[250.57142639 -266.98608398]
[264.42962646 -261.24584961]
[271.35870361 -258.37573242]
[282.14108276 -268.80361938]
[286.68203735 -283.95913696]
[301.20962524 -287.24530029]
[311.99197388 -297.67318726]
[322.77432251 -308.10104370]
[333.55670166 -318.52893066]
[335.26135254 -334.48117065]
[348.87295532 -342.97256470]
[363.94985962 -337.48922729]
[368.92633057 -322.23751831]
[359.98486328 -308.91726685]
[343.98458862 -307.74658203]
[333.20220947 -297.31869507]
[322.41986084 -286.89080811]
[311.63751221 -276.46292114]
[307.86776733 -262.05328369]
[292.56896973 -258.02124023]
[281.78659058 -247.59336853]
[280.85543823 -228.85047913]
[271.62747192 -214.15484619]
[257.61236572 -206.55598450]
[243.07862854 -206.83569336]
[237.92216492 -192.74986267]
[232.76570129 -178.66401672]
[227.60923767 -164.57818604]
[222.45277405 -150.49234009]
[217.29631042 -136.40649414]
[212.13984680 -122.32066345]
[206.98338318 -108.23482513]
[201.82691956 -94.14898682]
[209.11578369 -86.40390015]
[212.54693604 -76.00801849]
[211.22842407 -64.82601166]
[205.14624023 -54.98186874]
[195.21505737 -48.45567703]
[183.14819336 -46.68766403]
[171.16384888 -50.26833344]
[167.68655396 -35.67695618]
[164.20924377 -21.08557510]
[165.75102234 -17.89371490]
[165.81150818 -13.79245663]
[163.97845459 -9.49167061]
[160.17474365 -5.85911369]
[155.97062683 8.53968430]
[151.76651001 22.93848228]
[147.56239319 37.33728027]
[143.35827637 51.73607635]
[144.50382996 59.05259705]
[138.96173096 66.33926392]
[134.51759338 80.66580200]
[130.07347107 94.99233246]
[128.82162476 109.94001007]
[130.82093811 124.80616760]
[132.82023621 139.67233276]
[134.81953430 154.53849792]
[136.81884766 169.40466309]
[159.31454468 176.23840332]
[175.41871643 193.28068542]
[180.93930054 216.00387573]
[174.48460388 238.41369629]
[157.81341553 254.63056946]
[162.96987915 268.71640015]
[168.12634277 282.80224609]
[174.02662659 289.80203247]
[173.24913025 297.16677856]
[178.16950989 311.33682251]
[183.08987427 325.50683594]
[193.99729919 338.48623657]
[184.54461670 352.56045532]
[168.40368652 347.37332153]
[168.91984558 330.42721558]
[163.99946594 316.25717163]
[159.07910156 302.08715820]
[154.04049683 287.95870972]
[148.88403320 273.87286377]
[143.72756958 259.78704834]
[136.15805054 260.58386230]
[128.55622864 260.10156250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 165]
[16 164]
[17 163]
[18 162]
[19 161]
[21 44]
[22 43]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[46 160]
[47 159]
[48 158]
[49 156]
[50 155]
[51 154]
[52 153]
[53 152]
[54 148]
[55 147]
[56 146]
[57 68]
[58 67]
[59 66]
[60 65]
[70 139]
[71 138]
[72 137]
[73 136]
[74 135]
[75 134]
[76 133]
[77 132]
[78 131]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[90 100]
[91 99]
[92 98]
[109 127]
[110 126]
[112 124]
[113 123]
[114 122]
[115 121]
[170 185]
[171 184]
[172 183]
[174 182]
[175 181]
[176 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
