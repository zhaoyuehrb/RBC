%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCUCCAACCGCCACAAGCAGCAAAGGGCAUAGAUGACCACAGGAGAGCCCUAGGGGGAGGCCGGCUCCACCAGCAGCCCCAUACAUGGCACUCCCAGGGUACCCCCUGGGCAACGUGGAUGACAGCAGGUCUAAGGACAGCCCAGCAGGAGAGCCCCAAGGUCAGGUCCCACUCACAGCAGAUG\
) } def
/len { sequence length } bind def

/coor [
[172.26199341 371.84686279]
[160.96830750 381.71868896]
[147.89428711 389.07189941]
[133.59268188 393.59561157]
[118.66815948 395.09860229]
[103.75174713 393.51727295]
[89.47409821 388.91848755]
[76.43887329 381.49670410]
[65.19718933 371.56570435]
[56.22435760 359.54537964]
[49.89974213 345.94393921]
[46.49074554 331.33645630]
[46.14150238 316.34051514]
[48.86600113 301.59280396]
[39.80893707 313.54977417]
[44.43738556 328.36050415]
[39.44447708 343.05233765]
[26.75008583 351.97601318]
[11.23546219 351.70019531]
[-1.13370287 342.33090210]
[-5.60121298 327.47085571]
[-0.44921991 312.83404541]
[12.34123039 304.04858398]
[27.85194969 304.49270630]
[36.90901566 292.53573608]
[36.49934006 288.68118286]
[37.49203873 284.58447266]
[39.98076248 280.76794434]
[43.86389923 277.78131104]
[47.32313538 263.18563843]
[50.78237534 248.58998108]
[49.26280594 241.34263611]
[54.42230988 233.78143311]
[58.12367249 219.24526978]
[52.12463760 210.94480896]
[51.68565369 200.49282837]
[57.19398880 191.34175110]
[67.03238678 186.64773560]
[71.21485901 172.24263000]
[75.39733124 157.83753967]
[79.57980347 143.43243408]
[83.76227570 129.02732849]
[73.45650482 120.04227448]
[67.63619995 107.67036438]
[67.28491211 94.00226593]
[72.46199799 81.34770203]
[62.25940704 70.35192108]
[52.05681610 59.35614777]
[41.85422516 48.36036682]
[26.79588127 43.50682831]
[23.81097984 28.91437531]
[13.60838890 17.91859818]
[3.40579820 6.92281961]
[-16.09839630 1.87800574]
[-19.62251854 -17.12315559]
[-30.18495178 -27.77374077]
[-45.39629745 -32.12408829]
[-48.86457825 -46.60926437]
[-59.42700958 -57.25984955]
[-69.98944855 -67.91043854]
[-80.55187988 -78.56101990]
[-96.12696075 -78.79444122]
[-106.68704987 -89.74611664]
[-106.36853790 -104.59313965]
[-116.93096924 -115.24372864]
[-132.14231873 -119.59407806]
[-135.61059570 -134.07925415]
[-146.17303467 -144.72984314]
[-162.14540100 -146.23410034]
[-170.80700684 -159.73802185]
[-165.51339722 -174.88256836]
[-150.32537842 -180.05012512]
[-136.89390564 -171.27659607]
[-135.52244568 -155.29226685]
[-124.96001434 -144.64167786]
[-110.50415802 -141.05314636]
[-106.28038788 -125.80615997]
[-95.71794891 -115.15557861]
[-80.86878967 -115.35068512]
[-70.00526428 -104.69994354]
[-69.90129089 -89.12345886]
[-59.33885956 -78.47286987]
[-48.77642441 -67.82228088]
[-38.21398926 -57.17169571]
[-23.75814056 -53.58315277]
[-19.53436661 -38.33617401]
[-8.97193146 -27.68558884]
[1.23196018 -28.56118965]
[10.42130947 -23.56194115]
[15.43614674 -14.13138962]
[14.40157604 -3.27977133]
[24.60416794 7.71600676]
[34.80675888 18.71178436]
[49.13534546 22.77883530]
[52.85000229 38.15777588]
[63.05259323 49.15355682]
[73.25518799 60.14933395]
[83.45777893 71.14511108]
[99.20460510 66.74917603]
[115.14361572 70.38715363]
[127.42369843 81.18004608]
[141.38679504 75.69992828]
[155.34991455 70.21981812]
[169.31301880 64.73970032]
[181.13478088 48.42683411]
[200.10997009 52.08822632]
[213.88320923 46.14702988]
[219.79071045 31.73386955]
[233.84336853 25.90485764]
[247.54771423 31.62558174]
[261.32095337 25.68438530]
[275.09420776 19.74318886]
[288.86743164 13.80199146]
[302.64068604 7.86079502]
[316.41390991 1.91959870]
[318.03619385 -15.56284428]
[328.22802734 -29.75013161]
[344.11547852 -36.79585648]
[361.29592896 -34.84598541]
[375.05807495 -24.52576828]
[388.62622070 -30.92148018]
[402.19439697 -37.31719208]
[415.76254272 -43.71290588]
[429.33068848 -50.10861588]
[432.09576416 -65.37734222]
[443.33071899 -76.08038330]
[458.71551514 -78.10220337]
[472.33438110 -70.66536713]
[478.95056152 -56.62949753]
[476.02001953 -41.39166260]
[464.66961670 -30.81113052]
[449.26379395 -28.95632553]
[435.72640991 -36.54046249]
[422.15826416 -30.14474869]
[408.59008789 -23.74903679]
[395.02194214 -17.35332489]
[381.45379639 -10.95761204]
[381.76397705 1.69321978]
[377.24374390 13.56305599]
[368.53326416 22.87130165]
[356.90411377 28.20731735]
[344.07363892 28.74412346]
[331.95144653 24.36638451]
[322.35510254 15.69284058]
[308.58187866 21.63403702]
[294.80862427 27.57523346]
[281.03540039 33.51642990]
[267.26214600 39.45762634]
[253.48890686 45.39882278]
[248.24552917 59.29279709]
[234.36213684 65.51422119]
[219.82440186 59.92027283]
[206.05116272 65.86146545]
[203.13833618 75.67989349]
[195.12742615 82.40758514]
[184.51664734 83.63040161]
[174.79313660 78.70280457]
[160.83001709 84.18292236]
[146.86691284 89.66304016]
[132.90380859 95.14315033]
[131.80834961 109.72002411]
[124.56872559 122.41935730]
[112.58336639 130.78813171]
[98.16738129 133.20980835]
[93.98490906 147.61491394]
[89.80243683 162.02000427]
[85.61996460 176.42510986]
[81.43749237 190.83021545]
[87.14258575 210.15158081]
[72.65982819 222.94664001]
[68.95847321 237.48280334]
[65.37804413 252.04920959]
[61.91880798 266.64489746]
[58.45957184 281.24057007]
[68.10347748 269.75164795]
[79.89334869 260.47808838]
[93.33071899 253.81196594]
[107.84745026 250.03512573]
[122.82978058 249.30726624]
[137.64425659 251.65913391]
[151.66452026 256.99130249]
[164.29780579 265.07833862]
[175.00997925 275.57830811]
[183.34812927 288.04727173]
[188.95971680 301.95806885]
[191.60746765 316.72253418]
[191.17947388 331.71643066]
[187.69380188 346.30581665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 25]
[15 24]
[29 174]
[30 173]
[31 172]
[33 171]
[34 170]
[38 168]
[39 167]
[40 166]
[41 165]
[42 164]
[46 98]
[47 97]
[48 96]
[49 95]
[51 93]
[52 92]
[53 91]
[55 87]
[56 86]
[58 84]
[59 83]
[60 82]
[61 81]
[64 78]
[65 77]
[67 75]
[68 74]
[101 160]
[102 159]
[103 158]
[104 157]
[106 153]
[107 152]
[110 149]
[111 148]
[112 147]
[113 146]
[114 145]
[115 144]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
