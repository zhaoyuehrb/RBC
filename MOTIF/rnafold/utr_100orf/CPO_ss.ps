%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUGCCAGAGAGGCCCAGAAUUUUCUAACUUACUGUGUGGCAGAAUGAAGCCUCUGCUUGAAACCCUUUAUCUUUUGGGGAUGCUGGUUCCUGGAGGGCUGGGAUAUGAUAGAUCCUUAGCCCAACACAGACAAGAGAUUGUGG\
) } def
/len { sequence length } bind def

/coor [
[20.95022202 375.36138916]
[26.32089043 389.36694336]
[20.39606667 403.14724731]
[6.53680611 408.88491821]
[-7.39475012 403.32507324]
[-13.49545383 389.62170410]
[-20.29102516 402.99407959]
[-27.08659744 416.36642456]
[-23.49975777 432.00338745]
[-33.60120392 444.46694946]
[-49.64197159 444.19613647]
[-59.31695557 431.39871216]
[-55.20433807 415.89175415]
[-40.45896530 409.57086182]
[-33.66339111 396.19848633]
[-26.86782074 382.82614136]
[-20.94298172 369.04583740]
[-15.91322136 354.91427612]
[-10.88346100 340.78268433]
[-13.90513706 326.19781494]
[-1.98834872 315.79104614]
[3.04141140 301.65945435]
[8.07117176 287.52789307]
[13.10093212 273.39630127]
[18.13069153 259.26473999]
[17.40526962 251.85600281]
[23.42187881 244.88685608]
[28.75247955 230.86599731]
[20.91763306 222.75863647]
[16.68608093 212.25276184]
[16.71457863 200.87519836]
[21.03770828 190.29519653]
[29.05711365 182.07958984]
[39.62403488 177.46072388]
[51.20376205 177.15176392]
[57.42173004 163.50123596]
[63.63969803 149.85070801]
[69.85766602 136.20018005]
[76.07563019 122.54965210]
[82.29360199 108.89912415]
[78.17958832 94.47432709]
[65.69642639 86.15744019]
[53.21326065 77.84055328]
[40.73009491 69.52366638]
[28.24693108 61.20677948]
[15.76376724 52.88988876]
[1.26029468 58.40613174]
[-13.70677757 54.31145477]
[-23.38230515 42.18034744]
[-24.04584885 26.67746544]
[-15.44226551 13.76398468]
[-0.87980586 8.40540314]
[14.04196644 12.66220284]
[23.58532524 24.89755821]
[24.08065414 40.40672684]
[36.56381989 48.72361374]
[49.04698181 57.04050064]
[61.53014755 65.35738373]
[74.01331329 73.67427826]
[86.49647522 81.99116516]
[93.82585144 80.40048218]
[86.85816956 67.11698151]
[79.89049530 53.83347702]
[67.51813507 45.35263062]
[60.95602036 31.86416435]
[61.92007828 16.89517784]
[70.15821075 4.35990238]
[83.51624298 -2.46381450]
[98.50117493 -1.79164135]
[111.19460297 6.20065498]
[118.27733612 19.42317200]
[117.89730072 34.41835785]
[110.15341187 47.26557159]
[109.31900787 62.24234772]
[108.48460388 77.21912384]
[115.81397247 75.62844086]
[123.72648621 62.88512039]
[131.63899231 50.14180374]
[139.55149841 37.39848328]
[147.46400452 24.65516281]
[155.37652588 11.91184235]
[163.28903198 -0.83147794]
[171.20153809 -13.57479763]
[179.11404419 -26.31811714]
[179.09857178 -42.71725845]
[193.42648315 -50.69491196]
[207.35845947 -42.04434967]
[206.56246948 -25.66453362]
[191.85736084 -18.40560913]
[183.94485474 -5.66228914]
[176.03234863 7.08103085]
[168.11984253 19.82435036]
[160.20733643 32.56767273]
[152.29481506 45.31098938]
[144.38230896 58.05430984]
[136.46980286 70.79763031]
[128.55729675 83.54094696]
[135.49537659 96.83994293]
[150.47396851 97.64098358]
[165.45256042 98.44203186]
[180.43115234 99.24308014]
[195.40974426 100.04412079]
[210.38835144 100.84516907]
[225.37464905 101.48611450]
[240.36694336 101.96688843]
[255.35923767 102.44766235]
[270.35153198 102.92843628]
[280.64645386 91.15777588]
[296.10671997 88.80947113]
[309.43243408 96.99232483]
[314.33163452 111.84264374]
[308.49102783 126.34855652]
[294.66842651 133.66082764]
[279.39038086 130.32679749]
[269.87075806 117.92073059]
[254.87846375 117.43995667]
[239.88616943 116.95918274]
[224.89387512 116.47840881]
[218.05926514 119.42855835]
[209.58729553 115.82376099]
[194.60870361 115.02272034]
[179.63011169 114.22167206]
[164.65151978 113.42062378]
[149.67291260 112.61958313]
[134.69432068 111.81853485]
[112.31183624 123.07250214]
[95.94412994 115.11709595]
[89.72615814 128.76762390]
[83.50819397 142.41815186]
[77.29022217 156.06867981]
[71.07225800 169.71920776]
[64.85428619 183.36973572]
[74.98838043 199.51707458]
[73.44030762 218.36888123]
[61.00486755 232.42385864]
[42.77334595 236.19659424]
[37.44274521 250.21746826]
[32.26227188 264.29449463]
[27.23250961 278.42605591]
[22.20274925 292.55764771]
[17.17299080 306.68920898]
[12.14322948 320.82080078]
[14.80514336 336.41647339]
[3.24811769 345.81243896]
[-1.78164256 359.94403076]
[-6.81140280 374.07559204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[8 14]
[17 146]
[18 145]
[19 144]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[27 137]
[28 136]
[35 132]
[36 131]
[37 130]
[38 129]
[39 128]
[40 127]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
