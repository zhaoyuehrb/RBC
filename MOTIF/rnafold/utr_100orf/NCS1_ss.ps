%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCCGGCCCGCCCGGCCCAGCCGCUCCUGCUGGGCGCCCCAACCGGGUCCGGCCCGGGGGGGCGGGGGCCGCGGCCGCCGAGGAUGGGGAAAUCCAACAGCAAGUUGAAGCCCGAAGUUGUGGAGGAGCUGACCAGGAAGACCUACUUUACCGAGAAGGAGGUCCAGCAGUGGUACAAAGGCU\
) } def
/len { sequence length } bind def

/coor [
[21.24263000 131.73634338]
[18.09940338 131.14085388]
[15.69012070 129.66944885]
[0.96919680 132.54945374]
[-13.75172710 135.42944336]
[-28.47265244 138.30944824]
[-43.16886520 141.31298828]
[-57.83932877 144.43988037]
[-72.50979614 147.56677246]
[-87.18025970 150.69366455]
[-101.85072327 153.82055664]
[-116.52119446 156.94744873]
[-124.28122711 161.80651855]
[-131.46429443 160.00146484]
[-146.18522644 162.88145447]
[-144.61018372 171.22145081]
[-147.32360840 180.84188843]
[-154.85804749 189.64556885]
[-166.97848511 198.48272705]
[-179.09890747 207.31987000]
[-191.21932983 216.15702820]
[-203.33975220 224.99418640]
[-215.46017456 233.83132935]
[-227.58061218 242.66848755]
[-228.46464539 258.28106689]
[-239.21501160 269.63726807]
[-254.75573730 271.37506104]
[-267.74896240 262.67388916]
[-272.05966187 247.64218140]
[-265.65249634 233.37747192]
[-251.55268860 226.61511230]
[-236.41775513 230.54806519]
[-224.29733276 221.71090698]
[-212.17691040 212.87374878]
[-200.05648804 204.03660583]
[-187.93606567 195.19944763]
[-175.81562805 186.36228943]
[-163.69520569 177.52514648]
[-166.94522095 162.88145447]
[-181.66613770 160.00146484]
[-196.38706970 157.12145996]
[-211.10798645 154.24147034]
[-225.82891846 151.36146545]
[-236.95993042 157.90481567]
[-249.17230225 155.18896484]
[-256.02615356 145.20559692]
[-270.69662476 142.07870483]
[-285.36709595 138.95181274]
[-300.03756714 135.82492065]
[-314.70803833 132.69802856]
[-329.37847900 129.57113647]
[-346.13006592 132.18283081]
[-353.27700806 116.80889130]
[-340.48233032 105.68534088]
[-326.25158691 114.90066528]
[-311.58114624 118.02755737]
[-296.91067505 121.15444946]
[-282.24020386 124.28134155]
[-267.56973267 127.40823364]
[-252.89927673 130.53512573]
[-236.53395081 124.22389221]
[-222.94891357 136.64054871]
[-208.22799683 139.52053833]
[-193.50706482 142.40054321]
[-178.78614807 145.28053284]
[-164.06521606 148.16053772]
[-149.06521606 148.16053772]
[-134.34429932 145.28053284]
[-119.64807892 142.27699280]
[-104.97761536 139.15010071]
[-90.30715179 136.02320862]
[-75.63668823 132.89631653]
[-60.96622086 129.76942444]
[-46.29575729 126.64253235]
[-40.39693069 122.16384888]
[-31.35264969 123.58851624]
[-16.63172531 120.70851898]
[-1.91080153 117.82852173]
[12.81012249 114.94852448]
[27.42598915 111.57562256]
[41.92029572 107.71362305]
[56.41460419 103.85163116]
[57.33527756 84.13012695]
[67.06763458 66.06721497]
[84.28221893 53.53493118]
[83.27497864 38.56878662]
[82.26773834 23.60264397]
[81.26049805 8.63649940]
[69.19656372 -1.57314992]
[67.96865845 -17.32966614]
[78.30529022 -29.28498840]
[94.07390594 -30.34623337]
[105.91927338 -19.88378716]
[106.81374359 -4.10483074]
[96.22664642 7.62926006]
[97.23388672 22.59540367]
[98.24112701 37.56155014]
[99.24835968 52.52769089]
[114.09568787 54.66241455]
[119.27857208 40.58627701]
[124.46146393 26.51013947]
[119.06818390 11.40080070]
[127.64062500 -2.15990734]
[143.60273743 -3.76936960]
[154.70976257 7.80705547]
[152.44132996 23.68892479]
[138.53759766 31.69302750]
[133.35470581 45.76916504]
[128.17182922 59.84530258]
[129.55772400 63.09044647]
[130.64991760 66.34418488]
[131.45323181 69.58263397]
[143.86369324 61.15763855]
[156.27413940 52.73264313]
[168.61338806 44.20369720]
[180.88056946 35.57140350]
[178.83509827 20.40319252]
[184.08383179 6.02580309]
[195.42065430 -4.25694513]
[210.24046326 -8.08215237]
[225.13774109 -4.57081366]
[236.68922424 5.47019100]
[242.24046326 19.73351097]
[240.51582336 34.94154358]
[231.91162109 47.59959030]
[218.40501404 54.79892349]
[203.09974670 54.88519669]
[189.51286316 47.83857727]
[177.24568176 56.47086716]
[173.57714844 62.90488434]
[164.69914246 65.14309692]
[152.28868103 73.56809235]
[139.87821960 81.99309540]
[143.73054504 98.53010559]
[140.99737549 115.28846741]
[153.94554138 122.86109924]
[166.89372253 130.43373108]
[179.84190369 138.00634766]
[194.88287354 128.95216370]
[212.34869385 128.75114441]
[227.43965149 137.36859131]
[236.05410767 152.35877991]
[235.90327454 169.55834961]
[249.09852600 176.69172668]
[262.29379272 183.82510376]
[275.48904419 190.95848083]
[288.68432617 198.09185791]
[304.50363159 197.84826660]
[312.02008057 210.70721436]
[325.21533203 217.84059143]
[338.41061401 224.97396851]
[351.60586548 232.10734558]
[367.32894897 228.91925049]
[379.53164673 239.33432007]
[378.85308838 255.36302185]
[365.81381226 264.70950317]
[350.41641235 260.20391846]
[344.47250366 245.30261230]
[331.27722168 238.16923523]
[318.08197021 231.03585815]
[304.88671875 223.90246582]
[290.01119995 224.65629578]
[281.55093384 211.28712463]
[268.35568237 204.15374756]
[255.16041565 197.02037048]
[241.96514893 189.88699341]
[228.76989746 182.75361633]
[218.76496887 190.50570679]
[206.52432251 193.90362549]
[193.86218262 192.40698242]
[182.66920471 186.20359802]
[174.63018799 176.18670654]
[170.97047424 163.82653809]
[172.26927185 150.95452881]
[159.32109070 143.38189697]
[146.37292480 135.80928040]
[133.42474365 128.23664856]
[122.29916382 137.64663696]
[108.70053864 142.88148499]
[94.13699341 143.36065674]
[80.22367859 139.03100586]
[68.50361633 130.37268066]
[60.27660370 118.34593964]
[45.78229523 122.20793152]
[31.28798676 126.06993103]
[28.29490089 129.28074646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[14 68]
[15 67]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[80 185]
[81 184]
[82 183]
[85 98]
[86 97]
[87 96]
[88 95]
[99 109]
[100 108]
[101 107]
[112 133]
[113 132]
[114 131]
[115 129]
[116 128]
[135 177]
[136 176]
[137 175]
[138 174]
[143 167]
[144 166]
[145 165]
[146 164]
[147 163]
[149 161]
[150 160]
[151 159]
[152 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
