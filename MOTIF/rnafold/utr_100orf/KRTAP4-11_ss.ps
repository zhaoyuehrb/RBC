%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUAGAAACCCAACUAGAUCCUUCACCCUCUGACACCAUGGUAAACUCCUGUUGUGGCUCCGUGUGCUCUCACCAAGGCUGUGGCCGAGACCUCUGCCAGGAGACCUGCUGCCGCCCCAGCUGCUGUGAGACCACCU\
) } def
/len { sequence length } bind def

/coor [
[133.58709717 138.14637756]
[124.69927979 144.42054749]
[114.67980194 148.65945435]
[103.98773193 150.66889954]
[93.11294556 150.35681152]
[82.55371094 147.73747253]
[72.79382324 142.93090820]
[64.28047180 136.15734863]
[57.40370178 127.72714996]
[52.47860336 118.02654266]
[49.73083115 107.50000000]
[34.73083115 107.50000000]
[19.73177528 107.66829681]
[4.73555231 108.00486755]
[-10.26067066 108.34143829]
[-25.25689507 108.67800903]
[-36.14276505 119.81962585]
[-51.35586166 119.94732666]
[-61.91060257 109.50065613]
[-76.90682983 109.83722687]
[-84.03036499 118.19387054]
[-94.37810516 121.14448547]
[-104.41732788 117.93564606]
[-110.85963440 109.87476349]
[-125.85585785 109.53819275]
[-139.82617188 116.96389008]
[-152.37661743 108.94296265]
[-167.37284851 108.60639191]
[-182.36906433 108.26982117]
[-189.86035156 116.29846191]
[-200.33004761 118.78185272]
[-210.21520996 115.12583923]
[-216.28936768 106.78403473]
[-231.25540161 105.77500153]
[-245.73045349 113.48243713]
[-259.49768066 104.57202148]
[-258.39453125 88.21001434]
[-243.55583191 81.22825623]
[-230.24635315 90.80897522]
[-215.28033447 91.81801605]
[-198.67819214 82.00019073]
[-182.03250122 93.27359772]
[-167.03627014 93.61016846]
[-152.04005432 93.94673920]
[-139.14237976 86.49696350]
[-125.51928711 94.54196930]
[-110.52306366 94.87854004]
[-94.37810516 84.32574463]
[-77.24340057 94.84100342]
[-62.24717331 94.50443268]
[-52.17174911 83.59474182]
[-36.96823883 83.03977966]
[-25.59346581 93.68178558]
[-10.59724236 93.34521484]
[4.39898157 93.00864410]
[19.39520454 92.67207336]
[26.06677818 89.34984589]
[34.73083115 92.50000000]
[49.73083115 92.50000000]
[56.20262146 74.21184540]
[69.05505371 59.68065643]
[86.41571808 51.02340698]
[105.75540924 49.50134277]
[124.25662994 55.33619690]
[139.22399902 67.67792511]
[148.47702026 84.72850800]
[163.29234314 82.38198853]
[178.10766602 80.03547668]
[190.52755737 70.23461151]
[204.30851746 75.88566589]
[219.12384033 73.53914642]
[233.93916321 71.19263458]
[248.75448608 68.84611511]
[263.56982422 66.49959564]
[278.38513184 64.15308380]
[285.49563599 50.48753357]
[299.13003540 43.70843124]
[313.96636963 46.22784424]
[324.34997559 56.87296677]
[339.16528320 54.52645111]
[353.98062134 52.17993546]
[368.79592896 49.83341599]
[383.52389526 46.98963928]
[398.14782715 43.65182495]
[412.77172852 40.31401062]
[427.39566040 36.97620010]
[442.01959229 33.63838577]
[451.01361084 18.68028069]
[467.70565796 14.88895321]
[481.71649170 24.12383461]
[496.26184082 20.45872879]
[504.39550781 7.17412233]
[519.19879150 3.66438746]
[531.81347656 11.50049114]
[546.35882568 7.83538485]
[560.90417480 4.17027903]
[575.44952393 0.50517279]
[586.83441162 -11.29807663]
[602.68127441 -7.07807016]
[606.68823242 8.82401085]
[594.73327637 20.04946899]
[579.11462402 15.05051517]
[564.56927490 18.71562195]
[550.02392578 22.38072777]
[535.47857666 26.04583359]
[528.08343506 38.92399216]
[513.38458252 42.84813309]
[499.92694092 35.00407028]
[485.38159180 38.66917801]
[480.35632324 50.58600616]
[469.20507812 57.51408768]
[455.90570068 56.71685028]
[445.35739136 48.26230240]
[430.73348999 51.60011673]
[416.10955811 54.93793106]
[401.48562622 58.27574539]
[386.86172485 61.61355972]
[384.66683960 64.47228241]
[380.94058228 66.37246704]
[376.16687012 66.58890533]
[371.14245605 64.64874268]
[356.32714844 66.99526215]
[341.51181030 69.34177399]
[326.69647217 71.68829346]
[320.11059570 85.02111816]
[306.77896118 92.00189972]
[291.71701050 89.76785278]
[280.73165894 78.96840668]
[265.91632080 81.31492615]
[251.10099792 83.66143799]
[236.28567505 86.00795746]
[221.47035217 88.35447693]
[206.65502930 90.70098877]
[195.29483032 100.33401489]
[180.45417786 94.85079956]
[165.63885498 97.19731140]
[150.82353210 99.54383087]
[149.75630188 110.37062073]
[146.40934753 120.72225189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 59]
[12 58]
[13 56]
[14 55]
[15 54]
[16 53]
[19 50]
[20 49]
[24 47]
[25 46]
[27 44]
[28 43]
[29 42]
[33 40]
[34 39]
[66 137]
[67 136]
[68 135]
[70 133]
[71 132]
[72 131]
[73 130]
[74 129]
[75 128]
[79 124]
[80 123]
[81 122]
[82 121]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[90 109]
[91 108]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
