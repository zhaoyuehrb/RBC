%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCCUUGCCUCGCCCUGCUUCUCCUGAUGGAGCUGUCCGUGUGCACUGUGGCAGGUGAUGGUGGAGAGGAACAGACACUCAGCACUGAAGCAGAGA\
) } def
/len { sequence length } bind def

/coor [
[132.10566711 167.87345886]
[131.92523193 162.29539490]
[123.95886230 149.58567810]
[115.79579926 137.00138855]
[107.43801117 124.54557037]
[99.08023071 112.08975220]
[90.33911133 99.89987946]
[81.22312164 87.98775482]
[72.10713196 76.07563019]
[62.99114227 64.16350555]
[53.32948685 52.68951797]
[43.14319229 41.67863846]
[32.95690155 30.66776085]
[22.60059929 19.81663132]
[12.07679749 9.12787151]
[1.55299473 -1.56088817]
[-8.97080803 -12.24964809]
[-19.49460983 -22.93840790]
[-27.90143967 -26.95310974]
[-30.17302895 -34.12704849]
[-40.35932159 -45.13792419]
[-50.54561615 -56.14880371]
[-60.73190689 -67.15968323]
[-75.83108521 -60.55310822]
[-92.25007629 -59.45138168]
[-108.04780579 -63.96754837]
[-121.36244202 -73.55151367]
[-130.63085938 -87.05698395]
[-134.77210999 -102.87854767]
[-133.31350708 -119.14249420]
[-126.44448090 -133.92874146]
[-137.29560852 -144.28504944]
[-148.14674377 -154.64134216]
[-158.99787903 -164.99765015]
[-169.84899902 -175.35394287]
[-185.90319824 -178.69981384]
[-190.77497864 -194.35861206]
[-179.45268250 -206.22189331]
[-163.58370972 -202.08575439]
[-159.49270630 -186.20507812]
[-148.64157104 -175.84877014]
[-137.79043579 -165.49247742]
[-126.93930817 -155.13616943]
[-116.08818054 -144.77987671]
[-104.17435455 -151.43919373]
[-90.84076691 -154.43336487]
[-77.18969727 -153.50494385]
[-64.35248566 -148.72119141]
[-53.39577866 -140.46926880]
[-45.23290634 -129.42494202]
[-40.54775620 -116.49724579]
[-39.73747253 -102.75364685]
[-42.87882233 -89.33192444]
[-49.72103119 -77.34597778]
[-39.53473663 -66.33509827]
[-29.34844398 -55.32421875]
[-19.16215134 -44.31333923]
[-8.80585098 -33.46221161]
[1.71795154 -22.77345085]
[12.24175453 -12.08469105]
[22.76555634 -1.39593136]
[33.28936005 9.29282856]
[40.34954071 11.89653969]
[43.96777725 20.48146820]
[54.15407181 31.49234581]
[64.34036255 42.50322342]
[68.00872040 42.94842911]
[71.61363983 45.30622864]
[74.20385742 49.51053238]
[74.90326691 55.04751587]
[84.01925659 66.95964050]
[93.13524628 78.87176514]
[102.25123596 90.78388977]
[107.34628296 92.68617249]
[110.93599701 97.37989807]
[111.53604889 103.73196411]
[119.89383698 116.18778229]
[128.25161743 128.64360046]
[135.76754761 134.14846802]
[136.66857910 141.61930847]
[144.63494873 154.32904053]
[153.18542480 166.65336609]
[162.30142212 178.56549072]
[171.41741943 190.47761536]
[185.94874573 196.73469543]
[187.53900146 211.54415894]
[196.65499878 223.45628357]
[212.35246277 225.29075623]
[222.08940125 237.73936462]
[220.08906555 253.41654968]
[207.53822327 263.02133179]
[191.88305664 260.85534668]
[182.41151428 248.20367432]
[184.74287415 232.57228088]
[175.62687683 220.66015625]
[161.74758911 215.25511169]
[159.50529480 199.59361267]
[150.38929749 187.68148804]
[141.27330017 175.76936340]
[137.66239929 174.98428345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 78]
[5 77]
[6 76]
[7 73]
[8 72]
[9 71]
[10 70]
[11 66]
[12 65]
[13 64]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[20 57]
[21 56]
[22 55]
[23 54]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[82 99]
[83 98]
[84 97]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
