%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGGGUAAGGAGGAUAGUGGAAGAAAAAAAGGUAGAUGGUUGAUUUCCCUCUCUGAUCUGGAAGGAAGAUGACCGAGGAAGGAUGUGCACCAGCGGUCAGAUUAUUGGGAGCCUCUUGGUGCUCUCCGUGCUGGAGAUAGGGCUGGGGGUGUCCAGCGUGGCCGUGGGGGCGGUCAGCUUCA\
) } def
/len { sequence length } bind def

/coor [
[-48.69577408 213.03472900]
[-59.48359299 220.53910828]
[-72.15045929 223.91609192]
[-85.17864990 222.78355408]
[-97.01478577 217.29838562]
[-106.25505066 208.13511658]
[-119.93754578 214.28242493]
[-133.62004089 220.42971802]
[-147.30253601 226.57702637]
[-156.71968079 239.29032898]
[-171.49996948 237.44851685]
[-185.18246460 243.59582520]
[-198.81256104 249.85845947]
[-212.38928223 256.23596191]
[-225.96598816 262.61349487]
[-239.54270935 268.99099731]
[-244.98744202 283.58526611]
[-258.84701538 289.85958862]
[-272.72686768 284.57891846]
[-286.30358887 290.95642090]
[-299.88031006 297.33395386]
[-309.08139038 310.20446777]
[-323.89068604 308.61257935]
[-337.46740723 314.99008179]
[-335.56338501 329.99774170]
[-338.39221191 344.85888672]
[-345.67666626 358.11752319]
[-356.70315552 368.47473145]
[-370.39138794 374.91583252]
[-385.40029907 376.80978394]
[-400.25955200 373.97100830]
[-413.51330566 366.67767334]
[-423.86312866 355.64425659]
[-430.29504395 341.95172119]
[-432.17892456 326.94149780]
[-429.33020020 312.08419800]
[-422.02798462 298.83532715]
[-410.98764038 288.49288940]
[-397.29080200 282.07012939]
[-382.27932739 280.19631958]
[-367.42391968 283.05499268]
[-354.17993164 290.36608887]
[-343.84490967 301.41336060]
[-330.26818848 295.03585815]
[-322.03820801 282.62149048]
[-306.25781250 283.75723267]
[-292.68109131 277.37969971]
[-279.10440063 271.00219727]
[-274.30685425 256.94802856]
[-260.62899780 250.28692627]
[-245.92022705 255.41429138]
[-232.34350586 249.03677368]
[-218.76679993 242.65925598]
[-205.19007874 236.28173828]
[-200.46231079 230.57963562]
[-191.32977295 229.91333008]
[-177.64727783 223.76602173]
[-169.20878601 211.49241638]
[-153.44982910 212.89453125]
[-139.76734924 206.74722290]
[-126.08484650 200.59992981]
[-112.40235138 194.45262146]
[-112.44979095 177.57553101]
[-105.10107422 162.32092285]
[-91.78706360 151.77017212]
[-75.14890289 148.07781982]
[-58.51414490 152.03173828]
[-45.23127365 162.88563538]
[-31.76420403 156.27972412]
[-18.29713631 149.67379761]
[-4.83006859 143.06788635]
[3.18907237 130.51629639]
[18.98639107 131.38536072]
[32.45346069 124.77944946]
[45.92052841 118.17353821]
[59.38759613 111.56762695]
[72.85466766 104.96170807]
[86.32173157 98.35579681]
[71.43540955 96.51258850]
[58.29850388 89.27230835]
[48.79039001 77.67076874]
[44.27131271 63.36769104]
[45.38777924 48.40929794]
[51.98006439 34.93555450]
[63.10506821 24.87402725]
[77.17123413 19.66413307]
[92.16623688 20.05120659]
[105.94487762 25.97986984]
[116.53596497 36.60196304]
[122.42433167 50.39787292]
[122.76757050 65.39394379]
[117.51657867 79.44482422]
[107.42115784 90.54142761]
[121.94231415 86.78164673]
[133.36256409 75.83229065]
[147.62292480 80.13246918]
[162.14407349 76.37268066]
[176.66523743 72.61289978]
[191.18640137 68.85311127]
[205.70755005 65.09332275]
[220.22871399 61.33353043]
[234.74986267 57.57374573]
[237.71076965 47.28434753]
[244.63191223 39.22139740]
[254.20700073 34.80338669]
[264.67126465 34.77048111]
[274.12661743 39.06135559]
[280.88601685 46.83652115]
[295.57894897 43.81704330]
[310.27191162 40.79756546]
[324.96487427 37.77808762]
[339.65780640 34.75860977]
[351.61798096 24.40173721]
[365.64224243 29.41867447]
[380.33517456 26.39919662]
[395.02813721 23.37971878]
[402.82443237 18.57711411]
[409.99465942 20.43552971]
[424.73651123 17.66463852]
[439.47833252 14.89374733]
[454.22018433 12.12285614]
[468.96203613 9.35196590]
[483.70388794 6.58107471]
[495.83728027 -3.57231832]
[509.77481079 1.68076468]
[524.51666260 -1.09012616]
[539.20959473 -4.10960388]
[553.84948730 -7.37680721]
[568.48931885 -10.64401054]
[583.12915039 -13.91121387]
[592.90917969 -26.62854576]
[608.95166016 -26.76725769]
[618.95013428 -14.22094154]
[615.23468018 1.38594091]
[600.65545654 8.08112717]
[586.39636230 0.72864187]
[571.75653076 3.99584532]
[557.11663818 7.26304865]
[542.47680664 10.53025246]
[539.19604492 14.02823162]
[533.67541504 15.48886395]
[527.28753662 13.65172482]
[512.54571533 16.42261505]
[501.46673584 26.37781525]
[486.47479248 21.32292557]
[471.73294067 24.09381676]
[456.99108887 26.86470795]
[442.24923706 29.63559723]
[427.50738525 32.40649033]
[412.76553345 35.17737961]
[398.04760742 38.07266617]
[383.35467529 41.09214401]
[368.66171265 44.11162186]
[357.75247192 54.25252151]
[342.67727661 49.45155716]
[327.98434448 52.47103500]
[313.29138184 55.49051285]
[298.59844971 58.50999069]
[283.90548706 61.52946854]
[274.43811035 78.53433990]
[255.22943115 83.19955444]
[238.50965881 72.09490204]
[223.98849487 75.85469055]
[209.46734619 79.61447906]
[194.94618225 83.37426758]
[180.42501831 87.13405609]
[165.90386963 90.89384460]
[151.38270569 94.65362549]
[141.00109863 105.33405304]
[125.70210266 101.30280304]
[111.18094635 105.06259155]
[107.04411316 110.65708160]
[100.29844666 113.27236176]
[92.92764282 111.82286835]
[79.46057892 118.42877960]
[65.99350739 125.03469086]
[52.52643967 131.64060974]
[39.05937195 138.24652100]
[25.59230423 144.85243225]
[16.60990906 157.87652588]
[1.77584386 156.53495789]
[-11.69122410 163.14086914]
[-25.15829277 169.74678040]
[-38.62535858 176.35269165]
[-37.58404541 189.54885864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 62]
[7 61]
[8 60]
[9 59]
[11 57]
[12 56]
[13 54]
[14 53]
[15 52]
[16 51]
[19 48]
[20 47]
[21 46]
[23 44]
[24 43]
[68 184]
[69 183]
[70 182]
[71 181]
[73 179]
[74 178]
[75 177]
[76 176]
[77 175]
[78 174]
[93 171]
[94 170]
[96 168]
[97 167]
[98 166]
[99 165]
[100 164]
[101 163]
[102 162]
[108 159]
[109 158]
[110 157]
[111 156]
[112 155]
[114 153]
[115 152]
[116 151]
[118 150]
[119 149]
[120 148]
[121 147]
[122 146]
[123 145]
[125 143]
[126 142]
[127 139]
[128 138]
[129 137]
[130 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
