%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUCUGCGGCGCGGAGCCGAGUGGGCUGCGGGGAUGCGGGGGACCAGCUGCGUGGGCGGCGGCGCCGAGAGCCCCGGAGGCGCGGGGCUGAGCGAGGGCCCGCGGGGGCGCUGGCUGCGCUUGGCUCCGGUAU\
) } def
/len { sequence length } bind def

/coor [
[53.22600937 360.77423096]
[49.79174805 375.37582397]
[56.98083878 389.71792603]
[50.11951447 404.21972656]
[34.47119904 407.75665283]
[22.03993988 397.61547852]
[22.36193657 381.57565308]
[35.19017792 371.94155884]
[38.62443542 357.33999634]
[31.63756752 339.36669922]
[45.45536423 324.77072144]
[48.21160889 310.02612305]
[46.33166885 302.80847168]
[51.20555878 294.97448730]
[54.30163574 280.29751587]
[57.39771271 265.62051392]
[60.49378967 250.94349670]
[63.58986664 236.26651001]
[66.68594360 221.58950806]
[69.78202057 206.91250610]
[72.87809753 192.23550415]
[75.97417450 177.55850220]
[79.07025146 162.88150024]
[82.16632843 148.20451355]
[85.26239777 133.52751160]
[72.60358429 126.99734497]
[62.87033463 115.67503357]
[57.86674881 100.87990570]
[42.87075043 100.53343964]
[27.87475204 100.18696594]
[12.87875366 99.84049988]
[-2.11724496 99.49403381]
[-16.23744583 107.83380890]
[-30.38510132 99.54068756]
[-30.00631714 83.14591980]
[-15.49075127 75.51502991]
[-1.77077651 84.49803162]
[13.22522163 84.84449768]
[28.22122002 85.19097137]
[43.21721649 85.53743744]
[58.21321487 85.88390350]
[65.36044312 72.69614410]
[56.88339996 60.32117844]
[41.60368729 57.29328918]
[33.18304062 44.62255859]
[36.16383743 30.07434845]
[27.68679047 17.69938469]
[20.18597412 12.32690239]
[19.16073608 4.93924427]
[10.97178745 -7.62821817]
[2.78283834 -20.19568062]
[-5.40611076 -32.76314163]
[-13.59505939 -45.33060455]
[-28.45519829 -52.26662445]
[-29.60874748 -68.62514496]
[-15.86903667 -77.57793427]
[-1.37030113 -69.91512299]
[-1.02759731 -53.51955414]
[7.16135168 -40.95209122]
[15.35030079 -28.38463020]
[23.53924942 -15.81716728]
[31.72819901 -3.24970484]
[40.06175232 9.22233963]
[48.53879929 21.59730148]
[63.18138885 24.07321358]
[71.95460510 36.50242615]
[69.25836182 51.84413528]
[77.73540497 64.21909332]
[87.44469452 61.21900940]
[97.26185608 60.71226501]
[106.57685852 62.57008743]
[114.84847260 66.52144623]
[123.60909271 54.34558868]
[132.36970520 42.16973114]
[141.13032532 29.99387169]
[149.89094543 17.81801224]
[158.65156555 5.64215422]
[167.41218567 -6.53370476]
[164.62072754 -22.08951569]
[173.71493530 -35.01510620]
[189.29939270 -37.64195251]
[202.12811279 -28.41159630]
[204.59004211 -12.80023956]
[195.22456360 -0.06982668]
[179.58804321 2.22691560]
[170.82742310 14.40277386]
[162.06680298 26.57863235]
[153.30618286 38.75448990]
[144.54556274 50.93035126]
[135.78494263 63.10620880]
[127.02433014 75.28206635]
[133.83583069 85.98474121]
[136.58731079 98.36913300]
[151.39163208 100.78407288]
[166.19595337 103.19900513]
[181.06178284 97.78440857]
[192.37734985 107.46981812]
[207.18167114 109.88475800]
[222.04750061 104.47016144]
[233.36306763 114.15556335]
[248.16740417 116.57050323]
[262.97174072 118.98544312]
[277.77606201 121.40038300]
[292.91305542 115.09136963]
[305.77926636 125.25955200]
[303.13909912 141.44477844]
[287.70846558 146.99707031]
[275.36111450 136.20471191]
[260.55679321 133.78976440]
[245.75245667 131.37483215]
[230.94813538 128.95988464]
[217.14122009 134.54722595]
[204.76673889 124.68907928]
[189.96241760 122.27414703]
[176.15550232 127.86147308]
[163.78102112 118.00333405]
[148.97668457 115.58839417]
[134.17236328 113.17345428]
[120.69734955 130.21440125]
[99.93939972 136.62358093]
[96.84332275 151.30058289]
[93.74724579 165.97758484]
[90.65116882 180.65458679]
[87.55509186 195.33158875]
[84.45901489 210.00857544]
[81.36293793 224.68557739]
[78.26686859 239.36257935]
[75.17079163 254.03958130]
[72.07471466 268.71658325]
[68.97863770 283.39358521]
[65.88256073 298.07058716]
[62.95620346 312.78234863]
[60.19996262 327.52694702]
[66.91700745 336.22515869]
[67.67118835 346.96789551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[11 133]
[12 132]
[14 131]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[24 121]
[25 120]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[42 68]
[43 67]
[46 64]
[47 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[93 118]
[94 117]
[95 116]
[97 114]
[98 113]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
