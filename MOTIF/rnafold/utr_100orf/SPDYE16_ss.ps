%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGAAGCAUUACACGGUGGCCUGGUUUCUUUACUCAGCCCCUGGGGUAGAUCCCAGCCCCCCAUGUAGGUCCCUUGGCUGGAAAAGGAAGAAGGAGU\
) } def
/len { sequence length } bind def

/coor [
[100.26138306 118.45216370]
[94.35987854 132.24246216]
[88.45837402 146.03274536]
[82.55686951 159.82304382]
[85.04377747 176.03253174]
[72.08188629 186.07850647]
[57.00528336 179.62652588]
[55.32347870 163.31384277]
[68.76657104 153.92153931]
[74.66807556 140.13124084]
[80.56958008 126.34095001]
[86.47108459 112.55065918]
[85.30582428 97.59598541]
[77.33946228 84.88626862]
[69.37309265 72.17654419]
[61.40672684 59.46682358]
[47.52164841 51.88294601]
[47.31823349 36.98973083]
[39.35186768 24.28001022]
[25.46679115 16.69613266]
[25.26337814 1.80291677]
[17.29701042 -10.90680408]
[3.41193318 -18.49068069]
[3.20852017 -33.38389587]
[-4.75784683 -46.09361649]
[-12.72421360 -58.80333710]
[-20.69058037 -71.51306152]
[-35.83440018 -75.16031647]
[-43.73237228 -88.16326904]
[-40.16194153 -102.57810974]
[-48.12831116 -115.28782654]
[-56.09467697 -127.99755096]
[-69.58492279 -129.51025391]
[-79.55710602 -138.42968750]
[-82.47261047 -151.28669739]
[-77.47373199 -163.27391052]
[-85.04096985 -176.22523499]
[-92.60821533 -189.17655945]
[-100.17546082 -202.12788391]
[-107.74269867 -215.07920837]
[-120.95381165 -225.70478821]
[-114.40068817 -241.34104919]
[-97.56140900 -239.37257385]
[-94.79137421 -222.64645386]
[-87.22413635 -209.69512939]
[-79.65689087 -196.74380493]
[-72.08964539 -183.79248047]
[-64.52240753 -170.84115601]
[-48.15531158 -167.34005737]
[-39.13442612 -152.84515381]
[-43.38495636 -135.96391296]
[-35.41859055 -123.25419617]
[-27.45222282 -110.54447174]
[-12.92253304 -107.47467041]
[-4.66244888 -94.69868469]
[-7.98086023 -79.47942352]
[-0.01449317 -66.76970673]
[7.95187378 -54.05998611]
[15.91824055 -41.35026550]
[29.23351097 -34.67547226]
[30.00673103 -18.87317085]
[37.97309875 -6.16345024]
[51.28836823 0.51134282]
[52.06158829 16.31364250]
[60.02795410 29.02336311]
[73.34322357 35.69815826]
[74.11644745 51.50045776]
[82.08280945 64.21017456]
[90.04917908 76.91989899]
[98.01554871 89.62961578]
[107.24437714 81.77967072]
[123.24205780 83.23632050]
[137.64399719 97.83877563]
[149.96832275 106.38925934]
[162.29266357 114.93974304]
[178.04170227 116.44915009]
[184.08819580 130.06123352]
[196.41253662 138.61172485]
[211.77000427 136.00675964]
[224.14683533 144.85372925]
[226.53562927 159.51078796]
[238.85995483 168.06126404]
[254.36560059 165.00338745]
[267.44528198 173.87455750]
[270.33905029 189.41165161]
[261.33010864 202.39680481]
[245.76327515 205.12615967]
[232.87408447 195.98042297]
[230.30947876 180.38560486]
[217.98513794 171.83511353]
[203.41946411 174.72935486]
[190.79902649 166.23350525]
[187.86204529 150.93606567]
[175.53771973 142.38557434]
[160.67019653 141.48776245]
[153.74217224 127.26407623]
[141.41784668 118.71359253]
[129.09350586 110.16310883]
[121.88547516 112.23537445]
[118.26673889 126.79232025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 70]
[14 69]
[15 68]
[16 67]
[18 65]
[19 64]
[21 62]
[22 61]
[24 59]
[25 58]
[26 57]
[27 56]
[30 53]
[31 52]
[32 51]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[73 98]
[74 97]
[75 96]
[77 94]
[78 93]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
