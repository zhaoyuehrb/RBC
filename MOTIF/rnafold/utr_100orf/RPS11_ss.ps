%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUUACGUCACUUCCUCUCCAGCCCCUGCGUAAUCGAUAAGGAAACCCGGACGCUGCUGCCCCUUUCUUUUUUUCAGGCGGCCGGGAAGAUGGCGGACAUUCAGACUGAGCGUGCCUACCAAAAGCAGCCGACCAUCUUUCAAAACAAGAAGAGGGUCCUGCUGGGAGAAACUGGCAAGGAGAAGCUCC\
) } def
/len { sequence length } bind def

/coor [
[139.47265625 530.71215820]
[138.00999451 515.78363037]
[136.54733276 500.85513306]
[135.08467102 485.92663574]
[133.62199402 470.99810791]
[132.15933228 456.06958008]
[130.69667053 441.14108276]
[127.62880707 437.46286011]
[126.84893799 431.81430054]
[129.43750000 425.70404053]
[128.46151733 410.73580933]
[127.48554993 395.76760864]
[126.50958252 380.79937744]
[117.96057892 368.60250854]
[124.78358459 354.32815552]
[123.80760956 339.35992432]
[115.25860596 327.16305542]
[122.08161163 312.88870239]
[121.10563660 297.92050171]
[120.12966919 282.95227051]
[116.55179596 276.47232056]
[119.26165009 267.73284912]
[118.52944183 252.75071716]
[117.79724121 237.76860046]
[117.06503296 222.78648376]
[116.33283234 207.80436707]
[115.11334991 192.85401917]
[113.40789032 177.95129395]
[111.70243073 163.04855347]
[109.99697113 148.14582825]
[98.14015961 138.95800781]
[83.28350067 141.02679443]
[68.42684937 143.09558105]
[53.57019806 145.16438293]
[48.10903549 148.93423462]
[42.41941452 149.31185913]
[38.19716644 147.05053711]
[23.28104973 148.63464355]
[8.36493111 150.21876526]
[2.78245378 164.46989441]
[-8.79100418 174.48556519]
[-23.69594574 177.96424866]
[-38.50732803 174.10658264]
[-49.82159805 163.79902649]
[-55.03882217 149.41017151]
[-52.96012497 134.24647522]
[-44.06316757 121.79244232]
[-30.39241028 114.90992737]
[-15.08929443 115.18048096]
[-1.67036068 122.54191589]
[6.78081656 135.30264282]
[21.69693565 133.71853638]
[36.61305237 132.13441467]
[51.50141144 130.30772400]
[66.35806274 128.23893738]
[81.21471405 126.17014313]
[96.07136536 124.10135651]
[79.93689728 110.91549683]
[80.52380371 91.47308350]
[69.78850555 80.99675751]
[59.05321121 70.52043152]
[48.31791687 60.04410553]
[37.58261871 49.56777954]
[26.84732437 39.09145355]
[13.05087948 45.41778946]
[-2.09949446 46.32917023]
[-16.55483437 41.70233536]
[-28.36017227 32.16302490]
[-35.91893768 19.00135803]
[-38.20886230 3.99733591]
[-34.92026138 -10.81986809]
[-26.49788475 -23.44634819]
[-14.08079243 -32.17448044]
[0.65170664 -35.82384872]
[15.70716286 -33.90091324]
[29.04944801 -26.66573334]
[38.87413025 -15.09680748]
[43.85250092 -0.75873691]
[43.31127548 14.40937138]
[37.32365036 28.35615540]
[48.05894470 38.83248138]
[58.79424286 49.30880737]
[69.52954102 59.78513336]
[80.26483154 70.26145935]
[91.00012970 80.73778534]
[110.04248047 80.07375336]
[122.90062714 95.35661316]
[118.61605072 115.80355072]
[127.51165771 103.72595978]
[136.40725708 91.64836884]
[145.30287170 79.57077789]
[154.19847107 67.49318695]
[163.09407043 55.41559219]
[171.98968506 43.33800125]
[180.88528442 31.26041031]
[189.78088379 19.18281937]
[198.57791138 7.03322840]
[207.27574158 -5.18755627]
[215.97358704 -17.40834045]
[223.11843872 -30.59738731]
[228.60397339 -44.55836868]
[226.44937134 -60.23217773]
[238.30509949 -69.24831390]
[243.79063416 -83.20929718]
[249.27615356 -97.17027283]
[254.76168823 -111.13125610]
[254.92655945 -128.08439636]
[271.26281738 -132.61906433]
[280.14257812 -118.17655945]
[268.72265625 -105.64572906]
[263.23715210 -91.68474579]
[257.75161743 -77.72377014]
[252.26608276 -63.76278687]
[254.81304932 -49.08756256]
[242.56495667 -39.07284164]
[237.07942200 -25.11186218]
[249.30021667 -16.41402245]
[260.69439697 -26.16966057]
[258.48745728 -41.43835068]
[264.90652466 -55.46686172]
[277.90332031 -63.77873993]
[293.33056641 -63.72170258]
[306.26553345 -55.31394196]
[312.58068848 -41.23834991]
[310.26089478 -25.98639297]
[300.04641724 -14.42491817]
[285.19662476 -10.24314880]
[270.45004272 -14.77547169]
[259.05584717 -5.01983356]
[246.51139832 -1.10149062]
[235.50270081 -2.91800714]
[228.19436646 -8.71050072]
[219.49653625 3.51028371]
[210.79869080 15.73106861]
[209.47950745 23.01466179]
[201.85847473 28.07842445]
[192.96287537 40.15601349]
[184.06727600 52.23360825]
[175.17166138 64.31119537]
[166.27606201 76.38878632]
[157.38046265 88.46637726]
[148.48484802 100.54397583]
[139.58924866 112.62156677]
[130.69364929 124.69915771]
[141.91911316 114.74984741]
[156.41343689 110.88791656]
[171.10115051 113.93281555]
[182.86572266 123.23844910]
[189.21089172 136.83030701]
[188.79031372 151.82441711]
[181.69323730 165.03923035]
[169.42555237 173.67079163]
[154.59025574 175.88758850]
[140.33518982 171.21925354]
[129.68507385 160.65635681]
[124.89970398 146.44036865]
[126.60516357 161.34309387]
[128.31062317 176.24583435]
[130.01608276 191.14855957]
[132.74681091 194.56866455]
[134.10134888 198.30509949]
[134.15025330 201.88349915]
[133.11169434 204.90173340]
[131.31494141 207.07215881]
[132.04714966 222.05427551]
[132.77935791 237.03640747]
[133.51156616 252.01852417]
[134.24377441 267.00064087]
[135.09788513 281.97628784]
[136.07385254 296.94451904]
[137.04981995 311.91271973]
[145.66864014 325.18023682]
[138.77583313 338.38397217]
[139.75180054 353.35217285]
[148.37060547 366.61968994]
[141.47779846 379.82342529]
[142.45376587 394.79162598]
[143.42973328 409.75985718]
[144.40571594 424.72805786]
[145.62518311 439.67840576]
[147.08786011 454.60693359]
[148.55052185 469.53543091]
[150.01318359 484.46395874]
[151.47584534 499.39248657]
[152.93850708 514.32098389]
[154.40116882 529.24951172]
[167.40467834 537.93530273]
[171.73318481 552.96185303]
[165.34289551 567.23413086]
[151.25111389 574.01324463]
[136.11154175 570.09820557]
[127.07263184 557.33758545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 186]
[2 185]
[3 184]
[4 183]
[5 182]
[6 181]
[7 180]
[10 179]
[11 178]
[12 177]
[13 176]
[15 174]
[16 173]
[18 171]
[19 170]
[20 169]
[22 168]
[23 167]
[24 166]
[25 165]
[26 164]
[27 159]
[28 158]
[29 157]
[30 156]
[31 57]
[32 56]
[33 55]
[34 54]
[37 53]
[38 52]
[39 51]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[88 144]
[89 143]
[90 142]
[91 141]
[92 140]
[93 139]
[94 138]
[95 137]
[96 136]
[97 134]
[98 133]
[99 132]
[100 116]
[101 115]
[103 113]
[104 112]
[105 111]
[106 110]
[117 129]
[118 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
