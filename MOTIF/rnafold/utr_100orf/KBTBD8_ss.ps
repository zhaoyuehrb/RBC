%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGAAAUGACAUUUCCUUUUUAAAUAGCUGGAGUCGGGGCCCCAUCGAGAAAUGGCCGCGUCGGCAGAUUUAAGUAAGUCUUCCCCAACACCGAAUGGGAUUCCAUCUUCAGACCCAGCCAGCGAUGCCAUGGACCCCUUCCAUGCUUGCA\
) } def
/len { sequence length } bind def

/coor [
[92.71649170 134.00289917]
[86.48526001 147.64738464]
[80.25403595 161.29185486]
[79.52450562 170.45898438]
[73.75402069 175.14910889]
[67.24576569 188.66363525]
[60.73750687 202.17817688]
[54.22925186 215.69270325]
[47.72099304 229.20722961]
[46.29621506 246.10121155]
[29.66804886 249.40882874]
[21.88655663 234.34613037]
[34.20646286 222.69897461]
[40.71471786 209.18444824]
[47.22297287 195.66990662]
[53.73123169 182.15538025]
[60.23948669 168.64085388]
[66.60955811 155.06063843]
[72.84078217 141.41615295]
[79.07200623 127.77167511]
[72.98065186 121.89067841]
[68.49115753 114.71188354]
[65.86967468 106.66088104]
[65.27162170 98.21499634]
[66.73245239 89.87493134]
[70.16556549 82.13513184]
[75.36743164 75.45446777]
[82.02964783 70.22898865]
[89.75724030 66.76850128]
[88.53459930 51.81840897]
[87.31196594 36.86832047]
[86.08932495 21.91823196]
[84.86668396 6.96814394]
[81.02820587 -1.38855481]
[83.77476501 -8.29885197]
[82.85734558 -23.27077103]
[81.93991852 -38.24268723]
[79.95674896 -53.11101151]
[76.91793060 -67.79997253]
[73.87911987 -82.48893738]
[70.84030914 -97.17790222]
[60.46770477 -109.12443542]
[65.46617889 -123.15527344]
[62.42736435 -137.84423828]
[59.38855362 -152.53320312]
[56.34973907 -167.22216797]
[53.31092453 -181.91111755]
[50.12244797 -196.56832886]
[46.78463364 -211.19224548]
[29.60643005 -211.92637634]
[13.35636902 -217.97738647]
[-0.34752178 -228.83901978]
[-10.11128616 -243.52151489]
[-14.90659142 -260.64138794]
[-14.17843342 -278.55157471]
[-7.90777731 -295.49996948]
[3.37781048 -309.80072021]
[-5.23975611 -322.07824707]
[-13.85732269 -334.35574341]
[-22.47488976 -346.63327026]
[-36.52347946 -356.12399292]
[-31.29271126 -372.25082397]
[-14.34808159 -371.68884277]
[-10.19736767 -355.25085449]
[-1.57980072 -342.97332764]
[7.03776598 -330.69580078]
[15.65533257 -318.41827393]
[29.81358147 -323.37246704]
[28.89615822 -338.34439087]
[27.97873306 -353.31631470]
[27.06130791 -368.28820801]
[26.14388275 -383.26013184]
[25.22645760 -398.23205566]
[15.72737217 -411.59991455]
[22.79981232 -426.39559937]
[39.16825867 -427.39859009]
[47.99425507 -413.57711792]
[40.19837570 -399.14947510]
[41.11580276 -384.17755127]
[42.03322601 -369.20565796]
[42.95064926 -354.23373413]
[43.86807632 -339.26181030]
[44.78549957 -324.28988647]
[58.98305511 -321.48709106]
[71.97856903 -315.31396484]
[82.99111938 -306.18746948]
[91.37031555 -294.70043945]
[96.63466644 -281.58343506]
[98.49911499 -267.65811157]
[96.89019775 -253.78588867]
[91.94802856 -240.81471252]
[84.01516724 -229.52706909]
[73.61319733 -220.59295654]
[61.40855026 -214.53005981]
[64.74636841 -199.90614319]
[69.32852936 -194.04956055]
[67.99988556 -184.94993591]
[71.03870392 -170.26097107]
[74.07751465 -155.57200623]
[77.11632538 -140.88305664]
[80.15514374 -126.19408417]
[90.31038666 -115.29820251]
[85.52926636 -100.21671295]
[88.56808472 -85.52774811]
[91.60689545 -70.83878326]
[94.64570618 -56.14982605]
[103.18450165 -68.48226166]
[117.60649872 -72.60608673]
[131.37416077 -66.65195465]
[138.24652100 -53.31889343]
[135.10833740 -38.65084076]
[123.38215637 -29.29688263]
[108.38349152 -29.49720764]
[96.91183472 -39.16011429]
[97.82926178 -24.18819427]
[98.74668884 -9.21627712]
[99.81677246 5.74550486]
[101.03941345 20.69559288]
[102.26205444 35.64568329]
[103.48469543 50.59577179]
[104.70732880 65.54586029]
[126.07141876 76.98852539]
[134.77201843 99.60838318]
[126.58306122 122.41846466]
[135.69424438 134.33427429]
[144.80541992 146.25007629]
[153.91659546 158.16587830]
[161.66369629 163.12074280]
[163.08914185 170.41896057]
[171.95535278 182.51814270]
[179.59977722 187.63000488]
[180.87603760 194.95578003]
[189.49360657 207.23330688]
[198.11117554 219.51081848]
[206.72874451 231.78834534]
[215.34631348 244.06587219]
[230.83709717 248.23898315]
[237.10038757 263.00891113]
[229.33149719 277.04544067]
[213.49008179 279.58093262]
[201.72828674 268.67037964]
[203.06878662 252.68344116]
[194.45121765 240.40591431]
[185.83364868 228.12838745]
[177.21607971 215.85087585]
[168.59851074 203.57334900]
[159.85617065 191.38436890]
[150.98995972 179.28518677]
[142.00079346 167.27705383]
[132.88961792 155.36125183]
[123.77843475 143.44544983]
[114.66725922 131.52964783]
[107.58664703 133.93655396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[29 121]
[30 120]
[31 119]
[32 118]
[33 117]
[35 116]
[36 115]
[37 114]
[38 106]
[39 105]
[40 104]
[41 103]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[48 95]
[49 94]
[57 67]
[58 66]
[59 65]
[60 64]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[124 152]
[125 151]
[126 150]
[127 149]
[129 148]
[130 147]
[132 146]
[133 145]
[134 144]
[135 143]
[136 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
