%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGGUUAACGGCAUGGAGAACAGUCACCCCCCCCACCACCACCACCAGCAGCCCCCGCCGCAGCCCGGCCCUUCGGGCGAGAGGAGGAACCACCAUUGGAGAAGUUACAAGU\
) } def
/len { sequence length } bind def

/coor [
[48.63138962 115.36220551]
[33.80038452 117.60749054]
[18.96937943 119.85276794]
[4.13837385 122.09805298]
[-10.69263077 124.34333038]
[-14.42276096 139.91732788]
[-23.79858589 152.85293579]
[-37.37328339 161.20396423]
[-53.07109070 163.72782898]
[-68.50469208 160.07040405]
[-81.33829498 150.81533813]
[-89.64112091 137.39115906]
[-104.40526581 140.04069519]
[-109.87127686 144.14024353]
[-115.70207977 144.67562866]
[-120.04647827 142.40864563]
[-134.93327332 144.24798584]
[-149.82008362 146.08731079]
[-153.19456482 160.86529541]
[-161.42250061 173.59623718]
[-173.51034546 182.74279785]
[-187.99844360 187.20051575]
[-203.13725281 186.43107605]
[-217.09870911 180.52738953]
[-228.19689941 170.20237732]
[-235.09167480 156.70281982]
[-236.95042419 141.65885925]
[-233.54872131 126.88712311]
[-225.29733276 114.17137146]
[-213.19264221 105.04708862]
[-198.69636536 100.61608887]
[-183.55899048 101.41342926]
[-169.60842896 107.34282684]
[-158.52929688 117.68827820]
[-151.65942383 131.20051575]
[-136.77261353 129.36117554]
[-121.88581848 127.52184296]
[-107.05480957 125.27655792]
[-92.29067230 122.62701416]
[-89.79663849 108.74678040]
[-82.68022156 96.53678131]
[-71.78615570 87.48717499]
[-58.42162704 82.71057129]
[-44.19947433 82.80525208]
[-30.84352684 87.78029633]
[-19.97966576 97.05201721]
[-12.93791199 109.51232910]
[1.89309287 107.26704407]
[16.72409821 105.02176666]
[31.55510330 102.77648163]
[46.38610840 100.53120422]
[50.03703308 80.54663849]
[60.86091232 63.35490036]
[77.30381012 51.42413712]
[97.00509644 46.46718597]
[117.13635254 49.19569778]
[134.80741882 59.21795273]
[146.04551697 49.28291702]
[151.26000977 34.34572601]
[165.92007446 31.71283913]
[177.15817261 21.77780151]
[175.29402161 5.03194857]
[183.65191650 -9.40758610]
[198.79803467 -16.00006104]
[214.73898315 -12.35084534]
[225.70152283 -22.58914185]
[236.66406250 -32.82743835]
[247.62660217 -43.06573868]
[258.58914185 -53.30403519]
[269.55166626 -63.54233170]
[273.81427002 -79.37781525]
[289.72705078 -83.34203339]
[300.92034912 -71.35694885]
[295.87942505 -55.75178146]
[279.78997803 -52.57979202]
[268.82742310 -42.34149551]
[257.86489868 -32.10319901]
[246.90235901 -21.86490059]
[235.93981934 -11.62660313]
[224.97727966 -1.38830602]
[227.83757019 11.72904110]
[223.77732849 24.63992310]
[213.76452637 33.90675735]
[200.36672974 37.00627899]
[187.09321594 33.01590729]
[175.85510254 42.95094299]
[171.44444275 57.17751312]
[155.98056030 60.52102280]
[144.74244690 70.45606232]
[151.96075439 86.77837372]
[153.42178345 104.56565094]
[148.96363831 121.84705353]
[161.67227173 129.81513977]
[174.38092041 137.78323364]
[190.77996826 137.83937073]
[198.69497681 152.20199585]
[189.98365784 166.09605408]
[173.60746765 165.22853088]
[166.41284180 150.49186707]
[153.70419312 142.52378845]
[140.99554443 134.55569458]
[135.63742065 140.05877686]
[129.54795837 144.73980713]
[122.85213470 148.50270081]
[115.68734741 151.27024841]
[108.20064545 152.98567200]
[100.54564667 153.61375427]
[92.87944794 153.14160156]
[85.35937500 151.57890320]
[78.13975525 148.95774841]
[71.36872864 145.33190918]
[65.18526459 140.77580261]
[59.71623611 135.38290405]
[55.07389450 129.26391602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[12 39]
[13 38]
[16 37]
[17 36]
[18 35]
[57 89]
[58 88]
[60 86]
[61 85]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
