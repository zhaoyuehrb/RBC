%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAAAUGUAGCGCCGCGGCGCGGGCCAGCAGCUCUGCGAGGGGCCGGAGCGCGGCGGAGCCAUGCAGUACCCGCACCCCGGGCCGGCGGCGGGCGCCGUGGGGGUGCCGCUGUACGCGCCCACGCCGCUGCUGCAACCCGCACACCCGACGCCCUUUUACA\
) } def
/len { sequence length } bind def

/coor [
[87.25344086 676.42651367]
[72.38742065 673.79895020]
[58.78207397 667.25701904]
[47.44700623 657.28613281]
[39.22335815 644.62615967]
[34.72137833 630.21667480]
[34.27514267 615.12683105]
[37.91776276 600.47644043]
[45.37893677 587.35266113]
[56.10499191 576.72937012]
[69.29998779 569.39483643]
[83.98476410 565.89343262]
[84.55930328 550.90447998]
[85.13384247 535.91546631]
[77.88970947 522.90118408]
[86.14991760 509.40747070]
[86.72446442 494.41848755]
[83.82476807 487.58221436]
[87.45629120 479.14868164]
[88.31784058 464.17343140]
[78.35865021 447.63095093]
[89.56080627 430.90847778]
[89.84812927 415.91122437]
[90.13545227 400.91400146]
[90.42277527 385.91674805]
[90.71009827 370.91949463]
[80.12459564 354.77059937]
[90.67801666 337.63134766]
[90.39069366 322.63409424]
[90.10337067 307.63684082]
[89.81604767 292.63958740]
[89.52872467 277.64233398]
[89.24140167 262.64511108]
[88.95407867 247.64784241]
[80.94466400 241.21131897]
[77.75740814 231.21163940]
[80.68478394 220.90376282]
[88.98616028 213.78504944]
[89.27348328 198.78779602]
[89.56080627 183.79054260]
[81.38777924 174.83312988]
[81.53260803 162.30677795]
[90.46450806 152.95954895]
[91.03904724 137.97055054]
[91.61358643 122.98155975]
[92.18813324 107.99256897]
[92.61907959 92.99876404]
[92.90640259 78.00151825]
[84.52612305 68.15669250]
[85.10100555 55.64271164]
[93.77502441 47.16950607]
[94.34956360 32.18051529]
[94.78051758 17.18670654]
[95.06784058 2.18945909]
[95.35516357 -12.80778885]
[95.64248657 -27.80503654]
[95.92980957 -42.80228424]
[96.21713257 -57.79953384]
[84.00990295 -67.19579315]
[79.72624969 -81.80755615]
[84.80781555 -95.97235870]
[97.10855865 -104.32878113]
[97.39588165 -119.32602692]
[97.68320465 -134.32327271]
[97.97052765 -149.32052612]
[98.25785065 -164.31777954]
[95.36917114 -170.34857178]
[95.91306305 -176.06459045]
[98.85440063 -179.88099670]
[99.71595001 -194.85623169]
[92.78405762 -209.07801819]
[101.23959351 -221.33987427]
[102.10114288 -236.31512451]
[102.96269226 -251.29035950]
[103.82424164 -266.26559448]
[104.68578339 -281.24084473]
[94.44866943 -292.98132324]
[95.53572845 -308.15606689]
[106.79158020 -317.84323120]
[107.65312958 -332.81848145]
[96.95233917 -344.44897461]
[97.69321442 -360.23590088]
[109.43620300 -370.81314087]
[125.21440887 -369.90539551]
[135.66688538 -358.05120850]
[134.59237671 -342.28350830]
[122.62836456 -331.95693970]
[121.76681519 -316.98168945]
[131.83744812 -306.06756592]
[131.17704773 -290.86828613]
[119.66102600 -280.37927246]
[118.79947662 -265.40405273]
[117.93792725 -250.42880249]
[117.07637787 -235.45356750]
[116.21482849 -220.47833252]
[123.20835114 -207.32766724]
[114.69118500 -193.99467468]
[113.82964325 -179.01943970]
[113.25509644 -164.03045654]
[112.96777344 -149.03320312]
[112.68045044 -134.03594971]
[112.39312744 -119.03870392]
[112.10580444 -104.04145813]
[124.07744598 -95.22001648]
[128.61273193 -80.87097168]
[123.77256012 -66.43399811]
[111.21437836 -57.51221085]
[110.92705536 -42.51496124]
[110.63973236 -27.51771355]
[110.35240936 -12.52046585]
[110.06508636 2.47678232]
[109.77776337 17.47402954]
[112.80787659 24.25351906]
[109.33855438 32.75505447]
[108.76401520 47.74404907]
[117.78314209 62.77486801]
[107.90365601 78.28884125]
[107.61633301 93.28608704]
[110.63426208 100.80413055]
[107.17712402 108.56710815]
[106.60258484 123.55610657]
[106.02803802 138.54508972]
[105.45349884 153.53408813]
[114.42561340 169.58988953]
[104.55805206 184.07786560]
[104.27072906 199.07511902]
[103.98340607 214.07237244]
[114.53682709 231.21163940]
[103.95132446 247.36051941]
[104.23864746 262.35778809]
[104.52597046 277.35501099]
[104.81329346 292.35226440]
[105.10061646 307.34951782]
[105.38793945 322.34677124]
[105.67526245 337.34402466]
[113.97663879 344.46273804]
[116.90402222 354.77059937]
[113.71675873 364.77029419]
[105.70735168 371.20681763]
[105.42002869 386.20407104]
[105.13270569 401.20132446]
[104.84538269 416.19854736]
[104.55805206 431.19580078]
[112.58067322 438.62725830]
[115.11108398 449.03970337]
[111.54314423 458.90997314]
[103.29307556 465.03500366]
[102.43153381 480.01022339]
[101.71345520 494.99304199]
[101.13891602 509.98202515]
[108.34194946 524.06842041]
[100.12284088 536.48999023]
[99.54830170 551.47900391]
[98.97375488 566.46801758]
[113.34741211 571.08325195]
[125.94224548 579.40625000]
[135.82362366 590.81945801]
[142.25828552 604.47589111]
[144.76873779 619.36212158]
[143.16870117 634.37353516]
[137.57688904 648.39617920]
[128.40826416 660.38946533]
[116.34319305 669.46337891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 154]
[13 153]
[14 152]
[16 150]
[17 149]
[19 148]
[20 147]
[22 143]
[23 142]
[24 141]
[25 140]
[26 139]
[28 135]
[29 134]
[30 133]
[31 132]
[32 131]
[33 130]
[34 129]
[38 127]
[39 126]
[40 125]
[43 123]
[44 122]
[45 121]
[46 120]
[47 118]
[48 117]
[51 115]
[52 114]
[53 112]
[54 111]
[55 110]
[56 109]
[57 108]
[58 107]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[69 98]
[70 97]
[72 95]
[73 94]
[74 93]
[75 92]
[76 91]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
