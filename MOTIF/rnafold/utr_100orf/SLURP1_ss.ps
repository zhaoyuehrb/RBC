%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCAUCACUUCUGAGCACGGAGCAAUGGCCUCUCGCUGGGCUGUGCAGCUGCUGCUCGUGGCAGCCUGGAGCAUGGGCUGUGGUGAGGCCCUCAAGUGCUACACCUGCAAGGAGCCCAUGACCA\
) } def
/len { sequence length } bind def

/coor [
[90.73792267 460.46255493]
[82.98638153 446.88140869]
[85.82900238 431.50436401]
[97.92358398 421.59197998]
[97.92358398 406.59197998]
[97.92358398 391.59197998]
[97.92358398 376.59197998]
[85.54858398 365.27548218]
[85.12673187 348.17523193]
[97.40185547 335.78424072]
[97.03083801 320.78881836]
[96.65982819 305.79339600]
[96.28881073 290.79800415]
[95.91779327 275.80258179]
[87.34032440 267.17779541]
[86.97071075 254.61711121]
[95.55819702 244.89933777]
[95.55819702 229.89933777]
[95.55819702 214.89933777]
[92.37789154 208.13792419]
[95.74830627 199.52947998]
[96.11932373 184.53405762]
[95.93379974 169.53521729]
[95.19199371 154.55355835]
[94.45018768 139.57191467]
[93.70838165 124.59027100]
[77.79911804 112.30393219]
[75.81339264 92.30104065]
[88.99657440 77.12664032]
[86.77841187 62.29155350]
[84.56024933 47.45647049]
[82.34209442 32.62138367]
[80.12393188 17.78629875]
[77.90576935 2.95121264]
[75.50429535 -11.85530376]
[72.91987610 -26.63098526]
[70.33545685 -41.40666580]
[67.75103760 -56.18235016]
[63.14468384 -64.19773865]
[65.29016113 -71.35512543]
[63.07200241 -86.19020844]
[53.37903214 -98.69448853]
[59.14919281 -112.42600250]
[56.93103027 -127.26108551]
[54.71287155 -142.09617615]
[52.49470901 -156.93125916]
[50.27655029 -171.76634216]
[48.05838776 -186.60142517]
[32.65393448 -192.46711731]
[22.34389305 -205.20808411]
[19.84921837 -221.31239319]
[25.75307465 -236.40138245]
[38.36796570 -246.42016602]
[35.78354645 -261.19583130]
[33.19912720 -275.97152710]
[30.61470795 -290.74719238]
[28.03028870 -305.52288818]
[25.44586945 -320.29858398]
[16.76095200 -334.85906982]
[28.34821129 -347.23535156]
[43.44847488 -339.52700806]
[40.22154999 -322.88299561]
[42.80596924 -308.10729980]
[45.39038849 -293.33163452]
[47.97480774 -278.55593872]
[50.55922699 -263.78027344]
[53.14364624 -249.00457764]
[66.30392456 -245.14547729]
[76.55133057 -235.93128967]
[81.83283997 -223.13088989]
[81.05701447 -209.23898315]
[74.31909943 -196.98992920]
[62.89347458 -188.81959534]
[65.11163330 -173.98451233]
[67.32979584 -159.14941406]
[69.54795837 -144.31433105]
[71.76612091 -129.47924805]
[73.98427582 -114.64416504]
[83.51858521 -103.20098877]
[77.90708923 -88.40837097]
[80.12524414 -73.57328796]
[82.52671814 -58.76676941]
[85.11113739 -43.99108505]
[87.69555664 -29.21540451]
[90.27997589 -14.43972301]
[94.57768250 -8.32735920]
[92.74085236 0.73305219]
[94.95901489 15.56813812]
[97.17717743 30.40322304]
[99.39533997 45.23830795]
[101.61349487 60.07339478]
[103.83165741 74.90847778]
[112.80467224 78.08410645]
[119.97702789 84.34164429]
[124.34013367 92.80112457]
[125.28041840 102.27294159]
[122.66566467 111.42513275]
[116.86356354 118.97067261]
[108.69002533 123.84846497]
[109.43183136 138.83010864]
[110.17363739 153.81175232]
[110.91544342 168.79341125]
[113.87502289 173.35458374]
[114.63544464 178.11477661]
[113.50562286 182.17614746]
[111.11473083 184.90507507]
[110.74371338 199.90049744]
[110.55819702 214.89933777]
[110.55819702 229.89933777]
[110.55819702 244.89933777]
[120.14612579 260.56192017]
[110.91320038 275.43157959]
[111.28421783 290.42697144]
[111.65523529 305.42239380]
[112.02625275 320.41781616]
[112.39727020 335.41320801]
[123.20185089 343.56259155]
[127.24774933 356.27221680]
[123.26083374 368.79574585]
[112.92358398 376.59197998]
[112.92358398 391.59197998]
[112.92358398 406.59197998]
[112.92358398 421.59197998]
[125.01816559 431.50436401]
[127.86078644 446.88140869]
[120.10924530 460.46255493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[17 110]
[18 109]
[19 108]
[21 107]
[22 106]
[23 102]
[24 101]
[25 100]
[26 99]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 85]
[36 84]
[37 83]
[38 82]
[40 81]
[41 80]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
