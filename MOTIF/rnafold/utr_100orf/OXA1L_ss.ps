%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:18:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUAACGUGGCUUUACAGAUUUUUACCCACUUCAAAUAUGGCCGCCAAGCUCCGUUCUCUUUUACCGCCUGAUCUGCGGCUACAAUUCUGGCUUCAUG\
) } def
/len { sequence length } bind def

/coor [
[48.88642502 95.56357574]
[34.29274750 92.09593201]
[19.69906807 88.62828827]
[5.10538960 85.16064453]
[-6.50901079 98.14471436]
[-22.98284531 103.53377533]
[-39.85370255 99.96061707]
[-52.59786606 88.47326660]
[-57.84326935 72.22969818]
[-72.62429810 69.67604828]
[-87.40532684 67.12239075]
[-102.18636322 64.56874084]
[-116.96739197 62.01508713]
[-131.74842834 59.46143341]
[-141.02684021 72.72509766]
[-155.08934021 80.62394714]
[-171.12847900 81.63859558]
[-185.96710205 75.61830139]
[-196.68762207 63.80089188]
[-201.20564270 48.55864334]
[-216.05894470 46.46591568]
[-224.49226379 59.18762589]
[-237.61454773 66.98303223]
[-252.82037354 68.30435181]
[-267.09057617 62.88922882]
[-277.59185791 51.81284714]
[-282.23913574 37.27442932]
[-280.10968018 22.16058731]
[-271.62634277 9.47218418]
[-258.47344971 1.72851384]
[-243.26255798 0.46708667]
[-229.01376343 5.93836021]
[-218.55619812 17.05600929]
[-213.96621704 31.61261559]
[-199.11291504 33.70534515]
[-191.92509460 21.73211098]
[-180.66157532 13.40296555]
[-167.02337646 10.01728058]
[-153.08610535 12.12471962]
[-140.98408508 19.43631554]
[-132.58352661 30.86357117]
[-129.19476318 44.68040466]
[-114.41373444 47.23405838]
[-99.63270569 49.78771210]
[-84.85167694 52.34136581]
[-70.07064819 54.89501572]
[-55.28961563 57.44866943]
[-48.16703796 46.78207016]
[-37.46564865 39.62667465]
[-24.79440498 37.10171890]
[-12.07513618 39.62694931]
[-1.25105548 46.85337067]
[6.01010942 57.71094894]
[8.57303429 70.56696320]
[23.16671181 74.03460693]
[37.76039124 77.50225067]
[52.35406876 80.96990204]
[58.47446823 69.86846161]
[67.13001251 60.60655594]
[77.79227448 53.74963379]
[89.81032562 49.71630478]
[102.45045471 48.75280762]
[114.94098663 50.91796112]
[126.51937103 56.07958603]
[136.47872925 63.92256546]
[144.21105957 73.96807861]
[149.24430847 85.60284424]
[151.27116394 98.11656189]
[150.16790771 110.74526215]
[164.21844482 115.99715424]
[178.26898193 121.24905396]
[193.90466309 118.83331299]
[203.11730957 130.53701782]
[217.16783142 135.78890991]
[231.41073608 129.48196411]
[245.58515930 135.00828552]
[251.51010132 148.62557983]
[265.56063843 153.87747192]
[279.83560181 147.09506226]
[294.69720459 152.47174072]
[301.32830811 166.81761169]
[295.79479980 181.62152100]
[281.37960815 188.10058594]
[266.63504028 182.41087341]
[260.30874634 167.92800903]
[246.25820923 162.67611694]
[232.85395813 169.06842041]
[218.52989197 163.94239807]
[211.91593933 149.83944702]
[197.86540222 144.58755493]
[183.23471069 147.37893677]
[173.01708984 135.29959106]
[158.96655273 130.04769897]
[144.91601562 124.79579926]
[134.05767822 138.37126160]
[119.28939819 147.54154968]
[102.30661011 151.25387573]
[85.05901337 149.08203125]
[69.52670288 141.27539062]
[57.49285126 128.73014832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[20 35]
[21 34]
[69 94]
[70 93]
[71 92]
[73 90]
[74 89]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
