%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGUGGCAGGUUCCUGCGGCGGCUGCUGGCGGAGGAGAGCCGGCGCUCCACCCCCGUGGGGCGCCUCUUGCUUCCCGUGCUCCUGGGAUUCCGCCUUG\
) } def
/len { sequence length } bind def

/coor [
[17.58478165 226.36557007]
[3.73251414 229.41291809]
[-10.29435062 227.52404785]
[-22.79392815 220.94891357]
[-33.96189117 230.96272278]
[-45.12985229 240.97654724]
[-50.23917389 255.95004272]
[-64.88034821 258.68594360]
[-76.04830933 268.69976807]
[-87.21627045 278.71359253]
[-98.38423157 288.72741699]
[-102.96714783 304.47317505]
[-118.95707703 308.11380005]
[-129.90495300 295.90414429]
[-124.54853821 280.40444946]
[-108.39805603 277.55944824]
[-97.23009491 267.54565430]
[-86.06213379 257.53182983]
[-74.89417267 247.51799011]
[-70.58365631 233.26075745]
[-55.14367294 229.80859375]
[-43.97571182 219.79476929]
[-32.80775070 209.78094482]
[-38.28639984 194.99838257]
[-37.70742035 179.20555115]
[-31.12923622 164.79415894]
[-19.52103233 153.95787048]
[-4.62005424 148.35839844]
[11.32834721 148.87071228]
[25.90904808 155.44648743]
[36.76018143 145.09019470]
[47.61130905 134.73388672]
[58.46244049 124.37758636]
[69.31357574 114.02128601]
[80.16470337 103.66498566]
[81.09725189 88.69400787]
[71.61520386 77.07115173]
[56.10032654 71.75883484]
[53.20943832 55.61650467]
[65.91643524 45.25000381]
[81.14944458 51.32350159]
[83.23806000 67.58910370]
[92.72010803 79.21195984]
[107.45963287 76.42874146]
[112.05049133 62.14854431]
[116.64134979 47.86834717]
[121.23220825 33.58815384]
[125.82306671 19.30795479]
[130.41392517 5.02775908]
[135.00479126 -9.25243759]
[139.59564209 -23.53263474]
[144.18650818 -37.81283188]
[148.77735901 -52.09302902]
[144.79087830 -68.00025940]
[156.76029968 -79.21030426]
[172.37251282 -74.19122314]
[175.56700134 -58.10622406]
[163.05755615 -47.50216675]
[158.46670532 -33.22197342]
[153.87583923 -18.94177628]
[149.28498840 -4.66157866]
[144.69412231 9.61861801]
[140.10327148 23.89881516]
[135.51240540 38.17901230]
[130.92155457 52.45920944]
[126.33068848 66.73940277]
[121.73983002 81.01959991]
[127.80175018 67.29906464]
[140.99398804 60.16011047]
[155.79582214 62.59027863]
[166.01292419 73.57258606]
[167.36958313 88.51110840]
[159.29808044 101.15431976]
[145.17620850 106.21124268]
[130.91270447 101.56487274]
[144.60955811 107.68013000]
[158.30641174 113.79537964]
[172.00326538 119.91063690]
[185.70010376 126.02589417]
[200.36911011 120.14407349]
[214.86769104 126.43428802]
[220.59408569 141.16465759]
[214.15093994 155.59591675]
[199.36085510 161.16625977]
[184.99851990 154.57089233]
[179.58485413 139.72273254]
[165.88800049 133.60748291]
[152.19116211 127.49223328]
[138.49430847 121.37697601]
[124.79745483 115.26172638]
[105.07579041 122.66587830]
[90.52100372 114.51612091]
[79.66987610 124.87242126]
[68.81874084 135.22871399]
[57.96760941 145.58502197]
[47.11648178 155.94131470]
[36.26535034 166.29762268]
[41.81706619 179.51243591]
[42.49377823 193.80001831]
[38.23383331 207.42308044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[8 19]
[9 18]
[10 17]
[11 16]
[30 97]
[31 96]
[32 95]
[33 94]
[34 93]
[35 92]
[36 43]
[37 42]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
