%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCGCGGCGGGCUCCCUCGGGGUCCCAGCUGGCCCGCACUCGGCGGCCGCGGCGCGAUGGAGGCGCCGGCCGAGCUACUGGCCGCGCUGCCUGCGCUGGCCACCGCGCUGGCCCUUCUGCUCGCCUGGCUACUGGUGCGGCGUGGGGCGGCCGCGA\
) } def
/len { sequence length } bind def

/coor [
[28.85838890 174.31747437]
[17.07863426 183.60389709]
[5.29888058 192.89030457]
[-6.48087311 202.17671204]
[-18.16889191 211.57832336]
[-29.76404953 221.09420776]
[-41.35920715 230.61010742]
[-46.03937149 238.51623535]
[-53.27671432 240.19631958]
[-65.05646515 249.48272705]
[-76.83621979 258.76913452]
[-82.88361359 273.38897705]
[-97.66867065 275.19210815]
[-109.44842529 284.47851562]
[-121.22817993 293.76492310]
[-133.00793457 303.05133057]
[-144.41403198 312.79306030]
[-155.42886353 322.97506714]
[-166.44369507 333.15707397]
[-173.97047424 348.34866333]
[-190.65197754 345.32150269]
[-192.36100769 328.45388794]
[-176.62571716 322.14224243]
[-165.61087036 311.96023560]
[-154.59603882 301.77822876]
[-154.37692261 298.93405151]
[-152.98835754 296.00836182]
[-150.39456177 293.45816040]
[-146.72978210 291.74444580]
[-142.29434204 291.27160645]
[-130.51458740 281.98516846]
[-118.73483276 272.69876099]
[-106.95508575 263.41235352]
[-101.75025940 249.45675659]
[-86.12263489 246.98937988]
[-74.34288025 237.70297241]
[-62.56312180 228.41656494]
[-50.87510300 219.01495361]
[-39.27994919 209.49905396]
[-27.68479156 199.98315430]
[-24.49271965 193.27401733]
[-15.76728249 190.39695740]
[-3.98752856 181.11054993]
[7.79222536 171.82414246]
[19.57197952 162.53771973]
[31.07315636 152.90844727]
[42.28578186 142.94467163]
[53.49840546 132.98088074]
[64.71102905 123.01708984]
[75.92365265 113.05330658]
[87.13628387 103.08952332]
[86.24861908 94.78729248]
[90.72373199 86.73963928]
[88.96067047 71.84361267]
[87.19761658 56.94758224]
[85.43455505 42.05155563]
[83.67149353 27.15552902]
[81.90843201 12.25950241]
[80.14537048 -2.63652420]
[76.45560455 -8.22350121]
[76.21713257 -13.96701241]
[78.61737823 -18.15046883]
[77.44049072 -33.10422897]
[68.64429474 -46.25479889]
[75.35917664 -59.54990005]
[74.18228912 -74.50366211]
[73.00540161 -89.45742035]
[71.82851410 -104.41117859]
[70.65162659 -119.36493683]
[66.84149170 -127.72518158]
[69.60137939 -134.62335205]
[68.71831512 -149.59733582]
[67.83525848 -164.57131958]
[66.95219421 -179.54530334]
[66.06912994 -194.51928711]
[54.09029770 -204.82865906]
[52.99313354 -220.59481812]
[63.42857361 -232.46398926]
[79.20545197 -233.39439392]
[90.96362305 -222.83406067]
[91.72718048 -207.04821777]
[81.04311371 -195.40235901]
[81.92617798 -180.42837524]
[82.80924225 -165.45439148]
[83.69229889 -150.48040771]
[84.57536316 -135.50642395]
[85.60538483 -120.54182434]
[86.78227234 -105.58806610]
[87.95915985 -90.63430786]
[89.13604736 -75.68054199]
[90.31293488 -60.72678375]
[99.02495575 -48.64580917]
[92.39424896 -34.28111649]
[93.57113647 -19.32735634]
[95.04139709 -4.39958525]
[96.80445862 10.49644184]
[98.56752014 25.39246941]
[100.33058167 40.28849411]
[102.09364319 55.18452072]
[103.85670471 70.08055115]
[105.61975861 84.97657776]
[115.47299194 96.28647614]
[129.98698425 100.07385254]
[144.50096130 103.86122894]
[153.64808655 103.00045013]
[159.26130676 107.86806488]
[173.69813538 111.93966675]
[188.13496399 116.01127625]
[202.57179260 120.08288574]
[217.00862122 124.15448761]
[231.44544983 128.22608948]
[245.88227844 132.29769897]
[260.31909180 136.36930847]
[273.99145508 128.90577698]
[288.57446289 133.24061584]
[295.60552979 146.32112122]
[310.04235840 150.39271545]
[321.06985474 139.79357910]
[335.82458496 136.16119385]
[350.32009888 140.37385559]
[360.69134521 151.20404053]
[364.22534180 165.67390442]
[378.66217041 169.74549866]
[393.09899902 173.81710815]
[407.74273682 167.26422119]
[421.92950439 174.75521851]
[424.77642822 190.54364014]
[414.09960938 202.51797485]
[398.08935547 201.49253845]
[389.02737427 188.25393677]
[374.59054565 184.18232727]
[360.15371704 180.11073303]
[349.58004761 190.60180664]
[335.07833862 194.41709900]
[320.51776123 190.43510437]
[309.83520508 179.62864685]
[305.97076416 164.82954407]
[291.53393555 160.75794983]
[278.70440674 168.23716736]
[264.00540161 164.31364441]
[256.24749756 150.80613708]
[241.81066895 146.73452759]
[227.37384033 142.66291809]
[212.93701172 138.59132385]
[198.50018311 134.51971436]
[184.06335449 130.44810486]
[169.62652588 126.37649536]
[155.18969727 122.30489349]
[140.71359253 118.37521362]
[126.19960022 114.58783722]
[111.68561554 110.80046844]
[97.10006714 114.30214691]
[85.88744354 124.26593018]
[74.67481995 134.22972107]
[63.46219254 144.19351196]
[52.24956894 154.15728760]
[41.03694153 164.12107849]
[39.36558914 169.17579651]
[36.21604538 172.70170593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 40]
[6 39]
[7 38]
[9 37]
[10 36]
[11 35]
[13 33]
[14 32]
[15 31]
[16 30]
[17 25]
[18 24]
[19 23]
[46 157]
[47 156]
[48 155]
[49 154]
[50 153]
[51 152]
[53 101]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[62 94]
[63 93]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[102 151]
[103 150]
[104 149]
[106 148]
[107 147]
[108 146]
[109 145]
[110 144]
[111 143]
[112 142]
[113 141]
[116 138]
[117 137]
[122 132]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
