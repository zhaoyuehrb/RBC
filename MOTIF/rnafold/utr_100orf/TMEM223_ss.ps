%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCGGAAGUCGGCUGGCCAUGGCGGCGCCUUGGAGGCGAUGGCCCACGGGGCUGCUAGCCGUGCUGCGGCCCCUGCUCACCUGCCGGCCCCUGCAAGGCACGACGCUGCAACGGGAUG\
) } def
/len { sequence length } bind def

/coor [
[105.25271606 296.43161011]
[105.00948334 280.62918091]
[116.07131958 269.34152222]
[115.68190765 254.34658813]
[115.29249573 239.35163879]
[114.90308380 224.35668945]
[98.12602997 214.57315063]
[90.42839050 196.58892822]
[94.99709320 177.42251587]
[110.19587708 164.66322327]
[108.25407410 149.78944397]
[106.31227112 134.91566467]
[104.37046814 120.04187775]
[91.06781006 113.11085510]
[77.76514435 120.04187775]
[64.46247864 126.97290802]
[51.15981293 133.90393066]
[47.95761108 149.21014404]
[35.63405228 158.83634949]
[20.00794411 158.23735046]
[8.45745850 147.69599915]
[6.43638182 132.18957520]
[14.89900398 119.03974152]
[29.84953308 114.45545197]
[44.22878647 120.60127258]
[57.53145218 113.67024231]
[70.83411407 106.73921204]
[84.13677979 99.80818939]
[93.35805511 87.97737885]
[96.83132935 73.38504028]
[100.30459595 58.79269791]
[103.77787018 44.20035934]
[107.25114441 29.60801888]
[110.72441864 15.01567936]
[106.39284515 -0.20102368]
[116.86688232 -10.79081917]
[120.34015656 -25.38315964]
[123.81343079 -39.97549820]
[122.31255341 -44.34742737]
[122.35626221 -48.52993774]
[123.67818451 -52.03944778]
[125.87683105 -54.53721237]
[128.47810364 -55.86193466]
[133.44541931 -70.01558685]
[138.41273499 -84.16923523]
[143.38003540 -98.32288361]
[135.16749573 -109.72451782]
[134.43614197 -123.59497833]
[141.24382019 -135.51611328]
[153.27467346 -141.78527832]
[154.82968140 -156.70446777]
[156.38470459 -171.62364197]
[157.93971252 -186.54283142]
[159.49473572 -201.46200562]
[161.04974365 -216.38117981]
[162.60476685 -231.30036926]
[164.15977478 -246.21954346]
[161.91915894 -255.20281982]
[165.95373535 -261.50405884]
[167.89553833 -276.37783813]
[169.83734131 -291.25161743]
[165.89231873 -307.74020386]
[180.64440918 -316.09555054]
[192.75701904 -304.23297119]
[184.71112061 -289.30981445]
[182.76931763 -274.43603516]
[180.82751465 -259.56225586]
[179.07896423 -244.66453552]
[177.52394104 -229.74534607]
[175.96893311 -214.82617188]
[174.41390991 -199.90698242]
[172.85890198 -184.98780823]
[171.30387878 -170.06863403]
[169.74887085 -155.14944458]
[168.19384766 -140.23027039]
[171.83128357 -138.19589233]
[175.06047058 -135.56111145]
[188.36312866 -142.49214172]
[192.87048340 -157.64006042]
[206.80844116 -165.09049988]
[221.90785217 -160.42324829]
[229.21051025 -146.40730286]
[224.38388062 -131.35807800]
[210.29151917 -124.20401001]
[195.29415894 -129.18948364]
[181.99150085 -122.25845337]
[176.77165222 -102.23123169]
[157.53369141 -93.35556793]
[152.56637573 -79.20191956]
[147.59907532 -65.04827118]
[142.63175964 -50.89462280]
[138.40576172 -36.50222778]
[134.93249512 -21.90988731]
[131.45922852 -7.31754732]
[136.03923035 6.85541439]
[125.31675720 18.48895073]
[121.84348297 33.08129120]
[118.37020874 47.67362976]
[114.89694214 62.26597214]
[111.42366791 76.85831451]
[107.95039368 91.45065308]
[119.03613281 99.36286926]
[119.24425507 118.10007477]
[121.18605804 132.97386169]
[123.12786102 147.84764099]
[125.06966400 162.72142029]
[135.48945618 165.84834290]
[144.20558167 172.29354858]
[150.20533752 181.27571106]
[152.80265808 191.72070312]
[151.71649170 202.39004517]
[147.10093689 212.02774048]
[139.52406311 219.50810242]
[129.89802551 223.96728516]
[130.28744507 238.96223450]
[130.67684937 253.95716858]
[131.06626892 268.95211792]
[142.69905090 279.65042114]
[143.27635193 295.44415283]
[132.45567322 306.96319580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[10 106]
[11 105]
[12 104]
[13 103]
[14 28]
[15 27]
[16 26]
[17 25]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[36 94]
[37 93]
[38 92]
[43 91]
[44 90]
[45 89]
[46 88]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[59 67]
[60 66]
[61 65]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
