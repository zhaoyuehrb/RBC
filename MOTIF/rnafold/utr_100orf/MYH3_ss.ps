%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUCGCUUGUGGGCGGAGGUCUGGGAUCUCCUGGCUGUUGCUGUCUUCUGCUCUCAUCCUGCAGGUGGGACUCUCAGCUGACACCAUGAGUAGUGACACUGAAAUGGAAGUGUUCGGCAUAGCUGCUCCUUUCCUCCGGAAGUCAGAAAAGGAGAGGAUCGAGGCUCAGAACCAGCCCUUUGAUG\
) } def
/len { sequence length } bind def

/coor [
[97.59339142 362.71182251]
[105.03617096 349.33782959]
[117.84797668 340.96429443]
[116.35446167 326.03881836]
[114.86094666 311.11337280]
[113.36742401 296.18789673]
[102.34281158 289.49682617]
[97.11231995 277.49621582]
[99.79393005 264.48400879]
[109.62696838 255.26275635]
[108.38173676 240.31452942]
[99.61458588 228.27349854]
[106.17955780 213.87864685]
[104.93432617 198.93041992]
[103.68909454 183.98219299]
[102.44387054 169.03398132]
[101.19863892 154.08575439]
[87.32855225 148.37431335]
[75.91841125 158.11128235]
[64.50827789 167.84826660]
[53.09813690 177.58525085]
[41.68800354 187.32221985]
[30.27786446 197.05920410]
[18.86772919 206.79618835]
[10.74415684 221.67718506]
[-5.80410910 217.99055481]
[-6.84256887 201.06843567]
[9.13074780 195.38604736]
[20.54088593 185.64906311]
[31.95102119 175.91209412]
[43.36116028 166.17510986]
[54.77129364 156.43812561]
[66.18143463 146.70115662]
[77.59156799 136.96417236]
[64.28473663 102.76057434]
[81.70893860 78.25153351]
[75.42621613 64.63069153]
[69.14348602 51.00985336]
[62.86075974 37.38900757]
[56.57803345 23.76816750]
[50.29530716 10.14732361]
[43.84698105 3.65029812]
[44.02345657 -3.75252938]
[37.96799469 -17.47591782]
[31.91253471 -31.19930649]
[25.85707474 -44.92269516]
[21.38154602 -44.47305679]
[16.77354813 -44.98977661]
[12.24503613 -46.50660706]
[8.01574707 -49.01025009]
[4.30267906 -52.43874741]
[1.30926585 -56.68217468]
[-0.78523594 -61.58578491]
[-9.84230232 -73.54277039]
[-18.89936829 -85.49976349]
[-28.05549622 -97.38106537]
[-37.31005478 -109.18585968]
[-46.56460953 -120.99065399]
[-55.81916809 -132.79544067]
[-65.07372284 -144.60023499]
[-80.51639557 -146.64024353]
[-89.73367310 -158.74382019]
[-87.69367218 -173.45347595]
[-96.94823456 -185.25827026]
[-106.30058289 -196.98573303]
[-115.75006866 -208.63508606]
[-125.19956207 -220.28442383]
[-139.90216064 -226.12771606]
[-141.91094971 -240.88623047]
[-151.36044312 -252.53556824]
[-160.80993652 -264.18490601]
[-170.25942993 -275.83425903]
[-184.93325806 -284.32629395]
[-180.83522034 -300.77749634]
[-163.89247131 -301.39376831]
[-158.61007690 -285.28375244]
[-149.16059875 -273.63439941]
[-139.71110535 -261.98507690]
[-130.26161194 -250.33572388]
[-116.23490143 -245.32566833]
[-113.55022430 -229.73391724]
[-104.10073090 -218.08456421]
[-94.65123749 -206.43522644]
[-87.98316193 -203.21502686]
[-85.14344025 -194.51281738]
[-75.88887787 -182.70802307]
[-61.11747742 -181.17793274]
[-51.56387329 -169.33802795]
[-53.26892853 -153.85479736]
[-44.01437378 -142.05000305]
[-34.75981522 -130.24520874]
[-25.50525856 -118.44041443]
[-16.25070190 -106.63562012]
[-9.63706970 -103.30502319]
[-6.94238043 -94.55683136]
[2.11468554 -82.59983826]
[11.17175198 -70.64285278]
[26.08428574 -72.26036072]
[32.36701202 -85.88121033]
[38.64973831 -99.50205231]
[44.93246460 -113.12289429]
[51.21519089 -126.74373627]
[57.49791718 -140.36457825]
[49.80153275 -153.83845520]
[51.52823639 -169.25915527]
[62.01407242 -180.69711304]
[77.22702026 -183.75419617]
[91.31739807 -177.25489807]
[98.86716461 -163.69831848]
[96.97327423 -148.29725647]
[86.36397552 -136.97372437]
[71.11875916 -134.08184814]
[64.83603668 -120.46100616]
[58.55330658 -106.84016418]
[52.27058029 -93.21932220]
[45.98785400 -79.59848022]
[39.70512772 -65.97763824]
[39.58046341 -50.97815704]
[45.63592529 -37.25476837]
[51.69138336 -23.53137779]
[57.74684525 -9.80799007]
[63.91615295 3.86459780]
[70.19887543 17.48543930]
[76.48160553 31.10628319]
[82.76432800 44.72712708]
[89.04705811 58.34796906]
[95.32978058 71.96881104]
[117.42951965 71.56266022]
[136.51127625 88.46568298]
[139.66137695 117.18904114]
[154.54496765 119.05419922]
[169.42854309 120.91934967]
[184.31213379 122.78450775]
[199.19572449 124.64966583]
[214.07931519 126.51481628]
[228.96290588 128.37997437]
[243.84649658 130.24513245]
[258.73007202 132.11029053]
[266.21789551 118.88149261]
[278.20126343 109.52909851]
[292.85281372 105.47926331]
[307.93823242 107.34955597]
[321.15716553 114.85478210]
[330.49380493 126.85044098]
[334.52435303 141.50727844]
[332.63421631 156.59025574]
[325.11160278 169.79928589]
[313.10366821 179.12013245]
[298.44152832 183.13140869]
[283.36108398 181.22142029]
[270.16192627 173.68145752]
[260.85690308 161.66127014]
[256.86492920 146.99386597]
[241.98133850 145.12872314]
[227.09774780 143.26356506]
[212.21415710 141.39840698]
[197.33056641 139.53324890]
[182.44697571 137.66809082]
[167.56340027 135.80293274]
[152.67980957 133.93778992]
[137.79621887 132.07263184]
[132.38388062 137.26460266]
[145.60459900 144.35069275]
[142.95072937 159.11405945]
[128.08984375 161.15219116]
[121.55920410 147.64854431]
[116.14686584 152.84051514]
[117.39208984 167.78874207]
[118.63732147 182.73696899]
[119.88255310 197.68519592]
[121.12777710 212.63342285]
[129.98399353 225.74363708]
[123.32996368 239.06929016]
[124.57518768 254.01751709]
[138.13011169 265.06140137]
[139.48672485 282.15444946]
[128.29289246 294.69439697]
[129.78640747 309.61984253]
[131.27992249 324.54531860]
[132.77343750 339.47076416]
[146.99040222 345.13967896]
[156.93562317 356.77374268]
[160.32374573 371.69952393]
[156.37622070 386.48721313]
[146.00015259 397.73867798]
[131.57987976 402.86843872]
[116.42909241 400.69772339]
[104.02931213 391.72531128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 180]
[4 179]
[5 178]
[6 177]
[10 174]
[11 173]
[13 171]
[14 170]
[15 169]
[16 168]
[17 167]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[36 127]
[37 126]
[38 125]
[39 124]
[40 123]
[41 122]
[43 121]
[44 120]
[45 119]
[46 118]
[53 97]
[54 96]
[55 95]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[63 86]
[64 85]
[65 83]
[66 82]
[67 81]
[69 79]
[70 78]
[71 77]
[72 76]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[130 161]
[131 160]
[132 159]
[133 158]
[134 157]
[135 156]
[136 155]
[137 154]
[138 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
