%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCGCCACCGCCGUGCCCUGCCGCCCUCCCUGCCCGCUGGUCAAGACCACGCCUGGGAGGAUGUACCAGAGCCUGGCGCUGGCCGCGAGCCCCCGCCAGGCCGCCUACGCCGACUCGGGCUCCUUCCUGCACGCUCCGGGCGCCGGCUCUCCGAUGUUUG\
) } def
/len { sequence length } bind def

/coor [
[-132.09416199 182.82783508]
[-139.06524658 169.54612732]
[-140.13638306 154.58442688]
[-135.12838745 140.44511414]
[-124.87888336 129.49305725]
[-111.09905243 123.55937958]
[-125.84831238 120.82821655]
[-140.59757996 118.09705353]
[-155.34683228 115.36589050]
[-170.32511902 120.46115112]
[-181.43084717 110.53583527]
[-196.18011475 107.80467224]
[-210.92938232 105.07350159]
[-225.67863464 102.34233856]
[-240.42790222 99.61117554]
[-255.40618896 104.70644379]
[-266.51193237 94.78112030]
[-281.26116943 92.04995728]
[-296.23947144 97.14522552]
[-307.34518433 87.21990967]
[-322.09445190 84.48873901]
[-336.84371948 81.75757599]
[-355.47433472 89.37306976]
[-369.68063354 76.29669189]
[-384.52416992 74.13596344]
[-399.29498291 79.80466461]
[-410.77496338 70.31471252]
[-425.61849976 68.15397644]
[-440.46206665 65.99324036]
[-455.30563354 63.83250809]
[-470.14920044 61.67177582]
[-484.99273682 59.51103973]
[-493.87661743 70.08529663]
[-506.72778320 74.83960724]
[-520.14074707 72.62850952]
[-530.61743164 64.13735962]
[-535.47949219 51.67504120]
[-550.27868652 49.22863770]
[-559.30493164 50.92062759]
[-565.33831787 46.58983994]
[-580.08758545 43.85867691]
[-594.83685303 41.12751007]
[-609.58612061 38.39634705]
[-624.85461426 44.38001633]
[-637.50036621 33.93885422]
[-634.51446533 17.81383133]
[-618.96856689 12.59298992]
[-606.85498047 23.64708519]
[-592.10571289 26.37824821]
[-577.35644531 29.10941315]
[-562.60717773 31.84057617]
[-547.83227539 34.42948151]
[-533.03308105 36.87588501]
[-521.74523926 24.98717880]
[-505.43499756 22.12352371]
[-490.47561646 29.60434723]
[-482.83200073 44.66748428]
[-467.98846436 46.82821655]
[-453.14489746 48.98894882]
[-438.30133057 51.14968491]
[-423.45779419 53.31041718]
[-408.61422729 55.47115326]
[-394.90515137 49.64789581]
[-382.36343384 59.29240036]
[-367.51989746 61.45313644]
[-359.86276245 54.59894180]
[-349.47561646 53.08470917]
[-339.78192139 57.65509415]
[-334.11254883 67.00831604]
[-319.36331177 69.73947906]
[-304.61404419 72.47064209]
[-290.69073486 67.18003082]
[-278.53002930 77.30069733]
[-263.78076172 80.03186035]
[-249.85743713 74.74124908]
[-237.69674683 84.86191559]
[-222.94747925 87.59307861]
[-208.19821167 90.32424164]
[-193.44895935 93.05540466]
[-178.69969177 95.78656769]
[-164.77638245 90.49595642]
[-152.61567688 100.61662292]
[-137.86640930 103.34778595]
[-123.11714935 106.07894897]
[-108.36788940 108.81011963]
[-93.39295197 109.67694092]
[-78.42707062 108.66584778]
[-64.43322754 98.11013031]
[-47.96276474 106.29485321]
[-33.01914597 104.99551392]
[-18.07552910 103.69618225]
[-3.13191032 102.39684296]
[11.81170750 101.09751129]
[21.16540527 89.56304169]
[36.30184937 88.03245544]
[48.33683777 97.92167664]
[63.28045654 96.62234497]
[78.22407532 95.32300568]
[93.16769409 94.02366638]
[88.57061768 74.77547455]
[100.05832672 53.69112778]
[112.54039764 45.37260437]
[125.02247620 37.05408096]
[126.56366730 21.49263000]
[137.78306580 10.59955597]
[153.38322449 9.51823521]
[165.99821472 18.75923538]
[169.67161560 33.95923615]
[162.66899109 47.94126511]
[148.29673767 54.10343170]
[133.34100342 49.53615570]
[120.85892487 57.85467911]
[108.37685394 66.17320251]
[109.60005188 73.57278442]
[124.39924622 71.12660980]
[126.84519196 85.92584229]
[112.04645538 88.37194061]
[113.26966095 95.77152252]
[127.76476288 99.63053131]
[142.25987244 103.48954010]
[156.79148865 107.20868683]
[171.35827637 110.78762054]
[181.03070068 98.98055267]
[194.87178040 92.54724884]
[210.13333130 92.76504517]
[223.78520203 99.59069824]
[233.11676025 111.66897583]
[236.27523804 126.60171509]
[232.63352966 141.42401123]
[222.91467285 153.19290161]
[209.04837036 159.57165527]
[193.78779602 159.29376221]
[180.16291809 152.41439819]
[170.87898254 140.29946899]
[167.77932739 125.35440826]
[153.21255493 121.77546692]
[145.93165588 123.24044037]
[138.40086365 117.98464203]
[123.90575409 114.12563324]
[109.41064453 110.26662445]
[94.46703339 108.96728516]
[79.52341461 110.26662445]
[64.57979584 111.56595612]
[49.63617706 112.86529541]
[39.48860931 124.68327332]
[24.31514549 125.78810883]
[13.11104393 116.04113007]
[-1.83257449 117.34046173]
[-16.77619362 118.63980103]
[-31.71981049 119.93913269]
[-46.66342926 121.23847198]
[-55.56810760 130.61279297]
[-68.07362366 131.36308289]
[-77.41597748 123.63172913]
[-92.38185883 124.64282990]
[-79.38105774 132.12475586]
[-70.46266937 144.18553162]
[-67.11832428 158.80795288]
[-69.90737152 173.54638672]
[-78.36334229 185.93576050]
[-91.07193756 193.90391541]
[-105.90760803 196.11816406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 85]
[7 84]
[8 83]
[9 82]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[17 74]
[18 73]
[20 71]
[21 70]
[22 69]
[24 65]
[25 64]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[37 53]
[38 52]
[40 51]
[41 50]
[42 49]
[43 48]
[86 155]
[87 154]
[89 151]
[90 150]
[91 149]
[92 148]
[93 147]
[96 144]
[97 143]
[98 142]
[99 141]
[101 113]
[102 112]
[103 111]
[118 140]
[119 139]
[120 138]
[121 136]
[122 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
