%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUCACUUCCGCCCGCGAGCCACUUCCUUUCCUUUCAGCGGAGCGCGGCGGCAAGAUGGCAGUGCAAAUAUCCAAGAAGAGGAAGUUUGUCGCUGAUGGCAUCUUCAAAGCUGAACUGAAUGAGUUUCUUACUCGGGAGCUGGCUGAAGAUGGCU\
) } def
/len { sequence length } bind def

/coor [
[84.89781952 125.59917450]
[77.84659576 120.57962036]
[72.43544006 113.63528442]
[69.18355560 105.29486847]
[68.44161224 96.22492981]
[53.93994141 100.05918121]
[39.43826675 103.89343262]
[24.97542953 107.87165833]
[10.55285549 111.99347687]
[-3.86971831 116.11529541]
[-18.25060272 120.38028717]
[-32.58837509 124.78804016]
[-46.92614746 129.19580078]
[-61.26391602 133.60354614]
[-75.60169220 138.01130676]
[-82.93292999 143.55340576]
[-90.26850891 142.36109924]
[-104.69108582 146.48292542]
[-119.11365509 150.60473633]
[-126.82452393 164.13914490]
[-141.50978088 168.11380005]
[-154.36524963 160.67926025]
[-168.78782654 164.80108643]
[-179.93064880 176.03265381]
[-194.29409790 172.09049988]
[-208.71667480 176.21231079]
[-211.25459290 191.26295471]
[-220.07843018 203.71697998]
[-233.43618774 211.10163879]
[-248.67565918 211.95069885]
[-262.77105713 206.09558105]
[-272.92373657 194.69883728]
[-277.11785889 180.02326965]
[-274.52069092 164.98274231]
[-265.64785767 152.56355286]
[-252.26113892 145.23156738]
[-237.01843262 144.44252014]
[-222.94619751 150.35308838]
[-212.83848572 161.78973389]
[-198.41590881 157.66792297]
[-188.30468750 146.73117065]
[-172.90963745 150.37850952]
[-158.48707581 146.25668335]
[-151.50154114 133.15180969]
[-136.93371582 128.76623535]
[-123.23547363 136.18215942]
[-108.81290436 132.06034851]
[-94.39032745 127.93852997]
[-80.00944519 123.67353058]
[-65.67166901 119.26577759]
[-51.33390045 114.85802460]
[-36.99612808 110.45027161]
[-22.65835571 106.04251862]
[-17.15890694 101.04367828]
[-7.99153471 101.69271851]
[6.43103886 97.57089996]
[20.85361290 93.44908905]
[26.45136261 88.56057739]
[35.60401917 89.39175415]
[50.10569000 85.55750275]
[64.60736084 81.72325897]
[73.87619781 69.92966461]
[74.17443085 54.93263245]
[74.47266388 39.93559647]
[74.77089691 24.93856239]
[75.06912994 9.94152737]
[75.21825409 -5.05773115]
[75.21825409 -20.05773163]
[75.21825409 -35.05773163]
[75.21825409 -50.05773163]
[75.21825409 -65.05773163]
[67.48094940 -78.85790253]
[75.21825409 -91.58517456]
[75.21825409 -106.58517456]
[75.21825409 -121.58517456]
[63.12366867 -131.49754333]
[60.28104782 -146.87458801]
[68.03259277 -160.45573425]
[82.71825409 -165.82838440]
[97.40391541 -160.45573425]
[105.15545654 -146.87458801]
[102.31283569 -131.49754333]
[90.21825409 -121.58517456]
[90.21825409 -106.58517456]
[90.21825409 -91.58517456]
[97.95555115 -78.85790253]
[90.21825409 -65.05773163]
[90.21825409 -50.05773163]
[90.21825409 -35.05773163]
[90.21825409 -20.05773163]
[90.21825409 -5.05773115]
[93.38038635 1.66783619]
[90.06616211 10.23976040]
[89.76792908 25.23679543]
[89.46969604 40.23382950]
[89.17146301 55.23086548]
[88.87322998 70.22789764]
[101.46827698 69.17922974]
[113.09482574 73.08874512]
[121.94226837 81.03787231]
[126.75675964 91.50544739]
[127.01528931 102.65196991]
[140.95753479 108.18492889]
[154.89979553 113.71788788]
[168.84204102 119.25084686]
[182.78428650 124.78380585]
[196.72654724 130.31677246]
[210.66879272 135.84973145]
[224.61105347 141.38269043]
[244.35736084 137.50964355]
[255.77647400 153.07443237]
[269.92767334 158.04872131]
[284.07885742 163.02301025]
[298.23007202 167.99729919]
[307.81106567 162.70463562]
[318.50134277 163.57199097]
[326.75738525 170.06782532]
[329.97747803 179.83561707]
[343.91973877 185.36857605]
[357.86199951 190.90153503]
[371.80426025 196.43449402]
[387.48529053 194.33319092]
[396.46105957 206.21951294]
[410.40332031 211.75247192]
[424.34558105 217.28543091]
[438.28781128 222.81838989]
[455.24029541 223.04090881]
[459.71939087 239.39248657]
[445.24679565 248.22309875]
[432.75485229 236.76065063]
[418.81262207 231.22769165]
[404.87036133 225.69473267]
[390.92810059 220.16177368]
[376.24429321 222.65882874]
[366.27130127 210.37675476]
[352.32904053 204.84379578]
[338.38677979 199.31083679]
[324.44451904 193.77787781]
[305.61404419 198.02900696]
[293.25576782 182.14849854]
[279.10458374 177.17420959]
[264.95336914 172.19992065]
[250.80218506 167.22563171]
[241.96252441 172.48294067]
[231.47007751 171.96664429]
[222.83438110 165.60589600]
[219.07809448 155.32493591]
[205.13583374 149.79197693]
[191.19358826 144.25901794]
[177.25132751 138.72605896]
[163.30908203 133.19309998]
[149.36683655 127.66014099]
[135.42457581 122.12718201]
[121.48233032 116.59422302]
[116.15853119 122.45005798]
[109.25396729 126.61283875]
[101.30307770 128.66160583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 61]
[6 60]
[7 59]
[8 57]
[9 56]
[10 55]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[17 48]
[18 47]
[19 46]
[22 43]
[23 42]
[25 40]
[26 39]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[73 85]
[74 84]
[75 83]
[102 154]
[103 153]
[104 152]
[105 151]
[106 150]
[107 149]
[108 148]
[109 147]
[111 143]
[112 142]
[113 141]
[114 140]
[118 138]
[119 137]
[120 136]
[121 135]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
