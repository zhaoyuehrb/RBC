%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAGCAGGCAAGUUGGGUAACGGCUCUCGGCAAAGUUCGAGAAGUGCCUAUGGCCAUGAGUGAGCUGGGCACUCGGAAGCCCAGCGAUGGCACUGUUUCUCAUCUGCUCAAUGUGGUGGAGAGUGAGCUUCAGGCAGGGAGGGAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[379.17984009 284.08999634]
[380.26156616 275.06503296]
[367.70404053 266.86080933]
[355.14654541 258.65658569]
[342.58905029 250.45236206]
[330.03155518 242.24813843]
[317.47406006 234.04391479]
[304.91656494 225.83969116]
[292.35906982 217.63546753]
[279.71746826 209.56144714]
[266.99310303 201.61849976]
[249.49488831 206.83869934]
[233.43083191 197.50672913]
[229.15361023 179.10157776]
[216.11186218 171.69125366]
[203.07012939 164.28092957]
[190.02838135 156.87060547]
[176.98663330 149.46028137]
[163.94490051 142.04995728]
[150.90315247 134.63961792]
[134.92724609 139.80210876]
[119.84951782 131.67991638]
[115.19102478 114.84956360]
[101.99891663 107.71035004]
[99.12181091 115.05608368]
[91.96887970 120.69435883]
[81.51897430 122.75505829]
[66.59899902 124.30242920]
[51.67902374 125.84980011]
[36.75904846 127.39717102]
[21.83907509 128.94453430]
[6.91910076 130.49191284]
[-2.84796071 142.91688538]
[-18.54981804 144.71333313]
[-30.87083626 134.81546021]
[-32.50117493 119.09548187]
[-22.47358322 106.87979889]
[-6.73725319 105.41574860]
[5.37173080 115.57192993]
[20.29170609 114.02455902]
[35.21168137 112.47719574]
[50.13165283 110.92982483]
[65.05162811 109.38245392]
[79.97160339 107.83508301]
[85.85475922 94.03694916]
[76.64157104 82.19984436]
[67.42837524 70.36273193]
[58.21518707 58.52562714]
[49.00199509 46.68851852]
[39.78880692 34.85140991]
[30.57561493 23.01430321]
[24.51147652 20.13314819]
[21.33518028 15.32476139]
[21.23840523 10.49227619]
[12.52225399 -1.71545422]
[3.80610132 -13.92318535]
[-5.03573990 -26.04019165]
[-14.00232697 -38.06517792]
[-29.27098656 -44.04849243]
[-31.45574379 -60.30145645]
[-18.30910873 -70.10441589]
[-3.35521054 -63.37292480]
[-1.97733915 -47.03176498]
[6.98924732 -35.00677872]
[13.55039310 -31.50246811]
[16.01383209 -22.63933754]
[24.72998428 -10.43160629]
[33.44613647 1.77612424]
[42.41272354 13.80111217]
[51.62591553 25.63821983]
[60.83910370 37.47532654]
[70.05229187 49.31243515]
[79.26548767 61.14954376]
[88.47867584 72.98664856]
[97.69186401 84.82376099]
[109.13813019 94.51824951]
[122.33023834 101.65745544]
[134.74870300 96.34564972]
[147.76490784 99.13540649]
[156.65129089 108.78337860]
[158.31347656 121.59787750]
[171.35522461 129.00820923]
[184.39697266 136.41853333]
[197.43870544 143.82885742]
[210.48045349 151.23918152]
[223.52220154 158.64950562]
[236.56393433 166.05982971]
[247.26298523 160.70625305]
[259.09582520 161.20698547]
[269.09906006 167.31991577]
[274.82406616 177.41206360]
[274.93603516 188.89413452]
[287.66040039 196.83708191]
[296.65914917 198.74658203]
[300.56329346 205.07797241]
[313.12078857 213.28219604]
[325.67828369 221.48641968]
[338.23577881 229.69062805]
[350.79327393 237.89485168]
[363.35076904 246.09907532]
[375.90826416 254.30329895]
[388.46578979 262.50753784]
[409.32739258 256.33535767]
[427.78842163 267.30786133]
[432.21954346 288.03540039]
[445.55636597 294.90045166]
[458.89318848 301.76550293]
[468.01889038 302.92535400]
[472.43255615 308.91271973]
[485.62466431 316.05194092]
[498.81677246 323.19113159]
[513.79327393 318.90844727]
[527.07025146 326.33654785]
[531.06085205 340.64077759]
[544.25292969 347.77999878]
[557.44506836 354.91918945]
[570.04919434 351.99255371]
[580.90771484 358.26049805]
[584.44232178 369.87048340]
[597.48406982 377.28079224]
[610.52581787 384.69113159]
[623.56750488 392.10144043]
[636.60925293 399.51177979]
[651.77807617 395.07513428]
[665.60089111 402.73709106]
[669.87689209 417.95190430]
[662.06921387 431.69296265]
[646.80999756 435.80786133]
[633.15228271 427.85537720]
[629.19897461 412.55352783]
[616.15722656 405.14318848]
[603.11547852 397.73287964]
[590.07373047 390.32254028]
[577.03198242 382.91220093]
[559.54412842 384.00656128]
[550.30584717 368.11129761]
[537.11376953 360.97210693]
[523.92163086 353.83288574]
[509.76397705 358.31576538]
[496.28359985 351.26351929]
[491.67755127 336.38323975]
[478.48544312 329.24404907]
[465.29333496 322.10482788]
[452.02816772 315.10232544]
[438.69131470 308.23727417]
[425.35449219 301.37222290]
[418.38064575 306.71286011]
[409.99771118 309.47912598]
[401.12762451 309.33657837]
[392.75585938 306.27233887]
[385.82202148 300.59979248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 102]
[3 101]
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 93]
[11 92]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[23 77]
[24 76]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[54 68]
[55 67]
[56 66]
[57 64]
[58 63]
[105 146]
[106 145]
[107 144]
[109 143]
[110 142]
[111 141]
[114 138]
[115 137]
[116 136]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
