%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAACCCGGGUUGAGGCAGGAGGCGGCUAGACCGGUGGCGGCGGCAUCUGGAGUAGCACUGAGAUCUUCCGGUGGCGGGAACUGCAGUCAUGGAUCAUAUUACGGUACCCAAGGUAGAAAACGUGAAAUUGGUGGAUCGUUAUGUGAGUAAGAAACCAGCUAAUGGGAUUCUUUAUCUUACUGCAACCC\
) } def
/len { sequence length } bind def

/coor [
[93.05240631 358.39273071]
[88.92730713 373.25839233]
[77.40487671 383.51690674]
[62.16188049 385.89483643]
[48.06230545 379.63342285]
[39.60526657 366.73062134]
[39.48938370 351.30368042]
[47.75162888 338.27529907]
[61.75555420 331.80276489]
[63.72363663 316.93243408]
[65.69171906 302.06210327]
[67.65980530 287.19180298]
[69.62789154 272.32147217]
[71.59597778 257.45114136]
[65.59545135 243.81871033]
[75.07652283 231.15301514]
[77.04460907 216.28268433]
[71.04409027 202.65026855]
[80.52516174 189.98457336]
[82.49324799 175.11424255]
[84.46132660 160.24391174]
[86.42941284 145.37358093]
[75.46461487 141.50111389]
[65.59180450 134.97512817]
[57.45327377 126.10108185]
[51.60638809 115.33971405]
[48.48615646 103.28352356]
[33.70930481 105.86124420]
[18.93245316 108.43896484]
[4.15560198 111.01668549]
[-4.93969250 123.66237640]
[-19.96224213 126.06604767]
[-31.96191978 117.31714630]
[-46.73877335 119.89486694]
[-61.51562500 122.47258759]
[-76.29247284 125.05030823]
[-85.38777161 137.69599915]
[-100.41031647 140.09967041]
[-112.40999603 131.35076904]
[-127.18685150 133.92848206]
[-139.41467285 144.85607910]
[-154.90547180 139.47395325]
[-157.72363281 123.31876373]
[-144.97007751 113.00959015]
[-129.76457214 119.15163422]
[-114.98771667 116.57391357]
[-106.65901947 104.27886200]
[-91.70990753 101.45417786]
[-78.87019348 110.27345276]
[-64.09334564 107.69573212]
[-49.31649399 105.11801147]
[-34.53964233 102.54029083]
[-26.21093941 90.24523926]
[-11.26183033 87.42056274]
[1.57788062 96.23983765]
[16.35473251 93.66211700]
[31.13158417 91.08438873]
[45.90843582 88.50666809]
[50.98718262 74.39262390]
[41.24077225 62.99053955]
[31.49436378 51.58845901]
[21.74795341 40.18637466]
[11.90810204 28.86483383]
[1.97547626 17.62459564]
[-8.92286491 17.58087158]
[-17.80982780 11.66013241]
[-21.87674332 2.02437830]
[-19.99969673 -8.04116821]
[-29.55725479 -19.60201073]
[-39.11481094 -31.16285515]
[-48.67237091 -42.72369766]
[-58.22992706 -54.28454208]
[-73.77907562 -59.49567795]
[-76.77505493 -75.61883545]
[-64.13585663 -86.06788635]
[-48.86360550 -80.09375000]
[-46.66908264 -63.84209824]
[-37.11152649 -52.28125381]
[-27.55396843 -40.72041321]
[-17.99641037 -29.15956879]
[-8.43885422 -17.59872627]
[10.12288570 -12.21653175]
[13.21571350 7.69196939]
[23.14834023 18.93220711]
[29.94502258 21.86765289]
[33.15003586 30.43996620]
[42.89644623 41.84204865]
[52.64285660 53.24413300]
[62.38926697 64.64621735]
[71.28665161 57.83886719]
[81.33067322 53.18362045]
[92.01699829 50.85094452]
[102.82243347 50.89630890]
[113.23049164 53.26014709]
[122.75605774 57.77342987]
[130.96803284 64.16839600]
[142.44989014 54.51609039]
[153.93174744 44.86378098]
[165.41358948 35.21146774]
[176.89544678 25.55916023]
[188.37728882 15.90684891]
[193.96186829 1.10404420]
[208.68290710 -1.16322541]
[220.16476440 -10.81553555]
[231.64660645 -20.46784592]
[243.12846375 -30.12015533]
[254.61030579 -39.77246475]
[255.79431152 -57.21760178]
[268.96411133 -68.19939423]
[285.66714478 -66.30474854]
[296.98867798 -76.14459991]
[308.31024170 -85.98445129]
[319.63177490 -95.82430267]
[314.17761230 -109.96743011]
[313.89273071 -125.12310791]
[318.81152344 -139.46122742]
[328.33999634 -151.25036621]
[341.32754517 -159.06695557]
[356.20590210 -161.96708679]
[371.17837524 -159.60055542]
[384.43701172 -152.25314331]
[394.38073730 -140.81207275]
[399.80880737 -126.65892029]
[400.06576538 -111.50274658]
[395.12057495 -97.17372131]
[385.57040405 -85.40215302]
[372.56845093 -77.60951996]
[357.68478394 -74.73680878]
[342.71670532 -77.13092804]
[329.47161865 -84.50276184]
[318.15008545 -74.66291046]
[306.82855225 -64.82305908]
[295.50698853 -54.98320770]
[296.41259766 -42.11991882]
[289.63842773 -30.91928673]
[277.46890259 -25.59188652]
[264.26263428 -28.29061508]
[252.78077698 -18.63830376]
[241.29891968 -8.98599434]
[229.81706238 0.66631579]
[218.33522034 10.31862545]
[213.57189941 24.43103218]
[198.02960205 27.38870049]
[186.54776001 37.04101181]
[175.06590271 46.69332123]
[163.58404541 56.34563065]
[152.10220337 65.99794006]
[140.62034607 75.65025330]
[146.39717102 90.50131989]
[146.92127991 106.42774963]
[142.13334656 121.62648010]
[154.22494507 130.50303650]
[166.31654358 139.37957764]
[178.40814209 148.25613403]
[190.49974060 157.13269043]
[208.83793640 158.71456909]
[215.27969360 175.03071594]
[227.51565552 183.70718384]
[239.75161743 192.38366699]
[255.74482727 191.12002563]
[266.59872437 202.93411255]
[263.98712158 218.76316833]
[249.91340637 226.46450806]
[235.17375183 220.13029480]
[231.07514954 204.61962891]
[218.83918762 195.94314575]
[206.60322571 187.26667786]
[194.61857605 188.98518372]
[184.35044861 181.84222412]
[181.62319946 169.22428894]
[169.53158569 160.34773254]
[157.43998718 151.47119141]
[145.34838867 142.59463501]
[133.25679016 133.71807861]
[123.86643219 140.90618896]
[112.98799133 145.54377747]
[101.29974365 147.34167480]
[99.33165741 162.21199036]
[97.36357117 177.08232117]
[95.39548492 191.95265198]
[101.25524139 206.64869690]
[91.91493988 218.25077820]
[89.94685364 233.12109375]
[95.80660248 247.81715393]
[86.46630096 259.41921997]
[84.49822235 274.28955078]
[82.53013611 289.15988159]
[80.56204987 304.03021240]
[78.59396362 318.90054321]
[76.62587738 333.77084351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 190]
[10 189]
[11 188]
[12 187]
[13 186]
[14 185]
[16 183]
[17 182]
[19 180]
[20 179]
[21 178]
[22 177]
[27 58]
[28 57]
[29 56]
[30 55]
[33 52]
[34 51]
[35 50]
[36 49]
[39 46]
[40 45]
[59 89]
[60 88]
[61 87]
[62 86]
[63 84]
[64 83]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[96 148]
[97 147]
[98 146]
[99 145]
[100 144]
[101 143]
[103 141]
[104 140]
[105 139]
[106 138]
[107 137]
[110 133]
[111 132]
[112 131]
[113 130]
[151 174]
[152 173]
[153 172]
[154 171]
[155 170]
[157 167]
[158 166]
[159 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
