%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGGACGAGAGGUCAGGGUAGGUUUUUGAAGAUGGCGGCCCUCAAGGCUCUGGUGUCCGGCUGUGGGCGGCUUCUCCGUGGGCUACUAGCGGGCCCGGCAGCGACCAGCUGGUCUCGGCUUCCAGCUCGCG\
) } def
/len { sequence length } bind def

/coor [
[225.62719727 192.68617249]
[217.99272156 205.59797668]
[204.66525269 212.48118591]
[189.71731567 211.23246765]
[177.71662903 202.23338318]
[172.33027649 188.23384094]
[175.20420837 173.51173401]
[185.46020508 162.56575012]
[199.96478271 158.74072266]
[186.58375549 151.96221924]
[173.20272827 145.18371582]
[159.82170105 138.40521240]
[146.44067383 131.62670898]
[133.05964661 124.84819794]
[119.67861938 118.06969452]
[106.29759216 111.29118347]
[75.72589874 132.46244812]
[60.87405777 134.56552124]
[46.02222061 136.66859436]
[31.17038155 138.77166748]
[16.31854439 140.87474060]
[7.90820646 150.73411560]
[-4.57042265 152.13594055]
[-14.31345654 144.86830139]
[-29.21051407 146.62261963]
[-44.10757065 148.37695312]
[-50.78054810 162.28648376]
[-63.92624283 170.36077881]
[-79.34991455 170.02336121]
[-92.12992859 161.38189697]
[-98.18822479 147.19386292]
[-95.59162140 131.98658752]
[-85.16869354 120.61266327]
[-70.24535370 116.70147705]
[-55.58358002 121.50106049]
[-45.86190033 133.47990417]
[-30.96484375 131.72557068]
[-16.06778717 129.97123718]
[-2.64509916 118.72855377]
[14.21547127 126.02290344]
[29.06730843 123.91983032]
[43.91914749 121.81675720]
[58.77098465 119.71368408]
[73.62282562 117.61061096]
[77.47387695 111.17481995]
[64.60242462 103.47251129]
[72.30493164 90.60117340]
[85.17599487 98.30324554]
[89.02704620 91.86746216]
[83.86004639 77.78548431]
[78.69303894 63.70350266]
[73.52603912 49.62152863]
[68.19432068 35.60108566]
[62.69861984 21.64410591]
[57.20291901 7.68712664]
[51.70721817 -6.26985264]
[37.62833786 -13.96170807]
[35.00607681 -29.78900337]
[45.85201263 -41.61039352]
[61.84606934 -40.35752106]
[70.71897888 -26.99147797]
[65.66419983 -11.76555347]
[71.15989685 2.19142604]
[76.65560150 16.14840508]
[82.15129852 30.10538483]
[87.57970428 35.22433853]
[87.60801697 44.45452499]
[92.77501678 58.53650284]
[97.94202423 72.61847687]
[103.10902405 86.70045471]
[113.07609558 97.91016388]
[126.45712280 104.68866730]
[139.83815002 111.46717072]
[153.21917725 118.24567413]
[166.60020447 125.02417755]
[179.98123169 131.80268860]
[193.36225891 138.58119202]
[206.74328613 145.35969543]
[220.76371765 150.69140625]
[235.26766968 154.51705933]
[249.77162170 158.34269714]
[264.27557373 162.16833496]
[278.77951050 165.99397278]
[293.28344727 169.81962585]
[307.78741455 173.64526367]
[322.29135132 177.47090149]
[334.30780029 167.83186340]
[349.51812744 167.12503052]
[362.07952881 175.41207886]
[367.29013062 189.34002686]
[381.79406738 193.16566467]
[396.29800415 196.99131775]
[410.84582520 200.64666748]
[425.43545532 204.13125610]
[440.02508545 207.61582947]
[455.24514771 203.29605103]
[465.82684326 213.77830505]
[480.41647339 217.26287842]
[495.00610352 220.74746704]
[509.59576416 224.23204041]
[524.18542480 227.71662903]
[535.88482666 217.52334595]
[551.34429932 216.18710327]
[564.61926270 224.22171021]
[570.60522461 238.53768921]
[567.00054932 253.63026428]
[555.19122314 263.69601440]
[539.71820068 264.86447144]
[526.53118896 256.68634033]
[520.70080566 242.30625916]
[506.11117554 238.82168579]
[491.52154541 235.33711243]
[476.93188477 231.85252380]
[462.34225464 228.36795044]
[448.16574097 232.93696594]
[436.54052734 222.20547485]
[421.95086670 218.72090149]
[407.36123657 215.23631287]
[400.05639648 216.75640869]
[392.47238159 211.49525452]
[377.96841431 207.66961670]
[363.46447754 203.84397888]
[352.06225586 213.39002991]
[337.04769897 214.40350342]
[324.16476440 206.28662109]
[318.46569824 191.97485352]
[303.96176147 188.14920044]
[289.45782471 184.32356262]
[274.95385742 180.49792480]
[260.44992065 176.67228699]
[245.94598389 172.84663391]
[231.44203186 169.02099609]
[216.93807983 165.19535828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[16 71]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[24 38]
[25 37]
[26 36]
[49 70]
[50 69]
[51 68]
[52 67]
[53 65]
[54 64]
[55 63]
[56 62]
[79 133]
[80 132]
[81 131]
[82 130]
[83 129]
[84 128]
[85 127]
[86 126]
[90 122]
[91 121]
[92 120]
[93 118]
[94 117]
[95 116]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
