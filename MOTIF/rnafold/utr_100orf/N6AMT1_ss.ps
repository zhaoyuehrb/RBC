%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGCGCAUGGAACGCAGCGAAGGACUAUGGCAGGGGAGAACUUCGCUACGCCGUUCCACGGGCACGUGGGCCGCGGCGCCUUCAGCGACGUGUACGAGCCCGCGGAGGACACGUUUCUGCUUUUGA\
) } def
/len { sequence length } bind def

/coor [
[82.45086670 315.76293945]
[70.13613892 306.80374146]
[62.53574371 293.60699463]
[60.96648788 278.45913696]
[65.70025635 263.98464966]
[75.91690063 252.69128418]
[89.84632111 246.53569031]
[89.84632111 231.53569031]
[89.84632111 216.53569031]
[86.66745758 209.77709961]
[90.03341675 201.17153931]
[90.39868164 186.17599487]
[90.76394653 171.18043518]
[91.12921143 156.18489075]
[91.49447632 141.18933105]
[91.85974121 126.19377899]
[79.79566193 118.55162048]
[73.20830536 105.88072968]
[58.23609543 104.96804047]
[43.26388931 104.05535126]
[28.29168129 103.14266205]
[13.31947327 102.22997284]
[-1.65273404 101.31728363]
[-16.62494087 100.40459442]
[-28.40032768 110.60155487]
[-43.57127380 109.46266937]
[-53.21995163 98.17379761]
[-68.19216156 97.26110840]
[-76.59966278 110.11448669]
[-90.31470490 117.02776337]
[-105.64798737 116.14129639]
[-118.47495270 107.69354248]
[-125.34520721 93.95690155]
[-124.41067505 78.62646484]
[-115.92276001 65.82604218]
[-102.16464996 58.99888611]
[-86.83721924 59.98146439]
[-74.06346893 68.50946808]
[-67.27947235 82.28890228]
[-52.30726242 83.20159149]
[-41.35880661 73.16829681]
[-26.16185951 73.88060760]
[-15.71225166 85.43238068]
[-0.74004447 86.34507751]
[14.23216343 87.25776672]
[29.20437050 88.17045593]
[44.17657852 89.08314514]
[59.14878464 89.99583435]
[74.12099457 90.90852356]
[84.79332733 73.78591919]
[105.99420166 67.36450195]
[106.72451782 52.38229370]
[107.45483398 37.40008545]
[108.18515015 22.41787338]
[108.91545868 7.43566227]
[109.64577484 -7.54654837]
[110.01103973 -22.54210091]
[110.01103973 -37.54209900]
[110.01103973 -52.54209900]
[110.01103973 -67.54209900]
[110.01103973 -82.54209900]
[110.01103973 -97.54209900]
[101.34733582 -111.46590424]
[109.31147003 -125.80133820]
[125.71061707 -125.80133820]
[133.67474365 -111.46590424]
[125.01103973 -97.54209900]
[125.01103973 -82.54209900]
[125.01103973 -67.54209900]
[125.01103973 -52.54209900]
[125.01103973 -37.54209900]
[125.01103973 -22.54210091]
[127.76976013 -18.52831650]
[127.96481323 -12.71764183]
[124.62798309 -6.81623411]
[123.89767456 8.16597652]
[123.16735840 23.14818764]
[122.43704224 38.13039780]
[121.70673370 53.11260986]
[120.97641754 68.09481812]
[131.64739990 78.63665009]
[146.61959839 77.72396088]
[161.59181213 76.81127167]
[176.56402588 75.89858246]
[191.53622437 74.98589325]
[200.01312256 71.30788422]
[206.88330078 74.23779297]
[221.87329102 73.68996429]
[236.86328125 73.14212799]
[246.25856018 64.20693970]
[258.82168579 64.11527252]
[267.75473022 72.36737061]
[282.75360107 72.18472290]
[293.61126709 60.70052338]
[309.41146851 60.34101486]
[320.78024292 71.31948090]
[320.97265625 87.12260437]
[309.87460327 98.37465668]
[294.07034302 98.40000916]
[282.93624878 87.18360901]
[267.93737793 87.36625671]
[253.41598511 97.14102936]
[237.41111755 88.13212585]
[222.42112732 88.67995453]
[207.43112183 89.22778320]
[192.44891357 89.95809937]
[177.47671509 90.87078857]
[162.50450134 91.78347778]
[147.53228760 92.69616699]
[132.56008911 93.60885620]
[131.20654297 105.81353760]
[125.64121246 116.15392303]
[117.02126312 123.31540680]
[106.85529327 126.55904388]
[106.49002838 141.55459595]
[106.12476349 156.55015564]
[105.75949860 171.54570007]
[105.39423370 186.54125977]
[105.02896881 201.53680420]
[104.84632111 216.53569031]
[104.84632111 231.53569031]
[104.84632111 246.53569031]
[118.77574158 252.69128418]
[128.99238586 263.98464966]
[133.72615051 278.45913696]
[132.15689087 293.60699463]
[124.55649567 306.80374146]
[112.24177551 315.76293945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 122]
[8 121]
[9 120]
[11 119]
[12 118]
[13 117]
[14 116]
[15 115]
[16 114]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[27 40]
[28 39]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[87 105]
[88 104]
[89 103]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
