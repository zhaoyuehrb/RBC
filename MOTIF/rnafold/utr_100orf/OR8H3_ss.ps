%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGGGUAGAAGGAAUGACACAAAUGUGGCUGACUUCAUCCUUACGGGACUGUCAGACUCUGAAGAGGUCCAGAUGGCUCUGUUUAUGCUAUUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[94.76172638 136.05409241]
[86.77209473 133.48985291]
[79.67230988 129.20454407]
[73.82108307 123.46739197]
[69.50173187 116.61940002]
[66.90855408 109.05325317]
[51.92487717 109.75285339]
[36.94120026 110.45246124]
[21.95752525 111.15206909]
[13.35615635 114.73104095]
[6.49845314 111.63307190]
[-8.49973297 111.86635590]
[-23.49791908 112.09963226]
[-38.49610519 112.33290863]
[-43.98416901 125.45806122]
[-54.05339813 135.44616699]
[-67.14190674 140.79493713]
[-81.23739624 140.71807861]
[-94.18655396 135.26072693]
[-104.02394867 125.28741455]
[-109.27039337 112.34530640]
[-124.26857758 112.11203003]
[-139.26676941 111.87875366]
[-153.32362366 120.32486725]
[-167.53346252 112.13875580]
[-167.27842712 95.74159241]
[-152.82087708 88.00137329]
[-139.03349304 96.88056946]
[-124.03530121 97.11384583]
[-109.03711700 97.34712219]
[-102.21261597 82.98867798]
[-89.79100037 72.97448730]
[-74.19893646 69.32533264]
[-58.51054382 72.81216431]
[-45.84130096 82.79393768]
[-38.72938156 97.33472443]
[-23.73119545 97.10144043]
[-8.73301029 96.86816406]
[6.26517582 96.63488770]
[21.25791931 96.16838837]
[36.24159622 95.46878815]
[51.22527313 94.76918030]
[66.20894623 94.06957245]
[70.22422028 81.43980408]
[78.87753296 71.01367950]
[91.07356262 64.45867920]
[105.13329315 62.92936325]
[119.02447510 66.87021637]
[130.65533447 75.91870880]
[139.77131653 64.00658417]
[148.88731384 52.09446335]
[158.00329590 40.18233871]
[167.11929321 28.27021217]
[168.63360596 8.28793621]
[186.54016113 1.27593958]
[194.89794922 -11.17988014]
[203.25572205 -23.63570023]
[211.61351013 -36.09151840]
[215.41804504 -52.61307907]
[232.34713745 -53.53085327]
[237.91548157 -37.51742554]
[224.06933594 -27.73373604]
[215.71154785 -15.27791595]
[207.35375977 -2.82209611]
[198.99598694 9.63372326]
[201.89492798 19.65731430]
[198.63821411 29.80364990]
[190.09913635 36.54271698]
[179.03141785 37.38620377]
[169.91542053 49.29832840]
[160.79943848 61.21045303]
[151.68344116 73.12257385]
[142.56745911 85.03469849]
[145.12110901 99.81573486]
[157.70539856 107.97879791]
[170.28968811 116.14186096]
[182.87397766 124.30492401]
[195.45828247 132.46798706]
[208.04257202 140.63104248]
[220.62686157 148.79411316]
[234.64451599 142.35134888]
[249.91690063 144.53250122]
[261.57067871 154.64155579]
[265.88717651 169.45275879]
[261.48898315 184.23989868]
[249.77957153 194.28445435]
[234.49536133 196.38125610]
[220.51350403 189.86120605]
[212.29553223 176.80484009]
[212.46379089 161.37840271]
[199.87950134 153.21533203]
[187.29521179 145.05227661]
[174.71092224 136.88920593]
[162.12663269 128.72615051]
[149.54234314 120.56308746]
[136.95803833 112.40002441]
[132.75790405 120.33766174]
[126.90715027 127.02056122]
[119.75437164 132.11909485]
[111.71046448 135.39581299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[9 40]
[11 39]
[12 38]
[13 37]
[14 36]
[21 30]
[22 29]
[23 28]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[55 65]
[56 64]
[57 63]
[58 62]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
