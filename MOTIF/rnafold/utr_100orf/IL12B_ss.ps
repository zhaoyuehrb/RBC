%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUUCAGGGCCAUUGGACUCUCCGUCCUGCCCAGAGCAAGAUGUGUCACCAGCAGUUGGUCAUCUCUUGGUUUUCCCUGGUUUUUCUGGCAUCUCCCCUCGUGGCCAUAUGGGAACUGAAGAAAGAUGUUUAUGUCGUAG\
) } def
/len { sequence length } bind def

/coor [
[133.82559204 231.21452332]
[128.97151184 217.02163696]
[115.15200043 206.25920105]
[118.75096130 188.23672485]
[113.58626556 174.15390015]
[108.42156982 160.07107544]
[103.25688171 145.98825073]
[98.09218597 131.90542603]
[83.74707794 127.52160645]
[71.59248352 136.31170654]
[59.43788910 145.10179138]
[47.28329086 153.89189148]
[47.03442383 163.45541382]
[42.43877792 171.68794250]
[34.66048431 176.76760864]
[25.55039024 177.63909912]
[17.20632935 174.23075867]
[4.49920797 182.20127869]
[-8.20791245 190.17178345]
[-20.91503334 198.14230347]
[-25.88437271 213.39631653]
[-40.95869827 218.88670349]
[-54.57427979 210.40168762]
[-56.28640747 194.45025635]
[-44.78168106 183.26898193]
[-28.88554764 185.43518066]
[-16.17842674 177.46466064]
[-3.47130561 169.49415588]
[9.23581505 161.52363586]
[17.12846565 142.49902344]
[38.49319458 141.73730469]
[50.64778900 132.94720459]
[62.80238724 124.15710449]
[74.95697784 115.36700439]
[72.50673676 92.33347321]
[87.29287720 75.38391113]
[77.34603882 64.15625000]
[62.40337753 58.95745087]
[59.75508881 44.30017471]
[49.80824661 33.07251358]
[39.86140823 21.84485054]
[29.91456795 10.61719036]
[19.96772766 -0.61047119]
[5.02506828 -5.80926943]
[2.37677813 -20.46654892]
[-7.57006168 -31.69421005]
[-17.51690102 -42.92187119]
[-23.77341080 -45.42031860]
[-27.25218201 -50.03722000]
[-27.64076996 -54.86809540]
[-37.08484268 -66.52182770]
[-46.52891541 -78.17556000]
[-55.97299194 -89.82929230]
[-71.71478271 -92.92372894]
[-78.98213959 -107.22635651]
[-72.20016479 -121.76541901]
[-56.57141113 -125.38779449]
[-44.08491898 -115.31470490]
[-44.31925964 -99.27336884]
[-34.87518311 -87.61963654]
[-25.43111038 -75.96590424]
[-15.98703766 -64.31217194]
[-6.28924036 -52.86870956]
[3.65759945 -41.64104843]
[13.60443974 -30.41338730]
[27.83563423 -26.01766777]
[31.19538879 -10.55731106]
[41.14222717 0.67035013]
[51.08906937 11.89801121]
[61.03590775 23.12567329]
[70.98274994 34.35333252]
[85.21394348 38.74905396]
[88.57369995 54.20941162]
[98.52053833 65.43707275]
[113.28946686 68.05982208]
[126.49393463 60.94350433]
[139.69839478 53.82718277]
[152.90286255 46.71086502]
[166.10734558 39.59454346]
[179.07017517 32.04702759]
[191.77729797 24.07651520]
[204.48440552 16.10600281]
[217.19152832 8.13548946]
[229.89865112 0.16497581]
[228.28710938 -14.97319698]
[233.38725281 -29.25169373]
[244.13708496 -39.85647583]
[258.36679077 -44.72227859]
[273.23669434 -42.93467331]
[285.80380249 -34.90140915]
[298.51092529 -42.87192154]
[301.79504395 -58.33122635]
[315.09399414 -66.87019348]
[330.51770020 -63.42280960]
[338.91558838 -50.03433990]
[335.30532837 -34.64793396]
[321.82882690 -26.39206696]
[306.48144531 -30.16480255]
[293.77432251 -22.19428825]
[295.53613281 -7.38343191]
[290.67266846 6.78188181]
[280.09790039 17.47464371]
[265.87118530 22.53634262]
[250.79635620 20.91255569]
[237.86917114 12.87209606]
[225.16204834 20.84260941]
[212.45492554 28.81312370]
[199.74780273 36.78363800]
[187.04067993 44.75415039]
[185.90982056 48.17111588]
[183.02288818 51.18860626]
[178.59657288 52.96657562]
[173.22366333 52.79901123]
[160.01919556 59.91533279]
[146.81472778 67.03165436]
[133.61024475 74.14797211]
[120.40578461 81.26428986]
[127.97097778 105.68148041]
[112.17501068 126.74073792]
[117.33970642 140.82356262]
[122.50439453 154.90638733]
[127.66909027 168.98921204]
[132.83378601 183.07203674]
[144.22673035 189.22583008]
[148.21417236 201.12219238]
[143.16439819 212.16755676]
[148.01847839 226.36044312]
[163.17440796 226.63160706]
[177.32246399 232.07295227]
[188.75419617 242.02740479]
[196.08918762 255.29292297]
[198.44166565 270.26763916]
[195.52758789 285.14324951]
[187.69882202 298.12347412]
[175.90075684 307.64089966]
[161.55802917 312.54620361]
[146.40263367 312.24713135]
[132.26461792 306.77969360]
[120.85124969 296.80419922]
[113.54072571 283.52517700]
[111.21584320 268.54617310]
[114.15733337 253.67596436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 34]
[10 33]
[11 32]
[12 31]
[17 29]
[18 28]
[19 27]
[20 26]
[36 74]
[37 73]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[45 65]
[46 64]
[47 63]
[50 62]
[51 61]
[52 60]
[53 59]
[75 117]
[76 116]
[77 115]
[78 114]
[79 113]
[80 109]
[81 108]
[82 107]
[83 106]
[84 105]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
