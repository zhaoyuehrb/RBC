%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGGGGAGCCUCUGGGGCUGCAGACACUGCAGACGGACGGACAGACAGAUGGACAACAGCUGGAGGCUUGGCCCGGCCAUAGGGCUCUCUGCGGGACAGUCCCAGCUGCUAGUGUCGCUGUUGCUGCUACUGACCCGUGUCCAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[-15.09916973 460.83599854]
[-17.38201141 463.15606689]
[-19.99190331 464.33749390]
[-25.76817513 478.18072510]
[-31.54444885 492.02392578]
[-37.32072067 505.86715698]
[-43.09699249 519.71038818]
[-40.46326828 535.89666748]
[-53.33357239 546.05969238]
[-68.46804047 539.74462891]
[-70.29762268 523.44787598]
[-56.94021225 513.93408203]
[-51.16393661 500.09088135]
[-45.38766479 486.24765015]
[-39.61139297 472.40444946]
[-33.83512115 458.56121826]
[-28.63970566 444.48971558]
[-24.03414154 430.21423340]
[-19.42857552 415.93878174]
[-14.82301235 401.66333008]
[-10.21744728 387.38787842]
[-5.61188316 373.11239624]
[-6.98527479 368.47674561]
[-5.41489553 362.93011475]
[-0.50639105 358.34600830]
[4.68902445 344.27447510]
[9.88444042 330.20297241]
[15.07985592 316.13143921]
[20.27527046 302.05990601]
[11.61229610 285.98663330]
[17.48728180 268.36331177]
[34.63860703 260.43667603]
[39.24417114 246.16122437]
[43.84973526 231.88575745]
[38.60931015 220.93836975]
[42.37872696 208.97967529]
[53.64872742 202.62036133]
[58.55027771 188.44380188]
[57.75841522 181.04660034]
[63.70407486 174.02513123]
[68.89949036 159.95361328]
[74.09490204 145.88209534]
[73.45709991 138.47001648]
[79.54754639 131.57376099]
[85.03457642 117.61338043]
[90.52161407 103.65298462]
[90.30893707 95.53887939]
[96.27073669 89.46118927]
[102.04701233 75.61797333]
[107.82328796 61.77475357]
[103.08325958 51.89459229]
[104.56955719 41.26000214]
[111.54467010 33.38809204]
[121.49710846 30.74596977]
[127.84423828 17.15501785]
[134.19136047 3.56406760]
[140.53849792 -10.02688313]
[137.28785706 -31.16528320]
[154.52180481 -42.45748901]
[160.00883484 -56.41788101]
[165.49586487 -70.37826538]
[170.98289490 -84.33866119]
[176.46994019 -98.29904938]
[181.95697021 -112.25943756]
[187.44400024 -126.21982574]
[187.67913818 -135.41746521]
[193.19313049 -140.41162109]
[198.96939087 -154.25483704]
[204.74566650 -168.09806824]
[205.17210388 -177.28881836]
[210.78880310 -182.16719055]
[216.85180664 -195.88723755]
[215.35276794 -211.63726807]
[227.57423401 -220.15110779]
[233.63723755 -233.87115479]
[239.70025635 -247.59120178]
[245.76325989 -261.31124878]
[250.95867920 -275.38278198]
[255.26626587 -289.75097656]
[259.57385254 -304.11914062]
[255.27360535 -319.94442749]
[267.01901245 -331.38897705]
[282.72741699 -326.67959595]
[286.23934937 -310.66091919]
[273.94204712 -299.81155396]
[269.63446045 -285.44338989]
[265.32687378 -271.07519531]
[279.18191528 -276.82302856]
[293.11566162 -271.26873779]
[299.21719360 -257.56576538]
[294.02233887 -243.49404907]
[280.48046875 -237.04286194]
[266.28005981 -241.87487793]
[259.48330688 -255.24824524]
[253.42030334 -241.52819824]
[247.35729980 -227.80813599]
[241.29428101 -214.08808899]
[243.22698975 -199.31941223]
[230.57186890 -189.82421875]
[224.50885010 -176.10417175]
[218.58888245 -162.32179260]
[212.81262207 -148.47857666]
[207.03634644 -134.63534546]
[201.40438843 -120.73279572]
[195.91735840 -106.77240753]
[190.43032837 -92.81201935]
[184.94329834 -78.85163116]
[179.45625305 -64.89123535]
[173.96922302 -50.93084717]
[168.48219299 -36.97045898]
[173.36192322 -29.41864586]
[174.19459534 -20.32727623]
[170.66262817 -11.75905228]
[163.45343018 -5.71771002]
[154.12944031 -3.67975378]
[147.78231812 9.91119671]
[141.43518066 23.50214767]
[135.08805847 37.09309769]
[138.22868347 56.13426590]
[121.66650391 67.55102539]
[115.89022827 81.39424896]
[110.11396027 95.23746490]
[104.48200226 109.14002228]
[98.99497223 123.10041046]
[93.50793457 137.06080627]
[88.16642761 151.07751465]
[82.97100830 165.14903259]
[77.77559662 179.22055054]
[72.72683716 193.34535217]
[67.82528687 207.52191162]
[71.75519562 225.48118591]
[58.12519455 236.49133301]
[53.51963043 250.76678467]
[48.91406631 265.04223633]
[56.33101654 274.43170166]
[58.24464798 286.12130737]
[54.28989792 297.15914917]
[45.56886673 304.81494141]
[34.34679031 307.25534058]
[29.15137482 321.32684326]
[23.95595932 335.39837646]
[18.76054382 349.46987915]
[13.56512833 363.54141235]
[8.66357708 377.71795654]
[4.05801296 391.99343872]
[-0.54755139 406.26889038]
[-5.15311575 420.54434204]
[-9.75868034 434.81982422]
[-14.36424446 449.09527588]
[-13.25402451 453.44601440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[17 149]
[18 148]
[19 147]
[20 146]
[21 145]
[22 144]
[25 143]
[26 142]
[27 141]
[28 140]
[29 139]
[32 134]
[33 133]
[34 132]
[37 130]
[38 129]
[40 128]
[41 127]
[42 126]
[44 125]
[45 124]
[46 123]
[48 122]
[49 121]
[50 120]
[54 118]
[55 117]
[56 116]
[57 115]
[59 110]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[67 103]
[68 102]
[69 101]
[71 100]
[72 99]
[74 97]
[75 96]
[76 95]
[77 94]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
