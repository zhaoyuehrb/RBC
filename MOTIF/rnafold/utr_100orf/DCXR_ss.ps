%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGACUGCGCCGACAUGGAGCUGUUCCUCGCGGGCCGCCGGGUGCUGGUCACCGGGGCAGGCAAAGGUAUAGGGCGCGGCACGGUCCAGGCGCUGCACGCGACGGGCGCGCGGG\
) } def
/len { sequence length } bind def

/coor [
[121.82408905 337.58685303]
[108.99356079 329.81652832]
[101.61138153 316.75885010]
[101.56873322 301.75891113]
[108.87654114 288.65945435]
[121.66268158 280.81631470]
[136.65156555 280.23880005]
[150.00245667 287.07409668]
[144.45039368 273.13943481]
[138.89831543 259.20477295]
[133.34625244 245.27012634]
[127.79417419 231.33547974]
[125.12605286 230.12219238]
[122.81307983 227.70777893]
[121.34322357 224.23564148]
[121.13780975 220.03330994]
[122.48605347 215.58152771]
[118.47312927 201.12828064]
[114.46020508 186.67503357]
[110.44728088 172.22178650]
[105.56089020 166.54324341]
[106.52706146 157.32266235]
[102.90699768 142.76605225]
[99.28692627 128.20942688]
[95.66685486 113.65280914]
[86.09945679 103.45690918]
[89.77652740 89.96725464]
[86.15645599 75.41063690]
[75.31735992 63.88568878]
[79.75437927 49.66731644]
[76.13430786 35.11069870]
[72.51424408 20.55408096]
[54.81827545 11.31055355]
[49.49763870 -7.62106085]
[59.47868729 -24.21620369]
[54.68916321 -38.43099976]
[49.89963913 -52.64579773]
[44.53676605 -66.65435028]
[38.60938644 -80.43354797]
[32.68201065 -94.21273804]
[20.93976974 -99.75646973]
[16.32293320 -111.46133423]
[20.82237625 -122.77965546]
[15.27030373 -136.71430969]
[2.97456193 -146.67047119]
[5.45148468 -161.35768127]
[-0.10058746 -175.29234314]
[-5.65265989 -189.22698975]
[-11.20473194 -203.16163635]
[-22.68430901 -215.63784790]
[-13.87354183 -230.12254333]
[2.48416018 -225.66587830]
[2.72991872 -208.71371460]
[8.28199100 -194.77906799]
[13.83406353 -180.84440613]
[19.38613510 -166.90975952]
[31.28475571 -157.95028687]
[29.20495415 -142.26638794]
[34.75702667 -128.33172607]
[49.08871078 -118.30327606]
[46.46120453 -100.14012146]
[52.38858032 -86.36092377]
[58.31595993 -72.58173370]
[61.57824326 -70.93847656]
[64.15746307 -67.56150055]
[65.21392822 -62.81397629]
[64.11444092 -57.43532181]
[68.90396118 -43.22052383]
[73.69348145 -29.00572586]
[83.99924469 -27.03003883]
[92.57994843 -20.84936905]
[97.79860687 -11.55824280]
[98.62419891 -0.85210055]
[94.83464050 9.28196239]
[87.07086182 16.93401337]
[90.69092560 31.49062920]
[94.31099701 46.04724884]
[104.89116669 56.53101349]
[100.71307373 71.79057312]
[104.33314514 86.34719086]
[113.90054321 96.54309082]
[110.22347260 110.03274536]
[113.84354401 124.58936310]
[117.46361542 139.14598083]
[121.08367920 153.70259094]
[124.90052795 168.20886230]
[128.91345215 182.66210938]
[132.92637634 197.11535645]
[136.93930054 211.56860352]
[141.72882080 225.78340149]
[147.28089905 239.71806335]
[152.83297729 253.65270996]
[158.38504028 267.58737183]
[163.93711853 281.52200317]
[171.31953430 294.57955933]
[180.39715576 306.52096558]
[189.47476196 318.46237183]
[203.98588562 324.76617432]
[205.52848816 339.58068848]
[214.60610962 351.52206421]
[223.68371582 363.46347046]
[239.32182312 367.04525757]
[246.14151001 381.56668091]
[238.91128540 395.88812256]
[223.17758179 399.02340698]
[211.00993347 388.56741333]
[211.74232483 372.54107666]
[202.66470337 360.59967041]
[193.58709717 348.65829468]
[179.72526550 343.20861816]
[177.53337097 327.53997803]
[168.45574951 315.59857178]
[159.37814331 303.65716553]
[158.35154724 318.62200928]
[150.12864685 331.16729736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[17 89]
[18 88]
[19 87]
[20 86]
[22 85]
[23 84]
[24 83]
[25 82]
[27 80]
[28 79]
[30 77]
[31 76]
[32 75]
[35 69]
[36 68]
[37 67]
[38 63]
[39 62]
[40 61]
[43 59]
[44 58]
[46 56]
[47 55]
[48 54]
[49 53]
[95 113]
[96 112]
[97 111]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
