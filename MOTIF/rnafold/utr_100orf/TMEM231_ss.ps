%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGAGACCGAGGCGAUGGCAACCAGGAGAAGCCAAACUUGGUCCCCCGGCUCGCGGAGUGCCUGCGAGCGGUGCUCAUGGCGCUCUAUGAGCUCUUCUCUCACCCGGUCGAGCG\
) } def
/len { sequence length } bind def

/coor [
[90.97839355 314.87661743]
[90.57220459 299.88211060]
[80.01763916 292.35717773]
[75.69920349 279.92822266]
[79.42298889 267.10473633]
[90.03279877 258.67877197]
[90.03279877 243.67877197]
[90.03279877 228.67877197]
[90.03279877 213.67877197]
[90.03279877 198.67877197]
[86.84368896 191.89996338]
[90.24141693 183.27395630]
[90.64760590 168.27944946]
[83.25778961 155.34733582]
[91.36595154 141.76173401]
[91.77214050 126.76724243]
[78.17388153 117.54432678]
[72.08982086 102.28132629]
[57.35856247 99.45465088]
[44.37187576 108.05603027]
[29.47255325 104.97952271]
[21.35248756 92.54569244]
[6.62123251 89.71900940]
[-8.11002254 86.89233398]
[-22.84127808 84.06565094]
[-37.57253265 81.23896790]
[-52.30378723 78.41229248]
[-62.29137421 90.08035278]
[-76.78024292 95.17626190]
[-91.87295532 92.32924652]
[-103.50965881 82.30513763]
[-108.56012726 67.80036926]
[-105.66581726 52.71664810]
[-95.60527802 41.11142731]
[-81.08474731 36.10644913]
[-66.01017761 39.04802704]
[-54.43655014 49.14488983]
[-49.47710800 63.68103409]
[-34.74585342 66.50771332]
[-20.01459885 69.33439636]
[-5.28334284 72.16107178]
[9.44791222 74.98775482]
[24.17916679 77.81443787]
[36.32475662 69.26924133]
[51.30461121 71.92604828]
[60.18524170 84.72339630]
[74.91649628 87.55007172]
[91.05851746 73.46261597]
[112.43442535 74.90881348]
[122.45124817 63.74353409]
[132.46806335 52.57825851]
[142.48487854 41.41298294]
[152.50169373 30.24770737]
[162.51850891 19.08243179]
[165.97482300 3.64337468]
[180.23321533 -0.66331792]
[190.25003052 -11.82859421]
[200.26684570 -22.99386978]
[210.28366089 -34.15914536]
[220.30047607 -45.32442093]
[230.31729126 -56.48969650]
[240.33410645 -67.65497589]
[250.35092163 -78.82025146]
[248.08024597 -92.17723846]
[253.87181091 -104.20911407]
[265.38613892 -110.57682800]
[278.26751709 -109.12982178]
[288.58300781 -120.01975250]
[298.89849854 -130.90968323]
[309.21398926 -141.79962158]
[315.71694946 -157.45681763]
[332.56246948 -155.54235840]
[335.38610840 -138.82519531]
[320.10394287 -131.48413086]
[309.78845215 -120.59419250]
[299.47296143 -109.70426178]
[289.15747070 -98.81433105]
[290.36605835 -82.10051727]
[278.93569946 -69.39096832]
[261.51620483 -68.80343628]
[251.49938965 -57.63815689]
[241.48257446 -46.47288132]
[231.46575928 -35.30760574]
[221.44894409 -24.14233017]
[211.43212891 -12.97705364]
[201.41529846 -1.81177759]
[191.39848328 9.35349846]
[188.65864563 23.99394035]
[173.68379211 29.09924698]
[163.66697693 40.26452255]
[153.65014648 51.42979813]
[143.63333130 62.59507751]
[133.61651611 73.76035309]
[123.59970093 84.92562866]
[126.77159119 91.78631592]
[127.99309540 99.24539185]
[127.17522430 106.75944519]
[124.37755585 113.78105927]
[119.80391693 119.79867554]
[113.78750610 124.37390900]
[106.76663971 127.17343140]
[106.36045074 142.16792297]
[113.72121429 156.17256165]
[105.64210510 168.68563843]
[105.23591614 183.68014526]
[105.03279877 198.67877197]
[105.03279877 213.67877197]
[105.03279877 228.67877197]
[105.03279877 243.67877197]
[105.03279877 258.67877197]
[117.60668945 270.74862671]
[117.62760162 287.84204102]
[105.56670380 299.47592163]
[105.97289276 314.47042847]
[108.68441772 333.66149902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[6 110]
[7 109]
[8 108]
[9 107]
[10 106]
[12 105]
[13 104]
[15 102]
[16 101]
[18 47]
[19 46]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
