%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGUUCCUAGUCGGUGGCUCCCAUGCUGGUCUCUGAUGUUUAGGAAGUGGUGUCAGCAGAGACUGAGCUGCACCCUUUCUUUGGACAGAUGGCAGGAGAGGAGAACUUCAAGGAAGAGCUCAGAUCCCAGGAUGCUUCCAGGAACUUGAACCAGCAUGAGGUAGCAGGACAUCCACAUUCCUGGUCUC\
) } def
/len { sequence length } bind def

/coor [
[122.99721527 668.45477295]
[122.50642395 653.46282959]
[122.01564026 638.47082520]
[121.52485657 623.47888184]
[121.03406525 608.48687744]
[120.54328156 593.49493408]
[108.80940247 588.76440430]
[99.70657349 579.91088867]
[94.61477661 568.22711182]
[94.32460022 555.43859863]
[98.91462708 543.44854736]
[107.73452759 534.05487061]
[119.49691010 528.68041992]
[119.49691010 513.68041992]
[111.75961304 500.95312500]
[119.49691010 487.15295410]
[119.49691010 472.15295410]
[119.49691010 457.15295410]
[119.49691010 442.15295410]
[119.00612640 427.16098022]
[118.02507782 412.19308472]
[117.04403687 397.22521973]
[115.94056702 382.26586914]
[114.71475220 367.31604004]
[113.36666870 352.37673950]
[111.89640808 337.44894409]
[110.42615509 322.52117920]
[108.95589447 307.59341431]
[107.48564148 292.66564941]
[106.01538086 277.73788452]
[104.54512787 262.81008911]
[103.07486725 247.88233948]
[101.60460663 232.95455933]
[97.81410217 226.59584045]
[100.23447418 217.77082825]
[99.00865173 202.82099915]
[88.90052032 197.48989868]
[82.56163025 187.83744812]
[81.66757202 176.20399475]
[86.55658722 165.47795105]
[96.11656952 158.37866211]
[95.38055420 143.39672852]
[94.64453888 128.41479492]
[93.90852356 113.43286896]
[86.09198761 100.63045502]
[73.10160828 93.13045502]
[60.11122513 85.63045502]
[47.12084198 78.13045502]
[34.13046265 70.63045502]
[21.14007950 63.13045883]
[12.12751961 61.54526138]
[7.99995136 55.39998245]
[-4.86597776 47.68843842]
[-17.73190689 39.97689819]
[-30.59783554 32.26535797]
[-39.58325577 30.53291321]
[-43.60972214 24.32092094]
[-56.34775543 16.39990234]
[-69.08578491 8.47888470]
[-81.82382202 0.55786687]
[-95.71575165 7.26739550]
[-111.02705383 5.37858343]
[-122.87194061 -4.50585604]
[-127.47075653 -19.23183441]
[-123.35604095 -34.10034561]
[-111.84076691 -44.36690140]
[-96.59943390 -46.75548172]
[-82.49549103 -40.50389862]
[-74.02945709 -27.60700989]
[-73.90280151 -12.18016624]
[-61.16476822 -4.25914812]
[-48.42673874 3.66186976]
[-35.68870544 11.58288765]
[-22.88629532 19.39942932]
[-10.02036572 27.11096954]
[2.84556341 34.82250977]
[15.71149254 42.53405380]
[28.64007950 50.14007568]
[41.63046265 57.64007568]
[54.62084198 65.14007568]
[67.61122131 72.64007568]
[80.60160828 80.14007568]
[93.59198761 87.64007568]
[108.20014191 84.23393250]
[116.53369141 71.76188660]
[124.86724854 59.28984451]
[133.20080566 46.81780243]
[141.53434753 34.34575653]
[126.53609467 34.57434082]
[116.87703705 23.09816551]
[119.66230774 8.35902500]
[132.84307861 1.19891953]
[146.72367859 6.88476944]
[151.09371948 21.23358917]
[160.41862488 9.48428822]
[169.74353027 -2.26501346]
[179.06845093 -14.01431465]
[187.90507507 -26.13512611]
[196.23861694 -38.60717010]
[204.57217407 -51.07921600]
[199.36386108 -65.57678986]
[203.64085388 -80.19050598]
[215.56182861 -89.37496948]
[230.42718506 -89.77397156]
[238.76074219 -102.24601746]
[247.09429932 -114.71806335]
[244.22103882 -130.02760315]
[252.85011292 -142.55731201]
[267.46313477 -145.20217896]
[275.79669189 -157.67422485]
[284.13024902 -170.14627075]
[292.46380615 -182.61831665]
[296.23620605 -199.14723206]
[313.16345215 -200.09791565]
[318.76293945 -184.09535217]
[304.93582153 -174.28475952]
[296.60229492 -161.81271362]
[288.26873779 -149.34066772]
[279.93518066 -136.86862183]
[283.08380127 -122.35581207]
[274.81005859 -109.58866882]
[259.56634521 -106.38450623]
[251.23278809 -93.91246033]
[242.89923096 -81.44041443]
[248.21932983 -67.55393219]
[244.29594421 -53.02564240]
[232.43136597 -43.48178482]
[217.04421997 -42.74566269]
[208.71066284 -30.27361679]
[200.37712097 -17.80157280]
[215.37536621 -18.03015518]
[225.03443909 -6.55398273]
[222.24916077 8.18515778]
[209.06838989 15.34526348]
[195.18778992 9.65941334]
[190.81774902 -4.68940592]
[181.49284363 7.05989504]
[172.16792297 18.80919647]
[162.84301758 30.55849838]
[154.00639343 42.67930984]
[145.67285156 55.15135574]
[137.33929443 67.62339783]
[129.00573730 80.09544373]
[120.67218781 92.56748962]
[108.89045715 112.69685364]
[109.62647247 127.67878723]
[110.36248779 142.66072083]
[111.09850311 157.64265442]
[125.60822296 169.80438232]
[126.62036133 188.39036560]
[113.95848083 201.59518433]
[115.18430328 216.54499817]
[116.53237915 231.48429871]
[118.00263977 246.41207886]
[119.47289276 261.33984375]
[120.94315338 276.26760864]
[122.41340637 291.19537354]
[123.88366699 306.12316895]
[125.35392761 321.05093384]
[126.82418060 335.97869873]
[128.29443359 350.90646362]
[132.25553894 359.15563965]
[129.66458130 366.09020996]
[130.89039612 381.04003906]
[134.71598816 389.35290527]
[132.01191711 396.24417114]
[132.99296570 411.21206665]
[133.97401428 426.17993164]
[136.53710938 429.73001099]
[137.70912170 433.52951050]
[137.58361816 437.10751343]
[136.39845276 440.07250977]
[134.49691772 442.15295410]
[134.49691772 457.15295410]
[134.49691772 472.15295410]
[134.49691772 487.15295410]
[142.23420715 500.95312500]
[134.49691772 513.68041992]
[134.49691772 528.68041992]
[149.90864563 537.09649658]
[158.89772034 552.07757568]
[159.07005310 569.45880127]
[150.46827698 584.46081543]
[135.53524780 593.00415039]
[136.02603149 607.99609375]
[136.51683044 622.98809814]
[137.00761414 637.98004150]
[137.49839783 652.97204590]
[137.98918152 667.96398926]
[144.55052185 683.59680176]
[131.34500122 694.22930908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 189]
[2 188]
[3 187]
[4 186]
[5 185]
[6 184]
[13 179]
[14 178]
[16 176]
[17 175]
[18 174]
[19 173]
[20 168]
[21 167]
[22 166]
[23 164]
[24 163]
[25 161]
[26 160]
[27 159]
[28 158]
[29 157]
[30 156]
[31 155]
[32 154]
[33 153]
[35 152]
[36 151]
[41 148]
[42 147]
[43 146]
[44 145]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[52 77]
[53 76]
[54 75]
[55 74]
[57 73]
[58 72]
[59 71]
[60 70]
[84 144]
[85 143]
[86 142]
[87 141]
[88 140]
[94 139]
[95 138]
[96 137]
[97 136]
[98 130]
[99 129]
[100 128]
[104 124]
[105 123]
[106 122]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
