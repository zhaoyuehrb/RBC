%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGGCCGGCCGUCGCGGACUCGGGAGAUGGAGGAAAAGGAGAUAUUACGGCGGCAGAUCCGCCUACUGCAGGGUCUGAUUGAUGACUACAAAACCCUCCACGGCAAUGCCCCGGCCCCUGGUACCC\
) } def
/len { sequence length } bind def

/coor [
[101.67765808 284.82492065]
[112.20243073 273.03491211]
[111.11591339 258.07431030]
[110.02938843 243.11370850]
[97.98503876 228.06311035]
[106.77768707 209.99798584]
[104.96963501 195.10734558]
[103.16158295 180.21672058]
[101.35353088 165.32608032]
[99.54548645 150.43544006]
[97.73743439 135.54481506]
[91.89332581 132.91609192]
[86.89525604 129.39360046]
[82.86595917 125.19068909]
[79.88008118 120.53435516]
[66.95053101 128.13874817]
[58.97770309 141.80419922]
[44.08468246 141.58709717]
[31.15513611 149.19149780]
[23.54539108 163.71815491]
[7.15118694 164.12080383]
[-1.16252255 149.98524475]
[7.15669346 135.85292053]
[23.55073929 136.26196289]
[36.48028564 128.65756226]
[43.52830505 115.53602600]
[59.34613800 115.20920563]
[72.27568054 107.60481262]
[72.44678497 91.79686737]
[80.94983673 78.46950531]
[95.21354675 71.65284729]
[96.66125488 56.72287750]
[98.10897064 41.79290009]
[99.55667877 26.86292648]
[101.00438690 11.93295193]
[102.45209503 -2.99702215]
[90.48367310 -6.37516832]
[79.21005249 -11.61636734]
[68.91902161 -18.58554459]
[59.87309647 -27.10352707]
[52.30281830 -36.95165253]
[46.40084839 -47.87738037]
[42.31710434 -59.60076904]
[40.15492249 -71.82164764]
[39.96845245 -84.22729492]
[41.76131439 -96.50046539]
[45.48651886 -108.32747650]
[51.04769516 -119.40622711]
[58.30160904 -129.45393372]
[67.06182098 -138.21432495]
[77.10350037 -145.46420288]
[88.16918945 -151.01910400]
[83.88000488 -165.39279175]
[79.59081268 -179.76647949]
[75.30162811 -194.14016724]
[71.01244354 -208.51385498]
[57.63849640 -217.37484741]
[56.37136078 -233.36778259]
[68.18307495 -244.22424316]
[84.01270294 -241.61610413]
[91.71710968 -227.54408264]
[85.38613129 -212.80303955]
[89.67531586 -198.42935181]
[93.96450043 -184.05566406]
[98.25369263 -169.68197632]
[102.54287720 -155.30828857]
[110.55998230 -156.44334412]
[118.65180206 -156.73481750]
[126.72979736 -156.17951965]
[134.70561218 -154.78353882]
[142.49200439 -152.56213379]
[150.00376892 -149.53962708]
[157.15876770 -145.74905396]
[163.87870789 -141.23188782]
[170.09008789 -136.03755188]
[181.31774902 -145.98439026]
[192.54541016 -155.93122864]
[203.77307129 -165.87806702]
[202.14147949 -181.30912781]
[209.92079163 -194.73529053]
[224.11970520 -200.99392700]
[239.27844238 -197.67848206]
[249.56816101 -186.06378174]
[251.03227234 -170.61593628]
[243.10777283 -157.27494812]
[228.84179688 -151.17070007]
[213.71992493 -154.65040588]
[202.49226379 -144.70356750]
[191.26460266 -134.75672913]
[180.03694153 -124.80988312]
[190.07191467 -106.11527252]
[194.65902710 -85.38668060]
[193.44735718 -64.17877960]
[186.52111816 -44.08404922]
[174.39390564 -26.61322784]
[157.97059631 -13.08171463]
[138.47982788 -4.51053762]
[117.38206482 -1.54931343]
[115.93435669 13.38066101]
[114.48664856 28.31063652]
[113.03894043 43.24060822]
[111.59123230 58.17058563]
[110.14352417 73.10055542]
[129.39360046 86.89525604]
[133.18812561 112.92675781]
[145.93014526 120.84136200]
[158.67216492 128.75596619]
[175.31729126 131.97715759]
[176.82981873 148.86351013]
[161.02210999 154.99151611]
[150.75756836 141.49798584]
[138.01554871 133.58338928]
[125.27352905 125.66877747]
[112.62806702 133.73677063]
[114.43611908 148.62739563]
[116.24416351 163.51803589]
[118.05221558 178.40866089]
[119.86026764 193.29930115]
[121.66831970 208.18992615]
[130.70265198 214.47329712]
[134.65238953 224.50759888]
[132.41813660 234.83142090]
[124.98999023 242.02719116]
[126.07650757 256.98779297]
[127.16303253 271.94839478]
[139.28089905 282.09396362]
[140.59226990 297.84375000]
[130.31912231 309.85366821]
[114.55635834 310.99844360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[6 119]
[7 118]
[8 117]
[9 116]
[10 115]
[11 114]
[15 28]
[16 27]
[18 25]
[19 24]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[36 98]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[75 90]
[76 89]
[77 88]
[78 87]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
