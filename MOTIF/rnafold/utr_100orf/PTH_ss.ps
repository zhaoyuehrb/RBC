%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUCCAAUUAUCUGAAACUUAAGAAGAGUGUGCACCGCCCAAUGGGUGUGUGUAUGUGCUGCUUUGAACCUAUAGUUGAGAUCCAGAGAAUUGGGAGUGACAUCAUCUGUAACAAUAAAAGAGCCUCUCUUGUGAAGAUGA\
) } def
/len { sequence length } bind def

/coor [
[264.14547729 271.39736938]
[248.13459778 266.79547119]
[235.07067871 256.39935303]
[226.95588684 241.76658630]
[225.04753113 225.10673523]
[229.66331482 208.94770813]
[217.76301575 199.81628418]
[205.86271667 190.68486023]
[193.96241760 181.55343628]
[182.06211853 172.42202759]
[170.16181946 163.29060364]
[155.35443115 161.68113708]
[149.11618042 147.14170837]
[137.21588135 138.01029968]
[125.31558228 128.87887573]
[113.41528320 119.74745178]
[99.31050110 123.86328125]
[85.46688843 118.93991852]
[77.12829590 106.84227753]
[77.45329285 92.15284729]
[65.55299377 83.02142334]
[53.65269470 73.89000702]
[41.75239563 64.75858307]
[29.85209465 55.62716293]
[17.02841759 47.84556198]
[3.43380046 41.50629044]
[-10.16081619 35.16701508]
[-23.75543404 28.82774162]
[-37.41839218 22.63713646]
[-51.14806366 16.59593582]
[-64.87773132 10.55473614]
[-78.73593140 4.81448460]
[-92.71604919 -0.62208611]
[-106.69616699 -6.05865669]
[-120.67628479 -11.49522686]
[-134.65640259 -16.93179703]
[-148.63652039 -22.36836815]
[-162.67510986 -27.65211868]
[-176.77049255 -32.78242111]
[-190.86589050 -37.91272354]
[-204.96127319 -43.04302597]
[-219.05667114 -48.17332840]
[-236.00854492 -47.90892792]
[-240.95536804 -64.12513733]
[-226.74230957 -73.36772156]
[-213.92636108 -62.26871872]
[-199.83097839 -57.13841629]
[-185.73558044 -52.00811386]
[-171.64019775 -46.87781143]
[-157.54479980 -41.74750900]
[-150.12744141 -42.42057800]
[-143.19995117 -36.34848785]
[-129.21983337 -30.91191673]
[-115.23970795 -25.47534561]
[-101.25959015 -20.03877449]
[-87.27947235 -14.60220432]
[-73.29935455 -9.16563320]
[-68.58177948 -10.26926994]
[-63.12519455 -8.36694241]
[-58.83653641 -3.17493629]
[-45.10686111 2.86626410]
[-31.37718964 8.90746403]
[-23.93169403 8.72095585]
[-17.41615868 15.23312569]
[-3.82154226 21.57239914]
[9.77307415 27.91167259]
[23.36769104 34.25094604]
[16.79311752 20.76855087]
[17.69658089 5.79578447]
[25.84461784 -6.79824162]
[39.13169479 -13.75910473]
[54.12429428 -13.28804874]
[66.94818878 -5.50679922]
[74.28954315 7.57389164]
[74.25128937 22.57384300]
[66.84329987 35.61691666]
[53.97988892 43.33265305]
[38.98351669 43.72686386]
[50.88381577 52.85828400]
[62.78411865 61.98970413]
[74.68441772 71.12112427]
[86.58471680 80.25254822]
[100.68949890 76.13671875]
[114.53311157 81.06008148]
[122.87170410 93.15772247]
[122.54670715 107.84715271]
[134.44700623 116.97857666]
[146.34730530 126.10999298]
[158.24760437 135.24140930]
[173.90618896 137.50401306]
[179.29324341 151.39030457]
[191.19354248 160.52172852]
[203.09384155 169.65313721]
[214.99414062 178.78456116]
[226.89443970 187.91598511]
[238.79473877 197.04740906]
[250.11201477 189.65013123]
[263.14147949 186.12660217]
[276.59878540 186.80944824]
[289.16192627 191.61741638]
[299.60116577 200.06471252]
[306.89935303 211.31005859]
[310.35101318 224.24041748]
[309.63058472 237.58123779]
[304.82299805 250.02201843]
[316.31365967 259.66384888]
[327.80432129 269.30566406]
[339.29498291 278.94747925]
[350.78564453 288.58929443]
[362.27633667 298.23110962]
[375.51586914 295.51992798]
[387.71182251 300.87347412]
[394.47662354 312.11987305]
[393.51928711 325.01348877]
[404.79687500 334.90368652]
[416.07449341 344.79385376]
[418.14605713 329.93759155]
[430.93728638 322.10278320]
[445.11273193 327.00753784]
[450.32669067 341.07220459]
[442.77380371 354.03192139]
[427.96511841 356.42788696]
[438.09896851 367.48703003]
[448.23281860 378.54620361]
[458.36666870 389.60534668]
[473.52526855 397.19833374]
[470.42535400 413.86648560]
[453.55044556 415.50189209]
[447.30752563 399.73919678]
[437.17367554 388.68005371]
[427.03982544 377.62088013]
[416.90597534 366.56173706]
[406.18429565 356.07147217]
[394.90670776 346.18127441]
[383.62908936 336.29107666]
[366.94607544 338.12579346]
[353.81613159 327.13888550]
[352.63452148 309.72177124]
[341.14382935 300.07995605]
[329.65316772 290.43814087]
[318.16250610 280.79632568]
[306.67184448 271.15451050]
[295.18118286 261.51269531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[13 89]
[14 88]
[15 87]
[16 86]
[20 82]
[21 81]
[22 80]
[23 79]
[24 78]
[25 67]
[26 66]
[27 65]
[28 64]
[29 62]
[30 61]
[31 60]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[105 143]
[106 142]
[107 141]
[108 140]
[109 139]
[110 138]
[114 135]
[115 134]
[116 133]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
