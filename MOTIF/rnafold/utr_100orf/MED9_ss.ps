%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGAGUGCGCGACGCUUUUGGCGACCCGACCUCUGGCUAACCUACCCCCGGAGCCAUGGCCUCUGCUGGGGUGGCAGCCGGGCGACAGGCGGAGGAUGUAUUGCCGCCAACGUCCGACCAGCCGCUGCCUGACACCAAGCCGCUGCCGCCUCCUC\
) } def
/len { sequence length } bind def

/coor [
[224.44406128 82.00801086]
[209.77392578 85.13647461]
[195.10380554 88.26493073]
[180.43367004 91.39339447]
[165.76353455 94.52185822]
[151.09339905 97.65031433]
[145.17443848 102.14627838]
[136.09855652 100.69150543]
[121.36875916 103.52581024]
[113.67121124 125.04589081]
[85.95082092 132.50437927]
[75.18624115 142.95060730]
[70.62112427 162.54754639]
[51.74370956 166.58123779]
[41.40569687 177.44979858]
[31.06768608 188.31835938]
[20.72967339 199.18690491]
[14.19433022 214.83061218]
[-2.64717984 212.88128662]
[-5.43622351 196.15832520]
[9.86111832 188.84889221]
[20.19913101 177.98034668]
[30.53714180 167.11178589]
[40.87515259 156.24322510]
[39.70343399 146.02360535]
[44.47708893 136.66378784]
[53.82119751 131.39511108]
[64.74000549 132.18601990]
[75.50459290 121.73979187]
[73.64813995 114.47318268]
[60.97356415 122.49535370]
[49.42738724 112.92008972]
[54.96606445 98.98010254]
[69.93523407 99.93996429]
[68.07878113 92.67336273]
[53.62276840 88.67041016]
[39.16675568 84.66745758]
[24.71073914 80.66450500]
[10.25472355 76.66155243]
[3.68060160 77.96495819]
[-1.73026645 76.00868225]
[-4.69347811 72.19842529]
[-18.97776222 67.62030029]
[-32.10853577 76.11245728]
[-47.61946869 74.12624359]
[-58.18676376 62.59947968]
[-58.82087708 46.97475815]
[-49.22239304 34.62959290]
[-33.92342377 31.39299202]
[-20.14767647 38.79318237]
[-14.39963627 53.33601379]
[-0.11535236 57.91414261]
[14.25767422 62.20553970]
[28.71368980 66.20848846]
[43.16970444 70.21144104]
[57.62572098 74.21439362]
[72.08173370 78.21734619]
[91.98208618 70.23466492]
[109.78184509 75.64926910]
[118.53446198 88.79602051]
[133.26425171 85.96171570]
[147.96495056 82.98018646]
[162.63507080 79.85172272]
[177.30520630 76.72326660]
[191.97534180 73.59480286]
[206.64546204 70.46633911]
[221.31559753 67.33788300]
[236.23652649 52.00774384]
[255.62820435 58.98515701]
[270.08422852 54.98220444]
[284.54025269 50.97925568]
[298.99624634 46.97630310]
[313.45227051 42.97335052]
[327.90829468 38.97040176]
[342.36428833 34.96744919]
[356.82031250 30.96449852]
[371.27633667 26.96154594]
[385.73236084 22.95859528]
[400.18835449 18.95564461]
[414.17224121 13.52878761]
[427.54415894 6.73230553]
[440.91607666 -0.06417653]
[454.28796387 -6.86065865]
[467.65988159 -13.65714073]
[481.03176880 -20.45362282]
[483.71789551 -33.68624496]
[493.40594482 -42.80943680]
[506.38986206 -44.64210129]
[517.87780762 -38.73497772]
[531.38299561 -45.26254272]
[544.88824463 -51.79010773]
[558.32745361 -58.45246506]
[571.69940186 -65.24894714]
[581.34906006 -80.90181732]
[598.80517578 -79.34824371]
[612.03839111 -86.41091919]
[625.27166748 -93.47359467]
[638.50488281 -100.53627777]
[651.73809814 -107.59895325]
[664.97137451 -114.66162872]
[665.40332031 -130.01445007]
[673.46740723 -143.08599854]
[686.99456787 -150.36009216]
[702.34594727 -149.88005066]
[715.39215088 -141.77497864]
[722.62377930 -128.22511292]
[722.09564209 -112.87531281]
[713.94970703 -99.85457611]
[700.37725830 -92.66542053]
[685.02917480 -93.24169922]
[672.03405762 -101.42839050]
[658.80078125 -94.36571503]
[645.56756592 -87.30303955]
[632.33435059 -80.24036407]
[619.10107422 -73.17768097]
[605.86785889 -66.11500549]
[602.02996826 -54.60649109]
[591.01544189 -48.62643433]
[578.49584961 -51.87704086]
[565.12396240 -45.08055878]
[560.56054688 -39.21345139]
[551.41583252 -38.28488922]
[537.91058350 -31.75732422]
[524.40539551 -25.22975922]
[519.58038330 -9.14530373]
[504.32754517 -1.34960759]
[487.82824707 -7.08171844]
[474.45635986 -0.28523648]
[461.08444214 6.51124573]
[447.71255493 13.30772781]
[434.34063721 20.10420990]
[420.96875000 26.90069199]
[435.67697144 29.84476089]
[447.02972412 39.64860916]
[452.08450317 53.77125549]
[449.53125000 68.55235291]
[440.03167725 80.16090393]
[426.04794312 85.58817291]
[411.20437622 83.42750549]
[399.34817505 74.23891449]
[393.55224609 60.40391541]
[395.31878662 45.50830078]
[404.19131470 33.41165924]
[389.73529053 37.41461182]
[375.27929688 41.41756058]
[360.82327271 45.42051315]
[346.36724854 49.42346573]
[331.91122437 53.42641449]
[317.45523071 57.42936707]
[302.99920654 61.43231964]
[288.54318237 65.43527222]
[274.08718872 69.43822479]
[259.63116455 73.44116974]
[256.53326416 81.86572266]
[249.78207397 87.98867035]
[240.82861328 90.32139587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[8 61]
[9 60]
[11 29]
[12 28]
[14 24]
[15 23]
[16 22]
[17 21]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[42 52]
[43 51]
[69 153]
[70 152]
[71 151]
[72 150]
[73 149]
[74 148]
[75 147]
[76 146]
[77 145]
[78 144]
[79 143]
[80 132]
[81 131]
[82 130]
[83 129]
[84 128]
[85 127]
[89 124]
[90 123]
[91 122]
[92 120]
[93 119]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
