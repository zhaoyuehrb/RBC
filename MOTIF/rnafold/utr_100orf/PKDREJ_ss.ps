%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGCCUGGGCCCGCUCUCCUCCUUCUGGGCGUGGGCCUGAGCCUGAGCGUCGGCCGCCUCCCGCUGCCGCCGGUUCCUCGCGGGGCACAAGCCGCCG\
) } def
/len { sequence length } bind def

/coor [
[92.85675812 116.42625427]
[90.99232483 111.83988190]
[90.79424286 107.44817352]
[92.03292084 103.75151062]
[77.03473663 103.51823425]
[62.03654861 103.28495789]
[47.03836060 103.05168152]
[33.11952972 110.57342529]
[20.51412582 102.63912964]
[5.51593971 102.40585327]
[-9.48224640 102.17257690]
[-24.48043251 101.93930054]
[-39.47861862 101.70601654]
[-54.47680283 101.47274017]
[-69.47499084 101.23946381]
[-84.47317505 101.00618744]
[-99.47135925 100.77291107]
[-109.36209869 109.23046112]
[-121.95806122 108.62521362]
[-130.43176270 99.83805084]
[-145.41545105 99.13844299]
[-160.39912415 98.43883514]
[-170.86479187 110.05793762]
[-186.35769653 112.18027496]
[-199.56253052 103.80374146]
[-204.24438477 88.88347626]
[-198.19264221 74.46437836]
[-184.26472473 67.35470581]
[-169.03700256 70.91142273]
[-159.69950867 83.45516205]
[-144.71583557 84.15476990]
[-129.73216248 84.85437012]
[-114.70621490 75.93684387]
[-99.23808289 85.77472687]
[-84.23989868 86.00800323]
[-69.24171448 86.24127960]
[-54.24352646 86.47455597]
[-39.24534225 86.70783234]
[-24.24715424 86.94110870]
[-9.24896908 87.17438507]
[5.74921656 87.40766907]
[20.74740219 87.64094543]
[33.59346390 80.10250854]
[47.27163696 88.05348969]
[62.26982498 88.28677368]
[77.26801300 88.52005005]
[92.26619720 88.75332642]
[106.14660645 83.06700134]
[116.67040253 72.37824249]
[120.83895111 57.11606979]
[135.28170776 53.47520828]
[145.80551147 42.78644943]
[149.97406006 27.52427864]
[164.41682434 23.88341713]
[174.94062805 13.19465733]
[185.46443176 2.50589776]
[195.98823547 -8.18286133]
[200.15676880 -23.44503212]
[214.59953308 -27.08589363]
[225.12333679 -37.77465439]
[226.43692017 -53.76383972]
[239.83653259 -62.58594894]
[255.04316711 -57.47341156]
[260.39157104 -42.34813309]
[251.77891541 -28.81292915]
[235.81210327 -27.25085068]
[225.28829956 -16.56208992]
[221.87248230 -2.06445265]
[206.67698669 2.34094095]
[196.15318298 13.02970028]
[185.62937927 23.71846008]
[175.10557556 34.40721893]
[171.68977356 48.90485764]
[156.49427795 53.31024933]
[145.97047424 63.99901199]
[142.55465698 78.49665070]
[127.35916901 82.90203857]
[116.83536530 93.59079742]
[130.67053223 87.79528809]
[144.28080750 94.10088348]
[148.80514526 108.40229797]
[141.29795837 121.38852692]
[126.64683533 124.60482788]
[114.39068604 115.95759583]
[122.35705566 128.66731262]
[130.32342529 141.37704468]
[138.48648071 153.96133423]
[146.84426880 166.41714478]
[155.20205688 178.87297058]
[170.15443420 185.60783386]
[171.52861023 201.94931030]
[157.91096497 211.08668518]
[143.31015015 203.62020874]
[142.74623108 187.23075867]
[134.38845825 174.77493286]
[126.03067017 162.31910706]
[119.57619476 158.45060730]
[117.61370087 149.34339905]
[109.64733887 136.63368225]
[101.68096924 123.92396545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 47]
[5 46]
[6 45]
[7 44]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[20 32]
[21 31]
[22 30]
[48 78]
[49 77]
[51 75]
[52 74]
[54 72]
[55 71]
[56 70]
[57 69]
[59 67]
[60 66]
[84 100]
[85 99]
[86 98]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
