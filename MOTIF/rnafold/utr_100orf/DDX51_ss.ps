%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCGCGCCACGCCCGAGUCCCAGGCGUGCGGCUGGCCAUGGCGCUGUUCUACGUCGCGCGGUACCCGGGCCCCGAUGCGGCAGCUGCGGCGGGGCCGGAGGGCGCGGAGGCCGGGGCGCACGGCAGGGCCCGCGCGC\
) } def
/len { sequence length } bind def

/coor [
[5.39304686 700.16436768]
[-10.96895504 699.06121826]
[-17.95071411 684.22253418]
[-8.36999512 670.91302490]
[-7.36095953 655.94702148]
[-6.35192442 640.98101807]
[-5.34288931 626.01501465]
[-4.33385420 611.04895020]
[-3.32481933 596.08294678]
[-13.10550499 587.62109375]
[-16.24857712 574.87475586]
[-11.38062382 562.47265625]
[-0.08026752 555.05322266]
[1.26432216 540.11358643]
[2.60891175 525.17401123]
[3.95350146 510.23437500]
[-3.57621479 500.70117188]
[-2.52474332 488.19519043]
[7.08692694 479.51351929]
[8.76639366 464.60784912]
[-3.90713930 472.63165283]
[-18.58642769 469.54644775]
[-26.95755577 457.09960938]
[-24.27936363 442.34063721]
[-12.06870079 433.62857056]
[2.75867438 435.89770508]
[11.80508804 447.86325073]
[15.47019386 433.31793213]
[19.13529968 418.77258301]
[22.80040550 404.22723389]
[26.46551132 389.68188477]
[30.13061905 375.13653564]
[24.40760612 358.58425903]
[37.24090958 345.43203735]
[40.57872391 330.80810547]
[43.91653824 316.18420410]
[47.25435257 301.56027222]
[50.59216690 286.93637085]
[53.92998123 272.31243896]
[44.00746536 261.23626709]
[42.49177933 246.26406860]
[50.17270279 233.11656189]
[64.28561401 226.94145203]
[67.62342834 212.31753540]
[70.96124268 197.69361877]
[74.29905701 183.06970215]
[77.63687134 168.44577026]
[72.92564392 154.31588745]
[83.53977966 142.58343506]
[86.87759399 127.95951080]
[90.21540833 113.33559418]
[80.68695831 124.92044067]
[66.53221130 129.88462830]
[51.85514832 126.78884888]
[40.91119003 116.53069305]
[36.87339020 102.08437347]
[40.91245651 87.63840485]
[51.85731888 77.38121033]
[66.53465271 74.28672028]
[80.68896484 79.25215149]
[90.21540833 90.83559418]
[86.87759399 76.21167755]
[83.53977966 61.58775711]
[74.12049866 47.49118042]
[85.05865479 34.53768539]
[100.53390503 41.46249390]
[98.16369629 58.24994278]
[101.50151062 72.87386322]
[104.83932495 87.49777985]
[119.53445435 90.50662231]
[128.35124207 78.37136841]
[137.16801453 66.23611450]
[145.98478699 54.10085678]
[154.80157471 41.96560287]
[163.61834717 29.83034706]
[172.43513489 17.69509125]
[174.28706360 1.98264670]
[188.02757263 -3.76606154]
[196.84434509 -15.90131664]
[205.66113281 -28.03657150]
[214.47790527 -40.17182541]
[223.29469299 -52.30708313]
[227.71310425 -68.67515564]
[244.66464233 -68.96054840]
[249.63154602 -52.75048065]
[235.42994690 -43.49030304]
[226.61315918 -31.35504723]
[217.79638672 -19.21979332]
[208.97959900 -7.08453751]
[200.16282654 5.05071735]
[198.94152832 19.89516830]
[184.57038879 26.51187134]
[175.75360107 38.64712524]
[166.93682861 50.78237915]
[158.12005615 62.91763687]
[149.30326843 75.05288696]
[140.48649597 87.18814850]
[131.66970825 99.32340240]
[104.83932495 116.67340851]
[101.50151062 131.29733276]
[98.16369629 145.92124939]
[102.63618469 161.09712219]
[92.26078796 171.78358459]
[88.92297363 186.40751648]
[85.58515930 201.03143311]
[82.24734497 215.65534973]
[78.90953064 230.27926636]
[88.94554138 241.96621704]
[90.16132355 257.14431763]
[82.29954529 269.97616577]
[68.55390167 275.65026855]
[65.21608734 290.27416992]
[61.87826920 304.89810181]
[58.54045486 319.52200317]
[55.20264435 334.14593506]
[51.86483002 348.76983643]
[58.06975174 360.13885498]
[54.93175125 372.29034424]
[44.67596054 378.80166626]
[41.01085663 393.34698486]
[37.34574890 407.89233398]
[33.68064117 422.43768311]
[30.01553726 436.98303223]
[26.35043144 451.52838135]
[23.67207718 466.28732300]
[21.99261093 481.19299316]
[29.76185036 497.84573364]
[18.89311600 511.57897949]
[17.54852676 526.51861572]
[16.20393562 541.45819092]
[14.85934734 556.39782715]
[26.30603600 569.57397461]
[24.75367928 586.62060547]
[11.64120388 597.09197998]
[10.63216877 612.05798340]
[9.62313366 627.02404785]
[8.61409855 641.99005127]
[7.60506344 656.95605469]
[6.59602833 671.92211914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 139]
[5 138]
[6 137]
[7 136]
[8 135]
[9 134]
[13 131]
[14 130]
[15 129]
[16 128]
[19 126]
[20 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 120]
[32 119]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[39 111]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[49 101]
[50 100]
[51 99]
[61 69]
[62 68]
[63 67]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
