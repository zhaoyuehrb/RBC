%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGGGCGUAGAGGGUGCAGGGAGCAGACGGGAGGAUCUCAGGCCAGGGACGAUGGCGGCUCUGCAGGAGAAGAAGACGUGUGGCCAGCGCAUGGAGGAGUUCCAGCGUUACUGCUGGAACCCGGACACGGGGCAGAUGCUGGGCCGCACCC\
) } def
/len { sequence length } bind def

/coor [
[71.13134766 234.02522278]
[68.81346130 237.46989441]
[65.73703766 239.30377197]
[60.67027664 253.42213440]
[55.60351562 267.54049683]
[50.53675079 281.65884399]
[53.98799133 297.69070435]
[41.64968109 308.49340820]
[26.21441650 302.95404053]
[23.56067467 286.77102661]
[36.41839600 276.59207153]
[41.48516083 262.47372437]
[46.55192566 248.35536194]
[51.61868668 234.23701477]
[56.25394440 219.97116089]
[60.45340347 205.57101440]
[64.65287018 191.17085266]
[68.85232544 176.77069092]
[73.05178833 162.37054443]
[77.25125122 147.97038269]
[76.09790802 140.62535095]
[81.68450165 133.32254028]
[86.17494202 119.01044464]
[80.77240753 113.52143097]
[77.43405151 106.58081818]
[76.51825714 98.93373108]
[78.12333679 91.40110779]
[66.64353943 81.74636078]
[51.10187531 78.78539276]
[46.34154892 64.67197418]
[34.86174774 55.01722717]
[23.38194466 45.36248016]
[9.88351631 52.29560089]
[-5.20029211 53.52919769]
[-19.56840897 48.90633011]
[-31.04089546 39.16109467]
[-37.88969040 25.80224419]
[-39.09885025 10.87966633]
[-34.51515961 -3.33015585]
[-45.99496078 -12.98490238]
[-57.47476196 -22.63964844]
[-68.95456696 -32.29439545]
[-84.48724365 -31.12240791]
[-95.99186707 -41.07722855]
[-97.01345062 -55.89249039]
[-108.49325562 -65.54723358]
[-117.12963104 -68.70226288]
[-120.10530090 -75.51585388]
[-131.38706970 -85.40127563]
[-142.66885376 -95.28670502]
[-153.95062256 -105.17212677]
[-169.42907715 -108.44746399]
[-173.90238953 -122.65446472]
[-185.18415833 -132.53988647]
[-201.36613464 -135.19993591]
[-206.89949036 -150.63735962]
[-196.09199524 -162.97145081]
[-180.06146240 -159.51396179]
[-175.29873657 -143.82165527]
[-164.01696777 -133.93623352]
[-149.34545898 -131.36796570]
[-144.06520081 -116.45389557]
[-132.78343201 -106.56847382]
[-121.50165558 -96.68305206]
[-110.21987915 -86.79762268]
[-98.83850861 -77.02703857]
[-87.35870361 -67.37229156]
[-72.58763123 -68.90560150]
[-60.80794525 -59.27785492]
[-59.29981995 -43.77420044]
[-47.82001495 -34.11945343]
[-36.34021378 -24.46470451]
[-24.86041069 -14.80995846]
[-11.64672852 -21.76178360]
[3.26222682 -23.12869835]
[17.59740448 -18.67140007]
[29.16510391 -9.03937149]
[36.18265915 4.32354546]
[37.55313873 19.39553261]
[33.03668976 33.88267899]
[44.51649475 43.53742599]
[55.99629593 53.19217300]
[70.71684265 55.46256638]
[76.29828644 70.26655579]
[87.77808380 79.92130280]
[107.93993378 77.87565613]
[122.20018005 92.27462769]
[137.19940186 92.12261963]
[152.19863892 91.97060394]
[167.19786072 91.81859589]
[182.19709778 91.66658783]
[197.19631958 91.51457977]
[208.21847534 80.50775909]
[223.43199158 80.56726837]
[233.85737610 91.14303589]
[248.85661316 90.99102783]
[251.77250671 82.60232544]
[257.49206543 75.38534546]
[265.54486084 70.27717590]
[275.14880371 68.02667999]
[285.28500366 69.09193420]
[294.80578613 73.56707001]
[302.56433105 81.14915466]
[317.39135742 78.87773132]
[332.21838379 76.60631561]
[347.04541016 74.33489990]
[361.87243652 72.06348419]
[376.69946289 69.79206848]
[391.52648926 67.52065277]
[406.35351562 65.24923706]
[418.80480957 54.57698822]
[434.18093872 60.27849579]
[436.66421509 76.48853302]
[423.70007324 86.53160095]
[408.62490845 80.07625580]
[393.79788208 82.34767914]
[378.97088623 84.61909485]
[364.14385986 86.89051056]
[349.31683350 89.16192627]
[334.48980713 91.43334198]
[319.66278076 93.70475769]
[304.83575439 95.97617340]
[302.26431274 110.75411987]
[315.45260620 117.90036774]
[328.64089966 125.04661560]
[341.82919312 132.19285583]
[358.19879150 131.20909119]
[367.00854492 145.04093933]
[359.19573975 159.45939636]
[342.79748535 159.63198853]
[334.68295288 145.38114929]
[321.49465942 138.23490906]
[308.30633545 131.08866882]
[295.11804199 123.94242096]
[265.50402832 126.70365143]
[249.00862122 105.99025726]
[234.00939941 106.14226532]
[223.80047607 116.92714691]
[208.59129333 117.29497528]
[197.34834290 106.51380920]
[182.34910583 106.66581726]
[167.34988403 106.81782532]
[152.35064697 106.96983337]
[137.35140991 107.12184906]
[122.35218811 107.27385712]
[114.00845337 118.87571716]
[100.48703766 123.50089264]
[95.99658966 137.81298828]
[91.65141296 152.16984558]
[87.45195007 166.57000732]
[83.25248718 180.97015381]
[79.05302429 195.37031555]
[74.85356140 209.77047729]
[70.65409851 224.17062378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[15 154]
[16 153]
[17 152]
[18 151]
[19 150]
[20 149]
[22 148]
[23 147]
[27 85]
[28 84]
[30 82]
[31 81]
[32 80]
[39 73]
[40 72]
[41 71]
[42 70]
[45 67]
[46 66]
[48 65]
[49 64]
[50 63]
[51 62]
[53 60]
[54 59]
[87 145]
[88 144]
[89 143]
[90 142]
[91 141]
[92 140]
[95 137]
[96 136]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
