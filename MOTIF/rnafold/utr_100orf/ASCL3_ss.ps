%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAGUCCAACUCAGCCCAAAAUACAGCAUCCUGACGACAAAACUCAGGUUAAAGAGGAAAUGAUGGACAACAGAGGCAACUCUAGUCUACCUGACAAACUUCCUAUCUUCCCUGAUUCUGCCCGCUUGCCACUGACCAGGUCCUUCUAUCUGGAGCCCA\
) } def
/len { sequence length } bind def

/coor [
[41.63599396 166.79191589]
[41.79734039 151.79278564]
[48.66495132 138.45727539]
[60.78162384 129.61497498]
[75.57618713 127.14207458]
[60.69667435 129.03948975]
[45.81716537 130.93690491]
[30.93765640 132.83433533]
[16.05814743 134.73175049]
[10.50648689 138.47058105]
[4.76709127 138.76167297]
[0.56246305 136.40118408]
[-14.37974644 137.71662903]
[-29.32195663 139.03205872]
[-40.28563309 152.63249207]
[-57.35544205 154.09239197]
[-69.96302795 142.99638367]
[-84.87672424 144.60310364]
[-86.69335938 156.54986572]
[-91.15242004 167.77120972]
[-98.02056122 177.69123840]
[-106.94093323 185.80184937]
[-117.45169067 191.68876648]
[-129.00993347 195.05270386]
[-141.01971436 195.72454834]
[-152.86280823 193.67390442]
[-163.93046570 189.01040649]
[-173.65478516 181.97787476]
[-181.53782654 172.94157410]
[-187.17707825 162.36924744]
[-190.28601074 150.80690002]
[-205.28529358 150.95324707]
[-220.28457642 151.09957886]
[-235.28387451 151.24592590]
[-250.28315735 151.39227295]
[-258.40957642 164.50581360]
[-272.34548950 171.12351990]
[-287.64398193 169.13369751]
[-299.42337036 159.17129517]
[-303.92492676 144.41528320]
[-299.71215820 129.57426453]
[-288.12939453 119.38392639]
[-272.87261963 117.09598541]
[-258.81024170 123.44050598]
[-250.42950439 136.39299011]
[-235.43022156 136.24664307]
[-220.43092346 136.10029602]
[-205.43164062 135.95394897]
[-190.43235779 135.80760193]
[-185.04515076 118.50179291]
[-174.10848999 104.01979828]
[-158.89916992 94.07785034]
[-141.20146179 89.86069489]
[-123.09779358 91.88035583]
[-106.72370911 99.91409302]
[-94.01596069 113.02880859]
[-86.48345947 129.68940735]
[-71.56975555 128.08267212]
[-64.94939423 116.99411774]
[-52.96606445 111.67834473]
[-39.92037582 114.28903198]
[-30.63739204 124.08985138]
[-15.69518185 122.77441406]
[-0.75297236 121.45897675]
[14.16072655 119.85224152]
[29.04023552 117.95482635]
[43.91974640 116.05740356]
[58.79925537 114.15998077]
[73.67876434 112.26255798]
[75.60623169 89.23069000]
[92.74381256 76.81609344]
[111.42771912 81.29383850]
[123.15518951 71.94149017]
[134.88265991 62.58914566]
[140.84794617 47.93561554]
[155.62265015 46.04955292]
[167.35012817 36.69720840]
[179.07759094 27.34486008]
[190.80506897 17.99251366]
[202.53254700 8.64016628]
[195.23608398 -9.39893532]
[195.45605469 -29.33488655]
[203.52566528 -48.08787537]
[218.53759766 -62.62047195]
[238.43270874 -70.42815399]
[260.27856445 -69.96559143]
[266.25457764 -83.72376251]
[272.23062134 -97.48193359]
[267.70645142 -112.87386322]
[277.03717041 -125.92443085]
[293.06503296 -126.62234497]
[303.49484253 -114.43224335]
[300.32574463 -98.70531464]
[285.98876953 -91.50591278]
[280.01275635 -77.74774933]
[274.03674316 -63.98957443]
[279.20913696 -58.55850983]
[290.07125854 -68.90327454]
[300.93338013 -79.24803925]
[308.06719971 -92.44306946]
[322.82089233 -89.73587036]
[324.80529785 -74.86771393]
[311.27813721 -68.38591003]
[300.41601562 -58.04114532]
[289.55389404 -47.69638062]
[294.72628784 -42.26531601]
[308.75949097 -47.56333160]
[322.79269409 -52.86134720]
[329.07138062 -67.36492157]
[343.79721069 -73.10301971]
[358.23358154 -66.67134094]
[363.81567383 -51.88567734]
[357.23171997 -37.51810455]
[342.38787842 -32.09265137]
[328.09069824 -38.82813644]
[314.05749512 -33.53012085]
[300.02429199 -28.23210526]
[300.67739868 -14.04972553]
[297.77609253 -0.34176511]
[291.59875488 12.02733231]
[282.62716675 22.30170059]
[271.51022339 29.88012123]
[259.01754761 34.35089493]
[245.98648071 35.51346207]
[233.26611328 33.38576126]
[221.66194153 28.19712639]
[211.88488770 20.36763954]
[200.15740967 29.71998596]
[188.42994690 39.07233429]
[176.70246887 48.42467880]
[164.97500610 57.77702713]
[159.84854126 71.76161957]
[144.23501587 74.31661987]
[132.50753784 83.66896820]
[120.78006744 93.02130890]
[122.65229034 111.66433716]
[108.46335602 127.77677917]
[116.99359131 140.11514282]
[125.52382660 152.45349121]
[134.05406189 164.79185486]
[142.58428955 177.13021851]
[151.11453247 189.46858215]
[166.70510864 192.05879211]
[175.82966614 204.96298218]
[173.07476807 220.52529907]
[160.07482910 229.51292419]
[144.54249573 226.59364319]
[135.69282532 213.49940491]
[138.77616882 197.99880981]
[130.24594116 185.66044617]
[121.71569824 173.32209778]
[113.18546295 160.98373413]
[104.65523529 148.64537048]
[96.12500000 136.30700684]
[104.17037201 148.96687317]
[105.68740082 163.88995361]
[100.35417938 177.90983582]
[89.30235291 188.05168152]
[74.87693787 192.16355896]
[60.13880157 189.37298584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[12 64]
[13 63]
[14 62]
[17 58]
[18 57]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[72 135]
[73 134]
[74 133]
[76 131]
[77 130]
[78 129]
[79 128]
[80 127]
[86 96]
[87 95]
[88 94]
[106 117]
[107 116]
[108 115]
[137 154]
[138 153]
[139 152]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
