%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAACGCCAGCCUACUGACAGCGUUCAUCCUCAUGGGCCUUCCCCAUGCCCCAGCGCUGGACGCCCCCCUCUUUGGAGUCUUCCUGGUGGUUUACG\
) } def
/len { sequence length } bind def

/coor [
[85.61342621 298.71591187]
[78.09898376 284.13973999]
[87.19152069 270.49209595]
[87.65802002 255.49935913]
[74.92490387 247.77062988]
[67.72204590 234.61863708]
[68.07171631 219.52745056]
[75.98011017 206.55230713]
[89.40883636 199.22998047]
[89.87533569 184.23724365]
[90.34183502 169.24449158]
[90.80833435 154.25175476]
[91.27482605 139.25900269]
[91.74132538 124.26626587]
[84.51651764 121.06760406]
[78.47946167 115.73207092]
[74.25664520 108.68825531]
[72.32316589 100.54630280]
[72.95091248 92.04533386]
[76.17475128 83.98636627]
[81.78066254 77.15686798]
[89.31771088 72.25400543]
[98.13345337 69.81405640]
[91.38603210 56.41733170]
[84.63860321 43.02060318]
[77.89118195 29.62388039]
[71.14375305 16.22715378]
[64.39632416 2.83042908]
[57.64890289 -10.56629658]
[44.54864502 -10.08779049]
[32.30656815 -14.64224815]
[22.77362633 -23.50254822]
[17.37640381 -35.29350281]
[16.90367317 -48.20521164]
[21.39133263 -60.27088165]
[30.12242508 -69.66638947]
[24.22092247 -83.45668030]
[18.31941795 -97.24697876]
[12.41791344 -111.03727722]
[6.51640987 -124.82756805]
[0.61490619 -138.61785889]
[-13.68289280 -145.89471436]
[-16.76688194 -161.63854980]
[-6.27128696 -173.77206421]
[9.75256824 -172.98745728]
[19.01255417 -159.88659668]
[14.40520191 -144.51936340]
[20.30670547 -130.72908020]
[26.20820999 -116.93878174]
[32.10971451 -103.14848328]
[38.01121902 -89.35818481]
[43.91271973 -75.56789398]
[60.92889404 -74.21970367]
[75.05122375 -64.47635651]
[82.42773438 -48.88853073]
[80.99301147 -31.61511993]
[71.04562378 -17.31372261]
[77.79305267 -3.91699672]
[84.54048157 9.47972870]
[91.28790283 22.87645340]
[98.03533173 36.27317810]
[104.78275299 49.66990280]
[111.53018188 63.06663132]
[124.71057892 70.22742462]
[139.62178040 68.59764862]
[154.53297424 66.96786499]
[167.41078186 57.77695084]
[180.90338135 64.08560181]
[195.81457520 62.45581818]
[202.60354614 48.60253906]
[215.81625366 40.63837814]
[231.23657227 41.10466766]
[243.94392395 49.85262299]
[249.88345337 64.09079742]
[247.15986633 79.27584076]
[236.64224243 90.56226349]
[221.68673706 94.34860992]
[207.06559753 89.42667389]
[197.44435120 77.36701202]
[182.53315735 78.99679565]
[170.72190857 88.07113647]
[156.16276550 81.87905884]
[141.25155640 83.50884247]
[126.34036255 85.13862610]
[129.04032898 98.28401184]
[125.78011322 110.76744843]
[117.67201996 120.12898254]
[106.73406982 124.73276520]
[106.26757050 139.72550964]
[105.80107880 154.71824646]
[105.33457947 169.71099854]
[104.86808014 184.70373535]
[104.40158081 199.69648743]
[117.34910583 207.83950806]
[124.43554688 221.28120422]
[123.84632111 236.36494446]
[115.83974457 249.04368591]
[102.65076447 255.96585083]
[102.18426514 270.95858765]
[110.41075134 285.14511108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[64 84]
[65 83]
[66 82]
[68 80]
[69 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
