%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCGCAGAGCAGGUUCAAACACAGACGGCGGGUGAACAUGGCGUCCUCGACUUGGUCUGAGACGUGAUAGGCCUGCCUUCUGGUUGAAGAUGUGGCGAGUGAAAAAACUGAGCCUCAGCCUGUCGCCUUCGCCCCAGACGGGAAAACCAUCUAUGAGAACUCCUCUCCGUGAACUUACCCUGCAGCCCG\
) } def
/len { sequence length } bind def

/coor [
[71.50219727 374.58404541]
[71.25804138 359.58602905]
[68.49936676 355.67059326]
[68.18129730 349.97732544]
[71.25804138 344.09771729]
[71.50219727 329.09973145]
[71.62428284 314.10021973]
[71.62428284 299.10021973]
[71.62428284 284.10021973]
[71.62428284 269.10021973]
[59.48586273 260.50970459]
[54.67655182 246.25016785]
[59.23930359 231.72312927]
[71.62428284 222.56242371]
[71.62428284 207.56242371]
[71.62428284 192.56242371]
[71.62428284 177.56242371]
[71.62428284 162.56242371]
[71.62428284 147.56242371]
[71.62428284 132.56242371]
[62.14972687 120.93345642]
[47.45916367 117.90241241]
[32.76859665 114.87136078]
[23.71602631 116.20280457]
[17.86446762 111.66956329]
[3.22518468 108.39980316]
[-11.41409874 105.13003540]
[-26.05338287 101.86026764]
[-41.20830154 106.40328217]
[-51.94290161 96.07769775]
[-66.58218384 92.80793762]
[-81.22147369 89.53816986]
[-95.86075592 86.26840210]
[-110.50003815 82.99863434]
[-125.13932037 79.72887421]
[-139.77861023 76.45910645]
[-148.39750671 84.67382050]
[-159.79684448 87.67041779]
[-171.10862732 84.81479645]
[-179.54443359 76.93042755]
[-183.08276367 66.06531525]
[-197.60784912 62.32078171]
[-212.90261841 66.36810303]
[-223.29544067 55.69858170]
[-237.82052612 51.95404816]
[-252.34562683 48.20951080]
[-266.87072754 44.46497345]
[-281.39581299 40.72043991]
[-290.50259399 41.60840607]
[-296.12588501 36.79493713]
[-310.58810425 32.81447220]
[-325.08224487 28.95184326]
[-339.60736084 25.20730782]
[-354.13244629 21.46277046]
[-370.97949219 23.36366844]
[-377.46981812 7.70123339]
[-364.21618652 -2.87125111]
[-350.38790894 6.93767357]
[-335.86282349 10.68220997]
[-321.33770752 14.42674637]
[-314.06475830 13.05007362]
[-306.60763550 18.35224915]
[-292.14541626 22.33271217]
[-277.65127563 26.19534111]
[-263.12619019 29.93987846]
[-248.60108948 33.68441391]
[-234.07598877 37.42895126]
[-219.55090332 41.17348480]
[-205.29505920 36.85833359]
[-193.86331177 47.79568481]
[-179.33822632 51.54022217]
[-164.17564392 41.30249023]
[-146.03053284 45.45508957]
[-136.50883484 61.81982040]
[-121.86955261 65.08958435]
[-107.23027039 68.35935211]
[-92.59098816 71.62911987]
[-77.95170593 74.89888763]
[-63.31241989 78.16864777]
[-48.67313766 81.43841553]
[-34.56531525 76.66152954]
[-22.78361702 87.22098541]
[-8.14433384 90.49075317]
[6.49495029 93.76051331]
[21.13423347 97.03028107]
[35.79964447 100.18079376]
[50.49021149 103.21184540]
[65.18077850 106.24288940]
[54.22296524 95.99953461]
[47.20160294 82.74433136]
[44.88332748 67.92456055]
[47.52126312 53.15833664]
[54.82738495 40.05793381]
[66.00395966 30.05372620]
[79.83066559 24.23804092]
[94.79781342 23.24586678]
[109.27210236 27.18595123]
[118.36312103 15.25475407]
[127.45413208 3.32355571]
[136.54515076 -8.60764217]
[145.63615417 -20.53883934]
[154.53176880 -32.61643219]
[163.22959900 -44.83721542]
[171.92744446 -57.05800247]
[180.62527466 -69.27878571]
[174.15632629 -81.69032288]
[173.67169189 -95.61189270]
[179.20901489 -108.32185364]
[189.63426208 -117.36002350]
[202.87338257 -121.00384521]
[216.32489014 -118.59649658]
[225.22048950 -130.67408752]
[234.11610413 -142.75167847]
[243.01170349 -154.82926941]
[247.53660583 -171.16822815]
[264.48965454 -171.34324646]
[269.35089111 -155.10118103]
[255.08929443 -145.93367004]
[246.19369507 -133.85607910]
[237.29808044 -121.77848816]
[228.40248108 -109.70089722]
[235.23799133 -95.06658173]
[233.75643921 -78.88843536]
[224.26759338 -65.58627319]
[209.28172302 -58.84205627]
[192.84606934 -60.58094788]
[184.14822388 -48.36016083]
[175.45039368 -36.13937759]
[166.75254822 -23.91859245]
[166.65174866 -19.12998199]
[163.53150940 -14.35729504]
[157.56735229 -11.44782734]
[148.47634888 0.48337063]
[139.38533020 12.41456890]
[130.29431152 24.34576607]
[121.20330048 36.27696609]
[124.28353882 43.11524963]
[130.44401550 56.79182053]
[133.52424622 63.63010406]
[148.48402405 64.72786713]
[163.44380188 65.82563019]
[177.77322388 59.11902618]
[189.90011597 67.76701355]
[204.85989380 68.86477661]
[217.89454651 59.51185608]
[233.29415894 64.00980377]
[239.24545288 78.90818024]
[231.18310547 92.77822876]
[215.29187012 94.98002625]
[203.76213074 83.82455444]
[188.80235291 82.72679138]
[175.54296875 89.51190948]
[162.34603882 80.78540039]
[147.38626099 79.68764496]
[132.42648315 78.58988190]
[129.85496521 85.63525391]
[124.71192169 99.72599792]
[122.14039612 106.77136993]
[134.28999329 115.56838226]
[146.43957520 124.36539459]
[158.58917236 133.16241455]
[174.59408569 132.05694580]
[185.33065796 143.97775269]
[182.56269836 159.78021240]
[168.41354370 167.34204102]
[153.73722839 160.86242676]
[149.79216003 145.31199646]
[137.64256287 136.51498413]
[125.49297333 127.71797180]
[113.34338379 118.92095947]
[106.66360474 122.33132935]
[93.30405426 129.15205383]
[86.62428284 132.56242371]
[86.62428284 147.56242371]
[86.62428284 162.56242371]
[86.62428284 177.56242371]
[86.62428284 192.56242371]
[86.62428284 207.56242371]
[86.62428284 222.56242371]
[99.00925446 231.72312927]
[103.57200623 246.25016785]
[98.76269531 260.50970459]
[86.62428284 269.10021973]
[86.62428284 284.10021973]
[86.62428284 299.10021973]
[86.62428284 314.10021973]
[89.75750732 322.69699097]
[86.50021362 329.34387207]
[86.25605774 344.34188843]
[86.25605774 359.34188843]
[86.50021362 374.33990479]
[89.00421906 393.55914307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 191]
[2 190]
[5 189]
[6 188]
[7 186]
[8 185]
[9 184]
[10 183]
[14 179]
[15 178]
[16 177]
[17 176]
[18 175]
[19 174]
[20 173]
[21 88]
[22 87]
[23 86]
[25 85]
[26 84]
[27 83]
[28 82]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 74]
[41 71]
[42 70]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[50 63]
[51 62]
[52 60]
[53 59]
[54 58]
[97 136]
[98 135]
[99 134]
[100 133]
[101 132]
[102 129]
[103 128]
[104 127]
[105 126]
[111 121]
[112 120]
[113 119]
[114 118]
[139 155]
[140 154]
[141 153]
[143 151]
[144 150]
[158 170]
[159 169]
[160 168]
[161 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
