%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCAGCCCUCCGCGGGCCAUGUCCUCUCCGGCGGUGGCGAGGACCUCCCCAGGAGGGAGUCGGGAGAUGGCCCCAGCGCCGCAGGGCCGAGGCCGGUUCUGGGAAGUGGGCGGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[189.67863464 177.78953552]
[177.74923706 168.69615173]
[165.81985474 159.60278320]
[153.89045715 150.50939941]
[141.96105957 141.41601562]
[130.03166199 132.32263184]
[118.10227203 123.22925568]
[97.72515106 129.36180115]
[78.53578949 120.16378784]
[70.55345917 100.43772125]
[55.99286270 96.83367920]
[41.43227005 93.22963715]
[26.87167358 89.62559509]
[12.31108093 86.02156067]
[-2.24951315 82.41751862]
[-13.75154877 88.42015076]
[-25.85959244 85.03725433]
[-32.16662598 74.62981415]
[-46.63042831 70.65509033]
[-61.09423065 66.68036652]
[-71.24730682 76.09957886]
[-84.62965393 79.21759796]
[-97.69219208 75.31811523]
[-107.02529907 65.53144073]
[-110.24875641 52.50957870]
[-124.60633087 48.16676712]
[-138.96391296 43.82395554]
[-153.32148743 39.48114395]
[-167.67906189 35.13833237]
[-182.03663635 30.79552078]
[-197.48588562 34.20600891]
[-207.42796326 23.11527443]
[-221.78553772 18.77246284]
[-236.14311218 14.42965031]
[-251.97889709 18.69107246]
[-263.39459229 6.91762638]
[-258.64669800 -8.77917385]
[-242.61944580 -12.25180721]
[-231.80029297 0.07207482]
[-217.44271851 4.41488647]
[-203.08514404 8.75769806]
[-188.66285706 5.03658295]
[-177.69383240 16.43794441]
[-163.33624268 20.78075600]
[-148.97866821 25.12356758]
[-134.62109375 29.46638107]
[-120.26351929 33.80919266]
[-105.90594482 38.15200424]
[-93.20691681 27.83411026]
[-76.69689941 27.06893158]
[-62.82291794 36.35198593]
[-57.11950684 52.21656799]
[-42.65570450 56.19128799]
[-28.19190407 60.16601181]
[-11.53997898 54.78691483]
[1.35452724 67.85692596]
[15.91512108 71.46096802]
[30.47571564 75.06500244]
[45.03630829 78.66904449]
[59.59690094 82.27308655]
[74.15749359 85.87712860]
[78.75428772 79.60611725]
[84.83205414 74.75670624]
[91.96712494 71.66691589]
[99.66214752 70.55213928]
[107.38071442 71.49008179]
[114.71421051 58.40497971]
[122.04770660 45.31988144]
[117.52193451 30.17745972]
[125.10245514 16.30982590]
[140.29188538 11.94440079]
[154.07859802 19.67111397]
[158.28318787 34.90584183]
[150.41114807 48.61009216]
[135.13281250 52.65337753]
[127.79930878 65.73847961]
[120.46581268 78.82357788]
[127.08235168 88.43121338]
[129.44943237 99.85408783]
[127.19565582 111.29985809]
[139.12504578 120.39324188]
[151.05444336 129.48661804]
[162.98384094 138.58000183]
[174.91322327 147.67338562]
[186.84262085 156.76676941]
[198.77201843 165.86015320]
[211.89485168 162.53083801]
[224.34410095 167.33282471]
[231.61584473 178.28684998]
[231.21986389 191.23345947]
[242.91313171 200.62852478]
[254.60639954 210.02360535]
[266.29968262 219.41868591]
[281.80218506 217.89892578]
[293.52697754 227.59344482]
[294.88031006 242.38208008]
[306.57357788 251.77716064]
[318.26684570 261.17224121]
[329.74496460 257.58041382]
[341.40182495 260.00515747]
[350.31317139 267.71829224]
[354.30197144 278.68026733]
[352.46969604 290.07846069]
[363.66799927 300.05834961]
[379.82702637 302.85427856]
[385.23046875 318.33767700]
[374.31967163 330.58050537]
[358.31878662 326.98840332]
[353.68811035 311.25665283]
[342.48980713 301.27676392]
[324.40429688 303.49432373]
[310.12200928 291.67733765]
[308.87176514 272.86550903]
[297.17849731 263.47042847]
[285.48522949 254.07536316]
[270.75222778 255.93928528]
[258.75976562 246.57791138]
[256.90460205 231.11195374]
[245.21133423 221.71687317]
[233.51805115 212.32180786]
[221.82478333 202.92672729]
[205.25642395 205.48768616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[4 83]
[5 82]
[6 81]
[7 80]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[18 54]
[19 53]
[20 52]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
[34 39]
[66 77]
[67 76]
[68 75]
[90 121]
[91 120]
[92 119]
[93 118]
[96 115]
[97 114]
[98 113]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
