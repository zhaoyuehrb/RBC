%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGUGGGGAGCGGUCCUGUCUCGGGCCAUGGACACAAUGAGGUCACUCCGCUUCAUUUCUGCAGAAGCUCUGGUGUCCCACCCCCAGGUGGCCCGGCAGAGCCUGGACAGCGUGGCCCACAACCUCU\
) } def
/len { sequence length } bind def

/coor [
[203.13079834 610.31390381]
[201.67190552 595.38500977]
[192.73344421 583.47058105]
[199.09185791 568.98333740]
[197.63296509 554.05444336]
[196.17407227 539.12554932]
[194.71516418 524.19665527]
[193.25627136 509.26779175]
[181.62254333 500.03784180]
[179.93034363 484.91860962]
[189.69044495 472.77865601]
[188.23155212 457.84979248]
[186.77265930 442.92089844]
[184.95065308 428.03195190]
[182.76663208 413.19180298]
[180.58262634 398.35165405]
[178.39860535 383.51150513]
[163.10179138 373.59375000]
[159.75161743 355.35168457]
[170.90026855 340.13504028]
[167.99630737 325.41882324]
[165.09234619 310.70260620]
[161.83088684 296.06146240]
[158.21388245 281.50408936]
[154.59686279 266.94671631]
[150.97985840 252.38934326]
[147.36283875 237.83197021]
[143.74583435 223.27459717]
[140.12881470 208.71720886]
[136.51181030 194.15983582]
[131.32434082 180.08538818]
[124.62864685 166.66273499]
[117.93295288 153.24008179]
[111.23725891 139.81741333]
[104.54157257 126.39476013]
[97.84587860 112.97210693]
[55.76368713 109.62680054]
[44.71481705 99.48173523]
[33.66594696 89.33666229]
[22.61707497 79.19158936]
[11.56820393 69.04652405]
[0.51933265 58.90145111]
[-10.52953815 48.75638199]
[-21.57840919 38.61131287]
[-37.35568237 39.53498459]
[-49.10934830 28.96961975]
[-49.86616135 13.18346214]
[-39.17712021 1.54215884]
[-23.38384247 0.95228851]
[-11.85620117 11.76381111]
[-11.43334007 27.56244278]
[-0.38446870 37.70751190]
[10.66440296 47.85258102]
[21.71327400 57.99765015]
[32.76214600 68.14272308]
[43.81101608 78.28778839]
[54.85988617 88.43286133]
[65.90876007 98.57793427]
[73.00705719 96.15632629]
[68.16408539 81.95964813]
[82.36084747 77.11691284]
[87.20365143 91.31312561]
[94.30194855 88.89151764]
[96.84669495 74.10895538]
[99.39144135 59.32638550]
[101.93618011 44.54381943]
[98.66458893 27.90852356]
[113.74410248 20.15967751]
[125.36454010 32.50478363]
[116.71875000 47.08856201]
[114.17400360 61.87112808]
[111.62926483 76.65369415]
[109.08451843 91.43626404]
[111.26853943 106.27641296]
[117.96422577 119.69906616]
[124.65991974 133.12171936]
[131.35560608 146.54438782]
[138.05130005 159.96704102]
[144.74699402 173.38969421]
[148.74818420 158.93319702]
[159.81384277 148.80644226]
[174.56755066 146.09938049]
[188.50753784 151.63800049]
[197.38037109 163.73234558]
[198.47868347 178.69207764]
[191.46736145 191.95259094]
[178.48574829 199.46775818]
[163.49488831 198.94448853]
[151.06918335 190.54283142]
[154.68620300 205.10020447]
[158.30320740 219.65757751]
[161.92022705 234.21495056]
[165.53723145 248.77233887]
[169.15425110 263.32971191]
[172.77125549 277.88708496]
[176.38827515 292.44445801]
[180.80445862 297.58822632]
[181.73803711 303.32672119]
[179.80856323 307.79864502]
[182.71252441 322.51486206]
[185.61648560 337.23107910]
[196.69981384 341.86117554]
[204.05819702 351.20199585]
[205.92637634 362.82330322]
[201.94848633 373.77310181]
[193.23875427 381.32748413]
[195.42277527 396.16763306]
[197.60679626 411.00778198]
[199.79080200 425.84793091]
[203.68577576 431.39685059]
[204.05680847 437.19894409]
[201.70153809 441.46200562]
[203.16043091 456.39089966]
[204.61932373 471.31976318]
[216.54504395 481.34051514]
[217.81190491 496.50131226]
[208.18516541 507.80889893]
[209.64405823 522.73779297]
[211.10295105 537.66668701]
[212.56184387 552.59552002]
[214.02073669 567.52441406]
[223.06356812 580.50665283]
[216.60079956 593.92608643]
[218.05969238 608.85498047]
[229.49049377 620.11181641]
[227.67329407 636.05163574]
[214.00210571 644.44677734]
[198.96427917 638.85717773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[4 121]
[5 120]
[6 119]
[7 118]
[8 117]
[11 114]
[12 113]
[13 112]
[14 109]
[15 108]
[16 107]
[17 106]
[20 101]
[21 100]
[22 99]
[23 96]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[30 89]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 74]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
