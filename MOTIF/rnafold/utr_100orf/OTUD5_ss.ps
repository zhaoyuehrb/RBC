%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:01:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGUUCUCUCCCGGCGUGCCCCGCGCCGGGUUUGUUGGGGGGUACUCGGCAGUGCAGCCAUGACUAUACUCCCCAAAAAGAAGCCGCCGCCUCCCGACGCCGACCCCGCCAACGAGCCGCCGCCGCCCGGGCCGAUGCCCCCGGCGCCGCGGCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[88.50568390 136.21226501]
[84.76442719 121.68682861]
[77.50150299 123.55764008]
[72.64550018 137.74986267]
[67.78948975 151.94207764]
[74.96934509 166.02133179]
[70.01133728 181.02778625]
[55.85697174 188.05839539]
[40.90377045 182.94200134]
[34.02321243 168.71409607]
[39.29740524 153.81582642]
[53.59726715 147.08607483]
[58.45327377 132.89385986]
[63.30928421 118.70162964]
[50.85747910 110.33786774]
[39.55593872 120.20069122]
[28.25440025 130.06350708]
[16.95286179 139.92633057]
[5.65132332 149.78915405]
[-5.65021515 159.65197754]
[-13.60838795 174.62207031]
[-30.19648933 171.11903381]
[-31.42240334 154.20947266]
[-15.51303577 148.35043335]
[-4.21149731 138.48760986]
[7.09004116 128.62478638]
[18.39158058 118.76197052]
[29.69311905 108.89915466]
[40.99465561 99.03633118]
[69.04174805 88.05537415]
[94.47331238 95.15142059]
[91.29776001 80.49141693]
[88.12220001 65.83140564]
[84.94664001 51.17139816]
[81.77108002 36.51139069]
[78.59552765 21.85138321]
[75.41996765 7.19137573]
[72.24440765 -7.46863222]
[69.06884766 -22.12863922]
[65.89329529 -36.78864670]
[62.57573700 -51.41717529]
[59.11650085 -66.01284790]
[55.65726089 -80.60852051]
[52.19802475 -95.20419312]
[48.73878479 -109.79986572]
[31.11793137 -119.35703278]
[26.20439339 -138.47839355]
[36.70732498 -154.83618164]
[32.40527725 -169.20602417]
[28.10322762 -183.57586670]
[23.80117989 -197.94570923]
[12.43099308 -208.94703674]
[16.19302177 -223.35871887]
[11.89097404 -237.72856140]
[6.40584230 -245.09567261]
[7.64773893 -252.41889954]
[3.62514973 -266.86947632]
[-7.52956820 -278.08920288]
[-3.48878431 -292.42523193]
[-7.51137352 -306.87579346]
[-22.54874992 -306.04428101]
[-37.41323471 -308.46527100]
[-51.40959549 -314.02548218]
[-63.88319397 -322.46487427]
[-74.25061798 -333.38873291]
[-82.02695465 -346.28610229]
[-86.84851074 -360.55380249]
[-88.48975372 -375.52444458]
[-86.87393188 -390.49786377]
[-82.07661438 -404.77371216]
[-74.32218933 -417.68426514]
[-63.97333145 -428.62573242]
[-51.51408005 -437.08630371]
[-37.52718353 -442.67025757]
[-22.66683006 -445.11648560]
[-7.62806368 -444.31048584]
[6.88572311 -440.29003906]
[20.19569397 -433.24316406]
[31.67931938 -423.49942017]
[40.79948807 -411.51455688]
[47.12963104 -397.84915161]
[50.37368011 -383.14233398]
[50.37990570 -368.08200073]
[47.14801025 -353.37252808]
[40.82916260 -339.70187378]
[31.71890068 -327.70950317]
[20.24333382 -317.95626831]
[6.93918991 -310.89837646]
[10.96177864 -296.44781494]
[21.82877350 -286.26165771]
[18.07571220 -270.89205933]
[22.09830284 -256.44149780]
[26.26081657 -242.03060913]
[30.56286430 -227.66076660]
[41.62533951 -217.68725586]
[38.17102051 -202.24775696]
[42.47307205 -187.87791443]
[46.77511978 -173.50807190]
[51.07716751 -159.13822937]
[61.17169189 -156.85534668]
[69.45652008 -150.51844788]
[74.37837982 -141.23043823]
[74.97917938 -130.65495300]
[71.08173370 -120.71840668]
[63.33445740 -113.25910950]
[66.79369354 -98.66343689]
[70.25293732 -84.06775665]
[73.71217346 -69.47208405]
[77.17140961 -54.87641525]
[81.79670715 -49.06447220]
[80.55329895 -39.96420670]
[83.72885895 -25.30419731]
[86.90441895 -10.64419079]
[90.07997131 4.01581764]
[93.25553131 18.67582512]
[96.43109131 33.33583450]
[99.60665131 47.99584198]
[102.78220367 62.65584946]
[105.95776367 77.31585693]
[109.13332367 91.97586823]
[116.63332367 104.96624756]
[127.74148560 115.04636383]
[138.84963989 125.12648010]
[149.95780945 135.20660400]
[161.06596375 145.28671265]
[169.56872559 148.76002502]
[172.28936768 155.67161560]
[183.19998169 165.96524048]
[194.11058044 176.25886536]
[205.12048340 186.44622803]
[216.22863770 196.52633667]
[227.33680725 206.60646057]
[238.54217529 216.57839966]
[249.84371948 226.44122314]
[261.14526367 236.30403137]
[272.44677734 246.16685486]
[287.86758423 243.57196045]
[301.32226562 251.54096985]
[306.45800781 266.31115723]
[300.84982300 280.90847778]
[287.14572144 288.44055176]
[271.81640625 285.35095215]
[262.09985352 273.09848022]
[262.58398438 257.46838379]
[251.28242493 247.60557556]
[239.98089600 237.74275208]
[228.67935181 227.87992859]
[221.53683472 225.84118652]
[217.25668335 217.71461487]
[206.14852905 207.63450623]
[195.04035950 197.55438232]
[187.93872070 195.37751770]
[183.81695557 187.16947937]
[172.90635681 176.87585449]
[161.99574280 166.58222961]
[150.98583984 156.39488220]
[139.87768555 146.31475830]
[128.76953125 136.23463440]
[117.66136169 126.15452576]
[106.55320740 116.07440948]
[99.29028320 117.94521332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[31 120]
[32 119]
[33 118]
[34 117]
[35 116]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[48 99]
[49 98]
[50 97]
[51 96]
[53 94]
[54 93]
[56 92]
[57 91]
[59 89]
[60 88]
[121 160]
[122 159]
[123 158]
[124 157]
[125 156]
[127 155]
[128 154]
[129 153]
[130 151]
[131 150]
[132 149]
[133 147]
[134 146]
[135 145]
[136 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
