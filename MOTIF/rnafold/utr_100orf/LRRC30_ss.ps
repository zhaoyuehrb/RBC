%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGCAGAGGAGAGUGACUAGAAGGGAAGGUACAAUGGGGGCCAGGCAGUCAAGGGCCAGCUCCAAGGAUAAGGGCCCCAAGAGGAUGCUGUUCACGGGGAGGAGACAGAAGUUUUCUCCGUGGGACGAUGCCC\
) } def
/len { sequence length } bind def

/coor [
[39.50576019 214.16973877]
[32.51132202 227.43916321]
[25.51688576 240.70860291]
[25.92656136 256.52450562]
[13.14724922 264.17553711]
[6.15281200 277.44497681]
[13.12568665 291.30709839]
[10.58568668 306.61486816]
[-0.49050674 317.48214722]
[-15.84387016 319.73022461]
[-29.57072258 312.49468994]
[-36.39281082 298.55770874]
[-33.68689728 283.27841187]
[-22.49346733 272.53192139]
[-7.11662054 270.45053101]
[-0.12218332 257.18109131]
[-1.03214872 242.31431580]
[12.24745274 233.71415710]
[19.24188995 220.44473267]
[26.23632812 207.17529297]
[22.20311165 199.09065247]
[22.39770889 189.91938782]
[26.90414238 181.77067566]
[34.80012894 176.57824707]
[44.34309006 175.64215088]
[52.23957062 162.88888550]
[60.13605499 150.13563538]
[52.51496887 142.98706055]
[46.15756989 134.69450378]
[41.23304749 125.47864532]
[37.87245560 115.58473206]
[36.16522217 105.27607727]
[36.15678406 94.82701111]
[37.84737015 84.51560974]
[41.19198227 74.61628723]
[46.10161591 65.39248657]
[52.44561386 57.08967209]
[60.05514526 49.92880630]
[68.72770691 44.10045242]
[62.98745728 30.24225807]
[57.24720383 16.38406563]
[51.50695419 2.52587223]
[45.76670074 -11.33232117]
[40.02645111 -25.19051361]
[27.49193192 -26.50228882]
[16.78536415 -33.01239777]
[9.93275356 -43.41632843]
[8.19965363 -55.67987823]
[11.85781193 -67.43679047]
[20.14473534 -76.44531250]
[15.05062866 -90.55382538]
[9.95652103 -104.66233826]
[-4.80342531 -109.07257080]
[-14.02848434 -121.18668365]
[-14.34764576 -136.23200989]
[-5.84804392 -148.43426514]
[-10.94215107 -162.54277039]
[-25.35321617 -169.03097534]
[-30.87732697 -183.83839417]
[-24.23712730 -198.18005371]
[-9.37212944 -203.54730225]
[4.89852762 -196.75584412]
[10.10831547 -181.83493042]
[3.16635942 -167.63687134]
[8.26046658 -153.52836609]
[22.59486389 -149.57070923]
[31.96098709 -137.79193115]
[32.60289764 -122.57872772]
[24.06503105 -109.75643921]
[29.15913963 -95.64793396]
[34.25324631 -81.53942108]
[51.36734009 -77.48107910]
[62.77156067 -63.88618851]
[63.80963135 -46.01545334]
[53.88464355 -30.93076515]
[59.62489319 -17.07257271]
[65.36514282 -3.21437931]
[71.10540009 10.64381409]
[76.84564972 24.50200653]
[82.58589935 38.36019897]
[94.58908081 36.17650986]
[106.78857422 36.30831146]
[118.74177551 38.75082397]
[130.01502991 43.41543198]
[140.19935608 50.13290405]
[148.92527771 58.65953827]
[155.87619019 68.68598938]
[160.79994202 79.84849548]
[163.51789856 91.74209595]
[163.93144226 103.93528748]
[162.02558899 115.98570251]
[176.01266479 121.40432739]
[189.99975586 126.82295227]
[203.98683167 132.24157715]
[217.97392273 137.66020203]
[227.19825745 137.85350037]
[232.21911621 143.36891174]
[246.07730103 149.10916138]
[261.78793335 147.24192810]
[270.58547974 159.26077271]
[284.44366455 165.00102234]
[298.30184937 170.74127197]
[312.16003418 176.48152161]
[326.01824951 182.22177124]
[339.87643433 187.96202087]
[353.73461914 193.70228577]
[367.59280396 199.44253540]
[381.45101929 205.18278503]
[397.63037109 202.50697327]
[407.82684326 215.35079956]
[401.55117798 230.50163269]
[385.25921631 232.37359619]
[375.71075439 219.04096985]
[361.85256958 213.30072021]
[347.99438477 207.56047058]
[334.13616943 201.82022095]
[320.27798462 196.07997131]
[306.41979980 190.33972168]
[292.56161499 184.59947205]
[278.70339966 178.85920715]
[264.84521484 173.11895752]
[250.12580872 175.39677429]
[240.33705139 162.96734619]
[226.47886658 157.22709656]
[212.55529785 151.64729309]
[198.56820679 146.22866821]
[184.58113098 140.81004333]
[170.59403992 135.39141846]
[156.60696411 129.97279358]
[141.44068909 148.84040833]
[120.35531616 160.73200989]
[96.36254120 163.94908142]
[72.88931274 158.03211975]
[64.99282837 170.78536987]
[57.09634781 183.53863525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[5 16]
[6 15]
[25 135]
[26 134]
[27 133]
[39 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[50 71]
[51 70]
[52 69]
[56 65]
[57 64]
[91 129]
[92 128]
[93 127]
[94 126]
[95 125]
[97 124]
[98 123]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
