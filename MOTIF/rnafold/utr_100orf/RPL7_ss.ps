%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCUUUUUCCGGCUGGAACCAUGGAGGGUGUAGAAGAGAAGAAGAAGGAGGUUCCUGCUGUGCCAGAAACCCUUAAGAAAAAGCGAAGGAAUUUCGCAGAGCUGAAGAUCAAGCGCCUGA\
) } def
/len { sequence length } bind def

/coor [
[87.55870819 106.41539764]
[72.99811554 110.01943970]
[58.43752289 113.62348175]
[43.87693024 117.22752380]
[29.36354828 121.01721191]
[14.89974594 124.99193573]
[0.43594375 128.96665955]
[-14.02785873 132.94137573]
[-28.49166107 136.91610718]
[-42.95546341 140.89082336]
[-57.41926575 144.86553955]
[-63.12267685 160.73013306]
[-76.99665833 170.01318359]
[-93.50667572 169.24800110]
[-106.20570374 158.93011475]
[-120.56327820 163.27291870]
[-134.92085266 167.61573792]
[-141.74020386 178.65316772]
[-153.87663269 181.93276978]
[-164.61636353 176.20986938]
[-179.08015442 180.18458557]
[-193.54396057 184.15930176]
[-201.13972473 198.01860046]
[-216.33393860 202.36734009]
[-230.11213684 194.62547302]
[-234.29998779 179.38613892]
[-226.41288757 165.69053650]
[-211.13012695 161.66404724]
[-197.51869202 169.69551086]
[-183.05488586 165.72077942]
[-168.59107971 161.74606323]
[-157.02641296 148.61291504]
[-139.26367188 153.25816345]
[-124.90608978 148.91534424]
[-110.54851532 144.57254028]
[-107.32505798 131.55067444]
[-97.99195099 121.76399231]
[-84.92941284 117.86451721]
[-71.54705811 120.98252869]
[-61.39398956 130.40174866]
[-46.93018723 126.42702484]
[-32.46638489 122.45230103]
[-18.00258064 118.47757721]
[-3.53877878 114.50285339]
[10.92502403 110.52812958]
[25.38882637 106.55340576]
[31.07077980 101.69065094]
[40.27288818 102.66692352]
[54.83348465 99.06288910]
[69.39408112 95.45884705]
[83.95467377 91.85480499]
[93.49830627 80.28247070]
[94.26421356 65.30203247]
[95.03012848 50.32160187]
[95.79603577 35.34116745]
[88.77347565 21.16392517]
[97.15054321 8.84832668]
[97.91645050 -6.13210630]
[98.68235779 -21.11253929]
[87.90752411 -32.67448044]
[88.54758453 -48.46580505]
[100.22279358 -59.11779785]
[116.00646973 -58.31082153]
[126.53443146 -46.52363968]
[125.56062317 -30.74938011]
[113.66279602 -20.34663010]
[112.89688110 -5.36619759]
[112.13097382 9.61423588]
[119.20832062 22.71997643]
[110.77646637 36.10707474]
[110.01055908 51.08750916]
[109.24465179 66.06793976]
[108.47874451 81.04837799]
[113.67948151 86.45228577]
[121.53363800 73.67292023]
[122.58463287 58.70978165]
[132.57388306 47.51983261]
[147.32235718 44.78440094]
[160.66000366 51.64786530]
[167.00700378 65.23887634]
[163.70806885 79.87162018]
[152.14331055 89.42444611]
[137.15179443 89.90120697]
[124.08097076 97.26010895]
[129.28172302 102.66402435]
[144.28048706 102.47246552]
[159.27926636 102.28091431]
[174.27804565 102.08935547]
[189.27682495 101.89780426]
[201.45974731 91.45960236]
[217.18885803 94.61787415]
[224.39811707 108.94986725]
[217.55722046 123.46129608]
[201.91389465 127.02024078]
[189.46838379 116.89658356]
[174.46960449 117.08813477]
[159.47082520 117.27969360]
[144.47204590 117.47124481]
[129.47326660 117.66280365]
[126.31810760 124.46684265]
[134.94815063 136.73559570]
[120.00778198 138.07492065]
[116.85262299 144.87895203]
[126.39626312 156.45129395]
[135.93989563 168.02363586]
[151.41899109 166.93865967]
[164.56170654 175.18783569]
[170.31439209 189.59915161]
[166.46504211 204.63117981]
[154.49377441 214.50379944]
[139.00382996 215.42079163]
[125.95137024 207.02954102]
[120.35535431 192.55665588]
[124.36756134 177.56727600]
[114.82392120 165.99493408]
[105.28028870 154.42259216]
[108.10754395 169.15374756]
[93.40455627 172.12394714]
[79.04079437 167.80162048]
[68.41864014 157.21060181]
[64.05417633 142.85958862]
[66.98122406 128.14794922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[15 35]
[16 34]
[17 33]
[20 31]
[21 30]
[22 29]
[52 73]
[53 72]
[54 71]
[55 70]
[57 68]
[58 67]
[59 66]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
