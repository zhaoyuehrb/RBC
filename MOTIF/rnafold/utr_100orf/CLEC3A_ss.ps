%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGAUGUAGCUGUGUAGUCUCCUUCCAUAGCUGCUCUAAGGGGGCUGGCAACAUGGCUCAGCAGGCUUGCCCCAGAGCCAUGGCAAAGAAUGGACUUGUAAUUUGCAUCCUGGUGAUCACCUUACUCCUGGACCAGACCACCAGCCACACAU\
) } def
/len { sequence length } bind def

/coor [
[-3.76752329 253.66976929]
[-14.95325470 253.19343567]
[-25.61608315 249.83158875]
[-35.02591324 243.82293701]
[-46.50571442 253.47767639]
[-57.98551941 263.13241577]
[-62.57437515 271.10009766]
[-69.79721832 272.86364746]
[-81.47032928 282.28375244]
[-93.14344788 291.70385742]
[-104.81656647 301.12396240]
[-116.48968506 310.54406738]
[-128.16279602 319.96417236]
[-139.83592224 329.38427734]
[-151.50903320 338.80438232]
[-163.18214417 348.22448730]
[-169.37687683 365.53649902]
[-186.77442932 367.63723755]
[-198.25422668 377.29199219]
[-203.33399963 392.88455200]
[-219.43132019 396.01644897]
[-229.98661804 383.46585083]
[-224.14154053 368.14373779]
[-207.90898132 365.81219482]
[-196.42916870 356.15744019]
[-195.06201172 344.10137939]
[-185.52557373 335.96615601]
[-172.60224915 336.55136108]
[-160.92913818 327.13125610]
[-149.25602722 317.71115112]
[-137.58290100 308.29104614]
[-125.90978241 298.87094116]
[-114.23667145 289.45083618]
[-102.56355286 280.03076172]
[-90.89043427 270.61065674]
[-79.21731567 261.19055176]
[-67.64026642 251.65263367]
[-56.16046143 241.99787903]
[-44.68066025 232.34313965]
[-50.34487534 214.26959229]
[-47.61179352 195.47842407]
[-36.97951508 179.68667603]
[-20.51286888 170.03652954]
[-1.44252384 168.47006226]
[16.46882439 175.33854675]
[26.91297340 164.57194519]
[37.35712051 153.80534363]
[47.80126953 143.03874207]
[58.24541855 132.27214050]
[68.68956757 121.50553894]
[61.07279968 105.00302887]
[61.89337158 86.25382233]
[71.50846863 69.45152283]
[88.24963379 58.59952545]
[83.18286896 44.48117065]
[78.11610413 30.36281586]
[73.04934692 16.24446297]
[67.98258209 2.12610960]
[62.91581726 -11.99224377]
[57.84905243 -26.11059761]
[52.78228760 -40.22895050]
[35.58907318 -52.95530319]
[39.89289093 -73.10808563]
[33.97755432 -86.89244843]
[28.06221581 -100.67681885]
[14.60970497 -110.05561829]
[16.27514076 -126.36997986]
[31.34526634 -132.83708191]
[44.31722641 -122.80412292]
[41.84658432 -106.59215546]
[47.76192093 -92.80778503]
[53.67725754 -79.02342224]
[62.44726944 -77.08819580]
[69.42699432 -71.21943665]
[72.94396973 -62.65620804]
[72.07861328 -53.30065918]
[66.90064240 -45.29571533]
[71.96740723 -31.17736053]
[77.03417206 -17.05900764]
[82.10093689 -2.94065404]
[87.16769409 11.17770004]
[92.23445892 25.29605293]
[97.30122375 39.41440582]
[102.36798859 53.53276062]
[117.02958679 56.70098114]
[127.47373199 45.93437576]
[137.91787720 35.16777420]
[148.36203003 24.40117073]
[158.80618286 13.63456631]
[158.73809814 -1.94211876]
[169.48332214 -12.71220493]
[184.33372498 -12.68112278]
[194.77787781 -23.44772720]
[194.28706360 -39.24439240]
[205.17066956 -50.70400238]
[220.97164917 -51.02777100]
[232.31555176 -40.02361679]
[232.47224426 -24.22010422]
[221.34877014 -12.99317932]
[205.54447937 -13.00357819]
[195.10032654 -2.23697424]
[195.58280945 12.60562611]
[185.14433289 23.67327499]
[169.57278442 24.07871437]
[159.12863159 34.84531784]
[148.68447876 45.61192322]
[138.24034119 56.37852478]
[127.79618835 67.14512634]
[134.17979431 75.98503876]
[137.96536255 85.86836243]
[139.05053711 96.07411194]
[137.52369690 105.89940643]
[151.58998108 111.10898590]
[165.65626526 116.31856537]
[179.72254944 121.52813721]
[193.78883362 126.73771667]
[190.32263184 112.14369965]
[199.40710449 100.20751190]
[214.39710999 99.66024780]
[224.32777405 110.90222931]
[221.93499756 125.71015167]
[208.96952820 133.25227356]
[222.43659973 139.85818481]
[236.09027100 132.48545837]
[251.46537781 134.57958984]
[262.64990234 145.33532715]
[265.34317017 160.61688232]
[258.50952148 174.54818726]
[244.77668762 181.77236938]
[229.42518616 179.51156616]
[218.35800171 168.63513184]
[215.83068848 153.32525635]
[202.36361694 146.71934509]
[188.57925415 140.80400085]
[174.51296997 135.59442139]
[160.44668579 130.38484192]
[146.38040161 125.17526245]
[132.31411743 119.96568298]
[124.45839691 129.06231689]
[114.15382385 135.24911499]
[102.43212128 137.90667725]
[90.46690369 136.76889038]
[79.45616913 131.94969177]
[69.01202393 142.71629333]
[58.56787491 153.48289490]
[48.12372589 164.24949646]
[37.67957687 175.01609802]
[27.23542786 185.78269958]
[32.55878830 195.77388000]
[35.09961319 206.78988647]
[34.69126511 218.07209778]
[31.36990356 228.84573364]
[25.37146950 238.37303162]
[17.11492348 246.00379944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 39]
[5 38]
[6 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[18 25]
[19 24]
[45 148]
[46 147]
[47 146]
[48 145]
[49 144]
[50 143]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[63 72]
[64 71]
[65 70]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[92 101]
[93 100]
[112 138]
[113 137]
[114 136]
[115 135]
[116 134]
[122 133]
[123 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
