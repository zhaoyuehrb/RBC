%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGUGUCCCGCAGCCACCUGUCCCCGCAGAUGCUGCAGGUGACAUGAGCUCUCCAGAUGGGCCCAGCUUCCCGUCCGGGCCGCUCUCAGGGGGCGCCUCUCCCAGCGGCGACGAGGGCUUCUUCCCCUUUGUGCUGGAGCGGC\
) } def
/len { sequence length } bind def

/coor [
[97.14860535 116.72563934]
[87.25961304 113.15148926]
[73.25205231 118.51696014]
[59.24449539 123.88243866]
[45.23693848 129.24790955]
[31.22937965 134.61338806]
[17.46562576 140.57652283]
[3.97116303 147.12629700]
[-9.52330017 153.67605591]
[-22.94651604 160.37063599]
[-36.29692841 167.20922852]
[-49.57299423 174.19107056]
[-62.77317810 181.31533813]
[-75.97335815 188.43960571]
[-89.17354584 195.56387329]
[-102.37372589 202.68814087]
[-104.73620605 215.99234009]
[-114.20823669 225.35350037]
[-127.15451813 227.49536133]
[-138.78576660 221.85377502]
[-152.13616943 228.69238281]
[-165.48658752 235.53097534]
[-178.83700562 242.36958313]
[-187.27972412 256.42846680]
[-203.66955566 255.87579346]
[-211.14604187 241.28010559]
[-202.01800537 227.65618896]
[-185.67559814 229.01916504]
[-172.32519531 222.18057251]
[-158.97477722 215.34196472]
[-145.62435913 208.50337219]
[-141.17991638 192.31736755]
[-126.12470245 184.16259766]
[-109.49799347 189.48794556]
[-96.29781342 182.36369324]
[-83.09762573 175.23942566]
[-69.89744568 168.11515808]
[-56.69726181 160.99089050]
[-52.27283096 155.00274658]
[-43.13552856 153.85882568]
[-29.78511620 147.02021790]
[-25.23286629 141.12866211]
[-16.07306862 140.18159485]
[-2.57860565 133.63183594]
[10.91585732 127.08206177]
[11.94620323 124.40090942]
[14.13944626 121.98249817]
[17.39496994 120.28665161]
[21.44238472 119.72583008]
[25.86390686 120.60582733]
[39.87146378 115.24034882]
[53.87902451 109.87487793]
[67.88658142 104.50940704]
[81.89414215 99.14392853]
[88.87597656 85.86786652]
[85.35860443 71.28608704]
[74.60101318 59.68502045]
[79.13815308 45.49827957]
[75.62078094 30.91650581]
[72.10340881 16.33473396]
[68.58603668 1.75296021]
[65.06866455 -12.82881260]
[61.55129623 -27.41058540]
[47.15814590 -33.20859146]
[38.95037842 -46.37720108]
[40.08404922 -61.85280609]
[50.12323380 -73.68473053]
[65.20766449 -77.32334900]
[79.53707123 -71.36954498]
[87.60150146 -58.11267471]
[86.30001831 -42.65027618]
[76.13307190 -30.92795563]
[79.65043640 -16.34618378]
[83.16780853 -1.76441061]
[86.68518066 12.81736279]
[90.20255280 27.39913559]
[93.71992493 41.98090744]
[104.22592926 52.53899002]
[99.94037628 67.76872253]
[103.45774841 82.35049438]
[114.51084900 92.49095154]
[129.34101868 94.74178314]
[144.17117310 96.99261475]
[159.00134277 99.24344635]
[173.83151245 101.49427795]
[188.66166687 103.74510956]
[203.49183655 105.99594116]
[201.62327576 97.64492035]
[203.17514038 88.11963654]
[208.52247620 78.63093567]
[217.64761353 70.48028564]
[230.84779358 63.35602188]
[244.04797363 56.23175812]
[257.24816895 49.10749054]
[270.44833374 41.98322296]
[276.40255737 27.08601189]
[291.80303955 22.59107780]
[304.83587646 31.94655037]
[305.50338745 47.97571182]
[293.29348755 58.38235855]
[277.57260132 55.18340683]
[264.37243652 62.30767441]
[251.17224121 69.43193817]
[237.97206116 76.55620575]
[224.77188110 83.68047333]
[224.44920349 91.17353058]
[223.80387878 106.15963745]
[223.48120117 113.65269470]
[236.02009583 121.88533783]
[248.55897522 130.11798096]
[261.09783936 138.35063171]
[270.05947876 140.46911621]
[273.81530762 146.89773560]
[286.17416382 155.39825439]
[298.53302002 163.89878845]
[310.89184570 172.39930725]
[323.25070190 180.89984131]
[335.60955811 189.40036011]
[347.96838379 197.90089417]
[362.55181885 192.59967041]
[377.45672607 196.91517639]
[386.95184326 209.18798828]
[387.38613892 224.69898987]
[378.59259033 237.48387146]
[363.95248413 242.62657166]
[349.09527588 238.14964294]
[339.73385620 225.77453613]
[339.46786499 210.25973511]
[327.10900879 201.75921631]
[314.75018311 193.25868225]
[302.39132690 184.75816345]
[290.03247070 176.25762939]
[277.67364502 167.75711060]
[265.31478882 159.25657654]
[252.86520386 150.88951111]
[240.32632446 142.65686035]
[227.78744507 134.42422485]
[215.24856567 126.19157410]
[201.24099731 120.82610321]
[186.41084290 118.57527161]
[171.58067322 116.32444000]
[156.75051880 114.07360840]
[141.92034912 111.82277679]
[127.09018707 109.57194519]
[112.26001740 107.32112122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 45]
[8 44]
[9 43]
[10 41]
[11 40]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[20 31]
[21 30]
[22 29]
[23 28]
[55 80]
[56 79]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[81 145]
[82 144]
[83 143]
[84 142]
[85 141]
[86 140]
[87 139]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[108 138]
[109 137]
[110 136]
[111 135]
[113 134]
[114 133]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
