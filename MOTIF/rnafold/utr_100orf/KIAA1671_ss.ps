%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCAUGAAUCCACAACCAUAACCAUGGCCACGCGGGUCGAGGUGGGCUCCAUAACGCCCUUGACGGCCGUGCCAGGCCUGGGUGAGAUGGGCAAGGAGGAGACCCUGACGAGGACCUACUUCC\
) } def
/len { sequence length } bind def

/coor [
[167.15486145 215.80751038]
[157.97731018 205.73402405]
[154.97912598 192.32936096]
[159.05455017 179.09832764]
[149.19345093 167.79528809]
[139.33235168 156.49224854]
[129.47126770 145.18919373]
[119.61016846 133.88615417]
[112.82769012 136.99028015]
[105.57959747 138.75175476]
[98.12898254 139.10664368]
[90.74628448 138.04206848]
[83.69947052 135.59666443]
[77.24431610 131.85920715]
[71.61513519 126.96534729]
[67.01625061 121.09271240]
[63.61458206 114.45446777]
[61.53360748 107.29157257]
[60.84886169 99.86400604]
[61.58519363 92.44137573]
[63.71587753 85.29310608]
[67.16358185 78.67865753]
[71.80315399 72.83811188]
[77.46619415 67.98347473]
[71.34255981 54.29037094]
[65.21891785 40.59727097]
[50.72855377 34.88175964]
[44.71337509 20.90777206]
[50.25154114 7.12864685]
[44.12790298 -6.56445503]
[38.00426102 -20.25755692]
[31.88062286 -33.95065689]
[17.39025879 -39.66617203]
[11.37508011 -53.64015961]
[16.91324806 -67.41928101]
[10.78960800 -81.11238098]
[4.66596794 -94.80548859]
[-1.62656164 -108.42180634]
[-8.08701897 -121.95925140]
[-14.54747581 -135.49670410]
[-21.00793266 -149.03414917]
[-27.46839142 -162.57159424]
[-42.70844269 -163.87084961]
[-55.16968918 -172.56648254]
[-61.56280899 -186.24107361]
[-60.26156616 -201.17970276]
[-51.71517944 -213.37908936]
[-58.17563629 -226.91653442]
[-64.63609314 -240.45397949]
[-71.09654999 -253.99142456]
[-86.37831116 -256.68353271]
[-97.13490295 -267.86724854]
[-99.23019409 -283.24218750]
[-91.85850525 -296.89642334]
[-77.85440063 -303.57958984]
[-62.60274124 -300.72186279]
[-51.96810532 -289.42211914]
[-50.03972626 -274.02532959]
[-57.55910110 -260.45187378]
[-51.09864426 -246.91444397]
[-44.63818741 -233.37698364]
[-38.17773056 -219.83953857]
[-23.31819153 -218.81013489]
[-10.88633537 -210.42533875]
[-4.27691078 -196.85397339]
[-5.35499573 -181.69697571]
[-13.93094254 -169.03205872]
[-7.47048569 -155.49459839]
[-1.01002836 -141.95715332]
[5.45042896 -128.41970825]
[11.91088581 -114.88226318]
[17.69322777 -110.14984131]
[18.35906982 -100.92912292]
[24.48270988 -87.23602295]
[30.60634995 -73.54292297]
[44.56875229 -68.48457336]
[50.97405624 -54.68505478]
[45.57372284 -40.07429886]
[51.69736481 -26.38119698]
[57.82100296 -12.68809509]
[63.94464493 1.00500703]
[77.90704346 6.06335688]
[84.31234741 19.86287498]
[78.91201782 34.47363281]
[85.03565979 48.16673279]
[91.15930176 61.85983658]
[114.77753448 63.74459076]
[132.98374939 78.90728760]
[139.11021423 101.79483795]
[130.91320801 124.02506256]
[140.77430725 135.32810974]
[150.63540649 146.63114929]
[160.49649048 157.93418884]
[170.35758972 169.23724365]
[187.12940979 167.48728943]
[201.51718140 175.96041870]
[207.99119568 191.17190552]
[204.19924927 207.09289551]
[214.33691406 218.14857483]
[224.47456360 229.20425415]
[234.61221313 240.25993347]
[244.74986267 251.31561279]
[255.02348328 262.24505615]
[265.43148804 273.04660034]
[281.00158691 273.50424194]
[291.40292358 284.60681152]
[290.87069702 299.44769287]
[301.27868652 310.24923706]
[311.68670654 321.05078125]
[327.58673096 325.06591797]
[331.79861450 340.91494751]
[319.98956299 352.29379272]
[304.30767822 347.49682617]
[300.88516235 331.45880127]
[290.47714233 320.65725708]
[280.06915283 309.85571289]
[265.21871948 309.83703613]
[254.50964355 299.03097534]
[254.62994385 283.45462036]
[244.22193909 272.65307617]
[237.24024963 269.99084473]
[233.69418335 261.45327759]
[223.55653381 250.39758301]
[213.41888428 239.34190369]
[203.28123474 228.28623962]
[193.14356995 217.23056030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[24 86]
[25 85]
[26 84]
[29 81]
[30 80]
[31 79]
[32 78]
[35 75]
[36 74]
[37 73]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[47 62]
[48 61]
[49 60]
[50 59]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 120]
[104 119]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
