%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGACGUGUCUGCAGUUCCUCCGCGUCUACUGCGAGUCAGGCCGUGAUGGCGGACGCCUGGGAAGAGAUUAGGCGGUUGGCGGCCGACUUCCAGCGGGCGCAGUUCGCCGAGGCCACGCAGAGGUUGUCCGAGCGGAACUGCAUUG\
) } def
/len { sequence length } bind def

/coor [
[82.59893799 265.33938599]
[78.53874207 279.77941895]
[74.47855377 294.21945190]
[82.42937469 307.87817383]
[78.31256866 323.13684082]
[64.57057190 330.94281006]
[49.35626602 326.66491699]
[41.69602585 312.84115601]
[46.13453674 297.67294312]
[60.03850937 290.15927124]
[64.09870148 275.71923828]
[68.15888977 261.27917480]
[71.60672760 246.68081665]
[74.43608856 231.95007324]
[77.26544189 217.21932983]
[80.09480286 202.48860168]
[82.92415619 187.75785828]
[85.75351715 173.02711487]
[88.58287811 158.29637146]
[91.41223145 143.56562805]
[94.24159241 128.83488464]
[81.40390015 120.47680664]
[75.18965149 107.49304199]
[76.55940247 94.09223175]
[84.16628265 84.11286926]
[77.73955536 70.55937958]
[71.31283569 57.00588608]
[64.88610840 43.45238876]
[58.45938110 29.89889526]
[52.03265762 16.34540176]
[39.12883377 7.19106436]
[40.66701889 -7.62390280]
[34.24029541 -21.17739677]
[27.81356812 -34.73089218]
[14.90974426 -43.88522720]
[16.44792938 -58.70019531]
[10.02120495 -72.25369263]
[3.59447980 -85.80718231]
[-2.83224535 -99.36067963]
[-9.25897026 -112.91416931]
[-15.80773640 -119.38124847]
[-15.67493820 -126.82183838]
[-21.81448746 -140.50781250]
[-27.95403481 -154.19378662]
[-34.09358597 -167.87977600]
[-40.23313141 -181.56575012]
[-46.37268066 -195.25172424]
[-54.39947891 -182.58007812]
[-69.28623962 -180.74040222]
[-80.15631866 -191.07681274]
[-79.06776428 -206.03726196]
[-66.81589508 -214.69126892]
[-52.35269928 -210.71638489]
[-57.01802063 -224.97242737]
[-70.83487701 -232.16494751]
[-75.36309814 -246.68905640]
[-68.42098999 -259.81698608]
[-73.08631134 -274.07302856]
[-77.75163269 -288.32907104]
[-82.41695404 -302.58511353]
[-87.08228302 -316.84115601]
[-91.74760437 -331.09719849]
[-96.41292572 -345.35324097]
[-110.99061584 -351.01232910]
[-118.47483826 -364.74258423]
[-115.33178711 -380.06106567]
[-103.04550171 -389.73480225]
[-87.41719818 -389.19616699]
[-75.82608032 -378.69949341]
[-73.74511719 -363.20098877]
[-82.15688324 -350.01858521]
[-77.49156189 -335.76254272]
[-72.82624054 -321.50650024]
[-68.16091156 -307.25045776]
[-63.49559021 -292.99441528]
[-58.83026886 -278.73837280]
[-54.16494370 -264.48233032]
[-40.80479050 -257.99835205]
[-35.87040710 -243.60714722]
[-42.76197815 -229.63775635]
[-38.09665680 -215.38171387]
[-32.68670654 -201.39126587]
[-26.54715729 -187.70529175]
[-20.40760803 -174.01931763]
[-14.26805973 -160.33334351]
[-8.12851048 -146.64736938]
[-1.98896205 -132.96139526]
[4.29452419 -119.34089661]
[10.72124863 -105.78739929]
[17.14797401 -92.23390961]
[23.57469940 -78.68041229]
[30.00142479 -65.12692261]
[42.44556427 -56.94202042]
[41.36706161 -41.15761566]
[47.79378891 -27.60412216]
[54.22051239 -14.05062771]
[66.66465759 -5.86572742]
[65.58615112 9.91867638]
[72.01287842 23.47216988]
[78.43960571 37.02566528]
[84.86632538 50.57915878]
[91.29305267 64.13265228]
[97.71977997 77.68614960]
[120.54563904 84.20203400]
[127.50242615 110.40319824]
[141.49287415 115.81314850]
[155.48330688 121.22309875]
[169.47375488 126.63304901]
[183.46418762 132.04299927]
[194.48866272 123.70586395]
[208.08752441 121.93639374]
[220.67765808 127.09248352]
[228.99525452 137.72143555]
[230.94178772 150.96726990]
[244.81506348 156.67097473]
[258.68832397 162.37467957]
[272.56161499 168.07839966]
[286.32833862 160.66145325]
[301.63122559 163.87942505]
[311.24472046 176.21290588]
[310.62963867 191.83839417]
[300.07635498 203.37800598]
[284.56787109 205.38308716]
[271.42675781 196.90692139]
[266.85791016 181.95167542]
[252.98461914 176.24795532]
[239.11134338 170.54425049]
[225.23808289 164.84054565]
[211.58099365 173.89279175]
[195.05264282 173.03688049]
[182.14765930 162.41168213]
[178.05424500 146.03343201]
[164.06379700 140.62348938]
[150.07336426 135.21353149]
[136.08291626 129.80358887]
[122.09247589 124.39363861]
[108.97232819 131.66424561]
[106.14297485 146.39498901]
[103.31361389 161.12573242]
[100.48426056 175.85647583]
[97.65489960 190.58720398]
[94.82554626 205.31794739]
[91.99618530 220.04869080]
[89.16683197 234.77943420]
[86.33747101 249.51017761]
[87.97336578 253.69932556]
[88.13162994 257.77301025]
[87.03855133 261.26919556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[25 103]
[26 102]
[27 101]
[28 100]
[29 99]
[30 98]
[32 96]
[33 95]
[34 94]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[53 81]
[54 80]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[105 136]
[106 135]
[107 134]
[108 133]
[109 132]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
