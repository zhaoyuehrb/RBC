%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUUACCUGACAGUUAGAGAAGACAGCCAUAAAGAUUCAGUCAUGGUGGCGUGGAAACAUGGUGCGCCGGACGUUACUGCAGGCAGCACUCAGAGCCUGGGUCAUCCAGUGCUGGUGGAGGUCAAUGCAGGCCAAGAUGUUGGAGCAAAGACGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[126.62652588 133.38861084]
[113.65744781 140.46289062]
[99.05405426 142.69515991]
[84.56385040 139.81828308]
[76.77009583 152.63458252]
[68.97633362 165.45086670]
[72.50025940 180.62387085]
[64.41370392 193.51037598]
[49.92685699 196.77639771]
[42.13309860 209.59269714]
[34.33934021 222.40898132]
[26.54557991 235.22526550]
[23.48193169 251.90011597]
[6.61064529 253.57225037]
[0.33342057 237.82319641]
[13.72928905 227.43151855]
[21.52304840 214.61521912]
[29.31680870 201.79893494]
[37.11056900 188.98263550]
[33.34552383 174.61740112]
[41.06693268 161.50883484]
[56.16004181 157.65711975]
[63.95380020 144.84082031]
[71.74755859 132.02453613]
[65.51979828 127.32923889]
[60.09408188 121.41558075]
[55.70895386 114.42525482]
[52.57700729 106.54653168]
[37.57772446 106.69287872]
[22.57843781 106.83922577]
[7.57915068 106.98556519]
[-7.42013502 107.13191223]
[-16.45957184 119.60567474]
[-30.94139862 124.30994415]
[-45.24718475 119.63997650]
[-53.95570755 107.58595276]
[-68.95499420 107.73229980]
[-83.95427704 107.87863922]
[-99.73366547 114.07922363]
[-110.06010437 100.63299561]
[-99.99799347 86.98783875]
[-84.10062408 92.87935638]
[-69.10134125 92.73300934]
[-54.10205460 92.58666992]
[-45.63038254 80.36501312]
[-31.41843987 75.41680908]
[-16.84758186 79.83761597]
[-7.56648064 92.13262939]
[7.43280554 91.98628235]
[22.43209267 91.83993530]
[37.43137741 91.69358826]
[52.43066406 91.54724884]
[57.31572342 77.36499786]
[45.58825302 68.01264954]
[33.86077881 58.66030502]
[17.57298088 56.75251007]
[11.33064079 41.58790588]
[21.55534172 28.76653671]
[37.72879028 31.47792625]
[43.21312714 46.93283081]
[54.94059753 56.28517914]
[66.66806793 65.63752747]
[85.80968475 55.63312531]
[106.81538391 55.22657013]
[125.26514435 63.97994995]
[137.50836182 79.58203888]
[151.73760986 74.83557892]
[165.96684265 70.08911896]
[180.19607544 65.34265900]
[194.42530823 60.59619522]
[208.65454102 55.84973526]
[208.65087891 40.66967010]
[213.40005493 26.27636909]
[222.40901184 14.11705208]
[234.75721741 5.40945768]
[249.19059753 1.01987767]
[264.24899292 1.37699425]
[278.41381836 6.43006039]
[290.26123047 15.65550232]
[302.68222046 7.24605227]
[315.10321045 -1.16339779]
[327.52420044 -9.57284832]
[339.94522095 -17.98229790]
[352.19976807 -26.63250351]
[364.28320312 -35.52016830]
[376.36663818 -44.40783310]
[378.66763306 -61.72486115]
[392.49386597 -71.84141541]
[409.03134155 -68.91147614]
[420.93905640 -78.03321838]
[432.84680176 -87.15496063]
[444.75451660 -96.27670288]
[446.78823853 -101.19390869]
[450.18383789 -104.48034668]
[454.07794189 -105.88950348]
[457.63638306 -105.55933380]
[470.05737305 -113.96878052]
[482.47836304 -122.37823486]
[494.81671143 -130.90846252]
[507.07125854 -139.55867004]
[519.32580566 -148.20887756]
[531.58038330 -156.85908508]
[535.71221924 -172.36091614]
[550.46545410 -178.66348267]
[564.52258301 -170.93197632]
[567.10021973 -155.09735107]
[556.22100830 -143.30657959]
[540.23059082 -144.60453796]
[527.97601318 -135.95433044]
[515.72149658 -127.30412292]
[503.46691895 -118.65391541]
[499.79730225 -112.19475555]
[490.88781738 -109.95723724]
[478.46682739 -101.54778290]
[466.04583740 -93.13833618]
[453.87625122 -84.36898041]
[441.96853638 -75.24723816]
[430.06082153 -66.12549591]
[418.15307617 -57.00375366]
[418.25796509 -44.08963394]
[410.78115845 -33.32139587]
[398.27819824 -28.77368546]
[385.25430298 -32.32440186]
[373.17086792 -23.43673515]
[361.08743286 -14.54906845]
[359.49182129 -9.99880791]
[354.99206543 -6.42426395]
[348.35464478 -5.56130219]
[335.93365479 2.84814811]
[323.51266479 11.25759792]
[311.09167480 19.66704941]
[298.67068481 28.07649803]
[302.97445679 51.23940277]
[295.55673218 73.60053253]
[306.71697998 83.62297821]
[317.87719727 93.64543152]
[329.03741455 103.66787720]
[345.18569946 106.52532959]
[350.53012085 122.02917480]
[339.57281494 134.23037720]
[323.58569336 130.57739258]
[319.01495361 114.82810211]
[307.85473633 104.80564880]
[296.69451904 94.78320312]
[285.53430176 84.76074982]
[277.80764771 89.91495514]
[269.21044922 93.46389008]
[260.07260132 95.26587677]
[250.74588013 95.24641418]
[241.59033203 93.40119934]
[232.96034241 89.79650879]
[225.19099426 84.56683350]
[218.58502197 77.90985107]
[213.40100098 70.07897186]
[199.17176819 74.82543182]
[184.94253540 79.57189178]
[170.71330261 84.31835175]
[156.48406982 89.06481171]
[142.25482178 93.81127167]
[141.83518982 108.57833862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[9 19]
[10 18]
[11 17]
[12 16]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[36 44]
[37 43]
[38 42]
[53 62]
[54 61]
[55 60]
[66 159]
[67 158]
[68 157]
[69 156]
[70 155]
[71 154]
[79 132]
[80 131]
[81 130]
[82 129]
[83 128]
[84 125]
[85 124]
[86 123]
[89 119]
[90 118]
[91 117]
[92 116]
[96 115]
[97 114]
[98 113]
[99 111]
[100 110]
[101 109]
[102 108]
[134 145]
[135 144]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
