%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACGGCCGUUGGGAGCCUGAGACUCAAACAUGGCAGCGCCACCUUCUCCAGGAAGGACGGCCGACCAAGCAGACCAGGUAUGCACCUUCCUCUUCAAAAAGCCUGGACGGAAAGGGGCUGCAGGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[72.31589508 102.94998932]
[57.52358246 100.46253967]
[41.93638611 112.99362946]
[22.43398285 110.22062683]
[11.30324173 94.33460236]
[-3.62883687 92.90876007]
[-18.56091499 91.48292542]
[-33.49299622 90.05708313]
[-48.42507172 88.63124084]
[-63.35715103 87.20539856]
[-78.28923035 85.77956390]
[-93.22131348 84.35372162]
[-100.26147461 94.81747437]
[-111.04042053 101.22402191]
[-123.45198822 102.39377594]
[-135.10169983 98.16344452]
[-143.76873779 89.40553284]
[-147.82920837 77.84921265]
[-162.67654419 75.71449280]
[-177.52386475 73.57976532]
[-192.37118530 71.44504547]
[-207.24285889 69.48715210]
[-222.13676453 67.70636749]
[-237.03068542 65.92558289]
[-242.02229309 74.77523041]
[-249.45730591 81.65630341]
[-258.61224365 85.92402649]
[-268.60382080 87.18669128]
[-278.47415161 85.34159088]
[-287.28250122 80.58305359]
[-294.19506836 73.38220978]
[-298.56384277 64.44037628]
[-299.98727417 54.62075424]
[-314.56445312 51.08437347]
[-329.14163208 47.54798889]
[-343.71881104 44.01160431]
[-360.53692627 46.15328979]
[-367.25064087 30.58529472]
[-354.14959717 19.82431030]
[-340.18243408 29.43443108]
[-325.60525513 32.97081375]
[-311.02807617 36.50719833]
[-296.45089722 40.04358292]
[-282.19461060 25.73764420]
[-262.08422852 22.73967552]
[-244.03527832 32.39377213]
[-235.24990845 51.03166199]
[-220.35598755 52.81245041]
[-205.46206665 54.59323502]
[-198.37820435 52.24079895]
[-190.23645020 56.59772491]
[-175.38912964 58.73244476]
[-160.54180908 60.86716843]
[-145.69448853 63.00189209]
[-134.07543945 49.80552673]
[-116.72376251 46.12105560]
[-100.46128082 53.58736038]
[-91.79547119 69.42163849]
[-76.86338806 70.84748077]
[-61.93131256 72.27332306]
[-46.99923325 73.69916534]
[-32.06715393 75.12500000]
[-17.13507462 76.55084229]
[-2.20299625 77.97668457]
[12.72908211 79.40252686]
[18.69776726 70.84675598]
[27.77573395 65.54394531]
[38.32185745 64.53173828]
[48.39616776 68.06484222]
[56.11670685 75.55553436]
[60.01103210 85.67022705]
[74.80334473 88.15767670]
[82.26054382 78.54251099]
[93.10631561 73.02613831]
[105.26891327 72.66228485]
[116.42504883 77.52045441]
[124.44367981 86.67264557]
[127.79311371 98.37061310]
[142.45031738 101.55909729]
[157.10751343 104.74757385]
[171.76472473 107.93605042]
[186.89419556 103.30901337]
[197.68592834 113.57486725]
[212.34313965 116.76334381]
[227.00033569 119.95182800]
[241.65753174 123.14030457]
[256.35165405 126.15414429]
[271.08056641 128.99290466]
[285.80950928 131.83168030]
[300.63037109 134.14292908]
[315.52429199 135.92372131]
[330.41821289 137.70449829]
[345.33227539 139.30792236]
[360.26434326 140.73376465]
[375.19641113 142.15960693]
[383.51181030 129.30996704]
[396.85189819 121.80664062]
[412.15130615 121.37381744]
[425.89428711 128.11096191]
[434.92279053 140.46994019]
[437.16220093 155.61073303]
[432.09786987 170.05410767]
[420.89352417 180.48107910]
[406.12390137 184.49560547]
[391.18289185 181.17518616]
[379.50387573 171.28280640]
[373.77056885 157.09169006]
[358.83850098 155.66584778]
[343.90643311 154.24000549]
[336.88055420 156.76036072]
[328.63742065 152.59841919]
[313.74349976 150.81762695]
[298.84957886 149.03684998]
[295.81201172 151.00297546]
[291.64413452 151.53866577]
[287.05593872 150.11689758]
[282.97073364 146.56060791]
[268.24182129 143.72184753]
[253.51287842 140.88307190]
[246.27923584 142.72415161]
[238.46905518 137.79750061]
[223.81185913 134.60902405]
[209.15464783 131.42054749]
[194.49745178 128.23207092]
[180.41635132 133.08717346]
[168.57624817 122.59325409]
[153.91903687 119.40477753]
[139.26184082 116.21629333]
[124.60462952 113.02781677]
[112.02750397 125.10878754]
[94.73108673 127.33771515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[18 54]
[19 53]
[20 52]
[21 51]
[22 49]
[23 48]
[24 47]
[33 43]
[34 42]
[35 41]
[36 40]
[78 129]
[79 128]
[80 127]
[81 126]
[83 124]
[84 123]
[85 122]
[86 121]
[87 119]
[88 118]
[89 117]
[90 113]
[91 112]
[92 111]
[93 109]
[94 108]
[95 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
