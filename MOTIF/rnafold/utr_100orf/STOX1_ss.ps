%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGAUCCUCCCGCCGAGCGAGCGGCGUCGUAGCCGCCGCGCUCGCCGAGGCCCUGCGUUGCGGGCUCCCGGCCGCCGGCGAAAGCAUGGCCCGGCCCGUGCAGCUGGCGCCGGGCUCGCUGGCGCUAGUGCUGUGCCGGCUGGAGGCGCAGAAGGCGGCGGGGGCCGCGGAGGAGCCUGGUGGGC\
) } def
/len { sequence length } bind def

/coor [
[132.91625977 134.60018921]
[128.71214294 148.99897766]
[124.50802612 163.39778137]
[135.18159485 174.44180298]
[138.88757324 189.34687805]
[134.62910461 204.10360718]
[123.55167389 214.74250793]
[108.63505554 218.40176392]
[93.89175415 214.09704590]
[83.28763580 202.98632812]
[79.67515564 188.05831909]
[84.02605438 173.32856750]
[95.16996002 162.75933838]
[110.10922241 159.19366455]
[114.31334686 144.79486084]
[118.51746368 130.39607239]
[112.51682281 125.89692688]
[100.51553345 116.89864349]
[94.51489258 112.39949799]
[81.87150574 120.47073364]
[69.22811890 128.54196167]
[63.66455841 135.81225586]
[56.30534744 136.64038086]
[43.52885818 144.49922180]
[30.75237083 152.35806274]
[17.97588348 160.21690369]
[5.19939470 168.07574463]
[1.77990830 183.50567627]
[-11.59334946 191.92776489]
[-26.98626137 188.34533691]
[-35.26648712 174.88377380]
[-31.52151299 159.52960205]
[-17.97316933 151.39216614]
[-2.65944481 155.29925537]
[10.11704254 147.44041443]
[22.89352989 139.58157349]
[35.67001724 131.72274780]
[48.44650650 123.86389923]
[61.15688705 115.89858246]
[73.80027008 107.82734680]
[86.44365692 99.75611115]
[97.65211487 89.78764343]
[107.14377594 78.17263794]
[116.63542938 66.55762482]
[126.12709045 54.94261932]
[135.61874390 43.32761002]
[145.11041260 31.71260262]
[154.60206604 20.09759331]
[157.61781311 11.45377159]
[164.35066223 8.36953545]
[174.03507996 -3.08524776]
[183.71949768 -14.54003048]
[193.40391541 -25.99481392]
[202.99229431 -37.53011322]
[212.48394775 -49.14511871]
[221.97560120 -60.76012802]
[224.71678162 -76.34205627]
[238.76156616 -81.30123138]
[248.25321960 -92.91623688]
[257.74487305 -104.53124237]
[258.29229736 -108.88425446]
[260.03131104 -112.46815491]
[262.57015991 -115.00102234]
[265.46560669 -116.35856628]
[268.27926636 -116.57720184]
[278.52551270 -127.53230286]
[288.77178955 -138.48739624]
[299.01803589 -149.44250488]
[309.26431274 -160.39759827]
[319.51055908 -171.35269165]
[329.75683594 -182.30780029]
[340.00308228 -193.26289368]
[343.58944702 -201.68597412]
[350.51324463 -204.31362915]
[360.94113159 -215.09597778]
[371.36901855 -225.87834167]
[381.79690552 -236.66069031]
[392.22479248 -247.44303894]
[399.97662354 -260.28475952]
[404.65951538 -274.53503418]
[409.34243774 -288.78530884]
[414.02532959 -303.03558350]
[407.15100098 -317.01345825]
[412.10314941 -331.39855957]
[425.47128296 -337.86605835]
[430.15420532 -352.11633301]
[434.83709717 -366.36660767]
[429.72439575 -378.22235107]
[433.93270874 -390.00338745]
[444.68783569 -395.56713867]
[449.60821533 -409.73715210]
[454.52859497 -423.90719604]
[459.44897461 -438.07723999]
[464.36935425 -452.24728394]
[469.28970337 -466.41729736]
[474.21008301 -480.58734131]
[479.13046265 -494.75738525]
[483.93228149 -508.96801758]
[488.61517334 -523.21832275]
[493.29809570 -537.46856689]
[485.94738770 -551.45941162]
[490.72238159 -566.52508545]
[504.79013062 -573.72747803]
[519.80450439 -568.79345703]
[526.85772705 -554.65032959]
[521.76525879 -539.68896484]
[507.54837036 -532.78570557]
[502.86544800 -518.53540039]
[498.18255615 -504.28512573]
[499.08297729 -496.93441772]
[493.30050659 -489.83700562]
[488.38012695 -475.66696167]
[483.45974731 -461.49694824]
[478.53936768 -447.32690430]
[473.61901855 -433.15686035]
[468.69863892 -418.98681641]
[463.77825928 -404.81680298]
[458.85787964 -390.64675903]
[463.09259033 -373.62509155]
[449.08737183 -361.68368530]
[444.40447998 -347.43341064]
[439.72155762 -333.18313599]
[446.64746094 -320.04666138]
[442.10134888 -305.52813721]
[428.27560425 -298.35266113]
[423.59271240 -284.10238647]
[418.90979004 -269.85211182]
[414.22689819 -255.60183716]
[418.41967773 -249.38328552]
[430.85693359 -257.76867676]
[439.24212646 -245.33129883]
[426.80526733 -236.94616699]
[430.99807739 -230.72760010]
[445.96456909 -229.72570801]
[460.93106079 -228.72381592]
[475.89758301 -227.72193909]
[490.86407471 -226.72004700]
[505.83056641 -225.71815491]
[520.79705811 -224.71626282]
[531.49517822 -236.12176514]
[547.02770996 -237.93096924]
[560.06079102 -229.28961182]
[564.44055176 -214.27789307]
[558.09899902 -199.98387146]
[544.03045654 -193.15676880]
[528.87762451 -197.02011108]
[519.79516602 -209.74975586]
[504.82870483 -210.75164795]
[489.86218262 -211.75354004]
[474.89569092 -212.75543213]
[459.92916870 -213.75732422]
[444.96267700 -214.75920105]
[429.99618530 -215.76109314]
[416.69473267 -219.74205017]
[407.41574097 -227.47056580]
[403.00717163 -237.01515198]
[392.57928467 -226.23280334]
[382.15139771 -215.45045471]
[371.72351074 -204.66809082]
[361.29562378 -193.88574219]
[350.95819092 -183.01663208]
[340.71191406 -172.06153870]
[330.46566772 -161.10643005]
[320.21939087 -150.15133667]
[309.97314453 -139.19624329]
[299.72689819 -128.24113464]
[289.48062134 -117.28604126]
[279.23437500 -106.33094788]
[269.35989380 -95.03958893]
[259.86822510 -83.42457581]
[250.37657166 -71.80957031]
[248.31430054 -57.05842590]
[233.59060669 -51.26847076]
[224.09895325 -39.65346146]
[214.60729980 -28.03845406]
[212.80567932 -20.85528374]
[204.85870361 -16.31039619]
[195.17428589 -4.85561275]
[185.48986816 6.59917021]
[175.80545044 18.05395317]
[166.21707153 29.58925056]
[156.72541809 41.20426178]
[147.23374939 52.81926727]
[137.74209595 64.43428040]
[128.25044250 76.04928589]
[118.75878143 87.66429138]
[109.26712036 99.27930450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[19 41]
[20 40]
[21 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[42 187]
[43 186]
[44 185]
[45 184]
[46 183]
[47 182]
[48 181]
[50 180]
[51 179]
[52 178]
[53 177]
[54 175]
[55 174]
[56 173]
[58 171]
[59 170]
[60 169]
[65 168]
[66 167]
[67 166]
[68 165]
[69 164]
[70 163]
[71 162]
[72 161]
[74 160]
[75 159]
[76 158]
[77 157]
[78 156]
[79 128]
[80 127]
[81 126]
[82 125]
[85 122]
[86 121]
[87 120]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
[98 109]
[99 108]
[100 107]
[133 153]
[134 152]
[135 151]
[136 150]
[137 149]
[138 148]
[139 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
