%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCUUAAUUGCCUAGGGGGCGGGACUAACUAGCAAACGGGGACUAGAAAUAGGGAUGCUGAAAAGCAACGGGGAGAGACGCAGUCGUAACGCACUUCCGGCGGUCUACGCGAGGAAGAUGGCUGCAUCCCAGCAGCAAGCUUCAGCGGCUUCCU\
) } def
/len { sequence length } bind def

/coor [
[72.06878662 239.00733948]
[68.78675079 247.65541077]
[61.97504807 253.70732117]
[53.26871872 255.88140869]
[47.73575974 269.82366943]
[42.20280075 283.76589966]
[48.69721603 298.17416382]
[43.02321625 312.92480469]
[28.54709435 319.26654053]
[13.85726929 313.43688965]
[7.66895723 298.89453125]
[13.65357304 284.26715088]
[28.26055145 278.23294067]
[33.79351044 264.29071045]
[39.32646942 250.34844971]
[34.47507095 230.31803894]
[51.32391357 217.13459778]
[56.01586151 202.88729858]
[60.70781326 188.63999939]
[65.39975739 174.39270020]
[70.09171295 160.14538574]
[74.78366089 145.89808655]
[79.47560883 131.65078735]
[75.32434082 125.40442657]
[62.83148575 133.70675659]
[54.52937317 121.21376038]
[67.02181244 112.91171265]
[62.87054825 106.66535187]
[47.91796494 105.47360229]
[32.96538544 104.28184509]
[15.22893429 113.78636932]
[-0.25975645 102.26424408]
[-15.24789715 101.66789246]
[-30.23603821 101.07154846]
[-45.22417831 100.47519684]
[-53.35841370 113.50324249]
[-66.92441559 120.70456696]
[-82.27300262 120.14205933]
[-95.27548218 111.96702576]
[-102.43424988 98.37851715]
[-101.82363892 83.03176880]
[-93.60788727 70.05497742]
[-79.99700928 62.93883514]
[-64.65224457 63.59755325]
[-51.70127106 71.85393524]
[-44.62783051 85.48706055]
[-29.63969040 86.08340454]
[-14.65154934 86.67975616]
[0.33659127 87.27610016]
[7.24112654 79.65335083]
[17.42206383 77.06364441]
[27.54561234 80.60598755]
[34.15713501 89.32926178]
[49.10971832 90.52101898]
[64.06230164 91.71276855]
[72.23160553 79.40300751]
[83.93846130 72.01573944]
[96.72647858 70.22086334]
[108.22611237 73.60089111]
[116.58943939 80.84039307]
[129.32418823 72.91410065]
[142.05894470 64.98780823]
[154.79368591 57.06151581]
[167.52844238 49.13522339]
[180.26319885 41.20892715]
[183.80722046 22.64177513]
[199.49818420 12.68308067]
[217.19168091 17.22255516]
[229.60124207 8.79623985]
[228.58953857 -6.46559858]
[235.30845642 -20.09471893]
[247.86373901 -28.47513199]
[262.82791138 -29.43945122]
[276.17565918 -22.82862854]
[288.58520508 -31.25494576]
[300.99478149 -39.68126297]
[313.40432739 -48.10757828]
[313.42239380 -56.57676315]
[316.77926636 -64.24939728]
[322.84881592 -69.88203430]
[330.57235718 -72.59481812]
[338.64282227 -72.00839233]
[345.72589111 -68.29513550]
[358.76568604 -75.70887756]
[371.80548096 -83.12261200]
[384.84527588 -90.53635406]
[397.88510132 -97.95008850]
[410.92489624 -105.36383057]
[423.96469116 -112.77756500]
[437.00451660 -120.19129944]
[422.99191284 -125.54364777]
[416.70086670 -139.16064453]
[421.70819092 -153.30018616]
[435.16693115 -159.92306519]
[449.42495728 -155.26376343]
[456.37567139 -141.97138977]
[452.06774902 -127.60417175]
[465.89724731 -133.41323853]
[479.72674561 -139.22230530]
[493.55621338 -145.03137207]
[507.38571167 -150.84043884]
[518.14575195 -165.75263977]
[535.44360352 -162.93586731]
[549.15490723 -169.01873779]
[562.86614990 -175.10162354]
[569.95379639 -189.49415588]
[585.65557861 -192.78553772]
[597.92645264 -182.45088196]
[597.35327148 -166.41807556]
[584.37567139 -156.98609924]
[568.94903564 -161.39036560]
[555.23773193 -155.30747986]
[541.52648926 -149.22460938]
[536.86340332 -138.02593994]
[525.44482422 -132.86128235]
[513.19476318 -137.01095581]
[499.36529541 -131.20188904]
[485.53579712 -125.39281464]
[471.70632935 -119.58374786]
[457.87683105 -113.77468109]
[444.41824341 -107.15149689]
[431.37844849 -99.73776245]
[418.33862305 -92.32402039]
[405.29882812 -84.91028595]
[392.25903320 -77.49655151]
[379.21923828 -70.08280945]
[366.17941284 -62.66907120]
[353.13961792 -55.25533295]
[344.21127319 -35.56012726]
[321.83065796 -35.69801712]
[309.42108154 -27.27170181]
[297.01153564 -18.84538460]
[284.60198975 -10.41906834]
[285.82312012 4.42594385]
[279.40707397 17.97917747]
[266.98641968 26.55787086]
[251.84001160 27.77570534]
[238.02755737 21.20579910]
[225.61801147 29.63211632]
[225.94866943 41.09998703]
[220.62528992 51.39833069]
[210.87809753 57.89358139]
[199.08447266 58.86156082]
[188.18948364 53.94367981]
[175.45474243 61.86997223]
[162.71998596 69.79626465]
[149.98522949 77.72255707]
[137.25048828 85.64884949]
[124.51573181 93.57514954]
[122.91740417 121.04195404]
[93.72290802 136.34274292]
[89.03096008 150.59004211]
[84.33901215 164.83734131]
[79.64706421 179.08464050]
[74.95511627 193.33193970]
[70.26316071 207.57923889]
[65.57121277 221.82655334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[17 157]
[18 156]
[19 155]
[20 154]
[21 153]
[22 152]
[23 151]
[28 55]
[29 54]
[30 53]
[32 49]
[33 48]
[34 47]
[35 46]
[60 149]
[61 148]
[62 147]
[63 146]
[64 145]
[65 144]
[68 139]
[69 138]
[74 133]
[75 132]
[76 131]
[77 130]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[90 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
