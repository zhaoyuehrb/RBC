%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCAGCCGGUCCACAGCCUCUGCUCCGCCUUUGGCCUCCAGUGCUGCCUCCUCUUCCUUCUAGCUUCUUGGGGGGCAGGUGCUACUACAUUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[168.44674683 106.35605621]
[163.41485596 100.37312317]
[159.58091736 93.55162811]
[144.98722839 97.01927185]
[130.39355469 100.48691559]
[115.79988098 103.95456696]
[104.01120758 115.78559113]
[88.00460815 111.01750183]
[73.52583313 114.93732452]
[62.22711563 126.01205444]
[47.92016983 121.86952972]
[33.44139481 125.78936005]
[18.96261978 129.70918274]
[15.07740879 141.16749573]
[6.17659855 149.18310547]
[-5.38859081 151.79776001]
[-16.63983154 148.45939636]
[-24.73861313 140.13357544]
[-39.43307495 143.14569092]
[-54.12753677 146.15779114]
[-68.42989349 155.26158142]
[-81.13718414 144.03834534]
[-73.87029266 128.72076416]
[-57.13964462 131.46333313]
[-42.44518280 128.45123291]
[-27.75071907 125.43911743]
[-18.77605820 109.63406372]
[-0.83623981 105.15763855]
[15.04279041 115.23041534]
[29.52156639 111.31058502]
[44.00034332 107.39075470]
[54.26343536 96.59639740]
[69.60600281 100.45854950]
[84.08477783 96.53871918]
[90.56161499 86.72628021]
[101.95674896 83.83071136]
[112.33223724 89.36088562]
[126.92591095 85.89324188]
[141.51959229 82.42559814]
[156.11326599 78.95795441]
[162.16435242 55.27684784]
[180.35151672 39.09636307]
[204.37968445 35.86876297]
[226.01460266 46.58839035]
[238.06706238 37.65876007]
[250.11950684 28.72912598]
[262.17196655 19.79949379]
[274.22442627 10.86985970]
[286.13653564 1.75386930]
[297.90545654 -7.54627371]
[309.67437744 -16.84641647]
[321.44329834 -26.14656067]
[333.21218872 -35.44670486]
[344.98110962 -44.74684525]
[356.75003052 -54.04698944]
[368.51895142 -63.34713364]
[363.47698975 -77.62500000]
[363.34674072 -92.76638794]
[368.14230347 -107.12888336]
[377.34350586 -119.15454102]
[389.95227051 -127.53891754]
[404.60089111 -131.37252808]
[419.70040894 -130.23953247]
[433.61291504 -124.26284027]
[444.82928467 -114.09074402]
[452.13287354 -100.82664490]
[454.73144531 -85.90933228]
[452.34310913 -70.95692444]
[445.22692871 -57.59134674]
[434.15481567 -47.26239395]
[420.32778931 -41.09047699]
[405.24572754 -39.74507904]
[390.54461670 -43.37213898]
[377.81909180 -51.57822037]
[366.05017090 -42.27807617]
[354.28125000 -32.97793198]
[342.51235962 -23.67778969]
[330.74343872 -14.37764645]
[318.97451782 -5.07750320]
[307.20559692 4.22264004]
[295.43667603 13.52278328]
[292.08129883 20.25827026]
[283.15405273 22.92231369]
[271.10159302 31.85194778]
[259.04913330 40.78158188]
[246.99668884 49.71121216]
[234.94424438 58.64084625]
[237.70291138 65.83607483]
[239.07539368 73.42636871]
[239.01100159 81.14694214]
[237.50918579 88.72789764]
[234.61975098 95.90373230]
[230.44108582 102.42259216]
[225.11694336 108.05513763]
[218.83137512 112.60258484]
[211.80247498 115.90374756]
[204.27471924 117.84073639]
[196.51055908 118.34315491]
[188.78117371 117.39067841]
[181.35707092 115.01384735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[8 34]
[9 33]
[11 31]
[12 30]
[13 29]
[18 26]
[19 25]
[20 24]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
