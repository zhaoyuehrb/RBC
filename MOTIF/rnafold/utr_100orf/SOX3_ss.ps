%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGACCUGUUCGAGAGAACUCAUCAGGUGCGAGAAGCCCGCGGGUUCCUGCUGAUUUGGCGCGGAGCAUUUUGAUAAGCCUACCCUUCCCGCCGGACU\
) } def
/len { sequence length } bind def

/coor [
[67.66846466 145.17843628]
[51.33057785 147.47990417]
[36.95479965 139.72485352]
[23.66462898 146.67980957]
[17.37574005 153.55311584]
[9.85121632 153.63710022]
[-3.64882326 160.17536926]
[-17.14886284 166.71363831]
[-30.64890289 173.25189209]
[-44.14894104 179.79016113]
[-47.11843491 193.03619385]
[-57.06856155 201.98020935]
[-70.16623688 203.48152161]
[-81.53933716 197.20979309]
[-95.23619080 203.32505798]
[-108.93303680 209.44030762]
[-118.11513519 223.02784729]
[-134.45199585 221.59992981]
[-141.13766479 206.62548828]
[-131.29449463 193.50894165]
[-115.04829407 195.74345398]
[-101.35144043 189.62820435]
[-87.65459442 183.51295471]
[-82.39590454 167.62315369]
[-67.00667572 160.23057556]
[-50.68721008 166.29013062]
[-37.18716812 159.75186157]
[-23.68712997 153.21359253]
[-10.18708992 146.67532349]
[3.31295013 140.13705444]
[16.70967484 133.38963318]
[29.99984550 126.43468475]
[30.73625946 113.00656891]
[38.10854340 101.62917328]
[50.25731659 95.37093353]
[64.01847839 95.98343658]
[75.74710083 103.41272736]
[89.24713898 96.87445831]
[102.64385986 90.12703705]
[115.93403625 83.17208099]
[124.57363892 69.91810608]
[139.43765259 70.87226868]
[152.72781372 63.91732025]
[166.01799011 56.96236801]
[179.30816650 50.00741196]
[192.59832764 43.05245972]
[202.95463562 32.20132828]
[209.28215027 18.60124016]
[215.60968018 5.00115108]
[221.93721008 -8.59893799]
[228.05245972 -22.29578590]
[233.95396423 -36.08608246]
[239.85546875 -49.87637711]
[245.75697327 -63.66667175]
[241.14962769 -79.03390503]
[250.40960693 -92.13475800]
[266.43347168 -92.91936493]
[276.92904663 -80.78585815]
[273.84506226 -65.04201508]
[259.54727173 -57.76517105]
[253.64576721 -43.97487259]
[247.74426270 -30.18457794]
[241.84275818 -16.39428329]
[242.10981750 -8.87403202]
[235.53729248 -2.27141213]
[229.20977783 11.32867718]
[222.88224792 24.92876625]
[216.55471802 38.52885437]
[230.01734924 31.91390610]
[244.74447632 29.06577301]
[259.70272827 30.18430328]
[273.84246826 35.19100952]
[286.17160034 43.73458481]
[295.82498169 55.21553802]
[302.12524414 68.82827759]
[304.63034058 83.61761475]
[303.16445923 98.54581451]
[297.83047485 112.56539917]
[289.00265503 124.69262695]
[277.30044556 134.07656860]
[263.54495239 140.05874634]
[248.70138550 142.21943665]
[233.81129456 140.40699768]
[219.91946411 134.74861145]
[208.00068665 125.64132690]
[198.89126587 113.72418213]
[193.23039246 99.83337402]
[191.41528320 84.94360352]
[193.57328796 70.09964752]
[199.55328369 56.34263229]
[186.26310730 63.29758453]
[172.97294617 70.25253296]
[159.68276978 77.20748901]
[146.39260864 84.16244507]
[138.70359802 96.91895294]
[122.88898468 96.46224976]
[109.59881592 103.41720581]
[104.37453461 109.75770569]
[95.78540039 110.37449646]
[82.28536224 116.91276550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[14 23]
[15 22]
[16 21]
[37 100]
[38 99]
[39 97]
[40 96]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 68]
[48 67]
[49 66]
[50 65]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
