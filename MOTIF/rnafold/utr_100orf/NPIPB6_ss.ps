%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGCACUCAUGAUGAGCCCCUGUUCUCAUUCUGCAAAUGGUGAAGCUCUCUAUUGUCCUGACCCCACAGUUCCUGUCGCAUGACCAGAGCCAGCUCACCAAGGAGCUGCAGCAGCAUGUAAAGUCAGUGACAUGCC\
) } def
/len { sequence length } bind def

/coor [
[165.90966797 223.05593872]
[158.16635132 210.20910645]
[150.42301941 197.36228943]
[142.67970276 184.51545715]
[136.48052979 180.37573242]
[134.91033936 171.28964233]
[127.45932007 158.27110291]
[119.86166382 145.33758545]
[112.11833954 132.49075317]
[104.37502289 119.64393616]
[89.68427277 116.61374664]
[77.48951721 125.34803772]
[65.29476166 134.08233643]
[53.10000610 142.81663513]
[47.88938904 150.42399597]
[40.52949905 151.60684204]
[28.14046669 160.06330872]
[15.75143433 168.51977539]
[3.36240196 176.97624207]
[-3.25347257 191.98164368]
[-19.58351135 193.48559570]
[-28.82876968 179.94096375]
[-21.47851944 165.28129578]
[-5.09406710 164.58720398]
[7.29496574 156.13073730]
[19.68399811 147.67427063]
[32.07303238 139.21780396]
[44.36571121 130.62187195]
[56.56046677 121.88757324]
[68.75522614 113.15328217]
[80.94998169 104.41898346]
[66.65286255 108.95687866]
[52.27630997 104.67731476]
[42.78845978 93.05919647]
[41.46805191 78.11742401]
[48.77138138 65.01546478]
[62.17462540 58.28099060]
[77.04598236 60.24125671]
[88.24633026 70.21884155]
[91.90511322 84.76612091]
[92.92140198 69.80059052]
[93.93768311 54.83505630]
[94.95396423 39.86952591]
[95.97024536 24.90399170]
[96.98653412 9.93846035]
[94.43029785 1.07909405]
[98.19865417 -5.35258627]
[99.55289459 -20.29132843]
[100.90712738 -35.23007202]
[101.92341614 -50.19560623]
[102.60122681 -65.18028259]
[103.27903748 -80.16496277]
[103.95684814 -95.14963531]
[96.09934235 -102.82340240]
[93.85557556 -113.34931183]
[97.73841858 -123.14992523]
[106.21980286 -129.03138733]
[107.57404327 -143.97013855]
[108.92827606 -158.90887451]
[102.46849060 -173.35122681]
[111.32324219 -185.32798767]
[112.67747498 -200.26672363]
[103.90273285 -206.58992004]
[98.62451935 -215.93705750]
[97.75482941 -226.55473328]
[101.38586426 -236.48361206]
[108.78557587 -243.92005920]
[118.54407501 -247.54364014]
[120.90733337 -262.35629272]
[123.27059174 -277.16897583]
[125.63384247 -291.98162842]
[122.15848541 -308.57556152]
[137.14183044 -316.50875854]
[148.91279602 -304.30709839]
[140.44650269 -289.61837769]
[138.08325195 -274.80572510]
[135.72000122 -259.99304199]
[133.35673523 -245.18038940]
[145.94128418 -230.40422058]
[143.69944763 -210.82148743]
[127.61621857 -198.91249084]
[126.26198578 -183.97375488]
[132.81863403 -170.59991455]
[123.86701965 -157.55464172]
[122.51278687 -142.61589050]
[121.15854645 -127.67715454]
[130.59164429 -110.85462952]
[118.94152069 -94.47182465]
[118.26371002 -79.48715210]
[117.58589935 -64.50247192]
[116.90808868 -49.51779556]
[119.46913910 -45.39579010]
[119.40919495 -39.60652542]
[115.84587097 -33.87583542]
[114.49163818 -18.93709183]
[113.13739777 -3.99834943]
[111.95206451 10.95474339]
[110.93578339 25.92027664]
[109.91949463 40.88580704]
[108.90321350 55.85134125]
[107.88693237 70.81687164]
[106.87065125 85.78240967]
[114.96414948 90.91708374]
[119.21090698 100.56820679]
[117.22184753 111.90061188]
[124.96517181 124.74743652]
[132.70849609 137.59426880]
[139.88032532 143.38973999]
[140.47785950 150.82008362]
[147.92887878 163.83862305]
[155.52651978 176.77212524]
[163.26985168 189.61895752]
[171.01316833 202.46578979]
[178.75650024 215.31260681]
[195.05854797 223.79125977]
[194.80043030 241.30235291]
[202.83210754 253.97090149]
[210.86378479 266.63946533]
[218.89546204 279.30801392]
[226.92713928 291.97656250]
[234.95881653 304.64511108]
[250.30099487 303.92871094]
[263.93853760 310.99365234]
[272.20300293 323.93945312]
[272.87127686 339.28381348]
[265.76364136 352.89913940]
[252.79197693 361.12298584]
[237.44561768 361.74316406]
[223.85263062 354.59289551]
[215.66949463 341.59552002]
[215.09741211 326.24728394]
[222.29026794 312.67678833]
[214.25859070 300.00823975]
[206.22691345 287.33969116]
[198.19523621 274.67114258]
[190.16355896 262.00256348]
[182.13188171 249.33403015]
[170.35284424 246.35754395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[4 111]
[6 110]
[7 109]
[8 107]
[9 106]
[10 105]
[11 31]
[12 30]
[13 29]
[14 28]
[16 27]
[17 26]
[18 25]
[19 24]
[40 102]
[41 101]
[42 100]
[43 99]
[44 98]
[45 97]
[47 96]
[48 95]
[49 94]
[50 91]
[51 90]
[52 89]
[53 88]
[57 86]
[58 85]
[59 84]
[61 82]
[62 81]
[68 78]
[69 77]
[70 76]
[71 75]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
