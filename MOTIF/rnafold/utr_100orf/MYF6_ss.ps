%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCACUAAUUAAAUGCCAUCUGGGUGGUUCCUCUGGGUUUUUGAGUCCAUCACCCAGUUCAGAUCGAGUCAGAGGCCAAGGAGGAGAACAUGAUGAUGGACCUUUUUGAAACUGGCUCCUAUUUCUUCUACUUGGAUGGGGAAAAUGUUACUCUGCAGCCAUUAGAAGUGGCAGAAGGCUCUCCUUUGU\
) } def
/len { sequence length } bind def

/coor [
[267.07699585 433.41894531]
[273.69747925 430.39923096]
[280.25106812 429.65814209]
[273.18011475 416.42932129]
[266.10916138 403.20050049]
[259.03820801 389.97167969]
[241.91526794 381.00888062]
[242.84077454 360.88223267]
[235.34077454 347.89184570]
[227.84077454 334.90145874]
[220.34077454 321.91110229]
[204.67063904 324.22158813]
[189.27543640 320.33557129]
[176.51733398 310.81878662]
[168.36557007 297.10330200]
[166.09245300 281.27200317]
[170.07496643 265.74237061]
[179.73252869 252.89723206]
[172.02099609 240.03129578]
[164.30944824 227.16535950]
[156.59791565 214.29943848]
[148.88636780 201.43350220]
[141.17483521 188.56758118]
[133.46328735 175.70164490]
[125.75174713 162.83572388]
[118.04020691 149.96978760]
[110.32866669 137.10386658]
[102.61712646 124.23793030]
[94.90557861 111.37200165]
[83.38866425 101.76155853]
[69.35007477 96.47781372]
[55.31148529 91.19406128]
[41.27289581 85.91030884]
[27.23430824 80.62655640]
[13.19571877 75.34281158]
[-0.84286976 70.05905914]
[-18.92799187 73.48485565]
[-29.53366280 59.51179504]
[-43.65682220 54.45844650]
[-57.77998352 49.40509796]
[-71.90314484 44.35175323]
[-86.02630615 39.29840469]
[-100.14946747 34.24505615]
[-114.27262878 29.19170761]
[-128.39578247 24.13836098]
[-142.51895142 19.08501244]
[-158.11903381 21.72088432]
[-167.49571228 10.14818573]
[-181.61886597 5.09483814]
[-197.21896362 7.73070955]
[-206.59562683 -3.84198856]
[-220.71878052 -8.89533615]
[-234.84194946 -13.94868374]
[-246.50144958 -3.95110655]
[-261.60061646 -1.13847673]
[-276.07785034 -6.26737785]
[-286.03881836 -17.95816040]
[-288.80410767 -33.06606674]
[-283.62985229 -47.52713776]
[-271.90789795 -57.45142746]
[-256.79141235 -60.16934586]
[-242.34661865 -54.94978714]
[-232.45912170 -43.19678879]
[-229.78860474 -28.07184601]
[-215.66543579 -23.01849747]
[-201.54228210 -17.96514893]
[-186.95237732 -20.96246910]
[-176.56552124 -9.02832317]
[-162.44236755 -3.97497487]
[-147.85246277 -6.97229528]
[-137.46560669 4.96185207]
[-123.34244537 10.01519966]
[-109.21928406 15.06854725]
[-95.09612274 20.12189484]
[-80.97296143 25.17524338]
[-66.84980011 30.22859001]
[-52.72663879 35.28194046]
[-38.60347748 40.33528519]
[-24.48031425 45.38863373]
[-13.40440178 40.50040054]
[-1.59022737 44.60731125]
[4.44088078 56.02046967]
[18.47946930 61.30421829]
[32.51805878 66.58796692]
[46.55664825 71.87171936]
[60.59523773 77.15547180]
[74.63382721 82.43922424]
[88.67241669 87.72296906]
[77.17165375 78.09320068]
[76.52436066 63.10717392]
[87.15196228 52.52161407]
[102.13530731 53.22829437]
[111.71942139 64.76713562]
[109.66474915 79.62533569]
[116.51831055 66.28259277]
[108.31638336 53.37230301]
[107.68197632 38.19026184]
[114.68543243 24.81797791]
[127.35716248 16.80029488]
[142.24044800 16.20585632]
[149.09400940 2.86311483]
[155.94757080 -10.47962666]
[162.69174194 -23.87799072]
[169.32606506 -37.33108139]
[160.26576233 -49.66678238]
[157.98742676 -64.80176544]
[163.01458740 -79.25812531]
[174.19203186 -89.71389008]
[188.95129395 -93.76640320]
[203.90078735 -90.48442841]
[215.60522461 -80.62213898]
[221.37501526 -66.44582367]
[219.88430786 -51.21308136]
[211.47564697 -38.42429352]
[198.08128357 -31.01823235]
[182.77915955 -30.69675064]
[176.14482117 -17.24365997]
[176.00588989 -9.84217358]
[169.29029846 -3.62606812]
[162.43675232 9.71667290]
[155.58319092 23.05941391]
[163.76918030 35.50349045]
[164.63304138 50.47378540]
[157.84277344 63.95557785]
[145.13258362 72.28310394]
[129.86105347 73.13615417]
[123.00749207 86.47888947]
[120.21144867 95.74530792]
[114.52355194 101.69754791]
[107.77150726 103.66046143]
[115.48305511 116.52639008]
[123.19459534 129.39231873]
[130.90612793 142.25825500]
[138.61767578 155.12417603]
[146.32922363 167.99011230]
[154.04075623 180.85603333]
[161.75230408 193.72196960]
[169.46383667 206.58789062]
[177.17538452 219.45382690]
[184.88691711 232.31974792]
[192.59846497 245.18568420]
[206.62815857 242.68458557]
[220.63905334 245.12011719]
[232.94984436 252.17930603]
[242.09036255 262.99557495]
[246.97705078 276.25512695]
[247.04144287 290.35644531]
[242.29620361 303.60379028]
[233.33116150 314.41110229]
[240.83116150 327.40145874]
[248.33116150 340.39184570]
[255.83116150 353.38223267]
[266.50216675 355.59118652]
[274.03442383 363.15911865]
[276.10559082 373.40963745]
[272.26702881 382.90072632]
[279.33798218 396.12954712]
[286.40893555 409.35836792]
[293.47988892 422.58718872]
[302.61129761 434.48748779]
[313.55926514 444.74136353]
[324.50723267 454.99526978]
[335.45520020 465.24914551]
[346.40316772 475.50302124]
[357.35110474 485.75689697]
[373.04476929 492.17141724]
[371.22537231 509.02746582]
[354.52441406 511.94537354]
[347.09722900 496.70486450]
[336.14926147 486.45098877]
[325.20132446 476.19711304]
[314.25335693 465.94320679]
[303.30538940 455.68933105]
[292.35742188 445.43545532]
[286.02102661 449.44793701]
[267.01181030 461.48538208]
[271.60037231 475.76632690]
[276.18890381 490.04724121]
[280.77746582 504.32818604]
[285.36599731 518.60913086]
[297.87371826 529.21520996]
[294.67663574 545.29968262]
[279.06359863 550.31622314]
[267.09600830 539.10424805]
[271.08505249 523.19769287]
[266.49652100 508.91674805]
[261.90795898 494.63580322]
[257.31942749 480.35485840]
[252.73088074 466.07391357]
[253.31044006 455.46023560]
[256.25491333 446.18814087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 159]
[4 158]
[5 157]
[6 156]
[8 152]
[9 151]
[10 150]
[11 149]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[28 131]
[29 130]
[30 88]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[48 69]
[49 68]
[51 66]
[52 65]
[53 64]
[94 127]
[95 126]
[100 121]
[101 120]
[102 119]
[103 117]
[104 116]
[160 174]
[161 173]
[162 172]
[163 171]
[164 170]
[165 169]
[176 189]
[177 188]
[178 187]
[179 186]
[180 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
