%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGGGGCGGCGCCGCGGAACAUGACGGCGCCCUGGGUGGCCCUCGCCCUCCUCUGGGGAUCGCUGUGCGCCGGCUCUGGGCGUGGGGAGGCUGAGACACGGGAGUGCAUCUACUACAACG\
) } def
/len { sequence length } bind def

/coor [
[180.50842285 156.96173096]
[195.50779724 157.02186584]
[210.37014771 154.99446106]
[196.35522461 149.64826965]
[182.34028625 144.30209351]
[168.32534790 138.95591736]
[154.31042480 133.60974121]
[139.66130066 136.30278015]
[129.52505493 124.15504456]
[115.51012421 118.80886841]
[101.49519348 113.46269226]
[86.49637604 113.65117645]
[72.62021637 119.34786224]
[58.74405670 125.04455566]
[44.86790085 130.74124146]
[30.99174118 136.43792725]
[17.11558342 142.13461304]
[3.23942590 147.83129883]
[-10.56405163 153.70190430]
[-24.29266930 159.74549866]
[-31.42148018 174.11767578]
[-47.13263702 177.36408997]
[-59.37388229 166.99435425]
[-58.75478363 150.96324158]
[-45.75025940 141.56846619]
[-30.33626556 146.01687622]
[-16.60764885 139.97328186]
[-11.69859314 134.33578491]
[-2.45726061 133.95513916]
[11.41889763 128.25845337]
[25.29505539 122.56176758]
[39.17121506 116.86508179]
[53.04737091 111.16839600]
[66.92353058 105.47171021]
[80.79969025 99.77502441]
[81.92637634 92.36013031]
[84.17976379 77.53035736]
[85.30645752 70.11547089]
[73.74875641 60.55410767]
[62.19105911 50.99274826]
[50.63335800 41.43138885]
[39.07566071 31.87002945]
[23.03277016 31.94224930]
[13.08638096 19.35460091]
[16.86651039 3.76325107]
[31.47336960 -2.87145042]
[45.70182419 4.54007149]
[48.63702011 20.31233025]
[60.19472122 29.87368965]
[71.75241852 39.43505096]
[83.31011963 48.99641037]
[94.86781311 58.55776978]
[107.63273621 50.68014908]
[104.26866913 36.06224823]
[100.90460968 21.44434357]
[97.54055023 6.82644129]
[88.09597015 -7.25320148]
[99.01086426 -20.22631264]
[114.49851990 -13.32929707]
[112.15845490 3.46237993]
[115.52251434 18.08028221]
[118.88657379 32.69818497]
[122.25063324 47.31608963]
[127.93486786 70.79429626]
[121.34609985 89.84378815]
[106.84136963 99.44775391]
[120.85630035 104.79393005]
[134.87123108 110.14011383]
[150.52279663 107.82947540]
[159.65660095 119.59481049]
[173.67152405 124.94098663]
[187.68646240 130.28717041]
[201.70140076 135.63334656]
[215.71633911 140.97952271]
[230.67372131 142.10942078]
[245.33273315 138.92932129]
[253.90306091 125.92211151]
[268.81469727 122.90585327]
[281.16226196 131.15650940]
[295.82128906 127.97640228]
[310.48031616 124.79629517]
[322.32641602 114.30914307]
[336.40472412 119.17229462]
[351.06375122 115.99218750]
[365.72277832 112.81208038]
[371.85122681 98.55648804]
[385.20562744 90.65464020]
[400.65097046 92.14495087]
[412.24819946 102.45436859]
[415.53793335 117.61871338]
[409.25518799 131.80697632]
[395.81585693 139.56349182]
[380.38757324 137.90571594]
[368.90289307 127.47109985]
[354.24386597 130.65119934]
[339.58483887 133.83131409]
[328.78723145 144.09100342]
[313.66040039 139.45532227]
[299.00137329 142.63542175]
[284.34237671 145.81553650]
[276.52365112 158.44102478]
[261.70260620 161.87493896]
[248.51284790 153.58833313]
[233.85382080 156.76844788]
[229.39819336 171.09141541]
[239.66641235 182.02593994]
[249.93461609 192.96046448]
[265.86004639 194.89952087]
[274.15036011 208.63453674]
[268.44592285 223.62916565]
[253.12269592 228.38082886]
[239.93534851 219.24444580]
[239.00007629 203.22868347]
[228.73187256 192.29414368]
[218.46366882 181.35961914]
[222.23257446 195.87841797]
[216.92265320 209.90711975]
[206.19059753 220.38677979]
[192.03952026 225.36140442]
[177.11064148 223.90252686]
[164.19033813 216.28242493]
[155.69015503 203.92335510]
[153.19657898 189.13206482]
[157.17501831 174.66929626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[9 68]
[10 67]
[11 66]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 27]
[20 26]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[53 63]
[54 62]
[55 61]
[56 60]
[75 104]
[76 103]
[79 100]
[80 99]
[81 98]
[83 96]
[84 95]
[85 94]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
