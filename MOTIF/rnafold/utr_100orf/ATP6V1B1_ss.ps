%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUCCAGCUCCAGCUGGACCUGAAGUCUCAGAGCUGCCACCAGCAGCAGGCUCAGACACUGGGCUCCCAGCUGGGGACUGCUCCAUGGCCAUGGAGAUAGACAGCAGGCCUGGGGGGCUCCCCGGCAGUAGCUGCAACCUAGGUGCAGCCCGAGAACACAUGCAGGCGGUCACCCGAAACUACA\
) } def
/len { sequence length } bind def

/coor [
[116.62461090 213.18438721]
[128.31903076 202.79457092]
[121.55387878 189.40678406]
[114.78872681 176.01899719]
[108.02357483 162.63121033]
[93.02410126 162.75654602]
[86.48359680 176.25550842]
[79.94309998 189.75445557]
[73.40260315 203.25341797]
[66.86209869 216.75238037]
[60.32160187 230.25132751]
[62.04708862 246.55944824]
[48.62919998 255.98771667]
[33.87110519 248.83714294]
[32.95466995 232.46362305]
[46.82264328 223.71083069]
[53.36314392 210.21186829]
[59.90364456 196.71292114]
[66.44414520 183.21395874]
[72.98464203 169.71499634]
[79.52513885 156.21604919]
[68.06684113 148.34078979]
[59.09037399 138.30433655]
[46.86733246 146.99899292]
[34.64428711 155.69366455]
[22.42124367 164.38832092]
[16.09702682 179.51896667]
[-0.20084476 181.33869934]
[-9.70651817 167.97552490]
[-2.64137053 153.17634583]
[13.72657967 152.16528320]
[25.94962311 143.47061157]
[38.17266464 134.77595520]
[50.39570999 126.08128357]
[47.87186813 120.57855225]
[45.95630264 114.83569336]
[31.09013939 116.83499908]
[16.22397804 118.83429718]
[1.35781515 120.83360291]
[-13.50834751 122.83290863]
[-24.34326363 134.66439819]
[-40.33848190 133.42642212]
[-49.22383881 120.06865692]
[-44.18324661 104.83802795]
[-29.08341980 99.41817474]
[-15.50765133 107.96674347]
[-0.64148921 105.96744537]
[14.22467327 103.96813965]
[29.09083557 101.96883392]
[43.95699692 99.96952820]
[44.58960724 91.60312653]
[46.46416092 83.42492676]
[32.85779572 77.11090851]
[19.25143433 70.79689026]
[5.64506960 64.48286438]
[-7.96129417 58.16884232]
[-21.56765747 51.85482407]
[-35.17402267 45.54080200]
[-52.08666992 44.35813904]
[-55.63211441 27.77905083]
[-40.68241882 19.78261566]
[-28.86000061 31.93443680]
[-15.25363636 38.24845886]
[-1.64727247 44.56248093]
[11.95909119 50.87650299]
[25.56545448 57.19052124]
[39.17181778 63.50454330]
[52.77818298 69.81856537]
[60.51724243 60.22650528]
[70.16582489 52.55802536]
[81.25729370 47.18399811]
[93.25521851 44.36433792]
[105.57934570 44.23540497]
[109.05664825 29.64402580]
[112.53395081 15.05264664]
[116.01125336 0.46126622]
[119.48855591 -14.13011360]
[122.96585846 -28.72149277]
[126.44316101 -43.31287384]
[129.92045593 -57.90425491]
[119.99650574 -69.68649292]
[118.92570496 -84.87553406]
[126.90965271 -97.63172913]
[140.70886230 -103.17429352]
[144.18615723 -117.76567078]
[147.66346741 -132.35705566]
[151.14076233 -146.94842529]
[154.61807251 -161.53981018]
[153.56303406 -170.63362122]
[158.27729797 -176.34495544]
[161.99794006 -190.87620544]
[165.71858215 -205.40744019]
[169.43920898 -219.93867493]
[163.11970520 -239.06724548]
[177.18470764 -252.31930542]
[180.41770935 -266.96676636]
[170.02461243 -278.48904419]
[168.42253113 -293.92318726]
[176.22750854 -307.33447266]
[190.43835449 -313.56594849]
[205.59072876 -310.22149658]
[215.85821533 -298.58712769]
[217.29277039 -283.13650513]
[209.34277344 -269.81069946]
[195.06515503 -263.73376465]
[191.83215332 -249.08631897]
[198.09504700 -240.98159790]
[198.86860657 -230.54785156]
[193.65507507 -221.22428894]
[183.97044373 -216.21803284]
[180.24981689 -201.68679810]
[176.52917480 -187.15556335]
[172.80854797 -172.62432861]
[169.20944214 -158.06250000]
[165.73214722 -143.47113037]
[162.25483704 -128.87974548]
[158.77754211 -114.28836823]
[155.30023193 -99.69699097]
[165.11653137 -88.52656555]
[166.48918152 -73.54058075]
[158.68307495 -60.46701813]
[144.51184082 -54.42695236]
[141.03454590 -39.83557129]
[137.55723572 -25.24419212]
[134.07994080 -10.65281105]
[130.60263062 3.93856835]
[127.12532806 18.52994919]
[123.64802551 33.12133026]
[120.17072296 47.71270752]
[131.42297363 53.59508896]
[141.06230164 61.85939026]
[148.59394836 72.08142090]
[153.63130188 83.73648071]
[155.91581726 96.22634125]
[170.88232422 97.22822571]
[185.84881592 98.23011780]
[200.81532288 99.23200989]
[215.78182983 100.23389435]
[224.57347107 97.68099213]
[230.98937988 101.37963104]
[245.93705750 102.63146973]
[260.53533936 95.16001129]
[274.15609741 104.29273224]
[272.78750610 120.63466644]
[257.83740234 127.37464142]
[244.68522644 117.57913971]
[229.73754883 116.32730103]
[214.77993774 115.20040131]
[199.81343079 114.19850922]
[184.84693909 113.19661713]
[169.88043213 112.19473267]
[154.91392517 111.19284058]
[149.27865601 129.24830627]
[137.75532532 144.77275085]
[121.41136169 155.86605835]
[128.17651367 169.25384521]
[134.94166565 182.64163208]
[141.70681763 196.02941895]
[155.87297058 192.87762451]
[170.37210083 193.21591187]
[184.35758972 197.01997375]
[197.01390076 204.06329346]
[207.60412598 213.93058777]
[215.51293945 226.04228210]
[220.28225708 239.68861389]
[221.63784790 254.07116699]
[219.50509644 268.34957886]
[214.01300049 281.69070435]
[205.48652649 293.31716919]
[194.42724609 302.55270386]
[200.96774292 316.05166626]
[207.50823975 329.55062866]
[221.37622070 338.30340576]
[220.45977783 354.67694092]
[205.70169067 361.82751465]
[192.28379822 352.39923096]
[194.00929260 336.09112549]
[187.46878052 322.59216309]
[180.92828369 309.09320068]
[165.69726562 312.13525391]
[150.18621826 311.13961792]
[135.44801331 306.16815186]
[122.48456573 297.55273438]
[112.17871094 285.87316895]
[105.23405457 271.91815186]
[102.12698364 256.63211060]
[103.07396698 241.05111694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 158]
[3 157]
[4 156]
[5 155]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[23 34]
[24 33]
[25 32]
[26 31]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[73 129]
[74 128]
[75 127]
[76 126]
[77 125]
[78 124]
[79 123]
[80 122]
[84 118]
[85 117]
[86 116]
[87 115]
[88 114]
[90 113]
[91 112]
[92 111]
[93 110]
[95 106]
[96 105]
[134 152]
[135 151]
[136 150]
[137 149]
[138 148]
[140 147]
[141 146]
[170 179]
[171 178]
[172 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
