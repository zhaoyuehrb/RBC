%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCAGAACACUGGCGGCCGAUCCCAACGAGGCUCCCUGGAGCCCGACGCAGAGCAGCGCCCUGGCCGGGCCAAGCAGGAGCCGGCAUCAUGGAUUCCUUCAAAGUAGUGCUGGAGGGGCCAGCACCUUGGGGCUUCCGGCUGCAAGGGGGCAAGGACUUCAAUGUGCCCCUCUCCAUUUCCCGGCUCA\
) } def
/len { sequence length } bind def

/coor [
[-127.53434753 203.92140198]
[-146.29084778 203.53550720]
[-150.45188904 217.94680786]
[-154.61293030 232.35810852]
[-158.77397156 246.76942444]
[-162.93502808 261.18072510]
[-158.47384644 276.96139526]
[-170.10209656 288.52496338]
[-185.85763550 283.97576904]
[-189.53251648 267.99368286]
[-177.34632874 257.01968384]
[-173.18528748 242.60838318]
[-169.02424622 228.19706726]
[-164.86318970 213.78576660]
[-160.70214844 199.37446594]
[-170.39663696 187.92819214]
[-185.29627991 189.66046143]
[-200.19592285 191.39273071]
[-215.09556580 193.12501526]
[-220.94883728 205.61541748]
[-232.12356567 213.51608276]
[-245.63534546 214.84812927]
[-257.93981934 209.36972046]
[-265.86245728 198.61149597]
[-280.78869629 200.09718323]
[-295.71493530 201.58285522]
[-305.86190796 222.85726929]
[-335.23123169 227.04826355]
[-349.33602905 232.15266418]
[-356.35592651 238.02593994]
[-363.71643066 237.22274780]
[-377.90368652 242.09323120]
[-392.09097290 246.96372986]
[-406.27822876 251.83422852]
[-420.46548462 256.70471191]
[-430.82174683 269.42004395]
[-446.96640015 266.54214478]
[-452.29119873 251.03153992]
[-441.31845093 238.84422302]
[-425.33596802 242.51745605]
[-411.14871216 237.64695740]
[-396.96145630 232.77647400]
[-382.77420044 227.90597534]
[-368.58694458 223.03549194]
[-354.44042969 218.04786682]
[-340.33563232 212.94346619]
[-340.89315796 205.46421814]
[-342.56576538 183.02647400]
[-357.27145386 180.06971741]
[-371.97717285 177.11296082]
[-384.99560547 186.07376099]
[-400.52188110 183.12245178]
[-409.34454346 170.01000977]
[-406.22924805 154.51579285]
[-393.02423096 145.83227539]
[-377.56384277 149.11120605]
[-369.02041626 162.40727234]
[-354.31469727 165.36402893]
[-339.60900879 168.32078552]
[-324.38409424 164.62211609]
[-310.64053345 167.94671631]
[-301.14135742 176.25885010]
[-297.20062256 186.65661621]
[-282.27438354 185.17092896]
[-267.34811401 183.68525696]
[-259.52749634 169.26148987]
[-244.50283813 162.26542664]
[-228.10479736 165.63027954]
[-216.82783508 178.22537231]
[-201.92819214 176.49310303]
[-187.02854919 174.76083374]
[-172.12890625 173.02856445]
[-170.92170715 157.81968689]
[-164.02636719 144.50790405]
[-152.70716858 135.08726501]
[-138.87168884 130.87815857]
[-124.75110626 132.34465027]
[-112.54062653 139.05220032]
[-104.05829620 149.76779175]
[-89.71775818 145.36903381]
[-75.37722015 140.97029114]
[-61.03668594 136.57153320]
[-46.69614792 132.17279053]
[-32.35561371 127.77403259]
[-18.01507568 123.37528229]
[-14.86616707 110.39099121]
[-5.63527298 100.58264160]
[7.34133291 96.58887482]
[20.70127296 99.55656433]
[30.92722511 108.81405640]
[45.33853149 104.65300751]
[59.74983597 100.49196625]
[74.16114044 96.33092499]
[88.57244873 92.16988373]
[73.59367371 92.96765137]
[59.51238251 87.79878235]
[48.60700607 77.49961853]
[42.64210129 63.73662949]
[42.58281708 48.73674774]
[48.43875504 34.92704010]
[59.26238632 24.54200172]
[73.30238342 19.26199150]
[88.28698730 19.94134521]
[101.79161072 26.47014236]
[111.63111877 37.79198074]
[116.21342468 52.07492447]
[114.79708099 67.00791168]
[107.60958862 80.17666626]
[117.58495331 68.97434235]
[127.56032562 57.77202225]
[137.53569031 46.56969833]
[147.51106262 35.36737823]
[157.48643494 24.16505623]
[167.46180725 12.96273327]
[167.97308350 -3.07217050]
[180.91413879 -12.55418873]
[196.35769653 -8.20952797]
[202.45677185 6.62895966]
[194.53269958 20.57845688]
[178.66412354 22.93810272]
[168.68875122 34.14042282]
[158.71337891 45.34274673]
[148.73802185 56.54506683]
[138.76264954 67.74739075]
[128.78727722 78.94971466]
[118.81191254 90.15203857]
[126.16826630 103.22429657]
[140.92083740 100.51109314]
[155.67341614 97.79788208]
[170.42599487 95.08467102]
[182.59899902 84.97882080]
[196.51586914 90.28637695]
[211.26844788 87.57316589]
[226.02102661 84.85996246]
[240.77359009 82.14675140]
[255.25779724 73.33515930]
[267.73464966 84.81401825]
[260.15832520 99.98094177]
[243.48680115 96.89933014]
[228.73422241 99.61253357]
[213.98165894 102.32574463]
[199.22908020 105.03895569]
[188.11126709 114.95074463]
[173.13920593 109.83724976]
[158.38662720 112.55046082]
[143.63404846 115.26366425]
[128.88146973 117.97687531]
[126.04639435 132.70651245]
[138.73782349 140.70199585]
[151.42924500 148.69746399]
[164.12068176 156.69294739]
[176.81210327 164.68841553]
[189.50354004 172.68389893]
[202.40933228 164.53509521]
[217.57366943 162.80140686]
[231.98565674 167.82708740]
[242.78378296 178.61427307]
[247.82406616 193.02116394]
[246.10575867 208.18725586]
[237.97003174 221.10130310]
[225.03224182 229.19921875]
[209.86119080 230.87316895]
[195.46911621 225.79077148]
[184.71354675 214.96115112]
[179.73004150 200.53453064]
[181.50805664 185.37532043]
[168.81663513 177.37985229]
[156.12519836 169.38436890]
[143.43377686 161.38890076]
[130.74234009 153.39341736]
[118.05091858 145.39794922]
[99.06891632 135.82582092]
[90.47803497 120.73941040]
[92.73348999 106.58118439]
[78.32218170 110.74222565]
[63.91087723 114.90327454]
[49.49957275 119.06431580]
[35.08826828 123.22535706]
[29.55563164 139.20021057]
[15.73240185 148.64141846]
[-0.82865620 147.99604797]
[-13.61632538 137.71582031]
[-27.95686150 142.11457825]
[-42.29739761 146.51332092]
[-56.63793564 150.91207886]
[-70.97846985 155.31082153]
[-85.31900787 159.70957947]
[-99.65954590 164.10832214]
[-101.42160797 181.05853271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[16 72]
[17 71]
[18 70]
[19 69]
[24 65]
[25 64]
[26 63]
[28 46]
[29 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[48 59]
[49 58]
[50 57]
[79 188]
[80 187]
[81 186]
[82 185]
[83 184]
[84 183]
[85 182]
[90 178]
[91 177]
[92 176]
[93 175]
[94 174]
[108 126]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[127 147]
[128 146]
[129 145]
[130 144]
[132 142]
[133 141]
[134 140]
[135 139]
[148 171]
[149 170]
[150 169]
[151 168]
[152 167]
[153 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
