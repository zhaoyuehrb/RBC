%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGCCGGGCAAGGGCUGUCGCGCAUGCGCCUUGAGGGAAGAUGGCACCUGCCGGCUGCUGCUGCUGCUGCUGCUUCUGGGGCGGCGCUGUGGCCGCCGCGGGCGCCGCCCGGCGUGUCCUGCUGCUGCUGCUGCUGGGGG\
) } def
/len { sequence length } bind def

/coor [
[82.47765350 524.27307129]
[66.99426270 523.25115967]
[55.09019852 513.29760742]
[51.34281158 498.23983765]
[57.19304276 483.86782837]
[70.39136505 475.70791626]
[71.37926483 460.74050903]
[64.49697876 447.53128052]
[73.12635803 434.27066040]
[74.11425781 419.30322266]
[75.10214996 404.33578491]
[76.09004974 389.36834717]
[66.11188507 378.36962891]
[66.90054321 363.17645264]
[78.50466156 352.78500366]
[79.49256134 337.81756592]
[80.48046112 322.85012817]
[73.59817505 309.64093018]
[82.22755432 296.38027954]
[83.21545410 281.41284180]
[76.33316803 268.20364380]
[84.96254730 254.94300842]
[85.95043945 239.97557068]
[86.93833923 225.00813293]
[78.33124542 209.75274658]
[88.59506226 194.50753784]
[89.25392151 179.52201843]
[89.91278839 164.53649902]
[90.57164764 149.55097961]
[91.23051453 134.56544495]
[91.88937378 119.57992554]
[92.54824066 104.59440613]
[90.61081696 102.13072968]
[89.55758667 98.88690948]
[89.68674469 95.20080566]
[91.16292572 91.51821136]
[93.98034668 88.33964539]
[95.95185089 73.46976471]
[97.92335510 58.59989166]
[96.03651428 54.49285126]
[95.64471436 50.41581726]
[96.54585266 46.84914398]
[98.39881134 44.15340424]
[100.77651215 42.53353882]
[104.04544067 27.89406967]
[107.31437683 13.25460052]
[110.58330536 -1.38486981]
[106.03942871 -16.53953171]
[116.36440277 -27.27471733]
[119.63333130 -41.91418839]
[122.90226746 -56.55365753]
[126.17119598 -71.19313049]
[129.44012451 -85.83259583]
[128.25398254 -94.96961212]
[132.94500732 -100.75608063]
[136.53474426 -115.32020569]
[140.12448120 -129.88433838]
[135.91461182 -145.13516235]
[146.47291565 -155.64094543]
[150.06265259 -170.20506287]
[153.65238953 -184.76919556]
[157.24212646 -199.33332825]
[160.83186340 -213.89744568]
[156.62197876 -229.14826965]
[167.18029785 -239.65405273]
[170.77001953 -254.21818542]
[169.78486633 -263.37905884]
[174.60189819 -269.06106567]
[178.51069641 -283.54281616]
[182.41950989 -298.02456665]
[186.32830811 -312.50634766]
[190.23710632 -326.98809814]
[194.14591980 -341.46984863]
[184.29835510 -353.46173096]
[183.41377258 -368.95355225]
[191.83230591 -381.98843384]
[206.31686401 -387.55416870]
[221.29782104 -383.51062012]
[231.01470947 -371.41262817]
[231.73118591 -355.91210938]
[223.17175293 -342.96932983]
[208.62767029 -337.56103516]
[204.71887207 -323.07928467]
[200.81005859 -308.59753418]
[196.90126038 -294.11578369]
[192.99244690 -279.63403320]
[189.08364868 -265.15225220]
[185.33415222 -250.62844849]
[181.74441528 -236.06431580]
[186.21104431 -221.85522461]
[175.39598083 -210.30770874]
[171.80624390 -195.74359131]
[168.21652222 -181.17945862]
[164.62678528 -166.61532593]
[161.03704834 -152.05120850]
[165.50367737 -137.84210205]
[154.68861389 -126.29460144]
[151.09887695 -111.73046875]
[147.50914001 -97.16634369]
[144.07960510 -82.56366730]
[140.81066895 -67.92419434]
[137.54173279 -53.28472519]
[134.27279663 -38.64525604]
[131.00387573 -24.00578499]
[135.78157043 -9.89823723]
[125.22277832 1.88406277]
[121.95384216 16.52353287]
[118.68491364 31.16300201]
[115.41597748 45.80247116]
[112.79322815 60.57139969]
[110.82172394 75.44127655]
[108.85021973 90.31114960]
[107.53376007 105.25326538]
[106.87490082 120.23879242]
[106.21603394 135.22431946]
[105.55717468 150.20983887]
[104.89830780 165.19535828]
[104.23944855 180.18087769]
[103.58058167 195.16641235]
[111.72372437 205.23406982]
[110.82071686 217.74836731]
[101.90576935 225.99603271]
[100.91787720 240.96347046]
[99.92997742 255.93090820]
[106.74160004 270.21069336]
[98.18288422 282.40075684]
[97.19498444 297.36819458]
[104.00661469 311.64797974]
[95.44789124 323.83804321]
[94.45999908 338.80548096]
[93.47209930 353.77291870]
[103.60977173 365.59936523]
[102.39468384 380.76440430]
[91.05747986 390.35623169]
[90.06958771 405.32366943]
[89.08168793 420.29110718]
[88.09378815 435.25854492]
[94.90541840 449.53833008]
[86.34669495 461.72839355]
[85.35880280 476.69583130]
[97.37014008 486.51965332]
[101.28066254 501.53588867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 140]
[7 139]
[9 137]
[10 136]
[11 135]
[12 134]
[15 131]
[16 130]
[17 129]
[19 127]
[20 126]
[22 124]
[23 123]
[24 122]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[37 112]
[38 111]
[39 110]
[44 109]
[45 108]
[46 107]
[47 106]
[49 104]
[50 103]
[51 102]
[52 101]
[53 100]
[55 99]
[56 98]
[57 97]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[65 89]
[66 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
