%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:28 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (C1QTNF2)
} def

/sequence { (\
CGGGAUGGGAAAACUAUGCCUGGGGCCGACGCUCUGCCCGGCUGCUGCCGCUGAGGAAAGCCGGGACGCGGAGCCCCGCCGAGAGCUUCUUUGCUCCGGACGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 22 0.154974818 ubox
1 78 0.015715481 ubox
1 102 0.052199630 ubox
2 20 0.968129882 ubox
2 21 0.231928277 ubox
2 77 0.009906781 ubox
2 101 0.028081827 ubox
2 104 0.009167096 ubox
3 19 0.969341897 ubox
3 20 0.244086557 ubox
3 76 0.009910136 ubox
3 103 0.008427385 ubox
3 104 0.005897674 ubox
4 19 0.243950556 ubox
4 20 0.003359755 ubox
4 75 0.009886584 ubox
4 103 0.005953942 ubox
5 17 0.993371302 ubox
6 16 0.998752621 ubox
6 18 0.003564032 ubox
7 15 0.999024094 ubox
7 20 0.004558228 ubox
7 21 0.005127172 ubox
8 14 0.999021379 ubox
8 15 0.027186989 ubox
8 19 0.004563847 ubox
8 20 0.005586560 ubox
9 14 0.031541369 ubox
9 19 0.005576857 ubox
18 26 0.009820939 ubox
18 103 0.004799291 ubox
19 25 0.009887825 ubox
19 102 0.004805528 ubox
20 24 0.009816205 ubox
20 99 0.007454085 ubox
21 78 0.615883524 ubox
21 98 0.013268979 ubox
21 102 0.005725870 ubox
22 76 0.010415219 ubox
22 77 0.982977284 ubox
22 97 0.015707776 ubox
23 75 0.009929428 ubox
23 76 0.997715367 ubox
23 77 0.058311322 ubox
23 96 0.015724113 ubox
24 74 0.009117509 ubox
24 75 0.997802077 ubox
24 76 0.058466822 ubox
24 95 0.015714223 ubox
24 104 0.017293447 ubox
25 74 0.997473446 ubox
25 75 0.058254801 ubox
25 94 0.015736512 ubox
25 103 0.017510447 ubox
26 31 0.003289503 ubox
26 71 0.023572529 ubox
26 73 0.995724868 ubox
26 93 0.015719663 ubox
26 102 0.017095405 ubox
27 70 0.033783042 ubox
27 78 0.011315757 ubox
27 102 0.003290599 ubox
28 69 0.033812943 ubox
28 77 0.011998413 ubox
28 89 0.015160171 ubox
28 91 0.003534638 ubox
28 101 0.004446322 ubox
29 88 0.014988736 ubox
29 90 0.003585343 ubox
30 68 0.032285800 ubox
30 70 0.994220843 ubox
31 67 0.031544876 ubox
31 69 0.995418305 ubox
31 74 0.067774014 ubox
31 86 0.015722439 ubox
32 68 0.993222245 ubox
32 71 0.014687264 ubox
32 73 0.071999420 ubox
32 85 0.015735905 ubox
33 66 0.102615528 ubox
33 70 0.014414170 ubox
33 71 0.003364711 ubox
33 72 0.085487393 ubox
33 84 0.015733338 ubox
34 65 0.061735807 ubox
34 70 0.004335203 ubox
34 71 0.085615688 ubox
34 83 0.015733180 ubox
35 64 0.015089151 ubox
35 68 0.049576832 ubox
35 70 0.085056777 ubox
35 82 0.015253852 ubox
36 67 0.353236821 ubox
36 69 0.084008718 ubox
37 64 0.009084729 ubox
37 65 0.995774281 ubox
37 68 0.061877074 ubox
38 63 0.006521534 ubox
38 64 0.999812794 ubox
38 65 0.005898428 ubox
39 63 0.999945997 ubox
39 64 0.004215203 ubox
40 49 0.004586395 ubox
40 62 0.999967157 ubox
41 48 0.004792622 ubox
41 61 0.999965816 ubox
42 47 0.004800735 ubox
42 60 0.999925134 ubox
43 59 0.993410963 ubox
44 51 0.048968628 ubox
44 61 0.005949746 ubox
45 50 0.048913314 ubox
45 55 0.077228779 ubox
45 56 0.165082367 ubox
45 60 0.008079245 ubox
46 53 0.004491759 ubox
46 54 0.077753456 ubox
46 55 0.164669594 ubox
46 59 0.013142049 ubox
47 52 0.006423390 ubox
48 56 0.978784581 ubox
49 55 0.979019036 ubox
50 61 0.004620585 ubox
51 60 0.004660154 ubox
52 59 0.004775459 ubox
67 81 0.005025123 ubox
68 79 0.015394765 ubox
68 80 0.003670580 ubox
69 78 0.015947708 ubox
70 77 0.015954864 ubox
71 76 0.015901594 ubox
77 102 0.158505433 ubox
78 101 0.521842605 ubox
78 103 0.055221994 ubox
79 99 0.996522250 ubox
79 102 0.041075549 ubox
80 98 0.999705808 ubox
81 97 0.999235487 ubox
81 101 0.003517409 ubox
83 96 0.999681959 ubox
84 95 0.999710637 ubox
85 94 0.999862244 ubox
86 93 0.999535244 ubox
98 104 0.003881723 ubox
99 103 0.004315060 ubox
2 20 0.9500000 lbox
3 19 0.9500000 lbox
5 17 0.9500000 lbox
6 16 0.9500000 lbox
7 15 0.9500000 lbox
8 14 0.9500000 lbox
21 78 0.9500000 lbox
22 77 0.9500000 lbox
23 76 0.9500000 lbox
24 75 0.9500000 lbox
25 74 0.9500000 lbox
26 73 0.9500000 lbox
30 70 0.9500000 lbox
31 69 0.9500000 lbox
32 68 0.9500000 lbox
37 65 0.9500000 lbox
38 64 0.9500000 lbox
39 63 0.9500000 lbox
40 62 0.9500000 lbox
41 61 0.9500000 lbox
42 60 0.9500000 lbox
43 59 0.9500000 lbox
48 56 0.9500000 lbox
49 55 0.9500000 lbox
79 99 0.9500000 lbox
80 98 0.9500000 lbox
81 97 0.9500000 lbox
83 96 0.9500000 lbox
84 95 0.9500000 lbox
85 94 0.9500000 lbox
86 93 0.9500000 lbox
showpage
end
%%EOF
