%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGGAUGAGCUUCCAGGCCCCACGCAGACUCCUGGAGCUGGCAGGGCAGAGCCUGCUGAGGGACCAGGCCUUGGCCAUCUCCGUCCUGGAUGAGCUGCCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[136.16018677 123.93890381]
[125.50770569 135.07116699]
[111.63525391 141.77619934]
[96.29401398 143.20758057]
[81.42060089 139.18463135]
[72.74694824 151.42260742]
[64.07328796 163.66056824]
[66.97550964 179.19609070]
[57.97361755 192.18614197]
[42.40827560 194.92395020]
[29.51412010 185.78521729]
[26.94103241 170.19180298]
[36.21557617 157.39498901]
[51.83532715 154.98690796]
[60.50898361 142.74894714]
[69.18264008 130.51098633]
[65.51914215 126.30019379]
[62.42680740 121.65375519]
[59.95685959 116.64863586]
[45.31907272 119.92507935]
[35.54706955 132.64859009]
[19.50470734 132.79742432]
[9.49831104 120.25742340]
[13.20393181 104.64820099]
[27.77893448 97.94380951]
[42.04262543 105.28729248]
[56.68041611 102.01084137]
[59.20190430 85.29811859]
[67.92074585 70.81864929]
[81.51251984 60.77191162]
[97.91259766 56.68403625]
[114.62975311 59.17598343]
[129.12460327 67.86921692]
[140.96882629 58.66517639]
[152.81304932 49.46113586]
[164.65727234 40.25709152]
[176.50149536 31.05305099]
[188.07041931 21.50527191]
[199.35406494 11.62198448]
[210.63771057 1.73869705]
[221.92135620 -8.14459038]
[222.34352112 -26.95964813]
[236.04014587 -39.40266800]
[254.18089294 -38.06836319]
[264.86505127 -48.59682465]
[275.54922485 -59.12528992]
[286.23339844 -69.65374756]
[296.91757202 -80.18221283]
[307.60174561 -90.71067810]
[312.00051880 -105.90808868]
[326.49664307 -109.33022308]
[337.18081665 -119.85868835]
[347.86499023 -130.38714600]
[345.69699097 -145.63856506]
[352.84167480 -159.08500671]
[366.37408447 -165.66818237]
[381.01284790 -163.05191040]
[391.69699097 -173.58036804]
[402.38116455 -184.10882568]
[413.06533813 -194.63729858]
[423.74951172 -205.16575623]
[434.43368530 -215.69421387]
[445.11785889 -226.22267151]
[443.68905640 -241.79484558]
[452.64657593 -254.61270142]
[467.76089478 -258.62402344]
[481.89553833 -251.93479919]
[488.37655640 -237.70347595]
[484.14379883 -222.64964294]
[471.19583130 -213.88127136]
[455.64630127 -215.53851318]
[444.96215820 -205.01004028]
[434.27798462 -194.48158264]
[423.59381104 -183.95312500]
[412.90963745 -173.42465210]
[402.22546387 -162.89619446]
[391.54129028 -152.36773682]
[393.94238281 -137.69215393]
[387.16128540 -124.25785065]
[373.61141968 -117.31130981]
[358.39346313 -119.70298004]
[347.70928955 -109.17451477]
[337.02511597 -98.64604950]
[333.39056396 -84.20170593]
[318.13018799 -80.02650452]
[307.44604492 -69.49804688]
[296.76187134 -58.96958160]
[286.07769775 -48.44112015]
[275.39352417 -37.91265488]
[264.70935059 -27.38419342]
[267.11389160 -16.04334450]
[263.63995361 -4.85648251]
[255.05909729 3.29394627]
[243.47413635 6.24785233]
[231.80464172 3.13905454]
[220.52099609 13.02234173]
[209.23735046 22.90562820]
[197.95370483 32.78891754]
[196.75346375 37.56129074]
[192.44505310 41.56857681]
[185.70553589 42.89727402]
[173.86131287 52.10131454]
[162.01708984 61.30535889]
[150.17286682 70.50939941]
[138.32864380 79.71343994]
[143.00253296 94.39531708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[19 27]
[20 26]
[33 105]
[34 104]
[35 103]
[36 102]
[37 101]
[38 98]
[39 97]
[40 96]
[41 95]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[51 83]
[52 82]
[53 81]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
