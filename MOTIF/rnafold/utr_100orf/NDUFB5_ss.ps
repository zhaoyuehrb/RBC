%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUUCUUCCUCCUGCCCGUAGUAGCCAUGGCGGCCAUGAGUUUGUUGCGGCGGGUUUCGGUUACUGCGGUGGCAGCUCUGUCUGGCCGGCCCCUUGGCACUCGCCUCGGAUUUGGGGGCUUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[136.15121460 443.56594849]
[133.26931763 428.84539795]
[130.38742065 414.12484741]
[127.50551605 399.40429688]
[124.62361145 384.68374634]
[111.99761200 380.17578125]
[103.19683838 369.91870117]
[100.61849213 356.54110718]
[105.04662323 343.54226685]
[115.41809082 334.37686157]
[112.89273834 319.59097290]
[110.36737823 304.80508423]
[98.70143890 302.25042725]
[88.57399750 295.85595703]
[81.20915222 286.36654663]
[77.50660706 274.90267944]
[77.93186951 262.82836914]
[82.45777893 251.58874512]
[90.56498718 242.53712463]
[101.30142975 236.77206421]
[99.85372162 221.84208679]
[96.03823090 215.42317200]
[98.55589294 206.53453064]
[97.46936798 191.57392883]
[96.38284302 176.61332703]
[92.72357178 170.10409546]
[95.45528412 161.27886963]
[94.73058319 146.29638672]
[94.00588226 131.31390381]
[93.28118134 116.33142853]
[82.38688660 101.27915955]
[90.99197388 84.81074524]
[89.54426575 69.88076782]
[88.09655762 54.95079803]
[86.46855927 40.03940582]
[84.66050720 25.14877129]
[82.85245514 10.25813770]
[81.04440308 -4.63249493]
[79.23635864 -19.52312851]
[65.26050568 -35.67882919]
[73.76638031 -54.42228699]
[70.88447571 -69.14283752]
[68.00257874 -83.86338806]
[65.12067413 -98.58394623]
[62.23877335 -113.30449677]
[57.47443390 -121.21952057]
[59.46960831 -128.41534424]
[56.94425201 -143.20123291]
[54.41889954 -157.98712158]
[51.89354324 -172.77301025]
[49.36818695 -187.55889893]
[39.41797256 -199.85946655]
[44.90210342 -213.70770264]
[42.37674713 -228.49359131]
[39.85139465 -243.27947998]
[37.32603836 -258.06536865]
[22.89416695 -263.32052612]
[13.03567982 -275.09786987]
[10.40245914 -290.22933960]
[15.70282936 -304.64468384]
[27.51101494 -314.46621704]
[42.65067673 -317.05197144]
[57.04932022 -311.70645142]
[66.83377838 -299.86752319]
[69.37208557 -284.71984863]
[63.98145294 -270.33804321]
[52.11192703 -260.59072876]
[54.63728333 -245.80484009]
[57.16263962 -231.01893616]
[59.68799591 -216.23304749]
[69.45758057 -204.99008179]
[64.15407562 -190.08425903]
[66.67943573 -175.29837036]
[69.20478821 -160.51248169]
[71.73014832 -145.72657776]
[74.25550079 -130.94068909]
[76.95932770 -116.18639374]
[79.84122467 -101.46584320]
[82.72312927 -86.74529266]
[85.60502625 -72.02474213]
[88.48693085 -57.30418777]
[96.71858215 -53.53122330]
[102.32856750 -46.24750137]
[103.92224121 -37.05226135]
[101.00534058 -28.04170990]
[94.12699127 -21.33117867]
[95.93503571 -6.44054508]
[97.74308777 8.45008755]
[99.55113983 23.34072113]
[101.35919189 38.23135376]
[105.32867432 44.55620193]
[103.02652740 53.50308609]
[104.47423553 68.43305969]
[105.92194366 83.36303711]
[114.05134583 89.30337524]
[117.61311340 98.72084045]
[115.44944000 108.55410767]
[108.26366425 115.60672760]
[108.98836517 130.58920288]
[109.71306610 145.57168579]
[110.43776703 160.55416870]
[111.34344482 175.52680969]
[112.42996216 190.48741150]
[113.51648712 205.44799805]
[114.78369141 220.39437866]
[116.23140717 235.32435608]
[133.20169067 242.29144287]
[144.31181335 256.78353882]
[146.61213684 274.81411743]
[139.56188965 291.47668457]
[125.15327454 302.27972412]
[127.67862701 317.06561279]
[130.20397949 331.85150146]
[145.43222046 339.10122681]
[153.29399109 353.83529663]
[150.88551331 370.19372559]
[139.34416199 381.80184937]
[142.22605896 396.52239990]
[145.10797119 411.24295044]
[147.98986816 425.96350098]
[150.87176514 440.68405151]
[165.24839783 446.28015137]
[174.29879761 458.77389526]
[175.13505554 474.17858887]
[167.49029541 487.57861328]
[153.80393982 494.69812012]
[138.44325256 493.26525879]
[126.30979156 483.73730469]
[121.27527618 469.15451050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 117]
[10 113]
[11 112]
[12 111]
[20 106]
[21 105]
[23 104]
[24 103]
[25 102]
[27 101]
[28 100]
[29 99]
[30 98]
[32 94]
[33 93]
[34 92]
[35 90]
[36 89]
[37 88]
[38 87]
[39 86]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[53 70]
[54 69]
[55 68]
[56 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
