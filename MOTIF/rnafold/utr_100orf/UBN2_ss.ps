%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGAGCCGCGCAGAGUAGCGUUCAUUAGCUUGUCACCGGUGCGGCGGCGCGAGGCCGAGUACCCGGGGCCCGAGCGUGAGCCCGAGUACCCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[93.45750427 205.03263855]
[79.49929810 197.12390137]
[77.12220001 181.25793457]
[88.14971161 169.60574341]
[89.08226013 154.63476562]
[90.01480103 139.66378784]
[90.94734955 124.69279480]
[73.10272980 110.95961761]
[71.31463623 86.30029297]
[56.72095490 82.83264923]
[42.12727737 79.36500549]
[27.53359795 75.89735413]
[12.93992043 72.42971039]
[-1.65375733 68.96206665]
[-16.24743462 65.49442291]
[-36.15239334 73.09931183]
[-50.95872498 58.86600113]
[-65.81202698 56.77326965]
[-78.35622406 66.00803375]
[-93.38977051 63.67411423]
[-102.11640167 51.65822601]
[-116.96969604 49.56549835]
[-131.82299805 47.47276688]
[-142.50868225 58.72425079]
[-157.77311707 61.51289368]
[-171.74682617 54.76641083]
[-179.05662537 41.07895660]
[-176.89175415 25.71364021]
[-166.08465576 14.57873726]
[-150.79086304 11.95584679]
[-136.89115906 18.85352325]
[-129.73027039 32.61946869]
[-114.87696838 34.71220016]
[-100.02366638 36.80492783]
[-88.31674957 27.66799164]
[-73.22357941 29.57872581]
[-63.71929550 41.91997147]
[-48.86599731 44.01270294]
[-42.50963593 37.37924576]
[-33.64807129 34.47082901]
[-24.32248497 36.09521484]
[-16.74627495 41.99979782]
[-12.77979088 50.90074539]
[1.81388748 54.36838913]
[16.40756607 57.83603287]
[31.00124359 61.30368042]
[45.59492111 64.77132416]
[60.18859863 68.23896790]
[74.78227997 71.70661163]
[87.73360443 64.13937378]
[91.87812805 49.72330475]
[96.02265167 35.30724335]
[89.54386139 20.63056564]
[97.10646820 6.48183680]
[112.90908813 3.71474814]
[124.82930756 14.45197392]
[123.72294617 30.45683289]
[110.43872070 39.45176697]
[106.29419708 53.86783218]
[102.14966583 68.28389740]
[114.85954285 73.98561096]
[123.20812225 84.10486603]
[126.00765991 96.09023285]
[140.86096191 98.18296051]
[155.71426392 100.27568817]
[170.56756592 102.36842346]
[185.31224060 96.63212585]
[196.83555603 106.06940460]
[211.68885803 108.16213226]
[226.54216003 110.25486755]
[241.39546204 112.34759521]
[249.43420410 99.41320801]
[262.04251099 90.87208557]
[277.03588867 88.20402527]
[291.81665039 91.87129211]
[303.82394409 101.23850250]
[310.97744751 114.68273163]
[312.03775024 129.87469482]
[306.82113647 144.18228149]
[296.23147583 155.12661743]
[282.10342407 160.81153870]
[266.88479614 160.25209045]
[253.21228027 153.54519653]
[243.45474243 141.85287476]
[239.30273438 127.20089722]
[224.44943237 125.10816193]
[209.59613037 123.01543427]
[194.74282837 120.92270660]
[181.06056213 126.80868530]
[168.47482300 117.22171783]
[153.62153625 115.12899017]
[138.76823425 113.03626251]
[123.91493225 110.94352722]
[119.52690125 117.61774445]
[113.33774567 122.66692352]
[105.91832733 125.62534332]
[104.98578644 140.59632874]
[104.05323792 155.56730652]
[103.12069702 170.53829956]
[112.61694336 183.46891785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[6 97]
[7 96]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[17 38]
[18 37]
[21 34]
[22 33]
[23 32]
[50 60]
[51 59]
[52 58]
[63 93]
[64 92]
[65 91]
[66 90]
[68 88]
[69 87]
[70 86]
[71 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
