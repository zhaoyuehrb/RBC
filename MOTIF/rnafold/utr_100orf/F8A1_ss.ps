%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGGGCGGCGAGCAUGGCGGCAGCGGCUGCAGGCCUGGGCGGCGGCGGCGCCGGCCCGGGACCCGAGGCCGGGGACUUCCUGGCCCGCUACCGGCUGGUAUCGAACAAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[67.39510345 109.94188690]
[54.97977066 118.35969543]
[42.56443405 126.77750397]
[30.14909935 135.19531250]
[23.06892204 149.34387207]
[8.19262600 150.08216858]
[-4.22270918 158.49996948]
[-16.63804436 166.91778564]
[-23.71822166 181.06632996]
[-38.59451675 181.80464172]
[-51.00985336 190.22244263]
[-54.24149323 202.79899597]
[-64.86662292 209.53884888]
[-76.83006287 207.25289917]
[-89.46879578 215.33142090]
[-92.62104797 230.81814575]
[-105.84672546 239.47013855]
[-121.29926300 236.15432739]
[-129.81094360 222.83792114]
[-126.33194733 207.42131042]
[-112.92629242 199.05088806]
[-97.54731750 202.69268799]
[-84.90858459 194.61416626]
[-77.76054382 178.64944458]
[-59.42765808 177.80711365]
[-47.01232529 169.38929749]
[-40.82017517 155.84284973]
[-25.05585098 154.50244141]
[-12.64051533 146.08464050]
[-0.22518039 137.66683960]
[5.96696949 124.12037659]
[21.73129272 122.77997589]
[34.14662933 114.36216736]
[46.56196213 105.94435883]
[58.97729874 97.52655792]
[62.59736633 82.96994019]
[55.57123947 69.71725464]
[48.54511261 56.46457672]
[41.51898575 43.21189499]
[34.49285889 29.95921516]
[27.46673393 16.70653534]
[20.44060707 3.45385432]
[13.23567104 -9.70247078]
[5.85324621 -22.76002884]
[-1.52917802 -35.81758499]
[-8.91160297 -48.87514496]
[-23.30615044 -56.73192596]
[-23.42869759 -73.13061523]
[-9.15317631 -81.20164490]
[4.83497953 -72.64223480]
[4.14595509 -56.25756836]
[11.52837944 -43.20001221]
[18.91080475 -30.14245224]
[26.29322815 -17.08489609]
[32.40563202 -12.75347233]
[33.69328690 -3.57227230]
[40.71941376 9.68040848]
[47.74554062 22.93308830]
[54.77166748 36.18576813]
[61.79779434 49.43844986]
[68.82392120 62.69113159]
[75.85004425 75.94380951]
[87.46164703 69.60923004]
[100.15042114 68.33599091]
[111.88134003 71.96032715]
[120.91236877 79.56095886]
[133.96992493 72.17853546]
[139.99958801 65.13610840]
[147.48254395 64.77847290]
[160.73522949 57.75234604]
[173.98791504 50.72621918]
[187.24058533 43.70009232]
[200.49327087 36.67396927]
[213.74595642 29.64784050]
[226.99862671 22.62171364]
[233.06321716 7.76909208]
[248.49662781 3.38855028]
[261.45968628 12.84046650]
[262.00823975 28.87413788]
[249.72148132 39.18990707]
[234.02476501 35.87439346]
[220.77207947 42.90052032]
[207.51939392 49.92664719]
[194.26672363 56.95277405]
[181.01403809 63.97890091]
[167.76135254 71.00502777]
[154.50866699 78.03115082]
[141.35235596 85.23609161]
[128.29478455 92.61851501]
[129.16629028 97.90032196]
[129.06033325 103.25248718]
[127.98044586 108.49565887]
[125.96282959 113.45410919]
[123.07510376 117.96165466]
[132.15272522 129.90304565]
[141.23033142 141.84445190]
[150.30793762 153.78584290]
[159.38555908 165.72723389]
[173.89668274 172.03105164]
[175.43928528 186.84555054]
[184.51689148 198.78695679]
[200.15499878 202.36875916]
[206.97468567 216.89016724]
[199.74447632 231.21160889]
[184.01075745 234.34689331]
[171.84310913 223.89088440]
[172.57550049 207.86456299]
[163.49789429 195.92317200]
[149.63606262 190.47349548]
[147.44416809 174.80485535]
[138.36654663 162.86346436]
[129.28894043 150.92205811]
[120.21131897 138.98066711]
[111.13371277 127.03926849]
[94.94564819 130.44006348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[6 30]
[7 29]
[8 28]
[10 26]
[11 25]
[14 23]
[15 22]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 54]
[44 53]
[45 52]
[46 51]
[66 89]
[67 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[94 114]
[95 113]
[96 112]
[97 111]
[98 110]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
