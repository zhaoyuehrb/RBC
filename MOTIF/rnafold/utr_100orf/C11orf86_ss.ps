%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGGGUGGAGGCACUGGGCCACCUCAGAGGGCCAGUGUCUUGCUGAGGGGCCGGAGCAGUCCUGUGCCUGCAGCCUCCGGAGCCAUGGGAACAGGGCUGCGAAGUCAGUCCUUGCGAGAGCCCCGACCCUCCUAUGGAAAGCUGCAGGAGCCCUGGGGGAGGCCCCAGGAGGGCCAACUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[106.33538818 243.56452942]
[93.07830048 251.62861633]
[77.61593628 250.32670593]
[65.89389038 240.15943909]
[62.41952896 225.03633118]
[68.52881622 210.77252197]
[81.87260437 202.85273743]
[83.13111877 187.90562439]
[84.38963318 172.95852661]
[85.64814758 158.01141357]
[86.90666199 143.06430054]
[88.16518402 128.11718750]
[76.19492340 119.07766724]
[62.16281509 124.37860870]
[51.98744965 136.49357605]
[37.34708786 133.75331116]
[23.31498337 139.05426025]
[9.28287792 144.35519409]
[-4.74922848 149.65614319]
[-11.68883896 155.62861633]
[-19.06184196 154.92610168]
[-33.18101883 159.99057007]
[-40.21998215 165.84562683]
[-47.58014297 165.01934814]
[-61.78240967 169.84591675]
[-75.98467255 174.67247009]
[-90.18693542 179.49903870]
[-104.38919830 184.32559204]
[-118.59146118 189.15216064]
[-132.75268555 194.09785461]
[-146.87185669 199.16232300]
[-160.99104309 204.22679138]
[-175.11021423 209.29125977]
[-189.22938538 214.35572815]
[-199.41043091 227.21179199]
[-215.59300232 224.55541992]
[-221.12986755 209.11924744]
[-210.32516479 196.78269958]
[-194.29385376 200.23654175]
[-180.17468262 195.17207336]
[-166.05551147 190.10760498]
[-151.93632507 185.04313660]
[-137.81715393 179.97866821]
[-132.57164001 174.74996948]
[-123.41802216 174.94990540]
[-109.21575928 170.12333679]
[-95.01349640 165.29676819]
[-80.81123352 160.47021484]
[-66.60897064 155.64364624]
[-52.40670776 150.81707764]
[-38.24548721 145.87139893]
[-24.12631035 140.80693054]
[-10.05017185 135.62403870]
[3.98193359 130.32308960]
[18.01403999 125.02214813]
[32.04614639 119.72120667]
[41.21784210 107.98538971]
[56.86187363 110.34650421]
[70.89397430 105.04556274]
[84.96989441 79.33424377]
[110.05115509 80.91863251]
[121.22077942 70.90666962]
[132.39041138 60.89470291]
[143.56002808 50.88273621]
[154.72966003 40.87077332]
[174.92045593 18.63809395]
[182.60157776 5.75398302]
[183.02241516 -10.06162548]
[196.18562317 -17.03152084]
[203.86674500 -29.91563225]
[211.54786682 -42.79974365]
[219.22898865 -55.68385696]
[226.91011047 -68.56797028]
[234.59123230 -81.45207977]
[242.27235413 -94.33618927]
[249.95349121 -107.22029877]
[249.77505493 -125.62395477]
[265.39791870 -133.59773254]
[272.86154175 -146.60906982]
[280.32513428 -159.62039185]
[287.45849609 -172.81565857]
[294.25714111 -186.18647766]
[301.05575562 -199.55728149]
[307.85440063 -212.92810059]
[300.96658325 -226.70722961]
[303.48367310 -241.72447205]
[314.23364258 -252.25547791]
[328.94726562 -254.41130066]
[335.74588013 -267.78210449]
[342.54452515 -281.15292358]
[349.34313965 -294.52374268]
[339.31814575 -296.83340454]
[330.13562012 -304.69714355]
[324.31893921 -317.56256104]
[324.04559326 -333.85214233]
[329.46423340 -347.83923340]
[334.88284302 -361.82632446]
[340.30148315 -375.81341553]
[345.72009277 -389.80047607]
[351.13873291 -403.78756714]
[356.55734253 -417.77465820]
[349.94519043 -432.12927246]
[355.49822998 -446.92587280]
[369.92193604 -453.38589478]
[384.65899658 -447.67672729]
[390.96618652 -433.18551636]
[385.10153198 -418.50964355]
[370.54443359 -412.35601807]
[365.12582397 -398.36895752]
[359.70718384 -384.38186646]
[354.28857422 -370.39477539]
[348.86993408 -356.40768433]
[343.45132446 -342.42062378]
[338.03268433 -328.43353271]
[344.12979126 -324.06600952]
[362.42114258 -310.96347046]
[373.92080688 -320.59454346]
[379.03268433 -336.17660522]
[395.13641357 -339.27536011]
[405.66583252 -326.70303345]
[399.78921509 -311.39300537]
[383.55187988 -309.09487915]
[372.05221558 -299.46380615]
[362.71395874 -287.72512817]
[355.91534424 -274.35430908]
[349.11669922 -260.98348999]
[342.31808472 -247.61267090]
[349.24453735 -234.45356750]
[347.06848145 -219.56300354]
[336.41702271 -208.68182373]
[321.22518921 -206.12947083]
[314.42657471 -192.75865173]
[307.62792969 -179.38784790]
[300.82931519 -166.01702881]
[301.58108521 -162.55200195]
[300.67880249 -158.54948425]
[297.88772583 -154.79692078]
[293.33645630 -152.15679932]
[285.87286377 -139.14547729]
[278.40927124 -126.13414001]
[281.26858521 -114.36692047]
[275.13961792 -103.46034241]
[262.83758545 -99.53917694]
[255.15647888 -86.65506744]
[247.47534180 -73.77095795]
[239.79421997 -60.88684464]
[232.11309814 -48.00273132]
[224.43197632 -35.11862183]
[216.75085449 -22.23450851]
[209.06973267 -9.35039616]
[209.19828796 5.54365396]
[195.48568726 13.43510723]
[187.80456543 26.31921959]
[189.93928528 41.16654205]
[200.93914795 51.36473083]
[211.93901062 61.56292343]
[222.93885803 71.76111603]
[233.93872070 81.95930481]
[244.93858337 92.15750122]
[255.93843079 102.35569000]
[272.03936768 105.46890259]
[277.13723755 121.05554962]
[265.98779297 133.08143616]
[250.06062317 129.17535400]
[245.74024963 113.35555267]
[234.74038696 103.15735626]
[223.74052429 92.95916748]
[212.74067688 82.76097107]
[201.74081421 72.56278229]
[190.74095154 62.36458969]
[179.74108887 52.16639709]
[164.74162292 52.04040146]
[153.57199097 62.05236435]
[142.40237427 72.06433105]
[131.23274231 82.07629395]
[120.06311798 92.08825684]
[123.47583008 101.99070740]
[121.85393524 113.24323273]
[114.76687622 123.25433350]
[103.11228943 129.37570190]
[101.85377502 144.32281494]
[100.59526062 159.26992798]
[99.33674622 174.21704102]
[98.07823181 189.16415405]
[96.81970978 204.11125183]
[108.65136719 214.15075684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 185]
[8 184]
[9 183]
[10 182]
[11 181]
[12 180]
[13 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 53]
[21 52]
[22 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[61 176]
[62 175]
[63 174]
[64 173]
[65 172]
[66 153]
[67 152]
[69 150]
[70 149]
[71 148]
[72 147]
[73 146]
[74 145]
[75 144]
[76 143]
[78 140]
[79 139]
[80 138]
[81 134]
[82 133]
[83 132]
[84 131]
[88 127]
[89 126]
[90 125]
[91 124]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[116 123]
[117 122]
[154 171]
[155 170]
[156 169]
[157 168]
[158 167]
[159 166]
[160 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
