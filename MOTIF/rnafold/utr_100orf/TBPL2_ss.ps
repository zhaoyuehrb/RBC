%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCUCUGCGCCCUGGCCGGAGCGGGUUCCGAGGCUGCUCGCUCCGCGCUUACCCUCUUACCCGCCCCCACCCCCAACAGUGGGAUUACGGUCCAUGG\
) } def
/len { sequence length } bind def

/coor [
[99.77738953 195.63421631]
[98.84484100 180.66322327]
[97.91230011 165.69224548]
[96.97975159 150.72126770]
[95.81449890 135.76658630]
[94.41680908 120.83184814]
[80.71995544 114.71659851]
[68.66750336 123.64623260]
[56.61504745 132.57586670]
[44.56259537 141.50549316]
[39.41427231 149.26998901]
[31.99357605 150.51849365]
[19.66924286 159.06896973]
[13.16772461 174.12428284]
[-3.15039873 175.75244141]
[-12.49844170 162.27853394]
[-5.25993919 147.56336975]
[11.11875820 146.74464417]
[23.44309235 138.19415283]
[35.63296127 129.45304871]
[47.68541718 120.52340698]
[59.73786926 111.59377289]
[71.79032135 102.66414642]
[76.38117981 88.38394928]
[71.79032135 74.10375214]
[67.19946289 59.82355499]
[62.60860825 45.54335785]
[58.01774979 31.26316071]
[53.42688751 16.98296356]
[40.72470474 12.19449043]
[33.25634384 1.09384620]
[33.59704590 -12.08518791]
[41.39415359 -22.47205734]
[37.24962997 -36.88812256]
[33.10510254 -51.30418396]
[28.96057701 -65.72024536]
[17.71147156 -76.84536743]
[21.63099861 -91.21500397]
[17.48647308 -105.63106537]
[3.93993211 -113.32061005]
[-0.05784422 -127.99958801]
[7.35643864 -140.86676025]
[3.21191263 -155.28282166]
[-0.93261343 -169.69888306]
[-11.11995411 -183.25079346]
[-0.91778946 -196.79156494]
[14.91803265 -190.73655701]
[13.48345089 -173.84341431]
[17.62797737 -159.42733765]
[21.77250290 -145.01127625]
[34.88837051 -138.04640198]
[39.29687500 -123.48550415]
[31.90253639 -109.77559662]
[36.04706192 -95.35952759]
[46.99972534 -85.26554871]
[43.37664032 -69.86477661]
[47.52116776 -55.44871140]
[51.66569138 -41.03264618]
[55.81021881 -26.61658287]
[70.81094360 -19.19245529]
[75.98418427 -2.92235327]
[67.70708466 12.39210510]
[72.29794312 26.67230225]
[76.88880157 40.95249939]
[81.47966003 55.23269653]
[86.07051849 69.51289368]
[90.66137695 83.79309082]
[107.81524658 73.61360168]
[132.35884094 83.47535706]
[147.27005005 85.10514069]
[162.18124390 86.73492432]
[177.09243774 88.36470795]
[192.00363159 89.99449158]
[202.33422852 78.41612244]
[217.50456238 75.15410614]
[231.68132019 81.46274567]
[239.41326904 94.91624451]
[237.72731018 110.34146118]
[227.27171326 121.80707550]
[212.06689453 124.90433502]
[197.95939636 118.44226837]
[190.37385559 104.90568542]
[175.46266174 103.27590179]
[160.55145264 101.64612579]
[145.64025879 100.01634216]
[130.72906494 98.38655853]
[125.38468933 103.64846039]
[138.69633484 110.56220245]
[136.23431396 125.35877228]
[121.40110779 127.58946228]
[114.69592285 114.17226410]
[109.35154724 119.43416595]
[110.74923706 134.36889648]
[114.72548676 142.79399109]
[111.95073700 149.78871155]
[112.88327789 164.75970459]
[113.81582642 179.73068237]
[114.74836731 194.70167542]
[121.76773071 210.13426208]
[108.88139343 221.15147400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 93]
[6 92]
[7 23]
[8 22]
[9 21]
[10 20]
[12 19]
[13 18]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[33 59]
[34 58]
[35 57]
[36 56]
[38 54]
[39 53]
[42 50]
[43 49]
[44 48]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
