%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGUCCGGGCGGGUGACUGGCGGCGGGCGCCGCGGUCGGGCUGGCUGCCGGGCAGCAUGGAGGAGCUGAGCAGCGUGGGCGAGCAGGUCUUCGCCGCCGAGUGCAUCCUGAGCAAGCGGCUCCGCAAGGGCAAGCUGGAGUACCUGGUCAAGUGGC\
) } def
/len { sequence length } bind def

/coor [
[202.98622131 314.59417725]
[197.21176147 300.75018311]
[191.43730164 286.90621948]
[176.93952942 277.05807495]
[179.38027954 258.83123779]
[173.33343506 245.10404968]
[167.28657532 231.37686157]
[161.23973083 217.64968872]
[147.30587769 212.51321411]
[140.97796631 198.67803955]
[146.46003723 184.09774780]
[140.41319275 170.37057495]
[134.36633301 156.64338684]
[128.31948853 142.91619873]
[122.27263641 129.18901062]
[106.79697418 134.82821655]
[90.98445892 133.04673767]
[78.09106445 124.70950317]
[70.55041504 111.97942352]
[55.71481323 114.19412231]
[40.87920761 116.40882111]
[26.04360580 118.62351990]
[11.20800400 120.83821869]
[-3.62759900 123.05291748]
[-18.46320152 125.26761627]
[-33.29880524 127.48231506]
[-45.80534363 137.17236328]
[-59.53551483 131.39900208]
[-74.37111664 133.61369324]
[-89.20671844 135.82839966]
[-97.28282166 140.21163940]
[-104.35701752 137.93728638]
[-119.23348236 139.85844421]
[-134.10993958 141.77960205]
[-146.80944824 152.15527344]
[-162.04684448 146.09277344]
[-164.14720154 129.82868958]
[-150.94985962 120.09410095]
[-136.03109741 126.90313721]
[-121.15464020 124.98197937]
[-106.27817535 123.06082153]
[-91.42141724 120.99279022]
[-76.58581543 118.77809143]
[-61.75020981 116.56339264]
[-50.30481339 107.03175354]
[-35.51350403 112.64670563]
[-20.67790031 110.43200684]
[-5.84229755 108.21730804]
[8.99330521 106.00261688]
[23.82890892 103.78791809]
[38.66451263 101.57321930]
[53.50011444 99.35852051]
[68.33571625 97.14382172]
[65.10366821 87.00487518]
[65.33671570 75.09590912]
[56.00093079 63.35524750]
[46.66514206 51.61458969]
[37.32935715 39.87392807]
[21.83337402 40.68273544]
[8.83983135 32.20055008]
[3.34500790 17.68895149]
[7.46177721 2.72794032]
[19.60715675 -6.92966652]
[35.11100006 -7.57032299]
[48.01176453 1.05231690]
[53.34884262 15.62267208]
[49.07001495 30.53814316]
[58.40580368 42.27880096]
[67.74159241 54.01946259]
[77.07737732 65.76012421]
[84.40093231 64.14285278]
[81.16663361 49.49569321]
[95.81385040 46.26164246]
[99.04803467 60.90831757]
[106.37158966 59.29104996]
[109.89488220 44.71070480]
[113.41817474 30.13036156]
[109.13880920 14.89889336]
[119.64910126 4.34507704]
[123.17239380 -10.23526669]
[126.69567871 -24.81561089]
[130.21897888 -39.39595413]
[121.76837158 -52.75121307]
[125.31795502 -68.15173340]
[138.76181030 -76.46065521]
[154.12394714 -72.74845123]
[162.29026794 -59.21749878]
[158.41584778 -43.89547348]
[144.79931641 -35.87266159]
[141.27603149 -21.29232025]
[137.75273132 -6.71197605]
[134.22944641 7.86836767]
[138.76081848 22.05695152]
[127.99851990 33.65365219]
[124.47522736 48.23399353]
[120.95193481 62.81433868]
[132.91725159 77.80835724]
[136.41259766 95.28918457]
[150.42160034 89.92749786]
[164.43061829 84.56581879]
[178.43962097 79.20413971]
[184.94302368 65.04985809]
[199.22653198 59.81191254]
[212.68038940 66.09913635]
[226.68940735 60.73745346]
[240.69841003 55.37577057]
[245.63276672 40.53709793]
[258.97781372 32.38582230]
[274.43246460 34.77072906]
[284.69949341 46.56573868]
[284.93112183 62.20160675]
[275.01797485 74.29555511]
[259.64074707 77.13719177]
[246.06008911 69.38478088]
[232.05108643 74.74645996]
[218.04206848 80.10814667]
[212.22387695 93.77138519]
[198.09312439 99.40845490]
[183.80131531 93.21315002]
[169.79229736 98.57482910]
[155.78329468 103.93650818]
[141.77427673 109.29819489]
[135.99981689 123.14216614]
[142.04666138 136.86935425]
[148.09352112 150.59654236]
[154.14036560 164.32371521]
[160.18722534 178.05090332]
[174.64535522 183.84748840]
[180.58216858 197.85493469]
[174.96691895 211.60282898]
[181.01376343 225.33001709]
[187.06062317 239.05720520]
[193.10746765 252.78437805]
[204.85458374 258.19418335]
[209.59439087 269.79461670]
[205.28128052 281.13174438]
[211.05574036 294.97573853]
[216.83020020 308.81970215]
[226.60594177 309.76895142]
[235.29873657 314.21444702]
[241.71397400 321.49734497]
[244.98765564 330.57220459]
[244.70272827 340.15713501]
[240.94161987 348.91467285]
[234.26889038 355.63851929]
[238.93231201 369.89517212]
[253.88616943 373.68801880]
[264.39889526 384.97900391]
[267.11587524 400.16525269]
[261.17016602 414.40084839]
[248.45901489 423.14328003]
[233.03849792 423.60284424]
[219.82925415 415.63296509]
[213.04629517 401.77673340]
[214.85404968 386.45565796]
[224.67565918 374.55862427]
[220.01222229 360.30194092]
[201.07977295 352.71856689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[5 133]
[6 132]
[7 131]
[8 130]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[28 44]
[29 43]
[30 42]
[32 41]
[33 40]
[34 39]
[55 70]
[56 69]
[57 68]
[58 67]
[75 96]
[76 95]
[77 94]
[79 92]
[80 91]
[81 90]
[82 89]
[98 122]
[99 121]
[100 120]
[101 119]
[104 116]
[105 115]
[106 114]
[145 157]
[146 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
