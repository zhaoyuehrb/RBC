%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUUGGCGGAGGUGACCAAAGCCACGUAAUGUCCGUAGUUCGCUCAUCCGUCCAUGCCAGAUGGAUUGUGGGGAAGGUGAUUGGGACAAAAAUGCAAAAGACUGCUAAAGUGAGAGUGACCAGGCUUG\
) } def
/len { sequence length } bind def

/coor [
[156.47274780 195.91908264]
[148.00880432 183.53517151]
[139.54484558 171.15124512]
[131.08090210 158.76731873]
[122.61695862 146.38339233]
[114.15300751 133.99946594]
[94.71915436 136.44700623]
[76.77915955 128.58433533]
[65.14842987 138.05671692]
[53.51769257 147.52909851]
[51.40762329 160.31924438]
[41.44181824 167.96504211]
[29.34207726 166.76890564]
[17.48754692 175.95965576]
[5.63301754 185.15042114]
[5.20981455 200.78228760]
[-5.20097208 212.45059204]
[-20.68368721 214.64595032]
[-33.92786407 206.33175659]
[-38.68001175 191.43373108]
[-32.69630814 176.98626709]
[-18.80207443 169.81100464]
[-3.55774546 173.29589844]
[8.29678440 164.10513306]
[20.15131378 154.91436768]
[25.84278679 138.35884094]
[44.04531097 135.89836121]
[55.67604065 126.42597961]
[67.30677795 116.95359802]
[63.24866867 97.63122559]
[69.75370789 78.98968506]
[84.95220184 66.38697815]
[81.73976135 51.73500824]
[78.52732086 37.08303833]
[75.31488037 22.43106842]
[72.10243988 7.77909756]
[67.16210938 -0.02484621]
[68.99309540 -7.26260567]
[66.13291931 -21.98739433]
[63.27274704 -36.71218491]
[60.41257477 -51.43697357]
[55.66080093 -59.35713959]
[57.66481400 -66.54891205]
[55.15855408 -81.33805084]
[52.65229416 -96.12718964]
[50.14603424 -110.91632843]
[35.72402191 -120.73265076]
[32.87035751 -137.60231018]
[42.86076736 -151.07528687]
[40.00059128 -165.80007935]
[37.14041901 -180.52487183]
[33.75252533 -195.13726807]
[29.84129143 -209.61836243]
[25.93005753 -224.09945679]
[22.01882362 -238.58056641]
[18.10758972 -253.06166077]
[14.19635677 -267.54275513]
[1.05908740 -276.75100708]
[0.21127798 -292.77163696]
[12.30329609 -303.31500244]
[28.05917931 -300.29315186]
[35.39236450 -286.02416992]
[28.67745781 -271.45401001]
[32.58869171 -256.97290039]
[36.49992371 -242.49179077]
[40.41115570 -228.01069641]
[44.32239151 -213.52960205]
[48.23362350 -199.04849243]
[51.19409561 -196.96479797]
[53.24889374 -193.29629517]
[53.64253235 -188.50570679]
[51.86520767 -183.38504028]
[54.72537994 -168.66024780]
[57.58555603 -153.93545532]
[69.21592712 -148.25648499]
[75.51865387 -136.72900391]
[73.97743988 -123.48516846]
[64.93517303 -113.42259216]
[67.44143677 -98.63345337]
[69.94769287 -83.84431458]
[72.45395660 -69.05516815]
[75.13736725 -54.29714584]
[77.99753571 -39.57235718]
[80.85771179 -24.84756851]
[83.71788025 -10.12277889]
[86.75440979 4.56665659]
[89.96685028 19.21862602]
[93.17929077 33.87059784]
[96.39173126 48.52256775]
[99.60417175 63.17453766]
[108.18139648 64.09267426]
[116.30974579 66.98085785]
[123.54326630 71.68064117]
[129.48507690 77.93415833]
[133.80920410 85.39832306]
[136.27839661 93.66359711]
[136.75715637 102.27652740]
[135.21925354 110.76454926]
[131.74905396 118.66197968]
[126.53693390 125.53552246]
[135.00088501 137.91944885]
[143.46482849 150.30337524]
[151.92877197 162.68728638]
[160.39273071 175.07121277]
[168.85667419 187.45513916]
[176.34730530 185.87907410]
[183.97065735 186.25263977]
[191.22906494 188.54017639]
[197.65158081 192.58149719]
[202.82443237 198.10299683]
[206.41777039 204.73614502]
[208.20663452 212.04209900]
[208.08502197 219.54075623]
[206.07209778 226.74220276]
[202.31022644 233.17886353]
[197.05496216 238.43572998]
[203.00227356 252.20634460]
[208.94960022 265.97692871]
[214.89691162 279.74752808]
[229.67774963 285.34234619]
[236.09700012 299.78427124]
[230.34623718 314.50515747]
[215.83726501 320.77133179]
[201.17800903 314.86526489]
[195.06555176 300.29083252]
[201.12629700 285.69485474]
[195.17898560 271.92425537]
[189.23167419 258.15365601]
[183.28436279 244.38305664]
[160.92471313 238.74812317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[8 29]
[9 28]
[10 27]
[13 25]
[14 24]
[15 23]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[38 85]
[39 84]
[40 83]
[41 82]
[43 81]
[44 80]
[45 79]
[46 78]
[49 74]
[50 73]
[51 72]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
