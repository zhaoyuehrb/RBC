%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUCUCAAGUCCCCCCUGGAUGGGGGGCCCGGGCUGUGGCAAAGGGACACAGUGCAAGAAUAUGGCGACCAAGUACGGCUUCUGCCAUGUGGGGCUGGACCAGCUACUGAGACAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[56.96737671 270.99557495]
[52.45734024 256.41400146]
[54.72913742 241.32090759]
[63.33170319 228.71302795]
[76.55698395 221.09367371]
[75.39935303 206.13841248]
[74.24172211 191.18315125]
[73.08409119 176.22789001]
[71.92646027 161.27261353]
[68.22945404 154.76960754]
[70.93662262 145.91824341]
[70.16444397 130.93812561]
[57.11016464 123.54991150]
[43.86998367 130.59956360]
[30.62980080 137.64921570]
[17.38961983 144.69886780]
[4.14943695 151.74851990]
[-9.09074497 158.79817200]
[-15.12894058 173.66152954]
[-30.55455589 178.06947327]
[-43.53437805 168.64059448]
[-44.11139679 152.60792542]
[-31.84297752 142.27035522]
[-16.14039612 145.55798340]
[-2.90021420 138.50833130]
[10.33996773 131.45867920]
[23.58015060 124.40902710]
[36.82033157 117.35937500]
[50.06051254 110.30973053]
[95.33267212 86.51892853]
[96.49031067 71.56366730]
[97.64794159 56.60840225]
[90.14498901 55.79656219]
[82.55825806 51.69240189]
[76.25810242 44.26349640]
[65.24982452 34.07439423]
[54.24154282 23.88529587]
[43.23326492 13.69619560]
[32.22498322 3.50709558]
[21.21670341 -6.68200445]
[6.30583620 -2.72351861]
[-8.37107754 -7.47659588]
[-18.13068962 -19.42454720]
[-19.85874176 -34.75482178]
[-13.00382137 -48.57558823]
[0.24669418 -56.47669220]
[15.66461182 -55.93691254]
[28.33013153 -47.12849808]
[34.20172882 -32.86217880]
[31.40580177 -17.69028473]
[42.41408157 -7.50118494]
[53.42236328 2.68791509]
[64.43064117 12.87701511]
[75.43892670 23.06611443]
[86.44720459 33.25521469]
[77.55954742 21.17177391]
[79.06900787 6.24791622]
[90.19625092 -3.81113696]
[105.19625092 -3.81187391]
[116.32447815 6.24608564]
[117.83540344 21.16979408]
[108.94720459 33.25521469]
[119.95548248 23.06611443]
[130.96376038 12.87701511]
[141.97204590 2.68791509]
[152.98033142 -7.50118494]
[163.98860168 -17.69028473]
[174.99688721 -27.87938499]
[186.00517273 -38.06848526]
[185.80587769 -49.09299088]
[191.64517212 -58.18450546]
[201.34858704 -62.41154861]
[211.54751587 -60.57432175]
[223.06571960 -70.18321991]
[234.58392334 -79.79211426]
[246.10214233 -89.40101624]
[254.39144897 -104.19032288]
[270.89749146 -100.31903839]
[271.74682617 -83.38638306]
[255.71102905 -77.88280487]
[244.19282532 -68.27391052]
[232.67462158 -58.66501236]
[221.15641785 -49.05611420]
[215.97717285 -30.49914169]
[196.19427490 -27.06020546]
[185.18598938 -16.87110519]
[174.17770386 -6.68200445]
[163.16943359 3.50709558]
[152.16114807 13.69619560]
[141.15286255 23.88529587]
[130.14459229 34.07439423]
[119.13630676 44.26349640]
[112.60320282 57.76603699]
[111.44557190 72.72129822]
[110.28794098 87.67655945]
[117.50746918 100.82488251]
[130.74765015 107.87453461]
[143.98783875 114.92418671]
[157.22801208 121.97383118]
[174.05052185 124.08087921]
[176.68275452 140.82925415]
[161.31759644 147.99501038]
[150.17837524 135.21401978]
[136.93818665 128.16436768]
[123.69800568 121.11471558]
[110.45782471 114.06506348]
[97.80062866 122.11586761]
[85.14455414 130.16595459]
[85.91673279 145.14605713]
[86.88172150 160.11499023]
[88.03935242 175.07025146]
[89.19698334 190.02551270]
[90.35462189 204.98077393]
[91.51225281 219.93603516]
[105.75254059 225.42938232]
[116.19286346 236.56323242]
[120.76028442 251.12692261]
[118.54794312 266.22885132]
[109.99509430 278.87051392]
[96.79991913 286.54190063]
[81.58232117 287.71981812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[11 109]
[12 108]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[30 95]
[31 94]
[32 93]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[73 83]
[74 82]
[75 81]
[76 80]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
