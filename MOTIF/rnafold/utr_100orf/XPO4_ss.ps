%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGCAGCGCAUGGCGCGUCAUUGAAGAGAGACCAUGAUGGCGGCGGCGCUGGGGCCCCCAGAAGUGAUCGCUCAGCUGGAGAACGCGGCUAAAGUUCUGAUGGCACCACCUUCCAUGGUCAAUAAUGAACAAC\
) } def
/len { sequence length } bind def

/coor [
[26.39355087 169.91580200]
[28.99143982 155.14248657]
[35.51090240 141.63334656]
[45.46002579 130.40771484]
[58.08811951 122.31257629]
[72.44400024 117.95847321]
[84.18281555 108.62036896]
[69.40411377 111.18743896]
[54.62540436 113.75451660]
[39.84670258 116.32159424]
[25.06799507 118.88867188]
[10.28929043 121.45574188]
[2.28710914 126.04442596]
[-4.85741615 123.90818787]
[-19.69109726 126.13571930]
[-32.18924713 135.83659363]
[-45.92440796 130.07510376]
[-60.75808716 132.30264282]
[-75.59176636 134.53018188]
[-90.39893341 136.92764282]
[-105.17763519 139.49472046]
[-119.95634460 142.06179810]
[-134.73504639 144.62887573]
[-149.51374817 147.19595337]
[-153.63546753 161.89201355]
[-163.73182678 173.33868408]
[-177.79818726 179.26321411]
[-193.04167175 178.48930359]
[-206.43566895 171.17059326]
[-215.32080078 158.76022339]
[-217.93290710 143.72229004]
[-213.75335693 129.04257202]
[-203.61199951 117.63574219]
[-189.52241516 111.76663971]
[-174.28208923 112.60057831]
[-160.91702271 119.97197723]
[-152.08082581 132.41723633]
[-137.30212402 129.85015869]
[-122.52342224 127.28308868]
[-107.74471283 124.71601105]
[-92.96601105 122.14893341]
[-86.86061096 117.86736298]
[-77.81930542 119.69649506]
[-62.98562241 117.46896362]
[-48.15194321 115.24142456]
[-36.71479797 105.69989014]
[-21.91863251 111.30204010]
[-7.08495140 109.07450104]
[7.72221470 106.67704010]
[22.50091934 104.10996246]
[37.27962494 101.54288483]
[52.05833054 98.97581482]
[66.83703613 96.40873718]
[81.61573792 93.84165955]
[100.69807434 77.80322266]
[109.68097687 65.79042053]
[118.52555847 53.67541885]
[127.23065948 41.45980072]
[135.93576050 29.24418640]
[133.52450562 13.85511112]
[142.52673340 1.59074736]
[157.21272278 -0.61317170]
[165.91781616 -12.82878685]
[174.62292480 -25.04440308]
[183.32801819 -37.26001740]
[168.45129395 -35.34093857]
[155.71849060 -43.27037430]
[150.87861633 -57.46810532]
[156.11691284 -71.52371979]
[169.06823730 -79.09096527]
[183.88494873 -76.75315094]
[193.87713623 -65.56583405]
[194.53285217 -50.57891464]
[205.07847595 -61.24614716]
[215.62408447 -71.91338348]
[219.82737732 -89.79954529]
[236.86079407 -93.86320496]
[247.15905762 -104.76943970]
[257.45730591 -115.67567444]
[267.75558472 -126.58190155]
[278.05383301 -137.48814392]
[276.06539917 -152.99877930]
[284.55572510 -166.13076782]
[299.51586914 -170.68354797]
[313.88214111 -164.50746155]
[320.87121582 -150.51866150]
[317.18310547 -135.32221985]
[304.55914307 -126.09344482]
[288.96005249 -127.18988037]
[278.66180420 -116.28364563]
[268.36355591 -105.37741852]
[258.06527710 -94.47118378]
[247.76702881 -83.56494904]
[247.78482056 -71.41341400]
[239.21763611 -62.23764420]
[226.29132080 -61.36775970]
[215.74569702 -50.70052719]
[205.20007324 -40.03329468]
[195.54364014 -28.55492020]
[186.83853149 -16.33930397]
[178.13343811 -4.12368870]
[169.42834473 8.09192657]
[172.13880920 22.69291878]
[163.48461914 35.20529556]
[148.15136719 37.94928360]
[139.44627380 50.16490173]
[130.74118042 62.38051605]
[129.40945435 69.71769714]
[121.69377899 74.77333069]
[112.71087646 86.78613281]
[114.93840790 101.61981201]
[127.05341339 110.46439362]
[139.16842651 119.30897522]
[154.74316406 116.62511444]
[167.60557556 125.80846405]
[170.12461853 141.41070557]
[160.80580139 154.17530823]
[145.17779541 156.52925110]
[132.51242065 147.07600403]
[130.32383728 131.42398071]
[118.20883179 122.57939911]
[106.09382629 113.73481750]
[112.48542786 127.30490875]
[123.42910767 137.56335449]
[131.16876221 150.41239929]
[135.12042236 164.88252258]
[134.98590088 179.88191223]
[130.77537537 194.27883911]
[122.80651855 206.98699951]
[111.68061066 217.04753113]
[98.23714447 223.70132446]
[83.49045563 226.44635010]
[68.55323029 225.07548523]
[54.55252075 219.69215393]
[42.54473114 210.70254517]
[33.43587875 198.78495789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[14 48]
[15 47]
[17 45]
[18 44]
[19 43]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[55 110]
[56 109]
[57 107]
[58 106]
[59 105]
[62 102]
[63 101]
[64 100]
[65 99]
[73 98]
[74 97]
[75 96]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
