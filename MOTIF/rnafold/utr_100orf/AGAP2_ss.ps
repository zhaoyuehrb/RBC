%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCCGGGGCGCGGGCGCGCUUCAGCGCCGGACAACGACCUACCUCAUCUCGCUGACCCUGGUUAAGCUCGAGUCGGUGCCUCCGCCGCCGCCUUCUC\
) } def
/len { sequence length } bind def

/coor [
[94.92775726 384.83316040]
[94.60327911 369.03219604]
[105.60693359 357.68780518]
[105.14043427 342.69506836]
[104.67394257 327.70233154]
[96.54456329 315.22183228]
[103.84893799 301.18771362]
[103.38243866 286.19497681]
[102.91594696 271.20220947]
[102.21633911 256.21853638]
[101.28379059 241.24755859]
[100.35124969 226.27658081]
[99.41870117 211.30558777]
[90.90512085 199.08396912]
[97.76950073 184.82946777]
[96.83695984 169.85847473]
[95.90441132 154.88749695]
[94.97187042 139.91650391]
[94.03932190 124.94552612]
[93.10678101 109.97454071]
[91.70909119 95.03980255]
[89.84761047 80.15575409]
[87.98612976 65.27170563]
[86.12464905 50.38765717]
[76.73457336 37.65435410]
[82.83262634 24.06527519]
[80.97114563 9.18122673]
[79.10966492 -5.70282125]
[76.55600739 -20.48385239]
[73.31574249 -35.12969208]
[70.07546997 -49.77553558]
[66.83520508 -64.42137909]
[63.59494019 -79.06721497]
[49.28522873 -93.09635925]
[55.45532608 -111.31016541]
[51.31079865 -125.72622681]
[40.06169510 -136.85134888]
[43.98122025 -151.22097778]
[39.83669281 -165.63705444]
[35.69216919 -180.05311584]
[20.68935585 -183.08200073]
[8.81994247 -192.74511719]
[2.81143045 -206.82191467]
[4.04453325 -222.07766724]
[12.23589230 -235.00671387]
[25.50319481 -242.63804626]
[40.79771042 -243.21804810]
[54.60486984 -236.61344910]
[63.75189209 -224.34190369]
[66.13685608 -209.22335815]
[61.21171570 -194.73193359]
[50.10823441 -184.19763184]
[54.25275803 -169.78157043]
[58.39728546 -155.36550903]
[69.34994507 -145.27153015]
[65.72686005 -129.87075806]
[69.87139130 -115.45468903]
[79.40599823 -111.21588135]
[85.06958008 -102.18936157]
[84.72440338 -91.31684113]
[78.24078369 -82.30748749]
[81.48104858 -67.66164398]
[84.72131348 -53.01580048]
[87.96157837 -38.36996078]
[91.20185089 -23.72411919]
[94.14459229 -21.48909760]
[96.06768036 -17.63470268]
[96.18313599 -12.69789219]
[93.99370575 -7.56430244]
[95.85519409 7.31974554]
[97.71667480 22.20379257]
[106.97360229 33.87249374]
[101.00869751 48.52617645]
[102.87017822 63.41022491]
[104.73165894 78.29427338]
[106.59313965 93.17832184]
[110.03263855 97.39115906]
[110.76417542 103.25476837]
[108.07776642 109.04199982]
[109.01030731 124.01298523]
[109.94285583 138.98396301]
[110.87539673 153.95495605]
[111.80794525 168.92593384]
[112.74048615 183.89691162]
[121.32077026 197.18937683]
[114.38968658 210.37304688]
[115.32223511 225.34402466]
[116.25477600 240.31501770]
[117.18732452 255.28599548]
[120.89962769 263.83065796]
[117.90869141 270.73571777]
[118.37518311 285.72845459]
[118.84168243 300.72122192]
[127.00442505 314.27407837]
[119.66668701 327.23580933]
[120.13317871 342.22857666]
[120.59967804 357.22131348]
[132.28732300 367.85964966]
[132.94581604 383.65023804]
[122.18449402 395.22473145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[7 93]
[8 92]
[9 91]
[10 89]
[11 88]
[12 87]
[13 86]
[15 84]
[16 83]
[17 82]
[18 81]
[19 80]
[20 79]
[21 76]
[22 75]
[23 74]
[24 73]
[26 71]
[27 70]
[28 69]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[35 57]
[36 56]
[38 54]
[39 53]
[40 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
