%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGAGGCCCCGCUGACUCCUGCCAGCCUCCAGGUCCCCGUGGUACCAAAGCUGAACAUGGACGUGACCAUCCAGCACCCCUGGUUCAAGCGCACCCUGGGGCCCUUCUACCCCAGCCGGCUGUUCGACCAGUUUUUCGGCGAGGGCCUUUUUGAGU\
) } def
/len { sequence length } bind def

/coor [
[88.22230530 400.94253540]
[82.26393127 386.84442139]
[83.55132294 371.59317017]
[91.78864288 358.69335938]
[105.08302307 351.10928345]
[104.49412537 336.12084961]
[103.90522766 321.13241577]
[103.31632996 306.14398193]
[102.72743225 291.15554810]
[102.13853455 276.16711426]
[101.54963684 261.17868042]
[100.96074677 246.19023132]
[100.22473145 231.20829773]
[99.34166718 216.23431396]
[98.45860291 201.26033020]
[97.57553864 186.28634644]
[96.69248199 171.31236267]
[95.80941772 156.33837891]
[82.89218140 153.84140015]
[70.90275574 148.42442322]
[60.49137878 140.38122559]
[52.22268295 130.14801025]
[46.54511642 118.27976990]
[31.83333778 121.20612335]
[17.12155914 124.13247681]
[2.40977955 127.05883789]
[-12.30199909 129.98518372]
[-26.85246849 133.62989807]
[-41.20657349 137.98416138]
[-55.56067657 142.33843994]
[-66.36998749 154.67094421]
[-82.40000916 151.21110535]
[-87.16043091 135.51809692]
[-75.75413513 123.73554993]
[-59.91494751 127.98432922]
[-45.56084442 123.63005829]
[-31.20673943 119.27578735]
[-42.81626511 109.77742767]
[-42.83014297 94.77743530]
[-31.23821259 85.25760651]
[-16.52715874 88.18759918]
[-9.46723938 101.42230988]
[-15.22835445 115.27341461]
[-0.51657516 112.34705353]
[14.19520378 109.42070007]
[28.90698242 106.49434662]
[43.61876297 103.56799316]
[43.74509811 94.80765533]
[45.22439957 86.17220306]
[48.02108765 77.86931610]
[52.06790543 70.09868622]
[57.26751709 63.04719925]
[63.49487686 56.88445282]
[55.40780258 44.25119400]
[47.32072830 31.61793518]
[39.23365021 18.98467636]
[28.42880058 17.25602913]
[20.54101944 9.99347305]
[18.03345299 -0.20455849]
[21.50547218 -9.88215351]
[13.92061138 -22.82316971]
[6.33575106 -35.76418304]
[-1.24910939 -48.70520020]
[-16.60268402 -52.45263672]
[-24.73794937 -66.00228882]
[-20.82839584 -81.31538391]
[-7.19349241 -89.30693817]
[8.07741451 -85.23570251]
[15.92436695 -71.51707458]
[11.69190598 -56.29006195]
[19.27676773 -43.34904480]
[26.86162758 -30.40802956]
[34.44648743 -17.46701431]
[51.90553284 -9.22672462]
[51.86690903 10.89760208]
[59.95398712 23.53086090]
[68.04106140 36.16411972]
[76.12813568 48.79737854]
[91.45698547 44.15565109]
[107.47247314 44.00234985]
[122.88735962 48.34980011]
[136.46270752 56.84857941]
[147.10740662 68.81560516]
[160.60363770 62.26946259]
[174.09985352 55.72332382]
[187.59608459 49.17718506]
[201.09230042 42.63104630]
[214.58853149 36.08491135]
[223.62858582 23.10076332]
[238.45655823 24.50808716]
[251.95277405 17.96194839]
[257.21530151 3.30099511]
[270.99563599 -3.14546156]
[284.94018555 1.96190357]
[298.43643188 -4.58423519]
[301.27383423 -19.72541428]
[312.35327148 -30.17047310]
[327.28210449 -32.06629944]
[340.30871582 -24.89375496]
[353.80493164 -31.43989372]
[367.30114746 -37.98603439]
[380.79739380 -44.53217316]
[394.29360962 -51.07831192]
[407.78982544 -57.62444687]
[410.38500977 -72.92296600]
[421.50030518 -83.75023651]
[436.86166382 -85.94294739]
[450.56234741 -78.65795135]
[457.33413696 -64.69649506]
[454.57318115 -49.42702484]
[443.34106445 -38.72097397]
[427.95681763 -36.69503784]
[414.33596802 -44.12822342]
[400.83975220 -37.58208466]
[387.34353638 -31.03594780]
[373.84729004 -24.48980904]
[360.35107422 -17.94367027]
[346.85485840 -11.39753151]
[344.42288208 3.27296567]
[333.69171143 13.82313061]
[318.62979126 16.05753517]
[304.98254395 8.91198921]
[291.48632812 15.45812798]
[286.86425781 29.57095528]
[273.27041626 36.40193176]
[258.49890137 31.45817375]
[245.00268555 38.00431061]
[236.92797852 50.52023315]
[221.13467407 49.58113480]
[207.63844299 56.12727356]
[194.14221191 62.67341232]
[180.64599609 69.21955109]
[167.14976501 75.76568604]
[153.65354919 82.31182861]
[156.48158264 101.18546295]
[152.86412048 119.92382050]
[143.21398926 136.38853455]
[128.63241577 148.70071411]
[110.78340149 155.45532227]
[111.66646576 170.42930603]
[112.54952240 185.40328979]
[113.43258667 200.37727356]
[114.31565094 215.35125732]
[115.19871521 230.32524109]
[118.84397125 238.75868225]
[115.94918060 245.60133362]
[116.53807831 260.58978271]
[117.12697601 275.57821655]
[117.71587372 290.56665039]
[118.30477142 305.55508423]
[118.89366150 320.54351807]
[119.48255920 335.53195190]
[120.07145691 350.52038574]
[133.91989136 357.03802490]
[143.14393616 369.25177002]
[145.62396240 384.35501099]
[140.79006958 398.87713623]
[129.75308228 409.48107910]
[115.04918671 413.73010254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 153]
[6 152]
[7 151]
[8 150]
[9 149]
[10 148]
[11 147]
[12 146]
[13 144]
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 37]
[29 36]
[30 35]
[53 78]
[54 77]
[55 76]
[56 75]
[60 73]
[61 72]
[62 71]
[63 70]
[83 134]
[84 133]
[85 132]
[86 131]
[87 130]
[88 129]
[90 127]
[91 126]
[94 123]
[95 122]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
