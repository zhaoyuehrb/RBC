%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCUGCGGGGCUGAGCGCUGGUCUCACGCAUCUCGGGAGCCAGGUUGGUGGCGCGAUGAGUUGCAGCAAGGCCUACGGGGAGCGGUACGUCGCCUCGGUGCAGGGCUCCGCCCCGUCGCCUCGAAAGAAGUCAACGAGAGGAUUCUAUUUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[202.74717712 300.18643188]
[217.56706238 297.86886597]
[232.47109985 299.56289673]
[246.38798523 305.14450073]
[237.23686218 293.25933838]
[223.34167480 287.89529419]
[221.05313110 272.24050903]
[211.90199280 260.35534668]
[202.75086975 248.47018433]
[193.59974670 236.58503723]
[184.44862366 224.69989014]
[175.29748535 212.81472778]
[166.14636230 200.92958069]
[152.25117493 195.56553650]
[149.96263123 179.91072083]
[140.81150818 168.02557373]
[131.66036987 156.14042664]
[122.50924683 144.25526428]
[108.61405182 138.89123535]
[106.32551575 123.23641968]
[97.17438507 111.35126495]
[85.10963440 102.43824768]
[71.06013489 97.18358612]
[57.01063156 91.92892456]
[42.96112823 86.67426300]
[28.91162682 81.41959381]
[14.96207047 90.93930817]
[-1.74798584 90.29534149]
[-14.66471386 79.93775940]
[-18.83960152 64.08760834]
[-32.99079895 59.11331940]
[-47.14199829 54.13903046]
[-62.72710419 56.86209869]
[-72.16834259 45.34201813]
[-86.31954193 40.36772919]
[-100.47074127 35.39344025]
[-114.62194061 30.41914940]
[-128.37947083 40.21432495]
[-145.09902954 39.90271759]
[-158.21913147 29.80399895]
[-162.70832825 14.03998566]
[-176.95562744 9.34803581]
[-191.20292664 4.65608692]
[-205.45024109 -0.03586199]
[-219.44570923 7.30595064]
[-234.50836182 2.52140689]
[-241.70179749 -11.55090809]
[-236.75827026 -26.56213951]
[-222.61068726 -33.60639191]
[-207.65257263 -28.50443077]
[-200.75828552 -14.28316402]
[-186.51098633 -9.59121513]
[-172.26368713 -4.89926577]
[-158.01637268 -0.20731665]
[-147.92839050 -8.99820900]
[-134.70520020 -11.66427231]
[-121.79303741 -7.40119314]
[-112.61142731 2.77505922]
[-109.64765167 16.26795006]
[-95.49645233 21.24223900]
[-81.34525299 26.21652794]
[-67.19405365 31.19081688]
[-52.62113953 28.11195374]
[-42.16770935 39.98783112]
[-28.01651192 44.96212006]
[-13.86531162 49.93640900]
[-3.60453224 41.34782410]
[9.66905594 38.94519424]
[22.49390221 43.46415329]
[31.47137260 53.82094574]
[34.16629028 67.37009430]
[48.21579361 72.62475586]
[62.26529312 77.87941742]
[76.31479645 83.13407898]
[90.36430359 88.38874817]
[104.13535309 82.44247437]
[109.94441986 68.61299133]
[115.75348663 54.78350067]
[113.96437073 39.06378174]
[126.02680206 30.32610321]
[131.83587646 16.49661636]
[137.64494324 2.66712856]
[138.09159851 -6.51232958]
[143.70944214 -11.37773705]
[149.79231262 -25.08899307]
[155.87519836 -38.80025101]
[149.95874023 -53.45532227]
[156.21469116 -67.96871948]
[170.93148804 -73.72990417]
[185.37792969 -67.32086182]
[190.98320007 -52.54397202]
[184.42178345 -38.16609192]
[169.58645630 -32.71737289]
[163.50357056 -19.00611496]
[157.42070007 -5.29485703]
[151.47442627 8.47619629]
[145.66535950 22.30568314]
[139.85629272 36.13516998]
[142.06091309 50.86571503]
[129.58297729 60.59257126]
[123.77391052 74.42205811]
[117.96484375 88.25154877]
[115.17100525 97.38861084]
[109.05953979 102.20013428]
[118.21066284 114.08528900]
[132.76040649 120.29943085]
[134.39439392 135.10414124]
[143.54553223 146.98928833]
[152.69665527 158.87445068]
[161.84777832 170.75959778]
[176.39752197 176.97373962]
[178.03150940 191.77844238]
[187.18264771 203.66360474]
[196.33377075 215.54875183]
[205.48489380 227.43391418]
[214.63603210 239.31906128]
[223.78715515 251.20420837]
[232.93827820 263.08935547]
[247.48802185 269.30349731]
[249.12200928 284.10821533]
[258.27313232 295.99337769]
[269.68890381 305.72375488]
[282.87353516 312.87677002]
[296.05816650 320.02978516]
[309.24279785 327.18280029]
[321.92184448 318.60955811]
[337.13406372 316.92214966]
[351.38375854 322.50823975]
[361.39648438 334.08425903]
[364.87136841 348.99008179]
[361.00991821 363.80047607]
[350.69946289 375.11212158]
[336.30926514 380.32568359]
[321.14611816 378.24310303]
[308.69433594 369.34298706]
[301.81533813 355.67047119]
[302.08978271 340.36740112]
[288.90515137 333.21438599]
[275.72052002 326.06140137]
[262.53588867 318.90838623]
[270.25366211 331.77056885]
[274.28561401 346.21853638]
[274.34326172 361.21841431]
[270.42248535 375.69692993]
[262.80383301 388.61807251]
[252.03244019 399.05731201]
[238.87904358 406.26760864]
[224.28485107 409.73306274]
[209.29412842 409.20574951]
[194.97952271 404.72332764]
[182.36529541 396.60659790]
[172.35408020 385.43630981]
[165.66218567 372.01174927]
[162.76847839 357.29351807]
[163.87998962 342.33474731]
[168.91720581 328.20584106]
[177.51968384 315.91772461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 121]
[5 120]
[7 118]
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[13 112]
[15 110]
[16 109]
[17 108]
[18 107]
[20 105]
[21 104]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[30 66]
[31 65]
[32 64]
[34 62]
[35 61]
[36 60]
[37 59]
[41 54]
[42 53]
[43 52]
[44 51]
[76 102]
[77 101]
[78 100]
[80 98]
[81 97]
[82 96]
[84 95]
[85 94]
[86 93]
[122 140]
[123 139]
[124 138]
[125 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
