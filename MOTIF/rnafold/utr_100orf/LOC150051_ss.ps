%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUGUAGAGCGACUAUGGGCGCACGCCGGGUAUCCGCGCCGCAGCCAGGCUCGGAGCGCGCGGCUGGAGGGGCGCGGGCGGCGCGCGCUCCAGAGAUGCCUUCCUGCGAGGCUC\
) } def
/len { sequence length } bind def

/coor [
[117.01602936 391.23541260]
[117.01602936 376.23541260]
[117.01602936 361.23541260]
[117.01602936 346.23541260]
[117.01602936 331.23541260]
[116.61331177 316.24081421]
[115.80815887 301.26245117]
[115.00301361 286.28408813]
[114.19786072 271.30569458]
[101.33805847 255.25611877]
[110.81967163 236.13655090]
[108.81187439 221.27153015]
[106.80407715 206.40650940]
[97.43281555 194.82943726]
[103.25329590 180.11778259]
[101.24549866 165.25276184]
[91.87423706 153.67568970]
[97.69471741 138.96403503]
[95.68692017 124.09901428]
[93.67912292 109.23400116]
[91.47193909 94.39727783]
[89.06576538 79.59152222]
[86.65959930 64.78576660]
[84.25343323 49.98001480]
[74.40261841 37.59970093]
[79.99813080 23.79609489]
[77.59195709 8.99034119]
[75.18579102 -5.81541300]
[72.77961731 -20.62116623]
[70.37345123 -35.42692184]
[67.28978729 -38.90126038]
[65.71802521 -42.79850006]
[65.59709167 -46.56280518]
[66.68255615 -49.72174835]
[68.59284973 -51.94150543]
[67.78770447 -66.91988373]
[66.98255157 -81.89825439]
[66.17740631 -96.87663269]
[65.37225342 -111.85501099]
[64.56710815 -126.83338165]
[63.76195526 -141.81175232]
[62.95680618 -156.79013062]
[50.06962585 -173.80128479]
[59.70401382 -191.97109985]
[57.69621658 -206.83612061]
[55.68841934 -221.70114136]
[53.68062210 -236.56616211]
[51.67282486 -251.43118286]
[39.38610840 -261.00585938]
[37.56167221 -276.10968018]
[46.76537704 -287.76419067]
[44.75757980 -302.62921143]
[31.44503212 -310.83349609]
[26.56972504 -325.69165039]
[32.43363190 -340.18817139]
[46.26799393 -347.47817993]
[61.54064941 -344.11959839]
[71.04031372 -331.69824219]
[70.28153992 -316.07907104]
[59.62259674 -304.63699341]
[61.63039398 -289.77200317]
[73.59620667 -280.97683716]
[75.84415436 -265.93017578]
[66.53784180 -253.43898010]
[68.54563904 -238.57395935]
[70.55343628 -223.70893860]
[72.56123352 -208.84391785]
[74.56903076 -193.97889709]
[82.60706329 -189.69944763]
[87.78874969 -182.04290771]
[88.80371094 -172.71392822]
[85.28732300 -163.86401367]
[77.93518066 -157.59529114]
[78.74033356 -142.61691284]
[79.54547882 -127.63853455]
[80.35063171 -112.66015625]
[81.15577698 -97.68177795]
[81.96092987 -82.70340729]
[82.76607513 -67.72502899]
[83.57122803 -52.74665451]
[85.17920685 -37.83309174]
[87.58537292 -23.02733612]
[89.99154663 -8.22158241]
[92.39771271 6.58417177]
[94.80387878 21.38992500]
[104.48258209 32.71123123]
[99.05918121 47.57384491]
[101.46535492 62.37960052]
[103.87152100 77.18535614]
[106.27769470 91.99111176]
[110.62760925 98.91239166]
[108.54413605 107.22620392]
[110.55193329 122.09122467]
[112.55973053 136.95623779]
[122.07460022 149.59655762]
[116.11051178 163.24496460]
[118.11830902 178.10998535]
[127.63317871 190.75030518]
[121.66909027 204.39871216]
[123.67688751 219.26373291]
[125.68468475 234.12875366]
[134.07867432 238.91328430]
[139.18676758 246.95030212]
[139.93283081 256.30462646]
[136.27307129 264.79452515]
[129.17623901 270.50054932]
[129.98138428 285.47891235]
[130.78652954 300.45730591]
[131.59169006 315.43566895]
[134.98031616 321.35906982]
[134.79486084 327.20492554]
[132.01603699 331.23541260]
[132.01603699 346.23541260]
[132.01603699 361.23541260]
[132.01603699 376.23541260]
[132.01603699 391.23541260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 112]
[6 109]
[7 108]
[8 107]
[9 106]
[11 101]
[12 100]
[13 99]
[15 97]
[16 96]
[18 94]
[19 93]
[20 92]
[21 90]
[22 89]
[23 88]
[24 87]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[35 80]
[36 79]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[42 73]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[51 61]
[52 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
