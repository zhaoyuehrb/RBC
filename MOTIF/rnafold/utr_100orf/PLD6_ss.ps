%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCCGCUGCGGCGGCGUGGCUGUGGGUCCCGGAUUAGCGGCGGCAUGGGACGGUUGAGUUGGCAGGUGGCGGCCGCGGCGGCUGUGGGCCUGGCUCUGACUCUGGAGGCGCUGCCUUGGGUGCUGCGCUGGCUGCGGUCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[89.23216248 425.81613159]
[85.87328339 410.12866211]
[96.15505219 397.81341553]
[96.15505219 382.81341553]
[85.47417450 372.49572754]
[85.26049805 357.28359985]
[96.15505219 346.15048218]
[96.15505219 331.15048218]
[96.15505219 316.15048218]
[96.15505219 301.15048218]
[96.15505219 286.15048218]
[96.15505219 271.15048218]
[96.15505219 256.15048218]
[96.15505219 241.15048218]
[95.99476624 226.15133667]
[95.67422485 211.15476990]
[95.35367584 196.15818787]
[95.03312683 181.16162109]
[94.71258545 166.16503906]
[94.39203644 151.16847229]
[94.07148743 136.17189026]
[93.75094604 121.17531586]
[88.61736298 135.26951599]
[74.74916840 140.98554993]
[61.17529678 134.60195923]
[56.73309326 120.27482605]
[64.31466675 107.33188629]
[78.98356628 104.19960785]
[64.17584229 101.80561066]
[49.36811447 99.41161346]
[34.56038666 97.01761627]
[19.75266266 94.62361908]
[4.94493484 92.22962189]
[-0.90741289 98.40158844]
[-8.65282154 101.68080139]
[-16.96880341 101.58937836]
[-24.46785164 98.21812439]
[-29.92894363 92.19876862]
[-32.49624252 84.58706665]
[-47.04549408 80.93750000]
[-62.65880203 85.95314026]
[-74.62575531 74.74046326]
[-70.63577271 58.83411026]
[-54.79341125 54.59717178]
[-43.39593124 66.38825226]
[-28.84668159 70.03781128]
[-8.80501938 61.93327713]
[7.33893347 77.42189026]
[22.14665985 79.81588745]
[36.95438766 82.20989227]
[51.76211548 84.60388947]
[66.56983948 86.99788666]
[81.37756348 89.39188385]
[93.77114868 80.94208527]
[96.95250702 66.28333282]
[100.13386536 51.62458420]
[103.31523132 36.96583557]
[106.33976746 22.27392578]
[109.20715332 7.55053902]
[112.07453156 -7.17284822]
[114.94190979 -21.89623642]
[113.18905640 -26.96391869]
[113.56584167 -31.70818138]
[115.57814789 -35.35773468]
[118.49369049 -37.45759201]
[122.29850769 -51.96701813]
[126.10332489 -66.47644043]
[129.90814209 -80.98586273]
[133.71296692 -95.49528503]
[128.42156982 -113.09856415]
[141.16439819 -125.12052917]
[144.65827942 -139.70794678]
[148.15216064 -154.29536438]
[151.64605713 -168.88278198]
[155.13993835 -183.47019958]
[158.63383484 -198.05761719]
[162.12771606 -212.64503479]
[159.93702698 -229.45684814]
[175.48538208 -236.21591187]
[186.28451538 -223.14627075]
[176.71513367 -209.15115356]
[173.22125244 -194.56373596]
[169.72735596 -179.97631836]
[166.23347473 -165.38890076]
[162.73957825 -150.80148315]
[159.24569702 -136.21406555]
[155.75181580 -121.62664795]
[161.81974792 -111.11087799]
[158.97682190 -98.89466095]
[148.22238159 -91.69046783]
[144.41757202 -77.18104553]
[140.61274719 -62.67161942]
[136.80792236 -48.16219711]
[133.00311279 -33.65277481]
[129.66529846 -19.02885628]
[126.79792023 -4.30546904]
[123.93053436 10.41791821]
[121.06315613 25.14130592]
[122.88468933 32.35915756]
[117.97397614 40.14719391]
[114.79261780 54.80594254]
[111.61125946 69.46469116]
[108.42990112 84.12344360]
[117.14261627 96.33362579]
[132.03910828 98.09270477]
[146.65142822 92.02716827]
[158.38351440 101.20363617]
[173.28001404 102.96271515]
[188.17651367 104.72180176]
[203.07301331 106.48088074]
[217.96949768 108.23995972]
[234.40841675 104.09283447]
[242.94421387 118.74125671]
[231.23120117 130.99856567]
[216.21041870 123.13645935]
[201.31391907 121.37738037]
[186.41743469 119.61829376]
[171.52093506 117.85921478]
[156.62443542 116.10013580]
[143.07760620 122.29148865]
[130.28002930 112.98920441]
[115.38353729 111.23012543]
[112.91415405 116.34458923]
[108.74752045 120.85477448]
[109.06806183 135.85134888]
[109.38861084 150.84791565]
[109.70915985 165.84449768]
[110.02970123 180.84106445]
[110.35025024 195.83764648]
[110.67079926 210.83421326]
[110.99134064 225.83079529]
[114.32274628 234.41394043]
[111.15505219 241.15048218]
[111.15505219 256.15048218]
[111.15505219 271.15048218]
[111.15505219 286.15048218]
[111.15505219 301.15048218]
[111.15505219 316.15048218]
[111.15505219 331.15048218]
[111.15505219 346.15048218]
[122.04960632 357.28359985]
[121.83592224 372.49572754]
[111.15505219 382.81341553]
[111.15505219 397.81341553]
[121.43682098 410.12866211]
[118.07793427 425.81613159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 144]
[4 143]
[7 140]
[8 139]
[9 138]
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[22 124]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[39 46]
[40 45]
[54 103]
[55 102]
[56 101]
[57 100]
[58 98]
[59 97]
[60 96]
[61 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
[104 122]
[105 121]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
