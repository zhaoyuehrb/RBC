%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGGCGUCCUACACCCCUGCCAGCGGCACCAUGGCUUUCCUCUGGCUCCUCUCCUGCUGGGCCCUCCUGGGUACCACCUUCGGCUGCGGGGUCCCCGCCAUCCACCCUGUGCUCAGCGGCCUGUCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[92.16242981 240.45628357]
[103.27566528 229.45491028]
[101.87104034 214.52082825]
[100.46641541 199.58673096]
[99.06179810 184.65264893]
[97.65717316 169.71855164]
[96.25254822 154.78446960]
[94.84793091 139.85037231]
[90.44414520 154.18936157]
[81.45429230 166.19697571]
[68.93586731 174.46069336]
[54.36145782 178.00845337]
[39.44549179 176.42291260]
[25.94257545 169.89059448]
[15.44109821 159.17990112]
[9.17637920 145.55076599]
[7.88535595 130.60643005]
[11.71989441 116.10482788]
[20.22892761 103.75183868]
[32.41151047 95.00057220]
[46.83457565 90.88047028]
[61.80149078 91.87619019]
[75.54901123 97.86885834]
[62.01276016 91.40590668]
[48.47650528 84.94294739]
[34.94025040 78.47998810]
[21.40399361 72.01703644]
[7.86773920 65.55407715]
[-5.66851568 59.09112167]
[-16.99364853 69.19147491]
[-31.28447533 74.17296600]
[-46.35304642 73.30592346]
[-59.90494537 66.75354004]
[-69.88861847 55.54233551]
[-74.80598450 41.40143967]
[-73.93710327 26.49592590]
[-87.47335815 20.03296852]
[-101.00961304 13.57001305]
[-114.54586792 7.10705662]
[-128.70207214 13.75053215]
[-143.80337524 9.69034958]
[-152.71937561 -3.15639806]
[-151.24021912 -18.72386932]
[-140.06433105 -29.66157913]
[-124.46861267 -30.80507660]
[-111.81688690 -21.61443520]
[-108.08291626 -6.42919827]
[-94.54666138 0.03375803]
[-81.01040649 6.49671412]
[-67.47415161 12.95967007]
[-56.42933655 2.91271234]
[-42.34123611 -2.15392852]
[-27.34611893 -1.43887222]
[-13.73048878 4.98002291]
[-3.58243299 16.15278625]
[1.52859342 30.39780045]
[0.79444063 45.55486679]
[14.33069515 52.01782608]
[27.86695099 58.48078156]
[41.40320587 64.94373322]
[54.93946075 71.40669250]
[68.47571564 77.86965179]
[82.01197052 84.33260345]
[95.14639282 77.08781433]
[96.90071869 62.19075775]
[98.65505219 47.29370117]
[100.40937805 32.39664459]
[93.43360138 17.55513191]
[103.01967621 4.24952555]
[119.30628204 6.16749287]
[125.53914642 21.33599281]
[115.30644226 34.15097427]
[113.55210876 49.04803085]
[111.79778290 63.94508743]
[110.04344940 78.84214783]
[115.02698517 84.44699860]
[123.70858765 72.21466827]
[128.45455933 57.98527527]
[142.20118713 51.98276901]
[155.86387634 58.17396927]
[160.41349792 72.46736145]
[152.84338379 85.41700745]
[138.15779114 88.46531677]
[124.99405670 95.65670013]
[129.97760010 101.26155853]
[144.97760010 101.26155853]
[159.97760010 101.26155853]
[168.65263367 98.10864258]
[175.32820129 101.44150543]
[190.32408142 101.79314423]
[205.31996155 102.14478302]
[220.31584167 102.49642181]
[235.31170654 102.84806061]
[250.30758667 103.19969940]
[265.30346680 103.55133820]
[272.67620850 90.13861084]
[285.44406128 81.69818878]
[300.67303467 80.16961670]
[314.86364746 85.90414429]
[324.75500488 97.58403015]
[328.07415771 112.52531433]
[324.05831909 127.29460144]
[313.63040161 138.49801636]
[299.18658447 143.56109619]
[284.04595947 141.32038879]
[271.68777466 132.29078674]
[264.95184326 118.54721832]
[249.95594788 118.19557953]
[234.96006775 117.84394073]
[219.96420288 117.49230194]
[204.96832275 117.14066315]
[189.97244263 116.78902435]
[174.97656250 116.43738556]
[159.97760010 116.26155853]
[144.97760010 116.26155853]
[129.97760010 116.26155853]
[124.92870331 121.80760193]
[138.59829712 127.98355103]
[136.94873047 142.89257812]
[122.25966644 145.93086243]
[114.83090973 132.89970398]
[109.78202057 138.44575500]
[111.18663788 153.37983704]
[112.59126282 168.31393433]
[113.99588776 183.24801636]
[115.40050507 198.18211365]
[116.80513000 213.11619568]
[118.20975494 228.05029297]
[131.17939758 236.78656006]
[135.44946289 251.82984924]
[129.00373840 266.07717896]
[114.88570404 272.80142212]
[99.76147461 268.82754517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 128]
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[36 50]
[37 49]
[38 48]
[39 47]
[64 75]
[65 74]
[66 73]
[67 72]
[85 116]
[86 115]
[87 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
