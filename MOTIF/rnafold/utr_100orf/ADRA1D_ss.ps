%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCGGCCGCUCGUUCUGUGCCCCGGCCCGGCCACCGACGGCCGCGCGUUGAGAUGACUUUCCGCGAUCUCCUGAGCGUCAGUUUCGAGGGACCCCGCCCGGACAGCAGCGCAGGGGGCUCCAGCGCGGGCGGCGGCGGGGGCAGCGCGGGCG\
) } def
/len { sequence length } bind def

/coor [
[185.47987366 464.00592041]
[181.59757996 449.51702881]
[177.71530151 435.02816772]
[173.83300781 420.53927612]
[169.95072937 406.05038452]
[166.06843567 391.56149292]
[162.18615723 377.07260132]
[157.38966370 371.39306641]
[158.37471008 362.25280762]
[154.78497314 347.68869019]
[151.19525146 333.12454224]
[147.60551453 318.56042480]
[144.01577759 303.99630737]
[140.42604065 289.43218994]
[136.83630371 274.86804199]
[133.24656677 260.30392456]
[122.68826294 249.79814148]
[126.89813995 234.54731750]
[123.30840302 219.98318481]
[119.71866608 205.41906738]
[106.89717102 193.47257996]
[112.09067535 175.83364868]
[108.20838928 161.34475708]
[104.32610321 146.85586548]
[100.44381714 132.36698914]
[96.56153107 117.87809753]
[84.13159943 109.48185730]
[69.24096680 111.28990936]
[54.35033417 113.09796143]
[39.45970154 114.90600586]
[24.60849762 117.01354218]
[9.80274391 119.41971588]
[-5.00300980 121.82588196]
[-19.66712761 130.33470154]
[-31.90284920 118.59913635]
[-24.01309967 103.59286499]
[-7.40917921 107.02012634]
[7.39657497 104.61396027]
[22.20232964 102.20779419]
[25.69918633 98.87866974]
[31.34241486 97.74777985]
[37.65165329 100.01537323]
[52.54228592 98.20732117]
[67.43292236 96.39927673]
[82.32355499 94.59122467]
[92.71441650 83.77318573]
[93.92141724 68.82183075]
[95.12841797 53.87046814]
[96.33541107 38.91910934]
[97.39180756 23.95635414]
[98.29748535 8.98372078]
[99.20316315 -5.98891306]
[100.10883331 -20.96154594]
[89.71750641 -10.14395905]
[75.16130066 -6.52222252]
[60.91230774 -11.20903587]
[51.34822083 -22.76447678]
[49.40739822 -37.63838577]
[55.68611145 -51.26107788]
[68.25537109 -59.44727325]
[83.25353241 -59.68194199]
[96.07274628 -51.89298630]
[102.77430725 -38.47483444]
[106.36404419 -53.03896332]
[109.95378113 -67.60308838]
[113.24951172 -82.23654938]
[116.24989319 -96.93341064]
[119.25028229 -111.63027191]
[108.94797516 -123.08316040]
[107.38320923 -138.22927856]
[114.94760132 -151.23866272]
[128.55903625 -157.22755432]
[131.55941772 -171.92442322]
[134.55979919 -186.62127686]
[137.56019592 -201.31814575]
[140.11531067 -216.09890747]
[142.22285461 -230.95011902]
[144.33038330 -245.80133057]
[146.43792725 -260.65252686]
[139.81649780 -275.65548706]
[149.71578979 -288.72973633]
[165.95225525 -286.42562866]
[171.82322693 -271.11340332]
[161.28913879 -258.54498291]
[159.18159485 -243.69378662]
[157.07405090 -228.84257507]
[154.96652222 -213.99137878]
[156.83032227 -210.93457031]
[157.27272034 -206.80813599]
[155.80070496 -202.30580139]
[152.25704956 -198.31774902]
[149.25666809 -183.62089539]
[146.25627136 -168.92402649]
[143.25588989 -154.22717285]
[153.43067932 -143.38227844]
[155.29052734 -128.44892883]
[147.91419983 -115.12814331]
[133.94714355 -108.62988281]
[130.94674683 -93.93302155]
[127.94636536 -79.23616791]
[129.81915283 -74.78602600]
[128.87542725 -69.10849762]
[124.51790619 -64.01335144]
[120.92816925 -49.44922638]
[117.33843994 -34.88510132]
[115.08146667 -20.05586815]
[114.17579651 -5.08323526]
[113.27011871 9.88939762]
[112.36444092 24.86203194]
[115.11556244 31.76818657]
[111.28677368 40.12610626]
[110.07977295 55.07746506]
[108.87277222 70.02882385]
[107.66577911 84.98018646]
[115.60888672 92.80801392]
[117.02658844 104.08278656]
[111.05042267 113.99581146]
[114.93270874 128.48469543]
[118.81499481 142.97358704]
[122.69727325 157.46247864]
[126.57955933 171.95135498]
[137.36601257 179.09161377]
[140.27935791 191.28237915]
[134.28279114 201.82933044]
[137.87252808 216.39344788]
[141.46226501 230.95758057]
[152.27732849 242.50508118]
[147.81069946 256.71417236]
[151.40043640 271.27832031]
[154.99017334 285.84243774]
[158.57989502 300.40655518]
[162.16963196 314.97070312]
[165.75936890 329.53482056]
[169.34910583 344.09893799]
[172.93884277 358.66308594]
[176.67504883 373.19030762]
[180.55732727 387.67919922]
[184.43962097 402.16809082]
[188.32189941 416.65698242]
[192.20417786 431.14587402]
[196.08647156 445.63476562]
[199.96875000 460.12365723]
[211.28706360 463.97869873]
[219.23774719 472.74746704]
[221.91438293 484.15396118]
[218.75956726 495.31268311]
[210.67614746 503.45846558]
[213.97186279 518.09191895]
[225.48313904 529.77197266]
[220.86332703 545.50695801]
[204.86491394 549.11004639]
[193.94567871 536.87475586]
[199.33840942 521.38769531]
[196.04267883 506.75421143]
[180.02740479 497.97335815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[9 135]
[10 134]
[11 133]
[12 132]
[13 131]
[14 130]
[15 129]
[16 128]
[18 126]
[19 125]
[20 124]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 45]
[28 44]
[29 43]
[30 42]
[31 39]
[32 38]
[33 37]
[46 114]
[47 113]
[48 112]
[49 111]
[50 109]
[51 108]
[52 107]
[53 106]
[63 105]
[64 104]
[65 103]
[66 100]
[67 99]
[68 98]
[72 94]
[73 93]
[74 92]
[75 91]
[76 87]
[77 86]
[78 85]
[79 84]
[147 154]
[148 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
