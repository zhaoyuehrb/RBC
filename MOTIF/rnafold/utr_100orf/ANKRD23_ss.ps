%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGGGGGUGUGAGGAACAGGGGGGACCAUGGACUUCAUCAGCAUUCAGCAGUUGGUAAGUGGAGAAAGAGUUGAAGGGAAAGUGUUGGGAUUUGGACAUGGAGUUCCUGACCCUGGAGCCUGGCCUA\
) } def
/len { sequence length } bind def

/coor [
[80.35855865 411.17153931]
[68.69958496 421.27462769]
[53.42607117 423.44790649]
[39.41173553 416.99795532]
[31.12850189 403.98291016]
[31.21952057 388.55581665]
[39.65575027 375.63940430]
[53.74521637 369.35525513]
[55.91255188 354.51266479]
[53.74407959 347.36715698]
[58.31577301 339.33932495]
[60.84112930 324.55343628]
[55.35699844 310.70520020]
[65.30721283 298.40463257]
[67.83256531 283.61874390]
[70.35792542 268.83285522]
[60.06449890 255.59111023]
[62.53295135 238.66174316]
[76.72620392 228.51914978]
[78.89353943 213.67654419]
[81.06087494 198.83395386]
[83.22821045 183.99136353]
[85.39554596 169.14875793]
[87.20359802 154.25813293]
[88.65130615 139.32815552]
[90.09901428 124.39817810]
[91.54672241 109.46820831]
[92.45240021 94.49557495]
[92.81485748 79.49995422]
[93.17731476 64.50433350]
[93.53977203 49.50870895]
[93.90222931 34.51309204]
[78.74622345 25.79054070]
[70.08556366 10.70085621]
[70.19791412 -6.60887909]
[78.96379089 -21.43279266]
[93.92324066 -29.78557968]
[93.56078339 -44.78120041]
[90.19699860 -53.38536072]
[93.37516022 -60.14256287]
[93.37516022 -75.14256287]
[93.37516022 -90.14256287]
[93.37516022 -105.14256287]
[93.37516022 -120.14256287]
[93.37516022 -135.14256287]
[93.37516022 -150.14256287]
[92.10795593 -165.08894348]
[89.58259583 -179.87483215]
[87.05724335 -194.66072083]
[84.53189087 -209.44660950]
[82.00653076 -224.23249817]
[69.39315033 -233.37254333]
[67.04270935 -248.40351868]
[75.83406830 -260.37213135]
[73.30871582 -275.15802002]
[58.62434006 -279.32116699]
[47.20620728 -289.44979858]
[41.32139206 -303.53283691]
[42.13832855 -318.77407837]
[49.49481201 -332.14736938]
[61.93021011 -340.99743652]
[76.97546387 -343.56707764]
[91.64332581 -339.34613037]
[103.02148438 -329.17260742]
[108.85079193 -315.06652832]
[107.97384644 -299.82861328]
[100.56475830 -286.48440552]
[88.09460449 -277.68338013]
[90.61995697 -262.89746094]
[102.88542938 -254.52526855]
[105.65712738 -239.56623840]
[96.79242706 -226.75785828]
[99.31777954 -211.97196960]
[101.84313202 -197.18608093]
[104.36849213 -182.40019226]
[106.89384460 -167.61428833]
[116.10147095 -179.45573425]
[130.72244263 -182.80645752]
[144.16780090 -176.15647888]
[150.37838745 -162.50259399]
[146.55540466 -147.99794006]
[134.42167664 -139.17906189]
[119.44528198 -140.02017212]
[108.37516022 -150.14256287]
[108.37516022 -135.14256287]
[108.37516022 -120.14256287]
[108.37516022 -105.14256287]
[108.37516022 -90.14256287]
[108.37516022 -75.14256287]
[108.37516022 -60.14256287]
[108.55640411 -45.14365768]
[108.91886139 -30.14803696]
[120.69295502 -25.27118301]
[129.75651550 -16.24544334]
[134.71888733 -4.40521812]
[134.79948425 8.47956848]
[129.95039368 20.46802902]
[120.86898804 29.74067307]
[108.89784241 34.87554550]
[108.53539276 49.87116623]
[108.17293549 64.86679077]
[107.81047821 79.86240387]
[107.44802094 94.85802460]
[109.77355957 98.07616425]
[110.62010956 102.32505035]
[109.55205536 106.89766693]
[106.47669983 110.91591644]
[105.02899170 125.84588623]
[103.58128357 140.77586365]
[102.13356781 155.70584106]
[104.57910156 162.02525330]
[103.54619598 167.74406433]
[100.23814392 171.31610107]
[98.07080841 186.15869141]
[95.90347290 201.00128174]
[93.73613739 215.84388733]
[91.56880188 230.68647766]
[100.83950806 240.54063416]
[102.68254089 253.74705505]
[96.64324951 265.41604614]
[85.14381409 271.35821533]
[82.61846161 286.14410400]
[80.09310150 300.92999268]
[85.39660645 315.83581543]
[75.62702179 327.07879639]
[73.10166931 341.86468506]
[70.75514984 356.67999268]
[68.58781433 371.52261353]
[80.29206085 381.57318115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 128]
[9 127]
[11 126]
[12 125]
[14 123]
[15 122]
[16 121]
[19 117]
[20 116]
[21 115]
[22 114]
[23 113]
[24 110]
[25 109]
[26 108]
[27 107]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[37 92]
[38 91]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[54 69]
[55 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
