%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGCUCCUCCUGUCCUUCUGGCGGAGCGUGCUUCCCGCUGCGGGGACGUUCGAGCAAUGGCAGCCCUGCUGAGAUCCGCGCGUUGGUUGCUGCGUGCCGGGGCGGCCCCGCGCCUCCCGCUCUCCCUGCGCCUCCUCCCUGGCGGCCCGGGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[93.96416473 144.44058228]
[78.35027313 139.27703857]
[69.01448822 151.01770020]
[59.67870331 162.75836182]
[50.34291458 174.49902344]
[41.00712967 186.23968506]
[31.67134285 197.98033142]
[22.33555603 209.72099304]
[12.99976921 221.46165466]
[10.46680546 237.07878113]
[-3.51053429 242.22497559]
[-12.84632111 253.96562195]
[-7.78191614 268.53805542]
[-11.42212105 283.52978516]
[-22.60535812 294.15704346]
[-37.76309967 297.02871704]
[-52.05856323 291.22842407]
[-60.93011856 278.60705566]
[-61.54688644 263.19204712]
[-53.71205902 249.90222168]
[-39.92569733 242.97836304]
[-24.58698082 244.62983704]
[-15.25119400 232.88919067]
[-13.38598824 218.11183167]
[1.25910974 212.12586975]
[10.59489632 200.38520813]
[19.93068314 188.64454651]
[29.26646996 176.90388489]
[38.60225677 165.16323853]
[47.93804169 153.42257690]
[57.27383041 141.68191528]
[66.60961914 129.94125366]
[59.42850494 119.11413574]
[55.65212250 106.68296814]
[55.59738159 93.69097137]
[59.26887512 81.22843170]
[66.35849762 70.34117889]
[76.27128601 61.94287872]
[88.17536926 56.73830032]
[86.69589996 41.81143951]
[82.71676636 33.52876282]
[85.33764648 26.57549286]
[84.15337372 11.62231541]
[82.96910095 -3.33086133]
[81.78482819 -18.28403854]
[80.60055542 -33.23721695]
[79.41628265 -48.19039154]
[70.61358643 -61.33661652]
[77.32189941 -74.63503265]
[76.13762665 -89.58820343]
[74.95335388 -104.54138184]
[73.76908112 -119.49456024]
[72.58480835 -134.44773865]
[60.84528351 -144.68597412]
[59.85727692 -159.86749268]
[69.69020844 -170.99623108]
[68.50593567 -185.94940186]
[67.32166290 -200.90258789]
[56.53100586 -215.79342651]
[64.62657928 -231.33798218]
[63.14710617 -246.26483154]
[61.66763306 -261.19168091]
[60.18815613 -276.11856079]
[58.70868301 -291.04541016]
[57.22920990 -305.97229004]
[55.74973679 -320.89913940]
[54.27025986 -335.82598877]
[43.18751144 -350.50073242]
[50.97438431 -366.20220947]
[49.20028687 -381.09692383]
[47.42618942 -395.99163818]
[45.50503540 -410.86810303]
[43.43700409 -425.72485352]
[31.55553818 -436.50494385]
[32.71953201 -452.50570679]
[46.03607178 -461.45275879]
[61.28984451 -456.48263550]
[66.77946472 -441.40805054]
[58.29376221 -427.79287720]
[60.36179352 -412.93612671]
[64.42037964 -406.71157837]
[62.32090759 -397.76571655]
[64.09500122 -382.87100220]
[65.86910248 -367.97628784]
[75.19678497 -360.22207642]
[76.76946259 -347.78976440]
[69.19712067 -337.30548096]
[70.67659760 -322.37860107]
[72.15606689 -307.45175171]
[73.63554382 -292.52490234]
[75.11502075 -277.59802246]
[76.59449005 -262.67117310]
[78.07396698 -247.74430847]
[79.55343628 -232.81744385]
[88.72610474 -224.88044739]
[90.05284119 -212.41949463]
[82.27484131 -202.08685303]
[83.45911407 -187.13368225]
[84.64338684 -172.18051147]
[96.10551453 -162.73829651]
[97.51955414 -147.59053040]
[87.53797913 -135.63200378]
[88.72225189 -120.67883301]
[89.90652466 -105.72565460]
[91.09079742 -90.77247620]
[92.27507782 -75.81930542]
[100.99305725 -63.74263000]
[94.36945343 -49.37466431]
[95.55372620 -34.42148972]
[96.73799896 -19.46831131]
[97.92227173 -4.51513433]
[99.10654449 10.43804264]
[100.29081726 25.39122009]
[101.62275696 40.33196640]
[103.10223389 55.25882721]
[118.48606110 59.13850403]
[131.55647278 68.13175201]
[140.67778015 81.11311340]
[144.70851135 96.45806122]
[143.14424133 112.24626160]
[136.18072510 126.50191498]
[146.62899780 137.26452637]
[157.07725525 148.02713013]
[170.51054382 146.67802429]
[182.09068298 153.23150635]
[187.68371582 165.08969116]
[185.44277954 177.80990601]
[195.67636108 188.77684021]
[205.90995789 199.74378967]
[216.14353943 210.71072388]
[231.21553040 215.52174377]
[234.24160767 230.10569763]
[244.47518921 241.07264709]
[254.70877075 252.03958130]
[269.78076172 256.85058594]
[272.80682373 271.43457031]
[283.04043579 282.40148926]
[298.95965576 284.39089966]
[307.20651245 298.15203857]
[301.45468140 313.12857056]
[286.11651611 317.83175659]
[272.95812988 308.65371704]
[272.07348633 292.63507080]
[261.83990479 281.66815186]
[247.49989319 277.64157104]
[243.74183655 262.27316284]
[233.50825500 251.30622864]
[223.27465820 240.33929443]
[208.93466187 236.31269836]
[205.17660522 220.94430542]
[194.94302368 209.97737122]
[184.70942688 199.01043701]
[174.47584534 188.04350281]
[157.68273926 188.19645691]
[145.72109985 175.93325806]
[146.31465149 158.47540283]
[135.86637878 147.71278381]
[125.41812134 136.95018005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[11 23]
[12 22]
[39 115]
[40 114]
[42 113]
[43 112]
[44 111]
[45 110]
[46 109]
[47 108]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[56 99]
[57 98]
[58 97]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[69 84]
[70 83]
[71 82]
[72 80]
[73 79]
[121 158]
[122 157]
[123 156]
[127 153]
[128 152]
[129 151]
[130 150]
[132 148]
[133 147]
[134 146]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
