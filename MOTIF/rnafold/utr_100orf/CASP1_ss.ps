%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUUUCAGUUUCAGUCACACAAGAAGGGAGGAGAGAAAAGCCAUGGCCGACAAGGUCCUGAAGGAGAAGAGAAAGCUGUUUAUCCGUUCCAUGGGUGAAGGUACAAUAAAUGGCUUACUGGAUGAAUUAUUACAGACAAGGG\
) } def
/len { sequence length } bind def

/coor [
[31.71065331 280.29177856]
[38.38858032 266.85879517]
[44.06798553 252.97555542]
[36.63126755 252.00332642]
[24.99114227 261.46417236]
[13.35101509 270.92498779]
[1.71088850 280.38583374]
[-9.92923832 289.84667969]
[-12.68904972 295.98645020]
[-17.44486809 299.26535034]
[-22.28471375 299.45202637]
[-34.32374573 308.39974976]
[-46.36277771 317.34747314]
[-58.40180969 326.29516602]
[-60.83851624 341.68023682]
[-73.17527008 350.58300781]
[-87.82756042 348.16516113]
[-99.86659241 357.11288452]
[-101.92144012 372.78302002]
[-114.50561523 382.34408569]
[-130.15315247 380.12368774]
[-139.58064270 367.43914795]
[-137.19493103 351.81594849]
[-124.41140747 342.52310181]
[-108.81431580 345.07385254]
[-96.77528381 336.12612915]
[-94.86558533 321.39898682]
[-82.78376007 312.15322876]
[-67.34953308 314.25613403]
[-55.31049728 305.30844116]
[-43.27146530 296.36071777]
[-31.23243523 287.41299438]
[-19.39007568 278.20654297]
[-7.74994946 268.74569702]
[3.89017749 259.28488159]
[15.53030396 249.82403564]
[27.17043114 240.36318970]
[22.75613594 214.97328186]
[35.68718719 195.39723206]
[56.29225922 190.60231018]
[60.46151733 176.19338989]
[64.63077545 161.78445435]
[68.80003357 147.37551880]
[72.96929932 132.96659851]
[77.13855743 118.55766296]
[81.30781555 104.14873505]
[77.13855743 89.73979950]
[65.91918945 79.78360748]
[54.69981766 69.82741547]
[43.48044968 59.87122345]
[27.44469643 59.38737106]
[17.94055557 46.46255493]
[22.25879478 31.01158905]
[37.08682632 24.88713074]
[51.04985809 32.78734207]
[53.43664169 48.65185547]
[64.65601349 58.60804749]
[75.87538147 68.56423950]
[87.09474945 78.52043152]
[99.68953705 70.37357330]
[95.20909119 56.05835342]
[80.46184540 51.23152924]
[71.39550018 38.63862991]
[71.49626923 23.12188148]
[80.72538757 10.64778996]
[95.53408051 6.01289892]
[110.22810364 10.99941730]
[119.15730286 23.68992805]
[118.88821411 39.20466995]
[109.52431488 51.57790756]
[114.00476074 65.89313507]
[121.29277039 67.66371918]
[120.15641022 52.70682144]
[134.03012085 47.00416946]
[143.74085999 58.43664551]
[135.86877441 71.20488739]
[143.15678406 72.97547150]
[153.70578003 62.31157303]
[164.25477600 51.64767838]
[168.10394287 43.28027725]
[175.14971924 40.87012863]
[185.92726135 30.43727493]
[196.70480347 20.00441742]
[207.48236084 9.57156277]
[218.25990295 -0.86129326]
[229.03744507 -11.29414940]
[239.81500244 -21.72700500]
[250.59254456 -32.15985870]
[261.37008667 -42.59271622]
[268.54519653 -57.95352173]
[285.29196167 -55.31113052]
[287.38879395 -38.48734665]
[271.80294800 -31.81516838]
[261.02539062 -21.38231277]
[250.24784851 -10.94945812]
[239.47030640 -0.51660198]
[228.69276428 9.91625404]
[217.91520691 20.34910965]
[207.13766479 30.78196526]
[196.36012268 41.21482086]
[185.58256531 51.64767838]
[174.91867065 62.19667053]
[164.36967468 72.86057281]
[153.82067871 83.52446747]
[150.41928101 99.79135895]
[142.70854187 112.68828583]
[132.32417297 121.25676727]
[121.04744720 125.18377686]
[110.57711792 124.79280853]
[102.32175446 120.96031189]
[97.23577881 114.96918488]
[95.71674347 108.31799316]
[91.54748535 122.72692108]
[87.37822723 137.13584900]
[83.20896912 151.54478455]
[79.03971100 165.95372009]
[74.87044525 180.36264038]
[70.70118713 194.77157593]
[84.60779572 206.90873718]
[88.54447937 226.98222351]
[78.51338959 247.07546997]
[87.33016968 259.21072388]
[102.68793488 261.81396484]
[111.45653534 274.24642944]
[108.88010406 288.87167358]
[117.69688416 301.00692749]
[133.21337891 300.87225342]
[145.82604980 309.91107178]
[150.68508911 324.64773560]
[145.92207336 339.41571045]
[133.36849976 348.53643799]
[117.85146332 348.50274658]
[105.33757782 339.32766724]
[100.63869476 324.53915405]
[105.56163025 309.82369995]
[96.74485016 297.68844604]
[82.03926086 295.61932373]
[72.92492676 283.43804932]
[75.19491577 268.02749634]
[66.37813568 255.89225769]
[58.94142151 254.92001343]
[60.86091995 269.79669189]
[63.86153793 284.49349976]
[53.64053345 295.47216797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[11 32]
[12 31]
[13 30]
[14 29]
[17 26]
[18 25]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[46 112]
[47 59]
[48 58]
[49 57]
[50 56]
[60 71]
[61 70]
[77 104]
[78 103]
[79 102]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
[121 140]
[122 139]
[125 136]
[126 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
