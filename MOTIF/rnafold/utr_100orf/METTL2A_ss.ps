%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCGGCUCCGGUGUCAUGGCCGGCUCCUACCCUGAAGGUGCACCUGCAGUCCUCGCCGAUAAGAGGCAGCAGUUCGGAAGCCGGUUCCUGAGAGAUCCGGCGCGCGUCUUCCACC\
) } def
/len { sequence length } bind def

/coor [
[135.88137817 524.96984863]
[130.22491455 510.88552856]
[130.04217529 495.70886230]
[135.35787964 481.49240112]
[145.45312500 470.15881348]
[158.96260071 463.24084473]
[157.38156128 448.32440186]
[155.60374451 433.43011475]
[153.62950134 418.56060791]
[144.28437805 406.96243286]
[150.13804626 392.26394653]
[148.16378784 377.39443970]
[146.18954468 362.52493286]
[144.21528625 347.65542603]
[127.93467712 337.15679932]
[124.37447357 317.80953979]
[136.20661926 301.71969604]
[133.06213379 287.05300903]
[129.91763306 272.38629150]
[117.46424866 260.09838867]
[123.10108185 242.62960815]
[119.57052612 228.05101013]
[116.03997803 213.47242737]
[112.50942230 198.89384460]
[108.97886658 184.31524658]
[105.44831848 169.73666382]
[101.91776276 155.15808105]
[98.38721466 140.57949829]
[94.66453552 126.04877472]
[90.75038147 111.56846619]
[80.79214478 100.35091400]
[66.87780762 94.74813080]
[52.96346664 89.14535522]
[39.04912186 83.54257965]
[23.78480911 88.48021698]
[10.48733807 79.50487518]
[9.35739040 63.50166321]
[21.26176643 52.74687958]
[37.06844711 55.49067307]
[44.65190125 69.62824249]
[58.56624222 75.23101807]
[72.48058319 80.83379364]
[86.39492035 86.43656921]
[92.77155304 82.48832703]
[92.30959320 67.49544525]
[105.52481079 74.59184265]
[111.90143585 70.64360809]
[113.08819580 55.69062424]
[114.27494812 40.73764420]
[115.46170807 25.78466415]
[105.55444336 16.54936218]
[102.85459137 3.47643399]
[108.13597870 -8.57014370]
[119.24510193 -15.24093342]
[120.82615662 -30.15737534]
[122.40721130 -45.07381821]
[123.98826599 -59.99026108]
[112.37620544 -70.28296661]
[109.06464386 -85.44255829]
[115.32692719 -99.63986206]
[128.75509644 -107.41571808]
[144.18572998 -105.78016663]
[155.68545532 -95.36209869]
[158.83236694 -80.16747284]
[152.41642761 -66.03894043]
[138.90470886 -58.40920639]
[137.32365417 -43.49276352]
[135.74259949 -28.57632256]
[134.16154480 -13.65987873]
[145.27336121 -1.11182702]
[143.90556335 15.93030357]
[130.41468811 26.97142029]
[129.22793579 41.92440033]
[128.04116821 56.87738037]
[126.85441589 71.83036041]
[129.44104004 88.77887726]
[124.01589966 101.94986725]
[114.42633057 108.37852478]
[105.23069763 107.65431213]
[109.14484406 122.13462830]
[114.46848297 129.71548462]
[112.96579742 137.04893494]
[116.49635315 151.62753296]
[120.02690125 166.20611572]
[123.55745697 180.78469849]
[127.08801270 195.36328125]
[130.61856079 209.94187927]
[134.14910889 224.52046204]
[137.67967224 239.09904480]
[148.32145691 246.53137207]
[150.91125488 258.83959961]
[144.58433533 269.24179077]
[147.72883606 283.90850830]
[150.87332153 298.57519531]
[161.19772339 302.03271484]
[169.04870605 309.45846558]
[173.01486206 319.42321777]
[172.42304993 330.05032349]
[167.45167542 339.36929321]
[159.08479309 345.68115234]
[161.05905151 360.55065918]
[163.03329468 375.42016602]
[165.00755310 390.28970337]
[174.49388123 402.95144653]
[168.49900818 416.58636475]
[170.47325134 431.45587158]
[174.75280762 439.67144775]
[172.29800415 446.74334717]
[173.87904358 461.65979004]
[188.53858948 465.59201050]
[200.78541565 474.55746460]
[208.96324158 487.34368896]
[211.96609497 502.22143555]
[209.38784790 517.17858887]
[201.57719421 530.19238281]
[189.59046936 539.50274658]
[175.04876709 543.85052490]
[159.91873169 542.64776611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 109]
[7 108]
[8 106]
[9 105]
[11 103]
[12 102]
[13 101]
[14 100]
[17 94]
[18 93]
[19 92]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 80]
[30 79]
[31 43]
[32 42]
[33 41]
[34 40]
[47 75]
[48 74]
[49 73]
[50 72]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
