%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:12:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAUGGGAGAAUCAGACCUUCAACUCUGACUUCAUCCUCCUGGGAAUCUUCAAUCACAGCCCCACCCACACCUUCCUCUUCUUUCUGGUCCUGGCCA\
) } def
/len { sequence length } bind def

/coor [
[86.98006439 206.84262085]
[89.76875305 187.66259766]
[90.23525238 172.66986084]
[90.70175171 157.67710876]
[91.16825104 142.68437195]
[75.87873077 136.30592346]
[64.07360077 124.68297577]
[57.45814514 109.49449921]
[42.47446823 110.19410706]
[27.49079132 110.89371490]
[12.50711536 111.59331512]
[-2.46386909 112.52586365]
[-17.41853905 113.69112396]
[-32.37321091 114.85637665]
[-47.30794907 116.25406647]
[-62.21914673 117.88385010]
[-77.13034821 119.51363373]
[-92.04154205 121.14341736]
[-106.95274353 122.77319336]
[-114.53828430 136.30978394]
[-128.64578247 142.77183533]
[-143.85060120 139.67459106]
[-154.30618286 128.20896912]
[-155.99215698 112.78376007]
[-148.26020813 99.33026123]
[-134.08343506 93.02161407]
[-118.91311646 96.28363800]
[-108.58251953 107.86199951]
[-93.67132568 106.23221588]
[-78.76012421 104.60243225]
[-63.84893036 102.97265625]
[-48.93773270 101.34287262]
[-42.51749420 97.41781616]
[-33.53846741 99.90171051]
[-18.58379745 98.73645020]
[-3.62912679 97.57118988]
[2.91007423 93.84770966]
[11.80750942 96.60964203]
[26.79118538 95.91003418]
[41.77486038 95.21043396]
[56.75853729 94.51082611]
[65.40089417 73.48854828]
[83.45127869 59.67513275]
[106.00150299 56.82666397]
[110.59236908 42.54646683]
[115.18322754 28.26626968]
[119.77408600 13.98607349]
[107.78495026 4.71048307]
[99.69391632 -8.10790157]
[96.47801208 -22.92119789]
[98.52557373 -37.94062805]
[105.58934021 -51.35252380]
[116.81633759 -61.53733444]
[130.85084534 -67.26519012]
[145.99813843 -67.84442902]
[160.42909241 -63.20510483]
[172.40110779 -53.90743637]
[180.46850586 -41.07416534]
[183.65710449 -26.25496674]
[181.58186340 -11.23933411]
[174.49339294 2.15952158]
[163.24765015 12.32362366]
[149.20260620 18.02560806]
[134.05427551 18.57693100]
[129.46342468 32.85712814]
[124.87255859 47.13732529]
[120.28170013 61.41752243]
[128.28912354 66.83856964]
[134.90429688 73.89167023]
[139.80165100 82.22969055]
[142.74015808 91.44228363]
[143.57519531 101.07604980]
[142.26567078 110.65685272]
[155.96250916 116.77210999]
[169.65936279 122.88735962]
[180.67248535 112.40978241]
[194.85867310 106.94897461]
[210.05464172 107.33765411]
[223.94311523 113.51656342]
[234.40618896 124.54345703]
[239.84832764 138.73681641]
[239.43966675 153.93225098]
[233.24249268 167.81259155]
[222.20184326 178.26115417]
[208.00134277 183.68461609]
[192.80644226 183.25596619]
[178.93428040 177.04054260]
[168.50024414 165.98614502]
[163.09545898 151.77851868]
[163.54411316 136.58421326]
[149.84725952 130.46894836]
[136.15040588 124.35369873]
[131.59246826 130.03117371]
[126.15309906 134.87077332]
[119.98405457 138.73748779]
[113.25746918 141.52342224]
[106.16099548 143.15086365]
[105.69449615 158.14361572]
[105.22799683 173.13635254]
[104.76149750 188.12910461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[8 41]
[9 40]
[10 39]
[11 38]
[12 36]
[13 35]
[14 34]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[44 67]
[45 66]
[46 65]
[47 64]
[73 92]
[74 91]
[75 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
