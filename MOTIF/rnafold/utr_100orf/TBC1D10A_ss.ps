%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGGCGCCGCGCGUGGGCGGGGCGUCGGCGGCAGCAGGGCGGCUGAGGUGGCCGCUGGAGCUCAGGCGGCGGGCGCGGCUGGGAUGGCGAAGAGCAACGGAGAGAAUGGGCCGCGCGCGCCCGCGGCCGGGGAAAGCCUGUCGGGAACCCGGGAGAGCCUGGCCCAGGGCCCCGACGCCGCAA\
) } def
/len { sequence length } bind def

/coor [
[-112.13253784 425.04687500]
[-120.70681000 433.87402344]
[-131.65989685 439.41500854]
[-143.78936768 441.08422852]
[-155.77102661 438.71987915]
[-163.70549011 451.44952393]
[-171.63995361 464.17919922]
[-179.57441711 476.90884399]
[-187.50886536 489.63851929]
[-195.44332886 502.36819458]
[-196.17691040 518.17236328]
[-209.47538757 524.88055420]
[-217.40985107 537.61022949]
[-225.34431458 550.33990479]
[-225.35710144 566.73901367]
[-239.69874573 574.69195557]
[-253.61578369 566.01739502]
[-252.79156494 549.63897705]
[-238.07397461 542.40539551]
[-230.13951111 529.67578125]
[-222.20506287 516.94610596]
[-222.03900146 502.05239868]
[-208.17298889 494.43371582]
[-200.23854065 481.70407104]
[-192.30407715 468.97439575]
[-184.36961365 456.24472046]
[-176.43515015 443.51507568]
[-168.50068665 430.78540039]
[-170.62403870 428.58538818]
[-172.55824280 426.21734619]
[-186.13496399 432.59487915]
[-195.05406189 446.35647583]
[-211.41537476 445.24298096]
[-218.38775635 430.39987183]
[-208.79864502 417.09646606]
[-192.51248169 419.01815796]
[-178.93576050 412.64062500]
[-178.16949463 392.11312866]
[-166.52629089 375.06317139]
[-147.49389648 366.79534912]
[-126.87937164 369.95361328]
[-117.89942932 357.93859863]
[-108.91948700 345.92358398]
[-99.93954468 333.90856934]
[-90.95959473 321.89355469]
[-95.53966522 307.74572754]
[-90.85527039 293.44467163]
[-78.50370789 284.54003906]
[-63.09915161 284.61672974]
[-54.11920929 272.60171509]
[-52.62997818 265.34582520]
[-44.88473892 260.46133423]
[-35.70314789 248.59968567]
[-26.52155876 236.73805237]
[-17.33996773 224.87641907]
[-15.72840405 217.64671326]
[-7.90177011 212.89372253]
[1.47884703 201.18884277]
[10.85946369 189.48397827]
[20.24008179 177.77909851]
[21.97352219 170.57765198]
[29.87931442 165.95751953]
[39.45628357 154.41275024]
[41.31110382 147.24159241]
[49.29380417 142.75564575]
[59.06438828 131.37428284]
[68.83497620 119.99290466]
[78.60556030 108.61153412]
[88.37615204 97.23016357]
[94.40768433 83.49623871]
[96.17704010 68.60095978]
[97.94638824 53.70568085]
[99.71573639 38.81039810]
[93.66027832 24.19390297]
[102.84483337 12.46814919]
[104.61418152 -2.42713189]
[106.38352966 -17.32241249]
[108.15288544 -32.21769333]
[109.92223358 -47.11297607]
[111.69158173 -62.00825500]
[113.46093750 -76.90353394]
[115.23028564 -91.79882050]
[100.29636383 -99.09149170]
[88.77356720 -111.03212738]
[82.03809357 -126.16940308]
[80.88572693 -142.67173767]
[85.43787384 -158.54893494]
[95.12903595 -171.89219666]
[108.77698517 -181.10360718]
[124.72696686 -185.08747864]
[125.99223328 -200.03402710]
[114.16512299 -210.07887268]
[110.53371429 -225.16503906]
[116.49437714 -239.49159241]
[129.75511169 -247.54968262]
[145.21687317 -246.24079895]
[156.93432617 -236.06823730]
[160.40187073 -220.94355774]
[154.28613281 -206.68251038]
[140.93878174 -198.76875305]
[139.67350769 -183.82221985]
[152.19061279 -178.79016113]
[162.79364014 -170.42179871]
[170.61587524 -159.38906860]
[175.01454163 -146.58219910]
[175.62351990 -133.03784180]
[172.38388062 -119.85521698]
[165.54945374 -108.10682678]
[155.66687012 -98.75126648]
[143.53195190 -92.55497742]
[130.12556458 -90.02946472]
[128.35621643 -75.13418579]
[126.58686829 -60.23890686]
[124.81751251 -45.34362411]
[123.04816437 -30.44834328]
[121.27881622 -15.55306244]
[119.50946045 -0.65778118]
[117.74011230 14.23750019]
[123.92212677 27.78858566]
[114.61102295 40.57975006]
[112.84166718 55.47502899]
[111.07231903 70.37030792]
[109.30297089 85.26559448]
[114.09145355 91.03797913]
[122.11175537 78.36222076]
[136.64552307 82.07298279]
[137.60752869 97.04209900]
[123.66841888 102.58274841]
[128.45690918 108.35513306]
[143.42268372 109.36777496]
[158.38845825 110.38042450]
[173.35424805 111.39306641]
[188.32002258 112.40571594]
[195.01458740 101.81915283]
[205.51881409 95.12969208]
[217.79992676 93.55893707]
[229.51211548 97.34487152]
[238.44461060 105.70822144]
[242.93894958 117.01188660]
[257.86199951 118.52941132]
[272.59085083 111.31880188]
[286.04702759 120.69236755]
[284.38793945 137.00737000]
[269.32034302 143.48034668]
[256.34445190 133.45245361]
[241.42143250 131.93492126]
[230.29295349 145.62510681]
[213.02638245 149.94863892]
[196.47009277 142.99670410]
[187.30737305 127.37149048]
[172.34159851 126.35884857]
[157.37582397 125.34619904]
[142.41003418 124.33355713]
[127.44425964 123.32090759]
[119.14353180 123.37372589]
[111.83184052 121.35163116]
[105.95613861 117.62986755]
[101.85798645 112.67138672]
[99.75752258 107.00074768]
[89.98693848 118.38211823]
[80.21634674 129.76348877]
[70.44576263 141.14486694]
[60.67517471 152.52622986]
[51.00105286 163.98971558]
[41.42408371 175.53448486]
[31.94495201 187.15971375]
[22.56433678 198.86459351]
[13.18371868 210.56945801]
[3.80310202 222.27433777]
[-5.47833252 234.05801392]
[-14.65992260 245.91964722]
[-23.84151268 257.78128052]
[-33.02310181 269.64291382]
[-42.10419083 281.58166504]
[-51.08413696 293.59667969]
[-46.64793015 308.34884644]
[-51.68995667 322.71655273]
[-64.07888031 331.25930786]
[-78.94458008 330.87350464]
[-87.92452240 342.88851929]
[-96.90446472 354.90353394]
[-105.88441467 366.91854858]
[-114.86435699 378.93356323]
[-108.30926514 389.49496460]
[-105.55632782 401.58468628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[12 21]
[13 20]
[14 19]
[30 37]
[31 36]
[41 183]
[42 182]
[43 181]
[44 180]
[45 179]
[49 175]
[50 174]
[52 173]
[53 172]
[54 171]
[55 170]
[57 169]
[58 168]
[59 167]
[60 166]
[62 165]
[63 164]
[65 163]
[66 162]
[67 161]
[68 160]
[69 159]
[70 123]
[71 122]
[72 121]
[73 120]
[75 118]
[76 117]
[77 116]
[78 115]
[79 114]
[80 113]
[81 112]
[82 111]
[90 101]
[91 100]
[129 154]
[130 153]
[131 152]
[132 151]
[133 150]
[139 146]
[140 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
