%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCAUGGAAAAUUAUUCUAUGGCAGCUCAGUUUGUCUUAGAUGGUUUAACACAGCAAGCAGAGCUCCAGCUGCCCCUCUUCCUCCUGUUCCUGGGAA\
) } def
/len { sequence length } bind def

/coor [
[82.20463562 474.71560669]
[69.96144104 465.18231201]
[65.69237518 450.26403809]
[71.03897858 435.69717407]
[83.94538116 427.08297729]
[84.41188049 412.09024048]
[84.87837982 397.09750366]
[81.88743591 390.19244385]
[85.59974670 381.64776611]
[86.53229523 366.67678833]
[87.46483612 351.70581055]
[88.39737701 336.73483276]
[73.24492645 332.18472290]
[59.58418655 324.18798828]
[48.18652725 313.19161987]
[39.69659805 299.81207275]
[34.59586716 284.80084229]
[33.17531967 269.00210571]
[35.51887512 253.30529785]
[41.49841309 238.59504700]
[50.78079605 225.70132446]
[62.84641647 215.35261536]
[77.01828003 208.13473511]
[92.50000000 204.45768738]
[92.50000000 189.45768738]
[92.50000000 174.45768738]
[92.50000000 159.45768738]
[92.50000000 144.45768738]
[92.50000000 129.45768738]
[92.50000000 114.45768738]
[83.71471405 100.25329590]
[92.05399323 85.78255463]
[91.58750153 70.78981018]
[91.12100220 55.79706573]
[90.65450287 40.80432129]
[90.18800354 25.81157684]
[78.95248413 15.02265739]
[78.69296265 -0.18876277]
[89.04779053 -10.83362675]
[88.58129120 -25.82637215]
[88.11479950 -40.81911469]
[77.23015594 -48.93081284]
[73.11965942 -61.66284180]
[77.08849335 -74.23468781]
[87.45197296 -82.06285095]
[87.45197296 -97.06285095]
[74.81971741 -106.07427216]
[69.92871857 -120.80036163]
[74.65967560 -135.57864380]
[87.19343567 -144.72657776]
[102.71051025 -144.72657776]
[115.24427032 -135.57864380]
[119.97522736 -120.80036163]
[115.08423615 -106.07427216]
[102.45197296 -97.06285095]
[102.45197296 -82.06285095]
[114.81743622 -70.78301239]
[115.29383087 -53.71691895]
[103.10753632 -41.28561401]
[103.57403564 -26.29286957]
[104.04053497 -11.30012512]
[115.03711700 -1.31960797]
[115.72379303 13.87852097]
[105.18074799 25.34507942]
[105.64724731 40.33782578]
[106.11374664 55.33056641]
[106.58023834 70.32331085]
[107.04673767 85.31605530]
[115.09609222 93.88585663]
[115.27893829 105.64170074]
[107.50000000 114.45768738]
[107.50000000 129.45768738]
[107.50000000 144.45768738]
[107.50000000 159.45768738]
[107.50000000 174.45768738]
[107.50000000 189.45768738]
[107.50000000 204.45768738]
[121.39596558 207.57313538]
[134.31481934 213.55021667]
[145.67494202 222.11689758]
[154.96556091 232.88459778]
[161.76965332 245.36585999]
[165.78265381 258.99639893]
[166.82615662 273.16064453]
[164.85575867 287.21948242]
[159.96302795 300.53915405]
[152.37118530 312.51977539]
[142.42494202 322.62237549]
[130.57485962 330.39315796]
[117.35693359 335.48385620]
[103.36836243 337.66735840]
[102.43582153 352.63836670]
[101.50327301 367.60934448]
[100.57073212 382.58032227]
[99.87112427 397.56399536]
[99.40462494 412.55673218]
[98.93812561 427.54949951]
[111.28402710 436.94940186]
[115.71467590 451.82049561]
[110.52640533 466.44448853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 97]
[6 96]
[7 95]
[9 94]
[10 93]
[11 92]
[12 91]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[39 61]
[40 60]
[41 59]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
