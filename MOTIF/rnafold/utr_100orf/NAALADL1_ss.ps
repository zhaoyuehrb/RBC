%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAGAGUCCGCAGGAUGCAGUGGACGAAGGUGUUGGGGCUGGGGCUGGGGGCUGCUGCCCUCUUGGGGCUGGGGAUCAUCCUCGGCCACUUUGCCAUCCCCAAAAAAGCCAACU\
) } def
/len { sequence length } bind def

/coor [
[-85.79188538 280.28430176]
[-97.66146851 289.45562744]
[-109.53105164 298.62692261]
[-108.10543060 312.41088867]
[-113.66417694 324.98583984]
[-124.64308929 333.08007812]
[-138.08358765 334.64630127]
[-150.42956543 329.37869263]
[-162.54110718 338.22802734]
[-174.65264893 347.07736206]
[-186.76419067 355.92669678]
[-198.87571716 364.77603149]
[-210.98725891 373.62536621]
[-210.81092834 389.14141846]
[-219.81582642 401.77832031]
[-234.53939819 406.67691040]
[-249.32012939 401.95358276]
[-258.47451782 389.42453003]
[-258.48251343 373.90747070]
[-249.34104919 361.36898804]
[-234.56520081 356.63043213]
[-219.83659363 361.51382446]
[-207.72505188 352.66448975]
[-195.61351013 343.81515503]
[-183.50198364 334.96582031]
[-171.39044189 326.11648560]
[-159.27890015 317.26715088]
[-159.87467957 300.92236328]
[-150.55644226 287.27996826]
[-134.80239868 281.78033447]
[-118.70236969 286.75735474]
[-106.83277893 277.58602905]
[-94.96319580 268.41470337]
[-83.34412384 258.92803955]
[-71.98393250 249.13282776]
[-60.62374878 239.33761597]
[-49.26356125 229.54240417]
[-37.90337372 219.74719238]
[-40.61660767 201.39108276]
[-31.78393936 184.90501404]
[-14.73159409 176.86979675]
[3.89450717 180.61145020]
[14.42967033 169.93389893]
[24.96483421 159.25633240]
[35.49999619 148.57876587]
[46.03516006 137.90119934]
[49.46638489 123.40721130]
[64.66655731 119.01797485]
[75.20172119 108.34041595]
[85.73688507 97.66284943]
[90.67749023 83.49985504]
[89.06951141 68.58629608]
[87.46153259 53.67272949]
[85.85355377 38.75916290]
[75.74716949 25.84432983]
[82.12866974 10.73775959]
[98.43331909 8.97979546]
[107.88829041 22.37888145]
[100.76712036 37.15118790]
[102.37509918 52.06475067]
[103.98307800 66.97831726]
[105.59105682 81.89188385]
[112.13600159 85.55434418]
[119.46112823 72.46455383]
[132.55081177 79.78988647]
[125.22590637 92.87926483]
[131.77085876 96.54173279]
[145.32261658 90.11134338]
[158.78681946 83.49959564]
[172.16104126 76.70768738]
[185.53527832 69.91578674]
[198.90950012 63.12387466]
[212.28372192 56.33196640]
[225.65795898 49.54005814]
[239.03218079 42.74814987]
[252.40641785 35.95624161]
[265.78063965 29.16433525]
[277.16531372 16.60146523]
[292.38879395 24.06346512]
[289.43270874 40.75770950]
[272.57254028 42.53856277]
[259.19833374 49.33047104]
[245.82409668 56.12237930]
[232.44985962 62.91428757]
[219.07563782 69.70619202]
[205.70141602 76.49810028]
[192.32717896 83.29000854]
[178.95295715 90.08191681]
[165.57872009 96.87382507]
[160.97978210 102.78513336]
[151.75299072 103.66310120]
[138.20124817 110.09349060]
[124.59037781 120.27511597]
[110.54119110 121.81689453]
[100.31343079 116.58596039]
[96.41444397 108.19801331]
[85.87928009 118.87557983]
[75.34411621 129.55314636]
[71.15934753 144.81086731]
[56.71272278 148.43637085]
[46.17755890 159.11393738]
[35.64239502 169.79148865]
[25.10723305 180.46905518]
[14.57206917 191.14662170]
[18.44086266 202.17280579]
[17.85394669 213.79144287]
[12.93765831 224.27789307]
[4.45805550 232.09037781]
[-6.29818583 236.09674072]
[-17.71892357 235.73826599]
[-28.10816193 231.10739136]
[-39.46834946 240.90260315]
[-50.82853699 250.69779968]
[-62.18872452 260.49301147]
[-73.54891205 270.28823853]
[-76.16423798 276.59133911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[34 115]
[35 114]
[36 113]
[37 112]
[38 111]
[42 104]
[43 103]
[44 102]
[45 101]
[46 100]
[48 98]
[49 97]
[50 96]
[51 62]
[52 61]
[53 60]
[54 59]
[67 92]
[68 91]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
