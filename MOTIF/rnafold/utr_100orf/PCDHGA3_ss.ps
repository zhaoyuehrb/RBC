%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCAAUUGCCUGAGUUUCCGAAAUGGCAGAGGACUGGCCCUGCUGUGCGCGCUCCUGGGGACGCUGUGCGAAACAGGAUCCGGUCAGAUCCGCUACU\
) } def
/len { sequence length } bind def

/coor [
[103.19261932 189.12452698]
[114.56964874 179.00114441]
[109.97879028 164.72094727]
[105.38793182 150.44075012]
[100.79707336 136.16055298]
[96.20621490 121.88034821]
[91.16820526 117.92887878]
[87.97197723 113.07431030]
[86.67532349 108.00577545]
[87.10676575 103.36085510]
[88.90196228 99.65544891]
[91.56006622 97.23054504]
[80.08608246 87.56889343]
[61.95743179 84.84876251]
[56.46476364 68.26165771]
[44.69585037 58.96151352]
[32.92693710 49.66136932]
[21.15802383 40.36122894]
[10.22346783 42.26947021]
[0.28771588 37.84096146]
[-5.36751318 28.80920601]
[-5.02646255 18.38040352]
[-16.19442368 8.36658096]
[-29.20772934 8.26291370]
[-38.31845093 -0.45599058]
[-38.95084381 -12.64689064]
[-49.80197525 -23.00319099]
[-60.65310669 -33.35948944]
[-71.50423431 -43.71578979]
[-82.35536957 -54.07209015]
[-93.20649719 -64.42839050]
[-104.05763245 -74.78469086]
[-112.58525085 -78.53600311]
[-115.07884979 -85.63582611]
[-125.60265350 -96.32458496]
[-141.56947327 -97.88665771]
[-150.18212891 -111.42186737]
[-144.83372498 -126.54714203]
[-129.62709045 -131.65968323]
[-116.22747040 -122.83757019]
[-114.91389465 -106.84838867]
[-104.39009094 -96.15962982]
[-93.70133209 -85.63582611]
[-82.85019684 -75.27952576]
[-71.99906921 -64.92322540]
[-61.14793777 -54.56692123]
[-50.29680634 -44.21062088]
[-39.44567490 -33.85432053]
[-28.59454346 -23.49802208]
[-11.40334988 -20.37322998]
[-6.18060207 -2.80138040]
[4.98735952 7.21244144]
[24.06928253 9.59845448]
[30.45816612 28.59231377]
[42.22708130 37.89245605]
[53.99599457 47.19260025]
[65.76490784 56.49274445]
[77.92481232 55.41813278]
[87.82952881 63.22333145]
[89.74773407 76.09490204]
[101.22172546 85.75656128]
[115.70050049 89.67638397]
[130.48153687 87.12273407]
[145.26255798 84.56908417]
[154.37843323 71.93822479]
[169.40487671 69.55901337]
[181.39028931 78.32745361]
[196.17132568 75.77379608]
[210.95236206 73.22014618]
[225.73338318 70.66648865]
[236.11842346 58.43822861]
[252.14874268 59.07738113]
[261.52725220 72.09365082]
[257.05953979 87.50206757]
[242.17289734 93.48261261]
[228.28703308 85.44752502]
[213.50601196 88.00117493]
[198.72497559 90.55482483]
[183.94395447 93.10848236]
[175.59523010 105.38995361]
[160.64154053 108.19028473]
[147.81620789 99.35011292]
[133.03518677 101.90376282]
[118.25415039 104.45742035]
[110.48641205 117.28948975]
[115.07727051 131.56968689]
[119.66812897 145.84988403]
[124.25898743 160.13008118]
[128.84983826 174.41027832]
[143.99479675 176.00727844]
[157.17758179 183.63183594]
[166.11422729 195.96295166]
[169.25637817 210.86418152]
[166.05966187 225.75379944]
[157.07791138 238.05209351]
[143.86727905 245.62831116]
[128.71658325 247.16981506]
[114.25077057 242.40954590]
[102.97613525 232.17224121]
[96.84607697 218.23156738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[12 61]
[13 60]
[15 57]
[16 56]
[17 55]
[18 54]
[22 52]
[23 51]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[34 42]
[35 41]
[62 84]
[63 83]
[64 82]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
