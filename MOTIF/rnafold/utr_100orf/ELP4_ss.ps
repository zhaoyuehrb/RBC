%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACGGGUGUUUGCGUUCCCAGAGUUCCUAUUGGGUUAACACUGGAGGCUCUAAGAUGGCGGCAGUGGCAACCUGCGGUAGUGUUGCCGCGAGUACUGGGUCUGCAGUGGCGACAGCCAGCAAGAGCAACGUCACCAGUUUCCAGAGGAGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[172.04469299 290.11401367]
[171.35713196 286.11904907]
[172.07527161 281.70706177]
[166.23118591 267.89233398]
[160.38711548 254.07760620]
[154.54302979 240.26287842]
[139.99610901 230.48957825]
[142.34150696 212.25149536]
[136.22218323 198.55647278]
[123.96585846 190.09291077]
[125.40017700 174.33685303]
[119.28085327 160.64183044]
[113.16152954 146.94679260]
[107.04220581 133.25177002]
[100.92288208 119.55673218]
[86.88539124 114.27005768]
[73.25227356 120.52609253]
[59.61914825 126.78212738]
[46.11392975 133.30969238]
[32.74202728 140.10617065]
[19.37012291 146.90266418]
[5.99821806 153.69914246]
[-7.37368631 160.49562073]
[-9.68334579 175.83984375]
[-20.59496880 186.87234497]
[-35.91281509 189.35090637]
[-49.74685669 182.32247925]
[-56.77762222 168.48962402]
[-54.30164337 153.17135620]
[-43.27098083 142.25787354]
[-27.92715263 139.94561768]
[-14.17016888 147.12371826]
[-0.79826421 140.32723999]
[12.57363987 133.53076172]
[25.94554520 126.73427582]
[39.31744766 119.93778992]
[41.63542557 115.70391846]
[46.66528702 112.91017914]
[53.36311340 113.14900970]
[66.99623871 106.89297485]
[80.62935638 100.63694000]
[87.95539856 87.54766083]
[86.15881348 72.65563965]
[84.36222076 57.76362228]
[82.56563568 42.87160110]
[73.23114777 30.09749031]
[79.38837433 16.53512001]
[77.59178162 1.64310014]
[75.79518890 -13.24892044]
[73.99860382 -28.14093971]
[72.20201111 -43.03295898]
[70.40542603 -57.92498016]
[55.67295074 -61.41490173]
[43.04710007 -69.71910858]
[34.04112625 -81.81922150]
[29.72651291 -96.24330902]
[30.60550880 -111.24493408]
[36.55276108 -125.01463318]
[46.83275223 -135.89814758]
[60.19071960 -142.59515381]
[58.39413071 -157.48718262]
[56.59754181 -172.37919617]
[54.80095291 -187.27122498]
[53.00436401 -202.16323853]
[51.20777512 -217.05526733]
[49.41118240 -231.94728088]
[39.74212646 -240.53892517]
[38.57944107 -253.01803589]
[46.00419998 -262.61221313]
[44.50593948 -277.53720093]
[35.42891693 -290.49551392]
[41.85627747 -303.93197632]
[40.35801697 -318.85696411]
[38.85976028 -333.78195190]
[31.26158333 -348.93795776]
[43.72188568 -360.43478394]
[58.21877289 -351.64407349]
[53.78474426 -335.28021240]
[55.28300476 -320.35522461]
[56.78126144 -305.43023682]
[65.75112152 -293.53945923]
[59.43092728 -279.03546143]
[60.92918396 -264.11047363]
[71.93610382 -250.47309875]
[64.30320740 -233.74386597]
[66.09979248 -218.85185242]
[67.89638519 -203.95982361]
[69.69297028 -189.06781006]
[71.48956299 -174.17579651]
[73.28615570 -159.28376770]
[75.08274078 -144.39175415]
[89.65014648 -141.06369019]
[102.22352600 -132.93722534]
[111.27486420 -120.97697449]
[115.69634247 -106.61479950]
[114.93586731 -91.57845306]
[109.06594086 -77.68370056]
[98.77725220 -66.61505127]
[85.29744720 -59.72156906]
[87.09403229 -44.82955170]
[88.89062500 -29.93753052]
[90.68721008 -15.04550934]
[92.48380280 -0.15348934]
[94.28038788 14.73853111]
[103.48637390 26.44746590]
[97.45765686 41.07501221]
[99.25424194 55.96703339]
[101.05083466 70.85905457]
[102.84741974 85.75107574]
[114.69422913 94.95178986]
[129.56752014 93.00630188]
[144.44082642 91.06080627]
[157.12333679 80.66437531]
[172.37063599 86.70193481]
[174.49758911 102.96256256]
[161.31619263 112.71871948]
[146.38632202 105.93410492]
[131.51301575 107.87960052]
[116.63971710 109.82509613]
[115.73203278 111.67314911]
[114.61791229 113.43740845]
[120.73723602 127.13243866]
[126.85655975 140.82746887]
[132.97589111 154.52250671]
[139.09521484 168.21752930]
[151.78923035 177.66064453]
[149.91720581 192.43714905]
[156.03652954 206.13217163]
[167.81355286 211.48089600]
[172.61390686 223.05830383]
[168.35775757 234.41879272]
[174.20184326 248.23353577]
[180.04591370 262.04824829]
[185.88999939 275.86297607]
[192.28211975 289.43283081]
[199.21205139 302.73608398]
[206.14196777 316.03930664]
[211.57832336 319.95901489]
[213.83721924 325.25070190]
[213.07093811 330.01635742]
[219.46305847 343.58621216]
[225.85517883 357.15603638]
[232.24729919 370.72589111]
[238.63941956 384.29574585]
[250.85899353 396.04812622]
[242.94862366 411.04351807]
[226.34942627 407.59344482]
[225.06958008 390.68786621]
[218.67745972 377.11801147]
[212.28533936 363.54815674]
[205.89321899 349.97833252]
[199.50109863 336.40847778]
[192.83872986 322.96923828]
[185.90881348 309.66598511]
[178.97888184 296.36276245]
[176.28771973 295.40496826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 134]
[4 133]
[5 132]
[6 131]
[8 128]
[9 127]
[11 125]
[12 124]
[13 123]
[14 122]
[15 121]
[16 41]
[17 40]
[18 39]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[42 109]
[43 108]
[44 107]
[45 106]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
[52 99]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[69 83]
[70 82]
[72 80]
[73 79]
[74 78]
[110 119]
[111 118]
[112 117]
[135 155]
[136 154]
[137 153]
[140 152]
[141 151]
[142 150]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
