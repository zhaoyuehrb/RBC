%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGAGGGACCGAAGGUGCCGAGGGCUCCGCAUCGCAACCAUGGCGCUGCGCUGGGGCAUCGUGUCUGUCGGCCUCAUCUCCAGCGACUUCACAGCCGUGCUGCAGACGCUGCCUCGCUCUGAGCACCAGGUGGUGGCGG\
) } def
/len { sequence length } bind def

/coor [
[205.08557129 140.28619385]
[190.86160278 135.52397156]
[176.63761902 130.76176453]
[162.41365051 125.99955750]
[148.18968201 121.23734283]
[133.96571350 116.47513580]
[119.54372406 112.35128784]
[104.95233917 108.87398529]
[96.93390656 110.22217560]
[90.07638550 105.15325165]
[75.56610107 101.35173035]
[61.05581284 97.55021667]
[46.54552460 93.74869537]
[31.23499298 97.73594666]
[20.88413429 87.02571869]
[6.37384701 83.22419739]
[-2.80391240 84.07575989]
[-8.41552067 79.17297363]
[-22.83751297 75.04912567]
[-37.30455017 71.08618927]
[-51.81483841 67.28467560]
[-66.32512665 63.48315430]
[-77.88473511 69.32281494]
[-89.92938232 65.80092621]
[-96.11186981 55.34487534]
[-110.53386688 51.22102356]
[-124.95585632 47.09717178]
[-139.37785339 42.97332382]
[-153.79983521 38.84947205]
[-168.35157776 35.20983505]
[-183.01679993 32.05847549]
[-197.68203735 28.90711975]
[-212.79974365 33.57245255]
[-223.61743164 23.33395386]
[-238.28266907 20.18259430]
[-252.94789124 17.03123665]
[-265.17999268 26.77339554]
[-280.81106567 26.32200050]
[-292.46057129 15.89018822]
[-294.62802124 0.40353954]
[-286.28994751 -12.82562256]
[-271.38339233 -17.55089378]
[-256.94671631 -11.54114246]
[-249.79653931 2.36600733]
[-235.13130188 5.51736593]
[-220.46607971 8.66872406]
[-206.39732361 3.77798533]
[-194.53067017 14.24188995]
[-179.86544800 17.39324760]
[-165.20022583 20.54460716]
[-162.00437927 18.88192940]
[-157.82650757 18.73336029]
[-153.41026306 20.55114555]
[-149.67599487 24.42748070]
[-135.25399780 28.55133057]
[-120.83200836 32.67518234]
[-106.41001129 36.79903030]
[-91.98802185 40.92288208]
[-75.26184082 35.72743225]
[-62.52360535 48.97286606]
[-48.01331711 52.77438354]
[-33.50303268 56.57590485]
[-26.17625237 55.21730804]
[-18.71366310 60.62713242]
[-4.29167080 64.75098419]
[10.17536640 68.71391296]
[24.68565369 72.51543427]
[38.95831299 68.25626373]
[50.34704590 79.23840332]
[64.85733032 83.03992462]
[79.36762238 86.84144592]
[93.87790680 90.64296722]
[108.42964172 94.28260040]
[123.02102661 97.75990295]
[127.30634308 96.29844666]
[131.40879822 96.32580566]
[134.86914062 97.59072876]
[137.36231995 99.71514893]
[138.72792053 102.25116730]
[152.95188904 107.01337433]
[167.17587280 111.77558899]
[181.39984131 116.53779602]
[195.62380981 121.30001068]
[209.84777832 126.06221771]
[219.86712646 116.23859406]
[233.08428955 111.72850037]
[246.88700867 113.36277008]
[258.57339478 120.76380157]
[265.88073730 132.43080139]
[267.42361450 146.04380798]
[281.53793335 151.12173462]
[295.65228271 156.19966125]
[309.76663208 161.27758789]
[325.37127686 158.66886902]
[334.72778320 170.25787354]
[348.84213257 175.33580017]
[362.95648193 180.41372681]
[377.18045044 185.17593384]
[391.50698853 189.62007141]
[405.83352661 194.06419373]
[420.16006470 198.50833130]
[434.48660278 202.95246887]
[443.69317627 202.51058960]
[449.08081055 207.65849304]
[463.30477905 212.42070007]
[477.52874756 217.18290710]
[491.75274658 221.94512939]
[500.96688843 221.70848083]
[506.23849487 226.97512817]
[520.35284424 232.05305481]
[534.54290771 225.09481812]
[549.46978760 230.28749084]
[556.27758789 244.55035400]
[550.92742920 259.42147827]
[536.59338379 266.07812500]
[521.77960205 260.57101440]
[515.27490234 246.16738892]
[501.16055298 241.08946228]
[486.99050903 236.16909790]
[472.76654053 231.40689087]
[458.54257202 226.64466858]
[444.31860352 221.88246155]
[430.04248047 217.27900696]
[415.71594238 212.83486938]
[401.38940430 208.39073181]
[387.06286621 203.94660950]
[372.73632812 199.50247192]
[368.10354614 200.93640137]
[362.52145386 199.41729736]
[357.87857056 194.52806091]
[343.76422119 189.45013428]
[329.64987183 184.37222290]
[315.05477905 187.34413147]
[304.68872070 175.39192200]
[290.57437134 170.31399536]
[276.46002197 165.23608398]
[262.34567261 160.15815735]
[250.30133057 170.87474060]
[234.40919495 174.09634399]
[218.96502686 168.85603333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 74]
[8 73]
[10 72]
[11 71]
[12 70]
[13 69]
[15 67]
[16 66]
[18 65]
[19 64]
[20 62]
[21 61]
[22 60]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 50]
[31 49]
[32 48]
[34 46]
[35 45]
[36 44]
[90 137]
[91 136]
[92 135]
[93 134]
[95 132]
[96 131]
[97 130]
[98 127]
[99 126]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
[107 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
