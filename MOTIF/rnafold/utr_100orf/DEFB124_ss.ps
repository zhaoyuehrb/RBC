%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACACAGCUGCUUCUGUUCCUUGUGGCUCUCCUGGUUCUGGGUCAUGUGCCAUCAGGGAGAAGUGAAUUCAAACGGUGCUGGAAGGGUCAAGGGGCCU\
) } def
/len { sequence length } bind def

/coor [
[173.12614441 275.15563965]
[164.44172668 268.71871948]
[158.45126343 259.67398071]
[155.89483643 249.09097290]
[157.10456848 238.23197937]
[161.96171570 228.40153503]
[169.90779114 220.78962708]
[164.87503052 206.65910339]
[159.84228516 192.52859497]
[154.80953979 178.39808655]
[147.24229431 165.44676208]
[137.40336609 154.12440491]
[127.56443024 142.80206299]
[117.72550201 131.47972107]
[107.88657379 120.15737915]
[98.04764557 108.83503723]
[94.07166290 108.02763367]
[90.51045990 105.38419342]
[88.21442413 101.15248871]
[87.87997437 95.96830750]
[79.13886261 83.77844238]
[70.39774323 71.58856964]
[61.65663147 59.39870071]
[52.91551590 47.20883179]
[44.17440033 35.01896286]
[35.24476624 22.96650887]
[26.12877655 11.05438519]
[17.01278496 -0.85773969]
[7.89679480 -12.76986408]
[-10.99648666 -11.35660839]
[-26.91469383 -21.35808945]
[-33.73260880 -38.72021866]
[-28.94909477 -56.59749985]
[-39.13538742 -67.60837555]
[-49.32168198 -78.61925507]
[-65.12178040 -78.98307037]
[-75.97631073 -90.47022247]
[-75.44547272 -106.26559448]
[-63.84420013 -116.99806976]
[-48.05532074 -116.30026245]
[-37.44610214 -104.58616638]
[-38.31080246 -88.80554962]
[-28.12450981 -77.79467010]
[-17.93821716 -66.78379059]
[-7.01805735 -70.23356628]
[4.44552898 -69.26957703]
[14.72865295 -63.99718857]
[22.26990318 -55.17259979]
[25.90739822 -44.09465027]
[25.05768394 -32.41371918]
[19.80891991 -21.88585472]
[28.92490959 -9.97373009]
[38.04090118 1.93839455]
[47.15689087 13.85051918]
[53.83937836 17.31026459]
[56.36426926 26.27784920]
[65.10538483 38.46771622]
[73.84649658 50.65758514]
[82.58761597 62.84745407]
[91.32872772 75.03732300]
[100.06984711 87.22719574]
[109.36998749 98.99610901]
[119.20891571 110.31845093]
[129.04785156 121.64079285]
[138.88677979 132.96313477]
[148.72570801 144.28547668]
[158.56463623 155.60783386]
[158.43522644 140.60838318]
[164.66485596 126.96317291]
[176.08314514 117.23574829]
[190.54490662 113.25361633]
[205.33319092 115.76491547]
[217.66969299 124.29783630]
[225.23672485 137.24928284]
[226.61265564 152.18605042]
[221.53898621 166.30192566]
[210.96891785 176.94493103]
[196.88827515 182.11555481]
[181.94239807 180.84236145]
[168.94004822 173.36532593]
[173.97279358 187.49584961]
[179.00555420 201.62635803]
[184.03829956 215.75686646]
[203.31913757 220.13359070]
[216.17314148 234.97213745]
[217.73342896 254.40184021]
[207.55880737 270.86404419]
[214.30622864 284.26074219]
[221.05364990 297.65747070]
[227.80108643 311.05419922]
[234.54850769 324.45092773]
[248.54951477 332.98931885]
[247.88511658 349.37500000]
[233.23878479 356.75180054]
[219.67741394 347.53109741]
[221.15177917 331.19836426]
[214.40435791 317.80163574]
[207.65692139 304.40490723]
[200.90950012 291.00817871]
[194.16207886 277.61145020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 83]
[8 82]
[9 81]
[10 80]
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[16 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 54]
[27 53]
[28 52]
[29 51]
[33 44]
[34 43]
[35 42]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
