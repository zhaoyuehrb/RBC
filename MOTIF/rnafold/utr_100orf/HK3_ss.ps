%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCCUCAUAUUGCCAGACAAGAGCUCAGACCUGAGGAGAGUGACUAGCUUCUCUGUGUCCCAGGUGGCCACCUUCCACUGUGGAAGCUCAUGGACUCCAUUGGGUCUUCAGGGUUGCGGCAGGGGGAAGAAACCCUGAGUUGCUCUGAGGAGGGCUUGCCCGGGCCCUCAGACAGCUCAGAGCUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[93.00672150 354.28115845]
[88.86198425 368.84478760]
[80.21096039 381.27212524]
[67.99205780 390.21511841]
[53.53067780 394.70370483]
[38.39549637 394.25097656]
[24.22825813 388.90606689]
[12.56571865 379.24874878]
[4.67294502 366.32656860]
[1.40608597 351.54122925]
[3.11950541 336.49652100]
[9.62734509 322.82440186]
[20.22368240 312.00790405]
[33.75910568 305.22036743]
[48.76539612 303.19796753]
[51.67678070 288.48321533]
[54.58816528 273.76849365]
[57.49955368 259.05374146]
[60.41093826 244.33898926]
[49.11271667 234.63250732]
[44.15699387 220.47987366]
[46.96921921 205.64891052]
[56.89250946 194.14129639]
[71.33768463 189.11296082]
[74.24906921 174.39820862]
[77.16045380 159.68345642]
[80.07184601 144.96870422]
[82.98323059 130.25395203]
[69.42732239 99.89350891]
[87.20165253 76.87030792]
[75.80746460 67.11466980]
[64.41327667 57.35903549]
[53.01908875 47.60339737]
[41.62490082 37.84775925]
[30.23071289 28.09211922]
[18.83652496 18.33648109]
[7.44233751 8.58084297]
[-4.03087187 -1.08173800]
[-15.58234310 -10.65062141]
[-27.13381386 -20.21950340]
[-38.68528366 -29.78838730]
[-58.68332291 -32.24634933]
[-64.65105438 -50.62933731]
[-76.50786591 -59.81715393]
[-88.36467743 -69.00496674]
[-100.22148895 -78.19278717]
[-105.42387390 -78.89945984]
[-109.42736816 -81.29871368]
[-111.78669739 -84.64649963]
[-112.41828156 -88.12996674]
[-123.81246948 -97.88560486]
[-135.20664978 -107.64124298]
[-146.60084534 -117.39688110]
[-157.99502563 -127.15251923]
[-169.38922119 -136.90815735]
[-186.79507446 -135.23422241]
[-199.77572632 -146.44029236]
[-200.62576294 -163.22976685]
[-212.17723083 -172.79864502]
[-223.72871399 -182.36752319]
[-235.14038086 -178.97033691]
[-246.65563965 -181.48492432]
[-255.43183899 -189.17189026]
[-259.35992432 -200.02989197]
[-257.57077026 -211.31568909]
[-268.80465698 -221.25549316]
[-280.03854370 -231.19529724]
[-291.27243042 -241.13511658]
[-307.44134521 -243.87330627]
[-312.90005493 -259.33728027]
[-302.03311157 -271.61901855]
[-286.01947021 -268.08413696]
[-281.33261108 -252.36900330]
[-270.09872437 -242.42918396]
[-258.86483765 -232.48937988]
[-247.63095093 -222.54957581]
[-229.47135925 -224.77301025]
[-215.19889832 -212.82368469]
[-214.15982056 -193.91899109]
[-202.60835266 -184.35011292]
[-191.05688477 -174.78123474]
[-178.51367188 -177.76856995]
[-166.36045837 -172.90910339]
[-159.12260437 -161.77076721]
[-159.63357544 -148.30233765]
[-148.23939514 -138.54670715]
[-136.84519958 -128.79106140]
[-125.45101929 -119.03543091]
[-114.05683136 -109.27979279]
[-102.66264343 -99.52415466]
[-91.03367615 -90.04959869]
[-79.17685699 -80.86178589]
[-67.32004547 -71.67396545]
[-55.46323395 -62.48614883]
[-45.46425247 -64.67984772]
[-35.70656967 -60.92124176]
[-29.50760269 -52.22891617]
[-29.11640167 -41.33985901]
[-17.56492996 -31.77097511]
[-6.01345968 -22.20209122]
[5.53801107 -12.63320827]
[12.70553017 -10.78452301]
[17.19797516 -2.81334543]
[28.59216309 6.94229317]
[39.98635101 16.69793129]
[51.38053894 26.45356941]
[62.77472687 36.20920944]
[74.16891479 45.96484756]
[85.56310272 55.72048569]
[96.95729065 65.47612000]
[111.83029175 67.42392731]
[125.35237885 60.93138885]
[138.87446594 54.43885040]
[152.39656067 47.94631195]
[165.91865540 41.45377350]
[179.44075012 34.96123505]
[192.96282959 28.46869850]
[202.05433655 15.52052307]
[216.87660217 16.98666763]
[230.39869690 10.49412918]
[235.40707397 -1.40271401]
[246.81558228 -6.52840471]
[258.27664185 -2.62964058]
[271.90261841 -8.90122032]
[285.52859497 -15.17280006]
[299.15460205 -21.44437981]
[312.78057861 -27.71595955]
[315.68490601 -42.95880890]
[327.01712036 -53.55883789]
[342.41973877 -55.44012070]
[355.97012329 -47.87926865]
[362.45788574 -33.78358078]
[359.38836670 -18.57313538]
[347.94183350 -8.09666157]
[332.51971436 -6.38257694]
[319.05215454 -14.08998108]
[305.42617798 -7.81840134]
[291.80020142 -1.54682183]
[278.17422485 4.72475815]
[264.54821777 10.99633789]
[255.20730591 25.84516335]
[236.89123535 24.01622009]
[223.36914062 30.50875854]
[215.24482727 42.99254608]
[199.45536804 41.99078751]
[185.93328857 48.48332596]
[172.41119385 54.97586441]
[158.88909912 61.46840286]
[145.36700439 67.96094513]
[131.84492493 74.45348358]
[118.32283020 80.94602203]
[129.44833374 91.78443146]
[133.53723145 108.95134735]
[146.10174561 117.14481354]
[158.66627502 125.33827209]
[171.23078918 133.53173828]
[183.79531860 141.72518921]
[196.35983276 149.91865540]
[208.92436218 158.11212158]
[221.48887634 166.30557251]
[237.88432312 166.65417480]
[245.54193115 181.15565491]
[236.58421326 194.89215088]
[220.22610474 193.73272705]
[213.29542542 178.87010193]
[200.73089600 170.67663574]
[188.16638184 162.48318481]
[175.60185242 154.28971863]
[163.03733826 146.09625244]
[150.47280884 137.90280151]
[137.90829468 129.70933533]
[125.34377289 121.51586914]
[118.43231964 124.42823792]
[124.25682831 138.25123596]
[110.43373871 144.07551575]
[104.60942841 130.25297546]
[97.69797516 133.16534424]
[94.78659058 147.88009644]
[91.87520599 162.59484863]
[88.96382141 177.30958557]
[86.05242920 192.02433777]
[97.49444580 202.17459106]
[102.28794861 216.59399414]
[99.24061584 231.37844849]
[89.26891327 242.57760620]
[75.12568665 247.25036621]
[72.21430206 261.96511841]
[69.30291748 276.67987061]
[66.39153290 291.39462280]
[63.48014450 306.10937500]
[76.58567810 313.69381714]
[86.51656342 325.12429810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 190]
[16 189]
[17 188]
[18 187]
[19 186]
[24 181]
[25 180]
[26 179]
[27 178]
[28 177]
[30 110]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[37 103]
[38 101]
[39 100]
[40 99]
[41 98]
[43 94]
[44 93]
[45 92]
[46 91]
[50 90]
[51 89]
[52 88]
[53 87]
[54 86]
[55 85]
[58 81]
[59 80]
[60 79]
[65 76]
[66 75]
[67 74]
[68 73]
[111 151]
[112 150]
[113 149]
[114 148]
[115 147]
[116 146]
[117 145]
[119 143]
[120 142]
[123 140]
[124 139]
[125 138]
[126 137]
[127 136]
[153 172]
[154 171]
[155 170]
[156 169]
[157 168]
[158 167]
[159 166]
[160 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
