%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGGAGCUGCCGCGGAAAGCUCAACCAGGAACCCGGAAAUGCACAAGCCUCUUGAUGCAUAAAAACAGCUGGGCUCCCUUGGAGACAGAGCGCCAUGGGAAACCGGGUCUGCUGCGGAGGAAGCUGGAGCUGCCCAUCAACUUUCCAGAAGAAAAAGAAAACAGGAAGCCAAACAAGACGGACACUGAAGCCGC\
) } def
/len { sequence length } bind def

/coor [
[0.30733097 170.63734436]
[-8.62515640 182.68768311]
[-17.55764389 194.73802185]
[-26.49013138 206.78836060]
[-35.42261887 218.83869934]
[-44.35510635 230.88903809]
[-41.46525955 248.13650513]
[-51.73656082 261.87081909]
[-68.42723083 263.89202881]
[-77.16641998 276.08328247]
[-85.90560913 288.27450562]
[-81.57980347 307.88412476]
[-92.88047028 324.11355591]
[-112.16895294 326.77633667]
[-120.31511688 339.37158203]
[-118.36982727 355.29626465]
[-129.70974731 366.64462280]
[-145.63586426 364.71121216]
[-153.93103027 350.97912598]
[-148.23190308 335.98248291]
[-132.91035461 331.22540283]
[-124.76419067 318.63018799]
[-129.54898071 309.52609253]
[-130.12144470 299.17620850]
[-126.31094360 289.44946289]
[-118.74436951 282.13018799]
[-108.74404144 278.59091187]
[-98.09685516 279.53533936]
[-89.35766602 267.34408569]
[-80.61847687 255.15283203]
[-84.47396088 242.85089111]
[-80.47691345 230.38961792]
[-69.87438965 222.39094543]
[-56.40544510 221.95655823]
[-47.47295761 209.90620422]
[-38.54047012 197.85586548]
[-29.60798264 185.80552673]
[-20.67549515 173.75518799]
[-11.74300766 161.70484924]
[-18.94104195 150.94337463]
[-22.41459084 138.47119141]
[-37.37598419 137.39567566]
[-52.33737564 136.32017517]
[-67.29876709 135.24465942]
[-82.26016235 134.16914368]
[-97.22965240 133.21296692]
[-112.20629883 132.37617493]
[-127.18293762 131.53938293]
[-142.15957642 130.70259094]
[-158.31134033 135.85591125]
[-167.73452759 121.76194000]
[-156.79995728 108.80541992]
[-141.32278442 115.72595215]
[-126.34614563 116.56274414]
[-111.36950684 117.39953613]
[-96.39286041 118.23632812]
[-89.53112030 115.46736145]
[-81.18465424 119.20775604]
[-66.22325897 120.28326416]
[-51.26186752 121.35877228]
[-36.30047226 122.43428802]
[-21.33908081 123.50979614]
[-17.14882660 113.17590332]
[-10.31123924 104.33772278]
[-1.32371259 97.65866852]
[9.15441036 93.64433289]
[20.35020447 92.60425568]
[31.43417549 94.62808228]
[41.58171463 99.57798004]
[50.03444290 107.09796906]
[63.06451035 99.66712952]
[76.09457397 92.23628998]
[81.69641876 78.32157135]
[77.44956970 63.93531799]
[63.84873581 56.34222412]
[59.74676514 41.69202042]
[67.06943512 28.77249718]
[62.82258987 14.38624382]
[58.57574081 -0.00000864]
[54.32889175 -14.38626194]
[43.00102234 -25.43116951]
[46.81835556 -39.82829666]
[42.57150269 -54.21455002]
[38.32465363 -68.60079956]
[23.37487221 -72.12210083]
[12.19963360 -82.65821075]
[7.80502224 -97.37496948]
[11.37316704 -112.31364441]
[21.94425392 -123.45580292]
[36.67471313 -127.80426025]
[51.60212708 -124.18930817]
[62.71109772 -113.58335114]
[67.01335907 -98.83933258]
[63.35163879 -83.92331696]
[52.71090698 -72.84764862]
[56.95775604 -58.46139908]
[61.20460510 -44.07514572]
[72.22871399 -34.05923843]
[68.71514130 -18.63311005]
[72.96199036 -4.24685764]
[77.20883942 10.13939476]
[81.45568848 24.52564812]
[94.62071228 31.39716339]
[99.13256073 45.92637253]
[91.83582306 59.68846893]
[96.08267212 74.07472229]
[110.68343353 77.51240540]
[120.90271759 66.53213501]
[131.12199402 55.55186462]
[141.34127808 44.57159424]
[141.66108704 31.66983032]
[150.40849304 22.73385048]
[162.49946594 22.17695427]
[172.89254761 11.36104202]
[183.28562927 0.54512948]
[187.26831055 -14.76659107]
[201.66574097 -18.58277130]
[212.05882263 -29.39868355]
[222.45190430 -40.21459579]
[221.88633728 -56.00876236]
[232.71557617 -67.51975250]
[248.51484680 -67.91829681]
[259.91070557 -56.96795273]
[260.14218140 -41.16535950]
[249.07196045 -29.88591576]
[233.26780701 -29.82151794]
[222.87472534 -19.00560570]
[212.48165894 -8.18969440]
[209.24235535 6.34840012]
[194.10153198 10.93820667]
[183.70846558 21.75411797]
[173.31538391 32.57003021]
[170.04264832 49.80614471]
[152.32154846 54.79087448]
[142.10226440 65.77114105]
[131.88298035 76.75141144]
[121.66370392 87.73168182]
[124.40906525 94.71115112]
[138.36801147 89.22043610]
[152.32702637 83.72993469]
[157.81732178 97.68904877]
[143.85871887 103.17937469]
[129.89978027 108.67009735]
[132.64514160 115.64956665]
[147.60653687 116.72507477]
[162.56793213 117.80058289]
[177.52932739 118.87609863]
[190.55006409 109.50379944]
[205.95634460 113.97884369]
[211.92979431 128.86834717]
[203.88807678 142.75036621]
[188.00012207 144.97579956]
[176.45381165 133.83749390]
[161.49241638 132.76197815]
[146.53102112 131.68646240]
[131.56962585 130.61096191]
[128.01110840 137.21299744]
[141.21517944 144.33004761]
[155.97227478 147.01850891]
[157.97557068 161.88414001]
[144.45655823 168.38308716]
[134.09811401 157.53411865]
[120.89405060 150.41706848]
[117.33551788 157.01910400]
[126.45903015 168.92546082]
[135.58255005 180.83183289]
[149.30403137 179.45639038]
[161.81289673 184.99935913]
[169.88249207 195.91387939]
[171.48933411 209.28306580]
[166.31964111 221.59918213]
[175.25212097 233.64952087]
[190.63800049 232.51889038]
[204.18176270 239.90603638]
[211.56164551 253.45376587]
[210.42276001 268.83901978]
[201.12852478 281.15246582]
[186.64466858 286.46487427]
[171.59297180 283.08111572]
[160.77636719 272.08090210]
[157.64637756 256.97439575]
[163.20178223 242.58201599]
[154.26930237 230.53167725]
[137.87312317 231.21670532]
[124.15975189 221.90394592]
[118.64068604 206.09701538]
[123.67617798 189.95533752]
[114.55266571 178.04898071]
[105.42915344 166.14260864]
[76.73589325 134.76446533]
[83.52541351 105.26634979]
[70.49535370 112.69719696]
[57.46528625 120.12803650]
[59.28761673 139.46412659]
[52.13813782 157.45344543]
[37.63589859 170.17936707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[9 30]
[10 29]
[11 28]
[14 22]
[15 21]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 56]
[47 55]
[48 54]
[49 53]
[70 193]
[71 192]
[72 191]
[73 106]
[74 105]
[77 102]
[78 101]
[79 100]
[80 99]
[82 97]
[83 96]
[84 95]
[107 137]
[108 136]
[109 135]
[110 134]
[113 132]
[114 131]
[115 130]
[117 128]
[118 127]
[119 126]
[144 156]
[145 155]
[146 154]
[147 153]
[164 189]
[165 188]
[166 187]
[171 183]
[172 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
