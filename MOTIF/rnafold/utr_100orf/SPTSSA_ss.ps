%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGCGGGCGGCCGGCCGGACAGACUGACGUGUGAGCUGCAUCGCGGGAGGCGCAUGGCGGGGAUGGCGCUGGCGCGGGCCUGGAAGCAGAUGUCCUGGUUCUACUACCAGUACCUGCUGGUCACGGCGCUCUACAUGCUGGAGCCCUGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[139.70690918 187.83093262]
[131.43624878 175.31709290]
[123.16558838 162.80325317]
[114.89493561 150.28941345]
[83.35759735 112.59955597]
[70.52087402 120.35962677]
[57.68415833 128.11968994]
[44.84743881 135.87976074]
[32.08950424 143.76869202]
[19.41165352 151.78567505]
[6.73380327 159.80265808]
[-5.94404793 167.81964111]
[-18.62189865 175.83663940]
[-22.20874023 190.99487305]
[-35.18008804 198.94464111]
[-49.60905075 195.43171692]
[-62.28690338 203.44871521]
[-74.88339233 211.59294128]
[-87.39723206 219.86360168]
[-86.38980865 235.18942261]
[-93.19464874 248.95857239]
[-105.98129272 257.46725464]
[-121.31018829 258.42663574]
[-135.05795288 251.57865906]
[-143.52648926 238.76539612]
[-144.43782043 223.43356323]
[-137.54679871 209.70733643]
[-124.70706177 201.27900696]
[-109.37244415 200.41574097]
[-95.66788483 207.34976196]
[-83.15404510 199.07910156]
[-79.28568268 192.73092651]
[-70.30389404 190.77085876]
[-57.62604141 182.75387573]
[-54.61420059 168.21205139]
[-41.87126160 159.90109253]
[-26.63888741 163.15878296]
[-13.96103573 155.14179993]
[-1.28318429 147.12481689]
[11.39466667 139.10781860]
[24.07251740 131.09083557]
[28.06792831 124.82183838]
[37.08737183 123.04303741]
[49.92409134 115.28297424]
[62.76080704 107.52290344]
[75.59752655 99.76284027]
[79.18726349 85.19870758]
[71.42719269 72.36199188]
[56.08918381 70.92964935]
[44.66908264 60.85816956]
[41.40780258 46.16708374]
[47.35143661 32.53582382]
[39.59136963 19.69910622]
[31.83130455 6.86238670]
[24.07123566 -5.97433233]
[11.72411156 -9.83170223]
[5.53411436 -20.73060799]
[8.35957050 -32.52948380]
[0.85957062 -45.51986694]
[-6.64042950 -58.51024628]
[-14.14042950 -71.50062561]
[-29.57082939 -74.03770447]
[-39.72113419 -85.93330383]
[-39.79867554 -101.57069397]
[-29.76684761 -113.56637573]
[-14.36236572 -116.25635529]
[-0.85875982 -108.37050629]
[4.36798191 -93.63228607]
[-1.15004826 -79.00062561]
[6.34995174 -66.01024628]
[13.84995174 -53.01986694]
[21.34995079 -40.02948380]
[36.98895264 -32.12183380]
[36.90795517 -13.73439980]
[44.66802216 -0.89768040]
[52.42808914 11.93903828]
[60.18815613 24.77575684]
[75.02017975 25.84769058]
[86.51290131 35.56270218]
[90.12356567 50.35514832]
[84.26391602 64.60192871]
[92.02397919 77.43864441]
[107.00497437 78.19351196]
[116.01610565 66.20187378]
[125.02724457 54.21023178]
[134.03837585 42.21858978]
[143.04951477 30.22694969]
[145.15432739 14.54637814]
[158.98567200 9.01977634]
[167.99679565 -2.97186494]
[177.00793457 -14.96350670]
[176.18652344 -30.98551750]
[188.29589844 -41.50894928]
[204.04678345 -38.46112442]
[211.35644531 -24.18007278]
[204.61753845 -9.62099743]
[188.99957275 -5.95237255]
[179.98844910 6.03926897]
[170.97731018 18.03091049]
[169.51702881 32.85375977]
[155.04115295 39.23808289]
[146.03001404 51.22972488]
[137.01889038 63.22136688]
[128.00775146 75.21300507]
[118.99662018 87.20465088]
[122.54872894 93.81013489]
[137.54188538 94.26315308]
[129.65295410 107.02111816]
[133.20507812 113.62660217]
[148.17770386 112.72092438]
[163.15034485 111.81524658]
[178.12297058 110.90956879]
[193.09561157 110.00389099]
[206.47090149 100.51529694]
[221.26104736 107.59934998]
[222.25120544 123.96857452]
[208.42279053 132.78372192]
[194.00128174 124.97652435]
[179.02865601 125.88220215]
[164.05601501 126.78787994]
[149.08338928 127.69355774]
[134.11074829 128.59924316]
[127.40877533 142.01875305]
[135.67942810 154.53259277]
[143.95008850 167.04644775]
[152.22074890 179.56028748]
[161.47152710 191.36804199]
[171.64244080 202.39312744]
[179.81088257 206.61105347]
[181.90440369 213.74412537]
[191.85124207 224.97178650]
[201.79808044 236.19944763]
[211.74493408 247.42710876]
[221.69177246 258.65478516]
[231.63861084 269.88244629]
[247.50112915 272.28244019]
[255.38969421 286.25204468]
[249.25288391 301.07498169]
[233.79832458 305.38034058]
[220.88143921 295.86541748]
[220.41094971 279.82928467]
[210.46411133 268.60162354]
[200.51727295 257.37396240]
[190.57041931 246.14630127]
[180.62358093 234.91864014]
[170.67674255 223.69097900]
[160.61735535 212.56404114]
[150.44644165 201.53895569]
[150.36836243 216.53874207]
[141.61431885 228.71934509]
[127.42216492 233.57554626]
[113.04109192 229.31120300]
[103.79017639 217.50355530]
[103.09102631 202.51985168]
[111.20223236 189.90206909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[5 46]
[6 45]
[7 44]
[8 43]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[16 34]
[17 33]
[18 31]
[19 30]
[47 82]
[48 81]
[52 77]
[53 76]
[54 75]
[55 74]
[58 72]
[59 71]
[60 70]
[61 69]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[89 99]
[90 98]
[91 97]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
[127 148]
[128 147]
[130 146]
[131 145]
[132 144]
[133 143]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
