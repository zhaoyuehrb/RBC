%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGCCCUGACCCACCGGCGGCUGCGGCGGAGCCGCGCCGGCGCCCCCCAUGCGCCAGACGGCAGGACGGCGGCGUCGGGGGGCGCCAUGGCCUCGGCGGCGGCGGGCGAAGCGGAGGAAACCACCCGGUUGCGCAAGCCGCGCUUCUCAUUCGAAGAGAACCAGAUCCUGAUCCGCGAGGUGCGCG\
) } def
/len { sequence length } bind def

/coor [
[-148.26251221 89.42582703]
[-155.82838440 86.50605774]
[-161.54888916 80.89124298]
[-164.53814697 73.55536652]
[-179.28544617 70.81361389]
[-194.03274536 68.07186890]
[-208.80244446 65.45343018]
[-223.59349060 62.95849228]
[-238.38455200 60.46355057]
[-253.17559814 57.96861267]
[-245.49948120 70.85571289]
[-249.03399658 85.43333435]
[-261.75997925 93.37371826]
[-276.40740967 90.14074707]
[-284.60870361 77.58132935]
[-281.67864990 62.87028503]
[-269.29104614 54.41159821]
[-283.75808716 50.44866562]
[-298.22512817 46.48573685]
[-313.03649902 48.85700607]
[-325.54324341 57.13838577]
[-338.04998779 65.41976166]
[-343.49130249 72.78200531]
[-350.83563232 73.73298645]
[-363.47903442 81.80422211]
[-376.12240601 89.87545776]
[-388.76580811 97.94669342]
[-401.40917969 106.01792908]
[-411.50643921 119.63710022]
[-427.38854980 113.70461273]
[-426.08453369 96.80088806]
[-409.48040771 93.37454224]
[-396.83703613 85.30330658]
[-384.19363403 77.23207092]
[-371.55026245 69.16083527]
[-358.90689087 61.08960342]
[-346.33135986 52.91301346]
[-333.82461548 44.63163376]
[-321.31787109 36.35025787]
[-321.56851196 21.35235214]
[-334.34500122 13.49351215]
[-347.12149048 5.63467216]
[-359.89797974 -2.22416735]
[-372.67446899 -10.08300686]
[-385.45095825 -17.94184685]
[-398.22744751 -25.80068588]
[-411.00393677 -33.65952682]
[-423.78042603 -41.51836777]
[-436.55691528 -49.37720490]
[-449.27493286 -47.15219116]
[-459.75946045 -53.97693253]
[-462.67837524 -65.72888184]
[-475.32174683 -73.80011749]
[-487.96514893 -81.87135315]
[-500.60852051 -89.94258881]
[-513.25189209 -98.01382446]
[-525.99475098 -93.61434937]
[-538.75677490 -97.30958557]
[-546.93420410 -107.53295135]
[-547.71228027 -120.40625763]
[-560.21899414 -128.68763733]
[-575.65472412 -125.29442596]
[-588.92358398 -133.88003540]
[-592.15344238 -149.35076904]
[-583.42803955 -162.52812195]
[-567.92401123 -165.59420776]
[-554.83959961 -156.72994995]
[-551.93762207 -141.19438171]
[-539.43090820 -132.91300964]
[-523.11840820 -136.96762085]
[-508.63027954 -127.79741669]
[-505.18066406 -110.65720367]
[-492.53729248 -102.58596802]
[-479.89389038 -94.51473236]
[-467.25051880 -86.44349670]
[-454.60714722 -78.37226105]
[-437.06747437 -78.54564667]
[-428.69805908 -62.15369415]
[-415.92156982 -54.29485321]
[-403.14508057 -46.43601227]
[-390.36862183 -38.57717514]
[-377.59213257 -30.71833420]
[-364.81564331 -22.85949516]
[-352.03915405 -15.00065517]
[-339.26266479 -7.14181519]
[-326.48617554 0.71702433]
[-313.70968628 8.57586384]
[-305.13726807 11.71774292]
[-298.69686890 17.39764404]
[-295.01596069 24.55164528]
[-294.26217651 32.01869965]
[-279.79513550 35.98162842]
[-265.32809448 39.94456100]
[-250.68066406 43.17755890]
[-235.88960266 45.67249680]
[-221.09855652 48.16743851]
[-206.30749512 50.66238022]
[-199.17466736 48.67074585]
[-191.29100037 53.32456970]
[-176.54370117 56.06631851]
[-161.79640198 58.80806732]
[-142.22476196 49.58311081]
[-125.32545471 64.28403473]
[-110.42795563 66.03464508]
[-95.53046417 67.78526306]
[-81.98716736 61.58620453]
[-69.18430328 70.88121796]
[-54.28680420 72.63182831]
[-44.33835602 61.57894135]
[-29.61497688 58.46669388]
[-15.71972466 64.69367981]
[-8.06704235 78.06314850]
[6.83045292 79.81375885]
[21.72794724 81.56437683]
[36.62544250 83.31498718]
[51.52293777 85.06560516]
[66.45962524 86.44228363]
[81.42613220 87.44417572]
[96.39263153 88.44606781]
[111.01255798 85.09079742]
[124.04451752 77.66327667]
[137.07647705 70.23574829]
[150.10842896 62.80822372]
[157.91539001 48.38659668]
[174.31356812 48.20735550]
[182.43389893 62.45488739]
[173.92289734 76.47254944]
[157.53594971 75.84017944]
[144.50399780 83.26770782]
[131.47204590 90.69522858]
[118.44008636 98.12275696]
[123.00376129 112.41165924]
[137.92843628 110.91022491]
[152.85310364 109.40879059]
[167.77777100 107.90735626]
[179.00198364 96.44451904]
[194.94689941 98.21628571]
[203.38093567 111.86349487]
[197.83422852 126.91719055]
[182.56173706 131.82945251]
[169.27920532 122.83202362]
[154.35453796 124.33345795]
[139.42987061 125.83489227]
[124.50519562 127.33632660]
[122.25775909 142.16700745]
[136.06750488 148.02284241]
[149.87725830 153.87867737]
[163.68701172 159.73452759]
[177.49674988 165.59036255]
[191.34417725 158.32516479]
[206.61077881 161.71115112]
[216.08815002 174.14953613]
[215.30134583 189.76731873]
[204.62188721 201.19024658]
[189.09228516 203.02476501]
[176.04515076 194.40466309]
[171.64091492 179.40011597]
[157.83116150 173.54426575]
[144.02142334 167.68843079]
[130.21166992 161.83259583]
[116.40192413 155.97676086]
[104.05715942 149.39807129]
[95.06980133 140.49954224]
[89.79521179 130.36369324]
[88.29187012 120.10630035]
[90.32546997 110.80186462]
[95.39074707 103.41256714]
[80.42424011 102.41068268]
[65.45774078 101.40879059]
[60.73898697 103.73194122]
[56.07016754 103.97482300]
[52.23965073 102.50815582]
[49.77232361 99.96309662]
[34.87482834 98.21248627]
[19.97733307 96.46186829]
[5.07983875 94.71125031]
[-9.81765652 92.96063995]
[-20.36118126 104.19185638]
[-35.32144928 107.02801514]
[-48.92226410 100.58737183]
[-56.03741837 87.52932739]
[-70.93491364 85.77870941]
[-85.54378510 91.85255432]
[-97.28107452 82.68275452]
[-112.17857361 80.93214417]
[-127.07606506 79.18152618]
[-132.58325195 85.51369476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 101]
[5 100]
[6 99]
[7 97]
[8 96]
[9 95]
[10 94]
[17 93]
[18 92]
[19 91]
[20 39]
[21 38]
[22 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[48 79]
[49 78]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[60 69]
[61 68]
[103 186]
[104 185]
[105 184]
[107 182]
[108 181]
[112 177]
[113 176]
[114 175]
[115 174]
[116 173]
[117 169]
[118 168]
[119 167]
[120 131]
[121 130]
[122 129]
[123 128]
[132 144]
[133 143]
[134 142]
[135 141]
[145 161]
[146 160]
[147 159]
[148 158]
[149 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
