%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCUGCGUUCCCAGCGCGCGGCCCGAAUGGCGGCCGACAAGGGCCCGGCGGCUGGACCUCGGUCGCGAGCUGCCAUGGCCCAGUGGAGGAAGAAGAAAGGGCUCCGGAAGCGCCGAGGCGCGGCCU\
) } def
/len { sequence length } bind def

/coor [
[147.61372375 186.70458984]
[135.85379028 177.39309692]
[124.09384918 168.08160400]
[112.33391571 158.77011108]
[100.57397461 149.45863342]
[85.70832825 151.46177673]
[76.83255005 163.55395508]
[67.95677185 175.64611816]
[59.08098984 187.73828125]
[50.20520782 199.83045959]
[41.32942581 211.92262268]
[36.83133698 228.26898193]
[19.87860298 228.47180176]
[14.99072361 212.23773193]
[29.23725891 203.04684448]
[38.11304092 190.95466614]
[46.98881912 178.86250305]
[55.86460114 166.77033997]
[64.74037933 154.67817688]
[73.61616516 142.58599854]
[65.95854187 129.68791199]
[51.09289932 131.69107056]
[36.22725677 133.69421387]
[21.36161232 135.69737244]
[6.49596786 137.70053101]
[-0.74777514 151.42306519]
[-14.68880272 158.23681641]
[-29.96650696 155.52178955]
[-40.70629501 144.32194519]
[-42.77850342 128.94386292]
[-35.38632202 115.30071259]
[-21.37220001 108.63858795]
[-6.12484884 111.51919556]
[4.49281216 122.83488464]
[19.35845566 120.83173370]
[34.22409821 118.82857513]
[49.08974457 116.82541656]
[63.95538712 114.82226562]
[63.03039169 102.37927246]
[66.07592773 90.91719818]
[72.37306976 81.60305786]
[80.89421844 75.25234222]
[90.44966888 72.26051331]
[89.35474396 57.30052948]
[88.25981140 42.34054565]
[87.16487885 27.38056183]
[86.06995392 12.42057705]
[75.36461639 -2.50295901]
[83.49253082 -18.00631142]
[82.03363800 -32.93519592]
[80.57473755 -47.86408234]
[79.11584473 -62.79296875]
[77.65694427 -77.72185516]
[76.19805145 -92.65074158]
[74.55747986 -107.56075287]
[72.73548889 -122.44968414]
[70.73233032 -137.31533813]
[68.54830933 -152.15548706]
[66.36429596 -166.99563599]
[55.76559830 -179.50961304]
[61.55759811 -194.85186768]
[77.78199005 -197.23959351]
[87.74849701 -184.21652222]
[81.20444489 -169.17965698]
[83.38846588 -154.33949280]
[85.57247925 -139.49934387]
[89.70153046 -133.27563477]
[87.62442017 -124.27168274]
[89.44641876 -109.38275146]
[93.42268372 -103.06033325]
[91.12693787 -94.10963440]
[92.58583069 -79.18074799]
[94.04473114 -64.25186157]
[95.50362396 -49.32297897]
[96.96252441 -34.39409256]
[98.42141724 -19.46520805]
[107.60102081 -11.48830509]
[108.88395691 1.00947917]
[101.02993774 11.32564735]
[102.12486267 26.28563118]
[103.21979523 41.24561691]
[104.31472778 56.20560074]
[105.40965271 71.16558075]
[124.06660461 79.29652405]
[134.13385010 98.78784180]
[129.34062195 121.81916809]
[109.88546753 137.69868469]
[121.64540100 147.01017761]
[133.40533447 156.32167053]
[145.16528320 165.63316345]
[156.92521667 174.94465637]
[155.19869995 160.04434204]
[161.44941711 146.40878296]
[173.86503601 137.99140930]
[188.84584045 137.23274231]
[202.04833984 144.35272217]
[209.64462280 157.28703308]
[209.43226624 172.28553772]
[201.47283936 184.99960327]
[188.07406616 191.74296570]
[173.12304688 190.56132507]
[182.85781860 201.97334290]
[192.59259033 213.38536072]
[202.32737732 224.79737854]
[212.06214905 236.20939636]
[215.00050354 221.50000000]
[227.35308838 212.99038696]
[242.14399719 215.48620605]
[251.02030945 227.57797241]
[248.96929932 242.43708801]
[237.14921570 251.67211914]
[222.23370361 250.06690979]
[230.20314026 262.77468872]
[238.17257690 275.48251343]
[246.14199829 288.19030762]
[260.87942505 295.38336182]
[261.74868774 311.75946045]
[247.85552979 320.47225952]
[233.49208069 312.55877686]
[233.43420410 296.15972900]
[225.46476746 283.45193481]
[217.49534607 270.74414062]
[209.52590942 258.03634644]
[200.65013123 245.94416809]
[190.91535950 234.53215027]
[181.18057251 223.12013245]
[171.44580078 211.70811462]
[161.71102905 200.29609680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[5 87]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 69]
[56 68]
[57 66]
[58 65]
[59 64]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
