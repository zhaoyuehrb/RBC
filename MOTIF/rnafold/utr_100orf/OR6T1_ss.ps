%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACCCUGAAAACUGGACUCAGGUAACAAGCUUUGUCCUUCUGGGUUUCCCCAGUAGCCACCUCAUACAGUUCCUGGUGUUCCUGGGGUUAAUGGUGA\
) } def
/len { sequence length } bind def

/coor [
[71.68284607 128.35453796]
[79.48653412 115.54428101]
[91.72954559 106.87830353]
[76.77487946 105.71305084]
[61.82020569 104.54779053]
[46.86553574 103.38253021]
[31.91086578 102.21727753]
[16.95619392 101.05201721]
[2.59666228 107.69388580]
[-9.49108505 98.99126434]
[-24.44575500 97.82600403]
[-39.40042496 96.66074371]
[-43.59984970 98.89577484]
[-47.85470581 99.49433899]
[-51.60714722 98.66123199]
[-54.43547440 96.77190399]
[-56.10057449 94.30780792]
[-70.79503632 91.29570007]
[-85.48949432 88.28359985]
[-100.18395996 85.27149200]
[-111.47222900 91.74697113]
[-123.73715973 88.81508636]
[-130.43328857 78.60823059]
[-145.02696228 75.14057922]
[-159.62063599 71.67293549]
[-174.21432495 68.20529175]
[-188.57284546 75.36155701]
[-203.05889893 68.46708679]
[-206.56002808 52.81072235]
[-196.39044189 40.40269089]
[-180.35139465 40.76137161]
[-170.74667358 53.61161423]
[-156.15299988 57.07925797]
[-141.55931091 60.54690552]
[-126.96563721 64.01454926]
[-110.54598236 58.03989792]
[-97.17185211 70.57702637]
[-82.47739410 73.58913422]
[-67.78292847 76.60124207]
[-53.08846664 79.61334991]
[-38.23516846 81.70607758]
[-23.28049850 82.87133789]
[-8.32582760 84.03659058]
[4.96404648 77.31137848]
[18.12145233 86.09734344]
[33.07612228 87.26260376]
[48.03079224 88.42786407]
[62.98546600 89.59311676]
[77.94013214 90.75837708]
[92.89480591 91.92363739]
[107.77885437 90.06215668]
[121.98592377 85.24976349]
[136.19299316 80.43737793]
[150.40007019 75.62499237]
[164.60714722 70.81260681]
[178.81422424 66.00022125]
[189.40257263 54.24447632]
[203.93937683 57.48953247]
[218.14645386 52.67714691]
[232.35353088 47.86476135]
[239.63117981 42.04853821]
[247.07788086 43.13110733]
[261.42776489 38.76288986]
[275.77761841 34.39466858]
[277.60995483 19.27638626]
[285.43859863 6.21376228]
[297.90719604 -2.53002501]
[312.85549927 -5.44006157]
[327.69360352 -2.01216650]
[339.85073853 7.15975714]
[347.22058105 20.48661804]
[348.52627563 35.65945816]
[343.54162598 50.04948807]
[333.13021851 61.16355133]
[319.09588623 67.07606506]
[303.87020874 66.76265717]
[290.09106445 60.27762222]
[280.14584351 48.74453354]
[265.79595947 53.11275482]
[251.44610596 57.48097610]
[237.16590881 62.07183456]
[222.95883179 66.88421631]
[208.75177002 71.69660950]
[199.17959595 83.10813904]
[183.62660217 80.20729065]
[169.41954041 85.01968384]
[155.21246338 89.83206940]
[141.00538635 94.64445496]
[126.79831696 99.45684052]
[112.59123993 104.26922607]
[126.59167480 109.65325928]
[137.30979919 120.14714813]
[142.98860168 134.03063965]
[142.69715881 149.02780151]
[136.48324585 162.68017578]
[125.36549377 172.74972534]
[111.16645050 177.58573914]
[96.21374512 176.39546204]
[82.95858002 169.37402344]
[73.57386780 157.67243958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[5 48]
[6 47]
[7 46]
[8 45]
[10 43]
[11 42]
[12 41]
[17 40]
[18 39]
[19 38]
[20 37]
[23 35]
[24 34]
[25 33]
[26 32]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[58 83]
[59 82]
[60 81]
[62 80]
[63 79]
[64 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
