%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGCGCGCUGGCUGGAGCGCGGGUCUGCCCCUCUGGACGCACAUGCGCGCUGUCCUGGCUCGGGAGAUGGACGGCCGCCGUGUUUUGGGCCGGUUCUGGAGUGGCUGGCGGCGGGGCCUGGGUGUCCGCCCAGUGCCCGAGG\
) } def
/len { sequence length } bind def

/coor [
[103.18457031 198.62097168]
[89.16732788 193.28085327]
[83.13001251 179.54946899]
[88.67110443 165.60983276]
[91.16522217 150.81863403]
[93.65933990 136.02745056]
[86.16324615 136.26947021]
[76.88317871 148.05422974]
[67.60310364 159.83897400]
[58.32303238 171.62371826]
[49.04296112 183.40846252]
[39.76288986 195.19322205]
[41.87757492 210.85539246]
[32.23173523 223.37471008]
[16.54808044 225.32368469]
[4.13144255 215.54602051]
[2.34839416 199.84263611]
[12.25678539 187.53007507]
[27.97814369 185.91314697]
[37.25821304 174.12840271]
[46.53828430 162.34364319]
[55.81835556 150.55889893]
[65.09842682 138.77415466]
[74.37850189 126.98941040]
[68.66585541 95.32273865]
[88.31998444 76.60507965]
[85.75058746 61.82678223]
[83.18119049 47.04848099]
[73.19436646 34.77761841]
[78.63721466 20.91310883]
[76.06781769 6.13480711]
[73.49842072 -8.64349461]
[63.51160431 -20.91435432]
[68.95445251 -34.77886581]
[66.38505554 -49.55716705]
[63.81565857 -64.33547211]
[61.24626160 -79.11376953]
[58.67686462 -93.89207458]
[56.10746765 -108.67037201]
[53.53807068 -123.44867706]
[44.38532639 -135.33258057]
[30.75306129 -141.59048462]
[17.12079620 -147.84838867]
[2.39118814 -142.12002563]
[-12.04093552 -148.56124878]
[-17.61325073 -163.35060120]
[-11.01980305 -177.71380615]
[3.82763314 -183.12945557]
[18.12033653 -176.38452148]
[23.37870026 -161.48065186]
[37.01096344 -155.22274780]
[50.64323044 -148.96484375]
[57.28126144 -152.45576477]
[46.53862762 -162.92456055]
[53.17541504 -176.37644958]
[68.01979065 -174.22132874]
[70.55732727 -159.43760681]
[77.19536591 -162.92852783]
[79.76476288 -177.70681763]
[82.33415985 -192.48512268]
[84.90355682 -207.26342773]
[87.47295380 -222.04173279]
[90.04235077 -236.82002258]
[92.61174774 -251.59832764]
[95.18114471 -266.37664795]
[97.75054169 -281.15493774]
[100.31993866 -295.93322754]
[102.88933563 -310.71154785]
[97.63026428 -325.63308716]
[107.43330383 -336.84692383]
[110.00270081 -351.62521362]
[112.57209778 -366.40350342]
[115.14149475 -381.18182373]
[104.92359161 -393.01940918]
[104.75696564 -408.65609741]
[114.72029877 -420.70874023]
[130.10920715 -423.48641968]
[143.65751648 -415.67761230]
[148.96813965 -400.96942139]
[143.53353882 -386.30657959]
[129.91979980 -378.61242676]
[127.35040283 -363.83410645]
[124.78100586 -349.05581665]
[122.21160889 -334.27752686]
[127.65445709 -320.41299438]
[117.66763306 -308.14215088]
[115.09823608 -293.36383057]
[112.52883911 -278.58554077]
[109.95944214 -263.80725098]
[107.39004517 -249.02893066]
[104.82064819 -234.25062561]
[102.25125122 -219.47233582]
[99.68185425 -204.69403076]
[97.11245728 -189.91572571]
[94.54306030 -175.13742065]
[91.97366333 -160.35913086]
[85.94020081 -134.60641479]
[68.31637573 -126.01807404]
[70.88577271 -111.23976898]
[73.45516968 -96.46147156]
[76.02456665 -81.68316650]
[78.59396362 -66.90486908]
[81.16336060 -52.12656403]
[83.73275757 -37.34826279]
[93.53579712 -26.13444519]
[88.27672577 -11.21289158]
[90.84612274 3.56541014]
[93.41551971 18.34371185]
[103.21855927 29.55752945]
[97.95948792 44.47908401]
[100.52888489 59.25738525]
[103.09828186 74.03568268]
[115.03022766 75.94850159]
[125.69988251 83.43704987]
[132.49957275 95.66154480]
[133.36380005 110.57949829]
[127.30918121 125.28038788]
[137.33013916 136.44194031]
[147.35108948 147.60350037]
[157.37205505 158.76506042]
[167.51251221 169.81816101]
[177.77130127 180.76153564]
[188.03010559 191.70489502]
[198.28889465 202.64825439]
[208.54768372 213.59161377]
[218.80647278 224.53498840]
[234.64990234 228.76792908]
[238.64389038 244.67327881]
[226.67977905 255.88896179]
[211.06520081 250.87725830]
[207.86311340 234.79377747]
[197.60432434 223.85041809]
[187.34552002 212.90704346]
[177.08673096 201.96368408]
[166.82794189 191.02032471]
[156.56915283 180.07696533]
[149.64974976 177.32829285]
[146.21049500 168.78602600]
[136.18954468 157.62446594]
[126.16857910 146.46290588]
[116.14762115 135.30134583]
[108.65152740 135.54338074]
[112.09461212 150.14286804]
[115.53768921 164.74237061]
[121.96643066 178.29490662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[26 112]
[27 111]
[28 110]
[30 108]
[31 107]
[32 106]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[41 52]
[42 51]
[43 50]
[58 96]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[70 84]
[71 83]
[72 82]
[73 81]
[117 141]
[118 140]
[119 139]
[120 138]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
