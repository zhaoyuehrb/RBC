%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUGCCGCUCCUCCGCCCCACGGCUCAGGAUUCGCCCAAAAUGAGGACUUCCCUGCAGGCAGUGGCACUCUGGGGACAGAAGGCCCCUCCCCACAGCAUCACUGCCAUCAUGAUCACUGAUGACCAGCGAACGAUUGUGA\
) } def
/len { sequence length } bind def

/coor [
[76.15585327 96.86052704]
[62.95138168 103.97684479]
[49.74691391 111.09317017]
[36.54244614 118.20948792]
[36.67640686 136.58178711]
[27.57134819 152.44267273]
[11.78471375 161.50779724]
[-6.33477879 161.37797546]
[-21.84495354 152.17361450]
[-34.55207443 160.14413452]
[-46.98968506 168.52899170]
[-59.14427948 177.31909180]
[-71.29887390 186.10919189]
[-83.45346832 194.89927673]
[-86.09043121 210.25129700]
[-98.54214478 218.99255371]
[-113.16168213 216.38400269]
[-125.31627655 225.17410278]
[-137.47087097 233.96420288]
[-143.67643738 249.14389038]
[-159.95956421 251.09117126]
[-169.56956482 237.80282593]
[-162.62049866 222.94879150]
[-146.26097107 221.80960083]
[-134.10638428 213.01950073]
[-121.95178223 204.22941589]
[-119.85035706 189.52839661]
[-107.64908600 180.44084167]
[-92.24356842 182.74468994]
[-80.08897400 173.95458984]
[-67.93437958 165.16448975]
[-55.77978134 156.37438965]
[-54.87641144 152.89036560]
[-52.19448853 149.68930054]
[-47.89487457 147.62367249]
[-42.52258682 147.43701172]
[-29.81546783 139.46650696]
[-31.89676094 127.74670410]
[-29.86551666 115.98281097]
[-23.94020462 105.57907867]
[-14.80555153 97.78553009]
[-3.53347468 93.54779053]
[8.54266644 93.39241028]
[19.98579407 97.36151123]
[29.42612457 105.00502014]
[42.63059235 97.88870239]
[55.83506393 90.77237701]
[69.03952789 83.65605927]
[54.26288605 86.23497009]
[39.89793396 81.91663361]
[28.99269104 71.61732483]
[23.86109161 57.52241135]
[25.59198380 42.62261200]
[33.81809616 30.07944298]
[46.79397202 22.55437469]
[61.76632690 21.64411354]
[75.55825043 27.54180336]
[85.24331665 38.99604034]
[88.76648712 53.57641602]
[85.38028717 68.18901062]
[93.21073914 55.39510345]
[101.04119873 42.60120010]
[108.87165070 29.80729485]
[116.70210266 17.01338959]
[124.53255463 4.21948433]
[132.36300659 -8.57442093]
[140.19346619 -21.36832619]
[136.71302795 -36.55135345]
[144.83647156 -49.41464615]
[159.33262634 -52.63913727]
[167.16307068 -65.43304443]
[167.76782227 -81.24268341]
[181.01119995 -88.05901337]
[188.84165955 -100.85292053]
[196.67210388 -113.64682770]
[204.50256348 -126.44073486]
[212.33300781 -139.23463440]
[220.16346741 -152.02853394]
[212.26271057 -165.13719177]
[211.37040710 -180.41667175]
[217.69160461 -194.35585022]
[229.77372742 -203.75164795]
[244.84040833 -206.44493103]
[259.42941284 -201.81683350]
[270.18832397 -190.93086243]
[274.64480591 -176.28849792]
[271.77478027 -161.25448608]
[262.23776245 -149.28352356]
[248.22531128 -143.12643433]
[232.95736694 -144.19808960]
[225.12692261 -131.40419006]
[217.29646301 -118.61027527]
[209.46601868 -105.81637573]
[201.63555908 -93.02246857]
[193.80509949 -80.22856140]
[193.76043701 -65.33402252]
[179.95698547 -57.60258865]
[172.12652588 -44.80868530]
[175.85038757 -30.43271637]
[168.09144592 -17.34633064]
[152.98736572 -13.53787327]
[145.15690613 -0.74396789]
[137.32646179 12.04993725]
[129.49600220 24.84384155]
[121.66555023 37.63774872]
[113.83509827 50.43165207]
[106.00464630 63.22555923]
[98.17419434 76.01946259]
[117.40777588 87.62093353]
[117.12007141 107.45074463]
[127.31114960 118.45718384]
[137.50222778 129.46363831]
[147.69331360 140.47007751]
[157.88439941 151.47651672]
[168.07548523 162.48297119]
[178.26657104 173.48941040]
[188.45764160 184.49586487]
[210.29345703 189.35011292]
[214.67335510 210.51751709]
[225.79109192 220.58708191]
[236.90881348 230.65666199]
[252.93882751 231.30326843]
[262.31127930 244.32389832]
[257.83642578 259.73022461]
[242.94697571 265.70385742]
[229.06486511 257.66229248]
[226.83924866 241.77438354]
[215.72151184 231.70481873]
[204.60379028 221.63523865]
[196.83468628 223.73294067]
[188.78213501 222.53016663]
[181.80488586 218.15335083]
[177.11065674 211.27082825]
[175.54745483 202.99159241]
[177.45120239 194.68693542]
[167.26011658 183.68049622]
[157.06903076 172.67405701]
[146.87796021 161.66760254]
[136.68687439 150.66116333]
[126.49578857 139.65470886]
[116.30471039 128.64826965]
[106.11362457 117.64182281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[9 37]
[10 36]
[11 32]
[12 31]
[13 30]
[14 29]
[17 26]
[18 25]
[19 24]
[60 108]
[61 107]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[70 98]
[71 97]
[73 95]
[74 94]
[75 93]
[76 92]
[77 91]
[78 90]
[110 142]
[111 141]
[112 140]
[113 139]
[114 138]
[115 137]
[116 136]
[117 135]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
