%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGACUCUGGAUAGCCAGAGGGUCCAGGACCGCCUGCUGGCAGCCCCAGGAUGCAGCUCCCCUUCUGGCCAACAGGAACUCUUUUCCAGUCAUGUGA\
) } def
/len { sequence length } bind def

/coor [
[86.93045044 228.25570679]
[98.35617828 218.07182312]
[94.66199493 203.53384399]
[90.96781158 188.99586487]
[87.27362823 174.45787048]
[83.57944489 159.91989136]
[79.88526154 145.38191223]
[65.83472443 140.13000488]
[53.51038742 148.68049622]
[41.18605042 157.23097229]
[28.86171722 165.78146362]
[16.53738213 174.33193970]
[4.21304798 182.88243103]
[-2.28846955 197.93774414]
[-18.60659218 199.56588745]
[-27.95463562 186.09197998]
[-20.71613312 171.37681580]
[-4.33743620 170.55809021]
[7.98689842 162.00761414]
[20.31123352 153.45712280]
[32.63556671 144.90664673]
[44.95990372 136.35615540]
[57.28423691 127.80567169]
[54.50102234 113.06614685]
[39.90734482 109.59850311]
[25.31366539 106.13085938]
[10.71998692 102.66320801]
[-6.08786345 104.88413239]
[-12.87486839 89.34795380]
[0.17532240 78.52534485]
[14.18763161 88.06953430]
[28.78130913 91.53717804]
[43.37498856 95.00482178]
[57.96866608 98.47246552]
[77.23962402 71.33686066]
[105.95021057 69.43142700]
[112.27774048 55.83133698]
[118.60526276 42.23124695]
[124.93279266 28.63115883]
[123.73899078 12.85505581]
[136.12300110 4.57945156]
[142.45051575 -9.02063751]
[148.77804565 -22.62072563]
[155.10557556 -36.22081375]
[144.42910767 -46.95573044]
[138.08149719 -60.66994858]
[136.81134033 -75.70014954]
[140.75271606 -90.23065948]
[149.41127014 -102.51278687]
[161.72622681 -111.07528687]
[176.20022583 -114.90055847]
[191.08139038 -113.54557800]
[197.40892029 -127.14566803]
[203.73645020 -140.74575806]
[198.08346558 -155.50447083]
[204.59840393 -169.90345764]
[219.41604614 -175.40008545]
[233.74536133 -168.73329163]
[239.08502197 -153.85835266]
[232.26708984 -139.60032654]
[217.33653259 -134.41822815]
[211.00901794 -120.81814575]
[204.68148804 -107.21805573]
[215.30307007 -96.70771790]
[221.69984436 -83.17219543]
[223.08230591 -68.23688507]
[219.26437378 -53.70262146]
[210.68820190 -41.32848740]
[198.37298584 -32.61896133]
[183.79397583 -28.64098358]
[168.70565796 -29.89328957]
[162.37812805 -16.29320145]
[156.05061340 -2.69311213]
[149.72308350 10.90697670]
[151.36947632 25.71030998]
[138.53288269 34.95868301]
[132.20535278 48.55877304]
[125.87783051 62.15886307]
[119.55030060 75.75894928]
[128.35868835 83.71519470]
[133.87448120 94.86565399]
[134.95428467 107.83174896]
[131.03475952 120.83608246]
[122.26586151 131.94612122]
[109.54248810 139.35928345]
[94.42324066 141.68772888]
[98.11742401 156.22570801]
[101.81160736 170.76368713]
[105.50579071 185.30168152]
[109.19997406 199.83966064]
[112.89415741 214.37763977]
[127.79551697 217.87165833]
[139.35867310 227.89923096]
[144.92648315 242.15608215]
[143.21952820 257.36611938]
[134.63003540 270.03414917]
[121.13182068 277.24917603]
[105.82666779 277.35324097]
[92.23159027 270.32244873]
[83.47063446 257.77236938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[24 34]
[25 33]
[26 32]
[27 31]
[36 79]
[37 78]
[38 77]
[39 76]
[41 74]
[42 73]
[43 72]
[44 71]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
