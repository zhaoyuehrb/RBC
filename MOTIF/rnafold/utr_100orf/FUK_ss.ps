%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAGCCCGCUCCGCCGAGCGCCGGGCGACGGCAGGAAGCCCCUCCGCUUGGCCAGAAUGGAGCAGCCGAAGGGAGUUGAUUGGACAGUCAUCAUCCUGACCUGCCAGUACAAGGACAGUGUCCAGGUCUUUCAGAGAGAACUGGAAGUGCGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[98.03572083 228.52473450]
[83.42019653 223.58610535]
[73.81272125 211.51548767]
[72.27900696 196.16455078]
[79.30845642 182.43173218]
[92.65798950 174.69911194]
[93.25059509 159.71083069]
[93.84319305 144.72253418]
[72.17681885 132.07655334]
[61.75372696 110.93932343]
[46.81298065 112.27126312]
[31.87223244 113.60320282]
[16.93148422 114.93514252]
[1.99073696 116.26707458]
[-12.84486580 118.48177338]
[-27.52321243 121.57145691]
[-42.20156097 124.66113281]
[-56.87990952 127.75081635]
[-71.55825806 130.84049988]
[-86.23660278 133.93017578]
[-100.91494751 137.01985168]
[-115.59329987 140.10952759]
[-124.85378265 154.92076111]
[-141.62562561 158.40960693]
[-155.46847534 148.90132141]
[-170.08291626 152.28039551]
[-184.69735718 155.65948486]
[-199.31179810 159.03855896]
[-203.12709045 173.86091614]
[-213.40225220 185.20462036]
[-227.77612305 190.46296692]
[-242.94570923 188.42764282]
[-255.42512512 179.56632996]
[-262.34671021 165.91531372]
[-262.11993408 150.61148071]
[-254.79689026 137.17155457]
[-242.06037903 128.68392944]
[-226.83715820 127.09897614]
[-212.62539673 132.78092957]
[-202.69087219 144.42411804]
[-188.07643127 141.04504395]
[-173.46199036 137.66596985]
[-158.84754944 134.28688049]
[-153.60009766 122.48477936]
[-142.33665466 115.77405548]
[-129.07093811 116.80776978]
[-118.68297577 125.43118286]
[-104.00463104 122.34150696]
[-89.32627869 119.25182343]
[-74.64793396 116.16214752]
[-59.96958923 113.07246399]
[-45.29124069 109.98278809]
[-30.61289215 106.89310455]
[-15.93454552 103.80342865]
[-27.65667343 94.44438934]
[-29.50901031 79.55919647]
[-20.43818474 67.61264801]
[-5.60251522 65.39839172]
[6.56137514 74.17562103]
[9.13622761 88.95298004]
[0.65879846 101.32633209]
[15.59954643 99.99439240]
[30.54029465 98.66245270]
[45.48104095 97.33051300]
[60.42178726 95.99857330]
[63.71261978 83.70054626]
[70.71993256 73.07187653]
[80.72605133 65.20113373]
[76.06261444 50.94447327]
[63.49940491 40.40418243]
[66.61203766 24.30314255]
[82.19851685 19.20471954]
[94.22479248 30.35373688]
[90.31927490 46.28104019]
[94.98271179 60.53770065]
[105.38731384 58.86109543]
[116.29990387 59.99272537]
[126.94862366 64.07332611]
[136.05062866 52.15050888]
[145.15263367 40.22769547]
[154.13639832 28.21553993]
[163.00106812 16.11522102]
[171.86573792 4.01490164]
[180.73039246 -8.08541775]
[189.59506226 -20.18573570]
[192.16275024 -29.00861359]
[198.75633240 -32.43522644]
[207.85833740 -44.35804367]
[216.96034241 -56.28086090]
[225.94410706 -68.29301453]
[234.80877686 -80.39333344]
[243.67343140 -92.49365234]
[241.01541138 -108.07282257]
[250.22007751 -120.91998291]
[265.82647705 -123.41315460]
[278.57559204 -114.07317352]
[280.90362549 -98.44128418]
[271.42938232 -85.79161835]
[255.77375793 -83.62899017]
[246.90908813 -71.52867126]
[238.04443359 -59.42835236]
[236.62078857 -52.13518906]
[228.88314819 -47.17885971]
[219.78115845 -35.25604248]
[210.67915344 -23.33322525]
[201.69537354 -11.32107162]
[192.83071899 0.77924722]
[183.96604919 12.87956619]
[175.10137939 24.97988510]
[166.23672485 37.08020401]
[164.81307983 44.37336731]
[157.07543945 49.32969666]
[147.97344971 61.25251389]
[138.87144470 73.17533112]
[145.32241821 86.71730042]
[160.31582642 87.16179657]
[175.30924988 87.60630035]
[190.30265808 88.05079651]
[206.31401062 82.47647858]
[216.10285950 96.31897736]
[205.51115417 109.55725861]
[189.85815430 103.04421234]
[174.86474609 102.59970856]
[159.87133789 102.15521240]
[144.87791443 101.71070862]
[143.40272522 111.83913422]
[139.66792297 121.38775635]
[133.85971069 129.85852051]
[144.09329224 140.82545471]
[154.43472290 151.69076538]
[164.88299561 162.45336914]
[175.33126831 173.21597290]
[185.77952576 183.97859192]
[196.22779846 194.74119568]
[206.67605591 205.50379944]
[217.12432861 216.26641846]
[232.92860413 216.24996948]
[244.05636597 227.47264099]
[243.90571594 243.27621460]
[232.56602478 254.28469849]
[216.76493835 253.96697998]
[205.87693787 242.51153564]
[206.36170959 226.71467590]
[195.91345215 215.95207214]
[185.46517944 205.18946838]
[175.01692200 194.42684937]
[164.56864929 183.66424561]
[154.12039185 172.90164185]
[143.67211914 162.13902283]
[136.71954346 159.51631165]
[133.12635803 151.05905151]
[122.89277649 140.09210205]
[108.83148193 145.31513977]
[108.23888397 160.30342102]
[107.64628601 175.29171753]
[120.34365082 184.05415344]
[126.26692963 198.29910278]
[123.52601624 213.48101807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 155]
[7 154]
[8 153]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[25 43]
[26 42]
[27 41]
[28 40]
[68 75]
[69 74]
[78 114]
[79 113]
[80 112]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[87 105]
[88 104]
[89 103]
[90 101]
[91 100]
[92 99]
[115 125]
[116 124]
[117 123]
[118 122]
[128 152]
[129 151]
[130 149]
[131 148]
[132 147]
[133 146]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
