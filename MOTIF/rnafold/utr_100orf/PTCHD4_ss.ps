%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAACGGGGUAGCCCGGCGCUUACACAUGUCACAUGUGCUUUUUAAGACGGCCGGGAGCGCCUGCGAGCUGGAUCUGGUGGAGGAUGCUGCGGCAGGUGCUUCGCAGAGGGCUCCAGUCGUUCUGCCACAGGC\
) } def
/len { sequence length } bind def

/coor [
[120.37698364 328.36923218]
[122.24340057 321.87185669]
[119.46697235 307.13107300]
[116.69055176 292.39025879]
[113.91412354 277.64944458]
[111.13770294 262.90863037]
[108.36128235 248.16781616]
[105.58485413 233.42701721]
[102.46617889 218.75479126]
[99.00694275 204.15911865]
[94.36091614 198.32266235]
[95.64122009 189.18362427]
[92.52254486 174.51141357]
[89.40386963 159.83920288]
[86.28519440 145.16697693]
[83.16651917 130.49476624]
[71.90332031 120.58818817]
[56.95304489 119.36781311]
[41.98958588 118.32146454]
[27.01496315 117.44928741]
[12.03120708 116.75141144]
[-2.95965576 116.22792053]
[-17.95051765 115.70442963]
[-32.94137955 115.18093109]
[-47.93732071 115.52996826]
[-62.88759232 116.75035095]
[-77.83786774 117.97072601]
[-92.78813934 119.19110870]
[-107.73841095 120.41149139]
[-122.68868256 121.63186646]
[-137.98338318 128.94680786]
[-149.24645996 116.27481079]
[-140.18760681 101.94395447]
[-123.90906525 106.68159485]
[-108.95879364 105.46121216]
[-94.00852203 104.24083710]
[-79.05824280 103.02045441]
[-64.10797119 101.80007172]
[-49.15769958 100.57969666]
[-58.31576157 88.69988251]
[-54.96971512 74.07785034]
[-41.55655670 67.36315155]
[-27.84539986 73.44625854]
[-23.82239532 87.89670563]
[-32.41788864 100.19007111]
[-17.42702484 100.71356201]
[-2.43616319 101.23705292]
[12.55469894 101.76055145]
[19.41196823 98.82326508]
[27.88713646 102.47467041]
[42.86175919 103.34683990]
[49.78551865 100.56991577]
[58.17342758 104.41753387]
[73.12370300 105.63791656]
[82.75484467 82.28553772]
[105.08923340 78.61364746]
[113.33187103 66.08132935]
[121.57450104 53.54901505]
[129.81713867 41.01669693]
[138.05976868 28.48438072]
[146.30239868 15.95206356]
[154.54504395 3.41974616]
[162.78767395 -9.11257076]
[171.03030396 -21.64488792]
[179.27294922 -34.17720413]
[187.51557922 -46.70952225]
[185.68016052 -59.53684998]
[192.87811279 -69.82472992]
[204.77101135 -72.32984924]
[213.30302429 -84.66696930]
[208.32730103 -99.24601746]
[212.83755493 -113.78943634]
[224.90393066 -122.78201294]
[239.77377319 -122.94314575]
[248.30578613 -135.28027344]
[256.83779907 -147.61740112]
[265.36981201 -159.95452881]
[262.28872681 -175.45556641]
[271.14028931 -188.54852295]
[286.67303467 -191.46556091]
[299.67166138 -182.47605896]
[302.42431641 -166.91333008]
[293.29791260 -154.01046753]
[277.70693970 -151.42250061]
[269.17492676 -139.08537292]
[260.64291382 -126.74825287]
[252.11090088 -114.41112518]
[257.20816040 -100.44130707]
[253.05284119 -85.97764587]
[241.03710938 -76.62481689]
[225.64015198 -76.13495636]
[217.10813904 -63.79782867]
[216.66906738 -46.29347992]
[200.04789734 -38.46688843]
[191.80526733 -25.93457031]
[183.56262207 -13.40225315]
[175.31999207 -0.86993641]
[167.07736206 11.66238117]
[158.83471680 24.19469833]
[150.59208679 36.72701645]
[142.34945679 49.25933075]
[134.10681152 61.79164886]
[125.86418152 74.32396698]
[117.62155151 86.85628510]
[122.13209534 94.13314056]
[123.63069153 102.91213226]
[121.64410400 111.94698334]
[116.21280670 119.85741425]
[107.92052460 125.33927155]
[97.83873749 127.37609100]
[100.95741272 142.04830933]
[104.07608795 156.72052002]
[107.19476318 171.39273071]
[110.31343842 186.06495667]
[113.60261536 200.69989014]
[117.06185150 215.29556274]
[121.40962219 220.47206116]
[122.28659821 226.20425415]
[120.32566833 230.65058899]
[123.10208893 245.39140320]
[125.87850952 260.13220215]
[128.65493774 274.87301636]
[131.43136597 289.61383057]
[134.20777893 304.35464478]
[136.98420715 319.09545898]
[140.10289001 333.76766968]
[143.56211853 348.36334229]
[147.02136230 362.95901489]
[156.55747986 376.97680664]
[145.72735596 390.02075195]
[130.19508362 383.22482300]
[132.42568970 366.41824341]
[128.96644592 351.82257080]
[125.50720978 337.22689819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 116]
[10 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 54]
[18 53]
[19 51]
[20 50]
[21 48]
[22 47]
[23 46]
[24 45]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
[69 92]
[70 91]
[74 87]
[75 86]
[76 85]
[77 84]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
