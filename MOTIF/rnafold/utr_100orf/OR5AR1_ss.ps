%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAAAGAAAACAGCUCAAUGGUGACUGAGUUUAUCUUCAUGGGCAUCACCCAGGACCCUCAGAUGGAGAUCAUCUUCUUCGUGGUCUUCCUCAUAG\
) } def
/len { sequence length } bind def

/coor [
[113.30730438 170.81770325]
[118.00126648 156.12178040]
[129.90983582 146.31414795]
[128.04835510 131.43009949]
[126.18687439 116.54605865]
[107.61084747 127.76862335]
[87.89527893 123.69660187]
[77.12923431 108.57603455]
[62.14555740 109.27564240]
[47.16188431 109.97524261]
[32.17820740 110.67485046]
[25.90952682 121.02335358]
[15.48735809 126.92697144]
[3.63041592 126.98161316]
[-6.63402939 121.29159546]
[-12.74306965 111.41287231]
[-27.74125481 111.17959595]
[-42.73944092 110.94631958]
[-57.73762894 110.71304321]
[-72.73580933 110.47976685]
[-87.73400116 110.24649048]
[-96.94078064 122.73707581]
[-111.74115753 127.39846039]
[-126.44407654 122.43824768]
[-135.39596558 109.76374054]
[-135.15464783 94.24854279]
[-125.81291199 81.85856628]
[-110.96284485 77.35800934]
[-96.31459808 82.47742462]
[-87.50072479 95.24830627]
[-72.50253296 95.48158264]
[-57.50434875 95.71485901]
[-42.50616455 95.94813538]
[-27.50797844 96.18141174]
[-12.50979233 96.41468811]
[-0.33285460 82.92148590]
[18.15038109 82.42607117]
[31.47859955 95.69117737]
[46.46227646 94.99156952]
[61.44595337 94.29196167]
[76.42962646 93.59236145]
[84.96676636 78.04424286]
[103.00579834 71.36459351]
[122.42619324 78.63203430]
[121.95969391 63.63928604]
[121.49319458 48.64654160]
[121.02670288 33.65379715]
[110.36690521 21.66429138]
[113.23628235 5.87992525]
[127.43369293 -1.59088540]
[142.06809998 4.98282576]
[145.91323853 20.55827141]
[136.01943970 33.18730164]
[136.48594666 48.18004608]
[136.95243835 63.17279053]
[137.41894531 78.16553497]
[148.74128723 88.00446320]
[163.65248108 86.37467957]
[178.56367493 84.74489594]
[193.47486877 83.11511230]
[208.38607788 81.48533630]
[211.58641052 78.76651001]
[215.12060547 77.24877930]
[218.60130310 76.89806366]
[221.68667603 77.56672668]
[224.11131287 79.01602936]
[225.70820618 80.94635773]
[240.69187927 81.64596558]
[255.67555237 82.34556580]
[270.65924072 83.04517365]
[285.64291382 83.74478149]
[300.62658691 84.44438934]
[315.61026001 85.14398956]
[327.12442017 74.31809235]
[342.91839600 74.88825989]
[353.62194824 86.51622009]
[352.88485718 102.30331421]
[341.14437866 112.88333130]
[325.36596680 111.97934723]
[314.91064453 100.12767029]
[299.92697144 99.42806244]
[284.94329834 98.72845459]
[269.95962524 98.02884674]
[254.97595215 97.32924652]
[239.99227905 96.62963867]
[225.00859070 95.93003082]
[210.01585388 96.39653015]
[195.10466003 98.02631378]
[180.19346619 99.65609741]
[165.28225708 101.28588104]
[150.37106323 102.91565704]
[141.07092285 114.68457031]
[142.93240356 129.56861877]
[144.79388428 144.45266724]
[158.75106812 151.02537537]
[166.91975403 164.11264038]
[166.69332886 179.53833008]
[158.14405823 192.38020325]
[143.99996948 198.54043579]
[128.77439880 196.05332947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[8 41]
[9 40]
[10 39]
[11 38]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[44 56]
[45 55]
[46 54]
[47 53]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
