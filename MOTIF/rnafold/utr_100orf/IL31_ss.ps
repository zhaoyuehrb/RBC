%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAGCUGGCCUUGCUCUCUCUCGCCAUGGCCUCUCACUCAGGCCCCUCGACGUCUGUGCUCUUUCUGUUCUGCUGCCUGGGAGGCUGGCUGGCCUCCCACACGUUGCCCGUCCGUUUACUACGAC\
) } def
/len { sequence length } bind def

/coor [
[60.30754089 153.41229248]
[49.18836975 142.97142029]
[36.71632385 151.30497742]
[31.24663925 158.75531006]
[23.83436394 159.68560791]
[11.16156101 167.71057129]
[7.54641342 180.16346741]
[-3.26152468 186.57145691]
[-15.13626862 183.94120789]
[-28.00219727 191.65275574]
[-40.86812592 199.36428833]
[-53.73405457 207.07583618]
[-57.63299561 224.07730103]
[-72.30587769 232.87142944]
[-88.48834229 228.47102356]
[-101.16114044 236.49598694]
[-102.01624298 251.98948669]
[-111.84096527 264.00009155]
[-126.85749817 267.90945435]
[-141.29168701 262.21438599]
[-149.59329224 249.10473633]
[-148.57015991 233.62142944]
[-138.61572266 221.71810913]
[-123.55766296 217.97186279]
[-109.18611145 223.82318115]
[-96.51330566 215.79821777]
[-95.45742798 202.89498901]
[-87.01141357 192.82688904]
[-74.11070251 189.44416809]
[-61.44559860 194.20989990]
[-48.57966614 186.49836731]
[-35.71373749 178.78681946]
[-22.84780884 171.07528687]
[-15.22646713 155.31771851]
[3.13659668 155.03776550]
[15.80940056 147.01280212]
[28.38277054 138.83293152]
[40.85481644 130.49937439]
[33.61105347 104.56864166]
[37.23443604 77.89007568]
[51.13185883 54.83065796]
[41.33426666 43.47252274]
[31.53667450 32.11439133]
[21.73908043 20.75625801]
[11.94148827 9.39812565]
[-3.50978351 10.82564831]
[-16.83197212 2.86958623]
[-22.90242195 -11.41079330]
[-19.38692474 -26.52439308]
[-7.63725805 -36.65972519]
[7.82859087 -37.91954803]
[21.06368637 -29.81943321]
[26.97886658 -15.47404099]
[23.29962158 -0.39946729]
[33.09721375 10.95866585]
[42.89480591 22.31679726]
[52.69239807 33.67493057]
[62.48999023 45.03306198]
[69.02950287 41.10014343]
[75.97626495 37.94176102]
[83.23895264 35.59944153]
[90.72203827 34.10398865]
[98.32713318 33.47507095]
[105.95423126 33.72095490]
[113.50302124 34.83840561]
[120.87425232 36.81273651]
[127.97098541 39.61797714]
[134.69990540 43.21724319]
[140.97251892 47.56319809]
[146.70632935 52.59870148]
[151.82597351 58.25753021]
[156.26409912 64.46527100]
[159.96234131 71.14029694]
[162.87208557 78.19483185]
[177.50761414 74.90830994]
[189.27722168 64.33537292]
[203.39050293 69.09611511]
[218.02603149 65.80959320]
[232.09519958 51.47061539]
[250.31274414 57.76448441]
[264.76937866 53.76379395]
[279.22601318 49.76310349]
[293.68267822 45.76240921]
[308.13931274 41.76171875]
[322.59594727 37.76102829]
[337.05258179 33.76033783]
[351.50921631 29.75964546]
[365.96588135 25.75895309]
[377.07458496 13.69542885]
[393.01486206 17.54762268]
[397.38873291 33.35272980]
[385.69671631 44.85180664]
[369.96655273 40.21559525]
[355.50991821 44.21628571]
[341.05328369 48.21697617]
[326.59664917 52.21767044]
[312.13998413 56.21836090]
[297.68334961 60.21905136]
[283.22671509 64.21974182]
[268.77008057 68.22043610]
[254.31343079 72.22112274]
[250.02738953 81.63867950]
[241.04753113 87.21028137]
[230.26458740 86.85411072]
[221.31256104 80.44512939]
[206.67701721 83.73164368]
[195.95425415 94.06950378]
[180.79414368 89.54383850]
[166.15859985 92.83036041]
[166.29098511 105.81984711]
[163.89732361 118.58756256]
[159.06883240 130.64698792]
[151.98950195 141.53860474]
[142.92910767 150.84738159]
[132.23287964 158.21861267]
[137.97312927 172.07679749]
[143.71337891 185.93499756]
[157.92532349 193.37811279]
[160.82546997 209.15686035]
[150.18907166 221.16712952]
[134.17544556 220.19566345]
[125.06890869 206.98768616]
[129.85519409 191.67524719]
[124.11493683 177.81704712]
[118.37468719 163.95886230]
[103.32878876 166.46264648]
[88.10801697 165.47477722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[5 36]
[6 35]
[9 33]
[10 32]
[11 31]
[12 30]
[15 26]
[16 25]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[74 109]
[75 108]
[77 106]
[78 105]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
