%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCUGCAUGGCGCUGAGAUGGCGGGGGCGCCGCGCGGCGGAGGCGGCGGCGGAGGCGGCGCGGGCGAGCCCGGGGGCGCCGAGCGGGCGGCCGGGACAAGCCGCCGGCGCGGGCUCC\
) } def
/len { sequence length } bind def

/coor [
[81.83628082 113.32965851]
[67.47870636 117.67247009]
[59.97659302 131.32369995]
[45.35410690 135.52340698]
[32.38597870 128.28715515]
[18.02840233 132.62995911]
[3.67082620 136.97277832]
[-10.68674946 141.31559753]
[-25.04432487 145.65840149]
[-39.40190125 150.00122070]
[-53.75947571 154.34402466]
[-64.72850037 165.74539185]
[-79.15079498 162.02427673]
[-93.50836945 166.36708069]
[-107.86595154 170.70989990]
[-122.22352600 175.05270386]
[-136.58110046 179.39552307]
[-150.93867493 183.73832703]
[-165.29624939 188.08114624]
[-168.11808777 203.12426758]
[-177.61669922 215.12573242]
[-191.60935974 221.32768250]
[-206.88066101 220.30494690]
[-219.92137146 212.29255676]
[-227.73483276 199.13168335]
[-228.52555847 183.84661865]
[-222.11186218 169.94973755]
[-209.96755981 160.63446045]
[-194.88331604 158.04136658]
[-180.32537842 162.76631165]
[-169.63906860 173.72357178]
[-155.28149414 169.38075256]
[-140.92391968 165.03794861]
[-126.56633759 160.69512939]
[-112.20876312 156.35232544]
[-97.85118103 152.00950623]
[-83.49360657 147.66670227]
[-73.55153656 136.57595825]
[-58.10229111 139.98645020]
[-43.74471283 135.64363098]
[-29.38713837 131.30082703]
[-15.02956200 126.95801544]
[-0.67198563 122.61520386]
[13.68559074 118.27239227]
[28.04316711 113.92958069]
[34.82662582 100.71896362]
[49.32538223 96.11020660]
[63.13589478 103.31489563]
[77.49346924 98.97208405]
[80.63390350 88.48675537]
[88.34514618 80.71879578]
[85.30146027 66.03083801]
[74.92489624 54.08774948]
[79.91871643 40.05524826]
[76.87503052 25.36729622]
[65.56624603 13.49112320]
[70.45586395 -2.16210985]
[86.51385498 -5.48969936]
[97.22114563 6.93149376]
[91.56298828 22.32361031]
[94.60667419 37.01156616]
[104.76553345 47.90407562]
[99.98941803 62.98715591]
[103.03310394 77.67510986]
[108.65174866 75.58329773]
[115.20429993 74.97888947]
[122.53780365 61.89379120]
[129.87129211 48.80868912]
[137.20478821 35.72359085]
[136.45443726 19.34161949]
[150.41046143 10.72990799]
[164.71609497 18.74744797]
[164.65493774 35.14648056]
[150.28988647 43.05708694]
[142.95639038 56.14218903]
[135.62289429 69.22728729]
[128.28939819 82.31238556]
[133.17895508 96.49308777]
[147.01875305 102.27754974]
[160.85855103 108.06201935]
[174.69834900 113.84648895]
[188.53814697 119.63095093]
[197.78143311 120.07080841]
[202.65451050 125.74392700]
[216.34205627 131.87995911]
[230.02961731 138.01599121]
[245.78741455 136.60089111]
[254.23600769 148.86753845]
[267.92355347 155.00355530]
[283.68133545 153.58847046]
[292.12994385 165.85510254]
[305.81750488 171.99113464]
[319.50506592 178.12716675]
[333.19259644 184.26319885]
[346.88015747 190.39923096]
[360.56771851 196.53524780]
[373.95812988 188.69456482]
[389.39648438 190.25549316]
[400.94644165 200.61784363]
[404.16677856 215.79707336]
[397.81924438 229.95645142]
[384.34457397 237.65142822]
[368.92404175 235.92311096]
[357.48718262 225.43608093]
[354.43170166 210.22280884]
[340.74414062 204.08677673]
[327.05657959 197.95074463]
[313.36901855 191.81472778]
[299.68145752 185.67869568]
[285.99392700 179.54266357]
[271.21514893 181.39665222]
[261.78753662 168.69111633]
[248.09997559 162.55508423]
[233.32119751 164.40907288]
[223.89358521 151.70353699]
[210.20602417 145.56750488]
[196.51847839 139.43148804]
[182.75367737 133.47074890]
[168.91387939 127.68627930]
[155.07408142 121.90181732]
[141.23429871 116.11734772]
[127.39449310 110.33287811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[51 64]
[52 63]
[54 61]
[55 60]
[66 77]
[67 76]
[68 75]
[69 74]
[78 122]
[79 121]
[80 120]
[81 119]
[82 118]
[84 117]
[85 116]
[86 115]
[88 113]
[89 112]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
