%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUUCCGGAGCGCCAGGGAAGAGGGAAGUCGUGGUGGUCGCGAGGGAGCCGGAAAGAUGGUGGUUACCAGAUCUGCACGGGCUAAGGCCAGCAUCCAAGCCGCGUCGGCUGAAAGUUCCGGGCAAAAGAGUUUUGCUGCUAAUGGGAUUCAAGCGC\
) } def
/len { sequence length } bind def

/coor [
[102.56994629 164.20394897]
[101.97734070 149.21565247]
[71.91217804 128.93621826]
[68.60395813 99.67340088]
[54.59495163 105.03508759]
[40.58594131 110.39676666]
[26.57692909 115.75845337]
[12.56791973 121.12013245]
[-1.44109035 126.48181152]
[-15.51623440 155.20251465]
[-28.20017433 163.20986938]
[-35.73919296 177.11935425]
[-50.63167572 177.37083435]
[-63.31561661 185.37818909]
[-75.99955750 193.38554382]
[-88.68349457 201.39289856]
[-101.36743927 209.40023804]
[-108.90645599 223.30972290]
[-123.79893494 223.56121826]
[-136.48287964 231.56855774]
[-135.79592896 246.91209412]
[-142.88702393 260.53604126]
[-155.84867859 268.77563477]
[-171.19427490 269.41448975]
[-184.79592896 262.28073120]
[-192.99487305 249.29331970]
[-193.58561707 233.94578552]
[-186.40925598 220.36656189]
[-173.39619446 212.20837402]
[-158.04689026 211.66574097]
[-144.49023438 218.88462830]
[-131.80628967 210.87727356]
[-125.17450714 197.54052734]
[-109.37478638 196.71630859]
[-96.69084930 188.70895386]
[-84.00690460 180.70159912]
[-71.32296753 172.69425964]
[-58.63902664 164.68690491]
[-52.00724792 151.35015869]
[-36.20752716 150.52592468]
[-23.52358437 142.51858521]
[-25.73828316 127.68297577]
[-40.20781708 123.72917175]
[-53.80763245 131.78030396]
[-69.09619904 127.77590179]
[-77.00308990 114.09172821]
[-72.83728790 98.84635162]
[-59.07027817 91.08457947]
[-43.86979294 95.41133881]
[-36.25400925 109.25963593]
[-21.78447533 113.21344757]
[-6.80277252 112.47280121]
[7.20623779 107.11112213]
[21.21524811 101.74944305]
[35.22425842 96.38775635]
[49.23326874 91.02607727]
[63.24227905 85.66439056]
[71.24962616 72.98045349]
[70.06535339 58.02727890]
[68.88108063 43.07410049]
[67.69680786 28.12092400]
[58.89411926 14.97470093]
[65.60242462 1.67628574]
[64.41815186 -13.27689075]
[63.23388290 -28.23006821]
[62.04961014 -43.18324661]
[60.86533737 -58.13642120]
[49.65784073 -65.66403961]
[44.91744232 -78.09692383]
[48.17165375 -90.79766083]
[58.00979996 -99.16644287]
[57.12119293 -114.14009857]
[53.47238922 -122.57350922]
[56.36591721 -129.41781616]
[55.77331924 -144.40609741]
[55.18071747 -159.39439392]
[45.97369766 -172.96505737]
[53.36526489 -187.60392761]
[69.75160980 -188.25180054]
[78.27586365 -174.24220276]
[70.16900635 -159.98698425]
[70.76160431 -144.99870300]
[71.35420990 -130.01040649]
[72.09484863 -115.02870941]
[72.98345947 -100.05505371]
[86.01608276 -89.46342468]
[87.40907288 -72.38928223]
[75.81851196 -59.32069397]
[77.00278473 -44.36751938]
[78.18705750 -29.41434097]
[79.37133026 -14.46116352]
[80.55560303 0.49201292]
[89.27359009 12.56868458]
[82.64998627 26.93665123]
[83.83425903 41.88982773]
[85.01853180 56.84300613]
[86.20280457 71.79618073]
[102.44857025 62.73006821]
[123.95419312 63.92603683]
[144.04646301 77.95458984]
[157.03683472 70.45458984]
[170.02722168 62.95459366]
[183.01760864 55.45459366]
[196.00798035 47.95459366]
[206.70190430 34.79874039]
[222.30398560 41.43283844]
[220.24824524 58.26169205]
[203.50798035 60.94497299]
[190.51760864 68.44496918]
[177.52722168 75.94496918]
[164.53683472 83.44496918]
[151.54646301 90.94496918]
[151.39828491 98.44351196]
[164.23811340 106.19843292]
[151.10192871 113.44058228]
[150.95375061 120.93911743]
[163.63768005 128.94647217]
[176.32162476 136.95381165]
[189.00556946 144.96116638]
[201.68949890 152.96852112]
[214.37344360 160.97587585]
[227.05738831 168.98321533]
[240.12123108 176.35452271]
[253.53309631 183.07179260]
[266.94497681 189.78906250]
[280.35684204 196.50633240]
[293.76870728 203.22360229]
[307.18057251 209.94087219]
[320.59246826 216.65814209]
[337.46228027 218.34500122]
[340.51135254 235.02252197]
[325.32968140 242.56924438]
[313.87518311 230.07000732]
[300.46331787 223.35273743]
[287.05145264 216.63546753]
[273.63955688 209.91819763]
[260.22769165 203.20092773]
[246.81582642 196.48365784]
[233.40396118 189.76638794]
[235.28457642 204.64804077]
[224.96833801 215.53727722]
[210.00685120 214.46307373]
[201.35206604 202.21177673]
[205.33935547 187.75143433]
[219.05003357 181.66716003]
[206.36608887 173.65980530]
[193.68215942 165.65246582]
[180.99821472 157.64511108]
[168.31427002 149.63775635]
[155.63034058 141.63040161]
[142.94639587 133.62306213]
[136.45120239 137.37306213]
[136.45152283 152.37306213]
[123.46082306 144.87306213]
[116.96562958 148.62306213]
[117.55823517 163.61134338]
[124.22560120 179.19924927]
[111.09259796 189.92120361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 41]
[11 40]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[19 32]
[20 31]
[42 51]
[43 50]
[58 97]
[59 96]
[60 95]
[61 94]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[71 85]
[72 84]
[74 83]
[75 82]
[76 81]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
[116 151]
[117 150]
[118 149]
[119 148]
[120 147]
[121 146]
[122 145]
[123 139]
[124 138]
[125 137]
[126 136]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
