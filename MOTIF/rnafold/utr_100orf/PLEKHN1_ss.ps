%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCCAGACUUGCCGACCUGUACGACUCUGGCCAUGGGGAACAGCCACUGUGUCCCUCAGGCCCCCAGGAGGCUCCGGGCCUCCUUCUCCAGAAAGCCCUCGCUGAAGGGAAACAGAGAGGACAGCGCGCGGA\
) } def
/len { sequence length } bind def

/coor [
[125.30864716 133.54121399]
[125.75611115 148.53454590]
[120.54273224 162.59941101]
[110.43099976 173.67880249]
[96.89977264 180.15228271]
[81.92806244 181.07310486]
[67.70553589 176.30659485]
[56.31229401 166.54985046]
[49.41463852 153.22984314]
[48.02138519 138.29469299]
[52.33629608 123.92871094]
[61.72830200 112.23297882]
[74.82378387 104.91803741]
[89.70940399 103.05386353]
[76.43997192 96.05943298]
[63.17053986 89.06499481]
[50.58152390 92.12997437]
[39.64742661 85.96018219]
[36.00469971 74.36627197]
[22.90036392 67.06720734]
[9.79602814 59.76813889]
[-3.30830741 52.46907425]
[-9.70515060 57.34812164]
[-17.16832924 60.27897263]
[-25.12181473 61.05137634]
[-32.95609283 59.62106705]
[-40.07485962 56.11201859]
[-45.94041824 50.80583572]
[-50.11428452 44.11922836]
[-52.28994751 36.57128906]
[-52.31534576 28.74321556]
[-50.20338821 21.23355675]
[-61.96165848 11.91996098]
[-73.71993256 2.60636568]
[-85.47820282 -6.70723009]
[-100.96978760 -5.07978439]
[-112.76166534 -14.69259548]
[-114.21772003 -29.47148323]
[-125.97599030 -38.78507996]
[-137.73425293 -48.09867477]
[-149.49253845 -57.41226959]
[-161.25080872 -66.72586823]
[-173.11585999 -75.90303802]
[-185.08612061 -84.94255829]
[-197.05638123 -93.98207092]
[-209.02662659 -103.02159119]
[-225.31027222 -107.74172211]
[-225.28236389 -124.69564819]
[-208.98327637 -129.36215210]
[-199.98712158 -114.99185181]
[-188.01686096 -105.95233154]
[-176.04660034 -96.91281128]
[-164.07633972 -87.87329102]
[-156.77740479 -86.33895874]
[-151.93721008 -78.48413849]
[-140.17893982 -69.17053986]
[-128.42066956 -59.85694504]
[-116.66239166 -50.54335022]
[-104.90412140 -41.22975540]
[-90.18442535 -43.19601059]
[-78.12718964 -33.91820145]
[-76.16460419 -18.46550179]
[-64.40633392 -9.15190506]
[-52.64806366 0.16169021]
[-40.88978958 9.47528553]
[-19.01430321 4.20638561]
[0.01805582 16.68944168]
[3.99075961 39.36473846]
[17.09509468 46.66380310]
[30.19943047 53.96287155]
[43.30376816 61.26194000]
[60.76940918 60.00714111]
[70.16497803 75.79556274]
[83.43441010 82.78999329]
[96.70384216 89.78443146]
[110.92625427 94.55130768]
[125.73057556 96.96624756]
[140.53491211 99.38117981]
[155.33923340 101.79611969]
[170.20504761 96.38152313]
[181.52062988 106.06693268]
[196.32495117 108.48186493]
[211.15618896 110.72566223]
[226.01234436 112.79800415]
[242.86003113 105.46956635]
[256.30447388 116.68877411]
[271.20452881 118.41741943]
[286.10458374 120.14606476]
[301.00463867 121.87471771]
[315.90469360 123.60336304]
[330.80474854 125.33200836]
[337.10815430 113.60939026]
[347.01495361 104.76885223]
[359.31707764 99.85902405]
[372.52438354 99.45101166]
[385.04513550 103.57203674]
[395.37786865 111.70481110]
[402.29138184 122.85237122]
[404.97146606 135.66021729]
[419.77578735 138.07516479]
[434.58010864 140.49009705]
[449.38442993 142.90504456]
[462.06515503 133.47239685]
[477.68930054 135.85176086]
[486.98736572 148.63151550]
[484.44293213 164.22962952]
[471.56561279 173.39204407]
[455.99523926 170.68284607]
[446.96948242 157.70936584]
[432.16516113 155.29443359]
[417.36083984 152.87948608]
[402.55651855 150.46455383]
[393.34002686 164.53413391]
[378.87643433 173.22633362]
[362.01760864 174.77149963]
[346.11196899 168.81474304]
[334.33953857 156.49597168]
[329.07611084 140.23207092]
[314.17605591 138.50341797]
[299.27600098 136.77478027]
[284.37594604 135.04612732]
[269.47586060 133.31747437]
[254.57582092 131.58883667]
[244.84761047 138.87237549]
[232.36872864 137.49458313]
[223.94000244 127.65415955]
[209.08383179 125.58181763]
[201.96070862 127.79308319]
[193.91001892 123.28619385]
[179.10568237 120.87125397]
[165.29876709 126.45858765]
[152.92428589 116.60044861]
[138.11996460 114.18550873]
[123.31564331 111.77056885]
[108.51131439 109.35562897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 75]
[15 74]
[16 73]
[19 71]
[20 70]
[21 69]
[22 68]
[32 65]
[33 64]
[34 63]
[35 62]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 53]
[44 52]
[45 51]
[46 50]
[76 135]
[77 134]
[78 133]
[79 132]
[81 130]
[82 129]
[83 127]
[84 126]
[86 123]
[87 122]
[88 121]
[89 120]
[90 119]
[91 118]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
