%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCAAUCCCCCGAGCGGCCGCCAACAUGCUCUUUGAGGGCUUGGAUCUGGUGUCGGCGCUGGCCACCCUCGCCGCGUGCCUGGUGUCCGUGACGCUGCUGCUGGCCGUGUCGCAGCAGCUGUGGC\
) } def
/len { sequence length } bind def

/coor [
[99.91815186 213.44839478]
[83.56275177 212.25134277]
[76.66629028 197.37280273]
[86.32325745 184.11856079]
[87.41818237 169.15856934]
[88.51311493 154.19859314]
[89.60803986 139.23860168]
[81.17259216 135.96093750]
[73.67298889 130.89578247]
[67.48201752 124.29489136]
[62.90740967 116.48638153]
[60.17655563 107.85838318]
[59.42519760 98.83976746]
[60.69067764 89.87882996]
[63.91009903 81.42098236]
[68.92343140 73.88663483]
[75.48148346 67.65029907]
[68.78578949 54.22764206]
[62.09010315 40.80498505]
[55.39440918 27.38232803]
[42.31062317 18.48710060]
[43.55310440 3.64440894]
[36.85741425 -9.77824783]
[30.16172218 -23.20090485]
[23.46603012 -36.62356186]
[16.77033997 -50.04621887]
[1.19848108 -59.78446198]
[2.82788396 -77.21323395]
[-4.19267750 -90.46886444]
[-11.21323872 -103.72449493]
[-18.23380089 -116.98011780]
[-25.25436211 -130.23574829]
[-37.20169067 -131.47642517]
[-46.93917465 -138.30125427]
[-52.07622910 -148.89160156]
[-51.42162323 -160.52317810]
[-45.25759125 -170.26652527]
[-51.62444305 -183.84825134]
[-57.99129105 -197.42997742]
[-64.35813904 -211.01170349]
[-70.72499084 -224.59341431]
[-77.09184265 -238.17514038]
[-82.42030334 -242.36662292]
[-84.44717407 -247.81582642]
[-83.41996002 -252.57669067]
[-89.11799622 -266.45230103]
[-94.81603241 -280.32791138]
[-99.93409729 -284.77383423]
[-101.69325256 -290.31524658]
[-100.43546295 -295.02047729]
[-105.45117188 -309.15704346]
[-110.46688843 -323.29360962]
[-115.48259735 -337.43017578]
[-120.49830627 -351.56674194]
[-125.51401520 -365.70330811]
[-138.33486938 -375.92868042]
[-135.62266541 -392.10198975]
[-120.16748810 -397.58554077]
[-107.86829376 -386.73834229]
[-111.37744904 -370.71902466]
[-106.36173248 -356.58245850]
[-101.34602356 -342.44589233]
[-96.33031464 -328.30932617]
[-91.31460571 -314.17276001]
[-86.29889679 -300.03616333]
[-80.94042969 -286.02593994]
[-75.24239349 -272.15032959]
[-69.54434967 -258.27471924]
[-63.51012039 -244.54199219]
[-57.14326859 -230.96026611]
[-50.77642059 -217.37854004]
[-44.40956879 -203.79682922]
[-38.04271698 -190.21510315]
[-31.67586708 -176.63337708]
[-14.17033386 -171.54310608]
[-5.70668364 -155.03968811]
[-11.99873161 -137.25631714]
[-4.97817039 -124.00067902]
[2.04239082 -110.74505615]
[9.06295204 -97.48942566]
[16.08351326 -84.23379517]
[27.60519981 -80.34188843]
[33.53948593 -69.26828003]
[30.19299698 -56.74190903]
[36.88868713 -43.31925201]
[43.58437729 -29.89659691]
[50.28007126 -16.47393990]
[56.97576141 -3.05128264]
[69.58062744 4.88386583]
[68.81707001 20.68663597]
[75.51275635 34.10929489]
[82.20845032 47.53194809]
[88.90414429 60.95460510]
[111.75623322 61.14833832]
[130.88197327 73.65679932]
[140.21913147 94.51521301]
[136.80809021 117.11212921]
[149.00744629 125.84001160]
[161.20678711 134.56790161]
[173.40612793 143.29577637]
[185.60548401 152.02366638]
[197.80482483 160.75154114]
[210.00416565 169.47943115]
[222.20352173 178.20732117]
[231.10292053 180.69448853]
[234.59016418 187.29924011]
[246.57336426 196.32160950]
[258.55654907 205.34396362]
[274.84692383 210.04077148]
[274.84332275 226.99470520]
[258.55093384 231.68455505]
[249.53419495 217.32716370]
[237.55099487 208.30480957]
[225.56779480 199.28244019]
[213.47563171 190.40666199]
[201.27629089 181.67877197]
[189.07693481 172.95089722]
[176.87759399 164.22300720]
[164.67825317 155.49513245]
[152.47889709 146.76724243]
[140.27955627 138.03935242]
[128.08021545 129.31147766]
[121.10889435 134.67095947]
[113.14694977 138.40336609]
[104.56802368 140.33352661]
[103.47309875 155.29351807]
[102.37816620 170.25350952]
[101.28324127 185.21348572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 128]
[5 127]
[6 126]
[7 125]
[17 93]
[18 92]
[19 91]
[20 90]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[28 81]
[29 80]
[30 79]
[31 78]
[32 77]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[45 68]
[46 67]
[47 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
