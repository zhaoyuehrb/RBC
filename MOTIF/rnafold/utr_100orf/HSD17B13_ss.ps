%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGUACCUCCUCCCUAGGACUACACAAGGACUGAACCAGAAGGAAGAGGACAGAGCAAAGCCAUGAACAUCAUCCUAGAAAUCCUUCUGCUUCUGAUCACCAUCAUCUACUCCUACUUGGAGUCGUUGGUGAAGUUUUUCAUUCCUCAGAGGAGAAAAUCUG\
) } def
/len { sequence length } bind def

/coor [
[84.85877228 535.23419189]
[68.48604584 534.30364990]
[61.34821701 519.53936768]
[70.78807068 506.12963867]
[71.63925171 491.15380859]
[72.49043274 476.17797852]
[58.32575607 465.68963623]
[53.21560287 448.65795898]
[59.37413788 431.80981445]
[74.52569580 421.91720581]
[74.80955505 406.91992188]
[75.09342194 391.92260742]
[75.37728119 376.92529297]
[75.66114044 361.92797852]
[75.94500732 346.93066406]
[65.78065491 338.96978760]
[62.01430893 326.41696167]
[66.24084473 313.80581665]
[77.12515259 305.82720947]
[77.69277191 290.83795166]
[78.26039886 275.84869385]
[78.82801819 260.85943604]
[68.85021210 255.70677185]
[61.49824905 247.15026855]
[57.87376404 236.41285706]
[58.54198456 225.04837036]
[63.44395828 214.71670532]
[71.89954376 206.94140625]
[82.70151520 202.88496399]
[84.11878967 187.95207214]
[85.53606415 173.01916504]
[86.95334625 158.08627319]
[88.37062073 143.15338135]
[89.78789520 128.22048950]
[91.20517731 113.28759766]
[87.14039612 98.84883881]
[78.14090729 86.84845734]
[69.14141846 74.84807587]
[54.67174149 68.44970703]
[53.22584915 53.62545013]
[44.22635651 41.62506866]
[35.22686386 29.62468529]
[26.22737312 17.62430382]
[17.22788239 5.62392330]
[8.22839069 -6.37645817]
[-0.77110100 -18.37683868]
[-9.77059269 -30.37722015]
[-29.74623871 -32.10948944]
[-41.87817383 -47.69048309]
[-38.75844574 -66.88231659]
[-48.42440033 -78.35268402]
[-58.09035492 -89.82305145]
[-67.75630951 -101.29341888]
[-78.16029358 -112.09883881]
[-89.25666809 -122.19193268]
[-104.82313538 -121.62376404]
[-115.93266296 -132.01766968]
[-116.37838745 -146.86141968]
[-127.47476959 -156.95449829]
[-143.26031494 -163.13938904]
[-141.68701172 -180.02017212]
[-125.03039551 -183.18142700]
[-117.38167572 -168.05087280]
[-106.28530121 -157.95779419]
[-91.46584320 -158.91656494]
[-80.06875610 -148.83882141]
[-79.16358185 -133.28829956]
[-68.06720734 -123.19522095]
[-68.53444672 -138.18794250]
[-59.38101578 -150.07131958]
[-44.76563263 -153.44631958]
[-31.32858276 -146.77955627]
[-25.17478371 -133.09999084]
[-29.10012436 -118.62270355]
[-41.32118607 -109.92524719]
[-56.28594589 -110.95937347]
[-46.61999130 -99.48900604]
[-36.95403290 -88.01863861]
[-27.28807831 -76.54827881]
[-17.12767601 -78.47077179]
[-7.01288462 -75.96027374]
[1.19600570 -69.40888214]
[5.96031761 -59.95817566]
[6.35116720 -49.30064011]
[2.22978878 -39.37671280]
[11.22928047 -27.37633133]
[20.22877121 -15.37594986]
[29.22826385 -3.37556839]
[38.22775650 8.62481308]
[47.22724533 20.62519455]
[56.22673798 32.62557602]
[65.22622681 44.62595749]
[79.05220032 50.16598129]
[81.14179993 65.84858704]
[90.14128876 77.84896851]
[99.14077759 89.84934998]
[101.63511658 88.38604736]
[104.72662354 87.60028839]
[108.22211456 87.68010712]
[111.87605286 88.75793457]
[126.35262299 84.82997131]
[140.82919312 80.90200043]
[155.30577087 76.97403717]
[169.78233337 73.04606628]
[184.25891113 69.11809540]
[186.42565918 57.78485107]
[192.65519714 48.13367462]
[202.00643921 41.55136871]
[213.09320068 38.96648026]
[224.28961182 40.71847153]
[233.96849060 46.51367950]
[240.73788452 55.47369385]
[255.41401672 52.37353516]
[270.09014893 49.27337265]
[284.76629639 46.17321014]
[299.44244385 43.07305145]
[309.36676025 30.46799469]
[325.40975952 30.51210594]
[335.26458740 43.17154312]
[331.37152100 58.73507309]
[316.71691895 65.26368713]
[302.54260254 57.74918747]
[287.86645508 60.84934998]
[273.19030762 63.94950867]
[258.51419067 67.04967499]
[243.83804321 70.14983368]
[237.26402283 87.59748077]
[221.40423584 97.68183136]
[202.51783752 96.21061707]
[188.18687439 83.59466553]
[173.71029663 87.52263641]
[159.23373413 91.45059967]
[144.75715637 95.37857056]
[130.28059387 99.30654144]
[115.80402374 103.23450470]
[106.13806915 114.70487213]
[104.72079468 129.63777161]
[103.30351257 144.57066345]
[101.88623810 159.50355530]
[100.46896362 174.43644714]
[99.05168152 189.36933899]
[97.63440704 204.30223083]
[112.49696350 216.28735352]
[117.14822388 234.65107727]
[109.89810944 251.99070740]
[93.81727600 261.42706299]
[93.24964905 276.41632080]
[92.68202972 291.40557861]
[92.11441040 306.39483643]
[104.23439026 318.98004150]
[103.53837585 336.10101318]
[90.94232178 347.21450806]
[90.65845490 362.21182251]
[90.37459564 377.20913696]
[90.09073639 392.20645142]
[89.80686951 407.20376587]
[89.52301025 422.20108032]
[100.44326782 428.38787842]
[107.64059448 438.58181763]
[109.79081726 450.80038452]
[106.54404449 462.69937134]
[98.57986450 472.02246094]
[87.46626282 477.02914429]
[86.61508179 492.00497437]
[85.76390076 506.98080444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 165]
[5 164]
[6 163]
[10 157]
[11 156]
[12 155]
[13 154]
[14 153]
[15 152]
[19 149]
[20 148]
[21 147]
[22 146]
[29 142]
[30 141]
[31 140]
[32 139]
[33 138]
[34 137]
[35 136]
[36 96]
[37 95]
[38 94]
[40 92]
[41 91]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[50 79]
[51 78]
[52 77]
[53 76]
[54 68]
[55 67]
[58 64]
[59 63]
[100 135]
[101 134]
[102 133]
[103 132]
[104 131]
[105 130]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
