%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUCCCAGCUGAUCUGAAGCUCCUGUGCAGCCUCAGCCCUACACCAUGACCUCCUUCUACAGCACCUCCUCAUGCCCUCUGGGUUGCACCAUGGCUCCUGGAGCAAGAAAUGUCUUUGUCUCUCCUAUCGAUGUUGGGUGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[89.05886078 353.09753418]
[87.78677368 338.15158081]
[79.35137177 332.23620605]
[75.51905060 322.43560791]
[77.79753876 311.93630981]
[85.66365051 304.29843140]
[85.02703094 289.31195068]
[84.39041901 274.32546997]
[83.75379944 259.33898926]
[83.11717987 244.35250854]
[82.48056030 229.36602783]
[81.52599335 214.39642334]
[80.25390625 199.45046997]
[78.98181152 184.50450134]
[77.70972443 169.55853271]
[66.19232941 160.18382263]
[64.68933868 145.04461670]
[74.60049438 133.02767944]
[73.32839966 118.08171844]
[68.03223419 104.04780579]
[59.11273956 91.98784637]
[50.19324112 79.92789459]
[41.27374649 67.86793518]
[25.86899948 67.86727142]
[13.56230450 58.90074158]
[8.94977951 44.57633591]
[13.60083199 30.45168686]
[4.68133450 18.39173126]
[-4.23816299 6.33177376]
[-13.15766048 -5.72818327]
[-22.07715797 -17.78813934]
[-30.99665642 -29.84809685]
[-39.91615295 -41.90805435]
[-48.83565140 -53.96800995]
[-56.50974274 -59.05202103]
[-57.81325531 -66.37994385]
[-66.47476196 -78.62650299]
[-75.13627625 -90.87306213]
[-86.20465851 -88.08954620]
[-97.56618500 -88.83995819]
[-108.12261963 -93.03529358]
[-116.85861206 -100.25434875]
[-122.93935394 -109.78595734]
[-125.79033661 -120.69902039]
[-125.15160370 -131.93345642]
[-121.10136414 -142.40316772]
[-114.04683685 -151.10105896]
[-121.63856506 -164.03805542]
[-129.23028564 -176.97503662]
[-136.82202148 -189.91203308]
[-144.41374207 -202.84901428]
[-159.06454468 -199.17059326]
[-174.15815735 -199.77017212]
[-188.47102356 -204.59912109]
[-200.84283447 -213.26599121]
[-210.27070618 -225.06819153]
[-215.99032593 -239.04898071]
[-217.53804016 -254.07501221]
[-214.78839111 -268.92816162]
[-207.96427917 -282.40435791]
[-197.61889648 -293.41116333]
[-184.59091187 -301.05630493]
[-169.93641663 -304.72000122]
[-154.84341431 -304.10528564]
[-140.53541565 -299.26193237]
[-128.17230225 -290.58264160]
[-118.75630188 -278.77096558]
[-113.05072784 -264.78445435]
[-111.51810455 -249.75688171]
[-114.28267670 -234.90649414]
[-121.12032318 -221.43714905]
[-131.47676086 -210.44075012]
[-123.88503265 -197.50375366]
[-116.29330444 -184.56677246]
[-108.70157623 -171.62977600]
[-101.10984802 -158.69279480]
[-82.33348083 -159.90396118]
[-65.43362427 -151.45054626]
[-55.05354691 -135.56408691]
[-54.09100723 -116.53065491]
[-62.88971710 -99.53456879]
[-54.22820282 -87.28800964]
[-45.56669235 -75.04145050]
[-36.77569580 -62.88750839]
[-27.85619736 -50.82755280]
[-18.93669891 -38.76759338]
[-10.01720142 -26.70763779]
[-1.09770370 -14.64768124]
[7.82179403 -2.58772397]
[16.74129105 9.47223282]
[25.66078949 21.53219032]
[40.52824402 21.22102737]
[52.87411118 29.82588196]
[57.84392929 44.21873856]
[53.33370209 58.94843674]
[62.25320053 71.00839233]
[71.17269897 83.06835175]
[80.09219360 95.12831116]
[87.30899048 85.06641388]
[98.54302979 81.35646057]
[109.28130341 84.80780792]
[115.59738922 93.47937012]
[130.56698608 94.43393707]
[145.53657532 95.38850403]
[157.34045410 85.22452545]
[172.50814819 86.40583801]
[182.12521362 97.72165680]
[197.09480286 98.67622375]
[212.06439209 99.63079834]
[227.03399658 100.58536530]
[241.48091125 92.82530212]
[255.28047180 101.68556976]
[254.23686218 118.05147552]
[239.42366028 125.08718109]
[226.07942200 115.55496216]
[211.10983276 114.60038757]
[196.14022827 113.64582062]
[181.17063904 112.69125366]
[170.19416809 122.69387817]
[154.99926758 121.93905640]
[144.58201599 110.35810089]
[129.61241150 109.40353394]
[114.64282227 108.44896698]
[104.06613922 118.25296021]
[88.27436829 116.80963135]
[89.54645538 131.75558472]
[101.34591675 141.92468262]
[102.42308044 157.10014343]
[92.65568542 168.28645325]
[93.92778015 183.23240662]
[95.19986725 198.17837524]
[96.47195435 213.12434387]
[99.99082947 218.85372925]
[100.02884674 224.62409973]
[97.46704865 228.72940063]
[98.10366058 243.71588135]
[98.74028015 258.70236206]
[99.37689972 273.68884277]
[100.01351929 288.67535400]
[100.65013885 303.66183472]
[112.24868774 320.09344482]
[102.73273468 336.87948608]
[104.00482178 351.82546997]
[115.29396057 363.22436523]
[113.27756500 379.14019775]
[99.50245667 387.36367798]
[84.53571320 381.58648682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[11 135]
[12 132]
[13 131]
[14 130]
[15 129]
[18 126]
[19 125]
[20 98]
[21 97]
[22 96]
[23 95]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[34 84]
[36 83]
[37 82]
[38 81]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[102 123]
[103 122]
[104 121]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
