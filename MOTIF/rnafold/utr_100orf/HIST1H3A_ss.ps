%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCGCACUAAGCAAACUGCUCGGAAGUCUACUGGUGGCAAGGCGCCACGCAAACAGUUGGCCACUAAGGCAGCCCGCAAAAGCGCUCCGGCCACCG\
) } def
/len { sequence length } bind def

/coor [
[108.53475952 340.76232910]
[118.03100586 327.83172607]
[117.09846497 312.86071777]
[116.16591644 297.88973999]
[115.23337555 282.91876221]
[114.30082703 267.94778442]
[102.37735748 252.85992432]
[111.15058136 234.84283447]
[109.28910065 219.95878601]
[100.03216553 208.29010010]
[105.99707794 193.63641357]
[104.13558960 178.75236511]
[90.46590424 169.09425354]
[87.87531281 152.21919250]
[98.42469025 138.37168884]
[96.10121918 123.55273438]
[83.04729462 116.80884552]
[76.41490173 103.69792175]
[78.71633148 89.18625641]
[89.07982635 78.77074432]
[86.75635529 63.95178604]
[84.43287659 49.13282776]
[82.10940552 34.31387329]
[79.78593445 19.49491501]
[67.88622284 5.55060101]
[74.62019348 -10.57252407]
[71.83697510 -25.31205177]
[59.06587601 -34.23039246]
[56.45326996 -49.21802139]
[65.03424835 -61.33834839]
[62.25102997 -76.07788086]
[59.46781540 -90.81740570]
[49.30427933 -102.94230652]
[54.54570770 -116.88420868]
[51.76248932 -131.62373352]
[48.97927475 -146.36326599]
[46.19606018 -161.10279846]
[42.27622986 -175.58157349]
[37.24348068 -189.71208191]
[32.21072769 -203.84259033]
[27.17797852 -217.97311401]
[22.14522743 -232.10362244]
[8.32748604 -240.25527954]
[6.22825241 -256.16040039]
[17.45788002 -267.61791992]
[33.40195847 -265.83865356]
[41.82955933 -252.18743896]
[36.27574158 -237.13638306]
[41.30849075 -223.00585938]
[46.34124374 -208.87535095]
[51.37399292 -194.74482727]
[56.40674210 -180.61431885]
[58.71844101 -179.64877319]
[60.81102371 -177.75129700]
[62.34921265 -174.99436951]
[63.02732086 -171.56239319]
[62.60458374 -167.73939514]
[60.93558884 -163.88601685]
[63.71880341 -149.14648438]
[66.50202179 -134.40695190]
[69.28523254 -119.66742706]
[79.24969482 -108.59679413]
[74.20734406 -93.60062408]
[76.99056244 -78.86109161]
[79.77377319 -64.12156677]
[92.18360138 -55.96485901]
[95.21614838 -41.05653000]
[86.57649994 -28.09526825]
[89.35971832 -13.35573959]
[99.24315643 -6.19085407]
[101.59981537 6.19747686]
[94.60488892 17.17144203]
[96.92835999 31.99039841]
[99.25183868 46.80935669]
[101.57530975 61.62831116]
[103.89878082 76.44726562]
[116.95270538 83.19115448]
[123.58509827 96.30207825]
[121.28366852 110.81374359]
[110.92017365 121.22925568]
[113.24364471 136.04821777]
[125.05079651 142.74644470]
[130.70954895 154.86993408]
[128.33154297 167.83712769]
[119.01963806 176.89088440]
[120.88112640 191.77493286]
[130.27119446 204.50823975]
[124.17314911 218.09730530]
[126.03462982 232.98135376]
[135.16520691 239.29312134]
[139.13829041 249.41958618]
[136.83155823 259.82312012]
[129.27182007 267.01522827]
[130.20436096 281.98620605]
[131.13690186 296.95721436]
[132.06944275 311.92819214]
[133.00199890 326.89916992]
[144.02951050 338.55136108]
[141.65240479 354.41732788]
[127.69420624 362.32604980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[8 89]
[9 88]
[11 86]
[12 85]
[15 81]
[16 80]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[26 69]
[27 68]
[30 65]
[31 64]
[32 63]
[34 61]
[35 60]
[36 59]
[37 58]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
