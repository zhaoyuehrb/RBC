%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCAAGGAAAACUGCACCACUGUGGCUGAGUUCAUUCUCCUUGGACUAUCAGAUGUCCCUGAGUUGAGAGUCUGCCUCUUCCUGCUGUUCCUUCUCA\
) } def
/len { sequence length } bind def

/coor [
[57.29556656 449.16897583]
[60.08425903 429.98895264]
[60.55075455 414.99621582]
[61.01725388 400.00347900]
[61.48375320 385.01074219]
[58.49280930 378.10568237]
[62.20511627 369.56100464]
[63.13766098 354.59002686]
[64.07020569 339.61904907]
[65.00275421 324.64807129]
[65.93529510 309.67706299]
[66.86784363 294.70608521]
[57.49354935 287.84808350]
[52.61811066 277.17263794]
[53.59367752 265.35577393]
[60.28908539 255.42372131]
[71.09329224 249.97789001]
[72.95477295 235.09384155]
[74.81625366 220.20980835]
[62.28881454 213.68791199]
[52.74110031 203.23985291]
[47.34862900 190.12142944]
[46.78579330 175.91905212]
[51.14158630 162.35786438]
[59.90629196 151.09222412]
[72.03103638 143.50384521]
[86.05327606 140.53237915]
[88.37674713 125.71343231]
[90.70021820 110.89447021]
[85.84893799 97.78125000]
[94.48081970 86.78205872]
[96.80429077 71.96309662]
[89.74337006 55.04593658]
[101.08879852 41.75748825]
[102.95027924 26.87344170]
[104.81175995 11.98939323]
[106.67324066 -2.89465475]
[99.34040833 -13.64577103]
[101.31065369 -26.10140038]
[110.96648407 -33.57019424]
[113.28995514 -48.38915253]
[115.61342621 -63.20810699]
[106.42290497 -73.19857025]
[104.74618530 -86.47219849]
[110.97877502 -98.08933258]
[122.61479950 -103.85864258]
[125.39801788 -118.59817505]
[128.18122864 -133.33770752]
[130.96444702 -148.07722473]
[120.22359467 -159.27606201]
[118.14992523 -174.65394592]
[125.54080963 -188.29779053]
[139.55429077 -194.96125793]
[154.80192566 -192.08209229]
[165.42065430 -180.76741028]
[167.32739258 -165.36793518]
[159.78892517 -151.80506897]
[145.70397949 -145.29402161]
[142.92076111 -130.55448914]
[140.13754272 -115.81495667]
[137.35432434 -101.07542419]
[147.41212463 -87.69707489]
[144.71366882 -70.83893585]
[130.43238831 -60.88463593]
[128.10891724 -46.06567764]
[125.78543854 -31.24672127]
[133.01757812 -15.34082127]
[121.55728912 -1.03317344]
[119.69580841 13.85087490]
[117.83432770 28.73492241]
[115.97284698 43.61896896]
[123.18914032 53.46493530]
[121.64117432 65.98005676]
[111.62325287 74.28656769]
[109.29978180 89.10552979]
[114.15106201 102.21875000]
[105.51918030 113.21794128]
[103.19570923 128.03689575]
[100.87223053 142.85586548]
[114.58650208 151.08728027]
[124.09854126 163.89880371]
[127.99192047 179.33366394]
[125.70563507 195.04826355]
[117.61469269 208.66799927]
[104.96899414 218.14613342]
[89.70030212 222.07128906]
[87.83882141 236.95533752]
[85.97734070 251.83938599]
[98.16696930 266.15780640]
[96.23720551 284.54669189]
[81.83882141 295.63864136]
[80.90628052 310.60961914]
[79.97373199 325.58059692]
[79.04119110 340.55157471]
[78.10864258 355.52258301]
[77.17610168 370.49356079]
[76.47649384 385.47723389]
[76.00999451 400.46997070]
[75.54350281 415.46270752]
[75.07700348 430.45547485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[17 88]
[18 87]
[19 86]
[27 79]
[28 78]
[29 77]
[31 75]
[32 74]
[34 71]
[35 70]
[36 69]
[37 68]
[40 66]
[41 65]
[42 64]
[46 61]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
