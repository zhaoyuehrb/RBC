%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:38:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGCCACACCCUCCGCCUGGACGCAGCAGCCACCGCCGCGUCCCUCUCUCCACGAGGCUGCCGGCUUAGGACCCCCAGCUCCGACAUGUCGCCCUCUGGUCGCCUGUGUCUUCUCACCAUCGUUGGCCUGAUUCUCCCCACCAGAGGACAGACGUUGAAAGAUACCACGUCCAGUUCUUCAGCAG\
) } def
/len { sequence length } bind def

/coor [
[71.03172302 120.49944305]
[80.32128143 108.72207642]
[66.10237122 113.49938202]
[51.88346100 118.27667999]
[37.66455078 123.05397797]
[23.48583412 127.94928741]
[9.34829330 132.96226501]
[-4.78924656 137.97525024]
[-16.40237427 152.25440979]
[-33.51806259 148.41546631]
[-47.57032776 153.66273499]
[-57.79192352 165.73872375]
[-72.42170715 162.94252014]
[-86.47396851 168.18978882]
[-100.52623749 173.43705750]
[-114.57849884 178.68434143]
[-115.51310730 197.91053772]
[-124.71087646 214.76393127]
[-140.29493713 225.89466858]
[-159.12399292 229.11158752]
[-177.42541504 223.81349182]
[-191.55117798 211.10093689]
[-205.11933899 217.49664307]
[-218.68750000 223.89234924]
[-232.25564575 230.28807068]
[-245.82380676 236.68377686]
[-259.39196777 243.07949829]
[-268.57577515 255.96234131]
[-283.38720703 254.39028931]
[-296.95535278 260.78601074]
[-300.76461792 275.95251465]
[-313.46179199 285.08026123]
[-329.05166626 283.85940552]
[-340.17312622 272.86636353]
[-341.57501221 257.29174805]
[-332.59539795 244.48941040]
[-317.47415161 240.50421143]
[-303.35107422 247.21783447]
[-289.78289795 240.82212830]
[-281.56958008 228.39674377]
[-265.78768921 229.51133728]
[-252.21952820 223.11561584]
[-238.65136719 216.71990967]
[-225.08320618 210.32420349]
[-211.51504517 203.92848206]
[-197.94689941 197.53277588]
[-199.46427917 186.57907104]
[-198.10055542 175.58949280]
[-193.94020081 165.31005859]
[-187.25779724 156.44064331]
[-178.49996948 149.58737183]
[-168.25547791 145.22119141]
[-157.21568298 143.64547729]
[-146.12785339 144.97499084]
[-135.74464417 149.12760925]
[-126.77294159 155.82926941]
[-119.82576752 164.63206482]
[-105.77350616 159.38479614]
[-91.72124481 154.13752747]
[-77.66897583 148.89025879]
[-68.45249176 137.18959045]
[-52.81760025 139.61047363]
[-38.76533508 134.36320496]
[-33.45262146 123.48254395]
[-21.77301788 119.00216675]
[-9.80222511 123.83769989]
[4.33531523 118.82472229]
[18.47285652 113.81174469]
[23.73637199 108.60325623]
[32.88724899 108.83506775]
[47.10615921 104.05776978]
[61.32506943 99.28047180]
[75.54398346 94.50316620]
[60.67193985 92.54806519]
[47.09040070 86.18081665]
[36.07496643 75.99945068]
[28.66022682 62.96021652]
[25.54258156 48.28778458]
[27.01485062 33.36021042]
[32.93875122 19.57952309]
[42.75790405 8.24002457]
[55.55007935 0.40674171]
[70.11380768 -3.18461037]
[85.08123779 -2.19672513]
[99.04661560 3.27761316]
[110.69827271 12.72424507]
[118.94187164 25.25592804]
[123.00315857 39.69565964]
[122.50069427 54.68724442]
[117.48166656 68.82263947]
[108.41905212 80.77269745]
[120.74198151 72.22018433]
[133.06491089 63.66767502]
[135.85171509 46.40683746]
[149.97644043 36.68543625]
[166.43325806 40.10961914]
[178.61231995 31.35346603]
[190.79139709 22.59731102]
[202.97047424 13.84115505]
[215.14953613 5.08500051]
[227.32861328 -3.67115474]
[239.50767517 -12.42730999]
[251.68675232 -21.18346405]
[247.63858032 -35.77242279]
[248.82377625 -50.83785629]
[255.08006287 -64.56298065]
[265.63479614 -75.29926300]
[279.20028687 -81.76444244]
[294.13101196 -83.19563293]
[308.62304688 -79.43930817]
[320.93215942 -70.96752167]
[333.11123657 -79.72367859]
[345.29028320 -88.47983551]
[343.34881592 -99.81049347]
[345.77386475 -110.99501801]
[352.17608643 -120.41906738]
[361.59500122 -126.73710632]
[372.64279175 -129.06451416]
[383.70886230 -127.10124207]
[393.19467163 -121.16992950]
[405.79504395 -129.30812073]
[418.39544678 -137.44631958]
[425.39132690 -152.27835083]
[441.75439453 -153.36592102]
[450.65167236 -139.59020996]
[442.93045044 -125.12249756]
[426.53363037 -124.84592438]
[413.93325806 -116.70773315]
[401.33285522 -108.56953430]
[401.40515137 -89.89922333]
[390.13824463 -74.82414246]
[371.92425537 -69.52201843]
[354.04644775 -76.30076599]
[341.86737061 -67.54460907]
[329.68832397 -58.78845215]
[333.79867554 -44.42216492]
[332.74386597 -29.48842621]
[326.63195801 -15.79100990]
[316.18301392 -4.99096966]
[302.64425659 1.59477830]
[287.64129639 3.15401983]
[272.98287964 -0.52063280]
[260.44290161 -9.00439453]
[248.26383972 -0.24823964]
[236.08476257 8.50791550]
[223.90568542 17.26407051]
[211.72662354 26.02022552]
[199.54754639 34.77638245]
[187.36848450 43.53253555]
[175.18940735 52.28869247]
[174.90707397 65.18183136]
[167.12948608 75.71187592]
[154.51977539 79.89563751]
[141.61741638 75.99060059]
[129.29449463 84.54311371]
[116.97156525 93.09562683]
[114.12166595 107.82240295]
[122.36430359 120.35472107]
[130.60693359 132.88703918]
[138.84957886 145.41935730]
[147.09220886 157.95167542]
[155.33483887 170.48399353]
[162.67947388 175.94737244]
[163.60830688 183.29382324]
[171.64149475 195.96141052]
[178.89431763 201.54612732]
[179.70091248 208.90699768]
[187.52243042 221.70635986]
[203.00028992 222.80880737]
[214.85244751 232.82411194]
[218.52146912 247.90118408]
[212.59658813 262.24255371]
[199.35600281 270.33370972]
[183.89100647 269.06341553]
[172.14820862 258.92013550]
[168.64294434 243.80415344]
[174.72306824 229.52789307]
[166.90155029 216.72851562]
[158.97390747 203.99459839]
[150.94071960 191.32701111]
[142.80252075 178.72662354]
[134.55989075 166.19430542]
[126.31725311 153.66198730]
[118.07462311 141.12966919]
[109.83198547 128.59735107]
[101.58935547 116.06504059]
[101.63385773 131.06497192]
[89.43144989 139.78857422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[6 68]
[7 67]
[8 66]
[10 63]
[11 62]
[13 60]
[14 59]
[15 58]
[16 57]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[29 39]
[30 38]
[91 156]
[92 155]
[93 154]
[96 150]
[97 149]
[98 148]
[99 147]
[100 146]
[101 145]
[102 144]
[103 143]
[111 135]
[112 134]
[113 133]
[120 129]
[121 128]
[122 127]
[157 186]
[158 185]
[159 184]
[160 183]
[161 182]
[162 181]
[164 180]
[165 179]
[167 178]
[168 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
