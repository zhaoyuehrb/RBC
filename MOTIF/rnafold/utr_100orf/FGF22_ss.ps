%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGAGCGCGCAGCGAACCGGGUGCCGGGUCAUGCGCCGCCGCCUGUGGCUGGGCCUGGCCUGGCUGCUGCUGGCGCGGGCGCCGGACGCCGCGGGAACCCCGAGCGCGUCGCGGGGACCGCGCAGCUACC\
) } def
/len { sequence length } bind def

/coor [
[90.08108521 132.74752808]
[81.47626495 128.76902771]
[74.29335785 122.58215332]
[61.12817001 129.77088928]
[55.02235794 136.69836426]
[47.56303787 136.96980286]
[34.23050308 143.84320068]
[20.89797211 150.71659851]
[7.64817667 157.74816895]
[-5.51700830 164.93688965]
[-18.68219376 172.12562561]
[-31.84737778 179.31436157]
[-36.25733566 191.50283813]
[-47.45035553 197.20019531]
[-59.12741470 193.81634521]
[-72.45994568 200.68974304]
[-81.18059540 213.89053345]
[-96.03848267 212.84532166]
[-109.37100983 219.71871948]
[-122.70354462 226.59211731]
[-136.03607178 233.46551514]
[-147.34387207 246.09762573]
[-162.61260986 238.72865295]
[-159.75845337 222.01669312]
[-142.90946960 220.13298035]
[-129.57693481 213.25958252]
[-116.24440765 206.38618469]
[-102.91188049 199.51278687]
[-95.14486694 186.80361938]
[-79.33334351 187.35720825]
[-66.00081635 180.48381042]
[-57.38280869 165.24444580]
[-39.03611374 166.14918518]
[-25.87092781 158.96044922]
[-12.70574284 151.77171326]
[0.45944175 144.58297729]
[4.86524439 138.55769348]
[14.02457523 137.38406372]
[27.35710716 130.51066589]
[40.68964005 123.63726807]
[53.93943405 116.60570526]
[67.10462189 109.41696930]
[65.79097748 99.27319336]
[67.53427124 89.19436646]
[72.17871094 80.08113098]
[79.30927277 72.74785614]
[73.07804871 59.10337830]
[66.84682465 45.45890045]
[60.61559677 31.81442070]
[54.38437271 18.16993904]
[48.15314484 4.52546024]
[41.92192078 -9.11901951]
[35.69069672 -22.76350021]
[29.45947075 -36.40797806]
[23.22824478 -50.05245972]
[11.14848804 -61.94850159]
[19.23561859 -76.84932709]
[35.79285431 -73.20320892]
[36.87272644 -56.28368378]
[43.10395050 -42.63920593]
[49.33517456 -28.99472427]
[55.56640244 -15.35024548]
[61.79762650 -1.70576513]
[68.02885437 11.93871498]
[74.26007843 25.58319473]
[80.49130249 39.22767639]
[86.72252655 52.87215424]
[92.95375061 66.51663208]
[118.15512848 70.99694824]
[133.19671631 91.70764923]
[148.19247437 91.35067749]
[163.18821716 90.99371338]
[178.18397522 90.63674927]
[186.78538513 87.27721405]
[193.53988647 90.45401001]
[208.53988647 90.45401001]
[223.53988647 90.45401001]
[238.53988647 90.45401001]
[253.53988647 90.45401001]
[262.70059204 78.06903076]
[277.22763062 73.50627899]
[291.48715210 78.31558990]
[300.07766724 90.45401001]
[315.07766724 90.45401001]
[330.07766724 90.45401001]
[345.07659912 90.27551270]
[360.07235718 89.91854858]
[375.06811523 89.56157684]
[390.06387329 89.20461273]
[405.05960083 88.84764862]
[416.84591675 75.98408508]
[433.95147705 75.58352661]
[445.84939575 87.40717316]
[460.83242798 86.69344330]
[475.81542969 85.97972107]
[490.79843140 85.26599121]
[506.33193970 78.47283936]
[517.15972900 91.51875305]
[507.62106323 105.53483582]
[491.51217651 100.24900055]
[476.52914429 100.96273041]
[461.54614258 101.67646027]
[446.56314087 102.39018250]
[439.27212524 113.08258820]
[426.95971680 117.66319275]
[414.07574463 114.23593903]
[405.41656494 103.84339905]
[390.42083740 104.20036316]
[375.42507935 104.55733490]
[360.42932129 104.91429901]
[345.43356323 105.27126312]
[338.75659180 108.60789490]
[330.07766724 105.45401001]
[315.07766724 105.45401001]
[300.07766724 105.45401001]
[291.48715210 117.59242249]
[277.22763062 122.40173340]
[262.70059204 117.83898163]
[253.53988647 105.45401001]
[238.53988647 105.45401001]
[223.53988647 105.45401001]
[208.53988647 105.45401001]
[193.53988647 105.45401001]
[178.54093933 105.63249969]
[163.54519653 105.98946381]
[148.54943848 106.34643555]
[133.55368042 106.70339966]
[130.42654419 115.65283203]
[124.96379089 123.40073395]
[117.58478546 129.35235596]
[108.85594177 133.05082703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[6 40]
[7 39]
[8 38]
[9 36]
[10 35]
[11 34]
[12 33]
[15 31]
[16 30]
[18 28]
[19 27]
[20 26]
[21 25]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[70 127]
[71 126]
[72 125]
[73 124]
[75 123]
[76 122]
[77 121]
[78 120]
[79 119]
[83 115]
[84 114]
[85 113]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
