%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:39:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUAUAGGUCCCGGCCCGAGCCUCCGGCCGCCCGCCGGGUUUGUCCCGCGAUCCCCGACCAUGCCCGCCGACCUCAGCGGUACUUGGACCCUGCUCAGCAGCGACAACUUCGAGGGCUACAUGCUGGCCCUAGGUAUUGACUUUGCCACUCGUAAAAUAG\
) } def
/len { sequence length } bind def

/coor [
[19.84858704 184.89794922]
[7.52914953 193.45549011]
[6.21002436 204.31294250]
[-0.74485797 212.46682739]
[-10.83513451 215.36024475]
[-20.63417244 212.26338196]
[-33.27424622 220.33979797]
[-45.91431808 228.41621399]
[-58.55439377 236.49263000]
[-71.19446564 244.56906128]
[-76.77481842 251.86262512]
[-84.15688324 252.67658997]
[-96.95026398 260.50790405]
[-109.74363708 268.33923340]
[-122.53701782 276.17053223]
[-135.33039856 284.00186157]
[-148.12377930 291.83316040]
[-156.88490295 309.95327759]
[-176.19189453 309.72909546]
[-188.67396545 318.04760742]
[-194.11271667 325.44735718]
[-201.47772217 326.40347290]
[-214.11779785 334.47988892]
[-226.75787354 342.55630493]
[-236.84953308 356.17962646]
[-252.73410034 350.25363159]
[-251.43699646 333.34939575]
[-234.83428955 329.91622925]
[-222.19421387 321.83981323]
[-209.55413818 313.76339722]
[-196.99249268 305.56555176]
[-184.51040649 297.24700928]
[-183.39984131 287.03045654]
[-176.68872070 278.95910645]
[-166.42472839 275.87579346]
[-155.95509338 279.03979492]
[-143.16171265 271.20846558]
[-130.36833191 263.37716675]
[-117.57495880 255.54585266]
[-104.78157806 247.71453857]
[-91.98819733 239.88322449]
[-79.27088165 231.92898560]
[-66.63081360 223.85256958]
[-53.99073792 215.77613831]
[-41.35066605 207.69972229]
[-28.71059227 199.62330627]
[-21.14233971 181.86009216]
[-1.02838838 181.13604736]
[11.29104900 172.57850647]
[22.91481018 163.09757996]
[33.77384186 152.74955750]
[44.63287735 142.40155029]
[55.49190903 132.05352783]
[49.44324493 121.27001190]
[45.96360016 109.40567017]
[45.22979355 97.06337738]
[47.27911758 84.87030792]
[52.00742722 73.44605255]
[59.17446518 63.37112045]
[68.41603088 55.15747452]
[79.26252747 49.22248077]
[75.54338074 34.69086075]
[71.82423401 20.15924263]
[56.03691483 14.15231419]
[47.01528549 0.06841859]
[48.13714218 -16.45325089]
[58.76478577 -28.93565941]
[54.76626968 -43.39290237]
[50.76775742 -57.85014725]
[46.76924133 -72.30738831]
[32.19191360 -77.62538910]
[23.55239296 -90.51485443]
[24.17275429 -106.01952362]
[33.81445312 -118.17753601]
[48.77006149 -122.31388855]
[63.28884506 -116.83806610]
[71.78802490 -103.85563660]
[70.99951172 -88.35860443]
[61.22648239 -76.30590057]
[65.22499847 -61.84865952]
[69.22351074 -47.39141846]
[73.22203064 -32.93417358]
[86.12882996 -29.41799736]
[95.68080902 -19.89850998]
[99.29867554 -6.79478550]
[95.93077850 6.48726416]
[86.35585785 16.44009590]
[90.07500458 30.97171593]
[93.79415131 45.50333405]
[102.79006958 42.64175415]
[112.54327393 41.32243729]
[122.78099823 41.71331787]
[133.19650269 43.93300247]
[142.10658264 31.86607933]
[151.01664734 19.79915619]
[159.92672729 7.73223352]
[164.47119141 -8.60129356]
[181.42443848 -8.75599098]
[186.26620483 7.49188757]
[171.99363708 16.64230537]
[163.08357239 28.70922852]
[154.17349243 40.77614975]
[145.26342773 52.84307480]
[155.18527222 64.09282684]
[168.27095032 56.76035690]
[181.35662842 49.42788315]
[187.07411194 34.43822479]
[202.40145874 29.69989967]
[215.58085632 38.84774780]
[216.50218201 54.86432648]
[204.45867920 65.46308136]
[188.68908691 62.51355743]
[175.60342407 69.84603119]
[162.51774597 77.17849731]
[165.81527710 91.81155396]
[180.78117371 92.82264709]
[195.74705505 93.83374786]
[210.71293640 94.84484100]
[225.67881775 95.85593414]
[240.64469910 96.86703491]
[255.61058044 97.87812805]
[268.59085083 88.44986725]
[284.01626587 92.85854340]
[290.05374146 107.72220612]
[282.07186890 121.63871765]
[266.19366455 123.93251801]
[254.59948730 112.84400940]
[239.63360596 111.83291626]
[224.66772461 110.82182312]
[209.70184326 109.81072235]
[194.73596191 108.79962921]
[179.77006531 107.78853607]
[164.80418396 106.77743530]
[156.06820679 121.37163544]
[144.50808716 132.05352783]
[155.36712646 142.40155029]
[166.22615051 152.74955750]
[177.08518982 163.09757996]
[192.60476685 161.18009949]
[205.69778442 169.73036194]
[210.18212891 184.71116638]
[203.94041443 199.04905701]
[189.91979980 205.97410583]
[174.74038696 202.21653748]
[165.56942749 189.55053711]
[166.73716736 173.95660400]
[155.87814331 163.60859680]
[145.01910400 153.26057434]
[134.16007996 142.91256714]
[112.18938446 153.47726440]
[87.81061554 153.47726440]
[65.83992004 142.91256714]
[54.98089218 153.26057434]
[44.12185669 163.60859680]
[33.26282501 173.95660400]
[48.26085663 173.71357727]
[60.62234116 182.21025085]
[65.76890564 196.29971313]
[61.79439545 210.76358032]
[50.17086792 220.24479675]
[35.20337296 221.23178101]
[22.43548775 213.35897827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[19 32]
[20 31]
[22 30]
[23 29]
[24 28]
[50 155]
[51 154]
[52 153]
[53 152]
[61 89]
[62 88]
[63 87]
[67 82]
[68 81]
[69 80]
[70 79]
[93 103]
[94 102]
[95 101]
[96 100]
[104 114]
[105 113]
[106 112]
[115 133]
[116 132]
[117 131]
[118 130]
[119 129]
[120 128]
[121 127]
[135 149]
[136 148]
[137 147]
[138 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
