%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCCCAUUUCUGUGCUCAUCUGCCUCCUUGGCAAUAUAAAGAGCAAGCACUGAGGCCCCGCCUCAGAGCACCCCAAACUUGACGCCAUGAAGAUCCCGGUCCUUCCUGCCGUGGUGCUCCUCUCCCUCCUGGUGCUCCACUCUGCCCAGGGAGCCACCCUGGGUGGUCCUGAGGAAGAAAGCACCA\
) } def
/len { sequence length } bind def

/coor [
[84.76840973 112.19331360]
[70.35710144 116.35435486]
[55.94579697 120.51540375]
[55.81967545 128.05470276]
[54.24615860 135.41798401]
[51.28823853 142.33039856]
[47.06051254 148.53477478]
[41.72472000 153.80114746]
[35.48358536 157.93530273]
[28.57309723 160.78591919]
[21.25359726 162.25013733]
[13.79996395 162.27720642]
[6.49130058 160.87028503]
[-0.39952445 158.08616638]
[-6.61606264 154.03295898]
[-11.92782784 148.86592102]
[-25.00009155 156.22227478]
[-38.07235336 163.57862854]
[-51.14461899 170.93498230]
[-64.21688080 178.29133606]
[-65.45110321 198.22525024]
[-78.35884094 213.27684021]
[-97.59050751 217.47436523]
[-115.33470917 209.29037476]
[-127.89220428 217.49459839]
[-140.44970703 225.69882202]
[-153.00720215 233.90304565]
[-157.69349670 249.24638367]
[-172.66368103 255.01469421]
[-186.43389893 246.78300476]
[-188.44082642 230.86598206]
[-177.14491272 219.47378540]
[-161.21142578 221.34555054]
[-148.65393066 213.14132690]
[-136.09643555 204.93710327]
[-123.53893280 196.73287964]
[-125.31587982 186.50451660]
[-123.57314301 176.23143005]
[-118.48513794 167.09443665]
[-110.61225891 160.15235901]
[-100.83925629 156.21939087]
[-90.27584839 155.76965332]
[-80.13072968 158.88015747]
[-71.57323456 165.21907043]
[-58.50097275 157.86271667]
[-45.42870712 150.50636292]
[-32.35644531 143.15000916]
[-19.28417969 135.79365540]
[-21.15000725 125.19100189]
[-19.98899460 114.48821259]
[-33.51886368 108.01189423]
[-49.30710983 109.03259277]
[-57.44638443 96.55855560]
[-70.97625732 90.08224487]
[-84.50611877 83.60592651]
[-98.03598785 77.12961578]
[-111.56585693 70.65329742]
[-125.09572601 64.17697906]
[-138.62559509 57.70066452]
[-155.52288818 56.31579590]
[-158.86978149 39.69548798]
[-143.82550049 31.87843895]
[-132.14927673 44.17079926]
[-118.61941528 50.64711380]
[-105.08954620 57.12342834]
[-91.55967712 63.59974289]
[-78.02980804 70.07605743]
[-64.49993896 76.55237579]
[-50.97006989 83.02868652]
[-36.14957047 81.54476929]
[-27.04254913 94.48203278]
[-13.51268005 100.95834351]
[7.47039127 86.63682556]
[32.96260452 88.56722260]
[51.78475571 106.10409546]
[66.19606018 101.94305420]
[80.60736847 97.78200531]
[65.60776520 97.89193726]
[53.67942429 88.79718018]
[49.81415176 74.30374146]
[55.62950516 60.47689819]
[68.69185638 53.10295486]
[83.53481293 55.26778412]
[93.94685364 66.06544495]
[95.57041931 80.97852325]
[98.03933716 66.18310547]
[100.50825500 51.38768768]
[95.14791870 36.50221252]
[104.87452698 25.22204208]
[107.34344482 10.42662239]
[101.98310852 -4.45885134]
[111.70972443 -15.73902225]
[114.17864227 -30.53444099]
[116.64756012 -45.32986069]
[119.11647797 -60.12528229]
[107.61917114 -70.41194153]
[103.53044128 -85.28762054]
[108.15498352 -100.00553894]
[120.01712799 -109.86926270]
[135.33171082 -111.73131561]
[149.21189880 -104.99752045]
[157.22856140 -91.81661224]
[156.82363892 -76.39456177]
[148.12632751 -63.65249634]
[133.91189575 -57.65636063]
[131.44297791 -42.86094284]
[128.97406006 -28.06552315]
[126.50514221 -13.27010345]
[132.04206848 0.55710328]
[122.13887024 12.89554119]
[119.66995239 27.69096184]
[125.20688629 41.51816559]
[115.30367279 53.85660553]
[112.83475494 68.65202332]
[110.36583710 83.44744110]
[118.15038300 96.26933289]
[132.41622925 100.90458679]
[146.68208313 105.53984833]
[160.94792175 110.17510223]
[175.21377563 114.81035614]
[189.47961426 119.44561005]
[201.31697083 114.29358673]
[213.11117554 118.46109009]
[218.71186829 129.19567871]
[232.89912415 134.06617737]
[247.08639526 138.93666077]
[262.65112305 136.09950256]
[272.17651367 147.55010986]
[286.36376953 152.42060852]
[300.55102539 157.29109192]
[314.73828125 162.16159058]
[326.65917969 157.20599365]
[338.38287354 161.56793213]
[343.80532837 172.39366150]
[357.91012573 177.49804688]
[367.06292725 177.47753906]
[372.20474243 182.80520630]
[386.22320557 188.14212036]
[400.24166870 193.47901917]
[394.14584351 179.77351379]
[398.15179443 165.31832886]
[410.43267822 156.70553589]
[425.38793945 157.86286926]
[436.19754028 168.26252747]
[437.93185425 183.16192627]
[429.79998779 195.76641846]
[415.51119995 200.32794189]
[428.81954956 207.24804688]
[442.12786865 214.16816711]
[455.43621826 221.08828735]
[468.74456787 228.00840759]
[482.05291748 234.92852783]
[495.36126709 241.84864807]
[508.66958618 248.76875305]
[524.33935547 245.32806396]
[536.70806885 255.54542542]
[536.28753662 271.58297729]
[523.40032959 281.13806152]
[507.93243408 276.88082886]
[501.74948120 262.07708740]
[488.44113159 255.15698242]
[475.13278198 248.23686218]
[461.82446289 241.31674194]
[448.51611328 234.39663696]
[435.20776367 227.47651672]
[421.89941406 220.55639648]
[408.59109497 213.63627625]
[394.90475464 207.49748230]
[380.88629150 202.16058350]
[366.86782837 196.82366943]
[352.80572510 191.60284424]
[338.70092773 186.49844360]
[321.62457275 190.51054382]
[309.86779785 176.34884644]
[295.68054199 171.47836304]
[281.49325562 166.60786438]
[267.30599976 161.73736572]
[252.75604248 164.92291260]
[242.21589661 153.12393188]
[228.02864075 148.25343323]
[213.84138489 143.38293457]
[196.83369446 147.67683411]
[184.84436035 133.71145630]
[170.57852173 129.07620239]
[156.31266785 124.44094849]
[142.04682922 119.80569458]
[127.78097534 115.17044067]
[113.51512909 110.53518677]
[105.42128754 117.08844757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[24 36]
[25 35]
[26 34]
[27 33]
[50 72]
[51 71]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[85 115]
[86 114]
[87 113]
[89 111]
[90 110]
[92 108]
[93 107]
[94 106]
[95 105]
[116 188]
[117 187]
[118 186]
[119 185]
[120 184]
[121 183]
[124 181]
[125 180]
[126 179]
[128 177]
[129 176]
[130 175]
[131 174]
[134 172]
[135 171]
[137 170]
[138 169]
[139 168]
[147 167]
[148 166]
[149 165]
[150 164]
[151 163]
[152 162]
[153 161]
[154 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
