%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCAGGGAGUGUCCACCCAGCCCUGAGCCCGUCGUGAGGGGUCAGAGAUGGCGCUGACCCCCGAGUCCCCGAGCAGCUUCCCUGGGCUGGCCGCCACUGGCAGCUCUGUGCCGGAGCCGCCUGGCGGCCCCAACGCAACCCUCAACA\
) } def
/len { sequence length } bind def

/coor [
[84.48806763 284.25872803]
[76.55737305 271.10577393]
[76.28169250 255.74937439]
[83.73519135 242.32026672]
[96.91291809 234.43083191]
[96.59667206 219.43417358]
[96.28043365 204.43750000]
[95.96418762 189.44084167]
[86.06562042 174.98495483]
[94.97887421 158.90759277]
[94.34652710 143.92092896]
[93.71417999 128.93426514]
[93.08183289 113.94759369]
[84.33624268 126.13425446]
[69.44017029 127.89695740]
[58.09177780 118.08808136]
[57.67948532 103.09375000]
[68.47171783 92.67608643]
[83.44174194 93.61735535]
[72.23831177 83.64322662]
[61.03488541 73.66909790]
[49.83145905 63.69497681]
[38.62802887 53.72085190]
[27.42459869 43.74672699]
[6.24214649 40.81166077]
[0.34853408 21.07037735]
[-11.46296787 11.82438183]
[-23.27446938 2.57838726]
[-35.08597183 -6.66760731]
[-49.93351364 -2.56191754]
[-64.18506622 -7.92351294]
[-72.44905090 -20.50010109]
[-71.73138428 -35.35348129]
[-83.54288483 -44.59947586]
[-95.35438538 -53.84547043]
[-107.72672272 -62.32635498]
[-120.61039734 -70.00820923]
[-129.65069580 -71.73517609]
[-133.68229675 -77.99027252]
[-146.40115356 -85.94203949]
[-159.12001038 -93.89380646]
[-171.83888245 -101.84557343]
[-184.55773926 -109.79734802]
[-197.27659607 -117.74911499]
[-209.99545288 -125.70088196]
[-222.71430969 -133.65264893]
[-237.05189514 -127.71856689]
[-252.13130188 -131.37794495]
[-262.15420532 -143.22366333]
[-263.26657104 -158.70082092]
[-255.04069519 -171.85812378]
[-240.63958740 -177.63632202]
[-225.60075378 -173.81358337]
[-215.70695496 -161.85981750]
[-214.76254272 -146.37150574]
[-202.04368591 -138.41973877]
[-189.32482910 -130.46797180]
[-176.60597229 -122.51620483]
[-163.88710022 -114.56443787]
[-151.16824341 -106.61266327]
[-138.44938660 -98.66089630]
[-125.73052979 -90.70912933]
[-112.92855072 -82.89188385]
[-100.04486847 -75.21003723]
[-102.21967316 -90.05153656]
[-93.42001343 -102.19921112]
[-78.64001465 -104.75880432]
[-66.26786041 -96.27766418]
[-63.32519531 -81.56913757]
[-71.48209381 -68.98085022]
[-86.10839081 -65.65697479]
[-74.29689026 -56.41098022]
[-62.48538971 -47.16498566]
[-48.23881912 -51.42799759]
[-34.04592133 -46.42543030]
[-25.41932869 -33.87810898]
[-25.83997726 -18.47910881]
[-14.02847576 -9.23311520]
[-2.21697354 0.01287971]
[9.59452915 9.25887394]
[18.23073769 6.73834562]
[27.18599701 8.54034233]
[34.39005280 14.37904358]
[38.11720657 23.02082825]
[37.39872360 32.54329681]
[48.60215378 42.51742172]
[59.80558395 52.49154663]
[71.00901031 62.46567154]
[82.21244049 72.43979645]
[93.41587067 82.41392517]
[121.92375183 81.55092621]
[136.88293457 80.44499207]
[151.84210205 79.33906555]
[166.80128479 78.23313141]
[181.76045227 77.12719727]
[196.71961975 76.02126312]
[211.67880249 74.91532898]
[217.44476318 71.46164703]
[223.21324158 71.48670959]
[227.28958130 74.09170532]
[242.28207397 73.61738586]
[257.27456665 73.14305878]
[270.82318115 64.97324371]
[283.78875732 72.30422211]
[298.78125000 71.82990265]
[313.77374268 71.35557556]
[328.76623535 70.88125610]
[343.75875854 70.40692902]
[358.75125122 69.93260956]
[374.39126587 63.38843536]
[385.00927734 76.60562897]
[375.24798584 90.46756744]
[359.22555542 84.92510986]
[344.23306274 85.39942932]
[329.24057007 85.87375641]
[314.24807739 86.34807587]
[299.25558472 86.82239532]
[284.26306152 87.29672241]
[271.78683472 95.43260956]
[257.74890137 88.13555908]
[242.75639343 88.60987854]
[227.76390076 89.08420563]
[212.78472900 89.87450409]
[197.82556152 90.98043823]
[182.86637878 92.08637238]
[167.90721130 93.19230652]
[152.94802856 94.29824066]
[137.98886108 95.40416718]
[123.02968597 96.51010132]
[136.89186096 102.24073029]
[140.24853516 116.86033630]
[130.27442932 128.06378174]
[115.36463165 126.42129517]
[108.06849670 113.31524658]
[108.70084381 128.30191040]
[109.33319092 143.28857422]
[109.96553802 158.27523804]
[118.94091034 167.59983826]
[119.12271118 180.13917542]
[110.96085358 189.12458801]
[111.27709961 204.12126160]
[111.59333801 219.11791992]
[111.90958405 234.11459351]
[125.40818787 241.44148254]
[133.42118835 254.54443359]
[133.79312134 269.89883423]
[126.42395782 283.37438965]
[113.29595184 291.34628296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 143]
[6 142]
[7 141]
[8 140]
[10 137]
[11 136]
[12 135]
[13 134]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[26 80]
[27 79]
[28 78]
[29 77]
[33 73]
[34 72]
[35 71]
[36 64]
[37 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[91 129]
[92 128]
[93 127]
[94 126]
[95 125]
[96 124]
[97 123]
[100 122]
[101 121]
[102 120]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
