%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCGGCACCGCCGAGCCGCCGCCAUUGCUGGAAGCGUUCCCGCCCUGCUCUGCGAGUUCCCUCAGUUGUCCUCAGUUCGGCCGCCAGGUAUGUCUUUGCAAGACUCCACUCUUUCCAGAGAGGGGAAACCAGAGGGAGAGAUUAUGGCUGCUGUGUUUUUCUCAGUUGGACGCCUGAGCCCUGAAGUUA\
) } def
/len { sequence length } bind def

/coor [
[102.07991791 148.95452881]
[98.39726257 134.41362000]
[100.37921906 119.54337311]
[94.89369202 133.50436401]
[89.40816498 147.46533203]
[84.03644562 161.47050476]
[78.77889252 175.51892090]
[73.52133179 189.56733704]
[68.26377869 203.61575317]
[68.37487030 220.56935120]
[52.11458969 225.36930847]
[43.00091171 211.07325745]
[54.21535492 198.35820007]
[59.47291183 184.30978394]
[64.73046875 170.26136780]
[69.98802948 156.21295166]
[69.38713074 148.83528137]
[75.44718933 141.97981262]
[80.93271637 128.01882935]
[86.41823578 114.05784607]
[76.47843170 102.82395935]
[61.95333481 106.56849670]
[47.45919418 110.43112946]
[32.99697113 114.41159058]
[18.53474617 118.39205933]
[14.65201664 131.62655640]
[4.81222105 141.13603210]
[-8.33730316 144.51092529]
[-21.33153725 140.97241211]
[-30.80078316 131.54907227]
[-45.32588196 135.29360962]
[-56.75762939 146.23095703]
[-71.01345825 141.91580200]
[-85.53855896 145.66033936]
[-90.53568268 150.02667236]
[-96.14547729 151.04875183]
[-100.59745026 149.28215027]
[-115.23673248 152.55191040]
[-129.87602234 155.82167053]
[-141.57643127 167.31221008]
[-157.30319214 162.66450500]
[-160.87794495 146.65971375]
[-148.62330627 135.76220703]
[-133.14578247 141.18238831]
[-118.50650024 137.91262817]
[-103.86721802 134.64286804]
[-89.28309631 131.13523865]
[-74.75799561 127.39070892]
[-64.36518097 116.72119141]
[-49.07041550 120.76850891]
[-34.54531860 117.02397156]
[-29.01475525 101.57527161]
[-15.23072433 92.37043762]
[1.48984313 93.19802094]
[14.55428219 103.92983246]
[29.01650620 99.94937134]
[43.47872925 95.96890259]
[49.10202789 91.15543365]
[58.20879745 92.04340363]
[72.73389435 88.29886627]
[82.22012329 82.54084015]
[91.71094513 81.61548615]
[99.18865967 84.60660553]
[103.33654785 89.87273407]
[114.57043457 79.93292236]
[125.80432129 69.99311829]
[137.03820801 60.05331039]
[148.27209473 50.11349869]
[153.48023987 35.17409897]
[168.13917542 32.53498459]
[179.37306213 22.59517670]
[190.60694885 12.65536785]
[201.84083557 2.71555924]
[213.07472229 -7.22424936]
[205.54331970 -25.95801926]
[205.67666626 -46.11872864]
[213.43223572 -64.69615173]
[227.63108826 -78.92503357]
[246.13703918 -86.69673920]
[266.17803955 -86.87165070]
[284.76141357 -79.44628906]
[294.60946655 -90.76070404]
[304.45751953 -102.07511139]
[314.30557251 -113.38952637]
[317.52966309 -128.87873840]
[331.72180176 -133.39901733]
[341.56985474 -144.71342468]
[351.41790771 -156.02784729]
[361.26596069 -167.34225464]
[358.79437256 -180.59181213]
[364.32876587 -192.66738892]
[375.64242554 -199.24887085]
[388.48736572 -198.12454224]
[398.51828003 -209.27716064]
[401.99407959 -224.71183777]
[416.25790405 -229.00051880]
[426.28881836 -240.15313721]
[436.31973267 -251.30575562]
[446.35064697 -262.45837402]
[456.38156128 -273.61099243]
[448.82217407 -287.62780762]
[446.52062988 -303.35879517]
[449.73675537 -318.90121460]
[458.06405640 -332.38134766]
[470.48110962 -342.18066406]
[485.47665405 -347.12988281]
[501.23367310 -346.64862061]
[515.84942627 -340.81341553]
[525.69750977 -352.12780762]
[535.54553223 -363.44223022]
[538.76965332 -378.93142700]
[552.96179199 -383.45172119]
[562.80981445 -394.76614380]
[572.65789795 -406.08053589]
[582.50592041 -417.39495850]
[592.35400391 -428.70938110]
[594.96051025 -444.90005493]
[610.37951660 -450.48443604]
[622.74932861 -439.71780396]
[619.34484863 -423.67593384]
[603.66839600 -418.86132812]
[593.82031250 -407.54690552]
[583.97229004 -396.23248291]
[574.12426758 -384.91809082]
[564.27618408 -373.60366821]
[561.75646973 -358.92373657]
[546.85992432 -353.59417725]
[537.01190186 -342.27975464]
[527.16387939 -330.96536255]
[534.39477539 -318.78573608]
[537.51324463 -304.94692993]
[536.20117188 -290.80038452]
[530.57373047 -277.73175049]
[521.16949463 -267.02526855]
[508.89889526 -259.73745728]
[494.95596313 -256.59298706]
[480.70233154 -257.91250610]
[467.53417969 -263.58007812]
[457.50326538 -252.42745972]
[447.47235107 -241.27484131]
[437.44143677 -230.12222290]
[427.41052246 -218.96961975]
[424.65219116 -204.33264160]
[409.67089844 -199.24624634]
[399.63998413 -188.09362793]
[401.24990845 -171.35992432]
[390.04412842 -158.37904358]
[372.58035278 -157.49420166]
[362.73229980 -146.17979431]
[352.88424683 -134.86538696]
[343.03622437 -123.55097198]
[340.51647949 -108.87104034]
[325.61996460 -103.54147339]
[315.77191162 -92.22706604]
[305.92385864 -80.91265106]
[296.07583618 -69.59823608]
[301.98974609 -61.19437408]
[306.13003540 -51.78139114]
[308.33099365 -41.72906494]
[308.50314331 -31.43288803]
[306.63684082 -21.29853058]
[302.80285645 -11.72584248]
[297.14965820 -3.09307647]
[289.89761353 4.25805092]
[281.33050537 10.03588867]
[271.78430176 14.01042366]
[261.63409424 16.02243233]
[251.27929688 15.98985958]
[241.12792969 13.91116333]
[231.58056641 9.86548424]
[223.01452637 4.00963688]
[211.78063965 13.94944572]
[200.54675293 23.88925362]
[189.31288147 33.82906342]
[178.07899475 43.76887131]
[173.67436218 57.99731064]
[158.21189880 61.34738541]
[146.97801208 71.28719330]
[135.74412537 81.22700500]
[124.51023865 91.16680908]
[113.27635193 101.10662079]
[126.56395721 94.14675903]
[141.48603821 92.61987305]
[155.90783691 96.74440002]
[167.76614380 105.93028259]
[175.36451721 118.86337280]
[177.61589050 133.69345093]
[174.19821167 148.29891968]
[165.60038757 160.59027100]
[153.05245972 168.80912781]
[138.34953308 171.77966309]
[123.59504700 169.07691956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 16]
[7 15]
[8 14]
[9 13]
[21 60]
[22 59]
[23 57]
[24 56]
[25 55]
[30 51]
[31 50]
[33 48]
[34 47]
[37 46]
[38 45]
[39 44]
[64 181]
[65 180]
[66 179]
[67 178]
[68 177]
[70 175]
[71 174]
[72 173]
[73 172]
[74 171]
[81 156]
[82 155]
[83 154]
[84 153]
[86 151]
[87 150]
[88 149]
[89 148]
[93 145]
[94 144]
[96 142]
[97 141]
[98 140]
[99 139]
[100 138]
[108 129]
[109 128]
[110 127]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
