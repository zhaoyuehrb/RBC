%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUUUUUUAAAAACGCUGUUGGAAAUCUCGCGAUGGAGGGAGGAGGAGGUAUACCCCUAGAAACACUUAAAGAAGAAAGUCAGUCAAGACAUGUUCUACCUGCAAGUUUUGAAGUCAACAGUUUGCAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[89.44432068 389.85964966]
[75.17150116 394.64208984]
[60.22811508 396.45318604]
[45.22607803 395.21878052]
[30.77971458 390.98941040]
[17.48059273 383.93829346]
[5.87330627 374.35415649]
[-3.56683636 362.62945557]
[-10.45326614 349.24432373]
[-14.50398827 334.74685669]
[-15.55312824 319.73071289]
[-13.55772400 304.81082153]
[-8.59948635 290.59814453]
[-0.88145250 277.67462158]
[9.28032970 266.56954956]
[21.46974182 257.73760986]
[35.18763351 251.54048157]
[49.87226486 248.23194885]
[64.92231750 247.94747925]
[67.65866852 233.19917297]
[70.39501953 218.45086670]
[73.13137054 203.70257568]
[75.86772156 188.95426941]
[78.60407257 174.20596313]
[81.34042358 159.45767212]
[84.07677460 144.70936584]
[71.83117676 138.19677734]
[61.99128342 128.42207336]
[55.39745331 116.22003174]
[52.61281586 102.63274384]
[37.69260788 101.08763123]
[22.77239990 99.54251099]
[7.85219145 97.99739075]
[-4.25525951 108.15540314]
[-19.99181175 106.69372559]
[-30.02124596 94.47955322]
[-28.39327812 78.75933838]
[-16.07375336 68.85959625]
[-0.37162501 70.65367889]
[9.39731121 83.07717896]
[24.31751823 84.62229919]
[39.23772812 86.16741943]
[54.15793610 87.71253967]
[54.69133377 81.31349182]
[56.13349152 74.85674286]
[58.50672531 68.47281647]
[61.81447983 62.29680634]
[66.04056549 56.46564484]
[57.33546829 44.25003052]
[48.63037109 32.03441238]
[41.03265381 26.80320168]
[39.86951065 19.43741035]
[31.44679642 7.02540350]
[16.45945549 0.36870795]
[14.99995804 -15.96536446]
[28.56971169 -25.17371941]
[43.20931625 -17.78359032]
[43.85880280 -1.39731026]
[52.28151703 11.01469612]
[60.84598541 23.32931519]
[69.55108643 35.54492950]
[78.25617981 47.76054764]
[85.69660950 46.81713486]
[83.80979156 31.93627739]
[81.92321014 17.05538940]
[96.80413055 15.16906071]
[98.69064331 30.04945564]
[100.57746887 44.93031311]
[108.01789856 43.98690033]
[113.39876556 29.98524857]
[118.77964020 15.98359776]
[124.16050720 1.98194706]
[115.60163116 -10.96120548]
[116.31877899 -26.46170044]
[126.03619385 -38.55928040]
[141.01733398 -42.60218048]
[155.50164795 -37.03582001]
[163.91961670 -24.00058174]
[163.03436279 -8.50877953]
[153.18627930 3.48267317]
[138.16215515 7.36281776]
[132.78129578 21.36446953]
[127.40042114 35.36611938]
[122.01954651 49.36777115]
[132.32984924 57.65625763]
[140.02001953 67.84644318]
[144.79879761 79.18471527]
[146.57826233 90.89277649]
[161.56939697 90.37692261]
[176.56051636 89.86106873]
[191.55165100 89.34521484]
[206.54277039 88.82936096]
[221.53390503 88.31350708]
[236.52502441 87.79765320]
[250.05094910 79.59033966]
[263.03677368 86.88536835]
[278.02792358 86.36952209]
[293.01904297 85.85366821]
[302.50961304 73.42534637]
[317.77981567 70.05558777]
[331.61950684 77.33548737]
[337.49401855 91.82769775]
[332.62957764 106.68943787]
[319.32302856 114.90345001]
[303.85733032 112.59133148]
[293.53488159 100.84479523]
[278.54376221 101.36064911]
[263.55264282 101.87650299]
[251.09898376 110.04691315]
[237.04087830 102.78878021]
[222.04975891 103.30463409]
[207.05862427 103.82048798]
[192.06750488 104.33634186]
[177.07637024 104.85219574]
[162.08525085 105.36804962]
[147.09411621 105.88390350]
[138.77207947 127.37155914]
[121.31031799 142.40692139]
[98.82507324 147.44572449]
[96.08872223 162.19401550]
[93.35237122 176.94232178]
[90.61602020 191.69062805]
[87.87966919 206.43891907]
[85.14331818 221.18722534]
[82.40696716 235.93551636]
[79.67061615 250.68382263]
[93.61693573 256.34817505]
[106.13735962 264.70425415]
[116.71916962 275.40988159]
[124.92906189 288.02664185]
[130.43084717 302.03787231]
[132.99920654 316.86990356]
[132.52899170 331.91528320]
[129.03945923 346.55795288]
[122.67349243 360.19830322]
[113.69177246 372.27777100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[30 43]
[31 42]
[32 41]
[33 40]
[48 62]
[49 61]
[50 60]
[52 59]
[53 58]
[69 84]
[70 83]
[71 82]
[72 81]
[88 116]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[96 108]
[97 107]
[98 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
