%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCAAACUCACCACCUGGCCGUGGACACCUGUGUCAGCAUGUGGGACCUGGUUCUCUCCAUCGCCUUGUCUGUGGGGUGCACUGGUGCCGUGCCCCUCAUCCAGUCUCGGAUUGUGGGAGGCUGGGAGUGUGAGAAGC\
) } def
/len { sequence length } bind def

/coor [
[98.57817078 297.21578979]
[83.97939301 301.45181274]
[68.87136841 299.77374268]
[55.55796051 292.43740845]
[46.06937027 280.56158447]
[41.85254288 265.95724487]
[43.55050659 250.85144043]
[50.90433884 237.54769897]
[62.79262924 228.07473755]
[77.40250397 223.87712097]
[79.05841827 208.96879578]
[80.71432495 194.06048584]
[82.37023926 179.15216064]
[84.02614594 164.24385071]
[81.61930084 157.19294739]
[85.88714600 149.02536011]
[87.87245178 134.15731812]
[73.82387543 125.07210541]
[65.35209656 110.64530182]
[64.26200867 93.95053101]
[50.31048203 88.44100952]
[36.35895538 82.93148804]
[20.68146515 85.05913544]
[11.68572712 73.18791199]
[-2.26580095 67.67839050]
[-16.21732903 62.16886520]
[-30.16885757 56.65933990]
[-44.12038803 51.14981842]
[-65.00760651 55.70030975]
[-77.36664581 39.22473907]
[-91.65286255 34.65265274]
[-105.93908691 30.08056450]
[-123.79461670 34.42952728]
[-135.12576294 21.07330322]
[-149.50962830 16.81837654]
[-164.93772888 20.32328224]
[-174.94743347 9.29355526]
[-189.33131409 5.03862858]
[-203.71517944 0.78370190]
[-218.44108582 7.14978218]
[-232.53141785 -0.52107430]
[-235.17727661 -16.34444427]
[-224.34898376 -28.18198967]
[-208.35307312 -26.95296288]
[-199.46025085 -13.60016441]
[-185.07638550 -9.34523773]
[-170.69252014 -5.09031057]
[-156.29324341 -8.89955616]
[-145.25469971 2.43451142]
[-130.87083435 6.68943787]
[-120.04575348 1.18092299]
[-107.99196625 4.66748714]
[-101.36699677 15.79434681]
[-87.08078003 20.36643410]
[-72.79456329 24.93852043]
[-65.55323029 19.56671333]
[-56.50830078 18.15363121]
[-47.71155167 21.14985657]
[-41.21905899 27.99080849]
[-38.61086273 37.19828796]
[-24.65933418 42.70781326]
[-10.70780563 48.21733475]
[3.24372292 53.72686005]
[17.19525146 59.23638535]
[31.87483406 56.71465302]
[41.86847687 68.97995758]
[55.82000732 74.48947906]
[69.77153778 79.99900818]
[75.67472076 72.15261078]
[83.60932922 66.04412079]
[93.06469727 62.19681168]
[103.39648438 60.98423004]
[113.87041473 62.59641266]
[123.71451569 67.01890564]
[132.17593384 74.02659607]
[142.89921570 63.53797150]
[153.62249756 53.04934311]
[164.34577942 42.56071854]
[175.06906128 32.07209396]
[185.79232788 21.58346748]
[190.24763489 6.40252924]
[204.75640869 3.03437257]
[215.47969055 -7.45425272]
[226.20297241 -17.94287872]
[236.92625427 -28.43150330]
[235.55543518 -44.00888824]
[244.56057739 -56.79330444]
[259.68972778 -60.74834824]
[273.79940796 -54.00656509]
[280.22738647 -39.75122070]
[275.93862915 -24.71325111]
[262.95812988 -15.99312687]
[247.41488647 -17.70822334]
[236.69160461 -7.21959829]
[225.96832275 3.26902723]
[215.24504089 13.75765228]
[211.55674744 28.18837357]
[196.28096008 32.30674744]
[185.55767822 42.79537201]
[174.83439636 53.28400040]
[164.11111450 63.77262497]
[153.38784790 74.26125336]
[142.66456604 84.74987793]
[145.30558777 99.51554108]
[158.99975586 105.63679504]
[172.69392395 111.75804901]
[186.38809204 117.87930298]
[200.08226013 124.00056458]
[213.77642822 130.12181091]
[227.47059631 136.24307251]
[241.16476440 142.36431885]
[254.01899719 133.83364868]
[269.44500732 133.62956238]
[282.52041626 141.81718445]
[289.07290649 155.78387451]
[287.01162720 171.07290649]
[276.99426270 182.80561829]
[262.21737671 187.23812866]
[247.39620972 182.95605469]
[237.26011658 171.32579041]
[235.04351807 156.05848694]
[221.34934998 149.93724060]
[207.65518188 143.81597900]
[193.96101379 137.69473267]
[180.26684570 131.57347107]
[166.57267761 125.45221710]
[152.87850952 119.33096313]
[139.18434143 113.20970917]
[129.93540955 125.99909210]
[117.03936768 133.90730286]
[102.74049377 136.14262390]
[100.75518799 151.01066589]
[98.93446350 165.89974976]
[97.27855682 180.80807495]
[95.62264252 195.71640015]
[93.96673584 210.62471008]
[92.31082153 225.53303528]
[105.64348602 232.83430481]
[115.16328430 244.68511963]
[119.41852570 259.27832031]
[117.76030731 274.38854980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[16 132]
[17 131]
[20 68]
[21 67]
[22 66]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[30 55]
[31 54]
[32 53]
[34 50]
[35 49]
[37 47]
[38 46]
[39 45]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[82 96]
[83 95]
[84 94]
[85 93]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
