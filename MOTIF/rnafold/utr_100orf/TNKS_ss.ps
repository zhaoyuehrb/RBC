%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAGAUGGCGGCGUCGCGUCGCUCUCAGCAUCAUCACCACCAUCAUCAACAACAGCUCCAGCCCGCCCCAGGGGCUUCAGCGCCGCCGCCGCCACCUCCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.10438538 430.08450317]
[99.17986298 414.77917480]
[106.36968231 401.26751709]
[119.02165985 392.65435791]
[117.24755859 377.75964355]
[108.05927277 366.03683472]
[114.11007690 351.41839600]
[112.33597565 336.52368164]
[110.56188202 321.62896729]
[108.78778076 306.73425293]
[107.01368713 291.83953857]
[105.23958588 276.94482422]
[103.46549225 262.05010986]
[101.69139099 247.15539551]
[98.43072510 243.46597290]
[97.56127167 237.64268494]
[100.28051758 231.32914734]
[99.39190674 216.35549927]
[98.50329590 201.38183594]
[90.02561188 189.13528442]
[96.93179321 174.90098572]
[96.04318237 159.92733765]
[95.15457153 144.95367432]
[94.26596832 129.98002625]
[79.94498444 123.01036835]
[71.08433533 109.77574158]
[70.09648895 93.87949371]
[77.25039673 79.64966583]
[68.87069702 67.20858002]
[60.49099350 54.76749039]
[46.39017105 60.08383560]
[31.44332695 62.00440216]
[16.45652771 60.42562103]
[2.23799014 55.43263245]
[-10.44549561 47.29470444]
[-20.90992546 36.45069885]
[-28.59096718 23.48542595]
[-33.07439041 9.09808254]
[-34.11841202 -5.93543816]
[-31.66672707 -20.80439758]
[-25.85155106 -34.70693207]
[-16.98649216 -46.89329529]
[-5.54962921 -56.70629120]
[7.84226084 -63.61671829]
[22.46697044 -67.25190735]
[37.53580856 -67.41580963]
[52.23612976 -64.09959412]
[65.77516174 -57.48210144]
[77.42276764 -47.92020035]
[86.55081177 -35.92955017]
[92.66701508 -22.15679741]
[95.44154358 -7.34468460]
[94.72477722 7.70798874]
[90.55536652 22.18944931]
[83.15815735 35.31873322]
[72.93207550 46.38779068]
[81.31178284 58.82887650]
[89.69148254 71.26995850]
[100.11347961 69.47676849]
[110.52185822 71.34740448]
[119.66725159 76.65734100]
[131.85455322 67.91264343]
[144.04185486 59.16795349]
[156.22915649 50.42326355]
[168.41647339 41.67856979]
[169.41925049 26.07317162]
[180.25570679 14.79907894]
[195.80920410 13.17957306]
[208.73583984 21.97933578]
[212.93208313 37.04338837]
[206.41656494 51.25894547]
[192.26571655 57.91385269]
[177.16116333 53.86587524]
[164.97386169 62.61056519]
[152.78656006 71.35525513]
[140.59924316 80.09995270]
[128.41194153 88.84464264]
[130.07479858 105.21409607]
[122.99864197 120.06846619]
[109.23962402 129.09141541]
[110.12822723 144.06506348]
[111.01683807 159.03872681]
[111.90544891 174.01237488]
[120.44669342 187.32995605]
[113.47695160 200.49322510]
[114.36556244 215.46688843]
[115.25417328 230.44055176]
[116.58610535 245.38128662]
[118.36020660 260.27600098]
[120.13430023 275.17071533]
[121.90840149 290.06542969]
[123.68249512 304.96014404]
[125.45659637 319.85488892]
[127.23069763 334.74960327]
[129.00479126 349.64431763]
[138.31997681 362.43249512]
[132.14227295 375.98556519]
[133.91636658 390.88027954]
[148.23748779 396.28067017]
[158.39985657 407.72552490]
[162.06823730 422.58493042]
[158.39965820 437.44427490]
[148.23713684 448.88897705]
[133.91593933 454.28918457]
[118.72698975 452.40393066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[17 87]
[18 86]
[19 85]
[21 83]
[22 82]
[23 81]
[24 80]
[28 58]
[29 57]
[30 56]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
