%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAGGCCUCCUCAUGGAUGGGUCAAACGUGACAUCAUUUGUUGUUGAGGAACCCACGAACAUCUCAACUGGCAGGAACGCCUCAGUCGGGAAUGCACAUCGGCAAAUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[208.00285339 245.02516174]
[211.21290588 233.41056824]
[201.43229675 222.03781128]
[191.65167236 210.66505432]
[181.87106323 199.29229736]
[172.09045410 187.91954041]
[162.30982971 176.54678345]
[152.52922058 165.17402649]
[135.71653748 160.35098267]
[132.29356384 142.32203674]
[122.20596313 131.22067261]
[112.11835480 120.11931610]
[102.03074646 109.01795959]
[98.76839447 112.02166748]
[93.83671570 113.59342957]
[87.89941406 113.00821686]
[81.89537048 109.84231567]
[66.89676666 109.63743591]
[51.89816666 109.43255615]
[36.89956665 109.22767639]
[21.90096474 109.02279663]
[6.90236378 108.81791687]
[-8.09763622 108.81791687]
[-23.09623718 109.02279663]
[-38.09483719 109.22767639]
[-53.09343719 109.43255615]
[-66.89760590 118.28562927]
[-81.34048462 110.51805115]
[-81.56447601 94.12042999]
[-67.33915710 85.96124268]
[-53.29831696 94.43395996]
[-38.29971695 94.22907257]
[-23.30111694 94.02419281]
[-8.30251598 93.81931305]
[-1.56616294 90.53700256]
[7.10724401 93.81931305]
[22.10584450 94.02419281]
[37.10444641 94.22907257]
[52.10304642 94.43395996]
[67.10164642 94.63883972]
[82.10025024 94.84371948]
[92.92192078 84.45664215]
[93.33164215 69.46223450]
[93.74136353 54.46783447]
[93.94624329 39.46923447]
[93.94624329 24.46923256]
[93.94624329 9.46923351]
[93.94624329 -5.53076649]
[93.94624329 -20.53076744]
[93.94624329 -35.53076553]
[93.94624329 -50.53076553]
[80.17237854 -57.10673141]
[70.62245178 -69.01309967]
[67.19261169 -83.88585663]
[70.56385803 -98.77201080]
[80.06682587 -110.71589661]
[93.81468964 -117.34604645]
[109.07780457 -117.34604645]
[122.82566833 -110.71589661]
[132.32864380 -98.77201080]
[135.69987488 -83.88585663]
[132.27003479 -69.01309967]
[122.72011566 -57.10673141]
[108.94624329 -50.53076553]
[108.94624329 -35.53076553]
[108.94624329 -20.53076744]
[108.94624329 -5.53076649]
[108.94624329 9.46923351]
[108.94624329 24.46923256]
[108.94624329 39.46923447]
[112.13623810 46.24979019]
[108.73577118 54.87755585]
[108.32604980 69.87195587]
[107.91632843 84.86636353]
[113.13210297 98.93035126]
[123.21971130 110.03170776]
[133.30731201 121.13306427]
[143.39492798 132.23442078]
[156.30355835 133.65713501]
[164.47706604 143.22550964]
[163.90197754 155.39341736]
[173.68258667 166.76617432]
[183.46321106 178.13893127]
[193.24382019 189.51168823]
[203.02442932 200.88444519]
[212.80505371 212.25720215]
[222.58566284 223.62995911]
[241.41362000 224.23767090]
[253.71566772 238.08428955]
[252.15646362 256.22387695]
[262.54354858 267.04556274]
[272.93060303 277.86721802]
[283.31768799 288.68890381]
[301.07101440 293.33422852]
[304.73547363 310.43685913]
[315.41427612 320.97079468]
[326.09307861 331.50469971]
[341.89328003 331.14614868]
[353.26138306 342.12530518]
[353.45285034 357.92843628]
[342.35412598 369.17980957]
[326.54986572 369.20419312]
[315.41644287 357.98712158]
[315.55914307 342.18350220]
[304.88037109 331.64956665]
[294.20156860 321.11566162]
[282.02279663 320.85903931]
[273.03448486 312.05160522]
[272.49600220 299.07598877]
[262.10894775 288.25430298]
[251.72186279 277.43261719]
[241.33479309 266.61096191]
[229.98941040 268.86471558]
[218.86962891 265.26535034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[10 78]
[11 77]
[12 76]
[13 75]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 34]
[24 33]
[25 32]
[26 31]
[42 74]
[43 73]
[44 72]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[90 112]
[91 111]
[92 110]
[93 109]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
