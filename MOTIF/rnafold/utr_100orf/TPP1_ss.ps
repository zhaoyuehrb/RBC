%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGUGGAAUAUAGAGCUCAUGUGAUCCGUCACAUGACAGCAGAUCCGCGGAAGGGCAGAAUGGGACUCCAAGCCUGCCUCCUAGGGCUCUUUGCCCUCAUCCUCUCUGGCAAAUGCAGUUACAGCCCGGAGCCCGACCAGCGGAGGACGCUGCCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[114.27845764 217.20463562]
[106.59380341 202.71745300]
[115.52587891 188.96427917]
[115.81674957 173.96710205]
[116.10762024 158.96990967]
[113.07826233 152.18795776]
[116.55235291 143.68550110]
[117.13397980 128.69677734]
[110.82815552 124.63641357]
[103.13175201 137.51141357]
[95.43534851 150.38639832]
[93.94692230 165.31236267]
[80.43785858 171.83197021]
[67.82658386 163.71064758]
[68.17299652 148.71464539]
[81.14438629 141.18434143]
[89.68045044 128.85002136]
[98.21650696 116.51568604]
[91.91068268 112.45531464]
[78.50619507 119.18730927]
[65.10170746 125.91929626]
[51.69721603 132.65127563]
[38.29272461 139.38327026]
[24.88823509 146.11524963]
[11.48374557 152.84724426]
[-1.92074418 159.57923889]
[-10.47524643 173.57038879]
[-26.86015320 172.88711548]
[-34.22007751 158.23229980]
[-24.98375893 144.68156433]
[-8.65273190 146.17474365]
[4.75175762 139.44274902]
[18.15624809 132.71076965]
[31.56073761 125.97878265]
[44.96522522 119.24678802]
[58.36971664 112.51480103]
[71.77420807 105.78281403]
[85.17869568 99.05082703]
[96.48023224 89.18801117]
[104.96434021 76.81788635]
[113.44844055 64.44776154]
[121.93254089 52.07763290]
[116.05334473 36.24296188]
[120.70701599 20.17844582]
[133.87596130 10.13936234]
[150.26760864 9.91214466]
[158.51023865 -2.62017250]
[166.75286865 -15.15248966]
[174.99551392 -27.68480682]
[183.23814392 -40.21712494]
[191.35887146 -52.82877350]
[199.35693359 -65.51856995]
[196.07652283 -80.74606323]
[204.36846924 -93.50138855]
[218.90577698 -96.53491974]
[226.90385437 -109.22471619]
[234.90191650 -121.91451263]
[242.89997864 -134.60430908]
[238.04570007 -145.52079773]
[239.07653809 -157.30271912]
[245.61853027 -167.01100159]
[255.93751526 -172.28045654]
[267.39743042 -171.89566040]
[275.88153076 -184.26577759]
[284.36566162 -196.63591003]
[292.84976196 -209.00602722]
[295.14041138 -217.90061951]
[301.62023926 -221.53158569]
[310.34262085 -233.73487854]
[302.69967651 -249.51287842]
[304.06353760 -266.90246582]
[313.97155762 -281.15032959]
[329.63787842 -288.40740967]
[346.73635864 -286.76840210]
[354.97900391 -299.30072021]
[355.19183350 -319.42568970]
[372.75555420 -327.44421387]
[380.50604248 -340.28671265]
[388.25653076 -353.12921143]
[396.00701904 -365.97174072]
[385.06161499 -383.23345947]
[384.29574585 -403.58309937]
[393.84176636 -421.48574829]
[411.03762817 -432.11022949]
[431.16882324 -432.63287354]
[437.37597656 -446.28829956]
[443.58312988 -459.94375610]
[449.79028320 -473.59918213]
[455.99746704 -487.25463867]
[451.73348999 -502.72067261]
[461.28292847 -515.61206055]
[477.32031250 -516.03961182]
[487.54306030 -503.67535400]
[484.10922241 -488.00408936]
[469.65289307 -481.04748535]
[463.44573975 -467.39202881]
[457.23858643 -453.73660278]
[451.03143311 -440.08114624]
[444.82424927 -426.42568970]
[452.19424438 -419.60934448]
[457.56546021 -411.10803223]
[460.56689453 -401.49249268]
[460.98693848 -391.41107178]
[458.78829956 -381.54583740]
[454.11126709 -372.56655884]
[447.26458740 -365.08511353]
[438.70526123 -359.61392212]
[429.00793457 -356.53079224]
[418.82641602 -356.05285645]
[408.84951782 -358.22125244]
[401.09902954 -345.37872314]
[393.34854126 -332.53622437]
[385.59805298 -319.69372559]
[388.94482422 -309.97552490]
[386.30911255 -299.81323242]
[378.33343506 -292.65225220]
[367.51129150 -291.05807495]
[359.26867676 -278.52575684]
[366.14434814 -267.86276245]
[368.46832275 -255.34223938]
[365.85806274 -242.83038330]
[358.66915894 -232.20591736]
[347.94747925 -225.07788086]
[335.27700806 -222.54202271]
[322.54589844 -225.01249695]
[313.82351685 -212.80920410]
[305.21987915 -200.52192688]
[296.73577881 -188.15180969]
[288.25167847 -175.78167725]
[279.76757812 -163.41156006]
[284.22189331 -145.69238281]
[274.18014526 -130.04960632]
[255.58978271 -126.60623932]
[247.59170532 -113.91644287]
[239.59364319 -101.22664642]
[231.59558105 -88.53684998]
[235.13002014 -74.11314392]
[227.19961548 -61.12995148]
[212.04673767 -57.52050400]
[204.04867554 -44.83070755]
[203.13806152 -37.45894623]
[195.77046204 -31.97448921]
[187.52783203 -19.44217300]
[179.28518677 -6.90985489]
[171.04255676 5.62246227]
[162.79992676 18.15477943]
[168.65742493 30.18215752]
[167.78762817 43.64038849]
[160.31144714 54.99481583]
[148.09896851 61.21019745]
[134.30267334 60.56173706]
[125.81856537 72.93186188]
[117.33446503 85.30198669]
[108.85035706 97.67211151]
[125.54754639 106.27772522]
[132.12269592 129.27841187]
[131.54107666 144.26713562]
[131.10479736 159.26078796]
[130.81393433 174.25796509]
[130.52305603 189.25514221]
[138.91513062 203.34432983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 160]
[4 159]
[5 158]
[7 157]
[8 156]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[39 154]
[40 153]
[41 152]
[42 151]
[46 146]
[47 145]
[48 144]
[49 143]
[50 142]
[51 140]
[52 139]
[55 136]
[56 135]
[57 134]
[58 133]
[63 130]
[64 129]
[65 128]
[66 127]
[68 126]
[69 125]
[74 118]
[75 117]
[77 113]
[78 112]
[79 111]
[80 110]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
