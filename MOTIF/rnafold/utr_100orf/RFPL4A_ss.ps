%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGAGGCCAGGGGAGAAACUCCAGAAGGAGAGACAUUUGCCAUGGCUGAGCACUUCAAACAGAUCAUUAGAUGUCCUGUCUGUCUAAAAGAUCUUGAAGAAGCCGUGCAACUGAAAUGUGGAUAUGCCUGCUGCCUCCAGU\
) } def
/len { sequence length } bind def

/coor [
[89.46591187 354.54577637]
[92.07344055 335.34030151]
[92.39840698 320.34381104]
[92.72337341 305.34735107]
[93.04834747 290.35086060]
[93.37331390 275.35440063]
[93.69828033 260.35791016]
[94.02324677 245.36143494]
[94.34821320 230.36494446]
[94.67317963 215.36846924]
[94.67317963 200.36846924]
[94.34821320 185.37199402]
[94.02324677 170.37550354]
[93.69828033 155.37902832]
[87.22685242 154.25306702]
[80.93283844 152.37358093]
[74.90364838 149.76667786]
[69.22302246 146.46855164]
[63.96986008 142.52502441]
[59.21712494 137.99085999]
[55.03082657 132.92904663]
[51.46910858 127.40987396]
[37.53445816 132.96194458]
[23.59980583 138.51402283]
[9.66515541 144.06608582]
[-0.06296640 157.26820374]
[-16.32807922 155.17579651]
[-22.39802933 139.94137573]
[-12.02857304 127.23679352]
[4.11308336 130.13143921]
[18.04773331 124.57936859]
[31.98238564 119.02729797]
[45.91703415 113.47521973]
[45.59663391 87.88296509]
[56.74806595 64.84578705]
[77.01986694 49.22143936]
[102.13740540 44.30457687]
[104.72434998 29.52933693]
[99.48299408 14.60154915]
[109.29933929 3.39937758]
[111.88628387 -11.37586308]
[114.47322083 -26.15110397]
[117.06015778 -40.92634583]
[115.45206451 -49.99516296]
[119.86652374 -55.99218369]
[122.77294922 -70.70791626]
[125.67938232 -85.42364502]
[128.58581543 -100.13937378]
[131.49224854 -114.85510254]
[134.39866638 -129.57083130]
[128.42835999 -135.63885498]
[125.41905212 -143.50073242]
[125.80309296 -151.81549072]
[129.44078064 -159.19691467]
[135.65628052 -164.44467163]
[143.36192322 -166.73936462]
[147.53118896 -181.14830017]
[151.70043945 -195.55722046]
[155.86970520 -209.96615601]
[160.03897095 -224.37509155]
[158.74320984 -229.58518982]
[159.54428101 -234.28190613]
[161.87924194 -237.73901367]
[164.97544861 -239.56803894]
[170.07180786 -253.67573547]
[175.16816711 -267.78341675]
[180.26451111 -281.89111328]
[185.36087036 -295.99884033]
[181.67564392 -314.00543213]
[195.44625854 -324.83267212]
[200.23577881 -339.04748535]
[205.02529907 -353.26226807]
[209.81481934 -367.47708130]
[214.60433960 -381.69186401]
[219.39387512 -395.90667725]
[224.18339539 -410.12145996]
[215.88696289 -423.37677002]
[218.10305786 -438.85653687]
[229.78530884 -449.25167847]
[245.41770935 -449.65393066]
[257.61914062 -439.87338257]
[260.62841797 -424.52807617]
[253.02468872 -410.86361694]
[238.39819336 -405.33193970]
[233.60865784 -391.11715698]
[228.81913757 -376.90234375]
[224.02961731 -362.68756104]
[219.24009705 -348.47274780]
[214.45057678 -334.25796509]
[209.66105652 -320.04315186]
[214.76063538 -309.02297974]
[210.82987976 -297.11001587]
[199.46856689 -290.90246582]
[194.37222290 -276.79476929]
[189.27586365 -262.68707275]
[184.17950439 -248.57937622]
[179.08314514 -234.47167969]
[174.44789124 -220.20582581]
[170.27864075 -205.79690552]
[166.10937500 -191.38796997]
[161.94012451 -176.97903442]
[157.77085876 -162.57011414]
[165.15803528 -142.25440979]
[149.11439514 -126.66439819]
[146.20797729 -111.94866943]
[143.30154419 -97.23294067]
[140.39511108 -82.51721191]
[137.48867798 -67.80148315]
[134.58224487 -53.08575439]
[131.83540344 -38.33940506]
[129.24845886 -23.56416512]
[126.66152191 -8.78892326]
[124.07458496 5.98631763]
[129.50096130 19.85728073]
[119.49958801 32.11627579]
[116.91265106 46.89151764]
[126.69652557 51.07307434]
[135.50752258 57.03763580]
[143.02453613 64.56784821]
[148.97364807 73.38928223]
[153.13804626 83.18047333]
[155.36598206 93.58460236]
[155.57624817 104.22252655]
[153.76118469 114.70657349]
[149.98695374 124.65467834]
[144.39108276 133.70431519]
[137.17749023 141.52568054]
[128.60908508 147.83377075]
[118.99808502 152.39868164]
[108.69475555 155.05406189]
[109.01972198 170.05053711]
[109.34468842 185.04702759]
[109.66965485 200.04350281]
[112.82308960 205.99072266]
[112.49281311 211.75785828]
[109.66965485 215.69343567]
[109.34468842 230.68991089]
[109.01972198 245.68640137]
[108.69475555 260.68286133]
[108.36978912 275.67935181]
[108.04482269 290.67584229]
[107.71985626 305.67230225]
[107.39488983 320.66879272]
[107.06992340 335.66528320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 144]
[3 143]
[4 142]
[5 141]
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[11 133]
[12 132]
[13 131]
[14 130]
[22 33]
[23 32]
[24 31]
[25 30]
[37 116]
[38 115]
[40 113]
[41 112]
[42 111]
[43 110]
[45 109]
[46 108]
[47 107]
[48 106]
[49 105]
[50 104]
[56 102]
[57 101]
[58 100]
[59 99]
[60 98]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
