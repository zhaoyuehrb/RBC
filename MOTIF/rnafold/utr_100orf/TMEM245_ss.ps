%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCUCGGGGGCGGCUGUGGCGGAGGAACGAUGGCCGACGGCGGCGGCCCUAAGGACGCGCCAAGCCUGCGGAGCUCUCCCGGGCCGGCGCCGCGGGUCCCGCGCGCGGUCGGGCCGAGUGGCGGUGGCG\
) } def
/len { sequence length } bind def

/coor [
[133.30102539 514.77282715]
[131.18225098 499.92324829]
[129.06347656 485.07363892]
[126.94468689 470.22402954]
[117.48721313 458.71728516]
[123.19763947 443.96255493]
[121.07885742 429.11294556]
[118.96007538 414.26333618]
[116.84129333 399.41372681]
[114.72251892 384.56414795]
[103.39303589 378.31112671]
[97.67520142 366.48516846]
[99.87464905 353.33697510]
[109.40495300 343.73867798]
[107.63749695 328.84317017]
[105.87003326 313.94766235]
[104.10257721 299.05215454]
[102.33512115 284.15664673]
[100.56765747 269.26113892]
[98.80020142 254.36563110]
[97.03273773 239.47012329]
[95.08948517 224.59654236]
[92.97070312 209.74693298]
[90.85192871 194.89732361]
[88.73314667 180.04771423]
[80.43562317 192.54376221]
[66.76780701 198.72364807]
[51.90500641 196.69950867]
[40.38756561 187.08969116]
[35.73387527 172.82984924]
[39.36556625 158.27612305]
[50.17321396 147.87445068]
[64.85525513 144.80238342]
[78.92656708 149.99836731]
[88.08903503 161.87629700]
[89.15109253 146.91394043]
[90.21315002 131.95158386]
[91.27519989 116.98923492]
[81.86023712 105.97539520]
[82.88615417 91.52223969]
[93.76244354 81.94870758]
[94.82450104 66.98635101]
[95.88655090 52.02399826]
[96.94860840 37.06164551]
[98.01066589 22.09929085]
[91.26988983 7.78592443]
[99.88890839 -4.36157608]
[100.95096588 -19.32393074]
[102.01301575 -34.28628540]
[103.07507324 -49.24863815]
[104.13713074 -64.21099091]
[105.19918060 -79.17334747]
[97.53222656 -87.05705261]
[95.56402588 -97.65205383]
[99.71477509 -107.35717773]
[108.36613464 -113.01052094]
[110.13359070 -127.90602875]
[111.90105438 -142.80152893]
[104.22779083 -159.49208069]
[115.16255951 -173.16571045]
[116.57770538 -188.09881592]
[110.17687225 -202.56739807]
[119.08039856 -214.50793457]
[120.49555206 -229.44104004]
[108.76980591 -239.60403442]
[105.28993988 -254.72587585]
[111.39402771 -268.99191284]
[124.73493195 -276.91653442]
[140.18280029 -275.45260620]
[151.79760742 -265.16302490]
[155.11322021 -250.00430298]
[148.85473633 -235.80532837]
[135.42864990 -228.02587891]
[134.01348877 -213.09278870]
[140.51554871 -199.69232178]
[131.51080322 -186.68365479]
[130.09565735 -171.75056458]
[137.58341980 -162.17414856]
[136.46443176 -149.66574097]
[126.79655457 -141.03407288]
[125.02909851 -126.13856506]
[123.26164246 -111.24306488]
[132.23257446 -94.17711639]
[120.16153717 -78.11128998]
[119.09947968 -63.14893723]
[118.03742981 -48.18658066]
[116.97537231 -33.22422791]
[115.91331482 -18.26187515]
[114.85125732 -3.29952049]
[121.66800690 9.94363880]
[112.97302246 23.16134644]
[111.91096497 38.12370300]
[110.84890747 53.08605576]
[109.78684998 68.04840851]
[108.72480011 83.01076508]
[118.13976288 94.02460480]
[117.11384583 108.47776031]
[106.23755646 118.05129242]
[105.17549896 133.01364136]
[104.11344910 147.97599792]
[103.05139160 162.93835449]
[103.58274841 177.92893982]
[105.70153046 192.77854919]
[107.82031250 207.62814331]
[109.93909454 222.47775269]
[114.28651428 230.62229919]
[111.92824554 237.70266724]
[113.69570923 252.59817505]
[115.46316528 267.49368286]
[117.23062134 282.38919067]
[118.99808502 297.28469849]
[120.76554108 312.18020630]
[122.53300476 327.07571411]
[124.30046082 341.97122192]
[138.21714783 352.49484253]
[140.22529602 369.48776245]
[129.57211304 382.44534302]
[131.69090271 397.29495239]
[133.80967712 412.14456177]
[135.92846680 426.99417114]
[138.04724121 441.84378052]
[147.65626526 454.41265869]
[141.79429626 468.10525513]
[143.91307068 482.95486450]
[146.03186035 497.80444336]
[148.15063477 512.65405273]
[161.52409363 520.75866699]
[166.51025391 535.58001709]
[160.75479126 550.11993408]
[146.97528076 557.51306152]
[131.67796326 554.26867676]
[122.08577728 541.91857910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[14 114]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[21 107]
[22 105]
[23 104]
[24 103]
[25 102]
[35 101]
[36 100]
[37 99]
[38 98]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[56 82]
[57 81]
[58 80]
[60 77]
[61 76]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
