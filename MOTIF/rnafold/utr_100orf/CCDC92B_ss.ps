%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCGGCCGGUGACUCCCAGGUCCCGAAGGUGGGGCCCAGGCCUGGGUUGCCAUGGAUACCGUGUCCCUGGAGCAUCAGAUCCAGAGCGUGCAACGCCACAUCAGCUUCCUGAAAAAGGAGCAGAUGGCCCUGCUGCGAGACCUGCACCUGG\
) } def
/len { sequence length } bind def

/coor [
[-56.25868607 272.27264404]
[-66.48248291 283.24871826]
[-76.70628357 294.22476196]
[-86.93007660 305.20083618]
[-97.15387726 316.17691040]
[-107.37767029 327.15295410]
[-105.35516357 340.50482178]
[-111.32189178 352.40161133]
[-122.88877869 358.58154297]
[-135.70803833 356.97668457]
[-146.15219116 367.74328613]
[-156.59634399 378.50988770]
[-160.35557556 386.90090942]
[-167.36294556 389.38616943]
[-178.02314758 399.93887329]
[-188.68336487 410.49160767]
[-199.34356689 421.04431152]
[-203.14390564 436.99703979]
[-218.93470764 441.42230225]
[-230.47174072 429.76773071]
[-225.88671875 414.02258301]
[-209.89628601 410.38412476]
[-199.23608398 399.83139038]
[-188.57586670 389.27865601]
[-177.91566467 378.72595215]
[-167.36294556 368.06573486]
[-156.91879272 357.29913330]
[-146.47463989 346.53253174]
[-147.46450806 329.77044678]
[-135.81671143 317.21231079]
[-118.35373688 316.92916870]
[-108.12993622 305.95309448]
[-97.90614319 294.97705078]
[-87.68234253 284.00097656]
[-77.45854950 273.02490234]
[-67.23474884 262.04885864]
[-67.34020996 249.91595459]
[-58.86109543 240.68395996]
[-45.96222305 239.69711304]
[-35.51807404 228.93051147]
[-25.07392502 218.16390991]
[-14.62977695 207.39729309]
[-4.18562794 196.63069153]
[-4.66811609 181.78810120]
[5.77036190 170.72044373]
[21.34191895 170.31500244]
[31.78606796 159.54840088]
[42.23021698 148.78179932]
[52.67436600 138.01519775]
[63.11851501 127.24858856]
[73.56266022 116.48198700]
[65.81407166 107.25614929]
[61.63379669 94.62578583]
[62.42078018 80.07650757]
[52.65019226 68.69512939]
[42.87960434 57.31376266]
[33.10901642 45.93238831]
[23.33843040 34.55101776]
[8.43354511 26.47136688]
[12.07135773 9.91230106]
[28.99033546 8.82394123]
[34.71980286 24.78042984]
[44.49038696 36.16180038]
[54.26097488 47.54317474]
[64.03156281 58.92454529]
[73.80214691 70.30591583]
[80.88663483 67.84420013]
[83.70728302 53.11178970]
[95.05561066 62.92077637]
[102.14009857 60.45906067]
[102.74798584 45.47138214]
[103.35586548 30.48370743]
[103.96375275 15.49602890]
[104.57163239 0.50835145]
[92.31494904 -9.00759315]
[88.02474976 -23.91979790]
[93.35072327 -38.49421692]
[106.24491119 -47.12668610]
[121.74923706 -46.49784851]
[133.90197754 -36.84950256]
[138.03015137 -21.89163399]
[132.54638672 -7.37585020]
[119.55931091 1.11623514]
[118.95143127 16.10391235]
[118.34354401 31.09159088]
[117.73566437 46.07926941]
[117.12777710 61.06694412]
[127.07517242 75.01146698]
[129.42924500 89.77706146]
[144.36689758 88.41084290]
[159.30455017 87.04462433]
[167.62258911 83.12653351]
[174.55830383 85.80523682]
[189.52056885 84.74204254]
[204.48284912 83.67884827]
[214.81576538 72.02258301]
[230.00477600 71.15749359]
[241.05357361 81.08018494]
[256.01583862 80.01699066]
[270.97811890 78.95379639]
[285.94039917 77.89060211]
[291.70376587 74.46086884]
[297.46087646 74.49639893]
[301.52835083 77.10006714]
[316.52142334 76.64409637]
[330.08001709 68.49088287]
[343.03662109 75.83772278]
[358.02969360 75.38175964]
[373.02276611 74.92578888]
[381.56350708 71.52040100]
[388.32363892 74.61562347]
[403.32287598 74.46361542]
[418.32208252 74.31159973]
[430.53250122 63.90555954]
[446.25320435 67.10529327]
[453.42468262 81.45623779]
[446.54553223 95.94958496]
[430.89288330 99.46726990]
[418.47409058 89.31082916]
[403.47488403 89.46284485]
[388.47564697 89.61485291]
[373.47872925 89.91885376]
[358.48565674 90.37482452]
[343.49258423 90.83079529]
[331.00637817 98.95140076]
[316.97738647 91.63716888]
[301.98434448 92.09313202]
[287.00357056 92.85287476]
[272.04132080 93.91606903]
[257.07904053 94.97926331]
[242.11676025 96.04245758]
[232.58209229 107.42778015]
[217.42337036 108.71915436]
[205.54603577 98.64112091]
[190.58377075 99.70431519]
[175.62149048 100.76750946]
[160.67076111 101.98227692]
[145.73310852 103.34849548]
[130.79545593 104.71471405]
[121.69269562 122.36103058]
[103.77836609 130.92430115]
[84.32926941 126.92613983]
[73.88511658 137.69273376]
[63.44096756 148.45935059]
[52.99681854 159.22595215]
[42.55266953 169.99255371]
[32.10852051 180.75915527]
[32.17660904 196.33584595]
[21.43138313 207.10592651]
[6.58097553 207.07484436]
[-3.86317325 217.84144592]
[-14.30732155 228.60804749]
[-24.75147057 239.37464905]
[-35.19562149 250.14126587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[10 28]
[11 27]
[12 26]
[14 25]
[15 24]
[16 23]
[17 22]
[39 154]
[40 153]
[41 152]
[42 151]
[43 150]
[46 147]
[47 146]
[48 145]
[49 144]
[50 143]
[51 142]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[89 139]
[90 138]
[91 137]
[93 136]
[94 135]
[95 134]
[98 131]
[99 130]
[100 129]
[101 128]
[104 127]
[105 126]
[107 124]
[108 123]
[109 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
