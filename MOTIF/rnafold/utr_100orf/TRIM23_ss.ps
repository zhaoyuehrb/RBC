%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGAGGCCUCUGGGUAGGUGGCUCAACCCCGCCUCUCAGUUGAGGACUCUGAAGGCUGUUUCUGUGGCGCUUCCCCUGCGAGGAUGGCUACCCUGGUUGUAAACAAGCUCGGAGCGGGAGUAGACAGUGGCCGGCAGGGCAGCCGGGGGACAGCUGUAGUGAAGGUGCUAGAGUGUGGAGUUU\
) } def
/len { sequence length } bind def

/coor [
[60.12492371 174.03768921]
[65.35335541 159.97839355]
[76.80056000 150.28488159]
[83.65260315 136.94136047]
[71.24214935 145.36636353]
[58.83169174 153.79136658]
[46.42123413 162.21635437]
[34.01077652 170.64135742]
[26.93879890 184.79400635]
[12.06293201 185.54092407]
[-0.34752402 193.96592712]
[-12.75798035 202.39093018]
[-25.16843605 210.81591797]
[-37.36266708 219.55094910]
[-49.33292389 228.59046936]
[-61.30318451 237.62998962]
[-73.27343750 246.66950989]
[-78.24930573 254.35517883]
[-85.52157593 255.75833130]
[-97.64199829 264.59548950]
[-109.76242828 273.43264771]
[-121.88285065 282.26977539]
[-134.00328064 291.10693359]
[-146.12370300 299.94409180]
[-147.00773621 315.55667114]
[-157.75811768 326.91287231]
[-173.29884338 328.65066528]
[-186.29205322 319.94949341]
[-190.60276794 304.91778564]
[-184.19557190 290.65307617]
[-170.09577942 283.89071655]
[-154.96086121 287.82366943]
[-142.84042358 278.98651123]
[-130.72000122 270.14935303]
[-118.59957886 261.31222534]
[-106.47915649 252.47505188]
[-94.35872650 243.63790894]
[-82.31295776 234.69924927]
[-70.34270477 225.65972900]
[-58.37244415 216.62020874]
[-46.40218353 207.58068848]
[-45.55955505 204.13662720]
[-42.99457932 200.93426514]
[-38.84136200 198.78422546]
[-33.59343338 198.40547180]
[-21.18297768 189.98046875]
[-8.77252102 181.55546570]
[3.63793540 173.13047791]
[9.82223701 159.58042908]
[25.58578110 158.23089600]
[37.99623871 149.80590820]
[50.40669250 141.38090515]
[62.81715012 132.95590210]
[75.22760773 124.53090668]
[67.54898834 99.77832794]
[78.94518280 78.57286835]
[100.29553986 72.37250519]
[104.52152252 57.98011017]
[108.74751282 43.58771515]
[112.97350311 29.19532013]
[117.19949341 14.80292511]
[121.42547607 0.41053069]
[125.65146637 -13.98186398]
[125.06737518 -23.11901474]
[130.07122803 -28.57943726]
[134.53839111 -42.89880753]
[139.00556946 -57.21817780]
[143.47274780 -71.53755188]
[147.81947327 -85.89393616]
[152.04545593 -100.28633118]
[156.27145386 -114.67872620]
[160.37640381 -129.10610962]
[164.36000061 -143.56747437]
[168.34361267 -158.02882385]
[171.59362793 -172.67250061]
[174.10179138 -187.46131897]
[176.60993958 -202.25013733]
[179.11810303 -217.03895569]
[181.50195312 -231.84832764]
[183.76130676 -246.67720032]
[178.19091797 -261.48535156]
[187.75698853 -272.90197754]
[190.01634216 -287.73086548]
[192.27571106 -302.55972290]
[194.53507996 -317.38858032]
[185.44172668 -330.03567505]
[187.94429016 -345.04208374]
[200.05740356 -353.63323975]
[202.31675720 -368.46209717]
[193.22341919 -381.10919189]
[195.72598267 -396.11560059]
[207.83908081 -404.70675659]
[210.09844971 -419.53564453]
[212.35781860 -434.36450195]
[201.89425659 -445.98550415]
[201.40022278 -461.61529541]
[211.10897827 -473.87393188]
[226.43634033 -476.97326660]
[240.14520264 -469.44989014]
[245.76266479 -454.85610962]
[240.63632202 -440.08267212]
[227.18667603 -432.10513306]
[224.92732239 -417.27627563]
[222.66795349 -402.44738770]
[231.67288208 -390.63864136]
[229.59280396 -375.56787109]
[217.14562988 -366.20275879]
[214.88626099 -351.37387085]
[223.89118958 -339.56512451]
[221.81111145 -324.49435425]
[209.36393738 -315.12921143]
[207.10456848 -300.30035400]
[204.84521484 -285.47149658]
[202.58584595 -270.64263916]
[208.31784058 -256.89514160]
[198.59017944 -244.41783142]
[196.33081055 -229.58895874]
[198.43588257 -222.48802185]
[193.90692139 -214.53080750]
[191.39875793 -199.74198914]
[188.89060974 -184.95317078]
[186.38244629 -170.16435242]
[199.27970886 -177.82337952]
[213.85284424 -174.27035522]
[221.77775574 -161.53474426]
[218.52780151 -146.89105225]
[205.95933533 -138.70364380]
[191.25137329 -141.64912415]
[182.80497742 -154.04521179]
[178.82136536 -139.58386230]
[174.83775330 -125.12249756]
[176.09513855 -117.82361603]
[170.66384888 -110.45273590]
[166.43785095 -96.06034088]
[162.21186829 -81.66794586]
[163.34645081 -74.34897614]
[157.79211426 -67.07037354]
[153.32493591 -52.75100708]
[148.85777283 -38.43163681]
[144.39059448 -24.11226463]
[140.04385376 -9.75587559]
[135.81787109 4.63651896]
[131.59188843 19.02891350]
[127.36589813 33.42130661]
[123.13990784 47.81370163]
[118.91391754 62.20609665]
[114.68793488 76.59849548]
[122.65440369 82.16125488]
[128.47967529 90.44304657]
[131.24015808 100.60934448]
[130.33975220 111.51595306]
[125.61133575 121.83765411]
[117.36804962 130.22892761]
[127.09539032 141.64727783]
[136.82273865 153.06562805]
[144.78753662 157.58123779]
[146.61561584 164.75848389]
[156.14976501 176.33863831]
[170.89457703 182.07461548]
[173.01087952 196.81809998]
[182.54502869 208.39825439]
[192.07917786 219.97840881]
[201.61332703 231.55856323]
[217.36613464 232.83322144]
[227.53993225 244.92741394]
[226.09878540 260.66586304]
[213.89772034 270.71121216]
[198.17538452 269.10375977]
[188.25958252 256.79718018]
[190.03317261 241.09271240]
[180.49902344 229.51255798]
[170.96487427 217.93240356]
[161.43072510 206.35224915]
[147.36787415 201.44456482]
[144.56961060 185.87278748]
[135.03546143 174.29263306]
[125.40438080 162.79296875]
[115.67704010 151.37461853]
[105.94969940 139.95626831]
[109.01199341 154.64035034]
[117.47376251 167.02575684]
[118.78070068 181.96871948]
[112.59748077 195.63500977]
[100.51062775 204.51803589]
[85.62150574 206.33850098]
[71.75049591 200.62928772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[10 48]
[11 47]
[12 46]
[13 45]
[14 41]
[15 40]
[16 39]
[17 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[57 147]
[58 146]
[59 145]
[60 144]
[61 143]
[62 142]
[63 141]
[65 140]
[66 139]
[67 138]
[68 137]
[69 135]
[70 134]
[71 133]
[72 131]
[73 130]
[74 129]
[75 122]
[76 121]
[77 120]
[78 119]
[79 117]
[80 116]
[82 114]
[83 113]
[84 112]
[85 111]
[88 108]
[89 107]
[92 104]
[93 103]
[94 102]
[153 179]
[154 178]
[155 177]
[157 176]
[158 175]
[160 173]
[161 172]
[162 171]
[163 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
