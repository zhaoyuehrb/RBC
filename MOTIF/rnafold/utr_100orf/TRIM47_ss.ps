%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGCCCUGGGCGGCCGCGGAGUCAUGGACGGCAGUGGACCCUUCAGCUGCCCCAUCUGCCUAGAGCCACUCCGGGAGCCGGUGACGCUGCCCUGCGGCCACAACUUCUGUCUCGCCUGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[95.50476837 141.01086426]
[94.40129852 126.05151367]
[93.29782867 111.09215546]
[85.58628845 98.22622681]
[72.91348267 90.20126343]
[60.24068069 82.17630005]
[44.44211960 81.33012390]
[37.82887650 67.98417664]
[25.15607262 59.95921326]
[12.48326874 51.93424988]
[-3.31529331 51.08807373]
[-9.92853737 37.74213028]
[-22.60134125 29.71716499]
[-35.27414322 21.69220161]
[-51.07270432 20.84602737]
[-57.68595123 7.50008154]
[-70.35875702 -0.52488297]
[-83.03155518 -8.54984760]
[-105.36358643 -7.57590246]
[-115.15746307 -26.83298683]
[-128.55583191 -33.57715607]
[-141.95419312 -40.32132721]
[-155.35255432 -47.06549835]
[-168.75091553 -53.80966568]
[-173.31489563 -53.36392593]
[-177.34603882 -54.35700226]
[-180.44309998 -56.42620087]
[-182.37200928 -59.11293030]
[-183.08302307 -61.92869949]
[-195.75581360 -69.95366669]
[-208.42861938 -77.97863007]
[-215.17852783 -78.64632416]
[-219.81954956 -82.15257263]
[-221.51283264 -86.72121429]
[-233.77659607 -95.35833740]
[-246.04037476 -103.99546051]
[-258.30413818 -112.63258362]
[-270.56790161 -121.26970673]
[-282.83169556 -129.90682983]
[-298.56970215 -131.52717590]
[-304.52011108 -145.18154907]
[-316.78390503 -153.81866455]
[-333.15640259 -154.75279236]
[-340.29104614 -169.51861572]
[-330.84826660 -182.92630005]
[-314.54202271 -181.18319702]
[-308.14675903 -166.08244324]
[-295.88299561 -157.44532776]
[-281.02218628 -156.44274902]
[-274.19458008 -142.17059326]
[-261.93078613 -133.53347778]
[-249.66702271 -124.89635468]
[-237.40324402 -116.25923157]
[-225.13948059 -107.62210846]
[-212.87570190 -98.98498535]
[-200.40365601 -90.65143585]
[-187.73085022 -82.62647247]
[-175.05805969 -74.60150146]
[-162.00674438 -67.20803070]
[-148.60838318 -60.46386337]
[-135.21002197 -53.71969223]
[-121.81165314 -46.97552109]
[-108.41329193 -40.23134995]
[-101.42975616 -44.35297012]
[-93.28403473 -45.32801819]
[-85.34363556 -42.91606140]
[-78.97253418 -37.45177841]
[-75.29692841 -29.80069160]
[-75.00659180 -21.22265053]
[-62.33378983 -13.19768620]
[-49.66098404 -5.17272234]
[-34.76886749 -4.90054750]
[-27.24917984 9.01939774]
[-14.57637596 17.04436111]
[-1.90357280 25.06932640]
[12.98854542 25.34150124]
[20.50823402 39.26144409]
[33.18103790 47.28641129]
[45.85383987 55.31137466]
[60.74596024 55.58354950]
[68.26564789 69.50349426]
[80.93844604 77.52845764]
[93.61125183 85.55342102]
[136.03356934 76.88879395]
[150.38768005 81.24306488]
[164.74179077 85.59733582]
[179.09588623 89.95160675]
[193.44999695 94.30587769]
[207.64607239 80.08827209]
[233.43142700 84.16574097]
[248.43142700 84.16574097]
[263.43142700 84.16574097]
[278.43142700 84.16574097]
[293.43142700 84.16574097]
[309.27056885 78.11940002]
[319.46533203 91.66574097]
[309.27056885 105.21208191]
[293.43142700 99.16574097]
[278.43142700 99.16574097]
[263.43142700 99.16574097]
[248.43142700 99.16574097]
[233.43142700 99.16574097]
[228.72599792 113.40930176]
[224.02098083 127.65158844]
[236.06909180 136.58708191]
[248.11720276 145.52256775]
[264.13372803 144.60034180]
[274.73315430 156.64324951]
[271.78451538 172.41300964]
[257.54974365 179.81239319]
[242.94856262 173.16523743]
[239.18171692 157.57067871]
[227.13360596 148.63519287]
[215.08549500 139.69970703]
[192.46836853 127.99788666]
[189.09571838 108.65998077]
[174.74162292 104.30570984]
[160.38751221 99.95143890]
[146.03340149 95.59717560]
[131.67930603 91.24290466]
[119.96772766 100.61621857]
[108.25718689 109.98868561]
[109.36065674 124.94804382]
[110.46412659 139.90739441]
[120.12864685 153.15612793]
[113.24067688 168.03860474]
[96.88596344 169.24499512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 83]
[5 82]
[6 81]
[8 79]
[9 78]
[10 77]
[12 75]
[13 74]
[14 73]
[16 71]
[17 70]
[18 69]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[29 58]
[30 57]
[31 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[41 48]
[42 47]
[84 120]
[85 119]
[86 118]
[87 117]
[88 116]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
