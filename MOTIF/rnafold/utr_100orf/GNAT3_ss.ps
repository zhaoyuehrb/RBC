%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCCUCCUAUGUCCAAACCACAGCUGUGCUCAACAUUUGAAAAAUCUGAACAUAUAAACUGACAAGUAUCUACCACCACAAGAUGGGAAGUGGAAUUAGUUCAGAGAGCAAGGAGUCAGCCAAAAGAUCAAAAGAACUGGAGAAAAAGCUUCAGGAGGAUGCUGAGCGAGAUGCAAGAACCG\
) } def
/len { sequence length } bind def

/coor [
[136.11871338 374.55676270]
[134.58474731 359.63540649]
[133.05078125 344.71405029]
[131.51683044 329.79269409]
[129.72833252 314.89968872]
[127.68583679 300.03939819]
[125.64333344 285.17910767]
[123.47404480 270.33682251]
[121.17813873 255.51356506]
[105.78680420 245.63473511]
[102.42262268 227.33370972]
[113.67334747 212.11427307]
[110.87268829 197.37805176]
[108.07203674 182.64181519]
[105.27137756 167.90559387]
[86.87245178 166.83280945]
[69.43473816 160.86642456]
[54.23506546 150.44331360]
[42.38636780 136.32666016]
[34.75622559 119.55012512]
[31.90333366 101.34209442]
[34.03657913 83.03578949]
[40.99976730 65.97163391]
[52.28303909 51.39908600]
[43.01675415 39.60349274]
[33.75047302 27.80790138]
[24.48418808 16.01231003]
[16.70253944 11.18211842]
[15.16245651 3.93530512]
[6.09891033 -8.01677132]
[-2.96463561 -19.96884918]
[-12.02818108 -31.92092514]
[-16.13993263 -33.47698593]
[-19.22064590 -36.01449585]
[-21.08736229 -39.08403778]
[-21.72361374 -42.22313309]
[-21.26904106 -45.01224136]
[-29.49581909 -57.55497360]
[-37.72259903 -70.09770203]
[-45.94937515 -82.64043427]
[-58.43298340 -81.58712769]
[-70.10880280 -85.92528534]
[-78.77487183 -94.77110291]
[-82.82487488 -106.39702606]
[-81.54570007 -118.56888580]
[-75.24214172 -128.97521973]
[-83.03590393 -141.79150391]
[-90.82966614 -154.60780334]
[-98.62342072 -167.42408752]
[-106.41718292 -180.24038696]
[-114.21093750 -193.05667114]
[-122.00469971 -205.87297058]
[-134.68241882 -203.57873535]
[-147.38154602 -205.53749084]
[-158.71800232 -211.51309204]
[-167.46362305 -220.83283997]
[-172.67924500 -232.46318054]
[-173.81541443 -245.12422180]
[-170.77030945 -257.43066406]
[-183.17074585 -265.87039185]
[-195.57119751 -274.31008911]
[-211.95657349 -274.98205566]
[-219.32662964 -289.63177490]
[-210.09967041 -303.18890381]
[-193.76762390 -301.70700073]
[-187.13146973 -286.71054077]
[-174.73103333 -278.27081299]
[-162.33058167 -269.83111572]
[-158.64245605 -273.01702881]
[-154.57965088 -275.70883179]
[-159.36080933 -289.92642212]
[-164.14195251 -304.14404297]
[-168.92311096 -318.36166382]
[-173.70426941 -332.57928467]
[-189.50396729 -340.06188965]
[-194.90870667 -356.33221436]
[-187.04211426 -371.18463135]
[-192.06530762 -385.31854248]
[-197.08850098 -399.45245361]
[-210.90072632 -407.61343384]
[-212.98921204 -423.51998901]
[-201.75183105 -434.96990967]
[-185.80895996 -433.17984009]
[-177.39059448 -419.52294922]
[-182.95458984 -404.47564697]
[-177.93139648 -390.34173584]
[-172.90820312 -376.20782471]
[-160.59980774 -372.34902954]
[-152.64852905 -361.94589233]
[-152.14083862 -348.66702271]
[-159.48664856 -337.36044312]
[-154.70549011 -323.14282227]
[-149.92434692 -308.92520142]
[-145.14318848 -294.70758057]
[-140.36203003 -280.48995972]
[-121.28993988 -278.22390747]
[-105.64551544 -266.95742798]
[-97.38875580 -249.45541382]
[-98.65170288 -230.07186890]
[-109.18840790 -213.66671753]
[-101.39464569 -200.85043335]
[-93.60089111 -188.03414917]
[-85.80712891 -175.21784973]
[-78.01337433 -162.40156555]
[-70.21961212 -149.58526611]
[-62.42585373 -136.76898193]
[-44.79543686 -136.15545654]
[-30.92929077 -124.99749756]
[-26.48030853 -107.60244751]
[-33.40664291 -90.86721802]
[-25.17986488 -78.32448578]
[-16.95308685 -65.78175354]
[-8.72630978 -53.23901749]
[-0.07610479 -40.98447037]
[8.98744106 -29.03239441]
[18.05098724 -17.08031845]
[27.11453247 -5.12824106]
[36.27978134 6.74602652]
[45.54606247 18.54161835]
[54.81234741 30.33721161]
[64.07862854 42.13280487]
[72.23499298 37.80625534]
[80.90156555 34.62257767]
[89.91909027 32.64027405]
[99.12186432 31.89577103]
[108.34077454 32.40274429]
[117.40641022 34.15188599]
[126.15219116 37.11104965]
[134.41740417 41.22585678]
[142.05015564 46.42069626]
[148.91020203 52.60010529]
[154.87145996 59.65053177]
[159.82441711 67.44242096]
[163.67803955 75.83258820]
[166.36152649 84.66684723]
[167.82554626 93.78287506]
[168.04321289 103.01314545]
[167.01051331 112.18804932]
[181.38307190 116.48101044]
[195.75563049 120.77397156]
[210.12818909 125.06693268]
[224.50074768 129.35989380]
[238.87330627 133.65284729]
[252.65869141 125.92375183]
[267.84887695 130.28654480]
[275.43179321 144.15286255]
[270.90866089 159.29606628]
[256.96292114 166.73196411]
[241.86839294 162.04896545]
[234.58035278 148.02542114]
[220.20779419 143.73245239]
[205.83523560 139.43949890]
[191.46267700 135.14653015]
[177.09011841 130.85357666]
[162.71754456 126.56060791]
[152.47401428 143.42160034]
[137.82774353 156.63937378]
[120.00760651 165.10493469]
[122.80825806 179.84115601]
[125.60891724 194.57739258]
[128.40957642 209.31361389]
[139.37684631 213.97546387]
[146.64869690 223.26458740]
[148.50331116 234.79327393]
[144.59277344 245.66845703]
[136.00138855 253.21765137]
[138.29730225 268.04089355]
[142.71293640 276.06506348]
[140.50361633 283.13662720]
[142.54612732 297.99691772]
[144.58862305 312.85720825]
[148.35682678 318.33660889]
[148.71937561 324.03817749]
[146.43818665 328.25872803]
[147.97215271 343.18008423]
[149.50610352 358.10144043]
[151.04006958 373.02279663]
[164.08493042 381.64636230]
[168.48516846 396.65209961]
[162.16313171 410.95474243]
[148.10388184 417.80105591]
[132.94578552 413.95837402]
[123.84602356 401.24114990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 177]
[2 176]
[3 175]
[4 174]
[5 171]
[6 170]
[7 169]
[8 167]
[9 166]
[12 161]
[13 160]
[14 159]
[15 158]
[24 121]
[25 120]
[26 119]
[27 118]
[29 117]
[30 116]
[31 115]
[32 114]
[37 113]
[38 112]
[39 111]
[40 110]
[46 106]
[47 105]
[48 104]
[49 103]
[50 102]
[51 101]
[52 100]
[59 68]
[60 67]
[61 66]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[77 87]
[78 86]
[79 85]
[138 155]
[139 154]
[140 153]
[141 152]
[142 151]
[143 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
