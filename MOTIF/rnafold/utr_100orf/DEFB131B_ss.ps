%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGUCUUGUUUUUUGUCUUUGGAGUCCUUUCCUUGAUGUCCACAGUUCCUCCAACCAGAAGCUUCACUUCUAAUGAUGAAUGUCCUUCAGAAUAUU\
) } def
/len { sequence length } bind def

/coor [
[65.06672668 124.25874329]
[59.07341003 111.56867981]
[57.53647995 97.61894226]
[42.94279861 94.15129852]
[28.34912109 90.68365479]
[13.75544357 87.21600342]
[-0.83823407 83.74835968]
[-12.32242870 89.86964417]
[-24.49024963 86.55773926]
[-30.86569977 76.14756775]
[-45.34447479 72.22774506]
[-59.82324982 68.30791473]
[-74.30202484 64.38808441]
[-84.44849396 73.86458588]
[-97.85704803 77.01980591]
[-110.95606232 73.12441254]
[-120.31137848 63.31250000]
[-123.52655792 50.25419998]
[-137.87641907 45.88597870]
[-152.22628784 41.51775742]
[-166.57615662 37.14953613]
[-177.75112915 44.85634995]
[-191.12887573 44.66479874]
[-201.76284790 36.87239456]
[-205.85232544 24.54526520]
[-220.05940247 19.73287964]
[-234.26647949 14.92049217]
[-248.47355652 10.10810566]
[-264.44085693 13.84671497]
[-275.46340942 1.70440698]
[-270.20211792 -13.82785225]
[-254.06939697 -16.77180672]
[-243.66116333 -4.09896755]
[-229.45408630 0.71341878]
[-215.24700928 5.52580547]
[-201.03994751 10.33819199]
[-186.38922119 2.24525476]
[-170.07241821 7.26928568]
[-162.20793152 22.79967117]
[-147.85807800 27.16789246]
[-133.50820923 31.53611183]
[-119.15834045 35.90433502]
[-106.47112274 25.61655235]
[-89.98990631 24.84660149]
[-76.12409973 34.08981323]
[-70.38219452 49.90930939]
[-55.90342331 53.82913971]
[-41.42464447 57.74896622]
[-26.94587135 61.66879654]
[-10.34834862 56.20768356]
[2.62941074 69.15468597]
[17.22308922 72.62232971]
[31.81676674 76.08997345]
[46.41044617 79.55761719]
[61.00412369 83.02526093]
[69.05068970 70.82877350]
[80.75031281 62.07547379]
[94.72205353 57.79853821]
[109.31676483 58.50279617]
[122.81178284 64.10511780]
[133.61424255 73.94423676]
[146.90441895 66.98928833]
[160.19458008 60.03433228]
[173.48475647 53.07938004]
[186.77493286 46.12442780]
[192.91908264 31.30454254]
[208.37576294 27.00683212]
[221.28794861 36.52812958]
[221.75050354 52.56451416]
[209.40858459 62.81424332]
[193.72987366 59.41459656]
[180.43971252 66.36955261]
[167.14953613 73.32450104]
[153.85937500 80.27945709]
[140.56919861 87.23441315]
[142.27844238 104.62100220]
[136.85374451 121.22785950]
[148.32772827 130.88951111]
[163.86111450 129.72688293]
[175.35974121 139.68861389]
[176.37240601 154.50450134]
[187.84638977 164.16615295]
[199.32037354 173.82780457]
[210.79437256 183.48945618]
[226.83728027 183.55696106]
[236.67366028 196.23075867]
[232.75788879 211.78860474]
[218.09379578 218.29583740]
[203.93043518 210.76068115]
[201.13270569 194.96345520]
[189.65872192 185.30178833]
[178.18473816 175.64013672]
[166.71075439 165.97848511]
[151.93875122 167.50289917]
[140.16487122 157.86805725]
[138.66607666 142.36349487]
[127.19208527 132.70184326]
[115.06855774 139.77133179]
[101.30426025 142.51022339]
[87.39794159 140.62030029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[10 49]
[11 48]
[12 47]
[13 46]
[18 42]
[19 41]
[20 40]
[21 39]
[25 36]
[26 35]
[27 34]
[28 33]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[77 97]
[78 96]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
