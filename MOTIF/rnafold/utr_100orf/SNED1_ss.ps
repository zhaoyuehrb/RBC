%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGGCACGGCGUCGCCUGGGCGCUGCUGGUGGCCGCGGCCCUGGGGCUUGGGGCGCGCGGGGUGCGCGGCGCGGUGGCCCUUGCCGACUUCUACCCGU\
) } def
/len { sequence length } bind def

/coor [
[120.41433716 328.37152100]
[124.08937836 313.66540527]
[132.57514954 301.10482788]
[144.84695435 292.20660400]
[140.70242310 277.79052734]
[136.55789185 263.37448120]
[132.41337585 248.95840454]
[128.26884460 234.54234314]
[117.31618500 224.44836426]
[120.93927002 209.04759216]
[116.79473877 194.63151550]
[111.83398438 188.97322083]
[112.75299072 179.70240784]
[109.05880737 165.16441345]
[105.36462402 150.62643433]
[101.67044067 136.08845520]
[97.97625732 121.55046082]
[94.28207397 107.01247406]
[91.09425354 104.50286102]
[89.10278320 100.54003906]
[88.95569611 95.72782135]
[90.98899841 90.94730377]
[88.66551971 76.12834930]
[86.34204865 61.30939102]
[84.01857758 46.49043655]
[81.69510651 31.67147827]
[79.37162781 16.85252190]
[77.04815674 2.03356528]
[63.28569794 -1.56966448]
[51.99046707 -10.14692116]
[44.86796570 -22.36118698]
[42.97753143 -36.32954788]
[46.57490540 -49.91344070]
[55.07821274 -61.04605484]
[67.16178131 -68.04681396]
[65.30030060 -82.93086243]
[63.43881989 -97.81491089]
[61.57733917 -112.69895935]
[59.71585846 -127.58300781]
[57.62312698 -142.43630981]
[55.29965210 -157.25526428]
[52.97618103 -172.07421875]
[50.65270996 -186.89317322]
[48.32923508 -201.71212769]
[46.00576401 -216.53108215]
[33.94048309 -227.10504150]
[34.82886124 -243.12348938]
[47.98941040 -252.29843140]
[63.32648087 -247.59164429]
[69.07478333 -232.61376953]
[60.82471848 -218.85455322]
[63.14819336 -204.03559875]
[65.47166443 -189.21664429]
[67.79513550 -174.39768982]
[70.11861420 -159.57873535]
[72.44208527 -144.75978088]
[76.66230774 -138.52958679]
[74.59990692 -129.44448853]
[76.46138763 -114.56044006]
[78.32286835 -99.67639160]
[80.18434906 -84.79234314]
[82.04582977 -69.90829468]
[97.21597290 -65.15376282]
[108.86522675 -54.25076675]
[114.65402222 -39.32030869]
[113.39006042 -23.29888153]
[105.27346802 -9.36093521]
[91.86711884 -0.28990749]
[94.19058990 14.52904892]
[96.51406097 29.34800529]
[98.83753204 44.16696167]
[101.16100311 58.98591995]
[103.48448181 73.80487823]
[105.80795288 88.62383270]
[108.82006073 103.31829071]
[112.51424408 117.85627747]
[116.20842743 132.39425659]
[119.90261078 146.93225098]
[123.59679413 161.47023010]
[127.29097748 176.00822449]
[131.21080017 190.48699951]
[135.35533142 204.90306091]
[146.60443115 216.02816772]
[142.68490601 230.39781189]
[146.82943726 244.81387329]
[150.97396851 259.22994995]
[155.11848450 273.64599609]
[159.26301575 288.06207275]
[174.38687134 289.08422852]
[188.24778748 295.22027588]
[199.17199707 305.72918701]
[205.84033203 319.34201050]
[207.44757080 334.41491699]
[203.79963684 349.12777710]
[195.33703613 361.70394897]
[183.08164978 370.62481689]
[168.51339722 374.81307983]
[153.39144897 373.76303101]
[139.54187012 367.60150146]
[128.63705444 357.07244873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[10 82]
[11 81]
[13 80]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
