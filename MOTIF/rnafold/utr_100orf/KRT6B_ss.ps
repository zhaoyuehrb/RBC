%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCAGCCUCUCACACUCUCCUAAGCCCUCUCAUCUCCUGGAACCAUGGCCAGCACAUCCACCACCAUCAGGAGCCACAGCAGCAGCCGCCGGGGUUUCAGUGCCAACUCAGCCAGGCUCCCUGGGGUCAGCCGCUCUGGCUUCA\
) } def
/len { sequence length } bind def

/coor [
[-70.97917175 121.19232178]
[-74.80825806 119.79515076]
[-88.55819702 125.79008484]
[-102.30813599 131.78500366]
[-115.72312164 138.49604797]
[-128.76589966 145.90457153]
[-141.80867004 153.31309509]
[-154.85144043 160.72160339]
[-167.89421082 168.13012695]
[-163.06909180 182.38195801]
[-161.02861023 197.28942871]
[-161.84654236 212.31365967]
[-165.49330139 226.91152954]
[-171.83706665 240.55532837]
[-180.64851379 252.75183105]
[-191.60911560 263.06018066]
[-204.32264709 271.10766602]
[-218.32954407 276.60345459]
[-233.12344360 279.34881592]
[-248.16955566 279.24456787]
[-262.92398071 276.29440308]
[-276.85336304 270.60504150]
[-289.45413208 262.38211060]
[-300.27084351 251.92285156]
[-308.91241455 239.60539246]
[-315.06646729 225.87500000]
[-318.51055908 211.22799683]
[-319.12017822 196.19386292]
[-316.87329102 181.31610107]
[-311.85110474 167.13250732]
[-304.23519897 154.15582275]
[-294.30087280 142.85513306]
[-282.40722656 133.63897705]
[-268.98422241 126.84047699]
[-254.51710510 122.70542145]
[-239.52882385 121.38327789]
[-224.56121826 122.92185211]
[-210.15534973 127.26551056]
[-196.83197021 134.25724792]
[-185.07273865 143.64430237]
[-175.30271912 155.08735657]
[-162.25994873 147.67883301]
[-149.21717834 140.27032471]
[-136.17440796 132.86180115]
[-123.13163757 125.45328522]
[-136.50672913 118.66307831]
[-139.74847412 104.01756287]
[-130.48835754 92.21712494]
[-115.49207306 91.88346100]
[-105.71627045 103.26035309]
[-108.30306244 118.03507233]
[-94.55312347 112.04014587]
[-80.80318451 106.04521179]
[-95.69903564 104.28063965]
[-109.53188324 98.47958374]
[-121.23056793 89.09124756]
[-129.88919067 76.84264374]
[-134.83723450 62.68224716]
[-135.69157410 47.70659637]
[-132.38603210 33.07535172]
[-125.17658997 19.92149734]
[-114.62150574 9.26362419]
[-101.53813934 1.92703867]
[-86.93961334 -1.52014017]
[-71.95638275 -0.81097561]
[-57.74870300 3.99961710]
[-45.41675949 12.53912354]
[-35.91549683 24.14627457]
[-29.98065186 37.92225647]
[-28.07180405 52.80030060]
[-30.33676338 67.62831116]
[-36.60014343 81.25806427]
[-46.37692642 92.63411713]
[-58.90563202 100.87345886]
[-43.92646408 100.08315277]
[-28.94729805 99.29284668]
[-13.96813202 98.50254822]
[1.01103401 97.71224213]
[15.99020004 96.92193604]
[30.96936607 96.13163757]
[43.27130890 87.73451996]
[57.45996475 94.73398590]
[72.43913269 93.94368744]
[87.41829681 93.15338135]
[99.24531555 85.69595337]
[111.79139709 91.86745453]
[126.77056122 91.07714844]
[141.93118286 80.68084717]
[157.25982666 89.16536713]
[172.21899414 88.05943298]
[187.17817688 86.95350647]
[195.57189941 83.17793274]
[202.46380615 85.98534393]
[217.44297791 85.19503784]
[232.42213440 84.40473175]
[247.40130615 83.61443329]
[262.38046265 82.82412720]
[277.35964966 82.03382874]
[280.57803345 75.76411438]
[285.56732178 70.86042786]
[291.79870605 67.79676056]
[298.62591553 66.85453033]
[305.35214233 68.09700775]
[311.30130005 71.36612701]
[315.88571167 76.30181885]
[318.66436768 82.38135529]
[333.62356567 83.48728943]
[348.58273315 84.59322357]
[357.15548706 71.84946442]
[370.95864868 65.11385345]
[386.27920532 66.19823456]
[398.99603271 74.81090546]
[405.68835449 88.63510895]
[404.55593872 103.95219421]
[395.90347290 116.64195251]
[382.05834961 123.29090118]
[366.74487305 122.11050415]
[354.08230591 113.41828156]
[347.47680664 99.55239868]
[332.51760864 98.44646454]
[317.55844116 97.34053040]
[298.17120361 109.98329926]
[278.14993286 97.01299286]
[263.17077637 97.80329132]
[248.19160461 98.59359741]
[233.21244812 99.38390350]
[218.23327637 100.17420197]
[203.25410461 100.96450806]
[188.28410339 101.91268158]
[173.32493591 103.01860809]
[158.36575317 104.12454224]
[150.19398499 113.10095215]
[137.69383240 114.10792542]
[127.56086731 106.05631256]
[112.58170319 106.84661865]
[100.75468445 114.30404663]
[88.20860291 108.13254547]
[73.22943878 108.92285156]
[58.25027084 109.71315002]
[44.87691879 118.16679382]
[31.75967026 111.11080170]
[16.78050423 111.90110779]
[1.80133724 112.69140625]
[-13.17782879 113.48171234]
[-28.15699577 114.27201843]
[-43.13616180 115.06231689]
[-58.11532593 115.85262299]
[-62.00926590 119.35225677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[74 147]
[75 146]
[76 145]
[77 144]
[78 143]
[79 142]
[80 141]
[82 139]
[83 138]
[84 137]
[86 135]
[87 134]
[89 131]
[90 130]
[91 129]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
