%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:38:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGCUGGUGUCUGAAGCCGCUCGCGCCCAGGGUGACCCUGUUUGCAGCACGAUGUCUGAAGAAGAGGCGGCUCAGAUCCCCAGAUCCAGUGUGUGGGAGCAGGACCAGCAGAACGUGGUGCAGCGUGUGGUGGCUCUGCCCCUGGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[98.52160645 173.93667603]
[97.29896545 158.98658752]
[96.07632446 144.03649902]
[74.26798248 135.95095825]
[59.58152771 117.91522217]
[56.08175278 94.92106628]
[41.68935776 90.69507599]
[27.29696274 86.46909332]
[12.90456676 82.24310303]
[-4.85136223 87.01620483]
[-16.49094963 73.91710663]
[-30.96655464 69.98558044]
[-45.44215775 66.05405426]
[-59.91776276 62.12253189]
[-74.39336395 58.19100571]
[-88.86897278 54.25947952]
[-98.03281403 55.02908325]
[-103.59818268 50.09730148]
[-117.99057770 45.87131119]
[-132.38296509 41.64532471]
[-146.77536011 37.41933441]
[-161.16775513 33.19334793]
[-175.56015015 28.96735954]
[-182.84146118 47.47135544]
[-208.48037720 56.33259583]
[-223.46789551 56.94442368]
[-238.44837952 57.70909119]
[-253.42030334 58.62651825]
[-269.64184570 70.52729797]
[-286.59735107 61.30551529]
[-301.51937866 62.83285904]
[-316.44140625 64.36020660]
[-331.36346436 65.88755035]
[-346.28549194 67.41489410]
[-361.42663574 75.04259491]
[-372.94775391 62.60472488]
[-364.18530273 48.09073257]
[-347.81283569 52.49285889]
[-332.89080811 50.96551132]
[-317.96878052 49.43816757]
[-303.04672241 47.91082382]
[-288.12469482 46.38347626]
[-282.36181641 37.85647583]
[-272.64093018 33.85539246]
[-262.11294556 35.94037628]
[-254.33772278 43.65459824]
[-239.36581421 42.73717499]
[-232.84255981 39.16745377]
[-224.07971191 41.95690918]
[-209.09220886 41.34507751]
[-205.76931763 34.62135696]
[-219.21676636 27.97559166]
[-232.66410828 21.32960701]
[-226.01789856 7.88238001]
[-212.57099915 14.52814579]
[-199.12355042 21.17390823]
[-195.80067444 14.45018482]
[-204.41824341 2.17266297]
[-213.03581238 -10.10485935]
[-228.52659607 -14.27796745]
[-234.78988647 -29.04789734]
[-227.02101135 -43.08442307]
[-211.17958069 -45.61992264]
[-199.41780090 -34.70937729]
[-200.75828552 -18.72242546]
[-192.14071655 -6.44490385]
[-183.52314758 5.83261824]
[-171.33416748 14.57496452]
[-156.94177246 18.80095291]
[-142.54937744 23.02694130]
[-128.15698242 27.25292969]
[-113.76458740 31.47891808]
[-99.37219238 35.70490646]
[-84.93744659 39.78387451]
[-70.46183777 43.71540070]
[-55.98623657 47.64692688]
[-41.51063156 51.57845306]
[-27.03502846 55.50997543]
[-12.55942535 59.44150162]
[-1.87245357 53.69443893]
[10.24769115 56.89601517]
[17.13055611 67.85070801]
[31.52294922 72.07669830]
[45.91534424 76.30268097]
[60.30773926 80.52867126]
[65.69665527 72.10934448]
[72.83926392 65.11586761]
[81.37040710 59.90578079]
[90.85395813 56.74542618]
[100.80507660 55.79637909]
[110.71504211 57.10715485]
[120.07721710 60.61074448]
[128.41299438 66.12803650]
[135.29620361 73.37696075]
[140.37496948 81.98693085]
[143.38963318 91.51779175]
[144.18609619 101.48228455]
[158.87506104 104.52110291]
[173.56402588 107.55991364]
[182.66363525 106.23127747]
[188.52021790 110.81343842]
[203.14414978 114.15125275]
[217.76806641 117.48906708]
[232.39198303 120.82688141]
[247.01589966 124.16469574]
[262.19177246 119.69220734]
[272.87823486 130.06761169]
[287.50216675 133.40542603]
[302.12606812 136.74324036]
[317.30197144 132.27075195]
[327.98843384 142.64614868]
[342.61233521 145.98396301]
[353.96716309 139.78335571]
[366.10787964 142.90596008]
[372.62930298 153.13880920]
[387.18209839 156.77423096]
[401.73489380 160.40965271]
[416.28765869 164.04508972]
[429.70758057 155.69754028]
[445.08032227 159.36558533]
[453.28552246 172.87300110]
[449.45516968 188.20610046]
[435.86175537 196.26802063]
[420.57000732 192.27577209]
[412.65225220 178.59786987]
[398.09945679 174.96244812]
[383.54666138 171.32702637]
[368.99386597 167.69160461]
[352.44082642 173.44160461]
[339.27453613 160.60787964]
[324.65060425 157.27006531]
[310.52072144 161.98129272]
[298.78826904 151.36715698]
[284.16433716 148.02934265]
[269.54043579 144.69152832]
[255.41055298 149.40275574]
[243.67808533 138.78860474]
[229.05416870 135.45079041]
[214.43025208 132.11299133]
[199.80633545 128.77517700]
[185.18240356 125.43735504]
[170.52520752 122.24887848]
[155.83624268 119.21006012]
[141.14727783 116.17124939]
[134.11944580 128.11532593]
[123.73918915 137.29690552]
[111.02641296 142.81385803]
[112.24905396 157.76394653]
[113.47169495 172.71403503]
[124.72306061 184.15022278]
[122.65402985 200.05929565]
[108.85179138 208.23718262]
[93.90423584 202.41049194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[6 85]
[7 84]
[8 83]
[9 82]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[25 50]
[26 49]
[27 47]
[28 46]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[57 67]
[58 66]
[59 65]
[97 144]
[98 143]
[99 142]
[101 141]
[102 140]
[103 139]
[104 138]
[105 137]
[107 135]
[108 134]
[109 133]
[111 131]
[112 130]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
