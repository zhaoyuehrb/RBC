%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGUCUUGGAGCAAGAGAACUUGGCAGGCUCUCCCCAUGGCAGUCUUAUUCCUCCUCCUGUUCCUAUGUGGAACUCCCCAGGCUGCAGACAACAUGCAGGCCAUCUAUGUGGCCUUGGGGGAGGCAGUAGAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[-128.22314453 311.96118164]
[-136.81907654 324.25384521]
[-145.41500854 336.54653931]
[-154.01094055 348.83920288]
[-162.60687256 361.13189697]
[-171.20280457 373.42456055]
[-179.65927124 385.81359863]
[-187.97520447 398.29739380]
[-196.29112244 410.78121948]
[-191.72073364 425.73599243]
[-197.87991333 440.10952759]
[-211.86048889 447.11508179]
[-227.06124878 443.44482422]
[-236.30487061 430.83175659]
[-235.22680664 415.23138428]
[-224.33605957 404.00970459]
[-208.77493286 402.46527100]
[-200.45899963 389.98147583]
[-192.14308167 377.49768066]
[-191.04348755 370.12487793]
[-183.49548340 364.82864380]
[-174.89955139 352.53594971]
[-166.30361938 340.24328613]
[-157.70768738 327.95059204]
[-149.11175537 315.65792847]
[-140.51582336 303.36523438]
[-147.67073059 290.18164062]
[-162.66210938 290.69006348]
[-177.64678955 291.36788940]
[-192.62284851 292.21496582]
[-202.96095276 304.16903687]
[-218.72970581 305.22833252]
[-230.57377625 294.76440430]
[-231.46629333 278.98535156]
[-220.87774658 267.25256348]
[-205.09013367 266.52691650]
[-193.46995544 277.23892212]
[-178.49388123 276.39181519]
[-171.93817139 272.84362793]
[-163.17054749 275.69869995]
[-148.17916870 275.19024658]
[-134.03294373 270.20178223]
[-122.03869629 261.19415283]
[-110.04444885 252.18647766]
[-98.05019379 243.17881775]
[-86.05593872 234.17115784]
[-80.52532959 220.34143066]
[-64.84415436 218.24114990]
[-52.84989929 209.23348999]
[-40.85564804 200.22583008]
[-28.86139679 191.21817017]
[-16.86714363 182.21051025]
[-4.97544861 173.06788635]
[6.81217194 163.79147339]
[18.59979248 154.51504517]
[30.38741302 145.23861694]
[42.17503357 135.96220398]
[53.96265411 126.68578339]
[65.75027466 117.40935516]
[77.53789520 108.13293457]
[70.91314697 82.23116302]
[94.40769196 56.07399750]
[94.06869507 41.07782745]
[93.72970581 26.08165932]
[93.39070892 11.08549023]
[93.05171967 -3.91067863]
[82.49426270 -15.99039650]
[85.49775696 -31.74979210]
[99.75817871 -39.09960556]
[114.33615875 -32.40169144]
[118.04871368 -16.79411316]
[108.04788971 -4.24967051]
[108.38687897 10.74649811]
[108.72587585 25.74266815]
[109.06486511 40.73883820]
[109.40385437 55.73500443]
[115.91312408 59.46051407]
[122.80518341 46.13761520]
[129.69723511 32.81471634]
[130.61114502 17.84258461]
[143.81060791 10.71697330]
[156.82929993 18.16770744]
[157.37165833 33.15789795]
[144.92478943 41.53003311]
[136.92822266 54.22077942]
[128.93167114 66.91152191]
[135.44093323 70.63703156]
[148.54284668 63.33361053]
[161.64476013 56.03018951]
[164.41403198 40.63976288]
[176.46121216 30.66984367]
[192.09800720 30.82791901]
[203.94117737 41.03934860]
[206.39874268 56.48261261]
[198.31033325 69.86586761]
[183.49504089 74.86995697]
[168.94818115 69.13209534]
[155.84626770 76.43551636]
[142.74435425 83.73894501]
[145.10762024 98.55160522]
[159.83166504 101.41558838]
[174.55570984 104.27957153]
[189.27976990 107.14355469]
[204.00381470 110.00753784]
[218.72785950 112.87152100]
[233.45190430 115.73551178]
[248.77374268 109.88969421]
[261.32482910 120.44440460]
[258.19372559 136.54185486]
[242.60139465 141.62237549]
[230.58792114 130.45954895]
[215.86387634 127.59557343]
[201.13983154 124.73159027]
[186.41578674 121.86760712]
[171.69172668 119.00362396]
[156.96768188 116.13964081]
[142.24363708 113.27565002]
[111.39257050 132.12454224]
[86.81431580 119.92055511]
[75.02669525 129.19697571]
[63.23907471 138.47340393]
[51.45145416 147.74981689]
[39.66383362 157.02624512]
[27.87621498 166.30267334]
[16.08859444 175.57908630]
[4.30097342 184.85551453]
[-0.56056541 192.69056702]
[-7.85948515 194.20477295]
[-19.85373688 203.21243286]
[-31.84799004 212.22007751]
[-43.84224319 221.22773743]
[-55.83649445 230.23539734]
[-62.22501373 244.70942688]
[-77.04828644 246.16542053]
[-89.04253387 255.17306519]
[-101.03678894 264.18072510]
[-113.03103638 273.18838501]
[-125.02529144 282.19604492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[7 19]
[8 18]
[9 17]
[27 41]
[28 40]
[29 38]
[30 37]
[42 138]
[43 137]
[44 136]
[45 135]
[46 134]
[48 132]
[49 131]
[50 130]
[51 129]
[52 128]
[53 126]
[54 125]
[55 124]
[56 123]
[57 122]
[58 121]
[59 120]
[60 119]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[87 99]
[88 98]
[89 97]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
