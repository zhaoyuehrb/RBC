%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCACUGCUCAGCACUAGGCCGGCAGAAUCUGAGCGAUGUCUUCCACACUCCCUGCCCUGCUCUGCGUCGGGCUGUGUCUGAGUCAGAGGAUCAGCGCCCAGCAGCAGACUCUCCCAAAACCGUUCAUCUGGGCCG\
) } def
/len { sequence length } bind def

/coor [
[270.11834717 257.44564819]
[261.79776001 244.85275269]
[258.92465210 229.99378967]
[261.96746826 215.12715149]
[249.57844543 206.67068481]
[234.70451355 205.88601685]
[227.66848755 191.71545410]
[215.27944946 183.25898743]
[202.89041138 174.80252075]
[190.40661621 166.48658752]
[177.82963562 158.31227112]
[165.25265503 150.13793945]
[152.67567444 141.96362305]
[140.09869385 133.78929138]
[127.43014526 125.75761414]
[114.67163849 117.86961365]
[101.91313934 109.98161316]
[93.87441254 108.73999023]
[88.95826721 101.76840973]
[76.38128662 93.59408569]
[60.59383774 92.56107330]
[54.13894272 79.13782501]
[41.56196213 70.96350098]
[28.98498154 62.78918076]
[16.22647858 54.90117645]
[3.29296875 47.30352402]
[-9.64054108 39.70587158]
[-22.57405090 32.10821915]
[-35.50756073 24.51056480]
[-49.51226044 34.32126617]
[-66.33551025 37.05665588]
[-82.62153625 32.21954727]
[-95.14279175 20.81845856]
[-101.43955231 5.15774441]
[-100.30303192 -11.62802410]
[-113.56665039 -18.63348389]
[-129.38288879 -18.23694992]
[-137.02330017 -31.02261543]
[-150.28692627 -38.02807617]
[-163.62886047 -44.88320541]
[-177.04740906 -51.58712769]
[-190.46595764 -58.29104996]
[-206.07800293 -54.59730530]
[-218.61038208 -64.61324310]
[-218.44932556 -80.65548706]
[-205.71838379 -90.41780090]
[-190.18365479 -86.41137695]
[-183.76203918 -71.70959473]
[-170.34349060 -65.00567627]
[-156.92494202 -58.30175400]
[-149.47270203 -58.12478638]
[-143.28146362 -51.29169464]
[-130.01785278 -44.28623199]
[-115.15031433 -45.18384552]
[-106.56118774 -31.89710045]
[-93.29757690 -24.89163971]
[-83.43801880 -33.48596191]
[-71.20532227 -38.20555496]
[-58.06416321 -38.46181488]
[-45.59605408 -34.20197678]
[-35.30899429 -25.91810226]
[-28.45508003 -14.59032345]
[-25.87814713 -1.57093298]
[-27.90990639 11.57705498]
[-14.97639656 19.17470741]
[-2.04288745 26.77236176]
[10.89062214 34.37001419]
[23.82413101 41.96766663]
[28.66506195 41.62818909]
[33.75617599 44.38496017]
[37.15930557 50.21220016]
[49.73628616 58.38652420]
[62.31326675 66.56084442]
[77.20111847 67.00917816]
[84.55561066 81.01710510]
[97.13259125 89.19142914]
[109.80113983 97.22310638]
[122.55964661 105.11111450]
[135.31814575 112.99911499]
[144.34579468 114.87638855]
[148.27301025 121.21231079]
[160.84999084 129.38664246]
[173.42697144 137.56095886]
[186.00395203 145.73529053]
[198.58093262 153.90960693]
[207.56385803 155.99041748]
[211.34689331 162.41348267]
[223.73591614 170.86994934]
[236.12495422 179.32641602]
[251.88502502 180.71595764]
[258.03491211 194.28166199]
[270.42395020 202.73812866]
[283.16012573 194.48796082]
[298.04455566 191.74987793]
[312.80340576 194.91049194]
[325.19424438 203.45773315]
[333.34652710 216.06349182]
[336.04412842 230.78993225]
[332.90664673 245.38737488]
[345.29568481 253.84385681]
[357.68472290 262.30032349]
[370.07373047 270.75677490]
[382.46276855 279.21325684]
[394.85180664 287.66973877]
[414.94778442 288.19213867]
[422.73468018 305.83709717]
[435.49319458 313.72509766]
[448.25170898 321.61309814]
[460.13659668 312.20431519]
[474.52371216 307.43078613]
[489.67572021 307.86889648]
[503.76296997 313.46575928]
[515.08435059 323.54556274]
[522.27276611 336.89108276]
[524.46014404 351.89077759]
[521.38238525 366.73339844]
[513.41107178 379.62658691]
[501.50888062 389.01345825]
[487.11297607 393.76046753]
[471.96179199 393.29443359]
[457.88488770 387.67160034]
[446.58209229 377.57098389]
[439.41830444 364.21224976]
[437.25857544 349.20852661]
[440.36370850 334.37161255]
[427.60519409 326.48361206]
[414.84667969 318.59561157]
[405.05059814 321.84558105]
[394.88217163 319.06500244]
[387.81289673 310.94992065]
[386.39535522 300.05874634]
[374.00631714 291.60229492]
[361.61727905 283.14581299]
[349.22824097 274.68936157]
[336.83920288 266.23287964]
[324.45016479 257.77642822]
[311.99917603 266.01666260]
[297.30209351 268.86990356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 92]
[5 91]
[7 89]
[8 88]
[9 87]
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 79]
[16 78]
[17 77]
[19 76]
[20 75]
[22 73]
[23 72]
[24 71]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[35 56]
[36 55]
[38 53]
[39 52]
[40 50]
[41 49]
[42 48]
[99 136]
[100 135]
[101 134]
[102 133]
[103 132]
[104 131]
[106 127]
[107 126]
[108 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
