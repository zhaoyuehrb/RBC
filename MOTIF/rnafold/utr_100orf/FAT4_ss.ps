%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACUUAGCACCAGACAGGGCUACUGGCCGCCCGUGGCUCCCGUUGCACACUCUAUCAGUAUCUCAGCUCCUUCGAGUGUUUUGGCUACUGUCAUUGC\
) } def
/len { sequence length } bind def

/coor [
[89.27551270 279.61163330]
[86.19081879 264.49578857]
[91.78933716 250.12011719]
[104.28460693 241.07180786]
[103.35206604 226.10083008]
[102.41951752 211.12985229]
[91.92218018 197.16175842]
[100.02117920 180.71629333]
[98.62348938 165.78155518]
[97.22579956 150.84681702]
[95.82810974 135.91207886]
[84.51416016 132.66911316]
[74.84136963 125.96392059]
[67.83484650 116.50712585]
[64.23713684 105.30092621]
[64.42951202 93.53294373]
[50.54911041 87.84661865]
[36.66870117 82.16029358]
[20.96544647 84.08860016]
[12.12125397 72.10404205]
[-1.75915301 66.41771698]
[-15.72631359 60.94794464]
[-29.77684975 55.69604874]
[-43.82738876 50.44415283]
[-57.87792206 45.19225693]
[-71.92845917 39.94036102]
[-87.56414795 42.35610199]
[-96.77677917 30.65239906]
[-110.82731628 25.40050316]
[-127.78085327 25.51842499]
[-132.58737183 9.26008224]
[-118.29499054 0.14064573]
[-105.57542419 11.34996605]
[-91.52488708 16.60186195]
[-76.89418793 13.81046963]
[-66.67656708 25.88982201]
[-52.62602615 31.14171982]
[-38.57548904 36.39361572]
[-24.52495384 41.64551163]
[-10.47441769 46.89741135]
[-2.97480631 46.27989197]
[3.92717314 52.53731155]
[17.80757904 58.22363663]
[32.51801682 55.88860703]
[42.35502625 68.27988434]
[56.23543549 73.96620941]
[70.11584473 79.65253448]
[86.02382660 66.65710449]
[106.44352722 64.42524719]
[124.78316498 73.67744446]
[137.10749817 65.12696075]
[149.43182373 56.57647324]
[161.75616455 48.02598953]
[174.08050537 39.47550583]
[186.40483093 30.92502213]
[184.84494019 14.54900837]
[191.67001343 -0.31589708]
[204.95396423 -9.69891071]
[221.05944824 -11.14536762]
[235.63360596 -4.35826540]
[247.68606567 -13.28789806]
[259.73852539 -22.21753120]
[261.81689453 -37.88456345]
[274.41540527 -47.42673111]
[290.05960083 -45.18283081]
[299.46801758 -32.48413467]
[297.05886841 -16.86454773]
[284.26138306 -7.59089899]
[268.66815186 -10.16507721]
[256.61569214 -1.23544407]
[244.56324768 7.69418907]
[247.00822449 21.22641945]
[243.32987976 34.54568481]
[234.19927979 45.00551605]
[221.37669373 50.50173950]
[207.37240601 49.89563751]
[194.95532227 43.24935532]
[182.63098145 51.79983902]
[170.30665588 60.35032272]
[157.98231506 68.90081024]
[145.65797424 77.45129395]
[133.33364868 86.00177765]
[136.07873535 97.67475128]
[134.85476685 109.60353088]
[129.79637146 120.47580719]
[121.46002960 129.09552002]
[110.76284790 134.51438904]
[112.16053772 149.44912720]
[113.55822754 164.38386536]
[114.95591736 179.31861877]
[124.43804932 188.23187256]
[125.20496368 200.81901550]
[117.39050293 210.19729614]
[118.32305145 225.16828918]
[119.25559235 240.13926697]
[132.77716064 247.56698608]
[140.11640930 261.13674927]
[138.93141174 276.51855469]
[129.60029602 288.80407715]
[115.10060120 294.07305908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[8 90]
[9 89]
[10 88]
[11 87]
[16 47]
[17 46]
[18 45]
[20 43]
[21 42]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[28 34]
[29 33]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
