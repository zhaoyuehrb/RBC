%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGGGCAGAGCCGAGCACCGCGCACCGCGUCAUGGGGGCCGCCUCGGGCCGCCGGGGGCCGGGGCUGCUGCUGCCGCUGCCGCUGCUGUUGCUGCUGCCGCCGCAGCCCGCCCUGGCGUUGGACCCCGGGC\
) } def
/len { sequence length } bind def

/coor [
[90.46105957 314.83081055]
[80.38421631 303.14916992]
[78.24523163 287.87081909]
[84.72665405 273.87100220]
[97.76028442 265.61703491]
[97.76028442 250.61703491]
[97.76028442 235.61703491]
[97.76028442 220.61703491]
[97.41125488 205.62109375]
[96.71337128 190.63734436]
[96.01549530 175.65357971]
[87.69442749 163.30007935]
[94.78129578 149.15486145]
[94.08341217 134.17111206]
[93.38553619 119.18735504]
[87.21697235 114.92134857]
[85.99668121 129.87162781]
[72.43925476 136.29005432]
[60.10197067 127.75826263]
[61.32198334 112.80796051]
[74.87984467 106.38932800]
[68.71128082 102.12332153]
[54.44543457 106.75857544]
[40.17958832 111.39382935]
[25.91373825 116.02908325]
[12.71825027 126.67405701]
[-1.16358650 116.94107819]
[4.34615231 100.90738678]
[21.27848434 101.76323700]
[35.54433060 97.12798309]
[49.81018066 92.49272919]
[64.07602692 87.85747528]
[65.11982727 80.43046570]
[50.26583862 78.34262085]
[52.35392761 63.48866653]
[67.20742035 65.57643890]
[68.25122070 58.14942932]
[55.81565475 49.76153564]
[40.04815292 48.45909119]
[33.82341003 34.92757797]
[21.38784409 26.53968430]
[8.95228100 18.15179062]
[-3.48328209 9.76389790]
[-18.94742775 13.02514744]
[-32.14248276 4.32652092]
[-35.24005127 -11.17124081]
[-26.40240669 -24.27359009]
[-10.87276173 -27.20713615]
[2.13541818 -18.23145676]
[4.90461159 -2.67166591]
[17.34017563 5.71622753]
[29.77573776 14.10412121]
[42.21130371 22.49201393]
[57.08933258 23.19450188]
[64.20355225 37.32597351]
[76.63911438 45.71386719]
[104.78366089 66.19372559]
[105.83016968 92.90012360]
[117.86201477 83.94274139]
[129.89385986 74.98535919]
[141.92572021 66.02798462]
[153.95756531 57.07060623]
[156.98864746 51.02809906]
[161.90467834 47.95244217]
[166.76406860 47.99190521]
[179.19963074 39.60401154]
[191.63519287 31.21611595]
[204.07075500 22.82822227]
[216.50631714 14.44032955]
[228.94187927 6.05243587]
[241.37744141 -2.33545780]
[248.49166870 -16.46692848]
[263.36968994 -17.16941643]
[275.80526733 -25.55731010]
[282.91946411 -39.68878174]
[297.79751587 -40.39126968]
[310.23306274 -48.77916336]
[317.34729004 -62.91063309]
[332.22531128 -63.61312103]
[344.66088867 -72.00101471]
[351.77508545 -86.13248444]
[366.65313721 -86.83497620]
[379.08868408 -95.22286987]
[386.20291138 -109.35433960]
[401.08093262 -110.05682373]
[413.51651001 -118.44471741]
[420.21517944 -133.41334534]
[436.55328369 -134.82705688]
[445.72357178 -121.23154449]
[438.29244995 -106.61270905]
[421.90438843 -106.00915527]
[409.46884155 -97.62126160]
[403.24407959 -84.08975220]
[387.47659302 -82.78730011]
[375.04101562 -74.39940643]
[368.81628418 -60.86789703]
[353.04876709 -59.56544876]
[340.61322021 -51.17755508]
[334.38845825 -37.64604568]
[318.62097168 -36.34359741]
[306.18539429 -27.95570564]
[299.96066284 -14.42419243]
[284.19314575 -13.12174606]
[271.75759888 -4.73385286]
[265.53283691 8.79765987]
[249.76533508 10.10010624]
[237.32977295 18.48799896]
[224.89421082 26.87589264]
[212.45864868 35.26378632]
[200.02308655 43.65167999]
[187.58752441 52.03957367]
[175.15196228 60.42746735]
[162.91493225 69.10245514]
[150.88308716 78.05982971]
[138.85124207 87.01721191]
[126.81939697 95.97458649]
[114.78754425 104.93196869]
[108.36929321 118.48947144]
[109.06716919 133.47323608]
[109.76505280 148.45698547]
[118.13603210 161.88223267]
[110.99925232 174.95570374]
[111.69712830 189.93946838]
[112.39500427 204.92321777]
[115.70951080 210.81503296]
[115.51033020 216.61048889]
[112.76028442 220.61703491]
[112.76028442 235.61703491]
[112.76028442 250.61703491]
[112.76028442 265.61703491]
[125.79391479 273.87100220]
[132.27532959 287.87081909]
[130.13635254 303.14916992]
[120.05950928 314.83081055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 130]
[6 129]
[7 128]
[8 127]
[9 124]
[10 123]
[11 122]
[13 120]
[14 119]
[15 118]
[22 32]
[23 31]
[24 30]
[25 29]
[37 56]
[38 55]
[40 53]
[41 52]
[42 51]
[43 50]
[58 117]
[59 116]
[60 115]
[61 114]
[62 113]
[65 112]
[66 111]
[67 110]
[68 109]
[69 108]
[70 107]
[71 106]
[73 104]
[74 103]
[76 101]
[77 100]
[79 98]
[80 97]
[82 95]
[83 94]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
