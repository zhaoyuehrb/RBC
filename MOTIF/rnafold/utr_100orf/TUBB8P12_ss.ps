%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGAAAUCGUGCUCACGCAGACCGGGCAGUGCGGGAACCAGAUCGGCGCCAAGUUCUGGGAGGUGAUCUCUGAUGAACAUGCCAUCGACUCCGCUG\
) } def
/len { sequence length } bind def

/coor [
[88.71060944 133.67832947]
[81.96318054 147.07505798]
[75.21575928 160.47178650]
[68.46833038 173.86849976]
[73.65957642 188.79588318]
[66.69998932 202.98530579]
[51.71856689 208.01843262]
[37.60351944 200.90922546]
[32.72905731 185.87542725]
[39.98711014 171.83631897]
[55.07160568 167.12107849]
[61.81903076 153.72434998]
[68.56645966 140.32763672]
[75.31388092 126.93090820]
[66.57276917 114.74103546]
[51.71946716 116.83377075]
[36.86616898 118.92649841]
[22.01287079 121.01922607]
[15.65801430 135.07693481]
[2.69938064 143.44816589]
[-12.72797680 143.46166992]
[-25.70124435 135.11314392]
[-32.08069992 121.06657410]
[-29.83068275 105.80416870]
[-19.66916275 94.19610596]
[-4.83864737 89.94647980]
[9.92850208 94.41132355]
[19.92014122 106.16593170]
[34.77344131 104.07319641]
[49.62673950 101.98046875]
[64.48003387 99.88774109]
[71.65779114 81.51015472]
[86.94905853 70.60700226]
[104.76631927 69.89481354]
[119.24677277 78.57546234]
[131.83106995 70.41239929]
[144.41535950 62.24933624]
[156.99964905 54.08627319]
[169.58393860 45.92321014]
[168.59912109 33.25922394]
[173.13369751 21.47200775]
[182.24647522 12.83353901]
[194.12043762 8.97988033]
[206.42483521 10.60155296]
[216.77265930 17.32072258]
[229.84010315 9.95581150]
[242.90754700 2.59090018]
[248.97964478 -4.47467661]
[256.49792480 -4.79262447]
[269.78808594 -11.74757767]
[283.07824707 -18.70252991]
[296.36840820 -25.65748405]
[298.02062988 -35.26113510]
[303.90930176 -42.84971237]
[312.54760742 -46.72076035]
[321.85250854 -46.08433914]
[329.64675903 -41.22063828]
[343.52716064 -46.90696716]
[357.40756226 -52.59329224]
[371.28796387 -58.27961731]
[377.67114258 -74.47524261]
[393.44882202 -80.99780273]
[408.78988647 -74.30522156]
[422.48672485 -80.42047119]
[436.18359375 -86.53572845]
[449.88043213 -92.65097809]
[456.93405151 -107.06021881]
[472.62802124 -110.38867950]
[484.92327881 -100.08305359]
[484.38796997 -84.04893494]
[471.43270874 -74.58632660]
[455.99569702 -78.95413208]
[442.29882812 -72.83888245]
[428.60198975 -66.72362518]
[414.90515137 -60.60837173]
[411.98208618 -47.95381927]
[402.12045288 -39.20445251]
[388.81878662 -37.76720047]
[376.97430420 -44.39921188]
[363.09390259 -38.71288300]
[349.21350098 -33.02655792]
[335.33306885 -27.34023285]
[324.48815918 -9.89883709]
[303.32336426 -12.36731339]
[290.03320312 -5.41236019]
[276.74304199 1.54259276]
[263.45285034 8.49754620]
[250.27246094 15.65834427]
[237.20501709 23.02325439]
[224.13757324 30.38816643]
[223.02246094 47.87053680]
[211.63876343 61.38869095]
[194.29980469 65.53476715]
[177.74700928 58.50750351]
[165.16271973 66.67056274]
[152.57841492 74.83362579]
[139.99412537 82.99668884]
[127.40983582 91.15975189]
[129.60964966 107.23242950]
[122.61006927 122.87050629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[15 31]
[16 30]
[17 29]
[18 28]
[35 98]
[36 97]
[37 96]
[38 95]
[39 94]
[45 90]
[46 89]
[47 88]
[49 87]
[50 86]
[51 85]
[52 84]
[57 82]
[58 81]
[59 80]
[60 79]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
