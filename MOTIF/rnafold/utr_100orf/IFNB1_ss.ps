%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:57:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACCCAUGGAGAAAGGACAUUCUAACUGCAACCUUUCGAAGCCUUUGCUCUGGCACAACAGGUAGUAGGCGACACUGUUCGUGUUGUCAACAUGACCAACAAGUGUCUCCUCCAAAUUGCUCUCCUGUUGUGCUUCUCCACUACAGCUCUUUCCAUGAGCUACAACUUGCUUGGAUUCCUACAAAGAAGCA\
) } def
/len { sequence length } bind def

/coor [
[64.32003021 442.61932373]
[61.20135117 457.29153442]
[58.08267593 471.96374512]
[54.96400070 486.63595581]
[60.54346085 502.05679321]
[49.77286148 514.42309570]
[33.73207474 511.01354980]
[28.92248726 495.33554077]
[40.29178619 483.51730347]
[43.41046524 468.84506226]
[46.52914047 454.17285156]
[49.64781570 439.50064087]
[32.77746201 426.58285522]
[24.70192146 406.85159302]
[27.69461060 385.67028809]
[41.00966263 368.83599854]
[61.06609726 360.99310303]
[62.27309799 346.04171753]
[63.48009491 331.09036255]
[64.68709564 316.13900757]
[57.38320541 308.96966553]
[55.19224930 298.74752808]
[59.07585144 288.80505371]
[67.97411346 282.52050781]
[69.66215515 267.61578369]
[71.35019684 252.71105957]
[73.03823853 237.80635071]
[74.72628021 222.90164185]
[72.49562073 218.66499329]
[72.91201782 212.98037720]
[76.71633911 207.54675293]
[78.88367462 192.70416260]
[81.05101013 177.86157227]
[83.21834564 163.01896667]
[75.29106140 160.35298157]
[67.77017212 156.69438171]
[60.77935791 152.10331726]
[54.43360519 146.65531921]
[48.83728409 140.43997192]
[44.08243561 133.55950928]
[40.24726486 126.12709808]
[37.39484406 118.26496887]
[35.57209396 110.10243988]
[20.58425903 110.70643616]
[5.59642315 111.31042480]
[-7.96723557 120.52775574]
[-22.61172676 113.14731598]
[-23.27205467 96.76146698]
[-9.26892853 88.22656250]
[4.99243402 96.32258606]
[19.98026848 95.71859741]
[34.96810532 95.11460876]
[43.37450027 67.64930725]
[62.76525497 46.45946884]
[89.37889862 35.65556335]
[88.65419769 20.67307854]
[87.92949677 5.69059467]
[87.20479584 -9.29188824]
[86.48009491 -24.27437210]
[85.75539398 -39.25685501]
[85.03069305 -54.23933792]
[84.30599213 -69.22182465]
[83.58129120 -84.20430756]
[82.85659027 -99.18679047]
[82.13188934 -114.16927338]
[71.80717468 -129.40917969]
[80.42382812 -144.69058228]
[79.45785522 -159.65943909]
[78.49188232 -174.62831116]
[76.68383026 -189.51893616]
[74.03945160 -204.28401184]
[71.39507294 -219.04907227]
[61.34609985 -231.26908875]
[66.71850586 -245.16104126]
[64.07412720 -259.92611694]
[61.42974472 -274.69119263]
[58.78536606 -289.45623779]
[56.14099121 -304.22131348]
[53.49661255 -318.98638916]
[50.73338318 -333.72967529]
[47.85148239 -348.45022583]
[44.61471939 -363.09686279]
[41.02498245 -377.66098022]
[37.43524933 -392.22509766]
[33.84551239 -406.78921509]
[30.25577927 -421.35336304]
[26.66604424 -435.91748047]
[23.07630920 -450.48159790]
[13.41511250 -464.41351318]
[24.12805557 -477.55386353]
[39.72052765 -470.89721680]
[37.64043427 -454.07135010]
[41.23017120 -439.50723267]
[44.81990433 -424.94308472]
[48.40964127 -410.37896729]
[51.99937439 -395.81484985]
[55.58911133 -381.25070190]
[59.17884445 -366.68658447]
[62.00436020 -364.55639648]
[63.93264771 -360.94577026]
[64.27645111 -356.29406738]
[62.57203293 -351.33212280]
[65.45393372 -336.61157227]
[69.83016205 -330.64340210]
[68.26168060 -321.63076782]
[70.90605927 -306.86569214]
[73.55043793 -292.10061646]
[76.19481659 -277.33557129]
[78.83919525 -262.57049561]
[81.48357391 -247.80541992]
[91.34340668 -236.64151001]
[86.16014099 -221.69345093]
[88.80451965 -206.92839050]
[91.44889832 -192.16331482]
[100.02970123 -204.46656799]
[114.47537231 -208.50668335]
[128.19381714 -202.44003296]
[134.92478943 -189.03503418]
[131.59671021 -174.40888977]
[119.72828674 -165.23606873]
[104.73553467 -165.70246887]
[93.46074677 -175.59428406]
[94.42671967 -160.62541199]
[95.39269257 -145.65655518]
[104.27383423 -137.43132019]
[105.19378662 -124.95931244]
[97.11437988 -114.89397430]
[97.83907318 -99.91149139]
[98.56377411 -84.92900848]
[99.28847504 -69.94652557]
[100.01317596 -54.96403885]
[100.73787689 -39.98155594]
[101.46257782 -24.99907303]
[102.18727875 -10.01658916]
[102.91197968 4.96589422]
[103.63668060 19.94837761]
[104.36138153 34.93086243]
[114.34157562 36.38134384]
[123.97880554 39.35322571]
[133.04258728 43.77543640]
[141.31619263 49.54222488]
[148.60173035 56.51567841]
[154.72499084 64.52902985]
[159.53953552 73.39065552]
[162.93023682 82.88861847]
[164.81599426 92.79579163]
[165.15173340 102.87525177]
[163.92938232 112.88594818]
[178.19523621 117.52120972]
[192.46109009 122.15646362]
[206.72692871 126.79171753]
[220.99278259 131.42697144]
[234.15744019 122.98742676]
[249.66029358 125.03570557]
[260.18136597 136.60466003]
[260.75296021 152.23179626]
[251.10513306 164.53845215]
[235.79333496 167.71380615]
[222.04731750 160.25854492]
[216.35752869 145.69282532]
[202.09167480 141.05755615]
[187.82583618 136.42230225]
[173.55998230 131.78704834]
[159.29412842 127.15180206]
[152.90217590 138.13626099]
[144.50115967 147.67243958]
[134.41012573 155.39817810]
[123.01232147 161.02006531]
[110.74057770 164.32460022]
[98.06094360 165.18630981]
[95.89360809 180.02890015]
[93.72627258 194.87150574]
[91.55893707 209.71409607]
[89.63099670 224.58967590]
[87.94295502 239.49440002]
[86.25491333 254.39910889]
[84.56686401 269.30383301]
[82.87882233 284.20852661]
[91.76351166 302.29370117]
[79.63845062 317.34600830]
[78.43145752 332.29736328]
[77.22445679 347.24871826]
[76.01745605 362.20010376]
[84.54736328 365.61325073]
[92.10033417 370.82336426]
[98.30451965 377.56759644]
[102.85589600 385.50775146]
[105.53311920 394.24719238]
[106.20832062 403.35073853]
[104.85319519 412.36624146]
[101.54014587 420.84710693]
[96.43843079 428.37432861]
[89.80553436 434.57736206]
[81.97416687 439.15216064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[17 183]
[18 182]
[19 181]
[20 180]
[24 178]
[25 177]
[26 176]
[27 175]
[28 174]
[31 173]
[32 172]
[33 171]
[34 170]
[43 52]
[44 51]
[45 50]
[55 137]
[56 136]
[57 135]
[58 134]
[59 133]
[60 132]
[61 131]
[62 130]
[63 129]
[64 128]
[65 127]
[67 124]
[68 123]
[69 122]
[70 114]
[71 113]
[72 112]
[74 110]
[75 109]
[76 108]
[77 107]
[78 106]
[79 105]
[80 103]
[81 102]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[148 164]
[149 163]
[150 162]
[151 161]
[152 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
