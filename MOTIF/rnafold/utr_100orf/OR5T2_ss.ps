%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCGUACAGUAUAUACAAGAGCACAGUUAACAUCCCCUUGAGUCAUGGUGUUGUUCAUUCUUUUUGUCAUAAUAUGAACUGUAACUUUAUGCAUAUCU\
) } def
/len { sequence length } bind def

/coor [
[110.09564972 319.88790894]
[108.23416901 305.00384521]
[106.37268829 290.11981201]
[102.34826660 283.76138306]
[104.69221497 274.74481201]
[103.29452515 259.81008911]
[101.89683533 244.87533569]
[100.49914551 229.94059753]
[91.60958862 217.98965454]
[98.02734375 203.52856445]
[96.62965393 188.59382629]
[95.23196411 173.65908813]
[92.58933258 171.07614136]
[91.15943146 167.01289368]
[91.65752411 162.09991455]
[94.46709442 157.27770996]
[94.46709442 142.27770996]
[94.46709442 127.27771759]
[94.46709442 112.27771759]
[88.51396179 108.67063141]
[84.84683990 102.22564697]
[84.77217102 94.35580444]
[74.24836731 83.66704559]
[63.72456741 72.97827911]
[53.20076370 62.28952408]
[42.67695999 51.60076523]
[27.89880753 57.71989822]
[11.94218731 57.73597336]
[-2.77744031 51.67578888]
[-14.04302120 40.48373032]
[-20.16983032 25.87473106]
[-20.25737762 10.07153320]
[-14.32164097 -4.53349304]
[-25.17277145 -14.88979340]
[-40.96492767 -14.27061558]
[-52.51261139 -25.06072617]
[-52.96479034 -40.85854721]
[-42.05319595 -52.29150772]
[-26.25147820 -52.57663727]
[-14.93451977 -41.54477310]
[-14.81647205 -25.74092484]
[-3.96534061 -15.38462353]
[8.73267555 -21.56784248]
[22.81150055 -23.01957703]
[36.56229401 -19.54290009]
[48.30892181 -11.54033852]
[56.61225128 0.03262185]
[60.44645691 13.78157616]
[59.32573318 28.04120064]
[53.36572266 41.07696152]
[63.88952255 51.76572037]
[74.41332245 62.45447922]
[84.93712616 73.14324188]
[95.46092987 83.83200073]
[110.27988434 86.15547180]
[123.57006073 79.20051575]
[136.86022949 72.24556732]
[150.15040588 65.29061127]
[163.44056702 58.33565903]
[176.73074341 51.38070679]
[174.99729919 36.30225754]
[178.83164978 21.61681938]
[187.71525574 9.31047535]
[200.44665527 1.04755676]
[215.30404663 -2.05444312]
[230.27807617 0.42399549]
[243.34365845 8.14768410]
[252.73373413 20.07205582]
[257.17840576 34.58444214]
[256.07656860 49.72215271]
[249.57723999 63.43794632]
[238.55937195 73.87686920]
[224.51306152 79.62714386]
[209.33795166 79.91109467]
[195.08636475 74.69031525]
[183.68569946 64.67087555]
[170.39552307 71.62583160]
[157.10534668 78.58078003]
[143.81518555 85.53573608]
[130.52500916 92.49069214]
[117.23484039 99.44564056]
[109.46709442 112.27771759]
[109.46709442 127.27771759]
[109.46709442 142.27770996]
[109.46709442 157.27770996]
[110.16670227 172.26139832]
[111.56439209 187.19613647]
[112.96208191 202.13087463]
[121.95160675 215.15005493]
[115.43389130 228.54290771]
[116.83157349 243.47764587]
[118.22926331 258.41238403]
[119.62695312 273.34713745]
[121.25673676 288.25833130]
[123.11821747 303.14236450]
[124.97969818 318.02642822]
[136.71029663 328.97048950]
[135.32417297 344.95355225]
[121.88465118 353.71475220]
[106.70138550 348.53326416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[5 93]
[6 92]
[7 91]
[8 90]
[10 88]
[11 87]
[12 86]
[16 85]
[17 84]
[18 83]
[19 82]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[33 42]
[34 41]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
