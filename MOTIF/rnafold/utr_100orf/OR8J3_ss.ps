%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCCUGAAAAUUUCACCAGGGUCACUGAGUUUAUUCUCACAGGUGUCUCUAGCUGUCCAGAGCUCCAGAUUCCCCUCUUCCUGGUCUUCCUAGUGC\
) } def
/len { sequence length } bind def

/coor [
[74.57392883 139.86569214]
[66.95339203 133.81834412]
[54.90093613 142.74798584]
[42.84848022 151.67761230]
[30.79602623 160.60725403]
[25.64770508 168.37174988]
[18.22700882 169.62023926]
[5.90267420 178.17073059]
[-6.42166090 186.72120667]
[-18.74599457 195.27169800]
[-17.39354706 210.57092285]
[-23.88645554 224.48989868]
[-36.47816086 233.28446960]
[-51.78155518 234.58895874]
[-65.68009949 228.05245972]
[-74.43516541 215.43324280]
[-75.69168091 200.12583923]
[-69.11164093 186.24784851]
[-56.46504974 177.53237915]
[-41.15377808 176.32385254]
[-27.29648018 182.94735718]
[-14.97214413 174.39688110]
[-2.64780998 165.84638977]
[9.67652512 157.29591370]
[21.86639404 148.55479431]
[33.91884613 139.62516785]
[45.97130203 130.69552612]
[58.02375793 121.76589203]
[52.73905563 98.52947998]
[59.45813370 75.66656494]
[47.98414612 66.00490570]
[36.51015854 56.34325027]
[25.03616905 46.68159485]
[9.31305695 48.28136444]
[-2.88310862 38.23004150]
[-4.31655741 22.49089432]
[5.86314964 10.40167999]
[21.61657333 9.13471508]
[33.59748459 19.44166756]
[34.69782639 35.20760345]
[46.17181396 44.86926270]
[57.64580154 54.53091812]
[69.11978912 64.19257355]
[86.05263519 54.82002640]
[105.32213593 53.01666260]
[123.69999695 59.08460617]
[133.18203735 47.46175003]
[135.91033936 31.87755966]
[149.95100403 26.90677261]
[159.43305969 15.28391552]
[168.91510010 3.66105866]
[178.39714050 -7.96179819]
[176.99307251 -23.47522354]
[186.77479553 -35.12737656]
[201.57312012 -36.37033844]
[211.05517578 -47.99319458]
[220.53721619 -59.61605072]
[230.01927185 -71.23890686]
[228.17515564 -86.93524170]
[238.03559875 -99.28624725]
[253.75054932 -100.96429443]
[265.99661255 -90.97382355]
[267.50842285 -75.24201202]
[257.38903809 -63.10225677]
[241.64212036 -61.75685883]
[232.16007996 -50.13400269]
[222.67802429 -38.51114655]
[213.19598389 -26.88829041]
[214.94995117 -12.14179325]
[205.49937439 -0.21948858]
[190.02000427 1.52024841]
[180.53794861 13.14310455]
[171.05590820 24.76596069]
[161.57386780 36.38881683]
[159.52378845 51.14166641]
[144.80490112 56.94379807]
[135.32284546 68.56665039]
[140.61340332 75.78614044]
[144.44869995 83.87324524]
[146.69132996 92.53820038]
[147.26094055 101.47052002]
[146.13711548 110.35015106]
[143.36012268 118.85891724]
[139.02946472 126.69194031]
[133.30032349 133.56855774]
[142.04144287 145.75842285]
[150.78256226 157.94828796]
[159.52366638 170.13815308]
[175.05581665 174.15461731]
[181.46794128 188.86053467]
[173.84121704 202.97480774]
[158.02619934 205.67015076]
[146.15483093 194.87895203]
[147.33380127 178.87927246]
[138.59268188 166.68940735]
[129.85157776 154.49954224]
[121.11045837 142.30966187]
[112.00476837 145.73449707]
[102.39089966 147.22332764]
[92.67581940 146.71311951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[7 24]
[8 23]
[9 22]
[10 21]
[30 43]
[31 42]
[32 41]
[33 40]
[46 77]
[47 76]
[49 74]
[50 73]
[51 72]
[52 71]
[55 68]
[56 67]
[57 66]
[58 65]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
