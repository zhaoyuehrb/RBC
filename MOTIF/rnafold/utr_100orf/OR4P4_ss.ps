%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAAAGCAAUAAUAGCACUUUGUUUAUUCUCUUGGGGUUUUCCCAAAAUAAGAACAUUGAAGUCCUCUGCUUUGUAUUAUUUUUGUUUUGCUACA\
) } def
/len { sequence length } bind def

/coor [
[94.84331512 433.91705322]
[97.63201141 414.73703003]
[98.09850311 399.74429321]
[85.36538696 392.01556396]
[78.16252899 378.86358643]
[78.51219940 363.77236938]
[86.42059326 350.79724121]
[99.84931946 343.47491455]
[100.31581879 328.48217773]
[100.78231812 313.48944092]
[101.24881744 298.49667358]
[101.71531677 283.50393677]
[102.18180847 268.51119995]
[102.64830780 253.51844788]
[95.31056976 240.55671692]
[103.47331238 227.00384521]
[103.93980408 212.01109314]
[104.40630341 197.01835632]
[104.87280273 182.02560425]
[105.33930206 167.03286743]
[98.00156403 154.07112122]
[106.16429901 140.51824951]
[106.63079834 125.52550507]
[85.97003937 120.09477997]
[77.46459198 102.20697784]
[85.02576447 85.59453583]
[78.69823456 71.99444580]
[72.37071228 58.39435577]
[66.04319000 44.79426575]
[59.71566010 31.19417763]
[45.49338150 31.53380966]
[32.26795197 26.41135025]
[22.04789925 16.64053345]
[16.37157631 3.73827744]
[16.07565498 -10.31076717]
[21.17197418 -23.35947990]
[30.85082054 -33.42641449]
[24.94931793 -47.21670914]
[19.04781342 -61.00700760]
[13.14630985 -74.79730225]
[7.24480581 -88.58760071]
[-7.05299330 -95.86444092]
[-10.13698101 -111.60828400]
[0.35861290 -123.74179840]
[16.38246727 -122.95718384]
[25.64245415 -109.85633087]
[21.03510094 -94.48909760]
[26.93660545 -80.69880676]
[32.83810806 -66.90850830]
[38.73961258 -53.11821365]
[44.64111710 -39.32791901]
[60.53438568 -38.95001221]
[74.74266052 -31.69016647]
[84.43141937 -18.94039536]
[87.64340973 -3.19343114]
[83.69386292 12.44455338]
[73.31575012 24.86665154]
[79.64327240 38.46673965]
[85.97080231 52.06682968]
[92.29832458 65.66691589]
[98.62585449 79.26700592]
[110.37705994 79.87459564]
[120.86174774 87.13813782]
[126.37131500 99.73001862]
[140.72117615 95.36179352]
[155.07104492 90.99357605]
[169.42091370 86.62535095]
[183.77078247 82.25713348]
[192.55802917 68.83462524]
[208.54374695 67.47949219]
[219.46505737 79.23128510]
[216.94406128 95.07502747]
[202.91465759 102.85675812]
[188.13899231 96.60700226]
[173.78913879 100.97521973]
[159.43927002 105.34343719]
[145.08940125 109.71166229]
[130.73953247 114.07987976]
[121.62354279 125.99200439]
[121.15704346 140.98475647]
[128.46142578 155.01887512]
[120.33204651 167.49935913]
[119.86554718 182.49211121]
[119.39904785 197.48484802]
[118.93254852 212.47760010]
[118.46605682 227.47033691]
[125.77043152 241.50447083]
[117.64105225 253.98495483]
[117.17455292 268.97769165]
[116.70806122 283.97042847]
[116.24156189 298.96319580]
[115.77506256 313.95593262]
[115.30856323 328.94866943]
[114.84206390 343.94140625]
[127.78959656 352.08444214]
[134.87602234 365.52612305]
[134.28680420 380.60986328]
[126.28022766 393.28863525]
[113.09124756 400.21078491]
[112.62474823 415.20355225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[16 86]
[17 85]
[18 84]
[19 83]
[20 82]
[22 80]
[23 79]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
