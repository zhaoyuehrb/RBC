%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGGUGACUGGCUGAGGCGGCGCCAGUUGGCCGGGCACGGGGCUGCUGUAAGGCCGAGGUUGCGGCGGAAGCGGAGACCAUGUUCCGAGCGGCGGCUCCGGGGCAGCUCCGGCGGGCGGCCUCAUUGCUACGAUUUCAGAGUACCCUGGUAAUAGCUGAGCAUGCAAAUGAUUCCCUAG\
) } def
/len { sequence length } bind def

/coor [
[72.39166260 246.60124207]
[64.67615509 232.13047791]
[73.57890320 218.35829163]
[73.83781433 203.36051941]
[74.09671783 188.36274719]
[74.35562897 173.36499023]
[71.31951141 166.60531616]
[74.75067139 158.11119080]
[75.26841736 143.12011719]
[62.49119186 108.24725342]
[77.89934540 84.31572723]
[68.54700470 72.58825684]
[59.19465256 60.86078262]
[49.84230804 49.13330841]
[40.28892899 37.56901169]
[30.53736877 26.17133331]
[20.78580666 14.77365589]
[11.03424549 3.37597895]
[1.28268421 -8.02169895]
[-8.46887684 -19.41937637]
[-23.31957626 -24.87532043]
[-25.71447754 -39.57612610]
[-35.46603775 -50.97380447]
[-43.44463730 -55.47549438]
[-45.28548813 -62.65340424]
[-54.83886719 -74.21769714]
[-62.73857498 -78.85643768]
[-64.45525360 -86.06504822]
[-73.80760193 -97.79251862]
[-83.15995026 -109.51999664]
[-92.51229858 -121.24746704]
[-101.86463928 -132.97494507]
[-117.00410461 -130.79687500]
[-131.10795593 -136.45179749]
[-140.42568970 -148.32807922]
[-142.53370667 -163.17436218]
[-136.96499634 -176.98939514]
[-146.31735229 -188.71687317]
[-163.60267639 -195.03016663]
[-165.56724548 -212.45774841]
[-175.12062073 -224.02204895]
[-184.67399597 -235.58634949]
[-194.22737122 -247.15063477]
[-203.78074646 -258.71493530]
[-213.33412170 -270.27923584]
[-222.88751221 -281.84353638]
[-232.44088745 -293.40783691]
[-241.99426270 -304.97213745]
[-251.54763794 -316.53643799]
[-261.10101318 -328.10073853]
[-270.65438843 -339.66500854]
[-286.14416504 -341.30947876]
[-295.66793823 -353.17343140]
[-294.00473022 -367.93041992]
[-303.55810547 -379.49472046]
[-320.94982910 -385.50872803]
[-323.21490479 -402.89981079]
[-332.96646118 -414.29748535]
[-347.81716919 -419.75341797]
[-350.21206665 -434.45422363]
[-359.96362305 -445.85189819]
[-369.71517944 -457.24957275]
[-379.46673584 -468.64727783]
[-394.83282471 -467.55645752]
[-407.74389648 -475.62847900]
[-413.35974121 -489.59008789]
[-409.72116089 -504.00878906]
[-419.47271729 -515.40643311]
[-435.10769653 -520.35406494]
[-438.37573242 -536.42431641]
[-425.91491699 -547.08544922]
[-410.54388428 -541.37023926]
[-408.07504272 -525.15802002]
[-398.32348633 -513.76031494]
[-383.51544189 -515.12414551]
[-370.59091187 -507.41561890]
[-364.61383057 -493.41107178]
[-368.06906128 -478.39883423]
[-358.31750488 -467.00115967]
[-348.56594849 -455.60348511]
[-338.81439209 -444.20578003]
[-324.66119385 -439.56509399]
[-321.56878662 -424.04904175]
[-311.81723022 -412.65136719]
[-299.76986694 -411.39416504]
[-291.55316162 -401.95568848]
[-291.99380493 -389.04809570]
[-282.44042969 -377.48379517]
[-267.63473511 -376.33190918]
[-257.78149414 -364.74017334]
[-259.09008789 -349.21841431]
[-249.53671265 -337.65411377]
[-239.98333740 -326.08981323]
[-230.42996216 -314.52551270]
[-220.87658691 -302.96121216]
[-211.32321167 -291.39691162]
[-201.76983643 -279.83261108]
[-192.21644592 -268.26831055]
[-182.66307068 -256.70401001]
[-173.10969543 -245.13972473]
[-163.55632019 -233.57542419]
[-154.00294495 -222.01112366]
[-141.97906494 -220.54617310]
[-133.92651367 -210.96728516]
[-134.58987427 -198.06921387]
[-125.23753357 -186.34175110]
[-110.52971649 -188.69670105]
[-96.52473450 -183.33792114]
[-87.01960754 -171.61108398]
[-84.64486694 -156.60250854]
[-90.13716888 -142.32728577]
[-80.78482056 -130.59980774]
[-71.43247986 -118.87233734]
[-62.08012772 -107.14486694]
[-52.72778320 -95.41739655]
[-43.27456665 -83.77108002]
[-33.72119141 -72.20677948]
[-24.06836128 -60.72536469]
[-14.31680012 -49.32768631]
[-0.16359816 -44.68698120]
[2.92880011 -29.17093658]
[12.68036175 -17.77326012]
[22.43192291 -6.37558270]
[32.18348312 5.02209473]
[41.93504715 16.41977310]
[51.68660736 27.81744957]
[56.31851959 29.07450104]
[60.19999313 33.27012634]
[61.56977844 39.78096008]
[70.92212677 51.50843430]
[80.27447510 63.23590469]
[89.62682343 74.96337891]
[100.65007019 68.38448334]
[115.19561768 67.20553589]
[130.47756958 73.07764435]
[143.03083801 86.20699310]
[149.44485474 105.11882019]
[162.95939636 111.62707520]
[176.47392273 118.13533020]
[189.98844910 124.64358521]
[203.50299072 131.15184021]
[221.10810852 124.20857239]
[237.92140198 132.17733765]
[243.49896240 149.59344482]
[257.23010254 155.63134766]
[270.96121216 161.66925049]
[287.19454956 159.34313965]
[297.11154175 172.40397644]
[290.51043701 187.41589355]
[274.18188477 188.93591309]
[264.92330933 175.40037537]
[251.19218445 169.36247253]
[237.46105957 163.32455444]
[227.95086670 169.68168640]
[216.43278503 170.65689087]
[205.76997375 165.89126587]
[198.66937256 156.46754456]
[196.99473572 144.66638184]
[183.48019409 138.15811157]
[169.96566772 131.64985657]
[156.45112610 125.14160919]
[142.93659973 118.63334656]
[132.60815430 129.51100159]
[139.80722046 142.67053223]
[147.00627136 155.83007812]
[161.28952026 163.88743591]
[161.18267822 180.28622437]
[146.79566956 188.15679932]
[132.92860413 179.40255737]
[133.84674072 163.02914429]
[126.64767456 149.86959839]
[119.44860840 136.71005249]
[112.15132904 138.44200134]
[97.55676270 141.90591431]
[90.25947571 143.63786316]
[89.74173737 158.62892151]
[89.35339355 173.62390137]
[89.09449005 188.62165833]
[88.83557892 203.61943054]
[88.57666779 218.61718750]
[96.99874878 232.68846130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 180]
[4 179]
[5 178]
[6 177]
[8 176]
[9 175]
[11 132]
[12 131]
[13 130]
[14 129]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[22 119]
[23 118]
[25 117]
[26 116]
[28 115]
[29 114]
[30 113]
[31 112]
[32 111]
[37 106]
[38 105]
[40 102]
[41 101]
[42 100]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[54 88]
[55 87]
[57 84]
[58 83]
[60 81]
[61 80]
[62 79]
[63 78]
[67 74]
[68 73]
[137 162]
[138 161]
[139 160]
[140 159]
[141 158]
[144 153]
[145 152]
[146 151]
[163 172]
[164 171]
[165 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
