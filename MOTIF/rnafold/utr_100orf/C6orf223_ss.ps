%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCUGAGGAGUGGGGUGAUGAUGCCACUGGCAGAAGCAGGCGCCCUGGCCCAAGGAGGAGGCCCUUCAGCAACGGAGUGGGCCUGCAUUCUGCGGAGGUUGUUGAGGAAGGAGGGAG\
) } def
/len { sequence length } bind def

/coor [
[93.87065125 110.61942291]
[79.65371704 115.40258026]
[65.43677521 120.18573761]
[51.21983337 124.96890259]
[40.60733414 136.70285034]
[26.07722855 133.42790222]
[11.86028862 138.21105957]
[-2.35665202 142.99421692]
[-7.11113548 163.00984192]
[-22.73090935 176.18962097]
[-42.99119949 177.49156189]
[-59.94206238 166.56593323]
[-73.42017365 173.14927673]
[-86.89829254 179.73262024]
[-100.37640381 186.31597900]
[-113.85452271 192.89932251]
[-122.85871887 205.90835571]
[-137.69052124 204.54193115]
[-151.16862488 211.12528992]
[-159.87733459 225.02098083]
[-176.25367737 224.15657043]
[-183.45109558 209.42126465]
[-174.06549072 195.97349548]
[-157.75196838 197.64717102]
[-144.27386475 191.06382751]
[-136.23370361 178.52568054]
[-120.43786621 179.42120361]
[-106.95974731 172.83786011]
[-93.48163605 166.25451660]
[-80.00352478 159.67117310]
[-66.52540588 153.08782959]
[-67.24583435 143.12753296]
[-64.86865234 133.39758301]
[-59.60535812 124.84076691]
[-51.94801712 118.29199982]
[-42.62329483 114.39679718]
[-32.52350235 113.54773712]
[-22.62123680 115.84495544]
[-13.87570286 121.08469391]
[-7.13981104 128.77728271]
[7.07712889 123.99411774]
[21.29406929 119.21096039]
[30.88967705 107.81913757]
[46.43667603 110.75196075]
[60.65361404 105.96880341]
[74.87055206 101.18563843]
[89.08749390 96.40248108]
[87.33119202 92.78020477]
[86.68440247 88.37966919]
[87.37180328 83.51689148]
[85.43000031 68.64310455]
[83.48819733 53.76932526]
[81.54639435 38.89554214]
[67.55393219 32.39827347]
[59.31472015 19.35530663]
[59.45786667 3.92860651]
[67.93769073 -8.95922279]
[82.04830933 -15.19572163]
[97.28707886 -12.79084682]
[108.79136658 -2.51198483]
[112.89018250 12.36091709]
[108.27562714 27.08197021]
[96.42017365 36.95373917]
[98.36197662 51.82752228]
[100.30377960 66.70130157]
[102.24558258 81.57508850]
[114.07639313 90.79636383]
[128.97413635 89.04780579]
[143.87187195 87.29924774]
[158.76960754 85.55068970]
[173.66734314 83.80213165]
[188.56507874 82.05358124]
[203.46281433 80.30502319]
[218.36054993 78.55646515]
[233.25828552 76.80790710]
[248.15602112 75.05934906]
[262.87252808 72.15687561]
[277.31857300 68.11807251]
[291.76461792 64.07927704]
[306.21066284 60.04047775]
[320.65670776 56.00167847]
[335.10272217 51.96287918]
[342.63699341 38.07004929]
[357.81176758 33.65401077]
[371.62417603 41.33471680]
[375.87951660 56.55534744]
[368.05322266 70.28576660]
[352.78845215 74.37995911]
[339.14154053 66.40892029]
[324.69549561 70.44771576]
[310.24945068 74.48651886]
[295.80340576 78.52531433]
[281.35736084 82.56411743]
[266.91131592 86.60291290]
[278.95547485 95.54376984]
[281.38650513 110.34545898]
[272.83480835 122.66896820]
[258.11831665 125.57144165]
[245.52799988 117.41767120]
[242.15704346 102.80135345]
[249.90458679 89.95708466]
[235.00683594 91.70564270]
[220.10910034 93.45420074]
[205.21136475 95.20275879]
[190.31362915 96.95131683]
[175.41589355 98.69986725]
[160.51815796 100.44842529]
[145.62042236 102.19698334]
[130.72268677 103.94554138]
[115.82495117 105.69409943]
[129.83969116 111.04077148]
[139.97093201 122.10233307]
[144.06895447 136.53169250]
[141.26423645 151.26713562]
[132.15188599 163.18205261]
[118.66541290 169.74826050]
[103.66644287 169.57250977]
[90.33753204 162.69209290]
[81.50686646 150.56694031]
[79.04818726 135.76982117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[6 42]
[7 41]
[8 40]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[18 25]
[19 24]
[50 66]
[51 65]
[52 64]
[53 63]
[67 110]
[68 109]
[69 108]
[70 107]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[76 101]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
