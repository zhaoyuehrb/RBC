%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCAGACCUGCACCGGGCCAGGCAAGAUGGCGGCCAUGGAGACCGAGACGGCGCCGCUGACCCUAGAGUCGCUGCCCACCGAUCCCCUGCUCCUCAUCUUAUCCUUUUUGGACUAUCGGGAUCUAA\
) } def
/len { sequence length } bind def

/coor [
[252.98524475 164.65010071]
[239.04127502 159.12144470]
[225.09732056 153.59278870]
[211.15336609 148.06411743]
[196.07019043 155.39659119]
[180.01766968 149.48217773]
[173.02761841 133.50013733]
[158.95315552 128.31266785]
[144.87870789 123.12519836]
[130.74214172 118.10948944]
[116.54553986 113.26628113]
[102.34894562 108.42307281]
[99.41681671 109.61096954]
[95.97234344 109.71067810]
[92.43597412 108.52507782]
[89.29666901 106.02210236]
[87.04719543 102.35605621]
[73.38895416 96.15505981]
[59.73070908 89.95405579]
[43.96636963 91.29425812]
[35.57616043 78.98760986]
[21.91791916 72.78660583]
[8.25967598 66.58560181]
[11.84264278 81.15139771]
[4.26997757 94.09955597]
[-10.18178654 98.11782837]
[-23.35126686 90.93696594]
[-27.80122757 76.61223602]
[-21.01863098 63.23328018]
[-6.83205986 58.35573196]
[-19.44187737 50.23215866]
[-32.05169678 42.10858154]
[-44.66151428 33.98500443]
[-57.27133179 25.86142921]
[-66.28128052 23.81049919]
[-70.08595276 17.38335609]
[-82.49421692 8.95512772]
[-103.85452271 8.86645985]
[-112.39119720 -9.86169434]
[-125.38157654 -17.36169434]
[-138.37196350 -24.86169434]
[-155.11222839 -27.54497719]
[-157.16796875 -44.37382889]
[-141.56588745 -51.00792694]
[-130.87196350 -37.85207367]
[-117.88157654 -30.35207558]
[-104.89119720 -22.85207558]
[-96.63489532 -26.57946587]
[-87.45456696 -26.02082634]
[-79.47410583 -21.17606163]
[-74.59988403 -13.05146790]
[-74.06598663 -3.45313430]
[-61.65772247 4.97509480]
[-49.14775467 13.25161076]
[-36.53793716 21.37518692]
[-23.92811966 29.49876213]
[-11.31830215 37.62233734]
[1.29151630 45.74591446]
[14.46067810 52.92736053]
[28.11891937 59.12836456]
[41.77716064 65.32936859]
[56.56457520 63.54562759]
[65.93170929 76.29581451]
[79.58995819 82.49681854]
[93.24819946 88.69781494]
[107.19215393 94.22647858]
[121.38874817 99.06968689]
[135.58534241 103.91288757]
[144.82397461 103.73069763]
[150.06617737 109.05075073]
[164.14062500 114.23822021]
[178.21508789 119.42568970]
[189.77334595 112.39076996]
[203.07672119 113.31731415]
[213.24595642 121.63935852]
[216.68203735 134.12016296]
[230.62599182 139.64881897]
[244.56994629 145.17749023]
[258.51388550 150.70614624]
[272.62203979 141.46578979]
[289.29483032 142.40751648]
[302.01791382 152.96638489]
[305.93734741 168.85847473]
[320.01181030 174.04594421]
[334.08624268 179.23341370]
[348.16070557 184.42088318]
[362.23513794 189.60835266]
[376.30960083 194.79582214]
[388.86102295 184.10791016]
[404.99197388 181.19479370]
[420.31307983 186.75361633]
[430.70318604 199.18913269]
[433.41796875 215.07005310]
[447.61456299 219.91325378]
[461.81115723 224.75646973]
[471.29776001 212.93359375]
[484.25750732 205.07099915]
[499.12548828 202.11811829]
[514.10626221 204.43151855]
[527.39086914 211.73185730]
[537.37512207 223.13758850]
[542.85339355 237.27139282]
[543.16406250 252.42657471]
[538.26971436 266.77304077]
[528.76135254 278.57839966]
[515.78717041 286.41711426]
[500.91375732 289.34259033]
[485.93725586 287.00158691]
[472.66613770 279.67675781]
[462.70291138 268.25265503]
[457.25073242 254.10877991]
[456.96795654 238.95306396]
[442.77136230 234.10984802]
[428.57476807 229.26664734]
[418.86187744 238.94570923]
[405.85653687 243.49655151]
[392.09594727 241.97056580]
[380.29101562 234.61064148]
[372.79232788 222.81466675]
[371.12213135 208.87026978]
[357.04766846 203.68280029]
[342.97323608 198.49533081]
[328.89877319 193.30786133]
[314.82434082 188.12039185]
[300.74987793 182.93292236]
[290.33612061 191.37814331]
[276.99810791 193.56651306]
[264.22817993 188.81597900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 76]
[7 72]
[8 71]
[9 70]
[10 68]
[11 67]
[12 66]
[17 65]
[18 64]
[19 63]
[21 61]
[22 60]
[23 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[36 53]
[37 52]
[39 47]
[40 46]
[41 45]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[88 120]
[93 114]
[94 113]
[95 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
