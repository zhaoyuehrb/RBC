%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCUAGAAAGCAAUGCGCCUAUUCACAUGGAGAAUCUUCCCUUUCCUCUAAAAUUACUUAGUGCCUCAUCACUAAACACCCCCAGCUCCACACCAUGGGUGUUGGAUAUCUUCCUCACCUUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[102.50272369 187.59695435]
[68.02762604 181.59202576]
[61.37975693 195.03842163]
[54.73188400 208.48483276]
[48.08401108 221.93122864]
[41.43613434 235.37763977]
[34.78826141 248.82403564]
[36.38372803 265.14538574]
[22.89112473 274.46643066]
[8.19048691 267.19845581]
[7.40457058 250.81816101]
[21.34185982 242.17616272]
[27.98973274 228.72976685]
[34.63760376 215.28335571]
[41.28547668 201.83695984]
[47.93335342 188.39054871]
[54.58122635 174.94415283]
[48.13780594 170.63853455]
[42.09996414 165.78051758]
[36.51491928 160.40806580]
[31.42634583 154.56321716]
[26.87403870 148.29165649]
[22.89359856 141.64245605]
[19.51615524 134.66758728]
[16.76811790 127.42160034]
[14.67097855 119.96118164]
[13.24113750 112.34465790]
[12.48977757 104.63159180]
[12.42277336 96.88230133]
[13.04064941 89.15740204]
[14.33857346 81.51728821]
[16.30639458 74.02172089]
[2.41377521 68.36529541]
[-11.47884464 62.70887375]
[-25.37146378 57.05244827]
[-39.26408386 51.39602661]
[-52.37379074 59.69754410]
[-67.85709381 58.67432785]
[-79.76034546 48.71982193]
[-83.50650024 33.66173553]
[-77.65509796 19.29021454]
[-64.45610046 11.13139915]
[-48.98481369 12.32252121]
[-37.19024658 22.40556908]
[-33.60766220 37.50340652]
[-19.71504211 43.15982819]
[-5.82242155 48.81625366]
[8.07019806 54.47267532]
[21.96281815 60.12909698]
[26.45302582 52.35198593]
[31.71557999 45.07524490]
[37.69521713 38.37528992]
[44.32913971 32.32248306]
[51.54768753 26.98038483]
[59.27505112 22.40509415]
[67.43008423 18.64466095]
[75.92714691 15.73857021]
[84.67700958 13.71734428]
[93.58778381 12.60220718]
[102.56589508 12.40487003]
[111.51705933 13.12740421]
[114.75382233 -1.51921213]
[117.99058533 -16.16582870]
[121.22734833 -30.81244469]
[124.46411133 -45.45906067]
[127.70087433 -60.10567856]
[118.99007416 -73.29269409]
[122.23703766 -88.75984192]
[135.51541138 -97.33074188]
[150.94737244 -93.92042542]
[159.37741089 -80.55217743]
[155.80412292 -65.15713501]
[142.34748840 -56.86891556]
[139.11073303 -42.22229767]
[135.87396240 -27.57568169]
[132.63720703 -12.92906570]
[129.40043640 1.71755075]
[126.16368103 16.36416626]
[136.17094421 20.18049431]
[145.63792419 25.18909836]
[154.42318726 31.31516266]
[162.39553833 38.46718216]
[169.43586731 46.53833008]
[175.43904114 55.40803909]
[180.31535339 64.94382477]
[183.99198914 75.00325775]
[186.41401672 85.43606567]
[187.54527283 96.08641052]
[187.36885071 106.79521942]
[185.88739014 117.40252686]
[183.12300110 127.74989319]
[179.11700439 137.68275452]
[173.92922974 147.05273438]
[185.84788513 156.16017151]
[197.76655579 165.26760864]
[209.68522644 174.37504578]
[221.60388184 183.48248291]
[233.52255249 192.58992004]
[242.33734131 195.35507202]
[245.61564636 202.06425476]
[257.31076050 211.45703125]
[269.00588989 220.84980774]
[280.70098877 230.24259949]
[292.39611816 239.63537598]
[305.34603882 239.02439880]
[314.90704346 247.17269897]
[316.26586914 259.25653076]
[327.73059082 268.92916870]
[339.19534302 278.60177612]
[355.23815918 278.68466187]
[365.06240845 291.36785889]
[361.13174438 306.92193604]
[346.46145630 313.41513062]
[332.30529785 305.86642456]
[329.52270508 290.06652832]
[318.05795288 280.39389038]
[306.59323120 270.72125244]
[289.21469116 268.61544800]
[283.00332642 251.33049011]
[271.30822754 241.93771362]
[259.61309814 232.54493713]
[247.91798401 223.15214539]
[236.22286987 213.75936890]
[224.41511536 204.50859070]
[212.49644470 195.40115356]
[200.57778931 186.29371643]
[188.65911865 177.18627930]
[176.74044800 168.07884216]
[164.82179260 158.97140503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[93 129]
[94 128]
[95 127]
[96 126]
[97 125]
[98 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
