%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCACGUCCUCAUGGCCCUGCUGCUCUUGCUGUUCCUGGGCCUCCUGGGGCUCUGGGGGCUGCUCUGCGCCUGCGCCCAAGACCCCUCCCCAGCUGCCCGGUGGCCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[114.36238861 116.45125580]
[109.00677490 119.89472198]
[102.88555908 121.64706421]
[96.51906586 121.55933380]
[90.44845581 119.63899231]
[85.18976593 116.04926300]
[81.18998718 111.09529114]
[78.78913116 105.19818115]
[63.88017273 103.54805756]
[48.97121429 101.89793396]
[34.06225586 100.24781036]
[19.15329361 98.59768677]
[8.00262833 111.22776031]
[-8.30652237 114.73841858]
[-23.36479759 107.95069885]
[-31.37312317 93.69384766]
[-46.32189178 92.45515442]
[-61.27065659 91.21646881]
[-76.21942139 89.97777557]
[-91.16819000 88.73908997]
[-109.76244354 99.20236206]
[-126.46769714 87.21443176]
[-141.46769714 87.21443176]
[-155.26786804 94.95173645]
[-167.99513245 87.21443176]
[-182.99513245 87.21443176]
[-196.91894531 95.87813568]
[-211.25437927 87.91400909]
[-211.25437927 71.51486206]
[-196.91894531 63.55073166]
[-182.99513245 72.21443176]
[-167.99513245 72.21443176]
[-155.26786804 64.47713470]
[-141.46769714 72.21443176]
[-126.46769714 72.21443176]
[-121.14223480 64.81116486]
[-112.84642029 60.69991302]
[-103.45219421 60.95344925]
[-95.14812469 65.64273834]
[-89.92950439 73.79032135]
[-74.98073578 75.02900696]
[-60.03196716 76.26770020]
[-45.08319855 77.50639343]
[-30.13443184 78.74507904]
[-22.34103584 67.81129456]
[-10.04947090 62.14268875]
[3.54296279 63.33260727]
[14.84123611 71.17462921]
[20.80341721 83.68872833]
[35.71237564 85.33885193]
[50.62133789 86.98897552]
[65.53029633 88.63909912]
[80.43925476 90.28922272]
[100.30090332 78.16352844]
[119.82089233 90.83189392]
[134.76965332 89.59320068]
[149.71842957 88.35450745]
[164.66719055 87.11582184]
[179.61595154 85.87712860]
[194.56472778 84.63844299]
[209.51348877 83.39974976]
[224.46226501 82.16105652]
[239.41102600 80.92237091]
[254.35980225 79.68367767]
[269.30856323 78.44499207]
[284.25732422 77.20629883]
[294.45275879 65.42958832]
[309.63058472 64.38632965]
[320.79504395 74.17869568]
[335.74380493 72.94001007]
[350.69259644 71.70131683]
[363.80667114 62.85083389]
[377.12942505 69.51069641]
[392.07818604 68.27201080]
[407.02694702 67.03331757]
[410.72354126 52.34951401]
[418.98971558 39.66295624]
[430.92889404 30.34978676]
[445.24594116 25.42022896]
[460.38790894 25.40900421]
[474.71224976 30.31733131]
[486.66519165 39.61278915]
[494.95019531 52.28707504]
[498.66854858 66.96538544]
[497.41687012 82.05551147]
[491.33099365 95.92060852]
[481.07104492 107.05667877]
[467.74993896 114.25577545]
[452.81268311 116.73698425]
[437.87948608 114.23117065]
[424.57028198 107.01013947]
[414.32867432 95.85718536]
[408.26565552 81.98208618]
[393.31689453 83.22077179]
[378.36810303 84.45946503]
[366.32324219 93.22135162]
[351.93127441 86.65008545]
[336.98251343 87.88877106]
[322.03375244 89.12746429]
[312.63330078 100.62388611]
[297.49078369 102.09304047]
[285.49603271 92.15506744]
[270.54724121 93.39375305]
[255.59848022 94.63244629]
[240.64971924 95.87113953]
[225.70095825 97.10982513]
[210.75218201 98.34851837]
[195.80342102 99.58720398]
[180.85464478 100.82589722]
[165.90588379 102.06459045]
[150.95710754 103.30327606]
[136.00834656 104.54196930]
[121.05957794 105.78065491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[22 35]
[23 34]
[25 32]
[26 31]
[55 113]
[56 112]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[69 99]
[70 98]
[71 97]
[73 95]
[74 94]
[75 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
