%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCAACCGGCAAUCCUUGGCUCUGGCUUAGGAGGCGCUCAAGUAGAGCGGCAAAAUGGCCCUGAGCCCCUGGACCCCAGGGCUGGGCGCUGGCGAGAAGCUGGUGCAGGCGGCUGCCGUCUCCACUGGCCCCUCCCUGGAGUUAUGCACCUUAC\
) } def
/len { sequence length } bind def

/coor [
[55.84785461 111.05628204]
[66.67507935 100.67498779]
[81.59271240 99.09383392]
[67.40289307 94.23081970]
[53.21307373 89.36779785]
[39.14924240 96.06453705]
[24.82802010 90.93060303]
[18.53036880 77.48162079]
[4.34054756 72.61859894]
[-9.84927368 67.75557709]
[-24.03909492 62.89255905]
[-38.22891617 58.02953720]
[-41.89065170 61.42518616]
[-46.14141846 63.92495346]
[-50.76989365 65.43557739]
[-55.55240631 65.91219330]
[-60.26371384 65.35921478]
[-64.68762207 63.82894516]
[-68.62689972 61.41788864]
[-71.91204071 58.26113129]
[-86.58216858 55.13266754]
[-101.25230408 52.00420761]
[-115.92243195 48.87574768]
[-130.59255981 45.74728394]
[-147.94039917 51.84490204]
[-160.53273010 39.65625000]
[-175.26252747 36.82194519]
[-189.99230957 33.98764038]
[-204.72210693 31.15333939]
[-212.54197693 44.11771011]
[-224.30348206 53.60660934]
[-238.57493591 58.48981094]
[-253.62763977 58.19620514]
[-267.64520264 52.78052902]
[-278.94274902 42.91441727]
[-286.16940308 29.80319214]
[-288.46990967 15.03860569]
[-303.19970703 12.20430279]
[-317.92950439 9.36999989]
[-332.65927124 6.53569698]
[-347.38906860 3.70139384]
[-361.42523193 11.47094250]
[-376.19546509 5.20835924]
[-380.36929321 -10.28223705]
[-370.74493408 -23.11778641]
[-354.70538330 -23.45195580]
[-344.55477905 -11.02839661]
[-329.82498169 -8.19409370]
[-315.09518433 -5.35979080]
[-300.36538696 -2.52548766]
[-285.63562012 0.30881530]
[-278.02023315 -12.54776382]
[-266.44403076 -22.04094315]
[-252.29191589 -27.01003456]
[-237.26554871 -26.83708954]
[-223.17875671 -21.52367783]
[-211.73852539 -11.69303894]
[-204.33821106 1.48297226]
[-201.88780212 16.42354965]
[-187.15800476 19.25785255]
[-172.42822266 22.09215546]
[-157.69842529 24.92645836]
[-147.47544861 18.39452744]
[-135.15145874 20.67467308]
[-127.46410370 31.07715416]
[-112.79396820 34.20561600]
[-98.12384033 37.33407593]
[-83.45371246 40.46253967]
[-68.78357697 43.59099960]
[-57.60966873 33.58381653]
[-59.10792542 18.65883064]
[-60.60618210 3.73384333]
[-62.10444260 -11.19114304]
[-63.60269928 -26.11612892]
[-71.20087433 -41.27212143]
[-58.74057388 -52.76895142]
[-44.24368668 -43.97824097]
[-48.67771530 -27.61438751]
[-47.17945480 -12.68940163]
[-45.68119812 2.23558497]
[-44.18293762 17.16057205]
[-42.68468094 32.08555984]
[-33.36589432 43.83971786]
[-19.17607498 48.70273590]
[-4.98625278 53.56575775]
[9.20356846 58.42877960]
[23.39339066 63.29179764]
[36.61654663 56.53282928]
[51.07632065 61.26248169]
[58.07609558 75.17797089]
[72.26591492 80.04099274]
[86.45573425 84.90401459]
[125.48783875 66.74261475]
[140.42707825 65.39376068]
[148.74690247 61.48628998]
[155.67823792 64.17043304]
[170.64146423 63.12075806]
[185.60469055 62.07108307]
[195.94813538 50.42416382]
[211.13793945 49.57279968]
[222.17774963 59.50547409]
[237.14097595 58.45580292]
[252.10420227 57.40612793]
[267.06744385 56.35645294]
[282.03067017 55.30677795]
[296.99389648 54.25710678]
[311.95712280 53.20743179]
[325.18200684 44.52338791]
[338.41952515 51.35108566]
[353.38275146 50.30141449]
[368.34597778 49.25173950]
[383.30920410 48.20206451]
[398.27243042 47.15238953]
[413.23565674 46.10271835]
[428.61285400 38.96280670]
[439.73056030 51.76252365]
[430.50875854 65.98906708]
[414.28533936 61.06594467]
[399.32211304 62.11561966]
[384.35888672 63.16529465]
[369.39566040 64.21496582]
[354.43243408 65.26464081]
[339.46920776 66.31431580]
[327.31457520 74.92327881]
[313.00680542 68.17066193]
[298.04354858 69.22033691]
[283.08032227 70.27000427]
[268.11709595 71.31967926]
[253.15388489 72.36935425]
[238.19065857 73.41902924]
[223.22743225 74.46870422]
[213.68246460 85.84540558]
[198.52258301 87.12307739]
[186.65435791 77.03430939]
[171.69113159 78.08398438]
[156.72790527 79.13365936]
[141.77592468 80.33298492]
[126.83670044 81.68184662]
[123.10838318 88.18950653]
[111.92343140 107.71249390]
[118.31555176 121.28234100]
[131.19598389 130.46957397]
[129.61999512 145.28056335]
[136.01211548 158.85041809]
[148.23168945 170.60279846]
[140.32130432 185.59820557]
[123.72211456 182.14810181]
[122.44226837 165.24253845]
[116.05014801 151.67268372]
[103.62693024 143.45605469]
[104.74570465 127.67446136]
[98.35358429 114.10461426]
[98.42086029 129.10446167]
[89.29222107 141.00689697]
[74.78784943 144.83093262]
[60.97759628 138.97628784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[26 62]
[27 61]
[28 60]
[29 59]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
[93 138]
[94 137]
[96 136]
[97 135]
[98 134]
[101 131]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
[140 152]
[141 151]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
