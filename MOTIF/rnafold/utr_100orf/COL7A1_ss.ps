%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGACGCUGCGGCUUCUGGUGGCCGCGCUCUGCGCCGGGAUCCUGGCAGAGGCGCCCCGAGUGCGAGCCCAGCACAGGGAGAGAGUGACCUGCACGCGCC\
) } def
/len { sequence length } bind def

/coor [
[116.88046265 133.17379761]
[100.82241821 137.21255493]
[84.60162354 133.88717651]
[71.42807770 123.85573578]
[58.21289444 130.95213318]
[52.00027466 137.88986206]
[44.47966766 138.05645752]
[31.05221939 144.74253845]
[24.62889862 151.48565674]
[17.10673141 151.42057800]
[3.47975254 157.68997192]
[-10.14722633 163.95938110]
[-23.77420616 170.22879028]
[-37.40118408 176.49819946]
[-51.02816391 182.76759338]
[-56.27394867 197.67590332]
[-70.56095886 204.43289185]
[-85.41295624 199.02978516]
[-92.01852417 184.67213440]
[-86.45868683 169.87808228]
[-72.03200531 163.42468262]
[-57.29756927 169.14062500]
[-43.67058945 162.87121582]
[-30.04361153 156.60180664]
[-16.41663170 150.33241272]
[-2.78965282 144.06300354]
[10.83732605 137.79359436]
[24.36614418 131.31509399]
[37.79359436 124.62901306]
[51.11648941 117.73695374]
[64.33167267 110.64054871]
[62.78716278 100.80978394]
[63.90256119 90.92112732]
[67.59813690 81.68141937]
[73.60974884 73.75109100]
[65.32427216 61.24705124]
[57.03879547 48.74301529]
[48.75332260 36.23898315]
[40.46784592 23.73494530]
[25.55474281 16.91355515]
[24.27526665 0.56439751]
[37.94563675 -8.49391747]
[52.50294495 -0.94297045]
[52.97188187 15.44947052]
[61.25735855 27.95350647]
[69.54283142 40.45754242]
[77.82830811 52.96157837]
[86.11378479 65.46561432]
[102.05516815 62.83513641]
[117.60932159 67.20727539]
[129.84552002 77.75823975]
[136.45820618 92.50000000]
[151.45820618 92.50000000]
[166.45820618 92.50000000]
[181.45820618 92.50000000]
[196.45820618 92.50000000]
[220.54277039 61.95866013]
[233.75796509 54.86225891]
[246.97314453 47.76585388]
[251.49539185 35.56545639]
[262.79043579 29.96253395]
[274.46859741 33.51047516]
[287.89605713 26.82440186]
[301.32351685 20.13832664]
[314.75094604 13.45225048]
[318.23312378 -1.79269934]
[330.73101807 -11.19144726]
[346.34353638 -10.30619144]
[357.69888306 0.44507697]
[359.43545532 15.98593807]
[350.73327637 28.97847176]
[335.70123291 33.28800201]
[321.43704224 26.87969971]
[308.00958252 33.56577682]
[294.58212280 40.25185013]
[281.15469360 46.93792725]
[272.37182617 62.04465866]
[254.06954956 60.98103714]
[240.85437012 68.07743835]
[227.63917542 75.17384338]
[226.14768982 82.52404785]
[241.05039978 80.81837463]
[247.27775574 94.46461487]
[236.22375488 104.60408783]
[223.16471863 97.22444916]
[221.67323303 104.57465363]
[231.07708740 116.26085663]
[240.48094177 127.94706726]
[256.21197510 131.09573364]
[263.42999268 145.42332458]
[256.59796143 159.93891907]
[240.95681763 163.50741577]
[228.50512695 153.39135742]
[228.79473877 137.35092163]
[219.39088440 125.66471863]
[209.98703003 113.97850800]
[196.45820618 107.50000000]
[181.45820618 107.50000000]
[166.45820618 107.50000000]
[151.45820618 107.50000000]
[136.45820618 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[7 29]
[8 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[57 80]
[58 79]
[59 78]
[62 76]
[63 75]
[64 74]
[65 73]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
