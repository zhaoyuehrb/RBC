%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCUCUCAAGCAGCCUCUGGUCAUCUAUCUGCCUUUGAGCCAUCAAGAUGCCGAUGUCUUCUCUUCCAGCAGCUAUUUUGUCUCACAUGACAGCUAUUAACAAUGUGCCUCCUCCUCCACUUCACAGUAUACCAAACUUGAAAAAGU\
) } def
/len { sequence length } bind def

/coor [
[116.09500885 270.05691528]
[103.78028107 261.09771729]
[96.17988586 247.90098572]
[94.61063385 232.75312805]
[99.34439850 218.27862549]
[109.56104279 206.98526001]
[123.49046326 200.82968140]
[123.49046326 185.82968140]
[123.49046326 170.82968140]
[123.49046326 155.82968140]
[123.49046326 140.82968140]
[79.55130768 133.59985352]
[68.47000885 98.58921051]
[54.07357407 94.37701416]
[39.67713547 90.16481781]
[25.93264771 97.49468231]
[11.39261627 93.01783752]
[4.48941851 79.86939240]
[-9.90701962 75.65720367]
[-24.30345726 71.44500732]
[-38.69989395 67.23281860]
[-50.59331131 81.47958374]
[-67.44490051 89.13337708]
[-85.89812469 88.71770477]
[-102.29821777 80.35861969]
[-113.41600800 65.75109863]
[-117.08375549 47.81550217]
[-131.78385925 44.83100891]
[-146.48394775 41.84651566]
[-161.18405151 38.86202621]
[-176.24775696 43.69886017]
[-187.18110657 33.58396149]
[-201.88121033 30.59946823]
[-219.16159058 36.86972046]
[-231.87832642 24.81821060]
[-246.63806152 22.14430237]
[-261.39782715 19.47039413]
[-276.15756226 16.79648590]
[-290.91732788 14.12257862]
[-306.16250610 20.16545296]
[-318.84863281 9.77344131]
[-315.92532349 -6.36304617]
[-300.39981079 -11.64417458]
[-288.24340820 -0.63717085]
[-273.48367310 2.03673697]
[-258.72390747 4.71064472]
[-243.96415710 7.38455248]
[-229.20440674 10.05846024]
[-219.04580688 3.41342521]
[-206.69155884 5.56759310]
[-198.89671326 15.89937210]
[-184.19660950 18.88386536]
[-170.18434143 13.83355808]
[-158.19955444 24.16193008]
[-143.49945068 27.14642143]
[-128.79936218 30.13091469]
[-114.09926605 33.11540604]
[-108.26081085 22.94856262]
[-99.77583313 14.82995129]
[-89.32694244 9.42784786]
[-77.75904846 7.19137955]
[-66.01101685 8.31319809]
[-55.03948212 12.71293831]
[-45.74095154 20.04286957]
[-38.87854767 29.71535492]
[-35.01938248 40.94995117]
[-34.48770142 52.83638000]
[-20.09126472 57.04857254]
[-5.69482660 61.26076508]
[8.70161152 65.47296143]
[21.60346222 58.11919403]
[36.26350021 62.18587494]
[43.88932800 75.76837921]
[58.28576660 79.98057556]
[72.68220520 84.19277191]
[81.53050995 69.74453735]
[98.03774261 60.71579742]
[118.73069000 61.05076218]
[138.21722412 72.46259308]
[145.48782349 59.34244919]
[152.75843811 46.22230148]
[160.02903748 33.10215378]
[167.29965210 19.98200607]
[162.70124817 4.86148167]
[170.21511841 -9.04237652]
[185.38342285 -13.48065567]
[199.20706177 -5.82020378]
[203.48472595 9.39416981]
[195.67854309 23.13604546]
[180.41979980 27.25261307]
[173.14918518 40.37276077]
[165.87858582 53.49290848]
[158.60797119 66.61305237]
[151.33737183 79.73320007]
[154.55072021 86.50994873]
[167.22142029 78.48165131]
[179.89210510 70.45335388]
[190.52311707 59.87121582]
[205.30062866 62.44514465]
[211.72776794 75.99844360]
[204.36929321 89.06951141]
[189.44712830 90.60419464]
[175.21229553 95.33381653]
[160.97744751 100.06344604]
[164.19081116 106.84019470]
[178.95056152 109.51409912]
[193.71031189 112.18801117]
[208.47006226 114.86191559]
[216.36294556 101.89785004]
[228.40837097 92.66355896]
[242.97729492 88.40790558]
[258.09942627 89.70642090]
[271.72955322 96.38350677]
[282.02438354 107.53613281]
[287.59158325 121.65600586]
[287.67825317 136.83352661]
[282.27264404 151.01603699]
[272.10586548 162.28550720]
[258.55285645 169.11781311]
[243.44656372 170.58894348]
[228.82998657 166.49993896]
[216.67988586 157.40380859]
[208.63948059 144.53071594]
[205.79615784 129.62165833]
[191.03640747 126.94775391]
[176.27665710 124.27384949]
[161.51690674 121.59994507]
[155.76029968 126.40737915]
[167.43125916 135.83015442]
[182.10818481 138.92655945]
[190.78608704 151.16151428]
[188.85595703 166.03680420]
[177.34292603 175.65191650]
[162.36178589 174.90007019]
[151.86927795 164.18057251]
[151.43846130 149.18598938]
[144.24707031 136.02224731]
[138.49046326 140.82968140]
[138.49046326 155.82968140]
[138.49046326 170.82968140]
[138.49046326 185.82968140]
[138.49046326 200.82968140]
[152.41987610 206.98526001]
[162.63652039 218.27862549]
[167.37028503 232.75312805]
[165.80104065 247.90098572]
[158.20063782 261.09771729]
[145.88591003 270.05691528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 142]
[8 141]
[9 140]
[10 139]
[11 138]
[13 75]
[14 74]
[15 73]
[18 70]
[19 69]
[20 68]
[21 67]
[27 57]
[28 56]
[29 55]
[30 54]
[32 52]
[33 51]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[105 127]
[106 126]
[107 125]
[108 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
