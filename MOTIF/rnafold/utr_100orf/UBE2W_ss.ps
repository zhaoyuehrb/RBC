%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUUGAGCCCCCGCGGCGUGACGCGAGCACGGCAGCUCCUCCCCCUGCGUCUCUGGCCUCGCCGGUCUUGGGGGGAUGGUUCCAUCAUGGCGUCAAUGC\
) } def
/len { sequence length } bind def

/coor [
[136.82072449 272.68554688]
[134.51985168 257.86306763]
[132.21897888 243.04058838]
[129.91810608 228.21810913]
[127.61723328 213.39562988]
[125.31635284 198.57315063]
[121.65764618 184.02619934]
[116.67232513 169.87887573]
[111.68700409 155.73156738]
[106.70168304 141.58424377]
[101.71636200 127.43692780]
[94.05936432 128.70591736]
[85.88118744 127.75286865]
[77.84391022 124.40416718]
[70.66014099 118.68615723]
[56.36601257 123.23344421]
[42.07188034 127.78073120]
[35.03380203 141.93138123]
[20.02472687 146.88145447]
[5.94927549 139.69416809]
[1.15816319 124.63359833]
[8.49387169 110.63491821]
[23.60425568 106.00330353]
[37.52458954 113.48660278]
[51.81872177 108.93931580]
[66.11285400 104.39202118]
[67.49687958 89.45600891]
[54.28169250 82.35961151]
[41.06650925 75.26320648]
[27.85132790 68.16680145]
[12.79295921 72.96482849]
[-1.20908451 65.63555145]
[-5.84763861 50.52729416]
[1.62926877 36.60352325]
[16.78572083 32.12496185]
[30.62966347 39.74866486]
[34.94773102 54.95161819]
[48.16291428 62.04802322]
[61.37809753 69.14442444]
[74.59327698 76.24082947]
[91.68225098 69.99369812]
[107.54629517 73.56546783]
[115.44277191 60.81221390]
[123.33925629 48.05895615]
[131.23573303 35.30569839]
[139.13221741 22.55244255]
[147.02870178 9.79918575]
[154.92518616 -2.95407152]
[147.67350769 -13.87026978]
[145.15890503 -26.68406868]
[147.72860718 -39.43883896]
[154.95625305 -50.20100021]
[165.71214294 -57.35314178]
[178.33976746 -59.83706284]
[190.91078186 -57.31022263]
[199.57739258 -69.55317688]
[208.24400330 -81.79612732]
[216.91061401 -94.03908539]
[225.57722473 -106.28203583]
[229.79365540 -122.70330811]
[246.74038696 -123.19750977]
[251.90661621 -107.04986572]
[237.82017517 -97.61543274]
[229.15356445 -85.37247467]
[220.48695374 -73.12952423]
[211.82034302 -60.88656998]
[203.15374756 -48.64361572]
[210.90530396 -33.43251038]
[209.98446655 -16.29708672]
[200.55134583 -1.85725701]
[185.07292175 5.94966745]
[167.67843628 4.94241095]
[159.78196716 17.69566727]
[151.88548279 30.44892502]
[143.98899841 43.20218277]
[136.09251404 55.95544052]
[128.19602966 68.70869446]
[120.29954529 81.46195221]
[127.33098602 102.95774078]
[115.86367798 122.45160675]
[120.84899902 136.59892273]
[125.83432007 150.74623108]
[130.81964111 164.89355469]
[135.80496216 179.04087830]
[144.22138977 166.62458801]
[158.89619446 163.51812744]
[171.62191772 171.45889282]
[175.28121948 186.00569153]
[167.82748413 199.02267456]
[153.42948914 203.22956848]
[140.13883972 196.27227783]
[142.43971252 211.09475708]
[144.74058533 225.91723633]
[147.04145813 240.73971558]
[149.34233093 255.56219482]
[151.64321899 270.38467407]
[164.54681396 279.51007080]
[167.13604736 295.10079956]
[157.87474060 307.90722656]
[142.25749207 310.33145142]
[129.54972839 300.93527222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[15 26]
[16 25]
[17 24]
[27 40]
[28 39]
[29 38]
[30 37]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
