%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUCUCUUCCUGAGAAACGAGCAAACCUGAAAGCUACUCUCUCAGCUUCAGAGGGAAAAAAUGGUUGUAGAUUUCUGGACUUGGGAGCAGACAUUUCAAGAACUAAUCCAAGAGGCAAAACCCCGGGCCACAUGGACGCUGAAGUUGGAUGGCAACCUUC\
) } def
/len { sequence length } bind def

/coor [
[228.33309937 190.32185364]
[217.67552185 179.76647949]
[207.01792908 169.21110535]
[196.36035156 158.65573120]
[185.70275879 148.10035706]
[175.04518127 137.54498291]
[164.38758850 126.98961639]
[153.73001099 116.43424988]
[143.07241821 105.87887573]
[132.41484070 95.32350159]
[112.27764893 125.61349487]
[82.40855408 116.41082001]
[68.79701233 122.71367645]
[55.18547440 129.01654053]
[41.57393646 135.31939697]
[27.96240044 141.62225342]
[14.35086250 147.92510986]
[12.87477112 163.14906311]
[4.03504848 175.50851440]
[-9.71283817 181.74244690]
[-24.63535690 180.26786804]
[-36.73469543 171.58042908]
[-50.34623337 177.88328552]
[-63.95777130 184.18614197]
[-65.25740814 199.48995972]
[-74.04799652 212.08444214]
[-87.96490479 218.58175659]
[-103.26456451 217.23416138]
[-115.83143616 208.40414429]
[-122.28510284 194.46693420]
[-120.88954926 179.17156982]
[-112.02017975 166.63243103]
[-98.06281281 160.22248840]
[-82.77190399 161.66598511]
[-70.26062775 170.57461548]
[-56.64909363 164.27174377]
[-43.03755569 157.96888733]
[-41.83571243 143.12229919]
[-33.30714798 130.78862000]
[-19.65996742 124.33720398]
[-4.51650953 125.59117889]
[8.04800320 134.31358337]
[21.65954018 128.01071167]
[35.27107620 121.70785522]
[48.88261414 115.40499878]
[62.49415207 109.10214233]
[76.10569000 102.79927826]
[78.18581390 81.80843353]
[97.90567780 67.31658936]
[88.99560547 55.24967194]
[80.08553314 43.18274689]
[71.17546082 31.11582565]
[62.26538849 19.04890251]
[53.35531616 6.98197985]
[44.44524384 -5.08494282]
[35.53517151 -17.15186501]
[21.09997368 -12.57979965]
[5.96242762 -12.94505596]
[-8.23545933 -18.20801353]
[-19.95360756 -27.79778671]
[-27.92091751 -40.67414856]
[-31.27315712 -55.44036865]
[-29.64669800 -70.49471283]
[-23.21796989 -84.20420837]
[-12.68431091 -95.08174133]
[0.81166589 -101.94740295]
[15.80601788 -104.05645752]
[30.67227173 -101.18013000]
[43.79784393 -93.63042450]
[53.75897217 -82.22628021]
[59.47515106 -68.20471954]
[60.32632828 -53.08671188]
[56.22017288 -38.51213455]
[47.60209274 -26.06193733]
[56.51216507 -13.99501419]
[65.42224121 -1.92809200]
[74.33230591 10.13883114]
[83.24237823 22.20575333]
[92.15245056 34.27267456]
[101.06252289 46.33959961]
[109.97259521 58.40652084]
[124.87241364 56.67576218]
[130.77917480 42.88772202]
[136.68594360 29.09967804]
[142.59271240 15.31163597]
[148.49948120 1.52359402]
[154.40625000 -12.26444817]
[160.31300354 -26.05249023]
[153.09896851 -39.92662811]
[156.54127502 -55.18062973]
[169.01455688 -64.61202240]
[184.62931824 -63.76759720]
[196.01275635 -53.04605484]
[197.78994751 -37.50978851]
[189.12176514 -24.49454498]
[174.10105896 -20.14572334]
[168.19429016 -6.35768175]
[162.28752136 7.43036079]
[156.38075256 21.21840286]
[150.47398376 35.00644684]
[144.56721497 48.79448700]
[138.66044617 62.58253098]
[145.79345703 49.38706589]
[158.73524475 41.80353165]
[173.73353577 42.03067398]
[186.43974304 50.00263214]
[193.16989136 63.40804291]
[191.97267151 78.36019135]
[183.19517517 90.52388763]
[169.38233948 96.37244415]
[154.53900146 94.21013641]
[142.97021484 84.66591644]
[153.62779236 95.22129059]
[164.28538513 105.77666473]
[174.94296265 116.33203125]
[185.60055542 126.88740540]
[196.25813293 137.44277954]
[206.91572571 147.99815369]
[217.57330322 158.55352783]
[228.23089600 169.10888672]
[238.88847351 179.66426086]
[252.19880676 175.27943420]
[266.03250122 177.05914307]
[277.68829346 184.59820557]
[284.91503906 196.37249756]
[286.34649658 210.04670715]
[281.75924683 222.93750000]
[292.21142578 233.69630432]
[302.86901855 244.25167847]
[313.72805786 254.59970093]
[324.58706665 264.94772339]
[335.44610596 275.29571533]
[348.80926514 271.80801392]
[362.04257202 275.36264038]
[371.70544434 284.92428589]
[375.34072876 297.91064453]
[372.09893799 310.88909912]
[382.75650024 321.44445801]
[393.41409302 331.99981689]
[409.21499634 331.67306519]
[420.56100464 342.67504883]
[420.72070312 358.47854614]
[409.59933472 369.70758057]
[393.79507446 369.70019531]
[382.68423462 358.46075439]
[382.85873413 342.65740967]
[372.20114136 332.10205078]
[361.54354858 321.54666138]
[345.45904541 324.71621704]
[330.49749756 317.61859131]
[322.62106323 302.86364746]
[325.09808350 286.15475464]
[314.23907471 275.80673218]
[303.38003540 265.45874023]
[292.52099609 255.11071777]
[287.76464844 254.33297729]
[283.46185303 250.52861023]
[281.45260620 244.14848328]
[271.00042725 233.38967896]
[255.45802307 237.72949219]
[239.75393677 233.62875366]
[228.18470764 222.11184692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[10 112]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[22 37]
[23 36]
[24 35]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[127 159]
[128 158]
[129 155]
[130 154]
[131 153]
[132 152]
[137 148]
[138 147]
[139 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
