%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGUGACUGCGCGCCCCGCCCGGAGUCCCCGCCGCCGUCAUGCAGUCCCCGGCGGUGCUCGUCACCUCCAGGCGACUUCAGAAUGCCCACACUGGCCUCGACCUGACUGUGCCCCAGCACCAGGAGGUACGGGGCAAGA\
) } def
/len { sequence length } bind def

/coor [
[122.18648529 162.14248657]
[108.32250977 165.45733643]
[94.07012177 165.71730042]
[80.09448242 162.91023254]
[73.97322845 176.60440063]
[67.85196686 190.29856873]
[61.73071671 203.99273682]
[63.95812225 220.23991394]
[50.83725739 230.07734680]
[35.86574554 223.38511658]
[34.44499207 207.04763794]
[48.03654861 197.87149048]
[54.15780258 184.17732239]
[60.27905655 170.48315430]
[66.40030670 156.78898621]
[48.40873337 141.13719177]
[37.15559387 120.11239624]
[34.11069107 96.46067047]
[39.67172623 73.27123260]
[26.73700714 65.67563629]
[13.80228806 58.08003998]
[0.86756957 50.48444748]
[-14.95047951 50.16839981]
[-22.00743294 37.05166626]
[-34.94215012 29.45607185]
[-47.87686920 21.86047745]
[-60.81158829 14.26488304]
[-76.98729706 24.46838188]
[-96.01983643 25.13855553]
[-112.73103333 16.17431068]
[-122.61514282 0.08475874]
[-123.05366516 -18.71252441]
[-136.60906982 -25.13522339]
[-150.16447449 -31.55792236]
[-163.71986389 -37.98062134]
[-177.27526855 -44.40332413]
[-190.83067322 -50.82602310]
[-204.38607788 -57.24872208]
[-217.94148254 -63.67142105]
[-229.78182983 -54.03976059]
[-244.63063049 -50.50762558]
[-259.53964233 -53.77632141]
[-271.54864502 -63.19684219]
[-278.27328491 -76.89874268]
[-278.37835693 -92.16149902]
[-271.84298706 -105.95468140]
[-259.96478271 -115.53963470]
[-245.10220337 -119.01327515]
[-230.20619202 -115.68589020]
[-218.23435974 -106.21815491]
[-211.56373596 -92.48987579]
[-211.51878357 -77.22682190]
[-197.96337891 -70.80412292]
[-184.40797424 -64.38142395]
[-170.85256958 -57.95872498]
[-157.29716492 -51.53602600]
[-143.74177551 -45.11332703]
[-130.18637085 -38.69062424]
[-116.63096619 -32.26792526]
[-108.57209015 -40.07506943]
[-98.47803497 -45.03575516]
[-87.32086945 -46.65392685]
[-76.18066406 -44.75629044]
[-66.14100647 -39.51071930]
[-58.18355942 -31.41154099]
[-53.09208298 -21.23298073]
[-51.37528229 -9.95518589]
[-53.21599197 1.33016491]
[-40.28127670 8.92575932]
[-27.34655571 16.52135468]
[-14.41183758 24.11694908]
[0.48103401 23.88970757]
[8.46316433 37.54972839]
[21.39788246 45.14532471]
[34.33259964 52.74091721]
[47.26731873 60.33651352]
[54.17392349 52.52476120]
[62.22487640 45.89854050]
[71.21913147 40.62332535]
[80.93209839 36.83083725]
[91.12121582 34.61578751]
[101.53205872 34.03348923]
[111.90464020 35.09848022]
[121.97994232 37.78416443]
[131.50636292 42.02348328]
[140.24603271 47.71056366]
[147.98068237 54.70339966]
[154.51718140 62.82736588]
[159.69229126 71.87959290]
[163.37680054 81.63403320]
[165.47868347 91.84709167]
[165.94544983 102.26375580]
[164.76547241 112.62387848]
[161.96817017 122.66876984]
[175.37817383 129.38977051]
[191.18235779 128.65602112]
[199.09371948 141.27583313]
[212.50370789 147.99684143]
[225.91371155 154.71783447]
[239.32371521 161.43884277]
[252.73371887 168.15985107]
[266.14370728 174.88084412]
[279.62725830 181.45309448]
[293.18264771 187.87579346]
[306.73803711 194.29849243]
[320.29345703 200.72119141]
[332.73336792 197.12315369]
[343.91699219 202.81315613]
[348.05752563 214.23165894]
[361.46752930 220.95265198]
[374.87753296 227.67366028]
[388.36105347 234.24591064]
[401.91644287 240.66860962]
[415.47186279 247.09130859]
[431.76434326 245.22387695]
[441.30908203 258.55914307]
[434.28729248 273.37893677]
[417.92239380 274.43792725]
[409.04916382 260.64669800]
[395.49374390 254.22401428]
[381.93835449 247.80131531]
[374.48800659 247.77964783]
[368.15652466 241.08366394]
[354.74652100 234.36265564]
[341.33651733 227.64164734]
[323.93704224 229.65202332]
[313.87075806 214.27659607]
[300.31533813 207.85389709]
[286.75994873 201.43119812]
[273.20455933 195.00849915]
[265.75421143 194.98683167]
[259.42272949 188.29084778]
[246.01271057 181.56983948]
[232.60272217 174.84884644]
[219.19271851 168.12783813]
[205.78271484 161.40684509]
[192.37271118 154.68583679]
[177.52770996 155.90031433]
[168.65718079 142.79977417]
[155.24717712 136.07876587]
[146.20939636 147.10223389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[19 76]
[20 75]
[21 74]
[22 73]
[24 71]
[25 70]
[26 69]
[27 68]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[94 140]
[95 139]
[97 137]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[103 130]
[104 129]
[105 128]
[106 127]
[109 125]
[110 124]
[111 123]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
