%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGGCCAGUACGGUUAGCCCCAGCACCAUAGCUGAGACCCCAGAGCCACCUCCAUUGUCUGACCACAUCCGAAAUGCUGCUGACAUCUCAGUCAUUGUCA\
) } def
/len { sequence length } bind def

/coor [
[116.29534149 114.28646088]
[114.67832947 120.82888031]
[110.77678680 127.23681641]
[104.60778809 132.77914429]
[95.28101349 144.52696228]
[85.95423889 156.27478027]
[76.62745667 168.02259827]
[67.30068207 179.77041626]
[67.69582367 195.80860901]
[55.31093597 206.00636292]
[39.64665604 202.54084778]
[32.71927261 188.07049561]
[39.84288406 173.69573975]
[55.55286407 170.44364929]
[64.87963867 158.69583130]
[74.20641327 146.94801331]
[83.53318787 135.20019531]
[92.85996246 123.45236969]
[85.03224182 110.65679169]
[70.32606506 113.61119080]
[58.38140869 124.84761047]
[42.75817108 119.86299133]
[39.52820206 103.78507233]
[52.01421356 93.15345001]
[67.37167358 98.90501404]
[82.07785034 95.95062256]
[95.10618591 88.51675415]
[105.13180542 77.35938263]
[108.60029602 61.92305756]
[122.86208344 57.62761307]
[132.88769531 46.47024155]
[136.35618591 31.03391647]
[150.61796570 26.73847198]
[160.64360046 15.58110046]
[170.66921997 4.42372942]
[180.69483948 -6.73364162]
[190.72045898 -17.89101219]
[200.74607849 -29.04838371]
[210.77169800 -40.20575333]
[207.68223572 -55.29751968]
[213.99784851 -69.15271759]
[227.10585022 -76.54489136]
[241.87637329 -74.82171631]
[251.90199280 -85.97908783]
[261.92761230 -97.13645935]
[271.78192139 -108.44541931]
[281.46261597 -119.90334320]
[291.14331055 -131.36126709]
[286.85382080 -144.56172180]
[289.66857910 -158.04208374]
[298.73754883 -168.26029968]
[311.58206177 -172.58642578]
[324.77148438 -169.97911072]
[334.79711914 -181.13647461]
[331.70764160 -196.22824097]
[338.02325439 -210.08343506]
[351.13125610 -217.47561646]
[365.90179443 -215.75244141]
[375.92739868 -226.90980530]
[385.95303345 -238.06716919]
[384.85968018 -253.83360291]
[395.29800415 -265.70025635]
[411.07510376 -266.62683105]
[422.83071899 -256.06365967]
[423.59045410 -240.27763367]
[412.90356445 -228.63435364]
[397.11041260 -228.04154968]
[387.08477783 -216.88418579]
[377.05914307 -205.72680664]
[380.34634399 -191.22396851]
[374.39291382 -177.40295410]
[361.28952026 -169.64700317]
[345.95446777 -171.11085510]
[335.92886353 -159.95349121]
[339.88720703 -144.10308838]
[333.61209106 -128.84042358]
[319.36734009 -120.18658447]
[302.60125732 -121.68056488]
[292.92056274 -110.22264099]
[283.23983765 -98.76471710]
[281.29440308 -91.50076294]
[273.08499146 -87.11083221]
[263.05935669 -75.95346069]
[253.03375244 -64.79608917]
[256.32092285 -50.29325104]
[250.36749268 -36.47222900]
[237.26409912 -28.71628952]
[221.92906189 -30.18013382]
[211.90344238 -19.02276421]
[201.87782288 -7.86539221]
[191.85220337 3.29197884]
[181.82658386 14.44935036]
[171.80096436 25.60672188]
[161.77534485 36.76409149]
[159.02395630 51.40236664]
[144.04507446 56.49586105]
[134.01945496 67.65323639]
[131.26806641 82.29151154]
[116.28917694 87.38500214]
[106.26355743 98.54237366]
[110.24063110 100.08670807]
[113.62949371 103.41606903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[19 26]
[20 25]
[27 100]
[28 99]
[30 97]
[31 96]
[33 94]
[34 93]
[35 92]
[36 91]
[37 90]
[38 89]
[39 88]
[43 84]
[44 83]
[45 82]
[46 80]
[47 79]
[48 78]
[53 74]
[54 73]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
