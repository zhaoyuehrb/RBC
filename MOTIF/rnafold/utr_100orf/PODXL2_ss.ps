%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCUGACGCGGGCCCGGGCGCCGCGCCGCUGCGGCUGCAGGCGGCGACGGCUACACCAUGGGCCGGCUGCUGCGGGCCGCCCGGCUGCCGCCGCUGCUUUCGCCGCUGCUGCUUCUGCUGGUUGGGGGAGCGUUCCUGGGUGCCUGUGUGGCUGGGU\
) } def
/len { sequence length } bind def

/coor [
[86.43917084 644.53826904]
[85.56700134 629.56365967]
[84.69482422 614.58905029]
[83.82265472 599.61444092]
[82.95047760 584.63977051]
[80.89524078 582.66522217]
[79.51839447 579.73773193]
[79.19443512 576.11895752]
[80.19343567 572.20391846]
[82.63705444 568.47955322]
[82.92792511 553.48236084]
[83.21879578 538.48522949]
[83.50966644 523.48803711]
[83.80052948 508.49084473]
[84.09140015 493.49368286]
[84.38227081 478.49649048]
[84.67314148 463.49929810]
[84.67314148 448.49929810]
[84.38227081 433.50213623]
[84.09140015 418.50494385]
[83.80052948 403.50778198]
[83.50966644 388.51058960]
[76.12646484 383.42651367]
[71.87142944 375.37988281]
[71.82441711 366.13952637]
[76.12382507 357.80453491]
[83.90626526 352.32733154]
[84.48789215 337.33862305]
[85.06952667 322.34988403]
[85.65115356 307.36117554]
[75.37838745 296.63708496]
[75.75472260 281.42813110]
[87.07277679 270.72579956]
[87.65440369 255.73709106]
[80.41642761 242.71937561]
[88.68301392 229.22959900]
[89.26464844 214.24087524]
[89.84627533 199.25215149]
[90.42790985 184.26344299]
[91.00953674 169.27471924]
[91.44580841 154.28106689]
[91.73667908 139.28388977]
[92.02754974 124.28670502]
[92.31842041 109.28952789]
[92.31842041 94.28952789]
[92.02754974 79.29234314]
[91.73667908 64.29516602]
[91.44580841 49.29798889]
[91.15493774 34.30080795]
[90.86406708 19.30362892]
[82.86061859 5.65608692]
[90.34967041 -7.21882820]
[90.05879974 -22.21600723]
[89.76792908 -37.21318817]
[89.47705841 -52.21036530]
[75.66962433 -58.62255096]
[66.05463409 -70.34598541]
[62.49774551 -85.02143097]
[65.65239716 -99.72548676]
[74.84050751 -111.55291748]
[88.19737244 -118.19066620]
[87.90650177 -133.18785095]
[76.79811096 -144.10762024]
[76.71676636 -159.32102966]
[87.19555664 -169.84388733]
[86.90468597 -184.84107971]
[86.61381531 -199.83825684]
[83.30525970 -208.40646362]
[86.46555328 -215.12841797]
[86.46555328 -230.12841797]
[86.46555328 -245.12841797]
[78.72825623 -258.92858887]
[86.46555328 -271.65585327]
[86.46555328 -286.65585327]
[86.46555328 -301.65585327]
[86.46555328 -316.65585327]
[83.32376862 -325.28662109]
[86.61381531 -331.94601440]
[86.90468597 -346.94320679]
[78.51261139 -361.03237915]
[86.75322723 -375.21069336]
[103.14929199 -374.89270020]
[110.83393860 -360.40551758]
[101.90187073 -346.65234375]
[101.61100006 -331.65515137]
[101.46555328 -316.65585327]
[101.46555328 -301.65585327]
[101.46555328 -286.65585327]
[101.46555328 -271.65585327]
[109.20285797 -258.92858887]
[101.46555328 -245.12841797]
[101.46555328 -230.12841797]
[101.46555328 -215.12841797]
[101.61100006 -200.12911987]
[101.90187073 -185.13194275]
[102.19273376 -170.13476562]
[113.07167816 -160.02613831]
[113.58029938 -144.82101440]
[102.90367889 -133.47871399]
[103.19454956 -118.48153687]
[116.79874420 -112.36669159]
[126.43856049 -100.90443420]
[130.16099548 -86.33376312]
[127.17583466 -71.53143311]
[118.02265167 -59.44398880]
[104.47423553 -52.50123596]
[104.76510620 -37.50405884]
[105.05597687 -22.50687790]
[105.34684753 -7.50969839]
[113.32949066 5.06514406]
[105.86125183 19.01275826]
[106.15212250 34.00993729]
[106.44298553 49.00711823]
[106.73385620 64.00429535]
[107.02472687 79.00148010]
[107.31559753 93.99865723]
[110.20745850 98.43847656]
[110.37764740 104.18620300]
[107.31559753 109.58039856]
[107.02472687 124.57757568]
[106.73385620 139.57475281]
[106.44298553 154.57192993]
[109.41682434 163.26199341]
[105.99826050 169.85635376]
[105.41662598 184.84506226]
[104.83499908 199.83378601]
[104.25336456 214.82250977]
[103.67173767 229.81123352]
[110.86811066 243.90103149]
[102.64312744 256.31872559]
[102.06149292 271.30743408]
[112.51615906 282.85464478]
[111.71278381 298.04702759]
[100.63987732 307.94281006]
[100.05824280 322.93151855]
[99.47661591 337.92025757]
[98.89498138 352.90896606]
[110.07003021 371.15609741]
[98.50684357 388.21972656]
[98.79771423 403.21688843]
[99.08858490 418.21408081]
[99.37945557 433.21127319]
[99.67032623 448.20843506]
[102.79124451 454.12713623]
[102.46616364 459.86303711]
[99.67032623 463.79019165]
[99.37945557 478.78735352]
[99.08858490 493.78454590]
[98.79771423 508.78170776]
[98.50684357 523.77886963]
[98.21597290 538.77606201]
[97.92510223 553.77325439]
[97.63423157 568.77044678]
[97.92510223 583.76763916]
[98.79727173 598.74224854]
[99.66944885 613.71685791]
[100.54161835 628.69146729]
[101.41379547 643.66607666]
[110.87243652 657.06262207]
[103.75531006 671.83685303]
[87.38391113 672.79040527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[10 153]
[11 152]
[12 151]
[13 150]
[14 149]
[15 148]
[16 147]
[17 146]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[27 137]
[28 136]
[29 135]
[30 134]
[33 131]
[34 130]
[36 128]
[37 127]
[38 126]
[39 125]
[40 124]
[41 122]
[42 121]
[43 120]
[44 119]
[45 116]
[46 115]
[47 114]
[48 113]
[49 112]
[50 111]
[52 109]
[53 108]
[54 107]
[55 106]
[61 100]
[62 99]
[65 96]
[66 95]
[67 94]
[69 93]
[70 92]
[71 91]
[73 89]
[74 88]
[75 87]
[76 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
