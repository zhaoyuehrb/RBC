%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUUGGGGUUGGCGGCCACAGCUAAGUCCAACACCAGCAUGUCGCUGCAGAGAAUCGUGCGUGUGUCCCUGGAGCAUCCCACCAGCGCGGUGUGUGUGGCUGGCGUGGAGACCCUCGUGGACAUUUAUGGGUCAGUGC\
) } def
/len { sequence length } bind def

/coor [
[77.07353973 148.06115723]
[87.49752808 137.27337646]
[76.26134491 147.21058655]
[65.02516937 157.14781189]
[53.78898621 167.08502197]
[42.55280304 177.02223206]
[31.31662369 186.95945740]
[20.08044243 196.89666748]
[8.84426117 206.83387756]
[3.63266015 221.77207947]
[-11.02688313 224.40780640]
[-22.26306343 234.34501648]
[-33.49924469 244.28224182]
[-44.73542786 254.21945190]
[-55.97160721 264.15667725]
[-55.38432312 279.78320312]
[-65.01976013 292.09954834]
[-80.32836151 295.29031372]
[-94.08186340 287.84887695]
[-99.78630066 273.28887939]
[-94.74819946 258.48510742]
[-81.34639740 250.42744446]
[-65.90882111 252.92048645]
[-54.67264175 242.98327637]
[-43.43645859 233.04605103]
[-32.20027924 223.10884094]
[-20.96409798 213.17163086]
[-16.55618286 198.94419861]
[-1.09295309 195.59770203]
[10.14322758 185.66047668]
[21.37940979 175.72326660]
[32.61558914 165.78605652]
[43.85177231 155.84884644]
[55.08795166 145.91162109]
[66.32413483 135.97441101]
[77.56031799 126.03719330]
[68.77711487 108.92180634]
[70.81849670 90.88299561]
[81.81893158 77.82881165]
[97.17562866 73.37691498]
[99.83518982 58.61457443]
[102.49475098 43.85223389]
[105.15431213 29.08989143]
[107.81387329 14.32755089]
[110.47343445 -0.43479148]
[112.96837616 -15.22584534]
[115.29838562 -30.04377556]
[117.62839508 -44.86170578]
[119.95840454 -59.67963409]
[122.28841400 -74.49756622]
[124.61842346 -89.31549835]
[114.13435364 -98.33408356]
[109.53195190 -111.25998688]
[111.91905975 -124.66136169]
[120.56271362 -135.03633118]
[133.10949707 -139.72804260]
[135.76905823 -154.49038696]
[138.42861938 -169.25273132]
[141.08818054 -184.01507568]
[143.74774170 -198.77740479]
[146.40730286 -213.53974915]
[149.06684875 -228.30209351]
[140.31886292 -241.19047546]
[143.22633362 -256.12371826]
[155.56733704 -264.38415527]
[158.22689819 -279.14648438]
[160.88645935 -293.90884399]
[147.07757568 -288.05096436]
[133.78076172 -294.99319458]
[130.69409180 -309.67218018]
[140.06886292 -321.38171387]
[155.06753540 -321.58142090]
[164.75094604 -310.12490845]
[169.03520203 -324.50006104]
[173.31947327 -338.87521362]
[172.04891968 -355.78149414]
[187.94276428 -361.68252563]
[198.01303101 -348.04336548]
[187.69462585 -334.59097290]
[183.41036987 -320.21582031]
[179.12611389 -305.84066772]
[175.64880371 -291.24926758]
[172.98924255 -276.48693848]
[170.32968140 -261.72457886]
[179.01196289 -249.67662048]
[176.52508545 -234.66761780]
[163.82919312 -225.64253235]
[161.16963196 -210.88018799]
[158.51007080 -196.11785889]
[155.85050964 -181.35551453]
[153.19096375 -166.59317017]
[150.53140259 -151.83082581]
[147.87184143 -137.06848145]
[159.59065247 -125.62595367]
[162.23527527 -109.29429626]
[154.57460022 -94.44367981]
[139.43635559 -86.98548126]
[137.10633850 -72.16755676]
[134.77633667 -57.34962463]
[132.44631958 -42.53169632]
[130.11631775 -27.71376419]
[127.78630066 -12.89583492]
[129.87145996 -5.74184227]
[125.23577118 2.22476888]
[122.57621002 16.98711014]
[119.91665649 31.74945259]
[117.25709534 46.51179504]
[114.59753418 61.27413559]
[111.93797302 76.03647614]
[126.63431549 87.77519226]
[130.86505127 107.81563568]
[120.65048218 127.47785950]
[131.19784546 138.14337158]
[141.74519348 148.80889893]
[152.29255676 159.47441101]
[162.83990479 170.13992310]
[176.90267944 164.36871338]
[192.10351562 164.42338562]
[206.12440491 170.29562378]
[216.82725525 181.08995056]
[222.57997131 195.16029358]
[222.50529480 210.36103821]
[216.61462402 224.37419128]
[205.80622864 235.06283569]
[191.72833252 240.79704285]
[176.52769470 240.70237732]
[162.52229309 234.79327393]
[151.84788513 223.97082520]
[146.13220215 209.88539124]
[146.24687195 194.68489075]
[152.17439270 180.68728638]
[141.62702942 170.02177429]
[131.07968140 159.35624695]
[120.53231812 148.69073486]
[109.98496246 138.02520752]
[119.66467285 149.48397827]
[120.30474091 164.47030640]
[111.63731384 176.71269226]
[97.28956604 181.08786011]
[83.26580048 175.76489258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[40 109]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
[46 102]
[47 101]
[48 100]
[49 99]
[50 98]
[51 97]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[65 84]
[66 83]
[67 82]
[73 81]
[74 80]
[75 79]
[112 135]
[113 134]
[114 133]
[115 132]
[116 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
