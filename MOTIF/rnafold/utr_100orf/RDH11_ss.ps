%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUGAAUUGGGGCGUGUCUAGAAAGAGAAGCCAUAGUCGGCGAGCAACGCUGGAGCAUCCCGCUCUGGUGCCGCUGCAGCCGGCAGAGAUGGUUGAGCUCAUGUUCCCGCUGUUGCUCCUCCUUCUGCCCUUCCUUCUGUAUAUGGCUGCGCCCCAAAUCAGGAAAAUGCUGUCCAGUGGGGUGUGUA\
) } def
/len { sequence length } bind def

/coor [
[440.43991089 571.62060547]
[427.79174805 562.12292480]
[419.14324951 548.84759521]
[415.55426025 533.38793945]
[417.47616577 517.60693359]
[424.69509888 503.41271973]
[414.39813232 492.50524902]
[404.10119629 481.59777832]
[387.29275513 481.83749390]
[375.26904297 469.61151123]
[375.80966187 452.13461304]
[365.33471680 441.39797974]
[354.85974121 430.66134644]
[344.38479614 419.92471313]
[333.90985107 409.18807983]
[332.52954102 424.12442017]
[321.08987427 433.82669067]
[306.12857056 432.75000000]
[296.19598389 421.50973511]
[296.96859741 406.52963257]
[308.00485229 396.37084961]
[322.99737549 396.83898926]
[313.63125610 385.12252808]
[304.26513672 373.40603638]
[294.89901733 361.68957520]
[280.90841675 356.57955933]
[278.33508301 340.96902466]
[268.96896362 329.25253296]
[259.60284424 317.53607178]
[245.61222839 312.42605591]
[243.03889465 296.81552124]
[233.67277527 285.09906006]
[224.30665588 273.38256836]
[210.31605530 268.27255249]
[207.74270630 252.66203308]
[198.37658691 240.94555664]
[189.01046753 229.22908020]
[179.64434814 217.51260376]
[173.00073242 214.24548340]
[170.22244263 205.52551270]
[161.05029297 193.65658569]
[151.87814331 181.78764343]
[145.28915405 178.41169739]
[142.65466309 169.64721680]
[133.67897034 157.62902832]
[124.70328522 145.61082458]
[115.72759247 133.59263611]
[106.75189972 121.57444763]
[82.87369537 124.05632782]
[63.56297302 101.09799194]
[49.96546173 94.76493073]
[36.36795044 88.43186951]
[22.77043724 82.09880066]
[9.17292500 75.76573944]
[-4.42458677 69.43267822]
[-18.02209854 63.09961700]
[-31.61960983 56.76655579]
[-45.21712112 50.43349457]
[-60.72188950 54.55438614]
[-73.52448273 44.88623428]
[-73.80384064 28.84561157]
[-61.34567642 18.73751640]
[-45.70681763 22.31601143]
[-38.88405991 36.83598328]
[-25.28654861 43.16904449]
[-11.68903637 49.50210571]
[1.90847528 55.83516693]
[15.50598717 62.16823196]
[29.10349846 68.50128937]
[42.70101166 74.83435059]
[56.29852295 81.16741943]
[69.89603424 87.50048065]
[75.63696289 82.67432404]
[87.11881256 73.02201080]
[92.85973358 68.19585419]
[88.95759583 53.71230698]
[85.05545044 39.22875214]
[79.79277802 31.74137306]
[81.21033478 24.47485542]
[77.54693604 9.92908192]
[73.88353729 -4.61669159]
[70.22014618 -19.16246414]
[66.55674744 -33.70823669]
[62.89334869 -48.25401306]
[48.74414825 -54.91239929]
[42.23212814 -69.12956238]
[46.43206024 -84.19258118]
[59.36087036 -92.98916626]
[74.91397095 -91.36583710]
[85.74765778 -80.08907318]
[86.74659729 -64.48342896]
[77.43912506 -51.91740799]
[81.10251617 -37.37163544]
[84.76591492 -22.82586288]
[88.42931366 -8.28008842]
[92.09271240 6.26568460]
[95.75611115 20.81145859]
[99.53900909 35.32661057]
[103.44114685 49.81016541]
[107.34329224 64.29371643]
[121.06675720 74.61009216]
[127.33031464 88.81647491]
[125.93430328 102.63791656]
[118.77008820 112.59875488]
[127.74578094 124.61694336]
[136.72148132 136.63513184]
[145.69717407 148.65333557]
[154.67286682 160.67152405]
[163.74708557 172.61549377]
[172.91923523 184.48443604]
[182.09138489 196.35337830]
[191.36082458 208.14648438]
[200.72694397 219.86296082]
[210.09306335 231.57943726]
[219.45918274 243.29591370]
[234.11970520 249.24397278]
[236.02313232 264.01644897]
[245.38925171 275.73294067]
[254.75537109 287.44940186]
[269.41589355 293.39746094]
[271.31930542 308.16995239]
[280.68542480 319.88641357]
[290.05154419 331.60290527]
[304.71206665 337.55096436]
[306.61550903 352.32345581]
[315.98162842 364.03991699]
[325.34774780 375.75640869]
[334.71386719 387.47286987]
[344.64648438 398.71310425]
[355.12142944 409.44973755]
[365.59637451 420.18637085]
[376.07135010 430.92303467]
[386.54629517 441.65966797]
[399.95422363 440.27526855]
[411.53964233 446.77578735]
[417.17727661 458.58935547]
[415.00866699 471.30084229]
[425.30560303 482.20831299]
[435.60253906 493.11578369]
[448.63110352 487.13198853]
[462.84976196 485.46942139]
[476.86526489 488.27755737]
[489.30844116 495.26861572]
[498.96786499 505.74670410]
[504.90783691 518.67730713]
[506.55905151 532.78924561]
[503.77307129 546.69970703]
[496.83554077 559.04986572]
[506.95169067 570.12524414]
[515.06451416 574.36065674]
[517.14129639 581.46691895]
[527.07391357 592.70715332]
[537.00659180 603.94738770]
[546.93920898 615.18762207]
[556.87182617 626.42785645]
[566.80444336 637.66809082]
[576.73706055 648.90832520]
[586.66967773 660.14855957]
[604.64440918 657.87780762]
[620.25378418 666.76202393]
[627.35467529 683.08813477]
[623.28283691 700.25842285]
[633.57977295 711.16589355]
[643.87670898 722.07336426]
[659.47595215 720.97882080]
[672.09875488 730.20910645]
[675.78509521 745.40594482]
[668.79431152 759.39392090]
[654.42730713 765.56829834]
[639.46771240 761.01373291]
[630.97894287 747.88073730]
[632.96923828 732.37030029]
[622.67230225 721.46282959]
[612.37536621 710.55535889]
[600.67956543 713.87927246]
[588.61010742 711.89672852]
[578.47308350 704.92425537]
[572.23187256 694.23760986]
[571.12683105 681.83880615]
[575.42944336 670.08117676]
[565.49682617 658.84094238]
[555.56420898 647.60070801]
[545.63159180 636.36047363]
[535.69897461 625.12023926]
[525.76635742 613.88000488]
[515.83367920 602.63977051]
[505.90109253 591.39953613]
[495.87634277 580.24139404]
[485.76019287 569.16601562]
[471.28921509 575.34942627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 139]
[7 138]
[8 137]
[11 133]
[12 132]
[13 131]
[14 130]
[15 129]
[22 128]
[23 127]
[24 126]
[25 125]
[27 123]
[28 122]
[29 121]
[31 119]
[32 118]
[33 117]
[35 115]
[36 114]
[37 113]
[38 112]
[40 111]
[41 110]
[42 109]
[44 108]
[45 107]
[46 106]
[47 105]
[48 104]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[75 100]
[76 99]
[77 98]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[148 189]
[149 188]
[151 187]
[152 186]
[153 185]
[154 184]
[155 183]
[156 182]
[157 181]
[158 180]
[162 174]
[163 173]
[164 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
