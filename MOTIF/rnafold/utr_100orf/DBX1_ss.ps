%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGUUCCCCGGCCUCCUCGCGCCCCCCGCCGGGUACCCUAGCCUCCUGCGGCCCACGCCCACCUUGACGCUGCCCCAGUCCUUGCAGUCGGCAUUUU\
) } def
/len { sequence length } bind def

/coor [
[-38.84105301 215.54447937]
[-49.55365753 219.57955933]
[-60.84088898 221.45195007]
[-72.27083588 221.09233093]
[-83.40659332 218.51673889]
[-93.82293701 213.82585144]
[-103.12257385 207.20111084]
[-110.95128632 198.89762878]
[-117.01143646 189.23445129]
[-121.07327271 178.58222961]
[-135.92657471 180.67495728]
[-150.77987671 182.76768494]
[-165.63316345 184.86041260]
[-180.48646545 186.95315552]
[-195.33976746 189.04588318]
[-198.76586914 203.83189392]
[-207.30517578 216.37959290]
[-219.80282593 224.99198914]
[-234.56858826 228.50434875]
[-249.60552979 226.44163513]
[-262.88003540 219.08282471]
[-272.59680176 207.42312622]
[-277.44177246 193.03942871]
[-276.75967407 177.87699890]
[-270.64273071 163.98643494]
[-259.91824341 153.24633789]
[-246.03662109 147.10919189]
[-230.87519836 146.40499878]
[-216.48446655 151.22900391]
[-204.81062317 160.92881775]
[-197.43249512 174.19258118]
[-182.57919312 172.09985352]
[-167.72590637 170.00712585]
[-152.87260437 167.91438293]
[-138.01930237 165.82165527]
[-123.16600037 163.72892761]
[-120.29447937 144.81747437]
[-111.44959259 127.83480835]
[-97.57151794 114.61373901]
[-80.14440155 106.58573151]
[-61.03761673 104.62599182]
[-42.30527878 108.95800781]
[-25.96538544 119.12818909]
[-13.78242683 134.05329895]
[0.09797990 128.36697388]
[13.97838688 122.68064880]
[19.47696686 108.88567352]
[33.47266769 102.92120361]
[47.90481949 108.78215027]
[61.78522873 103.09582520]
[75.66563416 97.40950012]
[89.54604340 91.72317505]
[100.39717102 81.36687469]
[106.72470093 67.76678467]
[113.05222321 54.16669464]
[111.07063293 37.88771057]
[124.33867645 28.24971390]
[139.20733643 35.16744614]
[140.38099670 51.52454376]
[126.65231323 60.49422073]
[120.32479095 74.09430695]
[113.99726105 87.69439697]
[117.78088379 94.17005920]
[129.85403442 85.26844025]
[136.25830078 71.70431519]
[150.75033569 67.83380127]
[163.06475830 76.39856720]
[164.47868347 91.33177948]
[153.99055481 102.05554199]
[139.03074646 100.97434235]
[125.34812927 107.12138367]
[129.13174438 113.59704590]
[144.08642578 114.76230621]
[159.04109192 115.92756653]
[173.99575806 117.09281921]
[190.25672913 112.29519653]
[199.36834717 126.59256744]
[188.15206909 139.30599976]
[172.83050537 132.04748535]
[157.87583923 130.88223267]
[142.92115784 129.71697998]
[127.96649170 128.55172729]
[115.41561890 129.68008423]
[104.90045166 126.47312164]
[97.70031738 120.27099609]
[94.48078156 112.73459625]
[95.23236847 105.60357666]
[81.35195923 111.28990936]
[67.47155762 116.97623444]
[53.59114838 122.66255951]
[47.41899109 136.96438599]
[33.26128387 142.53340149]
[19.66471291 136.56105042]
[5.78430605 142.24737549]
[-8.09610081 147.93370056]
[-6.26207972 159.27482605]
[-6.66980124 170.75016785]
[-9.30139446 181.92109680]
[-14.05402470 192.36103821]
[-20.74391174 201.67184448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[44 95]
[45 94]
[46 93]
[49 90]
[50 89]
[51 88]
[52 87]
[53 62]
[54 61]
[55 60]
[72 82]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
