%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGUCCUGAGAGUCAGCCCUCGCCGCUGCAGCCUCGGCGCCCGGCCGGCCGGCCAUGGAGCGCCCCCCGCCCCGCGCCGCCGGCCGGGACCCCAGUGCGCUGCGGGCCGAGGCGCCGUGGCUGCGCGCGGAGGGUCCGGGGCCGCGCGCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[120.60737610 584.60766602]
[118.53176117 575.58856201]
[120.90695953 566.50085449]
[127.31590271 559.44622803]
[124.61207581 544.69195557]
[121.90824890 529.93762207]
[119.20442200 515.18334961]
[116.50059509 500.42904663]
[113.79677582 485.67474365]
[109.47283936 479.62765503]
[111.19019318 470.59631348]
[108.78401947 455.79055786]
[97.80406952 466.01019287]
[82.93908691 464.00213623]
[75.06427765 451.23547363]
[79.94083405 437.05029297]
[94.00108337 431.82446289]
[106.95911407 439.38198853]
[106.05343628 424.40936279]
[105.14775848 409.43670654]
[104.24208832 394.46408081]
[103.33641052 379.49145508]
[92.05205536 369.83749390]
[90.92028046 354.66601562]
[101.12275696 342.89541626]
[100.21707916 327.92276001]
[99.31140137 312.95013428]
[95.74789429 306.42593384]
[98.54132843 297.66744995]
[97.93733978 282.67962646]
[97.33335114 267.69177246]
[96.72935486 252.70394897]
[96.12536621 237.71611023]
[95.52137756 222.72828674]
[87.27787781 210.32287598]
[94.45322418 196.22235107]
[93.84923553 181.23451233]
[93.24524689 166.24667358]
[92.64125824 151.25885010]
[92.03726959 136.27101135]
[91.43328094 121.28317261]
[90.82929230 106.29534149]
[86.65602875 91.88756561]
[79.15602875 78.89718628]
[71.65602875 65.90680695]
[64.15602875 52.91642380]
[56.65603256 39.92604446]
[49.15603256 26.93566322]
[41.65603256 13.94528198]
[34.15603256 0.95490092]
[27.11393356 -4.95469379]
[26.63881874 -12.37344837]
[19.40192795 -25.51222229]
[12.16503620 -38.65099716]
[-0.01675498 -43.00240707]
[-5.76287746 -54.14171982]
[-2.46461940 -65.81726074]
[-9.43546677 -79.09909821]
[-16.40631485 -92.38094330]
[-29.67061424 -101.00468445]
[-28.73423195 -115.86982727]
[-35.70508194 -129.15167236]
[-42.67592621 -142.43350220]
[-57.50315475 -148.55992126]
[-61.81935120 -164.01145935]
[-52.31350708 -176.93501282]
[-36.27768707 -177.41676331]
[-26.01320457 -165.08712769]
[-29.39408684 -149.40435791]
[-22.42324066 -136.12251282]
[-15.45239258 -122.84067535]
[-2.68669486 -115.16693878]
[-3.12447429 -99.35179138]
[3.84637332 -86.06994629]
[10.81722069 -72.78810883]
[26.12512779 -64.25714874]
[25.30381012 -45.88788986]
[32.54070282 -32.74911499]
[39.77759171 -19.61034012]
[47.14641190 -6.54509926]
[54.64641190 6.44528198]
[62.14641190 19.43566322]
[69.64641571 32.42604446]
[77.14641571 45.41642380]
[84.64641571 58.40680695]
[92.14641571 71.39718628]
[99.64641571 84.38756561]
[114.47564697 86.64453888]
[125.50072479 76.47361755]
[129.71865845 68.30517578]
[136.85174561 66.21165466]
[148.07940674 56.26481628]
[159.30706787 46.31797791]
[170.43400574 36.25859070]
[181.45909119 26.08767509]
[192.48416138 15.91675949]
[196.84371948 0.10770177]
[212.78051758 -3.75891781]
[223.90013123 8.29454803]
[218.76367188 23.86852646]
[202.65509033 26.94184494]
[191.63000488 37.11275864]
[180.60491943 47.28367615]
[177.80496216 54.17017746]
[169.25390625 57.54563904]
[158.02624512 67.49247742]
[146.79858398 77.43931580]
[135.67164612 87.49870300]
[124.64656067 97.66961670]
[118.85169983 103.72944641]
[112.10096741 106.37528229]
[105.81713104 105.69135284]
[106.42111969 120.67918396]
[107.02510834 135.66702271]
[107.62909698 150.65486145]
[108.23308563 165.64268494]
[108.83707428 180.63052368]
[109.44106293 195.61836243]
[117.72776794 209.09579468]
[110.50921631 222.12429810]
[111.11320496 237.11212158]
[111.71719360 252.09996033]
[112.32118225 267.08779907]
[112.92517090 282.07562256]
[113.52915955 297.06347656]
[114.28403473 312.04446411]
[115.18971252 327.01708984]
[116.09539032 341.98971558]
[127.64226532 352.44473267]
[128.34745789 367.64202881]
[118.30904388 378.58578491]
[119.21472168 393.55841064]
[120.12039185 408.53103638]
[121.02606964 423.50366211]
[121.93174744 438.47631836]
[123.58977509 453.38439941]
[125.99594116 468.19015503]
[128.55107117 482.97091675]
[131.25489807 497.72521973]
[133.95872498 512.47949219]
[136.66255188 527.23382568]
[139.36637878 541.98809814]
[142.07020569 556.74243164]
[156.96440125 572.09722900]
[149.43571472 591.28076172]
[153.02545166 605.84490967]
[156.61518860 620.40899658]
[160.20492554 634.97314453]
[169.86611938 648.90502930]
[159.15318298 662.04541016]
[143.56071472 655.38873291]
[145.64079285 638.56286621]
[142.05107117 623.99877930]
[138.46133423 609.43463135]
[134.87159729 594.87048340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[11 137]
[12 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 128]
[26 127]
[27 126]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[34 120]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[42 112]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 81]
[50 80]
[52 79]
[53 78]
[54 77]
[57 75]
[58 74]
[59 73]
[61 71]
[62 70]
[63 69]
[88 109]
[89 108]
[91 107]
[92 106]
[93 105]
[94 103]
[95 102]
[96 101]
[145 155]
[146 154]
[147 153]
[148 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
