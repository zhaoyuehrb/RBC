%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCCGGGGCGGUGGGGAAGGCAAGAUGGCGGCGCCCAUGGAGGUGGCCGUGUGUACGGACUCGGCGGCCCCGAUGUGGAGCUGCAUCGUGUGGGAACUUCACUCGGGCGCCAACCUGCUCACCU\
) } def
/len { sequence length } bind def

/coor [
[79.80614471 356.45434570]
[70.13147736 368.73989868]
[54.81278610 371.88180542]
[41.08307648 364.39654541]
[35.42510223 349.81842041]
[40.51038742 335.03079224]
[53.93781281 327.01593018]
[56.15597153 312.18084717]
[58.37413406 297.34576416]
[49.33644104 285.56204224]
[51.37464142 270.48556519]
[63.79575348 261.08590698]
[66.01391602 246.25082397]
[68.23207092 231.41572571]
[70.45023346 216.58064270]
[72.66839600 201.74555969]
[74.88655853 186.91047668]
[65.81584167 177.67131042]
[63.72470093 164.69590759]
[69.60559082 152.72428894]
[81.49649048 146.26226807]
[84.08090973 131.48658752]
[86.66532898 116.71090698]
[82.51848602 105.50917816]
[85.34474945 95.67902374]
[92.19634247 90.58465576]
[87.80879974 76.24068451]
[83.42124939 61.89671707]
[79.03370667 47.55274963]
[73.47368622 40.16687393]
[74.71976471 32.79948044]
[70.68835449 18.35137749]
[66.65693665 3.90327334]
[62.62552261 -10.54483032]
[51.46395493 -21.75776672]
[55.49598312 -36.09624863]
[51.46456528 -50.54434967]
[47.25476456 -64.94149017]
[42.86721802 -79.28545380]
[38.47967148 -93.62942505]
[33.91505051 -107.91802979]
[29.17405510 -122.14908600]
[23.43305016 -129.39517212]
[24.49652481 -136.79113770]
[20.10897827 -151.13510132]
[15.72143078 -165.47908020]
[4.28593111 -176.41250610]
[7.96206999 -190.84632874]
[3.57452345 -205.19030762]
[-0.81302351 -219.53427124]
[-5.20057058 -233.87823486]
[-16.63607025 -244.81167603]
[-12.95993042 -259.24548340]
[-17.34747696 -273.58944702]
[-31.41873550 -280.78497314]
[-36.20106506 -295.84832764]
[-28.85719681 -309.84271240]
[-13.74411488 -314.46551514]
[0.17185549 -306.97412109]
[4.63461637 -291.81298828]
[-3.00350904 -277.97702026]
[1.38403773 -263.63302612]
[12.50571060 -253.72558594]
[9.14339828 -238.26577759]
[13.53094482 -223.92181396]
[17.91849136 -209.57785034]
[22.30603790 -195.23388672]
[33.42771149 -185.32643127]
[30.06539917 -169.86662292]
[34.45294571 -155.52265930]
[38.84049225 -141.17868042]
[43.40511322 -126.89008331]
[48.14610672 -112.65902710]
[53.30043793 -107.24939728]
[52.82363892 -98.01697540]
[57.21118546 -83.67300415]
[61.59873199 -69.32903290]
[66.61768341 -63.79357147]
[65.91266632 -54.57576752]
[69.94408417 -40.12766266]
[80.81729889 -29.94815063]
[77.07362366 -14.57624435]
[81.10504150 -0.12814122]
[85.13645935 14.31996250]
[89.16786957 28.76806641]
[93.37767029 43.16520309]
[97.76522064 57.50917053]
[102.15277100 71.85314178]
[106.54031372 86.19710541]
[117.46976471 96.47072601]
[132.05747986 99.96338654]
[147.27992249 95.65203857]
[157.85578918 106.14013672]
[172.44349670 109.63279724]
[187.03120422 113.12545776]
[201.61892700 116.61811829]
[214.07499695 107.16400146]
[229.69126892 107.97996521]
[241.09423828 118.68074036]
[242.89974976 134.21374512]
[234.25529480 147.24476624]
[219.24253845 151.62095642]
[204.95002747 145.27601624]
[198.12626648 131.20582581]
[183.53854370 127.71317291]
[168.95083618 124.22051239]
[154.36312866 120.72785187]
[140.18409729 125.28901672]
[128.56481934 114.55109406]
[113.97710419 111.05843353]
[101.44100952 119.29532623]
[98.85659027 134.07101440]
[96.27217102 148.84669495]
[106.57999420 162.91668701]
[103.63404083 179.76654053]
[89.72164154 189.12863159]
[87.50347900 203.96371460]
[85.28531647 218.79881287]
[83.06716156 233.63389587]
[80.84899902 248.46897888]
[78.63083649 263.30407715]
[87.75927734 275.92584229]
[85.29841614 290.93914795]
[73.20922089 299.56393433]
[70.99105835 314.39901733]
[68.77289581 329.23410034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 126]
[8 125]
[9 124]
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[17 116]
[21 113]
[22 112]
[23 111]
[26 89]
[27 88]
[28 87]
[29 86]
[31 85]
[32 84]
[33 83]
[34 82]
[36 80]
[37 79]
[38 77]
[39 76]
[40 75]
[41 73]
[42 72]
[44 71]
[45 70]
[46 69]
[48 67]
[49 66]
[50 65]
[51 64]
[53 62]
[54 61]
[90 110]
[91 109]
[93 107]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
