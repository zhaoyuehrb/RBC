%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGGAGGAGGAAGGAGAUGGCAUGGCUUACCAUAAAGAAGCACUGGACGCCGGGUGCACGUUCCAGGAUCCAGGUGCCCAGGGGUCAUGAAGCUGGGACUCCUCUGUGCUCUGCUCUCUCUGCUGGCAGGGCAUGGCUGGGCAGACACCCGUGCCAUCGGGGCCGAGGAAUGUCGCCCCAACUCCC\
) } def
/len { sequence length } bind def

/coor [
[84.70929718 390.88015747]
[71.45581818 398.95016479]
[55.99287415 397.65515137]
[44.26628494 387.49313354]
[40.78516769 372.37158203]
[46.88807678 358.10504150]
[60.22832489 350.17929077]
[61.48015976 335.23162842]
[62.73199844 320.28396606]
[63.98383713 305.33627319]
[52.72858429 295.42068481]
[49.01560974 280.88748169]
[54.13552094 266.78829956]
[66.30867004 258.02392578]
[81.30377197 257.64074707]
[93.90866089 265.77197266]
[99.74215698 279.59310913]
[96.75436401 264.89370728]
[93.76657104 250.19427490]
[90.77878571 235.49484253]
[87.79099274 220.79542542]
[84.80320740 206.09599304]
[81.81541443 191.39656067]
[78.82762909 176.69714355]
[75.83983612 161.99771118]
[72.85204315 147.29829407]
[59.29891205 140.87080383]
[46.02604294 147.85871887]
[32.75317383 154.84663391]
[28.31071854 170.01370239]
[14.40479183 177.52375793]
[-0.71446604 172.92118835]
[-8.07706738 158.93664551]
[-3.31491184 143.86688232]
[10.74669838 136.65254211]
[25.76526070 141.57376099]
[39.03812790 134.58584595]
[52.31099701 127.59793854]
[51.99776459 120.10447693]
[37.93794250 125.33147430]
[28.62207603 113.57500458]
[36.92440033 101.08214569]
[51.37129974 105.11756897]
[51.05806732 97.62411499]
[37.24831772 91.76827240]
[23.43857002 85.91242981]
[9.62882233 80.05659485]
[-4.18092585 74.20075226]
[-16.42200661 78.30618286]
[-27.81072426 73.12936401]
[-32.45748138 61.94741440]
[-46.16744995 55.86163330]
[-61.91994858 57.33452225]
[-70.41348267 45.09895325]
[-84.12345123 39.01317596]
[-97.48501587 46.90293503]
[-112.92900085 45.39864349]
[-124.51688385 35.07873154]
[-127.79289246 19.91141701]
[-121.49732208 5.72884178]
[-108.05095673 -2.01550603]
[-92.62419891 -0.34376580]
[-81.14894867 10.10124397]
[-78.03767395 25.30320358]
[-64.32770538 31.38898468]
[-49.55583572 29.48079872]
[-40.08167267 42.15166473]
[-26.37170219 48.23744202]
[-9.05600452 45.43806839]
[1.67491317 60.39100647]
[15.48466110 66.24684906]
[29.29441071 72.10268402]
[43.10415649 77.95852661]
[56.91390610 83.81436157]
[82.87329865 65.43486023]
[108.94150543 70.18682861]
[116.58575439 57.28080750]
[124.23000336 44.37478256]
[131.87425232 31.46876144]
[139.51850891 18.56273651]
[143.11759949 4.00091982]
[142.36593628 -10.98023510]
[141.61427307 -25.96138954]
[140.86260986 -40.94254684]
[140.11094666 -55.92369843]
[139.35928345 -70.90485382]
[138.60763550 -85.88600922]
[124.90192413 -92.81777191]
[116.51175690 -105.68247223]
[115.69403076 -121.01957703]
[122.66871643 -134.70349121]
[135.55966187 -143.05329895]
[150.89924622 -143.82293701]
[164.56123352 -136.80538940]
[172.87059021 -123.88835144]
[173.59214783 -108.54641724]
[166.53181458 -94.90650177]
[153.58877563 -86.63767242]
[154.34043884 -71.65651703]
[155.09210205 -56.67536163]
[155.84376526 -41.69420624]
[156.59542847 -26.71305275]
[157.34709167 -11.73189735]
[158.09875488 3.24925804]
[171.75740051 9.44937515]
[183.52938843 0.15312672]
[195.30137634 -9.14312172]
[207.07336426 -18.43936920]
[218.84536743 -27.73561859]
[230.61735535 -37.03186798]
[242.38934326 -46.32811356]
[254.16133118 -55.62436295]
[265.93331909 -64.92060852]
[277.70532227 -74.21685791]
[289.47729492 -83.51310730]
[301.24929810 -92.80935669]
[299.64941406 -108.15354156]
[306.61959839 -121.91653442]
[319.93566895 -129.70663452]
[335.34854126 -129.03802490]
[347.94000244 -120.12406921]
[353.69219971 -105.80917358]
[350.76956177 -90.66117859]
[340.10476685 -79.51374817]
[325.10086060 -75.92398071]
[310.54553223 -81.03736877]
[298.77355957 -71.74111938]
[287.00155640 -62.44487000]
[275.22958374 -53.14862061]
[263.45758057 -43.85237122]
[251.68559265 -34.55612564]
[239.91360474 -25.25987625]
[228.14161682 -15.96362782]
[216.36961365 -6.66737938]
[204.59762573 2.62886906]
[192.82563782 11.92511749]
[181.05364990 21.22136497]
[171.14651489 27.88310623]
[160.82060242 29.24443054]
[152.42453003 26.20698738]
[144.78027344 39.11301041]
[137.13603210 52.01903534]
[129.49177551 64.92505646]
[121.84753418 77.83108521]
[131.53471375 88.37669373]
[135.95738220 103.11538696]
[133.36122131 119.36753082]
[123.36111450 133.76536560]
[107.18131256 142.94619751]
[87.55147552 144.31050110]
[90.53926086 159.00993347]
[93.52705383 173.70935059]
[96.51483917 188.40878296]
[99.50263214 203.10820007]
[102.49041748 217.80763245]
[105.47821045 232.50704956]
[108.46600342 247.20648193]
[111.45378876 261.90591431]
[114.44158173 276.60531616]
[120.29741669 290.41506958]
[128.78662109 302.78170776]
[137.27583313 315.14831543]
[145.76504517 327.51495361]
[154.25424194 339.88156128]
[161.70639038 345.19909668]
[162.77995300 352.52651978]
[171.06132507 365.03326416]
[186.59690857 367.93527222]
[195.46115112 381.01962280]
[192.39508057 396.52365112]
[179.21772766 405.24905396]
[163.74699402 402.01925659]
[155.16137695 388.75036621]
[158.55458069 373.31463623]
[150.27320862 360.80789185]
[141.88761902 348.37078857]
[133.39842224 336.00415039]
[124.90921021 323.63754272]
[116.41999817 311.27090454]
[107.93079376 298.90429688]
[100.68097687 300.82525635]
[86.18132782 304.66717529]
[78.93151093 306.58813477]
[77.67967224 321.53579712]
[76.42783356 336.48345947]
[75.17599487 351.43115234]
[87.01213074 361.46536255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 186]
[8 185]
[9 184]
[10 183]
[17 159]
[18 158]
[19 157]
[20 156]
[21 155]
[22 154]
[23 153]
[24 152]
[25 151]
[26 150]
[27 38]
[28 37]
[29 36]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[51 68]
[52 67]
[54 65]
[55 64]
[76 144]
[77 143]
[78 142]
[79 141]
[80 140]
[81 104]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[105 137]
[106 136]
[107 135]
[108 134]
[109 133]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
[160 180]
[161 179]
[162 178]
[163 177]
[164 176]
[166 175]
[167 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
