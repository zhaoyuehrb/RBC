%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCUUCUCAAGGAAAUCCCAAUCUCUAUUCCGAAGAGUCUUCCCUAAAAGAUGGCCCUGAUCAGGAAGACAUUUUAUUUUCUAUUUGCUAUGUUCUUCAUUUUGGUUCAACUGCCAUCAGGGUGCCAGGCAGGACUUGAUUUUUCCCAAC\
) } def
/len { sequence length } bind def

/coor [
[-147.58737183 518.20666504]
[-154.13523865 531.70208740]
[-160.68312073 545.19744873]
[-155.74125671 559.96960449]
[-162.57397461 573.56256104]
[-176.68739319 578.18280029]
[-183.23526001 591.67822266]
[-189.78312683 605.17358398]
[-196.33100891 618.66894531]
[-197.80532837 635.55871582]
[-214.44313049 638.81750488]
[-222.18040466 623.73205566]
[-209.82638550 612.12109375]
[-203.27851868 598.62573242]
[-196.73065186 585.13031006]
[-190.18276978 571.63494873]
[-195.28834534 557.68975830]
[-188.84013367 543.91021729]
[-174.17849731 538.64959717]
[-167.63063049 525.15417480]
[-161.08276367 511.65881348]
[-169.54106140 504.32058716]
[-176.12983704 495.25399780]
[-180.50517273 484.92474365]
[-182.43695068 473.86450195]
[-181.82096863 462.64382935]
[-178.68458557 451.84246826]
[-173.18547058 442.01956177]
[-165.60374451 433.68463135]
[-156.32768250 427.27120972]
[-145.83384705 423.11422729]
[-134.66258240 421.43255615]
[-123.39019775 422.31750488]
[-112.59927368 425.72778320]
[-104.44260406 413.13934326]
[-96.28594208 400.55090332]
[-88.12927246 387.96246338]
[-79.97261047 375.37402344]
[-71.81594086 362.78558350]
[-63.65927505 350.19714355]
[-55.50260925 337.60870361]
[-61.89009476 322.51733398]
[-58.00649261 306.42602539]
[-45.18429947 295.69665527]
[-28.32933426 294.69146729]
[-20.43285179 281.93820190]
[-12.53636932 269.18493652]
[-21.64761353 258.30957031]
[-26.95443153 245.12863159]
[-27.92356873 230.93104553]
[-24.44662094 217.10957336]
[-16.85199165 205.02416992]
[-5.87391853 195.86822510]
[7.41849899 190.55070496]
[21.72540283 189.60595703]
[35.64329147 193.13995361]
[43.79995728 180.55151367]
[51.95662308 167.96307373]
[60.11328888 155.37463379]
[68.26995087 142.78619385]
[76.42662048 130.19775391]
[84.58328247 117.60932159]
[92.73995209 105.02088165]
[83.41558075 102.92192078]
[75.95896912 93.70073700]
[74.58832550 79.15824890]
[82.10081482 63.24895859]
[86.35366821 48.86447525]
[90.60651398 34.47999573]
[94.85935974 20.09551430]
[99.11220551 5.71103334]
[103.21714783 -8.71635151]
[107.17375946 -23.18511963]
[111.13037109 -37.65388489]
[98.60100555 -46.15645599]
[89.51329041 -58.26810837]
[84.85298920 -72.67506409]
[85.12562561 -87.81455994]
[90.30162048 -102.04438019]
[99.81951904 -113.82098389]
[112.64688873 -121.86692810]
[127.39232635 -125.30944824]
[142.45634460 -123.77512360]
[156.20491028 -117.43038940]
[167.14668274 -106.96348572]
[174.09478760 -93.50976562]
[176.29554749 -78.52859497]
[173.51022339 -63.64502335]
[166.04096985 -50.47350311]
[154.69798279 -40.44278717]
[140.71165466 -34.64093018]
[125.59913635 -33.69727707]
[121.64252472 -19.22850800]
[117.68592072 -4.75974131]
[118.96311188 2.56698895]
[113.49668884 9.96387959]
[109.24384308 24.34836006]
[104.99098969 38.73284149]
[100.73814392 53.11732483]
[96.48529816 67.50180054]
[101.36493683 73.19734192]
[109.18286896 60.39578247]
[123.77370453 63.87535858]
[124.97306061 78.82733154]
[111.12421417 84.58841705]
[116.00384521 90.28395081]
[130.87045288 88.28789520]
[145.73704529 86.29183960]
[155.12544250 73.57831573]
[170.76606750 71.30973816]
[183.37960815 80.83202362]
[185.48269653 96.49575806]
[175.82759094 109.00792694]
[160.14250183 110.94528961]
[147.73310852 101.15843964]
[132.86650085 103.15449524]
[117.99990845 105.15055084]
[105.32839203 113.17754364]
[97.17172241 125.76598358]
[89.01506042 138.35443115]
[80.85839081 150.94287109]
[72.70172882 163.53131104]
[64.54505920 176.11975098]
[56.38839340 188.70817566]
[48.23173141 201.29661560]
[57.88724899 213.93374634]
[62.63442993 229.08428955]
[61.91904831 244.91821289]
[55.84553146 259.52947998]
[45.16222000 271.16552734]
[31.16917038 278.43734741]
[15.55999947 280.48550415]
[0.21688811 277.08142090]
[-7.67959452 289.83468628]
[-15.57607651 302.58795166]
[-9.41528797 314.95715332]
[-10.18086529 328.64587402]
[-17.56475639 340.06881714]
[-29.53958321 346.28738403]
[-42.91417313 345.76538086]
[-51.07083893 358.35382080]
[-59.22750473 370.94226074]
[-67.38417053 383.53070068]
[-75.54083252 396.11914062]
[-83.69750214 408.70758057]
[-91.85416412 421.29602051]
[-100.01083374 433.88446045]
[-88.45249176 449.19302368]
[-83.54899597 467.70532227]
[-86.00565338 486.66625977]
[-95.43421936 503.26330566]
[-110.41402435 515.04345703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[6 16]
[7 15]
[8 14]
[9 13]
[34 147]
[35 146]
[36 145]
[37 144]
[38 143]
[39 142]
[40 141]
[41 140]
[45 135]
[46 134]
[47 133]
[56 125]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
[63 118]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[72 94]
[73 93]
[74 92]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
