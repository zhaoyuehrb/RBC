%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACAGAACUCCCACGGACACACCAUGAUUAGGACCCUGCUGCUGUCCACUUUGGUGGCUGGAGCCCUCAGUUGUGGGGUCUCCACUUACGCGCCUGAUAUGUCUAGGAUGCUUGGAGGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[93.89685059 282.86154175]
[78.78088379 281.72875977]
[64.96522522 275.49151611]
[54.11819458 264.90292358]
[47.54962158 251.24168396]
[46.05268860 236.15742493]
[49.80816650 221.47164917]
[58.36255264 208.95771790]
[70.68286896 200.12677002]
[85.28137970 196.04518127]
[86.40232849 181.08712769]
[87.52327728 166.12907410]
[88.64423370 151.17102051]
[79.59840393 148.28251648]
[71.22215271 143.80938721]
[63.79039001 137.89842224]
[57.54702377 130.74363708]
[52.69696808 122.57984924]
[49.39939880 113.67498779]
[47.76253510 104.32131958]
[47.84010696 94.82582092]
[49.62957001 85.50013733]
[35.95698166 79.33083344]
[22.28439331 73.16152191]
[8.61180496 66.99221802]
[-5.06078291 60.82291031]
[-14.88224888 69.39343262]
[-27.18365479 73.56087494]
[-40.09815979 72.73059845]
[-51.68022919 67.06355286]
[-60.19873428 57.44662094]
[-64.39566803 45.35402679]
[-63.67184067 32.62137604]
[-77.01992035 25.77821541]
[-90.36799622 18.93505478]
[-103.71607208 12.09189510]
[-117.00713348 19.92460442]
[-132.42205811 19.30537605]
[-145.04202271 10.43180561]
[-150.84001160 -3.86458421]
[-147.96594238 -19.02186584]
[-137.33688354 -30.20340919]
[-122.34455872 -33.84122086]
[-107.77294922 -28.77448845]
[-98.27181244 -16.61999130]
[-96.87290955 -1.25618172]
[-83.52483368 5.58697796]
[-70.17675781 12.43013763]
[-56.82868195 19.27329826]
[-42.81240082 9.43167210]
[-25.65977478 7.97132444]
[-10.02191830 15.37739182]
[-0.18408753 29.71866798]
[1.10852373 47.15032578]
[14.78111172 53.31962967]
[28.45369911 59.48893738]
[42.12628555 65.65824127]
[55.79887390 71.82755280]
[72.95101166 55.10257721]
[95.75351715 47.75640106]
[119.44308472 51.32358932]
[126.94308472 38.33320999]
[134.44308472 25.34282875]
[141.94308472 12.35244751]
[149.44308472 -0.63793397]
[149.64247131 -16.45788383]
[162.70680237 -23.61137390]
[170.20680237 -36.60175705]
[177.70680237 -49.59213638]
[185.20680237 -62.58251953]
[192.70680237 -75.57289886]
[192.16572571 -91.96311951]
[206.23057556 -100.39590454]
[220.43264771 -92.19632721]
[220.16207886 -75.79941559]
[205.69718933 -68.07289886]
[198.19718933 -55.08251953]
[190.69718933 -42.09213638]
[183.19718933 -29.10175514]
[175.69718933 -16.11137390]
[176.03425598 -1.22058356]
[162.43347168 6.86206627]
[154.93347168 19.85244751]
[147.43347168 32.84282684]
[139.93347168 45.83320999]
[132.43347168 58.82358932]
[139.73461914 65.81540680]
[145.55781555 74.07874298]
[149.68646240 83.30623627]
[151.96697998 93.15466309]
[152.31455994 103.25771332]
[150.71626282 113.23958588]
[164.53840637 119.06610870]
[178.36054993 124.89263153]
[192.25425720 130.54638672]
[206.21736145 136.02650452]
[220.18046570 141.50662231]
[234.14356995 146.98674011]
[247.78938293 139.34959412]
[263.14199829 142.32135010]
[272.95239258 154.49880981]
[272.58837891 170.13214111]
[262.22183228 181.83979797]
[246.74754333 184.09375000]
[233.47198486 175.82975769]
[228.66346741 160.94984436]
[214.70034790 155.46972656]
[200.73724365 149.98960876]
[186.77413940 144.50949097]
[179.31658936 144.99987793]
[172.53402710 138.71476746]
[158.71188354 132.88824463]
[144.88973999 127.06172943]
[134.10478210 139.80314636]
[119.86072540 148.50750732]
[103.60228729 152.29196167]
[102.48133850 167.25003052]
[101.36038971 182.20808411]
[100.23943329 197.16613770]
[114.06655884 203.37792969]
[124.93308258 213.94648743]
[131.52682495 227.59561157]
[133.05154419 242.67709351]
[129.32315063 257.36978149]
[120.79183197 269.89944458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 119]
[11 118]
[12 117]
[13 116]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[33 49]
[34 48]
[35 47]
[36 46]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
[92 113]
[93 112]
[94 111]
[95 109]
[96 108]
[97 107]
[98 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
