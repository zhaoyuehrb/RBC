%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUAGCUGAGGUUGAUUCAAUGCCGGCUGCCUCUUCUGUGAAGAAGCCAUUUGUUCUCAGGAGCAAGAUGGGCAAGUGGUGCCGCCACUGCUUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[73.19081116 138.33061218]
[79.74286652 124.83726501]
[91.97653961 116.15960693]
[78.47650146 122.69787598]
[64.97646332 129.23614502]
[51.47642136 135.77439880]
[37.97638321 142.31266785]
[24.47634315 148.85093689]
[10.97630405 155.38920593]
[-2.52373600 161.92747498]
[-7.79481173 176.58535767]
[-21.57891273 183.02377319]
[-35.52047729 177.90827942]
[-49.02051926 184.44654846]
[-62.52055740 190.98480225]
[-76.02059937 197.52307129]
[-87.64035034 209.86882019]
[-102.72029877 202.12081909]
[-99.44963074 185.48533630]
[-82.55886078 184.02304077]
[-69.05882263 177.48477173]
[-55.55878448 170.94650269]
[-42.05874634 164.40823364]
[-37.42842865 150.29811096]
[-23.83061028 143.47506714]
[-9.06200218 148.42742920]
[4.43803740 141.88916016]
[17.93807793 135.35089111]
[31.43811607 128.81263733]
[44.93815613 122.27436829]
[58.43819809 115.73609924]
[71.93824005 109.19783020]
[85.43827820 102.65956879]
[80.34889984 96.27925110]
[78.58298492 86.72428131]
[70.61661530 74.01456451]
[62.65025330 61.30484009]
[54.68388367 48.59511948]
[46.71751785 35.88539886]
[31.98182678 28.68877220]
[31.11652756 12.31246948]
[45.01176834 3.60302734]
[59.37331390 11.51997375]
[59.42723846 27.91903305]
[67.39360809 40.62875366]
[75.35997009 53.33847427]
[83.32633972 66.04819489]
[91.29270935 78.75791168]
[106.27638245 79.45751953]
[115.39237213 67.54539490]
[124.50836182 55.63327026]
[133.62435913 43.72114563]
[142.74034119 31.80902100]
[151.85633850 19.89689636]
[160.78596497 7.84444237]
[169.52708435 -4.34542608]
[178.26820374 -16.53529549]
[187.00930786 -28.72516441]
[188.08265686 -45.08914566]
[202.90861511 -52.09792709]
[216.23551941 -42.54146957]
[214.35377502 -26.25064278]
[199.19918823 -19.98404884]
[190.45806885 -7.79417944]
[181.71694946 4.39568949]
[172.97583008 16.58555794]
[171.61209106 23.98594093]
[163.76846313 29.01288795]
[154.65246582 40.92501068]
[145.53648376 52.83713531]
[136.42048645 64.74925995]
[127.30449677 76.66138458]
[118.18850708 88.57350922]
[121.42877197 103.21935272]
[134.71894836 110.17430878]
[148.00910950 117.12925720]
[157.24125671 118.37833405]
[161.59947205 124.51278687]
[174.66691589 131.87770081]
[187.73435974 139.24259949]
[200.80180359 146.60751343]
[213.86924744 153.97242737]
[230.63642883 156.48199463]
[232.86654663 173.28863525]
[217.33409119 180.08413696]
[206.50433350 167.03987122]
[193.43688965 159.67495728]
[180.36944580 152.31004333]
[167.30200195 144.94514465]
[154.23455811 137.58023071]
[141.05416870 130.41943359]
[127.76399231 123.46447754]
[114.47382355 116.50952148]
[126.43246460 125.56439972]
[132.56115723 139.25524902]
[131.34869385 154.20616150]
[123.09403992 166.73056030]
[109.83262634 173.74018860]
[94.83444977 173.50660706]
[81.79774475 166.08741760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[13 23]
[14 22]
[15 21]
[16 20]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 66]
[56 65]
[57 64]
[58 63]
[74 93]
[75 92]
[76 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
