%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCAGCCGAACCCUGGUCCCUCCUCCACAAUGUGGCUUCUCCUCACUCUCUCCUUCCUGCUGGCAUCCACAGCAGCCCAGGAUGGUGACAAGUUGCUGGAAGGUGACGAGUGUGCACCCCACUCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[105.32915497 127.64492035]
[99.77698517 128.15299988]
[94.23356628 127.55702972]
[88.91628265 125.88035583]
[84.03366852 123.18874359]
[79.77719879 119.58774567]
[66.61201477 126.77648163]
[53.44683075 133.96522522]
[40.28164673 141.15394592]
[27.11646271 148.34268188]
[27.81105232 163.55055237]
[21.85809135 177.49505615]
[10.48757648 187.43142700]
[-4.00997400 191.42918396]
[-18.74481201 188.74702454]
[-30.80395126 179.96961975]
[-43.96913528 187.15835571]
[-57.13432312 194.34709167]
[-58.98945618 209.75288391]
[-69.57023621 221.10307312]
[-84.80812836 224.03327942]
[-98.84386444 217.41679382]
[-106.28040314 203.79779053]
[-104.25825500 188.41304016]
[-93.55496979 177.17829895]
[-78.28618622 174.41355896]
[-64.32305908 181.18191528]
[-51.15787125 173.99317932]
[-37.99268723 166.80444336]
[-38.85703659 151.91423035]
[-33.14715958 138.06840515]
[-21.94606590 128.03364563]
[-7.43969059 123.84017181]
[7.50958729 126.37118530]
[19.92772865 135.17750549]
[33.09291077 127.98876953]
[46.25809860 120.80003357]
[59.42328262 113.61129761]
[72.58847046 106.42256165]
[76.31544495 84.77886200]
[94.45500946 72.39756012]
[95.52509308 57.43578339]
[85.45252991 45.55381393]
[86.75088501 30.39568329]
[98.14060211 20.86625481]
[99.21068573 5.90447330]
[100.28077698 -9.05730820]
[101.35086060 -24.01909065]
[102.42095184 -38.98087311]
[94.75666046 -46.87059784]
[92.79499054 -57.46928787]
[96.95406342 -67.17346954]
[105.61228943 -72.82065582]
[107.39307404 -87.71456909]
[109.17385864 -102.60848999]
[110.95464325 -117.50241089]
[99.89937592 -130.99940491]
[101.93727112 -147.98786926]
[115.33382416 -158.08201599]
[116.75966644 -173.01409912]
[118.18550873 -187.94618225]
[119.61135101 -202.87826538]
[121.03718567 -217.81033325]
[122.46302795 -232.74241638]
[111.36544037 -243.75956726]
[109.99737549 -259.33718872]
[119.00479126 -272.12002563]
[134.13465881 -276.07238770]
[148.24311829 -269.32809448]
[154.66857910 -255.07160950]
[150.37715149 -240.03439331]
[137.39511108 -231.31657410]
[135.96926880 -216.38449097]
[134.54342651 -201.45242310]
[133.11758423 -186.52033997]
[131.69174194 -171.58825684]
[130.26589966 -156.65618896]
[139.81185913 -147.91767883]
[142.59359741 -135.07873535]
[137.36764526 -122.81362915]
[125.84856415 -115.72161865]
[124.06777954 -100.82770538]
[122.28698730 -85.93378448]
[120.50620270 -71.03986359]
[129.46316528 -53.96789932]
[117.38272858 -37.91078568]
[116.31264496 -22.94900322]
[115.24255371 -7.98722076]
[114.17247009 6.97456121]
[113.10237885 21.93634224]
[123.01998138 32.98970032]
[122.14790344 48.17831802]
[110.48687744 58.50587082]
[109.41678619 73.46765137]
[122.03760529 82.47900391]
[127.97216034 96.80627441]
[125.41987610 112.10253143]
[136.75611877 121.92543793]
[148.09236145 131.74835205]
[159.42860413 141.57125854]
[170.76484680 151.39416504]
[191.48136902 148.39787292]
[207.58341980 161.31640625]
[209.10618591 181.61479187]
[221.32482910 190.31564331]
[233.54345703 199.01649475]
[245.76210022 207.71734619]
[258.08340454 216.27218628]
[270.50564575 224.67980957]
[286.89270020 225.30935669]
[294.30062866 239.93997192]
[285.10879517 253.52091980]
[268.77294922 252.08128357]
[262.09805298 237.10205078]
[249.67579651 228.69442749]
[242.30145264 227.53933716]
[237.06124878 219.93598938]
[224.84260559 211.23513794]
[212.62396240 202.53428650]
[200.40533447 193.83343506]
[191.90916443 198.24029541]
[182.32781982 199.20118713]
[173.01354980 196.53717041]
[165.29698181 190.58395386]
[160.29695129 182.15029907]
[158.75848389 172.40826416]
[160.94194031 162.73042297]
[149.60569763 152.90750122]
[138.26945496 143.08459473]
[126.93321228 133.26168823]
[115.59696960 123.43877411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[16 29]
[17 28]
[18 27]
[41 94]
[42 93]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[53 84]
[54 83]
[55 82]
[56 81]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[104 120]
[105 119]
[106 118]
[107 117]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
