%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:47:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCUGUCACCGCCCCUGGGAAGAGUGGAACCCAUACUUGCUGGUCUGAUCCAUGCACAAGGCGGGGCUGCUAGGCCUCUGUGCCCGGGCUUGGAAUUCGGUGCGGAUGGCCAGCUCCGGGAUGACCCGCCGGGACCCGCUCGCAAAUAAGG\
) } def
/len { sequence length } bind def

/coor [
[64.81641388 136.01298523]
[55.99963379 148.14823914]
[47.18285370 160.28349304]
[38.36607742 172.41874695]
[29.54929733 184.55400085]
[20.73251724 196.68927002]
[11.91573906 208.82452393]
[9.38078976 217.66279602]
[2.79525304 221.11393738]
[-6.26565933 233.06800842]
[-8.97921371 241.85310364]
[-15.63334179 245.17005920]
[-24.93466568 256.93804932]
[-22.84825134 272.60400391]
[-32.51667023 285.10589600]
[-48.20381546 287.02655029]
[-60.60278702 277.22650146]
[-62.35749435 261.51992798]
[-52.42689896 249.22526550]
[-36.70264816 247.63671875]
[-27.40132332 235.86872864]
[-18.21973228 224.00709534]
[-9.15882015 212.05302429]
[-0.21951550 200.00773621]
[8.59726334 187.87248230]
[17.41404152 175.73722839]
[26.23082161 163.60197449]
[35.04759979 151.46672058]
[43.86437988 139.33146667]
[52.68115616 127.19621277]
[50.87493896 119.91695404]
[37.31953430 126.33965302]
[28.09297562 138.16633606]
[13.29180527 140.60055542]
[0.76360571 132.35165405]
[-2.84917140 117.79322815]
[4.36896801 104.64414215]
[18.59096718 99.87604523]
[32.27699280 106.01766205]
[47.26250076 105.35844421]
[45.45628357 98.07918549]
[31.98921394 91.47327423]
[18.52214622 84.86736298]
[4.98882484 78.39826202]
[-8.60935879 72.06664276]
[-22.20754242 65.73502350]
[-36.96794891 71.38356018]
[-51.36498642 64.86428833]
[-56.85715103 50.04499054]
[-50.18603516 35.71768188]
[-35.30949402 30.38250542]
[-21.05351830 37.20472336]
[-15.87592316 52.13684082]
[-2.27773976 58.46846008]
[11.32044411 64.80007935]
[18.75541878 64.77227020]
[25.12805748 71.40029144]
[38.59512711 78.00620270]
[52.06219482 84.61211395]
[67.65330505 63.90850067]
[90.68675995 54.35644913]
[114.40833282 57.68315506]
[132.38528442 71.98511505]
[145.27313232 64.31027222]
[158.16099548 56.63543701]
[171.04885864 48.96059799]
[183.93670654 41.28575897]
[196.82456970 33.61091995]
[196.66789246 18.35032272]
[205.87641907 5.10071945]
[221.87622070 -0.67279762]
[239.11067200 4.10408401]
[248.64857483 -7.47297001]
[258.18649292 -19.05002403]
[261.25384521 -27.71792984]
[268.03692627 -30.76249886]
[277.80752563 -42.14387131]
[287.57809448 -53.52524185]
[297.34869385 -64.90661621]
[307.00341797 -76.38642120]
[316.54135132 -87.96347046]
[326.07925415 -99.54052734]
[335.61718750 -111.11757660]
[345.15509033 -122.69463348]
[354.69299316 -134.27168274]
[364.23092651 -145.84873962]
[373.76882935 -157.42579651]
[376.83618164 -166.09370422]
[383.61926270 -169.13827515]
[393.38986206 -180.51963806]
[403.16043091 -191.90101624]
[400.44021606 -207.30018616]
[408.29953003 -220.81924438]
[423.02746582 -226.07492065]
[437.66995239 -220.58561707]
[445.31320190 -206.94323730]
[442.34835815 -191.58929443]
[430.17532349 -181.77343750]
[414.54180908 -182.13043213]
[404.77120972 -170.74905396]
[395.00064087 -159.36769104]
[385.34588623 -147.88787842]
[375.80798340 -136.31082153]
[366.27005005 -124.73377228]
[356.73214722 -113.15672302]
[347.19424438 -101.57966614]
[337.65631104 -90.00260925]
[328.11840820 -78.42556000]
[318.58047485 -66.84850311]
[316.74380493 -59.64390564]
[308.73007202 -55.13602829]
[298.95947266 -43.75465393]
[289.18887329 -32.37328339]
[279.41830444 -20.99191284]
[269.76354980 -9.51210976]
[260.22564697 2.06494451]
[250.68771362 13.64199829]
[254.00436401 28.27073479]
[267.60253906 34.60235214]
[281.20071411 40.93397141]
[294.79891968 47.26559067]
[308.39709473 53.59720993]
[321.38128662 45.26569748]
[336.80862427 45.29942703]
[349.75625610 53.68762589]
[356.09268188 67.75366211]
[353.79595947 83.00910187]
[343.59893799 94.58600616]
[328.75549316 98.79020691]
[314.00207520 94.28017426]
[304.04647827 82.49504089]
[302.06546021 67.19539642]
[288.46728516 60.86377335]
[274.86911011 54.53215790]
[261.27093506 48.20053864]
[247.67274475 41.86891937]
[225.82025146 55.02905655]
[204.49940491 46.49877548]
[191.61154175 54.17361450]
[178.72369385 61.84845352]
[165.83583069 69.52329254]
[152.94798279 77.19813538]
[140.06011963 84.87297058]
[142.89341736 93.38859558]
[143.91191101 102.42600250]
[143.02200317 111.59758759]
[140.21304321 120.49961090]
[135.55986023 128.73004150]
[129.22160339 135.90660095]
[121.43660736 141.68446350]
[112.51367950 145.77267456]
[102.81990051 147.94847107]
[92.76558685 148.06889343]
[82.78693390 146.07910156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[9 23]
[10 22]
[12 21]
[13 20]
[41 59]
[42 58]
[43 57]
[44 55]
[45 54]
[46 53]
[63 143]
[64 142]
[65 141]
[66 140]
[67 139]
[68 138]
[72 117]
[73 116]
[74 115]
[76 114]
[77 113]
[78 112]
[79 111]
[80 109]
[81 108]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[89 101]
[90 100]
[91 99]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
