%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUAACUUUUCUGCCCAUCAUUUUUUCCAUUCUAAUAGUGGUUACAUUUGUGAUUGGAAAUUUUGCUAAUGGCUUCAUAGCAUUGGUAAAUUCCAUUG\
) } def
/len { sequence length } bind def

/coor [
[97.33252716 240.51841736]
[84.55789185 248.38026428]
[70.62543488 253.93783569]
[55.94694901 257.02685547]
[40.95628738 257.55603027]
[26.09652519 255.50970459]
[11.80687046 250.94836426]
[-1.49031687 244.00683594]
[-13.40201378 234.89028931]
[-23.57614708 223.86817932]
[-31.71200371 211.26628113]
[-37.56910706 197.45706177]
[-40.97434616 182.84870911]
[-41.82706833 167.87295532]
[-40.10206985 152.97247314]
[-35.85033798 138.58766174]
[-29.19754028 125.14369965]
[-20.34031296 113.03793335]
[-9.54044628 102.62818146]
[2.88284612 94.22212982]
[16.56237221 88.06822205]
[31.09380722 84.34835052]
[46.04764557 83.17247772]
[60.98189926 84.57534027]
[75.45516205 88.51548767]
[89.03255463 94.87236023]
[83.13105011 81.08206177]
[77.22954559 67.29176331]
[71.32804108 53.50147247]
[65.42653656 39.71117401]
[59.52503586 25.92087936]
[46.98227310 16.27776337]
[49.08824539 1.53279293]
[43.18674088 -12.25750256]
[29.46063042 -14.34284210]
[18.67162895 -22.90684700]
[13.60641766 -35.59944153]
[15.50440311 -49.02304840]
[23.75642776 -59.64193344]
[18.28665352 -73.60909271]
[12.81688118 -87.57625580]
[7.34710836 -101.54341888]
[-5.79738283 -111.34925079]
[-3.60906982 -127.60173798]
[11.66089916 -133.58171082]
[24.30408859 -123.13748932]
[21.31427002 -107.01319122]
[26.78404236 -93.04602814]
[32.25381470 -79.07886505]
[37.72358704 -65.11170959]
[53.66151428 -61.53591156]
[64.48413086 -49.08222198]
[65.82888794 -32.47231293]
[56.97703934 -18.15900612]
[62.87854385 -4.36871099]
[74.99919128 4.28803158]
[73.31533051 20.01937485]
[79.21683502 33.80966949]
[85.11833954 47.59996796]
[91.01984406 61.39026260]
[96.92134857 75.18055725]
[102.82284546 88.97085571]
[106.36035156 90.79992676]
[108.99346924 93.69304657]
[123.84677124 95.78577423]
[138.70007324 97.87850189]
[153.55335999 99.97123718]
[168.40666199 102.06396484]
[183.25996399 104.15669250]
[198.11326599 106.24942780]
[212.96656799 108.34215546]
[227.81985474 110.43488312]
[242.67315674 112.52761841]
[251.78924561 110.60675049]
[257.95303345 114.92335510]
[272.73406982 117.47701263]
[287.92956543 111.31021881]
[300.69989014 121.59860229]
[297.90802002 137.75836182]
[282.42602539 143.16571045]
[270.18041992 132.25804138]
[255.39938354 129.70439148]
[240.58042908 127.38091278]
[225.72712708 125.28818512]
[210.87382507 123.19545746]
[196.02053833 121.10272217]
[181.16723633 119.00999451]
[166.31393433 116.91726685]
[151.46063232 114.82453156]
[136.60733032 112.73180389]
[121.75403595 110.63907623]
[106.90074158 108.54634094]
[116.58952332 119.99743652]
[124.17372131 132.93884277]
[129.42916870 146.98805237]
[132.20053101 161.72981262]
[132.40589905 176.72840881]
[130.03919983 191.54051208]
[125.17038727 205.72834778]
[117.94336700 218.87255859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[33 55]
[34 54]
[39 50]
[40 49]
[41 48]
[42 47]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
