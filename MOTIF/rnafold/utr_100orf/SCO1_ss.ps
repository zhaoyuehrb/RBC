%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCGGAACGCUACCGGAAAUCGCGGGGAGGGUCAAAGGAGACCCGGUCUCCGAGGCUCAUGGCGAUGCUGGUCCUAGUACCCGGACGAGUUAUGCGGCCUCUGGGUGGCCAACUUUGGCGCUUCUUGCCUCGCGGACUCGAGUUUUGGGGCCCAGCCG\
) } def
/len { sequence length } bind def

/coor [
[-192.70440674 632.53479004]
[-197.83471680 646.63018799]
[-195.28396606 662.24438477]
[-206.90763855 671.55780029]
[-212.03793335 685.65319824]
[-217.16824341 699.74859619]
[-222.29853821 713.84399414]
[-222.03413391 730.79583740]
[-238.25035095 735.74267578]
[-247.49293518 721.52960205]
[-236.39392090 708.71368408]
[-231.26362610 694.61828613]
[-226.13331604 680.52288818]
[-221.00302124 666.42749023]
[-223.92071533 651.82147217]
[-211.93009949 641.49987793]
[-206.79980469 627.40447998]
[-212.20359802 622.59112549]
[-216.24603271 616.56219482]
[-218.66168213 609.69378662]
[-219.28698730 602.41778564]
[-218.07131958 595.19445801]
[-215.08090210 588.48364258]
[-210.49525452 582.71520996]
[-204.59648132 578.26184082]
[-197.75192261 575.41461182]
[-190.39129639 574.36425781]
[-182.97969055 575.18823242]
[-175.73300171 562.05480957]
[-180.10012817 547.86102295]
[-172.93804932 534.43872070]
[-158.02067566 529.95428467]
[-150.77398682 516.82092285]
[-143.52729797 503.68753052]
[-136.28060913 490.55416870]
[-129.03392029 477.42080688]
[-134.52099609 467.35250854]
[-134.44319153 455.76620483]
[-128.70359802 445.56301880]
[-118.63751984 439.35409546]
[-106.70359802 438.79275513]
[-98.95310211 425.95022583]
[-91.20261383 413.10772705]
[-83.45212555 400.26522827]
[-75.70163727 387.42272949]
[-75.74987793 372.52819824]
[-61.99491882 364.71081543]
[-54.24443054 351.86831665]
[-46.61882401 338.95126343]
[-39.11882401 325.96087646]
[-31.61882591 312.97048950]
[-24.11882591 299.98010254]
[-24.45588875 285.08932495]
[-10.85510349 277.00668335]
[-3.35510325 264.01629639]
[4.14489651 251.02590942]
[11.64489651 238.03552246]
[19.14489746 225.04515076]
[26.64489746 212.05476379]
[19.07936287 199.22401428]
[18.95110893 184.22935486]
[26.39471245 171.09698486]
[39.49821091 163.40315247]
[54.79320145 163.30047607]
[62.29320145 150.31008911]
[69.79319763 137.31971741]
[77.29319763 124.32933044]
[63.40346146 103.42365265]
[67.56925964 76.18893433]
[90.85073090 57.25796890]
[91.14160156 42.26078796]
[91.43247223 27.26360893]
[83.96422577 13.31599426]
[91.94686890 0.74115217]
[92.23773956 -14.25602722]
[92.52861023 -29.25320625]
[92.81948090 -44.25038528]
[80.36434174 -53.50506592]
[75.75982666 -68.32323456]
[80.77645874 -83.00699615]
[93.48525238 -91.91015625]
[108.99941254 -91.60926056]
[121.35342407 -82.22000885]
[125.79692078 -67.35276794]
[120.62129211 -52.72428513]
[107.81665802 -43.95951843]
[107.52578735 -28.96233749]
[107.23492432 -13.96515751]
[106.94405365 1.03202212]
[114.43309784 13.90693760]
[106.42964935 27.55447769]
[106.13877869 42.55165863]
[105.84790802 57.54883575]
[112.44941711 61.10834122]
[115.14022064 46.35166168]
[130.00617981 44.35088730]
[136.50270081 57.87106705]
[125.65244293 68.22734833]
[132.25395203 71.78684998]
[144.62406921 63.30274582]
[156.99420166 54.81864166]
[169.36431885 46.33453751]
[170.69802856 30.75393486]
[181.77128601 19.71233368]
[197.35565186 18.42324448]
[210.09265137 27.49533463]
[213.96827698 42.64503860]
[207.15255737 56.71913528]
[192.86369324 63.07225800]
[177.84843445 58.70466614]
[165.47830200 67.18876648]
[153.10818481 75.67286682]
[140.73805237 84.15697479]
[142.23381042 94.81161499]
[141.06195068 105.21920013]
[137.43605042 114.73979950]
[131.71624756 122.82284546]
[124.37859344 129.03887939]
[115.97819519 133.10174561]
[107.10863495 134.88034058]
[98.36077118 134.39930725]
[90.28358459 131.82933044]
[82.78358459 144.81971741]
[75.28358459 157.81008911]
[67.78358459 170.80047607]
[75.34215546 184.09765625]
[75.23084259 199.29254150]
[67.57968140 212.30508423]
[54.52980423 219.69132996]
[39.63527679 219.55476379]
[32.13527679 232.54515076]
[24.63527870 245.53552246]
[17.13527870 258.52590942]
[9.63527775 271.51629639]
[2.13527775 284.50668335]
[1.93589020 300.32662964]
[-11.12844467 307.48010254]
[-18.62844467 320.47048950]
[-26.12844467 333.46087646]
[-33.62844467 346.45126343]
[-35.22295761 355.49661255]
[-41.40192413 359.61880493]
[-49.15241623 372.46130371]
[-49.65853500 388.27441406]
[-62.85913086 395.17321777]
[-70.60961914 408.01571655]
[-78.36010742 420.85821533]
[-86.11060333 433.70071411]
[-93.86109161 446.54324341]
[-88.59484863 464.70156860]
[-98.06701660 480.69567871]
[-115.90055084 484.66748047]
[-123.14723969 497.80087280]
[-130.39392090 510.93423462]
[-137.64060974 524.06762695]
[-144.88729858 537.20098877]
[-140.72703552 552.21197510]
[-148.26330566 565.42785645]
[-162.59963989 569.30151367]
[-169.84632874 582.43487549]
[-160.93830872 604.26666260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[4 14]
[5 13]
[6 12]
[7 11]
[28 160]
[29 159]
[32 156]
[33 155]
[34 154]
[35 153]
[36 152]
[41 149]
[42 148]
[43 147]
[44 146]
[45 145]
[47 143]
[48 142]
[49 140]
[50 139]
[51 138]
[52 137]
[54 135]
[55 134]
[56 133]
[57 132]
[58 131]
[59 130]
[64 125]
[65 124]
[66 123]
[67 122]
[70 93]
[71 92]
[72 91]
[74 89]
[75 88]
[76 87]
[77 86]
[99 113]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
