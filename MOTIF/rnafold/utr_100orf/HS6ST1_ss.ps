%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCCGCGCCCGGGCCCCGGCGAUGGUGACACAUGCGGCGGCGGCGCGCCGGCGGCAGGACCAUGGUUGAGCGCGCCAGCAAGUUCGUGCUGGUGGUGGCGGGCUCGGUGUGCUUCAUGCUCAUCUUGUACC\
) } def
/len { sequence length } bind def

/coor [
[168.56689453 355.70672607]
[164.43234253 341.28781128]
[160.29777527 326.86889648]
[145.81265259 323.39807129]
[134.93730164 313.07418823]
[130.66142273 298.59719849]
[134.22940063 283.82672119]
[144.78033447 272.75311279]
[140.64576721 258.33419800]
[136.51121521 243.91526794]
[132.37664795 229.49633789]
[128.07460022 215.12649536]
[123.60565186 200.80767822]
[119.13669586 186.48886108]
[114.66773987 172.17004395]
[110.19878387 157.85124207]
[105.72983551 143.53242493]
[101.26087952 129.21360779]
[96.79192352 114.89479065]
[87.55699921 103.07463074]
[74.74465179 95.27439117]
[61.93230820 87.47415161]
[49.11996078 79.67390442]
[33.30893326 79.10646057]
[26.46137428 65.87920380]
[13.64902782 58.07896423]
[0.83668101 50.27872467]
[-11.97566605 42.47848129]
[-24.78801155 34.67824173]
[-33.32752609 39.70288086]
[-43.06125641 41.21043015]
[-52.60694885 39.03037262]
[-60.62508392 33.51278305]
[-66.00686646 25.47294426]
[-68.02744293 16.07108879]
[-66.44333649 6.64505529]
[-78.47518921 -2.31232357]
[-90.50703430 -11.26970196]
[-106.19686890 -13.30432606]
[-111.78531647 -27.11079407]
[-123.81716156 -36.06817245]
[-135.95242310 -44.88495255]
[-148.18943787 -53.55993652]
[-160.42645264 -62.23492050]
[-172.66346741 -70.90990448]
[-189.08184814 -75.13758087]
[-189.56445312 -92.08465576]
[-173.41328430 -97.23982239]
[-163.98849487 -83.14692688]
[-151.75146484 -74.47193909]
[-139.51445007 -65.79695892]
[-127.27742767 -57.12197113]
[-119.93420410 -55.80790329]
[-114.85977936 -48.10002136]
[-102.82793427 -39.14264297]
[-87.99869537 -37.74871063]
[-81.54965210 -23.30154991]
[-69.51780701 -14.34417152]
[-57.48595810 -5.38679266]
[-37.69308853 -10.16159248]
[-20.46248245 1.21824181]
[-16.98777008 21.86589241]
[-4.17542362 29.66613579]
[8.63692284 37.46637726]
[21.44927025 45.26662064]
[34.26161575 53.06686020]
[49.15621948 53.07638168]
[56.92020416 66.86155701]
[69.73255157 74.66180420]
[82.54489899 82.46204376]
[95.35724640 90.26228333]
[99.71437073 85.97761536]
[106.78861237 84.12814331]
[118.82046509 75.17076111]
[125.85397339 56.34382248]
[145.06738281 54.71380234]
[156.66946411 45.20633698]
[168.27153015 35.69887161]
[179.87361145 26.19140816]
[191.47567749 16.68394470]
[203.07775879 7.17647934]
[214.67982483 -2.33098507]
[226.28190613 -11.83844948]
[227.59283447 -27.58827591]
[239.71040344 -37.73420334]
[255.44549561 -36.25683594]
[265.46273804 -24.03266907]
[263.81909180 -8.31408215]
[251.48970032 1.57336473]
[235.78936768 -0.23637578]
[224.18730164 9.27108860]
[212.58522034 18.77855301]
[200.98313904 28.28601837]
[189.38107300 37.79348373]
[177.77899170 47.30094528]
[166.17692566 56.80841064]
[154.57484436 66.31587219]
[154.46792603 76.64537048]
[148.52795410 85.36520386]
[138.54568481 89.41235352]
[127.77783966 87.20261383]
[115.74599457 96.15998840]
[111.11074066 110.42584229]
[115.57968903 124.74465179]
[120.04864502 139.06346130]
[124.51760101 153.38227844]
[128.98655701 167.70109558]
[133.45550537 182.01991272]
[137.92446899 196.33872986]
[142.39341736 210.65754700]
[147.98669434 217.99760437]
[146.79557800 225.36177063]
[150.93013000 239.78070068]
[155.06469727 254.19963074]
[159.19926453 268.61856079]
[174.01507568 272.41836548]
[184.86804199 283.05371094]
[188.91352844 297.59674072]
[185.16154480 312.11495972]
[174.71670532 322.73431396]
[178.85127258 337.15325928]
[182.98582458 351.57217407]
[198.07235718 353.64984131]
[211.00608826 361.68963623]
[219.54620361 374.29861450]
[222.21304321 389.29220581]
[218.54458618 404.07266235]
[209.17640686 416.07922363]
[195.73159790 423.23162842]
[180.53955078 424.29071045]
[166.23239136 419.07296753]
[155.28889465 408.48239136]
[149.60511780 394.35388184]
[150.16580200 379.13528442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[8 115]
[9 114]
[10 113]
[11 112]
[12 110]
[13 109]
[14 108]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 71]
[21 70]
[22 69]
[23 68]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[36 59]
[37 58]
[38 57]
[40 55]
[41 54]
[42 52]
[43 51]
[44 50]
[45 49]
[73 102]
[74 101]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
