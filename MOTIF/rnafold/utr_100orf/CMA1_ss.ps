%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUUGCUCAGGCAGCCUCUCUGGGAAGAUGCUGCUUCUUCCUCUCCCCCUGCUGCUCUUUCUCUUGUGCUCCAGAGCUGAAGCUGGGGAGAUCAUCGGGGGCACAGAAUGCAAGCCACAUUCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[92.99600983 115.85744476]
[81.59576416 125.60600281]
[70.19551086 135.35456848]
[58.79526901 145.10311890]
[47.39501953 154.85168457]
[35.99477386 164.60023499]
[24.59452629 174.34878540]
[19.13467026 189.19805908]
[4.43323231 191.58908081]
[-6.96701431 201.33763123]
[-18.36726189 211.08619690]
[-29.76750755 220.83474731]
[-41.16775513 230.58331299]
[-52.56800079 240.33186340]
[-52.24125290 255.96603394]
[-62.08063126 268.12008667]
[-77.44028473 271.05520630]
[-91.06785583 263.38558960]
[-96.52881622 248.73252869]
[-91.24467468 234.01478577]
[-77.71044159 226.18162537]
[-62.31655884 228.93162537]
[-50.91631317 219.18305969]
[-39.51606750 209.43450928]
[-28.11581802 199.68594360]
[-16.71557236 189.93739319]
[-5.31532478 180.18882751]
[-0.67088991 166.03684998]
[14.84596920 162.94854736]
[26.24621582 153.19998169]
[37.64646149 143.45143127]
[49.04671097 133.70286560]
[60.44695663 123.95431519]
[71.84720612 114.20575714]
[83.24745178 104.45719910]
[91.10791779 91.68171692]
[94.67078400 77.11099243]
[98.23364258 62.54026794]
[101.79650879 47.96954346]
[105.35936737 33.39881897]
[108.92222595 18.82809258]
[96.81786346 5.43986320]
[95.11120605 -12.37143707]
[104.29157257 -27.54771233]
[120.57093048 -34.18647766]
[123.43109894 -48.91126633]
[126.29127502 -63.63605499]
[129.15144348 -78.36083984]
[132.01162720 -93.08563232]
[134.87179565 -107.81041718]
[137.73196411 -122.53520966]
[131.15676880 -133.70692444]
[133.90907288 -145.96253967]
[143.96511841 -152.79704285]
[147.17755127 -167.44900513]
[150.38999939 -182.10098267]
[153.07341003 -196.85900879]
[155.22431946 -211.70399475]
[157.37522888 -226.54896545]
[159.52612305 -241.39395142]
[161.67703247 -256.23895264]
[148.59461975 -263.97967529]
[139.47430420 -276.14059448]
[135.70684814 -290.86727905]
[137.86677551 -305.91397095]
[145.62471008 -318.98617554]
[157.79762268 -328.09051514]
[172.52923584 -331.83859253]
[187.57307434 -329.65887451]
[200.63507080 -321.88372803]
[209.72337341 -309.69885254]
[213.45207214 -294.96234131]
[211.25256348 -279.92135620]
[203.46026611 -266.86959839]
[191.26344299 -257.79733276]
[176.52201843 -254.08804321]
[174.37110901 -239.24305725]
[172.22021484 -224.39807129]
[170.06930542 -209.55308533]
[167.91839600 -194.70809937]
[169.81007385 -191.62138367]
[170.24194336 -187.43885803]
[168.70390320 -182.88482666]
[165.04197693 -178.88853455]
[161.82952881 -164.23657227]
[158.61708069 -149.58459473]
[164.85528564 -133.22723389]
[152.45675659 -119.67503357]
[149.59658813 -104.95024872]
[146.73640442 -90.22545624]
[143.87623596 -75.50067139]
[141.01606750 -60.77588272]
[138.15588379 -46.05109024]
[135.29571533 -31.32630348]
[144.87886047 -23.69390106]
[150.30432129 -12.62873936]
[150.47187805 -0.23362173]
[145.28717041 11.10612774]
[135.69178772 19.18169403]
[123.49295044 22.39095497]
[119.93009186 36.96167755]
[116.36723328 51.53240204]
[112.80436707 66.10312653]
[109.24150848 80.67385101]
[105.67864227 95.24457550]
[113.03186798 93.59921265]
[121.12858582 95.36476135]
[128.73445129 100.70791626]
[134.60156250 109.39859009]
[143.93380737 121.14205933]
[153.26605225 132.88554382]
[162.59829712 144.62901306]
[171.93054199 156.37248230]
[187.56634521 156.60823059]
[199.35865784 166.87835693]
[201.73948669 182.33363342]
[193.58470154 195.67654419]
[178.74473572 200.60699463]
[164.22654724 194.79695129]
[156.88520813 180.98974609]
[160.18705750 165.70472717]
[150.85481262 153.96125793]
[141.52256775 142.21778870]
[132.19032288 130.47430420]
[122.85808563 118.73082733]
[115.39256287 118.01248169]
[121.61377716 131.66152954]
[112.90386963 143.87371826]
[97.97286224 142.43670654]
[91.75194550 128.78752136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[36 105]
[37 104]
[38 103]
[39 102]
[40 101]
[41 100]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[50 89]
[51 88]
[54 86]
[55 85]
[56 84]
[57 80]
[58 79]
[59 78]
[60 77]
[61 76]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
