%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCCGGCGCUGAAGCGGGUCCCGGAGGAGUGGCCACGACCCAGCACAGGAUGCAGAGCUUCCUGACUCUGCUGAAGGAGCAUGAGGACACCUGUGCACCCCCGGCGGAGCUGGUGACCCUUGCGGGCAGACUGUGCCGGGACUUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[-4.52910328 572.06109619]
[-8.48571301 586.52984619]
[-12.44232368 600.99859619]
[-16.39893341 615.46734619]
[-11.71479797 631.18328857]
[-23.17818832 642.91033936]
[-38.99655151 638.58465576]
[-42.89731216 622.65618896]
[-30.86770248 611.51074219]
[-26.91109085 597.04199219]
[-22.95448112 582.57324219]
[-18.99787140 568.10443115]
[-30.84639549 559.01922607]
[-38.33414459 546.05468750]
[-40.29314041 531.17089844]
[-36.39398575 516.63183594]
[-27.20077324 504.66110229]
[-14.08970547 497.10180664]
[0.95685166 495.13284302]
[4.91346216 480.66409302]
[8.87007236 466.19531250]
[12.82668304 451.72653198]
[16.78329277 437.25778198]
[20.73990250 422.78900146]
[24.69651413 408.32025146]
[28.65312386 393.85147095]
[32.60973358 379.38272095]
[23.16715813 367.89465332]
[22.28946686 352.87152100]
[30.52248001 340.06253052]
[44.88519287 334.49307251]
[48.84180450 320.02432251]
[52.79841232 305.55554199]
[47.41570282 288.88009644]
[60.53590775 276.00021362]
[64.19461060 261.45327759]
[67.85331726 246.90631104]
[66.42596436 239.60734558]
[71.73936462 232.09977722]
[75.69597626 217.63101196]
[62.33516693 199.51124573]
[66.55934906 177.13069153]
[86.05004120 164.84739685]
[87.89337158 149.96109009]
[89.73669434 135.07478333]
[91.58001709 120.18846893]
[93.42333984 105.30216217]
[76.98692322 107.47636414]
[60.10417175 97.99238586]
[49.77326965 87.11707306]
[39.44236755 76.24176025]
[29.11146545 65.36644745]
[18.78056145 54.49113083]
[3.66630864 49.81460571]
[0.51039934 35.25817871]
[-9.82050323 24.38286591]
[-25.11306190 17.06344032]
[-22.31308365 0.34230256]
[-5.47030258 -1.59601486]
[1.05481052 14.05196381]
[11.38571358 24.92727852]
[25.76103210 28.82592964]
[29.65587616 44.16022873]
[39.98677826 55.03554535]
[50.31768036 65.91085815]
[60.64858246 76.78617096]
[70.97948456 87.66148376]
[78.44749451 86.96947479]
[93.38350677 85.58544922]
[100.85150909 84.89343262]
[109.00817871 72.30499268]
[117.16484070 59.71655655]
[125.32151031 47.12811661]
[133.47817993 34.53967667]
[141.63484192 21.95123863]
[149.79150391 9.36279869]
[146.70242310 -5.90466118]
[155.15376282 -18.55493355]
[169.72799683 -21.40581322]
[177.88465881 -33.99425507]
[178.89552307 -49.78313446]
[192.30969238 -56.25686264]
[200.46635437 -68.84529877]
[208.62303162 -81.43373871]
[216.77969360 -94.02217865]
[218.84037781 -102.98596191]
[225.23529053 -106.78295898]
[233.64869690 -119.20127106]
[242.06211853 -131.61958313]
[245.94049072 -148.12396240]
[262.87353516 -148.96601868]
[268.37017822 -132.92784119]
[254.48042297 -123.20617676]
[246.06701660 -110.78786469]
[237.65361023 -98.36955261]
[229.36813354 -85.86551666]
[221.21147156 -73.27707672]
[213.05479431 -60.68863678]
[204.89813232 -48.10019684]
[204.47070312 -33.21172333]
[190.47309875 -25.83758736]
[182.31643677 -13.24914837]
[185.66961670 1.21777260]
[177.57691956 14.10043526]
[162.37994385 17.51946449]
[154.22328186 30.10790253]
[146.06661987 42.69634247]
[137.90994263 55.28478241]
[129.75328064 67.87322235]
[121.59661865 80.46166229]
[113.43994904 93.05010223]
[108.30964661 107.14549255]
[106.46632385 122.03179932]
[104.62300110 136.91810608]
[102.77967834 151.80441284]
[100.93634796 166.69071960]
[107.77270508 170.73963928]
[113.23223114 176.47492981]
[116.91437531 183.45445251]
[118.55480194 191.14566040]
[118.04434967 198.96614075]
[115.43614197 206.32781982]
[110.94051361 212.68109131]
[104.90808868 217.55595398]
[97.80249786 220.59661865]
[90.16474152 221.58763123]
[86.20812988 236.05639648]
[82.40027618 250.56501770]
[78.74156952 265.11196899]
[75.08286285 279.65893555]
[81.03244019 291.14831543]
[77.64249420 303.21810913]
[67.26718140 309.51214600]
[63.31056976 323.98092651]
[59.35396194 338.44967651]
[68.88396454 350.55279541]
[69.45326996 365.76889038]
[61.05298233 378.25485229]
[47.07850266 383.33932495]
[43.12189102 397.80807495]
[39.16527939 412.27685547]
[35.20867157 426.74560547]
[31.25205994 441.21438599]
[27.29545021 455.68316650]
[23.33884048 470.15191650]
[19.38222885 484.62069702]
[15.42561913 499.08944702]
[27.37646294 508.44110107]
[34.81642151 521.62023926]
[36.63888168 536.60333252]
[32.59704208 551.10333252]
[23.33681488 562.91912842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[19 147]
[20 146]
[21 145]
[22 144]
[23 143]
[24 142]
[25 141]
[26 140]
[27 139]
[31 135]
[32 134]
[33 133]
[35 130]
[36 129]
[37 128]
[39 127]
[40 126]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[55 61]
[56 60]
[70 111]
[71 110]
[72 109]
[73 108]
[74 107]
[75 106]
[76 105]
[79 102]
[80 101]
[82 99]
[83 98]
[84 97]
[85 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
