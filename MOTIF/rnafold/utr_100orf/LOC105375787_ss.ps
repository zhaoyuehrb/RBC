%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGUGGGAAGGUGAUACAAACAGGUGGUCCGCUGGUAAUCCCCAUCGAGUGACUGGAUGAUCUGCAAAAGAGGAAAACAACCCGGCCAGAGAGUCAGGGGACGGCCACCAGAUGGCCCUGUGGACCGCCGCCCGACCCCCGAGCAAGCCGUGUGCC\
) } def
/len { sequence length } bind def

/coor [
[127.85616302 470.18038940]
[126.99501038 459.61596680]
[130.65142822 449.58081055]
[138.22099304 441.93142700]
[134.41032410 427.42355347]
[129.64401245 421.72271729]
[130.67070007 412.59133911]
[127.14740753 398.01101685]
[123.62412262 383.43066406]
[110.81858826 375.91043091]
[107.03776550 361.17407227]
[115.01250458 347.79342651]
[111.48921967 333.21310425]
[104.65183258 332.34411621]
[98.18608093 329.90441895]
[92.44856262 326.01953125]
[87.75782013 320.89480591]
[84.37664032 314.80480957]
[82.49738312 308.07836914]
[82.23101044 301.08111572]
[83.60058594 294.19534302]
[86.53957367 287.79928589]
[90.89497375 282.24627686]
[96.43529510 277.84521484]
[102.86286926 274.84347534]
[101.97425842 259.86981201]
[101.08564758 244.89616394]
[100.19703674 229.92251587]
[99.30842590 214.94885254]
[98.41981506 199.97520447]
[97.53121185 185.00154114]
[96.64260101 170.02789307]
[95.75399017 155.05422974]
[94.86537933 140.08058167]
[72.43199158 129.54356384]
[60.37002182 107.89189148]
[45.37075424 108.04007721]
[31.53322029 116.84091187]
[17.11980629 109.01879120]
[16.95779800 92.62044525]
[31.21385574 84.51508331]
[45.22256851 93.04080963]
[60.22183609 92.89262390]
[60.91755676 89.73453522]
[61.86358643 86.64218903]
[48.87320709 79.14218903]
[35.88282776 71.64218903]
[22.89244461 64.14218903]
[7.07249498 63.94279861]
[-0.08099579 50.87846375]
[-13.07137680 43.37846375]
[-29.81163788 40.69518280]
[-31.86738396 23.86633110]
[-16.26529884 17.23223305]
[-5.57137680 30.38808250]
[7.41900444 37.88808441]
[22.30979538 37.55102158]
[30.39244461 51.15180588]
[43.38282776 58.65180588]
[56.37320709 66.15180206]
[69.36358643 73.65180206]
[70.19506073 66.44152832]
[72.45902252 59.03974152]
[65.87458038 45.56216431]
[59.29013443 32.08458710]
[44.64598465 25.53260994]
[40.77772903 9.96289158]
[50.65276337 -2.68081307]
[66.69580078 -2.69933558]
[76.60000610 9.92153263]
[72.76771545 25.50014305]
[79.35215759 38.97771835]
[85.93659973 52.45529556]
[93.43514252 52.60347366]
[93.73149872 37.60640335]
[94.02785492 22.60933113]
[89.67553711 8.25463390]
[101.98283386 -0.32035843]
[113.94118500 8.73490524]
[109.02492523 22.90568924]
[108.72856903 37.90275955]
[108.43221283 52.89983368]
[115.93074799 53.04801178]
[123.04250336 39.84108353]
[130.15426636 26.63415909]
[137.13520813 13.35762024]
[143.98463440 0.01276369]
[150.83407593 -13.33209229]
[145.75686646 -28.29863739]
[152.82450867 -42.43454742]
[167.84390259 -47.35324097]
[181.90429688 -40.13653946]
[186.66392517 -25.06598854]
[179.29896545 -11.08267593]
[164.17893982 -6.48265409]
[157.32949829 6.86220217]
[150.48005676 20.20705795]
[150.22218323 27.63339615]
[143.36119080 33.74591827]
[136.24943542 46.95284271]
[129.13768005 60.15977097]
[132.05043030 65.45813751]
[134.14698792 70.87115479]
[135.44262695 76.28344727]
[135.96812439 81.58501434]
[150.35670471 77.34610748]
[164.74530029 73.10719299]
[179.13389587 68.86827850]
[193.52249146 64.62936401]
[202.43017578 51.28647614]
[218.42744446 50.07525253]
[229.24255371 61.92484665]
[226.57908630 77.74526215]
[212.48022461 85.40042877]
[197.76139832 79.01795959]
[183.37281799 83.25687408]
[168.98422241 87.49578857]
[154.59562683 91.73469543]
[140.20703125 95.97360992]
[137.59901428 114.80307770]
[126.67014313 130.35655212]
[109.83903503 139.19197083]
[110.72764587 154.16561890]
[111.61625671 169.13928223]
[112.50486755 184.11293030]
[113.39347076 199.08659363]
[114.28208160 214.06024170]
[115.17069244 229.03390503]
[116.05930328 244.00756836]
[116.94791412 258.98123169]
[117.83652496 273.95486450]
[137.53715515 287.77099609]
[140.86447144 311.35025024]
[126.06955719 329.68981934]
[129.59284973 344.27014160]
[142.79762268 352.53283691]
[146.16304016 367.36956787]
[138.20446777 379.90737915]
[141.72775269 394.48770142]
[145.25105286 409.06805420]
[148.91819763 423.61288452]
[152.72886658 438.12075806]
[170.57398987 447.24404907]
[175.95715332 466.23477173]
[165.86848450 482.84722900]
[170.53192139 497.10391235]
[175.19535828 511.36056519]
[189.77229309 517.02154541]
[197.25469971 530.75280762]
[194.10960388 546.07086182]
[181.82203674 555.74298096]
[166.19380188 555.20227051]
[154.60408020 544.70410156]
[152.52517700 529.20532227]
[160.93869019 516.02398682]
[156.27525330 501.76733398]
[151.61183167 487.51068115]
[141.45626831 485.48147583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 142]
[5 141]
[7 140]
[8 139]
[9 138]
[12 135]
[13 134]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[34 122]
[36 43]
[37 42]
[45 61]
[46 60]
[47 59]
[48 58]
[50 56]
[51 55]
[63 73]
[64 72]
[65 71]
[83 101]
[84 100]
[85 99]
[86 97]
[87 96]
[88 95]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
[145 157]
[146 156]
[147 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
