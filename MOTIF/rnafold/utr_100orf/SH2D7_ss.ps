%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGACAGCCUAAAGCAGCUCAGCCUGGGGAGAGAUCCUGAGGGGGCAGGGGACAGCCAGGCCCUGGCUGAGCUCCAGGAGCUUGCCCUGAAGUGGU\
) } def
/len { sequence length } bind def

/coor [
[180.06071472 254.12493896]
[185.94856262 242.86972046]
[177.59077454 230.41389465]
[169.23298645 217.95808411]
[160.87519836 205.50225830]
[152.51742554 193.04644775]
[137.89929199 190.42999268]
[129.24586487 177.91708374]
[132.08935547 162.60197449]
[123.73157501 150.14616394]
[115.37378693 137.69033813]
[107.01600647 125.23451996]
[98.65822601 112.77870178]
[101.96086121 127.41059875]
[99.23088074 142.16007996]
[90.91001129 154.64059448]
[78.34461212 162.83270264]
[63.56784058 165.41088867]
[48.97066879 161.95799255]
[36.91500092 153.03269958]
[29.35151863 140.07917786]
[27.50403595 125.19338226]
[31.67148590 110.78392792]
[41.17955399 99.18235016]
[54.48977280 92.26584625]
[69.44847870 91.15354919]
[83.63748932 96.02675629]
[72.16349792 86.36509705]
[60.68951416 76.70344543]
[45.14963531 73.73312378]
[40.39780807 59.61684036]
[28.92382050 49.95518494]
[17.44983292 40.29352951]
[5.97584438 30.63187218]
[-10.25530624 28.29055405]
[-16.09116936 12.96492958]
[-5.52830696 0.42068833]
[10.56711197 3.56226969]
[15.63750076 19.15788460]
[27.11148834 28.81954002]
[38.58547592 38.48119736]
[50.05946350 48.14285278]
[64.77864075 50.42210770]
[70.35116577 65.22945404]
[81.82515717 74.89111328]
[93.29914856 84.55276489]
[107.89282227 81.08512115]
[113.79432678 67.29483032]
[119.69583130 53.50453186]
[125.59733582 39.71423721]
[119.96154022 25.19268227]
[126.14295197 11.29142952]
[140.02177429 6.00805187]
[145.92326355 -7.78224373]
[141.31591797 -23.14947701]
[150.57589722 -36.25032425]
[166.59976196 -37.03493881]
[177.09535217 -24.90142822]
[174.01136780 -9.15758705]
[159.71356201 -1.88073993]
[153.81205750 11.90955544]
[159.57223511 25.59736061]
[153.78372192 39.66675186]
[139.38763428 45.61574173]
[133.48612976 59.40603638]
[127.58462524 73.19633484]
[121.68312073 86.98662567]
[118.56371307 98.49351501]
[111.11404419 104.42091370]
[119.47182465 116.87673187]
[127.82961273 129.33255005]
[136.18739319 141.78837585]
[144.54518127 154.24418640]
[159.79510498 157.41871643]
[168.09364319 170.16975403]
[164.97323608 184.68865967]
[173.33102417 197.14447021]
[181.68881226 209.60029602]
[190.04660034 222.05612183]
[198.40437317 234.51193237]
[216.38700867 234.56382751]
[230.69642639 245.19726562]
[235.84356689 262.10394287]
[229.99060059 278.61514282]
[239.10658264 290.52728271]
[248.22257996 302.43939209]
[257.33856201 314.35153198]
[273.03604126 316.18597412]
[282.77297974 328.63458252]
[280.77264404 344.31176758]
[268.22180176 353.91656494]
[252.56663513 351.75057983]
[243.09507751 339.09890747]
[245.42643738 323.46749878]
[236.31045532 311.55538940]
[227.19445801 299.64324951]
[218.07847595 287.73114014]
[205.92161560 289.83724976]
[193.97151184 286.48715210]
[184.57130432 278.27267456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[27 46]
[28 45]
[29 44]
[31 42]
[32 41]
[33 40]
[34 39]
[47 67]
[48 66]
[49 65]
[50 64]
[53 61]
[54 60]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
