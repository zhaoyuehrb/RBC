%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:39:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCUCCUUGCCAUCCACCACAAACCCUCACCGAACCAGUGGCCACCACCAUGACAAGGGACCAGAAUGGAACCUGGGAGAUGGAGAGUAAUGAAAACUUUGAGGGCUACAUGAAGGCCCUGGAUAUUGAUUUUGCCACCCGCAAGAUUG\
) } def
/len { sequence length } bind def

/coor [
[59.76184845 129.56510925]
[51.12584305 110.22355652]
[51.28521347 89.04217529]
[37.31134796 83.58955383]
[23.33748055 78.13693237]
[9.36361408 72.68431854]
[-4.61025238 67.23169708]
[-12.76111031 72.19178772]
[-22.14480019 72.79757690]
[-30.61306190 69.03872681]
[-36.28651428 61.88956451]
[-37.97147369 53.06031036]
[-51.58061218 46.75227356]
[-65.18975067 40.44423676]
[-78.79888916 34.13619614]
[-92.40802765 27.82816124]
[-107.09039307 33.03064728]
[-120.80213928 26.43953323]
[-125.67143250 12.41008091]
[-139.28057861 6.10204363]
[-130.36166382 18.16243553]
[-118.59307861 27.46299934]
[-109.80423737 39.61850357]
[-104.66033936 53.70893478]
[-103.55069733 68.66783142]
[-106.55931854 83.36301422]
[-113.45846558 96.68223572]
[-123.72598267 107.61741638]
[-136.58474731 115.34089661]
[-151.06150818 119.26812744]
[-166.06059265 119.10185242]
[-180.44674683 114.85466766]
[-193.13113403 106.84802246]
[-203.15371704 95.68791962]
[-209.75590515 82.21902466]
[-212.43801880 67.46076202]
[-210.99703979 52.53013992]
[-205.54203796 38.55720139]
[-196.48606873 26.59969711]
[-181.81761169 23.46336937]
[-196.19403076 19.18332672]
[-210.57043457 14.90328312]
[-224.94685364 10.62323952]
[-241.85275269 11.89873981]
[-247.75842285 -3.99337745]
[-234.12222290 -14.06762886]
[-220.66680908 -3.75317264]
[-206.29040527 0.52687073]
[-191.91398621 4.80691385]
[-177.53756714 9.08695698]
[-172.45796204 3.56902814]
[-183.49382019 -6.59019566]
[-197.12890625 -12.84194565]
[-195.39659119 -27.74157906]
[-180.69087219 -30.69826317]
[-173.33459473 -17.62605476]
[-162.29873657 -7.46683073]
[-157.21913147 -12.98476028]
[-162.67175293 -26.95862579]
[-168.12435913 -40.93249130]
[-182.32061768 -47.34375381]
[-187.65127563 -61.59291840]
[-181.45162964 -75.08735657]
[-186.90425110 -89.06122589]
[-192.35687256 -103.03509521]
[-203.74723816 -115.59279633]
[-194.83346558 -130.01434326]
[-178.50794983 -125.44120026]
[-178.38301086 -108.48770905]
[-172.93038940 -94.51384735]
[-167.47776794 -80.53997803]
[-153.77700806 -74.81069946]
[-148.04821777 -60.71688843]
[-154.15049744 -46.38511276]
[-148.69787598 -32.41124725]
[-143.24525452 -18.43737984]
[-132.97253418 -7.50709534]
[-119.36339569 -1.19905818]
[-105.51071930 -6.55060196]
[-91.61926270 -0.34722224]
[-86.09999084 14.21902180]
[-72.49085236 20.52705956]
[-58.88171387 26.83509636]
[-45.27257538 33.14313507]
[-31.66343689 39.45117188]
[-11.39932537 35.71979904]
[0.84236711 53.25782776]
[14.81623363 58.71044922]
[28.79010010 64.16307068]
[42.76396561 69.61568451]
[56.73783112 75.06830597]
[63.99630356 65.40320587]
[73.36455536 57.76544571]
[84.29362488 52.60259247]
[96.14307404 50.21718597]
[108.21853638 50.74900818]
[119.81240082 54.16689682]
[130.24526978 60.27056503]
[138.90579224 68.70234680]
[145.28648376 78.96813965]
[149.01341248 90.46637726]
[164.00059509 89.84650421]
[177.46923828 81.54552460]
[190.50538635 88.75025940]
[205.49256897 88.13038635]
[220.47975159 87.51050568]
[235.46693420 86.89063263]
[250.45413208 86.27075958]
[265.44131470 85.65088654]
[274.84539795 73.15700531]
[290.09185791 69.68135834]
[303.98171997 76.86503601]
[309.95666504 91.31613159]
[305.19549561 106.21126556]
[291.94628906 114.51742554]
[276.46490479 112.31269073]
[266.06118774 100.63806915]
[251.07400513 101.25794220]
[236.08682251 101.87782288]
[221.09962463 102.49769592]
[206.11244202 103.11756897]
[191.12525940 103.73744202]
[178.72860718 111.99408722]
[164.62046814 104.83368683]
[149.63328552 105.45356750]
[148.09161377 113.43132019]
[145.27645874 121.05341339]
[141.26235962 128.11799622]
[136.15560913 134.43800354]
[130.09144592 139.84606934]
[137.23065186 153.03817749]
[144.36985779 166.23028564]
[151.50907898 179.42239380]
[158.64828491 192.61450195]
[165.78749084 205.80661011]
[172.92671204 218.99870300]
[180.06591797 232.19081116]
[194.96986389 238.12815857]
[199.48223877 253.52354431]
[190.14152527 266.56695557]
[174.11314392 267.25262451]
[163.69267273 255.05451965]
[166.87380981 239.33003235]
[159.73460388 226.13792419]
[152.59539795 212.94581604]
[145.45617676 199.75370789]
[138.31697083 186.56159973]
[131.17776489 173.36949158]
[124.03855133 160.17738342]
[116.89933777 146.98529053]
[95.90032959 149.76341248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 89]
[6 88]
[7 87]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[19 78]
[20 77]
[40 50]
[41 49]
[42 48]
[43 47]
[58 76]
[59 75]
[60 74]
[63 71]
[64 70]
[65 69]
[101 125]
[102 124]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[130 150]
[131 149]
[132 148]
[133 147]
[134 146]
[135 145]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
