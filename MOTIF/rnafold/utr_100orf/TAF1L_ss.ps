%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCUUUAUUCAGCUUCCGGUAGACGCUGGUAGGGUAAGGGAGCUAAGUAGAUCACUUCCGGGCGACUGUUGUUUUAUUUCCGGUUUAUGCGACCCGGCUGCGAUUUGCUGCUGAGGGCAGCAGCUACCGUCACUGCCGCCAUCAUGUCAGACUCGGACAGCGAGGAAGAUUCAUCUGGAGGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-134.75773621 335.80621338]
[-154.52362061 329.52807617]
[-164.82057190 340.43554688]
[-175.11750793 351.34301758]
[-185.23367310 362.41836548]
[-195.16629028 373.65859985]
[-205.09892273 384.89883423]
[-215.03155518 396.13909912]
[-224.96417236 407.37933350]
[-223.66654968 418.20022583]
[-228.44876099 427.74819946]
[-237.51086426 432.96984863]
[-247.73088074 432.34564209]
[-258.02783203 443.25308228]
[-268.32476807 454.16055298]
[-278.62173462 465.06802368]
[-288.91867065 475.97549438]
[-292.76568604 491.32186890]
[-307.12878418 495.26531982]
[-317.42575073 506.17279053]
[-318.40313721 522.18603516]
[-331.61450195 531.28765869]
[-346.92517090 526.49572754]
[-352.59011841 511.48611450]
[-344.26370239 497.77297974]
[-328.33322144 495.87585449]
[-318.03625488 484.96838379]
[-314.92575073 470.40219116]
[-299.82614136 465.67855835]
[-289.52920532 454.77108765]
[-279.23223877 443.86361694]
[-268.93530273 432.95614624]
[-258.63836670 422.04867554]
[-255.58105469 402.96572876]
[-236.20440674 397.44668579]
[-226.27178955 386.20645142]
[-216.33915710 374.96621704]
[-206.40653992 363.72598267]
[-196.47390747 352.48574829]
[-195.87124634 347.73242188]
[-192.26521301 343.31228638]
[-186.02497864 341.04608154]
[-175.72804260 330.13861084]
[-165.43109131 319.23114014]
[-170.05113220 310.96377563]
[-172.57838440 301.82192993]
[-172.86167908 292.32736206]
[-170.87811279 283.02362061]
[-166.73475647 274.44488525]
[-160.66288757 267.08538818]
[-153.00505066 261.37081909]
[-144.19584656 257.63381958]
[-134.73713684 256.09454346]
[-125.16954803 256.84774780]
[-116.04151917 259.85693359]
[-107.87789917 264.95614624]
[-96.39604950 255.30383301]
[-84.91419220 245.65151978]
[-73.43234253 235.99922180]
[-61.95049286 226.34690857]
[-50.46863937 216.69459534]
[-38.98678970 207.04228210]
[-27.50493813 197.38996887]
[-16.02308655 187.73767090]
[-4.54123545 178.08535767]
[6.94061613 168.43304443]
[11.70393753 154.32063293]
[27.24622726 151.36297607]
[38.72807693 141.71066284]
[37.49282074 126.89134216]
[45.31315613 114.03418732]
[59.36904144 108.17881775]
[74.35074615 111.76418304]
[85.83259583 102.11186981]
[90.78272247 89.03563690]
[104.51509857 86.40628052]
[115.99694824 76.75396729]
[127.47879791 67.10165405]
[124.91019440 52.02354431]
[130.19873047 37.77825928]
[141.83023071 28.15669441]
[156.61708069 25.66569328]
[170.57141113 30.87550163]
[182.05326843 21.22319221]
[193.53512573 11.57088184]
[205.01696777 1.91857219]
[216.41905212 -7.82783794]
[227.74060059 -17.66768837]
[239.06213379 -27.50753975]
[250.38368225 -37.34738922]
[261.62393188 -47.28001785]
[272.78210449 -57.30474854]
[283.94027710 -67.32947540]
[289.03494263 -82.30795288]
[303.67346191 -85.05817413]
[314.83163452 -95.08290100]
[315.44119263 -112.55754089]
[328.24270630 -123.96655273]
[344.99899292 -122.62230682]
[355.99078369 -132.82919312]
[366.98257446 -143.03610229]
[377.97433472 -153.24299622]
[376.25970459 -168.55201721]
[383.80014038 -181.78059387]
[397.52185059 -187.95944214]
[412.07656860 -184.91007996]
[423.06832886 -195.11698914]
[434.06011963 -205.32388306]
[434.02709961 -224.25563049]
[447.59771729 -236.99436951]
[465.85296631 -235.80661011]
[476.50308228 -246.36950684]
[487.15322876 -256.93240356]
[497.80334473 -267.49530029]
[508.45349121 -278.05819702]
[519.10357666 -288.62109375]
[529.75372314 -299.18399048]
[533.53881836 -315.14035034]
[549.32537842 -319.58065796]
[560.87353516 -307.93713379]
[556.30358887 -292.18762207]
[540.31665039 -288.53387451]
[529.66650391 -277.97097778]
[519.01635742 -267.40808105]
[508.36624146 -256.84518433]
[497.71612549 -246.28227234]
[487.06600952 -235.71937561]
[476.41586304 -225.15647888]
[478.84445190 -213.98858643]
[475.53881836 -202.92291260]
[467.21121216 -194.74896240]
[455.85476685 -191.58547974]
[444.26702881 -194.33209229]
[433.27523804 -184.12519836]
[422.28344727 -173.91830444]
[424.24816895 -159.17794800]
[417.07150269 -145.95071411]
[403.32156372 -139.40916443]
[388.18124390 -142.25120544]
[377.18945312 -132.04431152]
[366.19766235 -121.83741760]
[355.20590210 -111.63052368]
[356.53408813 -98.80397797]
[350.13198853 -87.38660431]
[338.14425659 -81.66181946]
[324.85635376 -83.92472839]
[313.69818115 -73.90000153]
[309.40158081 -59.63856125]
[293.96499634 -56.17130661]
[282.80682373 -46.14657593]
[271.64865112 -36.12184525]
[268.76919556 -29.30125046]
[260.22354126 -26.02584839]
[248.90199280 -16.18599701]
[237.58044434 -6.34614611]
[226.25891113 3.49370503]
[223.26765442 10.26601791]
[214.66928101 13.40042305]
[203.18742371 23.05273438]
[191.70558167 32.70504379]
[180.22372437 42.35735321]
[182.95800781 56.99939346]
[177.96296692 71.13819122]
[166.48568726 80.94321442]
[151.54350281 83.70504761]
[137.13110352 78.58351135]
[125.64925385 88.23581696]
[114.16740417 97.88813019]
[109.21727753 110.96436310]
[95.48490143 113.59371948]
[84.00305176 123.24603271]
[84.96050262 138.62100220]
[76.77676392 151.46154785]
[62.76696777 156.95605469]
[48.38039017 153.19250488]
[36.89853668 162.84481812]
[31.31395721 177.64762878]
[16.59292603 179.91490173]
[5.11107492 189.56719971]
[-6.37077665 199.21951294]
[-17.85262871 208.87182617]
[-29.33447838 218.52413940]
[-40.81632996 228.17645264]
[-52.29818344 237.82875061]
[-63.78003311 247.48106384]
[-75.26188660 257.13336182]
[-86.74373627 266.78567505]
[-98.22558594 276.43798828]
[-93.21897888 296.86761475]
[-99.19934845 316.95672607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[19 27]
[20 26]
[56 188]
[57 187]
[58 186]
[59 185]
[60 184]
[61 183]
[62 182]
[63 181]
[64 180]
[65 179]
[66 178]
[68 176]
[69 175]
[73 171]
[74 170]
[76 168]
[77 167]
[78 166]
[83 161]
[84 160]
[85 159]
[86 158]
[87 156]
[88 155]
[89 154]
[90 153]
[91 151]
[92 150]
[93 149]
[95 147]
[96 146]
[99 142]
[100 141]
[101 140]
[102 139]
[106 135]
[107 134]
[108 133]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
