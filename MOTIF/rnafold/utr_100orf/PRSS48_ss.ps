%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCCCUGCUGGCUGUGCCUUCACGCUGCUCCUUCUGCUGGGGAUCUCAGUGUGUGGGCAACCUGUAUACUCCAGCCGCGUUGUAGGUGGCCAGGAUG\
) } def
/len { sequence length } bind def

/coor [
[114.25198364 338.39343262]
[112.86879730 323.09695435]
[119.33371735 309.16494751]
[131.90773010 300.34509277]
[130.51004028 285.41033936]
[129.11235046 270.47561646]
[127.71465302 255.54086304]
[125.85317230 240.65681458]
[123.52970123 225.83786011]
[121.20623016 211.01890564]
[118.88275909 196.19995117]
[115.64248657 181.55410767]
[111.49796295 167.13804626]
[107.35343933 152.72198486]
[103.20890808 138.30592346]
[99.06438446 123.88985443]
[94.91986084 109.47378540]
[88.17243195 96.07706451]
[79.05644226 84.16493988]
[69.94045258 72.25281525]
[60.82446289 60.34069061]
[51.70847321 48.42856598]
[37.17714310 42.17148209]
[35.58687592 27.36201668]
[26.47088623 15.44989204]
[17.35489464 3.53776693]
[8.23890400 -8.37435818]
[-0.87708616 -20.28648186]
[-9.99307632 -32.19860840]
[-19.10906792 -44.11073303]
[-38.00127029 -50.79423141]
[-40.09023666 -69.91095734]
[-49.92916489 -81.23329926]
[-59.76809311 -92.55564117]
[-69.60702515 -103.87798309]
[-79.44595337 -115.20033264]
[-95.28477478 -117.75203705]
[-103.03929138 -131.79650879]
[-96.76089478 -146.56001282]
[-81.26583862 -150.71726990]
[-68.44060516 -141.07917786]
[-68.12361145 -125.03926086]
[-58.28467941 -113.71691895]
[-48.44575119 -102.39456940]
[-38.60682297 -91.07222748]
[-28.76789284 -79.74988556]
[-18.33504677 -79.92870331]
[-9.39233017 -74.13369751]
[-5.11887932 -64.13027954]
[-7.19694233 -53.22672272]
[1.91904807 -41.31459808]
[11.03503895 -29.40247345]
[20.15102959 -17.49034882]
[29.26701927 -5.57822371]
[38.38301086 6.33390093]
[47.49900055 18.24602509]
[61.37829208 23.65107155]
[63.62059784 39.31257248]
[72.73658752 51.22469711]
[81.85257721 63.13682556]
[90.96856689 75.04895020]
[100.08455658 86.96107483]
[100.88791656 71.98260498]
[107.95380402 58.75107956]
[119.95475006 49.75234222]
[134.63610840 46.67699814]
[149.23966980 50.10281754]
[161.02180481 59.38618851]
[167.76902771 72.78302002]
[168.21368408 87.77642822]
[162.27224731 101.54956818]
[151.06095886 111.51485443]
[136.68608093 115.80008698]
[121.84828186 113.60018921]
[109.33592224 105.32926178]
[113.48044586 119.74533081]
[117.62497711 134.16139221]
[121.76950073 148.57745361]
[125.91402435 162.99351501]
[130.05854797 177.40957642]
[133.62243652 180.56065369]
[135.67285156 184.33660889]
[136.20629883 188.14323425]
[135.42684937 191.45402527]
[133.70170593 193.87648010]
[136.02519226 208.69543457]
[138.34866333 223.51438904]
[140.67213440 238.33334351]
[144.69012451 243.94360352]
[145.07231140 249.83967590]
[142.64939880 254.14317322]
[144.04708862 269.07791138]
[145.44477844 284.01266479]
[146.84246826 298.94738770]
[160.83462524 305.28103638]
[169.77233887 317.77154541]
[171.25140381 333.05905151]
[164.87394714 347.03131104]
[152.35546875 355.92980957]
[137.06340027 357.36093140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 94]
[5 93]
[6 92]
[7 91]
[8 88]
[9 87]
[10 86]
[11 85]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[17 75]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
