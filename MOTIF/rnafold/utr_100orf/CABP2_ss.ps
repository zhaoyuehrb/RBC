%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGGAGCAGCUGGGGGCUGGCAGGAGUCCUCAGGCAGCAGCAUCCGCCGAGGCCCACCCGGGCCACCCCCGGGGUUCCAGGCCUGGCAUGGUUCAGGGCCCAUGGGGAACUGUGCCAAGCGGCCCUGGCGCCGGGGCCCUAAGGACCCCUUGCAGUGGCUCGGCUCCCCACCAAGGGGCUCCUGCCC\
) } def
/len { sequence length } bind def

/coor [
[82.75828552 245.92726135]
[92.62503815 233.27709961]
[92.12645721 218.28538513]
[91.62788391 203.29367065]
[91.12931061 188.30195618]
[90.63073730 173.31025696]
[90.13216400 158.31854248]
[89.63359070 143.32682800]
[85.88432312 142.24324036]
[82.24514771 140.83598328]
[78.74394226 139.11598206]
[68.54135132 150.11177063]
[58.33875656 161.10754395]
[48.13616562 172.10331726]
[37.93357468 183.09909058]
[27.73098564 194.09487915]
[17.52839470 205.09065247]
[7.32580280 216.08642578]
[-2.87678838 227.08221436]
[-2.03546381 242.86408997]
[-12.66202164 254.56245422]
[-28.45191383 255.23687744]
[-40.03727722 244.48722839]
[-40.54472351 228.69108582]
[-29.67318916 217.22003174]
[-13.87256622 216.87962341]
[-3.66997528 205.88383484]
[6.53261566 194.88806152]
[16.73520660 183.89228821]
[26.93779755 172.89649963]
[37.14038849 161.90072632]
[47.34297943 150.90495300]
[57.54557037 139.90917969]
[67.74816132 128.91339111]
[59.82052994 116.17947388]
[45.45068741 120.48152924]
[34.59660721 132.77465820]
[18.57927322 129.25654602]
[13.87594414 113.54634094]
[25.32500267 101.80533600]
[41.14863586 106.11168671]
[55.51848221 101.80963135]
[58.83061600 86.39778900]
[67.15787506 73.50316620]
[79.17739105 64.63692474]
[93.15919495 60.71305847]
[107.21220398 61.95965195]
[112.80817413 48.04257202]
[118.40415192 34.12549591]
[124.00012207 20.20841599]
[129.59609985 6.29133701]
[135.19206238 -7.62574196]
[134.63795471 -14.24465084]
[137.14505005 -19.37134361]
[141.21228027 -21.90737152]
[147.26774597 -35.63076019]
[153.32319641 -49.35414886]
[159.37866211 -63.07753754]
[155.43620300 -77.55017090]
[143.25712585 -86.30632019]
[131.07806396 -95.06247711]
[118.89899445 -103.81863403]
[106.71991730 -112.57479095]
[90.71880341 -111.41556549]
[79.94226074 -123.30023956]
[82.65712738 -139.11192322]
[96.78079224 -146.72122192]
[111.47879791 -140.29095459]
[115.47607422 -124.75386047]
[127.65514374 -115.99770355]
[139.83421326 -107.24154663]
[152.01329041 -98.48538971]
[164.19235229 -89.72924042]
[178.41127014 -94.50653839]
[182.83259583 -108.84012604]
[187.25392151 -123.17372131]
[183.92803955 -138.64140320]
[195.07302856 -148.52262878]
[199.49435425 -162.85621643]
[203.91567993 -177.18980408]
[208.33700562 -191.52340698]
[212.75833130 -205.85699463]
[217.06037903 -220.22683716]
[221.24285889 -234.63194275]
[220.03247070 -241.16278076]
[222.01664734 -246.51362610]
[225.81115723 -249.44201660]
[230.47012329 -263.70013428]
[227.40179443 -279.22097778]
[238.70947266 -288.91558838]
[243.36843872 -303.17370605]
[248.02740479 -317.43182373]
[252.68635559 -331.68994141]
[249.61802673 -347.21078491]
[260.92572021 -356.90539551]
[265.58468628 -371.16351318]
[270.24365234 -385.42163086]
[263.34582520 -399.38793945]
[268.27380371 -413.78134155]
[281.63104248 -420.27127075]
[286.29000854 -434.52941895]
[290.94897461 -448.78753662]
[290.12127686 -465.72125244]
[306.16409302 -471.20434570]
[315.87399292 -457.30633545]
[305.20709229 -444.12857056]
[300.54812622 -429.87045288]
[295.88919067 -415.61233521]
[302.83715820 -402.48748779]
[298.31539917 -387.96136475]
[284.50177002 -380.76266479]
[279.84280396 -366.50454712]
[275.18383789 -352.24642944]
[278.58541870 -337.74545288]
[266.94448853 -327.03097534]
[262.28552246 -312.77285767]
[257.62655640 -298.51473999]
[252.96760559 -284.25662231]
[256.36917114 -269.75564575]
[244.72824097 -259.04116821]
[240.06929016 -244.78305054]
[235.64794922 -230.44946289]
[231.46548462 -216.04435730]
[232.62191772 -208.73028564]
[227.09191895 -201.43566895]
[222.67059326 -187.10208130]
[218.24926758 -172.76847839]
[213.82794189 -158.43489075]
[209.40661621 -144.10130310]
[213.04873657 -129.65885925]
[201.58750916 -118.75239563]
[197.16618347 -104.41880035]
[192.74485779 -90.08521271]
[201.60192871 -77.97933197]
[216.60140991 -77.85466766]
[231.60089111 -77.73000336]
[246.60037231 -77.60533905]
[261.60037231 -77.60533905]
[276.59985352 -77.73000336]
[290.45117188 -86.50912476]
[304.85229492 -78.66441345]
[304.98858643 -62.26583481]
[290.71984863 -54.18283844]
[276.72451782 -62.73052216]
[261.72503662 -62.60585785]
[255.04989624 -59.40031052]
[246.47570801 -62.60585785]
[231.47622681 -62.73052216]
[216.47674561 -62.85518646]
[201.47726440 -62.97985077]
[197.01544189 -59.60584641]
[192.19468689 -57.19750214]
[187.21025085 -55.77223206]
[182.25177002 -55.30986786]
[177.49627686 -55.75525284]
[173.10205078 -57.02207947]
[167.04658508 -43.29869080]
[160.99113464 -29.57530022]
[154.93566895 -15.85191154]
[149.10914612 -2.02976847]
[143.51316833 11.88731003]
[137.91720581 25.80438995]
[132.32122803 39.72146606]
[126.72525024 53.63854599]
[121.12928009 67.55562592]
[137.36553955 83.96231842]
[141.89683533 107.74011230]
[131.95800781 131.03807068]
[139.56570435 143.96568298]
[147.17341614 156.89328003]
[162.28068542 162.29231262]
[167.34225464 177.51599121]
[158.47531128 190.88598633]
[142.48181152 192.14599609]
[131.63061523 180.32943726]
[134.24581909 164.50097656]
[126.63810730 151.57337952]
[119.03040314 138.64578247]
[104.62530518 142.82824707]
[105.12387848 157.81996155]
[105.62245178 172.81167603]
[106.12102509 187.80339050]
[106.61959839 202.79510498]
[107.11817169 217.78680420]
[107.61674500 232.77851868]
[118.30216980 244.74519348]
[115.46656799 260.53567505]
[101.28517151 268.03683472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 185]
[3 184]
[4 183]
[5 182]
[6 181]
[7 180]
[8 179]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[35 42]
[36 41]
[47 165]
[48 164]
[49 163]
[50 162]
[51 161]
[52 160]
[55 159]
[56 158]
[57 157]
[58 156]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[74 133]
[75 132]
[76 131]
[78 129]
[79 128]
[80 127]
[81 126]
[82 125]
[83 123]
[84 122]
[87 121]
[88 120]
[90 118]
[91 117]
[92 116]
[93 115]
[95 113]
[96 112]
[97 111]
[100 108]
[101 107]
[102 106]
[134 150]
[135 149]
[136 148]
[137 147]
[138 145]
[139 144]
[168 178]
[169 177]
[170 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
