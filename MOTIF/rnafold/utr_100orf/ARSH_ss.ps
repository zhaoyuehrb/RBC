%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAAGAAACGCCAGACCCAACAUUGUCCUGCUGAUGGCAGAUGACCUUGGAGUGGGGGAUUUGUGCUGCUACGGUAAUAACUCAGUGAGCACACCUA\
) } def
/len { sequence length } bind def

/coor [
[123.19156647 151.08856201]
[117.51670074 164.97366333]
[107.31834412 175.97335815]
[93.90131378 182.68031311]
[78.98224640 184.23640442]
[64.46995544 180.44253540]
[52.22121048 171.78411865]
[43.80317688 159.36894226]
[40.29289246 144.78546143]
[42.13947678 129.89955139]
[49.10667419 116.61579895]
[60.30306625 106.63377380]
[74.29613495 101.23062897]
[89.29159546 101.09697723]
[77.52267456 91.79683685]
[65.75376129 82.49669647]
[52.53795242 85.59787750]
[40.15119934 80.54129791]
[33.09094620 69.40775299]
[33.77815628 56.43818665]
[22.30416870 46.77653122]
[10.83018017 37.11487198]
[-0.64380735 27.45321655]
[-16.17719269 28.61585426]
[-27.67581367 18.65410805]
[-28.68848228 3.83823609]
[-40.16247177 -5.82342005]
[-51.63645935 -15.48507595]
[-63.11044693 -25.14673233]
[-74.58443451 -34.80838776]
[-83.32877350 -38.02228165]
[-86.25894165 -44.95334244]
[-97.42690277 -54.96716690]
[-108.59486389 -64.98098755]
[-119.76283264 -74.99481201]
[-135.59201050 -81.06713867]
[-134.13894653 -97.95870209]
[-117.50526428 -101.23847198]
[-109.74900818 -86.16277313]
[-98.58104706 -76.14894867]
[-87.41308594 -66.13512421]
[-76.24512482 -56.12130737]
[-64.92277527 -46.28237534]
[-53.44879150 -36.62071991]
[-41.97480392 -26.95906448]
[-30.50081444 -17.29740906]
[-19.02682686 -7.63575220]
[-4.25483465 -9.16017246]
[7.51905441 0.47466937]
[9.01784897 15.97922897]
[20.49183655 25.64088440]
[31.96582413 35.30253983]
[43.43981171 44.96419907]
[60.03285217 42.77091599]
[73.39411926 53.39895630]
[75.05390930 70.72778320]
[86.82282257 80.02792358]
[98.59173584 89.32806396]
[112.19182587 95.65559387]
[126.88628387 98.66770172]
[141.58074951 101.67980194]
[146.86891174 99.89579010]
[151.78182983 100.39440155]
[155.47518921 102.61111450]
[157.47485352 105.71858215]
[171.82470703 110.08680725]
[186.17457581 114.45502472]
[200.52444458 118.82324982]
[214.87431335 123.19146729]
[229.22418213 127.55968475]
[243.64024353 131.70420837]
[258.11901855 135.62403870]
[272.59777832 139.54386902]
[284.26681519 133.78269958]
[296.32574463 137.47142029]
[302.37435913 148.07482910]
[316.72421265 152.44305420]
[331.07406616 156.81127930]
[346.91738892 152.57789612]
[358.31222534 164.37153625]
[353.53656006 180.05990601]
[337.50317383 183.50415039]
[326.70587158 171.16114807]
[312.35598755 166.79292297]
[298.00613403 162.42469788]
[281.24679565 167.36698914]
[268.67794800 154.02264404]
[254.19918823 150.10281372]
[239.72041321 146.18298340]
[232.31097412 147.49662781]
[224.85595703 141.90954590]
[210.50608826 137.54133606]
[196.15621948 133.17311096]
[181.80636597 128.80488586]
[167.45649719 124.43666840]
[153.10662842 120.06845093]
[138.56864929 116.37426758]
[123.87418365 113.36215973]
[109.17971802 110.35005188]
[118.73818207 121.91014862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 58]
[15 57]
[16 56]
[20 53]
[21 52]
[22 51]
[23 50]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[32 42]
[33 41]
[34 40]
[35 39]
[59 99]
[60 98]
[61 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[71 89]
[72 88]
[73 87]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
