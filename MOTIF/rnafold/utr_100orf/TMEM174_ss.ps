%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAAUCCUCUCCACUCUAAGAAGCAGGGUGAGCCCACAAGGAGCAAUGGAGCAGGGCAGCGGCCGCUUGGAGGACUUCCCUGUCAAUGUGUUCUCCGUCACUCCUUACACACCCAGCACCGCUGACAUCCAGGUGUCCGAUGAUG\
) } def
/len { sequence length } bind def

/coor [
[-90.09847260 250.19885254]
[-103.17913055 257.54028320]
[-118.16898346 258.09197998]
[-131.75392151 251.73199463]
[-140.93045044 239.86645508]
[-143.66975403 225.11869812]
[-139.36616516 210.74931335]
[-128.97052002 199.93479919]
[-143.78337097 202.29693604]
[-158.59620667 204.65907288]
[-173.40905762 207.02119446]
[-188.19616699 209.53936768]
[-202.95591736 212.21327209]
[-217.71566772 214.88717651]
[-232.47541809 217.56108093]
[-247.23516846 220.23498535]
[-261.90298462 223.37428284]
[-276.46420288 226.97583008]
[-291.02542114 230.57737732]
[-305.58660889 234.17892456]
[-307.02862549 245.49703979]
[-311.86654663 255.80064392]
[-319.61764526 264.10018921]
[-329.52026367 269.60415649]
[-340.60864258 271.79461670]
[-351.80715942 270.47579956]
[-362.03469849 265.79159546]
[-370.30889893 258.20996094]
[-375.84060669 248.47628784]
[-390.65344238 250.83840942]
[-405.46627808 253.20054626]
[-417.85202026 263.94882202]
[-433.26275635 258.34152222]
[-435.84521484 242.14700317]
[-422.94281006 232.02476501]
[-407.82839966 238.38771057]
[-393.01556396 236.02557373]
[-378.20272827 233.66343689]
[-372.49462891 215.73263550]
[-358.46597290 203.07002258]
[-339.88790894 199.18923950]
[-321.81005859 205.22834778]
[-309.18817139 219.61770630]
[-294.62695312 216.01615906]
[-280.06573486 212.41462708]
[-265.50451660 208.81307983]
[-263.36477661 205.93041992]
[-259.69116211 203.97097778]
[-254.94746399 203.65850830]
[-249.90907288 205.47523499]
[-235.14932251 202.80133057]
[-220.38957214 200.12742615]
[-205.62982178 197.45352173]
[-190.87008667 194.77961731]
[-184.80799866 190.46322632]
[-175.77119446 192.20835876]
[-160.95834351 189.84622192]
[-146.14550781 187.48408508]
[-131.33265686 185.12194824]
[-116.89261627 181.06176758]
[-103.01934052 175.35806274]
[-94.19016266 163.36242676]
[-78.48450470 165.27107239]
[-64.61123657 159.56736755]
[-50.73796082 153.86366272]
[-41.90878677 141.86802673]
[-26.20312881 143.77667236]
[-12.32985401 138.07296753]
[1.54341924 132.36924744]
[15.41669273 126.66555023]
[29.28996658 120.96183777]
[43.16323853 115.25813293]
[57.03651428 109.55442810]
[70.90979004 103.85071564]
[78.29004669 80.25801086]
[101.07744598 70.67581940]
[105.44117737 56.32458496]
[109.80490112 41.97335434]
[102.14381409 28.15006447]
[106.58140564 12.98156452]
[120.48491669 5.46705484]
[135.60565186 10.06476212]
[142.97274780 24.04694748]
[138.21542358 39.11822891]
[124.15613556 46.33708191]
[119.79241180 60.68831253]
[115.42868042 75.03954315]
[118.21047211 76.99028015]
[120.74813080 79.24949646]
[123.00762939 81.78688812]
[136.75756836 75.79196167]
[150.50750732 69.79703522]
[164.25744629 63.80210495]
[178.00738525 57.80717468]
[177.34764099 42.64376068]
[182.21380615 28.26722145]
[191.94778442 16.62186813]
[205.23312378 9.28264141]
[220.27308655 7.24210787]
[235.03366089 10.77623463]
[247.51858521 19.40706062]
[256.03936768 31.96733475]
[259.44366455 46.75838470]
[257.27105713 61.77984619]
[249.81538391 75.00018311]
[238.08496094 84.63145447]
[223.66621399 89.37111664]
[208.50918579 88.57816315]
[194.66372681 82.35984039]
[184.00231934 71.55711365]
[170.25238037 77.55204010]
[156.50244141 83.54697418]
[142.75250244 89.54190063]
[129.00256348 95.53682709]
[129.31573486 98.71312714]
[129.28208923 101.90464783]
[128.90202332 105.07363892]
[142.52250671 111.35712433]
[156.14300537 117.64060974]
[169.76348877 123.92409515]
[186.67875671 125.06881714]
[190.26136780 141.63990784]
[175.32965088 149.66986084]
[163.48001099 137.54458618]
[149.85951233 131.26110840]
[136.23902893 124.97761536]
[122.61853027 118.69412994]
[112.21960449 126.67864227]
[99.38134003 129.33744812]
[86.66658020 126.13978577]
[76.61349487 117.72399139]
[62.74022293 123.42769623]
[48.86694717 129.13140869]
[34.99367523 134.83511353]
[21.12039948 140.53881836]
[7.24712658 146.24252319]
[-6.62614679 151.94624329]
[-20.49942017 157.64994812]
[-30.32090569 170.05352783]
[-45.03425217 167.73692322]
[-58.90752792 173.44064331]
[-72.78079987 179.14434814]
[-82.60228729 191.54792786]
[-97.31563568 189.23132324]
[-111.18890381 194.93504333]
[-96.68130493 198.74678040]
[-85.51950073 208.76747131]
[-80.17125702 222.78161621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 59]
[9 58]
[10 57]
[11 56]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 46]
[18 45]
[19 44]
[20 43]
[29 38]
[30 37]
[31 36]
[60 145]
[61 144]
[63 142]
[64 141]
[65 140]
[67 138]
[68 137]
[69 136]
[70 135]
[71 134]
[72 133]
[73 132]
[74 131]
[76 87]
[77 86]
[78 85]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
