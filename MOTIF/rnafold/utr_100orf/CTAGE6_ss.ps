%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAUUCGGGUUCCAGACCCAAGGCUGCGUGUUCUCCACCGCUUGUUGUGGCCAGUGUUACUGCGGUGACCGCCAGAGCAGCCUCGACGCUAUGGAGGAGCCUGGUGCUACCCCUCAGCCCUACCUGGGGCUGGUCCUGGAGGAGCUACGCAGAGUUGUGGCAGCACUACCUGAGAGUAUGAGACCAGAUG\
) } def
/len { sequence length } bind def

/coor [
[146.67424011 655.44818115]
[156.38194275 643.80615234]
[169.48756409 636.18920898]
[166.81607056 621.42901611]
[156.93574524 610.28320312]
[162.09155273 595.32568359]
[159.42005920 580.56549072]
[156.74856567 565.80529785]
[154.07708740 551.04510498]
[151.40559387 536.28491211]
[148.73410034 521.52471924]
[146.06262207 506.76452637]
[130.53260803 503.64617920]
[117.35456848 494.78805542]
[108.56090546 481.52066040]
[105.52145386 465.85729980]
[108.73017883 450.18841553]
[117.72516632 436.91687012]
[131.15489197 428.08944702]
[128.24349976 413.37469482]
[125.21244812 398.68414307]
[122.06193542 384.01870728]
[118.91142273 369.35330200]
[106.30173492 361.50912476]
[102.89775085 346.68118286]
[111.21095276 333.50817871]
[108.06044769 318.84277344]
[104.90993500 304.17733765]
[101.75942230 289.51193237]
[98.60890961 274.84652710]
[95.45839691 260.18112183]
[92.30788422 245.51570129]
[88.91908264 230.90351868]
[85.29288483 216.34843445]
[81.66668701 201.79333496]
[78.04049683 187.23825073]
[74.41429901 172.68315125]
[70.78810120 158.12806702]
[67.16190338 143.57296753]
[55.01231384 134.77595520]
[40.05253983 135.87371826]
[25.09276199 136.97148132]
[10.13298512 138.06924438]
[-1.39675474 149.22471619]
[-17.28799820 147.02291870]
[-25.35034370 133.15286255]
[-19.39904976 118.25449371]
[-3.99943972 113.75653839]
[9.03522396 123.10945892]
[23.99500084 122.01170349]
[38.95477676 120.91394043]
[53.91455460 119.81617737]
[55.98342896 104.95886230]
[58.05213165 90.10287476]
[43.96138763 84.95982361]
[29.87064362 79.81678009]
[15.77989960 74.67373657]
[-1.17221844 74.92279816]
[-6.10436630 58.70212936]
[8.11704254 49.47240067]
[20.92294693 60.58298874]
[35.01369095 65.72603607]
[49.10443497 70.86907959]
[63.19517899 76.01213074]
[75.44436646 73.26024628]
[86.44081879 74.73169708]
[83.05201721 60.11950684]
[79.66321564 45.50732040]
[76.27440643 30.89513206]
[65.75540924 23.41386604]
[63.23985291 11.16239357]
[69.54319763 0.82679963]
[66.39268494 -13.83861160]
[63.24217224 -28.50402260]
[60.09165955 -43.16943359]
[56.94114685 -57.83484268]
[53.79063416 -72.50025177]
[48.92168045 -80.24719238]
[50.71024704 -87.42994690]
[47.79886246 -102.14469147]
[37.52894592 -109.96438599]
[35.41350555 -122.29124451]
[42.04992676 -132.41619873]
[39.37843704 -147.17637634]
[36.70695114 -161.93656921]
[34.03546143 -176.69676208]
[19.74017906 -182.49749756]
[10.86902237 -195.11914062]
[10.25274277 -210.53419495]
[18.08799362 -223.82374573]
[31.87457275 -230.74717712]
[47.21323776 -229.09521484]
[59.20946884 -219.39500427]
[64.03532410 -204.74186707]
[60.15087509 -189.81153870]
[48.79564667 -179.36824036]
[51.46713638 -164.60806274]
[54.13862610 -149.84786987]
[56.81011581 -135.08767700]
[68.85699463 -122.33569336]
[62.51361084 -105.05608368]
[65.42499542 -90.34133148]
[68.45604706 -75.65076447]
[71.60655975 -60.98535538]
[74.75707245 -46.31994629]
[77.90758514 -31.65453339]
[81.05809784 -16.98912239]
[84.20860291 -2.32371235]
[96.66417694 10.02939892]
[90.88659668 27.50632858]
[94.27539825 42.11851501]
[97.66419983 56.73070526]
[101.05300140 71.34288788]
[107.12195587 72.22201538]
[112.86521912 74.37140656]
[118.02016449 77.69277191]
[130.16975403 68.89575958]
[142.31935120 60.09874725]
[154.46893311 51.30173492]
[166.61853027 42.50471878]
[178.76811218 33.70770645]
[190.91770935 24.91069221]
[203.06730652 16.11367798]
[209.26422119 0.93045670]
[225.54623413 -1.02608407]
[235.16380310 12.25677776]
[228.22319031 27.11477280]
[211.86431885 28.26326942]
[199.71472168 37.06028366]
[187.56513977 45.85729599]
[175.41554260 54.65430832]
[163.26594543 63.45132446]
[151.11636353 72.24833679]
[138.96676636 81.04534912]
[126.81717682 89.84236145]
[131.64617920 107.35800171]
[124.79471588 126.51821136]
[106.44296265 139.59729004]
[81.71699524 139.94677734]
[85.34319305 154.50186157]
[88.96939087 169.05696106]
[92.59558868 183.61204529]
[96.22177887 198.16714478]
[99.84797668 212.72222900]
[103.47417450 227.27732849]
[107.79969788 232.30982971]
[108.77606964 237.92774963]
[106.97329712 242.36518860]
[110.12380981 257.03060913]
[113.27432251 271.69601440]
[116.42482758 286.36141968]
[119.57534027 301.02682495]
[122.72585297 315.69226074]
[125.87636566 330.35766602]
[138.86624146 338.95422363]
[141.85240173 353.87191772]
[133.57684326 366.20278931]
[136.72734070 380.86819458]
[139.87785339 395.53363037]
[144.74681091 403.28054810]
[142.95825195 410.46331787]
[145.86962891 425.17807007]
[159.91891479 427.56378174]
[172.28283691 434.58923340]
[181.48481750 445.39190674]
[186.43395996 458.65966797]
[186.55427551 472.79003906]
[181.85171509 486.08380127]
[172.91094971 496.94931030]
[160.82279968 504.09304810]
[163.49429321 518.85321045]
[166.16578674 533.61340332]
[168.83726501 548.37359619]
[171.50875854 563.13378906]
[174.18025208 577.89398193]
[176.85173035 592.65417480]
[186.92314148 604.85571289]
[181.57626343 618.75750732]
[184.24774170 633.51770020]
[199.19174194 636.05792236]
[212.36416626 643.55877686]
[222.17437744 655.11456299]
[227.43775940 669.32977295]
[227.51870728 684.48791504]
[222.40747070 698.75854492]
[212.72123718 710.41839600]
[199.62968445 718.05957031]
[184.71366882 720.75927734]
[169.77438354 718.19152832]
[156.61579895 710.66638184]
[146.82690430 699.09252930]
[141.58973694 684.86767578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 179]
[4 178]
[6 176]
[7 175]
[8 174]
[9 173]
[10 172]
[11 171]
[12 170]
[19 162]
[20 161]
[21 159]
[22 158]
[23 157]
[26 154]
[27 153]
[28 152]
[29 151]
[30 150]
[31 149]
[32 148]
[33 145]
[34 144]
[35 143]
[36 142]
[37 141]
[38 140]
[39 139]
[40 52]
[41 51]
[42 50]
[43 49]
[54 64]
[55 63]
[56 62]
[57 61]
[66 113]
[67 112]
[68 111]
[69 110]
[72 108]
[73 107]
[74 106]
[75 105]
[76 104]
[77 103]
[79 102]
[80 101]
[83 99]
[84 98]
[85 97]
[86 96]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
