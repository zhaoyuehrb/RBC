%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAAGAAGGGUAGGAGAGAAAAGCCAUGGCCGACAAGGUCCUGAAGGAGAAGAGAAAGCUGUUUAUCCAUUCCAUGGGUGAAGGUACAAUAAAUGGCUUACUGGAUGAAUUAUUACAGACAAGGG\
) } def
/len { sequence length } bind def

/coor [
[68.80873108 301.41961670]
[55.18305206 307.69186401]
[40.53951263 310.94250488]
[25.53973770 311.02468872]
[10.86144733 307.93475342]
[-2.83216190 301.81225586]
[-14.92238712 292.93380737]
[-24.86296844 281.70062256]
[-32.20476913 268.62017822]
[-36.61607361 254.28349304]
[-37.89756775 239.33833313]
[-35.99135590 224.45994568]
[-30.98356056 210.32057190]
[-23.10044479 197.55905151]
[-12.69818306 186.75196838]
[-0.24677141 178.38761902]
[13.69121170 172.84391785]
[28.48601913 170.37133789]
[43.46919632 171.08160400]
[57.96376801 174.94261169]
[71.31484222 181.77992249]
[82.91918945 191.28460693]
[92.25330353 203.02847290]
[90.78305054 188.10070801]
[89.31278992 173.17294312]
[87.84253693 158.24516296]
[86.37227631 143.31739807]
[84.90202332 128.38961792]
[83.43176270 113.46185303]
[73.35837555 102.34758759]
[58.64659882 99.42123413]
[43.93482208 96.49487305]
[29.22304153 93.56851959]
[15.13857651 101.25014496]
[0.40779862 94.89532471]
[-3.66909933 79.37893677]
[6.03532982 66.60382080]
[22.07667923 66.36994934]
[32.14939499 78.85674286]
[46.86117554 81.78309631]
[61.57295609 84.70944977]
[76.28473663 87.63580322]
[83.51749420 74.49475861]
[73.17438507 63.63105011]
[57.81176758 65.81501007]
[44.11524200 58.52222061]
[37.35139847 44.55690384]
[40.12107086 29.28901291]
[51.35926819 18.58936119]
[66.74467468 16.57218170]
[80.36128235 24.01312447]
[86.97322845 38.05099106]
[84.03808594 53.28794098]
[94.38119507 64.15164948]
[101.80001831 63.05117035]
[95.12171936 49.61985016]
[105.83197784 39.11792374]
[119.12953949 46.05872726]
[116.63766479 60.85021210]
[124.05649567 59.74973297]
[130.80065918 46.35136795]
[137.54483032 32.95300293]
[138.63168335 23.77457047]
[144.62245178 19.31162834]
[151.69340515 6.08280945]
[158.76435852 -7.14600945]
[165.83531189 -20.37482834]
[172.90626526 -33.60364914]
[179.97721863 -46.83246613]
[187.04817200 -60.06128693]
[194.11911011 -73.29010773]
[201.19006348 -86.51892090]
[203.32418823 -103.33801270]
[220.07676697 -105.94328308]
[227.21780396 -90.56661224]
[214.41888428 -79.44797516]
[207.34793091 -66.21915436]
[200.27697754 -52.99033356]
[193.20603943 -39.76151657]
[186.13508606 -26.53269577]
[179.06413269 -13.30387783]
[171.99317932 -0.07505850]
[164.92222595 13.15376091]
[157.85127258 26.38257980]
[150.94319153 39.69717407]
[144.19902039 53.09553909]
[137.45484924 66.49390411]
[141.43475342 81.23543549]
[140.42070007 95.09870148]
[135.34169006 106.57369232]
[127.53258514 114.63157654]
[118.53140259 118.81692505]
[109.86233521 119.26323700]
[102.83141327 116.63292694]
[98.35953522 111.99159241]
[99.82978821 126.91936493]
[101.30004883 141.84713745]
[102.77030945 156.77490234]
[104.24056244 171.70268250]
[105.71082306 186.63044739]
[107.18107605 201.55822754]
[110.62866211 205.22804260]
[112.39889526 209.56919861]
[112.47625732 213.91094971]
[122.27384949 225.26907349]
[137.79516602 226.58316040]
[147.56950378 238.24148560]
[146.22108459 253.03057861]
[156.01867676 264.38870239]
[171.46995544 262.96118164]
[184.79214478 270.91726685]
[190.86259460 285.19763184]
[187.34709167 300.31121826]
[175.59742737 310.44656372]
[160.13157654 311.70639038]
[146.89648438 303.60626221]
[140.98130798 289.26089478]
[144.66055298 274.18630981]
[134.86296082 262.82818604]
[120.03607941 261.99200439]
[109.93812561 250.61279297]
[110.91571808 235.06666565]
[101.11812592 223.70854187]
[103.18730164 238.56513977]
[102.06968689 253.52345276]
[97.81578064 267.90762329]
[90.61779022 281.06774902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 101]
[24 100]
[25 99]
[26 98]
[27 97]
[28 96]
[29 95]
[30 42]
[31 41]
[32 40]
[33 39]
[43 54]
[44 53]
[60 87]
[61 86]
[62 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[104 123]
[105 122]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
