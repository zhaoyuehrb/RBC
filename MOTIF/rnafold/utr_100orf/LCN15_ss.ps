%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGGCUGGAGGGCAGGGGAGGGGAUGAUGUCAUUCCUGCUCGGCGCAAUCCUGACCCUGCUCUGGGCGCCCACGGCUCAGGCUGAGGUUCUGCUGCAGCCUGACUUCAAUGCUGAAAAGUUCU\
) } def
/len { sequence length } bind def

/coor [
[109.31194305 135.21093750]
[119.86756897 124.55359650]
[133.91709900 119.30753326]
[119.69818115 114.53023529]
[105.47927094 109.75293732]
[91.20191193 105.15326691]
[76.86832428 100.73194122]
[62.53472900 96.31060791]
[50.71609879 101.65251923]
[38.82146835 97.59544373]
[33.10926056 86.85472107]
[18.89034843 82.07742310]
[4.67143869 77.30012512]
[-9.54747105 72.52282715]
[-23.76638222 67.74552155]
[-37.98529053 62.96822357]
[-52.20420074 58.19092560]
[-66.42311096 53.41362381]
[-80.64202118 48.63632584]
[-94.66518402 55.41781616]
[-109.01712799 50.37040329]
[-115.39582825 36.95966721]
[-129.61473083 32.18236923]
[-143.83364868 27.40506935]
[-158.05255127 22.62776947]
[-173.59834290 25.56699753]
[-183.19863892 14.17913151]
[-197.41755676 9.40183258]
[-206.66175842 9.62636662]
[-211.92880249 4.32412529]
[-226.02420044 -0.80617678]
[-240.11958313 -5.93647909]
[-254.21498108 -11.06678104]
[-265.92883301 -1.13294458]
[-281.04312134 1.59729064]
[-295.49215698 -3.61049485]
[-305.38922119 -15.35543251]
[-308.07205200 -30.47819328]
[-302.81900024 -44.91083145]
[-291.04312134 -54.77103806]
[-275.91201782 -57.40646744]
[-261.49591064 -52.10820389]
[-251.67266846 -40.30145264]
[-249.08467102 -25.16217041]
[-234.98928833 -20.03186798]
[-220.89389038 -14.90156651]
[-206.79850769 -9.77126408]
[-192.64025879 -4.81707811]
[-178.42134094 -0.03977827]
[-163.89259338 -3.32071066]
[-153.27525330 8.40885830]
[-139.05635071 13.18615818]
[-124.83743286 17.96345901]
[-110.61852264 22.74075699]
[-97.43640137 15.90211105]
[-82.94834900 20.54441833]
[-75.86472321 34.41741562]
[-61.64581299 39.19471359]
[-47.42690277 43.97201538]
[-33.20799255 48.74931335]
[-18.98908234 53.52661514]
[-4.77017164 58.30391312]
[9.44873810 63.08121490]
[23.66764832 67.85851288]
[37.88655853 72.63581085]
[54.81678009 68.19857788]
[66.95605469 81.97702026]
[81.28964996 86.39834595]
[95.62324524 90.81967163]
[103.73800659 89.99713135]
[110.25657654 95.53402710]
[124.47548676 100.31132507]
[138.69439697 105.08862305]
[149.07624817 103.16255188]
[156.77252197 108.50919342]
[171.75387573 109.25688171]
[186.73522949 110.00457001]
[201.71658325 110.75225830]
[216.70610046 110.19139099]
[231.58969116 108.32623291]
[246.47328186 106.46108246]
[261.35687256 104.59592438]
[276.24044800 102.73076630]
[291.12405396 100.86561584]
[306.00762939 99.00045776]
[320.89120483 97.13529968]
[333.62219238 87.74208832]
[347.21279907 93.83678436]
[362.09637451 91.97162628]
[376.97994995 90.10646820]
[391.94433594 82.13755798]
[403.74438477 94.31111145]
[395.31314087 109.01997375]
[378.84512329 104.99005890]
[363.96151733 106.85521698]
[349.07794189 108.72036743]
[337.41152954 117.98017883]
[322.75637817 112.01889038]
[307.87277222 113.88404846]
[292.98919678 115.74919891]
[278.10562134 117.61435699]
[263.22201538 119.47951508]
[248.33843994 121.34466553]
[233.45484924 123.20982361]
[218.57125854 125.07498169]
[229.95080566 134.84768677]
[232.59274292 149.61318970]
[225.30790710 162.72544861]
[211.37525940 168.28253174]
[197.06596375 163.78317261]
[188.82073975 151.25256348]
[190.35081482 136.33081055]
[200.96890259 125.73361206]
[185.98754883 124.98592377]
[171.00619507 124.23823547]
[156.02484131 123.49054718]
[167.18835449 133.50932312]
[173.11955261 147.28688049]
[172.72427368 162.28166199]
[166.07545471 175.72761536]
[154.39961243 185.14431763]
[139.85057068 188.79472351]
[125.11219788 186.00540161]
[112.90327454 177.29090881]
[105.47598267 164.25881958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[6 69]
[7 68]
[8 67]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[22 54]
[23 53]
[24 52]
[25 51]
[27 49]
[28 48]
[30 47]
[31 46]
[32 45]
[33 44]
[75 116]
[76 115]
[77 114]
[78 113]
[79 105]
[80 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
