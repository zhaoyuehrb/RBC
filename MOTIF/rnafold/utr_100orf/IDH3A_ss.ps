%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUGCGGAGCCAGGAGGGGAAGCGAUGGCUGGGCCCGCGUGGAUCUCUAAGGUCUCUCGGCUGCUGGGGGCAUUCCACAACCCAAAACAGGUGACCAGAGGUUUUACUGGUGGUGUUCAGACAG\
) } def
/len { sequence length } bind def

/coor [
[104.46723938 343.78283691]
[103.73122406 328.80090332]
[102.99520874 313.81900024]
[90.44989777 305.83444214]
[84.94669342 291.82803345]
[88.79114532 277.09463501]
[100.71170807 267.33724976]
[99.97569275 252.35531616]
[99.23967743 237.37339783]
[88.06540680 227.59222412]
[87.10556030 212.40890503]
[97.44071198 200.75460815]
[96.70469666 185.77267456]
[95.96868134 170.79075623]
[95.23266602 155.80882263]
[94.49665070 140.82688904]
[80.14793396 136.09732056]
[68.46922302 126.51285553]
[61.03124237 113.36253357]
[46.19359207 115.56349182]
[31.35594559 117.76445007]
[21.24761963 131.97969055]
[4.32627201 134.48934937]
[-8.94040966 124.23113251]
[-23.71957397 126.79556274]
[-38.49873734 129.35998535]
[-50.73638916 140.27658081]
[-66.22233582 134.88052368]
[-69.02596283 118.72280121]
[-56.26314163 108.42510986]
[-41.06316757 114.58082581]
[-26.28400230 112.01639557]
[-11.50483799 109.45196533]
[-5.59147930 97.93500519]
[6.06451130 91.86544800]
[19.27772713 93.67710876]
[29.15498924 102.92680359]
[43.99263763 100.72584534]
[58.83028412 98.52488708]
[62.82557297 82.24658966]
[72.97480011 68.90723419]
[87.59783173 60.71504593]
[85.76167297 45.82785034]
[83.92551422 30.94065857]
[82.08935547 16.05346680]
[80.25318909 1.16627288]
[77.87032318 -13.64324856]
[74.94396210 -28.35502815]
[72.01760864 -43.06680679]
[69.09125519 -57.77858734]
[66.16490173 -72.49036407]
[63.23854446 -87.20214081]
[50.77922058 -100.69458008]
[56.93636703 -117.07978821]
[53.64984894 -131.71531677]
[50.36332703 -146.35086060]
[47.07680893 -160.98638916]
[35.57289505 -172.67364502]
[40.20259857 -188.40570068]
[56.20328522 -191.99877930]
[67.11481476 -179.75662231]
[61.71234131 -164.27290344]
[64.99886322 -149.63737488]
[68.28537750 -135.00184631]
[71.57189941 -120.36631012]
[81.66497040 -113.57972717]
[84.47650909 -101.33354187]
[77.95032501 -90.12850189]
[80.87667847 -75.41671753]
[83.80303192 -60.70494080]
[86.72938538 -45.99316025]
[89.65574646 -31.28138161]
[92.58209991 -16.56960297]
[95.40171814 -14.28957558]
[97.20751190 -10.48340416]
[97.27275085 -5.66682673]
[95.14038086 -0.66988724]
[96.97654724 14.21730614]
[98.81270599 29.10449791]
[100.64886475 43.99169159]
[102.48502350 58.87888336]
[122.84754181 62.49639893]
[140.07418823 76.15081787]
[154.19734192 71.09747314]
[168.32051086 66.04412842]
[173.57888794 51.31716537]
[187.09941101 43.46034241]
[202.49807739 46.18341064]
[212.50411987 58.20061493]
[212.39297485 73.83780670]
[202.21714783 85.71157074]
[186.78132629 88.21549225]
[173.37385559 80.16728973]
[159.25068665 85.22063446]
[145.12753296 90.27397919]
[145.86354065 105.25591278]
[160.41401672 108.90061951]
[174.96447754 112.54531860]
[189.51495361 116.19002533]
[206.34854126 114.17347717]
[212.94628906 129.79096985]
[199.76556396 140.45422363]
[185.87025452 130.74049377]
[171.31977844 127.09578705]
[156.76931763 123.45108795]
[142.21884155 119.80638123]
[135.66499329 127.88883209]
[127.68695068 134.08758545]
[118.78406525 138.18556213]
[109.47858429 140.09086609]
[110.21459961 155.07279968]
[110.95061493 170.05473328]
[111.68663025 185.03666687]
[112.42264557 200.01860046]
[123.85034943 210.60374451]
[124.38335419 225.80802917]
[114.22161102 236.63737488]
[114.95762634 251.61930847]
[115.69364166 266.60122681]
[128.51319885 275.14321899]
[133.78324890 289.42886353]
[129.67941284 303.90719604]
[117.97714233 313.08297729]
[118.71315765 328.06491089]
[119.44917297 343.04684448]
[126.26541901 358.57022095]
[113.23562622 369.41735840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[7 119]
[8 118]
[9 117]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[19 39]
[20 38]
[21 37]
[24 33]
[25 32]
[26 31]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
[54 65]
[55 64]
[56 63]
[57 62]
[83 95]
[84 94]
[85 93]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
