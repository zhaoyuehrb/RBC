%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCUCCGGAACUCCACCUUGGGAAGCGGCUUCAUCUUGGUGGGGAUUCUGAAUGACAGUGGGUCUCCUGAACUGCUCUAUGCUACAUUUACAAUCC\
) } def
/len { sequence length } bind def

/coor [
[164.84689331 202.54438782]
[157.68609619 189.36398315]
[150.52529907 176.18359375]
[143.36450195 163.00318909]
[136.20370483 149.82278442]
[129.04290771 136.64237976]
[121.88210297 123.46198273]
[98.17802429 129.64624023]
[79.05860901 117.54817200]
[75.22187042 97.15083313]
[61.52501678 91.03558350]
[47.82817078 84.92032623]
[34.13132095 78.80506897]
[20.43447304 72.68981934]
[6.64417648 66.78831482]
[-7.23623037 61.10198975]
[-21.11663818 55.41566086]
[-34.99704361 49.72933578]
[-48.87745285 44.04301071]
[-62.75785828 38.35668564]
[-76.63826752 32.67035675]
[-91.07041931 38.53130722]
[-105.06611633 32.56683350]
[-110.56469727 18.77186203]
[-124.44510651 13.08553696]
[-138.41226196 7.61576366]
[-152.46279907 2.36386704]
[-166.51333618 -2.88802981]
[-180.56387329 -8.13992691]
[-197.51741028 -8.02200413]
[-202.32392883 -24.28034782]
[-188.03155518 -33.39978409]
[-175.31198120 -22.19046402]
[-161.26144409 -16.93856621]
[-147.21090698 -11.68666935]
[-133.16036987 -6.43477297]
[-125.66075897 -7.05229092]
[-118.75878143 -0.79487026]
[-104.87837219 4.89145565]
[-91.28180695 -1.08088779]
[-77.12409210 4.48812389]
[-70.95194244 18.78995132]
[-57.07153320 24.47627640]
[-43.19112396 30.16260338]
[-29.31071854 35.84893036]
[-15.43031120 41.53525543]
[-1.54990435 47.22158051]
[12.33050251 52.90790558]
[19.84568977 52.52392578]
[26.54972649 58.99296951]
[40.24657440 65.10822296]
[53.94342422 71.22348022]
[67.64027405 77.33872986]
[81.33712006 83.45398712]
[90.17449188 75.14490509]
[102.63452911 71.60999298]
[116.13258362 74.35502625]
[127.51284027 83.49743652]
[138.03665161 72.80867767]
[148.56045532 62.11991501]
[149.87402344 46.13072968]
[163.27365112 37.30862045]
[178.48027039 42.42115402]
[183.82868958 57.54643631]
[175.21603394 71.08164215]
[159.24920654 72.64371490]
[148.72540283 83.33247375]
[138.20159912 94.02124023]
[149.25312805 83.87905884]
[163.96202087 80.93822479]
[178.06362915 86.05139923]
[187.46939087 97.73608398]
[189.45220947 112.60445404]
[183.43721008 126.34562683]
[171.16836548 134.97552490]
[156.20283508 135.99203491]
[142.87971497 129.10041809]
[135.06250000 116.30118561]
[142.22331238 129.48158264]
[149.38410950 142.66198730]
[156.54490662 155.84239197]
[163.70570374 169.02278137]
[170.86650085 182.20318604]
[178.02729797 195.38359070]
[192.95509338 192.84596252]
[207.89762878 195.29531860]
[221.23403931 202.46600342]
[231.51770020 213.58018494]
[237.63311768 227.43228149]
[238.91693115 242.51971436]
[235.22988892 257.20590210]
[226.97192383 269.89782715]
[215.03880310 279.21875000]
[200.72494507 284.15759277]
[185.58300781 284.17861938]
[171.25547791 279.27960205]
[159.29649353 269.99188232]
[151.00328064 257.32299805]
[147.27542114 242.64709473]
[148.51728821 227.55615234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[24 39]
[25 38]
[26 36]
[27 35]
[28 34]
[29 33]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
