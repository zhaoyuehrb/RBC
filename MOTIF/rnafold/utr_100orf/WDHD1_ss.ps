%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGUGGUGAGCGAGCCGAAGCGCGGGAAGCAGCUCUUGUGGAUCCUCAGUGGCGGAGGCUCGGUCACCCGGAUAGGUAAAGGAAAACAUGCCUGCCACACGGAAGCCAAUGAGAUAUGGGCAUACAGAGGGACACACGGAGGUCUGUUUUGAUGAUUCUGGGAGUUUUAUUGUGACUUGUGGAAGUG\
) } def
/len { sequence length } bind def

/coor [
[61.34125900 134.53887939]
[53.81500244 123.54524994]
[49.33925629 110.99645233]
[48.20964813 97.72134399]
[33.47719193 94.90093231]
[18.74473572 92.08052063]
[4.01227903 89.26010132]
[-10.97504139 89.87673950]
[-25.42601204 93.89785767]
[-39.87698364 97.91898346]
[-54.32795715 101.94010162]
[-68.77893066 105.96122742]
[-79.99980927 117.11479950]
[-94.33541870 113.07256317]
[-108.78638458 117.09368896]
[-123.23735809 121.11480713]
[-137.68832397 125.13593292]
[-152.13929749 129.15705872]
[-166.59027100 133.17817688]
[-172.09558105 147.56559753]
[-184.86773682 155.85566711]
[-199.89460754 155.04501343]
[-211.42469788 145.65377808]
[-225.87565613 149.67489624]
[-240.29307556 153.81472778]
[-254.67594910 158.07299805]
[-268.98684692 162.56723022]
[-283.22189331 167.29624939]
[-297.45693970 172.02526855]
[-311.69198608 176.75427246]
[-318.82266235 190.60314941]
[-333.32638550 195.19625854]
[-346.48522949 188.31291199]
[-360.72024536 193.04191589]
[-366.31408691 207.64476013]
[-380.01077271 215.19029236]
[-395.34313965 212.11575317]
[-405.07171631 199.87284851]
[-404.60296631 184.24229431]
[-394.15820312 172.60435486]
[-378.66915894 170.45413208]
[-365.44927979 178.80686951]
[-351.21423340 174.07786560]
[-344.79003906 160.68885803]
[-330.42105103 155.69018555]
[-316.42098999 162.51922607]
[-302.18594360 157.79022217]
[-287.95089722 153.06120300]
[-273.71585083 148.33219910]
[-270.80682373 144.52499390]
[-265.46832275 142.51467896]
[-258.93420410 143.69010925]
[-244.55133057 139.43185425]
[-239.02076721 134.51000977]
[-229.89678955 135.22393799]
[-215.44581604 131.20280457]
[-210.42373657 117.20578003]
[-197.97537231 108.74987793]
[-182.75689697 109.25128937]
[-170.61138916 118.72720337]
[-156.16043091 114.70607758]
[-141.70945740 110.68495941]
[-127.25848389 106.66383362]
[-112.80751038 102.64271545]
[-98.35653687 98.62158966]
[-88.16928101 87.75563049]
[-72.80004883 91.51025391]
[-58.34907913 87.48912811]
[-43.89810562 83.46800995]
[-29.44713402 79.44688416]
[-14.99616337 75.42576599]
[-17.15858078 72.59860229]
[-18.68099785 69.20681000]
[-23.29278183 54.93335342]
[-28.91836357 47.71466446]
[-27.86094666 40.38707352]
[-32.23734665 26.03969765]
[-36.61374283 11.69232464]
[-40.99014282 -2.65504885]
[-45.36654282 -17.00242233]
[-49.74294281 -31.34979630]
[-64.72386932 -34.73614883]
[-75.99365997 -45.17106247]
[-80.52079773 -59.84759521]
[-77.08750153 -74.81783295]
[-66.61730957 -86.05486298]
[-51.92666245 -90.53597260]
[-36.96725845 -87.05577087]
[-25.76310539 -76.55040741]
[-21.32806587 -61.84578323]
[-24.85514259 -46.89736176]
[-35.39556885 -35.72619629]
[-31.01916885 -21.37882233]
[-26.64277077 -7.03144789]
[-22.26637077 7.31592560]
[-17.88997269 21.66329956]
[-13.51357269 36.01067352]
[-9.01932907 50.32157135]
[-4.40754509 64.59502411]
[6.83269215 74.52764893]
[21.56514931 77.34806061]
[36.29760361 80.16847229]
[51.03005981 82.98889160]
[59.93480682 67.10299683]
[73.78399658 55.27692032]
[90.86850739 48.97011948]
[109.07993317 48.96091843]
[126.17079926 55.25045395]
[135.53692627 43.53397751]
[144.90304565 31.81749916]
[147.47637939 16.20697594]
[161.46697998 11.09695530]
[170.83309937 -0.61952144]
[180.19921875 -12.33599758]
[185.36651611 -28.48330116]
[202.31323242 -27.98796654]
[206.52856445 -11.56641769]
[191.91569519 -2.96987915]
[182.54957581 8.74659729]
[173.18345642 20.46307373]
[171.28004456 35.23555756]
[156.61952209 41.18362045]
[147.25340271 52.90009689]
[137.88728333 64.61656952]
[142.61253357 70.47704315]
[146.43916321 76.96009064]
[149.28646851 83.92901611]
[151.09442139 91.23684692]
[166.08985901 90.86680603]
[176.95083618 79.70091248]
[192.16360474 79.53925323]
[202.74163818 89.96234131]
[217.73707581 89.59229279]
[232.73251343 89.22225189]
[247.72793579 88.85220337]
[262.72338867 88.48216248]
[277.71881104 88.11211395]
[291.32391357 80.03672028]
[304.23818970 87.45768738]
[319.23361206 87.08764648]
[332.93945312 78.08308411]
[347.46701050 85.69113922]
[347.87155151 102.08529663]
[333.73696899 110.40065002]
[319.60366821 102.08307648]
[304.60821533 102.45312500]
[292.07571411 110.50204468]
[278.08886719 103.10755157]
[263.09341431 103.47759247]
[248.09799194 103.84764099]
[233.10255432 104.21768188]
[218.10711670 104.58773041]
[203.11167908 104.95777893]
[193.06063843 115.88993073]
[177.85839844 116.47882843]
[166.45989990 105.86223602]
[151.46446228 106.23228455]
[146.05392456 123.80059052]
[134.85255432 138.37620544]
[143.22451782 150.82247925]
[151.59649658 163.26876831]
[159.96847534 175.71505737]
[168.34045410 188.16133118]
[182.46281433 195.29362488]
[183.14627075 210.17254639]
[191.51824951 222.61883545]
[199.89022827 235.06510925]
[208.26220703 247.51139832]
[216.63418579 259.95767212]
[232.20210266 261.43212891]
[243.14318848 272.60470581]
[244.29139709 288.20007324]
[235.10458374 300.85458374]
[219.92048645 304.59313965]
[205.90855408 297.65054321]
[199.68479919 283.30484009]
[204.18789673 268.32965088]
[195.81591797 255.88337708]
[187.44393921 243.43708801]
[179.07196045 230.99079895]
[170.69998169 218.54452515]
[157.17645264 212.30247498]
[155.89418030 196.53330994]
[147.52220154 184.08703613]
[139.15022278 171.64074707]
[130.77824402 159.19445801]
[122.40626526 146.74818420]
[109.75154114 150.91502380]
[96.45273590 151.71894836]
[83.38822937 149.10684204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 103]
[5 102]
[6 101]
[7 100]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[23 56]
[24 55]
[25 53]
[26 52]
[27 49]
[28 48]
[29 47]
[30 46]
[33 43]
[34 42]
[73 99]
[74 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[108 124]
[109 123]
[110 122]
[112 120]
[113 119]
[114 118]
[128 157]
[129 156]
[132 153]
[133 152]
[134 151]
[135 150]
[136 149]
[137 148]
[139 146]
[140 145]
[159 187]
[160 186]
[161 185]
[162 184]
[163 183]
[165 181]
[166 180]
[167 179]
[168 178]
[169 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
