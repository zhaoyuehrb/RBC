%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCUGUUCUGACAGUUUGAGAUUACUUAUUGUCUUUUCUGGGAAGACAAAAACAUGUCGGAGACUGCUCCACUUGCUCCUACCAUUCCUGCACCCGCAGAAAAAACACCUGUGAAGAAAAAGGCGAAGAAGGCAGGCGCAACUGCUGGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[-181.65476990 229.31674194]
[-189.05780029 216.27084351]
[-187.53338623 201.34851074]
[-177.64491272 190.06871033]
[-192.56893921 191.57653809]
[-205.52143860 200.66186523]
[-218.96200562 194.24313354]
[-233.88603210 195.75096130]
[-248.79411316 197.40898132]
[-263.68475342 199.21704102]
[-278.57537842 201.02508545]
[-293.46600342 202.83312988]
[-308.35665894 204.64118958]
[-323.24728394 206.44923401]
[-338.13790894 208.25729370]
[-353.00958252 210.21517944]
[-367.86080933 212.32272339]
[-382.71200562 214.43025208]
[-397.56320190 216.53779602]
[-384.39028931 223.71234131]
[-375.95733643 236.11738586]
[-374.13177490 251.00588989]
[-379.31787109 265.08084106]
[-390.36718750 275.22540283]
[-404.83291626 279.19314575]
[-419.51165771 276.10537720]
[-431.15289307 266.64590454]
[-437.17871094 252.90946960]
[-436.25473022 237.93795776]
[-428.58554077 225.04673767]
[-415.87091064 217.09098816]
[-430.82226562 215.88398743]
[-445.77362061 214.67698669]
[-460.72497559 213.47000122]
[-475.67633057 212.26300049]
[-490.62768555 211.05599976]
[-505.57904053 209.84899902]
[-520.53039551 208.64199829]
[-535.48175049 207.43499756]
[-551.75610352 212.18721008]
[-560.82775879 197.86447144]
[-549.57598877 185.18238831]
[-534.27478027 192.48364258]
[-519.32342529 193.69064331]
[-504.37207031 194.89764404]
[-489.42068481 196.10464478]
[-474.46932983 197.31163025]
[-459.51797485 198.51863098]
[-444.56661987 199.72563171]
[-429.61526489 200.93263245]
[-414.66390991 202.13963318]
[-399.67074585 201.68658447]
[-384.81954956 199.57905579]
[-369.96832275 197.47151184]
[-355.11712646 195.36396790]
[-348.90084839 191.28704834]
[-339.94595337 193.36665344]
[-325.05532837 191.55860901]
[-310.16470337 189.75054932]
[-295.27407837 187.94250488]
[-280.38342285 186.13446045]
[-265.49279785 184.32640076]
[-250.60217285 182.51835632]
[-244.30503845 178.56742859]
[-235.39385986 180.82693481]
[-220.46984863 179.31910706]
[-208.58480835 170.34162903]
[-194.07676697 176.65251160]
[-179.15274048 175.14468384]
[-164.39843750 172.44085693]
[-149.90956116 168.55857849]
[-135.42066956 164.67628479]
[-120.93177795 160.79400635]
[-107.76084137 144.94421387]
[-87.12544250 150.58224487]
[-72.89739990 145.83222961]
[-58.66934967 141.08221436]
[-44.44130325 136.33218384]
[-34.81917572 124.96276093]
[-19.27905655 127.93180084]
[-5.05100918 123.18177795]
[9.17703724 118.43175507]
[18.79916382 107.06232452]
[34.33928680 110.03136444]
[48.56733322 105.28134155]
[53.94691086 100.15067291]
[63.12995911 100.58206177]
[77.45077515 96.11951447]
[91.77158356 91.65696716]
[104.28543091 83.38631439]
[114.00415802 71.96063232]
[123.72289276 60.53494644]
[133.44161987 49.10926056]
[135.86381531 32.88998032]
[151.21833801 27.13058662]
[163.70977783 37.75584793]
[160.48800659 53.83540726]
[144.86730957 58.82799149]
[135.14857483 70.25367737]
[125.42984009 81.67935944]
[115.71111298 93.10504150]
[118.78920746 99.94429016]
[132.46771240 93.78810120]
[146.14620972 87.63191223]
[159.82479858 81.47594452]
[165.98054504 95.15464783]
[152.30239868 101.31040955]
[138.62390137 107.46659851]
[124.94539642 113.62279510]
[128.02349854 120.46204376]
[143.02046204 120.76409912]
[158.01741028 121.06615448]
[165.89437866 107.88096619]
[179.31642151 100.41476440]
[194.67309570 100.67591858]
[207.83352661 108.59416962]
[215.25761414 122.03955078]
[214.94833374 137.39532471]
[206.98887634 150.53086853]
[193.52027893 157.91278076]
[178.16554260 157.55537415]
[165.05502319 149.55477905]
[157.71536255 136.06311035]
[142.71839905 135.76104736]
[127.72144318 135.45899963]
[115.20368195 134.19248962]
[105.14261627 129.38488770]
[98.40240479 122.18524933]
[95.43171692 113.92363739]
[96.23413086 105.97778320]
[81.91331482 110.44033051]
[67.59250641 114.90287781]
[53.31735229 119.50939178]
[39.08930588 124.25941467]
[28.44949341 135.96859741]
[13.92705727 132.65980530]
[-0.30098918 137.40982056]
[-14.52903557 142.15985107]
[-25.16884613 153.86903381]
[-39.69128418 150.56024170]
[-53.91933060 155.31025696]
[-68.14737701 160.06027222]
[-82.37541962 164.81030273]
[-85.46265411 173.82757568]
[-92.27680206 180.29251099]
[-101.17816162 182.82577515]
[-110.10469055 180.97354126]
[-117.04949951 175.28289795]
[-131.53837585 179.16517639]
[-146.02726746 183.04747009]
[-160.51615906 186.92974854]
[-147.27078247 193.96965027]
[-140.55360413 207.38156128]
[-142.84907532 222.20487976]
[-153.30819702 232.95695496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 69]
[5 68]
[7 66]
[8 65]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 55]
[17 54]
[18 53]
[19 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[70 151]
[71 150]
[72 149]
[73 148]
[75 143]
[76 142]
[77 141]
[78 140]
[80 138]
[81 137]
[82 136]
[84 134]
[85 133]
[87 132]
[88 131]
[89 130]
[90 101]
[91 100]
[92 99]
[93 98]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
