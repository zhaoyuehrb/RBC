%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGAGCGCGGACAGCAGCCUCCUCCCGCGAAACGGCUUUGCUGCCGGCCGGGCGGCGGCGGCGGCGGCGGGGGCAGCAGCGGCGGCGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[104.05586243 118.72715759]
[96.07780457 121.07536316]
[86.97927856 119.81848907]
[74.39498901 127.98155212]
[67.02796936 141.98289490]
[52.13971329 142.41789246]
[39.55542374 150.58096313]
[26.97113037 158.74401855]
[14.38683891 166.90708923]
[8.76576042 174.33650208]
[1.28179955 175.12123108]
[-11.55027580 182.88897705]
[-12.71767712 198.36207581]
[-22.78263283 210.17208862]
[-37.87495804 213.77781677]
[-52.19135284 207.79278564]
[-60.22686386 194.51837158]
[-58.89167786 179.05885315]
[-48.69919586 167.35871887]
[-33.56864166 163.91693115]
[-19.31801987 170.05690002]
[-6.48594475 162.28916931]
[6.22377586 154.32279968]
[18.80806732 146.15972900]
[31.39236069 137.99667358]
[43.97665024 129.83360291]
[50.44356155 116.41614532]
[66.23192596 115.39726257]
[78.81621552 107.23419952]
[65.34172058 113.82494354]
[50.65226746 110.78849792]
[40.89516068 99.39556122]
[40.15358734 84.41390991]
[48.73788834 72.11309814]
[63.05566788 67.64083862]
[77.11517334 72.86868286]
[85.03300476 85.61009979]
[78.70548248 72.01001740]
[72.37795258 58.40992355]
[66.05043030 44.80983734]
[51.11987305 39.62774658]
[44.30194473 25.36971664]
[49.64160156 10.49478340]
[63.97091675 3.82798076]
[78.78856659 9.32460403]
[85.30349731 23.72360420]
[79.65052032 38.48231125]
[85.97804260 52.08239746]
[92.30557251 65.68248749]
[98.63309479 79.28257751]
[111.46517181 87.05032349]
[126.44884491 86.35071564]
[141.43252563 85.65110779]
[156.41619873 84.95150757]
[171.57089233 74.63732147]
[186.86689758 83.08323669]
[201.82157898 81.91797638]
[214.97897339 73.13200378]
[228.26885986 79.85722351]
[243.22352600 78.69196320]
[256.38092041 69.90599823]
[269.67080688 76.63121033]
[284.62548828 75.46595001]
[297.78286743 66.67998505]
[311.07275391 73.40519714]
[326.02743530 72.23994446]
[339.18481445 63.45397186]
[352.47470093 70.17918396]
[367.42938232 69.01393127]
[380.58679199 60.22796249]
[393.87664795 66.95317841]
[408.83132935 65.78791809]
[422.04000854 56.06874084]
[436.95080566 62.89517212]
[438.22476196 79.24475861]
[424.55133057 88.29845428]
[409.99658203 80.74259186]
[395.04190063 81.90784454]
[382.95416260 90.61046600]
[368.59463501 83.96859741]
[353.63995361 85.13385773]
[341.55221558 93.83647919]
[327.19268799 87.19461060]
[312.23800659 88.35987091]
[300.15026855 97.06249237]
[285.79074097 90.42062378]
[270.83605957 91.58588409]
[258.74832153 100.28850555]
[244.38877869 93.64663696]
[229.43411255 94.81188965]
[217.34635925 103.51451874]
[202.98683167 96.87265015]
[188.03216553 98.03790283]
[179.83583069 107.08435059]
[167.26478577 108.08103943]
[157.11579895 99.93518066]
[142.13212585 100.63478851]
[127.14845276 101.33438873]
[112.16477966 102.03399658]
[112.35504913 107.79689789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[6 26]
[7 25]
[8 24]
[9 23]
[11 22]
[12 21]
[37 50]
[38 49]
[39 48]
[40 47]
[51 99]
[52 98]
[53 97]
[54 96]
[56 93]
[57 92]
[59 90]
[60 89]
[62 87]
[63 86]
[65 84]
[66 83]
[68 81]
[69 80]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
