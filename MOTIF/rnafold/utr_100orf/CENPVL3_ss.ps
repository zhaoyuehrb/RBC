%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGGUAGCGGGCUGGGCACGCGCUCCGGAGGCUGCAGGCGCCAUGGGCAGAGUGAGGAACCGCGCCACUGCUCAGCGGCGGAGGCGAAAGCGGCCCG\
) } def
/len { sequence length } bind def

/coor [
[36.75605392 385.26986694]
[33.90205765 400.30694580]
[24.37781906 412.28805542]
[10.37193489 418.46008301]
[-4.89714384 417.40469360]
[-17.92069435 409.36444092]
[-25.70599937 396.18692017]
[-26.46405411 380.90017700]
[-20.02066231 367.01705933]
[-7.85646820 357.72775269]
[7.23328495 355.16690063]
[11.82414341 340.88671875]
[16.41500282 326.60650635]
[21.00586128 312.32632446]
[25.59671974 298.04611206]
[30.18757820 283.76593018]
[34.77843857 269.48574829]
[24.67646980 258.53970337]
[21.38793182 243.90953064]
[25.89371109 229.50244141]
[37.07928848 219.21751404]
[52.00842285 215.89062500]
[56.59928131 201.61042786]
[61.19013977 187.33023071]
[60.22351074 179.86758423]
[66.15220642 172.68127441]
[71.18495941 158.55075073]
[76.21771240 144.42024231]
[81.25045776 130.28971863]
[86.28321075 116.15921021]
[79.48744202 105.33903503]
[80.14565277 92.57872009]
[88.01866913 82.51519775]
[100.24554443 78.80541992]
[105.71531677 64.83826447]
[111.18508911 50.87110138]
[116.21784210 36.74058533]
[120.80870056 22.46039009]
[125.39955902 8.18019295]
[129.54408264 -6.23587084]
[133.23826599 -20.77385521]
[136.93244934 -35.31184006]
[140.62663269 -49.84982681]
[144.32081604 -64.38780975]
[142.78538513 -69.75342560]
[143.51260376 -74.63774109]
[145.89915466 -78.22368622]
[149.09651184 -80.07624054]
[154.12925720 -94.20675659]
[143.07257080 -104.67907715]
[137.23725891 -118.74567413]
[137.63432312 -133.96940613]
[144.19496155 -147.71269226]
[155.78253174 -157.59440613]
[170.38938904 -161.90249634]
[185.48481750 -159.89054871]
[198.45344543 -151.90715027]
[207.04837036 -139.33546448]
[209.78047180 -124.35363770]
[206.17640686 -109.55732727]
[196.86059570 -97.51010895]
[183.44706726 -90.29922485]
[168.25976562 -89.17400360]
[163.22702026 -75.04349518]
[158.85879517 -60.69362640]
[155.16461182 -46.15564346]
[151.47042847 -31.61765671]
[147.77624512 -17.07967186]
[144.08206177 -2.54168749]
[145.80914307 2.08518624]
[144.51826477 7.85089159]
[139.67974854 12.77105141]
[135.08889771 27.05124855]
[130.49803162 41.33144379]
[131.93411255 46.05673981]
[130.28727722 51.73103714]
[125.15225220 56.34087372]
[119.68247986 70.30803680]
[114.21269989 84.27519226]
[121.17891693 99.14920044]
[115.42826843 114.53406525]
[100.41372681 121.19196320]
[95.38097382 135.32247925]
[90.34822083 149.45298767]
[85.31547546 163.58351135]
[80.28272247 177.71401978]
[75.47033691 191.92109680]
[70.87947845 206.20129395]
[66.28862000 220.48149109]
[76.48217773 231.88493347]
[79.57878113 246.76135254]
[74.84483337 261.09509277]
[63.64678574 271.06802368]
[49.05863571 274.07659912]
[44.46777725 288.35678101]
[39.87691879 302.63699341]
[35.28605652 316.91717529]
[30.69519997 331.19738770]
[26.10433960 345.47756958]
[21.51348114 359.75778198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[22 89]
[23 88]
[24 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[34 79]
[35 78]
[36 77]
[37 74]
[38 73]
[39 72]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[48 64]
[49 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
