%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUCCUGCAGAGGGGCGCGCAAAUGAGUUCCUAUUUUGUGAAUCCCACUUUCCCCGGGAGCCUUCCCAGCGGCCAGGACUCCUUCUUGGGCCAGCUGCCCCUCUACCAGGCUGGCUAUGACG\
) } def
/len { sequence length } bind def

/coor [
[124.67799377 363.40106201]
[132.01531982 350.01724243]
[144.43803406 341.14938354]
[141.83329773 326.37725830]
[139.22857666 311.60516357]
[134.92150879 305.49740601]
[136.74786377 296.43261719]
[134.51223755 281.60015869]
[132.27659607 266.76770020]
[130.04096985 251.93524170]
[118.36864471 238.89381409]
[125.09162903 221.80554199]
[122.48690796 207.03343201]
[119.88217926 192.26132202]
[117.27745819 177.48919678]
[114.67273712 162.71708679]
[112.06801605 147.94496155]
[109.46329498 133.17285156]
[106.85856628 118.40073395]
[91.14410400 120.48887634]
[76.95060730 109.69241333]
[61.95527267 109.31845093]
[46.95993423 108.94448853]
[31.96459770 108.57053375]
[16.96925926 108.19657135]
[1.97392130 107.82260895]
[-9.42735195 118.43621826]
[-24.62942886 117.84336090]
[-34.67762375 106.90857697]
[-49.67296219 106.53461456]
[-65.65790558 112.18419647]
[-75.51177216 98.38790894]
[-64.98246765 85.09993744]
[-49.29899979 91.53928375]
[-34.30366135 91.91323853]
[-23.72290611 81.49291229]
[-8.51017380 81.65854645]
[2.34788179 92.82727051]
[17.34321976 93.20123291]
[32.33855820 93.57519531]
[47.33389664 93.94915771]
[62.32923126 94.32311249]
[77.32456970 94.69707489]
[64.34420776 87.17974854]
[51.36384964 79.66241455]
[36.41527176 78.42143250]
[23.28938675 71.16118622]
[14.29364300 59.15799332]
[11.00943851 44.52194214]
[14.01411724 29.82596016]
[22.77947426 17.65351105]
[35.76461029 10.14443779]
[50.68682480 8.61878967]
[64.92287445 13.34476662]
[75.97015381 23.49156952]
[81.88661194 37.27545547]
[81.63264465 52.27130890]
[87.82019043 65.93565369]
[94.00773621 79.59999084]
[95.12869263 64.64193726]
[96.24964142 49.68387985]
[97.37059021 34.72582245]
[89.77164459 20.19351387]
[98.78479004 6.49332380]
[115.13808441 7.71883345]
[122.00865173 22.60934448]
[112.32865143 35.84677505]
[111.20769501 50.80482864]
[110.08674622 65.76288605]
[108.96579742 80.72094727]
[121.46375275 89.01558685]
[134.81182861 82.17242432]
[148.15991211 75.32926941]
[161.42163086 68.32023621]
[174.59495544 61.14642715]
[187.76828003 53.97261810]
[200.94160461 46.79880905]
[214.02447510 39.46133423]
[227.01486206 31.96133232]
[240.00523376 24.46133232]
[252.99562073 16.96133232]
[258.52001953 1.89944720]
[273.78524780 -3.03542233]
[287.08108521 5.94233418]
[288.20812988 21.94575119]
[276.30178833 32.69837570]
[260.49560547 29.95171356]
[247.50523376 37.45171356]
[234.51486206 44.95171356]
[221.52447510 52.45171356]
[217.25816345 58.58801651]
[208.11541748 59.97213364]
[194.94209290 67.14594269]
[181.76876831 74.31974792]
[168.59544373 81.49356079]
[164.17749023 87.52159119]
[155.00306702 88.67734528]
[141.65498352 95.52050018]
[128.30691528 102.36366272]
[121.63068390 115.79601288]
[124.23540497 130.56813049]
[126.84013367 145.34024048]
[129.44485474 160.11236572]
[132.04957581 174.88447571]
[134.65429688 189.65660095]
[137.25901794 204.42871094]
[139.86373901 219.20082092]
[150.00914001 227.28085327]
[151.82533264 239.71643066]
[144.87342834 249.69960022]
[147.10906982 264.53207397]
[149.34469604 279.36453247]
[151.58033752 294.19699097]
[154.00070190 309.00042725]
[156.60542297 323.77255249]
[159.21014404 338.54464722]
[173.91665649 342.62890625]
[185.38902283 352.69607544]
[191.34938049 366.74728394]
[190.61430359 381.99270630]
[183.32974243 395.40530396]
[170.94206238 404.32202148]
[155.91081238 406.97244263]
[141.22050476 402.83029175]
[129.78787231 392.71804810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 114]
[7 113]
[8 112]
[9 111]
[10 110]
[12 107]
[13 106]
[14 105]
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[29 35]
[30 34]
[59 70]
[60 69]
[61 68]
[62 67]
[71 99]
[72 98]
[73 97]
[74 95]
[75 94]
[76 93]
[77 92]
[78 90]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
