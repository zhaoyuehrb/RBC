%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCGGGCCUCGGUCGCCACGGUAACGCGCGCGGGCAGGUGUCCGACCAUGAGCGUCCGGGUCGCACGGGUAGCGUGGGUCAGGGGCUUGGGCGCCAGCUACCGCCGCGGCGCCUCGAGCUUCCCGGUGCCUCCGCCGGGCGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[81.18148041 232.17195129]
[66.57770538 227.19869995]
[56.99887466 215.10533142]
[55.50156021 199.75079346]
[62.56354904 186.03468323]
[75.93138885 178.33374023]
[76.55952454 163.34689331]
[77.18766022 148.36004639]
[77.81578827 133.37321472]
[67.09870148 122.87825775]
[52.12829971 123.82011414]
[37.15789795 124.76197815]
[22.18749809 125.70383453]
[7.21709728 126.64569092]
[-6.07001448 135.23423767]
[-19.25800133 128.31135559]
[-34.22840118 129.25321960]
[-49.19880295 130.19508362]
[-64.15852356 131.29365540]
[-79.10591125 132.54881287]
[-92.21024323 141.41375732]
[-105.54032135 134.76858521]
[-120.48771667 136.02374268]
[-135.43510437 137.27891541]
[-141.16418457 140.78865051]
[-146.93067932 140.82217407]
[-151.03254700 138.26022339]
[-166.01937866 138.88835144]
[-179.48344421 147.19676208]
[-192.52355957 139.99920654]
[-207.51040649 140.62734985]
[-222.49723816 141.25547791]
[-237.48408508 141.88362122]
[-247.99578857 153.68528748]
[-263.77835083 154.51400757]
[-275.46823120 143.87811279]
[-276.13003540 128.08769226]
[-265.37115479 116.51091766]
[-249.57460022 116.01608276]
[-238.11222839 126.89677429]
[-223.12538147 126.26863861]
[-208.13853455 125.64050293]
[-193.15168762 125.01236725]
[-180.75959778 116.74889374]
[-166.64752197 123.90151215]
[-151.66067505 123.27337646]
[-136.69027710 122.33152008]
[-121.74288177 121.07635498]
[-106.79548645 119.82118225]
[-94.76029205 111.04602814]
[-80.36108398 117.60142517]
[-65.41368866 116.34626007]
[-58.96884537 112.62783051]
[-50.14065933 115.22467804]
[-35.17026138 114.28282166]
[-20.19985962 113.34095764]
[-7.98353052 104.81977844]
[6.27523947 111.67529297]
[21.24563980 110.73342896]
[36.21604156 109.79157257]
[51.18644333 108.84971619]
[66.15684509 107.90785980]
[64.78071594 89.93179321]
[72.80072021 72.74429321]
[88.98135376 61.15150833]
[109.69995880 58.87212372]
[107.81996155 43.99040222]
[105.93996429 29.10868263]
[104.05996704 14.22696209]
[92.31576538 3.29749370]
[93.68199921 -12.68727875]
[107.11061096 -21.46520615]
[122.30031586 -16.30261421]
[127.59887695 -1.15979958]
[118.94168854 12.34696388]
[120.82168579 27.22868538]
[122.70168304 42.11040497]
[124.58168030 56.99212646]
[130.99691772 60.87732697]
[134.42236328 46.27368546]
[149.36978149 45.01889420]
[155.18200684 58.84705734]
[143.82737732 68.64773560]
[150.24261475 72.53293610]
[164.30183411 67.30435181]
[178.36106873 62.07577515]
[192.42030334 56.84719467]
[206.47952271 51.61861420]
[220.53875732 46.39003372]
[234.59799194 41.16145325]
[248.65722656 35.93287277]
[262.66091919 30.55735207]
[276.60757446 25.03548431]
[290.55422974 19.51361465]
[304.50085449 13.99174690]
[318.44750977 8.46987820]
[332.39416504 2.94801021]
[339.27645874 -3.16054606]
[346.69116211 -2.54009151]
[360.75039673 -7.76867247]
[365.82522583 -22.55988121]
[379.24700928 -30.58422661]
[394.67834473 -28.05285645]
[404.83303833 -16.16100502]
[404.91638184 -0.52364439]
[394.88897705 11.47574425]
[379.48547363 14.17141628]
[365.97897339 6.29055738]
[351.91973877 11.51913834]
[337.91601562 16.89465714]
[323.96939087 22.41652489]
[310.02273560 27.93839455]
[296.07608032 33.46026230]
[282.12945557 38.98213196]
[268.18280029 44.50399780]
[263.08776855 49.92648697]
[253.88580322 49.99209976]
[239.82656860 55.22068024]
[225.76733398 60.44926071]
[211.70811462 65.67784119]
[197.64888000 70.90642548]
[183.58964539 76.13500214]
[169.53042603 81.36358643]
[155.47119141 86.59216309]
[151.89318848 101.15917969]
[161.93014526 112.30635071]
[171.96710205 123.45352173]
[182.00407410 134.60069275]
[192.04103088 145.74786377]
[202.07798767 156.89503479]
[217.83320618 161.44529724]
[221.50698853 177.42764282]
[209.32005310 188.40081787]
[193.80926514 183.07655334]
[190.93081665 166.93200684]
[180.89385986 155.78483582]
[170.85688782 144.63764954]
[160.81993103 133.49047852]
[150.78297424 122.34331512]
[140.74601746 111.19613647]
[128.48829651 127.72972107]
[110.83677673 135.64433289]
[92.80263519 134.00134277]
[92.17449951 148.98818970]
[91.54636383 163.97502136]
[90.91822815 178.96186829]
[103.59478760 187.75439453]
[109.48426819 202.01333618]
[106.70737457 217.18872070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 146]
[7 145]
[8 144]
[9 143]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 52]
[20 51]
[22 49]
[23 48]
[24 47]
[27 46]
[28 45]
[30 43]
[31 42]
[32 41]
[33 40]
[66 78]
[67 77]
[68 76]
[69 75]
[84 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[99 109]
[100 108]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
