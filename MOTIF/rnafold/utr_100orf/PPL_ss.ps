%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCGCCGCUCGCUCACCUGCGCUCCCGCCCGCCCCUCGGUGCGCGCCCGGCCCGCCAGCCGCCGCCGCCCGCACCCCGAGCGCCACCAUGAACUCGCUCUUCAGGAAGAGAAACAAAGGCAAAUACAGCCCCACUGUGCAGACCCGGAGCAUCUCUAACAAGGAGCUCUCGGAGCUGAUCGAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[151.60874939 434.03002930]
[142.55679321 446.78134155]
[127.41322327 450.68090820]
[113.32838440 443.88742065]
[106.95269012 429.60861206]
[111.29656219 414.58645630]
[124.30894470 405.91400146]
[125.78687286 390.98696899]
[119.34122467 377.55929565]
[128.40058899 364.58862305]
[129.87852478 349.66159058]
[131.35644531 334.73458862]
[132.83438110 319.80758667]
[134.31230164 304.88055420]
[127.86665344 291.45288086]
[136.92602539 278.48220825]
[138.40394592 263.55517578]
[139.88188171 248.62817383]
[126.93360138 221.60325623]
[139.61186218 200.70974731]
[133.16719055 187.16477966]
[126.72251129 173.61981201]
[120.27783966 160.07482910]
[113.83316803 146.52986145]
[107.38848877 132.98489380]
[83.12021637 133.56924438]
[62.22391129 116.80690002]
[56.48844528 88.06735992]
[71.71807098 60.12057114]
[57.40716934 55.62632751]
[43.09627533 51.13208389]
[27.61186409 54.37917328]
[17.78750610 43.18402863]
[3.47660851 38.68978500]
[-6.99419260 49.74074554]
[-21.16698265 55.12767410]
[-36.21164703 53.83217239]
[-49.14875412 46.16456223]
[-57.43961334 33.69174957]
[-59.48438263 18.91729927]
[-73.79528046 14.42305470]
[-88.10617828 9.92881107]
[-97.24869537 10.34225368]
[-102.61439514 5.24117327]
[-116.84944153 0.51216060]
[-131.08448792 -4.21685171]
[-140.23257446 -3.95383620]
[-145.51364136 -9.14247894]
[-159.66897583 -14.10498047]
[-177.67083740 -10.26768970]
[-188.59272766 -23.99449348]
[-202.82777405 -28.72350693]
[-217.06280518 -33.45251846]
[-231.29785156 -38.18153381]
[-245.31239319 -30.87616730]
[-260.36254883 -35.69989777]
[-267.51931763 -49.79088593]
[-262.53674316 -64.78919983]
[-248.37088013 -71.79660797]
[-233.42608643 -66.65573883]
[-226.56884766 -52.41657639]
[-212.33380127 -47.68756104]
[-198.09875488 -42.95854950]
[-183.86370850 -38.22953796]
[-172.90190125 -43.36991119]
[-160.99649048 -39.53356171]
[-154.70648193 -28.26031876]
[-140.55114746 -23.29781532]
[-126.35546875 -18.45189476]
[-112.12042999 -13.72288227]
[-97.88538361 -8.99386978]
[-83.61193085 -4.38208580]
[-69.30103302 0.11215798]
[-54.99013901 4.60640144]
[-44.86587906 -6.34644556]
[-30.93280602 -11.83997822]
[-15.93482399 -10.73475552]
[-2.85063481 -3.19657397]
[5.69784975 9.32582188]
[7.97085190 24.37888908]
[22.28174973 28.87313271]
[36.74254990 25.30458260]
[47.59051895 36.82118607]
[61.90141296 41.31542969]
[76.21231079 45.80967331]
[65.80797577 35.00459290]
[55.40363312 24.19951439]
[41.78377914 17.91464996]
[32.26955795 6.31811666]
[28.76677513 -8.26716805]
[31.97708321 -22.91960526]
[41.25741577 -34.70414734]
[54.74882126 -41.26021194]
[69.74881744 -41.27454758]
[83.25272369 -34.74428558]
[92.55557251 -22.97750664]
[95.79388428 -8.33123207]
[92.31851196 6.26168919]
[94.38404083 21.11879349]
[96.44957733 35.97589874]
[101.75977325 21.94729424]
[107.06997681 7.91868782]
[112.38017273 -6.10991812]
[117.69037628 -20.13852310]
[114.51694489 -36.22769165]
[127.04025269 -46.81536102]
[142.37739563 -41.00984573]
[144.75083923 -24.78336143]
[131.71897888 -14.82832432]
[126.40878296 -0.79971844]
[121.09857941 13.22888756]
[115.78838348 27.25749397]
[110.47817993 41.28609848]
[116.21910858 46.11225510]
[125.87142181 34.63040161]
[131.50340271 20.72785568]
[146.46586609 21.78824806]
[150.08085632 36.34613037]
[137.35327148 44.28271103]
[127.70095825 55.76456451]
[133.44187927 60.59071732]
[146.34924316 52.94872665]
[159.25660706 45.30673599]
[161.62432861 29.84944344]
[173.40791321 19.56931305]
[189.04351807 19.32030678]
[201.14848328 29.21999931]
[204.00721741 44.59405899]
[196.26989746 58.18332291]
[181.58987427 63.57135773]
[166.89860535 58.21409607]
[153.99124146 65.85608673]
[141.08387756 73.49807739]
[143.91911316 85.10736847]
[143.71716309 96.45341492]
[140.78442383 106.79233551]
[135.59764099 115.51435089]
[128.75718689 122.17975616]
[120.93346405 126.54022217]
[127.37813568 140.08518982]
[133.82281494 153.63015747]
[140.26748657 167.17512512]
[146.71215820 180.72010803]
[153.15682983 194.26507568]
[169.20178223 193.61373901]
[184.23390198 204.48953247]
[190.16816711 224.70204163]
[202.68287659 232.97137451]
[215.19760132 241.24070740]
[227.77989197 249.40684509]
[240.42892456 257.46923828]
[253.07795715 265.53161621]
[265.72698975 273.59399414]
[281.52297974 274.48684692]
[288.09674072 287.85229492]
[300.74578857 295.91467285]
[313.39480591 303.97705078]
[328.76913452 300.31564331]
[342.18545532 308.66894531]
[345.68411255 324.08111572]
[337.18945312 337.40835571]
[321.74114990 340.74389648]
[308.50442505 332.10879517]
[305.33242798 316.62609863]
[292.68338013 308.56372070]
[280.03436279 300.50131226]
[265.14312744 300.18515015]
[257.66461182 286.24304199]
[245.01556396 278.18063354]
[232.36654663 270.11825562]
[219.71751404 262.05587769]
[212.37464905 261.11026001]
[206.92825317 253.75541687]
[194.41354370 245.48608398]
[181.89883423 237.21675110]
[175.12634277 240.43908691]
[173.93515015 255.39170837]
[161.58137512 246.88375854]
[154.80889893 250.10609436]
[153.33096313 265.03311157]
[151.85302734 279.96011353]
[158.19297791 294.45550537]
[149.23931885 306.35848999]
[147.76139832 321.28549194]
[146.28346252 336.21252441]
[144.80552673 351.13952637]
[143.32760620 366.06652832]
[149.66754150 380.56192017]
[140.71388245 392.46490479]
[139.23596191 407.39193726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 190]
[8 189]
[10 187]
[11 186]
[12 185]
[13 184]
[14 183]
[16 181]
[17 180]
[18 179]
[20 144]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[29 85]
[30 84]
[31 83]
[33 81]
[34 80]
[40 74]
[41 73]
[42 72]
[44 71]
[45 70]
[46 69]
[48 68]
[49 67]
[51 64]
[52 63]
[53 62]
[54 61]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
[121 133]
[122 132]
[123 131]
[147 175]
[148 174]
[149 173]
[150 171]
[151 170]
[152 169]
[153 168]
[155 166]
[156 165]
[157 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
