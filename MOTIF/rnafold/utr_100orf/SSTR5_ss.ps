%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGCAUGUGCUGGUUCAGGGACUCACCACCCUGGCGUCCUCCCUUCUUCUCUUGCAGAGCCUGACGCACCCCAGGGCUGCCGCCAUGGAGCCCCUGUUCCCAGCCUCCACGCCCAGCUGGAACGCCUCCUCCCCGGGGGCUGCCUCUGGAGGCGGUGACAACAGGACGCUGGUGGGGCCGGCGC\
) } def
/len { sequence length } bind def

/coor [
[20.24759293 458.66723633]
[19.59364128 473.95877075]
[11.89824200 487.18902588]
[-1.07026017 495.31777954]
[-16.33179855 496.47708130]
[-30.37938309 490.40057373]
[-39.98498154 478.48458862]
[-42.94129944 463.46728516]
[-38.56899261 448.79959106]
[-27.87278938 437.85198975]
[-13.31059647 433.14019775]
[-10.82873440 418.34695435]
[-8.34687328 403.55368042]
[-5.86501122 388.76043701]
[-3.38314939 373.96719360]
[-0.90128779 359.17391968]
[1.58057392 344.38067627]
[4.06243563 329.58740234]
[6.54429722 314.79415894]
[-4.31682873 325.13998413]
[-18.86943436 328.77615356]
[-33.32036591 324.75488281]
[-43.90297699 314.12435913]
[-47.85890198 299.65539551]
[-44.15701675 285.11935425]
[-33.76222992 274.30508423]
[-19.38394737 270.03134155]
[-4.76988602 273.41204834]
[6.27078676 283.56604004]
[10.86019707 297.84454346]
[15.75550556 283.66583252]
[20.65081406 269.48712158]
[25.54612160 255.30841064]
[30.44142914 241.12969971]
[29.18487930 236.50424194]
[30.83408737 231.04084778]
[35.74227905 226.56573486]
[41.10615540 212.55757141]
[46.47003555 198.54939270]
[51.83391190 184.54122925]
[57.19779205 170.53306580]
[62.56167221 156.52488708]
[67.92555237 142.51672363]
[73.28942871 128.50856018]
[70.20477295 121.67225647]
[58.78165436 131.39399719]
[47.69381714 141.49647522]
[33.00483322 138.45777893]
[26.83530617 124.78528595]
[34.27602005 111.76085663]
[49.18777084 110.13177490]
[64.03546906 107.99967194]
[60.95081711 101.16337585]
[46.89855194 95.91610718]
[32.84628677 90.66883087]
[18.79402161 85.42156219]
[1.84052432 85.54506683]
[-2.97134662 69.28830719]
[11.31803417 60.16416550]
[24.04129410 71.36930084]
[38.09355927 76.61656952]
[52.14582443 81.86383820]
[66.19808960 87.11111450]
[79.57380676 74.56648254]
[95.74931335 71.24748230]
[109.53527069 76.33950806]
[118.98475647 64.69017029]
[121.66943359 49.09840775]
[135.69615173 44.08835602]
[145.14564514 32.43901825]
[154.59513855 20.78967667]
[157.05883789 2.54989672]
[173.66526794 -3.09908891]
[182.91983032 -14.90388298]
[192.07595825 -26.78518486]
[201.13302612 -38.74217224]
[210.19007874 -50.69916153]
[219.24714661 -62.65614700]
[228.20452881 -74.68799591]
[237.06159973 -86.79386902]
[245.91867065 -98.89974976]
[247.82283020 -114.60594940]
[261.58236694 -120.30894470]
[270.43945312 -132.41482544]
[279.29650879 -144.52070618]
[281.20068359 -160.22689819]
[294.96023560 -165.92990112]
[303.81729126 -178.03578186]
[301.59854126 -193.45378113]
[310.75332642 -205.60469055]
[325.46572876 -207.62490845]
[334.32278442 -219.73078918]
[343.17987061 -231.83666992]
[352.03692627 -243.94255066]
[345.95632935 -257.97726440]
[347.70550537 -273.07153320]
[356.71527100 -285.18313599]
[370.48553467 -291.11911011]
[385.27847290 -289.37719727]
[394.13555908 -301.48306274]
[402.99261475 -313.58895874]
[411.84970093 -325.69482422]
[420.70675659 -337.80072021]
[429.56384277 -349.90658569]
[432.11276245 -358.69836426]
[438.67010498 -362.13842773]
[447.72717285 -374.09542847]
[456.78424072 -386.05239868]
[450.21829224 -399.87799072]
[450.84112549 -415.17083740]
[458.50955200 -428.41671753]
[471.46148682 -436.57183838]
[486.72064209 -437.76223755]
[500.78054810 -431.71435547]
[510.41040039 -419.81793213]
[513.39727783 -404.80670166]
[509.05487061 -390.13012695]
[498.38098145 -379.16079712]
[483.82839966 -374.41934204]
[468.74124146 -376.99533081]
[459.68417358 -365.03836060]
[450.62710571 -353.08135986]
[441.66970825 -341.04949951]
[432.81265259 -328.94363403]
[423.95556641 -316.83776855]
[415.09851074 -304.73187256]
[406.24142456 -292.62600708]
[397.38436890 -280.52014160]
[403.52218628 -266.94836426]
[402.03274536 -252.02732849]
[393.21643066 -239.77420044]
[379.35968018 -233.53822327]
[364.14282227 -235.08547974]
[355.28573608 -222.97959900]
[346.42868042 -210.87371826]
[337.57159424 -198.76783752]
[340.09939575 -184.13412476]
[331.28952026 -171.73086548]
[315.92318726 -169.17871094]
[307.06610107 -157.07283020]
[305.79547119 -142.23251343]
[291.40240479 -135.66363525]
[282.54531860 -123.55775452]
[273.68826294 -111.45187378]
[272.41760254 -96.61156464]
[258.02456665 -90.04267883]
[249.16748047 -77.93679810]
[240.31040955 -65.83092499]
[238.89553833 -58.56241989]
[231.20413208 -53.59908295]
[222.14707947 -41.64209366]
[213.09001160 -29.68510628]
[204.03294373 -17.72811890]
[202.49745178 -10.48413754]
[194.72462463 -5.64932632]
[185.47006226 6.15546799]
[186.61033630 18.21007347]
[178.98045349 28.12329102]
[166.24447632 30.23916817]
[156.79498291 41.88850784]
[147.34548950 53.53784561]
[145.33670044 68.29637146]
[130.63409424 74.13966370]
[121.18460846 85.78900146]
[128.16665649 107.17044830]
[115.10309601 128.91348267]
[87.29759979 133.87243652]
[81.93371582 147.88059998]
[76.56983948 161.88876343]
[71.20596313 175.89694214]
[65.84208679 189.90510559]
[60.47820282 203.91328430]
[55.11432648 217.92144775]
[49.75044632 231.92961121]
[44.62014389 246.02500916]
[39.72483826 260.20373535]
[34.82952881 274.38244629]
[29.93421936 288.56115723]
[25.03891182 302.73986816]
[21.33755112 317.27603149]
[18.85569000 332.06927490]
[16.37382698 346.86251831]
[13.89196587 361.65579224]
[11.41010475 376.44903564]
[8.92824268 391.24230957]
[6.44638109 406.03555298]
[3.96451926 420.82879639]
[1.48265767 435.62207031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 188]
[12 187]
[13 186]
[14 185]
[15 184]
[16 183]
[17 182]
[18 181]
[19 180]
[30 179]
[31 178]
[32 177]
[33 176]
[34 175]
[37 174]
[38 173]
[39 172]
[40 171]
[41 170]
[42 169]
[43 168]
[44 167]
[53 63]
[54 62]
[55 61]
[56 60]
[66 164]
[67 163]
[69 161]
[70 160]
[71 159]
[73 156]
[74 155]
[75 153]
[76 152]
[77 151]
[78 150]
[79 148]
[80 147]
[81 146]
[83 144]
[84 143]
[85 142]
[87 140]
[88 139]
[91 136]
[92 135]
[93 134]
[94 133]
[99 128]
[100 127]
[101 126]
[102 125]
[103 124]
[104 123]
[106 122]
[107 121]
[108 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
