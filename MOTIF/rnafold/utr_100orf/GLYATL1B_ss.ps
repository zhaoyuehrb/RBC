%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUUCUAUUGAAUAAUUCCGAGCGGCUGCUGGCCCUAUUCAAAUCUUUAGCAAGGAGCAUUCCUGAGUCCCUGAAGGUGUAUGGCUCUCUGUUUCACA\
) } def
/len { sequence length } bind def

/coor [
[112.29644775 153.06956482]
[101.69418335 154.44915771]
[91.02664948 153.73136902]
[80.70478058 150.94384766]
[71.12615967 146.19396973]
[62.65975952 139.66468811]
[55.63170624 131.60752869]
[50.31272507 122.33283997]
[46.90769958 112.19789124]
[45.54779053 101.59307861]
[30.63659286 99.96330261]
[15.72539520 98.33351898]
[0.81419808 96.70373535]
[-14.09699917 95.07395172]
[-29.00819778 93.44416809]
[-43.91939545 91.81438446]
[-54.37152100 103.13071442]
[-69.30830383 106.08805847]
[-82.96088409 99.75788879]
[-90.18167114 86.75795746]
[-105.09286499 85.12817383]
[-114.14479828 87.33161926]
[-120.43986511 83.20879364]
[-135.29316711 81.11606598]
[-150.14645386 79.02333832]
[-165.14280701 85.65972137]
[-178.22692871 75.77346802]
[-175.93899536 59.53470612]
[-160.63264465 53.64847946]
[-148.05372620 64.17003632]
[-133.20043945 66.26276398]
[-118.34713745 68.35549927]
[-103.46308899 70.21697998]
[-88.55188751 71.84676361]
[-78.69337463 60.71358109]
[-63.99570847 57.48207092]
[-50.05043030 63.59620285]
[-42.28961182 76.90319061]
[-27.37841415 78.53297424]
[-12.46721745 80.16275787]
[2.44398022 81.79253387]
[17.35517693 83.42231750]
[32.26637650 85.05210114]
[47.17757416 86.68188477]
[55.54762268 68.51084137]
[69.91307068 54.58681107]
[88.33641052 46.78776932]
[108.33284760 46.16558075]
[127.20541382 52.80416489]
[142.40872192 65.80816650]
[151.89225769 83.42369843]
[166.67329407 80.87004089]
[181.45433044 78.31639099]
[196.23535156 75.76273346]
[208.51684570 65.78899384]
[222.37554932 71.24661255]
[237.15658569 68.69295502]
[251.93760681 66.13930511]
[266.71865845 63.58564758]
[281.49966431 61.03199768]
[289.00762939 43.63705826]
[305.24975586 34.17066956]
[323.79400635 36.18010712]
[337.41555786 48.70739746]
[351.89431763 44.78756714]
[366.37310791 40.86773682]
[370.23220825 26.00156975]
[381.01879883 15.06790257]
[395.83132935 11.00783730]
[410.68533325 14.91351128]
[421.58514404 25.73431778]
[425.59875488 40.55951309]
[421.64654541 55.40119934]
[410.79162598 66.26702881]
[395.95391846 70.23415375]
[381.12469482 66.23543549]
[370.29293823 55.34651184]
[355.81414795 59.26634216]
[341.33538818 63.18617249]
[339.32864380 74.46109009]
[333.15930176 84.17098999]
[323.71997070 90.83734131]
[312.40469360 93.42733765]
[300.90292358 91.51375580]
[290.94747925 85.34487915]
[284.05331421 75.81302643]
[269.27230835 78.36667633]
[254.49127197 80.92033386]
[239.71023560 83.47398376]
[224.92919922 86.02764130]
[213.70495605 95.81872559]
[198.78900146 90.54376221]
[184.00798035 93.09741974]
[169.22694397 95.65106964]
[154.44592285 98.20472717]
[153.74794006 108.87356567]
[150.97958374 119.20059967]
[146.24749756 128.78802490]
[139.73394775 137.26652527]
[131.68984985 144.30952454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[20 34]
[21 33]
[23 32]
[24 31]
[25 30]
[51 95]
[52 94]
[53 93]
[54 92]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[64 79]
[65 78]
[66 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
