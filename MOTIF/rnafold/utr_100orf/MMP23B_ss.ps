%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCCAUGCAGCCCUGAGCCCCACAGCAAGUCUGCCAUGGGCCGCGGGGCCCGUGUCCCCUCGGAGGCCCCGGGGGCAGGCGUCGAGCGCCGCUGGCUUGGAGCCGCGCUGGUCGCCCUGUGCCUCCUCCCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[3.65531588 191.05606079]
[-2.84006286 194.85864258]
[-10.19182587 196.11291504]
[-17.44589233 194.70521545]
[-23.67808533 190.86413574]
[-36.94170380 197.86959839]
[-50.20531845 204.87506104]
[-63.46893311 211.88052368]
[-76.73255157 218.88598633]
[-89.99617004 225.89144897]
[-103.17977142 233.04634094]
[-116.28168488 240.34976196]
[-129.38359070 247.65318298]
[-133.68243408 259.87225342]
[-144.81454468 265.66964722]
[-156.51612854 262.40188599]
[-169.77973938 269.40734863]
[-174.35363770 281.52612305]
[-185.61390686 287.07046509]
[-197.23866272 283.53909302]
[-210.65721130 290.24301147]
[-215.42137146 305.31213379]
[-229.48394775 312.52459717]
[-244.50184631 307.60137939]
[-251.56523132 293.46331787]
[-246.48350525 278.49832153]
[-232.27157593 271.58480835]
[-217.36112976 276.82446289]
[-203.94258118 270.12054443]
[-195.12403870 254.98983765]
[-176.78520203 256.14373779]
[-163.52159119 249.13825989]
[-155.04724121 233.81213379]
[-136.68701172 234.55128479]
[-123.58510590 227.24786377]
[-110.48319244 219.94442749]
[-106.13572693 213.88914490]
[-97.00162506 212.62782288]
[-83.73801422 205.62236023]
[-70.47439575 198.61691284]
[-57.21078110 191.61145020]
[-43.94716263 184.60598755]
[-30.68354607 177.60052490]
[-21.09679604 157.30487061]
[2.07223558 157.76263428]
[14.46126842 149.30616760]
[26.85030174 140.84968567]
[39.23933411 132.39321899]
[51.62836838 123.93675232]
[64.01740265 115.48028564]
[76.40643311 107.02381134]
[75.38765717 99.52770233]
[76.69326782 92.07618713]
[80.19996643 85.37300110]
[85.57656860 80.05118561]
[80.90908813 65.79585266]
[69.26175690 55.08836365]
[72.65465546 40.58534622]
[67.98716736 26.33000946]
[63.31968307 12.07467461]
[50.75347519 1.53795719]
[53.86153412 -14.56396866]
[69.44655609 -19.66682053]
[81.47600555 -8.52122307]
[77.57501984 7.40718937]
[82.24250031 21.66252327]
[86.90998840 35.91785812]
[98.22346497 45.60571289]
[95.16442108 61.12836456]
[99.83190918 75.38369751]
[106.78179169 76.33573151]
[113.18098450 79.20932770]
[118.50986481 83.77115631]
[122.33571625 89.65078735]
[137.21997070 87.79096985]
[152.10423279 85.93115997]
[166.98847961 84.07134247]
[181.87274170 82.21152496]
[196.75700378 80.35170746]
[211.64125061 78.49188995]
[226.45391846 76.12863159]
[241.17796326 73.26464844]
[255.90200806 70.40066528]
[270.62606812 67.53668213]
[277.25354004 53.63047791]
[290.64215088 46.37798691]
[305.55761719 48.37621307]
[316.30770874 58.65111923]
[331.03173828 55.78713608]
[345.75579834 52.92315292]
[360.47985840 50.05916595]
[375.20388794 47.19518280]
[387.27288818 36.96532822]
[401.24331665 42.13023758]
[415.96737671 39.26625443]
[430.69140625 36.40227127]
[438.11218262 22.63759995]
[452.66360474 16.91130066]
[467.47491455 21.92715836]
[475.55270386 35.31683731]
[473.08285522 50.75814438]
[461.23156738 60.96015930]
[445.59466553 61.10580826]
[433.55538940 51.12631989]
[418.83135986 53.99030304]
[404.10729980 56.85428619]
[393.09146118 66.87929535]
[378.06787109 61.91923141]
[363.34384155 64.78321838]
[348.61978149 67.64720154]
[333.89575195 70.51118469]
[319.17169189 73.37516785]
[313.05682373 86.93048096]
[299.97787476 94.37392426]
[284.84692383 92.66879272]
[273.49005127 82.26073456]
[258.76599121 85.12471771]
[244.04194641 87.98870087]
[229.31790161 90.85268402]
[227.03140259 93.64086151]
[223.24360657 95.42058563]
[218.46243286 95.48147583]
[213.50106812 93.37615204]
[198.61682129 95.23596191]
[183.73255920 97.09577942]
[168.84829712 98.95559692]
[153.96405029 100.81541443]
[139.07978821 102.67523193]
[124.19553375 104.53504181]
[108.70925140 123.02475739]
[84.86289978 119.41284943]
[72.47386932 127.86931610]
[60.08483505 136.32579041]
[47.69580460 144.78225708]
[35.30677032 153.23872375]
[22.91773796 161.69519043]
[10.52870464 170.15165710]
[10.84391975 177.87762451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 36]
[12 35]
[13 34]
[16 32]
[17 31]
[20 29]
[21 28]
[45 137]
[46 136]
[47 135]
[48 134]
[49 133]
[50 132]
[51 131]
[55 70]
[56 69]
[58 67]
[59 66]
[60 65]
[74 129]
[75 128]
[76 127]
[77 126]
[78 125]
[79 124]
[80 123]
[81 119]
[82 118]
[83 117]
[84 116]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
