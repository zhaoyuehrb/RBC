%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:44:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGUGACUGCACCGAGCCCGAGAAGUCGCCGCGCCCCGCAGCCGCCCCGACUGGUUCCCCGCCUUGCCCGUGGGCCCCGCCGGGAUGGGGAACCGCCGGGACCUGGGCCAGCCGCGGGCCGGUCUCUGCCUGCUCCUGGCCGCGCUGCAGCUUCUGCCGGGGACGCAGGCCGAUCCUGUGGAUG\
) } def
/len { sequence length } bind def

/coor [
[60.90439606 306.49768066]
[52.58394241 318.97845459]
[44.26348877 331.45925903]
[42.09992981 340.35574341]
[35.69695663 344.07818604]
[27.16800880 356.41744995]
[18.63906288 368.75668335]
[10.11011696 381.09594727]
[1.58117080 393.43518066]
[-6.94777536 405.77444458]
[-1.42342460 418.41555786]
[-2.86067510 432.02709961]
[-10.77705765 443.05966187]
[-23.01470184 448.68963623]
[-36.32755661 447.54156494]
[-45.06258774 459.73577881]
[-46.12776947 476.10031128]
[-60.95022583 483.11648560]
[-74.28189087 473.56668091]
[-72.40828705 457.27490234]
[-57.25681686 451.00076294]
[-48.52178574 438.80651855]
[-54.19655609 423.41299438]
[-49.53837585 407.50885010]
[-36.19065094 397.40881348]
[-19.28702545 397.24548340]
[-10.75807858 384.90625000]
[-2.22913265 372.56698608]
[6.29981327 360.22775269]
[14.82875919 347.88848877]
[23.35770607 335.54925537]
[31.78270149 323.13879395]
[40.10315704 310.65802002]
[48.42360687 298.17721558]
[53.38556671 269.66763306]
[74.63379669 261.26635742]
[77.88380432 246.62266541]
[81.13381958 231.97898865]
[84.38382721 217.33529663]
[86.39376068 202.47056580]
[87.14943695 187.48962402]
[87.90512085 172.50866699]
[88.66079712 157.52770996]
[89.41647339 142.54675293]
[86.60753632 135.69369507]
[90.31277466 127.32112122]
[91.32001495 112.35498047]
[73.14436340 91.22383118]
[64.40933228 79.02960205]
[55.67430115 66.83537292]
[46.93926620 54.64114380]
[34.35164261 51.76595688]
[27.32919312 41.41205978]
[29.19116402 29.44643402]
[20.66221809 17.10718346]
[12.13327122 4.76793432]
[3.60432553 -7.57131481]
[-4.92462063 -19.91056442]
[-13.45356655 -32.24981308]
[-21.98251152 -44.58906555]
[-30.51145935 -56.92831421]
[-39.04040527 -69.26756287]
[-47.56935120 -81.60681152]
[-55.96335983 -81.55686951]
[-63.60215759 -84.80336761]
[-69.26194000 -90.74514771]
[-72.06832123 -98.35610199]
[-71.63091278 -106.36193085]
[-68.09594727 -113.45337677]
[-75.77706909 -126.33749390]
[-83.45819855 -139.22160339]
[-91.13932037 -152.10571289]
[-98.92839813 -164.92485046]
[-106.82488251 -177.67811584]
[-114.72135925 -190.43136597]
[-128.20028687 -200.71508789]
[-122.04981232 -216.51406860]
[-105.16563416 -214.97753906]
[-101.96810150 -198.32785034]
[-94.07162476 -185.57458496]
[-86.17514038 -172.82133484]
[-79.96782684 -168.78103638]
[-78.25521088 -159.78683472]
[-70.57408142 -146.90272522]
[-62.89295959 -134.01861572]
[-55.21183395 -121.13450623]
[-35.35837555 -112.53364563]
[-35.23010254 -90.13575745]
[-26.70115471 -77.79650879]
[-18.17220879 -65.45726013]
[-9.64326286 -53.11801147]
[-1.11431682 -40.77875900]
[7.41462898 -28.43951035]
[15.94357491 -16.10026169]
[24.47252083 -3.76101160]
[33.00146866 8.57823849]
[41.53041458 20.91748810]
[57.76720810 27.55237770]
[59.13349533 45.90611267]
[67.86853027 58.10034180]
[76.60356140 70.29457092]
[85.33859253 82.48880005]
[81.21117401 68.06782532]
[89.07434082 55.29400635]
[103.80874634 52.48378754]
[115.82148743 61.46677780]
[117.29160309 76.39456177]
[107.26239014 87.54815674]
[120.45764923 80.41477203]
[133.65290833 73.28139496]
[146.84817505 66.14801788]
[160.04344177 59.01464081]
[173.23869324 51.88126373]
[177.85133362 37.00304413]
[191.33482361 29.95675850]
[205.49049377 34.44588852]
[218.68576050 27.31251144]
[231.88102722 20.17913437]
[245.07627869 13.04575634]
[258.27154541 5.91237831]
[271.46679688 -1.22099972]
[273.38662720 -16.61885452]
[284.01498413 -27.92450333]
[299.26504517 -30.79069328]
[313.27285767 -24.11531830]
[320.65216064 -10.46519470]
[318.56539917 4.91092730]
[307.81503296 16.10061455]
[292.53475952 18.80120277]
[278.60018921 11.97426128]
[265.40493774 19.10763931]
[252.20965576 26.24101830]
[239.01440430 33.37439346]
[225.81913757 40.50777435]
[212.62388611 47.64115143]
[208.62695312 61.94360733]
[195.34671021 69.36583710]
[180.37207031 65.07652283]
[167.17681885 72.20989990]
[153.98155212 79.34327698]
[140.78628540 86.47666168]
[127.59102631 93.61003876]
[114.39576721 100.74341583]
[106.28615570 113.36222076]
[105.27891541 128.32835388]
[104.39743042 143.30244446]
[103.64174652 158.28338623]
[102.88607025 173.26434326]
[102.13039398 188.24530029]
[101.37471771 203.22625732]
[118.82418823 199.32800293]
[127.97665405 213.01293945]
[141.05021667 220.36697388]
[157.43334961 219.64236450]
[166.02313232 233.61189270]
[157.98312378 247.90490723]
[141.58421326 247.81799316]
[133.69618225 233.44053650]
[120.62261200 226.08650208]
[109.14996338 228.19197083]
[99.02751160 220.58531189]
[95.77750397 235.22898865]
[92.52748871 249.87268066]
[89.27748108 264.51635742]
[104.66085052 277.25982666]
[104.41036224 302.41787720]
[110.75598145 316.00955200]
[117.10160065 329.60119629]
[123.44721985 343.19287109]
[129.79283142 356.78451538]
[136.13845825 370.37615967]
[150.66471863 377.18551636]
[154.25765991 392.82107544]
[144.16107178 405.28857422]
[128.12019348 405.02401733]
[118.44022369 392.23034668]
[122.54679108 376.72180176]
[116.20117950 363.13012695]
[109.85556030 349.53848267]
[103.50994110 335.94680786]
[97.16432190 322.35516357]
[90.81871033 308.76351929]
[83.34012604 308.19705200]
[86.88465118 322.77224731]
[74.11811829 330.64724731]
[62.68348694 320.93905640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[15 22]
[16 21]
[36 164]
[37 163]
[38 162]
[39 161]
[40 150]
[41 149]
[42 148]
[43 147]
[44 146]
[46 145]
[47 144]
[48 102]
[49 101]
[50 100]
[51 99]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[69 86]
[70 85]
[71 84]
[72 83]
[73 81]
[74 80]
[75 79]
[108 143]
[109 142]
[110 141]
[111 140]
[112 139]
[113 138]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
[152 159]
[153 158]
[166 182]
[167 181]
[168 180]
[169 179]
[170 178]
[171 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
