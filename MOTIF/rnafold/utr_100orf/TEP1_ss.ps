%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUCGGACGCCCCAGGCAUAUACAAGCUGAGUUUCAGCCAUGGAAAAACUCCAUGGGCAUGUGUCUGCCCAUCCAGACAUCCUCUCCUUGGAGAACCGGUGCCUGGCUAUGCUCCCUGACUUACAGCCCUUGGAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[166.76191711 323.25601196]
[159.05116272 318.70184326]
[152.23695374 312.88323975]
[146.52450562 305.97302246]
[142.08622742 298.17697144]
[139.05657959 289.72760010]
[137.52796936 280.87731934]
[137.54792786 271.89080811]
[139.11766052 263.03713989]
[142.19194031 254.58172607]
[146.68041992 246.77832031]
[152.45024109 239.86151123]
[159.33003235 234.03952026]
[152.56489563 220.65173340]
[145.79974365 207.26394653]
[139.03459167 193.87617493]
[132.26943970 180.48838806]
[125.50428009 167.10060120]
[118.73912811 153.71281433]
[111.97397614 140.32504272]
[98.55138397 143.84349060]
[84.13849640 142.82667542]
[70.28414917 137.02075195]
[58.58951950 126.70379639]
[50.52537918 112.68977356]
[47.25342941 96.27019501]
[49.47280884 79.09653473]
[34.54814148 80.59797668]
[19.62347603 82.09941101]
[4.69880867 83.60084534]
[-10.22585869 85.10227966]
[-25.38023186 92.70368195]
[-36.87971497 80.24582672]
[-28.09209251 65.74707031]
[-11.72729397 70.17761230]
[3.19737315 68.67617798]
[18.12203979 67.17474365]
[33.04670715 65.67330933]
[47.97137451 64.17186737]
[51.44867706 49.58049011]
[38.80529404 41.50925446]
[26.16190910 33.43801880]
[13.51852512 25.36678505]
[0.87514073 17.29554939]
[-11.76824379 9.22431469]
[-27.68108940 11.26413250]
[-39.09660339 -0.00820670]
[-37.25777435 -15.94552994]
[-23.57520103 -24.32208633]
[-8.54497814 -18.71209908]
[-3.69700813 -3.41906953]
[8.94637585 4.65216589]
[21.58975983 12.72340107]
[34.23314285 20.79463577]
[46.87652969 28.86587143]
[59.51991272 36.93710709]
[72.59304047 29.58228683]
[72.25885773 14.58601093]
[69.45546722 9.99125290]
[68.81626129 5.25849628]
[70.01879120 1.25468242]
[72.43712616 -1.41544569]
[73.10532379 -16.40055466]
[73.77352905 -31.38566399]
[74.44173431 -46.37077332]
[75.10993195 -61.35588455]
[75.77813721 -76.34099579]
[76.44634247 -91.32610321]
[65.59633636 -102.81753540]
[66.13339996 -118.61269379]
[77.73890686 -129.34059143]
[93.52750397 -128.63656616]
[104.13211060 -116.91828918]
[103.26119232 -101.13801575]
[91.43144989 -90.65789795]
[90.76324463 -75.67279053]
[90.09504700 -60.68767929]
[89.42684174 -45.70257187]
[88.75863647 -30.71746254]
[88.09043884 -15.73235226]
[87.42223358 -0.74724293]
[87.25513458 14.25182629]
[87.58931732 29.24810410]
[101.33296967 35.25742340]
[112.56915283 25.32020760]
[123.80533600 15.38299274]
[135.04151917 5.44577789]
[139.73199463 -10.26827240]
[155.74645996 -13.79946518]
[166.61058044 -1.51521254]
[161.14830017 13.94750023]
[144.97872925 16.68195915]
[133.74255371 26.61917305]
[122.50637054 36.55638885]
[111.27018738 46.49360275]
[132.18284607 58.95539474]
[144.72630310 78.47959900]
[147.10945129 100.41969299]
[139.82839966 120.04531097]
[125.36176300 133.55989075]
[132.12690735 146.94766235]
[138.89205933 160.33544922]
[145.65721130 173.72323608]
[152.42236328 187.11102295]
[159.18751526 200.49879456]
[165.95266724 213.88658142]
[172.71781921 227.27436829]
[194.84120178 224.96173096]
[215.87350464 232.08326721]
[231.98458862 247.30798340]
[240.25473022 267.83242798]
[239.20370483 289.89672852]
[229.05567932 309.47351074]
[239.11744690 320.59829712]
[249.17922974 331.72308350]
[259.24099731 342.84786987]
[269.90652466 353.39520264]
[281.14270020 363.33242798]
[292.37887573 373.26965332]
[308.41543579 373.72637939]
[317.94140625 386.63513184]
[313.64929199 402.09338379]
[298.83163452 408.24288940]
[284.85525513 400.36627197]
[282.44165039 384.50582886]
[271.20547485 374.56860352]
[259.96929932 364.63140869]
[257.80670166 379.47467041]
[244.97006226 387.23489380]
[230.82185364 382.25207520]
[225.68113708 368.16049194]
[233.29731750 355.23788452]
[248.11621094 352.90963745]
[238.05444336 341.78485107]
[227.99267578 330.66006470]
[217.93090820 319.53527832]
[210.12530518 323.86071777]
[201.68598938 326.77752686]
[192.86505127 328.19662476]
[183.92630005 328.07382202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[57 83]
[58 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[84 95]
[85 94]
[86 93]
[87 92]
[113 136]
[114 135]
[115 134]
[116 133]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
