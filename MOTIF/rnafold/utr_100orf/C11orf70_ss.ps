%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGCCCAGGCAUCCACCCAGCCGAGAGCACGAUGGCUACUGGGGAGCUCGGGGACUUGGGUGGCUACUACUUCAGGUUCUUGCCUCAGAAAACCUUCCAGUCUCUGAGCUCUAAGGAGAUCACCAGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[84.65040588 316.29083252]
[81.29151917 300.60333252]
[91.57328796 288.28811646]
[91.57328796 273.28811646]
[91.57328796 258.28811646]
[91.57328796 243.28811646]
[83.64992523 236.65652466]
[80.67098236 226.53259277]
[83.87076569 216.24485779]
[92.40906525 209.31814575]
[93.11215210 194.33464050]
[78.96291351 181.06094360]
[78.99022675 161.35882568]
[93.61676788 147.71318054]
[93.26512909 132.71730042]
[92.91349030 117.72142792]
[80.28018188 108.22647095]
[78.21825409 90.79199982]
[63.28416443 92.19661713]
[48.35007095 93.60124207]
[33.41598129 95.00586700]
[18.48189354 96.41048431]
[14.34518433 103.90010071]
[7.62474871 109.04124451]
[-0.50240254 111.02914429]
[-8.65061665 109.60308075]
[-15.46179867 105.07787323]
[-19.83175087 98.27832794]
[-34.83175278 98.27832794]
[-49.83175278 98.27832794]
[-60.82844162 109.62946320]
[-76.63184357 109.79656219]
[-87.86608887 98.68047333]
[-87.86608887 82.87618256]
[-76.63184357 71.76009369]
[-60.82844162 71.92719269]
[-49.83175278 83.27832794]
[-34.83175278 83.27832794]
[-19.83175087 83.27832794]
[-2.40410900 70.50162506]
[17.07727051 81.47639465]
[32.01136017 80.07177734]
[46.94544983 78.66715240]
[61.87953949 77.26252747]
[76.81362915 75.85791016]
[89.68520355 68.15579224]
[97.98217010 55.65938187]
[106.27913666 43.16297150]
[114.57611084 30.66655731]
[122.87307739 18.17014503]
[131.17004395 5.67373180]
[139.46701050 -6.82268143]
[147.76397705 -19.31909370]
[156.06094360 -31.81550598]
[164.35791016 -44.31192017]
[172.65487671 -56.80833435]
[180.95184326 -69.30474854]
[189.24880981 -81.80115509]
[191.42057800 -90.77225494]
[197.88963318 -94.49011993]
[206.47726440 -106.78859711]
[215.06489563 -119.08707428]
[216.62182617 -134.83148193]
[230.25210571 -140.83688354]
[238.83973694 -153.13536072]
[232.23730469 -164.35398865]
[230.40765381 -177.19464111]
[233.59075928 -189.71987915]
[241.27294922 -200.05364990]
[252.26948547 -206.66212463]
[264.90710449 -208.58145142]
[277.27865601 -205.55810547]
[286.43328857 -217.44053650]
[285.56018066 -230.37030029]
[293.50717163 -240.09277344]
[305.55523682 -241.70202637]
[314.98593140 -253.36659241]
[324.41662598 -265.03115845]
[333.84732056 -276.69570923]
[335.86416626 -292.97036743]
[351.07025146 -299.11099243]
[363.82284546 -288.80062866]
[361.00317383 -272.64572144]
[345.51187134 -267.26501465]
[336.08117676 -255.60046387]
[326.65048218 -243.93589783]
[317.21978760 -232.27133179]
[315.47396851 -214.84954834]
[298.31573486 -208.28588867]
[289.16107178 -196.40345764]
[296.29220581 -180.81732178]
[294.59432983 -163.67279053]
[284.44094849 -149.64492798]
[268.52349854 -142.60397339]
[251.13821411 -144.54772949]
[242.55058289 -132.24925232]
[241.60789490 -117.38450623]
[227.36337280 -110.49944305]
[218.77574158 -98.20096588]
[210.18811035 -85.90248871]
[201.74522400 -73.50418854]
[193.44825745 -61.00777817]
[185.15129089 -48.51136398]
[176.85432434 -36.01495361]
[168.55735779 -23.51853943]
[160.26039124 -11.02212715]
[151.96342468 1.47428608]
[143.66645813 13.97069931]
[135.36949158 26.46711159]
[127.07251740 38.96352386]
[118.77555084 51.45993805]
[110.47858429 63.95634842]
[102.18161774 76.45276642]
[115.30676270 83.49875641]
[121.06806183 96.43869019]
[117.86518097 109.48374939]
[107.90936279 117.36978912]
[108.26100159 132.36566162]
[108.61264038 147.36154175]
[118.06254578 152.65547180]
[124.37316895 161.35882568]
[126.43601227 171.82667542]
[123.93755341 182.11555481]
[117.40474701 190.34425354]
[108.09566498 195.03771973]
[107.39257812 210.02124023]
[117.49159241 227.39601135]
[106.57328796 243.28811646]
[106.57328796 258.28811646]
[106.57328796 273.28811646]
[106.57328796 288.28811646]
[116.85505676 300.60333252]
[113.49617767 316.29083252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[10 126]
[11 125]
[14 119]
[15 118]
[16 117]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[28 39]
[29 38]
[30 37]
[46 113]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[58 101]
[60 100]
[61 99]
[62 98]
[64 96]
[65 95]
[72 90]
[73 89]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
