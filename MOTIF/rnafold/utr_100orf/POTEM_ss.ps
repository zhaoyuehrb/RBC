%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGACGCGAUCUGCUGGCUACUACCGGCCUCCCCUGGCUGUUAAAAGCAGAUGGUGGCUGAGGCUGGUUCAAUGCCGGCUGCCUCCUCUGUGAAGAAGCCAUUUGGUCUCAGAAGCAAGAUGGGCAAGUGGUGCCGCCACUGCUUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[-89.83400726 311.87536621]
[-97.99066925 324.46380615]
[-106.14733887 337.05224609]
[-114.30400085 349.64068604]
[-122.46066284 362.22912598]
[-119.37158203 377.49658203]
[-127.82292938 390.14685059]
[-142.39715576 392.99774170]
[-150.55381775 405.58618164]
[-144.10394287 419.60055542]
[-146.27732849 434.87405396]
[-156.38046265 446.53295898]
[-171.18945312 450.85699463]
[-185.97883606 446.46630859]
[-196.02934265 434.76199341]
[-198.13391113 419.47885132]
[-191.62097168 405.49368286]
[-178.56878662 397.26907349]
[-163.14225769 397.42950439]
[-154.98559570 384.84106445]
[-158.33877563 370.37414551]
[-150.24607849 357.49148560]
[-135.04910278 354.07244873]
[-126.89244080 341.48400879]
[-118.73577118 328.89556885]
[-110.57910919 316.30712891]
[-102.42243958 303.71868896]
[-110.57910919 291.13024902]
[-125.40158844 293.43112183]
[-140.22407532 295.73202515]
[-155.04655457 298.03289795]
[-164.17193604 310.93649292]
[-179.76268005 313.52572632]
[-192.56909180 304.26443481]
[-194.99333191 288.64715576]
[-185.59715271 275.93939209]
[-169.95515442 273.68038940]
[-157.34742737 283.21041870]
[-142.52494812 280.90951538]
[-127.70246887 278.60864258]
[-112.87998199 276.30776978]
[-110.32843781 259.27545166]
[-101.69268036 244.71287537]
[-88.43615723 234.65731812]
[-72.64836884 230.41809082]
[-56.71701813 232.40898132]
[-42.96719742 240.11810303]
[-31.77890015 230.12701416]
[-20.59060478 220.13591003]
[-9.40230751 210.14482117]
[1.78598881 200.15371704]
[12.97428513 190.16262817]
[15.88654041 183.31930542]
[24.49638748 180.08413696]
[35.88746262 170.32487488]
[47.27853394 160.56559753]
[58.66960907 150.80632019]
[70.06068420 141.04704285]
[81.45175934 131.28776550]
[92.84282684 121.52849579]
[72.05305481 105.31393433]
[78.04736328 73.76473236]
[76.81674957 58.81529236]
[75.58614349 43.86585999]
[74.35552979 28.91642570]
[73.12491608 13.96699047]
[71.43451691 -0.93745708]
[69.28594208 -15.78277969]
[67.13735962 -30.62810326]
[64.98877716 -45.47342682]
[53.04901886 -56.18891144]
[54.12620926 -72.19576263]
[67.39402771 -81.21488953]
[82.67453003 -76.32759094]
[88.24583435 -61.28298569]
[79.83410645 -47.62200546]
[81.98268127 -32.77667999]
[84.13126373 -17.93135834]
[86.27983856 -3.08603621]
[88.93149567 -0.67441177]
[90.51681519 3.16698885]
[90.36509705 7.90856981]
[88.07434845 12.73637772]
[89.30496216 27.68581200]
[90.53557587 42.63524628]
[91.76618958 57.58468246]
[92.99680328 72.53411865]
[107.29156494 77.08160400]
[121.58506012 81.62869263]
[131.22686768 70.13803101]
[140.86868286 58.64736176]
[143.18196106 42.41218948]
[158.49746704 36.54985428]
[171.05995178 47.09102249]
[167.94618225 63.19184494]
[152.35935974 68.28917694]
[142.71754456 79.77984619]
[133.07572937 91.27050781]
[127.94694519 105.31393433]
[118.28025818 113.43626404]
[133.21627808 114.82028961]
[148.15228271 116.20431519]
[163.08830261 117.58834076]
[178.02430725 118.97236633]
[192.96032715 120.35639191]
[207.89633179 121.74041748]
[222.83235168 123.12444305]
[237.28756714 116.69346619]
[249.24662781 125.57209015]
[264.18264771 126.95611572]
[279.13208008 128.18672180]
[294.09335327 129.26379395]
[303.98858643 117.31120300]
[319.02786255 113.49023438]
[333.42828369 119.27013397]
[341.65261841 132.42840576]
[340.53842163 147.90542603]
[330.51412964 159.74996948]
[315.43426514 163.40756226]
[301.09738159 157.47178650]
[293.01629639 144.22508240]
[278.05502319 143.14801025]
[271.11480713 145.82112122]
[262.79861450 141.89212036]
[247.86260986 140.50810242]
[234.47572327 147.03807068]
[221.44831848 138.06045532]
[206.51231384 136.67643738]
[191.57629395 135.29240417]
[176.64028931 133.90838623]
[161.70426941 132.52435303]
[146.76826477 131.14033508]
[131.83224487 129.75630188]
[116.89623260 128.37228394]
[102.60210419 132.91957092]
[91.21102905 142.67884827]
[79.81995392 152.43811035]
[68.42888641 162.19738770]
[57.03781128 171.95666504]
[45.64673615 181.71594238]
[34.25566101 191.47521973]
[22.96538162 201.35092163]
[11.77708626 211.34202576]
[0.58878922 221.33311462]
[-10.59950733 231.32421875]
[-21.78780365 241.31530762]
[-32.97610092 251.30641174]
[-27.04775429 265.40106201]
[-26.69376373 280.93072510]
[-32.14125443 295.73715210]
[-42.79876328 307.69747925]
[-57.31547928 315.02841187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[8 20]
[9 19]
[28 41]
[29 40]
[30 39]
[31 38]
[47 147]
[48 146]
[49 145]
[50 144]
[51 143]
[52 142]
[54 141]
[55 140]
[56 139]
[57 138]
[58 137]
[59 136]
[60 135]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 79]
[68 78]
[69 77]
[70 76]
[89 98]
[90 97]
[91 96]
[100 134]
[101 133]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[109 125]
[110 124]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
