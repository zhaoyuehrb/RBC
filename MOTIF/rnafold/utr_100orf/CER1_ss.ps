%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGGGCCUCAUCAUUUACAAAAGAAGCUUGGGCCCCUGACAGCAUGCAUCUCCUCUUAUUUCAGCUGCUGGUACUCCUGCCUCUAGGAAAGACCACACGGCACCAGGAUGGCCGCCAGAAUCAGAGUUCUCUUUCCCCCGUAC\
) } def
/len { sequence length } bind def

/coor [
[87.36949158 181.53652954]
[74.16735077 178.36076355]
[61.66485977 173.06265259]
[50.20064926 165.78570557]
[40.08521271 156.72700500]
[28.30046654 166.00708008]
[16.51571846 175.28715515]
[4.73097038 184.56721497]
[-7.05377769 193.84729004]
[-11.90542603 201.67419434]
[-19.19339371 203.19697571]
[-31.17508507 212.22134399]
[-31.04136848 227.62550354]
[-39.90019989 240.00994873]
[-54.18382645 244.74725342]
[-68.34851074 240.21958923]
[-80.33020020 249.24395752]
[-92.31188965 258.26831055]
[-94.26670074 273.95123291]
[-106.78961182 283.59243774]
[-122.45099640 281.47192383]
[-131.95922852 268.84777832]
[-129.67326355 253.20968628]
[-116.94930267 243.83544922]
[-101.33625031 246.28662109]
[-89.35456085 237.26226807]
[-77.37287140 228.23789978]
[-77.81371307 213.37373352]
[-69.31688690 200.95326233]
[-54.96792984 195.85809326]
[-40.19944763 200.23965454]
[-28.21775627 191.21528625]
[-16.33384895 182.06254578]
[-4.54910088 172.78247070]
[7.23564720 163.50239563]
[19.02039528 154.22233582]
[30.80514336 144.94226074]
[21.23931122 124.58634949]
[17.52601433 102.40348816]
[19.94118309 80.04202271]
[28.30535126 59.16359329]
[41.99699402 41.31962967]
[32.46550751 29.73727989]
[22.93402290 18.15493011]
[13.40253925 6.57258129]
[3.87105465 -5.00976706]
[-4.05842018 -9.69188786]
[-5.73766661 -16.94540596]
[-15.01773739 -28.73015404]
[-29.40838623 -23.96726990]
[-44.56008148 -24.41661644]
[-58.64318466 -30.02393341]
[-69.95709229 -40.11211014]
[-77.13559723 -53.46294785]
[-79.31185150 -68.46427155]
[-76.22306824 -83.30459595]
[-68.24224091 -96.19187927]
[-56.33307648 -105.56992340]
[-41.93367767 -110.30628204]
[-26.78283501 -109.82901001]
[-12.71008873 -104.19574738]
[-1.41479146 -94.08673859]
[5.73909473 -80.72269440]
[7.88770342 -65.71738434]
[4.77157927 -50.88277817]
[-3.23298979 -38.01022339]
[6.04708147 -26.22547722]
[15.45340347 -14.54125214]
[24.98488808 -2.95890307]
[34.51637268 8.62344551]
[44.04785538 20.20579529]
[53.57934189 31.78814316]
[63.49622726 26.00534058]
[74.11976624 21.65494156]
[85.24429321 18.82115936]
[96.65446472 17.55885506]
[108.12940216 17.89246178]
[119.44696808 19.81552315]
[130.38807678 23.29081154]
[140.74092102 28.25104904]
[150.30509949 34.60021973]
[158.89546204 42.21541214]
[166.34571838 50.94920731]
[172.51164246 60.63253784]
[177.27386475 71.07794952]
[180.54020691 82.08324432]
[182.24743652 93.43537140]
[182.36250305 104.91458130]
[197.19267273 107.16541290]
[212.02282715 109.41624451]
[226.85299683 111.66707611]
[241.68315125 113.91790771]
[256.51333618 116.16873932]
[242.50259399 110.81156158]
[234.06022644 98.41291046]
[234.21006775 83.41365814]
[242.89843750 71.18614197]
[257.01339722 66.10993195]
[271.49932861 70.00319672]
[281.16778564 81.47147369]
[282.55563354 96.40766907]
[297.55563354 96.40766907]
[312.55563354 96.40766907]
[328.23999023 86.82398987]
[343.10144043 96.09872437]
[358.09796143 95.77598572]
[373.09451294 95.45323944]
[388.79986572 89.06750488]
[399.28372192 102.39135742]
[389.38281250 116.15391541]
[373.41723633 110.44976807]
[358.42071533 110.77251434]
[343.42419434 111.09525299]
[334.79183960 119.63387299]
[322.25305176 119.98353577]
[312.55563354 111.40766907]
[297.55563354 111.40766907]
[282.55563354 111.40766907]
[277.49276733 125.52742767]
[289.07513428 135.05891418]
[300.65747070 144.59039307]
[312.23983765 154.12188721]
[323.82217407 163.65336609]
[340.07873535 165.81126404]
[346.08724976 181.07002258]
[335.66671753 193.73272705]
[319.53683472 190.77308655]
[314.29067993 175.23571777]
[302.70834351 165.70423889]
[291.12597656 156.17274475]
[279.54364014 146.64126587]
[267.96130371 137.10977173]
[254.26249695 130.99890137]
[239.43232727 128.74807739]
[224.60215759 126.49723816]
[209.77200317 124.24640656]
[194.94183350 121.99557495]
[180.11166382 119.74474335]
[175.78836060 132.61685181]
[169.41238403 144.60556030]
[161.15643311 155.38615417]
[151.24409485 164.66665649]
[139.94386292 172.19572449]
[127.56178284 177.76942444]
[114.43320465 181.23680115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[11 32]
[12 31]
[16 27]
[17 26]
[18 25]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[48 67]
[49 66]
[88 138]
[89 137]
[90 136]
[91 135]
[92 134]
[93 133]
[101 118]
[102 117]
[103 116]
[105 113]
[106 112]
[107 111]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
