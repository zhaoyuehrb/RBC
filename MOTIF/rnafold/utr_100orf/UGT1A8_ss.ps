%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCGCCUACUGUAUCAUAGCAGCUUAGAAUCCCAGCUGCUGGCUCGGGCUGCAGUUCUCUCAUGGCUCGCACAGGGUGGACCAGCCCCAUUCCCCUAUGUGUUUCUCUGCUGCUGACCUGUGGCUUUGCUGAGGCAGGGAAGCUGCUGGUAGUGCCCAUGG\
) } def
/len { sequence length } bind def

/coor [
[102.62734985 331.08538818]
[92.89733887 319.32571411]
[89.24156952 304.50686646]
[92.38589478 289.57113647]
[101.70600891 277.48403931]
[115.35138702 270.64541626]
[115.06406403 255.64817810]
[114.63311005 240.65437317]
[114.05857086 225.66537476]
[113.48403168 210.67639160]
[112.90948486 195.68739319]
[112.33494568 180.69841003]
[111.61686707 165.71560669]
[110.75532532 150.74037170]
[109.89377594 135.76512146]
[98.72486877 135.83584595]
[88.42524719 132.61575317]
[79.90559387 126.62758636]
[73.84624481 118.62714386]
[59.93370819 124.23439789]
[46.02117157 129.84165955]
[32.10863495 135.44891357]
[18.19609833 141.05616760]
[4.28356218 146.66342163]
[-9.62897491 152.27067566]
[-23.54151154 157.87792969]
[-26.32489777 173.05213928]
[-36.88689041 184.29704285]
[-51.85719681 188.02444458]
[-66.45883942 183.04493713]
[-76.03250122 170.94746399]
[-77.52324677 155.59230042]
[-70.45539093 141.87921143]
[-57.08426666 134.18399048]
[-41.67654037 134.96215820]
[-29.14876747 143.96539307]
[-15.23623085 138.35813904]
[-1.32369387 132.75088501]
[12.58884335 127.14363098]
[26.50137901 121.53637695]
[40.41391754 115.92911530]
[54.32645416 110.32186127]
[68.23899078 104.71460724]
[66.80284119 97.25642395]
[67.15747070 89.39704895]
[69.40731049 81.57437897]
[73.54827118 74.25178528]
[79.46199036 67.89097595]
[72.04509735 54.85297394]
[64.62819672 41.81496811]
[57.21129608 28.77696037]
[49.79439545 15.73895454]
[42.37749481 2.70094824]
[36.81262589 -1.00677145]
[34.35914230 -6.19802618]
[34.93717957 -10.98156929]
[28.02511406 -24.29409599]
[21.11304855 -37.60662079]
[14.20098209 -50.91914749]
[0.97493511 -59.60144424]
[1.97702003 -74.46230316]
[-4.93504572 -87.77482605]
[-11.84711075 -101.08734894]
[-18.61078072 -107.29742432]
[-18.76131058 -114.72174072]
[-25.41710854 -128.16421509]
[-40.65417099 -131.68074036]
[-50.02473068 -144.19979858]
[-49.10429382 -159.81025696]
[-38.32746124 -171.14137268]
[-22.78272438 -172.84289551]
[-9.80983543 -164.11145020]
[-5.53419256 -149.06974792]
[-11.97462559 -134.82002258]
[-5.31882811 -121.37753296]
[1.46541488 -107.99942017]
[8.37748051 -94.68688965]
[15.28954601 -81.37436676]
[28.02119637 -73.64427185]
[27.51350784 -57.83121490]
[34.42557526 -44.51868820]
[41.33763885 -31.20616150]
[48.24970627 -17.89363480]
[55.41550064 -4.71595097]
[62.83240128 8.32205486]
[70.24929810 21.36006165]
[77.66619873 34.39806747]
[85.08309937 47.43607330]
[92.50000000 60.47407913]
[107.50000000 60.47407913]
[114.91690063 47.43607330]
[122.33380127 34.39806747]
[117.90480804 19.22705650]
[125.57372284 5.40810871]
[140.79071045 1.13976204]
[154.52780151 8.95435047]
[158.63502502 24.21561623]
[150.67564392 37.86932373]
[135.37181091 41.81496811]
[127.95490265 54.85297394]
[120.53800964 67.89097595]
[134.99122620 86.20597839]
[135.94807434 109.20687866]
[150.93707275 109.78142548]
[165.92607117 110.35596466]
[180.91505432 110.93050385]
[195.90405273 111.50504303]
[210.89303589 112.07958984]
[225.88203430 112.65412903]
[240.87103271 113.22866821]
[255.86001587 113.80320740]
[270.84899902 114.37775421]
[285.83801270 114.95229340]
[300.83731079 115.09596252]
[315.83456421 114.80863953]
[329.48400879 106.80841827]
[342.35714722 114.30050659]
[357.35440063 114.01318359]
[372.34820557 113.58222961]
[387.33718872 113.00769043]
[402.93310547 106.35910797]
[413.63925171 119.50502014]
[403.97082520 133.43190002]
[387.91174316 127.99668121]
[372.92272949 128.57122803]
[366.32849121 131.98571777]
[357.64172363 129.01043701]
[342.64447021 129.29776001]
[330.06774902 137.27742004]
[316.12188721 129.80587769]
[301.12463379 130.09320068]
[298.40878296 132.41035461]
[294.41937256 133.50238037]
[289.75622559 132.77792358]
[285.26345825 129.94128418]
[270.27447510 129.36674500]
[255.28547668 128.79220581]
[240.29649353 128.21766663]
[225.30749512 127.64311981]
[210.31849670 127.06858063]
[195.32951355 126.49404144]
[180.34051514 125.91949463]
[165.35151672 125.34495544]
[150.36253357 124.77041626]
[135.37353516 124.19587708]
[124.86901093 134.90357971]
[125.73056030 149.87881470]
[126.59210968 164.85404968]
[130.22363281 173.28758240]
[127.32393646 180.12385559]
[127.89848328 195.11285400]
[128.47302246 210.10185242]
[129.04756165 225.09083557]
[129.62210083 240.07983398]
[133.09141541 248.58137512]
[130.06130981 255.36085510]
[130.34863281 270.35809326]
[144.24594116 276.66903687]
[154.02217102 288.39028931]
[157.73626709 303.19461060]
[154.65078735 318.14260864]
[145.37835693 330.26632690]
[131.76000977 337.15859985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 157]
[7 156]
[8 154]
[9 153]
[10 152]
[11 151]
[12 150]
[13 148]
[14 147]
[15 146]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[53 84]
[56 83]
[57 82]
[58 81]
[59 80]
[61 78]
[62 77]
[63 76]
[65 75]
[66 74]
[90 101]
[91 100]
[92 99]
[103 145]
[104 144]
[105 143]
[106 142]
[107 141]
[108 140]
[109 139]
[110 138]
[111 137]
[112 136]
[113 135]
[114 131]
[115 130]
[117 128]
[118 127]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
