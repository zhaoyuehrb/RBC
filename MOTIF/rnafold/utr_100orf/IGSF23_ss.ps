%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUACGGUGAGAGAAUGAGAGCAAAACCUCAGAGCCCCCUUCCCAGGAACCCUGUCCCAGCCUGGUCCCCACCCACCACCACCACUGACCCGAUGCUAGAGAAGGAUGCGGCUG\
) } def
/len { sequence length } bind def

/coor [
[22.43175507 228.30490112]
[32.88702393 239.06069946]
[39.80153275 252.37196350]
[42.58932877 267.11062622]
[41.01415634 282.02767944]
[35.20950699 295.85903931]
[25.66728783 307.43252563]
[13.19613552 315.76742554]
[-1.14710009 320.15737915]
[-16.14692307 320.23034668]
[-30.53219604 315.98019409]
[-43.08385849 307.76702881]
[-52.73824692 296.28692627]
[-58.67720795 282.51272583]
[-60.39745331 267.61169434]
[-57.75320435 252.84660339]
[-50.96854782 239.46868896]
[-40.61535645 228.60925293]
[-55.31221390 231.60963440]
[-70.00907135 234.61003113]
[-84.70593262 237.61041260]
[-91.00846100 251.78988647]
[-104.45862579 259.52764893]
[-119.88455963 257.84832764]
[-131.35469055 247.39768982]
[-134.45849609 232.19419861]
[-128.00251770 218.08392334]
[-114.46921539 210.49253845]
[-99.06240082 212.33909607]
[-87.70632172 222.91354370]
[-73.00946045 219.91316223]
[-58.31259918 216.91278076]
[-43.61574173 213.91239929]
[-38.20546341 208.52027893]
[-29.77440071 207.34458923]
[-18.15532684 197.85791016]
[-6.53625250 188.37123108]
[5.08282185 178.88455200]
[10.45512104 159.03254700]
[31.48667145 155.40864563]
[42.30470657 145.01777649]
[53.12274551 134.62692261]
[63.94078064 124.23605347]
[74.75881958 113.84518433]
[71.79280853 94.24146271]
[82.20548248 77.36901093]
[76.32598114 63.56932068]
[70.44647980 49.76963043]
[64.56698608 35.96994019]
[52.79606628 23.76822662]
[61.26241684 9.07954884]
[77.72077179 13.14879990]
[78.36667633 30.09043884]
[84.24617767 43.89013290]
[90.12567139 57.68982315]
[96.00517273 71.48951721]
[101.92282104 71.27528381]
[107.75912476 72.27632141]
[113.26715851 74.45026398]
[118.21389008 77.70514679]
[122.39005280 81.90325928]
[136.10957336 75.83902740]
[149.82908630 69.77479553]
[155.87260437 51.92846680]
[172.69779968 44.17420578]
[189.60520935 50.93841171]
[202.97943115 44.14650345]
[216.35365295 37.35459518]
[229.72789001 30.56268883]
[227.14457703 15.66913700]
[229.06762695 0.67602968]
[235.32606506 -13.08345604]
[245.36337280 -24.38583565]
[258.28704834 -32.22610855]
[272.94793701 -35.90712738]
[288.04238892 -35.10157394]
[302.22821045 -29.88107681]
[314.24404907 -20.70984268]
[323.02139282 -8.40336800]
[327.77984619 5.94406080]
[328.09622192 21.05668068]
[323.94241333 35.59069061]
[315.68780518 48.25373459]
[304.06634521 57.91981888]
[290.11145020 63.72945023]
[275.06393433 65.16603088]
[260.26184082 62.10183334]
[247.02134705 54.80931091]
[236.51979065 43.93691635]
[223.14556885 50.72882462]
[209.77134705 57.52073288]
[196.39710999 64.31263733]
[195.25619507 75.81735229]
[188.58526611 85.40715790]
[177.97871399 90.58415222]
[166.07337952 89.93043518]
[155.89331055 83.49430847]
[142.17379761 89.55854034]
[128.45428467 95.62277222]
[126.36016083 111.57360077]
[116.03446198 123.91030121]
[100.70162201 128.78044128]
[85.14968109 124.66322327]
[74.33164978 135.05409241]
[63.51361084 145.44494629]
[52.69557190 155.83581543]
[41.87753677 166.22668457]
[42.96640396 175.82695007]
[39.49058914 184.69288635]
[32.37771606 190.81393433]
[23.36355782 192.86756897]
[14.56950283 190.50363159]
[2.95042825 199.99031067]
[-8.66864586 209.47698975]
[-20.28772163 218.96366882]
[-5.33201551 217.81176758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 33]
[19 32]
[20 31]
[21 30]
[35 115]
[36 114]
[37 113]
[38 112]
[40 107]
[41 106]
[42 105]
[43 104]
[44 103]
[46 56]
[47 55]
[48 54]
[49 53]
[61 99]
[62 98]
[63 97]
[66 92]
[67 91]
[68 90]
[69 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
