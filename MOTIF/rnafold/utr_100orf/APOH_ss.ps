%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUGUCUUUUUAGCAGACGAAAACCACUUUGGUAGUGCCAGUGUGACUCAUCCACAAUGAUUUCUCCAGUGCUCAUCUUGUUCUCGAGUUUUCUCUGCCAUGUUGCUAUUGCAGGACGGACCUGUCCCAAGCCAGAUGAUUUACCAUUUUCCACAG\
) } def
/len { sequence length } bind def

/coor [
[166.96054077 211.84463501]
[160.41439819 198.34840393]
[153.86827087 184.85218811]
[147.32212830 171.35595703]
[141.54354858 166.68586731]
[140.78288269 157.52987671]
[134.50297546 143.90773010]
[119.01843262 151.27351379]
[102.37355042 153.47933960]
[86.20705414 150.52815247]
[72.04415894 142.92024231]
[61.15271759 131.58430481]
[54.43029022 117.76944733]
[52.33213043 102.90979767]
[54.84569931 88.47651672]
[61.51231003 75.83232117]
[50.29968262 65.86853027]
[39.08705902 55.90474701]
[27.87443542 45.94095993]
[16.66180992 35.97717285]
[8.12088013 32.59141922]
[5.32931805 25.70600128]
[-5.68551970 15.52399063]
[-16.70035744 5.34197903]
[-27.71519470 -4.84003210]
[-38.73003387 -15.02204323]
[-49.74486923 -25.20405388]
[-63.91696167 -30.11850739]
[-78.87071991 -28.94161987]
[-93.82447815 -27.76473427]
[-106.97505188 -18.96853638]
[-120.27014923 -25.68341446]
[-135.22390747 -24.50652885]
[-150.17767334 -23.32964134]
[-165.13142395 -22.15275574]
[-180.08518982 -20.97586823]
[-195.40110779 -13.70544434]
[-206.62727356 -26.41015434]
[-197.52677917 -40.71460724]
[-181.26206970 -35.92963028]
[-166.30831909 -37.10651398]
[-151.35455322 -38.28340149]
[-136.40080261 -39.46028900]
[-121.44703674 -40.63717651]
[-109.36605835 -49.34919357]
[-95.00136566 -42.71849442]
[-80.04760742 -43.89538193]
[-65.09384918 -45.07226562]
[-62.91671371 -52.24932098]
[-58.56244278 -66.60342407]
[-56.38530731 -73.78047943]
[-68.16506195 -83.06688690]
[-79.94481659 -92.35329437]
[-91.72457123 -101.63970184]
[-107.76130676 -101.18953705]
[-118.00149536 -113.53936005]
[-114.58974457 -129.21543884]
[-100.14324951 -136.19242859]
[-85.74413300 -129.11819458]
[-82.43815613 -113.41945648]
[-70.65840912 -104.13304901]
[-58.87865067 -94.84664154]
[-47.09889603 -85.56023407]
[-40.41634750 -88.96515656]
[-47.22599792 -102.33036041]
[-33.86069107 -109.13980865]
[-27.05125046 -95.77501678]
[-20.36870193 -99.17994690]
[-20.95759964 -114.16838074]
[-29.23072624 -127.65415192]
[-21.99906158 -140.67536926]
[-22.58795929 -155.66380310]
[-30.86108589 -169.14958191]
[-23.62942123 -182.17080688]
[-24.21831894 -197.15924072]
[-36.69273376 -206.58914185]
[-40.13686371 -221.84272766]
[-32.92449188 -235.71772766]
[-18.46108246 -241.66279602]
[-3.57581329 -236.87083435]
[4.70294523 -223.60449219]
[2.46621680 -208.12770081]
[-9.22988319 -197.74813843]
[-8.64098644 -182.75970459]
[-0.40998057 -170.34600830]
[-7.59952354 -156.25270081]
[-7.01062632 -141.26426697]
[1.22037923 -128.85057068]
[-5.96916342 -114.75727844]
[-5.38026619 -99.76884460]
[-39.56285858 -36.21889114]
[-28.54802132 -26.03688049]
[-17.53318405 -15.85486984]
[-6.51834583 -5.67285824]
[4.49649143 4.50915289]
[15.51132965 14.69116402]
[26.62559700 24.76454735]
[37.83822250 34.72833633]
[49.05084610 44.69211960]
[60.26346970 54.65590668]
[71.47609711 64.61969757]
[83.40100861 55.83737946]
[98.01792145 51.12850189]
[113.92064667 51.30647278]
[129.46371460 56.69607925]
[142.93252563 67.06614685]
[152.73109436 81.62131500]
[166.90318298 76.70686340]
[181.07527161 71.79241180]
[191.39207458 59.04503632]
[207.54557800 61.87287140]
[212.91842651 77.36688232]
[201.98352051 89.58816528]
[185.98973083 85.96450043]
[171.81764221 90.87895203]
[157.64555359 95.79341125]
[159.11579895 110.72117615]
[173.97434998 112.77636719]
[188.83288574 114.83155060]
[203.69142151 116.88673401]
[218.54997253 118.94191742]
[233.52949524 112.26765442]
[246.63854980 122.12080383]
[244.39166260 138.36529541]
[229.10023499 144.29019165]
[216.49478149 133.80046082]
[201.63624573 131.74526978]
[186.77769470 129.69009399]
[171.91915894 127.63490295]
[157.06062317 125.57971954]
[148.12513733 137.62783813]
[154.40502930 151.24998474]
[160.81835938 164.80981445]
[167.36448669 178.30604553]
[173.91062927 191.80226135]
[180.45677185 205.29849243]
[188.04162598 218.23950195]
[196.61845398 230.54553223]
[205.19526672 242.85154724]
[213.77209473 255.15757751]
[222.34890747 267.46359253]
[237.94917297 269.99484253]
[247.12245178 282.86444092]
[244.42640686 298.43707275]
[231.46054077 307.47378540]
[215.91728210 304.61325073]
[207.01817322 291.55255127]
[210.04289246 276.04040527]
[201.46606445 263.73440552]
[192.88925171 251.42837524]
[184.31242371 239.12234497]
[175.73561096 226.81632996]
[173.66314697 241.67247009]
[163.36396790 252.57783508]
[148.65048218 255.49560547]
[134.96914673 249.34573364]
[127.38433075 236.40469360]
[128.70368958 221.46282959]
[138.43882751 210.05113220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[6 132]
[7 131]
[16 101]
[17 100]
[18 99]
[19 98]
[20 97]
[22 96]
[23 95]
[24 94]
[25 93]
[26 92]
[27 91]
[28 48]
[29 47]
[30 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[51 63]
[52 62]
[53 61]
[54 60]
[68 90]
[69 89]
[71 87]
[72 86]
[74 84]
[75 83]
[107 116]
[108 115]
[109 114]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
[137 152]
[138 151]
[139 150]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
