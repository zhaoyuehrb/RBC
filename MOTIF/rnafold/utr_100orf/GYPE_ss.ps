%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGUCUUUGGUAGUUUUUUUGCACUAACUUCAGGAGCCAGCUCGUGAUCUCAGGAUGUAUGGAAAAAUAAUCUUUGUAUUACUAUUGUCAGGAAUUGUGAGCAUAUCAGCAUCAAGUACCACUGGUGUGGCAAUGCACACUUCAACCUCUUCUU\
) } def
/len { sequence length } bind def

/coor [
[72.36351776 131.48149109]
[60.60936356 140.80027771]
[48.85520172 150.11904907]
[37.10104370 159.43783569]
[25.34688568 168.75662231]
[19.33974075 183.39305115]
[4.55969954 185.23686218]
[-7.19445896 194.55564880]
[-18.94861794 203.87443542]
[-30.70277596 213.19322205]
[-30.18700790 228.58932495]
[-38.73592377 241.18969727]
[-52.89764786 246.27984619]
[-67.17028046 242.10491943]
[-78.92443848 251.42370605]
[-90.67859650 260.74249268]
[-102.43275452 270.06127930]
[-100.10771179 285.24316406]
[-105.70005798 299.54776001]
[-117.70548248 309.12719727]
[-132.89457703 311.40463257]
[-147.18156433 305.76748657]
[-156.72331238 293.73208618]
[-158.95314026 278.53591919]
[-153.27122498 264.26666260]
[-141.20599365 254.76269531]
[-126.00290680 252.58050537]
[-111.75154114 258.30712891]
[-99.99738312 248.98834229]
[-88.24322510 239.66955566]
[-76.48906708 230.35076904]
[-77.29846954 215.50210571]
[-69.11234283 202.87469482]
[-54.89418411 197.42517090]
[-40.02156067 201.43905640]
[-28.26740265 192.12026978]
[-16.51324463 182.80148315]
[-4.75908518 173.48269653]
[0.40732414 159.51283264]
[16.02810097 157.00247192]
[27.78225899 147.68368530]
[39.53641891 138.36489868]
[51.29057693 129.04611206]
[63.04473495 119.72732544]
[58.78645325 92.49650574]
[72.36886597 68.51382446]
[64.65329742 55.65030670]
[56.93773651 42.78678894]
[49.22217560 29.92327118]
[41.50661087 17.05975342]
[26.17365265 15.57429886]
[14.78850079 5.46332836]
[11.57811737 -9.23896503]
[17.56892776 -22.84955597]
[9.85336399 -35.71307373]
[2.13780022 -48.57659149]
[-5.57776308 -61.44010925]
[-13.29332638 -74.30362701]
[-20.43196106 -80.09395599]
[-21.03161049 -87.50262451]
[-28.48824501 -100.51794434]
[-35.94488144 -113.53326416]
[-51.26068115 -117.43220520]
[-59.26168060 -131.06156921]
[-55.20102692 -146.33529663]
[-41.48783493 -154.19175720]
[-26.25789452 -149.96983337]
[-18.54686356 -136.17434692]
[-22.92955780 -120.98989868]
[-15.47292328 -107.97457886]
[-8.01628780 -94.95925903]
[-0.42980912 -82.01918793]
[7.28575420 -69.15567017]
[15.00131798 -56.29215622]
[22.71688080 -43.42863846]
[30.43244553 -30.56511879]
[45.26066971 -29.44182587]
[56.71966934 -19.68707085]
[60.27908707 -4.88220835]
[54.37012863 9.34418964]
[62.08569336 22.20770645]
[69.80125427 35.07122421]
[77.51681519 47.93474197]
[85.23238373 60.79825974]
[94.77196503 58.43647385]
[104.59928131 58.36220932]
[114.17346954 60.57955170]
[122.96759796 64.96646881]
[130.49766541 71.28150940]
[136.34924316 79.17713165]
[140.20027161 88.21877289]
[141.83880615 97.90881348]
[156.71211243 99.85430145]
[171.58540344 101.79979706]
[181.48115540 88.58657837]
[196.59709167 82.18823242]
[212.78596497 84.25778198]
[225.65751648 94.13888550]
[231.76902771 109.06974030]
[246.67828369 110.71724701]
[261.58752441 112.36475372]
[276.15402222 106.18998718]
[287.95446777 115.27835846]
[302.86373901 116.92586517]
[317.77297974 118.57337189]
[332.68222046 120.22087860]
[341.82104492 107.95591736]
[355.77975464 101.95169067]
[370.77005005 103.72871399]
[382.77783203 112.71031189]
[388.63824463 126.40415192]
[403.54748535 128.05165100]
[418.45672607 129.69915771]
[433.36599731 131.34666443]
[448.27523804 132.99417114]
[463.18447876 134.64167786]
[473.52883911 123.07560730]
[488.70303345 119.83161926]
[502.87228394 126.15711212]
[510.58822632 139.61979675]
[508.88394165 155.04298401]
[498.41473389 166.49617004]
[483.20623779 169.57534790]
[469.10644531 163.09652710]
[461.53698730 149.55093384]
[446.62771606 147.90342712]
[431.71847534 146.25592041]
[416.80923462 144.60841370]
[401.89999390 142.96090698]
[386.99072266 141.31340027]
[378.28182983 153.39729309]
[364.60272217 159.54043579]
[349.58612061 158.00163269]
[337.27511597 149.09452820]
[331.03472900 135.13012695]
[316.12545776 133.48262024]
[301.21621704 131.83511353]
[286.30697632 130.18760681]
[272.80688477 136.48020935]
[259.94003296 127.27400208]
[245.03077698 125.62649536]
[230.12152100 123.97898865]
[222.75765991 135.51615906]
[211.07894897 142.77970886]
[197.34309387 144.29806519]
[184.23477173 139.71690369]
[174.34085083 129.87973022]
[169.63992310 116.67309570]
[154.76661682 114.72760010]
[139.89331055 112.78211212]
[135.54306030 122.17092896]
[129.02409363 130.20697021]
[120.73419952 136.39988708]
[111.17918396 140.37182617]
[100.94205475 141.88044739]
[90.64745331 140.83367920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 40]
[7 38]
[8 37]
[9 36]
[10 35]
[14 31]
[15 30]
[16 29]
[17 28]
[46 84]
[47 83]
[48 82]
[49 81]
[50 80]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[60 71]
[61 70]
[62 69]
[92 150]
[93 149]
[94 148]
[99 142]
[100 141]
[101 140]
[103 138]
[104 137]
[105 136]
[106 135]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
