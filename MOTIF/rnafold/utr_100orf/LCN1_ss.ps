%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCUCUCCCAGCCCCAGCAAGCGACCUGUCAGGCGGCCGUGGACUCAGACUCCGGAGAUGAAGCCCCUGCUCCUGGCCGUCAGCCUUGGCCUCAUUGCUGCCCUGCAGGCCCACCACCUCCUGGCCUCAGACGAGGAGAUUCAGGAUGUGUCAGGGA\
) } def
/len { sequence length } bind def

/coor [
[108.15518951 221.94595337]
[103.66687775 236.70597839]
[91.89640808 246.67892456]
[76.59969330 248.68244934]
[62.65785980 242.07722473]
[54.51969910 228.97097778]
[54.78206253 213.54585266]
[63.36123657 200.72393799]
[77.51963043 194.59667969]
[79.85169220 179.77906799]
[82.18375397 164.96145630]
[84.51581573 150.14385986]
[78.62322235 147.92910767]
[73.03820038 145.02474976]
[63.57188034 156.66041565]
[61.50526810 172.92881775]
[46.28048325 179.02291870]
[33.55948257 168.67361450]
[36.42853546 152.52738953]
[51.93621063 147.19409180]
[61.40253067 135.55842590]
[53.76229858 124.82420349]
[49.03645706 112.52529907]
[47.52287292 99.43692017]
[49.31695175 86.38403320]
[54.30560684 74.18936920]
[62.17440796 63.62156296]
[72.42737579 55.34670639]
[66.45136261 41.58853912]
[60.47534561 27.83036804]
[54.49932861 14.07219887]
[48.52331161 0.31402922]
[34.09525681 -5.55699682]
[28.23071671 -19.59486771]
[33.91675949 -33.31363297]
[27.94074059 -47.07180405]
[21.96472549 -60.82997131]
[15.98870850 -74.58814240]
[10.01269245 -88.34631348]
[4.03667593 -102.10448456]
[-8.55806732 -111.67960358]
[-6.53188705 -126.43575287]
[-12.50790310 -140.19392395]
[-18.48391914 -153.95208740]
[-24.45993614 -167.71026611]
[-25.81150627 -152.77127075]
[-29.82338333 -138.31773376]
[-39.25103378 -126.65071106]
[-52.54013824 -119.69372559]
[-67.49975586 -118.59375763]
[-81.66351318 -123.53215790]
[-92.69627380 -133.69474792]
[-98.77909088 -147.40603638]
[-98.90908813 -162.40547180]
[-93.06484222 -176.22013855]
[-82.20742035 -186.57395935]
[-69.22329712 -179.06312561]
[-77.01705933 -191.87942505]
[-84.81081390 -204.69570923]
[-92.60457611 -217.51200867]
[-107.79000092 -215.97395325]
[-122.13600159 -221.18499756]
[-132.79417419 -232.11048889]
[-137.64831543 -246.58114624]
[-135.73464966 -261.72381592]
[-127.43312836 -274.53192139]
[-114.39202881 -282.46240234]
[-99.20066071 -283.94064331]
[-84.87528992 -278.67312622]
[-74.26023102 -267.70574951]
[-69.46310425 -253.21609497]
[-71.43638611 -238.08106995]
[-79.78828430 -225.30575562]
[-71.99452972 -212.48947144]
[-64.20076752 -199.67318726]
[-56.40700912 -186.85688782]
[-41.61220169 -189.33352661]
[-26.81870842 -191.80992126]
[-23.62372971 -206.46571350]
[-20.42874908 -221.12149048]
[-17.23377037 -235.77728271]
[-14.03879166 -250.43307495]
[-23.74451256 -262.69412231]
[-23.24661255 -278.32376099]
[-12.78018284 -289.94219971]
[2.71284604 -292.06353760]
[15.91714096 -283.68612671]
[20.59803772 -268.76556396]
[14.54535961 -254.34686279]
[0.61699617 -247.23809814]
[-2.57798290 -232.58230591]
[-5.77296209 -217.92651367]
[-8.96794128 -203.27073669]
[-12.16292095 -188.61494446]
[-10.70176601 -173.68627930]
[-4.72574997 -159.92810059]
[1.25026631 -146.16993713]
[7.22628260 -132.41177368]
[19.39358139 -123.82071686]
[17.79484558 -108.08049774]
[23.77086258 -94.32232666]
[29.74687767 -80.56415558]
[35.72289276 -66.80599213]
[41.69890976 -53.04781723]
[47.67492676 -39.28964996]
[61.58211899 -34.08142471]
[67.83863831 -20.21381760]
[62.28148270 -5.66198730]
[68.25749969 8.09618282]
[74.23351288 21.85435104]
[80.20953369 35.61252213]
[86.18554688 49.37068939]
[105.85831451 47.84785461]
[124.70293427 53.69739532]
[140.05546570 66.09239960]
[149.74565125 83.28068542]
[152.40365601 102.83245850]
[147.65373230 121.98382568]
[160.23643494 130.14932251]
[172.81915283 138.31481934]
[188.60731506 139.33674622]
[195.07164001 152.75546265]
[207.65435791 160.92095947]
[220.23706055 169.08644104]
[232.81977844 177.25193787]
[245.40249634 185.41743469]
[257.98519897 193.58293152]
[270.87692261 201.25128174]
[284.05801392 208.41079712]
[297.23910522 215.57032776]
[310.42019653 222.72984314]
[326.79080200 221.76257324]
[335.58663940 235.60328674]
[327.75927734 250.01387024]
[311.36087036 250.16993713]
[303.26068115 235.91094971]
[290.07958984 228.75141907]
[276.89849854 221.59188843]
[263.71740723 214.43237305]
[260.95468140 215.13758850]
[257.73965454 214.76266479]
[254.49298096 213.12721252]
[251.69345093 210.21018982]
[249.81971741 206.16564941]
[237.23699951 198.00015259]
[224.65428162 189.83465576]
[212.07157898 181.66915894]
[199.48886108 173.50366211]
[186.90614319 165.33816528]
[172.01797485 164.90029907]
[164.65365601 150.89752197]
[152.07093811 142.73204041]
[139.48823547 134.56654358]
[131.15728760 142.23019409]
[121.37677765 147.92910767]
[110.60172272 151.39814758]
[99.33342743 152.47592163]
[97.00136566 167.29351807]
[94.66930389 182.11112976]
[92.33724213 196.92874146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 160]
[10 159]
[11 158]
[12 157]
[14 21]
[15 20]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[40 100]
[42 98]
[43 97]
[44 96]
[45 95]
[57 76]
[58 75]
[59 74]
[60 73]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[118 153]
[119 152]
[120 151]
[122 149]
[123 148]
[124 147]
[125 146]
[126 145]
[127 144]
[128 139]
[129 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
