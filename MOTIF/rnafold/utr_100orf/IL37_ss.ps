%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAUUCCAUUUUCUGUUGAGUAAUAAACUCAACGUUGAAAAUGUCCUUUGUGGGGGAGAACUCAGGAGUGAAAAUGGGCUCUGAGGACUGGGAAAAAGAUGAACCCCAGUGCUGCUUAGAAGACCCGGCUGGAAGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.02775574 113.61808014]
[72.05477905 104.76506042]
[57.12802124 103.28456116]
[42.20126343 101.80405426]
[27.27450371 100.32354736]
[12.34774590 98.84304047]
[-2.57901192 97.36254120]
[-17.50576973 95.88203430]
[-32.43252945 94.40152740]
[-61.20935822 124.91390228]
[-75.11437225 130.53977966]
[-89.01938629 136.16567993]
[-102.92440033 141.79156494]
[-116.82940674 147.41744995]
[-130.73442078 153.04333496]
[-144.51249695 158.97332764]
[-158.15696716 165.20455933]
[-171.80145264 171.43577576]
[-185.44593811 177.66700745]
[-199.09040833 183.89822388]
[-212.73489380 190.12945557]
[-226.37937927 196.36067200]
[-240.02384949 202.59190369]
[-246.95497131 217.06045532]
[-262.62014771 220.52192688]
[-275.00241089 210.32098389]
[-274.60311890 194.28289795]
[-261.72860718 184.71072388]
[-246.25508118 188.94741821]
[-232.61059570 182.71620178]
[-218.96612549 176.48497009]
[-205.32164001 170.25375366]
[-191.67715454 164.02252197]
[-178.03268433 157.79129028]
[-164.38819885 151.56007385]
[-150.74371338 145.32884216]
[-148.24523926 141.17601013]
[-143.07492065 138.59040833]
[-136.36030579 139.13832092]
[-122.45529938 133.51243591]
[-108.55028534 127.88655090]
[-94.64527130 122.26065826]
[-80.74025726 116.63477325]
[-66.83524323 111.00888824]
[-65.52387238 103.62442017]
[-61.58974457 81.47103119]
[-72.70746613 71.40146637]
[-83.82519531 61.33189774]
[-94.94291687 51.26232910]
[-106.06063843 41.19276047]
[-122.19669342 38.26702499]
[-127.47549438 22.74071503]
[-116.46667480 10.58596802]
[-100.49515533 14.30654526]
[-95.99107361 30.07503510]
[-84.87335205 40.14460373]
[-73.75562286 50.21417236]
[-62.63790131 60.28374100]
[-51.52017593 70.35330963]
[-56.20222473 56.10274887]
[-51.18141174 41.96799088]
[-38.55887222 33.86419678]
[-23.61693001 35.18267441]
[-12.60854721 45.37166595]
[-10.14055443 60.16724014]
[-17.24576569 73.37769318]
[-30.95202255 79.47476959]
[-16.02526474 80.95527649]
[-1.09850681 82.43578339]
[13.82825089 83.91628265]
[28.75500870 85.39678955]
[43.68176651 86.87729645]
[58.60852432 88.35780334]
[73.53528595 89.83830261]
[84.78874969 74.35769653]
[104.15927124 68.99713898]
[123.53963470 77.23536682]
[134.04212952 96.58817291]
[148.78135681 93.80335236]
[163.52056885 91.01853180]
[178.22831726 88.07198334]
[192.90281677 84.96405029]
[207.54228210 81.69512177]
[222.14495850 78.26557922]
[236.74765015 74.83603668]
[251.22940063 70.92723083]
[265.57449341 66.54341125]
[276.51089478 55.11074829]
[290.94378662 58.79063034]
[305.28887939 54.40680695]
[319.63400269 50.02298355]
[333.97909546 45.63915634]
[348.32418823 41.25533295]
[362.66931152 36.87150955]
[364.93267822 21.77714157]
[373.52822876 9.16446495]
[386.74923706 1.53773272]
[401.97073364 0.41123864]
[416.17044067 6.00864887]
[426.52902222 17.21859360]
[430.98974609 31.81533051]
[428.66693115 46.90066528]
[420.02178955 59.47939682]
[406.77084351 67.05400848]
[391.54504395 68.12055206]
[377.36746216 62.46726227]
[367.05313110 51.21661377]
[352.70803833 55.60043716]
[338.36291504 59.98426437]
[324.01782227 64.36808777]
[309.67269897 68.75191498]
[295.32760620 73.13573456]
[285.41726685 84.25483704]
[269.95834351 80.88851929]
[255.61322021 85.27233887]
[253.63101196 88.27656555]
[250.05751038 90.43750000]
[245.32080078 91.00060272]
[240.17718506 89.43872070]
[225.57450867 92.86825562]
[210.97183228 96.29779816]
[205.13418579 100.92499542]
[196.01074219 99.63854980]
[181.33625793 102.74647522]
[175.39837646 107.24431610]
[166.30538940 105.75775909]
[151.56616211 108.54257965]
[136.82695007 111.32740021]
[129.71061707 124.53186798]
[135.48890686 138.37425232]
[141.26719666 152.21662903]
[147.04548645 166.05900574]
[158.72673035 178.34658813]
[150.15304565 192.97286987]
[133.72492981 188.78320312]
[133.20310974 171.83728027]
[127.42481995 157.99490356]
[121.64653015 144.15252686]
[115.86824799 130.31015015]
[105.56582642 132.76596069]
[95.31428528 131.91583252]
[86.11845398 128.03176880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[78 128]
[79 127]
[80 126]
[81 124]
[82 123]
[83 121]
[84 120]
[85 119]
[86 115]
[87 114]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
