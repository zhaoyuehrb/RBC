%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCGGGACGUGGCAAGCAGGGCGGCAAAGCUCGCGCCAAGGCUAAGACCCGUUCUUCAAGGGCGGGUCUUCAGUUCCCAGUGGGCCGAGUGCACCGAC\
) } def
/len { sequence length } bind def

/coor [
[113.56401062 429.97540283]
[100.67768097 418.95822144]
[107.69703674 403.52560425]
[108.62958527 388.55462646]
[109.56212616 373.58364868]
[110.49466705 358.61267090]
[111.42721558 343.64169312]
[101.46829224 327.19076538]
[112.40959930 310.40170288]
[112.40959930 295.40170288]
[104.67229462 282.67443848]
[112.40959930 268.87426758]
[112.40959930 253.87426758]
[112.40959930 238.87426758]
[112.40959930 223.87426758]
[101.72872162 213.55657959]
[101.51504517 198.34445190]
[112.40959930 187.21131897]
[112.40959930 172.21131897]
[104.67229462 159.48405457]
[112.40959930 145.68388367]
[112.40959930 130.68388367]
[112.40959930 115.68387604]
[92.59141541 116.54694366]
[83.76878357 100.96678925]
[70.07192993 94.85153961]
[56.37508392 88.73628235]
[43.52459335 97.27258301]
[28.09867096 97.48342896]
[15.01967239 89.30153656]
[8.46105957 75.33771515]
[10.51566124 60.04778290]
[20.52786255 48.31068802]
[35.30280304 43.87170029]
[50.12585831 48.14728165]
[60.26704025 59.77311325]
[62.49033737 75.03943634]
[76.18718719 81.15468597]
[89.88403320 87.26994324]
[99.33676147 82.50605774]
[110.52184296 84.47689056]
[118.84439850 93.30144501]
[126.81076813 80.59172821]
[134.77713013 67.88200378]
[142.74349976 55.17228317]
[150.51124573 42.34020996]
[158.07849121 29.38888359]
[165.64573669 16.43755913]
[173.21298218 3.48623323]
[180.78021240 -9.46509266]
[188.34745789 -22.41641808]
[195.91470337 -35.36774445]
[203.48194885 -48.31906891]
[211.04919434 -61.27039337]
[218.61643982 -74.22171783]
[226.18367004 -87.17304230]
[233.75091553 -100.12437439]
[236.52095032 -116.85049438]
[253.36022949 -118.81896973]
[259.91336060 -103.18270111]
[246.70223999 -92.55712891]
[239.13500977 -79.60580444]
[231.56776428 -66.65447998]
[224.00051880 -53.70315170]
[216.43327332 -40.75182724]
[208.86602783 -27.80050087]
[201.29878235 -14.84917545]
[193.73155212 -1.89784956]
[186.16430664 11.05347633]
[178.59706116 24.00480080]
[171.02981567 36.95612717]
[163.46257019 49.90745163]
[162.79431152 57.40271378]
[155.45321655 63.13865280]
[147.48686218 75.84837341]
[139.52049255 88.55809021]
[131.55412292 101.26781464]
[127.40959930 115.68387604]
[127.40959930 130.68388367]
[127.40959930 145.68388367]
[135.14689636 159.48405457]
[127.40959930 172.21131897]
[127.40959930 187.21131897]
[138.30415344 198.34445190]
[138.09046936 213.55657959]
[127.40959930 223.87426758]
[127.40959930 238.87426758]
[127.40959930 253.87426758]
[127.40959930 268.87426758]
[135.14689636 282.67443848]
[127.40959930 295.40170288]
[127.40959930 310.40170288]
[135.68632507 317.79776001]
[138.37200928 328.33901978]
[134.79203796 338.37585449]
[126.39820099 344.57421875]
[125.46565247 359.54519653]
[124.53311157 374.51620483]
[123.60056305 389.48718262]
[122.66802216 404.45816040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[9 92]
[10 91]
[12 89]
[13 88]
[14 87]
[15 86]
[18 83]
[19 82]
[21 80]
[22 79]
[23 78]
[25 39]
[26 38]
[27 37]
[42 77]
[43 76]
[44 75]
[45 74]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
