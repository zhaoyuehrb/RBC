%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCGGGCAGGAUAAAGGCCUGGGUGAGGCGGCUCACCUACCCUGCUUUCUGCAUUCUUCUCUCCACAUCCCUCUCUGUACUUACAGCCCCCAAUGGCCCCCAAAAAGCCAGAGCCCAAGAAGGAUGAUGCCAAGGCAGCCCCCAAGGCAGCUCCAGCUCCCGCACCUCCCCCUGAGCCUGAGCGCCCUAAGG\
) } def
/len { sequence length } bind def

/coor [
[79.04857635 245.08195496]
[71.18230438 231.89039612]
[70.98173523 216.53280640]
[78.50082397 203.14031982]
[91.71697235 195.31542969]
[91.47407532 180.31739807]
[91.23117828 165.31936646]
[90.98828888 150.32133484]
[77.66757965 143.42504883]
[65.28051758 151.88439941]
[52.89345551 160.34375000]
[40.50639343 168.80310059]
[39.92603683 184.19691467]
[30.50275040 196.15748596]
[16.01491737 200.22769165]
[2.07529473 195.04841614]
[-10.31176758 203.50778198]
[-22.69882965 211.96713257]
[-25.85367203 224.48312378]
[-36.35692978 231.27235413]
[-48.27479172 229.14930725]
[-60.79721451 237.40696716]
[-73.31963348 245.66462708]
[-85.84205627 253.92228699]
[-98.36447144 262.17996216]
[-110.88689423 270.43762207]
[-123.40931702 278.69528198]
[-135.93173218 286.95294189]
[-142.78625488 301.85083008]
[-159.13821411 303.09396362]
[-168.16612244 289.40350342]
[-160.58283997 274.86300659]
[-144.18939209 274.43051147]
[-131.66697693 266.17285156]
[-119.14455414 257.91519165]
[-106.62213898 249.65753174]
[-94.09971619 241.39987183]
[-81.57729340 233.14221191]
[-69.05487823 224.88453674]
[-56.53245544 216.62687683]
[-49.54085541 200.53738403]
[-31.15818405 199.58006287]
[-18.77112198 191.12071228]
[-6.38406038 182.66136169]
[-6.13553047 167.79272461]
[2.92781401 155.77940369]
[17.49749374 151.35472107]
[32.04703522 156.41604614]
[44.43409729 147.95669556]
[56.82115936 139.49732971]
[69.20822144 131.03797913]
[62.75193024 94.06609344]
[85.76537323 71.65898132]
[82.39373779 57.04282379]
[79.02209473 42.42666626]
[75.65045929 27.81050873]
[72.27882385 13.19435024]
[68.90718842 -1.42180789]
[65.53555298 -16.03796577]
[62.16391754 -30.65412331]
[58.79228210 -45.27028275]
[54.94911575 -59.76959610]
[50.63845062 -74.13685608]
[46.32778168 -88.50411224]
[43.22271729 -73.82901001]
[39.56830215 -59.28098297]
[30.32588768 -47.46667480]
[17.08513260 -40.41810608]
[2.12338090 -39.34758759]
[-11.98601246 -44.43925095]
[-22.81629753 -54.81734848]
[-28.50471306 -68.69689941]
[-28.07288170 -83.69068146]
[-21.59507179 -97.21983337]
[-10.18434143 -106.95800781]
[2.45396423 -98.87882233]
[-4.76382494 -112.02809906]
[-11.98161411 -125.17737579]
[-19.19940376 -138.32666016]
[-33.49410248 -146.36366272]
[-33.41061020 -162.76260376]
[-19.03481293 -170.65364075]
[-5.15530062 -161.91915894]
[-6.05012512 -145.54444885]
[1.16766429 -132.39517212]
[8.38545322 -119.24588776]
[15.60324287 -106.09661102]
[23.01466560 -107.24587250]
[20.71614456 -122.06871796]
[13.94977570 -135.45588684]
[24.59093857 -146.02781677]
[37.93365479 -139.17420959]
[35.53899002 -124.36724091]
[37.83751297 -109.54438782]
[45.24893570 -110.69364929]
[48.14550781 -125.41132355]
[51.04207611 -140.12899780]
[53.93864441 -154.84666443]
[42.74421310 -165.46214294]
[39.08820724 -180.45004272]
[44.13725281 -195.02778625]
[56.28021240 -204.54367065]
[71.64231110 -205.96121216]
[85.32156372 -198.82807922]
[92.95296478 -185.42042542]
[92.10136414 -170.01658630]
[83.03850555 -157.53186035]
[68.65631866 -151.95010376]
[65.75975037 -137.23242188]
[62.86317825 -122.51475525]
[59.96660995 -107.79708099]
[60.69504166 -92.81478119]
[65.00570679 -78.44751740]
[69.31637573 -64.08026123]
[71.73352814 -62.63404465]
[73.71917725 -60.13640976]
[74.86742401 -56.74843979]
[74.83872986 -52.77592087]
[73.40843964 -48.64191818]
[76.78007507 -34.02576065]
[80.15171051 -19.40960121]
[83.52334595 -4.79344368]
[86.89498138 9.82271385]
[90.26661682 24.43887138]
[93.63825226 39.05503082]
[97.00989532 53.67118835]
[100.38153076 68.28734589]
[112.93495178 67.22203064]
[126.12722778 71.36840057]
[140.00854492 65.68430328]
[153.88986206 60.00020218]
[163.49223328 46.70634079]
[179.77647400 48.64424515]
[185.99076843 63.82036209]
[175.74237061 76.62281036]
[159.57397461 73.88151550]
[145.69264221 79.56562042]
[131.81132507 85.24971771]
[135.06451416 99.89270020]
[150.04681396 99.16426849]
[165.02911377 98.43582916]
[176.83050537 87.56813812]
[192.66261292 90.16123962]
[200.38038635 104.22592926]
[194.06341553 118.97297668]
[178.55755615 123.08971405]
[165.75755310 113.41813660]
[150.77525330 114.14656830]
[135.79293823 114.87500000]
[133.71139526 123.75579071]
[129.38143921 132.37623596]
[140.73213196 142.18244934]
[152.08282471 151.98866272]
[163.43351746 161.79487610]
[178.98037720 160.82907104]
[190.35189819 170.93566895]
[191.17683411 185.76316833]
[202.52752686 195.56938171]
[213.87821960 205.37559509]
[225.22891235 215.18180847]
[238.79618835 208.32635498]
[253.95457458 207.18969727]
[268.39251709 211.94517517]
[279.90829468 221.86761475]
[286.74591064 235.44389343]
[287.86260986 250.60375977]
[283.08816528 265.03543091]
[273.15057373 276.53817749]
[259.56530762 283.35791016]
[244.40399170 284.45468140]
[229.97862244 279.66122437]
[218.48896790 269.70852661]
[211.68710327 256.11428833]
[210.61027527 240.95155334]
[215.42269897 226.53250122]
[204.07200623 216.72628784]
[192.72131348 206.92007446]
[181.37062073 197.11386108]
[166.58050537 198.45106506]
[154.92959595 188.66786194]
[153.62730408 173.14556885]
[142.27661133 163.33935547]
[130.92591858 153.53314209]
[119.57522583 143.72692871]
[105.98632050 150.07843018]
[106.22921753 165.07646179]
[106.47210693 180.07449341]
[106.71500397 195.07252502]
[120.17761230 202.46534729]
[128.12643433 215.60734558]
[128.42327881 230.96336365]
[120.98828888 244.40272522]
[107.82145691 252.31031799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 188]
[6 187]
[7 186]
[8 185]
[9 51]
[10 50]
[11 49]
[12 48]
[16 44]
[17 43]
[18 42]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[53 127]
[54 126]
[55 125]
[56 124]
[57 123]
[58 122]
[59 121]
[60 120]
[61 119]
[62 114]
[63 113]
[64 112]
[76 87]
[77 86]
[78 85]
[79 84]
[95 111]
[96 110]
[97 109]
[98 108]
[129 138]
[130 137]
[131 136]
[139 149]
[140 148]
[141 147]
[151 184]
[152 183]
[153 182]
[154 181]
[157 178]
[158 177]
[159 176]
[160 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
