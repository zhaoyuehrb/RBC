%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAUUACCCAGCAACAACUCCACUUCCCCAGUCUUUGAAUUCUUCCUCAUUUGUUUCCCCAGUUUCCAGAGCUGGCAGCACUGGCUGUCUCUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.10634613 263.08572388]
[99.36035919 249.11627197]
[111.39710999 239.66242981]
[108.61389923 224.92289734]
[105.83068085 210.18336487]
[103.04746246 195.44384766]
[94.72537994 191.55166626]
[89.12768555 184.09164429]
[87.67431641 174.73788452]
[90.83612823 165.66781616]
[97.99401093 159.05535889]
[96.59632111 144.12062073]
[95.19863129 129.18586731]
[93.80094147 114.25113678]
[83.44464111 103.40000153]
[68.59133911 101.30727386]
[53.73804092 99.21453857]
[41.19384384 108.44930267]
[26.16029739 106.11538696]
[17.43367004 94.09950256]
[2.58037138 92.00676727]
[-12.27292728 89.91403961]
[-21.66964722 102.06299591]
[-35.88800430 107.87109375]
[-51.10332489 105.77597809]
[-63.22277069 96.34121704]
[-68.98626709 82.10472870]
[-66.84346771 66.89604950]
[-57.37076950 54.80623627]
[-43.11628342 49.08739090]
[-27.91439438 51.27785110]
[-15.85433388 60.78839874]
[-10.18019772 75.06073761]
[4.67310143 77.15347290]
[19.52639961 79.24620056]
[31.23332024 70.10926056]
[46.32648849 72.01999664]
[55.83077240 84.36124420]
[70.68407440 86.45397186]
[85.53736877 88.54670715]
[71.76989746 82.59214783]
[61.16079712 71.98804474]
[55.19974899 58.22338104]
[54.72378159 43.23093796]
[59.79972458 29.11588097]
[69.71483612 17.86019135]
[83.07688141 11.04434586]
[98.00962067 9.62539482]
[112.41625214 13.80258274]
[124.27386475 22.98936653]
[131.91746521 35.89577484]
[134.27377319 50.70954514]
[131.01191711 65.35059357]
[122.58991241 77.76308441]
[110.18766785 86.20526886]
[123.88452148 80.09001923]
[137.58135986 73.97476196]
[151.27821350 67.85950470]
[154.65744019 57.28658295]
[163.18800354 50.53673172]
[173.81236267 49.71383286]
[182.89427185 54.85146332]
[196.94480896 49.59956360]
[210.99534607 44.34766769]
[225.04588318 39.09577179]
[239.09642029 33.84387589]
[253.14695740 28.59197807]
[267.19747925 23.34008217]
[279.91705322 12.13076115]
[294.20944214 21.25019646]
[289.40292358 37.50854111]
[272.44937134 37.39061737]
[258.39883423 42.64251328]
[244.34831238 47.89441299]
[230.29777527 53.14630890]
[216.24723816 58.39820480]
[202.19670105 63.65010071]
[188.14616394 68.90200043]
[177.18453979 84.70249176]
[157.39346313 81.55635834]
[143.69662476 87.67160797]
[129.99977112 93.78686523]
[116.30292511 99.90211487]
[108.73567963 112.85344696]
[110.13336945 127.78818512]
[111.53105927 142.72293091]
[112.92874908 157.65766907]
[126.51764679 174.07057190]
[117.78699493 192.66062927]
[120.57020569 207.40014648]
[123.35342407 222.13967896]
[126.13664246 236.87921143]
[140.79194641 241.29287720]
[151.70932007 252.01992798]
[156.38003540 266.59536743]
[153.73077393 281.66983032]
[144.37033081 293.77935791]
[130.44966125 300.14126587]
[115.16764832 299.29360962]
[102.03597260 291.43118286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[11 87]
[12 86]
[13 85]
[14 84]
[15 40]
[16 39]
[17 38]
[20 35]
[21 34]
[22 33]
[55 83]
[56 82]
[57 81]
[58 80]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
