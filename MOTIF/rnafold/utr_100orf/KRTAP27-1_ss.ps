%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAUCUUUAAGGAUUUUUAGCAAUAUGCCUCAUAGCCACUGCCAUUCACUCAGGAGCUUCCACAAUGCCCCACCACUCUCUGCCAUCACACAUGGCACUAAUCCUAUAACCUUUGAAGACAGAU\
) } def
/len { sequence length } bind def

/coor [
[85.14063263 387.55212402]
[73.69583893 377.38967896]
[68.29554749 363.06851196]
[70.18070221 347.87954712]
[78.91812134 335.31307983]
[92.50000000 328.25680542]
[92.50000000 313.25680542]
[92.50000000 298.25680542]
[92.50000000 283.25680542]
[92.50000000 268.25680542]
[92.50000000 253.25679016]
[92.50000000 238.25679016]
[92.50000000 223.25679016]
[92.50000000 208.25679016]
[72.52681732 204.98098755]
[53.50937271 198.05307007]
[36.10926056 187.71406555]
[20.93179512 174.32363892]
[8.50497437 158.34761047]
[-0.73889226 140.34178162]
[-6.47822809 120.93253326]
[-8.51337147 100.79507446]
[-23.48469734 99.86802673]
[-38.45602417 98.94098663]
[-46.46030807 110.23703003]
[-58.91415787 116.03148651]
[-72.49410248 114.89679718]
[-83.63463593 107.23892975]
[-89.46435547 95.16233826]
[-104.40817261 93.86526489]
[-116.34522247 104.22299194]
[-132.10388184 103.02291870]
[-142.33482361 90.97702789]
[-140.96820068 75.23194122]
[-128.81481934 65.12892914]
[-113.08506012 66.66193390]
[-103.11110687 78.92145538]
[-88.16728973 80.21852112]
[-77.85778809 67.50744629]
[-61.85284042 63.36695862]
[-46.36549759 69.60747528]
[-37.52897644 83.96965790]
[-22.55765343 84.89670563]
[-7.58632708 85.82374573]
[-4.92846012 72.32686615]
[-0.58445406 59.27468109]
[5.37588549 46.87692642]
[12.85677910 35.33282852]
[21.73801231 24.82789612]
[31.87687111 15.53093338]
[43.11042786 7.59133911]
[55.25816727 1.13669825]
[68.12488556 -3.72926712]
[81.50381470 -6.92836380]
[95.17996216 -8.40918446]
[95.55097961 -23.40459442]
[88.15738678 -37.39192200]
[96.20712280 -49.92392349]
[96.57814026 -64.91933441]
[83.75265503 -73.49316406]
[77.61949158 -87.64900208]
[80.13571930 -102.86978149]
[90.49842072 -114.29860687]
[105.40089417 -118.28857422]
[120.08781433 -113.56650543]
[129.87263489 -101.63919067]
[131.63307190 -86.31259918]
[124.80735016 -72.47738647]
[111.57354736 -64.54831696]
[111.20252991 -49.55290604]
[118.62266541 -36.63814926]
[110.54639435 -23.03357887]
[110.17537689 -8.03816795]
[123.00872040 -6.04896402]
[135.51254272 -2.54093695]
[147.50773621 2.43567133]
[158.82255554 8.80958652]
[169.29490662 16.48952293]
[178.77482605 25.36548805]
[187.12654114 35.31035995]
[194.23043823 46.18171310]
[199.98477173 57.82384491]
[204.30714417 70.07002258]
[218.97677612 66.93924713]
[233.64642334 63.80847549]
[248.31605530 60.67770386]
[262.98568726 57.54693222]
[277.65533447 54.41616058]
[287.55334473 41.79042435]
[303.59637451 41.80106735]
[313.47763062 54.43991852]
[309.61700439 70.01153564]
[294.97607422 76.57070923]
[280.78610229 69.08579254]
[266.11645508 72.21656799]
[251.44682312 75.34734344]
[236.77719116 78.47811127]
[222.10755920 81.60888672]
[207.43791199 84.73966217]
[208.48565674 97.42215729]
[208.04148865 110.14010620]
[206.11149597 122.71860504]
[202.72222900 134.98468018]
[197.92030334 146.76962280]
[191.77175903 157.91139221]
[184.36114502 168.25672913]
[175.79037476 177.66340637]
[166.17730713 186.00202942]
[155.65415955 193.15792847]
[144.36564636 199.03268433]
[132.46699524 203.54553223]
[120.12185669 206.63439941]
[107.50000000 208.25679016]
[107.50000000 223.25679016]
[107.50000000 238.25679016]
[107.50000000 253.25679016]
[107.50000000 268.25680542]
[107.50000000 283.25680542]
[107.50000000 298.25680542]
[107.50000000 313.25680542]
[107.50000000 328.25680542]
[121.08187866 335.31307983]
[129.81929016 347.87954712]
[131.70445251 363.06851196]
[126.30416107 377.38967896]
[114.85936737 387.55212402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 114]
[14 113]
[22 44]
[23 43]
[24 42]
[29 38]
[30 37]
[55 73]
[56 72]
[58 70]
[59 69]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
