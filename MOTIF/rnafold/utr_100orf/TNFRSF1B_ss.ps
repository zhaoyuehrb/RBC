%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGCGCAGCGGAGCCUGGAGAGAAGGCGCUGGGCUGCGAGGGCGCGAGGGCGCGAGGGCAGGGGGCAACCGGACCCCGCCCGCACCCAUGGCGCCCGUCGCCGUCUGGGCCGCGCUGGCCGUCGGACUGGAGCUCUGGGCUGCGGCGCACGCCUUGCCCGCCCAGGUGGCAUUUACACCCUACGCCC\
) } def
/len { sequence length } bind def

/coor [
[63.97753906 165.28955078]
[63.48158646 150.29774475]
[62.98563766 135.30595398]
[48.75859833 130.55291748]
[39.35095215 142.23606873]
[29.94330788 153.91923523]
[27.31457329 169.52052307]
[13.30592155 174.58085632]
[3.89827585 186.26400757]
[-5.50936937 197.94717407]
[-14.91701508 209.63032532]
[-15.72129440 214.82420349]
[-18.19858551 218.78532410]
[-21.59444618 221.08135986]
[-25.09234047 221.64431763]
[-35.06771088 232.84663391]
[-45.04307938 244.04896545]
[-55.01844788 255.25128174]
[-52.57792282 270.69723511]
[-60.68110657 284.07156372]
[-75.50192261 289.05929565]
[-90.04243469 283.30538940]
[-97.43705750 269.52664185]
[-94.19427490 254.22898865]
[-81.84523010 244.63548279]
[-66.22077179 245.27590942]
[-56.24539948 234.07359314]
[-46.27003098 222.87126160]
[-36.29466248 211.66894531]
[-26.60017395 200.22268677]
[-17.19252968 188.53952026]
[-7.78488350 176.85636902]
[1.62276196 165.17320251]
[3.57859874 150.40757751]
[18.26014709 144.51158142]
[27.66779327 132.82843018]
[37.07543945 121.14526367]
[36.08407974 106.17806244]
[25.21770096 95.83776093]
[14.35132408 85.49745941]
[3.48494554 75.15715790]
[-7.46654701 64.90704346]
[-18.50240517 54.74782181]
[-29.53826523 44.58860016]
[-40.57412338 34.42937469]
[-51.60998154 24.27015114]
[-62.64583969 14.11092854]
[-80.09925842 15.15831375]
[-92.66889954 3.49500751]
[-92.91785431 -13.31286049]
[-104.12017822 -23.28822899]
[-115.32250214 -33.26359940]
[-130.77426147 -36.66267014]
[-135.13375854 -50.90499878]
[-146.33609009 -60.88036728]
[-152.75050354 -62.59840012]
[-156.72595215 -66.69115448]
[-157.73687744 -71.37553406]
[-168.60325623 -81.71583557]
[-179.46963501 -92.05613708]
[-190.33601379 -102.39643860]
[-198.72615051 -106.05429077]
[-201.29478455 -112.99867249]
[-211.98870850 -123.51722717]
[-222.68263245 -134.03578186]
[-233.37657166 -144.55433655]
[-248.40071106 -141.05027771]
[-262.92660522 -146.24665833]
[-272.31903076 -158.48535156]
[-273.58096313 -173.86102295]
[-266.30966187 -187.46734619]
[-252.82543945 -194.96260071]
[-237.43099976 -193.95506287]
[-225.03869629 -184.76626587]
[-219.60284424 -170.32829285]
[-222.85801697 -155.24826050]
[-212.16409302 -144.72970581]
[-201.47015381 -134.21115112]
[-190.77622986 -123.69260406]
[-179.99571228 -113.26281738]
[-169.12933350 -102.92251587]
[-158.26295471 -92.58221436]
[-147.39657593 -82.24191284]
[-136.36071777 -72.08268738]
[-125.15839386 -62.10732269]
[-110.50790405 -59.42175674]
[-105.34712982 -44.46591949]
[-94.14480591 -34.49055099]
[-82.94248962 -24.51518250]
[-70.29889679 -27.05254364]
[-58.32602310 -21.76026154]
[-51.49165344 -10.36794758]
[-52.48661804 3.07506943]
[-41.45075989 13.23429298]
[-30.41489983 23.39351654]
[-19.37903976 33.55274200]
[-8.34318161 43.71196365]
[2.69267654 53.87118912]
[9.75588131 56.09232712]
[13.82524681 64.29077911]
[24.69162560 74.63108063]
[35.55800247 84.97138214]
[46.42438126 95.31168365]
[77.63321686 61.31257629]
[115.00421906 67.72184753]
[124.97958374 56.51952744]
[134.95495605 45.31720734]
[144.93032837 34.11488342]
[154.90568542 22.91256332]
[164.69447327 11.54683971]
[174.29400635 0.02082294]
[183.89353943 -11.50519371]
[193.49305725 -23.03120995]
[193.47389221 -39.07425308]
[206.09436035 -48.97896194]
[221.67312622 -45.14729309]
[228.25949097 -30.51857376]
[220.80096436 -16.31470680]
[205.01907349 -13.43168259]
[195.41955566 -1.90566564]
[185.82002258 9.62035084]
[176.22048950 21.14636803]
[175.75730896 25.91615677]
[172.28111267 30.44062805]
[166.10801697 32.88793182]
[156.13264465 44.09025192]
[146.15727234 55.29257584]
[136.18191528 66.49489594]
[126.20654297 77.69721985]
[131.07702637 91.88447571]
[145.82960510 94.59768677]
[160.58218384 97.31089783]
[169.60678101 95.78414917]
[175.55537415 100.19284821]
[190.26107788 103.14960480]
[195.24024963 101.46703339]
[199.89750671 101.83751678]
[203.50126648 103.79114532]
[205.61445618 106.63484192]
[220.15545654 110.31712341]
[234.69645691 113.99940491]
[249.23745728 117.68168640]
[268.35110474 111.31316376]
[281.63754272 125.34722900]
[296.29235840 128.54672241]
[310.94714355 131.74621582]
[325.17205811 124.32790375]
[339.78207397 130.95562744]
[343.56967163 146.54516602]
[333.62930298 159.13755798]
[317.58636475 159.07301331]
[307.74765015 146.40101624]
[293.09286499 143.20152283]
[278.43804932 140.00202942]
[270.34973145 146.28225708]
[259.92025757 147.08087158]
[250.58566284 141.89201355]
[245.55517578 132.22268677]
[231.01417542 128.54040527]
[216.47317505 124.85812378]
[201.93215942 121.17584229]
[187.30432129 117.85530090]
[172.59861755 114.89855194]
[157.86897278 112.06346893]
[143.11639404 109.35026550]
[128.36383057 106.63705444]
[119.74889374 118.91642761]
[127.32037354 131.86528015]
[134.89186096 144.81411743]
[142.46334839 157.76296997]
[157.90748596 160.21496582]
[168.12319946 172.05444336]
[168.28692627 187.69116211]
[158.32136536 199.74195862]
[142.93194580 202.51679993]
[129.38508606 194.70549011]
[124.07719421 179.99629211]
[129.51449585 165.33445740]
[121.94301605 152.38560486]
[114.37152863 139.43675232]
[106.80004883 126.48790741]
[99.59439087 128.56843567]
[95.99261475 143.12957764]
[85.18309021 132.72947693]
[77.97743225 134.80999756]
[78.47338867 149.80180359]
[78.96933746 164.79359436]
[85.53606415 180.42414856]
[72.33420563 191.06121826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 187]
[2 186]
[3 185]
[4 37]
[5 36]
[6 35]
[8 33]
[9 32]
[10 31]
[11 30]
[15 29]
[16 28]
[17 27]
[18 26]
[38 103]
[39 102]
[40 101]
[41 100]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[50 89]
[51 88]
[52 87]
[54 85]
[55 84]
[58 83]
[59 82]
[60 81]
[61 80]
[63 79]
[64 78]
[65 77]
[66 76]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 122]
[111 121]
[112 120]
[113 119]
[130 166]
[131 165]
[132 164]
[134 163]
[135 162]
[139 161]
[140 160]
[141 159]
[142 158]
[144 154]
[145 153]
[146 152]
[167 181]
[168 180]
[169 179]
[170 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
