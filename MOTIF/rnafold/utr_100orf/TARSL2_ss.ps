%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCGCCGCAGUCGCGGGCACCCCGCUCGGCGUCGGUGCCUGAGGGAGGCCGCGAUGGCGGCCGAGGCCCUGGCGGCGGAGGCCGUGGCGUCGCGCCUGGAGCGGCAGGAGGAGGACAUCCGCUGGCUGUGGUCGGAGGUCGAGCGCCUGAGGG\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 172.86985779]
[92.50000000 157.86985779]
[92.50000000 142.86985779]
[92.50000000 127.86985016]
[92.50000000 112.86985016]
[90.09383392 98.06410217]
[85.34381104 83.83605194]
[80.59378815 69.60800171]
[75.84377289 55.37995911]
[71.09375000 41.15191269]
[66.34373474 26.92386627]
[61.59371185 12.69581890]
[56.84369278 -1.53222775]
[52.09366989 -15.76027393]
[47.20063019 -29.93977165]
[42.16506195 -44.06928253]
[37.12949371 -58.19879150]
[32.09392548 -72.32830048]
[27.05835915 -86.45780945]
[11.13765049 -93.64047241]
[5.42264843 -109.78789520]
[12.97751808 -124.78431702]
[7.65844536 -138.80955505]
[1.22805679 -152.36131287]
[-6.27194309 -165.35169983]
[-13.77194309 -178.34207153]
[-21.27194405 -191.33245850]
[-28.77194405 -204.32284546]
[-36.27194214 -217.31321716]
[-44.03200912 -230.14993286]
[-52.04899597 -242.82778931]
[-60.06598663 -255.50564575]
[-68.08296967 -268.18350220]
[-75.35731506 -273.80474854]
[-76.13076782 -281.19833374]
[-83.89083862 -294.03506470]
[-91.65090179 -306.87179565]
[-99.41097260 -319.70849609]
[-107.17103577 -332.54522705]
[-114.93110657 -345.38192749]
[-122.69116974 -358.21865845]
[-133.47245789 -350.70333862]
[-149.77580261 -350.65054321]
[-166.62124634 -360.94680786]
[-177.43928528 -371.33767700]
[-188.25732422 -381.72854614]
[-199.07536316 -392.11941528]
[-220.13540649 -395.87194824]
[-225.24000549 -415.83773804]
[-236.66569519 -425.55648804]
[-248.09136963 -435.27520752]
[-259.51705933 -444.99395752]
[-270.94274902 -454.71267700]
[-282.36843872 -464.43139648]
[-298.58770752 -466.85360718]
[-304.34710693 -482.20812988]
[-293.72183228 -494.69955444]
[-277.64227295 -491.47778320]
[-272.64968872 -475.85708618]
[-261.22402954 -466.13836670]
[-249.79832458 -456.41961670]
[-238.37265015 -446.70089722]
[-226.94696045 -436.98217773]
[-215.52127075 -427.26342773]
[-206.80744934 -429.42745972]
[-197.94873047 -427.27413940]
[-190.99278259 -421.16949463]
[-187.60801697 -412.40759277]
[-188.68449402 -402.93743896]
[-177.86645508 -392.54656982]
[-167.04841614 -382.15573120]
[-156.23037720 -371.76486206]
[-142.15167236 -376.94265747]
[-128.07420349 -382.12002563]
[-126.56637573 -397.04403687]
[-125.05854034 -411.96804810]
[-123.55071259 -426.89208984]
[-122.04288483 -441.81610107]
[-129.26304626 -456.54028320]
[-119.89823914 -470.00253296]
[-103.58215332 -468.35406494]
[-97.09938812 -453.29064941]
[-107.11885834 -440.30828857]
[-108.62669373 -425.38424683]
[-110.13452148 -410.46023560]
[-111.64234924 -395.53622437]
[-113.15017700 -380.61218262]
[-109.85445404 -365.97872925]
[-102.09438324 -353.14199829]
[-94.33432007 -340.30529785]
[-86.57424927 -327.46856689]
[-78.81418610 -314.63183594]
[-71.05411530 -301.79513550]
[-63.29404831 -288.95840454]
[-55.40512085 -276.20046997]
[-47.38813400 -263.52261353]
[-39.37114716 -250.84477234]
[-31.35415840 -238.16693115]
[-26.92078400 -236.25479126]
[-23.66843224 -231.50640869]
[-23.28156281 -224.81321716]
[-15.78156185 -211.82284546]
[-8.28156185 -198.83245850]
[-0.78156221 -185.84207153]
[6.71843767 -172.85169983]
[14.21843815 -159.86131287]
[17.59029770 -174.47741699]
[28.80668068 -184.43698120]
[43.71902084 -186.05627441]
[56.81174088 -178.73638916]
[63.24228287 -165.18470764]
[60.63220215 -150.41354370]
[49.94688034 -139.88624573]
[35.13846207 -137.49652100]
[21.68368912 -144.12863159]
[27.00276184 -130.10339355]
[39.40686417 -126.49423981]
[47.57527542 -116.23560333]
[48.33687210 -102.94902802]
[41.18787003 -91.49337769]
[46.22343826 -77.36386871]
[51.25900269 -63.23435974]
[56.29457092 -49.10485077]
[61.33013916 -34.97533798]
[66.56809998 -29.70016670]
[66.32171631 -20.51029396]
[71.07173920 -6.28224754]
[75.82175446 7.94579887]
[80.57177734 22.17384529]
[85.32180023 36.40189362]
[90.07181549 50.62994003]
[94.82183838 64.85798645]
[99.57186127 79.08602905]
[104.32187653 93.31407928]
[111.03426361 90.09740448]
[119.37980652 90.25662231]
[127.98532104 94.31817627]
[135.34596252 102.30927277]
[142.31681824 115.59111023]
[149.28765869 128.87295532]
[156.25851440 142.15478516]
[171.08573914 148.28120422]
[175.40193176 163.73274231]
[165.89608765 176.65631104]
[149.86027527 177.13804626]
[139.59577942 164.80841064]
[142.97666931 149.12564087]
[136.00582886 135.84379578]
[129.03497314 122.56195831]
[122.06412506 109.28012085]
[107.50000000 112.86985016]
[107.50000000 127.86985016]
[107.50000000 142.86985779]
[107.50000000 157.86985779]
[107.50000000 172.86985779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 134]
[7 133]
[8 132]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 124]
[16 123]
[17 122]
[18 121]
[19 120]
[22 116]
[23 115]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 98]
[31 97]
[32 96]
[33 95]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[44 72]
[45 71]
[46 70]
[47 69]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
