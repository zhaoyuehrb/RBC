%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUCUGAGAAACAGCUCCUCAGUGACUGAGUUUAUCCUUGUGGGAUUAUCAGAACAGCCAGAGCUCCAGCUCCCUCUUUUCCUUCUAUUCUUAGGGA\
) } def
/len { sequence length } bind def

/coor [
[86.87365723 325.06491089]
[71.13812256 323.59225464]
[61.11719894 311.37112427]
[62.75611115 295.65203857]
[75.08252716 285.76086426]
[76.48021698 270.82614136]
[77.87790680 255.89140320]
[79.27559662 240.95664978]
[80.67328644 226.02191162]
[82.07097626 211.08717346]
[83.46866608 196.15243530]
[84.86635590 181.21769714]
[86.26404572 166.28295898]
[75.21429443 162.99028015]
[64.88364410 157.87010193]
[55.57180786 151.07095337]
[47.54894638 142.79011536]
[41.04782486 133.26782227]
[36.25705719 122.78034210]
[33.31563568 111.63195038]
[32.30889893 100.14608002]
[17.39770126 98.51629639]
[2.48650312 96.88651276]
[-12.42469406 95.25673676]
[-27.33589172 93.62695312]
[-43.73820114 97.91654205]
[-52.40076447 83.34271240]
[-40.79452515 70.98425293]
[-25.70611000 78.71575165]
[-10.79491234 80.34553528]
[4.11628532 81.97531891]
[19.02748299 83.60510254]
[33.93867874 85.23488617]
[38.00610352 72.81795502]
[44.38335037 61.41379929]
[52.83280945 51.44731903]
[63.03966522 43.28985977]
[56.29224014 29.89313316]
[49.54481125 16.49640846]
[42.79738617 3.09968233]
[36.04996109 -10.29704285]
[23.52499390 -21.72339439]
[31.03754234 -36.92201233]
[47.72187042 -33.91044998]
[49.44668579 -17.04446793]
[56.19411087 -3.64774323]
[62.94153976 9.74898243]
[69.68896484 23.14570808]
[76.43638611 36.54243088]
[92.04462433 32.77783966]
[108.10042572 32.79516602]
[123.70050049 36.59343338]
[137.96717834 43.95894623]
[150.09783936 54.47733307]
[159.40998840 67.55681610]
[173.29039001 61.87049103]
[187.17080688 56.18416595]
[197.00781250 43.79288864]
[211.71824646 46.12791824]
[225.59866333 40.44159317]
[229.38061523 25.50830841]
[241.09365845 15.77908897]
[256.11203003 14.82380772]
[268.66287231 22.79965782]
[282.54330444 17.11333275]
[296.42370605 11.42700577]
[310.30410767 5.74068022]
[319.90432739 -7.55471992]
[336.18887329 -5.61942720]
[342.40560913 9.55569553]
[332.15927124 22.35978317]
[315.99041748 19.62108612]
[302.11001587 25.30741310]
[288.22961426 30.99373817]
[274.34921265 36.68006516]
[271.00143433 51.16903687]
[259.62936401 61.02501297]
[244.45693970 62.30985260]
[231.28498840 54.32200241]
[217.40457153 60.00832748]
[208.56037903 71.99288177]
[192.85713196 70.06457520]
[178.97671509 75.75090027]
[165.09631348 81.43722534]
[167.68234253 98.90122986]
[165.66455078 116.43997955]
[159.18020630 132.86045837]
[148.67036438 147.04574585]
[134.84991455 158.03094482]
[118.65895081 165.06881714]
[101.19878387 167.68064880]
[99.80109406 182.61538696]
[98.40340424 197.55012512]
[97.00571442 212.48486328]
[95.60802460 227.41960144]
[94.21033478 242.35433960]
[92.81264496 257.28909302]
[91.41496277 272.22381592]
[90.01727295 287.15856934]
[100.29435730 299.16510010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[55 84]
[56 83]
[57 82]
[59 80]
[60 79]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
