%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACUCUCCUGGAAACCCACCGAGAACCUCCACCCUCUGACACCAUGGUCAACUCCUGUUGUGGCUCUGUGUGCUCUGACCAGGGCUGUGGCCUGGAGAACUGCUGCCGCCCCAGCUGCUGCCAGACCACCUGCUGCAGGACCA\
) } def
/len { sequence length } bind def

/coor [
[-24.08227158 206.29747009]
[-33.13144302 211.60847473]
[-43.42254257 214.53393555]
[-54.32471466 214.78750610]
[-65.14250946 212.24995422]
[-75.16024017 206.98341370]
[-84.69172668 218.56576538]
[-94.22320557 230.14810181]
[-103.75469208 241.73045349]
[-106.32096100 259.93103027]
[-122.92594147 265.51293945]
[-132.20600891 277.29766846]
[-141.48608398 289.08242798]
[-143.29370117 305.38165283]
[-158.41964722 311.71710205]
[-171.30363464 301.57141113]
[-168.69172668 285.38159180]
[-153.27082825 279.80236816]
[-143.99076843 268.01760864]
[-134.71069336 256.23284912]
[-135.81857300 244.14161682]
[-128.12100220 234.23751831]
[-115.33704376 232.19897461]
[-105.80555725 220.61662292]
[-96.27407074 209.03427124]
[-86.74258423 197.45191956]
[-88.57961273 190.18038940]
[-102.49714661 195.77520752]
[-116.41468811 201.37004089]
[-126.08060455 212.84043884]
[-140.93536377 214.92276001]
[-153.38255310 206.55210876]
[-157.05691528 192.00910950]
[-150.07946777 178.73074341]
[-136.01832581 173.50729370]
[-122.06340790 179.01055908]
[-107.15853119 177.32392883]
[-92.25366211 175.63729858]
[-94.09068298 168.36575317]
[-107.97955322 162.70013428]
[-121.86842346 157.03451538]
[-135.75729370 151.36889648]
[-150.22682190 157.72566223]
[-164.92269897 151.91130066]
[-171.12612915 137.37538147]
[-165.15672302 122.74179077]
[-150.55603027 116.69239807]
[-135.98637390 122.81618500]
[-130.09167480 137.48002625]
[-116.20280457 143.14564514]
[-102.31393433 148.81126404]
[-88.42506409 154.47688293]
[-66.51325226 134.24882507]
[-38.57342148 132.86560059]
[-17.73137856 148.62251282]
[-4.38096571 141.78390503]
[8.96944809 134.94531250]
[22.31986237 128.10670471]
[35.67027664 121.26810455]
[49.02068710 114.42950439]
[56.82082367 101.74064636]
[72.63084412 102.33546448]
[85.98126221 95.49686432]
[94.61425781 83.23018646]
[96.54547882 68.35503387]
[98.47670746 53.47986984]
[100.40792847 38.60470963]
[102.33914948 23.72955132]
[104.27037048 8.85439110]
[106.20159149 -6.02076864]
[104.19435120 -15.00797081]
[108.33773804 -21.19389915]
[110.58856964 -36.02406311]
[101.01606750 -48.59954453]
[103.22225189 -64.24909210]
[115.89823914 -73.68810272]
[131.52357483 -71.31658173]
[140.82804871 -58.54151154]
[138.29145813 -42.94211197]
[125.41873169 -33.77323151]
[123.16790009 -18.94306755]
[121.07675171 -4.08954573]
[119.14553070 10.78561401]
[117.21430969 25.66077423]
[115.28308868 40.53593445]
[113.35186005 55.41109467]
[111.42063904 70.28625488]
[109.48941803 85.16141510]
[119.26790619 96.53600311]
[134.26443481 96.85874176]
[149.26095581 97.18148041]
[164.25749207 97.50422668]
[178.22094727 90.06564331]
[190.77879333 98.07498932]
[205.77531433 98.39773560]
[220.77185059 98.72047424]
[235.76837158 99.04321289]
[250.76750183 99.20459747]
[265.76751709 99.20459747]
[272.43206787 89.25582123]
[282.97976685 83.84535980]
[294.70761108 84.22853088]
[304.67309570 90.19239807]
[310.43267822 100.13854980]
[325.41879272 100.78388214]
[340.40490723 101.42921448]
[355.39102173 102.07455444]
[366.86587524 91.20702362]
[382.66183472 91.71998596]
[393.40744019 103.30910492]
[392.72750854 119.09875488]
[381.02542114 129.72123718]
[365.24383545 128.87438965]
[354.74569702 117.06066132]
[339.75958252 116.41532898]
[324.77346802 115.76999664]
[309.78735352 115.12466431]
[297.13931274 128.28579712]
[278.56942749 128.09262085]
[265.76751709 114.20459747]
[250.76750183 114.20459747]
[244.02987671 117.37284088]
[235.44563293 114.03974152]
[220.44909668 113.71700287]
[205.45257568 113.39426422]
[190.45605469 113.07151794]
[177.56524658 120.53318787]
[163.93473816 112.50075531]
[148.93821716 112.17800903]
[133.94169617 111.85527039]
[118.94515991 111.53252411]
[108.17379761 116.69020081]
[98.30721283 114.89334869]
[92.81986237 108.84728241]
[79.46944427 115.68588257]
[70.71440125 128.86387634]
[55.85929108 127.77992249]
[42.50887680 134.61851501]
[29.15846252 141.45712280]
[15.80804825 148.29571533]
[2.45763469 155.13432312]
[-10.89277840 161.97291565]
[-8.73786545 171.18594360]
[-8.97318459 180.85089111]
[-11.68650055 190.34472656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[8 24]
[9 23]
[11 20]
[12 19]
[13 18]
[39 52]
[40 51]
[41 50]
[42 49]
[55 142]
[56 141]
[57 140]
[58 139]
[59 138]
[60 137]
[62 135]
[63 134]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[72 81]
[73 80]
[89 131]
[90 130]
[91 129]
[92 128]
[94 126]
[95 125]
[96 124]
[97 123]
[98 121]
[99 120]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
