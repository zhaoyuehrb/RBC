%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCUGAGUUCUUCCUUUGACAAGAUGGCGGCAGGAGGCAGUGGCGUUGGUGGGAAGCGCAGCUCGAAAAGCGAUGCCGAUUCUGGUUUCCUGGGGCUGCGGCCCACUUCGGUGGACCCAGCGC\
) } def
/len { sequence length } bind def

/coor [
[86.89265442 310.71017456]
[83.53377533 295.02270508]
[93.81554413 282.70745850]
[93.81554413 267.70745850]
[93.81554413 252.70747375]
[93.81554413 237.70747375]
[86.07823944 224.98019409]
[93.81554413 211.18002319]
[93.81554413 196.18002319]
[93.81554413 181.18002319]
[93.81554413 166.18002319]
[85.45272064 157.34323120]
[85.39649200 144.77445984]
[94.22695923 135.27311707]
[94.60391235 120.27784729]
[87.08399200 133.25671387]
[83.26519012 147.76245117]
[72.91500854 158.61941528]
[58.60822296 163.12675476]
[43.90390015 160.16317749]
[32.45997620 150.46592712]
[27.12332153 136.44735718]
[29.22152328 121.59483337]
[38.23261261 109.60316467]
[51.91493225 103.45546722]
[66.86680603 104.68180847]
[81.60852051 101.91021729]
[67.34267426 97.27495575]
[53.07682800 92.63970184]
[38.81098175 88.00444794]
[23.29528046 91.09857178]
[13.58188248 79.80701447]
[-0.68396544 75.17176056]
[-13.15791607 84.40107727]
[-28.67466164 84.50207520]
[-41.26770020 75.43592834]
[-46.09474564 60.68874741]
[-41.29970551 45.93113327]
[-28.72636986 36.83768463]
[-13.20944118 36.90501785]
[-0.71549553 46.10724258]
[3.95128942 60.90591431]
[18.21713638 65.54116821]
[32.71244812 62.11550522]
[43.44623566 73.73860168]
[57.71208191 78.37385559]
[71.97792816 83.00910950]
[86.24378204 87.64436340]
[100.86167908 84.28030396]
[111.66632080 73.87550354]
[122.47095490 63.47070694]
[133.27558899 53.06590652]
[144.08023071 42.66110611]
[154.88485718 32.25630569]
[154.46719360 21.24640846]
[160.11730957 12.04599571]
[169.72427368 7.62395382]
[179.95124817 9.24634743]
[191.26501465 -0.60243917]
[202.57878113 -10.45122528]
[213.89254761 -20.30001259]
[225.20632935 -30.14879799]
[236.52009583 -39.99758530]
[247.83386230 -49.84637070]
[259.14764404 -59.69515610]
[258.53158569 -69.30377960]
[262.41256714 -77.96352386]
[269.77615356 -83.72700500]
[278.84164429 -85.36469269]
[287.49182129 -82.62551880]
[299.51531982 -91.59409332]
[304.59582520 -99.32296753]
[311.95556641 -100.63246155]
[324.20065308 -109.29605103]
[330.99743652 -123.58291626]
[345.85604858 -124.61757660]
[358.10113525 -133.28117371]
[370.34622192 -141.94476318]
[382.59130859 -150.60835266]
[388.95394897 -165.72288513]
[405.25637817 -167.50120544]
[414.72808838 -154.11393738]
[407.62536621 -139.33274841]
[391.25491333 -138.36326599]
[379.00982666 -129.69967651]
[366.76473999 -121.03607941]
[354.51965332 -112.37248993]
[348.59872437 -98.70529938]
[332.86425781 -97.05095673]
[320.61914062 -88.38736725]
[308.48388672 -79.57059479]
[296.46038818 -70.60201263]
[290.18939209 -51.00379181]
[268.99642944 -48.38138580]
[257.68264771 -38.53260040]
[246.36888123 -28.68381310]
[235.05511475 -18.83502769]
[223.74134827 -8.98624134]
[212.42756653 0.86254525]
[201.11380005 10.71133137]
[189.80003357 20.56011772]
[185.00389099 39.22397232]
[165.28965759 43.06094360]
[154.48501587 53.46574020]
[143.68038940 63.87054062]
[132.87574768 74.27533722]
[122.07111359 84.68013763]
[111.26647949 95.08493805]
[115.70089722 101.64420319]
[115.69235992 111.20397949]
[109.59917450 120.65480042]
[109.22222137 135.65005493]
[118.41410828 151.54594421]
[108.81554413 166.18002319]
[108.81554413 181.18002319]
[108.81554413 196.18002319]
[108.81554413 211.18002319]
[116.55284119 224.98019409]
[108.81554413 237.70747375]
[108.81554413 252.70747375]
[108.81554413 267.70745850]
[108.81554413 282.70745850]
[119.09731293 295.02270508]
[115.73842621 310.71017456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 122]
[4 121]
[5 120]
[6 119]
[8 117]
[9 116]
[10 115]
[11 114]
[14 112]
[15 111]
[27 48]
[28 47]
[29 46]
[30 45]
[32 43]
[33 42]
[49 108]
[50 107]
[51 106]
[52 105]
[53 104]
[54 103]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[70 92]
[71 91]
[73 90]
[74 89]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
