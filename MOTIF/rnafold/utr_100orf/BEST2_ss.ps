%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCGUCACCUACACAGCCCGAGUGGCGAACGCCCGCUUCGGUGGCUUCUCCCAGCUGCUGCUACUGUGGCGUGGGAGCAUCUACAAACUCCUGUGGC\
) } def
/len { sequence length } bind def

/coor [
[55.25043106 286.24755859]
[48.59352112 299.84768677]
[37.87957382 310.54769897]
[24.27075768 317.18688965]
[9.24325657 319.04510498]
[-5.57285833 315.92077637]
[-18.57044601 308.15280151]
[-28.33962631 296.58380127]
[-33.82070923 282.46868896]
[-34.41915131 267.33856201]
[-30.07003403 252.83462524]
[-21.24512100 240.53016663]
[-8.90167046 231.75988770]
[5.62139130 227.47509766]
[20.74871254 228.14059448]
[26.21848488 214.17343140]
[31.68825722 200.20626831]
[37.15803146 186.23912048]
[42.62780380 172.27195740]
[41.42950821 168.77636719]
[41.98020935 164.50419617]
[44.63505554 160.34040833]
[49.31349182 157.29745483]
[56.06092072 143.90072632]
[62.80834579 130.50399780]
[69.55577087 117.10727692]
[65.18755341 102.75740814]
[52.12010574 95.39250183]
[39.05266190 88.02758789]
[25.98521805 80.66267395]
[10.83196831 85.15206146]
[-3.01741385 77.53824615]
[-7.34633493 62.33837509]
[0.41347739 48.57026672]
[15.65826416 44.40229034]
[29.34356308 52.30723190]
[33.35012817 67.59523010]
[46.41757202 74.96014404]
[59.48501587 82.32505798]
[72.55245972 89.68996429]
[80.89748383 79.79727936]
[92.14730072 74.91253662]
[103.71920776 75.50918579]
[113.22246552 80.86931610]
[125.27491760 71.93968201]
[137.32737732 63.01004791]
[149.37982178 54.08041382]
[149.36753845 38.67567444]
[158.32371521 26.36144447]
[172.64424133 21.73687935]
[186.77279663 26.37605667]
[198.82525635 17.44642258]
[210.87770081 8.51679039]
[222.93016052 -0.41284305]
[234.98262024 -9.34247589]
[247.03506470 -18.27210808]
[258.94720459 -27.38809967]
[270.71609497 -36.68824387]
[282.48501587 -45.98838425]
[294.25393677 -55.28852844]
[306.02285767 -64.58866882]
[306.30126953 -80.22377777]
[316.60357666 -91.98799133]
[332.06530762 -94.32662201]
[345.38589478 -86.13542938]
[350.27578735 -71.28205109]
[344.42611694 -56.77979279]
[330.59893799 -49.47618103]
[315.32299805 -52.81975937]
[303.55407715 -43.51961517]
[291.78515625 -34.21947098]
[280.01623535 -24.91932869]
[268.24734497 -15.61918545]
[264.89193726 -8.88369942]
[255.96470642 -6.21965456]
[243.91224670 2.70997834]
[231.85978699 11.63961124]
[219.80734253 20.56924438]
[207.75488281 29.49887657]
[195.70242310 38.42850876]
[196.02609253 53.29569626]
[187.43161011 65.64879608]
[173.04293823 70.63070679]
[158.30946350 66.13286591]
[146.25700378 75.06250000]
[134.20454407 83.99213409]
[122.15209198 92.92176819]
[121.88237000 112.65259552]
[105.77164459 126.68138885]
[82.95249939 123.85469818]
[76.20507050 137.25143433]
[69.45764160 150.64814758]
[62.71022034 164.04487610]
[56.59496307 177.74172974]
[51.12519073 191.70889282]
[45.65541840 205.67604065]
[40.18564606 219.64320374]
[34.71587372 233.61036682]
[46.27214432 243.39460754]
[54.02318192 256.40231323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 98]
[16 97]
[17 96]
[18 95]
[19 94]
[23 93]
[24 92]
[25 91]
[26 90]
[27 40]
[28 39]
[29 38]
[30 37]
[44 87]
[45 86]
[46 85]
[47 84]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
