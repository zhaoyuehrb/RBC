%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAACUUCCGGUGCGCUUAGCGUUACUUCCGGCGCGCGGCGGGCGGAAGUCCGGGUUGGGGUCACCUGACCGGAGAGCCGGCUAGAUAUGGCGUCCUCUUUGCUUGCGGGCGAGCGAUUGGUGCGUGCUUUGGGCCCCGGCGGGGAGCUGGAGCCAGAGCGGCUACCCCGAAAGCUGCGGGCCGAGC\
) } def
/len { sequence length } bind def

/coor [
[186.04974365 167.24826050]
[174.10577393 158.17402649]
[162.16180420 149.09980774]
[150.21783447 140.02557373]
[138.27386475 130.95135498]
[126.32989502 121.87712860]
[76.46911621 129.45709229]
[63.95440292 137.72642517]
[51.43968964 145.99575806]
[38.92497635 154.26509094]
[26.41026115 162.53443909]
[13.89554691 170.80377197]
[8.44915295 178.15859985]
[1.10629630 179.10421753]
[-11.54273415 187.16661072]
[-19.02124786 201.10871887]
[-33.91249847 201.42489624]
[-46.56152725 209.48728943]
[-59.21055603 217.54966736]
[-71.85958862 225.61206055]
[-75.39206696 240.78306580]
[-88.33483124 248.77926636]
[-102.77629852 245.31809998]
[-115.42532349 253.38047791]
[-128.07435608 261.44287109]
[-140.72338867 269.50524902]
[-153.37242126 277.56762695]
[-156.54443359 293.05032349]
[-169.78114319 301.68545532]
[-185.22943115 298.34991455]
[-193.72412109 285.02264404]
[-190.22544861 269.61047363]
[-176.80911255 261.25717163]
[-161.43479919 264.91860962]
[-148.78576660 256.85623169]
[-136.13673401 248.79383850]
[-123.48770905 240.73146057]
[-110.83867645 232.66906738]
[-107.87899017 218.11654663]
[-95.16592407 209.75996399]
[-79.92197418 212.96302795]
[-67.27294159 204.90063477]
[-54.62390900 196.83825684]
[-41.97488022 188.77587891]
[-35.40111160 175.41044617]
[-19.60511780 174.51757812]
[-6.95608759 166.45520020]
[5.62621021 158.28906250]
[18.14092445 150.01971436]
[30.65563774 141.75038147]
[43.17035294 133.48104858]
[55.68506622 125.21170807]
[68.19978333 116.94237518]
[68.07642365 101.94287872]
[55.42739105 93.88049316]
[42.77835846 85.81810760]
[30.12932968 77.75572968]
[21.19403076 75.77657318]
[17.34008026 69.45527649]
[4.82536554 61.18593597]
[-7.68934870 52.91659927]
[-20.20406342 44.64726257]
[-32.71877670 36.37792587]
[-49.11180878 35.93013763]
[-56.68153000 21.38258171]
[-47.64085770 7.70053816]
[-31.29006195 8.95892143]
[-24.44944000 23.86321259]
[-11.93472576 32.13254929]
[0.57998830 40.40188599]
[13.09470272 48.67122269]
[25.60941696 56.94055939]
[38.19171524 65.10669708]
[50.84074402 73.16908264]
[63.48977280 81.23146820]
[76.13880157 89.29384613]
[88.51581573 80.81979370]
[85.57434082 66.11103058]
[82.63286591 51.40227127]
[79.69138336 36.69350815]
[65.75047302 30.13933945]
[58.42758179 16.78910828]
[60.34724045 1.86332810]
[70.56539917 -8.94071293]
[67.62391663 -23.64947510]
[64.68244171 -38.35823822]
[61.74096680 -53.06700134]
[50.51503754 -65.02152252]
[55.51338196 -80.64038086]
[71.59412384 -83.85622406]
[82.21478271 -71.36087799]
[76.44972992 -56.00848007]
[79.39120483 -41.29971695]
[82.33267975 -26.59095383]
[85.27416229 -11.88218975]
[98.86148834 -5.83879948]
[106.37369537 7.20078373]
[104.74826050 22.34051132]
[94.40014648 33.75202942]
[97.34162903 48.46079254]
[100.28310394 63.16955566]
[103.22457886 77.87831879]
[118.02213287 80.33442688]
[125.55771637 67.36465454]
[133.09329224 54.39488602]
[140.62887573 41.42511368]
[148.16445923 28.45534134]
[155.70004272 15.48556805]
[163.23562622 2.51579618]
[162.73947144 -13.87584400]
[176.82739258 -22.27004242]
[191.00694275 -14.03156567]
[190.69142151 2.36454582]
[176.20539856 10.05137920]
[168.66981506 23.02115059]
[161.13423157 35.99092484]
[153.59864807 48.96069717]
[146.06306458 61.93046951]
[138.52748108 74.90023804]
[130.99189758 87.87001038]
[138.92848206 75.14167023]
[152.64562988 69.07207489]
[167.40306091 71.75870514]
[178.10102844 82.27314758]
[181.04261780 96.98188782]
[175.21127319 110.80200195]
[162.62216187 118.95762634]
[147.62573242 118.63041687]
[135.40411377 109.93315887]
[147.34808350 119.00738525]
[159.29205322 128.08160400]
[171.23602295 137.15583801]
[183.17999268 146.23005676]
[195.12396240 155.30429077]
[217.49496460 156.44709778]
[225.17680359 176.67530823]
[237.69151306 184.94464111]
[250.20623779 193.21397400]
[262.72094727 201.48330688]
[275.23565674 209.75265503]
[287.81796265 217.91879272]
[300.46697998 225.98117065]
[313.11602783 234.04354858]
[325.76504517 242.10594177]
[338.67242432 249.74792480]
[351.82412720 256.96127319]
[364.97586060 264.17459106]
[378.12759399 271.38790894]
[391.33819580 278.49285889]
[404.60678101 285.48889160]
[417.87536621 292.48492432]
[431.14395142 299.48095703]
[444.41253662 306.47702026]
[457.79269409 298.79748535]
[473.19949341 299.59375000]
[485.71667480 308.61172485]
[491.35006714 322.97375488]
[488.30206299 338.09704590]
[477.54528809 349.15573120]
[462.51214600 352.62109375]
[447.99969482 347.38729858]
[438.63882446 335.12445068]
[437.41650391 319.74560547]
[424.14791870 312.74957275]
[410.87933350 305.75350952]
[397.61074829 298.75747681]
[384.34213257 291.76144409]
[376.94644165 291.42221069]
[370.91424561 284.53964233]
[357.76254272 277.32632446]
[344.61080933 270.11297607]
[331.45907593 262.89965820]
[328.71981812 263.56716919]
[325.54904175 263.18041992]
[322.35043335 261.56881714]
[319.58212280 258.71206665]
[317.70266724 254.75497437]
[305.05364990 246.69258118]
[292.40460205 238.63020325]
[279.75558472 230.56781006]
[272.41271973 229.62219238]
[266.96633911 222.26736450]
[254.45161438 213.99803162]
[241.93688965 205.72868347]
[229.42218018 197.45935059]
[216.90747070 189.19001770]
[209.66772461 192.38967896]
[201.65867615 192.45837402]
[194.19174194 189.31034851]
[188.51907349 183.39262390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[5 130]
[6 129]
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[12 48]
[14 47]
[15 46]
[17 44]
[18 43]
[19 42]
[20 41]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[54 76]
[55 75]
[56 74]
[57 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[77 102]
[78 101]
[79 100]
[80 99]
[84 95]
[85 94]
[86 93]
[87 92]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
[136 186]
[137 185]
[138 184]
[139 183]
[140 182]
[141 180]
[142 179]
[143 178]
[144 177]
[145 172]
[146 171]
[147 170]
[148 169]
[149 167]
[150 166]
[151 165]
[152 164]
[153 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
