%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCGACGUGUUCUUCCGGUGGCGGAGCGGCGGAUUAGCCUUCGCGGGGCAAAAUGGAGCUCGAGGCCAUGAGCAGAUAUACCAGCCCAGUGAACCCAGCUGUCUUCCCCCAUCUGACCGUGGUGCUUUUGGCCAUUGGCAUGUUCUUCACCG\
) } def
/len { sequence length } bind def

/coor [
[72.20404053 457.43988037]
[62.58467102 445.69967651]
[57.85963821 431.27615356]
[58.66796875 416.11993408]
[64.90033722 402.28076172]
[75.71386719 391.63034058]
[89.64612579 385.60897827]
[89.04213715 370.62112427]
[88.43814850 355.63330078]
[87.83415985 340.64547729]
[87.23017120 325.65762329]
[86.62618256 310.66979980]
[74.49444580 319.49142456]
[59.97989273 315.70623779]
[53.70134354 302.08346558]
[60.25218201 288.58950806]
[74.83982086 285.09655762]
[86.79241943 294.16088867]
[87.69809723 279.18826294]
[88.60376740 264.21563721]
[89.50944519 249.24299622]
[90.41512299 234.27035522]
[91.32080078 219.29772949]
[92.22647858 204.32508850]
[93.13215637 189.35246277]
[93.73614502 174.36462402]
[94.03820038 159.36766052]
[94.34025574 144.37071228]
[94.64231110 129.37374878]
[94.94437408 114.37679291]
[83.91928864 104.20587921]
[68.99526215 105.71370697]
[54.07123947 107.22153473]
[44.27128983 119.62059021]
[28.56472778 121.37542725]
[16.26997948 111.44493103]
[14.68130016 95.72069550]
[24.74122620 83.53162384]
[40.48138046 82.10927582]
[52.56341171 92.29751587]
[67.48743439 90.78968048]
[82.41145325 89.28185272]
[85.34697723 87.48775482]
[88.38031006 86.33204651]
[83.34474945 72.20253754]
[78.30918121 58.07302856]
[73.27361298 43.94351959]
[61.35254669 33.54165268]
[64.36822510 18.95553398]
[59.33266068 4.82602310]
[54.29709244 -9.30348682]
[49.26152420 -23.43299675]
[32.99386978 -27.96436882]
[22.71766090 -41.15513229]
[22.31158829 -57.70546341]
[31.73782158 -71.11296844]
[26.41874886 -85.13821411]
[21.09967613 -99.16345978]
[5.03755760 -106.02406311]
[-1.00144696 -122.05312347]
[6.24990749 -137.19863892]
[0.64948571 -151.11392212]
[-4.95093632 -165.02922058]
[-10.55135822 -178.94450378]
[-25.63464355 -182.58787537]
[-35.67010498 -194.42295837]
[-36.79890442 -209.89891052]
[-28.58699417 -223.06494141]
[-14.19202232 -228.85841370]
[0.85085249 -225.05163574]
[10.75733662 -213.10839844]
[11.71818447 -197.62109375]
[3.36393142 -184.54492188]
[8.96435356 -170.62963867]
[14.56477451 -156.71435547]
[20.16519737 -142.79905701]
[32.63946152 -139.44042969]
[41.01279449 -129.34835815]
[42.04179001 -116.07981110]
[35.12491989 -104.48252869]
[40.44399261 -90.45728302]
[45.76306534 -76.43204498]
[58.94478989 -74.12323761]
[69.33843231 -65.52238464]
[74.14953613 -52.80258942]
[72.01588440 -39.26196671]
[63.39103317 -28.46856499]
[68.42660522 -14.33905506]
[73.46217346 -0.20954472]
[78.49773407 13.91996574]
[90.05862427 23.31119347]
[87.40312195 38.90795135]
[92.43869019 53.03746033]
[97.47425842 67.16696930]
[102.50982666 81.29648590]
[115.72080231 88.40071106]
[130.28492737 84.81097412]
[144.84906006 81.22124481]
[149.94419861 76.86371613]
[155.62171936 75.91999817]
[160.07186890 77.79277802]
[174.76872253 74.79239655]
[186.74234009 64.45107269]
[200.76007080 69.48622131]
[215.45692444 66.48583984]
[230.15379333 63.48545456]
[234.35075378 48.76662064]
[244.91554260 37.69216156]
[259.42047119 32.80691528]
[274.53240967 35.23347092]
[286.77871704 44.41422653]
[293.34530640 58.23950577]
[292.72323608 73.53236389]
[285.05541992 86.77861786]
[272.10388184 94.93437195]
[256.84478760 96.12549591]
[242.78457642 90.07826996]
[233.15417480 78.18231201]
[218.45730591 81.18270111]
[203.76045227 84.18308258]
[192.83804321 94.30979919]
[177.76910400 89.48925781]
[163.07225037 92.48963928]
[148.43879700 95.78536987]
[133.87466431 99.37510681]
[119.31053925 102.96483612]
[109.94132996 114.67884827]
[109.63927460 129.67581177]
[109.33721924 144.67276001]
[109.03516388 159.66972351]
[108.73310852 174.66668701]
[111.62342834 180.71601868]
[111.06553650 186.44433594]
[108.10478973 190.25813293]
[107.19911194 205.23077393]
[106.29343414 220.20339966]
[105.38775635 235.17604065]
[104.48207855 250.14866638]
[103.57640076 265.12130737]
[102.67073059 280.09393311]
[101.76505280 295.06655884]
[101.61401367 310.06579590]
[102.21800232 325.05364990]
[102.82199097 340.04147339]
[103.42597961 355.02932739]
[104.02996826 370.01715088]
[104.63395691 385.00497437]
[119.00555420 389.88574219]
[130.64102173 399.63150024]
[137.96678162 412.92428589]
[139.99205017 427.96630859]
[136.44294739 442.72329712]
[127.79946899 455.19946289]
[115.23055267 463.70748901]
[100.43605804 467.09680176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[12 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 131]
[27 130]
[28 129]
[29 128]
[30 127]
[31 42]
[32 41]
[33 40]
[44 95]
[45 94]
[46 93]
[47 92]
[49 90]
[50 89]
[51 88]
[52 87]
[56 82]
[57 81]
[58 80]
[61 76]
[62 75]
[63 74]
[64 73]
[96 126]
[97 125]
[98 124]
[101 123]
[102 122]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
