%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUUCUCAGUUCCAGAAUGAUUACUUCAGUAAGCCCUAGCACCAGCACGAAUUCUUCCUUUCUUCUCACUGGAUUUUCUGGCAUGGAGCAGCAAUACC\
) } def
/len { sequence length } bind def

/coor [
[80.42587280 387.81808472]
[91.19684601 376.48141479]
[89.33536530 361.59738159]
[87.47388458 346.71331787]
[85.61240387 331.82928467]
[76.35547638 320.16058350]
[82.32038116 305.50689697]
[80.45890045 290.62283325]
[78.59741974 275.73880005]
[69.34049225 264.07009888]
[75.30539703 249.41641235]
[73.44391632 234.53236389]
[64.18698120 222.86366272]
[70.15189362 208.20997620]
[68.29041290 193.32592773]
[66.42892456 178.44189453]
[64.56744385 163.55784607]
[62.70596695 148.67379761]
[60.84448242 133.78974915]
[49.52214050 123.95081329]
[34.52395248 124.18408966]
[19.52576828 124.41736603]
[7.37193203 134.88941956]
[-8.36590099 131.77491760]
[-15.61501312 117.46302795]
[-8.81450558 102.93262482]
[6.81885481 99.33017731]
[19.29249001 109.41918182]
[34.29067612 109.18590546]
[49.28886414 108.95262909]
[52.23961639 102.05747986]
[38.44941711 96.15574646]
[44.35137939 82.36564636]
[58.14111710 88.26718140]
[61.09186935 81.37203979]
[50.90557861 70.36116028]
[35.09045029 66.02367401]
[31.20159149 50.09229660]
[43.23952484 38.95586014]
[58.82065582 44.07057953]
[61.91645432 60.17486572]
[72.10274506 71.18574524]
[91.30102539 68.04429626]
[106.15222168 74.60377502]
[113.71945953 61.65245056]
[121.28670502 48.70112228]
[128.85394287 35.74979782]
[122.78191376 21.59223747]
[126.17097473 6.74745178]
[137.51713562 -3.13833165]
[152.33146667 -4.43193817]
[159.89871216 -17.38326454]
[167.46595764 -30.33458900]
[159.29884338 -43.27896500]
[158.09432983 -58.53700256]
[164.12921143 -72.60252380]
[176.01672363 -82.24336243]
[191.02519226 -85.24413300]
[205.70576477 -80.91527557]
[216.68498230 -70.25154114]
[221.43989563 -55.70336151]
[218.87785339 -40.61381149]
[209.58758545 -28.45035744]
[195.70393372 -22.00807381]
[180.41728210 -22.76734543]
[172.85003662 -9.81602097]
[165.28279114 3.13530469]
[171.42959595 16.67615891]
[168.38836670 31.41437149]
[157.12014771 41.65549850]
[141.80526733 43.31703949]
[134.23803711 56.26836777]
[126.67079163 69.21968842]
[119.10354614 82.17102051]
[129.62373352 99.76361084]
[124.56964874 122.20745850]
[103.39758301 136.45446777]
[75.72853088 131.92826843]
[77.59001160 146.81231689]
[79.45149231 161.69635010]
[81.31297302 176.58039856]
[83.17445374 191.46444702]
[85.03594208 206.34849548]
[94.42601013 219.08180237]
[88.32796478 232.67088318]
[90.18944550 247.55493164]
[99.57951355 260.28823853]
[93.48146820 273.87731934]
[95.34294891 288.76135254]
[97.20442963 303.64541626]
[106.59450531 316.37872314]
[100.49645233 329.96780396]
[102.35793304 344.85183716]
[104.21941376 359.73590088]
[106.08089447 374.61993408]
[119.31209564 382.95477295]
[124.04101562 397.86016846]
[118.03479767 412.29830933]
[104.12940216 419.45190430]
[88.89051819 415.94323730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[4 93]
[5 92]
[7 90]
[8 89]
[9 88]
[11 86]
[12 85]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 30]
[21 29]
[22 28]
[35 42]
[36 41]
[44 74]
[45 73]
[46 72]
[47 71]
[51 67]
[52 66]
[53 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
