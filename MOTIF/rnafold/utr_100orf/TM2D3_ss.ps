%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCCGGAAGUGCGCAGGCGCUGGCAAGAUGGCGGGAGGGGUGCUCCCGCUGAGGGGCCUCCGCGCCUUGUGUCGCGUGCUGCUCUUCCUCUCGCAGUUCUGCAUUCUGUCGGGCGGUGAGCAAUCGC\
) } def
/len { sequence length } bind def

/coor [
[104.19223022 114.43115234]
[100.62936401 129.00187683]
[97.06650543 143.57260132]
[99.17763519 160.39459229]
[83.59746552 167.08000183]
[72.86029816 153.95942688]
[82.49578094 140.00973511]
[86.05863953 125.43901062]
[89.62150574 110.86828613]
[84.05488586 100.92219543]
[86.98509216 89.19462585]
[97.73405457 82.28451538]
[85.24953461 73.96966553]
[72.76501465 65.65481567]
[60.18169022 57.49025726]
[47.50137711 49.47716904]
[34.82106018 41.46408081]
[22.14074516 33.45099258]
[9.36526012 25.59052277]
[-3.50355744 17.88380241]
[-16.37237549 10.17708302]
[-29.24119377 2.47036338]
[-42.11001205 -5.23635626]
[-62.19096375 -4.55112219]
[-71.03972626 -21.67808151]
[-84.26324463 -28.75894356]
[-97.48676300 -35.83980560]
[-109.83248901 -26.93226242]
[-124.76057434 -24.27910995]
[-139.30075073 -28.35384941]
[-150.58351135 -38.29670715]
[-156.40638733 -52.09538269]
[-155.66380310 -66.99216461]
[-168.88731384 -74.07302856]
[-182.11083984 -81.15389252]
[-195.33435059 -88.23474884]
[-208.55787659 -95.31561279]
[-221.78138733 -102.39647675]
[-235.00489807 -109.47734070]
[-248.22842407 -116.55820465]
[-263.93872070 -113.30762482]
[-276.18270874 -123.67410278]
[-275.56787109 -139.70536804]
[-262.56585693 -149.10360718]
[-247.15068054 -144.65928650]
[-241.14755249 -129.78172302]
[-227.92404175 -122.70085907]
[-214.70051575 -115.61999512]
[-201.47700500 -108.53913116]
[-188.25349426 -101.45826721]
[-175.02996826 -94.37740326]
[-161.80645752 -87.29653931]
[-148.58294678 -80.21567535]
[-136.59596252 -89.09136963]
[-121.88354492 -91.89390564]
[-107.35379791 -88.01480865]
[-95.90242767 -78.17172241]
[-89.83566284 -64.27635193]
[-90.40589905 -49.06332397]
[-77.18238068 -41.98246002]
[-63.95886612 -34.90159607]
[-54.36537170 -38.75782013]
[-44.02799988 -36.59923172]
[-36.46948624 -28.91141891]
[-34.40328979 -18.10517502]
[-21.53447342 -10.39845467]
[-8.66565609 -2.69173503]
[4.20316219 5.01498461]
[17.07197952 12.72170448]
[24.50048065 13.46670628]
[30.15383530 20.77067566]
[42.83414841 28.78376579]
[55.51446533 36.79685593]
[68.19477844 44.80994415]
[75.60327911 45.73286057]
[81.07986450 53.17029572]
[93.56438446 61.48514557]
[106.04890442 69.79999542]
[119.59671021 76.23871613]
[133.92776489 80.66822815]
[148.25883484 85.09774017]
[166.05883789 80.56501007]
[177.53416443 93.78601837]
[191.96733093 97.87060547]
[206.40049744 101.95520020]
[220.83364868 106.03978729]
[235.26681519 110.12437439]
[246.95043945 104.50893402]
[258.93215942 108.27901459]
[264.89953613 118.87265015]
[279.23059082 123.30215454]
[294.70016479 119.98510742]
[304.57504272 131.13572693]
[318.90609741 135.56524658]
[333.23715210 139.99475098]
[347.56823730 144.42427063]
[361.95138550 148.68162537]
[376.38455200 152.76620483]
[390.81768799 156.85079956]
[402.30889893 146.55731201]
[417.54458618 144.13304138]
[431.66314697 150.35157776]
[440.15936279 163.22860718]
[440.32214355 178.65512085]
[432.09951782 191.70855713]
[418.11532593 198.22361755]
[402.83187866 196.12138367]
[391.12603760 186.07266235]
[386.73312378 171.28396606]
[372.29995728 167.19937134]
[357.86679077 163.11477661]
[350.50100708 164.33251953]
[343.13873291 158.75532532]
[328.80764771 154.32582092]
[314.47659302 149.89630127]
[300.14553833 145.46679688]
[285.70098877 149.10067749]
[274.80108643 137.63322449]
[260.47003174 133.20370483]
[243.64726257 138.04859924]
[231.18222046 124.55753326]
[216.74906921 120.47294617]
[202.31590271 116.38835907]
[187.88273621 112.30377197]
[173.44958496 108.21918488]
[162.67747498 113.85799408]
[150.57408142 110.49897003]
[143.82933044 99.42880249]
[129.49826050 94.99929047]
[115.16719818 90.56977844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[12 78]
[13 77]
[14 76]
[15 74]
[16 73]
[17 72]
[18 71]
[19 69]
[20 68]
[21 67]
[22 66]
[23 65]
[25 61]
[26 60]
[27 59]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[79 130]
[80 129]
[81 128]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[90 119]
[91 118]
[93 116]
[94 115]
[95 114]
[96 113]
[97 111]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
