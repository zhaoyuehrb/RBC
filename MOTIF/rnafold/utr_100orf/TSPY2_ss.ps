%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUUCGCGCGCAGUCCCUUAGGGGGCGCCUGGAAGCCCGGCGCAUGCGCCCUGAGGGCUCGCUGACCUACCGGGUGCCAGAGAGGCUGCGGCAGGGUUCCUGUGGCGUGGGUCGGGCAGCACAGGCCUUGGUGUGUGCGAGUG\
) } def
/len { sequence length } bind def

/coor [
[107.00380707 306.46069336]
[91.51861572 305.46649170]
[79.59671783 295.53433228]
[75.82232666 280.48330688]
[81.64677429 266.10083008]
[94.83044434 257.91726685]
[95.79149628 242.94810486]
[96.75255585 227.97891235]
[97.71360779 213.00973511]
[98.67465973 198.04055786]
[99.63571167 183.07138062]
[100.59676361 168.10218811]
[101.55781555 153.13301086]
[102.51887512 138.16383362]
[103.47992706 123.19464874]
[90.41014099 115.83388519]
[78.10755920 124.41564178]
[65.80497742 132.99739075]
[53.50239182 141.57913208]
[41.19981003 150.16088867]
[34.73654175 165.23265076]
[18.42260361 166.90223694]
[9.04037952 153.45211792]
[16.24149323 138.71861267]
[32.61806107 137.85830688]
[44.92064285 129.27655029]
[57.22322845 120.69480133]
[69.52581024 112.11305237]
[81.82839203 103.53130341]
[90.41014099 91.22872162]
[94.21496582 76.71929932]
[98.01978302 62.20987320]
[101.82460022 47.70045090]
[105.62941742 33.19102859]
[94.74842072 20.28537369]
[93.68801117 3.60426712]
[102.66739655 -10.29685497]
[117.99890900 -16.07238388]
[121.49279785 -30.65980148]
[124.98667908 -45.24721909]
[128.48057556 -59.83463669]
[131.97445679 -74.42205811]
[135.46833801 -89.00947571]
[138.96223450 -103.59689331]
[134.65216064 -118.81970215]
[145.14115906 -129.39468384]
[148.63504028 -143.98210144]
[152.12893677 -158.56951904]
[155.62281799 -173.15693665]
[159.11669922 -187.74435425]
[155.31188965 -202.25378418]
[145.10929871 -213.24955750]
[134.90670776 -224.24533081]
[124.70411682 -235.24110413]
[109.49848938 -242.73945618]
[112.49446106 -259.42660522]
[129.35882568 -261.16717529]
[135.69989014 -245.44369507]
[145.90248108 -234.44792175]
[156.10507202 -223.45214844]
[166.30766296 -212.45637512]
[173.74609375 -213.41545105]
[196.06137085 -216.29267883]
[203.14114380 -229.51676941]
[210.22093201 -242.74087524]
[208.59895325 -262.78710938]
[225.33105469 -272.39572144]
[231.83930969 -285.91024780]
[238.34756470 -299.42477417]
[244.85581970 -312.93930054]
[251.36407471 -326.45385742]
[249.53529358 -344.74398804]
[264.34121704 -354.10836792]
[270.55917358 -367.75891113]
[276.77716064 -381.40942383]
[270.62515259 -393.43899536]
[272.51989746 -406.61984253]
[281.54318237 -416.14611816]
[294.21951294 -418.67596436]
[300.72775269 -432.19049072]
[307.23602295 -445.70501709]
[303.31582642 -461.26174927]
[313.14862061 -473.93832397]
[329.19152832 -474.01037598]
[339.13778687 -461.42260742]
[335.35748291 -445.83129883]
[320.75054932 -439.19677734]
[314.24227905 -425.68225098]
[307.73403931 -412.16769409]
[313.96954346 -396.58303833]
[306.89630127 -380.98962402]
[290.42767334 -375.19146729]
[284.20971680 -361.54092407]
[277.99176025 -347.89041138]
[281.93759155 -336.40863037]
[276.81185913 -324.96112061]
[264.87860107 -319.94558716]
[258.37036133 -306.43106079]
[251.86210632 -292.91653442]
[245.35385132 -279.40197754]
[238.84558105 -265.88745117]
[243.09909058 -256.50155640]
[241.41114807 -246.11259460]
[234.10540771 -238.23255920]
[223.44502258 -235.66108704]
[216.36524963 -222.43699646]
[209.28546143 -209.21290588]
[173.70411682 -184.25047302]
[170.21023560 -169.66305542]
[166.71635437 -155.07563782]
[163.22245789 -140.48822021]
[159.72857666 -125.90079498]
[164.28854370 -111.72137451]
[153.54965210 -100.10300446]
[150.05575562 -85.51558685]
[146.56187439 -70.92816925]
[143.06799316 -56.34075165]
[139.57409668 -41.75333405]
[136.08021545 -27.16591454]
[132.58631897 -12.57849693]
[142.18890381 -3.24694800]
[145.93942261 9.71984100]
[142.75007629 22.94755554]
[133.35369873 32.93837357]
[120.13883972 36.99584961]
[116.33402252 51.50527191]
[112.52920532 66.01469421]
[108.72438812 80.52411652]
[104.91957092 95.03353882]
[109.52991486 94.72726440]
[114.43370819 96.76358032]
[118.65435791 101.19931793]
[121.23170471 107.72576904]
[121.34927368 115.68957520]
[118.44910431 124.15570831]
[117.48805237 139.12489319]
[116.52700043 154.09407043]
[115.56594849 169.06324768]
[114.60489655 184.03242493]
[113.64383698 199.00160217]
[112.68278503 213.97079468]
[111.72173309 228.93997192]
[110.76068115 243.90914917]
[109.79962921 258.87832642]
[121.82856750 268.68057251]
[125.76600647 283.68978882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 144]
[7 143]
[8 142]
[9 141]
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[38 120]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[46 112]
[47 111]
[48 110]
[49 109]
[50 108]
[51 61]
[52 60]
[53 59]
[54 58]
[63 107]
[64 106]
[65 105]
[67 101]
[68 100]
[69 99]
[70 98]
[71 97]
[73 94]
[74 93]
[75 92]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
