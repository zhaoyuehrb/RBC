%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCGGACAGGAAGGCGUGUGCAAGGCGGGGUCCGGCCCGCGCAGGUCGGGUAAGCGCGUCUAGGGCGCUGCGCGGCGCAGCGAAAAUGGCGGCUUCCAGGUGGGCGCGCAAGGCCGUGGUCCUGCUUUGUGCCUCUGACCUGCUGCUGCUGCUGCUACUGCUACCACCGCCUGGGUCCUGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[89.22400665 460.45513916]
[78.29719543 449.03671265]
[78.72834015 433.23831177]
[90.26164246 422.43283081]
[90.51229095 407.43493652]
[90.76293945 392.43701172]
[88.13154602 388.42977905]
[88.00312805 382.72311401]
[91.28091431 376.94436646]
[92.03257751 361.96322632]
[92.78424072 346.98208618]
[93.53589630 332.00091553]
[94.28755951 317.01977539]
[94.66351318 302.02447510]
[94.66351318 287.02447510]
[94.66351318 272.02447510]
[94.66351318 257.02447510]
[94.66351318 242.02447510]
[91.51322174 235.32228088]
[94.79093170 226.77435303]
[95.04158020 211.77644348]
[95.29222870 196.77853394]
[89.03885651 192.63784790]
[80.75728607 205.14447021]
[68.25078583 196.86270142]
[76.53210449 184.35647583]
[70.27872467 180.21578979]
[56.56875610 186.30155945]
[42.85878754 192.38734436]
[29.14881706 198.47312927]
[15.43884754 204.55889893]
[9.99326324 219.39538574]
[-4.38322592 225.95983887]
[-19.16130257 220.35769653]
[-25.57339859 205.91261292]
[-19.81532860 191.19459534]
[-5.30325460 184.93557739]
[9.35306740 190.84893799]
[23.06303787 184.76315308]
[36.77300644 178.67736816]
[50.48297882 172.59159851]
[64.19294739 166.50581360]
[74.16141510 155.29734802]
[78.60555267 140.97080994]
[83.04968262 126.64427948]
[87.49382019 112.31774139]
[81.98593903 98.36556244]
[68.95397949 90.93804169]
[55.92202377 83.51051331]
[42.89006805 76.08298492]
[27.06925392 75.97172546]
[19.84310341 62.94743729]
[6.81114817 55.51991272]
[-6.22080755 48.09238815]
[-15.24583054 46.55636978]
[-19.40697479 40.43030548]
[-32.31299973 32.78605652]
[-45.21902084 25.14180565]
[-58.12504578 17.49755669]
[-72.81726837 22.85224533]
[-87.49634552 17.46164131]
[-95.23127747 3.87102365]
[-92.36985016 -11.50253391]
[-80.26316071 -21.40010834]
[-64.62760162 -21.14836693]
[-52.84581375 -10.86617374]
[-50.48079681 4.59153318]
[-37.57477188 12.23578262]
[-24.66874886 19.88003159]
[-11.76272488 27.52428246]
[1.20671737 35.06043243]
[14.23867321 42.48795700]
[27.27062988 49.91548157]
[42.15931320 49.49547958]
[50.31759262 63.05103302]
[63.34955215 70.47856140]
[76.38150787 77.90608215]
[89.41345978 85.33361053]
[104.29580688 83.45858002]
[115.07816315 73.03069305]
[125.86051941 62.60280991]
[136.64286804 52.17492294]
[147.42523193 41.74703598]
[132.49690247 40.28248215]
[122.85749054 28.78979874]
[124.01371002 13.83442688]
[135.30505371 3.95993376]
[150.28109741 4.80733013]
[160.38645935 15.89252281]
[159.84822083 30.88292885]
[171.62022400 21.58667946]
[183.39221191 12.29043198]
[195.16419983 2.99418378]
[206.93618774 -6.30206442]
[218.70817566 -15.59831333]
[218.73211670 -29.07922935]
[226.40914917 -39.92297745]
[238.74923706 -44.29442215]
[251.16548157 -40.80667114]
[263.09115601 -49.90491104]
[275.01684570 -59.00315475]
[286.94253540 -68.10139465]
[298.86822510 -77.19963837]
[305.14694214 -91.72163391]
[319.95874023 -93.28984833]
[331.88442993 -102.38809204]
[338.57104492 -119.53546143]
[356.03997803 -121.11859131]
[367.81195068 -130.41484070]
[379.58395386 -139.71109009]
[391.35595703 -149.00733948]
[403.12792969 -158.30358887]
[414.89993286 -167.59983826]
[426.67190552 -176.89608765]
[438.44390869 -186.19233704]
[450.21588135 -195.48858643]
[448.61602783 -210.83276367]
[455.58621216 -224.59576416]
[468.90228271 -232.38584900]
[484.31515503 -231.71723938]
[496.90661621 -222.80329895]
[502.65878296 -208.48840332]
[499.73617554 -193.34040833]
[489.07135010 -182.19296265]
[474.06744385 -178.60321045]
[459.51214600 -183.71658325]
[447.74014282 -174.42034912]
[435.96817017 -165.12409973]
[424.19616699 -155.82785034]
[412.42419434 -146.53160095]
[400.65219116 -137.23535156]
[388.88018799 -127.93910217]
[377.10821533 -118.64285278]
[365.33621216 -109.34660339]
[363.60827637 -97.36150360]
[353.85952759 -89.52158356]
[340.98266602 -90.46240234]
[329.05697632 -81.36415863]
[323.63128662 -67.49293518]
[307.96646118 -65.27395630]
[296.04077148 -56.17571259]
[284.11508179 -47.07746887]
[272.18939209 -37.97922516]
[260.26370239 -28.88098335]
[258.74307251 -12.14106274]
[245.32781982 -1.46264696]
[228.00442505 -3.82632208]
[216.23243713 5.46992636]
[204.46044922 14.76617432]
[192.68846130 24.06242371]
[180.91647339 33.35866928]
[169.14447021 42.65491867]
[157.85311890 52.52939224]
[147.07075500 62.95727921]
[136.28840637 73.38516235]
[125.50605011 83.81304932]
[114.72369385 94.24093628]
[115.70085144 103.82520294]
[110.88660431 112.41252136]
[101.82035828 116.76187134]
[97.37622070 131.08840942]
[92.93209076 145.41494751]
[88.48795319 159.74148560]
[97.65540314 162.66116333]
[105.82055664 170.39167786]
[110.68199158 182.37423706]
[110.29013062 197.02919006]
[110.03948975 212.02708435]
[109.78884125 227.02499390]
[109.66351318 242.02447510]
[109.66351318 257.02447510]
[109.66351318 272.02447510]
[109.66351318 287.02447510]
[109.66351318 302.02447510]
[112.29665375 306.57751465]
[112.85083008 311.21969604]
[111.64329529 315.13961792]
[109.26871490 317.77142334]
[108.51705170 332.75256348]
[107.76539612 347.73373413]
[107.01373291 362.71487427]
[106.26206970 377.69604492]
[105.76084137 392.68765259]
[105.51019287 407.68557739]
[105.25955200 422.68347168]
[116.42535400 433.86831665]
[116.32834625 449.67230225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 185]
[5 184]
[6 183]
[9 182]
[10 181]
[11 180]
[12 179]
[13 178]
[14 174]
[15 173]
[16 172]
[17 171]
[18 170]
[20 169]
[21 168]
[22 167]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[43 163]
[44 162]
[45 161]
[46 160]
[47 78]
[48 77]
[49 76]
[50 75]
[52 73]
[53 72]
[54 71]
[56 70]
[57 69]
[58 68]
[59 67]
[79 157]
[80 156]
[81 155]
[82 154]
[83 153]
[90 152]
[91 151]
[92 150]
[93 149]
[94 148]
[95 147]
[99 144]
[100 143]
[101 142]
[102 141]
[103 140]
[105 138]
[106 137]
[108 134]
[109 133]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
