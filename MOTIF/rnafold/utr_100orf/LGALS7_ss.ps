%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCUGCCCAACCCGGUCCCAGCCAUGUCCAACGUCCCCCACAAGUCCUCACUGCCCGAGGGCAUCCGCCCUGGCACGGUGCUGAGAAUUCGCGGCUUGGUUCCUCCCAAUGCCAGCAGGUUCC\
) } def
/len { sequence length } bind def

/coor [
[94.05374146 142.93318176]
[83.50708008 132.26696777]
[86.09422302 117.49169159]
[76.45240784 128.98236084]
[66.81059265 140.47302246]
[57.16877747 151.96369934]
[47.52696228 163.45436096]
[45.04436493 183.38597107]
[26.74912071 189.44212341]
[17.69205475 201.39910889]
[18.45199966 217.42416382]
[6.30234718 227.90106201]
[-9.43672943 224.79284668]
[-16.69155693 210.48385620]
[-9.89685345 195.95074463]
[5.73506689 192.34204102]
[14.79213333 180.38505554]
[12.47863770 170.29467773]
[16.23507309 160.41133118]
[25.02633476 154.14822388]
[36.03629684 153.81254578]
[45.67811203 142.32188416]
[55.31992722 130.83120728]
[64.96173859 119.34054565]
[74.60355377 107.84988403]
[60.63314819 113.31135559]
[46.54592133 118.46402740]
[31.59929848 119.72835541]
[16.84671021 117.01521301]
[3.32790351 110.51583862]
[-8.00432396 100.68829346]
[-16.35128593 88.22521973]
[-21.12469482 74.00500488]
[-21.98812485 59.02987289]
[-18.88072014 44.35526657]
[-12.02149200 31.01544189]
[-1.89387083 19.95057487]
[10.78835583 11.94050980]
[25.13135338 7.54979134]
[40.12424088 7.08787394]
[54.71032715 10.58731270]
[67.86159515 17.80146980]
[78.65116119 28.22189713]
[86.31858063 41.11417007]
[90.32345581 55.56965256]
[90.38321686 70.57195282]
[95.17948151 84.78446960]
[97.78421021 70.01235199]
[88.98841095 57.15654755]
[91.84040833 42.21262741]
[104.15065765 33.90641022]
[106.75538635 19.13429260]
[109.36010742 4.36217594]
[111.96482849 -10.40994072]
[114.56954956 -25.18205643]
[107.84657288 -42.27032852]
[119.51889038 -55.31174088]
[121.75452423 -70.14420319]
[119.92816162 -79.20897675]
[124.23523712 -85.31673431]
[126.83995819 -100.08885193]
[129.44468689 -114.86096191]
[132.04940796 -129.63308716]
[134.65412903 -144.40519714]
[128.53988647 -159.62190247]
[138.87234497 -172.35659790]
[155.02235413 -169.50891113]
[160.37617493 -154.00830078]
[149.42623901 -141.80047607]
[146.82151794 -127.02835846]
[144.21679688 -112.25624084]
[141.61207581 -97.48412323]
[139.00735474 -82.71201324]
[136.58699036 -67.90856934]
[134.35134888 -53.07610703]
[141.30325317 -43.09294128]
[139.48707581 -30.65736389]
[129.34167480 -22.57733345]
[126.73694611 -7.80521774]
[124.13222504 6.96689844]
[121.52749634 21.73901558]
[118.92277527 36.51113129]
[127.64973450 48.52677917]
[125.21861267 63.54491043]
[112.55632782 72.61708069]
[109.95159912 87.38919067]
[116.12091064 101.06178284]
[128.92027283 108.88330841]
[141.71963501 116.70484161]
[154.51899719 124.52636719]
[167.31835938 132.34790039]
[183.12841797 132.94161987]
[189.95399475 146.18023682]
[202.75335693 154.00177002]
[215.64923096 161.66313171]
[228.63960266 169.16313171]
[241.62998962 176.66313171]
[254.71286011 184.00059509]
[267.88616943 191.17440796]
[281.05950928 198.34822083]
[294.23281860 205.52203369]
[309.31909180 200.81242371]
[323.27789307 208.22372437]
[327.82772827 223.35893250]
[320.26925659 237.23860168]
[305.08679199 241.62815857]
[291.28781128 233.92338562]
[287.05902100 218.69535828]
[273.88568115 211.52154541]
[260.71237183 204.34773254]
[247.53904724 197.17391968]
[240.07839966 196.73320007]
[234.12998962 189.65350342]
[221.13960266 182.15350342]
[208.14923096 174.65350342]
[200.70187378 174.02693176]
[194.93182373 166.80113220]
[182.13246155 158.97959900]
[167.23789978 158.94532776]
[159.49682617 145.14726257]
[146.69746399 137.32572937]
[133.89810181 129.50419617]
[121.09873962 121.68267059]
[108.29937744 113.86114502]
[115.45752716 127.04298401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[9 17]
[10 16]
[47 86]
[48 85]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[57 75]
[58 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[87 124]
[88 123]
[89 122]
[90 121]
[91 120]
[93 118]
[94 117]
[95 115]
[96 114]
[97 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
