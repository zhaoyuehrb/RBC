%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGCCGCAGGAUGCAGGCCAUGGACCCGGCCGCGGCGGAUCUUUACGAGGAGGACGGCAAAGACCUGGACUUCUACGACUUCGAGCCGCUGCCCACCCUCCCCGAGGACG\
) } def
/len { sequence length } bind def

/coor [
[111.95874023 140.61700439]
[105.24031830 127.20571899]
[98.52189636 113.79442596]
[84.32069397 108.96474457]
[70.81888580 115.49935913]
[57.31707764 122.03397369]
[43.81526947 128.56858826]
[30.31346321 135.10321045]
[16.81165504 141.63781738]
[3.30984688 148.17243958]
[-0.84742838 153.59468079]
[-6.31756115 155.68333435]
[-11.11248875 154.67251587]
[-24.95100021 160.46005249]
[-28.63158035 173.50076294]
[-39.02722168 181.88404846]
[-52.16159058 182.69371033]
[-63.17603302 175.85671997]
[-77.16746521 181.26411438]
[-84.94814301 195.29409790]
[-100.79169464 197.81628418]
[-112.54430389 186.89585876]
[-111.19037628 170.91003418]
[-97.76852417 162.12178040]
[-82.57485199 167.27267456]
[-68.58341980 161.86529541]
[-62.50138092 146.25178528]
[-46.72383881 139.67811584]
[-30.73854065 146.62155151]
[-16.90003014 140.83399963]
[-3.22476768 134.67062378]
[10.27704048 128.13601685]
[23.77884865 121.60139465]
[37.28065491 115.06678009]
[50.78246307 108.53216553]
[64.28427124 101.99755096]
[77.78607941 95.46293640]
[98.52189636 85.35758209]
[105.24031830 71.94628143]
[111.95874023 58.53499222]
[118.67716217 45.12369537]
[125.39558411 31.71240234]
[124.65879822 15.90836143]
[137.27708435 7.99457932]
[143.99551392 -5.41671467]
[134.77198792 -19.06172180]
[133.65476990 -35.40010452]
[140.85244751 -50.00603867]
[154.33393860 -58.97017288]
[170.40061951 -59.94588089]
[176.75019836 -73.53568268]
[182.91358948 -87.21094513]
[188.88960266 -100.96911621]
[194.86561584 -114.72728729]
[200.84162903 -128.48545837]
[206.81764221 -142.24362183]
[201.26048279 -156.79545593]
[207.51701355 -170.66307068]
[221.42420959 -175.87129211]
[227.40022278 -189.62945557]
[233.37623596 -203.38761902]
[226.23204041 -217.29785156]
[229.75099182 -232.53436279]
[242.27154541 -241.90292358]
[257.88186646 -240.97999573]
[269.21124268 -230.20135498]
[270.91030884 -214.65635681]
[262.17678833 -201.68486023]
[247.13439941 -197.41160583]
[241.15838623 -183.65344238]
[235.18237305 -169.89526367]
[240.86840820 -156.17649841]
[235.00387573 -142.13864136]
[220.57582092 -136.26760864]
[214.59980774 -122.50943756]
[208.62377930 -108.75126648]
[202.64776611 -94.99310303]
[196.67175293 -81.23493195]
[196.89627075 -73.74482727]
[190.34001160 -67.18609619]
[183.99041748 -53.59629440]
[192.57096863 -42.87852859]
[195.68315125 -29.43831253]
[192.65789795 -15.91018009]
[184.03501892 -4.97149706]
[171.46792603 1.18740737]
[157.40679932 1.30170691]
[150.68838501 14.71300125]
[151.90571594 29.55777740]
[138.80688477 38.43082428]
[132.08845520 51.84211731]
[125.37003326 65.25341034]
[118.65161133 78.66470337]
[111.93318939 92.07600403]
[111.93318939 107.07600403]
[118.65161133 120.48729706]
[125.37003326 133.89859009]
[142.03349304 136.39416504]
[153.84468079 148.17764282]
[156.32960510 164.50831604]
[148.71183777 178.97897339]
[155.79408264 192.20175171]
[162.87632751 205.42453003]
[169.95855713 218.64730835]
[182.76696777 229.75502014]
[175.63905334 245.13778687]
[158.88426208 242.54681396]
[156.73577881 225.72955322]
[149.65354919 212.50677490]
[142.57130432 199.28399658]
[135.48905945 186.06121826]
[122.07697296 185.45956421]
[110.64038086 178.22210693]
[104.25334930 166.16656494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[13 30]
[14 29]
[18 26]
[19 25]
[38 94]
[39 93]
[40 92]
[41 91]
[42 90]
[44 88]
[45 87]
[50 81]
[51 80]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[59 71]
[60 70]
[61 69]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
