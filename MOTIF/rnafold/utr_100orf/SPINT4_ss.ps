%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACAACUAUCCUGCCUGCUGCUUGCUGCACCAUGAAGUCUGCCAAGCUGGGAUUUCUUCUAAGAUUCUUCAUCUUCUGCUCAUUGAAUACCCUGUUAUUGGGUGGUGUUAAUAAAAUUGCGGAGAAGAUAU\
) } def
/len { sequence length } bind def

/coor [
[45.31208038 195.12150574]
[34.80902100 205.83065796]
[20.93595123 211.53485107]
[5.93761873 211.31115723]
[-7.75915718 205.19573975]
[-17.93815804 194.17811584]
[-22.95236206 180.04100037]
[-21.99044037 165.07188416]
[-15.20803738 151.69282532]
[-3.70030379 142.06742859]
[-18.68381691 142.77050781]
[-33.66733170 143.47360229]
[-48.65084457 144.17668152]
[-63.63435745 144.87976074]
[-78.60859680 145.75843811]
[-93.57151031 146.81257629]
[-106.79381561 155.50057983]
[-120.03337097 148.67683411]
[-134.99627686 149.73097229]
[-140.81022644 153.18629456]
[-146.61119080 153.12374878]
[-150.68229675 150.46702576]
[-165.67817688 150.81866455]
[-176.55284119 161.97120667]
[-191.76580811 162.11419678]
[-202.33103943 151.67813110]
[-217.32691956 152.02976990]
[-232.32279968 152.38140869]
[-240.26896667 165.60494995]
[-254.11297607 172.41278076]
[-269.43728638 170.63255310]
[-281.35195923 160.83232117]
[-286.05502319 146.13931274]
[-282.04580688 131.24201965]
[-270.60360718 120.89408875]
[-255.37959290 118.39752960]
[-241.23168945 124.54898071]
[-232.67443848 137.38552856]
[-217.67855835 137.03388977]
[-202.68267822 136.68225098]
[-192.61822510 125.76244354]
[-177.41528320 125.19221497]
[-166.02981567 135.82278442]
[-151.03393555 135.47114563]
[-136.05043030 134.76806641]
[-121.08751678 133.71391296]
[-108.93545532 125.10132599]
[-94.62565613 131.84967041]
[-79.66274261 130.79553223]
[-73.15072632 127.15341949]
[-64.33744049 129.89625549]
[-49.35392761 129.19317627]
[-34.37041473 128.49008179]
[-19.38690186 127.78700256]
[-4.40338755 127.08391571]
[3.25282717 121.78944397]
[13.56963825 123.67284393]
[27.76887321 118.83737946]
[41.96810913 114.00191498]
[56.16734314 109.16645050]
[70.36657715 104.33098602]
[84.56581116 99.49552155]
[94.13259125 87.94230652]
[96.23566437 73.09046936]
[98.33873749 58.23862839]
[100.44181061 43.38679123]
[102.54488373 28.53495407]
[94.09133148 14.89981842]
[99.61649323 -0.16179051]
[114.88195038 -5.09589529]
[128.17735291 3.88252759]
[129.30358887 19.88599968]
[117.39672089 30.63802719]
[115.29364777 45.48986435]
[113.19057465 60.34170151]
[111.08750153 75.19354248]
[108.98442841 90.04537964]
[118.68598175 101.48565674]
[133.68185425 101.83729553]
[148.67773438 102.18893433]
[163.67361450 102.54057312]
[177.74247742 87.03621674]
[198.38803101 86.75311279]
[212.47726440 101.44937134]
[227.44018555 100.39523315]
[242.40309143 99.34108734]
[257.36599731 98.28694916]
[272.32891846 97.23280334]
[288.40332031 85.17102051]
[305.46331787 94.15573120]
[320.36038208 92.40139771]
[335.25744629 90.64707184]
[350.15451050 88.89273834]
[365.05154419 87.13841248]
[373.48138428 73.96752167]
[388.42044067 69.34598541]
[402.81494141 75.45594025]
[409.86828613 89.41246033]
[406.25009155 104.62569427]
[393.66873169 113.91242981]
[378.06475830 112.88774109]
[366.80587769 102.03546906]
[351.90881348 103.78979492]
[337.01177979 105.54412842]
[322.11471558 107.29845428]
[307.21765137 109.05278778]
[301.55825806 117.69737244]
[291.85220337 121.83992004]
[281.26083374 119.86530304]
[273.38305664 112.19571686]
[258.42016602 113.24986267]
[243.45724487 114.30400085]
[228.49432373 115.35814667]
[213.53140259 116.41228485]
[209.77999878 125.20814514]
[203.00405884 132.03790283]
[194.13122559 135.90538025]
[184.39904785 136.22419739]
[175.18237305 132.90620422]
[167.79914856 126.38008881]
[163.32197571 117.53645325]
[148.32609558 117.18481445]
[133.33021545 116.83317566]
[118.33434296 116.48153687]
[89.40127563 113.69475555]
[75.20204163 118.53022003]
[61.00280762 123.36568451]
[46.80357361 128.20115662]
[32.60433960 133.03662109]
[18.40510368 137.87208557]
[32.63695908 142.61067200]
[43.85025787 152.57369995]
[50.23062515 166.14907837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 49]
[16 48]
[18 46]
[19 45]
[22 44]
[23 43]
[26 40]
[27 39]
[28 38]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[62 125]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[78 124]
[79 123]
[80 122]
[81 121]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
