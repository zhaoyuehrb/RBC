%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGUCUGGCUGCAGGCCCGGCCUCCGGCGCCCCCAGCCCCCUGCUGGCCUCCCUGCCCCUGCCCACCCGGCCUCUGCAGCCCCCGCUGGACUUCAAGC\
) } def
/len { sequence length } bind def

/coor [
[136.96223450 251.46212769]
[135.63450623 246.70581055]
[136.49220276 241.19111633]
[131.02243042 227.22396851]
[125.55265808 213.25680542]
[122.29923248 211.50457764]
[119.80231476 207.99458313]
[118.92354584 203.13525391]
[120.29136658 197.72448730]
[116.14684296 183.30841064]
[112.00231171 168.89234924]
[107.85778809 154.47628784]
[103.71326447 140.06022644]
[99.56874084 125.64415741]
[95.42420959 111.22809601]
[90.83335114 96.94789886]
[85.80060577 82.81738281]
[80.76785278 68.68687439]
[75.73509979 54.55635834]
[57.48596573 41.72177887]
[61.25245285 20.48042488]
[54.50502777 7.08370018]
[47.75760269 -6.31302500]
[33.92839813 -7.54098320]
[22.62784576 -15.41767406]
[16.78333855 -27.77081299]
[17.84311104 -41.28645325]
[25.41900063 -52.39781952]
[19.09147453 -65.99790955]
[12.76394939 -79.59799957]
[6.43642378 -93.19808960]
[-12.31606579 -95.89948273]
[-25.69793701 -109.10343933]
[-28.60434532 -127.52843475]
[-20.07196236 -143.95030212]
[-27.63920593 -156.90162659]
[-35.20644760 -169.85295105]
[-42.77368927 -182.80427551]
[-50.34093475 -195.75559998]
[-65.43125916 -201.20185852]
[-70.44519806 -216.44126892]
[-61.53648758 -229.78347778]
[-45.53913116 -230.99346924]
[-34.72492599 -219.14305115]
[-37.38961029 -203.32284546]
[-29.82236481 -190.37152100]
[-22.25512314 -177.42019653]
[-14.68787956 -164.46885681]
[-7.12063646 -151.51753235]
[4.28690338 -152.52691650]
[15.27159023 -149.10934448]
[24.17299271 -141.74009705]
[29.62992096 -131.49482727]
[30.78849983 -119.89266205]
[27.43555641 -108.67108154]
[20.03651237 -99.52561188]
[26.36403847 -85.92552185]
[32.69156265 -72.32543182]
[39.01908875 -58.72534561]
[55.14849091 -56.14732361]
[66.72441101 -44.39056015]
[69.09920502 -27.89638519]
[61.15432739 -13.06045055]
[67.90175629 0.33627477]
[74.64917755 13.73299980]
[82.87058258 14.60096645]
[90.10907745 18.78837967]
[95.07192230 25.63701248]
[96.83666229 34.00606155]
[95.02171326 42.46189499]
[89.86561584 49.52360916]
[94.89836884 63.65412140]
[99.93111420 77.78463745]
[104.96386719 91.91515350]
[109.23220062 95.28552246]
[111.21311188 100.85266876]
[109.84027863 107.08357239]
[113.98480225 121.49963379]
[118.12932587 135.91569519]
[122.27385712 150.33175659]
[126.41838074 164.74783325]
[130.56291199 179.16389465]
[134.70742798 193.57995605]
[139.51982117 207.78703308]
[144.98959351 221.75419617]
[150.45936584 235.72134399]
[156.57461548 249.41819763]
[163.32203674 262.81491089]
[170.06947327 276.21163940]
[185.40512085 278.57754517]
[196.39755249 289.52951050]
[198.81996155 304.85635376]
[191.74085999 318.66452026]
[177.88233948 325.64456177]
[162.57324219 323.11245728]
[151.70027161 312.04187012]
[149.44427490 296.68966675]
[156.67274475 282.95907593]
[149.92532349 269.56234741]
[143.17788696 256.16561890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[5 84]
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[16 74]
[17 73]
[18 72]
[19 71]
[21 65]
[22 64]
[23 63]
[28 59]
[29 58]
[30 57]
[31 56]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
