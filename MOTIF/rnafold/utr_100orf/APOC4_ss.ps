%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUGAGCACAGAGGGACAGAGGCACGGAACCCCCAGAAAUGUCCCUCCUCAGAAACAGGCUCCAGGCCCUGCCUGCCCUGUGCCUCUGCGUGCUGGUCCUGGCCUGCAUUGGGGCAUGCCAGCCAGAGGCCCAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[92.72061920 135.23478699]
[82.85877228 131.63317871]
[74.45654297 125.33794403]
[68.22939301 116.88513184]
[53.80739594 121.00897980]
[39.38540649 125.13283539]
[24.96341324 129.25668335]
[10.54142094 133.38053894]
[7.52316904 136.75543213]
[3.93429184 138.74311829]
[0.29824284 139.33735657]
[-2.91631556 138.70829773]
[-5.34995890 137.16764832]
[-20.08175659 139.99148560]
[-34.81355667 142.81533813]
[-49.54535294 145.63919067]
[-64.27715302 148.46304321]
[-79.00894928 151.28689575]
[-93.74074554 154.11074829]
[-108.47254181 156.93460083]
[-110.95218658 171.00189209]
[-118.08124542 183.34530640]
[-128.98107910 192.48446655]
[-142.32225037 197.33142090]
[-156.48666382 197.32011414]
[-169.76382446 192.47241211]
[-180.55741882 183.39297485]
[-187.57717896 171.19389343]
[-202.36824036 173.68884277]
[-214.65705872 184.54779053]
[-230.11747742 179.07901001]
[-232.84513855 162.90829468]
[-220.03405762 152.67070007]
[-204.86317444 158.89778137]
[-190.07212830 156.40284729]
[-186.78208923 140.93916321]
[-177.80157471 127.88097382]
[-164.47428894 119.23403168]
[-148.81434631 116.34019470]
[-133.20181274 119.66918182]
[-120.02100372 128.74267578]
[-111.29639435 142.20278931]
[-96.56459808 139.37895203]
[-81.83280182 136.55509949]
[-67.10099792 133.73124695]
[-52.36920166 130.90739441]
[-37.63740540 128.08354187]
[-22.90560722 125.25969696]
[-8.17380905 122.43584442]
[6.41757059 118.95854187]
[20.83956337 114.83469391]
[35.26155472 110.71083832]
[49.68354797 106.58699036]
[64.10553741 102.46314240]
[65.18813324 90.91080475]
[69.89123535 80.30376434]
[77.72570801 71.74517059]
[87.87675476 66.12513733]
[85.87744904 51.25897598]
[83.87814331 36.39281464]
[81.87883759 21.52665138]
[79.87953949 6.66048908]
[65.64315033 0.89673281]
[56.20861435 -11.22288418]
[54.11376953 -26.43824387]
[59.92212296 -40.65649414]
[72.07125092 -50.05299377]
[87.29310608 -52.10013580]
[101.49308014 -46.24724197]
[110.85144806 -34.06872177]
[112.85086823 -18.84052658]
[106.95349884 -4.65896845]
[94.74569702 4.66118479]
[96.74500275 19.52734756]
[98.74430847 34.39350891]
[100.74361420 49.25967026]
[102.74291229 64.12583160]
[125.01223755 74.13753510]
[135.76248169 96.05988312]
[150.68714905 97.56131744]
[165.61181641 99.06275177]
[180.53648376 100.56418610]
[195.04180908 94.24708557]
[206.93069458 103.21947479]
[221.85536194 104.72090912]
[236.78002930 106.22234344]
[251.70469666 107.72377777]
[266.62936401 109.22521210]
[281.55404663 110.72664642]
[296.47869873 112.22808075]
[301.38168335 110.00737000]
[306.15707397 109.95147705]
[309.98388672 111.63441467]
[312.33837891 114.36100006]
[327.12942505 116.85594177]
[341.92047119 119.35088348]
[356.71151733 121.84582520]
[371.50259399 124.34075928]
[386.29364014 126.83570099]
[394.52767944 118.12751007]
[405.83926392 114.54853058]
[417.34786987 116.88758850]
[426.18185425 124.44181061]
[430.19506836 135.22215271]
[444.86032104 138.37350464]
[459.52554321 141.52487183]
[474.19076538 144.67622375]
[487.32681274 135.88871765]
[502.81262207 139.04550171]
[511.46072388 152.27371216]
[508.14041138 167.72528076]
[494.82150269 176.23306274]
[479.40591431 172.74955750]
[471.03939819 159.34146118]
[456.37417603 156.19009399]
[441.70895386 153.03874207]
[427.04373169 149.88737488]
[412.37448120 160.73994446]
[394.10415649 157.44810486]
[383.79870605 141.62675476]
[369.00762939 139.13182068]
[354.21658325 136.63687134]
[339.42553711 134.14193726]
[324.63449097 131.64698792]
[309.84341431 129.15205383]
[294.97726440 127.15274811]
[280.05261230 125.65131378]
[265.12792969 124.14987946]
[250.20326233 122.64844513]
[235.27859497 121.14701080]
[220.35392761 119.64557648]
[205.42926025 118.14413452]
[191.99143982 124.56863403]
[179.03504944 115.48885345]
[164.11038208 113.98741913]
[149.18571472 112.48598480]
[134.26104736 110.98455048]
[129.63127136 120.40753174]
[122.47833252 128.09277344]
[113.41131592 133.38586426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[28 35]
[29 34]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[79 137]
[80 136]
[81 135]
[82 134]
[84 132]
[85 131]
[86 130]
[87 129]
[88 128]
[89 127]
[90 126]
[94 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
