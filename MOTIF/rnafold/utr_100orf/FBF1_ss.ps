%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUAUGAGCCUGAUGUGGGCAGAAUCCAGAUGAGCUGGCCAGUGCUGUGAAGGAGCUGAGAGCACCCCCGAGAGCCGUGAGAUGGCACCAAAAACCAAGAAAGGAUGUAAAGGCUCCAUUGAUGAUUUUCUUGGUGACCUUCUAGGGGAUGAUAUGACACUACCUGAGAAGCCUGUUAAAC\
) } def
/len { sequence length } bind def

/coor [
[182.66598511 146.25816345]
[174.54693604 158.87089539]
[162.69145203 168.06044006]
[148.45260620 172.77798462]
[133.45547485 172.48510742]
[119.41165924 167.21525574]
[107.92399597 157.56985474]
[100.30356598 144.64976501]
[97.42008209 129.92951965]
[99.60343170 115.08674622]
[91.80967712 127.90303802]
[84.01591492 140.71932983]
[76.22216034 153.53562927]
[78.60830688 169.40023804]
[67.58744049 181.05871582]
[51.61382675 179.56767273]
[42.94105530 166.07090759]
[48.22212982 150.92198181]
[63.40586472 145.74186707]
[71.19962311 132.92556763]
[78.99338531 120.10928345]
[86.78714752 107.29299164]
[81.85811615 101.64014435]
[70.55242157 111.49819946]
[55.83243561 114.38298035]
[60.69436646 100.19250488]
[72.00006104 90.33444977]
[67.07103729 84.68160248]
[53.31286240 90.65761566]
[39.55469513 96.63362885]
[25.79652596 102.60964966]
[18.59712982 116.94660187]
[2.87020016 120.11571503]
[-9.31990814 109.68590546]
[-8.62198734 93.65804291]
[4.42857695 84.32732391]
[19.82050896 88.85147858]
[33.57867813 82.87546539]
[47.33684921 76.89944458]
[61.09501648 70.92343140]
[85.68905640 73.14671326]
[99.38209534 87.72827148]
[107.82181549 75.32781982]
[116.26153564 62.92737579]
[118.51134491 54.04913330]
[124.95270538 50.38894272]
[133.60292053 38.13439560]
[142.25311279 25.87984657]
[135.93504333 11.95041275]
[137.42762756 -3.17139149]
[146.23039246 -15.43425560]
[159.89787292 -21.60321808]
[174.71826172 -20.11278534]
[183.36846924 -32.36733627]
[192.01867676 -44.62188339]
[200.56394958 -56.94982910]
[209.00367737 -69.35028076]
[211.25347900 -78.22852325]
[217.69483948 -81.88871002]
[226.34504700 -94.14325714]
[218.60787964 -109.89940643]
[219.89532471 -127.31632996]
[229.76411438 -141.61726379]
[245.42988586 -148.92564392]
[262.55212402 -147.31575012]
[270.77890015 -159.85848999]
[271.87783813 -175.64147949]
[285.32794189 -182.04025269]
[293.55471802 -194.58299255]
[301.78149414 -207.12571716]
[310.00827026 -219.66845703]
[311.10720825 -235.45144653]
[324.55731201 -241.85023499]
[332.78408813 -254.39295959]
[341.01086426 -266.93569946]
[342.79934692 -281.82867432]
[337.77615356 -295.96261597]
[332.75296021 -310.09652710]
[327.72976685 -324.23043823]
[322.70657349 -338.36434937]
[311.70513916 -351.26412964]
[321.05529785 -365.40664673]
[337.23352051 -360.33691406]
[336.84048462 -343.38754272]
[341.86367798 -329.25363159]
[346.88687134 -315.11972046]
[351.91006470 -300.98580933]
[356.93325806 -286.85186768]
[364.20458984 -285.01400757]
[366.57247925 -299.82592773]
[366.72888184 -314.82510376]
[380.79302979 -320.04043579]
[390.69094849 -308.76962280]
[383.70172119 -295.49639893]
[378.74725342 -281.33825684]
[386.01858521 -279.50039673]
[397.15432739 -289.55001831]
[408.29006958 -299.59967041]
[419.42581177 -309.64932251]
[430.56152344 -319.69894409]
[441.69726562 -329.74859619]
[452.83300781 -339.79821777]
[463.96875000 -349.84786987]
[475.10449219 -359.89752197]
[485.43600464 -370.77224731]
[494.90231323 -382.40792847]
[504.36865234 -394.04357910]
[507.36727905 -402.69766235]
[514.09729004 -405.79528809]
[523.76086426 -417.26763916]
[526.10491943 -433.49841309]
[541.43151855 -439.33166504]
[553.97399902 -428.76669312]
[550.82971191 -412.67181396]
[535.23321533 -407.60406494]
[525.56964111 -396.13171387]
[516.00433350 -384.57727051]
[506.53799438 -372.94158936]
[497.07168579 -361.30593872]
[511.76296997 -364.33346558]
[525.80224609 -359.05157471]
[534.85473633 -347.09112549]
[536.12530518 -332.14501953]
[529.22167969 -318.82812500]
[516.27545166 -311.25216675]
[501.28393555 -311.75634766]
[488.87594604 -320.18499756]
[482.88262939 -333.93563843]
[485.15414429 -348.76177979]
[474.01840210 -338.71212769]
[462.88265991 -328.66247559]
[451.74691772 -318.61285400]
[440.61117554 -308.56320190]
[429.47543335 -298.51358032]
[418.33969116 -288.46392822]
[407.20394897 -278.41427612]
[396.06820679 -268.36465454]
[389.54586792 -260.95108032]
[381.84521484 -255.95063782]
[373.72671509 -253.44987488]
[365.91250610 -253.31707764]
[359.02783203 -255.22845459]
[353.55358887 -258.70892334]
[345.32681274 -246.16618347]
[337.10003662 -233.62344360]
[336.58953857 -218.73759460]
[322.55099487 -211.44168091]
[314.32421875 -198.89894104]
[306.09744263 -186.35621643]
[297.87066650 -173.81347656]
[297.36016846 -158.92762756]
[283.32165527 -151.63169861]
[275.09487915 -139.08897400]
[281.97192383 -128.45968628]
[284.31866455 -115.97148895]
[281.75042725 -103.47918701]
[274.61535645 -92.85190582]
[263.94747925 -85.69338226]
[251.31707764 -83.10001373]
[238.59959412 -85.49304962]
[229.94938660 -73.23850250]
[221.40411377 -60.91055679]
[212.96440125 -48.51010895]
[211.79736328 -41.19394684]
[204.27322388 -35.97167969]
[195.62301636 -23.71713066]
[186.97280884 -11.46258163]
[193.34024048 2.00298524]
[192.10443115 16.94717216]
[183.49746704 29.34824944]
[169.74862671 35.81864548]
[154.50765991 34.53005219]
[145.85746765 46.78459930]
[137.20726013 59.03915024]
[128.66198730 71.36709595]
[120.22225952 83.76753998]
[111.78253937 96.16799164]
[124.38731384 88.03659058]
[138.98036194 84.56629944]
[153.89617920 86.15318298]
[167.43243408 92.61613464]
[178.04423523 103.21754456]
[184.52046204 116.74745941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[12 20]
[13 19]
[28 40]
[29 39]
[30 38]
[31 37]
[42 177]
[43 176]
[44 175]
[46 174]
[47 173]
[48 172]
[53 167]
[54 166]
[55 165]
[56 163]
[57 162]
[59 161]
[60 160]
[65 153]
[66 152]
[68 150]
[69 149]
[70 148]
[71 147]
[73 145]
[74 144]
[75 143]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[96 137]
[97 136]
[98 135]
[99 134]
[100 133]
[101 132]
[102 131]
[103 130]
[104 129]
[105 119]
[106 118]
[107 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
