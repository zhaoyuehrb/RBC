%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCACGGUCACGAUCUAGAUCCCCCAGGUGGAAACACAGGUCUUUAUCACCAGUACCUAGAAAUGCUGAACACUACAAGCAAAGACAUUCACACGGGC\
) } def
/len { sequence length } bind def

/coor [
[-8.42782116 257.37362671]
[-11.15145588 263.16586304]
[-15.31699371 267.98208618]
[-20.60126305 271.47586060]
[-26.60153961 273.40219116]
[-32.86623001 273.63476562]
[-38.92884445 272.17404175]
[-44.34274673 269.14596558]
[-56.66707993 277.69644165]
[-68.99141693 286.24691772]
[-81.31575012 294.79739380]
[-81.51893616 310.31314087]
[-90.83020020 322.72604370]
[-105.66916656 327.26309204]
[-120.32994843 322.17968750]
[-129.17518616 309.43051147]
[-128.80369568 293.91787720]
[-119.35832214 281.60671997]
[-104.47100830 277.23092651]
[-89.86623383 282.47308350]
[-77.54190063 273.92257690]
[-65.21756744 265.37210083]
[-52.89323044 256.82162476]
[-46.41982651 233.29450989]
[-21.79807663 228.72740173]
[-11.95914745 217.40505981]
[-2.12021875 206.08270264]
[-3.41472363 191.28880310]
[6.40205860 179.66616821]
[21.92805290 178.40867615]
[31.76698112 167.08633423]
[41.60591125 155.76399231]
[51.44483948 144.44165039]
[61.28376770 133.11930847]
[52.27570343 117.83890533]
[49.05220413 100.39629364]
[52.00397873 82.90564728]
[60.77325058 67.48696899]
[74.29711151 56.00912857]
[90.93637085 49.86333084]
[90.46987152 34.87058640]
[90.00337982 19.87784195]
[89.53688049 4.88509703]
[88.83727264 -10.09857941]
[87.90473175 -25.06956291]
[74.73667145 -33.27820587]
[68.93962097 -47.67174149]
[72.74266052 -62.71556091]
[84.68345642 -72.62500763]
[100.17051697 -73.58969879]
[113.24874878 -65.23868561]
[118.88931274 -50.78311539]
[114.92330170 -35.78143692]
[102.87570953 -26.00210762]
[103.80825806 -11.03112316]
[107.42959595 -4.43480635]
[104.52962494 4.41859913]
[104.99612427 19.41134262]
[105.46261597 34.40408707]
[105.92911530 49.39683151]
[116.09527588 51.65977859]
[125.58885956 55.94270706]
[134.01316833 62.06665039]
[141.01618958 69.77571106]
[146.30525208 78.74774170]
[149.65937805 88.60784149]
[164.61404419 87.44258118]
[179.56872559 86.27732849]
[194.52339172 85.11206818]
[201.07385254 71.22009277]
[213.70185852 62.47771454]
[229.01051331 61.23658371]
[242.88189697 67.83056641]
[251.58464050 80.48590088]
[252.77778625 95.79838562]
[246.14035034 109.64901733]
[233.45779419 118.31206512]
[218.14166260 119.45719910]
[204.31188965 112.77639008]
[195.68864441 100.06674194]
[180.73397827 101.23199463]
[165.77931213 102.39725494]
[150.82463074 103.56251526]
[147.58428955 118.20906830]
[140.21907043 131.27716064]
[129.36744690 141.63398743]
[115.97007751 148.38172913]
[101.18833923 150.93547058]
[86.30358124 149.07385254]
[72.60610962 142.95823669]
[62.76718140 154.28057861]
[52.92825317 165.60292053]
[43.08932495 176.92526245]
[33.25039673 188.24760437]
[34.17131805 203.79719543]
[24.03195572 215.13951111]
[9.20212555 215.92164612]
[-0.63680357 227.24398804]
[-10.47573280 238.56632996]
[-8.05863667 244.59948730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 23]
[9 22]
[10 21]
[11 20]
[25 99]
[26 98]
[27 97]
[30 94]
[31 93]
[32 92]
[33 91]
[34 90]
[40 60]
[41 59]
[42 58]
[43 57]
[44 55]
[45 54]
[66 83]
[67 82]
[68 81]
[69 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
