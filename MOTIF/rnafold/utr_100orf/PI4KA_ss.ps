%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAUGCACCUACGCCUGCGCCCUGAGGUCGGGCGCUCGCGGGCCAGGAGCGGGGAGCCGGCGGGCAGCGCCGCGGCUCGUGAGGUGAUGGCGGCGGCCCCGGCCCGGGGAGGCGGAGGCGGAGGCGGAGGCGGCGGCGGCUGCUCCGGCUCCGGCUCCAGCGCCUCGCGGGGCUUCUAUUUCAACA\
) } def
/len { sequence length } bind def

/coor [
[90.80519867 250.79214478]
[103.32538605 241.98852539]
[101.32608032 227.12236023]
[99.32677460 212.25621033]
[89.96212769 200.67376709]
[95.79101562 185.96545410]
[93.79170990 171.09928894]
[89.77621460 164.87678528]
[91.88535309 155.96824646]
[90.13473511 141.07075500]
[88.38412476 126.17326355]
[75.20423889 109.65432739]
[77.45965576 90.18948364]
[91.66528320 79.03969574]
[79.02189636 70.96846008]
[66.37850952 62.89722443]
[53.73513031 54.82598877]
[48.48055649 54.59552765]
[44.26951218 52.56477737]
[41.61519241 49.43770981]
[40.67457962 46.02006531]
[28.45153427 37.32540131]
[16.22849083 28.63073540]
[4.00544691 19.93606949]
[-8.21759701 11.24140453]
[-17.04354477 8.80973530]
[-20.57059860 2.29792356]
[-32.64664841 -6.59977293]
[-44.72270203 -15.49746895]
[-56.79875183 -24.39516449]
[-68.87480164 -33.29286194]
[-80.95085144 -42.19055557]
[-93.02690125 -51.08825302]
[-101.81098938 -53.66706467]
[-105.22873688 -60.23690033]
[-117.15442657 -69.33514404]
[-125.89418793 -72.06037140]
[-129.20167542 -78.68640900]
[-140.97367859 -87.98265076]
[-152.74566650 -97.27890015]
[-165.63644409 -96.55338287]
[-175.25282288 -104.55510712]
[-176.78025818 -116.56740570]
[-188.39526367 -126.05906677]
[-200.01026917 -135.55072021]
[-211.62527466 -145.04238892]
[-224.79450989 -142.16017151]
[-237.03804016 -147.31958008]
[-243.96644592 -158.42744446]
[-243.23677063 -171.30357361]
[-254.69155884 -180.98799133]
[-272.14575195 -176.13908386]
[-288.87567139 -182.66656494]
[-298.26821899 -197.78817749]
[-296.73220825 -215.36540222]
[-308.50421143 -224.66165161]
[-320.27618408 -233.95790100]
[-332.04818726 -243.25415039]
[-343.82015991 -252.55039978]
[-355.59216309 -261.84664917]
[-364.28515625 -264.71752930]
[-367.48147583 -271.39791870]
[-379.09649658 -280.88955688]
[-390.71148682 -290.38122559]
[-406.40936279 -288.55010986]
[-418.75219727 -298.42074585]
[-420.41723633 -314.13708496]
[-410.41665649 -326.37487793]
[-394.68359375 -327.87368774]
[-382.55221558 -317.74426270]
[-381.21984863 -301.99624634]
[-369.60482788 -292.50457764]
[-357.98980713 -283.01290894]
[-346.29589844 -273.61865234]
[-334.52392578 -264.32238770]
[-322.75192261 -255.02613831]
[-310.97994995 -245.72988892]
[-299.20794678 -236.43363953]
[-287.43597412 -227.13739014]
[-276.34384155 -232.12571716]
[-264.11123657 -231.91558838]
[-253.06729126 -226.48551941]
[-245.34106445 -216.81373596]
[-242.45106506 -204.70259094]
[-245.00714111 -192.44277954]
[-233.55235291 -182.75836182]
[-216.87812805 -184.88148499]
[-203.55926514 -174.08306885]
[-202.13362122 -156.65739441]
[-190.51861572 -147.16574097]
[-178.90359497 -137.67407227]
[-167.28858948 -128.18241882]
[-149.84855652 -126.30760193]
[-143.44941711 -109.05089569]
[-131.67742920 -99.75464630]
[-119.90543365 -90.45839691]
[-108.05618286 -81.26083374]
[-96.13049316 -72.16259003]
[-84.12920380 -63.16430283]
[-72.05315399 -54.26660919]
[-59.97710419 -45.36891174]
[-47.90105438 -36.47121429]
[-35.82500458 -27.57351875]
[-23.74895287 -18.67582321]
[-11.67290306 -9.77812767]
[0.47706869 -0.98163962]
[12.70011234 7.71302557]
[24.92315674 16.40769005]
[37.14619827 25.10235596]
[49.36924362 33.79701996]
[61.80636597 42.18260574]
[74.44974518 50.25384140]
[87.09313202 58.32507706]
[99.73651886 66.39630890]
[114.38396454 69.62931061]
[129.25012207 67.63000488]
[144.11628723 65.63069916]
[158.98245239 63.63139725]
[171.62820435 54.12374878]
[185.27320862 60.09563446]
[200.13937378 58.09632874]
[215.00552368 56.09702682]
[229.87168884 54.09772110]
[244.73785400 52.09841537]
[257.38360596 42.59077072]
[271.02859497 48.56265259]
[285.89477539 46.56335068]
[300.76092529 44.56404495]
[315.62710571 42.56474304]
[330.49325562 40.56543732]
[338.60021973 36.31251907]
[345.62429810 38.65908051]
[360.52178955 36.90846634]
[375.41928101 35.15785217]
[390.31677246 33.40723801]
[403.13430786 23.17772484]
[418.30126953 29.41437531]
[420.21514893 45.70145798]
[406.90716553 55.28421402]
[392.06738281 48.30473328]
[377.16989136 50.05534744]
[362.27239990 51.80596161]
[347.37490845 53.55657578]
[332.49255371 55.43159866]
[317.62640381 57.43090439]
[302.76022339 59.43020630]
[287.89407349 61.42951202]
[273.02792358 63.42881775]
[261.44546509 72.79345703]
[246.73715210 66.96457672]
[231.87100220 68.96388245]
[217.00483704 70.96318817]
[202.13867188 72.96249390]
[187.27250671 74.96179962]
[175.69007874 84.32643890]
[160.98175049 78.49755859]
[146.11560059 80.49686432]
[131.24943542 82.49617004]
[116.38327026 84.49546814]
[124.83024597 93.78652954]
[127.61710358 107.56727600]
[138.04499817 118.34963226]
[148.47288513 129.13198853]
[163.83038330 136.31416321]
[161.18026733 153.05970764]
[144.35551453 155.14878845]
[137.69052124 139.55987549]
[127.26263428 128.77751160]
[116.83474731 117.99516296]
[103.28161621 124.42264557]
[105.03223419 139.32014465]
[106.78284454 154.21763611]
[108.65786743 169.09999084]
[110.65717316 183.96614075]
[120.16482544 196.61190796]
[114.19293976 210.25689697]
[116.19223785 225.12306213]
[118.19154358 239.98922729]
[132.59274292 245.17227173]
[142.92715454 256.46203613]
[146.81999207 271.26419067]
[143.37670898 286.17736816]
[133.38854980 297.77456665]
[119.15071869 303.39086914]
[103.93497467 301.73568726]
[91.23777008 293.18936157]
[83.97684479 279.71578979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 178]
[3 177]
[4 176]
[6 174]
[7 173]
[9 172]
[10 171]
[11 170]
[14 114]
[15 113]
[16 112]
[17 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[35 98]
[36 97]
[38 96]
[39 95]
[40 94]
[43 92]
[44 91]
[45 90]
[46 89]
[50 86]
[51 85]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[62 73]
[63 72]
[64 71]
[115 159]
[116 158]
[117 157]
[118 156]
[120 154]
[121 153]
[122 152]
[123 151]
[124 150]
[126 148]
[127 147]
[128 146]
[129 145]
[130 144]
[132 143]
[133 142]
[134 141]
[135 140]
[161 169]
[162 168]
[163 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
