%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCGGCGACGCGGGCAAGAUGGCGGCGCUGGGGGUGGCGGAGGCCGUGGCGGCCCCACACCCGGCUGAGGGGGCCGAGACGGCUGAGGCGGUGGAGCUGAGCCGCGCCCUGAGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[112.12446594 153.54966736]
[98.18727112 148.00398254]
[90.48350525 135.13340759]
[92.17984009 120.23134613]
[79.88635254 128.82612610]
[67.59287262 137.42091370]
[55.29938889 146.01568604]
[43.00590515 154.61047363]
[30.71242332 163.20526123]
[23.83563995 177.45378113]
[8.97144604 178.40510559]
[-3.32203674 186.99987793]
[-15.61551952 195.59466553]
[-14.20802021 210.88893127]
[-20.65079308 224.83117676]
[-33.21076202 233.67100525]
[-48.50936508 235.03056335]
[-62.43134689 228.54412842]
[-71.23177338 215.95649719]
[-72.54336548 200.65371704]
[-66.01331329 186.75213623]
[-53.39817047 177.99121094]
[-38.09134674 176.72758484]
[-24.21030235 183.30117798]
[-11.91681957 174.70640564]
[0.37666306 166.11161804]
[6.37413502 152.47784424]
[22.11764145 150.91177368]
[34.41112518 142.31698608]
[46.70460510 133.72221375]
[58.99808884 125.12742615]
[71.29157257 116.53264618]
[83.58505249 107.93786621]
[86.29624939 93.18491364]
[77.86177063 80.78089905]
[69.42729950 68.37687683]
[60.99283218 55.97285843]
[52.55836105 43.56884003]
[39.98478317 40.35767746]
[33.22918701 29.75180054]
[35.48638153 17.79067230]
[27.37677002 5.17186832]
[20.01357841 -0.44089285]
[19.22537422 -7.88147116]
[11.44608688 -20.70655251]
[3.66680026 -33.53163147]
[-4.11248636 -46.35671234]
[-11.89177322 -59.18179321]
[-25.27590179 -69.58859253]
[-18.98090363 -85.33055115]
[-2.11151576 -83.63937378]
[0.93330789 -66.96108246]
[8.71259499 -54.13600159]
[16.49188042 -41.31092072]
[24.27116776 -28.48583794]
[32.05045319 -15.66075802]
[39.99557495 -2.93774390]
[48.10518646 9.68105888]
[64.08995056 16.79716301]
[64.96237946 35.13436890]
[73.39685059 47.53838730]
[81.83132172 59.94240570]
[90.26579285 72.34642792]
[98.70026398 84.75044250]
[111.91183472 91.85357666]
[126.91056824 92.04829407]
[141.90930176 92.24301910]
[156.90803528 92.43773651]
[170.80749512 84.88023376]
[183.43325806 92.78210449]
[198.43199158 92.97682190]
[213.43072510 93.17154694]
[228.42945862 93.36626434]
[242.32890320 85.80876160]
[254.95466614 93.71063232]
[269.95339966 93.90534973]
[260.91607666 81.93344116]
[262.75363159 67.04642487]
[274.43084717 57.63138580]
[289.36895752 58.99260330]
[299.15206909 70.36318970]
[298.26858521 85.33715057]
[287.21624756 95.47840118]
[302.00314331 97.99784851]
[316.79003906 100.51730347]
[331.57693481 103.03675079]
[342.60742188 96.20044708]
[354.93450928 98.68344879]
[361.99069214 108.60181427]
[376.70721436 111.50428772]
[391.42370605 114.40676880]
[404.40899658 105.39800262]
[419.94604492 108.29199982]
[428.81704712 121.37181091]
[425.75891113 136.87741089]
[412.58605957 145.60960388]
[397.11364746 142.38772583]
[388.52124023 129.12327576]
[373.80471802 126.22079468]
[359.08822632 123.31832123]
[342.87863159 129.90628052]
[329.05749512 117.82364655]
[314.27059937 115.30419922]
[299.48370361 112.78475189]
[284.69677734 110.26530457]
[269.75869751 108.90409088]
[254.75994873 108.70936584]
[241.93330383 116.28079987]
[228.23474121 108.36500549]
[213.23600769 108.17028046]
[198.23725891 107.97556305]
[183.23852539 107.78083801]
[170.41189575 115.35227203]
[156.71331787 107.43647766]
[141.71458435 107.24175262]
[126.71585083 107.04703522]
[111.71710968 106.85231018]
[126.22601318 110.65912628]
[135.44009399 122.49554443]
[135.57093811 137.49496460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[11 26]
[12 25]
[13 24]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[41 58]
[42 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[65 117]
[66 116]
[67 115]
[68 114]
[70 112]
[71 111]
[72 110]
[73 109]
[75 107]
[76 106]
[83 105]
[84 104]
[85 103]
[86 102]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
