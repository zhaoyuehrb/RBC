%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUUUAUGUAAAUCAGAUACCUUUCCAACUUUAUCAUAUCUCUUUCGUGUACCCUACAGAGCUAUGGAGCAGAGCAAUUAUUCCGUGUAUGCCGACUU\
) } def
/len { sequence length } bind def

/coor [
[89.82404327 238.72824097]
[78.93733978 249.04714966]
[66.76495361 257.81259155]
[53.52685547 264.86614990]
[39.46229172 270.08038330]
[24.82543755 273.36099243]
[9.88081741 274.64877319]
[-5.10148716 273.92037964]
[-19.85071182 271.18902588]
[-34.10030746 266.50402832]
[-47.59274673 259.95010376]
[-60.08419800 251.64566040]
[-71.34890747 241.74079895]
[-81.18329620 230.41450500]
[-89.40963745 217.87149048]
[-95.87925720 204.33842468]
[-100.47524261 190.05987549]
[-103.11453247 175.29388428]
[-103.74942780 160.30732727]
[-102.36845398 145.37103271]
[-98.99656677 130.75494385]
[-93.69470215 116.72318268]
[-86.55867767 103.52935028]
[-77.71746826 91.41188049]
[-67.33084106 80.58977509]
[-55.58650589 71.25861359]
[-42.69672012 63.58701706]
[-28.89442062 57.71363831]
[-14.42905140 53.74462509]
[0.43796763 51.75169754]
[15.43795490 51.77087784]
[30.29982948 53.80181885]
[44.75500107 57.80781937]
[58.54223251 63.71647644]
[71.41236115 71.42101288]
[83.13278961 80.78218079]
[93.48871613 91.62723541]
[95.35019684 76.74318695]
[97.21167755 61.85913849]
[99.07315826 46.97509003]
[93.10825348 32.32140732]
[102.36518097 20.65270615]
[104.22666168 5.76865864]
[106.08814240 -9.11538887]
[107.94963074 -23.99943733]
[105.76020050 -29.13302612]
[105.87565613 -34.06983566]
[107.79874420 -37.92423248]
[110.74148560 -40.15925217]
[113.98175812 -54.80509567]
[117.22202301 -69.45093536]
[109.84332275 -83.69643402]
[116.51167297 -98.28796387]
[132.11169434 -102.03214264]
[144.67637634 -92.05676270]
[144.56718445 -76.01407623]
[131.86785889 -66.21067047]
[128.62759399 -51.56482697]
[125.38732910 -36.91898727]
[122.83367157 -22.13795662]
[120.97219086 -7.25390816]
[119.11071014 7.63014030]
[117.24922943 22.51418877]
[123.34728241 36.10326767]
[113.95720673 48.83657074]
[112.09572601 63.72061920]
[110.23424530 78.60466766]
[108.37276459 93.48871613]
[122.86648560 89.62451935]
[130.23141479 102.69194794]
[119.42012787 113.08988190]
[133.11697388 119.20513916]
[146.81382751 125.32038879]
[159.23439026 121.43626404]
[170.57640076 126.94837189]
[174.90956116 138.36071777]
[188.40960693 144.89898682]
[201.90963745 151.43725586]
[215.01939392 143.30473328]
[230.44441223 143.57373047]
[243.26263428 152.15841675]
[249.38380432 166.31945801]
[246.85467529 181.53810120]
[236.48229980 192.95814514]
[221.57644653 196.93548584]
[206.89353943 192.20097351]
[197.11882019 180.26538086]
[195.37138367 164.93730164]
[181.87133789 158.39903259]
[168.37129211 151.86076355]
[151.04869080 154.14741516]
[140.69857788 139.01724243]
[127.00172424 132.90197754]
[113.30487823 126.78672791]
[117.22061157 141.26661682]
[119.15878296 156.14086914]
[119.08438110 171.14068604]
[116.99873352 185.99497986]
[112.93954468 200.43530273]
[106.98017120 214.20068359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[37 68]
[38 67]
[39 66]
[40 65]
[42 63]
[43 62]
[44 61]
[45 60]
[49 59]
[50 58]
[51 57]
[71 94]
[72 93]
[73 92]
[76 90]
[77 89]
[78 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
