%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUCCCACGUGACUGGCUCUCCUCUCAGGCCAUCAUGGCGUCUCCCAGUGGGAAGGGAGCCCGGGCGCUGGAGGCUCCUGGCUGCGGGCCCCGGCCGCUCGCCCGGGACCUGGUGGACUCCGUGGACGAUGCGG\
) } def
/len { sequence length } bind def

/coor [
[41.15134048 229.88052368]
[39.56258774 244.79614258]
[31.77236938 257.61459351]
[19.26451111 265.89428711]
[4.42141485 268.05819702]
[-9.92971802 263.69415283]
[-21.05538940 253.63336182]
[-26.83646584 239.79214478]
[-26.17181015 224.80688477]
[-19.18855095 211.53245544]
[-32.71372604 218.01856995]
[-46.23889923 224.50468445]
[-59.76407623 230.99079895]
[-73.28925323 237.47689819]
[-79.74354553 244.06727600]
[-87.19972992 243.95268250]
[-100.87007141 250.12696838]
[-114.54041290 256.30123901]
[-128.21075439 262.47552490]
[-134.81446838 268.91616821]
[-142.26606750 268.63064575]
[-156.07438660 274.48986816]
[-161.76351929 289.23464966]
[-176.24615479 295.56152344]
[-190.92997742 289.71679688]
[-197.10336304 275.16809082]
[-191.10372925 260.54687500]
[-176.49055481 254.52766418]
[-161.93359375 260.68154907]
[-148.12527466 254.82232666]
[-134.38504028 248.80519104]
[-120.71469879 242.63090515]
[-107.04435730 236.45661926]
[-93.37401581 230.28234863]
[-79.77536011 223.95173645]
[-66.25018311 217.46562195]
[-52.72500992 210.97950745]
[-39.19983673 204.49339294]
[-25.67466164 198.00727844]
[-13.16690159 189.72743225]
[-1.91296077 179.81033325]
[9.34097958 169.89323425]
[20.59491920 159.97613525]
[31.84885979 150.05903625]
[32.52828217 135.22415161]
[43.80010605 125.00649261]
[59.35569763 125.81971741]
[70.60963440 115.90261841]
[81.86357880 105.98551941]
[82.88142395 91.53179169]
[93.75237274 81.95219421]
[108.21932220 82.76054382]
[119.47326660 72.84344482]
[130.72720337 62.92634583]
[130.54994202 41.98533630]
[145.54158020 27.77997589]
[165.86605835 29.04821205]
[176.16432190 18.14197922]
[186.46257019 7.23574734]
[186.88740540 -5.71283674]
[195.76312256 -14.59050369]
[207.90808105 -14.99062347]
[218.45370483 -25.65785599]
[228.99932861 -36.32508850]
[239.54495239 -46.99232101]
[250.09056091 -57.65955353]
[260.63619995 -68.32678986]
[271.18182373 -78.99401855]
[281.09890747 -90.24796295]
[290.35488892 -102.05163574]
[299.61090088 -113.85530090]
[308.86688232 -125.65897369]
[318.12286377 -137.46264648]
[320.99252319 -146.22940063]
[327.72891235 -149.42764282]
[337.25311279 -161.01597595]
[346.77734375 -172.60430908]
[356.30154419 -184.19264221]
[365.82574463 -195.78097534]
[361.78839111 -210.76361084]
[367.36010742 -225.24586487]
[380.39846802 -233.65899658]
[395.88995361 -232.76800537]
[407.87774658 -222.91548157]
[411.75231934 -207.88993835]
[406.02383423 -193.46897888]
[392.89495850 -185.19776917]
[377.41406250 -186.25677490]
[367.88986206 -174.66844177]
[358.36566162 -163.08009338]
[348.84146118 -151.49176025]
[339.31726074 -139.90342712]
[329.92654419 -128.20666504]
[320.67056274 -116.40298462]
[311.41455078 -104.59931183]
[302.15856934 -92.79564667]
[292.90258789 -80.99197388]
[307.84414673 -79.66917419]
[316.32064819 -67.29385376]
[312.15539551 -52.88376999]
[298.38351440 -46.93941116]
[285.04046631 -53.79236603]
[281.84902954 -68.44840240]
[271.30343628 -57.78116608]
[260.75781250 -47.11393356]
[250.21217346 -36.44670105]
[239.66654968 -25.77946663]
[229.12094116 -15.11223412]
[218.57531738 -4.44500113]
[215.09983826 12.71809769]
[197.36880493 17.53400421]
[187.07054138 28.44023705]
[176.77229309 39.34646988]
[179.96289062 48.34768295]
[179.60430908 57.94924545]
[175.70416260 66.79408264]
[168.77371216 73.61621094]
[159.76112366 77.42188263]
[149.92196655 77.63423920]
[140.64430237 74.18028259]
[129.39036560 84.09738159]
[118.13642120 94.01448059]
[117.11857605 108.46820831]
[106.24762726 118.04780579]
[91.78067780 117.23945618]
[80.52673340 127.15655518]
[69.27279663 137.07365417]
[68.12284851 152.60798645]
[56.56848145 162.50502014]
[41.76595688 161.31298828]
[30.51201820 171.23008728]
[19.25807762 181.14718628]
[8.00413704 191.06427002]
[-3.24980378 200.98136902]
[11.69859028 199.73818970]
[25.75284576 204.98011780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[16 34]
[17 33]
[18 32]
[19 31]
[21 30]
[22 29]
[40 134]
[41 133]
[42 132]
[43 131]
[44 130]
[47 127]
[48 126]
[49 125]
[52 122]
[53 121]
[54 120]
[57 113]
[58 112]
[59 111]
[62 109]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
