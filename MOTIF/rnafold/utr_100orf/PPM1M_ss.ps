%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUCCGCGGGCAGCCCCCUGCCGCCGCGCCAUGUCCGCCGGCUGGUUCCGGCGCCGCUUCCUGCCUGGGGAGCCGCUCCCCGCGCCGCGGCCGCCUGGGCCGCAUGCCAGCCCCGUGCCCUACCGACGGC\
) } def
/len { sequence length } bind def

/coor [
[69.52108002 110.71860504]
[59.23222733 121.63370514]
[48.94337463 132.54881287]
[38.65452576 143.46392822]
[39.60405731 154.41990662]
[34.42501068 163.87005615]
[25.07037544 168.75973511]
[14.79389572 167.66421509]
[4.00106430 178.08125305]
[-6.79176712 188.49830627]
[-17.58459854 198.91534424]
[-21.63792801 207.21017456]
[-28.75752449 209.44721985]
[-39.79338455 219.60644531]
[-50.82924271 229.76567078]
[-55.20555115 245.57009888]
[-71.14643097 249.41983032]
[-82.25327301 237.35458374]
[-77.10030365 221.78605652]
[-60.98846436 218.72981262]
[-49.95260620 208.57058716]
[-38.91674805 198.41136169]
[-28.00164223 188.12251282]
[-17.20881081 177.70547485]
[-6.41597891 167.28842163]
[4.37685251 156.87138367]
[8.22691822 137.97955322]
[27.73941803 133.17506409]
[38.02826691 122.25996399]
[48.31711960 111.34485626]
[58.60597229 100.42974854]
[46.06435776 92.20126343]
[38.25902939 79.39202118]
[36.69608688 64.47366333]
[41.67712021 50.32484055]
[52.24098969 39.67567825]
[66.34930420 34.58103180]
[81.27974701 36.02396393]
[94.15134430 43.72603989]
[102.48040771 56.20108032]
[104.65978241 71.04191589]
[100.26844788 85.38570404]
[108.02268982 72.54546356]
[115.77692413 59.70521927]
[123.53115845 46.86497498]
[131.28540039 34.02473068]
[139.03962708 21.18449020]
[146.79386902 8.34424686]
[138.50442505 -6.33606291]
[140.40649414 -23.92505074]
[152.74797058 -37.73941040]
[171.63642883 -41.97341919]
[174.10534668 -56.76883698]
[176.57426453 -71.56425476]
[179.04318237 -86.35968018]
[181.51210022 -101.15509796]
[161.34507751 -101.30339050]
[142.87370300 -119.86281586]
[139.70883179 -134.52513123]
[127.06012726 -144.39375305]
[127.03347015 -160.43678284]
[139.64932251 -170.34739685]
[155.22985840 -166.52299500]
[161.82305908 -151.89735413]
[154.37115479 -137.69000244]
[157.53602600 -123.02768707]
[164.98377991 -122.14395905]
[179.87928772 -120.37650299]
[187.32704163 -119.49276733]
[193.83529663 -133.00730896]
[200.34355164 -146.52183533]
[206.85180664 -160.03636169]
[213.36006165 -173.55090332]
[219.86831665 -187.06542969]
[221.29309082 -203.95941162]
[237.92126465 -207.26702881]
[245.70275879 -192.20433044]
[233.38285828 -180.55717468]
[226.87460327 -167.04264832]
[220.36633301 -153.52810669]
[213.85807800 -140.01358032]
[207.34982300 -126.49904633]
[200.84156799 -112.98451233]
[196.30752563 -98.68618011]
[193.83860779 -83.89075470]
[191.36968994 -69.09533691]
[188.90077209 -54.29991913]
[186.43185425 -39.50449753]
[196.84889221 -28.71166801]
[211.72248840 -30.65492249]
[226.59608459 -32.59817886]
[241.46966553 -34.54143143]
[256.34326172 -36.48468781]
[271.21685791 -38.42794418]
[282.09628296 -50.21850967]
[298.08673096 -48.92025375]
[306.92166138 -35.52908707]
[301.82369995 -20.31756592]
[286.70355225 -14.95466900]
[273.16012573 -23.55434990]
[258.28652954 -21.61109543]
[243.41291809 -19.66784096]
[228.53933716 -17.72458458]
[213.66574097 -15.78133011]
[198.79214478 -13.83807564]
[192.99609375 5.54473019]
[177.52453613 16.68523216]
[159.63410950 16.09848213]
[151.87986755 28.93872452]
[144.12564087 41.77896881]
[136.37139893 54.61920929]
[128.61717224 67.45944977]
[120.86293030 80.29969788]
[113.10869598 93.13993835]
[112.57733154 108.13052368]
[119.40296936 121.48757172]
[126.22860718 134.84461975]
[133.05424500 148.20166016]
[148.41619873 149.62071228]
[160.55822754 159.13780212]
[165.60583496 173.71604919]
[161.94834900 188.70358276]
[150.75286865 199.31796265]
[135.59182739 202.17213440]
[121.30305481 196.35539246]
[112.44605255 183.72380066]
[111.84705353 168.30805969]
[119.69719696 155.02729797]
[112.87155914 141.67025757]
[106.04592133 128.31320190]
[99.22028351 114.95616150]
[91.79548645 113.89677429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[8 26]
[9 25]
[10 24]
[11 23]
[13 22]
[14 21]
[15 20]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[48 108]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[58 66]
[59 65]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[115 131]
[116 130]
[117 129]
[118 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
