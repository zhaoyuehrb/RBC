%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAUCCUAAGCAACUCAACAUCUAAAUUUCCAACCUUCUUGUUGACCGGCAUUCCUGGCCUAGAGUCUGCCCAUGUCUGGAUCUCCAUUCCUUUCU\
) } def
/len { sequence length } bind def

/coor [
[200.91653442 411.19174194]
[197.22235107 396.65374756]
[193.52816772 382.11575317]
[189.83398438 367.57778931]
[186.13980103 353.03979492]
[175.50634766 342.61007690]
[179.60664368 327.32943726]
[175.91246033 312.79144287]
[172.21827698 298.25344849]
[168.52409363 283.71545410]
[149.27499390 277.95248413]
[137.04995728 261.83831787]
[136.68077087 241.48167419]
[148.46685791 224.71664429]
[142.56535339 210.92634583]
[136.66384888 197.13604736]
[130.54859924 183.43920898]
[124.22107697 169.83911133]
[117.89354706 156.23902893]
[111.56602478 142.63893127]
[103.81596375 144.01466370]
[95.94477081 143.99325562]
[88.20230103 142.57542419]
[80.83432007 139.80613708]
[74.07469177 135.77331543]
[68.13800049 130.60498047]
[63.21267319 124.46517181]
[59.45505905 117.54878235]
[56.98443222 110.07535553]
[55.87921143 102.28211212]
[56.17448425 94.41643524]
[57.86087418 86.72798920]
[60.88485718 79.46083069]
[65.15043640 72.84562683]
[70.52222443 67.09236145]
[62.55585480 54.38264084]
[54.58948898 41.67292023]
[46.62312317 28.96320152]
[31.16489029 25.67403221]
[22.63026047 12.37231541]
[26.08267975 -3.05027652]
[39.47388458 -11.44379425]
[54.85911560 -7.82851219]
[63.11058426 5.65068722]
[59.33284378 20.99683380]
[67.29920959 33.70655441]
[75.26557922 46.41627502]
[83.23194122 59.12599564]
[90.44582367 56.86568069]
[97.93943787 55.86830902]
[105.49338531 56.16308975]
[112.88649750 57.74139023]
[119.63391876 44.34466171]
[126.38134766 30.94793892]
[120.03836060 16.65456390]
[124.41660309 1.64240360]
[137.44880676 -7.00026226]
[152.98156738 -5.19262981]
[163.68077087 6.21179199]
[164.49461365 21.82818413]
[155.03878784 34.28296280]
[139.77807617 37.69536209]
[133.03063965 51.09209061]
[126.28321838 64.48881531]
[142.19551086 86.90837860]
[141.76795959 114.39756012]
[125.16611481 136.31141663]
[131.49363708 149.91149902]
[137.82116699 163.51159668]
[144.14869690 177.11167908]
[150.72120667 183.71429443]
[150.45414734 191.23454285]
[156.35565186 205.02484131]
[162.25715637 218.81513977]
[172.63496399 218.71650696]
[182.50428772 221.82843018]
[190.89979553 227.82708740]
[197.00637817 236.10722351]
[200.23820496 245.84327698]
[200.29496765 256.07156372]
[197.18963623 265.78579712]
[191.24539185 274.03598022]
[183.06207275 280.02127075]
[186.75625610 294.55926514]
[190.45043945 309.09725952]
[194.14463806 323.63525391]
[205.04231262 335.10482788]
[200.67778015 349.34561157]
[204.37196350 363.88360596]
[208.06614685 378.42156982]
[211.76033020 392.95956421]
[215.45451355 407.49755859]
[230.11947632 412.28738403]
[239.84912109 424.25976562]
[241.53875732 439.59429932]
[234.64923096 453.39785767]
[221.37896729 461.26574707]
[205.96244812 460.68731689]
[193.31903076 451.84719849]
[187.48320007 437.56622314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[7 86]
[8 85]
[9 84]
[10 83]
[14 74]
[15 73]
[16 72]
[17 70]
[18 69]
[19 68]
[20 67]
[35 48]
[36 47]
[37 46]
[38 45]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
