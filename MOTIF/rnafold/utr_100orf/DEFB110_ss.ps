%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAAAAGGAGGUCUGUUGCCCCCUUUUUUUAAGAAACUCUCUACCAUGAAGAUUCAACUUUUUUUCUUUAUUCUGCACUUUUGGGUCACAAUUUUACCAGCCAAAAAGAAAUAUCCUGAGUAUGGUAGCUUGGACUUGAGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[28.14655876 216.02194214]
[6.95685673 216.05029297]
[-2.52026987 227.67715454]
[-11.99739647 239.30403137]
[-21.47452354 250.93089294]
[-30.95165062 262.55776978]
[-40.42877579 274.18463135]
[-49.90590286 285.81149292]
[-59.38302994 297.43835449]
[-62.10472488 313.02371216]
[-76.14329529 318.00042725]
[-85.62042236 329.62731934]
[-95.09754944 341.25418091]
[-94.90876007 357.29611206]
[-107.42380524 367.33370972]
[-123.04220581 363.66696167]
[-129.78286743 349.10870361]
[-122.47492981 334.82678223]
[-106.72441864 331.77703857]
[-97.24729156 320.15017700]
[-87.77016449 308.52331543]
[-85.72633362 293.76959229]
[-71.00990295 287.96124268]
[-61.53277206 276.33438110]
[-52.05564499 264.70751953]
[-42.57851791 253.08064270]
[-33.10139084 241.45376587]
[-23.62426567 229.82690430]
[-14.14713860 218.20002747]
[-4.67001152 206.57316589]
[-8.45995331 198.62602234]
[-9.42854023 189.83093262]
[-7.43931389 181.16432190]
[-2.68581104 173.59793091]
[4.32686806 167.98977661]
[12.83561230 164.98698425]
[21.90229416 164.95108032]
[30.51719475 167.91482544]
[41.18031311 157.36503601]
[51.84343338 146.81526184]
[62.50655365 136.26547241]
[73.16967010 125.71569824]
[83.83279419 115.16591644]
[68.83286285 115.21145630]
[62.16659164 101.77416229]
[71.27759552 89.85823059]
[85.99330902 92.76988220]
[77.54351044 80.37630463]
[69.09371185 67.98271942]
[60.64390945 55.58913803]
[52.19410706 43.19555664]
[43.74430466 30.80197525]
[35.29450607 18.40839386]
[20.20962906 20.73417473]
[5.61201191 16.27633476]
[-5.59997797 5.91998148]
[-11.20019150 -8.27862263]
[-10.07670307 -23.50033569]
[-2.45258212 -36.72287369]
[10.15839767 -45.32089233]
[25.25231552 -47.58725357]
[39.83226395 -43.07196045]
[51.00338364 -32.67153931]
[56.54764175 -18.45099068]
[55.36421967 -3.23381996]
[47.68808746 9.95859241]
[56.13788986 22.35217476]
[64.58769226 34.74575424]
[73.03749084 47.13933563]
[81.48728943 59.53292084]
[89.93708801 71.92649841]
[98.38689423 84.32008362]
[92.81942749 70.39157104]
[95.28205872 55.59510803]
[105.06077576 44.22071838]
[119.32036591 39.56626511]
[133.92646790 42.98123932]
[144.64421082 53.47551727]
[148.36614990 68.00642395]
[144.01313782 82.36091614]
[132.84729004 92.37709045]
[118.10842133 95.15110779]
[133.10072327 95.63188171]
[148.09301758 96.11265564]
[163.08529663 96.59342957]
[178.07759094 97.07420349]
[193.06988525 97.55497742]
[208.06217957 98.03575134]
[216.81098938 95.16747284]
[223.36875916 98.69039917]
[238.34735107 99.49143982]
[253.32594299 100.29248810]
[263.46655273 92.24721527]
[275.96783447 93.26502228]
[284.13232422 102.25070953]
[299.09036255 103.37165833]
[314.04843140 104.49261475]
[329.00650024 105.61356354]
[343.96453857 106.73451233]
[358.92260742 107.85546875]
[373.89178467 108.81652069]
[388.87036133 109.61756897]
[403.85668945 110.25851440]
[418.84896851 110.73928833]
[425.44784546 97.01432037]
[437.06286621 87.16490173]
[451.68167114 82.89749146]
[466.77142334 84.95145416]
[479.71777344 92.97091675]
[488.27767944 105.56647491]
[490.96807861 120.55586243]
[487.32284546 135.34207153]
[477.97354126 147.36331177]
[464.53997803 154.53683472]
[449.34960938 155.61976624]
[435.03427124 150.42449951]
[424.07415771 139.85113525]
[418.36819458 125.73158264]
[403.37591553 125.25080872]
[396.54129028 128.20095825]
[388.06933594 124.59616089]
[373.09072876 123.79511261]
[366.19464111 126.59854126]
[357.80163574 122.81352234]
[342.84359741 121.69257355]
[327.88552856 120.57162476]
[312.92749023 119.45066833]
[297.96942139 118.32971954]
[283.01135254 117.20877075]
[267.67611694 125.67853546]
[252.52490234 115.27108002]
[237.54631042 114.47003937]
[222.56770325 113.66899109]
[207.58140564 113.02804565]
[192.58911133 112.54727173]
[177.59681702 112.06649780]
[162.60452271 111.58572388]
[147.61224365 111.10494995]
[132.61994934 110.62417603]
[117.62764740 110.14340210]
[94.38257599 125.82903290]
[83.71945190 136.37881470]
[73.05633545 146.92858887]
[62.39321518 157.47837830]
[51.73009491 168.02815247]
[41.06697464 178.57794189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[11 21]
[12 20]
[13 19]
[38 146]
[39 145]
[40 144]
[41 143]
[42 142]
[43 141]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[82 140]
[83 139]
[84 138]
[85 137]
[86 136]
[87 135]
[88 134]
[90 133]
[91 132]
[92 131]
[95 129]
[96 128]
[97 127]
[98 126]
[99 125]
[100 124]
[101 122]
[102 121]
[103 119]
[104 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
