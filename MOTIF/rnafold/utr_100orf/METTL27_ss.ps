%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUGCCCACACGCCCGAGGCGCGCUGGAUUGGCGGAGCAUGGCCCAGGAGGAGGGUGGGAGCCUGCCCGAGGUGCGGGCGCGGGUCAGGGCCGCGCAUGGCAUCCCCGACCUGGCCCAAAAGCUCCAUUUCUAUGACC\
) } def
/len { sequence length } bind def

/coor [
[-14.50170326 428.74896240]
[-26.14748955 419.29510498]
[-34.38000870 406.75613403]
[-38.42473602 392.31176758]
[-37.90114212 377.32089233]
[-32.85796356 363.19296265]
[-44.73278427 372.35748291]
[-56.60760498 381.52200317]
[-58.25117493 400.33203125]
[-72.82041168 411.83758545]
[-90.87153625 409.16894531]
[-102.32632446 418.85336304]
[-113.45110321 428.91513062]
[-124.23345947 439.34301758]
[-135.01580811 449.77090454]
[-145.79817200 460.19879150]
[-152.98034668 475.55630493]
[-169.72589111 472.90618896]
[-171.81497192 456.08142090]
[-156.22605896 449.41644287]
[-145.44369507 438.98855591]
[-134.66134644 428.56066895]
[-123.87899017 418.13278198]
[-123.48095703 414.55233765]
[-121.27843475 410.99911499]
[-117.30976868 408.34255981]
[-112.01074219 407.39859009]
[-100.55595398 397.71417236]
[-102.09049988 386.31387329]
[-97.85310364 375.49026489]
[-88.80084229 368.00857544]
[-77.13628387 365.84085083]
[-65.77213287 369.64718628]
[-53.89731216 360.48266602]
[-42.02249146 351.31814575]
[-32.21106720 339.97195435]
[-24.85624695 326.89883423]
[-17.50142860 313.82568359]
[-10.14660835 300.75256348]
[-2.79178858 287.67944336]
[-4.50252533 268.46658325]
[12.84301376 258.30056763]
[19.60816574 244.91278076]
[26.37331772 231.52499390]
[25.20775986 216.67605591]
[38.33746338 207.84875488]
[45.10261536 194.46096802]
[51.86776733 181.07318115]
[58.63291931 167.68540955]
[65.39807129 154.29762268]
[63.44433212 136.89242554]
[78.85099030 126.87549591]
[85.31620026 113.34031677]
[80.18089294 99.11624146]
[86.56183624 85.40569305]
[81.32698822 71.34879303]
[76.09214783 57.29189682]
[70.85729980 43.23500061]
[65.62245178 29.17810059]
[60.38760757 15.12120247]
[47.40935898 5.09637928]
[49.86983871 -11.11713600]
[65.23791504 -16.84026909]
[77.70423126 -6.18555164]
[74.44450378 9.88635731]
[79.67935181 23.94325638]
[84.91419983 38.00015259]
[90.14904022 52.05705261]
[95.38388824 66.11395264]
[100.61873627 80.17085266]
[103.43045807 80.46004486]
[106.17255402 81.14588165]
[108.78934479 82.21445465]
[120.02552032 72.27724457]
[131.26170349 62.34002686]
[142.49787903 52.40281296]
[153.73406982 42.46559906]
[154.46107483 25.02603912]
[167.29664612 13.70021820]
[184.01997375 15.09422970]
[195.03196716 4.90915155]
[206.04397583 -5.27592707]
[217.05596924 -15.46100521]
[228.06797791 -25.64608383]
[239.07997131 -35.83116150]
[238.14469910 -51.44075012]
[247.50334167 -63.96870804]
[262.73706055 -67.49971771]
[276.65292358 -60.36653519]
[282.68032837 -45.93724442]
[277.97329712 -31.02490807]
[264.75433350 -22.67067528]
[249.26506042 -24.81916046]
[238.25305176 -14.63408279]
[227.24104309 -4.44900417]
[216.22904968 5.73607445]
[205.21704102 15.92115307]
[194.20504761 26.10623169]
[195.50276184 38.97301102]
[189.03437805 50.39587784]
[176.97990417 56.06787872]
[163.67127991 53.70177841]
[152.43510437 63.63899612]
[141.19891357 73.57621002]
[129.96273804 83.51342773]
[118.72655487 93.45063782]
[115.83953857 111.94517517]
[98.85137939 119.80551910]
[92.38616943 133.34069824]
[95.94525146 145.79298401]
[90.21884155 156.95924377]
[78.78585052 161.06277466]
[72.02069855 174.45056152]
[65.25554657 187.83833313]
[58.49039841 201.22612000]
[51.72524643 214.61390686]
[52.40691376 230.42041016]
[39.76110077 238.29014587]
[32.99594879 251.67793274]
[26.23079681 265.06570435]
[30.24754715 275.28314209]
[27.97910500 285.79928589]
[20.42363930 293.14453125]
[10.28133774 295.03427124]
[2.92651796 308.10739136]
[-4.42830181 321.18051147]
[-11.78312111 334.25363159]
[-19.13794136 347.32675171]
[-5.88676357 340.29779053]
[8.87153339 337.61587524]
[23.74847412 339.53332520]
[37.34442520 345.86975098]
[48.38026428 356.02899170]
[55.81772995 369.05526733]
[58.95709610 383.72308350]
[57.50301361 398.65243530]
[51.59227753 412.43878174]
[41.78097916 423.78506470]
[28.99217415 431.62384033]
[14.42904472 435.21762085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[11 28]
[12 27]
[13 23]
[14 22]
[15 21]
[16 20]
[36 128]
[37 127]
[38 126]
[39 125]
[40 124]
[42 120]
[43 119]
[44 118]
[46 116]
[47 115]
[48 114]
[49 113]
[50 112]
[52 109]
[53 108]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[73 106]
[74 105]
[75 104]
[76 103]
[77 102]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
