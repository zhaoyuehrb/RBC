%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCCCCCCUGCGCCCGGGGCCCGGCUCCGGCUUCUCGCCGCCGCCGCCCUGGCCGGCUUGGCCGUCAUCAGCCGAGGGCUGCUCUCCCAGAGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[137.21408081 180.34178162]
[138.81362915 173.19413757]
[142.66407776 166.90196228]
[135.50328064 153.72155762]
[128.34248352 140.54115295]
[121.18168640 127.36075592]
[110.96015167 132.09857178]
[99.97651672 133.23471069]
[89.43804169 130.79006958]
[80.45629883 125.17137909]
[73.93003082 117.11189270]
[70.45571899 107.57860565]
[70.27481842 97.65746307]
[73.26206970 88.42997742]
[61.49315643 79.12983704]
[45.86841965 76.64424133]
[40.67987442 62.68256760]
[28.91096115 53.38242340]
[17.14204788 44.08227921]
[5.37313318 34.78213882]
[-6.39578056 25.48199463]
[-18.16469383 16.18185043]
[-29.93360901 6.88170815]
[-36.69289017 5.49201345]
[-40.97739029 1.42350006]
[-42.12127686 -3.38090062]
[-53.28923798 -13.39472294]
[-64.45719910 -23.40854454]
[-80.01922607 -22.72955704]
[-91.20247650 -33.04408646]
[-91.75388336 -47.88428879]
[-102.92184448 -57.89810944]
[-114.08980560 -67.91193390]
[-125.25776672 -77.92575836]
[-141.29081726 -78.49215698]
[-150.72828674 -91.46573639]
[-146.33056641 -106.89426422]
[-131.47119141 -112.94229889]
[-117.54902649 -104.97030640]
[-115.24394989 -89.09371948]
[-104.07598877 -79.07989502]
[-92.90802765 -69.06607056]
[-81.74006653 -59.05224991]
[-66.92781067 -60.11652756]
[-55.45925522 -50.12017822]
[-54.44337845 -34.57650757]
[-43.27541351 -24.56268501]
[-32.10745239 -14.54886246]
[-20.63346481 -4.88720608]
[-8.86455154 4.41293716]
[2.90436244 13.71308041]
[14.67327595 23.01322365]
[26.44219017 32.31336594]
[38.21110535 41.61351013]
[49.98001862 50.91365433]
[64.76296234 52.73404312]
[70.79329681 67.36092377]
[82.56221008 76.66106415]
[100.61640167 69.04966736]
[120.64955139 74.54291534]
[133.70851135 92.18904114]
[147.58892822 86.50271606]
[161.46932983 80.81639099]
[175.34973145 75.13005829]
[189.23014832 69.44373322]
[192.78021240 54.33821869]
[204.55303955 44.22979355]
[220.02172852 43.00535965]
[233.23825073 51.13573074]
[239.12059021 65.49462128]
[235.40687561 80.56073761]
[223.52508545 90.54085541]
[208.04402161 91.59741211]
[194.91647339 83.32414246]
[181.03605652 89.01046753]
[167.15565491 94.69679260]
[153.27525330 100.38311768]
[139.39483643 106.06944275]
[134.36209106 120.19995880]
[141.52288818 133.38035583]
[148.68368530 146.56076050]
[155.84448242 159.74116516]
[177.54801941 169.62960815]
[177.86912537 192.79284668]
[187.35116577 204.41569519]
[196.83322144 216.03855896]
[206.31526184 227.66140747]
[215.79731750 239.28427124]
[230.49485779 247.73522949]
[226.44285583 264.19784546]
[209.50189209 264.86148071]
[204.17445374 248.76631165]
[194.69241333 237.14346313]
[185.21035767 225.52059937]
[175.72831726 213.89775085]
[166.24626160 202.27488708]
[159.35324097 203.55117798]
[152.36573792 202.52418518]
[146.03828430 199.27064514]
[141.06509399 194.10945129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 82]
[4 81]
[5 80]
[6 79]
[14 58]
[15 57]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[26 48]
[27 47]
[28 46]
[31 43]
[32 42]
[33 41]
[34 40]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
