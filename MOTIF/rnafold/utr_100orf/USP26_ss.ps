%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAAGAUUAUCAAUAAUCGGAGAUACGUAUAUUUUAUUUGUAAAGAAAACAUGGCUGCCCUAUUCCUACGUGGUUUUGUCCAAAUAGGGAACUGCAAGACUGGGAUAUCUAAGUCAAAAGAAGCAUUCAUUGAAGCAGUGGAAAGAAAGA\
) } def
/len { sequence length } bind def

/coor [
[133.40805054 168.20271301]
[125.51157379 155.44944763]
[117.61508942 142.69619751]
[109.71860504 129.94294739]
[103.28733063 131.30853271]
[96.71266937 131.30853271]
[90.28139496 129.94294739]
[82.38491058 142.69619751]
[74.48842621 155.44944763]
[66.59194183 168.20271301]
[58.69546127 180.95596313]
[58.73155212 197.35507202]
[44.41368103 205.35073853]
[30.47084427 196.71769714]
[31.24623871 180.33688354]
[45.94220352 173.05947876]
[53.83868790 160.30622864]
[61.73516846 147.55297852]
[69.63165283 134.79971313]
[77.52813721 122.04645538]
[67.79598999 111.60502625]
[63.14894104 96.89369202]
[49.10696411 102.16843414]
[35.06498718 107.44317627]
[21.02301216 112.71791840]
[6.98103523 117.99266052]
[-7.06094122 123.26740265]
[-17.04887009 136.27406311]
[-33.26930618 133.85963440]
[-39.03605652 118.50787354]
[-28.41678238 106.01135254]
[-12.33568287 109.22542572]
[1.70629358 103.95068359]
[15.74827003 98.67594147]
[29.79024696 93.40119934]
[43.83222198 88.12645721]
[57.87419891 82.85171509]
[43.02235794 80.74865723]
[28.17052078 78.64559174]
[13.59014797 82.16876984]
[-1.37471652 81.14270020]
[-15.33776665 75.66244507]
[-27.00550079 66.23567200]
[-35.29705048 53.73566437]
[-39.44430161 39.32038498]
[-39.06306839 24.32522964]
[-34.18866730 10.13931370]
[-25.27265167 -1.92321646]
[-13.14097404 -10.74491787]
[1.08251441 -15.50856972]
[16.08018494 -15.77287960]
[30.46269226 -11.51336288]
[42.89767838 -3.12461019]
[52.23319244 8.61626530]
[57.60441971 22.62161827]
[58.51368332 37.59511185]
[64.88105774 51.17658997]
[71.24842834 64.75807190]
[72.17183685 49.78651810]
[73.09525299 34.81496811]
[61.81572723 26.83217049]
[56.01416016 14.41004467]
[57.11534119 0.85302401]
[64.72334290 -10.29082012]
[76.75348663 -16.15834999]
[77.98409271 -31.10778427]
[79.21470642 -46.05722046]
[80.44532013 -61.00665283]
[81.67593384 -75.95608521]
[82.90654755 -90.90552521]
[72.96208954 -102.89491272]
[74.42306519 -118.03823853]
[85.91440582 -127.44487000]
[87.14501953 -142.39430237]
[88.37562561 -157.34373474]
[77.96493530 -169.23461914]
[79.09492493 -184.99845886]
[91.09520721 -195.28285217]
[106.84622192 -193.98625183]
[117.00316620 -181.87791443]
[115.54011536 -166.14149475]
[103.32506561 -156.11312866]
[102.09445190 -141.16369629]
[100.86383820 -126.21425629]
[110.66223145 -115.05509186]
[109.62718201 -99.87670898]
[97.85597992 -89.67491150]
[96.62536621 -74.72547913]
[95.39475250 -59.77604294]
[94.16414642 -44.82660675]
[92.93353271 -29.87717247]
[91.70291901 -14.92773819]
[104.47000885 -4.65391541]
[108.66119385 11.36000919]
[102.44068909 26.87882996]
[88.06680298 35.73838425]
[87.14338684 50.70993423]
[86.21997833 65.68148041]
[111.60502625 67.79598999]
[127.66870117 84.98420715]
[142.17732239 81.17634583]
[156.68595886 77.36849213]
[171.19458008 73.56063080]
[182.57850647 62.57351685]
[196.85302734 66.82644653]
[211.36164856 63.01858902]
[222.62998962 51.10403442]
[238.51757812 55.16812134]
[242.68061829 71.03005981]
[230.83653259 82.37245178]
[215.16950989 77.52721405]
[200.66088867 81.33507538]
[190.31471252 92.04981995]
[175.00244141 88.06925964]
[160.49380493 91.87711334]
[145.98518372 95.68497467]
[131.47656250 99.49283600]
[131.16253662 104.46395874]
[130.06835938 109.32332611]
[128.22142029 113.94928741]
[125.66794586 118.22602081]
[122.47186279 122.04645538]
[130.36834717 134.79971313]
[138.26483154 147.55297852]
[146.16131592 160.30622864]
[169.00186157 163.31884766]
[182.19357300 181.88526917]
[177.62908936 203.93072510]
[187.27090454 215.42138672]
[196.91271973 226.91206360]
[206.55453491 238.40272522]
[216.19633484 249.89338684]
[225.83815002 261.38406372]
[235.47996521 272.87472534]
[250.29293823 281.12170410]
[246.46890259 297.63873291]
[229.53874207 298.53652954]
[223.98930359 282.51654053]
[214.34748840 271.02587891]
[204.70567322 259.53521729]
[195.06385803 248.04454041]
[185.42204285 236.55387878]
[175.78022766 225.06320190]
[166.13841248 213.57254028]
[158.78558350 215.86453247]
[151.05952454 216.07203674]
[143.54177856 214.16471863]
[136.80223083 210.27197266]
[131.35588074 204.67427063]
[127.62349701 197.78298950]
[125.89915466 190.11016846]
[126.32708740 182.23051453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[58 98]
[59 97]
[60 96]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[73 84]
[74 83]
[75 82]
[100 117]
[101 116]
[102 115]
[103 114]
[105 112]
[106 111]
[128 144]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
