%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGUGCGGUGGCGGUUCGGAGUGAGGGUAGCACGCUGAGCUGAAGGCUGUGCGGAGCGGCGCGGCACAGAGCCUGUUGUUGAGCUCAGUAUGUCGUGGGAAUCCGGGGCCGGGCCAGGUCUAGGUUCCCAGGGGAUGGAUCUCGUGUGGAGUGCGUGGUACGGAAAGUGCGUUAAAGGGAAAGGGUCGU\
) } def
/len { sequence length } bind def

/coor [
[86.58160400 132.71510315]
[74.10955811 141.04864502]
[61.63751221 149.38220215]
[53.88798141 166.07807922]
[36.35245895 166.55987549]
[24.01843452 175.09637451]
[11.68441200 183.63287354]
[-0.64961171 192.16938782]
[-12.98363495 200.70588684]
[-25.31765747 209.24238586]
[-37.65167999 217.77888489]
[-40.46190643 235.03730774]
[-54.60156631 244.73930359]
[-71.05445099 241.29003906]
[-83.24715424 250.02720642]
[-95.43985748 258.76437378]
[-107.63255310 267.50152588]
[-119.82525635 276.23870850]
[-132.01795959 284.97586060]
[-144.21064758 293.71301270]
[-156.40335083 302.45019531]
[-163.11396790 316.77770996]
[-177.96609497 317.90182495]
[-190.15879822 326.63900757]
[-202.35150146 335.37615967]
[-203.36390686 350.98095703]
[-214.20733643 362.24835205]
[-229.76182556 363.85824585]
[-242.68302917 355.05050659]
[-246.86996460 339.98385620]
[-240.34567261 325.77233887]
[-226.19073486 319.12615967]
[-211.08866882 323.18347168]
[-198.89596558 314.44628906]
[-186.70326233 305.70913696]
[-180.86474609 292.00656128]
[-165.14051819 290.25750732]
[-152.94781494 281.52032471]
[-140.75512695 272.78317261]
[-128.56242371 264.04598999]
[-116.36972046 255.30883789]
[-104.17701721 246.57167053]
[-91.98432159 237.83450317]
[-79.79161835 229.09733582]
[-79.48961639 216.20628357]
[-71.69765472 205.68894958]
[-59.08373642 201.52325439]
[-46.18818283 205.44487000]
[-33.85416031 196.90835571]
[-21.52013779 188.37185669]
[-9.18611431 179.83535767]
[3.14790940 171.29885864]
[15.48193264 162.76235962]
[27.81595612 154.22584534]
[30.29404449 142.37554932]
[40.51382828 135.16461182]
[53.30395889 136.91015625]
[65.77600098 128.57659912]
[78.24804688 120.24304962]
[76.75562286 89.11161041]
[101.18511200 78.41014862]
[107.15133667 64.64772797]
[113.11756134 50.88531113]
[119.08379364 37.12289429]
[113.51628113 22.57502174]
[119.76293182 8.70296478]
[133.66641235 3.48484898]
[139.63264465 -10.27756882]
[145.59887695 -24.03998566]
[151.56509399 -37.80240250]
[150.58406067 -52.77028656]
[142.87251282 -65.63621521]
[135.16096497 -78.50214386]
[127.44943237 -91.36807251]
[112.09411621 -91.03655243]
[98.63799286 -98.44116974]
[90.70069122 -111.59011078]
[90.41729736 -126.94638824]
[97.86405945 -140.37924194]
[111.03781891 -148.27528381]
[126.39491272 -148.51054382]
[139.80435181 -141.02171326]
[147.65907288 -127.82326508]
[147.84617615 -112.46551514]
[140.31535339 -99.07961273]
[148.02690125 -86.21368408]
[155.73843384 -73.34775543]
[163.44998169 -60.48182678]
[171.98376465 -67.81671143]
[182.25630188 -70.55230713]
[192.08438110 -68.65833282]
[200.82153320 -80.85103607]
[209.55870056 -93.04373932]
[211.30775452 -108.76796722]
[225.01034546 -114.60648346]
[233.74751282 -126.79917908]
[235.49656677 -142.52340698]
[249.19915771 -148.36192322]
[257.93634033 -160.55462646]
[266.67349243 -172.74732971]
[275.41064453 -184.94003296]
[284.14782715 -197.13273621]
[292.88497925 -209.32542419]
[301.62216187 -221.51812744]
[310.35931396 -233.71083069]
[309.03320312 -246.55122375]
[316.57464600 -256.52960205]
[328.49969482 -258.61862183]
[337.43518066 -270.66674805]
[346.37066650 -282.71484375]
[355.30615234 -294.76296997]
[364.24163818 -306.81109619]
[361.67504883 -322.40557861]
[370.95489502 -335.19851685]
[386.57565308 -337.60009766]
[399.26977539 -328.18551636]
[401.50607300 -312.54022217]
[391.95779419 -299.94635010]
[376.28976440 -297.87557983]
[367.35427856 -285.82748413]
[358.41876221 -273.77935791]
[349.48327637 -261.73126221]
[340.54779053 -249.68313599]
[339.49252319 -232.17277527]
[322.55203247 -224.97366333]
[313.81484985 -212.78096008]
[305.07769775 -200.58825684]
[296.34051514 -188.39556885]
[287.60336304 -176.20286560]
[278.86618042 -164.01016235]
[270.12902832 -151.81745911]
[261.39184570 -139.62475586]
[260.26776123 -124.77263641]
[245.94021606 -118.06201935]
[237.20304871 -105.86931610]
[236.07893372 -91.01718903]
[221.75140381 -84.30657196]
[213.01423645 -72.11386871]
[204.27706909 -59.92116928]
[208.11853027 -52.30901337]
[208.80854797 -43.60407639]
[206.08975220 -35.08965302]
[200.21875000 -28.07973862]
[191.94976807 -23.71662331]
[182.43991089 -22.78637123]
[173.08770752 -25.58178329]
[165.32751465 -31.83617592]
[159.36129761 -18.07375908]
[153.39506531 -4.31134129]
[147.42883301 9.45107651]
[153.12463379 23.16579247]
[147.27008057 37.20783234]
[132.84620667 43.08912277]
[126.87998199 56.85153961]
[120.91375732 70.61395264]
[114.94752502 84.37637329]
[121.90965271 91.10802460]
[125.65119934 100.93505096]
[124.83226776 112.25396729]
[118.92361450 122.90907288]
[130.20121765 132.79925537]
[141.47880554 142.68943787]
[152.75640869 152.57963562]
[168.79472351 152.96937561]
[178.37454224 165.83821106]
[174.14703369 181.31423950]
[159.35519409 187.52560425]
[145.34605408 179.70745850]
[142.86621094 163.85722351]
[131.58862305 153.96704102]
[120.31101990 144.07685852]
[109.03342438 134.18666077]
[114.18884277 148.27288818]
[119.34425354 162.35911560]
[130.58612061 172.28990173]
[138.25701904 185.18009949]
[141.62361145 199.79742432]
[140.36404419 214.74444580]
[134.59873962 228.59222412]
[124.87885284 240.01693726]
[112.13361359 247.92636108]
[97.58146667 251.56434631]
[82.61359406 250.58312988]
[68.66092682 245.07649231]
[57.05733871 235.57086182]
[48.91213608 222.97500610]
[45.00399780 208.49307251]
[45.70654297 193.50953674]
[50.95261002 179.45681763]
[60.24066925 167.67837524]
[72.68173981 159.30068970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[5 54]
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 35]
[24 34]
[25 33]
[61 156]
[62 155]
[63 154]
[64 153]
[67 150]
[68 149]
[69 148]
[70 147]
[71 88]
[72 87]
[73 86]
[74 85]
[91 139]
[92 138]
[93 137]
[95 135]
[96 134]
[98 132]
[99 131]
[100 130]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[160 172]
[161 171]
[162 170]
[163 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
