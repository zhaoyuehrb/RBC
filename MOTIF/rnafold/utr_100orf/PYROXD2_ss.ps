%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUGCUCCACCCCGUGCCUAGGGCAGCACAAAAGCCAAUCGCUAGCAAACUCCCUGCCUAGCAAGGCCCAGCCUGGGGCAGAAAUGGCUGCAAGUGGCCGAGGUCUCUGCAAGGCUGUGGCCGCCUCUCCCUUCCCGGCGUGGAGACGAGAUAACACGGAAGCCAGGGGAGGUCUGAAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[249.41810608 89.96864319]
[237.49462891 89.18331909]
[226.50608826 84.40132141]
[217.75454712 76.16373444]
[212.28558350 65.42259216]
[197.32843018 66.55550385]
[182.37127686 67.68842316]
[167.41412354 68.82134247]
[152.45697021 69.95426178]
[137.49981689 71.08717346]
[122.54265594 72.22009277]
[134.42498779 78.94681549]
[143.95460510 90.69277191]
[149.07821655 106.49388885]
[148.17504883 124.57865906]
[140.36116028 142.56665039]
[125.70395660 157.77665710]
[105.30940247 167.60496521]
[94.83728027 178.34436035]
[84.36516571 189.08377075]
[73.89304352 199.82316589]
[67.16402435 215.38455200]
[50.34801102 213.22631836]
[47.76675415 196.47003174]
[63.15364456 189.35104370]
[73.62576294 178.61164856]
[84.09788513 167.87223816]
[94.57000732 157.13284302]
[85.83497620 144.93861389]
[72.29709625 151.39817810]
[67.26053619 166.37844849]
[53.06952286 173.33479309]
[38.14333725 168.14013672]
[31.33741760 153.87637329]
[36.68959808 139.00593567]
[51.02452469 132.35119629]
[65.83753967 137.86030579]
[79.37541199 131.40074158]
[78.68339539 123.93273163]
[64.90602112 129.86433411]
[55.00743484 118.59410858]
[62.66738510 105.69739532]
[77.29937744 108.99671936]
[76.60736084 101.52871704]
[62.11305237 97.66671753]
[47.61874390 93.80471802]
[33.12443542 89.94272614]
[18.63012695 86.08072662]
[4.10388994 82.34061432]
[-10.45325089 78.72265625]
[-22.99015045 88.06932068]
[-38.59883881 87.11911011]
[-49.90936661 76.32069397]
[-51.58125305 60.77273941]
[-42.82508469 47.81652451]
[-27.77525139 43.56957626]
[-13.53782845 50.03717422]
[-6.83529091 64.16551208]
[7.72185040 67.78347778]
[14.98673439 66.34258270]
[22.49212456 71.58641815]
[36.98643494 75.44841766]
[51.48074341 79.31040955]
[65.97505188 83.17240906]
[80.46936035 87.03440857]
[84.41760254 80.65777588]
[96.26232147 61.52789307]
[86.34453583 50.27456284]
[76.42675018 39.02122879]
[66.50895691 27.76789665]
[51.50025177 19.88278198]
[54.92238998 3.27780414]
[71.82578278 1.96948695]
[77.76229095 17.85010910]
[87.68008423 29.10344124]
[97.59786987 40.35677338]
[107.51565552 51.61010742]
[121.40973663 57.26293945]
[136.36689758 56.13002014]
[151.32405090 54.99710464]
[166.28120422 53.86418533]
[181.23835754 52.73126984]
[196.19551086 51.59835052]
[211.15266418 50.46543503]
[218.55741882 33.57987976]
[233.42831421 22.82416725]
[251.61424255 21.09450150]
[268.09225464 28.78220367]
[278.35482788 43.68940353]
[293.23593140 41.80440521]
[308.11700439 39.91940689]
[322.99810791 38.03440857]
[335.71655273 28.62422371]
[349.31524658 34.70079422]
[364.19631958 32.81579590]
[374.99569702 10.71786308]
[403.99945068 6.16250944]
[412.73446655 -6.03171968]
[421.46951294 -18.22594833]
[430.20452881 -30.42017746]
[438.93957520 -42.61440659]
[447.67459106 -54.80863571]
[456.40963745 -67.00286865]
[458.15594482 -82.72740173]
[471.85751343 -88.56831360]
[480.59252930 -100.76254272]
[489.32757568 -112.95677185]
[498.06259155 -125.15100098]
[506.79763794 -137.34523010]
[505.61068726 -153.34431458]
[517.47668457 -164.14144897]
[533.29302979 -161.45397949]
[540.92675781 -147.34352112]
[534.52197266 -132.63439941]
[518.99188232 -128.61019897]
[510.25683594 -116.41596985]
[501.52178955 -104.22174072]
[492.78677368 -92.02751160]
[484.05172729 -79.83328247]
[482.93020630 -64.98095703]
[468.60385132 -58.26783371]
[459.86883545 -46.07360458]
[451.13378906 -33.87937546]
[442.39877319 -21.68514633]
[433.66372681 -9.49091721]
[424.92871094 2.70331192]
[416.19366455 14.89754105]
[418.00265503 22.17611122]
[430.72940063 14.23698235]
[442.21261597 23.88765907]
[436.58261108 37.79100800]
[421.62060547 36.73325348]
[423.42959595 44.01182556]
[436.85705566 50.69789886]
[450.28448486 57.38397598]
[463.71194458 64.07005310]
[477.13940430 70.75612640]
[490.56683350 77.44219971]
[503.99429321 84.12827301]
[517.47741699 90.70132446]
[531.01531982 97.16088867]
[544.55316162 103.62045288]
[558.30041504 109.62158203]
[572.24145508 115.15750122]
[586.18255615 120.69342804]
[597.37768555 110.31886292]
[611.96807861 105.83729553]
[627.05670166 108.13854980]
[639.64776611 116.76570892]
[647.24127197 130.00584412]
[648.32958984 145.23010254]
[642.69653320 159.41572571]
[631.46063232 169.74612427]
[616.85272217 174.17019653]
[601.77331543 171.80953979]
[589.21630859 163.13287354]
[581.67498779 149.86294556]
[580.64660645 134.63450623]
[566.70556641 129.09857178]
[552.76446533 123.56265259]
[550.12585449 124.56629944]
[546.92675781 124.57408142]
[543.54852295 123.36571503]
[540.44573975 120.86444092]
[538.09362793 117.15832520]
[524.55572510 110.69876099]
[511.01785278 104.23920441]
[503.61160278 104.19621277]
[497.30822754 97.55572510]
[483.88076782 90.86965179]
[470.45330811 84.18357086]
[457.02587891 77.49749756]
[443.59841919 70.81142426]
[430.17095947 64.12535095]
[416.74353027 57.43927383]
[396.20855713 67.72286987]
[376.31695557 62.63325882]
[366.08132935 47.69688416]
[351.20025635 49.58188248]
[339.54617310 58.85723877]
[324.88308716 52.91549301]
[310.00201416 54.80049515]
[295.12091064 56.68549347]
[280.23983765 58.57049179]
[277.22875977 69.99089813]
[270.51611328 79.75063324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[18 28]
[19 27]
[20 26]
[21 25]
[29 38]
[30 37]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 59]
[50 58]
[67 77]
[68 76]
[69 75]
[70 74]
[89 184]
[90 183]
[91 182]
[92 181]
[94 179]
[95 178]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
[133 175]
[134 174]
[135 173]
[136 172]
[137 171]
[138 170]
[139 169]
[140 167]
[141 166]
[142 165]
[143 160]
[144 159]
[145 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
