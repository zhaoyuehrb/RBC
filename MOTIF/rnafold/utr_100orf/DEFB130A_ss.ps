%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUCCAUUCCCUUAUUUCUGUUCUCCUCCUCUUUGUGACUUUAAUACCAAAAGGAAAGACUGGCGUUAUUCCAGGACAAAAACAGUGUAUUGCUU\
) } def
/len { sequence length } bind def

/coor [
[68.77009583 343.06909180]
[56.54176331 351.88565063]
[42.55856705 357.51889038]
[27.63347054 359.64138794]
[12.63419819 358.12966919]
[-1.56721210 353.07168579]
[-14.14510918 344.76144409]
[-24.36823082 333.68212891]
[-31.64221573 320.47787476]
[-35.54416656 305.91632080]
[-35.84722900 290.84411621]
[-32.53378296 276.13751221]
[-25.79646683 262.65151978]
[-16.02697945 251.17019653]
[-3.79330730 242.36106873]
[10.19330120 236.73628235]
[25.11968231 234.62286377]
[40.11803436 236.14366150]
[45.15078735 222.01313782]
[50.18353653 207.88262939]
[45.26452255 196.71028137]
[49.47943497 184.82504272]
[61.05517960 178.87869263]
[66.52495575 164.91152954]
[71.99472809 150.94438171]
[77.46450043 136.97721863]
[82.93427277 123.01005554]
[73.72970581 111.42687225]
[71.53184509 96.79595947]
[76.92689514 83.01962280]
[88.47589874 73.77221680]
[103.09856415 71.52017212]
[108.56833649 57.55301285]
[114.03810883 43.58585358]
[119.50788879 29.61869240]
[106.44850159 36.99789047]
[91.95162964 40.85023499]
[76.95182800 40.92738342]
[62.41609192 37.22435760]
[49.28149414 29.97988319]
[38.39478683 19.66098785]
[30.45780182 6.93289900]
[25.98221016 -7.38384199]
[25.25653839 -22.36627769]
[28.32757187 -37.04853821]
[34.99732971 -50.48410034]
[44.83583069 -61.80681610]
[57.20881653 -70.28674316]
[71.31864166 -75.37721252]
[86.25568390 -76.75004578]
[101.05700684 -74.31674957]
[114.76840210 -68.23419189]
[126.50595093 -58.89448929]
[135.51295471 -46.89974976]
[141.20877075 -33.02323151]
[143.22621155 -18.15952110]
[141.43519592 -3.26682758]
[135.94906616 10.69867706]
[149.01651001 3.33376551]
[162.08395386 -4.03114557]
[175.15139771 -11.39605713]
[183.37461853 -24.91230965]
[198.26112366 -24.42087555]
[211.32856750 -31.78578568]
[224.39601135 -39.15069580]
[232.27207947 -53.53469849]
[248.67091370 -53.63525772]
[256.72280884 -39.34893036]
[248.14465332 -25.37226295]
[231.76092529 -26.08325386]
[218.69348145 -18.71834183]
[205.62603760 -11.35343170]
[198.33747864 1.63603282]
[182.51631165 1.67138672]
[169.44886780 9.03629780]
[156.38142395 16.40120888]
[143.31398010 23.76612091]
[133.47505188 35.08846283]
[128.00527954 49.05562592]
[122.53549957 63.02278519]
[117.06572723 76.98994446]
[126.27029419 88.57312775]
[128.46815491 103.20404053]
[123.07310486 116.98037720]
[111.52410126 126.22778320]
[96.90143585 128.47982788]
[91.43166351 142.44699097]
[85.96189117 156.41415405]
[80.49211121 170.38130188]
[75.02233887 184.34846497]
[78.26214600 202.39149475]
[64.31404877 212.91537476]
[59.28129959 227.04589844]
[54.24855042 241.17640686]
[66.83148193 249.47900391]
[77.06131744 260.55212402]
[84.34330750 273.75198364]
[88.25408936 288.31112671]
[88.56628418 303.38317871]
[85.26175690 318.09179688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 94]
[19 93]
[20 92]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[32 81]
[33 80]
[34 79]
[35 78]
[58 77]
[59 76]
[60 75]
[61 74]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
