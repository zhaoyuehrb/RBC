%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAUGCUGUCACAAAGUAAUGCUGCUGCUGGACACCGCGGGCGGCGCCGCCCGCCACAGCCGGGUCCGGCGGGCCGCCCUGCGCCUCCUCACCUAUC\
) } def
/len { sequence length } bind def

/coor [
[20.68967628 222.96438599]
[10.05556488 218.40440369]
[0.76882839 211.51950073]
[-11.00008583 220.81965637]
[-22.76899910 230.11979675]
[-34.53791428 239.41993713]
[-46.30682755 248.72007751]
[-57.92968369 258.20211792]
[-69.40367126 267.86376953]
[-80.87766266 277.52545166]
[-80.66970825 293.16165161]
[-90.60115051 305.24057007]
[-105.98265839 308.05892944]
[-119.55156708 300.28594971]
[-124.90103912 285.59182739]
[-119.50521851 270.91467285]
[-105.91185760 263.18457031]
[-90.53931427 266.05145264]
[-79.06533051 256.38980103]
[-67.59133911 246.72813416]
[-64.44703674 239.89155579]
[-55.60697174 236.95117188]
[-43.83805847 227.65101624]
[-32.06914139 218.35087585]
[-20.30022812 209.05073547]
[-8.53131485 199.75059509]
[-14.64592838 182.01600647]
[-13.76095104 163.24748230]
[-5.97969484 146.11181641]
[7.61305618 133.05207825]
[25.10221672 125.93933868]
[44.01220703 125.80459595]
[61.65735245 132.68939209]
[71.49628448 121.36705017]
[81.33521271 110.04470825]
[78.95296478 97.49147034]
[84.21892548 85.84980011]
[95.21951294 79.35012054]
[107.95726776 80.35433197]
[118.14356232 69.34345245]
[128.32984924 58.33257675]
[138.34367371 47.16461563]
[148.18260193 35.84226990]
[158.02153015 24.51992607]
[167.86045837 13.19758224]
[177.69940186 1.87523818]
[187.53833008 -9.44710636]
[197.37725830 -20.76944923]
[200.72674561 -29.46275330]
[207.70254517 -32.28477478]
[217.88883972 -43.29565430]
[228.07513428 -54.30653000]
[238.26141357 -65.31741333]
[248.44770813 -76.32828522]
[252.01040649 -94.31034088]
[268.83563232 -99.02339935]
[278.67456055 -110.34574127]
[288.51348877 -121.66809082]
[285.88604736 -137.08335876]
[293.82659912 -150.55485535]
[308.58590698 -155.72175598]
[323.19506836 -150.14442444]
[330.75607300 -136.45626831]
[327.69885254 -121.12045288]
[315.46691895 -111.37805939]
[299.83584595 -111.82915497]
[289.99691772 -100.50681305]
[280.15798950 -89.18447113]
[280.66427612 -76.98768616]
[272.40560913 -67.45777893]
[259.45858765 -66.14199066]
[249.27229309 -55.13111496]
[239.08599854 -44.12023926]
[228.89971924 -33.10935974]
[218.71342468 -22.09848213]
[208.69960022 -10.93052101]
[198.86067200 0.39182308]
[189.02174377 11.71416759]
[179.18281555 23.03651047]
[169.34388733 34.35885620]
[159.50495911 45.68119812]
[149.66601562 57.00354385]
[147.61863708 64.24465942]
[139.34072876 68.51886749]
[129.15443420 79.52974701]
[118.96814728 90.54062653]
[120.03086853 106.93070221]
[109.06607056 119.15924835]
[92.65755463 119.88363647]
[82.81862640 131.20597839]
[72.97969818 142.52832031]
[79.43591309 152.26307678]
[83.46797180 163.21551514]
[84.86256409 174.79281616]
[83.54901886 186.36949158]
[79.60285187 197.32112122]
[73.24143982 207.05812073]
[64.81206512 215.05741882]
[54.77293396 220.89054871]
[43.66830444 224.24667358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 20]
[9 19]
[10 18]
[33 91]
[34 90]
[35 89]
[39 86]
[40 85]
[41 84]
[42 82]
[43 81]
[44 80]
[45 79]
[46 78]
[47 77]
[48 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[56 68]
[57 67]
[58 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
