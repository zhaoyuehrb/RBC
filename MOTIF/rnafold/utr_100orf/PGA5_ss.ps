%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUUCCUCCCAUCUUGCCUUCUCCCUCGAGUUGGGACCCGGGAAGAACCAUGAAGUGGCUGCUGCUGCUGGGUCUGGUGGCGCUCUCUGAGUGCAUCAUGUACAAGGUCCCCCUCAUCAGAAAGAAGUCCUUGAGGCGCACCCUGUCCG\
) } def
/len { sequence length } bind def

/coor [
[88.62360382 100.18392181]
[73.73879242 98.32853699]
[58.85398483 96.47314453]
[43.96917725 94.61775970]
[36.65655899 104.84513855]
[25.74018288 110.93534088]
[13.34075546 111.77604675]
[1.83706856 107.26794434]
[-6.59036589 98.33196259]
[-10.37258816 86.72185516]
[-25.16800880 84.25293732]
[-39.96342850 81.78401947]
[-46.62082672 99.09163666]
[-69.74682617 108.01934814]
[-84.12323761 112.29939270]
[-98.49965668 116.57943726]
[-112.87606812 120.85948181]
[-123.89479828 132.21281433]
[-138.30070496 128.42872620]
[-152.67710876 132.70877075]
[-157.92309570 147.19274902]
[-170.54429626 155.71090698]
[-185.58329773 155.17028809]
[-197.28019714 145.98768616]
[-211.65661621 150.26773071]
[-226.03303528 154.54777527]
[-240.40943909 158.82781982]
[-246.45870972 173.24795532]
[-260.38537598 180.36003113]
[-275.61373901 176.80592346]
[-284.95336914 164.26379395]
[-283.99444580 148.65563965]
[-273.18966675 137.35116577]
[-257.64080811 135.68797302]
[-244.68948364 144.45140076]
[-230.31307983 140.17135620]
[-215.93666077 135.89131165]
[-201.56024170 131.61126709]
[-196.79040527 117.52629089]
[-184.49594116 108.84815216]
[-169.27090454 109.07613373]
[-156.95715332 118.33235168]
[-142.58073425 114.05230713]
[-132.59030151 103.00511932]
[-117.15611267 106.48307037]
[-102.77969360 102.20302582]
[-88.40328217 97.92298126]
[-74.02687073 93.64293671]
[-71.22850800 86.68455505]
[-85.89695740 83.54822540]
[-100.54976654 80.33960724]
[-103.48311615 65.62921906]
[-91.18173218 57.04574966]
[-78.38748932 64.87527466]
[-65.63176727 72.76777649]
[-62.83340454 65.80939484]
[-70.24372864 52.76765060]
[-77.65405273 39.72590637]
[-85.06438446 26.68416405]
[-92.47470856 13.64242077]
[-99.88503265 0.60067725]
[-114.29634857 -7.22530985]
[-114.45395660 -23.62369919]
[-100.19572449 -31.72523499]
[-86.18930054 -23.19575119]
[-86.84329224 -6.80964899]
[-79.43296814 6.23209429]
[-72.02263641 19.27383804]
[-64.61231232 32.31558228]
[-57.20198822 45.35732269]
[-49.79166031 58.39906693]
[-37.49451065 66.98860168]
[-22.69908905 69.45751953]
[-7.90366983 71.92643738]
[4.04070044 58.98650742]
[21.50629234 55.73124313]
[37.59106064 63.63736725]
[45.82456589 79.73294830]
[60.70937347 81.58834076]
[75.59418488 83.44372559]
[90.47898865 85.29911804]
[103.95485687 78.71116638]
[111.63313293 65.82535553]
[119.31140900 52.93954849]
[126.98968506 40.05374146]
[134.66795349 27.16793060]
[142.34623718 14.28212070]
[145.25991821 -2.41957927]
[162.11549377 -4.24325466]
[168.53399658 11.44875813]
[155.23204041 21.96039581]
[147.55377197 34.84620667]
[139.87548828 47.73201370]
[132.19721985 60.61782455]
[124.51894379 73.50363159]
[116.84066772 86.38944244]
[118.83167267 93.62033844]
[127.65547180 81.49019623]
[142.64074707 80.82572174]
[152.50355530 92.12727356]
[149.81716919 106.88475800]
[136.60446167 113.98575592]
[122.81368256 108.08213806]
[124.80469513 115.31303406]
[137.99679565 122.45224762]
[151.18890381 129.59146118]
[167.00834656 129.35485840]
[174.51908875 142.21713257]
[187.71119690 149.35633850]
[200.90330505 156.49554443]
[214.85450745 149.96330261]
[229.80227661 152.86457825]
[240.05419922 163.88104248]
[241.83207703 178.64508057]
[255.02416992 185.78430176]
[268.21627808 192.92350769]
[281.40838623 200.06271362]
[294.60049438 207.20193481]
[306.13949585 197.34210205]
[320.46234131 192.32014465]
[335.63201904 192.81521606]
[349.59695435 198.76039124]
[360.46850586 209.35160828]
[366.77636719 223.15652466]
[367.66744995 238.30810547]
[363.02127075 252.75723267]
[353.46615601 264.54977417]
[340.29437256 272.09091187]
[325.28732300 274.36074829]
[310.47451782 271.05230713]
[297.85934448 262.61303711]
[289.14782715 250.18428040]
[285.51818848 235.44689941]
[287.46127319 220.39404297]
[274.26916504 213.25482178]
[261.07708740 206.11561584]
[247.88496399 198.97640991]
[234.69285583 191.83718872]
[221.36048889 198.42398071]
[206.53060913 195.86685181]
[195.92610168 184.93992615]
[193.76409912 169.68765259]
[180.57199097 162.54844666]
[167.37988281 155.40922546]
[152.50402832 156.15647888]
[144.04969788 142.78356934]
[130.85758972 135.64434814]
[117.66548157 128.50514221]
[103.85692596 128.84707642]
[92.96920776 123.64932251]
[86.79317474 115.33854675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[10 74]
[11 73]
[12 72]
[14 48]
[15 47]
[16 46]
[17 45]
[19 43]
[20 42]
[24 38]
[25 37]
[26 36]
[27 35]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[104 148]
[105 147]
[106 146]
[108 144]
[109 143]
[110 142]
[114 138]
[115 137]
[116 136]
[117 135]
[118 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
