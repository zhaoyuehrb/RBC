%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGACUCUUUUAUAGCUCCCUGGUUCAACCUCAAGGCCUUGAGGUUUUGGCAGCUCUGGAGGAUGAGAGAGAACAUGGCCAGGGGCCCUUGCAACGCGCCGAGAUGGGCGUCCCUGAUGGUGCUGGUCGCCAUAGGCACCGCCGUGACAGCGGCCGUCAACC\
) } def
/len { sequence length } bind def

/coor [
[82.13293457 148.61570740]
[71.01073456 142.92250061]
[61.57551193 134.73150635]
[54.37633133 124.51937103]
[49.83213806 112.88037109]
[34.91633606 114.46746826]
[20.00053406 116.05455780]
[5.08473301 117.64165497]
[-9.83106899 119.22874451]
[-24.74687004 120.81584167]
[-39.66267014 122.40293884]
[-54.57847214 123.99002838]
[-69.49427795 125.57712555]
[-78.21663666 135.12132263]
[-90.70536804 136.11247253]
[-100.19498444 128.56262207]
[-115.13860321 129.86195374]
[-130.08221436 131.16128540]
[-145.02583313 132.46061707]
[-159.90827942 134.33488464]
[-174.70744324 136.78128052]
[-189.50660706 139.22769165]
[-194.98748779 153.50729370]
[-206.80198669 163.06315613]
[-221.71418762 165.40678406]
[-235.70368958 160.00769043]
[-245.04943848 148.40930176]
[-259.84860229 150.85571289]
[-274.64773560 153.30210876]
[-289.44689941 155.74851990]
[-304.24606323 158.19491577]
[-319.04522705 160.64132690]
[-333.84439087 163.08772278]
[-348.64355469 165.53413391]
[-360.96792603 176.35270691]
[-376.41030884 170.83323669]
[-379.08489990 154.65365601]
[-366.24032593 144.45814514]
[-351.08993530 150.73497009]
[-336.29080200 148.28855896]
[-321.49163818 145.84216309]
[-306.69247437 143.39575195]
[-291.89331055 140.94935608]
[-277.09414673 138.50296021]
[-262.29498291 136.05654907]
[-247.49583435 133.61015320]
[-242.37985229 119.62113953]
[-230.87213135 110.00717926]
[-215.99902344 107.42708588]
[-201.73777771 112.67244720]
[-191.95300293 124.42853546]
[-177.15383911 121.98213196]
[-162.35469055 119.53572845]
[-160.60801697 117.28517151]
[-157.84336853 115.60828400]
[-154.28112793 114.90438843]
[-150.28488159 115.48322296]
[-146.32518005 117.51700592]
[-131.38156128 116.21766663]
[-116.43794250 114.91833496]
[-101.49432373 113.61899567]
[-87.70650482 102.79554749]
[-71.08136749 110.66132355]
[-56.16556549 109.07422638]
[-41.24976349 107.48713684]
[-26.33396339 105.90003967]
[-11.41816235 104.31295013]
[3.49763918 102.72585297]
[18.41344070 101.13875580]
[33.32924271 99.55166626]
[48.24504471 97.96456909]
[54.90322113 74.52454376]
[71.54267120 56.72299576]
[94.48059082 48.49995422]
[95.05865479 33.51109695]
[86.09012604 17.45397377]
[95.95957184 2.96795082]
[96.24865723 -12.02926350]
[96.53774261 -27.02647781]
[96.82682800 -42.02369308]
[91.08687592 -57.97640991]
[104.82717133 -67.90820312]
[118.17452240 -57.45426941]
[111.82404327 -41.73460388]
[111.53495789 -26.73739243]
[111.24587250 -11.74017715]
[110.95678711 3.25703645]
[119.12913513 12.21616364]
[118.98205566 24.74330139]
[110.04750824 34.08916092]
[109.46944427 49.07801819]
[114.69335175 50.33287048]
[119.75917053 52.12209702]
[124.61239624 54.42644882]
[129.20080566 57.22113419]
[133.47505188 60.47608948]
[144.72480774 50.55424118]
[155.97456360 40.63239670]
[167.22430420 30.71054840]
[178.47406006 20.78870201]
[179.21311951 5.00170326]
[190.95489502 -5.57687759]
[206.73318481 -4.67095566]
[217.18704224 7.18200159]
[216.11434937 22.94984436]
[204.15153503 33.27779388]
[188.39590454 32.03845596]
[177.14616394 41.96030426]
[165.89640808 51.88214874]
[154.64665222 61.80399704]
[143.39689636 71.72584534]
[149.04586792 83.35001373]
[151.64111328 96.01085663]
[151.02108765 108.92007446]
[147.22434998 121.27390289]
[159.86442566 129.35032654]
[172.50450134 137.42674255]
[185.14457703 145.50315857]
[197.78465271 153.57957458]
[210.42471313 161.65600586]
[223.06478882 169.73242188]
[235.78210449 177.68666077]
[248.57548523 185.51797485]
[261.36886597 193.34928894]
[274.16223145 201.18060303]
[283.16235352 203.00660706]
[287.12466431 209.28814697]
[299.76473999 217.36456299]
[312.40481567 225.44097900]
[325.04489136 233.51739502]
[329.49621582 233.55014038]
[333.30572510 234.88911438]
[336.13616943 237.16365051]
[337.80895996 239.93077087]
[338.31384277 242.73451233]
[350.29434204 251.76045227]
[362.27484131 260.78640747]
[378.56381226 265.48806763]
[378.55514526 282.44201660]
[362.26135254 287.12698364]
[353.24890137 272.76690674]
[341.26840210 263.74096680]
[329.28790283 254.71501160]
[316.96847534 246.15747070]
[304.32839966 238.08105469]
[291.68832397 230.00463867]
[279.04824829 221.92820740]
[266.33093262 213.97398376]
[253.53755188 206.14266968]
[240.74417114 198.31134033]
[227.95079041 190.48002625]
[220.56872559 189.66606140]
[214.98837280 182.37249756]
[202.34829712 174.29606628]
[189.70822144 166.21965027]
[177.06816101 158.14323425]
[164.42808533 150.06681824]
[151.78800964 141.99040222]
[139.14793396 133.91397095]
[129.88743591 142.30200195]
[118.88769531 148.22834778]
[106.78881836 151.34812927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[16 61]
[17 60]
[18 59]
[19 58]
[20 53]
[21 52]
[22 51]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[74 91]
[75 90]
[77 87]
[78 86]
[79 85]
[80 84]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[115 159]
[116 158]
[117 157]
[118 156]
[119 155]
[120 154]
[121 153]
[122 151]
[123 150]
[124 149]
[125 148]
[127 147]
[128 146]
[129 145]
[130 144]
[135 143]
[136 142]
[137 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
