%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGUGUCUAGGUCGUUUGGGAAACGCCUUGGAGAGUCAAGAAUAAAUUUGCAGGUCAAACAAUGGAUGACUGGAAAAGUCGGCUUGUAAUCAAGAGCAUGCUUCCCCAUUUCGCCAUGGUGGGAAAUCGUCAGGAGCCCAGAAAGCUCCAGGAAUCGGGAA\
) } def
/len { sequence length } bind def

/coor [
[89.52143860 256.26855469]
[97.91683960 242.18135071]
[97.62951660 227.18409729]
[97.34219360 212.18685913]
[97.05487061 197.18960571]
[86.17832184 187.07841492]
[85.67329407 171.87316895]
[96.35259247 160.53340149]
[96.06526947 145.53614807]
[95.77794647 130.53889465]
[81.86540985 124.93164062]
[71.25881195 135.53823853]
[60.65221024 146.14485168]
[56.77228546 154.46701050]
[49.73939133 156.85060120]
[38.93156815 167.25209045]
[28.12374306 177.65356445]
[17.31591988 188.05505371]
[6.50809574 198.45654297]
[-0.71161276 213.79643250]
[-17.45062637 211.10537720]
[-19.49855804 194.27557373]
[-3.89339185 187.64872742]
[6.91443205 177.24723816]
[17.72225571 166.84574890]
[28.53008080 156.44425964]
[39.33790207 146.04277039]
[50.04560852 135.53823853]
[60.65221024 124.93164062]
[71.25881195 114.32504272]
[76.72253418 74.60765839]
[119.20094299 68.62837982]
[112.80385590 55.06087112]
[99.92006683 45.87835312]
[101.49063110 31.06678391]
[95.09354401 17.49927711]
[88.69645691 3.93176842]
[75.81266785 -5.25074911]
[77.38323212 -20.06231880]
[70.98614502 -33.62982559]
[56.06548691 -31.33766365]
[41.11857986 -33.34072113]
[27.35562134 -39.46820068]
[15.88851547 -49.21570206]
[7.64105177 -61.78675079]
[3.27447820 -76.15787506]
[3.13449383 -91.16191101]
[7.22389603 -105.58281708]
[15.20304585 -118.25422668]
[26.41806030 -128.15376282]
[20.02097321 -141.72126770]
[13.62388611 -155.28877258]
[7.22679901 -168.85627747]
[0.82971191 -182.42378235]
[-5.56737518 -195.99130249]
[-11.96446228 -209.55880737]
[-18.36154938 -223.12631226]
[-24.75863647 -236.69381714]
[-27.61367226 -221.96803284]
[-36.89239883 -210.18222046]
[-50.53669739 -203.95060730]
[-65.52012634 -204.65541077]
[-78.51921844 -212.14030457]
[-86.65064240 -224.74505615]
[-88.11077118 -239.67382812]
[-82.57572174 -253.61524963]
[-71.27323914 -263.47698975]
[-56.71031189 -267.07159424]
[-42.11715317 -263.60177612]
[-30.73136902 -253.83811951]
[-34.14916992 -268.44354248]
[-37.56697464 -283.04898071]
[-40.98477554 -297.65441895]
[-53.80215454 -307.30294800]
[-54.10607910 -323.34313965]
[-41.66339874 -333.47027588]
[-26.01908112 -329.91574097]
[-19.17410088 -315.40621948]
[-26.37934494 -301.07220459]
[-22.96154213 -286.46679688]
[-19.54374123 -271.86135864]
[-16.12593842 -257.25592041]
[-11.19112873 -243.09091187]
[-4.79404163 -229.52340698]
[1.60304546 -215.95588684]
[8.00013256 -202.38838196]
[14.39721966 -188.82087708]
[20.79430771 -175.25337219]
[27.19139481 -161.68585205]
[33.58848190 -148.11834717]
[39.98556900 -134.55084229]
[54.75841904 -136.90460205]
[69.61094666 -134.99835205]
[83.33837128 -128.97808838]
[94.82476044 -119.32388306]
[103.13372803 -106.81159973]
[107.58477020 -92.45053101]
[107.80899811 -77.40200806]
[103.77970123 -62.88547516]
[95.81518555 -50.07966614]
[84.55364990 -40.02691269]
[90.95073700 -26.45940590]
[103.37696075 -18.24732780]
[102.26396179 -2.46531868]
[108.66104889 11.10218906]
[115.05813599 24.66969681]
[127.48435974 32.88177490]
[126.37136078 48.66378403]
[132.76844788 62.23129272]
[145.94613647 69.39708710]
[160.81147766 67.39172363]
[175.67683411 65.38636017]
[190.54217529 63.38100052]
[205.40751648 61.37563705]
[213.53829956 57.10918808]
[220.57650757 59.47705841]
[235.47753906 57.75680923]
[250.37857056 56.03655624]
[265.41976929 48.21362305]
[277.10079956 60.50141525]
[268.52685547 75.12754822]
[252.09881592 70.93759155]
[237.19778442 72.65783691]
[222.29675293 74.37808990]
[207.41288757 76.24098206]
[192.54753113 78.24634552]
[177.68218994 80.25170898]
[162.81684875 82.25707245]
[147.95149231 84.26243591]
[145.62020874 91.39090729]
[160.62017822 91.41983032]
[165.22775269 105.69464111]
[153.07528687 114.48770905]
[140.95764160 105.64785004]
[138.62634277 112.77632141]
[149.43417358 123.17781067]
[160.24200439 133.57929993]
[171.04981995 143.98078918]
[181.85765076 154.38227844]
[197.38650513 152.54142761]
[210.43716431 161.15620422]
[214.84750366 176.15896606]
[208.53509521 190.46586609]
[194.48046875 197.32164001]
[179.31979370 193.48918152]
[170.21145630 180.77806091]
[171.45616150 165.19009399]
[160.64833069 154.78860474]
[149.84051514 144.38711548]
[139.03268433 133.98562622]
[128.22486877 123.58414459]
[119.69003296 128.26507568]
[110.77519989 130.25157166]
[111.06252289 145.24882507]
[111.34984589 160.24607849]
[122.45565033 171.16847229]
[122.53339386 186.38191223]
[112.05211639 196.90228271]
[112.33943939 211.89953613]
[112.62676239 226.89677429]
[112.91408539 241.89402771]
[121.84291077 255.64932251]
[114.15483856 270.13467407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 161]
[3 160]
[4 159]
[5 158]
[8 155]
[9 154]
[10 153]
[11 30]
[12 29]
[13 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[32 109]
[33 108]
[35 106]
[36 105]
[37 104]
[39 102]
[40 101]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[70 82]
[71 81]
[72 80]
[73 79]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
[135 151]
[136 150]
[137 149]
[138 148]
[139 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
