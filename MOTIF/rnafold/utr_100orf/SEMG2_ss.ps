%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAAGAUUUUUCAAGCAAGAUGAAGUCCAUCAUCCUCUUUGUCCUUUCCCUGCUCCUUAUCUUGGAGAAGCAAGCAGCUGUGAUGGGACAAAAAGGUGGAUCAAAAGGCCAAUUGCCAA\
) } def
/len { sequence length } bind def

/coor [
[93.66764069 177.68048096]
[78.88008118 180.19604492]
[67.24964905 170.72328186]
[66.72056580 155.73262024]
[77.65435028 145.46343994]
[83.86685944 131.81042480]
[76.61415100 129.90039062]
[64.61656189 138.90359497]
[52.61897278 147.90681458]
[40.62138367 156.91003418]
[28.62379456 165.91323853]
[16.62620735 174.91645813]
[4.74552870 184.07339478]
[-7.01626825 193.38253784]
[-8.59436607 209.10784912]
[-20.88243103 219.04660034]
[-36.59017181 217.30233765]
[-46.39846039 204.90988159]
[-44.48822021 189.22146606]
[-31.99275780 179.54473877]
[-16.32541084 181.62074280]
[-4.56361341 172.31159973]
[-1.23204422 165.61401367]
[7.62299252 162.91886902]
[19.62058067 153.91564941]
[31.61816978 144.91244507]
[43.61575699 135.90922546]
[55.61334610 126.90601349]
[67.61093903 117.90280151]
[73.14356232 83.95503235]
[100.28658295 74.44054413]
[104.84830475 60.15101242]
[109.41002655 45.86148071]
[102.41724396 31.94247818]
[107.24703217 17.51584625]
[120.55976868 10.93506908]
[125.12149811 -3.35446167]
[129.68321228 -17.64399338]
[126.50923157 -33.14355087]
[137.75061035 -42.91497421]
[142.31233215 -57.20450592]
[146.87405396 -71.49403381]
[151.43577576 -85.78356934]
[155.99749756 -100.07309723]
[160.55921936 -114.36262512]
[165.12094116 -128.65216064]
[169.68266296 -142.94169617]
[166.50868225 -158.44125366]
[177.75004578 -168.21267700]
[182.31178284 -182.50219727]
[173.29931641 -194.99546814]
[173.37055969 -210.22203064]
[182.28862000 -222.34359741]
[196.46461487 -226.83573914]
[201.02633667 -241.12527466]
[205.58805847 -255.41481018]
[202.41406250 -270.91436768]
[213.65544128 -280.68579102]
[218.21716309 -294.97531128]
[222.77888489 -309.26486206]
[217.55194092 -321.14114380]
[221.73202515 -332.99914551]
[232.53707886 -338.60086060]
[237.46520996 -352.76818848]
[242.39334106 -366.93551636]
[238.78512573 -382.93280029]
[251.01696777 -393.85589600]
[266.50576782 -388.46810913]
[269.31802368 -372.31188965]
[256.56066895 -362.00738525]
[251.63255310 -347.84005737]
[246.70440674 -333.67269897]
[250.96461487 -316.70104980]
[237.06842041 -304.70312500]
[232.50669861 -290.41360474]
[227.94497681 -276.12405396]
[231.44525146 -261.64657593]
[219.87757874 -250.85308838]
[215.31585693 -236.56355286]
[210.75413513 -222.27401733]
[219.70512390 -210.39892578]
[219.95010376 -195.35220337]
[211.18557739 -182.90083313]
[196.60130310 -177.94047546]
[192.03958130 -163.65095520]
[195.53985596 -149.17347717]
[183.97219849 -138.37997437]
[179.41047668 -124.09043884]
[174.84875488 -109.80090332]
[170.28703308 -95.51137543]
[165.72531128 -81.22184753]
[161.16358948 -66.93231201]
[156.60185242 -52.64278412]
[152.04013062 -38.35325241]
[155.54040527 -23.87577438]
[143.97274780 -13.08226967]
[139.41102600 1.20726073]
[134.84930420 15.49679184]
[141.88652039 28.57399178]
[137.46385193 43.13059235]
[123.69956207 50.42320633]
[119.13784027 64.71273804]
[114.57611084 79.00226593]
[122.14152527 83.74303436]
[128.04119873 91.24364471]
[131.27207947 100.87539673]
[131.08018494 111.65058136]
[127.08618164 122.32347107]
[119.36973572 131.53370667]
[125.37654114 145.27847290]
[131.38334656 159.02322388]
[145.73638916 166.19049072]
[148.94070435 181.91029358]
[138.53822327 194.12371826]
[122.50884247 193.46168518]
[113.14891815 180.43205261]
[117.63859558 165.03002930]
[111.63179016 151.28527832]
[105.62498474 137.54052734]
[98.37227631 135.63049316]
[97.05416107 150.57246399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 22]
[14 21]
[31 103]
[32 102]
[33 101]
[36 98]
[37 97]
[38 96]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[49 85]
[50 84]
[54 80]
[55 79]
[56 78]
[58 76]
[59 75]
[60 74]
[63 72]
[64 71]
[65 70]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
