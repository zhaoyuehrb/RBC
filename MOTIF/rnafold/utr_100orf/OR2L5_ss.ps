%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAUUACAAUCAAACGUCAACUGAUUUCAUCUUAUUGGGGCUGUUCCCACCAUCAAAAAUUGGCCUUUUCCUCUUCAUUCUCUUUGUUCUCAUUU\
) } def
/len { sequence length } bind def

/coor [
[145.27058411 212.25198364]
[151.86930847 198.71421814]
[161.22431946 186.91177368]
[151.74227905 175.28892517]
[142.26022339 163.66606140]
[132.77818298 152.04319763]
[123.29613495 140.42034912]
[113.81408691 128.79748535]
[98.57055664 133.97810364]
[81.71948242 131.10253906]
[67.48212433 119.94197845]
[59.85982132 102.44334412]
[61.53999710 82.43011475]
[46.84553146 85.44222260]
[32.15106964 88.45433044]
[17.45660973 91.46643066]
[2.76214695 94.47853851]
[-2.70645404 108.90413666]
[-15.11958504 118.06480408]
[-30.51626015 119.03739166]
[-43.98345566 111.51155853]
[-51.22384262 97.88877106]
[-49.92703629 82.51600647]
[-40.50683975 70.29866791]
[-25.96921158 65.13524628]
[-10.95304966 68.67338562]
[-0.24995907 79.78408051]
[14.44450283 76.77197266]
[29.13896561 73.75986481]
[43.83342743 70.74775696]
[58.52788925 67.73565674]
[44.18820572 63.33412552]
[29.18873215 63.20830917]
[17.01251984 54.44818115]
[12.12537479 40.26665115]
[16.31973076 25.86500549]
[28.05724525 16.52526474]
[43.03300858 15.67291737]
[55.75443649 23.62057495]
[61.55555725 37.45111465]
[71.06456757 49.05192184]
[68.28134918 34.31239319]
[65.49813080 19.57286644]
[62.71491623 4.83333731]
[59.93170166 -9.90619087]
[48.83491135 -21.98068047]
[54.00083542 -37.54491043]
[70.11521912 -40.58773422]
[80.60095978 -27.97895813]
[74.67122650 -12.68940735]
[77.45444489 2.05012131]
[80.23766327 16.78964996]
[83.02088165 31.52917862]
[85.80409241 46.26870728]
[100.34207916 49.96289062]
[109.82412720 38.34003448]
[119.30617523 26.71717834]
[115.21442413 11.74930573]
[120.73349762 -2.75308800]
[133.74121094 -11.21353626]
[149.23580933 -10.37882328]
[161.25932312 -0.56991506]
[165.18846130 14.44146442]
[159.51239014 28.88313293]
[146.41366577 37.20197296]
[130.92903137 36.19922256]
[121.44698334 47.82208252]
[111.96493530 59.44493866]
[131.16232300 76.82481384]
[135.38690186 100.17700195]
[125.43694305 119.31544495]
[134.91899109 130.93830872]
[144.40103149 142.56115723]
[153.88308716 154.18402100]
[163.36512756 165.80686951]
[172.84718323 177.42973328]
[186.28776550 170.63528442]
[200.87484741 166.88945007]
[215.92614746 166.36743164]
[230.73768616 169.09365845]
[244.61671448 174.94059753]
[256.91406250 183.63479614]
[267.05459595 194.76960754]
[274.56399536 207.82421875]
[279.09103394 222.18806458]
[280.42398071 237.18930054]
[278.50048828 252.12631226]
[273.41055298 266.30047607]
[265.39218140 279.04879761]
[254.82044983 289.77505493]
[242.18978882 297.97753906]
[228.09098816 303.27261353]
[213.18347168 305.41262817]
[198.16445923 304.29748535]
[183.73645020 299.97930908]
[170.57424927 292.66012573]
[159.29348755 282.68222046]
[150.42176819 270.51232910]
[144.37406921 256.71957397]
[141.43322754 241.94915771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
