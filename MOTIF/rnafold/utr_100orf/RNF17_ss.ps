%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUCGCACUCGGCGGUUGUUCCAGAAGAAAGAGACAGCGAUGGCGGCAGAGGCUUCGAAGACUGGGCCUUCUAGGUCUUCCUACCAGCGAAUGGGGAGGAAGAGUCAGCCCUGGGGUGCCGCUGAAAUCCAGUGCACCA\
) } def
/len { sequence length } bind def

/coor [
[119.63977814 454.54803467]
[104.95722198 450.22586060]
[93.97314453 439.56713867]
[89.21161652 425.02111816]
[91.76679230 409.93038940]
[101.05151367 397.76272583]
[114.93222046 391.31411743]
[115.59571838 376.32879639]
[116.25921631 361.34347534]
[116.92272186 346.35815430]
[116.59088898 331.36181641]
[115.26518250 316.42053223]
[113.93948364 301.47921753]
[112.61378479 286.53790283]
[111.28807831 271.59661865]
[109.96237946 256.65530396]
[108.63668060 241.71400452]
[107.31097412 226.77270508]
[98.21142578 218.72756958]
[97.02690887 206.23568726]
[104.94266510 195.98687744]
[103.94781494 181.01991272]
[102.95297241 166.05293274]
[101.95812988 151.08596802]
[100.96328735 136.11898804]
[99.96843719 121.15201569]
[93.66594696 134.76373291]
[91.32647705 149.58016968]
[82.60045624 161.78085327]
[69.33509827 168.78302002]
[54.33854294 169.10438538]
[40.78539658 162.67692566]
[31.54471779 150.86126709]
[28.57266045 136.15864563]
[32.49837875 121.68147278]
[42.49083710 110.49439240]
[56.43474197 104.96559906]
[71.37802887 106.26538086]
[86.10734558 103.42858887]
[71.82112122 98.85649872]
[55.91914368 102.86388397]
[44.69338226 90.90921021]
[49.69193649 75.29042053]
[65.77272797 72.07479095]
[76.39321136 84.57028198]
[90.67942810 89.14237213]
[104.23483276 82.71967316]
[109.74435425 68.76814270]
[115.25387573 54.81661606]
[102.15760040 37.95746613]
[108.85903931 12.57611179]
[102.73778534 -1.11805665]
[96.61653137 -14.81222534]
[90.49527740 -28.50639343]
[84.37402344 -42.20056152]
[78.25276947 -55.89472961]
[72.13151550 -69.58889771]
[56.92154694 -72.66080475]
[46.44686508 -84.10897827]
[44.73519135 -99.53135681]
[52.44469833 -112.99772644]
[66.61093140 -119.32998657]
[81.78667450 -116.09326172]
[92.13655090 -104.53213501]
[93.68082428 -89.09209442]
[85.82568359 -75.71015167]
[91.94693756 -62.01598358]
[98.06819153 -48.32181549]
[104.18944550 -34.62764740]
[110.31069946 -20.93347931]
[116.43195343 -7.23931074]
[122.55320740 6.45485735]
[129.81176758 8.34252262]
[140.33984375 -2.34203053]
[144.32888794 12.11785412]
[151.58744812 14.00551891]
[163.60459900 5.02843475]
[175.52171326 -4.08103132]
[187.33734131 -13.32176399]
[199.15295410 -22.56249619]
[210.96858215 -31.80322838]
[222.78419495 -41.04396057]
[234.59982300 -50.28469467]
[246.41543579 -59.52542496]
[252.86241150 -76.73501587]
[270.27896118 -78.59176636]
[281.88726807 -88.09162903]
[293.49557495 -97.59148407]
[296.51446533 -113.34793854]
[310.78207397 -120.68380737]
[325.35348511 -113.97164154]
[329.05078125 -98.36043549]
[319.03768921 -85.82578278]
[302.99542236 -85.98317719]
[291.38711548 -76.48332214]
[279.77880859 -66.98346710]
[278.24487305 -54.93468475]
[268.58242798 -46.92924881]
[255.65617371 -47.70980453]
[243.84054565 -38.46907425]
[232.02493286 -29.22834015]
[220.20930481 -19.98760796]
[208.39369202 -10.74687672]
[196.57807922 -1.50614393]
[184.76245117 7.73458815]
[181.40483093 14.38549042]
[172.58169556 17.04558754]
[160.56454468 26.02267075]
[152.33734131 54.32324219]
[129.20541382 60.32613754]
[123.69588470 74.27766418]
[118.18636322 88.22919464]
[114.93541718 120.15717316]
[115.93025970 135.12414551]
[116.92510223 150.09112549]
[117.91994476 165.05809021]
[118.91479492 180.02507019]
[119.90963745 194.99203491]
[130.51298523 210.00212097]
[122.25228119 225.44700623]
[123.57798004 240.38830566]
[124.90367889 255.32960510]
[126.22938538 270.27090454]
[127.55508423 285.21221924]
[128.88078308 300.15350342]
[130.20648193 315.09481812]
[131.53219604 330.03613281]
[142.33598328 319.63046265]
[157.33578491 319.70761108]
[168.03196716 330.22387695]
[168.36354065 345.22021484]
[158.14263916 356.19894409]
[143.16090393 356.93902588]
[131.90803528 347.02163696]
[131.24453735 362.00695801]
[130.58103943 376.99227905]
[129.91754150 391.97760010]
[143.17399597 399.62774658]
[151.34700012 412.56842041]
[152.55845642 427.82589722]
[146.52998352 441.89416504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 137]
[8 136]
[9 135]
[10 134]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[16 122]
[17 121]
[18 120]
[21 118]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[39 46]
[40 45]
[47 112]
[48 111]
[49 110]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[76 108]
[77 107]
[78 105]
[79 104]
[80 103]
[81 102]
[82 101]
[83 100]
[84 99]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
