%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:39:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAUGGGGACGGAGGCCACAGAGCAGGUUUCCUGGGGCCAUUACUCUGGGGAUGAAGAGGACGCAUACUCGGCUGAGCCACUGCCGGAGCUUUGCUACAAGG\
) } def
/len { sequence length } bind def

/coor [
[76.55809021 132.55633545]
[70.33992004 127.01327515]
[65.40054321 120.30553436]
[61.95292282 112.72232056]
[47.08867645 114.73582458]
[32.22443008 116.74932098]
[17.36018562 118.76281738]
[2.49593878 120.77632141]
[-3.56312919 136.07661438]
[-16.40805054 146.21351624]
[-32.51290131 148.52372742]
[-47.51633835 142.47622681]
[-57.40267181 129.79058838]
[-72.20002747 132.24784851]
[-86.99739075 134.70512390]
[-101.79474640 137.16239929]
[-116.59210968 139.61965942]
[-131.38946533 142.07693481]
[-146.18682861 144.53419495]
[-153.00711060 158.47203064]
[-166.73303223 165.70935059]
[-182.08668518 163.46325684]
[-193.16427612 152.59741211]
[-195.70625305 137.28996277]
[-188.73516846 123.42693329]
[-174.93154907 116.33894348]
[-159.60316467 118.75146484]
[-148.64408875 129.73684692]
[-133.84674072 127.27957153]
[-119.04937744 124.82230377]
[-104.25201416 122.36503601]
[-89.45465851 119.90776825]
[-74.65729523 117.45049286]
[-59.85993958 114.99322510]
[-55.87376404 101.83948517]
[-46.53831100 91.66146088]
[-33.65364838 86.50691223]
[-19.74140167 87.44665527]
[-7.55126524 94.35267639]
[0.48243973 105.91207123]
[15.34668636 103.89857483]
[30.21093178 101.88507843]
[45.07518005 99.87157440]
[59.93942642 97.85807800]
[70.59157562 72.71296692]
[94.87033844 60.21150970]
[95.76739502 45.23835754]
[96.66445923 30.26520538]
[97.56152344 15.29205322]
[85.49079132 5.54130316]
[81.48923492 -9.45093346]
[87.09552765 -23.91983414]
[100.15393829 -32.30181503]
[115.64323425 -31.37382889]
[127.60748291 -21.49270821]
[131.44616699 -6.45794439]
[125.68324280 7.94928837]
[112.53467560 16.18911552]
[111.63761139 31.16226768]
[110.74054718 46.13541794]
[109.84349060 61.10857010]
[121.48874664 66.12270355]
[130.98767090 74.52055359]
[137.39147949 85.46334076]
[140.06057739 97.85807800]
[154.92481995 99.87157440]
[169.78906250 101.88507843]
[183.42041016 91.04772949]
[200.35063171 93.29599762]
[210.28274536 106.77528381]
[225.20056152 108.34320831]
[240.11839294 109.91113281]
[255.05801392 111.25572205]
[270.01605225 112.37667847]
[284.97412109 113.49762726]
[294.17901611 101.11726379]
[308.62405396 95.70017242]
[323.69982910 98.97492218]
[334.59576416 109.89656067]
[337.83499146 124.98003387]
[332.38388062 139.41224670]
[319.98184204 148.58795166]
[304.58636475 149.57919312]
[291.11004639 142.06968689]
[283.85317993 128.45568848]
[268.89511108 127.33473206]
[253.93705750 126.21378326]
[246.91706848 128.89645386]
[238.55046082 124.82896423]
[223.63264465 123.26103210]
[208.71481323 121.69310760]
[199.85267639 131.17733765]
[186.94342041 133.81460571]
[174.71365356 128.40817261]
[167.77557373 116.74932098]
[152.91131592 114.73582458]
[138.04707336 112.72232056]
[134.59945679 120.30553436]
[129.66007996 127.01327515]
[123.44190979 132.55633545]
[116.21302795 136.69570923]
[108.28511810 139.25294495]
[100.00000000 140.11779785]
[91.71488190 139.25294495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[46 61]
[47 60]
[48 59]
[49 58]
[65 97]
[66 96]
[67 95]
[70 91]
[71 90]
[72 89]
[73 87]
[74 86]
[75 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
