%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCAUGAGGGUCUUGUAUCUCCUCUUCUCGUUCCUCUUCAUAUUUCUGAUGCCUCUUCCAGGUGUUUUUGGUGGUAUAGGCGAUCCUGUUACCUGCCUUAAGA\
) } def
/len { sequence length } bind def

/coor [
[103.05696869 186.22027588]
[91.28887177 185.83354187]
[79.68302917 183.84809875]
[68.45561218 180.30088806]
[57.81573105 175.25801086]
[47.96157074 168.81340027]
[39.07667160 161.08706665]
[31.32652283 152.22293091]
[18.64258194 160.23028564]
[5.95864248 168.23764038]
[-6.72529793 176.24499512]
[-19.40923691 184.25233459]
[-19.43110847 199.67968750]
[-27.80935669 212.63377380]
[-41.87051773 218.98101807]
[-57.12771988 216.69599915]
[-68.71245575 206.50788879]
[-72.92806244 191.66767883]
[-68.42937469 176.91079712]
[-56.65188980 166.94613647]
[-41.35377121 164.95338440]
[-27.41658783 171.56840515]
[-14.73264885 163.56105042]
[-2.04870844 155.55369568]
[10.63523197 147.54635620]
[23.31917191 139.53900146]
[19.86702728 131.96855164]
[17.16018867 124.10077667]
[15.22383213 116.00884247]
[14.07596493 107.76801300]
[13.72726536 99.45493317]
[14.18097591 91.14692688]
[15.43287659 82.92125702]
[17.47132492 74.85443115]
[20.27735901 67.02148438]
[23.82488251 59.49526978]
[28.08090019 52.34577942]
[33.00582504 45.63951492]
[38.55385590 39.43884659]
[44.67338562 33.80145264]
[51.30750275 28.77976036]
[58.39450073 24.42047691]
[65.86846161 20.76414871]
[73.65988159 17.84478188]
[81.69628143 15.68952751]
[89.90292358 14.31843281]
[98.20348358 13.74425030]
[106.52074432 13.97232056]
[114.77735901 15.00052071]
[122.89653015 16.81929016]
[128.11955261 2.75799465]
[133.34257507 -11.30330086]
[138.56561279 -25.36459541]
[143.78863525 -39.42589188]
[149.01165771 -53.48718643]
[154.23468018 -67.54847717]
[148.88452148 -82.67314148]
[157.49562073 -96.20934296]
[173.46226501 -97.77326202]
[184.53622437 -86.16519165]
[182.22248840 -70.28986359]
[168.29597473 -62.32545471]
[163.07295227 -48.26416016]
[157.84992981 -34.20286560]
[152.62690735 -20.14157104]
[147.40386963 -6.08027601]
[142.18084717 7.98101902]
[136.95782471 22.04231453]
[161.39891052 39.39095688]
[178.42965698 64.05460358]
[185.99459839 93.05656433]
[183.18070984 122.89653015]
[197.24200439 128.11955261]
[211.30329895 133.34257507]
[225.44044495 138.35667419]
[239.65034485 143.16072083]
[253.86024475 147.96476746]
[268.07012939 152.76881409]
[282.34967041 157.36177063]
[296.69567871 161.74261475]
[311.04168701 166.12347412]
[325.38769531 170.50431824]
[341.23474121 166.28488159]
[352.61917114 178.08854675]
[347.82971191 193.77270508]
[331.79330444 197.20285034]
[321.00683594 184.85034180]
[306.66082764 180.46948242]
[292.31481934 176.08863831]
[277.96881104 171.70777893]
[270.53320312 172.78169250]
[263.26608276 166.97871399]
[249.05619812 162.17465210]
[234.84629822 157.37060547]
[220.63639832 152.56655884]
[213.17222595 153.41966248]
[206.08027649 147.40386963]
[192.01898193 142.18084717]
[177.95768738 136.95782471]
[172.19955444 147.22824097]
[165.09663391 156.61898804]
[156.78123474 164.95516968]
[147.40823364 172.08148193]
[137.15222168 177.86523438]
[126.20420837 182.19866943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[72 99]
[73 98]
[74 97]
[75 95]
[76 94]
[77 93]
[78 92]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
