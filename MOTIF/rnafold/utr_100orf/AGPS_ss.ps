%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCACCCGCGCCCAGCGGUUCCGGGCGGCAGCACAAGGCGGUAGCCAUGGCGGAGGCGGCGGCUGCAGCGGGUGGGACUGGCUUGGGCGCGGGCGCGAGCUACGGGUCUGCAGCGGACCGGGACCGGGACCCGGACCCGGACCGCG\
) } def
/len { sequence length } bind def

/coor [
[89.06435394 127.12369537]
[81.62756348 122.75382996]
[75.78900909 116.40460205]
[72.05657196 108.62832642]
[70.75495148 100.10147095]
[71.99737549 91.56578064]
[59.22443771 83.70117188]
[46.45149994 75.83656311]
[33.67856216 67.97195435]
[20.90562439 60.10734558]
[8.13268852 52.24273682]
[-4.64024878 44.37812805]
[-17.41318512 36.51351929]
[-30.18612289 28.64890862]
[-42.95906067 20.78429985]
[-55.81474686 13.05569649]
[-68.75173950 5.46396971]
[-81.76856995 -1.99002552]
[-94.86378479 -9.30544949]
[-107.95899200 -16.62087440]
[-121.05420685 -23.93629837]
[-134.14941406 -31.25172234]
[-147.24462891 -38.56714630]
[-160.33984375 -45.88257217]
[-180.41305542 -44.62128830]
[-189.71757507 -61.52544022]
[-203.11146545 -68.27849579]
[-218.91735840 -67.58255005]
[-226.79850769 -80.22125244]
[-240.19239807 -86.97431183]
[-253.58627319 -93.72736359]
[-266.98016357 -100.48042297]
[-280.37405396 -107.23347473]
[-281.16964722 -99.39521790]
[-285.15002441 -91.51216125]
[-292.30297852 -84.64971924]
[-302.29434204 -79.84754944]
[-314.48309326 -78.02838898]
[-329.07604980 -81.49909973]
[-343.66900635 -84.96981049]
[-359.21957397 -79.76291656]
[-371.32324219 -90.82786560]
[-367.52880859 -106.78199768]
[-351.73962402 -111.21305847]
[-340.19830322 -99.56275940]
[-325.60534668 -96.09204865]
[-311.01239014 -92.62133789]
[-307.35467529 -99.16894531]
[-296.38153076 -118.81175995]
[-306.98815918 -129.41836548]
[-322.21743774 -133.70545959]
[-325.74588013 -148.17610168]
[-336.35247803 -158.78269958]
[-352.32424927 -162.50215149]
[-356.82946777 -178.27032471]
[-345.23352051 -189.86627197]
[-329.46533203 -185.36108398]
[-325.74588013 -169.38929749]
[-315.13928223 -158.78269958]
[-300.66864014 -155.25425720]
[-296.38153076 -140.02496338]
[-285.77493286 -129.41836548]
[-273.62100220 -120.62736511]
[-260.22711182 -113.87430573]
[-246.83322144 -107.12125397]
[-233.43933105 -100.36819458]
[-220.04544067 -93.61514282]
[-205.19757080 -94.79411316]
[-196.35839844 -81.67238617]
[-182.96452332 -74.91932678]
[-173.50465393 -79.00084686]
[-163.14984131 -77.12564850]
[-155.40400696 -69.68058777]
[-153.02441406 -58.97778320]
[-139.92919922 -51.66235733]
[-126.83399200 -44.34693527]
[-113.73877716 -37.03150940]
[-100.64356995 -29.71608543]
[-87.54835510 -22.40066147]
[-74.45314789 -15.08523750]
[-67.02837372 -14.56534958]
[-61.16000748 -7.47301912]
[-48.22301865 0.11870795]
[-40.81095505 0.79607183]
[-35.09445190 8.01136303]
[-22.32151413 15.87597275]
[-9.54857635 23.74058151]
[3.22436023 31.60519028]
[15.99729729 39.46979904]
[28.77023506 47.33440781]
[41.54317093 55.19902039]
[54.31610870 63.06362915]
[67.08904266 70.92823792]
[79.86198425 78.79284668]
[103.71466827 70.99165344]
[124.83196259 84.55147552]
[139.17445374 80.15913391]
[153.51696777 75.76679230]
[164.44656372 64.32763672]
[178.88162231 67.99895477]
[193.22412109 63.60661316]
[207.56661987 59.21427155]
[220.94096375 48.79490280]
[234.65553284 58.76220703]
[228.87432861 74.70001984]
[211.95896912 73.55677032]
[197.61647034 77.94911194]
[183.27395630 82.34145355]
[173.37022400 93.46643829]
[157.90930176 90.10929871]
[143.56680298 94.50164032]
[129.22430420 98.89398193]
[128.30155945 107.36915588]
[124.97382355 115.21811676]
[135.35290527 126.04745483]
[145.73199463 136.87680054]
[156.11106873 147.70614624]
[171.24594116 152.31552124]
[174.46644592 166.85778809]
[184.84553528 177.68713379]
[195.22460938 188.51647949]
[205.60369873 199.34580994]
[215.98277283 210.17515564]
[231.11764526 214.78453064]
[234.33815002 229.32681274]
[244.71722412 240.15614319]
[255.09631348 250.98548889]
[265.47540283 261.81481934]
[280.80029297 269.06628418]
[278.07458496 285.79968262]
[261.24057007 287.81277466]
[254.64605713 272.19390869]
[244.26696777 261.36456299]
[233.88789368 250.53523254]
[223.50880432 239.70588684]
[209.11631775 235.87109375]
[205.15344238 220.55424500]
[194.77435303 209.72489929]
[184.39526367 198.89555359]
[174.01618958 188.06620789]
[163.63710022 177.23687744]
[149.24461365 173.40208435]
[145.28173828 158.08522034]
[134.90264893 147.25588989]
[124.52356720 136.42654419]
[114.14448547 125.59719849]
[106.06213379 128.61003113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[15 85]
[16 83]
[17 82]
[18 80]
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[26 70]
[27 69]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[38 47]
[39 46]
[40 45]
[49 62]
[50 61]
[52 59]
[53 58]
[96 112]
[97 111]
[98 110]
[100 108]
[101 107]
[102 106]
[114 146]
[115 145]
[116 144]
[117 143]
[119 141]
[120 140]
[121 139]
[122 138]
[123 137]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
