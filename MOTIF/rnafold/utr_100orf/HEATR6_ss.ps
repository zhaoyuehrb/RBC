%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCCGUAGAAAAGAUGGCUGCUGUGCAAGUUGUCGGUUCGUGGCCUUCCGUGCAGCCGCGGGAGGCACCGCGGGAAGCAAUCCCUGAGCGAGGCAAUGGGUUUCGCCUCUUGU\
) } def
/len { sequence length } bind def

/coor [
[161.83374023 168.07556152]
[165.64399719 149.92005920]
[152.92797852 141.96374512]
[140.21195984 134.00743103]
[127.49594879 126.05111694]
[114.77993011 118.09480286]
[107.20024872 123.27914429]
[97.84684753 125.27912140]
[88.05772400 123.51538849]
[79.34453583 117.96881866]
[73.15980530 109.22386169]
[70.65839386 98.41627502]
[55.74337006 100.01068115]
[40.82835007 101.60507965]
[30.91631699 113.62129211]
[15.76764965 115.02577209]
[4.37311316 105.50211334]
[-10.54190922 107.09651184]
[-25.45693016 108.69091797]
[-40.37195206 110.28531647]
[-55.28697586 111.87972260]
[-70.20199585 113.47412109]
[-85.11701965 115.06852722]
[-100.00949860 116.86132812]
[-114.87678528 118.85221100]
[-129.77328491 126.94731140]
[-141.67579651 114.87392426]
[-133.36917114 100.09432983]
[-116.86766815 103.98491669]
[-102.00038147 101.99403381]
[-95.70796204 97.93557739]
[-86.71141815 100.15350342]
[-71.79640198 98.55909729]
[-56.88137817 96.96469879]
[-41.96635437 95.37029266]
[-27.05133247 93.77589417]
[-12.13631153 92.18148804]
[2.77871084 90.58708954]
[11.90263367 78.87002563]
[27.00587463 77.04060364]
[39.23394775 86.69005585]
[54.14896774 85.09565735]
[69.06398773 83.50125122]
[78.79051971 72.08220673]
[77.99218750 57.10346603]
[77.19385529 42.12472534]
[73.57314301 33.59551620]
[76.57904053 26.73765945]
[76.17973328 11.74297619]
[75.78041840 -3.25170827]
[75.38111115 -18.24639320]
[74.98180389 -33.24107742]
[74.58249664 -48.23575974]
[74.18318939 -63.23044586]
[73.78388214 -78.22512817]
[73.38457489 -93.21981049]
[64.35328674 -106.90805054]
[71.93297577 -121.45041656]
[88.32630920 -121.88697052]
[96.66923523 -107.76862335]
[88.37925720 -93.61911774]
[88.77856445 -78.62443542]
[89.17787170 -63.62975311]
[89.57717896 -48.63506699]
[89.97649384 -33.64038467]
[90.37580109 -18.64570045]
[90.77510834 -3.65101624]
[91.17441559 11.34366798]
[91.57372284 26.33835220]
[92.17259216 41.32639313]
[92.97092438 56.30513382]
[93.76925659 71.28387451]
[118.82225800 81.52530670]
[122.73624420 105.37878418]
[135.45225525 113.33509827]
[148.16827393 121.29141235]
[160.88429260 129.24772644]
[173.60031128 137.20404053]
[182.50410461 129.25216675]
[193.07052612 123.72267151]
[204.65615845 120.94565582]
[216.55720520 121.08380127]
[228.05212402 124.12289429]
[238.44543457 129.87300110]
[247.10980225 137.98034668]
[253.52388000 147.94911194]
[257.30368042 159.17167664]
[258.22555542 170.96572876]
[256.23944092 182.61570740]
[251.47155762 193.41621399]
[263.01907349 202.98986816]
[274.56658936 212.56353760]
[286.24050903 221.98263550]
[298.03878784 231.24549866]
[309.83703613 240.50837708]
[321.63531494 249.77124023]
[333.43359375 259.03411865]
[345.23187256 268.29696655]
[361.26766968 267.81478882]
[371.53250122 280.14413452]
[368.15206909 295.82699585]
[353.71954346 302.83282471]
[339.30630493 295.78735352]
[335.96899414 280.09524536]
[324.17071533 270.83239746]
[312.37246704 261.56951904]
[300.57418823 252.30664062]
[288.77590942 243.04377747]
[276.97763062 233.78091431]
[269.68014526 232.10397339]
[264.99291992 224.11103821]
[253.44540405 214.53738403]
[241.89788818 204.96371460]
[226.08787537 214.29748535]
[207.89779663 217.01217651]
[189.98942566 212.68632507]
[174.99241638 201.93045044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[12 43]
[13 42]
[14 41]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 30]
[25 29]
[44 72]
[45 71]
[46 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[90 113]
[91 112]
[92 111]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
