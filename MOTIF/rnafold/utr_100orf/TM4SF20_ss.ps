%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCCACUUUGACAACGUUUCUGAGCCAGGGGUGACCAUGACCUGCUGCGAAGGAUGGACAUCCUGCAAUGGAUUCAGCCUGCUGGUUCUACUGCUGUUAGGAGUAGUUCUCAAUGCGAUACCUCUAAUUGUCAGCU\
) } def
/len { sequence length } bind def

/coor [
[120.66828156 275.15975952]
[109.40222931 285.45727539]
[94.78147888 289.83865356]
[79.70898438 287.43392944]
[67.17739868 278.72061157]
[59.67488098 265.42871094]
[58.69106293 250.19732666]
[64.42127991 236.05067444]
[75.72779083 225.79760742]
[90.36568451 221.47384644]
[92.72893524 206.66117859]
[95.09219360 191.84852600]
[97.45545197 177.03585815]
[99.81871033 162.22319031]
[102.18196869 147.41053772]
[104.54522705 132.59786987]
[94.74894714 131.63517761]
[85.92880249 127.87231445]
[78.84120178 121.79691315]
[74.04365540 114.08660126]
[71.85199738 105.53599548]
[72.32269287 96.97586823]
[75.26070404 89.19277191]
[80.25116730 82.85673523]
[72.21949005 70.18818665]
[64.18781281 57.51963806]
[56.15613556 44.85108566]
[48.12445831 32.18253326]
[40.09278488 19.51398468]
[32.06110764 6.84543371]
[23.74518013 -5.63837004]
[15.14924908 -17.93104935]
[0.90008348 -24.80650330]
[-0.05262269 -39.67060852]
[-8.64855385 -51.96328735]
[-17.24448395 -64.25596619]
[-26.11602783 -76.35124207]
[-35.25865173 -88.24294281]
[-44.40127563 -100.13463593]
[-53.54389954 -112.02632904]
[-56.02450562 -97.23286438]
[-67.30959320 -87.35122681]
[-82.30106354 -86.84549713]
[-94.22644043 -95.94414520]
[-97.69837189 -110.53680420]
[-91.14839172 -124.03116608]
[-77.53549194 -130.33106995]
[-63.01013184 -126.59103394]
[-70.16503143 -139.77464294]
[-77.31993103 -152.95825195]
[-82.86002350 -156.81121826]
[-85.20586395 -162.10424805]
[-84.48490143 -166.90322876]
[-91.03675842 -180.39666748]
[-97.58861542 -193.89012146]
[-104.14047241 -207.38357544]
[-110.69232941 -220.87701416]
[-124.56766510 -229.61813354]
[-123.66500854 -245.99241638]
[-108.91294098 -253.15541077]
[-95.48712158 -243.73843384]
[-97.19888306 -227.42887878]
[-90.64702606 -213.93542480]
[-84.09516907 -200.44197083]
[-77.54331207 -186.94853210]
[-70.99145508 -173.45507812]
[-64.13632202 -160.11314392]
[-56.98142624 -146.92953491]
[-49.82652664 -133.74594116]
[-41.65220261 -121.16895294]
[-32.50957870 -109.27725983]
[-23.36695671 -97.38556671]
[-14.22433186 -85.49386597]
[-9.60910416 -83.99402618]
[-5.92253304 -79.52989960]
[-4.95180416 -72.85189819]
[3.64412642 -60.55921936]
[12.24005699 -48.26654053]
[25.87438393 -42.27033997]
[27.44192886 -26.52697945]
[36.03786087 -14.23430061]
[40.58059692 -12.52743816]
[44.06168365 -7.90128803]
[44.72965622 -1.18624246]
[52.76133347 11.48230839]
[60.79301071 24.15085983]
[68.82468414 36.81940842]
[76.85636139 49.48796082]
[84.88803864 62.15650940]
[92.91971588 74.82506561]
[119.29357910 77.64106750]
[132.64714050 104.17656708]
[147.43215942 101.64607239]
[162.21717834 99.11557007]
[177.00218201 96.58507538]
[191.78720093 94.05458069]
[206.57220459 91.52408600]
[215.49635315 78.48049927]
[231.04507446 75.64976501]
[243.99357605 84.71131897]
[246.65975952 100.28909302]
[237.46180725 113.14107513]
[221.85671997 115.64240265]
[209.10270691 106.30909729]
[194.31768799 108.83959198]
[179.53268433 111.37008667]
[164.74766541 113.90058899]
[149.96266174 116.43108368]
[135.17764282 118.96157837]
[149.36590576 123.82917023]
[163.55415344 128.69676208]
[178.45243835 126.95284271]
[193.17721558 129.81306458]
[206.33924866 137.00756836]
[216.69671631 147.85758972]
[223.27243042 161.33941650]
[225.44596863 176.18110657]
[223.01228333 190.98236084]
[216.20097351 204.34672546]
[205.65467834 215.01329041]
[192.36840820 221.97569275]
[177.59568787 224.57704163]
[162.73031616 222.57191467]
[149.17478943 216.14949036]
[138.20803833 205.91571045]
[130.86474609 192.83609009]
[127.83776093 178.14468384]
[129.41311646 163.22581482]
[124.38550568 149.09346008]
[119.35789490 134.96112061]
[116.99463654 149.77378845]
[114.63137817 164.58645630]
[112.26811981 179.39910889]
[109.90486145 194.21177673]
[107.54160309 209.02444458]
[105.17834473 223.83711243]
[117.74414825 232.50102234]
[125.29895020 245.76329041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 136]
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[31 81]
[32 80]
[34 78]
[35 77]
[36 76]
[37 73]
[38 72]
[39 71]
[40 70]
[48 69]
[49 68]
[50 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
