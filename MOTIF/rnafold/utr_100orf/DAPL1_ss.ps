%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCUGGCAUUCAGCCUCCAGAGCACCAGCACUGGCACUGGCACUGGCACACGCUAUGGCAAAUGAAGUGCAAGACCUGCUCUCCCCUCGGAAAGGGGGACAUCCUCCUGCAGUAAAAGCUGGAGGAAUGAGAAUUUCCAAAAAACAAGAAAUUG\
) } def
/len { sequence length } bind def

/coor [
[128.46403503 200.00131226]
[115.90339661 191.80191040]
[119.81959534 177.32281494]
[112.32897949 177.69786072]
[106.48490143 191.51258850]
[100.64082336 205.32731628]
[94.79674530 219.14204407]
[99.46799469 234.48997498]
[90.26259613 247.62924194]
[74.24214172 248.48051453]
[63.69615555 236.39077759]
[66.71461487 220.63423157]
[80.98201752 213.29795837]
[86.82609558 199.48323059]
[92.67017365 185.66850281]
[98.51425171 171.85377502]
[100.45973969 156.98048401]
[98.36553955 142.12738037]
[96.27133942 127.27429199]
[77.13046265 115.32234192]
[73.35753632 93.07402802]
[60.41746902 85.48754883]
[47.47740173 77.90106964]
[34.53733444 70.31459045]
[21.59726524 62.72811508]
[8.65719891 55.14163589]
[-8.46481514 63.56112289]
[-27.06820297 60.05401611]
[-39.74817276 46.19820786]
[-41.56695557 27.65419006]
[-54.93885803 20.85770798]
[-68.31076050 14.06122589]
[-81.68267059 7.26474333]
[-95.05457306 0.46826121]
[-107.20700836 9.63776016]
[-122.07494354 12.60951710]
[-136.69892883 8.84662628]
[-148.19171143 -0.85269445]
[-154.30833435 -14.52370453]
[-153.88446045 -29.43295670]
[-167.25636292 -36.22943878]
[-183.06442261 -35.58478546]
[-190.90452576 -48.24899292]
[-204.27642822 -55.04547501]
[-213.40072632 -56.15682602]
[-217.84585571 -62.11406708]
[-231.07910156 -69.17674255]
[-244.31233215 -76.23942566]
[-257.54556274 -83.30210114]
[-273.90863037 -82.21479797]
[-282.80572510 -95.99065399]
[-275.08425903 -110.45823669]
[-258.68743896 -110.73455048]
[-250.48289490 -96.53533936]
[-237.24964905 -89.47266388]
[-224.01641846 -82.40998077]
[-210.78317261 -75.34730530]
[-197.47994995 -68.41738129]
[-184.10803223 -61.62089920]
[-169.25642395 -62.75168228]
[-160.45986938 -49.60134506]
[-147.08796692 -42.80486298]
[-135.29351807 -51.93484116]
[-120.64440155 -55.05133820]
[-106.03502655 -51.48381805]
[-94.37579346 -41.88785172]
[-88.01329041 -28.12538528]
[-88.25808716 -12.90364361]
[-74.88618469 -6.10716105]
[-61.51428223 0.68932116]
[-48.14237595 7.48580313]
[-34.77047348 14.28228569]
[-25.89421844 7.37105131]
[-15.02327347 4.28282022]
[-3.73680902 5.50639534]
[6.31051683 10.90128326]
[13.63113213 19.71261787]
[17.12476158 30.67657280]
[16.24367714 42.20156860]
[29.18374443 49.78804779]
[42.12381363 57.37452698]
[55.06388092 64.96100616]
[68.00394440 72.54748535]
[80.94401550 80.13396454]
[91.28088379 67.59862518]
[109.36402130 61.54359436]
[117.58807373 48.99907303]
[125.81211853 36.45455170]
[134.03617859 23.91003227]
[142.26022339 11.36551094]
[140.41363525 -4.57091427]
[151.82365417 -15.84881306]
[167.73748779 -13.81674576]
[175.94741821 -0.03354103]
[170.15547180 14.92750645]
[154.80474854 19.58956146]
[146.58068848 32.13408279]
[138.35664368 44.67860413]
[130.13259888 57.22312546]
[121.90854645 69.76764679]
[125.70178223 76.23767853]
[140.70144653 76.13759613]
[133.28826904 89.17774200]
[137.08149719 95.64778137]
[152.04472351 94.59810638]
[167.00794983 93.54843140]
[181.97119141 92.49875641]
[196.93441772 91.44908142]
[211.89764404 90.39940643]
[225.12254333 81.71536255]
[238.36004639 88.54306793]
[253.32328796 87.49339294]
[262.36499023 74.73480988]
[277.50543213 70.82309723]
[291.59570312 77.60524750]
[297.98287964 91.87894440]
[293.65106201 106.90457153]
[280.64566040 115.58749390]
[265.10739136 113.82790375]
[254.37295532 102.45661926]
[239.40972900 103.50629425]
[227.25509644 112.11525726]
[212.94731140 105.36264038]
[197.98408508 106.41230774]
[183.02085876 107.46198273]
[168.05763245 108.51165771]
[153.09440613 109.56133270]
[138.13117981 110.61100769]
[130.01928711 119.06691742]
[120.57352448 123.91314697]
[111.12442780 125.18009186]
[113.21863556 140.03318787]
[115.31283569 154.88627625]
[155.45336914 169.00300598]
[162.64808655 182.16491699]
[169.84280396 195.32682800]
[177.03752136 208.48873901]
[184.23225403 221.65065002]
[191.42697144 234.81257629]
[206.78334045 235.09086609]
[219.93492126 243.02381897]
[227.34397888 256.47747803]
[227.01754761 271.83291626]
[219.04341125 284.95956421]
[205.56658936 292.32641602]
[190.21226501 291.95184326]
[177.11067200 283.93661499]
[169.78610229 270.43676758]
[170.20878601 255.08367920]
[178.26506042 242.00729370]
[171.07032776 228.84538269]
[163.87561035 215.68345642]
[156.68089294 202.52154541]
[149.48617554 189.35963440]
[142.29144287 176.19772339]
[134.80082703 176.57275391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[17 133]
[18 132]
[19 131]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[40 62]
[41 61]
[43 59]
[44 58]
[46 57]
[47 56]
[48 55]
[49 54]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
[111 121]
[112 120]
[134 155]
[135 154]
[136 153]
[137 152]
[138 151]
[139 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
