%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGAGGCGGAGAACAAUAUGGCGGAUGGCGAGGAGCCGGAGAAGAAAAGAAGGAGAAUAGAGGAGCUGCUGGCUGAGAAAAUGGCUGUUGAUGGUGGGUGUGGGGACACUGGAGACU\
) } def
/len { sequence length } bind def

/coor [
[74.74388885 156.82360840]
[60.08962631 153.62161255]
[48.88680267 143.64682007]
[44.01247406 129.46087646]
[46.71844482 114.70697021]
[56.30978012 103.17413330]
[70.32327271 97.82418060]
[85.16077423 100.03137207]
[72.23578644 92.41922760]
[59.31080246 84.80708313]
[46.38581467 77.19493866]
[33.46082687 69.58279419]
[22.28828049 78.51602936]
[8.75947857 83.07050323]
[-5.48095512 82.71424103]
[-18.70930099 77.51091766]
[-29.33139229 68.10965729]
[-36.07471466 55.66415024]
[-38.14085007 41.69108963]
[-35.29994965 27.88533783]
[-48.02296448 19.94021988]
[-60.74597549 11.99510098]
[-77.16102600 25.74905014]
[-97.39777374 32.67889023]
[-118.74794006 31.87629318]
[-138.36108398 23.46649551]
[-153.62516785 8.58915043]
[-162.51441956 -10.75607109]
[-163.85818481 -31.97824860]
[-178.40420532 -35.64065552]
[-192.95022583 -39.30306625]
[-207.49624634 -42.96547318]
[-221.94915771 -36.00177765]
[-236.34176636 -43.08926773]
[-239.63328552 -58.79103470]
[-229.29876709 -71.06201935]
[-213.26594543 -70.48897552]
[-203.83384705 -57.51149750]
[-189.28782654 -53.84908676]
[-174.74180603 -50.18667984]
[-160.19577026 -46.52426910]
[-155.87960815 -55.29124451]
[-150.15426636 -63.21544647]
[-143.18020630 -70.07241058]
[-135.15319824 -75.66761017]
[-126.29899597 -79.84197998]
[-116.86684418 -82.47640991]
[-107.12255096 -83.49520111]
[-97.34096527 -82.86816406]
[-87.79822540 -80.61158752]
[-78.76396179 -76.78775787]
[-70.49368286 -71.50327301]
[-63.22156143 -64.90607452]
[-57.15378189 -57.18128204]
[-52.46269608 -48.54601669]
[-49.28195190 -39.24328995]
[-47.70265579 -29.53518105]
[-47.77079391 -19.69543076]
[-49.48585892 -10.00173664]
[-52.80085754 -0.72791326]
[-40.07784271 7.21720552]
[-27.35482979 15.16232491]
[-14.65238667 5.78096771]
[0.70891708 1.95922673]
[16.40233612 4.30620718]
[30.03924370 12.49435139]
[39.53269958 25.30479813]
[43.41679764 40.80873871]
[41.07297134 56.65781021]
[53.99795914 64.26995087]
[66.92294312 71.88209534]
[79.84793091 79.49423981]
[92.77291870 87.10638428]
[107.76786041 87.49579620]
[121.07052612 80.56476593]
[134.37318420 73.63374329]
[147.67585754 66.70271301]
[149.83061218 51.33597565]
[160.63038635 40.19396210]
[175.92245483 37.56100464]
[189.82669067 44.44953156]
[196.99664307 58.21076202]
[194.67530823 73.55322266]
[183.75529480 84.57742310]
[168.43557739 87.04433441]
[154.60688782 80.00537872]
[141.30421448 86.93640137]
[128.00155640 93.86743164]
[114.69889069 100.79845428]
[112.95033264 115.69619751]
[124.28657532 125.51910400]
[135.62281799 135.34201050]
[151.17108154 134.39910889]
[162.52772522 144.52243042]
[163.33082581 159.35113525]
[174.66706848 169.17404175]
[186.00331116 178.99696350]
[197.33955383 188.81987000]
[208.67579651 198.64277649]
[223.16351318 193.54362488]
[238.25686646 196.38725281]
[249.89581299 206.40875244]
[254.94953918 220.91239929]
[252.05860901 235.99676514]
[242.00067139 247.60423279]
[227.48126221 252.61247253]
[212.40603638 249.67427063]
[200.83013916 239.58000183]
[195.86744690 225.04496765]
[198.85289001 209.97901917]
[187.51664734 200.15611267]
[176.18038940 190.33320618]
[164.84414673 180.51028442]
[153.50790405 170.68737793]
[138.71583557 172.00279236]
[127.07934570 162.20245361]
[125.79991150 146.67825317]
[114.46366119 136.85534668]
[103.12741852 127.03244019]
[99.43306732 141.57037354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[20 62]
[21 61]
[22 60]
[29 41]
[30 40]
[31 39]
[32 38]
[74 89]
[75 88]
[76 87]
[77 86]
[90 119]
[91 118]
[92 117]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
