%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCAUCCUGGCGCCAGUCUCAGGCCAAGAGCUGCAGGCUGGCAUGGCUGGGGGGAUGUCAGCGGAGUGCCCUGAGCCUGGGCCAGGAGGUCUGCAGGGCCAGUCCCCAGGGCCAGGCAGGCAGUGUCCCCCUCCCAUCACGC\
) } def
/len { sequence length } bind def

/coor [
[-64.27101898 259.57293701]
[-68.75146484 273.88815308]
[-73.23190308 288.20336914]
[-64.65025330 301.27584839]
[-66.53046417 316.79998779]
[-77.98477173 327.44577026]
[-93.60479736 328.18658447]
[-106.01524353 318.67266846]
[-109.35627747 303.39614868]
[-102.05036163 289.57019043]
[-87.54712677 283.72293091]
[-83.06668854 269.40771484]
[-78.58624268 255.09248352]
[-89.25013733 244.54348755]
[-103.51599121 249.17874146]
[-117.78183746 253.81399536]
[-132.04768372 258.44924927]
[-146.31353760 263.08450317]
[-160.57937622 267.71975708]
[-174.84523010 272.35501099]
[-189.11106873 276.99026489]
[-203.32586670 281.77978516]
[-217.48794556 286.72302246]
[-231.65002441 291.66625977]
[-235.99511719 306.56256104]
[-248.28677368 316.03329468]
[-263.79858398 316.43679810]
[-276.56597900 307.61785889]
[-281.67962646 292.96759033]
[-277.17318726 278.11929321]
[-264.77951050 268.78247070]
[-249.26423645 268.54727173]
[-236.59326172 277.50418091]
[-222.43118286 272.56094360]
[-208.26910400 267.61770630]
[-202.95108032 262.40521240]
[-193.74632263 262.72442627]
[-179.48048401 258.08917236]
[-165.21463013 253.45391846]
[-150.94879150 248.81866455]
[-136.68293762 244.18341064]
[-122.41709137 239.54815674]
[-108.15124512 234.91290283]
[-93.88539886 230.27764893]
[-62.00692368 229.46138000]
[-50.78755569 219.50518799]
[-39.56818771 209.54899597]
[-28.34881973 199.59280396]
[-27.29877853 187.49537659]
[-17.96837044 179.11009216]
[-5.02440786 179.36810303]
[6.40802288 169.65731812]
[17.84045410 159.94651794]
[29.27288437 150.23573303]
[40.70531464 140.52493286]
[52.13774490 130.81413269]
[63.57017517 121.10334015]
[75.00260925 111.39254761]
[73.04986572 85.58558655]
[94.60869598 66.78010559]
[91.70226288 52.06437683]
[88.79583740 37.34864807]
[85.88940430 22.63291931]
[81.12390900 14.75132656]
[83.08304596 7.56707811]
[80.49610901 -7.20816278]
[69.56088257 -19.42916679]
[74.93334961 -34.92331696]
[91.08677673 -37.75155640]
[101.40390015 -25.00443840]
[95.27134705 -9.79510307]
[97.85828400 4.98013783]
[100.60513306 19.72648811]
[103.51156616 34.44221497]
[106.41799164 49.15794373]
[109.32442474 63.87367249]
[122.79840851 70.46546173]
[136.20019531 63.72809982]
[149.60198975 56.99073410]
[163.00376892 50.25336838]
[176.40556335 43.51600266]
[189.80734253 36.77863693]
[198.66188049 23.66727257]
[213.50836182 24.86363029]
[226.91014099 18.12626457]
[235.76467896 5.01490164]
[250.61116028 6.21125984]
[264.01293945 -0.52610552]
[270.33233643 -7.22645140]
[277.77886963 -7.26071167]
[291.32345581 -13.70615292]
[300.45996094 -26.62261200]
[315.27703857 -25.10489273]
[328.82165527 -31.55033493]
[342.36624146 -37.99577713]
[347.41842651 -52.97079086]
[361.61669922 -59.91233063]
[376.53744507 -54.70210648]
[383.32849121 -40.43125153]
[377.96081543 -25.56641197]
[363.61895752 -18.92663002]
[348.81167603 -24.45117188]
[335.26708984 -18.00573158]
[321.72247314 -11.56028938]
[313.55477905 0.89514738]
[297.76889038 -0.16154991]
[284.22430420 6.28389168]
[270.75030518 12.87568188]
[257.34851074 19.61304665]
[249.45257568 32.24250793]
[233.64750671 31.52805328]
[220.24572754 38.26541901]
[212.34977722 50.89488220]
[196.54470825 50.18042374]
[183.14292908 56.91778946]
[169.74113464 63.65515518]
[156.33935547 70.39251709]
[142.93756104 77.12988281]
[129.53578186 83.86724854]
[132.42237854 94.52378082]
[131.67108154 105.28287506]
[127.53135681 114.96504974]
[120.61494446 122.56343842]
[111.81155396 127.34819031]
[102.17684937 128.93516541]
[92.80685425 127.31268311]
[84.71340179 122.82498169]
[73.28096771 132.53578186]
[61.84854126 142.24656677]
[50.41611099 151.95736694]
[38.98367691 161.66815186]
[27.55124855 171.37895203]
[16.11881638 181.08975220]
[4.68638611 190.80053711]
[-1.06242168 208.25820923]
[-18.39262581 210.81216431]
[-29.61199570 220.76835632]
[-40.83136368 230.72454834]
[-52.05073166 240.68075562]
[-37.07773972 239.78100586]
[-25.36670876 249.15393066]
[-22.96406937 263.96026611]
[-31.11030960 276.55545044]
[-45.59950638 280.43658447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 35]
[23 34]
[24 33]
[45 139]
[46 138]
[47 137]
[48 136]
[51 134]
[52 133]
[53 132]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[60 76]
[61 75]
[62 74]
[63 73]
[65 72]
[66 71]
[77 119]
[78 118]
[79 117]
[80 116]
[81 115]
[82 114]
[84 112]
[85 111]
[87 109]
[88 108]
[90 107]
[91 106]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
