%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCUCCUGCCUGUCUGCUCAGUUCAUCCCUAGAGGCAGCUGCUCCAGGAACAGAGGUGCCAUGCAGCCCCGGGUACUCCUUGUUGUUGCCCUCCUGGCGCUCCUGGCCUCUGCCCGAGCUUCAGAGGCCGAGGAUGCCUCCCUUCUCAGCUUCAUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[58.72348022 501.17523193]
[49.45666504 513.77124023]
[34.24917221 517.41351318]
[20.28151512 510.38229370]
[14.14879322 495.99743652]
[18.74669075 481.05108643]
[31.90422058 472.60043335]
[33.63497925 457.70062256]
[35.36573792 442.80081177]
[37.09649658 427.90100098]
[38.82725143 413.00119019]
[32.61015320 399.46615601]
[41.88809204 386.65090942]
[43.61885071 371.75109863]
[34.26951218 362.84402466]
[31.73420906 349.98361206]
[37.16243744 337.83871460]
[48.77046204 330.95095825]
[50.78805161 316.08724976]
[52.80564499 301.22357178]
[46.85055161 287.57122803]
[56.37374878 274.93719482]
[58.39133835 260.07348633]
[49.37604141 255.66665649]
[41.78936005 249.07260132]
[36.15038300 240.73083496]
[32.84794235 231.20080566]
[32.11380386 221.12442017]
[34.00643158 211.18276978]
[38.40642929 202.05017090]
[45.02404785 194.34831238]
[53.41823578 188.60406494]
[63.02603149 185.21333313]
[73.20031738 184.41384888]
[76.91946411 169.88221741]
[80.63861084 155.35060120]
[84.35775757 140.81898499]
[88.07690430 126.28736877]
[91.79605103 111.75574493]
[87.08421326 107.22128296]
[84.76620483 100.88623810]
[85.48043060 93.97070312]
[89.26176453 87.89198303]
[84.16165924 73.78564453]
[72.19316864 63.43838120]
[75.14214325 48.83862686]
[70.04203796 34.73228455]
[64.94193268 20.62593842]
[59.84182739 6.51959562]
[54.74172211 -7.58674812]
[49.64161682 -21.69309235]
[40.78263855 -9.58860970]
[25.80497932 -8.77023506]
[15.67990589 -19.83743477]
[17.82412338 -34.68338776]
[30.66697311 -42.43330383]
[44.80159378 -37.40966797]
[41.08244705 -51.94128799]
[35.89945984 -59.52239227]
[37.43452835 -66.78882599]
[33.99613190 -81.38941956]
[24.38070107 -86.60169220]
[19.34871864 -96.06401062]
[20.36089516 -106.51202393]
[26.83832741 -114.49040222]
[23.96515656 -129.21266174]
[21.09198570 -143.93492126]
[18.21881485 -158.65718079]
[15.34564495 -173.37944031]
[5.93822336 -178.95838928]
[1.27463555 -188.60760498]
[2.68870091 -199.00885010]
[9.46878815 -206.73167419]
[7.16511297 -221.55372620]
[4.86143732 -236.37577820]
[-5.83787823 -248.80383301]
[-0.16984478 -264.19232178]
[16.03474998 -266.71087646]
[26.10601044 -253.76863098]
[19.68348503 -238.67944336]
[21.98715973 -223.85740662]
[24.29083633 -209.03535461]
[37.50350189 -194.95573425]
[30.06790352 -176.25260925]
[32.94107437 -161.53034973]
[35.81424332 -146.80809021]
[38.68741608 -132.08583069]
[41.56058502 -117.36357880]
[55.30603409 -103.80360413]
[48.59672928 -84.82781982]
[52.03512573 -70.22721863]
[55.61406326 -55.66043472]
[59.33320999 -41.12881470]
[63.74795914 -26.79319572]
[68.84806824 -12.68685341]
[73.94817352 1.41949058]
[79.04827881 15.52583408]
[84.14838409 29.63217735]
[89.24848175 43.73852158]
[100.85218048 53.07680130]
[98.26800537 68.68553925]
[103.36811066 82.79187775]
[116.08542633 90.74611664]
[131.00122070 89.15902710]
[145.91702271 87.57192993]
[160.83282471 85.98484039]
[175.73263550 84.25408173]
[190.61508179 82.37981415]
[205.49752808 80.50555420]
[220.37997437 78.63129425]
[235.26242065 76.75703430]
[250.14486694 74.88276672]
[265.02731323 73.00850677]
[279.90975952 71.13424683]
[286.47048950 57.17142105]
[299.55072021 48.99150848]
[314.97659302 49.20468140]
[327.82580566 57.74292374]
[333.99816895 71.88171387]
[331.52413940 87.10940552]
[321.19317627 98.56690979]
[306.30181885 102.59817505]
[291.60186768 97.91683197]
[281.78402710 86.01669312]
[266.90158081 87.89095306]
[252.01911926 89.76521301]
[237.13667297 91.63947296]
[222.25424194 93.51374054]
[207.37179565 95.38800049]
[192.48934937 97.26226044]
[177.60690308 99.13652039]
[171.33332825 103.11141205]
[162.41992188 100.90063477]
[147.50411987 102.48773193]
[132.58831787 104.07482910]
[117.67251587 105.66191864]
[106.32767487 115.47489166]
[102.60852814 130.00651550]
[98.88938141 144.53813171]
[95.17023468 159.06974792]
[91.45108795 173.60136414]
[87.73194122 188.13299561]
[103.18924713 201.50929260]
[109.78543091 220.77760315]
[105.79826355 240.67269897]
[92.38661957 255.79837036]
[73.25502777 262.09109497]
[71.23744202 276.95477295]
[77.04822540 291.67025757]
[67.66933441 303.24114990]
[65.65174866 318.10485840]
[63.63415146 332.96853638]
[74.47712708 346.66699219]
[72.12830353 363.63858032]
[58.51866531 373.48187256]
[56.78790665 388.38168335]
[62.88121414 402.98242188]
[53.72706604 414.73193359]
[51.99631119 429.63174438]
[50.26555252 444.53155518]
[48.53479385 459.43139648]
[46.80403519 474.33120728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 162]
[8 161]
[9 160]
[10 159]
[11 158]
[13 156]
[14 155]
[18 152]
[19 151]
[20 150]
[22 148]
[23 147]
[34 142]
[35 141]
[36 140]
[37 139]
[38 138]
[39 137]
[43 102]
[44 101]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
[51 94]
[57 93]
[58 92]
[60 91]
[61 90]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[73 82]
[74 81]
[75 80]
[103 136]
[104 135]
[105 134]
[106 133]
[107 131]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
