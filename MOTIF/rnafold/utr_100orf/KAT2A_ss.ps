%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGCCCAUGCGGCCCUAGGGCUGGGAGCGCGGCGCCGCUCUCCGCUGCGGGGGAGGCCAUGGCGGAACCUUCCCAGGCCCCGACCCCGGCCCCGGCUGCGCAGCCCCGGCCCCUUCAGUCCCCAGCCCCUGCCCCAACUCCGACUCCUGCACCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[181.99047852 485.17559814]
[178.22612000 470.65563965]
[174.46176147 456.13565063]
[170.69740295 441.61569214]
[166.93304443 427.09570312]
[152.54144287 423.25549316]
[141.93374634 412.65676880]
[138.02961731 398.07513428]
[141.97425842 383.40078735]
[152.80500793 372.60070801]
[149.04064941 358.08071899]
[138.35696411 347.70248413]
[142.38339233 332.40222168]
[138.61903381 317.88223267]
[134.85467529 303.36227417]
[123.94731140 299.82070923]
[116.03916931 291.35043335]
[113.19537354 279.99273682]
[116.24086761 268.56301880]
[124.52564240 259.95294189]
[121.33065796 245.29714966]
[118.13568115 230.64135742]
[114.94070435 215.98558044]
[111.74571991 201.32978821]
[108.55074310 186.67399597]
[105.35576630 172.01820374]
[102.16078186 157.36242676]
[91.89014435 146.57524109]
[96.51047516 131.44371033]
[93.31549835 116.78793335]
[81.67982483 107.32160950]
[66.68054199 107.17526245]
[51.68125534 107.02892303]
[36.68196869 106.88257599]
[21.68268204 106.73622894]
[6.68339682 106.58988190]
[-2.45083690 119.13362122]
[-17.22394753 123.88071442]
[-31.95536995 119.00579834]
[-40.98057556 106.38338470]
[-40.82918549 90.86705017]
[-31.55941200 78.42313385]
[-16.73567581 73.83658600]
[-2.05800247 78.87102509]
[6.82974195 91.59059906]
[21.82902718 91.73694611]
[36.82831573 91.88328552]
[51.82759857 92.02963257]
[66.82688904 92.17597961]
[81.82617188 92.32232666]
[90.11403656 79.81987762]
[84.13802338 66.06170654]
[78.16200256 52.30353546]
[72.18598938 38.54536438]
[54.33583069 32.31708145]
[46.78717804 15.33138084]
[53.87979507 -1.50518095]
[47.37153625 -15.01971436]
[40.86328125 -28.53424644]
[34.35502625 -42.04877853]
[27.77875519 -48.46269989]
[27.85451698 -55.89109802]
[21.61119270 -69.53004456]
[15.36786747 -83.16899109]
[8.91799545 -89.71000671]
[9.13868427 -97.13551331]
[3.16266775 -110.89368439]
[-2.81334853 -124.65184784]
[-14.66944695 -136.77081299]
[-6.30619287 -151.51843262]
[10.18026447 -147.56455994]
[10.94482136 -130.62786865]
[16.92083740 -116.86969757]
[22.89685440 -103.11152649]
[29.00681496 -89.41231537]
[35.25014114 -75.77336884]
[41.49346542 -62.13442230]
[47.86956024 -48.55703735]
[54.37781525 -35.04250336]
[60.88607025 -21.52796936]
[67.39432526 -8.01343727]
[78.78138733 -6.65398026]
[88.18178558 0.12221604]
[93.17379761 10.71297550]
[92.40225983 22.51628304]
[85.94416046 32.56934738]
[91.92017365 46.32751846]
[97.89619446 60.08568954]
[103.87220764 73.84385681]
[118.55847168 76.89569855]
[129.52101135 66.65740204]
[140.48355103 56.41910172]
[151.44609070 46.18080521]
[152.14646912 30.61972618]
[163.40988159 20.39280128]
[178.24067688 21.15640259]
[189.20321655 10.91810417]
[200.16575623 0.67980748]
[211.12829590 -9.55848980]
[215.39088440 -25.39397049]
[231.30366516 -29.35819435]
[242.49696350 -17.37310791]
[237.45605469 -1.76794028]
[221.36659241 1.40404975]
[210.40405273 11.64234734]
[199.44151306 21.88064384]
[188.47897339 32.11894226]
[188.22871399 46.96727371]
[177.25698853 57.50652695]
[161.68438721 57.14334488]
[150.72184753 67.38164520]
[139.75930786 77.61994171]
[128.79676819 87.85823822]
[143.32925415 91.57400513]
[152.44908142 103.48318481]
[152.24777222 118.48183441]
[142.81158447 130.14195251]
[128.18461609 133.46633911]
[114.63555145 127.03026581]
[107.97128296 113.59294891]
[111.16625977 128.24873352]
[121.66542816 140.08419800]
[116.81657410 154.16744995]
[120.01155090 168.82322693]
[123.20652771 183.47901917]
[126.40151215 198.13481140]
[129.59648132 212.79058838]
[132.79147339 227.44638062]
[135.98645020 242.10217285]
[139.18142700 256.75796509]
[155.48521423 266.32907104]
[159.59718323 284.45608521]
[149.37464905 299.59790039]
[153.13900757 314.11788940]
[156.90336609 328.63784790]
[167.85630798 340.05465698]
[163.56062317 354.31637573]
[167.32498169 368.83633423]
[182.03875732 373.01391602]
[192.61610413 383.92340088]
[196.28823853 398.56518555]
[192.16610718 412.98266602]
[181.45301819 423.33135986]
[185.21737671 437.85131836]
[188.98173523 452.37130737]
[192.74609375 466.89126587]
[196.51045227 481.41125488]
[211.56951904 483.48318481]
[224.68687439 491.16455078]
[233.86219788 503.28402710]
[237.69633484 517.99346924]
[235.60459900 533.04980469]
[227.90597534 546.15704346]
[215.77442932 555.31640625]
[201.05995178 559.13122559]
[186.00639343 557.01965332]
[172.90930176 549.30383301]
[163.76588440 537.16021729]
[159.97045898 522.44073486]
[162.10179138 507.38995361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[10 138]
[11 137]
[13 135]
[14 134]
[15 133]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[29 121]
[30 120]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[51 89]
[52 88]
[53 87]
[54 86]
[57 81]
[58 80]
[59 79]
[60 78]
[62 77]
[63 76]
[64 75]
[66 74]
[67 73]
[68 72]
[90 113]
[91 112]
[92 111]
[93 110]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
