%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGGGAUUCCCACCCACCCACAGCCCGCCAUGGCGUCUCAGCUCCAGAACCGACUCCGCUCCGCACUGGCCUUGGUCACAGGUGCGGGGAGCGGCAUCGGCCGAGCGGUCAGUGUACGCCUGGCCGGAG\
) } def
/len { sequence length } bind def

/coor [
[-10.05104256 282.53863525]
[-18.40299988 294.99838257]
[-26.75495720 307.45809937]
[-27.51705742 325.81219482]
[-43.47622299 333.01235962]
[-51.53156662 345.66589355]
[-59.58691025 358.31939697]
[-67.64225006 370.97290039]
[-62.76282501 385.82974243]
[-68.62271118 400.32788086]
[-82.45504761 407.62173462]
[-97.72863007 404.26739502]
[-107.23174286 391.84866333]
[-106.47730255 376.22927856]
[-95.82154083 364.78427124]
[-80.29576874 362.91757202]
[-72.24042511 350.26406860]
[-64.18508148 337.61053467]
[-56.12973785 324.95703125]
[-58.43968964 313.02224731]
[-51.75141525 302.39309692]
[-39.21468353 299.10614014]
[-30.86272812 286.64642334]
[-22.51077080 274.18670654]
[-26.48685074 257.89004517]
[-17.30462646 243.45126343]
[-0.20009518 240.00802612]
[7.85524797 227.35452271]
[8.16314793 212.46308899]
[22.10109329 204.97682190]
[30.15643692 192.32330322]
[38.21178055 179.66979980]
[46.26712418 167.01628113]
[47.21445847 159.61387634]
[54.66513443 154.16217041]
[63.01708984 141.70243835]
[71.36904907 129.24270630]
[79.72100067 116.78298187]
[88.07295990 104.32325745]
[95.97830200 91.57549286]
[103.42710114 78.55567932]
[97.72095490 60.56905746]
[106.73262024 44.35134506]
[124.40574646 39.85343170]
[131.23138428 26.49638557]
[138.05702209 13.13934040]
[144.88265991 -0.21770567]
[139.08807373 -9.37313366]
[137.67927551 -20.03424644]
[140.84854126 -30.22532654]
[147.94610596 -38.08652496]
[157.61195374 -42.21326065]
[168.03608704 -41.90689850]
[175.79032898 -54.74714279]
[183.54455566 -67.58738708]
[191.29879761 -80.42762756]
[187.72813416 -95.58969116]
[195.77494812 -108.50106049]
[210.25166321 -111.81169891]
[218.00590515 -124.65193939]
[225.76013184 -137.49218750]
[233.51437378 -150.33242798]
[241.26860046 -163.17266846]
[249.02284241 -176.01290894]
[256.77706909 -188.85314941]
[264.22589111 -201.87295532]
[271.36508179 -215.06506348]
[278.50430298 -228.25717163]
[285.64352417 -241.44927979]
[292.78271484 -254.64138794]
[299.45013428 -268.07812500]
[305.63739014 -281.74258423]
[311.82461548 -295.40707397]
[309.67562866 -311.66479492]
[322.84378052 -321.43881226]
[337.78283691 -314.67443848]
[339.12475586 -298.33029175]
[325.48910522 -289.21981812]
[319.30184937 -275.55535889]
[313.11462402 -261.89086914]
[314.07238770 -258.40353394]
[313.32751465 -254.27049255]
[310.59204102 -250.32604980]
[305.97482300 -247.50218201]
[298.83560181 -234.31007385]
[291.69641113 -221.11796570]
[284.55718994 -207.92585754]
[277.41796875 -194.73374939]
[277.93103027 -189.89782715]
[275.34436035 -184.70239258]
[269.61730957 -181.09892273]
[261.86309814 -168.25868225]
[254.10884094 -155.41842651]
[246.35461426 -142.57818604]
[238.60037231 -129.73794556]
[230.84614563 -116.89770508]
[223.09190369 -104.05746460]
[226.90118408 -89.70389557]
[219.22021484 -76.57160187]
[204.13903809 -72.67339325]
[196.38479614 -59.83314896]
[188.63056946 -46.99290848]
[180.87632751 -34.15266418]
[186.99763489 -15.74463463]
[177.59580994 1.56750214]
[158.23970032 6.60793209]
[151.41406250 19.96497726]
[144.58842468 33.32202530]
[137.76278687 46.67906952]
[143.58787537 56.61798477]
[143.85083008 68.25563812]
[138.36830139 78.66070557]
[128.41889954 85.15544128]
[116.44690704 86.00448608]
[108.99810791 99.02429199]
[109.51139832 102.95461273]
[108.23958588 107.08776093]
[105.13556671 110.59886169]
[100.53269196 112.67521667]
[92.18073273 125.13494110]
[83.82877350 137.59466553]
[75.47681427 150.05439758]
[67.12486267 162.51412964]
[58.92063904 175.07162476]
[50.86529541 187.72514343]
[42.80995178 200.37864685]
[34.75460815 213.03216553]
[33.87053680 228.82865906]
[20.50876236 235.40986633]
[12.45341969 248.06336975]
[16.87538147 260.84619141]
[13.15222836 273.64660645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[5 19]
[6 18]
[7 17]
[8 16]
[27 130]
[28 129]
[30 127]
[31 126]
[32 125]
[33 124]
[35 123]
[36 122]
[37 121]
[38 120]
[39 119]
[40 115]
[41 114]
[44 109]
[45 108]
[46 107]
[47 106]
[53 103]
[54 102]
[55 101]
[56 100]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
