%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCUCCAGGUCUCCCGGCAACGGCUGCGGCCUCGCCCACGUUAUGGCGCCCGAGGAGAACGCGGGGACCGAACUCUUGCUGCAGGGUUUUGAGCGCCGCUUCCUGGCGGUGCGCACACUGCGCUCCUUCCCCUGGCAGAGCU\
) } def
/len { sequence length } bind def

/coor [
[94.83724213 266.13369751]
[94.51449585 251.13716125]
[94.19175720 236.14064026]
[93.86901855 221.14410400]
[83.38008118 213.58795166]
[79.11609650 201.17778015]
[82.85527802 188.39619446]
[93.44107819 179.99833679]
[93.44107819 164.99833679]
[93.44107819 149.99833679]
[93.44107819 134.99833679]
[93.44107819 119.99833679]
[82.94920349 109.27823639]
[67.95268250 108.95549011]
[52.95615005 108.63275146]
[37.95962524 108.31001282]
[22.96309662 107.98726654]
[7.96396494 107.82588959]
[-7.03603506 107.82588959]
[-22.03603554 107.82588959]
[-24.31576729 117.16829681]
[-30.66352463 125.64168549]
[-40.64923859 131.47393799]
[-53.08433533 133.13459778]
[-66.15844727 129.65039062]
[-80.48294830 134.10108948]
[-94.80744934 138.55177307]
[-105.53358459 150.95669556]
[-121.58650970 147.60472107]
[-126.45234680 131.94407654]
[-115.12554169 120.08509827]
[-99.25814056 124.22727203]
[-84.93363953 119.77658081]
[-70.60913849 115.32588959]
[-70.60913849 107.82588959]
[-70.60913849 85.32588959]
[-84.93363953 80.87519836]
[-99.25814056 76.42450714]
[-113.58264160 71.97380829]
[-125.93640137 81.36339569]
[-141.45054626 81.66471100]
[-154.15957642 72.76190186]
[-159.17662048 58.07826996]
[-154.57250977 43.25997925]
[-142.11761475 34.00496292]
[-126.60111237 33.87196350]
[-113.98940277 42.91212082]
[-109.13195038 57.64931107]
[-94.80744934 62.10000229]
[-80.48294830 66.55069733]
[-66.15844727 71.00138855]
[-35.25906372 71.65858459]
[-22.03603554 92.82588959]
[-7.03603506 92.82588959]
[7.96396494 92.82588959]
[14.70159149 89.65764618]
[23.28583908 92.99073792]
[38.28236771 93.31348419]
[53.27889252 93.63622284]
[68.27542114 93.95896912]
[83.27194977 94.28170776]
[84.24156952 88.61953735]
[87.18370056 83.11521912]
[92.05906677 78.45936584]
[92.05906677 63.45936966]
[92.05906677 48.45936966]
[92.05906677 33.45936966]
[92.05906677 18.45936966]
[92.05906677 3.45936942]
[79.96448517 -6.45300102]
[77.12186432 -21.83004570]
[84.87340546 -35.41119766]
[99.55906677 -40.78384781]
[114.24472809 -35.41119766]
[121.99626923 -21.83004570]
[119.15365601 -6.45300102]
[107.05906677 3.45936942]
[107.05906677 18.45936966]
[107.05906677 33.45936966]
[107.05906677 48.45936966]
[107.05906677 63.45936966]
[107.05906677 78.45936584]
[118.84381866 87.73944092]
[133.42559814 84.22206879]
[148.00737000 80.70469666]
[162.58914185 77.18732452]
[177.17091370 73.66996002]
[180.33253479 63.34826279]
[187.46894836 55.35706711]
[197.21994019 51.11757660]
[207.76904297 51.34548569]
[217.18190002 55.93109512]
[223.76086426 63.97184753]
[238.53916931 61.40245056]
[250.81002808 51.41563416]
[264.67453003 56.85848236]
[279.45285034 54.28908539]
[294.23114014 51.71968842]
[309.00946045 49.15029144]
[323.78775024 46.58089447]
[338.56604004 44.01149750]
[353.34436035 41.44210052]
[368.12265015 38.87270355]
[380.35662842 27.95199585]
[395.84439087 33.34285355]
[398.65344238 49.49962234]
[385.89410400 59.80160522]
[370.69204712 53.65100479]
[355.91375732 56.22040176]
[341.13543701 58.78979874]
[326.35714722 61.35919571]
[311.57885742 63.92859268]
[296.80053711 66.49798584]
[282.02224731 69.06739044]
[267.24392700 71.63678741]
[256.03012085 81.43981934]
[241.10856628 76.18075562]
[226.33026123 78.75015259]
[216.41862488 95.44946289]
[197.15003967 99.65170288]
[180.68827820 88.25173187]
[166.10650635 91.76910400]
[151.52473450 95.28646851]
[136.94296265 98.80384064]
[122.36119080 102.32121277]
[137.19538879 100.09710693]
[150.71612549 106.59244537]
[158.25103760 119.56261444]
[157.19622803 134.52548218]
[147.91624451 146.31028748]
[133.61796570 150.84454346]
[119.24250793 146.56132507]
[109.75761414 134.94078064]
[108.44107819 119.99833679]
[108.44107819 134.99833679]
[108.44107819 149.99833679]
[108.44107819 164.99833679]
[108.44107819 179.99833679]
[121.02433014 192.10075378]
[120.99851990 209.22264099]
[108.86554718 220.82136536]
[109.18828583 235.81790161]
[109.51102448 250.81442261]
[109.83377075 265.81094360]
[112.43845367 285.01681519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 141]
[8 138]
[9 137]
[10 136]
[11 135]
[12 134]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 55]
[19 54]
[20 53]
[25 34]
[26 33]
[27 32]
[36 51]
[37 50]
[38 49]
[39 48]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[83 125]
[84 124]
[85 123]
[86 122]
[87 121]
[93 118]
[94 117]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
