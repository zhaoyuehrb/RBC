%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACCCUCAGUGCUCAGUUGCUUCAGGCAGCUGAGCUAUUCAGACCAUGGAGAAUAUCCUCUGUUUUCUGAACAGCUAUACUGAGACAGGGCUGAGCCCUGACUCACAUUGGUUGGAUAUCGACCCCAACUUCAUCUGCUUGAGUG\
) } def
/len { sequence length } bind def

/coor [
[-9.92855835 323.94302368]
[-14.92565536 338.08618164]
[-19.92275238 352.22933960]
[-24.91984940 366.37252808]
[-29.91694641 380.51568604]
[-24.32518959 395.55270386]
[-32.71833420 409.22509766]
[-48.65787506 411.04458618]
[-59.91636276 399.61541748]
[-57.85724640 383.70504761]
[-44.06010818 375.51858521]
[-39.06301117 361.37542725]
[-34.06591415 347.23226929]
[-29.06881714 333.08908081]
[-24.07172012 318.94592285]
[-30.89993477 311.12295532]
[-33.85267639 301.08322144]
[-32.32337952 290.64859009]
[-26.52532768 281.74237061]
[-17.46485329 276.03472900]
[-6.76720476 274.62969971]
[-0.88019538 260.83319092]
[5.00681400 247.03671265]
[4.73722696 239.59864807]
[11.16798019 233.01197815]
[17.34649849 219.34355164]
[23.52501678 205.67512512]
[29.70353508 192.00668335]
[35.88205338 178.33825684]
[42.06057358 164.66983032]
[48.23909378 151.00140381]
[46.43102264 136.21694946]
[59.16577911 126.82884216]
[65.34429932 113.16041565]
[62.96633911 98.35010529]
[52.81945038 87.30290222]
[42.67256165 76.25570679]
[32.52567291 65.20850372]
[17.49205399 60.27891541]
[14.58094120 45.67156601]
[4.43405294 34.62436295]
[-5.71283484 23.57716370]
[-15.85972309 12.52996159]
[-26.00661087 1.48275948]
[-36.15349960 -9.56444263]
[-51.70822525 -10.39404678]
[-61.84123993 -21.74202728]
[-60.95447922 -36.56596756]
[-71.10137177 -47.61317062]
[-81.24825287 -58.66036987]
[-91.39514160 -69.70757294]
[-101.54203033 -80.75477600]
[-111.68891907 -91.80197906]
[-127.48761749 -92.22223663]
[-138.30104065 -103.74810028]
[-137.71377563 -119.54147339]
[-126.07422638 -130.23243713]
[-110.28794098 -129.47821045]
[-99.72064209 -117.72628784]
[-100.64171600 -101.94886780]
[-90.49482727 -90.90166473]
[-80.34794617 -79.85446167]
[-70.20105743 -68.80725861]
[-60.05416870 -57.76005936]
[-49.90727997 -46.71285629]
[-35.06153870 -46.33926392]
[-24.61377907 -35.28037643]
[-25.10629654 -19.71133041]
[-14.95940876 -8.66412830]
[-4.81252098 2.38307333]
[5.33436680 13.43027496]
[15.48125458 24.47747612]
[25.62814331 35.52467728]
[39.93598938 39.66409302]
[43.57287598 55.06161499]
[53.71976471 66.10881805]
[63.86665344 77.15602112]
[74.01354218 88.20321655]
[78.50579071 78.90169525]
[86.36271667 71.38468170]
[96.85092926 66.87054443]
[108.79949188 66.27012634]
[120.72967529 70.03222656]
[132.40020752 60.60892868]
[144.07073975 51.18562698]
[155.74128723 41.76232910]
[161.61758423 27.07288742]
[176.38058472 25.09725571]
[188.05111694 15.67395687]
[199.72164917 6.25065660]
[211.39219666 -3.17264342]
[223.06272888 -12.59594345]
[234.73326111 -22.01924324]
[243.25823975 -36.67397308]
[259.70019531 -32.53898239]
[260.27841187 -15.59489822]
[244.15657043 -10.34870720]
[232.48602295 -0.92540711]
[220.81549072 8.49789333]
[209.14495850 17.92119217]
[197.47442627 27.34449196]
[185.80387878 36.76779175]
[180.76232910 50.78321457]
[165.16458130 53.43286514]
[153.49404907 62.85616302]
[141.82351685 72.27946472]
[130.15296936 81.70276642]
[130.94749451 89.16056061]
[145.86311340 87.57176971]
[147.45166016 102.48741913]
[132.53652954 104.07615662]
[133.33103943 111.53395081]
[146.72492981 118.28701019]
[160.11882019 125.04006195]
[173.51271057 131.79312134]
[186.90660095 138.54617310]
[200.30049133 145.29924011]
[213.53845215 137.37713623]
[228.95721436 137.89247131]
[241.63667297 146.68080139]
[247.53088379 160.93780518]
[244.75900269 176.11410522]
[234.20555115 187.36701965]
[219.23808289 191.10577393]
[204.63265991 186.13735962]
[195.04981995 174.04714966]
[193.54742432 158.69311523]
[180.15353394 151.94006348]
[166.75965881 145.18701172]
[153.36576843 138.43395996]
[139.97187805 131.68089294]
[126.57798767 124.92784119]
[99.85664368 132.48846436]
[79.01272583 119.33893585]
[72.83420563 133.00737000]
[74.20034790 148.76947021]
[61.90752029 157.17993164]
[55.72900009 170.84835815]
[49.55048370 184.51678467]
[43.37196350 198.18521118]
[37.19344330 211.85363770]
[31.01492500 225.52206421]
[24.83640671 239.19049072]
[18.80330276 252.92372131]
[12.91629410 266.72021484]
[7.02928495 280.51669312]
[15.53940105 298.64535522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[21 146]
[22 145]
[23 144]
[25 143]
[26 142]
[27 141]
[28 140]
[29 139]
[30 138]
[31 137]
[33 135]
[34 134]
[35 78]
[36 77]
[37 76]
[38 75]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[83 107]
[84 106]
[85 105]
[86 104]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
[112 132]
[113 131]
[114 130]
[115 129]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
