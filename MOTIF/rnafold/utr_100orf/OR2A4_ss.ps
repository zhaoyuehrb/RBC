%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAGACAAUAUAACAUCCAUCAGAGAGUUCCUCCUACUGGGAUUUCCCGUUGGCCCAAGGAUUCAGAUGCUCCUCUUUGGGCUCUUCUCCCUGUUCU\
) } def
/len { sequence length } bind def

/coor [
[44.66845322 220.99000549]
[49.36241531 206.29406738]
[61.27098465 196.48645020]
[59.40950394 181.60240173]
[57.54802322 166.71835327]
[55.68654251 151.83430481]
[53.82505798 136.95025635]
[51.96357727 122.06620789]
[46.46138763 136.02062988]
[47.42545319 150.98962402]
[43.36709595 165.43017578]
[34.74633789 177.70545959]
[22.54034996 186.42404175]
[8.13268852 190.59768677]
[-6.84352541 189.75329590]
[-20.69072723 183.98657227]
[-31.83932304 173.95120239]
[-39.02561188 160.78468323]
[-41.43502045 145.97944641]
[-38.79444122 131.21369934]
[-31.40318680 118.16114044]
[-20.09906197 108.30128479]
[-6.16339684 102.75176239]
[8.82418823 102.14160919]
[23.16496468 106.54004669]
[38.01336288 104.41283417]
[23.96282768 99.16094208]
[9.91229057 93.90904236]
[-5.22333097 99.22811127]
[-18.74181175 90.58923340]
[-20.27293015 74.61941528]
[-8.64214325 63.56932831]
[7.22840452 65.91566467]
[15.16418743 79.85850525]
[29.21472359 85.11040497]
[43.26525879 90.36229706]
[48.84923935 85.35538483]
[38.83560562 74.18726349]
[50.00389862 64.17380524]
[60.01720428 75.34156799]
[65.60118103 70.33465576]
[61.90700150 55.79666901]
[58.21281815 41.25868607]
[54.51863098 26.72069931]
[42.69264221 15.35945129]
[46.88095093 -0.49583492]
[62.77499008 -4.53459883]
[74.02433014 7.39789295]
[69.05661774 23.02651596]
[72.75080109 37.56450272]
[76.44498444 52.10248566]
[80.13916779 66.64047241]
[98.74080658 65.03643799]
[113.96765900 72.15894318]
[122.46610260 84.47142792]
[136.67317200 79.65904236]
[150.88024902 74.84665680]
[165.08732605 70.03427124]
[179.29438782 65.22188568]
[193.50146484 60.40949631]
[207.70854187 55.59711075]
[221.91561890 50.78472137]
[236.12268066 45.97233582]
[250.32975769 41.15995026]
[252.13909912 26.00445366]
[260.35220337 13.13948250]
[273.33837891 5.11938572]
[288.51922607 3.53655982]
[302.88052368 8.70527554]
[313.57086182 19.59928131]
[318.46765137 34.05556107]
[316.59866333 49.20381546]
[308.33496094 62.03634644]
[295.31729126 70.00524139]
[280.13034058 71.52827454]
[265.78952026 66.30303955]
[255.14215088 55.36702347]
[240.93507385 60.17940903]
[226.72799683 64.99179840]
[212.52091980 69.80418396]
[198.31385803 74.61656952]
[184.10678101 79.42895508]
[169.89970398 84.24134064]
[155.69262695 89.05372620]
[141.48556519 93.86611176]
[127.27848816 98.67850494]
[120.96420288 123.03740692]
[95.02888489 134.63125610]
[66.84762573 120.20472717]
[68.70910645 135.08877563]
[70.57058716 149.97282410]
[72.43206787 164.85687256]
[74.29354858 179.74092102]
[76.15502930 194.62496948]
[90.11222076 201.19767761]
[98.28089905 214.28492737]
[98.05447388 229.71063232]
[89.50520325 242.55249023]
[75.36112213 248.71273804]
[60.13555527 246.22563171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[26 36]
[27 35]
[28 34]
[41 52]
[42 51]
[43 50]
[44 49]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
