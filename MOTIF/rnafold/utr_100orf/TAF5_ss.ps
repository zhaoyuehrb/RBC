%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACGCUUGACGGCGCGAGGUGGCUCAGCCGCAAGAUGGCGGCGCUGGCGGAGGAGCAGACGGAGGUGGCGGUCAAGCUAGAGCCUGAGGGACCGCCAACGCUGCUACCUCCGCAGGCGGGGGACGGCGCAGGCG\
) } def
/len { sequence length } bind def

/coor [
[94.62401581 297.03204346]
[82.30387115 306.93099976]
[66.60186005 305.13595581]
[56.83369064 292.71185303]
[58.79465866 277.02969360]
[71.32135010 267.39340210]
[73.02504730 252.49047852]
[74.72875214 237.58755493]
[76.43245697 222.68461609]
[78.13615417 207.78169250]
[79.83985901 192.87875366]
[77.45378876 185.81518555]
[81.75572968 177.65737915]
[83.79822540 162.79708862]
[77.86602020 149.13479614]
[87.41037750 136.51672363]
[89.45288086 121.65643311]
[86.33368683 119.83620453]
[83.52168274 117.57009125]
[70.36394501 124.77244568]
[57.20620728 131.97479248]
[49.15242386 146.26005554]
[32.75359726 146.15731812]
[24.87943459 131.77227783]
[33.63019562 117.90302277]
[50.00385284 118.81706238]
[63.16159058 111.61470795]
[76.31932831 104.41235352]
[74.32444763 94.43553925]
[76.69419098 83.67440033]
[61.83390427 81.63189697]
[46.97361374 79.58940125]
[32.11332321 77.54689789]
[17.25303459 75.50440216]
[4.81312180 85.25243378]
[-10.86584187 83.26606750]
[-20.48180580 70.72379303]
[-18.32979012 55.06670380]
[-5.68654490 45.58388138]
[9.94691467 47.90131378]
[19.29553413 60.64411163]
[34.15582275 62.68661118]
[49.01611328 64.72911072]
[63.87640381 66.77160645]
[78.73669434 68.81410980]
[92.56198883 62.99507904]
[101.48890686 50.94061279]
[110.41582489 38.88614655]
[112.41075134 23.19121742]
[126.20304108 17.56786728]
[135.12995911 5.51340055]
[144.05686951 -6.54106617]
[152.98379517 -18.59553337]
[161.91070557 -30.64999962]
[170.83761597 -42.70446777]
[179.76454163 -54.75893402]
[188.55366516 -66.91423035]
[197.20387268 -79.16877747]
[205.85408020 -91.42332458]
[214.50428772 -103.67787170]
[223.15447998 -115.93241882]
[225.57861328 -124.83074188]
[232.14369202 -128.36442566]
[241.07061768 -140.41889954]
[238.94104004 -155.84947205]
[248.16592407 -167.94725037]
[262.88973999 -169.88237000]
[271.81665039 -181.93684387]
[280.74359131 -193.99130249]
[289.67050171 -206.04577637]
[298.59741211 -218.10023499]
[293.29443359 -234.11848450]
[298.50189209 -249.99378967]
[311.99218750 -259.56701660]
[328.36535645 -259.24761963]
[337.01556396 -271.50216675]
[345.66577148 -283.75671387]
[347.30291748 -299.49298096]
[360.96362305 -305.42883301]
[369.61383057 -317.68338013]
[370.56542969 -334.05490112]
[385.33883667 -341.17376709]
[398.73645020 -331.71670532]
[396.97595215 -315.41232300]
[381.86837769 -309.03317261]
[373.21817017 -296.77862549]
[372.19973755 -281.91888428]
[357.92031860 -275.10650635]
[349.27011108 -262.85195923]
[340.61990356 -250.59741211]
[346.08325195 -238.36369324]
[344.75585938 -224.92234802]
[336.87954712 -213.81651306]
[324.43664551 -208.02717590]
[310.65188599 -209.17332458]
[301.72497559 -197.11885071]
[292.79803467 -185.06439209]
[283.87112427 -173.00991821]
[274.94421387 -160.95545959]
[277.38735962 -146.30735779]
[268.50592041 -133.95524597]
[253.12507629 -131.49197388]
[244.19816589 -119.43751526]
[235.40904236 -107.28221893]
[226.75883484 -95.02767181]
[218.10862732 -82.77311707]
[209.45841980 -70.51856995]
[200.80821228 -58.26402283]
[199.50961304 -50.92229843]
[191.81900024 -45.83201599]
[182.89208984 -33.77754974]
[173.96517944 -21.72308350]
[165.03825378 -9.66861725]
[156.11134338 2.38584995]
[147.18441772 14.44031620]
[138.25750732 26.49478340]
[136.90109253 41.32749557]
[122.47029114 47.81306458]
[113.54337311 59.86753082]
[104.61645508 71.92199707]
[114.84851837 76.46077728]
[122.32788849 84.45314789]
[126.00814056 94.49907684]
[125.48581696 104.93752289]
[121.03615570 114.12043762]
[113.53926086 120.67302704]
[104.31317139 123.69893646]
[102.27066803 138.55921936]
[108.05677795 153.28442383]
[98.65851593 164.83958435]
[96.61601257 179.69987488]
[94.74279022 194.58245850]
[93.03909302 209.48538208]
[91.33538818 224.38832092]
[89.63168335 239.29125977]
[87.92797852 254.19418335]
[86.22428131 269.09710693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[11 132]
[13 131]
[14 130]
[16 128]
[17 127]
[19 28]
[20 27]
[21 26]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[46 120]
[47 119]
[48 118]
[50 116]
[51 115]
[52 114]
[53 113]
[54 112]
[55 111]
[56 110]
[57 108]
[58 107]
[59 106]
[60 105]
[61 104]
[63 103]
[64 102]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[75 90]
[76 89]
[77 88]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
