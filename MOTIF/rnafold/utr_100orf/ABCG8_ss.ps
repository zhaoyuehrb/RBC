%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGGAAACAGAGUGAAGACACUGGCCCUGGCAGGCAGCAGCUGGGUCUAAGAGAGCUGCAGCCCAGGGUCACAGACCUGUGGGCCCCAUGGCCGGGAAGGCGGCAGAGGAGAGAGGGCUGCCGAAAGGGGCCACUCCCCAGGAUACCUCGGGCCUCCAGGAUAGAUUGUUCUCCUCUGAAAGUGACA\
) } def
/len { sequence length } bind def

/coor [
[131.46467590 589.44561768]
[117.04341125 584.95074463]
[104.47340393 576.57391357]
[94.77366638 564.99407959]
[88.73050690 551.15008545]
[86.83382416 536.16412354]
[89.23735809 521.25103760]
[95.74628448 507.61978149]
[105.83293152 496.37542725]
[118.67964172 488.42941284]
[133.24497986 484.42596436]
[133.49168396 469.42797852]
[133.73840332 454.43002319]
[133.98510742 439.43203735]
[134.23182678 424.43408203]
[131.19314575 417.68292236]
[134.60795593 409.19198608]
[135.10130310 394.20010376]
[127.78679657 381.22525024]
[135.97380066 367.68701172]
[136.46716309 352.69512939]
[136.96051025 337.70324707]
[137.45387268 322.71136475]
[137.70057678 307.71340942]
[137.70057678 292.71340942]
[137.70057678 277.71340942]
[129.36643982 268.93118286]
[129.25376892 256.42346191]
[137.96907043 246.90013123]
[138.21577454 231.90216064]
[138.46249390 216.90419006]
[138.70919800 201.90621948]
[138.95591736 186.90824890]
[135.91723633 180.15708923]
[139.33204651 171.66616821]
[139.82539368 156.67428589]
[140.31875610 141.68240356]
[140.81210327 126.69051361]
[91.16347504 139.08370972]
[68.90767670 104.20617676]
[53.99332047 102.60553741]
[39.07896423 101.00489807]
[24.16461182 99.40425873]
[9.25025845 97.80361938]
[-5.66409588 96.20298004]
[-14.12940598 108.95433807]
[-27.55648613 116.30090332]
[-42.85989380 116.55449677]
[-56.52301788 109.65684509]
[-65.40616608 97.19297028]
[-67.46807098 82.02698517]
[-62.23490524 67.64391327]
[-50.90922165 57.34889603]
[-36.09357452 53.50763702]
[-21.19249535 57.00283813]
[-9.63014126 67.03132629]
[-4.06345654 81.28862762]
[10.85089684 82.88926697]
[25.76525116 84.48990631]
[40.67960358 86.09054565]
[55.59395981 87.69118500]
[70.50831604 89.29182434]
[72.61551666 84.68613434]
[75.43631744 80.47949982]
[66.26416779 68.61055756]
[57.09202194 56.74161911]
[47.91987610 44.87267685]
[38.74773026 33.00373840]
[29.47828293 21.21063232]
[20.11216354 9.49415588]
[10.74604511 -2.22232080]
[1.37992620 -13.93879700]
[-7.98619270 -25.65527344]
[-22.59905815 -34.25181198]
[-18.38372040 -50.67336273]
[-1.43700957 -51.16869736]
[3.73028374 -35.02139282]
[13.09640217 -23.30491638]
[22.46252060 -11.58843994]
[31.82863998 0.12803690]
[41.19475937 11.84451294]
[47.83837891 15.11162949]
[50.61666870 23.83159256]
[59.78881454 35.70053101]
[68.96096039 47.56947327]
[78.13311005 59.43841171]
[87.30525208 71.30735016]
[99.79367828 59.93032837]
[119.27030182 55.20415878]
[121.72640991 40.40660858]
[111.00856781 29.34161758]
[108.88606262 14.26354218]
[115.96533203 0.98393488]
[129.34654236 -5.50307751]
[131.80264282 -20.30062866]
[134.25875854 -35.09817886]
[136.71485901 -49.89573288]
[127.31753540 -62.60264587]
[129.74035645 -78.22012329]
[142.54591370 -87.48258209]
[158.13690186 -84.89477539]
[167.26345825 -71.99200439]
[164.51095581 -56.42925262]
[151.51242065 -47.43962097]
[149.05630493 -32.64207077]
[146.60020447 -17.84451866]
[144.14408875 -3.04696774]
[154.71206665 7.41514921]
[157.12159729 22.26971626]
[150.24176025 35.85357666]
[136.52395630 42.86272049]
[134.06785583 57.66027069]
[140.22129822 61.94804764]
[153.80139160 55.57770538]
[152.52821350 70.52360535]
[158.68165588 74.81137848]
[171.71296692 67.38271332]
[184.74426270 59.95404816]
[197.71403503 52.41846466]
[210.62139893 44.77647400]
[223.52876282 37.13448334]
[236.43612671 29.49249268]
[242.23866272 22.41526031]
[249.61921692 21.83296394]
[262.65054321 14.40429878]
[270.45623779 -0.01800977]
[286.85440063 -0.19868599]
[294.97598267 14.04813480]
[286.46618652 28.06654358]
[270.07919312 27.43560410]
[257.04788208 34.86426926]
[244.07810974 42.39985275]
[231.17076111 50.04184341]
[218.26339722 57.68383408]
[205.35603333 65.32582855]
[201.19497681 71.44934082]
[192.17292786 72.98535156]
[179.14163208 80.41401672]
[166.11032104 87.84268188]
[169.05180359 102.55144501]
[183.93780518 104.39717102]
[198.58517456 98.41675568]
[210.26367188 107.66133118]
[225.14967346 109.50705719]
[240.03569031 111.35278320]
[256.49844360 107.30136871]
[264.94888306 121.99921417]
[253.16473389 134.18815613]
[238.18995667 126.23879242]
[223.30395508 124.39306641]
[208.41793823 122.54734039]
[194.83532715 128.65977478]
[182.09208679 119.28318024]
[167.20606995 117.43746185]
[155.80398560 127.18386841]
[155.31063843 142.17575073]
[154.81727600 157.16763306]
[154.32392883 172.15951538]
[153.95388794 187.15495300]
[153.70716858 202.15292358]
[153.46046448 217.15089417]
[153.21374512 232.14886475]
[152.96704102 247.14683533]
[162.28404236 263.02087402]
[152.70057678 277.71340942]
[152.70057678 292.71340942]
[152.70057678 307.71340942]
[155.68257141 313.64498901]
[155.27049255 319.33456421]
[152.44575500 323.20471191]
[151.95239258 338.19662476]
[151.45904541 353.18850708]
[150.96568298 368.18038940]
[158.24490356 382.22756958]
[150.09318542 394.69348145]
[149.59983826 409.68536377]
[149.22979736 424.68078613]
[148.98307800 439.67877197]
[148.73637390 454.67672729]
[148.48965454 469.67471313]
[148.24295044 484.67266846]
[162.66873169 489.15301514]
[175.24714661 497.51724243]
[184.95851135 509.08731079]
[191.01556396 522.92523193]
[192.92730713 537.90930176]
[190.53875732 552.82476807]
[184.04353333 566.46252441]
[173.96818542 577.71704102]
[161.12945557 585.67596436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 181]
[12 180]
[13 179]
[14 178]
[15 177]
[17 176]
[18 175]
[20 173]
[21 172]
[22 171]
[23 170]
[24 167]
[25 166]
[26 165]
[29 163]
[30 162]
[31 161]
[32 160]
[33 159]
[35 158]
[36 157]
[37 156]
[38 155]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
[89 112]
[90 111]
[94 107]
[95 106]
[96 105]
[97 104]
[116 139]
[117 138]
[118 137]
[119 135]
[120 134]
[121 133]
[122 132]
[124 131]
[125 130]
[140 154]
[141 153]
[143 151]
[144 150]
[145 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
