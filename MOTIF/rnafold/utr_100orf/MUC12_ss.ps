%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGGUGAUCUGGAUUCUGACGCUGGCUCUCCGGCUCUGCGCGUCCGUUACUACAGUGACACCAGGCUCAACAGUAAACACCAGUAUUGGAGGUAAUA\
) } def
/len { sequence length } bind def

/coor [
[226.65496826 284.13467407]
[229.47224426 276.67034912]
[220.35626221 264.75820923]
[211.24026489 252.84608459]
[202.12428284 240.93395996]
[193.00828552 229.02183533]
[179.12899780 223.61679077]
[176.88668823 207.95529175]
[167.77070618 196.04316711]
[158.65470886 184.13104248]
[149.35456848 172.36212158]
[139.87251282 160.73927307]
[130.39047241 149.11640930]
[120.90842438 137.49356079]
[111.42638397 125.87069702]
[101.09707642 128.26042175]
[90.61360168 126.67865753]
[81.44921875 121.34768677]
[74.89180756 113.01667786]
[71.86289978 102.85641479]
[72.78816223 92.29473114]
[59.95608521 84.52698517]
[47.12401199 76.75923920]
[34.29193878 68.99149323]
[21.45986176 61.22375107]
[0.18254901 62.37164688]
[-9.55706596 44.28976440]
[-23.05710602 37.75149918]
[-36.55714417 31.21323204]
[-50.05718613 24.67496490]
[-66.36502075 26.40315247]
[-75.79550934 12.98682308]
[-68.64737701 -1.77245355]
[-52.27400589 -2.69159818]
[-43.51891708 11.17492580]
[-30.01887894 17.71319199]
[-16.51883888 24.25145912]
[-3.01879930 30.78972435]
[5.06275702 26.41999817]
[14.38922405 26.36329269]
[22.77014923 30.76389313]
[28.17566109 38.70388794]
[29.22760582 48.39167786]
[42.05968094 56.15942001]
[54.89175797 63.92716599]
[67.72383118 71.69490814]
[80.55590820 79.46265411]
[90.09782410 73.50845337]
[101.20581818 71.74400330]
[105.79667664 57.46380615]
[110.38753510 43.18360901]
[114.97839355 28.90341377]
[119.56925201 14.62321663]
[115.58277130 -1.28401506]
[127.55219269 -12.49405766]
[143.16439819 -7.47497940]
[146.35888672 8.61002159]
[133.84944153 19.21407509]
[129.25859070 33.49427414]
[124.66773224 47.77446747]
[120.07687378 62.05466461]
[115.48601532 76.33486176]
[127.79061127 94.75238800]
[123.04924011 116.38865662]
[132.53128052 128.01150513]
[142.01333618 139.63436890]
[151.49537659 151.25721741]
[160.97741699 162.88008118]
[168.97358704 167.66065979]
[170.56683350 175.01504517]
[179.68283081 186.92716980]
[188.79881287 198.83929443]
[203.33013916 205.09637451]
[204.92041016 219.90585327]
[214.03640747 231.81797791]
[223.15238953 243.73010254]
[232.26838684 255.64222717]
[241.38436890 267.55435181]
[263.58181763 274.08950806]
[266.97659302 296.26089478]
[277.82772827 306.61718750]
[295.75219727 310.45910645]
[300.20303345 327.35562134]
[311.37100220 337.36944580]
[322.53897095 347.38327026]
[338.68945312 350.22824097]
[344.04586792 365.72793579]
[333.09799194 377.93759155]
[317.10806274 374.29696655]
[312.52514648 358.55120850]
[301.35717773 348.53738403]
[290.18920898 338.52355957]
[277.98602295 338.84011841]
[268.58572388 330.43426514]
[267.47143555 317.46832275]
[256.62030029 307.11203003]
[249.34397888 309.17590332]
[241.74348450 308.47741699]
[234.84121704 305.06063843]
[229.58354187 299.33850098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[8 72]
[9 71]
[10 70]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[27 38]
[28 37]
[29 36]
[30 35]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[80 96]
[81 95]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
