%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCUCCAGAGAGGUUUAAACACUGGCCUUGGCGGCUGAGGGAGGAGGGUGAAGAUGAGGCAGGGGCUGCUGGUGCUGGCGCUGGUGCUGGUGCUGGUGCUAGUGCUGGCUGCAGGGUCCCAGGUGCAGGAGUGGUACCCCAGGGAGUCCCACG\
) } def
/len { sequence length } bind def

/coor [
[39.33098602 188.89710999]
[32.01852417 189.12072754]
[25.15706825 186.78704834]
[13.78516197 196.56864929]
[2.41325521 206.35025024]
[-8.95865059 216.13185120]
[-20.33055687 225.91345215]
[-31.60403061 235.80833435]
[-42.77794266 245.81552124]
[-53.95185471 255.82270813]
[-55.60574722 260.89187622]
[-58.74773407 264.43359375]
[-62.53116226 266.13467407]
[-66.10945129 266.07028198]
[-77.86360931 275.38906860]
[-89.61776733 284.70785522]
[-101.37192535 294.02664185]
[-113.12609100 303.34542847]
[-112.33970642 318.84255981]
[-120.84069061 331.82382202]
[-135.36022949 337.29763794]
[-150.31526184 333.15921021]
[-159.95527649 320.99987793]
[-160.57350159 305.49511719]
[-151.93220520 292.60684204]
[-137.35414124 287.29086304]
[-122.44487000 291.59127808]
[-110.69071198 282.27249146]
[-98.93655396 272.95370483]
[-87.18239594 263.63491821]
[-75.42823792 254.31613159]
[-63.95903778 244.64878845]
[-52.78512573 234.64161682]
[-41.61121368 224.63442993]
[-38.71037674 217.79096985]
[-30.11215973 214.54154968]
[-18.74025345 204.75994873]
[-7.36834717 194.97834778]
[4.00355911 185.19674683]
[15.37546539 175.41513062]
[20.29409027 153.51194763]
[43.03403473 149.00727844]
[53.37204742 138.13871765]
[63.71005630 127.27016449]
[74.04807281 116.40160370]
[69.39382935 97.59634399]
[76.92665100 79.74819183]
[93.64704132 69.96410370]
[112.89711761 72.13999939]
[122.33303070 60.47966003]
[131.76895142 48.81932449]
[141.20486450 37.15898514]
[150.64077759 25.49864960]
[142.44265747 12.80029774]
[138.57608032 -1.79052413]
[139.40756226 -16.84167099]
[144.84310913 -30.87982941]
[154.33866882 -42.53474426]
[166.95454407 -50.67295837]
[181.44841003 -54.50805283]
[196.39761353 -53.67660141]
[210.33883667 -48.27260208]
[219.77476501 -59.93293762]
[229.21067810 -71.59327698]
[238.29240417 -83.53153992]
[247.01177979 -95.73697662]
[255.73114014 -107.94241333]
[264.45050049 -120.14784241]
[273.16986084 -132.35328674]
[281.88925171 -144.55871582]
[284.35229492 -153.41429138]
[290.90719604 -156.91877747]
[299.86901855 -168.94729614]
[308.83087158 -180.97583008]
[306.74606323 -196.41252136]
[316.00598145 -208.48348999]
[330.73535156 -210.37591553]
[339.69717407 -222.40443420]
[348.65902710 -234.43296814]
[357.62084961 -246.46148682]
[366.58270264 -258.49002075]
[375.54452515 -270.51855469]
[384.50637817 -282.54708862]
[393.46820068 -294.57559204]
[402.43005371 -306.60412598]
[411.39187622 -318.63265991]
[420.35372925 -330.66119385]
[429.31555176 -342.68972778]
[438.27740479 -354.71823120]
[447.23922729 -366.74676514]
[456.20104980 -378.77529907]
[453.66860962 -394.37536621]
[462.97644043 -407.14797974]
[478.60241699 -409.51538086]
[491.27590942 -400.07299805]
[493.47796631 -384.42288208]
[483.90213013 -371.84991455]
[468.22958374 -369.81347656]
[459.26776123 -357.78494263]
[450.30590820 -345.75640869]
[441.34408569 -333.72787476]
[432.38223267 -321.69934082]
[423.42041016 -309.67083740]
[414.45855713 -297.64230347]
[405.49673462 -285.61376953]
[396.53491211 -273.58523560]
[387.57305908 -261.55670166]
[378.61123657 -249.52818298]
[369.64938354 -237.49966431]
[360.68756104 -225.47113037]
[351.72570801 -213.44259644]
[342.76388550 -201.41407776]
[345.16452026 -186.75895691]
[336.24731445 -174.43264771]
[320.85940552 -172.01399231]
[311.89755249 -159.98547363]
[302.93572998 -147.95693970]
[294.09466553 -135.83935547]
[285.37530518 -123.63391113]
[276.65594482 -111.42848206]
[267.93658447 -99.22304535]
[259.21722412 -87.01760864]
[250.49784851 -74.81217194]
[250.74108887 -71.24157715]
[249.23130798 -67.37782288]
[245.85113525 -64.06266785]
[240.87101746 -62.15735626]
[231.43508911 -50.49702072]
[221.99917603 -38.83668518]
[230.19197083 -26.32912445]
[234.12300110 -11.88208008]
[233.39515686 3.09291101]
[228.06712341 17.12868881]
[218.64895630 28.84622002]
[206.05316162 37.09008789]
[191.50643921 41.04241180]
[176.43005371 40.30398941]
[162.30111694 34.93456650]
[152.86520386 46.59490204]
[143.42929077 58.25524139]
[133.99336243 69.91558075]
[124.55744934 81.57591248]
[129.30506897 90.84966278]
[130.67784119 101.17719269]
[128.51766968 111.36914825]
[123.07334900 120.25180817]
[114.97184753 126.80222321]
[105.14614868 130.26602173]
[94.72780609 130.24432373]
[84.91662598 126.73961639]
[74.57861328 137.60816956]
[64.24060059 148.47673035]
[53.90258789 159.34529114]
[55.81038284 166.76184082]
[55.00274277 174.30831909]
[51.63000488 181.03085327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 34]
[9 33]
[10 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[42 153]
[43 152]
[44 151]
[45 150]
[49 142]
[50 141]
[51 140]
[52 139]
[53 138]
[62 129]
[63 128]
[64 127]
[65 123]
[66 122]
[67 121]
[68 120]
[69 119]
[70 118]
[72 117]
[73 116]
[74 115]
[77 112]
[78 111]
[79 110]
[80 109]
[81 108]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
