%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAACCGGCGUGGAGGCGUGGCCACAGCCGCCCAGAAAUUCUACCCAAGCUCCCUCAGCACCAUGUACCGAGCACUUCGGCUCCUCGCGCGCUCGCGUCCCCUCGUGCGGGCUCCAGCCGCAGCCUUAGCUUCGGCUCCCGGCUUGGGUGGCGCGGCCGUGC\
) } def
/len { sequence length } bind def

/coor [
[134.91293335 134.15698242]
[124.86368561 142.04057312]
[113.11415100 147.04925537]
[100.46781158 148.84049988]
[87.78948212 147.29182434]
[75.94615936 142.50912476]
[65.74773407 134.81947327]
[57.89163589 124.74871826]
[52.91508484 112.98553467]
[38.01405334 114.70578766]
[23.11302376 116.42604065]
[8.21199226 118.14629364]
[-6.68903923 119.86653900]
[-21.59007072 121.58679199]
[-31.90246964 141.84088135]
[-60.22048569 144.68743896]
[-72.48942566 153.31723022]
[-77.73951721 160.85040283]
[-85.07704926 161.99214172]
[-97.50904846 170.38533020]
[-109.94104004 178.77851868]
[-122.37303162 187.17170715]
[-134.80502319 195.56489563]
[-141.49732971 210.53637695]
[-157.83482361 211.95703125]
[-167.01089478 198.36543274]
[-159.58598328 183.74343872]
[-143.19821167 183.13290405]
[-130.76622009 174.73971558]
[-118.33422089 166.34652710]
[-105.90222931 157.95333862]
[-93.47023773 149.56015015]
[-81.11920929 141.04827881]
[-68.85026550 132.41850281]
[-69.13753510 124.92400360]
[-84.04188538 126.61531067]
[-98.94622803 128.30661011]
[-113.85057068 129.99790955]
[-128.75491333 131.68920898]
[-141.83000183 139.04055786]
[-156.13464355 134.52645874]
[-162.62193298 121.00184631]
[-157.18899536 107.02031708]
[-143.27188110 101.42443848]
[-129.67239380 107.75332642]
[-114.68231964 108.29875183]
[-99.69223785 108.84416962]
[-84.70215607 109.38959503]
[-69.71207428 109.93501282]
[-69.99935150 102.44052124]
[-82.89289093 94.77523804]
[-95.78643799 87.10995483]
[-111.62640381 89.65454102]
[-123.39444733 78.75074768]
[-122.06312561 62.76303101]
[-108.65371704 53.95579910]
[-93.45277405 59.08520508]
[-88.12115479 74.21641541]
[-75.22761536 81.88169098]
[-62.33406830 89.54697418]
[-35.90651703 89.68752289]
[-23.31032181 106.68576050]
[-8.40929031 104.96550751]
[6.49174070 103.24526215]
[21.39277267 101.52500916]
[36.29380417 99.80475616]
[51.19483566 98.08450317]
[53.96106339 83.68958282]
[60.87390137 70.76369476]
[71.31072235 60.47104263]
[84.33150482 53.73865891]
[81.75823212 38.96103287]
[79.18495941 24.18340683]
[76.61167908 9.40577984]
[63.54232025 0.51942050]
[60.66660690 -15.02103615]
[69.69064331 -27.99571419]
[85.26063538 -30.70696640]
[98.13918304 -21.54625511]
[100.68566895 -5.94846821]
[91.38930511 6.83250427]
[93.96258545 21.61013031]
[96.53585815 36.38775635]
[99.10913086 51.16538620]
[117.40804291 54.36478043]
[133.18882751 64.16545105]
[144.16874695 79.14969635]
[148.75952148 97.15000153]
[163.69076538 98.58451080]
[178.62202454 100.01901245]
[193.55326843 101.45352173]
[208.48451233 102.88803101]
[222.96138000 96.50595856]
[234.89036560 105.42495728]
[249.82162476 106.85946655]
[264.75286865 108.29396820]
[279.68411255 109.72847748]
[294.61535645 111.16298676]
[309.54660034 112.59749603]
[324.47787476 114.03200531]
[339.42218018 115.32344055]
[354.37814331 116.47167969]
[369.33413696 117.61991882]
[381.26855469 107.60955811]
[396.41970825 108.98709106]
[405.88949585 120.42643738]
[420.84548950 121.57467651]
[429.68881226 119.10323334]
[436.07604980 122.89084625]
[451.00732422 124.32535553]
[465.93856812 125.75986481]
[480.86981201 127.19437408]
[484.84521484 125.19804382]
[488.84399414 124.65522003]
[492.39791870 125.38977814]
[495.14678955 127.08933258]
[496.87393188 129.35336304]
[511.65155029 131.92663574]
[526.42919922 134.49990845]
[541.20678711 137.07318115]
[555.98443604 139.64645386]
[570.90734863 134.39129639]
[582.11859131 144.19728088]
[596.89624023 146.77055359]
[611.67388916 149.34382629]
[626.87750244 143.19721985]
[639.63415527 153.50254822]
[636.82086182 169.65858459]
[621.33172607 175.04537964]
[609.10058594 164.12145996]
[594.32293701 161.54818726]
[579.54534912 158.97491455]
[565.67938232 164.41412354]
[553.41113281 154.42408752]
[538.63354492 151.85081482]
[523.85589600 149.27752686]
[509.07827759 146.70425415]
[494.30065918 144.13098145]
[479.43530273 142.12562561]
[464.50405884 140.69111633]
[449.57281494 139.25660706]
[434.64157104 137.82209778]
[419.69726562 136.53065491]
[404.74127197 135.38241577]
[393.63623047 145.24214172]
[378.45239258 144.29072571]
[368.18591309 132.57589722]
[353.22991943 131.42765808]
[338.27392578 130.27941895]
[331.33160400 132.91514587]
[323.04336548 128.96325684]
[308.11212158 127.52874756]
[293.18084717 126.09423828]
[278.24960327 124.65972900]
[263.31835938 123.22521973]
[248.38711548 121.79071045]
[233.45585632 120.35620117]
[220.04698181 126.84088135]
[207.05000305 117.81928253]
[192.11875916 116.38477325]
[177.18751526 114.95026398]
[162.25625610 113.51575470]
[147.32501221 112.08124542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[16 34]
[17 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[50 60]
[51 59]
[52 58]
[71 84]
[72 83]
[73 82]
[74 81]
[88 163]
[89 162]
[90 161]
[91 160]
[92 159]
[94 157]
[95 156]
[96 155]
[97 154]
[98 153]
[99 152]
[100 151]
[101 149]
[102 148]
[103 147]
[106 144]
[107 143]
[109 142]
[110 141]
[111 140]
[112 139]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
