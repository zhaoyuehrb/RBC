%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGAAGUGAGCGCGGCGCUAGGAAAGAUGGCGGCAGCGGCGGCGGUGGGCAACGCGGUGCCCUGCGGGGCCCGGCCUUGCGGGGUCCGGCCUGACGGGCAGCCCAAGCCCGGGCCGCAGCCGCGCG\
) } def
/len { sequence length } bind def

/coor [
[97.92893219 256.06591797]
[92.75331879 270.38839722]
[82.19501495 281.36300659]
[68.08330536 287.08834839]
[52.86312866 286.57244873]
[39.17147446 279.90472412]
[29.38050461 268.24038696]
[25.18656540 253.60035706]
[27.31628036 238.52108765]
[35.40066147 225.61517334]
[48.03904724 217.11863708]
[63.04175186 214.50355530]
[66.65876770 199.94618225]
[70.27577972 185.38879395]
[73.89279175 170.83142090]
[77.50980377 156.27404785]
[81.12681580 141.71667480]
[84.74382782 127.15929413]
[73.81930542 116.88043976]
[59.50897980 121.37651062]
[45.19865799 125.87257385]
[30.88833427 130.36863708]
[25.05692291 144.87825012]
[11.23892975 152.19924927]
[-4.04121065 148.87490845]
[-13.56868458 136.47485352]
[-12.84490871 120.85402679]
[-2.21162915 109.38809967]
[13.31044483 107.49094391]
[26.39226532 116.05831909]
[40.70259094 111.56225586]
[55.01291275 107.06618500]
[69.32323456 102.57011414]
[72.24839020 90.89829254]
[79.18225098 81.83631134]
[88.60186005 76.57634735]
[98.71888733 75.56208038]
[107.80975342 78.48000336]
[117.26374054 66.83432007]
[126.71773529 55.18863297]
[136.17173767 43.54294586]
[145.62571716 31.89726067]
[154.64808655 19.91406441]
[163.22677612 7.60934830]
[171.80546570 -4.69536781]
[170.31849670 -17.57550240]
[177.80187988 -27.66706276]
[189.76744080 -29.83992386]
[198.64321899 -41.93209076]
[207.51901245 -54.02425766]
[216.39479065 -66.11642456]
[225.27056885 -78.20859528]
[219.05471802 -90.07369995]
[219.41389465 -104.07044220]
[226.84367371 -116.64813995]
[239.97448730 -124.33484650]
[255.79299927 -124.68664551]
[262.15985107 -138.26837158]
[268.52670288 -151.85009766]
[269.35604858 -161.05322266]
[275.21752930 -165.68212891]
[281.91320801 -179.10478210]
[288.60891724 -192.52743530]
[295.30459595 -205.95008850]
[302.00027466 -219.37275696]
[308.69598389 -232.79541016]
[315.39166260 -246.21806335]
[322.08737183 -259.64071655]
[328.78305054 -273.06338501]
[335.47872925 -286.48602295]
[342.17443848 -299.90869141]
[348.87011719 -313.33135986]
[350.52984619 -330.20385742]
[367.20245361 -333.27975464]
[374.77355957 -318.11026001]
[362.29278564 -306.63565063]
[355.59707642 -293.21301270]
[348.90139771 -279.79034424]
[342.20571899 -266.36767578]
[335.51000977 -252.94503784]
[328.81433105 -239.52236938]
[322.11862183 -226.09971619]
[315.42294312 -212.67706299]
[308.72726440 -199.25440979]
[302.03155518 -185.83174133]
[295.33587646 -172.40908813]
[288.64016724 -158.98643494]
[282.10842896 -145.48324585]
[275.74157715 -131.90151978]
[269.37472534 -118.31979370]
[277.65124512 -105.80982971]
[292.64123535 -106.35765839]
[307.63122559 -106.90548706]
[322.62121582 -107.45331573]
[338.22894287 -114.07410431]
[348.91165161 -100.90913391]
[339.21844482 -86.99949646]
[323.16903687 -92.46332550]
[308.17904663 -91.91549683]
[293.18905640 -91.36766815]
[278.19906616 -90.81983185]
[261.76629639 -69.31638336]
[237.36273193 -69.33280945]
[228.48695374 -57.24064255]
[219.61117554 -45.14847565]
[210.73539734 -33.05630875]
[201.85960388 -20.96414185]
[200.93400574 -3.48386121]
[184.11018372 3.88332462]
[175.53149414 16.18803978]
[166.95280457 28.49275589]
[167.26182556 32.10369492]
[165.77024841 36.04070663]
[162.34652710 39.42422867]
[157.27140808 41.35125351]
[147.81741333 52.99694061]
[138.36341858 64.64262390]
[128.90942383 76.28831482]
[119.45543671 87.93399811]
[123.30207062 113.31663513]
[99.30120087 130.77630615]
[95.68418884 145.33367920]
[92.06717682 159.89105225]
[88.45016479 174.44844055]
[84.83315277 189.00581360]
[81.21614075 203.56318665]
[77.59912872 218.12055969]
[89.63319397 227.45336914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 127]
[13 126]
[14 125]
[15 124]
[16 123]
[17 122]
[18 121]
[19 33]
[20 32]
[21 31]
[22 30]
[38 119]
[39 118]
[40 117]
[41 116]
[42 115]
[43 111]
[44 110]
[45 109]
[48 107]
[49 106]
[50 105]
[51 104]
[52 103]
[57 90]
[58 89]
[59 88]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
