%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGGAUGACUCACUCUACUUGGGAGGUGAGUGGCAGUUCAACCACUUUUCAAAACUCACAUCUUCUCGGCCAGAUGCAGCUUUUGCUGAAAUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[193.78765869 202.75573730]
[186.00453186 191.87348938]
[185.96652222 178.29873657]
[174.19760132 168.99859619]
[162.42869568 159.69845581]
[150.65977478 150.39831543]
[138.89086914 141.09817505]
[127.12194824 131.79803467]
[115.35303497 122.49788666]
[103.58412170 113.19773865]
[89.04613495 109.50355530]
[74.26510620 112.05721283]
[59.48407745 114.61086273]
[44.70304871 117.16452026]
[29.92201805 119.71817017]
[15.14098740 122.27182007]
[0.40145877 125.05503845]
[-14.29300308 128.06713867]
[-28.98746490 131.07925415]
[-38.98718643 143.62457275]
[-55.02962875 143.48426819]
[-64.80839539 130.76596069]
[-60.82206345 115.22605896]
[-46.12859726 108.78543854]
[-31.99957085 116.38478851]
[-17.30510902 113.37268066]
[-2.61064744 110.36058044]
[3.41592503 105.85437012]
[12.58733368 107.49079132]
[27.36836433 104.93714142]
[42.14939499 102.38348389]
[56.93042374 99.82983398]
[71.71145630 97.27617645]
[86.49248505 94.72252655]
[92.17881012 80.84211731]
[83.43769836 68.65225220]
[67.92066956 68.69038391]
[55.36446381 59.57329559]
[50.59720230 44.80668259]
[55.45198822 30.06861496]
[68.06206512 21.02617836]
[83.57859039 21.15637398]
[96.03515625 30.40914154]
[100.64194489 45.22660065]
[95.62756348 59.91113663]
[104.36868286 72.10100555]
[102.54176331 57.21267319]
[107.73383331 43.13991928]
[117.47135162 31.73023796]
[130.55320740 24.39097214]
[145.36582947 22.02739716]
[160.08210754 24.93105125]
[172.88684082 32.74377823]
[182.20062256 44.50190353]
[186.87461853 58.75510788]
[186.33230591 73.74530029]
[180.64057922 87.62349701]
[170.50151062 98.67786407]
[157.16569519 105.54489136]
[142.27806091 107.37754822]
[127.67118835 103.94815063]
[112.88426971 101.42882538]
[124.65318298 110.72897339]
[136.42208862 120.02911377]
[148.19100952 129.32925415]
[159.95991516 138.62939453]
[171.72883606 147.92955017]
[183.49775696 157.22969055]
[195.26666260 166.52983093]
[212.50978088 164.13864136]
[225.93873596 174.68103027]
[227.64079285 191.33161926]
[239.69323730 200.26126099]
[255.12429810 198.13516235]
[267.22000122 207.36277771]
[269.15179443 222.08703613]
[281.20425415 231.01666260]
[293.25671387 239.94630432]
[311.51940918 241.53411865]
[318.03265381 257.74765015]
[330.35699463 266.29812622]
[342.68133545 274.84863281]
[355.00567627 283.39910889]
[371.38436890 284.21783447]
[378.62286377 298.93298340]
[369.27481079 312.40689087]
[352.95669556 310.77874756]
[346.45516968 295.72344971]
[334.13085938 287.17294312]
[321.80651855 278.62246704]
[309.48217773 270.07199097]
[297.41259766 271.90051270]
[287.04180908 264.72616577]
[284.32708740 251.99874878]
[272.27462769 243.06912231]
[260.22216797 234.13948059]
[245.57353210 236.57933044]
[233.22341919 227.69509888]
[230.76361084 212.31372070]
[218.71115112 203.38407898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 27]
[18 26]
[19 25]
[35 46]
[36 45]
[72 100]
[73 99]
[76 96]
[77 95]
[78 94]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
