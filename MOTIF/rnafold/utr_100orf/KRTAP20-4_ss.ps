%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACAACUGAAACAUCCACUUCUGAACACCAUGUCCUACUACAGCCAUCUUUCUGGUGGCCUGGGCUGCGGCUUGGCUGUGGCUGUGACUAUGGGAAGGACUGUGGCUGUGGCUGAGUAUGGCAGGUGCA\
) } def
/len { sequence length } bind def

/coor [
[27.78593063 306.95138550]
[27.69973564 322.00061035]
[24.67894363 336.74377441]
[18.83966446 350.61422729]
[10.40634537 363.07876587]
[-0.29685941 373.65835571]
[-12.85854816 381.94631958]
[-26.79588127 387.62408447]
[-41.57314682 390.47338867]
[-56.62234497 390.38476562]
[-71.36502838 387.36160278]
[-85.23451996 381.52008057]
[-97.69771576 373.08474731]
[-108.27557373 362.37982178]
[-116.56149292 349.81677246]
[-122.23699951 335.87854004]
[-125.08393097 321.10079956]
[-124.99286652 306.05163574]
[-121.96730042 291.30941772]
[-116.12352753 277.44088745]
[-107.68618011 264.97906494]
[-96.97954559 254.40293884]
[-84.41517639 246.11904907]
[-70.47600555 240.44580078]
[-55.69781876 237.60125732]
[-40.64865112 237.69476318]
[-25.90695000 240.72270203]
[-12.03934765 246.56872559]
[-3.63173413 234.14648438]
[4.77587986 221.72424316]
[13.18349361 209.30200195]
[14.33858204 201.92765808]
[21.94193268 196.68745422]
[30.64278793 184.46881104]
[39.34363937 172.25016785]
[48.04449463 160.03153992]
[49.12441635 145.17613220]
[63.43192291 138.42291260]
[72.13277435 126.20427704]
[80.83362579 113.98563385]
[89.53448486 101.76699829]
[97.49336243 89.05258179]
[104.68209839 75.88739777]
[111.87082672 62.72221756]
[119.05956268 49.55702972]
[126.24829865 36.39184570]
[133.43704224 23.22666168]
[140.62576294 10.06147671]
[147.34002686 -3.35190272]
[153.57125854 -16.99638176]
[159.80247498 -30.64086342]
[166.03370667 -44.28534317]
[172.26492310 -57.92982101]
[178.49615479 -71.57430267]
[184.72738647 -85.21878052]
[183.42208862 -100.98605347]
[195.74728394 -109.34899139]
[201.97850037 -122.99347687]
[208.20973206 -136.63795471]
[214.44094849 -150.28244019]
[205.65263367 -162.80091858]
[204.31907654 -177.93757629]
[210.69866943 -191.61848450]
[222.98735046 -200.21176147]
[237.82740784 -201.49162292]
[244.05863953 -215.13610840]
[250.28985596 -228.78059387]
[256.52108765 -242.42506409]
[262.75231934 -256.06954956]
[268.98352051 -269.71401978]
[275.21475220 -283.35852051]
[281.44598389 -297.00299072]
[287.67721558 -310.64746094]
[288.75708008 -327.56698608]
[305.31433105 -331.21310425]
[313.40145874 -316.31228638]
[301.32168579 -304.41622925]
[295.09045410 -290.77175903]
[288.85925293 -277.12728882]
[282.62802124 -263.48281860]
[276.39678955 -249.83831787]
[270.16555786 -236.19384766]
[263.93432617 -222.54936218]
[257.70312500 -208.90487671]
[251.47189331 -195.26040649]
[260.22280884 -183.20689392]
[261.77581787 -168.29232788]
[255.61422729 -154.51187134]
[243.30140686 -145.60729980]
[228.08543396 -144.05120850]
[221.85420227 -130.40672302]
[215.62298584 -116.76225281]
[209.39175415 -103.11776733]
[211.14276123 -88.32644653]
[198.37185669 -78.98755646]
[192.14064026 -65.34307861]
[185.90940857 -51.69859695]
[179.67817688 -38.05411911]
[173.44696045 -24.40963745]
[167.21572876 -10.76515770]
[160.98451233 2.87932253]
[161.93237305 6.37130928]
[161.17356873 10.50440502]
[158.42227173 14.44181824]
[153.79095459 17.25021172]
[146.60221863 30.41539574]
[139.41348267 43.58058167]
[132.22474670 56.74576569]
[125.03601837 69.91094971]
[117.84728241 83.07613373]
[110.65854645 96.24131775]
[125.61829376 95.14316559]
[135.98176575 105.98744202]
[134.20678711 120.88204956]
[121.58512115 128.98719788]
[107.30239105 124.40424347]
[101.75312042 110.46784973]
[93.05226898 122.68649292]
[84.35141754 134.90513611]
[75.65055847 147.12376404]
[73.94829559 162.85313416]
[60.26313400 168.73239136]
[51.56227875 180.95101929]
[42.86142731 193.16966248]
[34.16057205 205.38830566]
[25.60573387 217.70960999]
[17.19812012 230.13185120]
[8.79050541 242.55409241]
[0.38289112 254.97633362]
[10.96420860 265.67782593]
[19.25419807 278.23815918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 129]
[29 128]
[30 127]
[31 126]
[33 125]
[34 124]
[35 123]
[36 122]
[38 120]
[39 119]
[40 118]
[41 117]
[42 111]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
[48 105]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[54 96]
[55 95]
[57 93]
[58 92]
[59 91]
[60 90]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
