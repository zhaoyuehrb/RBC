%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUUGUUAUUUGAGUGCUCUUUCACUCUCCUCCGCCAUGCCCGACCCGGCUAAAUCUGCUCCUGCCCCCAAAAAGGGCUCCAAGAAAGCCGUAACCAAGGCCCAGAAAAAGGACGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[137.14929199 219.17547607]
[151.06901550 224.76741028]
[146.72488403 210.41023254]
[142.38075256 196.05305481]
[138.03663635 181.69587708]
[133.69250488 167.33869934]
[129.34837341 152.98152161]
[125.00423431 138.62434387]
[120.66010284 124.26716614]
[113.58699799 121.77294159]
[108.59832764 135.91908264]
[94.45227051 130.93017578]
[99.44078827 116.78448486]
[92.36768341 114.29025269]
[79.97865295 122.74672699]
[67.58961487 131.20320129]
[55.20058441 139.65966797]
[42.81155014 148.11613464]
[40.12836456 163.69097900]
[27.16997147 172.73838806]
[11.62435722 169.89068604]
[2.71445870 156.83737183]
[5.72636080 141.32272339]
[18.87315559 132.55133057]
[34.35508347 135.72709656]
[46.74411392 127.27062988]
[59.13314819 118.81416321]
[71.52217865 110.35768890]
[83.91121674 101.90122223]
[91.79921722 89.14272308]
[93.82711029 74.28043365]
[95.85501099 59.41814041]
[97.88290405 44.55585480]
[83.77774048 37.23229218]
[73.03995514 25.55151176]
[66.94738007 10.93054676]
[66.21578217 -4.86533785]
[70.91490173 -19.93577385]
[80.46218109 -32.47391510]
[93.69499969 -40.98306656]
[109.01214600 -44.45533752]
[110.70364380 -59.35966110]
[112.39514160 -74.26398468]
[97.74303436 -83.07858276]
[88.41224670 -97.34183502]
[86.21972656 -114.18894958]
[91.55439758 -130.26091003]
[103.30918121 -142.37422180]
[119.11035919 -148.15144348]
[120.12664795 -163.11697388]
[121.14292908 -178.08250427]
[122.15921021 -193.04804993]
[123.17549133 -208.01358032]
[115.49341583 -215.86296082]
[113.48810577 -226.43687439]
[117.59144592 -236.14724731]
[126.20358276 -241.83552551]
[127.89508057 -256.73986816]
[129.58657837 -271.64416504]
[118.44508362 -278.35635376]
[110.72165680 -288.76388550]
[107.54843903 -301.28125000]
[109.36776733 -314.01834106]
[115.87085724 -325.06588745]
[126.04956055 -332.78155518]
[138.35247803 -336.03414917]
[140.71572876 -350.84683228]
[143.07899475 -365.65948486]
[145.44224548 -380.47213745]
[135.06042480 -392.16622925]
[134.67596436 -407.79907227]
[144.47041321 -419.98934937]
[159.81912231 -422.98117065]
[173.47491455 -415.36190796]
[178.98992920 -400.72909546]
[173.76014709 -385.99194336]
[160.25491333 -378.10888672]
[157.89166260 -363.29623413]
[155.52839661 -348.48355103]
[153.16514587 -333.67089844]
[166.88171387 -323.38015747]
[173.57801819 -307.49792480]
[171.34715271 -290.31753540]
[160.70864868 -276.53210449]
[144.49090576 -269.95266724]
[142.79940796 -255.04835510]
[141.10791016 -240.14402771]
[150.15841675 -223.11262512]
[138.14102173 -206.99729919]
[137.12474060 -192.03175354]
[136.10845947 -177.06622314]
[135.09217834 -162.10069275]
[134.07589722 -147.13516235]
[145.93328857 -141.61470032]
[155.21336365 -132.35221863]
[160.78347778 -120.44719696]
[161.95327759 -107.32350159]
[158.56008911 -94.55899811]
[150.99119568 -83.69591522]
[140.13977051 -76.05447388]
[127.29946899 -72.57248688]
[125.60797119 -57.66816330]
[123.91647339 -42.76383972]
[136.81002808 -36.81693268]
[147.24411011 -27.15511131]
[154.18392944 -14.71840382]
[156.93563843 -0.72291166]
[155.21569824 13.45811272]
[149.17991638 26.42900276]
[139.40960693 36.90904236]
[126.85546875 43.85890961]
[112.74519348 46.58374786]
[110.71730042 61.44603729]
[108.68939972 76.30832672]
[106.66150665 91.17061615]
[125.14410400 94.80918121]
[135.01728821 119.92304230]
[139.36141968 134.28021240]
[143.70555115 148.63739014]
[148.04968262 162.99456787]
[152.39379883 177.35174561]
[156.73793030 191.70892334]
[161.08206177 206.06610107]
[165.42619324 220.42327881]
[170.73307800 234.45314026]
[176.97831726 248.09121704]
[183.22355652 261.72927856]
[196.89779663 270.78173828]
[195.62532043 287.13143921]
[180.71514893 293.95922852]
[167.50556946 284.24124146]
[169.58547974 267.97451782]
[163.34024048 254.33645630]
[157.09500122 240.69837952]
[150.36152649 254.10212708]
[136.18943787 259.01657104]
[122.60335541 252.65899658]
[117.29611969 238.62927246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[5 121]
[6 120]
[7 119]
[8 118]
[9 117]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[30 115]
[31 114]
[32 113]
[33 112]
[41 103]
[42 102]
[43 101]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[57 87]
[58 86]
[59 85]
[66 80]
[67 79]
[68 78]
[69 77]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
