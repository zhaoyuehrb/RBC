%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCACGCCCGGCGCCCCGACCGCGGAGGACUCCCCGAGCCCCGCCCGCCAUGGCCCGGAUCCCGACGGCCGCCCUGGGUUGCAUCAGCCUCCUCUGCCUGCAGCUCCCUGGCUCGCUGUCCCGCAGCCUGGGCGGGGACCCGCGACCCG\
) } def
/len { sequence length } bind def

/coor [
[120.87602997 247.88179016]
[116.29978180 233.59689331]
[111.72354126 219.31201172]
[107.14729309 205.02713013]
[102.57104492 190.74224854]
[97.99480438 176.45735168]
[86.74349976 166.69735718]
[89.90173340 151.19458008]
[85.32548523 136.90969849]
[72.68387604 128.83567810]
[57.79906845 130.69107056]
[42.91426086 132.54646301]
[28.02945137 134.40185547]
[19.84019089 138.59226990]
[12.81824398 136.13848877]
[-2.10173082 137.68586731]
[-17.02170563 139.23323059]
[-21.49520874 154.64578247]
[-31.50650787 167.13977051]
[-45.50589371 174.82829285]
[-61.34428024 176.56466675]
[-76.60309601 172.11335754]
[-88.96360779 162.18148804]
[-96.55929565 148.30661011]
[-111.44409943 150.16198730]
[-126.32891083 152.01737976]
[-141.21371460 153.87277222]
[-149.40298462 158.06320190]
[-156.42492676 155.60940552]
[-171.34489441 157.15678406]
[-179.61901855 161.17706299]
[-186.58874512 158.57867432]
[-201.53752136 159.81736755]
[-216.48628235 161.05606079]
[-231.77201843 168.38972473]
[-243.05059814 155.73153687]
[-234.00930786 141.38958740]
[-217.72497559 146.10728455]
[-202.77621460 144.86860657]
[-187.82743835 143.62991333]
[-172.89227295 142.23680115]
[-157.97229004 140.68943787]
[-143.06910706 138.98796082]
[-128.18429565 137.13256836]
[-113.29949188 135.27719116]
[-98.41468048 133.42179871]
[-95.19503784 119.72959137]
[-87.47004700 107.93936157]
[-76.15438080 99.48445892]
[-62.60069275 95.40113068]
[-48.43794632 96.20151520]
[-35.37562180 101.80949402]
[-24.99737930 111.56744385]
[-18.56907654 124.31325531]
[-3.64910126 122.76588440]
[11.27087402 121.21851349]
[26.17406082 119.51704407]
[41.05886841 117.66165161]
[55.94367981 115.80626678]
[70.82848358 113.95087433]
[68.49308777 101.00969696]
[71.50336456 88.55147552]
[79.08583832 78.63488770]
[89.73554230 72.78649139]
[101.50808716 71.76802063]
[112.37275696 75.48592377]
[122.53198242 64.45006561]
[132.69120789 53.41420364]
[142.85043335 42.37834549]
[153.00964355 31.34248734]
[163.16886902 20.30662918]
[166.74540710 2.27294350]
[183.64105225 -2.37028360]
[193.57003784 -13.61374474]
[203.49900818 -24.85720634]
[202.70220947 -40.41364670]
[212.93177795 -51.67467499]
[227.76736450 -52.33842850]
[237.69635010 -63.58189011]
[247.50860596 -74.92736053]
[257.20309448 -86.37361908]
[266.89758301 -97.81987762]
[276.59207153 -109.26613617]
[286.28656006 -120.71240234]
[295.98104858 -132.15866089]
[298.80929565 -150.32473755]
[315.49862671 -155.66221619]
[324.95446777 -167.30638123]
[334.41033936 -178.95056152]
[332.53091431 -194.64270020]
[342.36352539 -207.01586914]
[358.07464600 -208.72929382]
[370.34317017 -198.76641846]
[371.89038086 -183.03804016]
[361.79837036 -170.87553406]
[346.05450439 -169.49470520]
[336.59863281 -157.85052490]
[327.14279175 -146.20635986]
[328.07031250 -134.10575867]
[320.23303223 -124.31943512]
[307.42730713 -122.46417236]
[297.73281860 -111.01791382]
[288.03833008 -99.57164764]
[278.34384155 -88.12538910]
[268.64935303 -76.67913055]
[258.95486450 -65.23287201]
[257.01962280 -58.05069733]
[248.93980408 -53.65291214]
[239.01083374 -42.40945053]
[240.18722534 -27.60567856]
[230.27799988 -16.06176949]
[214.74246216 -14.92822933]
[204.81349182 -3.68476796]
[194.88452148 7.55869341]
[195.31117249 19.68727875]
[187.07618713 29.14137459]
[174.20472717 30.46585274]
[164.04551697 41.50171280]
[153.88629150 52.53757095]
[143.72706604 63.57342911]
[133.56784058 74.60929108]
[123.40861511 85.64514923]
[127.73859406 94.53285980]
[128.70932007 104.65927124]
[125.99940491 114.76147461]
[119.75900269 123.50976562]
[110.61470032 129.68220520]
[99.61037445 132.33345032]
[104.18661499 146.61834717]
[115.76524353 157.40008545]
[112.27968597 171.88110352]
[116.85593414 186.16600037]
[121.43218231 200.45088196]
[126.00842285 214.73576355]
[130.58467102 229.02066040]
[135.16091919 243.30554199]
[140.03140259 257.49279785]
[145.19406128 271.57638550]
[150.35671997 285.65994263]
[165.31874084 289.77307129]
[174.97929382 301.91610718]
[175.62373352 317.41976929]
[167.00422668 330.32266235]
[152.43518066 335.66326904]
[137.51866150 331.38809204]
[127.99040222 319.14096069]
[127.51419067 303.63119507]
[136.27314758 290.82260132]
[131.11048889 276.73904419]
[125.94783783 262.65545654]
[122.01232147 259.84939575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[6 131]
[8 129]
[9 128]
[10 60]
[11 59]
[12 58]
[13 57]
[15 56]
[16 55]
[17 54]
[24 46]
[25 45]
[26 44]
[27 43]
[29 42]
[30 41]
[32 40]
[33 39]
[34 38]
[66 122]
[67 121]
[68 120]
[69 119]
[70 118]
[71 117]
[73 114]
[74 113]
[75 112]
[78 109]
[79 108]
[80 106]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[87 98]
[88 97]
[89 96]
[137 150]
[138 149]
[139 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
