%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUCGGGCUGCCGCUGGCUCUUCGCACGCGGCCAUGGCCGACUCCGAGCUGCAGCUGGUUGAGCAGCGGAUCCGCAGCUUCCCCGACUUCCCCACCCCAGGCGUGGUAUUCAGGGACAUCUCGCCCGUCCUGA\
) } def
/len { sequence length } bind def

/coor [
[90.38422394 107.79042053]
[76.05550385 112.22751617]
[61.77898407 116.82980347]
[47.55657578 121.59667206]
[33.33416367 126.36354065]
[19.11175537 131.13041687]
[4.88934612 135.89729309]
[-9.33306408 140.66415405]
[-23.25662994 146.24397278]
[-36.83493042 152.61811829]
[-50.41323471 158.99226379]
[-63.76256561 165.83297729]
[-76.86689758 173.13203430]
[-89.97123718 180.43110657]
[-103.07556915 187.73017883]
[-116.17990875 195.02923584]
[-120.60471344 209.96440125]
[-133.99835205 217.18000793]
[-148.20947266 212.86959839]
[-161.31381226 220.16865540]
[-167.06950378 235.14369202]
[-182.40890503 239.84289551]
[-195.56491089 230.66145325]
[-196.44538879 214.64257812]
[-184.37489319 204.07458496]
[-168.61286926 207.06431580]
[-155.50854492 199.76525879]
[-151.69213867 185.41357422]
[-138.50645447 177.82461548]
[-123.47897339 181.92491150]
[-110.37464142 174.62583923]
[-97.27030182 167.32676697]
[-84.16596985 160.02770996]
[-71.06163025 152.72863770]
[-69.75550842 149.36209106]
[-66.70304871 146.48861694]
[-62.16770554 144.94557190]
[-56.78738022 145.41395569]
[-43.20907593 139.03981018]
[-29.63077545 132.66566467]
[-42.37212372 124.74998474]
[-44.36212158 109.88257599]
[-34.15100861 98.89471436]
[-19.17782784 99.79132843]
[-10.35091782 111.91921234]
[-14.09993458 126.44174957]
[0.12247477 121.67487335]
[14.34488487 116.90800476]
[28.56729507 112.14113617]
[42.78970337 107.37425995]
[57.01211548 102.60739136]
[62.40282822 97.45289612]
[71.61840820 97.89879608]
[85.94712830 93.46170044]
[96.05256653 82.37656403]
[99.14864349 67.69956970]
[94.42637634 52.59954071]
[104.62403870 41.74335098]
[107.72011566 27.06634903]
[110.81619263 12.38935089]
[102.45417023 -0.75273186]
[105.80311584 -15.59319115]
[118.38361359 -23.48411179]
[121.47969055 -38.16110992]
[124.57576752 -52.83811188]
[127.67184448 -67.51511383]
[122.94957733 -82.61513519]
[133.14724731 -93.47132874]
[136.24331665 -108.14833069]
[139.33940125 -122.82532501]
[133.73619080 -138.23753357]
[144.48773193 -150.62043762]
[160.53375244 -147.23558044]
[165.36747742 -131.56500244]
[154.01638794 -119.72924805]
[150.92031860 -105.05225372]
[147.82423401 -90.37525177]
[152.76795959 -76.32501984]
[142.34884644 -64.41903687]
[139.25276184 -49.74203491]
[136.15669250 -35.06503677]
[133.06060791 -20.38803482]
[141.38186646 -8.08794212]
[138.45108032 6.84072733]
[125.49319458 15.48542690]
[122.39711761 30.16242599]
[119.30104065 44.83942413]
[124.24475861 58.88965607]
[113.82563782 70.79564667]
[110.72956085 85.47264099]
[115.92030334 71.39939880]
[127.65660095 62.05812454]
[142.53565979 60.15719604]
[156.24349976 66.24776459]
[164.80572510 78.56394958]
[165.73980713 93.53483582]
[158.77494812 106.81981659]
[145.93049622 114.56708527]
[130.93054199 114.53042603]
[118.12579346 106.72225189]
[129.66580200 116.30495453]
[141.20581055 125.88765717]
[152.74581909 135.47035217]
[164.39573669 144.91914368]
[176.15400696 154.23272705]
[184.90835571 157.14599609]
[188.07302856 163.89978027]
[199.61303711 173.48246765]
[211.15304565 183.06517029]
[212.90414429 168.16773987]
[225.51678467 160.04855347]
[239.80235291 164.62263489]
[245.35346985 178.55767822]
[238.12599182 191.70162964]
[223.38679504 194.47920227]
[233.74557495 205.32795715]
[244.10435486 216.17672729]
[259.98596191 220.26409912]
[264.12573242 236.13212585]
[252.26504517 247.45713806]
[236.60513306 242.58892822]
[233.25559998 226.53550720]
[222.89680481 215.68673706]
[212.53802490 204.83798218]
[201.57034302 194.60519409]
[190.03033447 185.02249146]
[178.49032593 175.43978882]
[166.84040833 165.99099731]
[155.08213806 156.67741394]
[147.82058716 154.97489929]
[143.16311646 147.01036072]
[131.62310791 137.42765808]
[120.08309937 127.84496307]
[108.54309082 118.26226044]
[99.91352081 117.56610870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[9 40]
[10 39]
[11 38]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[19 27]
[20 26]
[55 90]
[56 89]
[58 87]
[59 86]
[60 85]
[63 82]
[64 81]
[65 80]
[66 79]
[68 77]
[69 76]
[70 75]
[100 134]
[101 133]
[102 132]
[103 131]
[104 129]
[105 128]
[107 127]
[108 126]
[109 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
