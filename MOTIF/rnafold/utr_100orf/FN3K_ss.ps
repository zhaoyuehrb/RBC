%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCAGCGCCUCAGCCGACAGGGGCUUCCGAGCGAGCAGAGUCCCGCGCCCCGCACUCCAUGGAGCAGCUGCUGCGCGCCGAGCUGCGCACCGCGACCCUGCGGGCCUUCGGCGGCCCCGGCGCCGGCUGCAUCAGCGAGGGCCGAGCCUACGACACGG\
) } def
/len { sequence length } bind def

/coor [
[246.55653381 492.08325195]
[241.70051575 477.89105225]
[236.84451294 463.69882202]
[231.85112000 449.55435181]
[226.72082520 435.45895386]
[221.59051514 421.36358643]
[204.65747070 409.60998535]
[208.51028442 388.56253052]
[202.56907654 374.78930664]
[196.49461365 361.07431030]
[190.28746033 347.41885376]
[184.08029175 333.76342773]
[169.47508240 330.96594238]
[159.19612122 319.97473145]
[157.33843994 304.86175537]
[164.82246399 291.39715576]
[158.61529541 277.74169922]
[152.40814209 264.08624268]
[149.77964783 262.98446655]
[147.44079590 260.74935913]
[145.83517456 257.49017334]
[145.35702515 253.47807312]
[146.29519653 249.12353516]
[141.16490173 235.02815247]
[136.03459167 220.93275452]
[130.90429688 206.83737183]
[125.77398682 192.74198914]
[120.64368439 178.64659119]
[109.02001953 169.33317566]
[111.57076263 153.71894836]
[106.44046021 139.62356567]
[101.31015778 125.52816772]
[96.17985535 111.43278503]
[90.77719116 97.43952942]
[85.10419464 83.55366516]
[70.80829620 77.36778259]
[65.25288391 63.20473480]
[71.23827362 49.61390305]
[65.56527710 35.72804642]
[59.89228058 21.84218597]
[54.21928406 7.95632601]
[41.83745575 -1.89257848]
[44.18660736 -16.60076523]
[38.51361084 -30.48662376]
[32.84061050 -44.37248230]
[27.79737091 -48.76984787]
[26.03469467 -54.23786926]
[27.22841644 -58.90843582]
[22.09811401 -73.00382233]
[16.96781158 -87.09921265]
[2.19659424 -91.47154999]
[-7.05952692 -103.56194305]
[-7.41730404 -118.60640717]
[1.05095077 -130.83042908]
[-4.07935143 -144.92581177]
[-9.20965385 -159.02120972]
[-14.33995533 -173.11659241]
[-19.60668755 -187.16157532]
[-25.00935364 -201.15483093]
[-30.41201973 -215.14808655]
[-34.55615997 -218.48167419]
[-36.75398636 -222.66256714]
[-37.01175690 -226.79405212]
[-35.69587326 -230.11534119]
[-40.27576065 -244.39906311]
[-51.85713959 -255.17784119]
[-48.37528229 -269.65975952]
[-52.95516968 -283.94348145]
[-58.58213043 -291.20281982]
[-57.48247147 -298.54876709]
[-61.78452301 -312.91860962]
[-74.07765198 -323.77270508]
[-70.55954742 -339.79003906]
[-54.84933472 -344.49334717]
[-43.10833359 -333.04431152]
[-47.41467667 -317.22067261]
[-43.11262894 -302.85083008]
[-38.67145157 -288.52337646]
[-34.09156036 -274.23965454]
[-22.83776665 -264.48254395]
[-25.99204445 -248.97894287]
[-21.41215324 -234.69522095]
[-16.41876411 -220.55075073]
[-11.01609707 -206.55749512]
[-5.61343145 -192.56423950]
[-0.24414554 -187.43171692]
[-0.24456632 -178.24690247]
[4.88573599 -164.15150452]
[10.01603794 -150.05612183]
[15.14634037 -135.96073914]
[29.49084854 -132.03988647]
[38.88717270 -120.28517151]
[39.56812668 -105.07367706]
[31.06320190 -92.22951508]
[36.19350433 -78.13412476]
[41.32380676 -64.03873444]
[46.72647095 -50.04548264]
[52.39946747 -36.15962219]
[58.07246780 -22.27376366]
[70.04852295 -13.41806793]
[68.10514069 2.28332806]
[73.77813721 16.16918755]
[79.45114136 30.05504799]
[85.12413788 43.94090652]
[98.91381836 49.45272827]
[104.86486053 63.45415115]
[98.99005127 77.88066864]
[104.66305542 91.76652527]
[108.95994568 94.86678314]
[111.18891144 100.16744995]
[110.27524567 106.30248260]
[115.40554810 120.39786530]
[120.53585052 134.49325562]
[125.66615295 148.58865356]
[137.65676880 158.91024780]
[134.73907471 173.51629639]
[139.86936951 187.61167908]
[144.99967957 201.70707703]
[150.12997437 215.80245972]
[155.26028442 229.89784241]
[160.39057922 243.99324036]
[166.06358337 257.87908936]
[172.27075195 271.53454590]
[178.47790527 285.18997192]
[193.54353333 288.40451050]
[203.70872498 299.74127197]
[205.23126221 314.71276855]
[197.73574829 327.55627441]
[203.94290161 341.21170044]
[210.15007019 354.86715698]
[216.58172607 361.42416382]
[216.34233093 368.84811401]
[222.28352356 382.62133789]
[231.51638794 384.92785645]
[238.52932739 391.15490723]
[241.81362915 399.79199219]
[240.74240112 408.83114624]
[235.68591309 416.23327637]
[240.81620789 430.32864380]
[245.94651794 444.42404175]
[251.85072327 451.45974731]
[251.03672791 458.84280396]
[255.89274597 473.03503418]
[260.74874878 487.22726440]
[265.74215698 501.37173462]
[270.87243652 515.46710205]
[276.00274658 529.56250000]
[291.17892456 531.54797363]
[303.68740845 540.36822510]
[310.65380859 553.99639893]
[310.47732544 569.30090332]
[303.19848633 582.76483154]
[290.48992920 591.29425049]
[275.27200317 592.92926025]
[261.04165649 587.29400635]
[251.06892395 575.68353271]
[247.64546204 560.76580811]
[251.55795288 545.96881104]
[261.90734863 534.69281006]
[256.77706909 520.59741211]
[251.64675903 506.50201416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 140]
[5 139]
[6 138]
[8 133]
[9 132]
[10 130]
[11 129]
[12 128]
[16 124]
[17 123]
[18 122]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[30 114]
[31 113]
[32 112]
[33 111]
[34 108]
[35 107]
[38 104]
[39 103]
[40 102]
[41 101]
[43 99]
[44 98]
[45 97]
[48 96]
[49 95]
[50 94]
[54 90]
[55 89]
[56 88]
[57 87]
[58 85]
[59 84]
[60 83]
[64 82]
[65 81]
[67 79]
[68 78]
[70 77]
[71 76]
[145 161]
[146 160]
[147 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
