%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGGGGGCGGAAAAGCCGUGGCGCCCCCUUGCGUGGCGCGUCGGUCUCAGAGUCGCGUGACUUCAACCCCCUCUUCGGGAGGCUGGGUCGUCAUGAUCCGGACCCCAUUGUCGGCCUCUGCCCAUCGCCUGCUCCUCCCAGGCUCCCGCGGCCGACCCCCGCGCAACAUGCAGCCCACGGGCCGCGAGGGUU\
) } def
/len { sequence length } bind def

/coor [
[-74.95243073 485.32589722]
[-82.96941376 498.00375366]
[-79.71172333 513.23614502]
[-88.02268982 525.97906494]
[-102.56450653 528.99090576]
[-110.58148956 541.66876221]
[-118.59848022 554.34661865]
[-126.61546326 567.02447510]
[-134.63244629 579.70233154]
[-142.64944458 592.38018799]
[-150.66642761 605.05804443]
[-142.53952026 617.97760010]
[-140.83155823 633.14489746]
[-145.88168335 647.54833984]
[-156.68716431 658.32812500]
[-171.10256958 663.34399414]
[-186.26571655 661.59997559]
[-199.16595459 653.44232178]
[-207.24192810 640.49084473]
[-208.89013672 625.31695557]
[-203.78334045 610.93353271]
[-192.93550110 600.19635010]
[-178.50044250 595.23730469]
[-163.34428406 597.04101562]
[-155.32728577 584.36315918]
[-147.31030273 571.68530273]
[-139.29331970 559.00750732]
[-131.27633667 546.32965088]
[-123.25933838 533.65179443]
[-115.24235535 520.97393799]
[-118.75527191 506.54495239]
[-110.80551147 493.57360840]
[-95.64727020 489.98678589]
[-87.63027954 477.30892944]
[-80.44636536 464.14111328]
[-74.12535095 450.53799438]
[-67.80432892 436.93487549]
[-61.48331451 423.33175659]
[-55.16230011 409.72863770]
[-56.81577301 394.92608643]
[-43.98360443 385.67156982]
[-37.66258621 372.06848145]
[-31.34157181 358.46536255]
[-32.99504471 343.66281128]
[-20.16287613 334.40829468]
[-13.84185982 320.80517578]
[-7.52084351 307.20205688]
[-12.85916996 293.34429932]
[-6.64254236 279.45874023]
[7.92895985 273.95336914]
[14.24997616 260.35028076]
[10.39291573 248.87629700]
[15.55852318 237.48709106]
[27.47163963 232.52064514]
[34.01098251 219.02111816]
[32.59619522 204.19386292]
[45.57578659 195.14727783]
[52.11512756 181.64775085]
[58.65447235 168.14823914]
[65.19381714 154.64872742]
[71.73315430 141.14920044]
[65.19277954 135.78727722]
[59.65135193 129.39826965]
[55.26790619 122.16554260]
[52.16825104 114.29667664]
[50.44133759 106.01750946]
[50.13673401 97.56564331]
[51.26317978 89.18363953]
[53.78834534 81.11206055]
[57.63975906 73.58255768]
[62.70689392 66.81121826]
[53.12692261 55.26893616]
[43.54695511 43.72665787]
[27.76998901 40.81687164]
[20.33555412 26.60037804]
[26.94671440 11.98285007]
[42.53195190 8.17760563]
[55.13560867 18.10370255]
[55.08923721 34.14669037]
[64.66920471 45.68896866]
[74.24916840 57.23124695]
[80.80258179 53.91604996]
[87.77146149 51.59820175]
[86.32375336 36.66822433]
[84.75582886 21.75039673]
[83.06778717 6.84568310]
[81.37974548 -8.05903149]
[79.69169617 -22.96374512]
[78.00365448 -37.86846161]
[76.31561279 -52.77317429]
[74.62757111 -67.67788696]
[63.02520370 -78.75781250]
[64.59733582 -94.72364807]
[78.13796234 -103.32777405]
[93.25987244 -97.96984100]
[98.36283112 -82.75999451]
[89.53228760 -69.36592865]
[91.22032928 -54.46121597]
[92.90837097 -39.55650330]
[94.59641266 -24.65178871]
[96.28445435 -9.74707508]
[97.97250366 5.15763950]
[99.66054535 20.06235313]
[103.54234314 26.36332512]
[101.25373077 35.22051620]
[102.70143890 50.15048981]
[110.96114349 51.29553986]
[118.91503906 53.79943085]
[126.34120178 57.59230804]
[133.03245544 62.56835175]
[138.80210876 68.58872986]
[143.48918152 75.48547363]
[157.51443481 70.16640472]
[171.53967285 64.84732819]
[185.56491089 59.52825546]
[199.59016418 54.20918274]
[213.61540222 48.89011002]
[227.64065552 43.57103729]
[230.95634460 39.50506973]
[235.08921814 37.34269714]
[239.17376709 37.07560349]
[242.47415161 38.35181427]
[256.73999023 33.71656036]
[258.93661499 19.89480972]
[266.83880615 8.42429733]
[278.85607910 1.51320481]
[292.61260986 0.46202752]
[305.41696167 5.41920424]
[314.78860474 15.36322784]
[329.12728882 10.95839787]
[343.46594238 6.55356789]
[357.80462646 2.14873791]
[372.14331055 -2.25609231]
[378.06701660 -16.72826195]
[391.93133545 -23.96110535]
[407.19000244 -20.53949738]
[416.63830566 -8.07901382]
[415.81506348 7.53688431]
[405.10894775 18.93484688]
[389.57510376 20.73310661]
[376.54812622 12.08257866]
[362.20947266 16.48740768]
[347.87078857 20.89223862]
[333.53210449 25.29706764]
[319.19345093 29.70189857]
[315.96911621 45.52965927]
[305.14324951 57.64394379]
[289.59753418 62.67818451]
[273.54202271 59.16955185]
[261.37524414 47.98240662]
[247.10940552 52.61766052]
[232.95971680 57.59627914]
[218.93447876 62.91535187]
[204.90924072 68.23442841]
[190.88398743 73.55349731]
[176.85874939 78.87257385]
[162.83351135 84.19164276]
[148.80825806 89.51071930]
[147.55812073 115.18212891]
[133.70254517 136.82946777]
[110.91400146 148.71504211]
[85.23267365 147.68855286]
[78.69333649 161.18806458]
[72.15399170 174.68757629]
[65.61464691 188.18710327]
[59.07530594 201.68661499]
[60.02235413 217.47946167]
[47.51050186 225.56047058]
[40.97115707 239.05998230]
[42.73594284 257.38320923]
[27.85309219 266.67129517]
[21.53207588 280.27441406]
[26.72055435 294.96173096]
[20.11636353 308.66717529]
[6.08227205 313.52307129]
[-0.23874465 327.12619019]
[-6.55976105 340.72930908]
[-5.35840988 356.50485229]
[-17.73845482 364.78637695]
[-24.05947304 378.38949585]
[-30.38048935 391.99261475]
[-29.17913818 407.76812744]
[-41.55918503 416.04965210]
[-47.88019943 429.65277100]
[-54.20121765 443.25588989]
[-60.52223206 456.85900879]
[-66.84324646 470.46212769]
[-53.08528519 464.48562622]
[-38.41545486 467.61550903]
[-28.29468155 478.68664551]
[-26.49047089 493.57772827]
[-33.67444992 506.74551392]
[-47.17234421 513.28820801]
[-61.95949936 510.77026367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[35 187]
[36 186]
[37 185]
[38 184]
[39 183]
[41 181]
[42 180]
[43 179]
[45 177]
[46 176]
[47 175]
[50 172]
[51 171]
[54 169]
[55 168]
[57 166]
[58 165]
[59 164]
[60 163]
[61 162]
[71 81]
[72 80]
[73 79]
[83 106]
[84 105]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[112 158]
[113 157]
[114 156]
[115 155]
[116 154]
[117 153]
[118 152]
[122 151]
[123 150]
[129 145]
[130 144]
[131 143]
[132 142]
[133 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
