%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:39:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAUCAUCCCACUGCCACCAUGCUGGCCUCAGGGCUGCUUCUGGUGACCUUGCUGGCCUGCCUGACUGUGAUGGUCUUGAUGUCAGUCUGGCGGCAGAGGAAGAGCAGGGGGAAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[77.83375549 324.49450684]
[63.07823563 320.93936157]
[50.60561371 312.29077148]
[42.10271454 299.71838379]
[38.71947861 284.92251587]
[40.91346359 269.90414429]
[48.38795471 256.69445801]
[60.13208389 247.07987976]
[74.55755615 242.36074829]
[75.32974243 227.38064575]
[76.10192108 212.40052795]
[76.87409973 197.42042542]
[69.80224609 184.31172180]
[78.23970032 170.92814636]
[79.01188660 155.94804382]
[79.78406525 140.96792603]
[80.55624390 125.98781586]
[70.94734955 114.46961212]
[56.07151031 112.54363251]
[41.19566727 110.61766052]
[26.31982803 108.69168091]
[11.44398880 106.76570892]
[-6.67223549 115.42551422]
[-21.64576149 103.30200958]
[-36.60102463 102.14437866]
[-45.51916122 104.62274933]
[-51.92482758 100.75952911]
[-66.84532166 99.21721649]
[-81.76582336 97.67489624]
[-96.68631744 96.13258362]
[-111.42713928 103.31871033]
[-124.86771393 93.92280579]
[-123.18153381 77.61058044]
[-108.10320282 71.16264343]
[-95.14400482 81.21208954]
[-80.22351074 82.75440216]
[-65.30300903 84.29671478]
[-50.38251114 85.83902740]
[-35.44339371 87.18911743]
[-20.48812866 88.34674835]
[-13.24024296 80.93988037]
[-2.88243961 78.76267242]
[7.14456463 82.78910828]
[13.36996365 91.88986969]
[28.24580383 93.81584167]
[43.12164307 95.74182129]
[57.99748230 97.66779327]
[72.87332153 99.59377289]
[80.93885040 83.91181183]
[95.84234619 77.62657928]
[109.90336609 81.97111511]
[121.42156982 72.36222076]
[132.93977356 62.75331879]
[138.58020020 47.97170258]
[153.30967712 45.76002121]
[164.82789612 36.15112305]
[170.70677185 18.75879860]
[188.03295898 16.31142044]
[199.29994202 6.40913820]
[210.56692505 -3.49314356]
[215.01638794 -11.60964966]
[222.25384521 -13.50076962]
[233.77204895 -23.10966682]
[245.29025269 -32.71856689]
[250.93067932 -47.50018311]
[265.66015625 -49.71186447]
[277.17837524 -59.32076263]
[288.69656372 -68.92965698]
[300.21478271 -78.53855896]
[311.73300171 -88.14745331]
[313.30291748 -103.64497375]
[325.12091064 -113.22567749]
[339.88574219 -111.63348389]
[351.40396118 -121.24238586]
[351.26776123 -136.87937927]
[361.25451660 -148.91259766]
[376.64880371 -151.66032410]
[390.18188477 -143.82518005]
[395.46386719 -129.10665894]
[390.00076294 -114.45441437]
[376.37207031 -106.78678131]
[361.01284790 -109.72417450]
[349.49462891 -100.11528015]
[348.41400146 -85.30420685]
[336.86978149 -75.39533997]
[321.34188843 -76.62924957]
[309.82366943 -67.02034760]
[298.30548096 -57.41145325]
[286.78726196 -47.80255508]
[275.26907349 -38.19365692]
[270.45248413 -24.09933281]
[254.89915466 -21.20035934]
[243.38095093 -11.59146118]
[231.86274719 -1.98256302]
[220.46920776 7.77383518]
[209.20222473 17.67611694]
[197.93524170 27.57839966]
[196.81680298 39.69769287]
[187.40721130 48.03705215]
[174.43678284 47.66933060]
[162.91857910 57.27822876]
[158.10202026 71.37255096]
[142.54867554 74.27153015]
[131.03047180 83.88042450]
[119.51226044 93.48931885]
[118.13313293 115.49195862]
[95.53636169 126.75999451]
[94.76417542 141.74011230]
[93.99199677 156.72021484]
[93.21981049 171.70033264]
[100.23644257 185.88050842]
[91.85421753 198.19259644]
[91.08203125 213.17271423]
[90.30985260 228.15283203]
[89.53767395 243.13293457]
[103.40145874 249.31028748]
[114.09476471 260.08145142]
[120.17140961 273.98968506]
[120.80956268 289.15402222]
[115.92293549 303.52362061]
[106.17239380 315.15509033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 115]
[10 114]
[11 113]
[12 112]
[14 110]
[15 109]
[16 108]
[17 107]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[24 40]
[25 39]
[27 38]
[28 37]
[29 36]
[30 35]
[51 105]
[52 104]
[53 103]
[55 101]
[56 100]
[58 97]
[59 96]
[60 95]
[62 94]
[63 93]
[64 92]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
