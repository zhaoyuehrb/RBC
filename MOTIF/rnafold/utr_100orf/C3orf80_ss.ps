%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGGGACCCGGGGUCACUGCUGAGGGCCUGUCGGUGGCUCCGGCGCCGCCGCCUCUGCUGCCGCUGCUGCUACUGCUGGCGCUGGCGCUGGUGGCGC\
) } def
/len { sequence length } bind def

/coor [
[11.61347008 163.50289917]
[-3.03775668 166.71871948]
[-17.17681503 161.71003723]
[-26.53652954 149.98843384]
[-28.29213524 135.09153748]
[-21.91378593 121.51520538]
[-9.32559967 113.35652924]
[-24.02006149 110.34442139]
[-37.11411667 118.78145599]
[-51.97348404 115.51741791]
[-59.93620682 102.98224640]
[-74.63066864 99.97013855]
[-89.32513428 96.95803070]
[-104.01959229 93.94593048]
[-118.71405792 90.93382263]
[-133.40852356 87.92171478]
[-148.10298157 84.90960693]
[-162.79743958 81.89750671]
[-177.49189758 78.88539886]
[-192.18637085 75.87329102]
[-206.88082886 72.86118317]
[-221.57528687 69.84908295]
[-231.98352051 78.56363678]
[-245.32092285 79.61944580]
[-256.63473511 72.85181427]
[-261.85504150 60.95936966]
[-276.44873047 57.49172592]
[-293.25656128 59.71264648]
[-300.04357910 44.17646790]
[-286.99337769 33.35385895]
[-272.98107910 42.89804840]
[-258.38739014 46.36569214]
[-244.55450439 36.94282150]
[-227.84056091 40.42460632]
[-218.56318665 55.15461731]
[-203.86872864 58.16672516]
[-189.17425537 61.17882919]
[-174.47979736 64.19093323]
[-159.78533936 67.20304108]
[-145.09086609 70.21514893]
[-130.39640808 73.22725677]
[-115.70195007 76.23935699]
[-101.00748444 79.25146484]
[-86.31302643 82.26357269]
[-71.61856079 85.27568054]
[-56.92409897 88.28778076]
[-44.67178726 79.89633942]
[-29.72660446 82.74171448]
[-21.00795555 95.64996338]
[-6.31349325 98.66207123]
[8.65749073 99.59461212]
[23.61216164 98.42935181]
[38.56683350 97.26409912]
[53.52150345 96.09883881]
[68.47617340 94.93357849]
[83.43084717 93.76832581]
[89.58712006 85.68418121]
[99.17436218 82.31698608]
[109.03363800 84.77619934]
[115.91640472 92.25153351]
[130.91459656 92.01825714]
[139.62310791 88.70851135]
[146.38114929 92.01825714]
[161.37933350 92.25153351]
[176.37751770 92.48480988]
[191.37570190 92.71808624]
[205.29454041 85.19634247]
[217.89994812 93.13063812]
[232.89813232 93.36391449]
[247.89631653 93.59719086]
[262.89450073 93.83046722]
[277.89450073 93.83046722]
[292.89266968 93.59719086]
[306.68005371 84.71799469]
[321.13763428 92.45822144]
[321.39266968 108.85538483]
[307.18283081 117.04149628]
[293.12597656 108.59537506]
[278.12777710 108.82865906]
[271.36975098 112.13839722]
[262.66122437 108.82865906]
[247.66304016 108.59537506]
[232.66485596 108.36209869]
[217.66665649 108.12882233]
[204.82060242 115.66725922]
[191.14242554 107.71627808]
[176.14424133 107.48299408]
[161.14605713 107.24971771]
[146.14787292 107.01644135]
[131.14787292 107.01644135]
[116.14968109 107.24971771]
[100.82563782 117.68301392]
[84.59609985 108.72299194]
[69.64143372 109.88825226]
[54.68675995 111.05351257]
[39.73209000 112.21876526]
[24.77742004 113.38402557]
[9.82274818 114.54928589]
[21.30063438 124.20630646]
[25.94535065 138.46908569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 50]
[8 49]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[26 32]
[27 31]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[56 93]
[60 91]
[61 90]
[63 89]
[64 88]
[65 87]
[66 86]
[68 84]
[69 83]
[70 82]
[71 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
