%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGUGACCGGAAGUAACCGCCGGGCCAAGAUGGCUGCAGAGGAAGGGGUCGCGAGUGCUGCUUCCGCCGGCGGUAGCUGGGGCACCGCGGCCAUGGGGCGGGUUCUACCGAUGCUGUUGGUGCCAGUCC\
) } def
/len { sequence length } bind def

/coor [
[243.78565979 308.12582397]
[230.14118958 301.89459229]
[219.83100891 290.99963379]
[214.36126709 277.03244019]
[214.53097534 262.03341675]
[220.31533813 248.19357300]
[230.86938477 237.53466797]
[244.65135193 231.61376953]
[259.64801025 231.29577637]
[247.22576904 222.88816833]
[234.80352783 214.48056030]
[222.38128662 206.07293701]
[213.04235840 210.72167969]
[202.53344727 211.02523804]
[192.79223633 206.85940552]
[185.64346313 198.93037415]
[182.45721436 188.65589905]
[183.88670349 177.91209412]
[172.09590149 168.63970947]
[160.30509949 159.36732483]
[148.51431274 150.09494019]
[136.72351074 140.82255554]
[124.93271637 131.55017090]
[113.14192200 122.27777863]
[101.35112762 113.00539398]
[86.95873260 108.77940369]
[72.02664948 110.20524597]
[57.09457397 111.63108826]
[42.16249466 113.05693054]
[26.96982384 120.58149719]
[15.53356934 108.06556702]
[24.39450073 93.61149597]
[40.73665237 98.12484741]
[55.66873169 96.69900513]
[70.60080719 95.27317047]
[85.53289032 93.84732819]
[88.96958923 87.18106079]
[73.98657990 87.89488220]
[65.87681580 75.27617645]
[72.74996948 61.94351959]
[87.73295593 61.22942352]
[95.84298706 73.84852600]
[99.27968597 67.18226624]
[91.77968597 54.19188309]
[84.27968597 41.20149994]
[76.77968597 28.21112061]
[69.27968597 15.22073841]
[55.67890167 7.13808918]
[56.01596451 -7.75270176]
[48.51596451 -20.74308205]
[41.01596451 -33.73346329]
[25.58556175 -36.27053833]
[15.43525887 -48.16613770]
[15.35771465 -63.80353165]
[25.38954544 -75.79920959]
[40.79402542 -78.48918915]
[54.29763412 -70.60334015]
[59.52437592 -55.86511993]
[54.00634384 -41.23346329]
[61.50634384 -28.24308205]
[69.00634766 -15.25270176]
[82.07067871 -8.09921074]
[82.27006531 7.72073889]
[89.77006531 20.71112061]
[97.27006531 33.70149994]
[104.77006531 46.69188309]
[112.27006531 59.68226242]
[122.08666992 85.50533295]
[110.62351227 101.21459961]
[122.41430664 110.48698425]
[134.20510864 119.75936890]
[145.99589539 129.03175354]
[157.78669739 138.30413818]
[169.57748413 147.57652283]
[181.36828613 156.84890747]
[193.15908813 166.12129211]
[212.84515381 162.59317017]
[228.63304138 174.37347412]
[230.78889465 193.65069580]
[243.21113586 202.05831909]
[255.63337708 210.46592712]
[268.05560303 218.87355042]
[281.70010376 225.10476685]
[296.18899536 228.98706055]
[310.67788696 232.86933899]
[325.16674805 236.75163269]
[339.65563965 240.63391113]
[354.14453125 244.51620483]
[368.63342285 248.39848328]
[383.16748047 252.10807800]
[397.74465942 255.64447021]
[412.32183838 259.18084717]
[426.89898682 262.71722412]
[436.07684326 261.69839478]
[441.77896118 266.51510620]
[456.26785278 270.39739990]
[471.60034180 266.49548340]
[481.89138794 277.26321411]
[496.38027954 281.14550781]
[507.18377686 270.22851562]
[522.00256348 266.19137573]
[536.85052490 270.12002563]
[547.73358154 280.95770264]
[551.72424316 295.78909302]
[547.74908447 310.62463379]
[536.87731934 321.47366333]
[522.03350830 325.41781616]
[507.21051025 321.39617920]
[496.39559937 310.49050903]
[492.49798584 295.63436890]
[478.00909424 291.75210571]
[463.71295166 295.93170166]
[452.38555908 284.88629150]
[437.89666748 281.00399780]
[423.36260986 277.29440308]
[408.78543091 273.75802612]
[394.20828247 270.22164917]
[379.63110352 266.68524170]
[372.31805420 268.18005371]
[364.75112915 262.88735962]
[350.26223755 259.00509644]
[335.77334595 255.12280273]
[321.28448486 251.24050903]
[306.79559326 247.35823059]
[292.30670166 243.47593689]
[277.81781006 239.59365845]
[287.39819336 251.13558960]
[291.94876099 265.42868042]
[290.80474854 280.38497925]
[284.13323975 293.81967163]
[272.90887451 303.77023315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 82]
[10 81]
[11 80]
[12 79]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 36]
[27 35]
[28 34]
[29 33]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[49 61]
[50 60]
[51 59]
[83 126]
[84 125]
[85 124]
[86 123]
[87 122]
[88 121]
[89 120]
[90 118]
[91 117]
[92 116]
[93 115]
[95 114]
[96 113]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
