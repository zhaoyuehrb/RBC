%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAACUUCUGAUAGGGUCUUAUUUAUGUUGCUCAAAUGUUUACAUAAUAACUUGUGCCAAAAAUAUAGUGCUCAUGCUUUUCAGUUCUCACCCAGAAAUGUCCUGUGGCUUCUAGUUGUGUGCC\
) } def
/len { sequence length } bind def

/coor [
[-137.02056885 251.85185242]
[-144.72550964 244.60252380]
[-158.49331665 250.55633545]
[-172.26110840 256.51013184]
[-186.02890015 262.46395874]
[-199.79669189 268.41775513]
[-213.56448364 274.37158203]
[-217.05680847 289.37524414]
[-228.57943726 299.32925415]
[-243.57650757 300.57492065]
[-256.27932739 292.84338379]
[-270.04711914 298.79721069]
[-283.81491089 304.75103760]
[-297.50799561 310.87466431]
[-311.12432861 317.16720581]
[-324.74063110 323.45971680]
[-334.02200317 336.27249146]
[-348.82104492 334.58804321]
[-362.43734741 340.88055420]
[-366.36166382 356.01773071]
[-379.12774658 365.04882812]
[-394.70788574 363.70965576]
[-405.74560547 352.63253784]
[-407.02920532 337.04772949]
[-397.95266724 324.31390381]
[-382.80160522 320.44360352]
[-368.72988892 327.26425171]
[-355.11358643 320.97171021]
[-346.80615234 308.60903931]
[-331.03317261 309.84341431]
[-317.41683960 303.55087280]
[-303.80053711 297.25836182]
[-298.99697876 291.53497314]
[-289.76870728 290.98324585]
[-276.00091553 285.02941895]
[-262.23312378 279.07559204]
[-259.16629028 264.52456665]
[-247.98706055 254.45042419]
[-232.84233093 252.87228394]
[-219.51829529 260.60379028]
[-205.75050354 254.64997864]
[-191.98271179 248.69616699]
[-178.21492004 242.74235535]
[-164.44712830 236.78854370]
[-150.67933655 230.83471680]
[-147.84147644 211.60569763]
[-133.98783875 197.77085876]
[-114.47514343 194.91818237]
[-96.99179840 204.34225464]
[-83.87950134 197.05749512]
[-70.76720428 189.77273560]
[-57.65491486 182.48796082]
[-44.54262161 175.20320129]
[-31.43032646 167.91844177]
[-29.99578667 151.61509705]
[-19.04581833 139.22961426]
[-2.71753526 135.73832703]
[12.64141560 142.69958496]
[25.56951332 135.09272766]
[38.49761200 127.48586273]
[51.42570877 119.87900543]
[48.26667023 108.84868622]
[47.58003235 97.39546967]
[49.39860916 86.06672668]
[53.63549423 75.40387726]
[60.08819580 65.91651154]
[68.44833374 58.05802917]
[78.31636047 52.20401382]
[89.22068024 48.63422394]
[100.64015961 47.51927185]
[112.02903748 48.91244125]
[122.84304047 52.74714661]
[131.23434448 40.31388855]
[131.84240723 23.92601776]
[146.46328735 16.49890709]
[160.05627441 25.67292976]
[158.63807678 42.01063919]
[143.66760254 48.70520020]
[135.27629089 61.13845825]
[139.53024292 65.47470856]
[143.25468445 70.27342987]
[146.39970398 75.47035217]
[148.92318726 80.99584961]
[150.79133606 86.77591705]
[165.69850159 85.10961914]
[178.55375671 75.88719940]
[192.06176758 82.16278076]
[206.96891785 80.49648285]
[221.87608337 78.83018494]
[236.78324890 77.16388702]
[247.88008118 65.57769775]
[263.84359741 67.17311859]
[272.42797852 80.72628784]
[267.04797363 95.84036255]
[251.83071899 100.92112732]
[238.44953918 92.07104492]
[223.54237366 93.73734283]
[208.63522339 95.40364075]
[193.72805786 97.06993866]
[181.93907166 106.17317963]
[167.36480713 100.01678467]
[152.45764160 101.68308258]
[147.53489685 122.25016785]
[134.89447021 139.20475769]
[116.58862305 149.79411316]
[95.58947754 152.29898071]
[75.30641937 146.31266785]
[59.03256607 132.80709839]
[46.10446930 140.41395569]
[33.17637253 148.02081299]
[20.24827385 155.62767029]
[19.93289566 169.46855164]
[12.85164070 181.23843384]
[0.96067339 187.89480591]
[-12.55750275 187.77957153]
[-24.14556503 181.03073120]
[-37.25785828 188.31550598]
[-50.37015152 195.60026550]
[-63.48244476 202.88502502]
[-76.59474182 210.16978455]
[-89.70703125 217.45454407]
[-88.77689362 228.26365662]
[-91.54217529 238.71450806]
[-97.65271759 247.58558655]
[-106.36899567 253.84916687]
[-116.65148163 256.79028320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[11 36]
[12 35]
[13 34]
[14 32]
[15 31]
[16 30]
[18 28]
[19 27]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[54 116]
[58 111]
[59 110]
[60 109]
[61 108]
[72 79]
[73 78]
[84 102]
[85 101]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
