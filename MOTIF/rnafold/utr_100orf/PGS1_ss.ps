%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAGUUCGCGCCCGCCGGGAGCGGAAGCGGAAGCGGCGAGUCUCCAUGGCGGUGGCGGCGGCAGCUGCGGCGGGACCCGUGUUCUGGAGGCGACUGCUGGGCCUCCUGCCUGGCCGCCCAGGGCUGGCCGCGCUCCUGGGACGCC\
) } def
/len { sequence length } bind def

/coor [
[16.13460350 468.83328247]
[10.01599216 482.81631470]
[-1.56929123 492.75332642]
[-16.32098007 496.67129517]
[-31.31011581 493.79229736]
[-43.56059265 484.68798828]
[-50.64007568 471.16601562]
[-51.14292145 455.91119385]
[-44.96929169 441.95236206]
[-33.34496689 432.06106567]
[-18.57796478 428.20120239]
[-15.74860668 413.47045898]
[-12.91924953 398.73971558]
[-10.24534130 383.97998047]
[-7.72718048 369.19287109]
[-5.20901966 354.40573120]
[-6.99626684 351.29220581]
[-7.32420778 347.14166260]
[-5.71475983 342.66836548]
[-2.03577852 338.77597046]
[1.41206050 324.17761230]
[4.85989952 309.57922363]
[8.30773830 294.98086548]
[11.75557804 280.38247681]
[15.20341682 265.78411865]
[3.38452244 275.02066040]
[-11.44913960 277.24832153]
[-25.45972061 271.89074707]
[-35.02232742 260.33407593]
[-37.66286850 245.56832886]
[-32.69816971 231.41375732]
[-21.41272163 221.53253174]
[-6.72636080 218.48117065]
[7.56117582 223.04913330]
[17.75333786 234.05458069]
[21.21313858 248.65071106]
[27.63986397 235.09722900]
[34.06658936 221.54373169]
[40.49331284 207.99023438]
[46.92004013 194.43673706]
[45.38185501 179.62176514]
[58.28567886 170.46743774]
[64.71240234 156.91394043]
[71.13912964 143.36044312]
[77.56584930 129.80694580]
[83.99257660 116.25345612]
[78.14177704 106.52922058]
[77.70049286 95.18912506]
[82.77793121 85.03962708]
[92.11750793 78.59255219]
[103.40786743 77.44342804]
[110.40024567 64.17291260]
[117.39262390 50.90239334]
[124.38500214 37.63187790]
[131.37738037 24.36136055]
[138.36976624 11.09084225]
[145.08081055 -2.32414460]
[151.50753784 -15.87763882]
[157.93426514 -29.43113327]
[164.36097717 -42.98462677]
[170.78770447 -56.53812027]
[176.34484863 -70.47075653]
[181.01016235 -84.72679901]
[185.67549133 -98.98284149]
[190.34082031 -113.23888397]
[195.00613403 -127.49492645]
[199.67146301 -141.75096130]
[196.61006165 -157.27316284]
[207.92207336 -166.96272278]
[212.58738708 -181.21876526]
[217.25271606 -195.47480774]
[209.05778503 -210.89328003]
[214.41174316 -227.15890503]
[229.55487061 -234.40438843]
[233.91859436 -248.75561523]
[238.28231812 -263.10684204]
[242.64605713 -277.45806885]
[247.00978088 -291.80932617]
[251.37350464 -306.16055298]
[247.13516235 -322.00253296]
[258.92523193 -333.40106201]
[274.61508179 -328.63031006]
[278.06436157 -312.59799194]
[265.72473145 -301.79681396]
[261.36102295 -287.44558716]
[256.99728394 -273.09436035]
[252.63356018 -258.74313354]
[248.26983643 -244.39189148]
[243.90609741 -230.04066467]
[251.51908875 -219.59628296]
[251.70819092 -206.47814941]
[244.17900085 -195.49693298]
[231.50875854 -190.80949402]
[226.84342957 -176.55345154]
[222.17811584 -162.29740906]
[225.57321167 -147.79490662]
[213.92750549 -137.08564758]
[209.26217651 -122.82959747]
[204.59686279 -108.57355499]
[199.93153381 -94.31751251]
[195.26622009 -80.06147003]
[190.60089111 -65.80542755]
[204.60261536 -71.18610382]
[218.38606262 -65.26863861]
[224.12863159 -51.41140366]
[218.57121277 -37.47888947]
[204.86782837 -31.37829781]
[190.79565430 -36.57193756]
[184.34120178 -50.11139679]
[177.91447449 -36.55790329]
[171.48774719 -23.00440788]
[165.06103516 -9.45091438]
[158.63430786 4.10258007]
[159.39305115 8.88032532]
[157.11058044 14.17808437]
[151.64028931 18.08322334]
[144.64790344 31.35373878]
[137.65551758 44.62425613]
[130.66314697 57.89477539]
[123.67076111 71.16529083]
[116.67838287 84.43580627]
[122.77291870 101.34412384]
[114.73167419 117.41809845]
[97.54607391 122.68018341]
[91.11934662 136.23367310]
[84.69261932 149.78717041]
[78.26589966 163.34066772]
[71.83917236 176.89416504]
[72.91767120 192.67855835]
[60.47353363 200.86346436]
[54.04680634 214.41696167]
[47.62008286 227.97045898]
[41.19335938 241.52394104]
[34.76663208 255.07743835]
[29.80178642 269.23196411]
[26.35394859 283.83032227]
[22.90610886 298.42871094]
[19.45826912 313.02706909]
[16.01043129 327.62542725]
[12.56259155 342.22381592]
[9.57809830 356.92388916]
[7.05993795 371.71102905]
[4.54177666 386.49813843]
[6.19154596 395.55285645]
[1.81149197 401.56909180]
[-1.01786542 416.29983521]
[-3.84722281 431.03057861]
[8.43901348 440.08657837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 147]
[12 146]
[13 145]
[14 143]
[15 142]
[16 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[36 134]
[37 133]
[38 132]
[39 131]
[40 130]
[42 128]
[43 127]
[44 126]
[45 125]
[46 124]
[51 121]
[52 120]
[53 119]
[54 118]
[55 117]
[56 116]
[57 113]
[58 112]
[59 111]
[60 110]
[61 109]
[62 102]
[63 101]
[64 100]
[65 99]
[66 98]
[67 97]
[69 95]
[70 94]
[71 93]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
