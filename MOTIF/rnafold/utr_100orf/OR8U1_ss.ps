%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCACAUCAAUUGCACCCAGGCGACAGAGUUUAUUCUUGUGGGCCUCACAGACCAUCAGGAGUUGAAGAUGCCCCUCUUUGUGCUAUUCUUAUCCA\
) } def
/len { sequence length } bind def

/coor [
[68.84027863 127.90916443]
[77.54061890 115.69015503]
[89.81539917 107.06435394]
[74.83172607 106.36474609]
[59.84804916 105.66514587]
[44.86437225 104.96553802]
[29.88069534 104.26593018]
[14.89701939 103.56632233]
[-0.08665655 102.86672211]
[-15.07033253 102.16711426]
[-30.00507355 103.56480408]
[-44.59875107 107.03244781]
[-52.91173935 120.20560455]
[-67.76119995 123.51439667]
[-80.26856232 115.50804901]
[-94.86223602 118.97569275]
[-109.45591736 122.44334412]
[-124.04959106 125.91098785]
[-132.12428284 139.49681091]
[-147.46098328 143.31275940]
[-160.96067810 135.09487915]
[-164.61425781 119.71869659]
[-156.25411987 106.30663300]
[-140.84016418 102.81582642]
[-127.51724243 111.31730652]
[-112.92356110 107.84966278]
[-98.32987976 104.38201904]
[-83.73620605 100.91437531]
[-76.16717529 88.13761902]
[-61.41650772 84.41304779]
[-48.06639481 92.43876648]
[-33.47271729 88.97112274]
[-46.30792618 81.20855713]
[-53.10585785 67.83739471]
[-51.81489563 52.89305115]
[-42.82465363 40.88573837]
[-28.84838486 35.43927383]
[-14.10414124 38.19740295]
[-3.04174042 48.32772064]
[1.00017869 62.77288818]
[-3.19823694 77.17334747]
[-14.37072659 87.18344116]
[0.61294931 87.88304138]
[15.59662533 88.58264923]
[30.58030128 89.28225708]
[45.56397629 89.98186493]
[60.54765320 90.68146515]
[75.53133392 91.38107300]
[90.51500702 92.08068085]
[97.66317749 87.91068268]
[105.80944061 89.19268036]
[119.50628662 83.07743073]
[133.20314026 76.96217346]
[146.89997864 70.84691620]
[160.59683228 64.73166656]
[174.29368591 58.61640930]
[175.84231567 50.01089478]
[180.70626831 42.85987091]
[187.97891235 38.35833740]
[196.35972595 37.22007370]
[204.38653564 39.56538391]
[210.69065857 44.91356277]
[225.04051208 40.54534149]
[239.39038086 36.17712021]
[250.33921814 24.75635910]
[264.76806641 28.45193863]
[279.11795044 24.08371735]
[285.07855225 9.62671375]
[298.96130371 2.42927790]
[314.21118164 5.88981867]
[323.62765503 18.37437439]
[322.76455688 33.98812103]
[312.02941895 45.35872269]
[296.49102783 47.11733246]
[283.48614502 38.43358231]
[269.13629150 42.80180359]
[259.21386719 53.91012192]
[243.75860596 50.52698517]
[229.40873718 54.89520645]
[215.05886841 59.26342773]
[202.29315186 76.65359497]
[180.40893555 72.31326294]
[166.71208191 78.42851257]
[153.01524353 84.54376984]
[139.31838989 90.65901947]
[125.62154388 96.77427673]
[111.92469025 102.88953400]
[126.49737549 106.44437408]
[139.05479431 114.64871979]
[148.16375732 126.56621552]
[152.78468323 140.83671570]
[152.39016724 155.83152771]
[147.02523804 169.83929443]
[137.30220032 181.26130676]
[124.33074951 188.79399109]
[109.59130096 191.57763672]
[94.76606750 189.29452515]
[81.54705811 182.20524597]
[71.44295502 171.11889648]
[65.60694122 157.30076599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 32]
[12 31]
[15 28]
[16 27]
[17 26]
[18 25]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[62 80]
[63 79]
[64 78]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
