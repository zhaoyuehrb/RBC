%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUGAUGACGUCAGCGUUCGAAUUCCAUGGCGGCGCGGCGGCGACGGAGCACCGGCGGCGGCAGGGCGAGAGCAUUAAAUGAAAGCAAAAGAGUUAAUAAUGGCAACACGGCUCCAGAAGACUCUU\
) } def
/len { sequence length } bind def

/coor [
[117.85350800 124.71093750]
[107.57463074 113.78640747]
[100.27445984 115.50614929]
[93.25389862 128.76177979]
[86.23333740 142.01741028]
[79.21277618 155.27304077]
[72.19221497 168.52867126]
[65.17165375 181.78430176]
[63.10154724 198.61138916]
[46.35900116 201.28039551]
[39.15951157 185.93099976]
[51.91602325 174.76373291]
[58.93658447 161.50810242]
[65.95714569 148.25247192]
[72.97770691 134.99685669]
[79.99826813 121.74121857]
[87.01882935 108.48558807]
[84.11486816 93.76937103]
[72.58515930 84.17427826]
[61.05545425 74.57918549]
[49.52574921 64.98408508]
[36.39562225 69.36629486]
[22.92675972 66.68314362]
[12.64227581 57.74624252]
[8.17780113 44.98849487]
[10.60650730 31.80253983]
[-0.68613040 21.92952919]
[-11.97876835 12.05651855]
[-20.59407997 8.71558571]
[-23.42241096 1.80296993]
[-34.47128296 -8.34210014]
[-49.86940002 -11.97645187]
[-54.01116943 -26.28361893]
[-65.06004333 -36.42868805]
[-80.45816040 -40.06304169]
[-84.59992981 -54.37020493]
[-95.64880371 -64.51527405]
[-106.69766998 -74.66034698]
[-117.86925507 -84.67012787]
[-129.16189575 -94.54313660]
[-142.12739563 -94.47380066]
[-151.33995056 -103.01601410]
[-152.19108582 -115.14744568]
[-163.23995972 -125.29251862]
[-179.01722717 -124.36884308]
[-190.77088928 -134.93420410]
[-191.52770996 -150.72036743]
[-180.83866882 -162.36167908]
[-165.04537964 -162.95153809]
[-153.51774597 -152.14001465]
[-153.09487915 -136.34138489]
[-142.04600525 -126.19631958]
[-124.77182770 -123.36442566]
[-119.28887939 -105.83577728]
[-107.99624634 -95.96276855]
[-100.81575775 -93.90744781]
[-96.55260468 -85.70922089]
[-85.50373077 -75.56414795]
[-74.45485687 -65.41907501]
[-59.84703064 -62.51036835]
[-54.91497040 -47.47755814]
[-43.86610031 -37.33248901]
[-29.25827026 -34.42378235]
[-24.32621193 -19.39097214]
[-13.27734089 -9.24590111]
[-2.10575795 0.76388079]
[9.18688011 10.63689137]
[20.47951698 20.50990105]
[36.30836105 16.34239388]
[51.66980743 22.45736694]
[60.47889709 36.64426422]
[59.12084198 53.45438004]
[70.65055084 63.04947662]
[82.18025970 72.64456940]
[93.70996094 82.23966980]
[85.63401031 69.59929657]
[82.03742218 55.03686142]
[83.29999542 40.09009171]
[89.28839874 26.33730888]
[99.37028503 15.23075485]
[112.48104858 7.94323635]
[127.23623657 5.24428606]
[142.07777405 7.41890335]
[155.43843079 14.23745728]
[165.90739441 24.97993469]
[172.37918091 38.51197052]
[174.17037964 53.40464020]
[171.09185791 68.08533478]
[163.46870422 81.00382996]
[152.10588074 90.79598236]
[138.20301819 96.42783356]
[150.40237427 105.15571594]
[162.60171509 113.88359833]
[174.80105591 122.61148071]
[187.00041199 131.33937073]
[199.19975281 140.06724548]
[211.39909363 148.79513550]
[224.31430054 140.82810974]
[239.25552368 138.41926575]
[253.94104004 141.90489197]
[266.14016724 150.72355652]
[274.01220703 163.50619507]
[276.38409424 178.28860474]
[272.92514038 192.81323242]
[285.12448120 201.54112244]
[297.32382202 210.26901245]
[312.87210083 207.43576050]
[325.82205200 216.49522400]
[328.49075317 232.07257080]
[319.29489136 244.92602539]
[303.69021606 247.42988586]
[290.93469238 238.09863281]
[288.59594727 222.46835327]
[276.39660645 213.74046326]
[264.19726562 205.01258850]
[251.56739807 212.97599792]
[236.81089783 215.50408936]
[222.17117310 212.18093872]
[209.88597107 203.48257446]
[201.84536743 190.70907593]
[199.30097961 175.79032898]
[202.67121887 160.99447632]
[190.47186279 152.26660156]
[178.27252197 143.53871155]
[166.07318115 134.81082153]
[153.87382507 126.08294678]
[141.67448425 117.35505676]
[129.47514343 108.62717438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[18 75]
[19 74]
[20 73]
[21 72]
[26 68]
[27 67]
[28 66]
[30 65]
[31 64]
[33 62]
[34 61]
[36 59]
[37 58]
[38 57]
[39 55]
[40 54]
[43 52]
[44 51]
[91 128]
[92 127]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
