%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGCUCCAACCAAAUGCCAGCUCCGCGGAAGAUUAGUCCUGCUAUGCUCGCUCCUGGGGAUGCUAUGGGAGGCCAGGGCCAGUCAGAUUCGCUACU\
) } def
/len { sequence length } bind def

/coor [
[-29.34987450 275.29602051]
[-42.33455658 270.15585327]
[-52.85836029 280.84460449]
[-63.38216019 291.53335571]
[-73.90596771 302.22213745]
[-84.42976379 312.91088867]
[-79.22834015 327.26037598]
[-80.77656555 342.44476318]
[-88.76705170 355.44918823]
[-101.61327362 363.69158936]
[-116.76460266 365.53546143]
[-131.21273804 360.61468506]
[-142.08898926 349.90628052]
[-147.23387146 335.53640747]
[-145.62586975 320.35824585]
[-137.58422852 307.38537598]
[-124.70565033 299.19363403]
[-109.54717255 297.40945435]
[-95.11853027 302.38708496]
[-84.59472656 291.69833374]
[-74.07092285 281.00955200]
[-63.54711914 270.32080078]
[-53.02331543 259.63204956]
[-58.69857025 244.78178406]
[-57.36679077 228.88188171]
[-49.24155045 215.08300781]
[-35.88756180 206.14126587]
[-19.91956139 203.86782837]
[-4.49041986 208.76225281]
[5.69587326 197.75137329]
[15.88216686 186.74050903]
[26.06846046 175.72962952]
[36.25475311 164.71875000]
[38.93723679 145.67623901]
[58.02815628 139.58351135]
[67.51020050 127.96065521]
[76.99224854 116.33779907]
[86.47429657 104.71494293]
[88.90098572 90.94531250]
[101.90284729 85.80300903]
[111.38489532 74.18015289]
[120.86694336 62.55729675]
[130.34898376 50.93444061]
[139.83103943 39.31158066]
[149.31307983 27.68872643]
[149.87054443 22.96434593]
[151.80415344 19.12726212]
[154.62767029 16.51907158]
[157.79220581 15.27223015]
[160.76593018 15.30876350]
[171.61706543 4.95246267]
[173.16569519 -0.40935257]
[176.37590027 -4.16169214]
[180.30252075 -5.93264008]
[183.99555969 -5.80424929]
[195.76448059 -15.10439205]
[207.53338623 -24.40453529]
[219.30230713 -33.70467758]
[231.07121277 -43.00482178]
[237.37629700 -60.21798325]
[254.72850037 -62.26795959]
[266.20248413 -71.92961884]
[271.27288818 -87.52523041]
[287.36828613 -90.66681671]
[297.93115234 -78.12257385]
[292.09530640 -62.79694748]
[275.86413574 -60.45562744]
[264.39016724 -50.79397202]
[263.00109863 -38.66596985]
[253.36593628 -30.53034210]
[240.37136841 -31.23590851]
[228.60244751 -21.93576431]
[216.83352661 -12.63562202]
[205.06462097 -3.33547854]
[193.29570007 5.96466446]
[181.97335815 15.80359364]
[171.12222290 26.15989494]
[160.93594360 37.17077255]
[151.45388794 48.79362869]
[141.97184753 60.41648483]
[132.48979187 72.03934479]
[123.00775146 83.66220093]
[113.52570343 95.28505707]
[111.09901428 109.05468750]
[98.09715271 114.19699097]
[88.61510468 125.81984711]
[79.13305664 137.44270325]
[69.65101624 149.06556702]
[71.38896942 160.02847290]
[66.80648041 169.89414978]
[57.68786621 175.40823364]
[47.26562881 174.90504456]
[37.07933807 185.91592407]
[26.89304352 196.92678833]
[16.70675087 207.93766785]
[6.52045822 218.94854736]
[12.22624207 231.98052979]
[12.49972630 246.16069031]
[7.33250284 259.32192993]
[-2.45490599 269.46566772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[35 88]
[36 87]
[37 86]
[38 85]
[40 83]
[41 82]
[42 81]
[43 80]
[44 79]
[45 78]
[50 77]
[51 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
