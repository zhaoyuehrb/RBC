%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:18:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCUGCCCUGCCACUGGGUGUUGGAUGCCACCUUCAGUGAUGGCAGUCUAGGCCAGUGGGUGAAAAACACAUGUGCCACAUAUGCCUUAUCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[86.63639069 122.35499573]
[77.32447052 112.81219482]
[73.95534515 99.91158295]
[59.60548019 95.54335785]
[45.25561142 91.17514038]
[30.71762848 87.48095703]
[16.02316475 84.46884918]
[1.32870340 81.45674133]
[-13.36575890 78.44464111]
[-28.06022072 75.43253326]
[-42.75468445 72.42042542]
[-51.37889862 80.90634155]
[-62.93399048 84.06135559]
[-74.43918610 81.19419861]
[-82.98614502 73.15152740]
[-86.47409821 62.07255554]
[-100.95287323 58.15272522]
[-115.43164825 54.23289871]
[-129.91043091 50.31306839]
[-144.38920593 46.39323807]
[-158.98287964 42.92559433]
[-173.67733765 39.91348648]
[-188.37179565 36.90138245]
[-203.06626892 33.88927460]
[-214.43077087 44.45466995]
[-229.83905029 46.28893661]
[-243.36630249 38.68675995]
[-249.81101990 24.57133675]
[-246.69508362 9.37033081]
[-235.21662903 -1.07115805]
[-219.78936768 -2.73816538]
[-206.34536743 5.01030731]
[-200.05415344 19.19481468]
[-185.35969543 22.20692062]
[-170.66523743 25.21902657]
[-155.97077942 28.23113251]
[-151.42948914 26.29013824]
[-145.60984802 27.31069946]
[-140.46937561 31.91446304]
[-125.99059296 35.83429337]
[-111.51181793 39.75411987]
[-97.03304291 43.67395020]
[-82.55426788 47.59378052]
[-67.42929840 37.51509857]
[-49.39336014 41.58698273]
[-39.74257660 57.72596359]
[-25.04811478 60.73806763]
[-10.35365295 63.75017548]
[4.34080935 66.76228333]
[19.03527069 69.77439117]
[33.72973251 72.78649139]
[36.97029114 71.01058960]
[41.27384186 70.82594299]
[45.82882690 72.73317719]
[49.62383270 76.82527161]
[63.97369766 81.19349670]
[78.32356262 85.56171417]
[91.02948761 75.54878235]
[107.19622803 74.96909332]
[120.58666992 84.04628754]
[126.03480530 99.27838898]
[140.51358032 103.19821930]
[154.99235535 107.11804962]
[169.47113037 111.03787994]
[178.75512695 110.26316071]
[184.33558655 115.31130981]
[198.68545532 119.67953491]
[207.92721558 108.86387634]
[220.57019043 102.43682861]
[234.66764832 101.35057068]
[248.06321716 105.73776245]
[258.72070312 114.89641571]
[265.03363037 127.40194702]
[266.06729126 141.32872009]
[280.27438354 146.14109802]
[294.48144531 150.95349121]
[308.68850708 155.76586914]
[322.89559937 160.57826233]
[337.10266113 165.39064026]
[354.04434204 164.74552917]
[359.35415649 180.84652710]
[345.35229492 190.40603638]
[332.29028320 179.59771729]
[318.08322144 174.78533936]
[303.87612915 169.97294617]
[289.66906738 165.16055298]
[275.46197510 160.34817505]
[261.25491333 155.53578186]
[250.36338806 167.11653137]
[235.47294617 172.84843445]
[219.51223755 171.55043030]
[205.64385986 163.42936707]
[196.63755798 150.04907227]
[194.31723022 134.02940369]
[179.96737671 129.66117859]
[165.55130005 125.51665497]
[151.07252502 121.59682465]
[136.59375000 117.67699432]
[122.11497498 113.75716400]
[112.40886688 122.89873505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 55]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 36]
[22 35]
[23 34]
[24 33]
[61 99]
[62 98]
[63 97]
[64 96]
[66 95]
[67 94]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
