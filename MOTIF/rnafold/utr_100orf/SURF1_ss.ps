%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCCCGGAAGCGCCCGCGGGGCCGGGUGCGAUGGCGGCGGUGGCUGCGUUGCAGCUGGGGCUGCGGGCGGCGGGGCUGGGACGGGCCCCGGCCAGCGCCGCCUGGAGGAGCGUCCUCAGGGUCUCCCCGC\
) } def
/len { sequence length } bind def

/coor [
[75.57687378 123.04299927]
[70.70638275 137.23025513]
[80.35375214 149.26902771]
[81.93826294 164.61479187]
[74.95429993 178.37080383]
[61.63042068 186.14755249]
[46.21823120 185.46351624]
[33.63570023 176.53695679]
[27.89786720 162.21630859]
[30.83565712 147.07125854]
[41.51163101 135.93450928]
[56.51912308 132.35977173]
[61.38961411 118.17250824]
[55.36418152 104.43590546]
[41.62758255 98.41047668]
[27.89098167 92.38504791]
[14.15438175 86.35961151]
[0.41778231 80.33418274]
[-13.31881714 74.30875397]
[-27.05541801 68.28331757]
[-40.79201889 62.25788879]
[-55.36372757 67.76270294]
[-69.20876312 61.45637894]
[-74.36695862 47.53055573]
[-88.10356140 41.50512314]
[-101.84015656 35.47969055]
[-115.57675934 29.45425987]
[-131.32263184 30.99640656]
[-139.86988831 18.79830742]
[-153.60649109 12.77287579]
[-167.34307861 6.74744415]
[-181.07968140 0.72201282]
[-194.81628418 -5.30341864]
[-208.55288696 -11.32884979]
[-222.28948975 -17.35428047]
[-231.50231934 -17.95198059]
[-236.27671814 -23.68766975]
[-249.86718750 -30.03586197]
[-263.45764160 -36.38405609]
[-277.04809570 -42.73224640]
[-293.33007812 -40.77540207]
[-302.94787598 -54.05808640]
[-296.00756836 -68.91620636]
[-279.64868164 -70.06501007]
[-270.69989014 -56.32270050]
[-257.10943604 -49.97451019]
[-243.51898193 -43.62631607]
[-229.92852783 -37.27812576]
[-216.26405334 -31.09088135]
[-202.52745056 -25.06545067]
[-188.79084778 -19.04001808]
[-175.05426025 -13.01458740]
[-161.31765747 -6.98915577]
[-147.58105469 -0.96372432]
[-133.84445190 5.06170702]
[-119.08111572 3.08858061]
[-109.55133057 15.71765995]
[-95.81472778 21.74309158]
[-82.07812500 27.76852226]
[-68.34152985 33.79395294]
[-54.60241318 28.15726089]
[-40.58571243 34.07222366]
[-34.76658630 48.52128983]
[-21.02998543 54.54672241]
[-7.29338646 60.57215118]
[6.44321346 66.59757996]
[20.17981339 72.62301636]
[33.91641235 78.64844513]
[47.65301514 84.67387390]
[61.38961411 90.69931030]
[110.34619904 80.23862457]
[122.90370178 72.03440094]
[135.46119690 63.83018112]
[148.01869202 55.62595749]
[160.57618713 47.42173767]
[167.89732361 33.39635086]
[182.78407288 32.91259766]
[195.34156799 24.70837784]
[207.89907837 16.50415421]
[220.45657349 8.29993248]
[233.01406860 0.09571006]
[236.44883728 -12.40132904]
[247.15625000 -18.96360397]
[259.06289673 -16.51285934]
[271.81066895 -24.41820145]
[284.55844116 -32.32353973]
[294.83279419 -45.80961227]
[310.63604736 -39.67010880]
[309.11126709 -22.78486633]
[292.46377563 -19.57577324]
[279.71603394 -11.67043304]
[266.96826172 -3.76509190]
[259.58010864 12.10792446]
[241.21829224 12.65320683]
[228.66079712 20.85742950]
[216.10328674 29.06165123]
[203.54579163 37.26587296]
[190.98829651 45.47009659]
[184.56535339 58.90866470]
[168.78041077 59.97923279]
[156.22291565 68.18345642]
[143.66542053 76.38768005]
[131.10792542 84.59190369]
[118.55042267 92.79611969]
[116.43164062 107.64572906]
[126.19355774 119.03453827]
[135.95547485 130.42335510]
[143.99661255 134.95916748]
[145.80958557 142.19837952]
[155.29977417 153.81457520]
[164.78997803 165.43078613]
[174.28018188 177.04698181]
[185.26684570 177.52479553]
[193.96640015 183.88447571]
[197.60299683 193.79373169]
[195.18537903 203.84169006]
[204.11642456 215.89309692]
[219.36735535 221.92146301]
[221.50410461 238.18081665]
[208.32858276 247.94491577]
[193.39463806 241.16929626]
[192.06501770 224.82414246]
[183.13397217 212.77273560]
[164.90013123 206.50765991]
[162.66397095 186.53718567]
[153.17378235 174.92097473]
[143.68357849 163.30477905]
[134.19337463 151.68858337]
[124.56665802 140.18527222]
[114.80474091 128.79644775]
[105.04283142 117.40763855]
[97.67633820 118.81648254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[24 60]
[25 59]
[26 58]
[27 57]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[37 48]
[38 47]
[39 46]
[40 45]
[71 104]
[72 103]
[73 102]
[74 101]
[75 100]
[77 98]
[78 97]
[79 96]
[80 95]
[81 94]
[84 92]
[85 91]
[86 90]
[105 131]
[106 130]
[107 129]
[109 128]
[110 127]
[111 126]
[112 125]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
