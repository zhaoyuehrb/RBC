%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGCCGCGCCUGCGCACUGGCCACGCGGACGGCGCGAUGGCGGCGGCUGCCGCCGAGACCCCCGAAGUCCUUCGGGAAUGCGGUUGCAAGGGCAUCCGGACCUGUCUGAUCUGCGAGCGGCAGCGCGGCAGUGACC\
) } def
/len { sequence length } bind def

/coor [
[111.65942383 581.76940918]
[110.64314270 566.80389404]
[109.62685394 551.83837891]
[101.04503632 539.66455078]
[107.82956696 525.37188721]
[106.81327820 510.40634155]
[105.79699707 495.44082642]
[104.78071594 480.47528076]
[103.76442719 465.50973511]
[102.74814606 450.54421997]
[101.73186493 435.57867432]
[98.10982513 429.06347656]
[100.86561584 420.26416016]
[100.18780518 405.27947998]
[99.50999451 390.29479980]
[88.84032440 382.98394775]
[84.28629303 370.66986084]
[87.73249817 357.79895020]
[98.13037109 349.15841675]
[97.79137421 334.16223145]
[89.76842499 321.61306763]
[97.19187164 307.64157104]
[96.85288239 292.64541626]
[83.72323608 285.61132812]
[75.82476044 272.86495972]
[75.36382294 257.77676392]
[82.56430054 244.39579773]
[95.58060455 236.36317444]
[95.24161530 221.36700439]
[94.90261841 206.37083435]
[94.56362915 191.37466431]
[94.22463989 176.37849426]
[93.88564301 161.38232422]
[93.54665375 146.38615417]
[80.21484375 143.67886353]
[67.92575836 137.13504028]
[57.78287506 127.13772583]
[50.75322342 114.38648224]
[47.57703781 99.84988403]
[48.69365692 84.69240570]
[54.19089508 70.18115997]
[41.99613571 61.44686890]
[29.80138016 52.71257401]
[17.60662270 43.97827911]
[5.41186619 35.24398422]
[-6.78289080 26.50968933]
[-23.14747238 25.44549942]
[-30.16454506 10.62346458]
[-20.61554527 -2.70877624]
[-4.32366657 -0.83615661]
[1.95140409 14.31493282]
[14.14616108 23.04922867]
[26.34091759 31.78352165]
[38.53567505 40.51781845]
[50.73043060 49.25211334]
[62.92518997 57.98640823]
[69.67191315 54.71047974]
[63.12005615 41.21702957]
[56.56842041 27.72347069]
[70.06208801 21.17206192]
[76.61350250 34.66517258]
[83.16535950 48.15861893]
[89.91208649 44.88269043]
[90.58989716 29.89801407]
[91.26770782 14.91333580]
[91.94551849 -0.07134204]
[92.62332916 -15.05601978]
[93.30113983 -30.04069710]
[85.27546692 -44.34176636]
[93.87924194 -58.30268097]
[110.26163483 -57.56164551]
[117.56985474 -42.88097763]
[108.28582001 -29.36288643]
[107.60800934 -14.37820911]
[106.93019867 0.60646868]
[106.25238800 15.59114647]
[105.57457733 30.57582474]
[104.89676666 45.56050110]
[112.54273987 48.40878677]
[119.46064758 52.28738403]
[125.51887512 57.04497147]
[130.61427307 62.51465988]
[134.67381287 68.51907349]
[147.25079346 60.34475327]
[159.82777405 52.17042923]
[167.18225098 38.16249847]
[182.07011414 37.71416855]
[194.64709473 29.53984451]
[207.22407532 21.36552048]
[214.17736816 6.51346159]
[230.53723145 5.37894201]
[239.47402954 19.12905884]
[231.79435730 33.61886978]
[215.39839172 33.94250107]
[202.82141113 42.11682510]
[190.24443054 50.29114914]
[183.78953552 63.71439743]
[168.00209045 64.74740601]
[155.42510986 72.92173004]
[142.84812927 81.09605408]
[146.80387878 101.64889526]
[141.41159058 121.87240601]
[127.74825287 137.72738647]
[108.54282379 146.04716492]
[108.88181305 161.04333496]
[109.22080994 176.03950500]
[109.55979919 191.03567505]
[109.89878845 206.03184509]
[110.23778534 221.02801514]
[110.57677460 236.02418518]
[123.94275665 243.46043396]
[131.74052429 256.50234985]
[131.96185303 271.59597778]
[124.64742279 284.68624878]
[111.84904480 292.30642700]
[112.18804169 307.30258179]
[120.23523712 320.92437744]
[112.78754425 333.82324219]
[113.12654114 348.81942749]
[125.97812653 360.62808228]
[126.34825134 377.74044800]
[114.49467468 389.61697388]
[115.17248535 404.60165405]
[115.85029602 419.58633423]
[116.69739532 434.56240845]
[117.71367645 449.52792358]
[118.72996521 464.49346924]
[119.74624634 479.45898438]
[120.76252747 494.42453003]
[121.77881622 509.39007568]
[122.79509735 524.35559082]
[131.44961548 537.59985352]
[124.59239197 550.82208252]
[125.60867310 565.78759766]
[126.62495422 580.75317383]
[136.21211243 594.05798340]
[129.23754883 608.90008545]
[112.87608337 610.01110840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[5 131]
[6 130]
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[13 124]
[14 123]
[15 122]
[19 119]
[20 118]
[22 116]
[23 115]
[28 110]
[29 109]
[30 108]
[31 107]
[32 106]
[33 105]
[34 104]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
[83 100]
[84 99]
[85 98]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
