%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUCUUUUCAGUCGGGCGCUGAGUGGUUUUUCGGAUCAUGUCUGGUGGCUCCGCGGAUUAUAACAGAGAACAUGGCGGCCCAGAGGGAAUGGACCCCGAUGGUGUCAUCGAGAGCAACUGGAAUGAGAUUGUUGAUA\
) } def
/len { sequence length } bind def

/coor [
[191.60868835 206.20118713]
[187.60275269 198.08081055]
[186.49345398 189.05023193]
[188.43353271 180.11625671]
[176.70606995 170.76390076]
[164.97859192 161.41156006]
[153.25111389 152.05921936]
[138.47640991 150.17315674]
[132.51112366 135.51962280]
[120.78366089 126.16727448]
[109.05618286 116.81492615]
[94.64640045 118.33290100]
[83.31803131 109.29882812]
[81.59146881 94.91254425]
[69.86399841 85.56019592]
[58.03232956 76.34001923]
[46.09796143 67.25316620]
[34.16359329 58.16631699]
[22.22922516 49.07946777]
[10.19365692 40.12709045]
[-1.94159842 31.31031036]
[-14.07685375 22.49353218]
[-23.99990273 26.78836250]
[-34.72826767 26.53340721]
[-44.29025269 21.84356308]
[-50.95703125 13.64253044]
[-53.55511856 3.48169184]
[-51.67253494 -6.75313187]
[-63.18720245 -16.36626625]
[-74.70187378 -25.97940063]
[-86.21654510 -35.59253311]
[-97.73121643 -45.20566940]
[-109.24588776 -54.81880188]
[-121.94675446 -62.79928589]
[-135.60391235 -69.00266266]
[-149.26107788 -75.20603943]
[-162.91824341 -81.40941620]
[-176.64414978 -87.45917511]
[-190.43705750 -93.35455322]
[-204.22998047 -99.24992371]
[-218.02288818 -105.14530182]
[-233.38807678 -100.53112030]
[-246.49304199 -109.78528595]
[-247.28477478 -125.80879211]
[-235.15592957 -136.30976868]
[-219.41072083 -133.23278809]
[-212.12751770 -118.93821716]
[-198.33460999 -113.04283905]
[-184.54168701 -107.14746857]
[-170.74876404 -101.25209045]
[-163.30052185 -101.51782227]
[-156.71485901 -95.06658173]
[-143.05769348 -88.86320496]
[-129.40054321 -82.65982819]
[-115.74337769 -76.45644379]
[-123.05478668 -89.55389404]
[-124.08878326 -104.51821899]
[-118.64823914 -118.49678802]
[-107.77027893 -128.82490540]
[-93.52854919 -133.53375244]
[-78.63792419 -131.72567749]
[-65.93695831 -123.74534607]
[-57.84682465 -111.11405182]
[-55.90971756 -96.23965454]
[-60.49491119 -81.95763397]
[-70.72834015 -70.99054718]
[-84.65921783 -65.42902374]
[-99.63275146 -66.33347321]
[-88.11808014 -56.72034073]
[-76.60340881 -47.10720444]
[-65.08873749 -37.49407196]
[-53.57406998 -27.88093758]
[-42.05939865 -18.26780319]
[-22.92201424 -21.51226807]
[-7.24920225 -9.55668354]
[-5.26007462 10.35827637]
[6.87518024 19.17505455]
[19.01043510 27.99183464]
[26.33107567 29.39015961]
[31.31607628 37.14509964]
[43.25044632 46.23194885]
[55.18481445 55.31880188]
[67.11917877 64.40564728]
[74.40660095 65.96788788]
[79.21633911 73.83272552]
[90.94381714 83.18507385]
[105.35359955 81.66709900]
[116.68196869 90.70117188]
[118.40853119 105.08745575]
[130.13600159 114.43980408]
[141.86347961 123.79215240]
[157.47702026 126.34715271]
[162.60346985 140.33174133]
[174.33093262 149.68408203]
[186.05841064 159.03643799]
[197.78588867 168.38877869]
[219.11085510 164.17613220]
[236.49613953 176.75491333]
[239.09620667 197.77493286]
[251.79707336 205.75541687]
[264.49792480 213.73590088]
[277.19879150 221.71638489]
[289.89965820 229.69686890]
[302.60052490 237.67733765]
[315.30139160 245.65782166]
[331.10281372 246.44859314]
[337.76281738 259.77127075]
[350.46368408 267.75177002]
[363.16455078 275.73223877]
[375.95413208 283.56973267]
[388.83087158 291.26321411]
[404.64608765 291.69921875]
[411.60333252 304.86911011]
[424.48007202 312.56259155]
[440.32556152 310.05270386]
[452.06970215 320.98223877]
[450.70339966 336.96701050]
[437.27471924 345.74484253]
[422.08505249 340.58218384]
[416.78656006 325.43933105]
[403.90985107 317.74584961]
[389.01568604 317.86010742]
[381.13739014 304.13995361]
[368.26065063 296.44644165]
[360.84414673 295.70996094]
[355.18405151 288.43310547]
[342.48318481 280.45260620]
[329.78234863 272.47213745]
[314.88934326 272.25219727]
[307.32089233 258.35870361]
[294.62005615 250.37820435]
[281.91918945 242.39772034]
[269.21832275 234.41725159]
[256.51745605 226.43676758]
[243.81658936 218.45628357]
[231.11572266 210.47579956]
[223.66629028 215.22778320]
[215.02391052 217.26733398]
[206.14891052 216.33818054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 96]
[5 95]
[6 94]
[7 93]
[9 91]
[10 90]
[11 89]
[14 86]
[15 85]
[16 83]
[17 82]
[18 81]
[19 80]
[20 78]
[21 77]
[22 76]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 55]
[35 54]
[36 53]
[37 52]
[38 50]
[39 49]
[40 48]
[41 47]
[99 136]
[100 135]
[101 134]
[102 133]
[103 132]
[104 131]
[105 130]
[107 128]
[108 127]
[109 126]
[110 124]
[111 123]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
