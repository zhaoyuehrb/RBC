%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCCUGCGGCCGCUGCCCCUCGUGGUGGUCCCUGGCUUGCUGCAGCUGCUAUUUUGUGACAGUAAGGAAGUGGUGCAUGCCACGGAGGGGCUGGAUU\
) } def
/len { sequence length } bind def

/coor [
[41.13219070 313.43066406]
[34.95437241 314.28128052]
[28.80905151 313.43588257]
[20.45126724 325.89169312]
[12.09348297 338.34750366]
[3.93042040 350.93179321]
[-4.03594637 363.64151001]
[-7.32481670 380.27340698]
[-24.21717262 381.71722412]
[-30.28084183 365.88473511]
[-16.74566650 355.67514038]
[-8.77929974 342.96542358]
[-7.87826490 335.49456787]
[-0.36233658 329.98971558]
[7.99544764 317.53390503]
[16.35323143 305.07809448]
[13.80170918 280.81042480]
[35.06269836 267.57943726]
[40.09544754 253.44891357]
[45.12819672 239.31838989]
[50.16094971 225.18788147]
[55.19369888 211.05737305]
[60.22644806 196.92684937]
[65.25920105 182.79634094]
[70.07158661 168.58926392]
[74.66244507 154.30906677]
[79.25330353 140.02886963]
[83.84416199 125.74867249]
[88.43502045 111.46847534]
[84.41867065 95.25691223]
[96.78665161 84.03287506]
[100.93117523 69.61680603]
[104.85100555 55.13803482]
[108.54518890 40.60004807]
[112.01283264 26.00637054]
[115.25310516 11.36052990]
[107.02072906 -1.86315346]
[110.51545715 -16.66996002]
[123.17295074 -24.43677711]
[126.41321564 -39.08261871]
[129.65348816 -53.72845840]
[132.89375305 -68.37429810]
[136.13401794 -83.02014160]
[139.37428284 -97.66598511]
[142.61454773 -112.31182098]
[134.38218689 -125.53550720]
[137.87690735 -140.34231567]
[150.53440857 -148.10913086]
[153.77467346 -162.75497437]
[142.83177185 -173.62956238]
[139.52758789 -188.69892883]
[144.91647339 -203.15449524]
[157.27883911 -212.38356018]
[172.66990662 -213.44113159]
[186.17845154 -205.98976135]
[193.49392700 -192.40715027]
[192.28201294 -177.02746582]
[182.92941284 -164.75830078]
[168.42051697 -159.51470947]
[165.18025208 -144.86886597]
[173.38012695 -132.48753357]
[170.30267334 -117.58840179]
[157.26039124 -109.07155609]
[154.02012634 -94.42571259]
[150.77986145 -79.77987671]
[147.53959656 -65.13403320]
[144.29933167 -50.48819351]
[141.05906677 -35.84235001]
[137.81878662 -21.19651031]
[146.01867676 -8.81517506]
[142.94122314 6.08394909]
[129.89894104 14.60079670]
[126.65867615 29.24663734]
[128.31646729 36.58675003]
[123.08317566 44.29423141]
[119.38899231 58.83221817]
[120.81770325 66.22033691]
[115.34724426 73.76133728]
[111.20271301 88.17739868]
[116.24295807 98.79952240]
[112.81906128 110.04720306]
[102.71521759 116.05934143]
[98.12435913 130.33953857]
[93.53350067 144.61973572]
[88.94264221 158.89993286]
[84.35178375 173.18013000]
[84.69264984 182.49014282]
[79.38971710 187.82908630]
[74.35696411 201.95960999]
[69.32421112 216.09011841]
[64.29146576 230.22062683]
[59.25871277 244.35115051]
[54.22596359 258.48165894]
[49.19321060 272.61218262]
[53.64387512 277.34851074]
[56.63441467 283.08187866]
[57.95822906 289.37771606]
[57.53427124 295.76428223]
[55.41180420 301.76785278]
[51.76539230 306.94796753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 12]
[7 11]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[31 79]
[32 78]
[33 76]
[34 75]
[35 73]
[36 72]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[48 60]
[49 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
