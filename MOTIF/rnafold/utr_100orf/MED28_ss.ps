%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGAUCUCUCUUGCGCCAUUCCAAACAUGGCGGCUCCACUAGGGGGUAUGUUUUCUGGGCAGCCACCCGGUCCCCCUCAGGCCCCGCCGGGCCUUCCGGGCCAAGCUUCGCUUCUUCAGGCAGCUC\
) } def
/len { sequence length } bind def

/coor [
[81.18199158 120.79364777]
[68.50919342 128.81861877]
[55.83638763 136.84358215]
[43.16358185 144.86854553]
[30.49077988 152.89350891]
[31.73175049 160.89938354]
[30.72688103 168.91093445]
[27.56846428 176.31236267]
[22.51373672 182.53890991]
[15.96399403 187.11996460]
[8.43275070 189.71459961]
[0.50549972 190.13687134]
[-7.20580721 188.36915588]
[-14.10999775 184.56231689]
[-19.68199730 179.02290344]
[-33.54019165 184.76315308]
[-47.39838409 190.50340271]
[-61.25657654 196.24365234]
[-75.11476898 201.98390198]
[-88.97296143 207.72415161]
[-93.50240326 222.69139099]
[-106.62111664 231.20217896]
[-122.13484955 229.23796082]
[-132.71849060 217.72621155]
[-133.37477112 202.10240173]
[-123.79380798 189.74362183]
[-108.49944305 186.48532104]
[-94.71321106 193.86596680]
[-80.85501862 188.12571716]
[-66.99682617 182.38546753]
[-53.13863373 176.64520264]
[-39.28044128 170.90495300]
[-25.42224884 165.16470337]
[-19.43077278 143.48385620]
[0.67406005 132.83326721]
[22.46581650 140.22070312]
[35.13861847 132.19573975]
[47.81142426 124.17077637]
[60.48422623 116.14581299]
[73.15702820 108.12084198]
[71.05136871 92.54405975]
[77.83798981 77.27518463]
[92.44000244 67.27061462]
[86.69974518 53.41241837]
[80.95949554 39.55422592]
[75.04961395 25.76751900]
[68.97099304 12.05437279]
[62.89237595 -1.65877366]
[56.48683929 -8.32165527]
[56.83744812 -15.78384972]
[51.09719849 -29.64204216]
[45.35694504 -43.50023651]
[39.61669540 -57.35842896]
[33.87644196 -71.21662140]
[22.22897911 -83.53623962]
[30.84280205 -98.13892365]
[47.25934982 -93.90415955]
[47.73463440 -76.95687103]
[53.47488785 -63.09867859]
[59.21513748 -49.24048615]
[64.95539093 -35.38229370]
[70.69564056 -21.52410126]
[76.60552216 -7.73739338]
[82.68414307 5.97575283]
[88.76276398 19.68889999]
[94.40899658 24.58045769]
[94.81768799 33.81397629]
[100.55793762 47.67216873]
[106.29819489 61.53036118]
[120.35827637 66.75664520]
[133.75663757 60.01247025]
[147.15499878 53.26830292]
[160.55337524 46.52413177]
[173.95173645 39.77996063]
[174.34034729 27.16504097]
[180.06072998 15.99644089]
[189.95536804 8.39775181]
[202.07995605 5.78377008]
[214.08523560 8.59739399]
[223.67222595 16.23598289]
[237.38537598 10.15736294]
[251.09852600 4.07874298]
[264.81167603 -1.99987650]
[278.52481079 -8.07849598]
[292.23797607 -14.15711594]
[301.45635986 -27.72005844]
[317.78933716 -26.24848366]
[324.43493652 -11.25622272]
[314.55676270 1.83397162]
[298.31658936 -0.44396961]
[284.60342407 5.63465023]
[270.89028931 11.71327019]
[257.17715454 17.79188919]
[243.46398926 23.87051010]
[229.75085449 29.94912910]
[226.92193604 47.29600906]
[214.19015503 59.63790512]
[196.45462036 61.96673584]
[180.69590759 53.17832565]
[167.29754639 59.92249680]
[153.89916992 66.66666412]
[140.50080872 73.41083527]
[127.10244751 80.15500641]
[130.80641174 100.83893585]
[121.69195557 117.77503967]
[130.32908630 130.03881836]
[138.96620178 142.30258179]
[147.60333252 154.56636047]
[153.58390808 157.76631165]
[156.52987671 162.78170776]
[156.34591675 167.65055847]
[164.37088013 180.32336426]
[172.39584351 192.99617004]
[180.42080688 205.66897583]
[195.18955994 212.79748535]
[196.13046265 229.16961670]
[182.27558899 237.94313049]
[167.87763977 230.09257507]
[167.74800110 213.69393921]
[159.72303772 201.02113342]
[151.69807434 188.34832764]
[143.67311096 175.67552185]
[135.33955383 163.20347595]
[126.70243073 150.93971252]
[118.06530762 138.67593384]
[109.42818451 126.41216278]
[99.53416443 128.04061890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[43 69]
[44 68]
[45 67]
[46 65]
[47 64]
[48 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[70 103]
[71 102]
[72 101]
[73 100]
[74 99]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[105 126]
[106 125]
[107 124]
[108 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
