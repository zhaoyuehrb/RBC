%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCGGCGGCCGCGGCGGCCGUCGGGGGCCAGCAGCCGUCACAGCCCGAGCUGCCCGCGCCGGGGCUGGCCCUAGACAAGGCGGCCACCGCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[50.76100922 573.87548828]
[39.99968338 562.30096436]
[40.65818024 546.51037598]
[52.34582138 535.87207031]
[52.81232071 520.87927246]
[53.27882004 505.88656616]
[53.74531555 490.89379883]
[54.21181488 475.90106201]
[54.67831421 460.90832520]
[55.14480972 445.91558838]
[47.80706787 432.95382690]
[55.96981049 419.40097046]
[56.43630981 404.40823364]
[56.90280533 389.41546631]
[57.36930466 374.42272949]
[57.83580017 359.42999268]
[58.30229950 344.43725586]
[48.59035492 339.86984253]
[40.99053192 332.23706055]
[36.43249130 322.43515015]
[35.48655319 311.62783813]
[38.29242706 301.10821533]
[44.53933716 292.14401245]
[53.50020599 285.82479858]
[64.11618805 282.92959595]
[66.43966675 268.11065674]
[68.76313782 253.29168701]
[63.09065247 239.51953125]
[72.87219238 227.08442688]
[75.19566345 212.26545715]
[77.51913452 197.44650269]
[79.84260559 182.62754822]
[82.16607666 167.80859375]
[84.48955536 152.98963928]
[86.81302643 138.17068481]
[89.13649750 123.35172272]
[91.45996857 108.53276825]
[85.90999603 122.46825409]
[73.87940979 131.42732239]
[58.93798065 132.75160217]
[45.51919937 126.04815674]
[37.60474777 113.30603790]
[37.54303741 98.30616760]
[45.35237885 85.49936676]
[58.71554947 78.68572235]
[73.66976166 79.88791656]
[74.60230255 64.91693115]
[75.53485107 49.94594574]
[76.46739197 34.97496414]
[68.68608856 20.53947449]
[77.52603912 6.72689772]
[93.89346313 7.74642658]
[100.95095825 22.54925728]
[91.43837738 35.90750885]
[90.50583649 50.87849045]
[89.57328796 65.84947205]
[88.64074707 80.82045746]
[102.33759308 86.93571472]
[112.86139679 76.24695587]
[123.38520050 65.55819702]
[133.90899658 54.86943436]
[140.71299744 39.34069061]
[157.51841736 41.58000565]
[160.01881409 58.34855652]
[144.59776306 65.39323425]
[134.07395935 76.08200073]
[123.55015564 86.77075958]
[113.02635193 97.45951843]
[106.27893066 110.85623932]
[103.95545197 125.67520142]
[101.63198090 140.49415588]
[99.30850983 155.31311035]
[96.98503876 170.13206482]
[94.66156006 184.95101929]
[92.33808899 199.76997375]
[90.01461792 214.58894348]
[87.69114685 229.40789795]
[93.19744110 244.24000549]
[83.58209229 255.61515808]
[81.25862122 270.43411255]
[78.93515015 285.25308228]
[93.78770447 298.30328369]
[97.99871063 317.47814941]
[90.09425354 335.29574585]
[73.29504395 344.90374756]
[72.82854462 359.89648438]
[72.36204529 374.88922119]
[71.89555359 389.88198853]
[71.42905426 404.87472534]
[70.96255493 419.86746216]
[78.26692963 433.90158081]
[70.13755798 446.38208008]
[69.67105865 461.37481689]
[69.20455933 476.36755371]
[68.73806000 491.36032104]
[68.27156067 506.35305786]
[67.80506134 521.34582520]
[67.33856964 536.33856201]
[78.34221649 547.68292236]
[78.01774597 563.48388672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[25 81]
[26 80]
[27 79]
[29 77]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[46 57]
[47 56]
[48 55]
[49 54]
[58 68]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
