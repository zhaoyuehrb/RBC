%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAUCGUUAGCUUCUCCUGAUAAACUAAUUGCCUCACAUUGUCACUGCAAAUCGACACCUAUUAAUGGGUCUCACCUCCCAACUGCUUCCCCCUCUGUUCUUCCUGCUAGCAUGUGCCGGCAACUUUGUCCACGGACACAAGUGCGAUAUCACCUUACAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[52.22225952 399.70773315]
[41.86719894 406.01391602]
[37.93923187 420.49050903]
[47.01607132 433.22412109]
[45.73279572 448.80895996]
[34.69532776 459.88632202]
[19.11522102 461.22586060]
[6.34892797 452.19503784]
[2.42430019 437.05795288]
[9.19442749 422.96185303]
[23.46266365 416.56253052]
[27.39063072 402.08596802]
[21.98046875 385.41149902]
[35.09644318 372.51568604]
[38.74975204 357.96737671]
[42.40306091 343.41906738]
[46.05636597 328.87075806]
[49.70967484 314.32244873]
[53.36297989 299.77413940]
[57.01628876 285.22583008]
[43.67576599 277.05728149]
[33.49454117 265.15585327]
[27.47555161 250.67546082]
[26.21740341 235.02502441]
[29.85484505 219.73132324]
[38.04446030 206.28999329]
[49.99704742 196.01936340]
[64.55365753 189.93107605]
[80.29797363 188.63047791]
[83.67530823 174.01564026]
[87.05265045 159.40080261]
[90.42998505 144.78594971]
[93.80732727 130.17111206]
[83.83670807 141.37765503]
[74.46284485 153.08795166]
[60.21183395 157.76861572]
[45.72013474 153.89685059]
[35.70251465 142.73228455]
[33.41814041 127.90725708]
[39.60922623 114.24610138]
[54.31852341 111.30729675]
[40.00096130 106.83432770]
[25.68340111 102.36135864]
[11.36583996 97.88838959]
[0.12390727 108.35330963]
[-14.84793949 111.77958679]
[-29.52234840 107.24557495]
[-39.95197678 95.97089386]
[-43.33131027 80.98838043]
[-38.75131989 66.32825470]
[-27.44400406 55.93401718]
[-12.45097160 52.60166550]
[2.19472575 57.22758484]
[12.55346870 68.56742859]
[15.83880901 83.57083130]
[30.15637016 88.04380035]
[44.47393036 92.51676941]
[58.79149246 96.98973846]
[64.04437256 91.63648987]
[53.33787918 81.13072968]
[42.63138962 70.62496185]
[31.92507172 60.11902618]
[42.43119049 49.41288376]
[53.13714981 59.91847229]
[63.84364319 70.42423248]
[74.55013275 80.93000031]
[79.80301666 75.57675171]
[75.05989838 61.34640121]
[70.31678772 47.11605072]
[65.57366943 32.88570023]
[50.74009323 28.33107758]
[41.44355392 15.90715027]
[41.25875854 0.39117530]
[50.25676727 -12.25063896]
[64.97766113 -17.15725708]
[79.76095581 -12.44198418]
[88.92217255 0.08206069]
[88.93863678 15.59912682]
[79.80402374 28.14258575]
[84.54713440 42.37293625]
[89.29025269 56.60328674]
[94.03336334 70.83363342]
[100.83399963 73.99612427]
[103.49391937 59.23384857]
[106.15383911 44.47156906]
[108.81375885 29.70929337]
[111.47367859 14.94701481]
[114.13359070 0.18473767]
[111.61793518 -14.60280609]
[114.99189758 -29.21842575]
[123.73489380 -41.40694427]
[136.49787903 -49.28768539]
[151.31155396 -51.64465714]
[165.89015198 -48.11418152]
[177.98423767 -39.24100876]
[185.72769165 -26.39425659]
[187.92568970 -11.55617237]
[184.23912048 2.98374271]
[175.23678589 14.98199368]
[162.30796814 22.58718491]
[152.73342896 34.13396835]
[143.15888977 45.68075180]
[133.58435059 57.22753525]
[124.00981903 68.77431488]
[114.43527985 80.32109833]
[121.23591614 83.48358917]
[135.17417908 77.94061279]
[149.11245728 72.39763641]
[163.05072021 66.85466003]
[173.01492310 54.56541443]
[187.70051575 57.05192184]
[201.63877869 51.50894547]
[211.37551880 38.31318665]
[227.63925171 40.41620255]
[233.69926453 55.65458679]
[223.32151794 68.35239410]
[207.18176270 65.44721985]
[193.24348450 70.99019623]
[184.27626038 82.88296509]
[168.59370422 80.79293060]
[154.65544128 86.33590698]
[140.71716309 91.87888336]
[126.77889252 97.42185974]
[126.92082977 112.42118835]
[140.96150208 117.69940186]
[155.00216675 122.97762299]
[169.04284668 128.25582886]
[183.13282776 133.40095520]
[197.27087402 138.41252136]
[211.40892029 143.42408752]
[225.54695129 148.43563843]
[241.56523132 144.92178345]
[252.41604614 157.21780396]
[246.93701172 172.67459106]
[230.76449585 175.39154053]
[220.53540039 162.57368469]
[206.39735413 157.56211853]
[192.25930786 152.55055237]
[178.12126160 147.53900146]
[170.73355103 148.27136230]
[163.76463318 142.29650879]
[149.72395325 137.01829529]
[135.68328857 131.74008179]
[121.64261627 126.46186066]
[108.42216492 133.54846191]
[105.04483032 148.16329956]
[101.66748810 162.77813721]
[98.29015350 177.39297485]
[94.91281128 192.00781250]
[107.40639496 199.20747375]
[117.34896088 209.62910461]
[123.93855286 222.41908264]
[126.64733887 236.53326416]
[125.26388550 250.82228088]
[119.90965271 264.12509155]
[111.02835083 275.36334229]
[99.34922791 283.62878418]
[85.82715607 288.25662231]
[71.56459808 288.87911987]
[67.91129303 303.42742920]
[64.25798798 317.97573853]
[60.60467911 332.52404785]
[56.95137024 347.07235718]
[53.29806137 361.62066650]
[49.64475632 376.16897583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[14 165]
[15 164]
[16 163]
[17 162]
[18 161]
[19 160]
[20 159]
[29 149]
[30 148]
[31 147]
[32 146]
[33 145]
[41 58]
[42 57]
[43 56]
[44 55]
[67 82]
[68 81]
[69 80]
[70 79]
[106 123]
[107 122]
[108 121]
[109 120]
[111 118]
[112 117]
[124 144]
[125 143]
[126 142]
[127 141]
[128 139]
[129 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
