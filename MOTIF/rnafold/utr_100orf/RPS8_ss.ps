%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUCCAGCCAGCGCCGAGCGAUGGGCAUCUCUCGGGACAACUGGCACAAGCGCCGCAAAACCGGGGGCAAGAGAAAGCCCUACCACAAGAAGCGGAAGUAUGAGUUGGGGCGCCCAGCUG\
) } def
/len { sequence length } bind def

/coor [
[102.87922668 159.45384216]
[91.22171783 168.89326477]
[76.56975555 172.10572815]
[62.03226089 168.40960693]
[50.69387436 158.58917236]
[44.96043015 144.72816467]
[46.04847717 129.76766968]
[53.72714996 116.88209534]
[66.36714935 108.80556488]
[81.28626251 107.25175476]
[66.36322021 108.76927948]
[51.44018173 110.28680420]
[36.51713943 111.80432892]
[21.59410095 113.32185364]
[9.90496826 129.52992249]
[-9.61450768 132.06159973]
[-24.58740425 119.75329590]
[-39.35213089 122.39958954]
[-54.11685562 125.04589081]
[-68.88158417 127.69218445]
[-83.64630890 130.33848572]
[-95.86501312 140.38903809]
[-109.75766754 135.01844788]
[-124.52239227 137.66474915]
[-139.28712463 140.31103516]
[-151.46408081 151.29528809]
[-166.97969055 145.98512268]
[-169.87283325 129.84320068]
[-157.16726685 119.47493744]
[-141.93341064 125.54631042]
[-127.16869354 122.90001678]
[-112.40396118 120.25372314]
[-101.24133301 110.39244080]
[-86.29260254 115.57375336]
[-71.52787781 112.92745972]
[-56.76315308 110.28116608]
[-41.99842834 107.63486481]
[-27.23370171 104.98857117]
[-23.77674866 95.11555481]
[-16.43313217 87.55197906]
[-6.51443243 83.74691010]
[4.16608047 84.46924591]
[13.62488651 89.65338898]
[20.07657623 98.39881897]
[34.99961472 96.88129425]
[49.92265701 95.36376953]
[64.84569550 93.84624481]
[79.76873779 92.32872009]
[92.29662323 82.74466705]
[105.82137299 84.92844391]
[116.42797852 74.32183838]
[120.71507263 59.09254837]
[135.18571472 55.56410599]
[145.79231262 44.95750427]
[150.08430481 27.10502625]
[167.12297058 23.11268044]
[177.45747375 12.24078846]
[187.79197693 1.36889625]
[198.12648010 -9.50299549]
[190.16787720 -24.67302322]
[187.81655884 -41.61725998]
[191.33374023 -58.33350754]
[200.28816223 -72.85214233]
[213.60891724 -83.46817780]
[229.71347046 -88.94149780]
[246.69570923 -88.64167023]
[262.55151367 -82.62057495]
[272.03063965 -94.24580383]
[281.50976562 -105.87104034]
[290.98889160 -117.49627686]
[300.46804810 -129.12150574]
[296.37252808 -144.08836365]
[301.88796997 -158.59213257]
[314.89355469 -167.05584717]
[330.38836670 -166.22502136]
[342.41433716 -156.41912842]
[346.34725952 -141.40873718]
[340.67480469 -126.96564484]
[327.57815552 -118.64351654]
[312.09326172 -119.64237976]
[302.61413574 -108.01714325]
[293.13500977 -96.39191437]
[283.65588379 -84.76667786]
[274.17675781 -73.14144135]
[281.59838867 -62.42203903]
[285.95895386 -50.12052917]
[286.94747925 -37.09286499]
[284.48785400 -24.24750710]
[278.74468994 -12.48207378]
[270.11233521 -2.62061739]
[259.18774414 4.64408731]
[246.72920227 8.79921436]
[233.60375977 9.54807949]
[220.72683716 6.83131552]
[208.99838257 0.83150816]
[198.66386414 11.70339966]
[188.32936096 22.57529259]
[177.99485779 33.44718552]
[177.96752930 45.61511230]
[169.34687805 54.76372147]
[156.39891052 55.56410599]
[145.79231262 66.17070770]
[142.26387024 80.64134216]
[127.03457642 84.92844391]
[116.42797852 95.53504181]
[114.34455872 110.38964844]
[121.62409210 123.50485229]
[128.90362549 136.62005615]
[136.18315125 149.73524475]
[143.46267700 162.85044861]
[150.74220276 175.96565247]
[158.02174377 189.08084106]
[170.99510193 199.99543762]
[164.09843445 215.48324585]
[147.30670166 213.14356995]
[144.90653992 196.36038208]
[137.62701416 183.24517822]
[130.34747314 170.12997437]
[123.06794739 157.01478577]
[115.78842163 143.89958191]
[108.50888824 130.78437805]
[101.22936249 117.66918182]
[108.47692108 130.80207825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[23 32]
[24 31]
[25 30]
[50 105]
[51 104]
[53 102]
[54 101]
[56 98]
[57 97]
[58 96]
[59 95]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
