%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGGCACUCAGGGCAAAGGCAGAGGUGUGCGUGGCAGCGCCCUGGCUGUCCCUGCAAAGGGCACGGGCACUGGGCACUAGAGCCGCUCGGGCCCCUAGGA\
) } def
/len { sequence length } bind def

/coor [
[209.96499634 212.48527527]
[201.59434509 211.40882874]
[193.52536011 208.91789246]
[185.99537659 205.08387756]
[179.22619629 200.01777649]
[173.41754150 193.86685181]
[168.74118042 186.81044006]
[165.33583069 179.05465698]
[163.30303955 170.82644653]
[162.70417786 162.36688232]
[163.55857849 153.92413330]
[165.84289551 145.74613953]
[152.77766418 138.37733459]
[139.71241760 131.00851440]
[126.64717865 123.63968658]
[113.58193970 116.27087402]
[101.76699829 121.12079620]
[89.31043243 118.30146027]
[80.73540497 108.83660889]
[79.15562439 96.16305542]
[66.31890106 88.40299225]
[50.50617599 87.88507843]
[43.61721420 74.67933655]
[30.78049469 66.91927338]
[17.94377518 59.15920639]
[8.81575203 57.34703827]
[4.84155512 50.96591187]
[-7.75493050 42.82167816]
[-20.35141563 34.67744446]
[-32.94790268 26.53320885]
[-45.66595459 18.58015060]
[-58.50267410 10.82008266]
[-71.33939362 3.06001592]
[-88.02222443 0.04017793]
[-89.73867035 -16.82665825]
[-74.00615692 -23.14522934]
[-63.57932281 -9.77670288]
[-50.74260712 -2.01663613]
[-37.90588760 5.74343109]
[-30.42891884 6.52313423]
[-24.80366516 13.93672276]
[-12.20718098 22.08095741]
[0.38930446 30.22519302]
[12.98578930 38.36942673]
[25.70384216 46.32248688]
[38.54056168 54.08255386]
[51.37728119 61.84262085]
[66.27184296 61.80548096]
[74.07897186 75.56626892]
[86.91568756 83.32633972]
[102.76090240 78.98601532]
[116.94721222 87.27199554]
[120.95075226 103.20562744]
[134.01599121 110.57444763]
[147.08123779 117.94326782]
[160.14646912 125.31208801]
[173.21171570 132.68090820]
[191.91918945 118.17968750]
[215.16641235 114.02718353]
[237.63334656 121.12223816]
[254.20240784 137.79562378]
[261.12411499 160.20242310]
[276.06256104 161.55990601]
[291.00100708 162.91738892]
[305.93945312 164.27487183]
[320.38323975 157.81822205]
[332.35806274 166.67558289]
[347.29650879 168.03306580]
[362.23495483 169.39054871]
[377.17340088 170.74803162]
[392.11184692 172.10551453]
[396.31951904 169.93740845]
[400.56127930 169.39192200]
[404.28881836 170.26019287]
[407.08966064 172.16711426]
[408.73181152 174.63502502]
[423.39770508 177.78324890]
[438.06362915 180.93145752]
[451.19775391 172.14114380]
[466.68426514 175.29460144]
[475.33520508 188.52096558]
[472.01818848 203.97323608]
[458.70111084 212.48388672]
[443.28475952 209.00367737]
[434.91540527 195.59736633]
[420.24951172 192.44914246]
[405.58358765 189.30093384]
[390.75436401 187.04396057]
[375.81591797 185.68647766]
[360.87747192 184.32899475]
[345.93902588 182.97151184]
[331.00057983 181.61402893]
[317.62530518 188.16777039]
[304.58197021 179.21331787]
[289.64352417 177.85583496]
[274.70507812 176.49835205]
[259.76663208 175.14086914]
[257.07330322 183.09571838]
[253.05921936 190.47860718]
[247.84068298 197.07203674]
[241.56945801 202.68139648]
[234.42846680 207.14073181]
[226.62634277 210.31768799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 57]
[13 56]
[14 55]
[15 54]
[16 53]
[20 50]
[21 49]
[23 47]
[24 46]
[25 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 39]
[32 38]
[33 37]
[62 97]
[63 96]
[64 95]
[65 94]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
