%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGUGCAGGGGGCGGGCCCGGGACGCAGCGGCUGUGGAGCUCCUCCUGCUGGGAGGCUGCCCCAGGACCCAGCACGUGCGCAGCGGCCAUGGCUUCCUCAAUUAUCUGCCAGGAGCACUGCCAGAUCUCGGGCCAGGCAAAAAUAGACAUCUUAUUAGUUGGAGAUGUCACUGUGGGCUACCUGGCUG\
) } def
/len { sequence length } bind def

/coor [
[90.98390961 142.50350952]
[77.23153687 137.00588989]
[66.12467194 127.20847321]
[58.95385361 114.24964905]
[56.55226517 99.63513184]
[41.79969025 96.92192078]
[32.77508926 98.44866943]
[26.82650185 94.03997040]
[12.12080193 91.08321381]
[-2.58489799 88.12645721]
[-17.29059792 85.16970062]
[-31.99629784 82.21294403]
[-46.70199585 79.25619507]
[-61.40769577 76.29943848]
[-80.18203735 83.60785675]
[-94.14801025 70.24983978]
[-108.94343567 67.78092194]
[-123.73885345 65.31200409]
[-132.73696899 66.98774719]
[-138.75764465 62.67800522]
[-153.51022339 59.96479797]
[-164.76002502 70.48849487]
[-179.87274170 72.34832764]
[-193.02716064 65.03907013]
[-199.28036499 51.54701996]
[-214.03294373 48.83380890]
[-228.78552246 46.12060165]
[-243.53810120 43.40739441]
[-252.56269836 44.93413925]
[-258.51129150 40.52544022]
[-273.21697998 37.56868362]
[-287.94662476 34.73360443]
[-302.69921875 32.02039719]
[-317.45178223 29.30718994]
[-332.20434570 26.59398079]
[-347.05645752 24.49274063]
[-361.98269653 23.00705719]
[-376.90893555 21.52137566]
[-391.40759277 27.85378456]
[-403.30593872 18.89394951]
[-418.23217773 17.40826797]
[-434.82153320 25.38131905]
[-448.67187500 14.61718559]
[-463.62063599 13.37849522]
[-478.56939697 12.13980579]
[-493.51818848 10.90111542]
[-508.46694946 9.66242504]
[-523.41571045 8.42373466]
[-539.70007324 13.14143753]
[-548.74133301 -1.20051014]
[-537.46276855 -13.85870647]
[-522.17700195 -6.52503252]
[-507.22824097 -5.28634214]
[-492.27947998 -4.04765224]
[-477.33071899 -2.80896187]
[-462.38195801 -1.57027173]
[-447.43319702 -0.33158159]
[-437.99218750 -7.91226339]
[-425.51730347 -6.99107075]
[-416.74652100 2.48202348]
[-401.82025146 3.96770644]
[-388.38922119 -2.47096944]
[-375.42324829 6.59513140]
[-360.49700928 8.08081436]
[-345.57077026 9.56649685]
[-352.81958008 -3.56569982]
[-347.22927856 -17.48504829]
[-332.91088867 -21.95536232]
[-320.39407349 -13.68920803]
[-318.88357544 1.23454762]
[-329.49114990 11.84140491]
[-314.73858643 14.55461311]
[-299.98599243 17.26782036]
[-285.23342896 19.98102951]
[-278.07333374 18.09541321]
[-270.26022339 22.86298370]
[-255.55453491 25.81974030]
[-240.82489014 28.65481758]
[-226.07231140 31.36802673]
[-211.31973267 34.08123398]
[-196.56716919 36.79444122]
[-185.92274475 26.41010284]
[-171.02850342 24.25939560]
[-157.56640625 31.37454033]
[-150.79701233 45.21222305]
[-136.04443359 47.92543030]
[-121.26993561 50.51658249]
[-106.47451019 52.98550034]
[-91.67909241 55.45441818]
[-83.91211700 48.78086853]
[-73.53505707 47.46611023]
[-63.95468521 52.18573380]
[-58.45093918 61.59373856]
[-43.74523926 64.55049133]
[-29.03954124 67.50724792]
[-14.33384228 70.46400452]
[0.37185749 73.42076111]
[15.07755661 76.37751770]
[29.78325653 79.33426666]
[44.51289749 82.16934967]
[59.26547241 84.88255310]
[69.40197754 69.15198517]
[85.21450806 59.14381409]
[103.76979065 56.71458054]
[121.62576294 62.31492233]
[131.22529602 50.78890610]
[140.82482910 39.26288986]
[150.42434692 27.73687363]
[160.02388000 16.21085739]
[162.91020203 0.65516078]
[177.00061035 -4.17286015]
[186.60014343 -15.69887733]
[196.19966125 -27.22489357]
[196.18049622 -43.26793671]
[208.80096436 -53.17264557]
[224.37973022 -49.34097672]
[230.96609497 -34.71225739]
[223.50756836 -20.50839043]
[207.72567749 -17.62536621]
[198.12615967 -6.09934902]
[188.52662659 5.42666769]
[186.32691956 20.15794563]
[171.54989624 25.81038475]
[161.95036316 37.33640289]
[152.35084534 48.86241913]
[142.75131226 60.38843536]
[133.15177917 71.91445160]
[138.51440430 79.88834381]
[141.99316406 88.84596252]
[143.41789246 98.34915924]
[142.71890259 107.93311310]
[139.93037415 117.12902832]
[152.48786926 125.33325195]
[165.04537964 133.53747559]
[177.60287476 141.74169922]
[190.16036987 149.94592285]
[202.71786499 158.15014648]
[215.27536011 166.35435486]
[229.12681580 157.83403015]
[245.24914551 156.20867920]
[260.41329956 161.75286865]
[271.60437012 173.31034851]
[276.62091064 188.53472900]
[274.50790405 204.36576843]
[287.19934082 212.36125183]
[299.89077759 220.35671997]
[312.71264648 228.14126587]
[325.66149902 235.71275330]
[338.61035156 243.28422546]
[351.55920410 250.85571289]
[364.50805664 258.42718506]
[377.45687866 265.99868774]
[390.40573120 273.57015991]
[403.35458374 281.14163208]
[417.51007080 274.78543091]
[432.69128418 277.99645996]
[443.06069946 289.54006958]
[444.63110352 304.97747803]
[436.79861450 318.37268066]
[422.57501221 324.57498169]
[407.42953491 321.19943237]
[397.18594360 309.54403687]
[395.78311157 294.09048462]
[382.83425903 286.51901245]
[369.88540649 278.94754028]
[356.93655396 271.37603760]
[343.98770142 263.80456543]
[331.03887939 256.23309326]
[318.09002686 248.66159058]
[305.14117432 241.09011841]
[300.36019897 241.41831970]
[295.32528687 238.73423767]
[291.89529419 233.04815674]
[279.20385742 225.05267334]
[266.51242065 217.05720520]
[255.12492371 224.99774170]
[241.52742004 228.00453186]
[227.76821899 225.59078979]
[215.93289185 218.08882141]
[207.82817078 206.60473633]
[204.70620728 192.85539246]
[207.07113647 178.91186523]
[194.51364136 170.70764160]
[181.95614624 162.50341797]
[169.39865112 154.29919434]
[156.84115601 146.09497070]
[144.28366089 137.89074707]
[131.72615051 129.68652344]
[119.91181946 138.61810303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 101]
[6 100]
[8 99]
[9 98]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[16 89]
[17 88]
[18 87]
[20 86]
[21 85]
[25 81]
[26 80]
[27 79]
[28 78]
[30 77]
[31 76]
[32 74]
[33 73]
[34 72]
[35 71]
[36 65]
[37 64]
[38 63]
[40 61]
[41 60]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
[111 121]
[112 120]
[113 119]
[132 188]
[133 187]
[134 186]
[135 185]
[136 184]
[137 183]
[138 182]
[144 175]
[145 174]
[146 173]
[147 170]
[148 169]
[149 168]
[150 167]
[151 166]
[152 165]
[153 164]
[154 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
