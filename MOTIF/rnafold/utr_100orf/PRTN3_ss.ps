%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGGGUGCACCCUGGACCCCACCAUGGCUCACCGGCCCCCCAGCCCUGCCCUGGCGUCCGUGCUGCUGGCCUUGCUGCUGAGCGGUGCUGCCCGAGCUGCGGAGAUCGUGGGCGGGCACGAGG\
) } def
/len { sequence length } bind def

/coor [
[4.38450670 194.10350037]
[-6.25907183 186.00399780]
[-18.71800995 194.35713196]
[-25.87166214 208.46867371]
[-40.75159836 209.12960815]
[-53.21053696 217.48274231]
[-65.66947174 225.83587646]
[-78.12841034 234.18901062]
[-81.30863190 249.43775940]
[-94.06275940 257.73153687]
[-108.58049774 254.60571289]
[-121.03943634 262.95886230]
[-128.19308472 277.07040405]
[-143.07302856 277.73132324]
[-155.53196716 286.08447266]
[-167.99090576 294.43759155]
[-170.80352783 309.98959351]
[-183.83673096 318.92892456]
[-199.35812378 315.95202637]
[-208.15914917 302.82504272]
[-205.01831055 287.33599854]
[-191.79901123 278.67425537]
[-176.34403992 281.97866821]
[-163.88510132 273.62551880]
[-151.42616272 265.27239990]
[-145.16365051 251.75831604]
[-129.39257812 250.49990845]
[-116.93363190 242.14677429]
[-114.31172943 227.52961731]
[-101.79558563 218.88087463]
[-86.48154449 221.73007202]
[-74.02260590 213.37693787]
[-61.56367111 205.02380371]
[-49.10473251 196.67066956]
[-42.84222412 183.15660095]
[-27.07114410 181.89819336]
[-14.61220646 173.54505920]
[-18.27664375 157.40115356]
[-15.49983311 141.04415894]
[-6.67426300 126.95221710]
[6.88903332 117.27110291]
[23.15517044 113.48742676]
[39.67068100 116.20043945]
[53.93357468 125.02732849]
[65.95708466 116.05875397]
[77.98058319 107.09017944]
[90.00408936 98.12160492]
[94.12637329 91.08143616]
[102.44432831 89.08324432]
[114.68941498 80.41965485]
[126.93450928 71.75605774]
[139.17959595 63.09247208]
[151.31484985 54.27569199]
[163.33834839 45.30711746]
[175.36186218 36.33854294]
[177.77189636 20.94927788]
[190.09320068 12.02514648]
[204.74966431 14.41758728]
[216.77316284 5.44901323]
[228.79667664 -3.51956177]
[240.82017517 -12.48813629]
[252.84368896 -21.45671082]
[264.75354004 -30.57566643]
[276.54785156 -39.84355927]
[288.34219360 -49.11145401]
[288.40951538 -62.64720154]
[296.17678833 -73.49347687]
[308.60076904 -77.78826141]
[321.03323364 -74.16354370]
[333.05673218 -83.13211823]
[345.08026123 -92.10069275]
[347.49029541 -107.48995972]
[359.81158447 -116.41409302]
[374.46804810 -114.02165222]
[386.49154663 -122.99022675]
[398.51507568 -131.95880127]
[410.53857422 -140.92736816]
[422.56207275 -149.89595032]
[434.58557129 -158.86451721]
[443.66656494 -173.18136597]
[459.93777466 -168.41856384]
[459.86541748 -151.46476746]
[443.55413818 -146.84101868]
[431.53063965 -137.87243652]
[419.50714111 -128.90386963]
[407.48364258 -119.93529510]
[395.46014404 -110.96672058]
[383.43661499 -101.99814606]
[381.55245972 -87.26771545]
[369.48666382 -78.00102997]
[354.04882812 -80.07719421]
[342.02532959 -71.10861206]
[330.00183105 -62.14004135]
[328.33145142 -45.45629501]
[314.88040161 -34.89236450]
[297.61007690 -37.31712723]
[285.81576538 -28.04923248]
[274.02142334 -18.78133965]
[270.66857910 -12.10011196]
[261.81225586 -9.43320656]
[249.78875732 -0.46463171]
[237.76524353 8.50394344]
[225.74174500 17.47251701]
[213.71823120 26.44109344]
[211.83407593 41.17152023]
[199.76829529 50.43820953]
[184.33042908 48.36204529]
[172.30693054 57.33061981]
[160.28343201 66.29919434]
[156.76374817 72.89405823]
[147.84318542 75.33756256]
[135.59809875 84.00115204]
[123.35301208 92.66474152]
[111.10791779 101.32833099]
[98.97266388 110.14511108]
[86.94915771 119.11368561]
[74.92565918 128.08226013]
[62.90214920 137.05082703]
[66.95060730 149.99050903]
[66.78357697 163.52478027]
[62.43178558 176.31723022]
[54.33847046 187.10908508]
[43.31427002 194.84310913]
[30.45607376 198.76716614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[5 34]
[6 33]
[7 32]
[8 31]
[11 28]
[12 27]
[14 25]
[15 24]
[16 23]
[44 118]
[45 117]
[46 116]
[47 115]
[49 114]
[50 113]
[51 112]
[52 111]
[53 109]
[54 108]
[55 107]
[58 104]
[59 103]
[60 102]
[61 101]
[62 100]
[63 98]
[64 97]
[65 96]
[69 93]
[70 92]
[71 91]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
