%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAGGUGGGCUGGCAACCAGCCACCAGUUUCCAACUCUUUCUCCAACAGGGAAGCCGCAAUGACACAGCCGACUAGGCCCUCGGUCACCUGUGACCAGGGAUCCUCCACGAUCGGCGGGACCGCCGCCCAGGCGACCACCAGUUCCAGCGCCACCUCGG\
) } def
/len { sequence length } bind def

/coor [
[98.10662842 489.64804077]
[84.96323395 478.93884277]
[91.61548615 463.34448242]
[92.19355011 448.35562134]
[84.95247650 435.33963013]
[93.21585846 421.84786987]
[93.79392242 406.85900879]
[94.37198639 391.87017822]
[94.95005035 376.88131714]
[95.52811432 361.89245605]
[96.10617828 346.90359497]
[96.53977203 331.90985107]
[96.82885742 316.91265869]
[97.11794281 301.91543579]
[97.40702820 286.91821289]
[97.69611359 271.92102051]
[94.66637421 265.14028931]
[98.13806152 256.63830566]
[98.71612549 241.64944458]
[99.29418945 226.66058350]
[82.78414917 212.26419067]
[82.16120148 190.09571838]
[98.22600555 174.41481018]
[97.07073975 159.45936584]
[95.91546631 144.50392151]
[73.04153442 140.08473206]
[53.90202713 123.89418030]
[44.47544098 98.76018524]
[48.74906921 70.46083069]
[67.32989502 46.40205383]
[52.44745255 44.52779007]
[37.56500626 42.65353012]
[22.68256187 40.77926636]
[7.80011845 38.90500641]
[-7.08232546 37.03074265]
[-13.73082066 50.63501740]
[-24.43814659 61.34164429]
[-38.04285049 67.98925781]
[-53.06919861 69.85676575]
[-67.88724518 66.74160004]
[-80.88963318 58.98166656]
[-90.66596985 47.41871262]
[-96.15578461 33.30699158]
[-96.76358795 18.17724228]
[-92.42344666 3.67062664]
[-83.60615540 -8.63928699]
[-71.26812744 -17.41721153]
[-56.74772263 -21.71098137]
[-41.61999130 -21.05484390]
[-27.52588463 -15.51996899]
[-15.99422169 -5.70674038]
[-8.27587128 7.32037735]
[-5.20806360 22.14830017]
[9.67438030 24.02256203]
[24.55682373 25.89682388]
[39.43927002 27.77108574]
[54.32171249 29.64534760]
[69.20415497 31.51960945]
[74.27256012 25.99138451]
[62.11055756 17.21154213]
[49.94855499 8.43169880]
[37.78654861 -0.34814459]
[24.48080063 -7.27324724]
[21.87736130 -22.04558945]
[32.01407242 -33.10213089]
[46.95642853 -31.78836823]
[55.00834656 -19.13233948]
[64.80869293 -7.77657986]
[74.60903168 3.57917929]
[84.40937805 14.93493843]
[89.47778320 9.40671539]
[86.32141113 -5.25743628]
[83.16504669 -19.92158699]
[70.52205658 -29.79753876]
[70.50469971 -45.84058380]
[83.12628174 -55.74386978]
[98.70461273 -51.91044235]
[105.28932953 -37.28098297]
[97.82919312 -23.07795715]
[100.98556519 -8.41380596]
[104.14193726 6.25034523]
[119.07233429 7.69362688]
[124.97910309 -6.09441519]
[130.88586426 -19.88245773]
[131.39637756 -29.05174446]
[137.04162598 -33.87757111]
[143.21302795 -47.54921341]
[149.38442993 -61.22085571]
[155.55583191 -74.89250183]
[161.72721863 -88.56414795]
[159.55937195 -104.81937408]
[172.71620178 -114.60865021]
[187.66308594 -107.86161041]
[189.02395630 -91.51902008]
[175.39886475 -82.39274597]
[169.22746277 -68.72109985]
[163.05607605 -55.04946136]
[156.88467407 -41.37781525]
[150.71327209 -27.70617104]
[144.67391968 -13.97569084]
[138.76715088 -0.18764877]
[132.86038208 13.60039330]
[143.91682434 23.73720741]
[157.14138794 16.65828896]
[170.36593628 9.57937145]
[183.59049988 2.50045419]
[187.92866516 -12.69677639]
[201.78268433 -20.30215836]
[216.93319702 -15.80355358]
[224.39169312 -1.86990452]
[219.73315430 13.23220158]
[205.72142029 20.54295349]
[190.66941833 15.72501183]
[177.44485474 22.80393028]
[164.22030640 29.88284683]
[150.99574280 36.96176529]
[154.15211487 51.62591553]
[169.11799622 52.63701248]
[184.08387756 53.64810562]
[199.04975891 54.65920258]
[214.01565552 55.67029572]
[226.99592590 46.24203873]
[242.42132568 50.65071869]
[248.45881653 65.51437378]
[240.47694397 79.43088531]
[224.59870911 81.72469330]
[213.00454712 70.63618469]
[198.03866577 69.62508392]
[183.07278442 68.61399078]
[168.10690308 67.60289764]
[153.14102173 66.59179688]
[156.61430359 103.82947540]
[138.91098022 132.52970886]
[110.87091064 143.34864807]
[112.02618408 158.30409241]
[113.18144989 173.25953674]
[121.07375336 176.19659424]
[127.71420288 181.32003784]
[132.51838684 188.15362549]
[135.07107544 196.07177734]
[135.16198730 204.35685730]
[132.80303955 212.26419067]
[128.22543335 219.08900452]
[121.85715485 224.22924805]
[114.28305054 227.23864746]
[113.70498657 242.22750854]
[113.12692261 257.21636963]
[112.69332886 272.21008301]
[112.40424347 287.20730591]
[112.11515808 302.20452881]
[111.82607269 317.20172119]
[111.53698730 332.19894409]
[114.51155090 340.88735962]
[111.09503174 347.48165894]
[110.51696777 362.47052002]
[109.93890381 377.45938110]
[109.36083984 392.44824219]
[108.78277588 407.43707275]
[108.20471191 422.42593384]
[115.40444183 436.51403809]
[107.18241119 448.93368530]
[106.60434723 463.92254639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 162]
[4 161]
[6 159]
[7 158]
[8 157]
[9 156]
[10 155]
[11 154]
[12 152]
[13 151]
[14 150]
[15 149]
[16 148]
[18 147]
[19 146]
[20 145]
[23 136]
[24 135]
[25 134]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[71 81]
[72 80]
[73 79]
[82 102]
[83 101]
[84 100]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
[103 116]
[104 115]
[105 114]
[106 113]
[117 131]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
