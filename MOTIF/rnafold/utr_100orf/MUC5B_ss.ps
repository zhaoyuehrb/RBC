%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCGGCCCGGCUCCCUCCCUGCCCGUCCCCGUCCCCCCACCCGUGCCAGCCCCCAGGAUGGGUGCCCCGAGCGCGUGCCGGACGCUGGUGUUGGCUCUGGCGGCCAUGCUCGUGGUGCCGCAGGCAGAGACCCAGGGCCCUGUGGAGCCGAGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[75.46795654 518.86834717]
[62.33230591 508.14962769]
[68.99582672 492.56008911]
[69.58472443 477.57165527]
[70.17362213 462.58322144]
[70.76251984 447.59478760]
[71.35141754 432.60635376]
[71.94031525 417.61791992]
[64.70864868 404.59667969]
[72.98177338 391.11093140]
[73.57067108 376.12249756]
[74.15956879 361.13406372]
[74.74846649 346.14559937]
[75.33736420 331.15716553]
[75.92626190 316.16873169]
[76.51515961 301.18029785]
[61.40523148 287.48052979]
[61.20508575 266.79464722]
[76.47045898 252.40585327]
[75.88156128 237.41741943]
[75.29266357 222.42898560]
[74.70376587 207.44055176]
[74.11486816 192.45211792]
[65.97310638 186.17337036]
[62.58687592 176.23249817]
[65.31458282 165.86323547]
[73.48262787 158.58203125]
[73.48262787 143.58203125]
[73.48262787 128.58203125]
[71.94952393 143.50347900]
[63.42792892 155.84780884]
[50.01910782 162.57116699]
[35.02939606 162.01570129]
[22.15495110 154.31837463]
[14.57035160 141.37721252]
[14.14580441 126.38321686]
[20.98599243 113.03361511]
[33.40426636 104.62014771]
[48.33853149 103.21739960]
[62.10533905 109.17050934]
[49.01789856 101.84119415]
[35.93045807 94.51187134]
[22.84301949 87.18255615]
[9.75557899 79.85323334]
[-3.33186078 72.52391815]
[-16.41930008 65.19459534]
[-25.48738670 63.71791077]
[-29.68969727 57.59072495]
[-42.63071442 50.00586319]
[-56.79277039 56.34745789]
[-71.97064209 53.12073135]
[-82.32813263 41.56642532]
[-83.88257599 26.12740326]
[-76.03624725 12.74028873]
[-61.80623245 6.55269909]
[-46.66425705 9.94388771]
[-36.43272018 21.60987473]
[-35.04585266 37.06484985]
[-22.10483742 44.64970779]
[-9.08998203 52.10715866]
[3.99745774 59.43647766]
[17.08489799 66.76579285]
[30.17233849 74.09511566]
[43.25977707 81.42443085]
[56.34721756 88.75375366]
[69.43466187 96.08306885]
[84.55626678 72.95580292]
[112.41789246 71.08246613]
[119.48884583 57.85364532]
[126.42958069 44.55604553]
[133.23944092 31.19094849]
[140.04930115 17.82585144]
[146.85916138 4.46075344]
[153.66900635 -8.90434456]
[160.08233643 -22.46418381]
[166.09356689 -36.20700455]
[166.67431641 -45.37616348]
[172.36010742 -50.15880966]
[178.63999939 -63.78095627]
[184.91989136 -77.40310669]
[191.19978333 -91.02525330]
[197.47969055 -104.64739990]
[203.75958252 -118.26954651]
[210.03947449 -131.89169312]
[210.80014038 -141.04768372]
[216.57873535 -145.71777344]
[223.12486267 -159.21400452]
[229.67100525 -172.71022034]
[224.25689697 -187.55822754]
[231.00331116 -201.85023499]
[245.90771484 -207.10705566]
[260.12759399 -200.20991516]
[265.22656250 -185.25076294]
[258.17944336 -171.10459900]
[243.16723633 -166.16409302]
[236.62109375 -152.66786194]
[230.07495117 -139.17164612]
[223.66162109 -125.61180115]
[217.38172913 -111.98965454]
[211.10183716 -98.36750793]
[204.82194519 -84.74535370]
[198.54203796 -71.12320709]
[192.26214600 -57.50106049]
[185.98225403 -43.87891388]
[179.83639526 -30.19577026]
[173.82514954 -16.45295143]
[174.79763794 -13.01278782]
[174.11947632 -8.92572212]
[171.50305176 -4.98796082]
[167.03410339 -2.09448719]
[160.22425842 11.27061081]
[153.41439819 24.63570786]
[146.60453796 38.00080490]
[139.79467773 51.36590576]
[139.55882263 58.79195023]
[132.71766663 64.92459869]
[125.64671326 78.15341949]
[132.58744812 91.45101166]
[147.48347473 93.21407318]
[162.37950134 94.97713470]
[177.27552795 96.74019623]
[193.71554565 92.59745789]
[202.24743652 107.24816895]
[190.53114319 119.50234222]
[175.51246643 111.63622284]
[160.61643982 109.87316132]
[145.72041321 108.11009979]
[130.82438660 106.34704590]
[122.07083130 122.12680054]
[106.18186951 130.41194153]
[88.48262787 128.58203125]
[88.48262787 143.58203125]
[88.48262787 158.58203125]
[99.36495209 175.51026917]
[89.10330200 191.86322021]
[89.69219971 206.85165405]
[90.28109741 221.84008789]
[90.86999512 236.82852173]
[91.45889282 251.81695557]
[100.28855133 256.11154175]
[106.88620758 263.30456543]
[110.36221313 272.36291504]
[110.27112579 282.00677490]
[106.66833496 290.89013672]
[100.09635162 297.78884888]
[91.50359344 301.76919556]
[90.91469574 316.75762939]
[90.32579803 331.74606323]
[89.73690033 346.73449707]
[89.14800262 361.72293091]
[88.55910492 376.71139526]
[87.97020721 391.69982910]
[95.15975189 405.79312134]
[86.92874908 418.20681763]
[86.33985138 433.19525146]
[85.75095367 448.18368530]
[85.16205597 463.17211914]
[84.57315826 478.16055298]
[83.98426056 493.14898682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 159]
[4 158]
[5 157]
[6 156]
[7 155]
[8 154]
[10 152]
[11 151]
[12 150]
[13 149]
[14 148]
[15 147]
[16 146]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[27 133]
[28 132]
[29 131]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[48 59]
[49 58]
[68 117]
[69 116]
[70 114]
[71 113]
[72 112]
[73 111]
[74 110]
[75 106]
[76 105]
[78 104]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[86 97]
[87 96]
[88 95]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
