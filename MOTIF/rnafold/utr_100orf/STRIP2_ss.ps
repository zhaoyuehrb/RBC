%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGAGCUGAACCCUGAGGGGAGCCGCUGACCAGCAGCAUGGAGGACCCCGCCGCGCCUGGGACCGGGGGCCCGCCCGCAAAUGGCAAUGGCAACGGCGGCGGCAAAGGGAAGCAGGCGGCGCCCAAGGGCCGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[129.70991516 265.86660767]
[126.46891785 259.88751221]
[124.61329651 253.32844543]
[124.23984528 246.50668335]
[125.37352753 239.75373840]
[127.96585846 233.39924622]
[131.89701843 227.75494385]
[136.98130798 223.09927368]
[131.43458557 209.16249084]
[125.88787079 195.22570801]
[116.08793640 192.00100708]
[109.57891083 183.71426392]
[108.73237610 172.98957825]
[114.07513428 163.39869690]
[109.15476227 149.22865295]
[104.23439026 135.05862427]
[99.31401825 120.88858032]
[86.04329681 117.90856171]
[76.44215393 106.76404572]
[75.27698517 90.98719025]
[60.28536224 90.48596954]
[45.29373550 89.98474121]
[30.30211449 89.48352051]
[17.05176735 102.93513489]
[-1.50812888 102.52181244]
[-13.72175407 88.96481323]
[-28.72082329 89.13191223]
[-43.71244812 89.63314056]
[-58.68918228 90.46823883]
[-73.66591644 91.30332947]
[-88.64265442 92.13842773]
[-100.36635590 103.08988190]
[-116.21652222 100.60958099]
[-124.03425598 86.60020447]
[-117.82245636 71.80854797]
[-102.34629822 67.58149719]
[-89.47775269 77.16169739]
[-74.50101471 76.32659912]
[-59.52428055 75.49150085]
[-44.54754257 74.65640259]
[-40.70648956 71.69583893]
[-34.94519043 71.17134094]
[-28.88792610 74.13284302]
[-13.88885593 73.96574402]
[-7.80876684 64.20079041]
[2.35291147 58.55755997]
[14.09679890 58.55772400]
[24.46883392 64.31809235]
[30.80333900 74.49189758]
[45.79496002 74.99311829]
[60.78658676 75.49434662]
[75.77820587 75.99556732]
[88.42159271 67.92433167]
[94.27743530 54.11458588]
[100.13327026 40.30483627]
[105.98911285 26.49508858]
[111.84494781 12.68533993]
[117.54658508 -1.18878603]
[123.09329987 -15.12556839]
[128.64001465 -29.06235123]
[116.88345337 -49.61244202]
[129.13748169 -73.83575439]
[127.80240631 -88.77622223]
[126.46732330 -103.71669006]
[122.55911255 -112.06427765]
[125.27273560 -119.00428772]
[124.27084351 -133.97079468]
[117.18006897 -149.37069702]
[130.01522827 -160.44749451]
[144.21224976 -151.18029785]
[139.23735046 -134.97268677]
[140.23924255 -120.00617981]
[141.40779114 -105.05176544]
[142.74287415 -90.11129761]
[144.07795715 -75.17082977]
[158.49993896 -71.04698181]
[167.53161621 -83.02316284]
[176.56329346 -94.99933624]
[178.03709412 -115.05036163]
[196.03491211 -121.98862457]
[204.52412415 -134.35525513]
[203.01716614 -150.32737732]
[214.66465759 -161.35984802]
[230.53164673 -158.98950195]
[238.44631958 -145.03466797]
[232.33723450 -130.20028687]
[216.89074707 -125.86604309]
[208.40153503 -113.49942017]
[211.17868042 -103.56338501]
[207.91868591 -93.54290771]
[199.48104858 -86.86897278]
[188.53947449 -85.96766663]
[179.50779724 -73.99148560]
[170.47612000 -62.01530838]
[172.64674377 -46.28540421]
[166.77107239 -32.60036087]
[155.46357727 -24.50232315]
[142.57679749 -23.51563263]
[137.03009033 -9.57884979]
[131.48336792 4.35793304]
[131.93615723 11.79583836]
[125.65470123 18.54117966]
[119.79885864 32.35092926]
[113.94301605 46.16067505]
[108.08718109 59.97042465]
[102.23133850 73.78017426]
[118.73416138 84.19634247]
[122.62395477 101.91392517]
[113.48405457 115.96820831]
[118.40442657 130.13824463]
[123.32479858 144.30828857]
[128.24517822 158.47831726]
[144.08094788 170.86555481]
[139.82464600 189.67898560]
[145.37136841 203.61576843]
[150.91809082 217.55255127]
[174.48393250 224.30888367]
[185.74511719 245.81483459]
[178.02812195 268.57897949]
[186.51733398 280.94558716]
[195.00654602 293.31222534]
[203.49574280 305.67883301]
[211.98495483 318.04547119]
[219.48413086 323.40444946]
[220.52192688 330.78350830]
[228.73350525 343.33621216]
[242.46432495 353.28109741]
[236.70913696 369.22833252]
[219.79193115 368.11270142]
[216.18083191 351.54779053]
[207.96923828 338.99508667]
[199.61833191 326.53466797]
[191.12911987 314.16806030]
[182.63992310 301.80142212]
[174.15071106 289.43481445]
[165.66149902 277.06817627]
[159.16523743 278.74099731]
[152.44480896 278.94946289]
[145.82695007 277.67666626]
[139.63491821 274.97787476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 116]
[9 115]
[10 114]
[14 112]
[15 111]
[16 110]
[17 109]
[20 52]
[21 51]
[22 50]
[23 49]
[26 44]
[27 43]
[28 40]
[29 39]
[30 38]
[31 37]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[58 100]
[59 99]
[60 98]
[62 75]
[63 74]
[64 73]
[66 72]
[67 71]
[76 94]
[77 93]
[78 92]
[80 88]
[81 87]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
