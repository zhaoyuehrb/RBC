%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCGAGAUUCUGUGCCCCUUGUCGGGCCGCUUGUUUGGCUGCUGCCGUCACCUCAUGGCGACGCGGGUAGAGGAGGCAGCGCGGGGAAGAGGCGGCGGCGCCGAAGAGGCGACUGAGGCCGGACGGGGCGGACGGCGACGCAGCCCGCGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[79.68656921 198.46524048]
[85.73291016 182.62611389]
[85.73291016 167.62611389]
[85.73291016 152.62611389]
[85.73291016 137.62611389]
[74.55448151 129.93981934]
[66.80792999 119.19750214]
[63.22434235 106.78208923]
[64.01572418 94.20653534]
[68.87400055 82.92990112]
[77.03171539 74.18804932]
[87.37470245 68.85869598]
[84.98373413 54.05047989]
[82.59275818 39.24226761]
[80.20178223 24.43405151]
[75.72167969 16.40804672]
[77.91420746 9.30588245]
[75.81999969 -5.54720926]
[73.57730103 -20.37860489]
[71.18632507 -35.18682098]
[68.79535675 -49.99503326]
[66.40438080 -64.80325317]
[64.01340485 -79.61146545]
[61.62242889 -94.41967773]
[59.23145294 -109.22789764]
[49.39335632 -121.61830902]
[55.00302505 -135.41616821]
[52.61204910 -150.22438049]
[50.22107315 -165.03259277]
[47.83010101 -179.84082031]
[44.55502319 -194.47891235]
[40.40763855 -208.89414978]
[36.26025772 -223.30940247]
[32.11287689 -237.72463989]
[20.86156464 -248.84751892]
[24.77824593 -263.21795654]
[20.63086319 -277.63317871]
[16.48348236 -292.04843140]
[12.33609962 -306.46368408]
[8.18871784 -320.87890625]
[4.04133558 -335.29415894]
[-1.36780751 -342.72579956]
[-0.04171405 -350.03942871]
[-3.89983392 -364.53479004]
[-7.75795364 -379.03012085]
[-11.61607361 -393.52545166]
[-15.47419357 -408.02081299]
[-19.33231354 -422.51614380]
[-23.19043350 -437.01147461]
[-27.04855347 -451.50683594]
[-30.90667343 -466.00216675]
[-46.96374512 -480.13784790]
[-40.96473312 -499.85418701]
[-45.68554306 -514.09191895]
[-50.40635300 -528.32971191]
[-55.12715912 -542.56744385]
[-59.11620712 -546.10571289]
[-61.11107635 -550.39947510]
[-61.16220474 -554.54742432]
[-59.67613220 -557.80316162]
[-63.53425217 -572.29852295]
[-67.39237213 -586.79388428]
[-80.78392029 -594.75024414]
[-84.49011230 -609.50555420]
[-76.82237244 -622.22332764]
[-80.68049622 -636.71868896]
[-95.62036133 -640.04418945]
[-107.29601288 -649.94055176]
[-113.02446747 -664.13360596]
[-111.48937988 -679.36193848]
[-103.04349518 -692.12615967]
[-89.62761688 -699.49316406]
[-74.32461548 -699.77008057]
[-60.65100479 -692.89324951]
[-51.74888611 -680.44287109]
[-49.66389847 -665.28002930]
[-54.87515640 -650.88903809]
[-66.18515015 -640.57678223]
[-62.32703400 -626.08142090]
[-49.35171890 -618.85809326]
[-45.23254395 -604.21270752]
[-52.89703369 -590.65197754]
[-49.03891373 -576.15667725]
[-45.18079376 -561.66131592]
[-40.88939667 -547.28826904]
[-36.16858673 -533.05053711]
[-31.44777679 -518.81274414]
[-26.72696686 -504.57498169]
[-18.15805054 -501.90222168]
[-11.70516968 -495.46566772]
[-8.92764950 -486.64004517]
[-10.57975674 -477.39602661]
[-16.41133308 -469.86029053]
[-12.55321217 -455.36492920]
[-8.69509220 -440.86959839]
[-4.83697271 -426.37426758]
[-0.97885263 -411.87890625]
[2.87926722 -397.38357544]
[6.73738718 -382.88824463]
[10.59550667 -368.39288330]
[14.45362663 -353.89755249]
[18.45657921 -339.44152832]
[22.60396004 -325.02630615]
[26.75134277 -310.61105347]
[30.89872360 -296.19580078]
[35.04610825 -281.78057861]
[39.19348907 -267.36532593]
[50.14815140 -257.27349854]
[46.52811813 -241.87202454]
[50.67549896 -227.45677185]
[54.82288361 -213.04153442]
[58.97026443 -198.62629700]
[67.46840668 -210.98678589]
[82.18286896 -213.89958191]
[94.74921417 -205.70890808]
[98.02407837 -191.07077026]
[90.14585876 -178.30621338]
[75.59294891 -174.67127991]
[62.63831329 -182.23179626]
[65.02928925 -167.42356873]
[67.42026520 -152.61535645]
[69.81124115 -137.80714417]
[79.47831726 -126.47591400]
[74.03967285 -111.61887360]
[76.43064117 -96.81065369]
[78.82161713 -82.00244141]
[81.21259308 -67.19422150]
[83.60356903 -52.38600922]
[85.99454498 -37.57779312]
[88.38552094 -22.76957893]
[92.57987976 -16.63319588]
[90.67309570 -7.64141035]
[92.76729584 7.21168089]
[95.00999451 22.04307556]
[97.40097046 36.85129166]
[99.79194641 51.65950775]
[102.18292236 66.46772003]
[120.87403107 71.57962036]
[134.43882751 86.68904877]
[137.81452942 107.65198517]
[128.94085693 127.95891571]
[135.33297729 141.52876282]
[141.72509766 155.09861755]
[156.27459717 161.85816956]
[159.92105103 177.48132324]
[149.86721802 189.98332214]
[133.82553101 189.77371216]
[124.10180664 177.01327515]
[128.15524292 161.49073792]
[121.76313019 147.92088318]
[115.37100983 134.35102844]
[100.73291016 137.62611389]
[100.73291016 152.62611389]
[100.73291016 167.62611389]
[100.73291016 182.62611389]
[106.77925110 198.46524048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[5 152]
[12 137]
[13 136]
[14 135]
[15 134]
[17 133]
[18 132]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 124]
[27 122]
[28 121]
[29 120]
[30 119]
[31 112]
[32 111]
[33 110]
[34 109]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[53 88]
[54 87]
[55 86]
[56 85]
[60 84]
[61 83]
[62 82]
[65 79]
[66 78]
[141 151]
[142 150]
[143 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
