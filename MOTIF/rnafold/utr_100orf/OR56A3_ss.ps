%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAACACACCGAAAUGACACCCUCUCCACUGAAGCUUCAGACUUCCUCUUGAAUUGUUUUGUCAGAUCCCCCAGCUGGCAGCACUGGCUGUCCCUGC\
) } def
/len { sequence length } bind def

/coor [
[213.21751404 201.74882507]
[213.41662598 181.97848511]
[200.83233643 173.81541443]
[188.24803162 165.65235901]
[175.66374207 157.48928833]
[163.07945251 149.32623291]
[150.49516296 141.16316223]
[135.60690308 140.72816467]
[128.23988342 126.72682190]
[115.65559387 118.56375885]
[103.07130432 110.40069580]
[110.93973541 123.17127991]
[114.98435974 137.61569214]
[114.89197540 152.61540222]
[110.66973877 167.00891113]
[102.64460754 179.68159485]
[91.43801117 189.65217590]
[77.91775513 196.14852905]
[63.13079453 198.66761780]
[48.22218323 197.01437378]
[34.34638214 191.31681824]
[22.57788849 182.01614380]
[13.82801151 169.83255005]
[8.77430820 155.70951843]
[7.80812073 140.74067688]
[11.00426674 126.08513641]
[18.11524773 112.87779236]
[28.59041405 102.14136505]
[41.61861038 94.70725250]
[56.19097519 91.15110779]
[71.17908478 91.74832153]
[85.41793060 96.45048523]
[74.56680298 86.09418488]
[63.71567154 75.73788452]
[52.86454010 65.38158417]
[36.81034470 62.03570938]
[31.93856049 46.37691498]
[43.26086044 34.51362991]
[59.12983322 38.64978027]
[63.22084045 54.53045273]
[74.07196808 64.88674927]
[84.92310333 75.24304962]
[95.77423096 85.59934998]
[102.71443939 82.75618744]
[116.59484100 77.06986237]
[123.53504944 74.22669983]
[124.00154114 59.23395538]
[124.46804047 44.24121094]
[114.57424927 31.61218071]
[118.41938782 16.03673744]
[133.05378723 9.46302509]
[147.25120544 16.93383598]
[150.12059021 32.71820450]
[139.46078491 44.70771027]
[138.99429321 59.70045471]
[138.52778625 74.69319916]
[126.64716339 89.15315247]
[111.23436737 97.81640625]
[123.81865692 105.97946930]
[136.40295410 114.14253235]
[152.19131470 115.16141510]
[158.65821838 128.57887268]
[171.24252319 136.74194336]
[183.82681274 144.90499878]
[196.41110229 153.06806946]
[208.99539185 161.23112488]
[221.57968140 169.39419556]
[230.82234192 163.42304993]
[241.50936890 160.97004700]
[252.35386658 162.30343628]
[262.05920410 167.23715210]
[269.47409058 175.15626526]
[273.72903442 185.09350586]
[274.33831787 195.84736633]
[271.25531006 206.12734985]
[282.72927856 215.78900146]
[294.20327759 225.45065308]
[307.21350098 225.14956665]
[316.59097290 233.58090210]
[317.60220337 245.74624634]
[328.77017212 255.76007080]
[339.93814087 265.77389526]
[351.10607910 275.78771973]
[362.27404785 285.80154419]
[373.44201660 295.81533813]
[389.59249878 298.66033936]
[394.94891357 314.16003418]
[384.00103760 326.36968994]
[368.01110840 322.72906494]
[363.42819214 306.98330688]
[352.26022339 296.96948242]
[341.09225464 286.95565796]
[329.92431641 276.94183350]
[318.75634766 266.92803955]
[307.58837891 256.91421509]
[290.30831909 254.32556152]
[284.54162598 236.92463684]
[273.06762695 227.26298523]
[261.59365845 217.60133362]
[243.22525024 223.69467163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[9 60]
[10 59]
[11 58]
[32 43]
[33 42]
[34 41]
[35 40]
[46 56]
[47 55]
[48 54]
[75 99]
[76 98]
[77 97]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
