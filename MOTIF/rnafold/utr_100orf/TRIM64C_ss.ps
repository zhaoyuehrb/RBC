%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUCAGACACCCUGCGAGUCUUCCAGAAUGAGCUCAUUUGCUGCAUUUGCGUGAACUACUUCAUAGACCCGGUCACCACUGACUGUGUGCACAGCU\
) } def
/len { sequence length } bind def

/coor [
[100.99535370 120.72929382]
[89.93694305 122.02838898]
[77.61260223 130.57887268]
[65.28826904 139.12936401]
[52.96393585 147.67984009]
[50.60345459 152.73706055]
[46.85077286 155.94685364]
[42.69722366 157.08819580]
[39.06864166 156.38931274]
[26.00119781 163.75422668]
[12.93375492 171.11914062]
[-0.13368885 178.48405457]
[-0.92480898 193.89111328]
[-9.93858528 206.41131592]
[-24.29875374 212.04949951]
[-39.42303848 209.00654602]
[-50.48533249 198.25343323]
[-53.95569992 183.22146606]
[-48.72676086 168.70727539]
[-36.46704483 159.34230042]
[-21.08858871 158.11483765]
[-7.49860001 165.41661072]
[5.56884336 158.05169678]
[18.63628769 150.68678284]
[31.70373154 143.32186890]
[44.41345215 135.35549927]
[56.73778534 126.80502319]
[69.06211853 118.25453949]
[81.38645172 109.70405579]
[82.08605957 94.72037506]
[70.61207581 85.05872345]
[59.13808441 75.39706421]
[47.66409683 65.73541260]
[36.19010925 56.07375336]
[19.95895767 53.73243332]
[14.12309647 38.40681076]
[24.68595886 25.86256981]
[40.78137589 29.00415039]
[45.85176468 44.59976578]
[57.32575226 54.26142120]
[68.79974365 63.92307663]
[80.27372742 73.58473206]
[91.74771881 83.24639130]
[106.39356232 86.48665619]
[120.87233734 82.56682587]
[135.35110474 78.64700317]
[149.82987976 74.72717285]
[153.03599548 71.21272278]
[156.84338379 69.22128296]
[160.65783691 68.74709320]
[163.95611572 69.57794952]
[166.35144043 71.34054565]
[181.20474243 69.24781036]
[196.05804443 67.15508270]
[209.12548828 59.79016876]
[218.60752869 48.16731262]
[228.08958435 36.54445648]
[237.57162476 24.92160034]
[247.05368042 13.29874420]
[249.14228821 -2.96685576]
[264.37530518 -9.04035282]
[277.08230591 1.32614529]
[274.19140625 17.46847534]
[258.67654419 22.78079033]
[249.19448853 34.40364838]
[239.71243286 46.02650452]
[230.23039246 57.64936066]
[220.74833679 69.27221680]
[222.70825195 76.51160431]
[226.62808228 90.99037933]
[228.58799744 98.22976685]
[242.63853455 103.48166656]
[258.27423096 101.06592560]
[267.48684692 112.76962280]
[281.53738403 118.02152252]
[295.58792114 123.27341461]
[309.63845825 128.52531433]
[323.68899536 133.77720642]
[337.73953247 139.02911377]
[353.81539917 135.78889465]
[364.45498657 148.26812744]
[358.71319580 163.62924194]
[342.49670410 166.07005310]
[332.48764038 153.07965088]
[318.43710327 147.82774353]
[304.38656616 142.57585144]
[290.33602905 137.32395935]
[276.28549194 132.07205200]
[262.23495483 126.82015991]
[247.60426331 129.61155701]
[237.38664246 117.53220367]
[223.33610535 112.28030396]
[198.15077209 82.00837708]
[183.29747009 84.10111237]
[168.44418335 86.19384003]
[153.74971008 89.20594788]
[139.27093506 93.12577820]
[124.79216003 97.04560089]
[110.31338501 100.96543121]
[111.63917542 107.45756531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[9 25]
[10 24]
[11 23]
[12 22]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[44 99]
[45 98]
[46 97]
[47 96]
[52 95]
[53 94]
[54 93]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[71 92]
[72 91]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
