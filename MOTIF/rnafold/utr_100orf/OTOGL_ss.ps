%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUAAUGAUACCUUGGAGUAUAUUCUUGCUUCAUGUACUGCUGUUUUCAUUACAAGAAUAUAUUUGUGCAUCGUCUAUAUUGAUGGGAACAUCAAAAAACGGGU\
) } def
/len { sequence length } bind def

/coor [
[145.15623474 229.29037476]
[142.22473145 220.09733582]
[141.04948425 210.51402283]
[141.67349243 200.87312317]
[144.07733154 191.50971985]
[148.17959595 182.74967957]
[153.83979797 174.89825439]
[144.12321472 163.47074890]
[134.40663147 152.04322815]
[124.69004822 140.61572266]
[114.97347260 129.18820190]
[102.71012115 132.69268799]
[90.03711700 131.25535583]
[78.87009430 125.09349060]
[70.89704895 115.13851166]
[67.32318878 102.89520264]
[68.68872833 90.21426392]
[74.78726196 79.01252747]
[65.75808716 67.03446198]
[56.72890472 55.05640411]
[47.69972610 43.07834625]
[38.67054749 31.10028458]
[29.64136696 19.12222481]
[20.61218834 7.14416552]
[11.58300877 -4.83389473]
[2.55382943 -16.81195450]
[-6.47534990 -28.79001427]
[-15.50452900 -40.76807404]
[-24.53370857 -52.74613571]
[-33.56288910 -64.72419739]
[-47.86818314 -59.84402847]
[-62.96104050 -59.62472153]
[-77.36318970 -64.07515717]
[-89.66790009 -72.74748230]
[-98.67738342 -84.78208923]
[-103.51937866 -98.99285889]
[-103.73162079 -113.98403168]
[-99.30588531 -128.28727722]
[-90.68763733 -140.50558472]
[-99.71681976 -152.48364258]
[-115.01647186 -158.38723755]
[-117.28596497 -174.62858582]
[-104.19063568 -184.49998474]
[-89.20183563 -177.84657288]
[-87.73875427 -161.51281738]
[-78.70957947 -149.53475952]
[-64.59069061 -154.45593262]
[-49.62172699 -154.77259827]
[-35.26837921 -150.44113159]
[-22.93995094 -141.87371826]
[-13.85098362 -129.89901733]
[-8.90161324 -115.68216705]
[-8.58842945 -100.61132812]
[-12.95468616 -86.16216278]
[-21.58482742 -73.75337219]
[-12.55564880 -61.77531433]
[-3.52646899 -49.79725266]
[5.50271034 -37.81919479]
[14.53188992 -25.84113312]
[23.56106949 -13.86307430]
[32.59024811 -1.88501394]
[41.61942673 10.09304619]
[50.64860535 22.07110596]
[59.67778397 34.04916763]
[68.70696259 46.02722549]
[77.73614502 58.00528717]
[86.76531982 69.98334503]
[103.56990051 67.38999939]
[119.41539001 73.55763245]
[130.04475403 86.82924652]
[132.60232544 103.63929749]
[126.40098572 119.47162628]
[136.11756897 130.89913940]
[145.83415222 142.32664490]
[155.55072021 153.75416565]
[165.26730347 165.18168640]
[185.68780518 157.84153748]
[207.28672791 159.48957825]
[226.29049683 169.80679321]
[239.39166260 186.96221924]
[244.32447815 207.93792725]
[240.25680542 229.05981445]
[253.09790039 236.81263733]
[265.93899536 244.56544495]
[278.78009033 252.31826782]
[291.62121582 260.07107544]
[304.46231079 267.82391357]
[320.85995483 267.60372925]
[329.01586914 281.83093262]
[320.53988647 295.86981201]
[304.15139771 295.27835083]
[296.70947266 280.66500854]
[283.86837769 272.91220093]
[271.02728271 265.15936279]
[258.18618774 257.40655518]
[245.34509277 249.65373230]
[232.50398254 241.90090942]
[225.76675415 248.71655273]
[217.87678528 254.16688538]
[209.10694885 258.06072998]
[199.76100159 260.26080322]
[190.16317749 260.68850708]
[180.64677429 259.32675171]
[171.54275513 256.22067261]
[163.16812134 251.47605896]
[155.81491089 245.25585938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[39 46]
[40 45]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
