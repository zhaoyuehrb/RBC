%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUCUCAACUUCACCUCUCCUCUACACCCGGCGUCUUCUCAGAGGCCCACAUCCUUCUUCAUCGAGGACAUCCUGCUGCACAAGCCCAAGCCGCUGA\
) } def
/len { sequence length } bind def

/coor [
[66.12231445 231.40121460]
[59.90470505 245.09030151]
[51.51861954 257.56921387]
[41.19283676 268.49752808]
[29.20904922 277.57711792]
[15.89418602 284.56024170]
[1.61148536 289.25643921]
[-13.24941063 291.53759766]
[-28.28308678 291.34146118]
[-43.07941055 288.67337036]
[-57.23472977 283.60614014]
[-70.36287689 276.27801514]
[-82.10570526 266.88888550]
[-92.14286041 255.69488525]
[-100.20053101 243.00143433]
[-106.05888367 229.15478516]
[-109.55810547 214.53269958]
[-110.60273743 199.53408813]
[-109.16427612 184.56809998]
[-105.28196716 170.04302979]
[-99.06172180 156.35514832]
[-90.67323303 143.87783813]
[-80.34534454 132.95150757]
[-68.35980988 123.87424469]
[-55.04359818 116.89366913]
[-40.75999451 112.20021820]
[-25.89865685 109.92193604]
[-10.86501980 110.12097168]
[3.93079019 112.79190063]
[18.08513260 117.86186218]
[31.21186829 125.19252777]
[42.95288849 134.58392334]
[54.12084961 124.57009888]
[65.28881073 114.55628204]
[76.45677185 104.54245758]
[90.83556366 75.58095551]
[94.07583618 60.93511581]
[97.31610107 46.28927612]
[100.55636597 31.64343262]
[103.79663849 16.99759102]
[107.03690338 2.35175061]
[95.29522705 -13.74111366]
[98.83787537 -33.04191589]
[115.03036499 -43.59067917]
[116.89184570 -58.47472382]
[118.75332642 -73.35877228]
[120.61480713 -88.24282074]
[122.47628784 -103.12686920]
[111.05998230 -113.63627625]
[108.03428650 -128.85549927]
[114.56263733 -142.93243408]
[128.13475037 -150.45422363]
[143.53187561 -148.52857971]
[154.83351135 -137.89593506]
[157.69392395 -122.64479065]
[151.01324463 -108.63949585]
[137.36033630 -101.26538849]
[135.49885559 -86.38134003]
[133.63737488 -71.49729156]
[131.77589417 -56.61324310]
[129.91441345 -41.72919464]
[138.39523315 -35.42267990]
[143.44845581 -26.04739952]
[144.06329346 -15.33288479]
[140.05509949 -5.28925514]
[132.11306763 2.16989517]
[121.68274689 5.59201765]
[118.44247437 20.23785973]
[115.20220947 34.88370132]
[111.96194458 49.52954102]
[108.72167969 64.17538452]
[105.48140717 78.82122803]
[114.12621307 66.56286621]
[129.00723267 64.67739105]
[140.43612671 74.39234924]
[140.97204590 89.38277435]
[130.26609802 99.88907623]
[115.28881073 99.07128143]
[128.78884888 105.60955048]
[142.28889465 112.14781952]
[157.85427856 108.26221466]
[170.50898743 118.12314606]
[170.54539490 134.16616821]
[157.93556213 144.08442688]
[142.35269165 140.26948547]
[135.75062561 125.64785767]
[122.25057983 119.10958862]
[108.75054169 112.57132721]
[115.61572266 125.90808868]
[108.71939850 139.22877502]
[93.86610413 141.32153320]
[83.55766296 130.42494202]
[86.47059631 115.71041870]
[75.30263519 125.72424316]
[64.13467407 135.73806763]
[52.96670914 145.75189209]
[61.02682114 158.44378662]
[66.88784027 172.28930664]
[70.38988495 186.91072083]
[71.43740082 201.90913391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[32 96]
[33 95]
[34 94]
[35 93]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
