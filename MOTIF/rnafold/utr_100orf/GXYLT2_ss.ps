%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCUCCGCAGCAAGGCGGCGGCGCUGCUCUUGCUCGCGCUGGCCGCGCUGCUGCUGGCGCUGCUGUCCCUGCGCGCUGGCCGCGCUGAGCCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[125.98595428 189.82434082]
[126.60478210 174.83709717]
[133.95222473 161.75982666]
[146.43070984 153.43592834]
[161.32528687 151.67506409]
[149.00094604 143.12458801]
[136.67660522 134.57409668]
[121.80908966 133.67628479]
[114.88107300 119.45259857]
[102.55673981 110.90211487]
[90.10091400 102.54433441]
[77.51662445 94.38127136]
[64.93233490 86.21820831]
[52.34804153 78.05514526]
[39.76374817 69.89208221]
[27.17945671 61.72901917]
[11.91042900 64.81034088]
[-0.73554677 56.35256577]
[-3.57901931 41.77689362]
[-16.16331100 33.61383057]
[-28.74760246 25.45076942]
[-41.33189392 17.28770638]
[-53.91618729 9.12464333]
[-66.62590790 1.15827608]
[-79.45798492 -6.60946846]
[-92.29005432 -14.37721252]
[-105.12213135 -22.14495659]
[-117.95420837 -29.91270065]
[-136.28540039 -29.79190254]
[-144.28108215 -45.32800674]
[-157.34852600 -52.69291687]
[-173.73225403 -51.98192596]
[-182.31040955 -65.95859528]
[-174.25852966 -80.24491882]
[-157.85968018 -80.14436340]
[-149.98361206 -65.76036072]
[-136.91616821 -58.39545059]
[-125.06948853 -61.34063721]
[-114.07530212 -55.16386795]
[-110.18646240 -42.74477768]
[-97.35438538 -34.97703171]
[-84.52231598 -27.20928764]
[-71.69023895 -19.44154358]
[-58.85816193 -11.67379856]
[-51.37420273 -10.88905811]
[-45.75312424 -3.45964909]
[-33.16883087 4.70341349]
[-20.58454132 12.86647606]
[-8.00024891 21.02953911]
[4.58404350 29.19260216]
[19.05266762 25.84677887]
[31.93121529 33.94601822]
[35.34251785 49.14472580]
[47.92681122 57.30778885]
[60.51110458 65.47085571]
[73.09539795 73.63391876]
[85.67968750 81.79697418]
[98.26397705 89.96003723]
[106.35267639 91.39809418]
[111.10722351 98.57778168]
[123.43155670 107.12826538]
[139.18060303 108.63767242]
[145.22709656 122.24976349]
[157.55143738 130.80024719]
[169.87576294 139.35073853]
[183.47586060 145.67825317]
[197.95463562 149.59808350]
[212.43341064 153.51791382]
[219.36845398 146.17395020]
[228.49308777 141.98023987]
[238.46531677 141.50527954]
[247.83636475 144.77413940]
[255.26127625 151.27114868]
[259.69180298 160.02076721]
[260.52435303 169.73387146]
[274.40475464 175.42019653]
[288.28515625 181.10652161]
[302.16555786 186.79284668]
[316.04595947 192.47917175]
[331.33969116 187.63339233]
[344.58297729 196.68852234]
[345.61669922 212.69822693]
[333.64785767 223.38125610]
[317.85797119 220.54248047]
[310.35964966 206.35958862]
[296.47924805 200.67326355]
[282.59884644 194.98693848]
[268.71841431 189.30061340]
[254.83801270 183.61427307]
[236.98725891 193.23901367]
[217.44630432 186.83374023]
[208.51358032 167.99668884]
[194.03480530 164.07685852]
[179.55603027 160.15702820]
[187.80343628 172.68620300]
[189.47291565 187.59301758]
[184.20149231 201.63623047]
[173.13531494 211.76242065]
[158.68052673 215.76983643]
[143.98007202 212.78710938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 65]
[6 64]
[7 63]
[9 61]
[10 60]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[16 53]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[30 37]
[31 36]
[66 94]
[67 93]
[68 92]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
