%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACCACACAAUGGUCACAGAGUUUGUCCUCCUGGGCCUUUCUGAUGAUCCUGACCUUCAGAUUGUGAUUUUUCUCUUUUUAUUUAUCACGUAUAUAU\
) } def
/len { sequence length } bind def

/coor [
[130.92448425 286.13031006]
[125.89389038 271.96868896]
[123.03025818 257.21548462]
[122.39756012 242.20025635]
[124.00994110 227.25843811]
[127.83136749 212.72384644]
[133.77647400 198.92118835]
[141.71244812 186.15882874]
[151.46199036 174.72186279]
[141.62306213 163.39952087]
[131.78413391 152.07717896]
[121.94520569 140.75482178]
[112.10627747 129.43247986]
[102.26734924 118.11013794]
[76.61670685 104.07540131]
[63.54926682 96.71048737]
[50.48182297 89.34558105]
[37.41437912 81.98066711]
[24.34693527 74.61576080]
[11.16653347 67.45495605]
[-2.12363696 60.50000763]
[-15.41380787 53.54505157]
[-28.70397758 46.59009933]
[-41.99414825 39.63514709]
[-54.40505219 45.13464355]
[-67.51495361 42.46420670]
[-76.51840973 32.83400726]
[-78.24960327 19.96214104]
[-91.31704712 12.59722900]
[-104.38449097 5.23231792]
[-117.45193481 -2.13259315]
[-133.83566284 -1.42160177]
[-142.41381836 -15.39826870]
[-134.36193848 -29.68459892]
[-117.96309662 -29.58403778]
[-110.08702087 -15.20003700]
[-97.01957703 -7.83512545]
[-83.95214081 -0.47021446]
[-70.88469696 6.89469671]
[-54.98674774 1.66070056]
[-39.88549042 9.62503529]
[-35.03919601 26.34497643]
[-21.74902534 33.29993057]
[-8.45885468 40.25488281]
[4.83131599 47.20983505]
[18.12148666 54.16478729]
[25.63975716 54.48273849]
[31.71184540 61.54831314]
[44.77928925 68.91322327]
[57.84673309 76.27813721]
[70.91417694 83.64305115]
[83.98162079 91.00795746]
[98.33148956 86.63973999]
[105.07891083 73.24301147]
[111.82633972 59.84628677]
[118.57376099 46.44956207]
[120.29857635 29.58358002]
[136.98291016 26.57201958]
[144.49545288 41.77063751]
[131.97048950 53.19698715]
[125.22306061 66.59371185]
[118.47563934 79.99044037]
[111.72821045 93.38716125]
[113.58969116 108.27120972]
[123.42861938 119.59355927]
[133.26754761 130.91589355]
[143.10647583 142.23825073]
[152.94540405 153.56059265]
[162.78433228 164.88293457]
[175.46965027 156.82437134]
[189.21438599 150.74655151]
[203.71148682 146.78527832]
[218.63708496 145.02902222]
[233.65771484 145.51702881]
[248.43783569 148.23838806]
[262.64724731 153.13230896]
[275.96847534 160.08947754]
[288.10397339 168.95443726]
[298.78259277 179.52915955]
[307.76577759 191.57739258]
[314.85284424 204.82998657]
[319.88546753 218.99085999]
[322.75119019 233.74366760]
[323.38601685 248.75881958]
[321.77578735 263.70086670]
[317.95642090 278.23599243]
[312.01327515 292.03948975]
[304.07913208 304.80300903]
[294.33120728 316.24136353]
[282.98730469 326.09899902]
[270.30084229 334.15576172]
[256.55523682 340.23162842]
[242.05757141 344.19082642]
[227.13172913 345.94497681]
[212.11116028 345.45483398]
[197.33143616 342.73135376]
[183.12272644 337.83541870]
[169.80247498 330.87634277]
[157.66824341 322.00964355]
[146.99113464 311.43341064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[28 39]
[29 38]
[30 37]
[31 36]
[53 63]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
