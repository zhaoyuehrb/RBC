%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGGGUAGAAGGAAUAACACAAAUGUGGCUGACUUCAUCCUUAUGGGACUGACACUUUCUGAAGAGAUCCAGAUGGCUCUGUUUAUGCUAUUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[152.34426880 103.42234039]
[137.38960266 104.58760071]
[122.43492889 105.75285339]
[107.48025513 106.91811371]
[100.18273163 110.69186401]
[92.04362488 107.87966156]
[77.05994415 108.57926941]
[62.07627106 109.27887726]
[47.09259415 109.97847748]
[38.49122238 113.55745697]
[31.63352013 110.45948792]
[16.63533401 110.69276428]
[1.63714850 110.92604065]
[-13.36103725 111.15931702]
[-18.84910202 124.28447723]
[-28.91832924 134.27258301]
[-42.00683594 139.62135315]
[-56.10233307 139.54449463]
[-69.05148315 134.08714294]
[-78.88887787 124.11382294]
[-84.13532257 111.17172241]
[-99.13351440 110.93844604]
[-114.13169861 110.70516205]
[-128.18855286 119.15128326]
[-142.39839172 110.96517181]
[-142.14335632 94.56800842]
[-127.68580627 86.82778168]
[-113.89842224 95.70697784]
[-98.90023041 95.94025421]
[-83.90204620 96.17353058]
[-77.07754517 81.81508636]
[-64.65592957 71.80090332]
[-49.06387329 68.15174103]
[-33.37547684 71.63858032]
[-20.70623398 81.62035370]
[-13.59431458 96.16113281]
[1.40387142 95.92785645]
[16.40205765 95.69458008]
[31.40024376 95.46130371]
[46.39298630 94.99480438]
[61.37666321 94.29519653]
[76.36033630 93.59559631]
[91.34401703 92.89598846]
[106.31500244 91.96343994]
[121.26966858 90.79818726]
[136.22433472 89.63292694]
[151.17901611 88.46766663]
[138.41319275 80.59152222]
[128.45666504 69.37244415]
[122.15318298 55.76119614]
[120.03693390 40.91123199]
[122.28724670 26.08098793]
[128.71342468 12.52723598]
[138.77088928 1.39856410]
[151.60734558 -6.36194372]
[166.13497925 -10.09663486]
[181.12266541 -9.48902035]
[195.30030823 -4.59058952]
[207.46643066 4.18354654]
[216.59002686 16.08983612]
[221.89796448 30.11930275]
[222.94039917 45.08303452]
[219.62901306 59.71295929]
[212.24440002 72.76927948]
[201.41236877 83.14556885]
[188.05087280 89.96249390]
[173.28829956 92.64249420]
[186.78834534 99.18076324]
[200.28839111 105.71902466]
[213.78842163 112.25729370]
[218.51370239 111.70748901]
[222.69384766 112.70167542]
[225.88412476 114.84575653]
[227.82875061 117.63634491]
[228.48066711 120.53794861]
[241.06495667 128.70101929]
[253.64924622 136.86407471]
[266.23355103 145.02714539]
[278.81784058 153.19020081]
[291.40213013 161.35327148]
[305.41976929 154.91050720]
[320.69216919 157.09165955]
[332.34594727 167.20071411]
[336.66244507 182.01190186]
[332.26425171 196.79904175]
[320.55484009 206.84361267]
[305.27062988 208.94041443]
[291.28875732 202.42036438]
[283.07080078 189.36399841]
[283.23907471 173.93756104]
[270.65478516 165.77449036]
[258.07046509 157.61143494]
[245.48619080 149.44836426]
[232.90190125 141.28530884]
[220.31759644 133.12223816]
[207.25015259 125.75733185]
[193.75012207 119.21906281]
[180.25007629 112.68080139]
[166.75004578 106.14253235]
[162.15093994 107.27754211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[6 43]
[7 42]
[8 41]
[9 40]
[11 39]
[12 38]
[13 37]
[14 36]
[21 30]
[22 29]
[23 28]
[67 99]
[68 98]
[69 97]
[70 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
