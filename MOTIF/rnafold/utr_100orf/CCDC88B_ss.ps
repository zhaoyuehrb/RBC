%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGGGCAGGUGCAGCUGCCACAGUGAGACGGGCACCCCGACCCGGGCAUGGAGGGGGGCAAGGGGCCCAGGCUCAGAGACUUCCUGAGUGGGAGUCUGGCUACCUGGGCGCUGGGACUGGCCGGGCUGGUCGGGGAGGCGGAGGACU\
) } def
/len { sequence length } bind def

/coor [
[-36.76508713 347.46630859]
[-45.58186722 359.60156250]
[-54.39864731 371.73681641]
[-63.21542358 383.87207031]
[-64.04299164 405.24191284]
[-83.10742188 413.05447388]
[-91.14482117 425.71939087]
[-99.18222046 438.38430786]
[-107.21962738 451.04922485]
[-115.25702667 463.71414185]
[-111.56526947 479.08120728]
[-119.89207458 492.51397705]
[-135.29730225 496.04309082]
[-148.64131165 487.57470703]
[-152.00732422 472.13302612]
[-143.39834595 458.87930298]
[-127.92194366 455.67672729]
[-119.88454437 443.01181030]
[-111.84714508 430.34689331]
[-103.80973816 417.68197632]
[-95.77233887 405.01705933]
[-99.13057709 396.67373657]
[-98.22092438 387.58706665]
[-93.12351227 379.84399414]
[-84.89477539 375.28234863]
[-75.35067749 375.05529785]
[-66.53389740 362.92004395]
[-57.71712112 350.78479004]
[-48.90034103 338.64953613]
[-57.97465897 321.38793945]
[-57.12667084 301.82714844]
[-46.50859451 285.28475952]
[-28.93928909 276.29727173]
[-9.15630817 277.37597656]
[-1.65630794 264.38558960]
[-2.63150644 246.89198303]
[13.32394314 237.76084900]
[20.55024910 224.61624146]
[27.77655411 211.47164917]
[35.00285721 198.32704163]
[42.22916412 185.18244934]
[49.45546722 172.03784180]
[56.68177414 158.89324951]
[63.90808105 145.74864197]
[63.43714142 140.93540955]
[66.03115082 135.78521729]
[71.72221375 132.21415710]
[79.49262238 119.38369751]
[87.26302338 106.55323792]
[87.74781036 92.57981110]
[99.90650940 85.67636108]
[107.67691803 72.84589386]
[115.44731903 60.01543427]
[111.89576721 44.84888077]
[119.95883942 31.94766045]
[134.43971252 28.65526390]
[142.21011353 15.82480049]
[134.90693665 5.08551884]
[132.24043274 -7.57713699]
[134.57551575 -20.25741196]
[141.52708435 -31.06069374]
[152.02299500 -38.38659668]
[164.46928406 -41.16600037]
[176.99218750 -39.01697159]
[185.29306030 -51.51078796]
[186.48539734 -67.28700256]
[199.97311401 -73.60606384]
[208.27398682 -86.09987640]
[216.57485962 -98.59369659]
[224.87573242 -111.08751678]
[233.17660522 -123.58133698]
[241.47747803 -136.07514954]
[249.77835083 -148.56896973]
[242.07952881 -161.70249939]
[240.85147095 -176.81469727]
[246.28436279 -190.90383911]
[257.25064087 -201.19468689]
[271.53857422 -205.68516541]
[286.29815674 -203.53570557]
[294.59902954 -216.02952576]
[302.89990234 -228.52334595]
[311.20077515 -241.01715088]
[319.50164795 -253.51097107]
[327.80252075 -266.00479126]
[336.10339355 -278.49862671]
[344.40426636 -290.99243164]
[342.65551758 -306.93988037]
[354.13452148 -318.14755249]
[370.03558350 -316.01788330]
[378.16079712 -302.18453979]
[372.27713013 -287.25933838]
[356.89810181 -282.69155884]
[348.59722900 -270.19775391]
[340.29635620 -257.70391846]
[331.99548340 -245.21009827]
[323.69461060 -232.71627808]
[315.39373779 -220.22247314]
[307.09286499 -207.72865295]
[298.79199219 -195.23483276]
[306.49307251 -182.46145630]
[307.89025879 -167.54981995]
[302.65310669 -153.45252991]
[291.77017212 -142.98439026]
[277.36291504 -138.26028442]
[262.27218628 -140.26809692]
[253.97129822 -127.77428436]
[245.67042542 -115.28046417]
[237.36955261 -102.78664398]
[229.06867981 -90.29282379]
[220.76780701 -77.79900360]
[212.46693420 -65.30519104]
[211.86833191 -50.42261505]
[197.78688049 -43.20991516]
[189.48599243 -30.71609688]
[197.69204712 -15.64221764]
[197.17036438 1.60126352]
[187.97410583 16.30171013]
[172.53939819 24.39640808]
[155.04058838 23.59520531]
[147.27017212 36.42567062]
[151.06137085 50.78402710]
[143.36386108 63.90663147]
[128.27778625 67.78583527]
[120.50737762 80.61630249]
[112.73697662 93.44676208]
[112.25218964 107.42018890]
[100.09349060 114.32363892]
[92.32308197 127.15410614]
[84.55268097 139.98457336]
[77.05268097 152.97494507]
[69.82637787 166.11955261]
[62.60007095 179.26414490]
[55.37376404 192.40875244]
[48.14745712 205.55334473]
[40.92115402 218.69795227]
[33.69484711 231.84254456]
[26.46854401 244.98715210]
[29.31179237 257.61233521]
[22.96976471 268.42999268]
[11.33407307 271.88558960]
[3.83407307 284.87597656]
[10.78528690 293.13125610]
[15.13047409 302.98684692]
[16.53092194 313.64505005]
[14.88573551 324.24679565]
[10.33901310 333.94100952]
[3.26729894 341.95278931]
[-5.75156593 347.64547729]
[-15.98565388 350.57104492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[34 141]
[35 140]
[37 137]
[38 136]
[39 135]
[40 134]
[41 133]
[42 132]
[43 131]
[44 130]
[47 129]
[48 128]
[49 127]
[51 125]
[52 124]
[53 123]
[56 120]
[57 119]
[64 114]
[65 113]
[67 111]
[68 110]
[69 109]
[70 108]
[71 107]
[72 106]
[73 105]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
