%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCUGAGCGUUGGAAGCCAUUUUGGCUGCAACCUACCUGAAGCGAUGUCUGCCUUUGGUCACGACGAGGCCUGGAUGGAGGCCGGAGGCUUUGGUCUGGAGGCUGCCGAAAGAACGGAAUACCAGUCUCUGUGCAAAUCUAAAC\
) } def
/len { sequence length } bind def

/coor [
[86.61171722 106.79472351]
[71.63312531 105.99367523]
[56.65452957 105.19262695]
[41.67593384 104.39158630]
[26.69733810 103.59053802]
[11.71874237 102.78949738]
[3.99351215 110.57260895]
[-6.53230047 112.73510742]
[-16.29135704 108.79297638]
[-22.11265755 100.29004669]
[-37.04334259 98.84970093]
[-51.97402954 97.40935516]
[-66.90471649 95.96900940]
[-81.83540344 94.52866364]
[-91.21014404 104.25860596]
[-104.29065704 106.75368500]
[-116.23368073 101.31922150]
[-122.74871826 90.15482330]
[-137.64521790 88.39574432]
[-152.54171753 86.63666534]
[-167.43821716 84.87757874]
[-175.22212219 93.97482300]
[-186.32943726 98.11122894]
[-197.92979431 96.35729218]
[-207.12713623 89.26894379]
[-211.68267822 78.71892548]
[-226.49040222 76.32492828]
[-241.29812622 73.93093109]
[-258.31198120 80.88818359]
[-271.50198364 69.35863495]
[-286.35748291 67.28162384]
[-301.21301270 65.20460510]
[-314.94207764 75.99096680]
[-331.89602661 73.59325409]
[-341.70181274 59.96936798]
[-356.59832764 58.21028519]
[-368.85031128 68.19349670]
[-384.56427002 66.50613403]
[-394.41735840 54.14928818]
[-392.56396484 38.45405197]
[-380.10363770 28.73213196]
[-364.42886353 30.75136948]
[-354.83923340 43.31378937]
[-339.94274902 45.07286835]
[-331.00643921 35.73307800]
[-318.12606812 33.22992706]
[-305.98651123 38.70316696]
[-299.13598633 50.34910202]
[-284.28048706 52.42611694]
[-269.42498779 54.50313187]
[-259.54046631 47.45347977]
[-247.10771179 49.11022949]
[-238.90412903 59.12320328]
[-224.09640503 61.51720047]
[-209.28868103 63.91119766]
[-195.18626404 52.32009888]
[-176.76564026 54.68716431]
[-165.67912292 69.98108673]
[-150.78263855 71.74016571]
[-135.88613892 73.49924469]
[-120.98963928 75.25833130]
[-108.28021240 64.29319000]
[-91.23410797 65.91043854]
[-80.39505768 79.59797668]
[-65.46437073 81.03832245]
[-50.53368378 82.47866821]
[-35.60300064 83.91901398]
[-20.67231178 85.35935974]
[-3.78178716 76.03205872]
[12.51978874 87.81089783]
[27.49838448 88.61194611]
[42.47697830 89.41298676]
[57.45557404 90.21403503]
[72.43417358 91.01508331]
[87.41276550 91.81612396]
[100.78513336 85.02055359]
[108.96815491 72.44923401]
[117.15118408 59.87791061]
[118.19511414 44.09118271]
[131.62283325 37.64557648]
[139.80584717 25.07425308]
[147.98887634 12.50293159]
[156.17189026 -0.06838991]
[164.35491943 -12.63971138]
[172.53794861 -25.21103287]
[176.11137390 -41.78411102]
[193.02600098 -42.93821335]
[198.81742859 -27.00410843]
[185.10926819 -17.02800941]
[176.92623901 -4.45668793]
[168.74322510 8.11463356]
[160.56019592 20.68595505]
[152.37716675 33.25727844]
[144.19415283 45.82859802]
[143.73551941 60.71614075]
[129.72250366 68.06093597]
[121.53948212 80.63225555]
[113.35645294 93.20357513]
[112.98411560 94.44152069]
[112.50997925 95.59892273]
[127.05922699 99.24848175]
[141.60847473 102.89804077]
[156.15773010 106.54760742]
[170.70698547 110.19716644]
[185.25622559 113.84672546]
[199.80548096 117.49629211]
[214.35473633 121.14585114]
[229.07812500 124.01322937]
[243.93362427 126.09024048]
[258.78912354 128.16725159]
[271.25164795 118.44815063]
[286.92596436 120.47092438]
[296.51275635 133.03550720]
[294.32437134 148.68756104]
[281.65914917 158.14099121]
[266.03109741 155.78724670]
[256.71212769 143.02276611]
[241.85661316 140.94575500]
[227.00109863 138.86872864]
[233.44903564 152.41215515]
[227.07818604 165.99200439]
[212.54132080 169.69061279]
[200.45504761 160.80680847]
[199.64624023 145.82862854]
[210.70516968 135.69509888]
[196.15591431 132.04554749]
[181.60667419 128.39598083]
[167.05741882 124.74641418]
[152.50816345 121.09685516]
[137.95892334 117.44729614]
[123.40966797 113.79773712]
[108.86041260 110.14817047]
[121.24045563 118.61779785]
[129.85763550 130.89558411]
[133.61428833 145.41755676]
[132.03186035 160.33386230]
[125.31194305 173.74440002]
[114.31053162 183.94091797]
[100.42901611 189.62454224]
[85.43566895 190.07127380]
[71.24038696 185.22422791]
[59.65140915 175.70080566]
[52.14496613 162.71414185]
[49.67725754 147.91851807]
[52.56262589 133.19865417]
[60.43352127 120.42958832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[18 61]
[19 60]
[20 59]
[21 58]
[26 55]
[27 54]
[28 53]
[30 50]
[31 49]
[32 48]
[35 44]
[36 43]
[76 98]
[77 97]
[78 96]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[100 132]
[101 131]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
