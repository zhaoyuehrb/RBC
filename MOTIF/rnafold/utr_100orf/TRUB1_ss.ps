%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUCUUGUUGCAUCAUCAGCGUGCACCUCCACGAUGAAACAGGUCUGGGCUACAAAAGUAUGGCCGCUUCUGAGGCGGCGGUGGUGUCUUCGCCGUCUUUGAAAACAGACACAUCCCCUGUCCUUGAAACUGCAGGAACGGUCGCAGCAAUGGCUGCGA\
) } def
/len { sequence length } bind def

/coor [
[92.16956329 156.09675598]
[88.14697266 170.54731750]
[84.26468658 185.03620911]
[80.52307129 199.56205750]
[85.43974304 215.20681763]
[74.15151215 227.10252380]
[58.27074432 223.01190186]
[54.13421249 207.14302063]
[65.99722290 195.82043457]
[69.73883820 181.29458618]
[68.35517120 173.99681091]
[73.69641113 166.52473450]
[77.71900177 152.07417297]
[71.95703125 149.21131897]
[66.55690765 145.71347046]
[61.58831024 141.62576294]
[57.11536026 137.00094604]
[53.19577026 131.89868164]
[39.79127884 138.63066101]
[26.38678932 145.36265564]
[17.52699852 158.47045898]
[2.68099952 157.26814270]
[-10.72348976 164.00013733]
[-24.12797928 170.73213196]
[-37.53247070 177.46411133]
[-42.26508713 192.54316711]
[-56.31253815 199.78503418]
[-71.34071350 194.89326477]
[-78.43366241 180.77003479]
[-73.38327026 165.79441833]
[-59.18584061 158.85118103]
[-44.26445770 164.05961609]
[-30.85996819 157.32763672]
[-17.45547676 150.59564209]
[-4.05098820 143.86366272]
[3.85002351 131.23736572]
[19.65480232 131.95816040]
[33.05929184 125.22617340]
[46.46377945 118.49418640]
[43.44093704 103.03879547]
[44.79039383 87.34848022]
[50.40782547 72.63619232]
[59.85897827 60.03926849]
[72.41323090 50.53150558]
[87.10008240 44.84790039]
[85.64791870 29.91835976]
[84.19575500 14.98881817]
[82.74359131 0.05927611]
[81.29143524 -14.87026596]
[74.30078125 -28.14169312]
[62.81011200 -37.78350830]
[51.31944656 -47.42531967]
[39.82877731 -57.06713486]
[28.33811188 -66.70894623]
[13.31510544 -62.82450485]
[-1.10960615 -68.54353333]
[-9.38942814 -81.66695404]
[-8.34059811 -97.14854431]
[1.63358521 -109.03531647]
[16.69784546 -112.75656128]
[31.05966949 -106.88138580]
[39.19664001 -93.66891479]
[37.97992706 -78.19961548]
[49.47059250 -68.55780029]
[60.96125793 -58.91598892]
[72.45192719 -49.27417374]
[83.94259644 -39.63235855]
[91.08444977 -41.92230606]
[105.36817169 -46.50219345]
[112.51003265 -48.79214096]
[116.25164795 -63.31798935]
[119.99326324 -77.84384155]
[115.94287109 -93.13778687]
[126.61029816 -103.53274536]
[130.35191345 -118.05860138]
[134.09353638 -132.58444214]
[137.83514404 -147.11029053]
[141.57676697 -161.63613892]
[145.31838989 -176.16200256]
[149.05999756 -190.68785095]
[152.80162048 -205.21369934]
[156.54324341 -219.73954773]
[160.28485107 -234.26539612]
[150.29971313 -246.14295959]
[149.23661804 -261.62356567]
[157.50434875 -274.75463867]
[171.92378235 -280.48693848]
[186.95036316 -276.61636353]
[196.80606079 -264.63116455]
[197.70115662 -249.13992310]
[189.29147339 -236.09933472]
[174.81069946 -230.52377319]
[171.06909180 -215.99792480]
[167.32746887 -201.47207642]
[163.58584595 -186.94622803]
[159.84423828 -172.42037964]
[156.10261536 -157.89453125]
[152.36100769 -143.36868286]
[148.61938477 -128.84283447]
[144.87776184 -114.31697845]
[141.13615417 -99.79113007]
[145.45416260 -85.53617096]
[134.51911926 -74.10221863]
[130.77749634 -59.57637024]
[127.03588104 -45.05052185]
[120.80828094 -27.46894646]
[108.78822327 -17.60307503]
[96.22097015 -16.32242966]
[97.67313385 -1.39288700]
[99.12529755 13.53665543]
[100.57746124 28.46619606]
[102.02962494 43.39574051]
[115.90644073 45.13577271]
[129.04902649 50.25409698]
[140.64102173 58.49485016]
[149.94738770 69.40646362]
[156.36094666 82.36615753]
[159.44174194 96.61535645]
[158.94683838 111.30406952]
[154.84835815 125.54154205]
[168.73422241 131.21453857]
[182.62007141 136.88754272]
[196.50593567 142.56053162]
[212.20733643 140.61715698]
[221.06301880 152.59321594]
[234.94888306 158.26620483]
[248.83474731 163.93920898]
[262.72061157 169.61219788]
[277.19351196 163.26313782]
[291.88629150 169.08529663]
[298.08200073 183.62451172]
[292.10482788 198.25491333]
[277.50091553 204.29655457]
[262.93450928 198.16503906]
[257.04760742 183.49806213]
[243.16174316 177.82507324]
[229.27589417 172.15206909]
[215.39002991 166.47906494]
[200.68183899 168.82821655]
[190.83293152 156.44639587]
[176.94708252 150.77339172]
[163.06121826 145.10040283]
[149.17535400 139.42739868]
[138.46641541 149.93066406]
[143.86907959 163.92391968]
[149.27174377 177.91717529]
[154.67440796 191.91043091]
[160.07707214 205.90368652]
[165.47973633 219.89694214]
[170.88240051 233.89019775]
[183.97967529 243.75901794]
[181.71337891 260.00079346]
[166.41488647 265.90740967]
[153.82197571 255.40261841]
[156.88914490 239.29286194]
[151.48648071 225.29960632]
[146.08381653 211.30635071]
[140.68115234 197.31309509]
[135.27848816 183.31983948]
[129.87582397 169.32658386]
[124.47315979 155.33332825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 10]
[4 9]
[18 39]
[19 38]
[20 37]
[22 35]
[23 34]
[24 33]
[25 32]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[70 105]
[71 104]
[72 103]
[74 101]
[75 100]
[76 99]
[77 98]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[120 143]
[121 142]
[122 141]
[123 140]
[125 138]
[126 137]
[127 136]
[128 135]
[144 161]
[145 160]
[146 159]
[147 158]
[148 157]
[149 156]
[150 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
