%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCCUCCUCCCUUGCUCGCUCGCUGGCUCCCUCCCCCCGGGCCGGCUCGGCGUUGACUCCGCCGCACGCUGCAGCCGCGGCUGGAAGAUGGCGGGGAACGACUGCGGCGCGCUGCUGGACGAAGAGCUCUCCUCCUUCUUCCUCAACUAUCUCGCUGACACGCAGGGUGGAGGGUCCGGGGAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[113.54185486 358.91305542]
[113.29643250 343.91506958]
[113.05100250 328.91708374]
[112.80558014 313.91909790]
[112.56015778 298.92108154]
[112.31472778 283.92309570]
[112.06930542 268.92510986]
[111.82387543 253.92712402]
[111.57845306 238.92912292]
[99.30110168 230.53837585]
[94.25912476 216.35943604]
[98.58358002 201.75968933]
[110.81700897 192.39756775]
[110.57158661 177.39958191]
[110.32615662 162.40158081]
[110.08073425 147.40359497]
[76.14133453 135.47843933]
[63.53465271 106.53100586]
[49.58439255 112.04374695]
[42.73997879 118.11771393]
[35.36051178 117.53050232]
[21.32192421 122.81424713]
[17.40421295 132.98291016]
[8.71040440 139.18177795]
[-1.74061072 139.55551147]
[-10.47963333 134.22216797]
[-24.68358421 139.04376221]
[-38.88753510 143.86535645]
[-53.09148788 148.68695068]
[-67.29544067 153.50854492]
[-81.49938965 158.33012390]
[-88.63359833 164.06094360]
[-95.97536469 163.11235046]
[-110.25630188 167.70088196]
[-114.97148895 182.48420715]
[-127.49548340 191.64550781]
[-143.01254272 191.66204834]
[-155.55606079 182.52751160]
[-160.30278015 167.75428772]
[-155.42750549 153.02297974]
[-142.80485535 143.99809265]
[-127.28852844 144.14987183]
[-114.84484863 153.41995239]
[-100.56390381 148.83140564]
[-86.32098389 144.12617493]
[-72.11703491 139.30458069]
[-57.91308212 134.48298645]
[-43.70912933 129.66140747]
[-29.50517654 124.83981323]
[-15.30122471 120.01821899]
[-3.66889167 104.58396912]
[16.03817368 108.77566528]
[30.07676125 103.49191284]
[44.07165527 98.09348297]
[58.02191162 92.58074951]
[63.19063568 78.49939728]
[56.11968231 65.27058411]
[49.04873276 52.04176331]
[41.97778320 38.81294250]
[26.12187958 29.46424675]
[27.36119461 11.96593761]
[20.07474327 -1.14541733]
[12.78829288 -14.25677204]
[5.50184155 -27.36812782]
[-1.78460920 -40.47948456]
[-9.07106018 -53.59083939]
[-16.35751152 -66.70219421]
[-23.64396286 -79.81354523]
[-31.46050262 -92.61595917]
[-39.79405594 -105.08800507]
[-47.17606354 -110.49587250]
[-48.15997696 -117.83298492]
[-56.28835297 -130.43971252]
[-64.41672516 -143.04643250]
[-72.54509735 -155.65316772]
[-80.67346954 -168.25988770]
[-95.50006104 -175.26733398]
[-96.57486725 -191.63122559]
[-82.79223633 -200.51779175]
[-68.33054352 -192.78529358]
[-68.06674957 -176.38825989]
[-59.93837357 -163.78153992]
[-51.80999756 -151.17480469]
[-43.68162537 -138.56808472]
[-35.55325317 -125.96135712]
[-27.32201195 -113.42155457]
[-18.98845863 -100.94950867]
[-13.46005630 -114.89356995]
[0.83890724 -119.42563629]
[13.39022064 -111.21195984]
[14.96123123 -96.29445648]
[4.39631414 -85.64633179]
[-10.53260708 -87.09999847]
[-3.24615598 -73.98864746]
[4.04029512 -60.87728882]
[11.32674599 -47.76593399]
[18.61319733 -34.65457916]
[25.89964676 -21.54322243]
[33.18610001 -8.43186855]
[40.47254944 4.67948675]
[52.02289963 8.30717564]
[58.19738770 19.18454170]
[55.20660019 31.74199295]
[62.27754974 44.97080994]
[69.34850311 58.19963074]
[76.41945648 71.42845154]
[93.92266846 66.02567291]
[110.54392242 69.80646515]
[118.67229462 57.19974136]
[126.80066681 44.59301376]
[134.92904663 31.98628807]
[135.19284058 15.58926201]
[149.65452576 7.85676336]
[163.43716431 16.74332428]
[162.36235046 33.10721207]
[147.53576660 40.11466217]
[139.40739441 52.72138596]
[131.27902222 65.32811737]
[123.15065002 77.93483734]
[134.28729248 78.97048187]
[145.70648193 83.88668823]
[159.82965088 78.83333588]
[173.95280457 73.77999115]
[184.33966064 61.84584045]
[198.92956543 64.84316254]
[213.05271912 59.78981400]
[227.17588806 54.73646545]
[241.29904175 49.68311691]
[255.38038635 44.51439667]
[269.41897583 39.23064423]
[277.32312012 25.26983833]
[293.18829346 22.88751602]
[304.84411621 33.91119385]
[303.34924316 49.88444519]
[289.85037231 58.55396271]
[274.70272827 53.26923370]
[260.66415405 58.55298615]
[255.50314331 63.86009216]
[246.35240173 63.80627823]
[232.22923279 68.85962677]
[218.10607910 73.91297150]
[203.98291016 78.96632385]
[194.60624695 90.53902435]
[179.00614929 87.90315247]
[164.88299561 92.95649719]
[150.75982666 98.00984192]
[149.78088379 105.44567871]
[164.65252686 107.40380096]
[162.69418335 122.27541351]
[147.82299805 120.31735229]
[146.84403992 127.75318909]
[159.17807007 136.28968811]
[171.51210022 144.82620239]
[183.84611511 153.36270142]
[196.18014526 161.89920044]
[208.51416016 170.43569946]
[224.26490784 171.92724609]
[230.32684326 185.53247070]
[242.66085815 194.06896973]
[258.16302490 190.99351501]
[271.25274658 199.84983826]
[274.16415405 215.38365173]
[265.16992188 228.37901306]
[249.60620117 231.12600708]
[236.70664978 221.99490356]
[234.12435913 206.40299988]
[221.79032898 197.86650085]
[206.92179871 196.98553467]
[199.97766113 182.76972961]
[187.64363098 174.23323059]
[175.30961609 165.69671631]
[162.97558594 157.16021729]
[150.64157104 148.62371826]
[138.30754089 140.08721924]
[125.07872772 147.15817261]
[125.32415009 162.15615845]
[125.56958008 177.15414429]
[125.81500244 192.15214539]
[138.34820557 201.10897827]
[143.14804077 215.55941772]
[138.57267761 229.89573669]
[126.57643890 238.68370056]
[126.82186890 253.68168640]
[127.06729126 268.67968750]
[127.31272125 283.67767334]
[127.55814362 298.67565918]
[127.80357361 313.67367554]
[128.04899597 328.67166138]
[128.29441833 343.66964722]
[128.53985596 358.66763306]
[131.04548645 377.88668823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 190]
[2 189]
[3 188]
[4 187]
[5 186]
[6 185]
[7 184]
[8 183]
[9 182]
[13 178]
[14 177]
[15 176]
[16 175]
[18 55]
[19 54]
[21 53]
[22 52]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[33 44]
[34 43]
[56 106]
[57 105]
[58 104]
[59 103]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 87]
[70 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
[108 119]
[109 118]
[110 117]
[111 116]
[121 146]
[122 145]
[123 144]
[125 142]
[126 141]
[127 140]
[128 139]
[129 137]
[130 136]
[151 174]
[152 173]
[153 172]
[154 171]
[155 170]
[156 169]
[158 167]
[159 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
