%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGCAGCUUUUAGCAGCAGCAUGCUGGAUGCUUCUUCUUGGAUCUAUGUAUGGUUAUGACAAGAAAGGAAACAAUGCAAACCCUGAAGCUAAUAUGA\
) } def
/len { sequence length } bind def

/coor [
[72.42238617 215.40666199]
[71.03919983 200.11018372]
[77.50411987 186.17819214]
[90.07812500 177.35833740]
[88.68043518 162.42359924]
[87.28274536 147.48886108]
[85.88506317 132.55410767]
[73.69519043 123.81299591]
[59.10151291 127.28063965]
[44.50783539 130.74829102]
[32.87016296 141.46627808]
[18.69896889 136.88079834]
[4.10529184 140.34844971]
[-10.48838615 143.81610107]
[-25.08206367 147.28373718]
[-39.67574310 150.75138855]
[-54.26942062 154.21902466]
[-68.86309814 157.68667603]
[-76.93779755 171.27250671]
[-92.27449036 175.08843994]
[-105.77419281 166.87055969]
[-109.42776489 151.49438477]
[-101.06761932 138.08232117]
[-85.65367126 134.59150696]
[-72.33074188 143.09300232]
[-57.73706436 139.62535095]
[-43.14338684 136.15769958]
[-28.54970932 132.69006348]
[-13.95603085 129.22241211]
[0.63764679 125.75476837]
[15.23132515 122.28712463]
[25.82515907 111.81716919]
[41.04019165 116.15460968]
[55.63386917 112.68696594]
[70.22754669 109.21932220]
[71.70486450 87.23553467]
[87.31137848 71.80906677]
[109.13237000 70.59685516]
[111.45584106 55.77789688]
[113.77931213 40.95893860]
[116.10278320 26.13998413]
[118.42626190 11.32102680]
[120.74973297 -3.49792981]
[122.14742279 -18.43267059]
[122.61391449 -33.42541504]
[123.08041382 -48.41815948]
[123.54691315 -63.41090393]
[111.76645660 -73.69461823]
[109.40343475 -89.15263367]
[117.57360077 -102.48613739]
[132.41925049 -107.39946747]
[146.93070984 -101.57269287]
[154.25613403 -87.75704193]
[150.93666077 -72.47583771]
[138.53965759 -62.94440460]
[138.07316589 -47.95166016]
[137.60665894 -32.95891571]
[137.14016724 -17.96617126]
[139.15258789 -15.77653694]
[140.33688354 -12.58805656]
[140.27995300 -8.74466705]
[138.71397400 -4.74344206]
[135.56869507 -1.17445719]
[133.24520874 13.64449978]
[130.92173767 28.46345520]
[128.59826660 43.28241348]
[126.27479553 58.10136795]
[123.95132446 72.92032623]
[132.88095093 84.97277832]
[147.73425293 87.06551361]
[162.58755493 89.15824127]
[170.62629700 76.22385406]
[183.23460388 67.68272400]
[198.22798157 65.01467133]
[213.00874329 68.68193054]
[225.01603699 78.04914856]
[232.16954041 91.49337769]
[233.22984314 106.68534088]
[228.01324463 120.99292755]
[217.42356873 131.93727112]
[203.29551697 137.62217712]
[188.07688904 137.06272888]
[174.40437317 130.35585022]
[164.64683533 118.66352081]
[160.49482727 104.01153564]
[145.64152527 101.91880798]
[130.78822327 99.82608032]
[128.65861511 111.50933075]
[122.25189972 121.55196381]
[112.49519348 128.44952393]
[100.81980133 131.15641785]
[102.21749115 146.09117126]
[103.61518097 161.02590942]
[105.01287079 175.96064758]
[119.00503540 182.29428101]
[127.94274139 194.78479004]
[129.42179871 210.07229614]
[123.04434204 224.04454041]
[110.52587891 232.94305420]
[95.23381042 234.37419128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 94]
[5 93]
[6 92]
[7 91]
[8 35]
[9 34]
[10 33]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 58]
[45 57]
[46 56]
[47 55]
[69 87]
[70 86]
[71 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
