%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCCAUGGAAUUGAACACCAACAUUAAAAGUAAAAAGGGGUUGGGAAGAAGAAACCUAAAACCAAUGAAUGGGGCUUGGCCCCCAGCUAGACGCGAGAUGGCUC\
) } def
/len { sequence length } bind def

/coor [
[112.41459656 181.36618042]
[101.39778900 182.29594421]
[90.35575104 181.74084473]
[79.48773193 179.71087646]
[68.98981476 176.24267578]
[59.05142593 171.39881897]
[49.85187149 165.26669312]
[41.55714798 157.95697021]
[29.98822975 167.50474548]
[18.41930962 177.05252075]
[20.34948730 192.35865784]
[13.67752075 206.26867676]
[0.53241050 214.34391785]
[-14.89128685 214.00762939]
[-27.67192650 205.36709595]
[-33.73125076 191.17948914]
[-31.13575363 175.97201538]
[-20.71364594 164.59735107]
[-5.79058743 160.68507385]
[8.87152958 165.48359680]
[20.44044876 155.93582153]
[32.00936890 146.38804626]
[27.05649567 138.12901306]
[23.10220146 129.34799194]
[20.20062447 120.16522217]
[18.39148521 110.70638275]
[17.69954872 101.10097504]
[18.13428879 91.48049927]
[19.68975639 81.97665405]
[22.34465218 72.71954346]
[26.06263542 63.83589172]
[30.79280663 55.44732666]
[36.47040939 47.66867447]
[43.01772308 40.60643005]
[50.34510803 34.35726929]
[58.35226059 29.00674629]
[66.92955780 24.62810516]
[75.95958710 21.28129196]
[85.31872559 19.01211929]
[83.99920654 4.07027102]
[72.16752625 -6.06131983]
[71.04219818 -21.23327637]
[80.77403259 -32.45053864]
[79.45451355 -47.39238739]
[78.13498688 -62.33423615]
[76.81546783 -77.27608490]
[75.49594116 -92.21793365]
[61.78675461 -99.29336548]
[54.09891891 -112.66873932]
[54.88560104 -128.07603455]
[63.89576721 -140.59883118]
[78.25431061 -146.24114990]
[93.37947083 -143.20256042]
[104.44486237 -132.45263672]
[107.91956329 -117.42166901]
[102.69480896 -102.90597534]
[90.43778992 -93.53746033]
[91.75731659 -78.59560394]
[93.07683563 -63.65375900]
[94.39636230 -48.71191025]
[95.71588135 -33.77005768]
[107.26297760 -24.43195343]
[108.81401062 -9.29759026]
[98.94105530 2.75074816]
[100.26057434 17.69259834]
[114.61716461 19.00052643]
[128.52534485 22.79325867]
[141.55847168 28.95444870]
[153.31669617 37.29508972]
[163.43934631 47.55931473]
[171.61587524 59.43225479]
[177.59545898 72.54968262]
[181.19467163 86.50919342]
[196.15428162 85.40915680]
[211.11389160 84.30912018]
[226.07350159 83.20908356]
[241.03311157 82.10904694]
[256.38616943 74.91741180]
[267.54690552 87.67963409]
[258.37304688 101.93714142]
[242.13314819 97.06865692]
[227.17353821 98.16869354]
[212.21392822 99.26873016]
[197.25431824 100.36876678]
[182.29470825 101.46880341]
[174.96081543 133.99194336]
[155.32771301 160.93783569]
[164.35688782 172.91589355]
[173.38607788 184.89396667]
[182.41525269 196.87202454]
[191.44442749 208.85008240]
[206.82070923 207.59565735]
[220.42349243 214.87356567]
[227.91217041 228.36145020]
[226.89714050 243.75538635]
[217.70230103 256.14321899]
[203.26167297 261.57205200]
[188.18322754 258.30950928]
[177.27842712 247.39672852]
[174.02697754 232.31590271]
[179.46636963 217.87925720]
[170.43719482 205.90119934]
[161.40802002 193.92314148]
[152.37882996 181.94508362]
[143.34965515 169.96702576]
[133.58149719 175.14558411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[39 65]
[40 64]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
