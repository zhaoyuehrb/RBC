%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGAGCUAGGAAAGGAUUACUCGCGCCUCGUUAGAAUCAGACAUGGCUUCAGGGGAUGCAGGACGCUCCCCUGAGCUGCCUGUCACCGACUAAGUGGAGCAGUGUUUCUUCCGCAGACUCAACUGAGAAGUCAGCCUCUGGGGCAGGCACCAGGA\
) } def
/len { sequence length } bind def

/coor [
[77.57754517 106.96611023]
[84.64757538 101.08746338]
[92.79087830 98.83814240]
[84.11949921 86.59856415]
[75.44811249 74.35899353]
[66.77673340 62.11941910]
[58.10535431 49.87984467]
[49.31272507 37.72708511]
[40.39970779 25.66233635]
[23.36690903 18.73155975]
[22.01562691 1.25800622]
[12.86450005 -10.62714767]
[3.71337247 -22.51230049]
[-5.43775463 -34.39745331]
[-13.19688416 -39.32268143]
[-14.64986706 -46.61110687]
[-23.56288338 -58.67585754]
[-32.47589874 -70.74060822]
[-46.89921188 -77.24279785]
[-48.23853302 -92.07706451]
[-57.15155029 -104.14181519]
[-66.06456757 -116.20656586]
[-74.97757721 -128.27131653]
[-82.63725281 -133.34983826]
[-83.94503784 -140.66571045]
[-92.61641693 -152.90528870]
[-106.90760040 -159.69296265]
[-107.95172119 -174.55091858]
[-116.62310028 -186.79049683]
[-130.10501099 -187.52069092]
[-140.54154968 -195.77587891]
[-144.24629211 -208.35342407]
[-140.07675171 -220.57884216]
[-148.50306702 -232.98840332]
[-156.92938232 -245.39796448]
[-165.35569763 -257.80752563]
[-180.42543030 -255.64778137]
[-194.87957764 -260.22650146]
[-205.86741638 -270.58450317]
[-211.24630737 -284.62829590]
[-209.99940491 -299.55325317]
[-202.42739868 -312.40356445]
[-210.85371399 -324.81311035]
[-219.28002930 -337.22268677]
[-227.70634460 -349.63223267]
[-235.15806580 -355.01126099]
[-236.17396545 -362.37335205]
[-244.35188293 -374.94799805]
[-252.52980042 -387.52264404]
[-260.95611572 -399.93218994]
[-269.62750244 -412.17178345]
[-278.29888916 -424.41134644]
[-286.97024536 -436.65090942]
[-295.64163208 -448.89050293]
[-304.31301880 -461.13006592]
[-312.98440552 -473.36965942]
[-321.65579224 -485.60922241]
[-330.32714844 -497.84878540]
[-337.88433838 -503.07861328]
[-339.04641724 -510.41903687]
[-347.47271729 -522.82861328]
[-362.89700317 -527.24121094]
[-368.93072510 -542.10638428]
[-360.94531250 -556.02087402]
[-345.06649780 -558.31060791]
[-333.47515869 -547.21917725]
[-335.06317139 -531.25488281]
[-326.63684082 -518.84533691]
[-318.08758545 -506.52017212]
[-309.41619873 -494.28060913]
[-300.74481201 -482.04101562]
[-292.07345581 -469.80145264]
[-283.40206909 -457.56188965]
[-274.73068237 -445.32229614]
[-266.05929565 -433.08273315]
[-257.38793945 -420.84317017]
[-248.71653748 -408.60357666]
[-244.19154358 -406.92700195]
[-240.69572449 -402.35934448]
[-239.95515442 -395.70056152]
[-231.77723694 -383.12591553]
[-223.59931946 -370.55126953]
[-215.29678345 -358.05856323]
[-206.87046814 -345.64898682]
[-198.44415283 -333.23944092]
[-190.01783752 -320.82989502]
[-175.28065491 -323.12792969]
[-160.94821167 -318.78161621]
[-149.87879944 -308.60177612]
[-144.30426025 -294.56808472]
[-145.38002014 -279.44427490]
[-152.94613647 -266.23385620]
[-144.51982117 -253.82427979]
[-136.09350586 -241.41471863]
[-127.66719055 -229.00515747]
[-111.05068207 -226.57562256]
[-101.11557770 -212.62074280]
[-104.38352966 -195.46188354]
[-95.71214294 -183.22230530]
[-82.04119873 -177.31008911]
[-80.37684631 -161.57666016]
[-71.70545959 -149.33709717]
[-62.91283035 -137.18432617]
[-53.99981689 -125.11958313]
[-45.08679962 -113.05483246]
[-36.17378616 -100.99008179]
[-22.38798714 -95.35083771]
[-20.41114998 -79.65361786]
[-11.49813461 -67.58887482]
[-2.58511901 -55.52412415]
[6.44739866 -43.54858017]
[15.59852600 -31.66342735]
[24.74965286 -19.77827454]
[33.90077972 -7.89312124]
[45.88426971 -6.00887918]
[53.60133362 3.86555982]
[52.46445465 16.74932098]
[61.37747192 28.81406784]
[67.91716766 32.34461212]
[70.34493256 41.20846558]
[79.01631165 53.44804001]
[87.68769073 65.68761444]
[96.35906982 77.92718506]
[105.03044891 90.16676331]
[116.34891510 100.01014709]
[129.67315674 106.89960480]
[142.99739075 113.78907013]
[156.32164001 120.67852783]
[172.66912842 119.37787628]
[181.74513245 133.03649902]
[174.21305847 147.60357666]
[157.82122803 148.09375000]
[149.43217468 134.00276184]
[136.10794067 127.11330414]
[122.78369904 120.22384644]
[109.45945740 113.33438873]
[104.00036621 118.47718048]
[93.08218384 128.76277161]
[87.62309265 133.90556335]
[93.70597839 147.61682129]
[99.78885651 161.32807922]
[105.87173462 175.03933716]
[111.95461273 188.75059509]
[127.15591431 191.86508179]
[137.59849548 203.34254456]
[139.26698303 218.76965332]
[131.51979065 232.21438599]
[117.33587646 238.50694275]
[102.16925812 235.22773743]
[91.85179901 223.63766479]
[90.35076904 208.19335938]
[98.24335480 194.83346558]
[92.16047668 181.12220764]
[86.07759857 167.41094971]
[79.99472046 153.69969177]
[73.91183472 139.98843384]
[71.31621552 127.38480377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 118]
[9 117]
[11 114]
[12 113]
[13 112]
[14 111]
[16 110]
[17 109]
[18 108]
[20 106]
[21 105]
[22 104]
[23 103]
[25 102]
[26 101]
[28 99]
[29 98]
[33 95]
[34 94]
[35 93]
[36 92]
[42 86]
[43 85]
[44 84]
[45 83]
[47 82]
[48 81]
[49 80]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[60 68]
[61 67]
[125 136]
[126 135]
[127 134]
[128 133]
[139 156]
[140 155]
[141 154]
[142 153]
[143 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
