%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGGGCUGUCGCGGGUUGGGGCGGUUGGGCUGGCAGCUGAGGCUCGUGGCCAUGGAGUGGGGUUCUGAGUCGGCUGCUGUGAGGCGGCACCGCGUCGGAGUAGAGCGUCGAGAGGGAGCGGCGGCCGCGCCACCGCCGGAGAGGGAGGCCC\
) } def
/len { sequence length } bind def

/coor [
[100.37840271 740.67456055]
[100.07440186 725.67761230]
[99.77039337 710.68066406]
[99.46639252 695.68377686]
[87.82325745 689.08477783]
[80.91867828 677.49383545]
[80.65597534 663.89630127]
[87.21138763 651.85681152]
[98.95971680 644.58465576]
[98.95971680 629.58465576]
[91.22241211 616.85736084]
[98.95971680 603.05718994]
[98.95971680 588.05718994]
[98.65570831 573.06024170]
[98.04782867 558.07257080]
[97.43994141 543.08489990]
[96.83206177 528.09722900]
[93.94664001 524.22448730]
[93.50313568 518.48437500]
[96.51573181 512.49243164]
[96.51573181 497.49243164]
[96.51573181 482.49243164]
[88.77843475 469.76516724]
[96.51573181 455.96499634]
[96.51573181 440.96499634]
[96.51573181 425.96499634]
[96.51573181 410.96499634]
[96.51573181 395.96499634]
[96.51573181 380.96499634]
[96.51573181 365.96499634]
[86.92556000 351.29812622]
[96.18755341 335.41430664]
[95.88354492 320.41738892]
[95.57954407 305.42047119]
[83.18199158 299.61749268]
[74.46205902 288.98004150]
[71.17262268 275.55615234]
[74.01380157 261.96261597]
[82.48490143 250.87463379]
[94.97151947 244.49958801]
[94.97151947 229.49958801]
[94.81951141 214.50036621]
[94.51550293 199.50344849]
[86.52185059 186.93559265]
[93.97787476 172.98144531]
[93.67387390 157.98452759]
[93.36986542 142.98760986]
[93.06586456 127.99069214]
[83.43601227 123.60498810]
[76.03647614 116.04090118]
[71.86359406 106.31694031]
[71.47923279 95.74240875]
[74.93515778 85.74114990]
[64.27494812 75.18843079]
[53.61473465 64.63571167]
[42.95452499 54.08298874]
[27.44427109 47.23694229]
[29.72910690 30.43766022]
[46.50437164 27.98269844]
[53.50724792 43.42277908]
[64.16745758 53.97549820]
[74.82766724 64.52822113]
[85.48787689 75.08094025]
[90.25595093 72.85935211]
[95.34826660 71.54086304]
[100.59535980 71.16934204]
[104.79482269 56.76918793]
[108.99428558 42.36903000]
[113.19374084 27.96887398]
[117.39320374 13.56871605]
[121.59266663 -0.83144051]
[114.25065613 -14.56944084]
[118.71464539 -29.11342430]
[131.85697937 -36.02824402]
[136.05644226 -50.42840195]
[140.25590515 -64.82855988]
[139.65641785 -74.00362396]
[144.68914795 -79.47640228]
[149.17959595 -93.78849030]
[153.67004395 -108.10057831]
[158.16049194 -122.41267395]
[162.65093994 -136.72476196]
[167.14138794 -151.03684998]
[166.11398315 -167.95964050]
[182.09100342 -173.63157654]
[191.96417236 -159.84909058]
[181.45347595 -146.54640198]
[176.96302795 -132.23431396]
[172.47257996 -117.92222595]
[167.98213196 -103.61013794]
[163.49168396 -89.29804993]
[159.00123596 -74.98595428]
[154.65605164 -60.62909698]
[150.45658875 -46.22893906]
[146.25714111 -31.82878304]
[153.62229919 -18.93343925]
[149.56858826 -4.26981020]
[135.99282837 3.36802173]
[131.79336548 17.76817894]
[127.59390259 32.16833496]
[123.39443970 46.56849289]
[119.19497681 60.96865082]
[114.99551392 75.36880493]
[127.91533661 92.76845551]
[125.06844330 114.25251770]
[108.06278229 127.68669128]
[108.36678314 142.68360901]
[108.67079163 157.68052673]
[108.97479248 172.67744446]
[116.99018860 186.31797791]
[109.51242065 199.19944763]
[109.81642914 214.19636536]
[113.13509369 222.77119446]
[109.97151947 229.49958801]
[109.97151947 244.49958801]
[124.35565948 252.59695435]
[132.66091919 266.75354004]
[132.71061707 283.07278442]
[124.58557892 297.11749268]
[110.57646179 305.11648560]
[110.88046265 320.11340332]
[111.18447113 335.11032104]
[119.95043182 344.62414551]
[119.86251831 357.15878296]
[111.51573181 365.96499634]
[111.51573181 380.96499634]
[111.51573181 395.96499634]
[111.51573181 410.96499634]
[111.51573181 425.96499634]
[111.51573181 440.96499634]
[111.51573181 455.96499634]
[119.25303650 469.76516724]
[111.51573181 482.49243164]
[111.51573181 497.49243164]
[111.51573181 512.49243164]
[111.81974030 527.48937988]
[112.42761993 542.47705078]
[113.03550720 557.46472168]
[113.64338684 572.45239258]
[116.89633942 578.31732178]
[116.68582153 584.07073975]
[113.95971680 588.05718994]
[113.95971680 603.05718994]
[121.69701385 616.85736084]
[113.95971680 629.58465576]
[113.95971680 644.58465576]
[127.76172638 654.31353760]
[133.01394653 670.18768311]
[127.84188843 685.91363525]
[114.46331024 695.37976074]
[114.76731873 710.37670898]
[115.07131958 725.37359619]
[115.37532043 740.37054443]
[117.95600891 759.57965088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[9 146]
[10 145]
[12 143]
[13 142]
[14 139]
[15 138]
[16 137]
[17 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[30 125]
[32 122]
[33 121]
[34 120]
[40 115]
[41 114]
[42 112]
[43 111]
[45 109]
[46 108]
[47 107]
[48 106]
[53 63]
[54 62]
[55 61]
[56 60]
[66 103]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[74 95]
[75 94]
[76 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
