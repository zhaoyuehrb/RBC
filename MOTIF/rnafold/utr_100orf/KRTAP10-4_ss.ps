%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAACCCCCAGCACAGCAGCAUCCACCAUGUCCGUCUGCUCCAGCGACCUGAGCUACAGCAGCCGCGUCUGCCUUCCUGGUUCCUGUGACUCUUGCUCCGACUCCUGGCAGGUGGACGACUGCCCAG\
) } def
/len { sequence length } bind def

/coor [
[34.36123657 344.27676392]
[23.04477692 344.63729858]
[17.09746361 358.40789795]
[11.15015125 372.17852783]
[19.17415619 385.45989990]
[17.82557487 400.91824341]
[7.62296152 412.60955811]
[-7.51057005 416.03823853]
[-21.75586700 409.88589478]
[-29.63532448 396.51824951]
[-28.11912727 381.07543945]
[-17.79028702 369.49551392]
[-2.62045074 366.23120117]
[3.32686186 352.46060181]
[9.27417469 338.69000244]
[-1.17491925 323.31655884]
[-0.35768372 304.59786987]
[11.57875919 289.96392822]
[30.03868484 285.32919312]
[34.98074341 271.16671753]
[39.92279816 257.00421143]
[44.86485672 242.84172058]
[36.90963364 228.07542419]
[42.15280914 211.78929138]
[57.83337784 204.14244080]
[62.43441010 189.86552429]
[67.03543854 175.58859253]
[71.63646698 161.31167603]
[76.23749542 147.03475952]
[80.83853149 132.75782776]
[79.88648224 125.35301971]
[85.72485352 118.19607544]
[90.66690826 104.03358459]
[90.14107513 95.90332794]
[95.90100861 89.59319305]
[101.18125153 75.55328369]
[106.46149445 61.51337433]
[94.67918396 52.04581451]
[86.41127014 39.41711426]
[82.45692444 24.87092781]
[83.19127655 9.83511066]
[88.52982330 -4.21844673]
[97.93799591 -15.91790390]
[110.48460388 -24.12538338]
[124.93403625 -28.04763031]
[139.86791992 -27.31267166]
[145.14816284 -41.35258102]
[150.42840576 -55.39248657]
[155.70864868 -69.43239594]
[160.98889160 -83.47230530]
[160.09213257 -88.81794739]
[161.28067017 -93.47542572]
[163.91952515 -96.74903870]
[167.18653870 -98.30879974]
[173.46235657 -111.93282318]
[179.73815918 -125.55685425]
[178.48443604 -141.32830811]
[190.83691406 -149.65089417]
[197.11273193 -163.27493286]
[203.38853455 -176.89895630]
[209.66435242 -190.52299500]
[215.94017029 -204.14701843]
[214.68643188 -219.91847229]
[227.03890991 -228.24105835]
[233.31472778 -241.86509705]
[239.59054565 -255.48912048]
[245.86634827 -269.11315918]
[252.14216614 -282.73718262]
[242.38308716 -294.47274780]
[238.69067383 -309.28250122]
[241.79803467 -324.22595215]
[251.08821106 -336.33609009]
[264.71661377 -343.20843506]
[279.97735596 -343.47845459]
[293.84036255 -337.09255981]
[303.55313110 -325.31866455]
[307.18722534 -310.49447632]
[304.02102661 -295.56335449]
[294.68322754 -283.48989868]
[281.02786255 -276.67129517]
[265.76620483 -276.46136475]
[259.49038696 -262.83734131]
[253.21456909 -249.21331787]
[246.93875122 -235.58927917]
[240.66294861 -221.96525574]
[242.36555481 -207.16827393]
[229.56419373 -197.87120056]
[223.28837585 -184.24717712]
[217.01257324 -170.62315369]
[210.73675537 -156.99911499]
[204.46093750 -143.37509155]
[206.16355896 -128.57810974]
[193.36219788 -119.28104401]
[187.08638000 -105.65701294]
[180.81056213 -92.03298187]
[175.02879333 -78.19206238]
[169.74855042 -64.15215302]
[164.46830750 -50.11224365]
[159.18806458 -36.07233429]
[153.90782166 -22.03242683]
[165.62495422 -12.74425888]
[173.90872192 -0.27232170]
[177.93740845 14.16893101]
[177.30435181 29.16860390]
[172.05897522 43.25720215]
[162.70317078 55.05059052]
[150.14334106 63.38599014]
[135.60252380 67.43659973]
[120.50140381 66.79361725]
[115.22116089 80.83352661]
[109.94091034 94.87343597]
[104.82939911 108.97564697]
[99.88733673 123.13813019]
[95.11544800 137.35885620]
[90.51441956 151.63578796]
[85.91339111 165.91270447]
[81.31236267 180.18963623]
[76.71133423 194.46655273]
[72.11030579 208.74346924]
[79.61621094 219.99865723]
[79.24241638 233.32662964]
[71.35185242 243.83122253]
[59.02734375 247.78378296]
[54.08528900 261.94625854]
[49.14323044 276.10876465]
[44.20117188 290.27124023]
[52.38751984 298.53509521]
[56.83399200 309.22793579]
[56.92020035 320.75646973]
[52.67237854 331.41864014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[19 126]
[20 125]
[21 124]
[22 123]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 114]
[32 113]
[33 112]
[35 111]
[36 110]
[37 109]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[54 95]
[55 94]
[56 93]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
