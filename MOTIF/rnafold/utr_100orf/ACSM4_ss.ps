%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAUUUUUUUCCGCUACCAGACAUUUAGAUUCAUCUGGCUCACCAAGCCACCUGGCCGGCGCUUACACAAAGAUCACCAGCUUUGGACGCCUCUGA\
) } def
/len { sequence length } bind def

/coor [
[67.19051361 201.16918945]
[51.72940826 208.60742188]
[34.70978165 207.30355835]
[26.74341393 220.01327515]
[18.77704811 232.72299194]
[10.81068039 245.43272400]
[2.84431338 258.14242554]
[-0.44455686 274.77432251]
[-17.33691406 276.21813965]
[-23.40058327 260.38565063]
[-9.86540699 250.17607117]
[-1.89904022 237.46635437]
[6.06732702 224.75663757]
[14.03369331 212.04690552]
[22.00006104 199.33718872]
[14.82969570 188.70265198]
[12.26515007 176.08747864]
[14.73217583 163.40483093]
[21.89065361 152.59220886]
[32.68098068 145.31549072]
[45.48077774 142.71228027]
[58.34880066 145.21421814]
[67.08992004 133.02433777]
[75.83103180 120.83447266]
[84.57215118 108.64460754]
[72.91146851 118.08009338]
[58.04819489 120.10079193]
[44.29174805 114.12081146]
[35.63061905 101.87398529]
[34.57598877 86.91110229]
[41.43363571 73.57046509]
[54.21527481 65.72000885]
[69.21504211 65.63586426]
[82.08394623 73.34243774]
[89.09030914 86.60291290]
[85.85003662 71.95706940]
[82.60977173 57.31122971]
[69.56748962 48.79438019]
[66.49003601 33.89525604]
[74.68992615 21.51392365]
[71.44965363 6.86808157]
[68.20938873 -7.77776003]
[64.96912384 -22.42360115]
[61.72885513 -37.06944275]
[49.02953720 -46.87285233]
[48.92033386 -62.91553497]
[61.48501968 -72.89091492]
[77.08504486 -69.14673615]
[83.75339508 -54.55521011]
[76.37469482 -40.30971146]
[79.61496735 -25.66386795]
[82.85523224 -11.01802731]
[86.09549713 3.62781405]
[89.33576202 18.27365494]
[101.99326324 26.04047203]
[105.48798370 40.84727859]
[97.25561523 54.07096100]
[100.49588013 68.71680450]
[103.73614502 83.36264801]
[108.89560699 86.83959198]
[112.12304688 91.65429688]
[113.19607544 96.91836548]
[127.97710419 99.47201538]
[142.75813293 102.02567291]
[157.53916931 104.57932281]
[163.75973511 96.62110901]
[172.45391846 91.59542084]
[182.33848572 90.19332123]
[191.97335815 92.57476044]
[199.97134399 98.35165405]
[205.19787598 106.65038300]
[206.93186951 116.24365234]
[221.28173828 120.61187744]
[235.63160706 124.98009491]
[249.98147583 129.34831238]
[264.33132935 133.71653748]
[276.63088989 124.25604248]
[292.14303589 123.86549377]
[304.90307617 132.69505310]
[310.00448608 147.34957886]
[305.48568726 162.19410706]
[293.08422852 171.52061462]
[277.56875610 171.74287415]
[264.90524292 162.77540588]
[259.96310425 148.06640625]
[245.61325073 143.69818115]
[231.26338196 139.32995605]
[216.91351318 134.96174622]
[202.56364441 130.59352112]
[185.68737793 141.83970642]
[165.63461304 137.28311157]
[154.98551941 119.36035156]
[140.20448303 116.80670166]
[125.42345428 114.25304413]
[110.64242554 111.69939423]
[96.76201630 117.38571930]
[88.02090454 129.57559204]
[79.27978516 141.76545715]
[70.53867340 153.95532227]
[78.15073395 169.62493896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[22 99]
[23 98]
[24 97]
[25 96]
[35 59]
[36 58]
[37 57]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[62 95]
[63 94]
[64 93]
[65 92]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
