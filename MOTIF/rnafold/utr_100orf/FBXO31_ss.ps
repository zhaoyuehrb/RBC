%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUGGAGCGUGCGCACAGGCGGCAGCAGUGGCCGUCACUGGGCGGCAUGGCGGUGUGUGCUCGCCUUUGCGGCGUGGGCCCGUCGCGCGGAUGUCGGCGCCGCCAGCAGCGCCGGGGCCCGGCCGAGACGGCGGCGGCCGACAGCG\
) } def
/len { sequence length } bind def

/coor [
[235.46896362 158.88153076]
[221.52230835 153.35966492]
[207.57566833 147.83779907]
[193.62901306 142.31593323]
[179.68237305 136.79405212]
[165.62313843 131.56547546]
[151.45750427 126.63247681]
[137.29185486 121.69947815]
[129.89176941 122.47508240]
[122.88305664 116.51199341]
[108.82382965 111.28341675]
[95.00707245 113.42557526]
[85.94758606 102.77581787]
[71.88835907 97.54723358]
[57.82912827 92.31865692]
[43.76990128 87.09007263]
[29.71067047 81.86149597]
[11.66600323 85.37489319]
[0.97354203 71.49510193]
[-13.19210339 66.56210327]
[-27.35774994 61.62910461]
[-41.52339554 56.69610596]
[-50.72471619 56.82321930]
[-55.93218613 51.50862122]
[-69.99141693 46.28004074]
[-84.05064392 41.05146027]
[-98.16385651 35.97039032]
[-112.32950592 31.03738976]
[-126.49514771 26.10439110]
[-140.66079712 21.17139053]
[-153.38494873 29.85482025]
[-168.60447693 29.38631821]
[-180.48922729 20.15503120]
[-184.60998535 5.86666441]
[-198.77563477 0.93366492]
[-212.94126892 -3.99933481]
[-227.10691833 -8.93233490]
[-241.27256775 -13.86533451]
[-255.43821716 -18.79833412]
[-269.60385132 -23.73133278]
[-278.80517578 -23.60422134]
[-284.01263428 -28.91881752]
[-298.07186890 -34.14739990]
[-313.19863892 -28.80322456]
[-326.73144531 -37.41966629]
[-328.28906250 -53.38692856]
[-316.67660522 -64.45629120]
[-300.80218506 -62.13628769]
[-292.84329224 -48.20662689]
[-278.78405762 -42.97804642]
[-264.67086792 -37.89698029]
[-250.50520325 -32.96397781]
[-236.33956909 -28.03097916]
[-222.17391968 -23.09798050]
[-208.00827026 -18.16497993]
[-193.84262085 -13.23198032]
[-179.67698669 -8.29898071]
[-167.57238770 -16.93708420]
[-152.52439880 -16.78939629]
[-140.30593872 -7.70298481]
[-135.72779846 7.00574541]
[-121.56214905 11.93874454]
[-107.39650726 16.87174416]
[-93.23085785 21.80474472]
[-85.83078003 21.02914429]
[-78.82206726 26.99222946]
[-64.76283264 32.22080994]
[-50.70360565 37.44939041]
[-36.59039307 42.53046036]
[-22.42474937 47.46345901]
[-8.25910378 52.39645767]
[5.90654182 57.32945633]
[16.97264671 52.34231186]
[28.84201813 56.38722229]
[34.93925095 67.80226135]
[48.99848175 73.03084564]
[63.05770874 78.25942230]
[77.11694336 83.48800659]
[91.17617035 88.71658325]
[104.99292755 86.57442474]
[114.05241394 97.22418213]
[128.11163330 102.45276642]
[142.22485352 107.53383636]
[156.39050293 112.46683502]
[170.55613708 117.39983368]
[177.21745300 116.52375793]
[182.49903870 118.83856964]
[185.20423889 122.84741211]
[199.15089417 128.36927795]
[213.09753418 133.89114380]
[227.04418945 139.41300964]
[240.99082947 144.93489075]
[258.01254272 136.73637390]
[275.35015869 143.40431213]
[282.25134277 160.30787659]
[296.41699219 165.24087524]
[310.58264160 170.17387390]
[324.74829102 175.10687256]
[338.91394043 180.03987122]
[353.07958984 184.97286987]
[367.24523926 189.90586853]
[381.46176147 194.69026184]
[395.72760010 199.32551575]
[409.99343872 203.96076965]
[424.25930786 208.59602356]
[438.52514648 213.23127747]
[452.79098511 217.86653137]
[462.69638062 206.37049866]
[476.21206665 199.56100464]
[491.26446533 198.44792175]
[505.55752563 203.16978455]
[516.92297363 212.97749329]
[523.64929199 226.35293579]
[524.73919678 241.24392700]
[539.00506592 245.87918091]
[553.27087402 250.51443481]
[567.53674316 255.14968872]
[581.80261230 259.78494263]
[598.73492432 258.92910767]
[604.24468994 274.96276855]
[590.36285400 284.69577026]
[577.16735840 274.05078125]
[562.90148926 269.41552734]
[548.63562012 264.78027344]
[534.36981201 260.14501953]
[520.10394287 255.50976562]
[510.46948242 266.91616821]
[497.16589355 273.78353882]
[482.20623779 275.03768921]
[467.86746216 270.45651245]
[456.34408569 260.70843506]
[449.41217041 247.25511169]
[448.15573120 232.13238525]
[433.88989258 227.49713135]
[419.62405396 222.86187744]
[405.35818481 218.22662354]
[391.09234619 213.59135437]
[376.82650757 208.95610046]
[369.44427490 209.88650513]
[362.31222534 204.07151794]
[348.14657593 199.13851929]
[333.98092651 194.20552063]
[319.81527710 189.27252197]
[305.64965820 184.33952332]
[291.48400879 179.40650940]
[277.31835938 174.47351074]
[268.29998779 181.58688354]
[256.84457397 183.45294189]
[245.80842590 179.48818970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 85]
[7 84]
[8 83]
[10 82]
[11 81]
[13 79]
[14 78]
[15 77]
[16 76]
[17 75]
[19 72]
[20 71]
[21 70]
[22 69]
[24 68]
[25 67]
[26 66]
[27 64]
[28 63]
[29 62]
[30 61]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[42 50]
[43 49]
[95 146]
[96 145]
[97 144]
[98 143]
[99 142]
[100 141]
[101 140]
[102 138]
[103 137]
[104 136]
[105 135]
[106 134]
[107 133]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
