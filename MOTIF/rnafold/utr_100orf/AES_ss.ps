%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGCAGCGGGGCCUGGCACACAGUAGGCGUUCUAUAAAUGUGUCACAAGAAUGGCUUCCCUCAGGAAGGCGGCAUUACCGCUGCCUUUCUGCAGAAAAGGAAACUAAGGCUCAGCAAGAACCACCGCCCAGCCAGAG\
) } def
/len { sequence length } bind def

/coor [
[79.35533905 263.03292847]
[78.34629822 248.06690979]
[77.33726501 233.10089111]
[63.90630341 226.66079712]
[55.44591522 214.28024292]
[54.31094360 199.22773743]
[60.90604782 185.53826904]
[73.55024719 176.93179321]
[72.54121399 161.96577454]
[71.53218079 146.99975586]
[70.52314758 132.03372192]
[59.56560135 121.79008484]
[44.56560135 121.79008484]
[29.56560135 121.79008484]
[14.56560135 121.79008484]
[-0.38815907 122.96696472]
[-15.20348454 125.31348419]
[-30.01880836 127.66000366]
[-44.83413315 130.00651550]
[-59.64945984 132.35304260]
[-74.46478271 134.69955444]
[-89.28011322 137.04606628]
[-99.25999451 151.36526489]
[-116.16926575 154.02516174]
[-129.52713013 143.86869812]
[-144.28607178 146.54705811]
[-159.04501343 149.22540283]
[-173.80395508 151.90376282]
[-184.08538818 164.21926880]
[-200.12052917 163.71546936]
[-209.60859680 150.77883911]
[-205.27114868 135.33325195]
[-190.43550110 129.22724915]
[-176.48231506 137.14482117]
[-161.72337341 134.46646118]
[-146.96443176 131.78810120]
[-132.20547485 129.10975647]
[-126.38996124 117.55796051]
[-114.79793549 111.39570618]
[-101.58230591 113.08577728]
[-91.62662506 122.23074341]
[-76.81130219 119.88423157]
[-61.99597549 117.53771210]
[-47.18065262 115.19119263]
[-32.36532593 112.84468079]
[-17.55000114 110.49816132]
[-2.73467612 108.15164185]
[-14.55123138 98.91210938]
[-17.84847260 84.27898407]
[-11.13649178 70.86447144]
[2.55180407 64.73009491]
[17.03116226 68.64776611]
[25.75887680 80.84723663]
[24.79120445 95.81599426]
[14.56560135 106.79008484]
[29.56560135 106.79008484]
[44.56560135 106.79008484]
[59.56560135 106.79008484]
[99.56710052 73.67580414]
[106.67513275 60.46687317]
[113.78315735 47.25794220]
[120.29141235 33.74340820]
[126.18679047 19.95049095]
[131.92704773 6.09229898]
[137.51144409 -7.82942581]
[143.09585571 -21.75115013]
[148.68025208 -35.67287445]
[154.26466370 -49.59460068]
[159.84906006 -63.51632690]
[165.43347168 -77.43804932]
[171.01788330 -91.35977173]
[176.60227966 -105.28150177]
[182.18669128 -119.20322418]
[187.77108765 -133.12495422]
[193.35549927 -147.04667664]
[186.91433716 -161.47882080]
[192.64276123 -176.20840454]
[207.14219666 -182.49662781]
[221.81039429 -176.61279297]
[227.94497681 -162.04766846]
[221.90638733 -147.44250488]
[207.27722168 -141.46226501]
[201.69281006 -127.54054260]
[196.10841370 -113.61882019]
[190.52400208 -99.69709778]
[184.93960571 -85.77536774]
[179.35519409 -71.85364532]
[173.77079773 -57.93191910]
[168.18638611 -44.01019669]
[162.60198975 -30.08847046]
[157.01757812 -16.16674614]
[151.43316650 -2.24502110]
[145.84877014 11.67670345]
[146.28155518 19.11712074]
[139.97970581 25.84586716]
[134.08433533 39.63878250]
[135.07313538 42.34584427]
[135.00360107 45.62287521]
[133.64715576 49.05141830]
[130.93731689 52.13619995]
[126.99209595 54.36597061]
[119.88406372 67.57490540]
[112.77603149 80.78383636]
[122.05957794 69.00182343]
[136.84719849 66.48659515]
[149.50399780 74.53675842]
[153.49526978 88.99600983]
[146.76028442 102.39899445]
[132.77635193 107.82572937]
[118.76186371 102.47299957]
[131.63859558 110.16648865]
[147.45379639 110.60251617]
[154.41104126 123.77239990]
[167.28778076 131.46588135]
[183.13328552 128.95597839]
[194.87742615 139.88551331]
[193.51110840 155.87028503]
[180.08244324 164.64813232]
[164.89276123 159.48545837]
[159.59428406 144.34262085]
[146.71755981 136.64912415]
[131.82339478 136.76339722]
[123.94510651 123.04322052]
[111.06837463 115.34973145]
[104.67356873 119.26847076]
[85.48916626 131.02468872]
[86.49819946 145.99070740]
[87.50724030 160.95674133]
[88.51627350 175.92276001]
[102.20131683 182.75407410]
[110.57431793 195.43435669]
[111.47016144 210.50299072]
[104.74822235 223.90715027]
[92.30329132 232.09184265]
[93.31232452 247.05787659]
[94.32135773 262.02389526]
[103.90207672 275.33337402]
[96.92031860 290.17205811]
[80.55831909 291.27520752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[8 129]
[9 128]
[10 127]
[11 126]
[12 58]
[13 57]
[14 56]
[15 55]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[25 37]
[26 36]
[27 35]
[28 34]
[59 103]
[60 102]
[61 101]
[62 96]
[63 95]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[110 124]
[111 123]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
