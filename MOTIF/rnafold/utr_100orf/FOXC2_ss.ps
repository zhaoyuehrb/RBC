%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUCUCUCGCUCUCAGGGCCCCCCUCGCUCCCCCGGCCGCAGUCCGUGCGCGAGGGCGCCGGCGAGCCGUCUCGGAAGCAGCAUGCAGGCGCGCUACUCCGUGUCCGACCCCAACGCCCUGGGAGUGGUGCCCUACCUGAGCGAGCAGAAUUACUACCGGGCUGCGGGCAGCUACGGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[271.07235718 497.08157349]
[265.58349609 487.31582642]
[263.33309937 476.31442261]
[264.55200195 465.12475586]
[269.13995361 454.81723022]
[276.67370605 446.38281250]
[269.84127808 433.02923584]
[263.00885010 419.67565918]
[256.06390381 406.38024902]
[249.00691223 393.14398193]
[241.94993591 379.90771484]
[234.89295959 366.67144775]
[227.83596802 353.43515015]
[220.77899170 340.19888306]
[213.72200012 326.96261597]
[195.93241882 322.71200562]
[186.72203064 306.54193115]
[192.32865906 288.46334839]
[184.82865906 275.47296143]
[177.32865906 262.48260498]
[169.82865906 249.49221802]
[162.32865906 236.50183105]
[149.26431274 229.34834290]
[149.06492615 213.52839661]
[141.56492615 200.53800964]
[138.87171936 199.68855286]
[136.35670471 197.70936584]
[134.45625305 194.66436768]
[133.57498169 190.77565002]
[134.03126526 186.40765381]
[127.42535400 172.94058228]
[120.81943512 159.47351074]
[114.21352386 146.00643921]
[107.60761261 132.53936768]
[101.00170135 119.07230377]
[87.32530975 114.28665161]
[80.94420624 101.27789307]
[85.53122711 87.53360748]
[78.92531586 74.06653595]
[72.31940460 60.59946823]
[54.78109360 59.83302307]
[40.11410904 50.34904480]
[32.29882812 34.82842255]
[33.40187454 17.57532120]
[43.03048325 3.32365751]
[35.97349930 -9.91261864]
[29.15956497 -16.02960205]
[28.91124916 -23.43257904]
[22.07882881 -36.78615570]
[8.90487957 -45.54729843]
[9.99571514 -60.40190887]
[3.16329360 -73.75548553]
[-3.66912818 -87.10906219]
[-10.50154972 -100.46263885]
[-17.33397102 -113.81621552]
[-24.61350060 -126.93141174]
[-32.33183289 -139.79327393]
[-46.06718826 -147.64505005]
[-45.98167038 -162.53941345]
[-53.70000458 -175.40127563]
[-61.41833496 -188.26313782]
[-69.13666534 -201.12498474]
[-76.85499573 -213.98684692]
[-90.59035492 -221.83863831]
[-90.50483704 -236.73298645]
[-98.22316742 -249.59484863]
[-105.94149780 -262.45669556]
[-119.67685699 -270.30850220]
[-119.59133911 -285.20285034]
[-127.30966949 -298.06469727]
[-141.04502869 -305.91650391]
[-140.95950317 -320.81085205]
[-148.67784119 -333.67269897]
[-164.14889526 -335.94882202]
[-174.49865723 -347.67129517]
[-174.84030151 -363.30514526]
[-165.01249695 -375.46853638]
[-149.65563965 -378.41830444]
[-136.02078247 -370.76165771]
[-130.54585266 -356.11380005]
[-135.81597900 -341.39105225]
[-128.09765625 -328.52917480]
[-114.91436005 -321.59735107]
[-114.44781494 -305.78305054]
[-106.72947693 -292.92117310]
[-93.54618835 -285.98934937]
[-93.07964325 -270.17504883]
[-85.36131287 -257.31317139]
[-77.64297485 -244.45132446]
[-64.45968628 -237.51950073]
[-63.99313736 -221.70516968]
[-56.27480698 -208.84332275]
[-48.55647659 -195.98146057]
[-40.83814621 -183.11959839]
[-33.11981583 -170.25775146]
[-19.93652534 -163.32592773]
[-19.46997452 -147.51159668]
[-11.75164413 -134.64974976]
[-9.04446793 -133.84590149]
[-6.49638844 -131.90946960]
[-4.54478359 -128.89700317]
[-3.59795094 -125.02371979]
[-3.98039508 -120.64863586]
[2.85202670 -107.29505920]
[9.68444824 -93.94148254]
[16.51687050 -80.58790588]
[23.34929276 -67.23432922]
[36.03454208 -59.42832184]
[35.43240356 -43.61857605]
[42.26482773 -30.26500130]
[49.20977783 -16.96960068]
[56.26675797 -3.73332477]
[68.89011383 -4.66678619]
[80.97100830 -0.73502725]
[90.69831848 7.50977516]
[96.59968567 18.86610222]
[97.76432800 31.65810394]
[93.98342133 43.98287964]
[85.78647614 53.99355698]
[92.39238739 67.46062469]
[98.99829865 80.92769623]
[112.67469025 85.71334839]
[119.05579376 98.72210693]
[114.46877289 112.46639252]
[121.07468414 125.93346405]
[127.68059540 139.40052795]
[134.28649902 152.86759949]
[140.89242554 166.33467102]
[147.49833679 179.80172729]
[154.55531311 193.03800964]
[162.05531311 206.02839661]
[175.65609741 214.11103821]
[175.31903076 229.00183105]
[182.81903076 241.99221802]
[190.31903076 254.98258972]
[197.81903076 267.97296143]
[205.31903076 280.96334839]
[217.20756531 281.75061035]
[227.13281250 288.12252808]
[232.68339539 298.39315796]
[232.57778931 309.94720459]
[226.95828247 319.90563965]
[234.01525879 333.14190674]
[241.07225037 346.37817383]
[248.12922668 359.61444092]
[255.18621826 372.85073853]
[262.24319458 386.08700562]
[269.30017090 399.32327271]
[276.11410522 405.44027710]
[276.36242676 412.84323120]
[283.19485474 426.19680786]
[290.02728271 439.55038452]
[309.22998047 439.67987061]
[325.64831543 449.48171997]
[334.79513550 466.18090820]
[334.21954346 485.13082886]
[324.16287231 501.10617065]
[331.88119507 513.96801758]
[345.61657715 521.81982422]
[345.53103638 536.71417236]
[353.24938965 549.57604980]
[360.96771240 562.43786621]
[368.79437256 575.23406982]
[376.72885132 587.96374512]
[384.66329956 600.69342041]
[392.59777832 613.42309570]
[400.53222656 626.15277100]
[415.24981689 633.38635254]
[416.07403564 649.76477051]
[402.15698242 658.43933105]
[387.81533813 650.48632812]
[387.80255127 634.08721924]
[379.86810303 621.35754395]
[371.93365479 608.62786865]
[363.99917603 595.89819336]
[356.06472778 583.16857910]
[349.84475708 579.14642334]
[348.10586548 570.15618896]
[340.38751221 557.29437256]
[332.66918945 544.43249512]
[319.48590088 537.50067139]
[319.01934814 521.68634033]
[311.30102539 508.82449341]
[300.38897705 510.83673096]
[289.35717773 509.41778564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 152]
[7 151]
[8 150]
[9 148]
[10 147]
[11 146]
[12 145]
[13 144]
[14 143]
[15 142]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 130]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[38 121]
[39 120]
[40 119]
[45 112]
[46 111]
[48 110]
[49 109]
[51 107]
[52 106]
[53 105]
[54 104]
[55 103]
[56 98]
[57 97]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[65 89]
[66 88]
[67 87]
[69 85]
[70 84]
[72 82]
[73 81]
[157 183]
[158 182]
[160 180]
[161 179]
[162 178]
[163 176]
[164 175]
[165 174]
[166 173]
[167 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
