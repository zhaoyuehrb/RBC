%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGGGCGGGCACGCUCCGAACCGCGGCUUAGGUGGCGGCGGCGAAGGAUGCACCCGGCAGGCUUGGCGGCGGCGGCUGCGGGGACGCCCCGGCUGCCCUCGAAGCGGAGGAUCCCUGUGUCCCAGCCGGGCAUGGCCGACCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[85.42268372 120.60165405]
[79.71417236 113.45075226]
[65.26673889 117.48455048]
[50.81929779 121.51834869]
[36.37186050 125.55214691]
[21.92442131 129.58593750]
[7.47698307 133.61973572]
[2.65129232 143.46046448]
[-6.62262106 148.87698364]
[-17.12456322 148.27066040]
[-25.36077309 142.08723450]
[-39.96445847 145.51249695]
[-54.56814194 148.93775940]
[-62.91933441 162.08673096]
[-77.77834320 165.35238647]
[-90.26240540 157.30976868]
[-104.86608887 160.73503113]
[-116.53482819 171.41918945]
[-130.69264221 166.79260254]
[-145.29632568 170.21786499]
[-150.45124817 174.52687073]
[-156.15097046 175.40242004]
[-160.58308411 173.46716309]
[-175.31739807 176.27787781]
[-190.05171204 179.08860779]
[-204.78601074 181.89932251]
[-216.89192200 192.08546448]
[-230.84358215 186.87007141]
[-245.57789612 189.68078613]
[-260.31219482 192.49151611]
[-270.48269653 204.89880371]
[-286.52169800 204.53895569]
[-296.12548828 191.68801880]
[-291.92684937 176.20413208]
[-277.14663696 169.96519470]
[-263.12292480 177.75720215]
[-248.38861084 174.94648743]
[-233.65431213 172.13575745]
[-222.60229492 162.15066528]
[-207.59674072 167.16500854]
[-192.86242676 164.35429382]
[-178.12811279 161.54357910]
[-163.39381409 158.73284912]
[-148.72158813 155.61418152]
[-134.11790466 152.18891907]
[-123.49372864 141.74975586]
[-108.29135132 146.13134766]
[-93.68766785 142.70608521]
[-86.08158112 129.95137024]
[-71.32015991 126.26963043]
[-57.99340439 134.33407593]
[-43.38972092 130.90881348]
[-28.78603745 127.48355103]
[-15.77462101 113.23229980]
[3.44318581 119.17230225]
[17.89062500 115.13850403]
[32.33806229 111.10470581]
[46.78549957 107.07090759]
[61.23294067 103.03710938]
[75.68038177 99.00331116]
[81.41966248 81.62075806]
[98.55274200 72.10804749]
[118.85527802 77.02162170]
[124.95632172 63.31843567]
[131.05737305 49.61525345]
[137.15841675 35.91207123]
[136.84281921 29.20081139]
[139.59147644 24.13145065]
[143.81262207 21.77118874]
[150.48214722 8.33551311]
[157.15167236 -5.10016346]
[156.35733032 -20.90141678]
[168.94670105 -28.86110687]
[175.61624146 -42.29678345]
[182.28576660 -55.73246002]
[188.95529175 -69.16813660]
[195.62481689 -82.60381317]
[202.29434204 -96.03948975]
[208.96386719 -109.47516632]
[215.63340759 -122.91084290]
[216.66052246 -132.05554199]
[222.58587646 -136.55584717]
[229.53532410 -149.84890747]
[236.48475647 -163.14196777]
[235.25779724 -179.49514771]
[248.95719910 -188.50950623]
[263.49017334 -180.91184998]
[263.90646362 -164.51799011]
[249.77781677 -156.19252014]
[242.82836914 -142.89945984]
[235.87893677 -129.60641479]
[229.06907654 -116.24131775]
[222.39955139 -102.80564117]
[215.73002625 -89.36996460]
[209.06050110 -75.93428802]
[202.39096069 -62.49860764]
[195.72143555 -49.06293106]
[189.05191040 -35.62725449]
[182.38238525 -22.19157982]
[183.65377808 -7.35133696]
[170.58735657 1.56936407]
[163.91781616 15.00504017]
[157.24829102 28.44071770]
[150.86160278 42.01312256]
[144.76055908 55.71630478]
[138.65950012 69.41948700]
[132.55845642 83.12266541]
[136.59225464 97.57010651]
[148.90948486 106.13081360]
[157.80604553 108.48279572]
[161.39248657 115.00201416]
[173.52774048 123.81878662]
[189.24018860 125.67072296]
[194.98889160 139.41122437]
[207.12414551 148.22801208]
[225.44891357 149.69660950]
[232.01493835 165.94050598]
[244.33218384 174.50122070]
[256.64941406 183.06192017]
[268.96667480 191.62261963]
[281.28390503 200.18331909]
[293.60113525 208.74403381]
[305.91836548 217.30473328]
[318.23562622 225.86543274]
[334.21618652 224.45103455]
[345.18099976 236.16224670]
[342.71878052 252.01522827]
[328.71832275 259.84893799]
[313.91958618 253.65400696]
[309.67489624 238.18267822]
[297.35766602 229.62196350]
[285.04043579 221.06126404]
[272.72320557 212.50056458]
[260.40594482 203.93986511]
[248.08871460 195.37915039]
[235.77148438 186.81845093]
[223.45423889 178.25775146]
[211.45463562 180.08528137]
[201.11026001 172.99746704]
[198.30737305 160.36326599]
[186.17211914 151.54647827]
[171.32766724 150.32519531]
[164.71095276 135.95404053]
[152.57569885 127.13726807]
[140.34878540 118.44805145]
[128.03155518 109.88734436]
[121.88751984 118.75959778]
[113.21084595 124.60749817]
[103.32200623 126.82721710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 58]
[5 57]
[6 56]
[7 55]
[11 53]
[12 52]
[13 51]
[16 48]
[17 47]
[19 45]
[20 44]
[23 43]
[24 42]
[25 41]
[26 40]
[28 38]
[29 37]
[30 36]
[63 107]
[64 106]
[65 105]
[66 104]
[69 103]
[70 102]
[71 101]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[82 91]
[83 90]
[84 89]
[108 146]
[109 145]
[111 144]
[112 143]
[114 141]
[115 140]
[117 137]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
