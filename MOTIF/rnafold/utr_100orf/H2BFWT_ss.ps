%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGAAGCUGGCCCGAGACGUGGAGCCAUGCUGCGUACCGAAGUGCCCCGGCUUCCCCGGUCCACAACCGCCAUUGUCUGGUCGUGCCAUCUAAUGGCCACUGCCUCCGCCAUGGCUGGACCUUCCU\
) } def
/len { sequence length } bind def

/coor [
[71.77848816 132.86312866]
[60.18333435 142.37902832]
[48.58817673 151.89491272]
[45.83685684 158.09471130]
[41.05177307 161.40164185]
[36.18257141 161.57635498]
[24.13445663 170.51184082]
[12.08634472 179.44732666]
[0.14879076 188.52999878]
[-11.67640591 197.75846863]
[-23.50160217 206.98693848]
[-35.32679749 216.21542358]
[-47.03785706 225.58830261]
[-58.63301468 235.10420227]
[-70.22817230 244.62010193]
[-73.22528076 260.38070679]
[-87.48273468 267.73629761]
[-102.06342316 261.04431152]
[-105.78229523 245.43821716]
[-95.78655243 232.88972473]
[-79.74407196 233.02494812]
[-68.14891052 223.50904846]
[-56.55375671 213.99314880]
[-53.34531021 207.24681091]
[-44.55527115 204.39021301]
[-32.73007584 195.16174316]
[-20.90487862 185.93327332]
[-9.07968330 176.70480347]
[-5.70664167 170.03923035]
[3.15085483 167.39921570]
[15.19896793 158.46372986]
[27.24707985 149.52824402]
[39.07227707 140.29975891]
[50.66743469 130.78385925]
[62.26259232 121.26796722]
[58.53074265 112.51954651]
[56.79809189 103.16756439]
[57.14817047 93.66288757]
[59.56409836 84.46370697]
[63.92940903 76.01352692]
[53.06570435 65.67041779]
[42.20199966 55.32730865]
[31.33829117 44.98419952]
[20.47458458 34.64109421]
[4.68319416 35.27945709]
[-6.87759304 24.50338554]
[-7.34896660 8.70612812]
[3.54873133 -2.74008226]
[19.35009003 -3.04441118]
[30.68044281 7.97369385]
[30.81769371 23.77738762]
[41.68140030 34.12049484]
[52.54510498 44.46360397]
[63.40881348 54.80671310]
[74.27252197 65.14981842]
[91.59604645 57.50515366]
[110.52538300 57.98030472]
[127.44355774 66.48448944]
[139.11787415 81.39273834]
[153.57450867 77.39204407]
[168.03115845 73.39134979]
[182.48779297 69.39066315]
[196.94444275 65.38996887]
[211.40107727 61.38927841]
[200.23205566 51.37663269]
[200.84538269 36.38917923]
[212.79516602 27.32261467]
[227.39407349 30.76822472]
[234.02885437 44.22109604]
[227.87557983 57.90159988]
[242.71322632 55.70064545]
[257.55087280 53.49968719]
[272.38851929 51.29872894]
[287.22616577 49.09777451]
[299.74166870 39.41931152]
[313.46649170 45.20538712]
[328.30413818 43.00443268]
[338.41247559 28.78919029]
[355.33380127 26.27953339]
[368.60049438 36.53774643]
[383.37966919 33.97331619]
[398.15881348 31.40888977]
[410.43304443 21.42619705]
[424.29571533 26.87370682]
[439.07489014 24.30927849]
[453.85403442 21.74485016]
[468.60061646 18.99925232]
[483.31240845 16.07289696]
[498.02420044 13.14654255]
[512.73596191 10.22018719]
[527.09118652 1.19996524]
[539.73278809 12.49711800]
[532.37670898 27.77206612]
[515.66235352 24.93196678]
[500.95053101 27.85832214]
[486.23876953 30.78467560]
[471.52697754 33.71103287]
[465.51718140 38.14832687]
[456.41848755 36.52401352]
[441.63931274 39.08844376]
[426.86013794 41.65287018]
[415.64303589 51.45214081]
[400.72323608 46.18805313]
[385.94409180 48.75248337]
[371.16491699 51.31690979]
[365.25155640 62.83387375]
[353.59558105 68.90342712]
[340.38235474 67.09177399]
[330.50509644 57.84207916]
[315.66744995 60.04303741]
[304.21322632 69.56407166]
[289.42712402 63.93542099]
[274.58947754 66.13637543]
[259.75183105 68.33733368]
[244.91418457 70.53829193]
[230.07653809 72.73925018]
[215.40176392 75.84591675]
[200.94512939 79.84661102]
[186.48849487 83.84730530]
[172.03184509 87.84799194]
[157.57521057 91.84868622]
[143.11856079 95.84937286]
[142.03990173 110.44435883]
[136.16281128 123.84722137]
[126.15807343 134.52815247]
[113.16765594 141.26803589]
[98.67428589 143.29759216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[6 32]
[7 31]
[8 30]
[9 28]
[10 27]
[11 26]
[12 25]
[13 23]
[14 22]
[15 21]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[59 122]
[60 121]
[61 120]
[62 119]
[63 118]
[64 117]
[70 116]
[71 115]
[72 114]
[73 113]
[74 112]
[76 110]
[77 109]
[80 105]
[81 104]
[82 103]
[84 101]
[85 100]
[86 99]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
