%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAUAUCAACCACUCAAAUAGAAAGGAGAUUUGAGAUAUCCUCUUCUCUUGUUGGUUUAAUUGAUGGAAGCUUCGAAAUAGGAAAUUUGUUUGUGA\
) } def
/len { sequence length } bind def

/coor [
[180.55645752 281.76327515]
[170.46664429 282.85794067]
[160.36006165 281.84790039]
[150.67135620 278.77331543]
[141.81791687 273.76318359]
[134.18180847 267.02999878]
[128.09335327 258.86068726]
[123.81683350 249.60437012]
[121.53898621 239.65747070]
[121.36087799 229.44673157]
[123.29343414 219.41090393]
[127.25680542 209.98191833]
[133.08364868 201.56622314]
[140.52627563 194.52735901]
[133.36546326 181.34695435]
[126.20467377 168.16656494]
[120.13874817 163.71347046]
[119.03339386 154.46301270]
[112.28597260 141.06629944]
[105.53854370 127.66956329]
[98.79111481 114.27284241]
[87.20706940 106.44331360]
[87.81215668 92.47458649]
[81.06472778 79.07785797]
[74.31730652 65.68113708]
[67.56987762 52.28440857]
[60.40908051 39.10400772]
[52.84183884 26.15268135]
[39.19933701 18.14064980]
[39.45919800 3.24831080]
[31.89195442 -9.70301437]
[24.32471275 -22.65434074]
[16.75746918 -35.60566711]
[1.44259214 -37.26720810]
[-9.82562542 -47.50833511]
[-12.86685658 -62.24654770]
[-6.72004700 -75.78739929]
[-14.28729057 -88.73872375]
[-21.85453224 -101.69005585]
[-36.94485474 -107.13630676]
[-41.95879745 -122.37573242]
[-33.05008698 -135.71794128]
[-17.05272865 -136.92793274]
[-6.23852491 -125.07750702]
[-8.90320778 -109.25729370]
[-1.33596456 -96.30596924]
[6.23127842 -83.35464478]
[21.04561615 -82.06103516]
[32.39177322 -72.17525482]
[35.78083420 -57.33047104]
[29.70879555 -43.17290878]
[37.27603912 -30.22158241]
[44.84328079 -17.27025795]
[52.41052246 -4.31893206]
[65.51176453 2.76673532]
[65.79316711 18.58543968]
[73.36040497 31.53676414]
[77.83724976 33.62210846]
[80.96253204 38.63632202]
[80.96660614 45.53698349]
[87.71402740 58.93370819]
[94.46145630 72.33043671]
[101.20888519 85.72715759]
[112.79293060 93.55668640]
[112.18784332 107.52541351]
[118.93527222 120.92214203]
[125.68269348 134.31886292]
[132.43011475 147.71559143]
[139.38507080 161.00576782]
[146.54586792 174.18615723]
[153.70666504 187.36656189]
[174.40998840 184.70259094]
[194.32600403 190.81779480]
[209.90646362 204.58784485]
[218.38996887 223.52777100]
[218.29133606 244.24029541]
[209.66149902 263.02529907]
[220.18530273 273.71405029]
[230.70910645 284.40283203]
[241.39785767 294.92663574]
[252.24899292 305.28292847]
[263.10012817 315.63922119]
[273.95126343 325.99551392]
[284.80236816 336.35183716]
[295.65350342 346.70812988]
[311.66119385 347.77288818]
[320.69061279 361.03369141]
[315.81518555 376.31799316]
[300.77493286 381.90097046]
[287.10742188 373.49984741]
[285.29721069 357.55926514]
[274.44607544 347.20294189]
[263.59494019 336.84664917]
[252.74382019 326.49035645]
[241.89268494 316.13406372]
[231.04156494 305.77774048]
[223.90382385 303.39486694]
[220.02033997 294.92663574]
[209.49653625 284.23785400]
[198.97273254 273.54910278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 71]
[15 70]
[16 69]
[18 68]
[19 67]
[20 66]
[21 65]
[23 63]
[24 62]
[25 61]
[26 60]
[27 57]
[28 56]
[30 54]
[31 53]
[32 52]
[33 51]
[37 47]
[38 46]
[39 45]
[77 100]
[78 99]
[79 98]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
