%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCCUUUGGGUUUGCUGUGGUGUCCUUGUCUCCUGCAGGACCGGCCGCAGCAUGGACGCUCCCAGGCGGUUUCCGACGCUCGUGCAACUGAUGCAGCCAAAAGCAAUGCCAGUGGAGGUGCUCGGUCACCUCCCUAAGCGGUUCUCCUGGU\
) } def
/len { sequence length } bind def

/coor [
[214.23240662 223.76507568]
[203.43647766 215.49275208]
[198.11007690 202.86048889]
[199.74937439 189.14033508]
[188.02189636 179.78797913]
[173.24719238 177.90191650]
[167.28190613 163.24838257]
[155.55442810 153.89604187]
[143.82696533 144.54370117]
[132.09948730 135.19134521]
[120.37201691 125.83900452]
[101.39552307 138.63926697]
[75.08331299 136.77949524]
[52.75175476 116.91667938]
[46.35395432 84.12434387]
[31.55326843 86.56148529]
[16.75258064 88.99862671]
[1.95189345 91.43576813]
[-12.84879398 93.87290955]
[-27.64948082 96.31005096]
[-42.45016861 98.74719238]
[-57.25085449 101.18433380]
[-72.05154419 103.62147522]
[-86.79943848 106.36002350]
[-101.48839569 109.39883423]
[-116.17736053 112.43765259]
[-130.86631775 115.47646332]
[-145.55528259 118.51527405]
[-153.38081360 123.34533691]
[-160.57473755 121.46303558]
[-175.32263184 124.20158386]
[-185.55374146 136.55892944]
[-201.59080505 136.12057495]
[-211.13156128 123.22276306]
[-206.85716248 107.75961304]
[-192.04656982 101.59311676]
[-178.06118774 109.45368958]
[-163.31329346 106.71514130]
[-148.59410095 103.82631683]
[-133.90513611 100.78749847]
[-119.21617126 97.74868774]
[-104.52721405 94.70987701]
[-89.83824921 91.67105865]
[-86.48606873 88.19267273]
[-80.89273834 86.82106781]
[-74.48868561 88.82079315]
[-59.68799591 86.38364410]
[-44.88731003 83.94650269]
[-30.08662224 81.50936127]
[-15.28593540 79.07221985]
[-0.48524854 76.63507843]
[14.31543827 74.19793701]
[29.11612511 71.76079559]
[43.91681290 69.32365417]
[49.30185318 55.32360458]
[39.94950485 43.59613419]
[30.59715843 31.86866188]
[14.86615753 30.34842110]
[4.88225698 18.09700203]
[6.56872892 2.38295221]
[18.92502022 -7.47086048]
[34.62036133 -5.61834431]
[44.34298325 6.84143591]
[42.32463074 22.51631355]
[51.67697906 34.24378586]
[61.02932739 45.97126007]
[74.91661072 40.30175781]
[73.38926697 25.37972069]
[71.86192322 10.45768166]
[70.33457947 -4.46435595]
[56.85040665 -12.14268303]
[50.48537827 -26.29422188]
[53.68697739 -41.47741699]
[65.22412109 -51.85401917]
[80.66054535 -53.43401337]
[94.06063080 -45.60985947]
[100.27176666 -31.39010620]
[96.90564728 -16.24253654]
[85.25661469 -5.99170065]
[86.78395844 8.93033695]
[88.31130981 23.85237503]
[89.83865356 38.77441406]
[97.13320923 40.51781464]
[111.72232056 44.00461578]
[119.01687622 45.74801636]
[127.12648773 33.12921143]
[135.23609924 20.51041031]
[143.34571838 7.89160681]
[141.35424805 -8.02736378]
[152.66122437 -19.40857506]
[168.59288025 -17.52133369]
[176.92782593 -3.81337214]
[171.27220154 11.19973660]
[155.96452332 16.00121880]
[147.85490417 28.62002182]
[139.74528503 41.23882675]
[131.63568115 53.85762787]
[142.89413452 88.43863678]
[129.72436523 114.11152649]
[141.45184326 123.46387482]
[153.17930603 132.81622314]
[164.90678406 142.16856384]
[176.63424683 151.52091980]
[192.24778748 154.07591248]
[197.37423706 168.06050110]
[209.10171509 177.41285706]
[225.31274414 172.68778992]
[240.99800110 178.47779846]
[250.06910706 192.32516479]
[249.13047791 208.68643188]
[261.04629517 217.79760742]
[272.96209717 226.90878296]
[284.87789917 236.01997375]
[296.79370117 245.13114929]
[312.45611572 247.36712646]
[317.86676025 261.24423218]
[329.78256226 270.35540771]
[341.69839478 279.46658325]
[353.61419678 288.57775879]
[369.27658081 290.81375122]
[374.68725586 304.69085693]
[386.60305786 313.80203247]
[398.51885986 322.91320801]
[410.43466187 332.02438354]
[430.48742676 333.65319824]
[437.26257324 351.72607422]
[449.54010010 360.34362793]
[465.06216431 357.37036133]
[478.09329224 366.31271362]
[480.90228271 381.86538696]
[471.82266235 394.80120850]
[456.24118042 397.44561768]
[443.40203857 388.22973633]
[440.92251587 372.62115479]
[428.64498901 364.00360107]
[418.70571899 366.67398071]
[408.73898315 363.33197021]
[402.14785767 354.86190796]
[401.32348633 343.94018555]
[389.40768433 334.82901001]
[377.49188232 325.71783447]
[365.57608032 316.60665894]
[350.76596069 315.02236938]
[344.50302124 300.49356079]
[332.58718872 291.38238525]
[320.67138672 282.27120972]
[308.75558472 273.16003418]
[293.94549561 271.57574463]
[287.68252563 257.04693604]
[275.76672363 247.93577576]
[263.85092163 238.82460022]
[251.93510437 229.71342468]
[240.01930237 220.60223389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 106]
[5 105]
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[30 38]
[31 37]
[55 66]
[56 65]
[57 64]
[67 82]
[68 81]
[69 80]
[70 79]
[85 97]
[86 96]
[87 95]
[88 94]
[110 153]
[111 152]
[112 151]
[113 150]
[114 149]
[116 147]
[117 146]
[118 145]
[119 144]
[121 142]
[122 141]
[123 140]
[124 139]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
