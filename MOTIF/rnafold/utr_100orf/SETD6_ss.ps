%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGACGCCGGAAGUGACCGCGCGGUGCGCCGGCCCGCGAGGAAACGCGCUCUUAGACCAUGGCGACCCAGGCGAAGCGUCCACGGGUGGCGGGGCCCGUGGACGGCGGCGACCUGGAUCCUGUGGCCUGCUUCCUGAGCUGGUGCCGGCGGGUGGGGC\
) } def
/len { sequence length } bind def

/coor [
[-17.59455872 340.83294678]
[-19.36376762 350.37268066]
[-24.48032761 358.54782104]
[-32.19375610 364.23968506]
[-41.40185547 366.68795776]
[-50.80811691 365.59207153]
[-59.14167023 378.06411743]
[-67.47521973 390.53616333]
[-75.68593597 403.08941650]
[-83.77301025 415.72265625]
[-91.86008453 428.35592651]
[-88.22869873 443.73736572]
[-96.60819244 457.13732910]
[-112.02716064 460.60589600]
[-125.33779907 452.08520508]
[-128.64315796 436.63043213]
[-119.98220062 423.41061401]
[-104.49333954 420.26885986]
[-96.40626526 407.63558960]
[-88.31919098 395.00231934]
[-87.35659027 387.63516235]
[-79.94726562 382.20260620]
[-71.61371613 369.73056030]
[-63.28015900 357.25851440]
[-69.00538635 337.68261719]
[-58.36768723 319.94042969]
[-37.83369827 315.64810181]
[-30.50437737 302.56066895]
[-29.97715569 295.14959717]
[-22.90050507 289.29025269]
[-15.31564426 276.34924316]
[-15.55524063 261.45657349]
[-1.90184629 253.46310425]
[5.68301439 240.52209473]
[13.26787472 227.58106995]
[20.85273552 214.64006042]
[28.43759537 201.69903564]
[36.02245712 188.75802612]
[33.27412033 176.94447327]
[39.53070450 166.08772278]
[51.89769363 162.30677795]
[59.73517227 149.51718140]
[57.21930695 137.65194702]
[63.68784714 126.92012024]
[76.12668610 123.38271332]
[84.21376038 110.74945831]
[81.21112061 96.57446289]
[89.02297974 84.37113953]
[103.15298462 81.16346741]
[111.24005890 68.53021240]
[119.32713318 55.89694977]
[127.41420746 43.26369095]
[126.37417603 20.10408592]
[146.48361206 10.12575150]
[153.29347229 -3.23934603]
[160.10333252 -16.60444450]
[159.47450256 -32.41314697]
[172.14654541 -40.24057007]
[178.95640564 -53.60566711]
[185.76625061 -66.97076416]
[192.57611084 -80.33586121]
[199.38597107 -93.70095825]
[206.19583130 -107.06605530]
[207.31536865 -116.18512726]
[213.27284241 -120.62474823]
[220.34379578 -133.85357666]
[220.02546692 -149.67156982]
[232.84875488 -157.24868774]
[239.91969299 -170.47750854]
[246.99064636 -183.70632935]
[254.06159973 -196.93515015]
[261.13253784 -210.16397095]
[268.07330322 -223.46156311]
[274.88314819 -236.82666016]
[270.23037720 -251.69236755]
[277.32690430 -265.14947510]
[291.52777100 -269.49359131]
[298.33764648 -282.85867310]
[305.01596069 -296.28997803]
[311.56210327 -309.78622437]
[318.10821533 -323.28244019]
[324.65435791 -336.77865601]
[331.20050049 -350.27487183]
[337.74664307 -363.77111816]
[344.29278564 -377.26733398]
[350.83892822 -390.76354980]
[357.38507080 -404.25976562]
[363.93121338 -417.75601196]
[358.51708984 -432.60400391]
[365.26348877 -446.89599609]
[380.16790771 -452.15283203]
[394.38778687 -445.25570679]
[399.48675537 -430.29653931]
[392.43963623 -416.15039062]
[377.42742920 -411.20986938]
[370.88128662 -397.71365356]
[364.33514404 -384.21740723]
[357.78900146 -370.72119141]
[351.24285889 -357.22497559]
[344.69671631 -343.72872925]
[338.15060425 -330.23251343]
[331.60446167 -316.73629761]
[325.05831909 -303.24008179]
[318.51217651 -289.74383545]
[318.42214966 -282.31460571]
[311.70272827 -276.04882812]
[304.89288330 -262.68371582]
[309.72546387 -248.64158630]
[303.00970459 -234.99046326]
[288.24826050 -230.01679993]
[281.43838501 -216.65170288]
[281.20254517 -209.22566223]
[274.36135864 -203.09301758]
[267.29040527 -189.86419678]
[260.21948242 -176.63537598]
[253.14851379 -163.40655518]
[246.07756042 -150.17773438]
[246.90165710 -135.30595398]
[233.57261658 -126.78262329]
[226.50166321 -113.55380249]
[219.56092834 -100.25620270]
[212.75106812 -86.89110565]
[205.94120789 -73.52600861]
[199.13134766 -60.16090775]
[192.32150269 -46.79581070]
[185.51164246 -33.43071365]
[186.62756348 -18.57796860]
[173.46842957 -9.79458618]
[166.65856934 3.57051158]
[159.84870911 16.93560982]
[163.73538208 23.04020309]
[165.25012207 30.18669701]
[164.15393066 37.47841644]
[160.53846741 43.98323441]
[154.82049561 48.85270691]
[147.69427490 51.43265533]
[140.04747009 51.35076523]
[131.96038818 63.98402405]
[123.87331390 76.61728668]
[115.78623962 89.25054169]
[118.78887939 103.42553711]
[110.97702026 115.62886047]
[96.84701538 118.83653259]
[88.75994110 131.46978760]
[88.36643219 149.85574341]
[72.52477264 157.35466003]
[64.68729401 170.14425659]
[64.65484619 188.53439331]
[48.96347427 196.34288025]
[41.37861252 209.28390503]
[33.79375076 222.22491455]
[26.20889091 235.16593933]
[18.62402916 248.10694885]
[11.03916931 261.04797363]
[10.73624516 276.86627197]
[-2.37462831 283.93411255]
[-9.95948887 296.87512207]
[-17.41693878 309.88998413]
[-24.74625587 322.97741699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[9 20]
[10 19]
[11 18]
[27 159]
[28 158]
[30 157]
[31 156]
[33 154]
[34 153]
[35 152]
[36 151]
[37 150]
[38 149]
[41 147]
[42 146]
[45 144]
[46 143]
[49 140]
[50 139]
[51 138]
[52 137]
[54 130]
[55 129]
[56 128]
[58 126]
[59 125]
[60 124]
[61 123]
[62 122]
[63 121]
[65 120]
[66 119]
[68 117]
[69 116]
[70 115]
[71 114]
[72 113]
[73 111]
[74 110]
[77 107]
[78 106]
[79 104]
[80 103]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
