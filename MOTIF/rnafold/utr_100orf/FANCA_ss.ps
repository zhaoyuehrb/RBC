%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGGCGCAGGGAGCCGCCGCCGGGGCUGUAGGCGCCAAGGCCAUGUCCGACUCGUGGGUCCCGAACUCCGCCUCGGGCCAGGACCCAGGGGGCCGCCGGAGGGCCUGGGCCGAGCUGCUGGCGGGAAGGGUCAAGAGGGAAA\
) } def
/len { sequence length } bind def

/coor [
[47.15026474 141.24629211]
[33.55564880 147.58555603]
[19.96103096 153.92483521]
[6.36641502 160.26411438]
[-7.22820187 166.60337830]
[-20.82281876 172.94265747]
[-34.20273972 179.72334290]
[-47.35364151 186.93817139]
[-51.91046906 203.79010010]
[-66.93155670 212.00437927]
[-82.93609619 206.95022583]
[-95.92648315 214.45022583]
[-104.00913239 228.05101013]
[-118.89991760 227.71395874]
[-131.89030457 235.21395874]
[-144.88067627 242.71395874]
[-157.53155518 250.77345276]
[-169.81883240 259.37710571]
[-182.10610962 267.98074341]
[-186.29678345 283.46679688]
[-201.07379150 289.71334839]
[-215.10150146 281.92855835]
[-217.61904907 266.08425903]
[-206.69519043 254.33485413]
[-190.70976257 255.69346619]
[-178.42248535 247.08981323]
[-166.13520813 238.48616028]
[-165.54360962 235.67224121]
[-163.75897217 232.93334961]
[-160.80790710 230.74142456]
[-156.89312744 229.54840088]
[-152.38067627 229.72357178]
[-139.39030457 222.22357178]
[-126.39991760 214.72357178]
[-119.24642944 201.65924072]
[-103.42648315 201.45985413]
[-90.43609619 193.95985413]
[-88.85963440 181.12719727]
[-80.03074646 171.41665649]
[-67.02470398 168.54528809]
[-54.56847382 173.78727722]
[-41.41757202 166.57243347]
[-40.08898544 163.22909546]
[-37.03247452 160.38670349]
[-32.51291656 158.86993408]
[-27.16209221 159.34803772]
[-13.56747627 153.00877380]
[0.02714093 146.66949463]
[13.62175751 140.33021545]
[27.21637535 133.99095154]
[40.81099319 127.65167236]
[53.96189117 120.43684387]
[66.61276245 112.37734985]
[79.26363373 104.31785583]
[80.52894592 91.66221619]
[88.81491852 82.01293182]
[101.13389587 78.84923553]
[113.04402161 83.31185913]
[125.86769867 75.53025818]
[131.63554382 68.34747314]
[139.05709839 67.72230530]
[152.04748535 60.22230148]
[165.03785706 52.72230148]
[165.83581543 40.77027893]
[172.26887512 30.80862999]
[182.62205505 25.27777100]
[194.23812866 25.46484947]
[204.19926453 31.20607376]
[217.50442505 24.27984619]
[230.80958557 17.35361671]
[244.11474609 10.42738724]
[257.41992188 3.50115800]
[270.72506714 -3.42507124]
[283.54876709 -11.20666981]
[295.83602905 -19.81031609]
[308.12332153 -28.41396332]
[320.41058350 -37.01760864]
[327.27709961 -51.27108765]
[342.14059448 -52.23312759]
[354.42788696 -60.83677292]
[366.71517944 -69.44042206]
[379.00244141 -78.04406738]
[391.28973389 -86.64771271]
[396.57543945 -94.19235992]
[403.94021606 -95.30158234]
[416.41226196 -103.63513184]
[428.88430786 -111.96868896]
[429.62042236 -127.35583496]
[439.16427612 -139.22041321]
[453.69256592 -143.14379883]
[467.57907104 -137.82369995]
[480.05111694 -146.15725708]
[486.81503296 -161.09651184]
[503.15914917 -162.43891907]
[512.27001953 -148.80352783]
[504.77517700 -134.21725464]
[488.38467407 -133.68521118]
[475.91262817 -125.35165405]
[475.51361084 -110.48629761]
[466.32916260 -98.56532288]
[451.71542358 -94.28833008]
[437.21786499 -99.49664307]
[424.74581909 -91.16308594]
[412.27377319 -82.82953644]
[399.89337158 -74.36043549]
[387.60607910 -65.75678253]
[375.31881714 -57.15314102]
[363.03152466 -48.54949188]
[350.74426270 -39.94584656]
[344.75662231 -26.30775833]
[329.01425171 -24.73032951]
[316.72695923 -16.12668228]
[304.43966675 -7.52303600]
[292.15240479 1.08061051]
[306.56689453 5.23055792]
[314.00070190 18.25893974]
[310.23941040 32.77970886]
[297.41540527 40.56075668]
[282.79882812 37.19084930]
[274.67614746 24.58045578]
[277.65130615 9.88009167]
[264.34613037 16.80632019]
[251.04098511 23.73254967]
[237.73580933 30.65877914]
[224.43064880 37.58500671]
[211.12548828 44.51123810]
[206.74464417 62.22872543]
[190.56556702 71.34036255]
[172.53785706 65.71268463]
[159.54748535 73.21268463]
[146.55709839 80.71268463]
[133.64930725 88.35393524]
[120.82562256 96.13553619]
[117.29827881 112.22334290]
[103.31195068 120.92060089]
[87.32312775 116.96872711]
[74.67225647 125.02822113]
[62.02138519 133.08770752]
[76.24114990 137.86245728]
[83.09957886 151.20269775]
[78.70848846 165.54557800]
[65.55727386 172.75984192]
[51.10162354 168.75558472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 42]
[8 41]
[11 37]
[12 36]
[14 34]
[15 33]
[16 32]
[17 27]
[18 26]
[19 25]
[52 138]
[53 137]
[54 136]
[58 133]
[59 132]
[61 131]
[62 130]
[63 129]
[68 126]
[69 125]
[70 124]
[71 123]
[72 122]
[73 121]
[74 114]
[75 113]
[76 112]
[77 111]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[85 104]
[86 103]
[87 102]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
