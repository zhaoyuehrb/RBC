%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGGAGGAGUUCUGCGUCUCGGGGUGGUGACUGGGUCCAGAAUGGCUUCGGAUUCGGGGAACCAGGGGACCCUCUGCACGUUGGAGUUCGCGGUGCAGAUGACCUGUCAGAGCUGUGUGGACGCGGUGCGCAAAUCCCUGC\
) } def
/len { sequence length } bind def

/coor [
[112.89891052 562.51879883]
[98.79620361 554.87072754]
[96.12479401 539.05163574]
[106.93395996 527.19659424]
[107.58824921 512.21087646]
[108.24254608 497.22515869]
[105.37018585 490.35351562]
[109.07810211 481.92071533]
[110.05915070 466.95281982]
[111.04019165 451.98495483]
[111.20381927 436.98583984]
[110.54952240 422.00012207]
[102.26443481 409.62246704]
[109.39241791 395.49792480]
[108.73812103 380.51220703]
[108.08383179 365.52648926]
[107.42954254 350.54074097]
[106.77525330 335.55502319]
[106.12096405 320.56930542]
[105.46666718 305.58358765]
[104.81237793 290.59786987]
[103.99465942 275.62017822]
[103.01361084 260.65228271]
[94.46047974 248.45829773]
[101.27863312 234.18164062]
[100.29759216 219.21374512]
[99.31654358 204.24586487]
[87.98372650 194.64883423]
[86.77558899 179.48324585]
[96.91867065 167.66142273]
[95.93762207 152.69354248]
[94.95658112 137.72566223]
[93.97553253 122.75777435]
[73.86507416 105.90482330]
[80.57069397 77.08176422]
[70.19799805 66.24630737]
[59.82529831 55.41084671]
[49.45260239 44.57538605]
[39.07990646 33.73992538]
[28.70721054 22.90446663]
[16.90804672 24.97021294]
[5.70282984 21.08925056]
[-2.13033152 12.34737301]
[-4.70958948 1.01973665]
[-1.50051796 -10.02054596]
[-11.39070511 -21.29814339]
[-21.28089333 -32.57574081]
[-31.41474533 -43.63489914]
[-41.78744125 -54.47035980]
[-52.16013718 -65.30581665]
[-62.53283310 -76.14128113]
[-72.90552521 -86.97673798]
[-88.79236603 -91.04373169]
[-92.95250702 -106.90642548]
[-81.10635376 -118.24665070]
[-65.44021606 -113.39855194]
[-62.07006836 -97.34943390]
[-51.69737244 -86.51397705]
[-41.32467651 -75.67851257]
[-30.95198250 -64.84305573]
[-20.57928658 -54.00759506]
[-15.83729172 -53.01409531]
[-11.69590569 -48.98394775]
[-10.00329494 -42.46592712]
[-0.11310804 -31.18832970]
[9.77707958 -19.91073418]
[28.02808380 -19.86663628]
[40.72414017 -6.31692696]
[39.54267120 12.53177071]
[49.91536713 23.36722946]
[60.28806305 34.20269012]
[70.66075897 45.03815079]
[81.03345490 55.87360764]
[91.40615082 66.70906830]
[106.39811707 66.21828461]
[116.03993225 54.72761536]
[125.68174744 43.23694992]
[135.32356262 31.74628258]
[144.96537781 20.25561523]
[154.60719299 8.76494884]
[164.24900818 -2.72571826]
[163.05952454 -18.25707054]
[173.00138855 -29.77288818]
[187.81549072 -30.81115913]
[197.45730591 -42.30182648]
[197.49708557 -58.34482956]
[210.15386963 -68.20310211]
[225.71844482 -64.31421661]
[232.25100708 -49.66139221]
[224.74034119 -35.48502731]
[208.94796753 -32.66001129]
[199.30615234 -21.16934586]
[200.85609436 -6.40001011]
[191.24162292 5.39051151]
[175.73966980 6.91609573]
[166.09785461 18.40676308]
[156.45603943 29.89742851]
[146.81422424 41.38809586]
[137.17240906 52.87876129]
[127.53060150 64.36943054]
[117.88878632 75.86009216]
[123.50933838 82.82198334]
[126.67556000 90.89263153]
[127.24833679 99.26463318]
[125.33950043 107.15065765]
[121.28688049 113.85737610]
[115.60880280 118.84638977]
[108.94341278 121.77672577]
[109.92446136 136.74461365]
[110.90550995 151.71249390]
[111.88655853 166.68037415]
[123.48592377 177.07713318]
[124.26762390 192.27066040]
[114.28442383 203.26481628]
[115.26547241 218.23269653]
[116.24652100 233.20059204]
[124.86982727 246.46516418]
[117.98149872 259.67123413]
[118.96254730 274.63912964]
[122.67046356 283.07189941]
[119.79810333 289.94357300]
[120.45239258 304.92929077]
[121.10668182 319.91500854]
[121.76097107 334.90072632]
[122.41526794 349.88647461]
[123.06955719 364.87219238]
[123.72384644 379.85791016]
[124.37813568 394.84362793]
[132.71002197 408.29318237]
[125.53524780 421.34582520]
[126.18953705 436.33154297]
[138.35368347 427.55465698]
[152.85856628 431.37673950]
[159.11805725 445.00827026]
[152.56376648 458.50054932]
[137.97923279 462.00643921]
[126.00807953 452.96600342]
[125.02703094 467.93386841]
[124.04598236 482.90176392]
[123.22826385 497.87945557]
[122.57397461 512.86517334]
[121.91968536 527.85089111]
[131.65447998 540.60290527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 142]
[5 141]
[6 140]
[8 139]
[9 138]
[10 137]
[11 131]
[12 130]
[14 128]
[15 127]
[16 126]
[17 125]
[18 124]
[19 123]
[20 122]
[21 121]
[22 119]
[23 118]
[25 116]
[26 115]
[27 114]
[30 111]
[31 110]
[32 109]
[33 108]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[45 66]
[46 65]
[47 64]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[75 101]
[76 100]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
