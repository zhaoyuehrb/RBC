%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCAUGGCCCUGCUCCCCGGGCGGCGGCGGCGGGACCCGCGCCCGGCACGUCAUCAUCAACGUGGGCGGCUGCCGCGUGCGCCUGGCAUGGGCCG\
) } def
/len { sequence length } bind def

/coor [
[27.15288162 456.80288696]
[19.79980659 470.17803955]
[7.36666679 479.03128052]
[-7.67793083 481.60476685]
[-22.34686852 477.38754272]
[-33.72761917 467.21694946]
[-39.56052780 453.11233521]
[-38.68746567 437.87420654]
[-31.28177643 424.52810669]
[-18.81386948 415.72390747]
[-3.75925374 413.20965576]
[0.38527220 398.79360962]
[4.52979803 384.37753296]
[8.67432404 369.96148682]
[12.81885052 355.54541016]
[16.73867989 341.06665039]
[20.43286324 326.52865601]
[24.12704659 311.99066162]
[22.63514328 309.41799927]
[22.16757202 306.04898071]
[23.05340004 302.30862427]
[25.44673538 298.74017334]
[29.28872871 295.93487549]
[34.75850296 281.96771240]
[40.22827530 268.00054932]
[45.69804764 254.03340149]
[51.16781998 240.06623840]
[56.63759232 226.09907532]
[61.44998169 211.89199829]
[65.59450531 197.47593689]
[69.73902893 183.05987549]
[73.88356018 168.64381409]
[78.02808380 154.22775269]
[82.17260742 139.81167603]
[86.31713867 125.39561462]
[90.46166229 110.97955322]
[87.67844391 96.24002838]
[78.56245422 84.32790375]
[64.13484955 75.42394257]
[68.69687653 59.09531021]
[85.65026855 58.95883560]
[90.47457886 75.21190643]
[99.59056854 87.12403870]
[107.07606506 86.65776062]
[129.53253174 85.25894928]
[137.09977722 72.30761719]
[144.66702271 59.35629654]
[152.23426819 46.40496826]
[159.80151367 33.45364380]
[159.80838013 27.87266731]
[161.85682678 23.37942123]
[165.14128113 20.59247971]
[168.72602844 19.69547844]
[177.46714783 7.50561047]
[186.20826721 -4.68425846]
[194.94937134 -16.87412643]
[189.93499756 -31.55866241]
[194.54179382 -46.37612152]
[206.99835205 -55.62888718]
[222.51487732 -55.75908661]
[235.12495422 -46.71664810]
[239.97973633 -31.97858047]
[235.21247864 -17.21196747]
[222.65628052 -8.09487629]
[207.13925171 -8.13301182]
[198.39813232 4.05685711]
[189.65701294 16.24672508]
[180.91589355 28.43659401]
[172.75283813 41.02088547]
[165.18559265 53.97221375]
[157.61834717 66.92353821]
[150.05110168 79.87486267]
[142.48387146 92.82618713]
[104.87772369 115.12407684]
[100.73320007 129.54014587]
[96.58867645 143.95620728]
[92.44414520 158.37226868]
[88.29962158 172.78833008]
[84.15509796 187.20440674]
[80.01056671 201.62046814]
[75.86604309 216.03652954]
[77.23386383 221.44729614]
[76.35510254 226.30664062]
[73.85817719 229.81663513]
[70.60475159 231.56884766]
[65.13497925 245.53601074]
[59.66520691 259.50317383]
[54.19543457 273.47033691]
[48.72566223 287.43750000]
[43.25588989 301.40466309]
[38.66503143 315.68484497]
[34.97084808 330.22283936]
[31.27666473 344.76083374]
[32.19567490 354.03164673]
[27.23491478 359.68994141]
[23.09038734 374.10598755]
[18.94586182 388.52206421]
[14.80133629 402.93814087]
[10.65681076 417.35418701]
[22.07752419 427.47991943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 93]
[17 92]
[18 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 74]
[37 43]
[38 42]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[53 68]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
