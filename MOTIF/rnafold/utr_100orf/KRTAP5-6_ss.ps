%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUCUCACCUGCUCCUCUACCUGCUCCACCCUCAAUCCACCAGAACCAUGGGCUGCUGUGGCUGCUCUGGAGGCUGUGGCUCCGGCUGUGGGGGCUGUGGCUCUGGCUGUGGGGGCUGUGGGUCCAGCUGCUGUGUGCCCAUCUGCU\
) } def
/len { sequence length } bind def

/coor [
[207.09056091 293.99026489]
[207.16224670 286.09408569]
[209.38626099 278.48904419]
[213.60905457 271.75253296]
[205.14706421 259.36727905]
[196.68507385 246.98200989]
[188.22306824 234.59675598]
[179.76107788 222.21148682]
[166.19264221 216.06765747]
[164.79608154 200.30821228]
[156.33407593 187.92294312]
[147.74455261 175.62579346]
[139.02839661 163.41806030]
[120.90212250 156.79220581]
[119.10420990 136.75584412]
[109.89102173 124.91873932]
[100.67783356 113.08162689]
[90.98334503 101.63536835]
[80.82411957 90.59951019]
[70.66489410 79.56365204]
[60.50567245 68.52779388]
[50.34644699 57.49193192]
[40.18722534 46.45607376]
[30.02799988 35.42021561]
[17.15654564 34.09573746]
[8.92155552 24.64164162]
[9.34821796 12.51305676]
[-0.58075899 1.26959515]
[-10.50973606 -9.97386646]
[-25.52084732 -7.03894091]
[-39.89065933 -11.97910786]
[-49.79254150 -23.37292671]
[-52.64279556 -38.09474945]
[-47.77425003 -52.17177963]
[-57.70322800 -63.41524124]
[-72.63760376 -68.63779449]
[-75.26258087 -83.29926300]
[-85.19155884 -94.54272461]
[-98.03289795 -96.13293457]
[-106.07073975 -105.75520325]
[-105.39350891 -117.87237549]
[-115.08799744 -129.31863403]
[-129.91123962 -134.84872437]
[-132.23266602 -149.56130981]
[-141.92715454 -161.00756836]
[-151.62164307 -172.45382690]
[-161.31613159 -183.90008545]
[-171.01062012 -195.34635925]
[-191.57325745 -201.23016357]
[-194.62380981 -221.60789490]
[-205.00894165 -232.43142700]
[-215.39407349 -243.25497437]
[-225.77920532 -254.07850647]
[-236.16433716 -264.90206909]
[-246.54946899 -275.72558594]
[-262.44094849 -279.77435303]
[-266.61932373 -295.63226318]
[-254.78619385 -306.98608398]
[-239.11448669 -302.15597534]
[-235.72592163 -286.11071777]
[-225.34078979 -275.28720093]
[-214.95565796 -264.46365356]
[-204.57052612 -253.64010620]
[-194.18539429 -242.81655884]
[-183.80026245 -231.99301147]
[-174.90229797 -233.26620483]
[-166.29833984 -230.22148132]
[-159.99349976 -223.43255615]
[-157.51959229 -214.36059570]
[-159.56436157 -205.04084778]
[-149.86987305 -193.59457397]
[-140.17538452 -182.14831543]
[-130.48089600 -170.70205688]
[-120.78639984 -159.25579834]
[-106.65656281 -154.54443359]
[-103.64173126 -139.01312256]
[-93.94724274 -127.56686401]
[-77.15116882 -122.57544708]
[-73.94809723 -104.47170258]
[-64.01912689 -93.22824097]
[-49.79493332 -88.80989838]
[-46.45976639 -73.34421539]
[-36.53078842 -62.10075760]
[-21.95965576 -65.19068909]
[-7.70344353 -60.54134750]
[2.37808704 -49.30617142]
[5.50287628 -34.43564987]
[0.73372555 -19.90284348]
[10.66270256 -8.65938187]
[20.59167862 2.58407974]
[37.48732376 7.22730684]
[41.06385803 25.26099205]
[51.22308350 36.29685211]
[61.38230515 47.33271027]
[71.54152679 58.36856842]
[81.70075226 69.40442657]
[91.85997772 80.44028473]
[102.01920319 91.47614288]
[105.11567688 91.84394836]
[108.14118958 93.37602234]
[110.65325928 96.04587555]
[112.22656250 99.65991974]
[112.51493835 103.86843872]
[121.72812653 115.70554352]
[130.94131470 127.54265594]
[141.87336731 128.27374268]
[150.40145874 134.79563904]
[153.82681274 144.73783875]
[151.23612976 154.70191956]
[159.95228577 166.90963745]
[167.53530884 172.11746216]
[168.71934509 179.46095276]
[177.18133545 191.84620667]
[191.35502625 198.87593079]
[192.14634705 213.74949646]
[200.60833740 226.13475037]
[209.07032776 238.52001953]
[217.53231812 250.90527344]
[225.99432373 263.29052734]
[248.94676208 265.26818848]
[262.96804810 283.21542358]
[259.41601562 305.44589233]
[269.57522583 316.48175049]
[279.73446655 327.51760864]
[289.89367676 338.55346680]
[300.05291748 349.58932495]
[310.21212769 360.62518311]
[323.68246460 359.63345337]
[335.08758545 366.49841309]
[340.35980225 378.50903320]
[337.77105713 391.16891479]
[347.70004272 402.41238403]
[363.41064453 407.11437988]
[366.93008423 423.13143921]
[354.63787842 433.98654175]
[339.17916870 428.51293945]
[336.45657349 412.34136963]
[326.52758789 401.09790039]
[309.74105835 400.79330444]
[298.11755371 388.21545410]
[299.17626953 370.78442383]
[289.01705933 359.74856567]
[278.85781860 348.71270752]
[268.69860840 337.67684937]
[258.53936768 326.64099121]
[248.38015747 315.60513306]
[241.13543701 318.23416138]
[233.42179871 318.79577637]
[225.81962585 317.23303223]
[218.90495300 313.64923096]
[213.20581055 308.30151367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 119]
[5 118]
[6 117]
[7 116]
[8 115]
[10 113]
[11 112]
[12 110]
[13 109]
[15 105]
[16 104]
[17 103]
[18 98]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[24 92]
[27 90]
[28 89]
[29 88]
[34 83]
[35 82]
[37 80]
[38 79]
[41 77]
[42 76]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[122 146]
[123 145]
[124 144]
[125 143]
[126 142]
[127 141]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
