%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCGACCCGUCUCUCUGCCCCCGCCGCUGCCAUGGCGGCAGCUCCGCCGCUUUCCAAGGCCGAGUAUCUGAAGCGUUACUUGUCCGGGGCAGAUGCCGGCGUCGACCGGGGAUCUGAGUCCGGUCGCAAGC\
) } def
/len { sequence length } bind def

/coor [
[223.65943909 333.15902710]
[238.59321594 334.56683350]
[229.49644470 322.64004517]
[220.39967346 310.71322632]
[211.30291748 298.78640747]
[202.20614624 286.85958862]
[193.10937500 274.93280029]
[190.25704956 274.46316528]
[187.42913818 272.78283691]
[185.10798645 269.89898682]
[183.76260376 266.00061035]
[183.78346252 261.44769287]
[175.83467102 248.72695923]
[165.60331726 247.30244446]
[157.71299744 240.29804993]
[154.97309875 229.88082886]
[158.53918457 219.48312378]
[151.19084167 206.40635681]
[143.84249878 193.32958984]
[136.49415588 180.25282288]
[129.14581299 167.17605591]
[121.79746246 154.09928894]
[114.44911957 141.02252197]
[107.10076904 127.94576263]
[85.29354858 124.80134583]
[72.07334900 107.17555237]
[57.07436371 107.00102234]
[42.07537842 106.82649231]
[27.07639313 106.65196228]
[12.07740879 106.47743225]
[-2.92157578 106.30290985]
[-15.35559845 116.44068909]
[-31.00294876 112.89950562]
[-37.86031723 98.39585114]
[-30.66732025 84.05568695]
[-14.94180775 80.87955475]
[-2.74704671 91.30392456]
[12.25193787 91.47845459]
[27.25092316 91.65297699]
[42.24990845 91.82750702]
[57.24888992 92.00203705]
[72.24787903 92.17656708]
[70.98600769 81.61105347]
[73.83899689 69.91650391]
[66.18836212 57.01426315]
[58.53771973 44.11202621]
[50.88708115 31.20978928]
[37.19317245 23.28593636]
[37.35695648 8.39223099]
[29.70631599 -4.51000643]
[22.05567741 -17.41224289]
[6.63493443 -17.86418533]
[-6.08055544 -26.60030937]
[-12.03332615 -40.83295059]
[-9.32387066 -56.02052307]
[1.18323410 -67.31673431]
[16.13521004 -71.11698914]
[30.76093292 -66.20865631]
[40.39339066 -54.15796280]
[41.95890045 -38.81023407]
[34.95791245 -25.06288147]
[42.60855484 -12.16064548]
[50.25919342 0.74159205]
[63.40587616 7.74259138]
[63.78931808 23.55915070]
[71.43995667 36.46138763]
[79.09059906 49.36362457]
[86.74123383 62.26586151]
[94.23311615 62.61480331]
[93.70470428 47.62411118]
[90.77156830 32.91368484]
[103.49513245 24.96944618]
[115.42446899 34.06290054]
[111.13636780 48.43600464]
[109.21687317 63.31268311]
[116.70874786 63.66162109]
[125.52552795 51.52636719]
[134.34230042 39.39111328]
[133.26289368 23.38441277]
[145.20115662 12.66726494]
[160.99909973 15.46094704]
[168.53787231 29.62238503]
[162.03439331 44.28813553]
[146.47755432 48.20788956]
[137.66078186 60.34314728]
[128.84400940 72.47840118]
[135.12869263 91.30174255]
[131.27691650 108.87483978]
[120.17753601 120.59741211]
[127.52587891 133.67417908]
[134.87422180 146.75094604]
[142.22257996 159.82771301]
[149.57092285 172.90447998]
[156.91926575 185.98124695]
[164.26760864 199.05801392]
[171.61595154 212.13478088]
[189.39112854 221.51385498]
[188.55538940 240.77816772]
[196.50418091 253.49890137]
[205.03619385 265.83602905]
[214.13296509 277.76281738]
[223.22972107 289.68963623]
[232.32649231 301.61645508]
[241.42326355 313.54327393]
[250.52001953 325.47009277]
[260.55697632 336.61724854]
[271.46759033 346.91088867]
[282.37820435 357.20449829]
[293.28878784 367.49813843]
[304.19940186 377.79174805]
[315.11001587 388.08538818]
[326.02059937 398.37899780]
[336.93121338 408.67263794]
[352.15466309 405.66827393]
[366.22244263 412.21633911]
[373.72518921 425.79898071]
[371.77795410 441.19338989]
[361.12951660 452.48010254]
[345.87435913 455.31915283]
[331.87844849 448.61883545]
[324.52346802 434.95559692]
[326.63760376 419.58322144]
[315.72698975 409.28961182]
[304.81637573 398.99597168]
[293.90579224 388.70236206]
[282.99517822 378.40872192]
[272.08456421 368.11511230]
[261.17395020 357.82147217]
[250.26336670 347.52786255]
[250.10244751 362.52700806]
[240.48719788 374.03991699]
[225.75680542 376.87103271]
[212.55877686 369.74276733]
[206.84913635 355.87194824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[7 100]
[12 99]
[13 98]
[17 96]
[18 95]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[44 68]
[45 67]
[46 66]
[47 65]
[49 63]
[50 62]
[51 61]
[76 86]
[77 85]
[78 84]
[106 129]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
