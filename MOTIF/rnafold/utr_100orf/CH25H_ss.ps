%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGCCUUGCACAGCCUCGCAAUGAGCUGCCACAACUGCUCCGACCCCCAGGUCCUUUGCAGCUCCGGGCAGCUGUUCCUGCAGCCCCUCUGGGACCACCUGAGGAGCUGGGAGGCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[77.65767670 259.19775391]
[67.08952332 259.99990845]
[62.19996643 274.18060303]
[69.34650421 288.27679443]
[64.35302734 303.27148438]
[50.18206787 310.26858521]
[35.24100876 305.11685181]
[28.39411736 290.87271118]
[33.70352936 275.98696899]
[48.01926804 269.29104614]
[52.90882492 255.11035156]
[40.62419510 240.06077576]
[39.72887802 220.51325989]
[50.74414062 204.16958618]
[69.46519470 197.56970215]
[72.88299561 182.96426392]
[76.30080414 168.35884094]
[79.71860504 153.75340271]
[83.13640594 139.14797974]
[72.80490875 132.82333374]
[64.66975403 123.84781647]
[59.38795090 112.94628143]
[57.38607788 100.99917603]
[58.82580566 88.97137451]
[63.59086227 77.83427429]
[71.29640961 68.48732758]
[63.30434418 55.79375076]
[55.31228256 43.10017014]
[47.32021713 30.40659332]
[39.32815552 17.71301651]
[31.33609200 5.01943779]
[23.34402847 -7.67413998]
[6.88517857 -6.85468197]
[-7.67350721 -14.37381554]
[-16.43203163 -28.11157036]
[-17.09742546 -44.29666901]
[-9.58333874 -58.54161835]
[-17.89697266 -71.02694702]
[-26.21060562 -83.51227570]
[-34.52423859 -95.99761200]
[-51.37724686 -96.43336487]
[-64.54582977 -106.69255066]
[-69.00134277 -122.60841370]
[-63.19071579 -137.90419006]
[-71.82049561 -150.17312622]
[-80.45027161 -162.44207764]
[-89.08005524 -174.71101379]
[-104.17697906 -181.11531067]
[-105.91032410 -197.42259216]
[-92.49697876 -206.85733032]
[-77.73544312 -199.71386719]
[-76.81111145 -183.34078979]
[-68.18133545 -171.07185364]
[-59.55155563 -158.80291748]
[-50.92177582 -146.53396606]
[-37.54621506 -147.56059265]
[-25.32470894 -141.77088928]
[-17.52233505 -130.59239197]
[-16.28244591 -116.90765381]
[-22.03890800 -104.31124115]
[-13.72527409 -91.82591248]
[-5.41164064 -79.34058380]
[2.90199256 -66.85524750]
[16.50711632 -68.61994934]
[29.60030365 -64.30622101]
[39.58786774 -54.70812988]
[44.46525192 -41.67241669]
[43.21918869 -27.74335861]
[36.03760529 -15.66620350]
[44.02967072 -2.97262549]
[52.02173233 9.72095203]
[60.01379776 22.41452980]
[68.00585938 35.10810852]
[75.99792480 47.80168533]
[83.98999023 60.49526596]
[94.37543488 57.74708557]
[105.11814117 57.68275452]
[115.53575897 60.30636215]
[124.96656036 65.45125580]
[132.81152344 72.79064178]
[138.57232666 81.85833740]
[141.88307190 92.07836151]
[142.53346252 102.80155945]
[157.09405518 106.40560150]
[171.65466309 110.00963593]
[186.21525574 113.61367798]
[201.47019958 109.41879272]
[211.96560669 119.98741150]
[226.52619934 123.59145355]
[241.08679199 127.19549561]
[255.64738464 130.79953003]
[270.90234375 126.60464478]
[281.39773560 137.17326355]
[295.95834351 140.77729797]
[310.38320923 133.75569153]
[324.80410767 140.78541565]
[328.15856934 156.47384644]
[317.87335205 168.78617859]
[301.83837891 168.27745056]
[292.35430908 155.33790588]
[277.79370117 151.73385620]
[263.58023071 156.18652344]
[252.04335022 145.36012268]
[237.48275757 141.75608826]
[222.92216492 138.15203857]
[208.36157227 134.54800415]
[194.14808655 139.00067139]
[182.61120605 128.17427063]
[168.05061340 124.57022858]
[153.49002075 120.96619415]
[138.92942810 117.36215210]
[122.24861908 136.35853577]
[97.74183655 142.56578064]
[94.32403564 157.17120361]
[90.90623474 171.77664185]
[87.48843384 186.38206482]
[84.07062531 200.98750305]
[92.71504211 207.57542419]
[98.60158539 216.66598511]
[101.05863953 227.17398071]
[99.82215118 237.85552979]
[95.06369019 247.45516968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[37 63]
[38 62]
[39 61]
[40 60]
[44 55]
[45 54]
[46 53]
[47 52]
[83 111]
[84 110]
[85 109]
[86 108]
[88 106]
[89 105]
[90 104]
[91 103]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
