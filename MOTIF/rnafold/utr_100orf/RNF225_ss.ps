%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCUGCCCUCGGCCGUUCUGGCUCCGCCAUUCCCGGGCCCCCCAGGGCUCGGGUCCCAGCUCCCCAGGCUCGCUCUCUGCGCCCCGCUCCCCAAGCA\
) } def
/len { sequence length } bind def

/coor [
[74.58271027 128.30412292]
[67.10346985 116.73930359]
[64.40767670 103.65444946]
[49.49647903 102.02467346]
[34.58528137 100.39488983]
[19.67408371 98.76510620]
[4.76288700 97.13532257]
[-10.14831066 95.50553894]
[-17.39057732 105.94087219]
[-28.35536003 112.20780182]
[-40.87715530 113.14086151]
[-52.51381683 108.62093353]
[-61.02284241 99.58631134]
[-64.79350281 87.83867645]
[-79.57453156 85.28501892]
[-94.35556030 82.73136902]
[-109.13658905 80.17771149]
[-119.92131042 93.85873413]
[-136.02824402 100.26154327]
[-153.08860779 97.74414825]
[-166.52227783 87.07132721]
[-172.76739502 71.18527985]
[-187.67858887 69.55549622]
[-202.58978271 67.92572021]
[-217.50099182 66.29593658]
[-233.90328979 70.58552551]
[-242.56585693 56.01169968]
[-230.95962524 43.65323639]
[-215.87120056 51.38473892]
[-200.96000671 53.01451874]
[-186.04881287 54.64430237]
[-171.13761902 56.27408218]
[-164.69195557 45.18530655]
[-154.45611572 37.37845230]
[-141.96635437 34.07061386]
[-129.11470032 35.80020905]
[-117.86228943 42.33972168]
[-109.94016266 52.72487259]
[-106.58293915 65.39668274]
[-91.80191040 67.95034027]
[-77.02088165 70.50399017]
[-62.23984909 73.05764008]
[-50.32455444 60.21620560]
[-32.95849609 56.93761826]
[-16.90239334 64.68558502]
[-8.51852798 80.59434509]
[6.39266920 82.22412872]
[21.30386734 83.85390472]
[36.21506500 85.48368835]
[51.12626266 87.11347198]
[66.03746033 88.74325562]
[77.03631592 72.56211090]
[94.90193176 64.58562469]
[114.29199982 67.19897461]
[123.03311157 55.00910568]
[131.77423096 42.81923676]
[126.75984192 28.13470078]
[131.36663818 13.31724167]
[143.82319641 4.06447506]
[159.33972168 3.93427849]
[171.94979858 12.97671509]
[176.80459595 27.71478271]
[172.03732300 42.48139572]
[159.48112488 51.59848785]
[143.96409607 51.56035233]
[135.22297668 63.75022125]
[126.48186493 75.94008636]
[133.99708557 83.78836823]
[139.09124756 93.99577332]
[141.02851868 105.78814697]
[155.72297668 108.80025482]
[168.81703186 100.36322021]
[183.67639160 103.62725067]
[191.63911438 116.16242981]
[206.33358765 119.17453766]
[221.02804565 122.18663788]
[235.15707397 114.58728790]
[249.85054016 121.02790833]
[253.83686829 136.56782532]
[244.05810547 149.28611755]
[228.01565552 149.42642212]
[218.01594543 136.88110352]
[203.32147217 133.86900330]
[188.62701416 130.85688782]
[176.37469482 139.24833679]
[161.42951965 136.40296936]
[152.71087646 123.49471283]
[138.01640320 120.48260498]
[128.71626282 132.25152588]
[135.04379272 145.85160828]
[141.37132263 159.45170593]
[155.88850403 166.28036499]
[159.46063232 181.92068481]
[149.34747314 194.37474060]
[133.30696106 194.08883667]
[123.64402008 181.28231812]
[127.77122498 165.77922058]
[121.44370270 152.17913818]
[115.11617279 138.57904053]
[100.20370483 140.30320740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[14 42]
[15 41]
[16 40]
[17 39]
[22 32]
[23 31]
[24 30]
[25 29]
[54 67]
[55 66]
[56 65]
[70 88]
[71 87]
[74 84]
[75 83]
[76 82]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
