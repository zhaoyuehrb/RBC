%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGCUCCAACAUCCUCCCCCUGUCAAGAUGUGGCACCUCAAACUUUGUGCAGUCCUCAUGAUCUUCCUGUUGCUGUUGGGCCAGAUAGAUGGCUCCCCAAUACCAGAAGUGAGUUCGGCAAAGAGAA\
) } def
/len { sequence length } bind def

/coor [
[28.31619644 177.46284485]
[14.66180038 175.62535095]
[3.19887638 168.10232544]
[-9.73066902 175.70672607]
[-22.66021347 183.31111145]
[-26.73352814 198.34593201]
[-39.95425415 205.87368774]
[-54.26255417 201.89775085]
[-67.19210052 209.50215149]
[-80.12164307 217.10655212]
[-86.00666046 224.22787476]
[-93.45677185 224.73414612]
[-106.56629944 232.02389526]
[-119.67581940 239.31364441]
[-132.78533936 246.60339355]
[-131.39566040 261.76876831]
[-136.30058289 276.18618774]
[-146.65029907 287.35772705]
[-160.65165710 293.34783936]
[-175.87886047 293.11874390]
[-189.69366455 286.71008301]
[-199.70260620 275.23223877]
[-204.17155457 260.67379761]
[-202.32624817 245.55708313]
[-194.48638916 232.50117493]
[-182.01028442 223.76809692]
[-167.05949402 220.87089539]
[-152.22433472 224.31152344]
[-140.07508850 233.49388123]
[-126.96556854 226.20413208]
[-113.85604858 218.91436768]
[-100.74652863 211.62461853]
[-87.72604370 204.17700195]
[-74.79650116 196.57260132]
[-61.86695480 188.96821594]
[-58.38819885 174.53097534]
[-45.38412857 166.63484192]
[-30.26461220 170.38157654]
[-17.33506584 162.77717590]
[-4.40552139 155.17277527]
[-4.94603062 139.06961060]
[2.72658086 124.79520416]
[16.61499596 116.26409149]
[33.00310898 115.86929321]
[47.45016098 123.81185913]
[60.19217682 115.89725494]
[72.93419647 107.98265076]
[85.67621613 100.06804657]
[92.44210815 87.83226776]
[106.40917969 87.18993378]
[119.15119934 79.27532959]
[131.89321899 71.36072540]
[131.50309753 56.07036591]
[138.77079773 42.72580719]
[151.65655518 34.86299515]
[166.64755249 34.50811768]
[179.71537781 41.65636826]
[192.45739746 33.74176788]
[205.19941711 25.82716370]
[217.94143677 17.91255951]
[230.68345642 9.99795532]
[234.40530396 -2.42066622]
[245.26507568 -8.73518753]
[257.11486816 -6.00624990]
[270.04443359 -13.61064816]
[282.97396851 -21.21504593]
[284.85183716 -34.61370850]
[293.99444580 -44.32033539]
[306.87417603 -46.91860199]
[318.70791626 -41.67368698]
[331.81744385 -48.96343994]
[344.92694092 -56.25318909]
[358.03646851 -63.54294205]
[371.14599609 -70.83269501]
[371.43515015 -81.67428589]
[376.21246338 -91.32021332]
[384.53421021 -98.01881409]
[394.82022095 -100.58576965]
[405.15377808 -98.61309052]
[413.63864136 -92.53224945]
[427.24176025 -98.85326385]
[440.84487915 -105.17428589]
[454.44799805 -111.49530029]
[468.05108643 -117.81631470]
[481.65420532 -124.13733673]
[486.84344482 -139.06541443]
[501.10473633 -145.87651062]
[515.97711182 -140.52973938]
[522.63708496 -126.19723511]
[517.13336182 -111.38221741]
[502.73123169 -104.87417603]
[487.97521973 -110.53421783]
[474.37213135 -104.21320343]
[460.76901245 -97.89218140]
[447.16589355 -91.57116699]
[433.56277466 -85.25015259]
[419.95965576 -78.92913818]
[414.76516724 -60.24386597]
[397.31039429 -51.12150574]
[378.43572998 -57.72317123]
[365.32623291 -50.43342209]
[352.21670532 -43.14366913]
[339.10717773 -35.85391617]
[325.99765015 -28.56416702]
[322.11898804 -12.24685574]
[307.37390137 -3.57053351]
[290.57836914 -8.28550053]
[277.64883423 -0.68110281]
[264.71926880 6.92329502]
[256.96478271 22.61773682]
[238.59805298 22.73997498]
[225.85604858 30.65457726]
[213.11402893 38.56918335]
[200.37200928 46.48378372]
[187.62998962 54.39838791]
[188.24632263 69.28078461]
[181.28431702 82.56184387]
[168.52502441 90.62824249]
[153.34161377 91.22901154]
[139.80781555 84.10274506]
[127.06580353 92.01734924]
[114.32378387 99.93195343]
[107.55789185 112.16773224]
[93.59082031 112.81006622]
[80.84880066 120.72467041]
[68.10678101 128.63926697]
[55.36476517 136.55387878]
[56.53599167 150.54789734]
[51.56644821 163.61114502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[8 35]
[9 34]
[10 33]
[12 32]
[13 31]
[14 30]
[15 29]
[45 127]
[46 126]
[47 125]
[48 124]
[50 122]
[51 121]
[52 120]
[57 115]
[58 114]
[59 113]
[60 112]
[61 111]
[64 109]
[65 108]
[66 107]
[70 104]
[71 103]
[72 102]
[73 101]
[74 100]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
