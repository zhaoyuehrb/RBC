%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUUUUCGAAGCCCUCCACGCUGCGGCCGCUAUCCCCUCCGGACCAUGGCCGACGACGACGUGCUGUUCGAGGAUGUGUACGAGCUGUGCGAGGUGAUCGGAAAGGGUCCCUUCAGUGUUGUACGACGAUGUAUCAACAGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[348.77838135 316.32653809]
[337.89224243 306.00701904]
[323.33251953 302.86636353]
[318.64016724 287.75701904]
[307.75402832 277.43750000]
[296.86791992 267.11801147]
[285.98178101 256.79849243]
[275.09564209 246.47900391]
[264.20950317 236.15950012]
[253.32339478 225.83999634]
[238.73806763 228.73936462]
[225.08067322 222.41960144]
[217.67681885 209.11410522]
[219.54896545 193.82353210]
[208.66282654 183.50402832]
[197.77670288 173.18452454]
[186.89056396 162.86502075]
[175.89479065 152.66242981]
[164.79061890 142.57792664]
[153.68644714 132.49340820]
[142.47515869 122.52812195]
[131.15802002 112.68320465]
[119.84088135 102.83828735]
[102.29949188 117.75492096]
[85.47883606 106.13397980]
[70.54814911 104.69363403]
[55.61746597 103.25328827]
[40.68677902 101.81294250]
[25.75609207 100.37259674]
[10.82540512 98.93225098]
[0.51778704 110.38036346]
[-14.38024712 113.52709961]
[-28.11209297 107.37076569]
[-35.49733734 94.46355438]
[-50.42802429 93.02320862]
[-65.35871124 91.58286285]
[-78.60431671 100.63457489]
[-93.89678955 95.78485107]
[-99.50505066 80.75399017]
[-91.12693024 67.07237244]
[-75.18939972 65.23537445]
[-63.91836548 76.65217590]
[-48.98767853 78.09252167]
[-34.05699158 79.53286743]
[-24.34061241 68.27542114]
[-9.68515778 64.85758209]
[4.33661842 70.79418182]
[12.26575089 84.00156403]
[27.19643784 85.44190979]
[42.12712479 86.88225555]
[57.05781174 88.32260132]
[71.98849487 89.76294708]
[86.91918182 91.20329285]
[94.73265076 82.88918304]
[107.46240997 81.39814758]
[104.59503174 66.67476654]
[101.57048798 51.98285675]
[98.38912964 37.32410431]
[93.47841644 29.53606796]
[95.29994965 22.31821823]
[92.43257141 7.59483051]
[89.56518555 -7.12855673]
[86.69780731 -21.85194397]
[76.46517181 -33.91857910]
[81.62686157 -47.89020157]
[78.75948334 -62.61358643]
[66.31315613 -72.73625946]
[66.61129761 -88.77654266]
[79.42519379 -98.42970276]
[94.92512512 -94.29066467]
[101.22087097 -79.53453827]
[93.48286438 -65.48096466]
[96.35024261 -50.75757980]
[106.37779236 -39.74406052]
[101.42119598 -24.71932411]
[104.28857422 -9.99593639]
[107.15595245 4.72745085]
[110.02333069 19.45083809]
[113.04787445 34.14274597]
[116.22923279 48.80149460]
[120.75362396 54.71294403]
[119.31841278 63.80738449]
[122.18579865 78.53076935]
[129.68579102 91.52114868]
[141.00292969 101.36606598]
[152.32006836 111.21098328]
[160.91369629 114.51527405]
[163.77096558 121.38923645]
[174.87513733 131.47375488]
[185.97929382 141.55825806]
[194.50035095 145.04544067]
[197.21006775 151.97889709]
[208.09620667 162.29840088]
[218.98233032 172.61790466]
[229.86846924 182.93740845]
[245.03723145 180.25137329]
[258.71911621 186.93411255]
[265.75921631 200.23452759]
[263.64288330 214.95387268]
[274.52902222 225.27337646]
[285.41516113 235.59288025]
[296.30126953 245.91238403]
[307.18740845 256.23187256]
[318.07354736 266.55139160]
[328.95968628 276.87088013]
[344.29803467 280.74966431]
[348.21176147 295.12088013]
[359.09790039 305.44039917]
[370.77716064 302.80538940]
[382.15277100 306.13381958]
[390.40039062 314.47772217]
[393.53164673 325.65945435]
[390.87243652 336.83911133]
[401.30767822 347.61434937]
[411.74291992 358.38958740]
[427.31414795 358.80792236]
[437.74346924 369.88418579]
[437.24868774 384.72637939]
[447.68392944 395.50161743]
[458.11917114 406.27685547]
[468.55441284 417.05209351]
[478.98965454 427.82733154]
[489.53942871 438.49047852]
[500.20254517 449.04025269]
[510.86566162 459.59002686]
[526.66638184 459.25497437]
[538.01818848 470.25100708]
[538.18615723 486.05441284]
[527.07067871 497.28927612]
[511.26641846 497.29016113]
[500.14968872 486.05654907]
[500.31588745 470.25314331]
[489.65277100 459.70336914]
[478.98965454 449.15359497]
[471.97290039 446.66748047]
[468.21441650 438.26257324]
[457.77917480 427.48733521]
[447.34393311 416.71209717]
[436.90869141 405.93685913]
[426.47344971 395.16162109]
[411.62301636 395.18041992]
[400.88671875 384.40145874]
[400.96768188 368.82482910]
[390.53244019 358.04959106]
[380.09719849 347.27435303]
[361.86257935 348.12881470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[4 105]
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[10 99]
[14 95]
[15 94]
[16 93]
[17 92]
[18 90]
[19 89]
[20 88]
[21 86]
[22 85]
[23 84]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[34 44]
[35 43]
[36 42]
[55 83]
[56 82]
[57 80]
[58 79]
[60 78]
[61 77]
[62 76]
[63 75]
[65 73]
[66 72]
[113 145]
[114 144]
[115 143]
[118 140]
[119 139]
[120 138]
[121 137]
[122 136]
[123 134]
[124 133]
[125 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
