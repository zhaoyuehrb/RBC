%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUUCUAUCAAUGACACCCACUUCUAUCCCCCCUUCUUCCUCCUGCUAGGAAUACCAGGACUGGACACUUUACAUAUCUGGAUUUCUUUCCCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[61.09737015 429.47970581]
[48.56499100 429.56838989]
[36.06972122 428.59625244]
[23.70120811 426.57015991]
[11.54818153 423.50460815]
[-0.30216196 419.42156982]
[-11.76479340 414.35021973]
[-22.75746346 408.32693481]
[-33.20128250 401.39483643]
[-43.02130508 393.60363770]
[-52.14704895 385.00918579]
[-60.51301193 375.67306519]
[-68.05913544 365.66223145]
[-74.73123932 355.04846191]
[-80.48141479 343.90783691]
[-85.26836395 332.32031250]
[-89.05769348 320.36892700]
[-91.82215881 308.13943481]
[-93.54188538 295.71954346]
[-94.20447540 283.19833374]
[-93.80512238 270.66561890]
[-92.34661865 258.21133423]
[-89.83939362 245.92480469]
[-86.30136108 233.89419556]
[-81.75785065 222.20581055]
[-76.24140930 210.94354248]
[-69.79154968 200.18817139]
[-62.45450211 190.01690674]
[-54.28284454 180.50274658]
[-45.33515930 171.71395874]
[-35.67559052 163.71365356]
[-25.37339592 156.55924988]
[-14.50245190 150.30213928]
[-3.14071083 144.98722839]
[8.63034630 140.65270996]
[20.72629929 137.32974243]
[33.06038666 135.04219055]
[45.54414749 133.80654907]
[58.08802414 133.63172913]
[70.60204315 134.51902771]
[82.99641418 136.46214294]
[86.69059753 121.92416382]
[90.38478088 107.38617706]
[93.62505341 92.74033356]
[96.40826416 78.00080872]
[99.19148254 63.26127625]
[101.97470093 48.52174759]
[104.75791168 33.78221893]
[99.71556091 18.78604507]
[109.68002319 7.71541739]
[112.46324158 -7.02411127]
[106.53350830 -22.31366158]
[117.01924896 -34.92243958]
[133.13363647 -31.87961388]
[138.29956055 -16.31538391]
[127.20276642 -4.24089479]
[124.41954803 10.49863338]
[129.66098022 24.44053841]
[119.49744415 36.56543732]
[116.71422577 51.30496597]
[113.93100739 66.04449463]
[111.14779663 80.78401947]
[108.36457825 95.52355194]
[110.34965515 100.58690643]
[109.25148773 106.39303589]
[104.92276764 111.08036041]
[101.22858429 125.61834717]
[97.53440094 140.15632629]
[116.07973480 147.29086304]
[133.50177002 156.84263611]
[149.48718262 168.63934326]
[163.74856567 182.46833801]
[176.02961731 198.08041382]
[186.10963440 215.19433594]
[193.80764771 233.50189209]
[198.98551941 252.67343140]
[201.55052185 272.36383057]
[201.45693970 292.21865845]
[198.70689392 311.88064575]
[193.35035706 330.99597168]
[185.48413086 349.22076416]
[175.25022888 366.22726440]
[162.83319092 381.70962524]
[173.35699463 392.39837646]
[183.88079834 403.08712769]
[199.68457031 402.95938110]
[210.89109802 414.10342407]
[210.85174561 429.90765381]
[199.58985901 440.99572754]
[183.78692627 440.78930664]
[172.81852722 429.41082764]
[173.19203186 413.61093140]
[162.66822815 402.92218018]
[152.14442444 392.23342896]
[142.43981934 400.15942383]
[132.09902954 407.23599243]
[121.19621277 413.41229248]
[109.80955505 418.64395142]
[98.02071381 422.89343262]
[85.91423798 426.13015747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[41 68]
[42 67]
[43 66]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[50 57]
[51 56]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
