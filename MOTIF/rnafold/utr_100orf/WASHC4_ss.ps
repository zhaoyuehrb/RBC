%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:18:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUCACGUGCUGUGACAGUAGCUGGGGUGAGGCCGUCGUCGCCGCACGGGCUGGUUGGGGCUGUGUCUGUGGGAGGCGCCGGGGUGAUGGCGGUGGAGACUCUGUCCCCGGACUGGGAGUUUGACCGCGUUGACGACGGCUCGCAGAAAAUUCAUGCCGAAGUCCAACUUAAGAAUUAUGGGAAAU\
) } def
/len { sequence length } bind def

/coor [
[16.78121758 240.59187317]
[22.87849808 226.88197327]
[10.95281219 235.98020935]
[-0.97287345 245.07846069]
[-12.89855957 254.17669678]
[-17.83596611 261.88595581]
[-25.10039330 263.32534790]
[-37.17644501 272.22305298]
[-49.25249481 281.12072754]
[-61.32854462 290.01843262]
[-73.40459442 298.91613770]
[-79.92509460 313.33117676]
[-94.76104736 314.65167236]
[-106.83709717 323.54937744]
[-118.91314697 332.44708252]
[-130.98919678 341.34475708]
[-143.06524658 350.24246216]
[-141.46688843 365.45404053]
[-147.65626526 379.33166504]
[-159.87969971 388.18911743]
[-174.79565430 389.72866821]
[-188.38796997 383.63647461]
[-200.46401978 392.53417969]
[-212.54006958 401.43185425]
[-213.34596252 417.04867554]
[-224.03936768 428.45852661]
[-239.57119751 430.27404785]
[-252.60780334 421.63803101]
[-256.99368286 406.62808228]
[-250.65795898 392.33148193]
[-236.59217834 385.49865723]
[-221.43775940 389.35580444]
[-209.36170959 380.45812988]
[-197.28565979 371.56042480]
[-199.07725525 356.77340698]
[-193.18759155 342.98327637]
[-181.10633850 333.93289185]
[-166.01802063 332.13299561]
[-151.96295166 338.16641235]
[-139.88690186 329.26870728]
[-127.81084442 320.37103271]
[-115.73479462 311.47332764]
[-103.65874481 302.57562256]
[-98.00200653 288.79699707]
[-82.30229187 286.84008789]
[-70.22624207 277.94238281]
[-58.15019226 269.04467773]
[-46.07413864 260.14700317]
[-33.99808884 251.24929810]
[-21.99680138 242.25102234]
[-10.07111645 233.15277100]
[1.85456991 224.05453491]
[13.78025532 214.95628357]
[24.11768913 204.08718872]
[32.60689545 191.72056580]
[41.09610367 179.35394287]
[49.58530807 166.98730469]
[58.07451630 154.62068176]
[66.56372070 142.25405884]
[74.52903748 129.54368591]
[81.95655823 116.51172638]
[89.38408661 103.47977448]
[96.70246887 90.38621521]
[103.91119385 77.23196411]
[97.25115204 58.29571533]
[106.49355316 40.82044983]
[125.30564117 35.82374954]
[131.84614563 22.32479095]
[138.38664246 8.82583332]
[144.92713928 -4.67312479]
[151.46763611 -18.17208290]
[158.00813293 -31.67103958]
[164.54864502 -45.16999817]
[149.72076416 -42.90409088]
[138.58850098 -52.95758438]
[139.33653259 -67.93891907]
[151.41490173 -76.83348846]
[165.94329834 -73.10179138]
[172.24014282 -59.48776627]
[179.88438416 -72.39379120]
[187.52864075 -85.29981232]
[195.17288208 -98.20584106]
[191.47282410 -113.33684540]
[199.40902710 -126.31649017]
[213.85693359 -129.75068665]
[221.50117493 -142.65670776]
[214.09121704 -156.03727722]
[214.37179565 -171.22998047]
[222.16743469 -184.15647888]
[235.29878235 -191.39689636]
[250.19087219 -191.09440613]
[257.83511353 -204.00042725]
[265.47937012 -216.90644836]
[273.12362671 -229.81246948]
[280.76788330 -242.71850586]
[278.33065796 -255.39755249]
[284.97924805 -265.99465942]
[296.68078613 -269.10955811]
[304.53961182 -281.88604736]
[312.39846802 -294.66250610]
[320.25729370 -307.43899536]
[328.11614990 -320.21548462]
[335.97497559 -332.99197388]
[343.83380127 -345.76846313]
[351.47805786 -358.67449951]
[358.90557861 -371.70645142]
[366.33309937 -384.73840332]
[365.70074463 -401.12536621]
[379.71841431 -409.63635254]
[393.96594238 -401.51602173]
[393.78668213 -385.11785889]
[379.36508179 -377.31088257]
[371.93753052 -364.27893066]
[364.51000977 -351.24697876]
[364.89181519 -346.46823120]
[362.26190186 -341.40206909]
[356.61029053 -337.90963745]
[348.75146484 -325.13314819]
[340.89260864 -312.35665894]
[333.03378296 -299.58016968]
[325.17495728 -286.80368042]
[317.31610107 -274.02719116]
[309.45727539 -261.25070190]
[309.92370605 -243.71638489]
[293.67388916 -235.07424927]
[286.02963257 -222.16822815]
[278.38540649 -209.26220703]
[270.74114990 -196.35617065]
[263.09689331 -183.45014954]
[270.51901245 -170.53591919]
[270.48022461 -155.54077148]
[262.89077759 -142.49212646]
[249.70239258 -134.94474792]
[234.40721130 -135.01246643]
[226.76295471 -122.10643768]
[230.69473267 -107.78594208]
[223.12623596 -94.58850098]
[208.07891846 -90.56159210]
[200.43466187 -77.65556335]
[192.79042053 -64.74954224]
[185.14616394 -51.84351730]
[178.04759216 -38.62949753]
[171.50709534 -25.13054085]
[164.96659851 -11.63158226]
[158.42610168 1.86737514]
[151.88558960 15.36633301]
[145.34509277 28.86529160]
[138.80459595 42.36425018]
[144.67672729 50.82541275]
[146.51089478 61.04212570]
[143.90841675 71.17414856]
[137.27589417 79.36798859]
[127.76341248 84.09593964]
[117.06544495 84.44068909]
[109.85671997 97.59494019]
[109.04911041 105.63234711]
[102.41604614 110.90730286]
[94.98851776 123.93925476]
[87.56098938 136.97120667]
[102.50709534 135.70075989]
[112.94300079 146.47535706]
[111.19599152 161.37327576]
[98.55051422 169.44122314]
[84.30381012 164.74748230]
[78.93034363 150.74327087]
[70.44113922 163.10989380]
[61.95193100 175.47651672]
[53.46272659 187.84313965]
[44.97351837 200.20976257]
[36.48431396 212.57638550]
[49.86703110 205.80122375]
[64.64070129 203.20530701]
[79.53144073 205.01248169]
[93.25527954 211.06692505]
[104.62886810 220.84657288]
[112.67150879 233.50816345]
[116.68970490 247.95994568]
[116.33699799 262.95581055]
[111.64379120 277.20269775]
[103.01475525 289.47213745]
[91.19395447 298.70623779]
[77.20063782 304.10876465]
[62.24140167 305.21383667]
[47.60611725 301.92620850]
[34.55673218 294.52935791]
[24.21844482 283.66107178]
[17.48268127 270.25848389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[22 34]
[23 33]
[24 32]
[54 170]
[55 169]
[56 168]
[57 167]
[58 166]
[59 165]
[60 159]
[61 158]
[62 157]
[63 155]
[64 154]
[67 148]
[68 147]
[69 146]
[70 145]
[71 144]
[72 143]
[73 142]
[79 141]
[80 140]
[81 139]
[82 138]
[85 135]
[86 134]
[91 129]
[92 128]
[93 127]
[94 126]
[95 125]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
