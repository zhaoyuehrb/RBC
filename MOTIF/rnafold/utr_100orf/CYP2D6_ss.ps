%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGAGAGUGUCCUGCCUGGUCCUCUGUGCCUGGUGGGGUGGGGGUGCCAGGUGUGUCCAGAGGAGCCCAUUUGGUAGUGAGGCAGGUAUGGGGCUAGAAGCACUGGUGCCCCUGGCCGUGAUAGUGGCCAUCUUCCUGCUCCUGGUGGACCUGAUGCACCGGCGCCAACGCUGGGCUGCACGCUACC\
) } def
/len { sequence length } bind def

/coor [
[-60.69099045 701.36804199]
[-62.16891861 686.44104004]
[-63.64685059 671.51397705]
[-65.12477875 656.58697510]
[-72.41248322 654.81518555]
[-86.98789215 651.27154541]
[-94.27559662 649.49969482]
[-102.44173431 662.08197021]
[-110.60787201 674.66430664]
[-118.77400970 687.24658203]
[-114.47077942 700.02044678]
[-118.26025391 712.75305176]
[-128.54222107 720.85394287]
[-141.41918945 721.53802490]
[-149.79116821 733.98431396]
[-148.13336182 749.94146729]
[-159.67610168 761.08349609]
[-175.56475830 758.86315918]
[-183.61094666 744.98376465]
[-177.64228821 730.09234619]
[-162.23745728 725.61230469]
[-153.86547852 713.16601562]
[-157.80099487 696.82305908]
[-148.52317810 682.40203857]
[-131.35630798 679.08044434]
[-123.19017029 666.49816895]
[-115.02403259 653.91583252]
[-106.85789490 641.33355713]
[-103.39938354 620.72967529]
[-90.06844330 608.51403809]
[-74.80342865 607.49548340]
[-70.19164276 593.22204590]
[-65.57985687 578.94854736]
[-60.96807480 564.67510986]
[-56.35629272 550.40167236]
[-51.74450684 536.12823486]
[-47.13272476 521.85473633]
[-42.52093887 507.58129883]
[-47.12296677 490.65399170]
[-33.37673569 478.41336060]
[-29.00033569 464.06597900]
[-24.62393570 449.71862793]
[-20.24753761 435.37124634]
[-27.45341492 422.38623047]
[-23.21950912 407.77359009]
[-9.55076027 400.30343628]
[-5.17436075 385.95608521]
[-0.79796177 371.60870361]
[3.57843733 357.26132202]
[7.95483637 342.91397095]
[12.09466743 328.49655151]
[15.99680901 314.01300049]
[19.89895058 299.52944946]
[23.80109215 285.04589844]
[27.70323372 270.56234741]
[23.54323578 256.26046753]
[34.60415649 244.94822693]
[38.50629807 230.46467590]
[37.20844650 223.17582703]
[42.59355927 215.77601624]
[46.73339081 201.35859680]
[50.87321854 186.94119263]
[55.01305008 172.52377319]
[58.67644882 157.97799683]
[61.85944748 143.31961060]
[65.04244995 128.66120911]
[68.22544861 114.00281525]
[65.28397369 99.29405212]
[56.70841599 86.98715210]
[48.13286209 74.68024445]
[39.45638657 62.44428635]
[30.67957497 50.28009415]
[21.90276337 38.11589813]
[13.12595367 25.95170593]
[-2.04694891 19.72956276]
[-3.97642851 3.44431949]
[9.32239819 -6.15116119]
[24.16883850 0.81412816]
[25.29014587 17.17489624]
[34.06695557 29.33908844]
[42.84376907 41.50328064]
[51.62057877 53.66747284]
[58.09496689 57.25830841]
[60.43976593 66.10469055]
[69.01531982 78.41159821]
[77.59087372 90.71849823]
[78.88819885 79.07854462]
[86.24053192 67.61217499]
[88.69664764 52.81462097]
[91.15275574 38.01707077]
[93.60886383 23.21951866]
[96.06497192 8.42196751]
[90.69174957 -6.45885992]
[100.40859222 -17.74744606]
[102.86470795 -32.54499817]
[105.19903564 -47.36224747]
[107.41143036 -62.19819260]
[109.62383270 -77.03414154]
[105.97978210 -93.59183502]
[120.88162231 -101.67710114]
[132.77615356 -89.59584808]
[124.45977783 -74.82174683]
[122.24738312 -59.98579788]
[120.03498077 -45.14985275]
[122.16160583 -38.05836105]
[117.66225433 -30.08888817]
[115.20614624 -15.29133701]
[120.75505066 -1.46892905]
[110.86252594 10.87807751]
[108.40641785 25.67562866]
[105.95030975 40.47317886]
[103.49419403 55.27073288]
[101.03808594 70.06828308]
[107.39553833 74.04732513]
[120.11045074 82.00540924]
[126.46790314 85.98445129]
[138.70385742 77.30797577]
[150.93981934 68.63150024]
[163.17578125 59.95502853]
[175.41174316 51.27855301]
[187.64770508 42.60207367]
[190.05218506 26.98176765]
[202.84686279 17.70427322]
[218.44087219 20.27376747]
[227.58258057 33.16581345]
[224.84835815 48.73178864]
[211.86038208 57.73667526]
[196.32418823 54.83803558]
[184.08822632 63.51451492]
[171.85226440 72.19098663]
[159.61630249 80.86746216]
[147.38034058 89.54393768]
[135.14437866 98.22041321]
[127.65929413 116.98075104]
[112.09273529 127.15108490]
[95.11038971 126.54212952]
[82.88384247 117.18581390]
[79.70084381 131.84420776]
[76.51783752 146.50260925]
[73.33483887 161.16099548]
[74.82090759 165.28199768]
[74.89979553 169.25920105]
[73.79161072 172.66514587]
[71.83335876 175.18876648]
[69.43046570 176.66360474]
[65.29063416 191.08100891]
[61.15080261 205.49842834]
[57.01097107 219.91584778]
[52.98984909 234.36680603]
[49.08770752 248.85037231]
[52.96860123 264.18820190]
[42.18678665 274.46447754]
[38.28464508 288.94802856]
[34.38250351 303.43157959]
[30.48036194 317.91513062]
[26.57821846 332.39868164]
[27.91448402 338.90179443]
[26.03648186 344.28829956]
[22.30220985 347.29034424]
[17.92581177 361.63772583]
[13.54941177 375.98510742]
[9.17301273 390.33248901]
[4.79661369 404.67984009]
[11.96896172 418.50717163]
[7.32628679 432.99511719]
[-5.90016365 439.74765015]
[-10.27656269 454.09500122]
[-14.65296173 468.44238281]
[-19.02936172 482.78976440]
[-13.66416073 494.53134155]
[-17.61692047 506.39862061]
[-28.24748611 512.19311523]
[-32.85927200 526.46655273]
[-37.47105408 540.73999023]
[-42.08283997 555.01342773]
[-46.69462204 569.28692627]
[-51.30640793 583.56036377]
[-55.91819000 597.83380127]
[-60.52997589 612.10723877]
[-45.48097610 627.96130371]
[-50.19776535 655.10906982]
[-48.71983719 670.03607178]
[-47.24190903 684.96307373]
[-45.76397705 699.89007568]
[-32.75159073 708.56256104]
[-28.40772438 723.58471680]
[-34.78341675 737.86352539]
[-48.86825943 744.65698242]
[-64.01182556 740.75744629]
[-73.06378174 728.00616455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 184]
[2 183]
[3 182]
[4 181]
[7 28]
[8 27]
[9 26]
[10 25]
[14 22]
[15 21]
[31 179]
[32 178]
[33 177]
[34 176]
[35 175]
[36 174]
[37 173]
[38 172]
[40 169]
[41 168]
[42 167]
[43 166]
[46 163]
[47 162]
[48 161]
[49 160]
[50 159]
[51 156]
[52 155]
[53 154]
[54 153]
[55 152]
[57 150]
[58 149]
[60 148]
[61 147]
[62 146]
[63 145]
[64 140]
[65 139]
[66 138]
[67 137]
[68 86]
[69 85]
[70 84]
[71 82]
[72 81]
[73 80]
[74 79]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[94 107]
[95 106]
[96 104]
[97 103]
[98 102]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
