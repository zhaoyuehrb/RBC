%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGGGCCGUGACCGCUAAGUCCUGGGAGCUGUUGGGCUCUGGGACCGCAGUUGCUGAAAUGGAGGCAGAGGUGUGGGAGGCAGAAGGCUACAACCUAGUUCUGGACUCGGACCUGUAUGAUGCGGAUGGCUAUGAUGUCCCAGACCCUGGGCUGCUCA\
) } def
/len { sequence length } bind def

/coor [
[-58.49008942 478.56201172]
[-78.52535248 485.50683594]
[-83.71710968 499.57971191]
[-88.90886688 513.65258789]
[-94.10062408 527.72546387]
[-86.18443298 541.21130371]
[-88.83976746 556.62176514]
[-100.81285858 566.68054199]
[-116.45038605 566.63818359]
[-128.36878967 556.51464844]
[-130.94053650 541.08996582]
[-122.95136261 527.64721680]
[-108.17349243 522.53369141]
[-102.98173523 508.46081543]
[-97.78997803 494.38793945]
[-92.59822083 480.31506348]
[-98.72657013 474.06466675]
[-102.48531342 466.11096191]
[-103.43298340 457.32113647]
[-101.43637085 448.66400146]
[-96.68835449 441.10317993]
[-89.68968964 435.48986816]
[-81.19629669 432.46704102]
[-72.13767242 432.39584351]
[-65.59153748 418.89962769]
[-59.04539871 405.40341187]
[-52.49925995 391.90716553]
[-46.08593369 378.34735107]
[-39.80603790 364.72518921]
[-33.52614212 351.10305786]
[-27.24624443 337.48089600]
[-33.36151123 326.10510254]
[-31.76836395 313.09201050]
[-22.82758331 303.23864746]
[-9.64960003 300.30743408]
[-3.10346174 286.81121826]
[3.44267678 273.31497192]
[3.53268933 265.88574219]
[10.25212288 259.61996460]
[17.06198120 246.25485229]
[23.87183762 232.88975525]
[30.68169594 219.52465820]
[37.49155426 206.15956116]
[44.30141068 192.79446411]
[51.11126709 179.42936707]
[57.92112732 166.06427002]
[53.08852768 152.02214050]
[59.80430222 138.37101746]
[74.56575012 133.39735413]
[81.37561035 120.03225708]
[67.62167358 90.15642548]
[93.62565613 60.17627716]
[83.22933960 49.36347580]
[72.83303070 38.55067062]
[62.43672180 27.73786545]
[52.04041290 16.92506218]
[36.68870163 19.18440819]
[22.95654297 11.95893860]
[16.12422752 -1.97300708]
[18.81892395 -17.25431061]
[30.00446320 -28.00899887]
[45.37977982 -30.10167694]
[59.03274918 -22.72766304]
[65.71352386 -8.72242069]
[62.85321426 6.52875185]
[73.24952698 17.34155655]
[83.64583588 28.15435982]
[94.04214478 38.96716309]
[104.43845367 49.77996826]
[119.29699707 47.72478104]
[126.36795044 34.49596405]
[133.43890381 21.26714516]
[140.50985718 8.03832531]
[140.19151306 -7.77967787]
[153.01480103 -15.35679150]
[160.08575439 -28.58561134]
[167.15670776 -41.81443024]
[174.22766113 -55.04324722]
[168.85322571 -67.42738342]
[171.56951904 -80.45230103]
[181.16088867 -89.39006805]
[193.95857239 -91.12924957]
[201.28788757 -104.21669006]
[208.61720276 -117.30413055]
[215.94653320 -130.39157104]
[222.88726807 -143.68916321]
[229.43341064 -157.18539429]
[235.97953796 -170.68161011]
[230.56542969 -185.52961731]
[237.31184387 -199.82162476]
[252.21624756 -205.07844543]
[266.43612671 -198.18130493]
[271.53509521 -183.22215271]
[264.48797607 -169.07598877]
[249.47576904 -164.13548279]
[242.92962646 -150.63925171]
[236.38348389 -137.14303589]
[237.22015381 -133.66734314]
[236.38206482 -129.61004639]
[233.61305237 -125.77804565]
[229.03396606 -123.06224823]
[221.70465088 -109.97480774]
[214.37533569 -96.88736725]
[207.04600525 -83.79992676]
[212.30586243 -67.85043335]
[204.26689148 -52.72220993]
[187.45646667 -47.97229767]
[180.38552856 -34.74347687]
[173.31457520 -21.51465988]
[166.24362183 -8.28584003]
[167.06771851 6.58594942]
[153.73866272 15.10927677]
[146.66772461 28.33809471]
[139.59677124 41.56691360]
[132.52581787 54.79573441]
[135.46382141 61.69631958]
[142.59022522 48.49728394]
[157.35284424 45.83929062]
[168.63540649 55.72380829]
[167.94212341 70.70777893]
[155.79502869 79.50823975]
[141.33985901 75.49748993]
[144.27786255 82.39807892]
[158.71469116 86.46968079]
[173.35842896 79.91679382]
[187.54521179 87.40778351]
[190.39213562 103.19621277]
[179.71530151 115.17054749]
[163.70504761 114.14510345]
[154.64308167 100.90650940]
[140.20625305 96.83490753]
[130.96040344 118.37892151]
[112.94029236 128.91503906]
[94.74070740 126.84210968]
[87.93084717 140.20721436]
[92.58363342 155.07292175]
[85.48708344 168.53002930]
[71.28622437 172.87413025]
[64.47636414 186.23922729]
[57.66650772 199.60432434]
[50.85665131 212.96942139]
[44.04679489 226.33451843]
[37.23693466 239.69961548]
[30.42707825 253.06471252]
[23.61722183 266.42980957]
[16.93890190 279.86111450]
[10.39276218 293.35736084]
[3.84662390 306.85357666]
[9.88477898 323.24542236]
[2.37097526 338.64123535]
[-13.62409782 343.76080322]
[-19.90399361 357.38293457]
[-26.18388939 371.00509644]
[-32.46378708 384.62722778]
[-33.22444916 393.78323364]
[-39.00303650 398.45330811]
[-45.54917526 411.94955444]
[-52.09531403 425.44577026]
[-58.64145279 438.94198608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[24 159]
[25 158]
[26 157]
[27 156]
[28 154]
[29 153]
[30 152]
[31 151]
[35 148]
[36 147]
[37 146]
[39 145]
[40 144]
[41 143]
[42 142]
[43 141]
[44 140]
[45 139]
[46 138]
[49 135]
[50 134]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[70 115]
[71 114]
[72 113]
[73 112]
[75 110]
[76 109]
[77 108]
[78 107]
[82 104]
[83 103]
[84 102]
[85 101]
[86 97]
[87 96]
[88 95]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
