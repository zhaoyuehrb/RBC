%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCCGUGCGGGAGCCAUGGCGGCCUCGGAGGCGGCGGCGGCGGCGGGGUCCGCGGCUCUGGCGGCGGGUGCCCGGGCCGUCCCGGCGGCCACGACAGGAGCCGCCGCCGCCGCCU\
) } def
/len { sequence length } bind def

/coor [
[-91.68217468 289.87057495]
[-101.78761292 300.95571899]
[-111.89304352 312.04086304]
[-115.47222900 327.45190430]
[-129.76446533 331.64486694]
[-139.86990356 342.73001099]
[-149.97534180 353.81515503]
[-160.08076477 364.90026855]
[-170.18620300 375.98541260]
[-180.14443970 387.20297241]
[-189.95373535 398.55099487]
[-192.50486755 414.75048828]
[-207.90470886 420.38757324]
[-220.31123352 409.66329956]
[-216.96166992 393.60986328]
[-201.30175781 388.74169922]
[-191.49246216 377.39367676]
[-189.47348022 370.18524170]
[-181.27134705 365.87997437]
[-171.16590881 354.79483032]
[-161.06047058 343.70971680]
[-150.95503235 332.62457275]
[-140.84960938 321.53942871]
[-137.99322510 306.92129517]
[-122.97817993 301.93542480]
[-112.87274170 290.85028076]
[-102.76731110 279.76516724]
[-104.64756775 270.86392212]
[-102.11179352 261.98233032]
[-95.62319183 255.21513367]
[-86.59245300 252.22090149]
[-77.07226562 253.81686401]
[-66.12148285 243.56597900]
[-55.17070389 233.31510925]
[-44.21992111 223.06423950]
[-33.26914215 212.81336975]
[-22.31836128 202.56248474]
[-11.36758041 192.31161499]
[-0.41680002 182.06074524]
[10.53398037 171.80987549]
[21.48476028 161.55899048]
[32.43554306 151.30812073]
[43.38632202 141.05725098]
[54.33710098 130.80638123]
[65.28787994 120.55550385]
[76.23866272 110.30462646]
[87.18944550 100.05375671]
[93.87551880 86.62630463]
[95.45657349 71.70986176]
[89.21696472 57.17102432]
[98.25266266 45.33018875]
[99.83371735 30.41374588]
[101.41477203 15.49730396]
[102.99582672 0.58086079]
[104.57687378 -14.33558178]
[106.15792847 -29.25202560]
[99.91831970 -43.79086304]
[108.95401764 -55.63169861]
[110.53507233 -70.54814148]
[103.38725281 -85.30757141]
[112.81802368 -98.72370148]
[129.12582397 -96.99517059]
[135.53457642 -81.90014648]
[125.45151520 -68.96708679]
[123.87046051 -54.05064392]
[130.22315979 -40.57873154]
[121.07437134 -27.67097092]
[119.49331665 -12.75452805]
[117.91226959 2.16191483]
[116.33121490 17.07835770]
[114.75016022 31.99480057]
[113.16910553 46.91124344]
[119.52180481 60.38315964]
[110.37301636 73.29091644]
[108.79196167 88.20735931]
[119.74274445 98.45823669]
[134.52243042 95.89685059]
[149.26702881 93.14060974]
[163.97396851 90.18998718]
[178.68089294 87.23935699]
[193.38781738 84.28873444]
[208.09475708 81.33811188]
[222.80168152 78.38748169]
[234.74922180 67.15412140]
[250.37118530 72.14275360]
[253.59703064 88.22149658]
[241.10829163 98.84992218]
[225.75230408 93.09441376]
[211.04537964 96.04504395]
[196.33845520 98.99566650]
[181.63151550 101.94628906]
[166.92459106 104.89691925]
[152.21765137 107.84754181]
[146.20307922 112.30428314]
[137.08381653 110.67654419]
[122.30412292 113.23793030]
[129.44744873 126.42781067]
[126.13659668 141.05786133]
[114.01028442 149.88693237]
[99.07042694 148.54508972]
[88.71149445 137.69647217]
[88.06063843 122.71060181]
[97.44031525 111.00453949]
[86.48954010 121.25540924]
[75.53875732 131.50628662]
[64.58797455 141.75715637]
[53.63719559 152.00802612]
[42.68641663 162.25889587]
[31.73563385 172.50978088]
[20.78485298 182.76065063]
[9.83407307 193.01152039]
[-1.11670709 203.26239014]
[-12.06748772 213.51327515]
[-23.01826859 223.76414490]
[-33.96904755 234.01501465]
[-44.91983032 244.26588440]
[-55.87060928 254.51676941]
[-66.82138824 264.76763916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 17]
[11 16]
[32 118]
[33 117]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[39 111]
[40 110]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[48 75]
[49 74]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[58 65]
[59 64]
[76 96]
[77 95]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
