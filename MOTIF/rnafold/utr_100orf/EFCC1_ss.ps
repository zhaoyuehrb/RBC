%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCGGUCAGCACGGGCGCGGAGGCCGGCAUGGAGGGCGCGGGAGGUGACCCGUACCGGCGACCUGCGCGGCGCACGCAGUGGCUGCUGAGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[129.21321106 151.28965759]
[117.21166992 160.28761292]
[102.22799683 160.98731995]
[89.44013977 153.14698792]
[83.26722717 139.47602844]
[85.84245300 124.69874573]
[96.27619171 113.92158508]
[85.42505646 124.27788544]
[74.57392883 134.63418579]
[75.75357056 150.22720337]
[66.59228516 162.90020752]
[51.41574478 166.66937256]
[37.38984680 159.75502014]
[31.13719559 145.42190552]
[35.61009979 130.43766785]
[48.69659042 121.87742615]
[64.21762848 123.78305054]
[75.06875610 113.42675018]
[85.91989136 103.07044983]
[90.06441498 88.65438843]
[86.37023163 74.11640167]
[82.67604828 59.57841492]
[78.98186493 45.04043198]
[75.06203461 30.56165695]
[70.91751099 16.14559174]
[57.37096786 8.45605373]
[53.37319183 -6.22292614]
[60.78747559 -19.09009361]
[56.64294815 -33.50615692]
[52.49842453 -47.92222214]
[48.35389709 -62.33828735]
[44.20936966 -76.75434875]
[32.62562943 -78.80431366]
[22.73419380 -85.07533264]
[15.99852943 -94.59284973]
[13.39737034 -105.90557861]
[15.28265476 -117.30673981]
[21.33246994 -127.09156799]
[30.60521889 -133.81219482]
[27.82200241 -148.55172729]
[25.03878593 -163.29125977]
[22.02667999 -177.98571777]
[18.78641319 -192.63156128]
[15.54614639 -207.27740479]
[2.84682727 -217.08081055]
[2.73762631 -233.12348938]
[15.30231285 -243.09887695]
[30.90233421 -239.35469055]
[37.57069016 -224.76316833]
[30.19198799 -210.51766968]
[33.43225479 -195.87182617]
[36.67252350 -181.22598267]
[41.27191162 -175.27021790]
[39.77831650 -166.07447815]
[42.56153107 -151.33494568]
[45.34474945 -136.59541321]
[62.55675507 -129.79644775]
[72.44841003 -113.98244476]
[71.00832367 -95.23824310]
[58.62543488 -80.89887238]
[62.76996231 -66.48281097]
[66.91448975 -52.06674957]
[71.05901337 -37.65068436]
[75.20353699 -23.23461914]
[88.31941223 -16.26973915]
[92.72791290 -1.70884049]
[85.33357239 12.00106621]
[89.47809601 26.41712952]
[94.43885803 32.07543182]
[93.51985168 41.34624863]
[97.21403503 55.88423157]
[100.90821838 70.42221832]
[104.60240173 84.96020508]
[128.05184937 101.10325623]
[139.82075500 110.40340424]
[151.58967590 119.70354462]
[163.35858154 129.00369263]
[175.12750244 138.30383301]
[192.37062073 135.91264343]
[205.79957581 146.45503235]
[207.50163269 163.10563660]
[219.55407715 172.03526306]
[231.60653687 180.96488953]
[243.65899658 189.89453125]
[259.98513794 194.46548462]
[260.11233521 211.41896057]
[243.85661316 216.23437500]
[234.72935486 201.94697571]
[222.67691040 193.01734924]
[210.62445068 184.08772278]
[198.57199097 175.15808105]
[186.11260986 178.82493591]
[173.64849854 174.52973938]
[165.86535645 163.64749146]
[165.82736206 150.07273865]
[154.05844116 140.77259827]
[142.28953552 131.47245789]
[130.52061462 122.17231750]
[118.75170135 112.87216949]
[130.14407349 122.62994385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 19]
[8 18]
[9 17]
[20 73]
[21 72]
[22 71]
[23 70]
[24 68]
[25 67]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[39 56]
[40 55]
[41 54]
[42 52]
[43 51]
[44 50]
[74 99]
[75 98]
[76 97]
[77 96]
[78 95]
[81 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
