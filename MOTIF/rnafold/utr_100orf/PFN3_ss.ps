%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGUGGCGCCUCUAUAUUUCCCCGAGAGGUGCGAGGCGGCUGGGCGCACUCGGAGCGCGAUGGGCGACUGGAAGGUCUACAUCAGUGCAGUGCUGCGGGACCAGCGCAUCGACGACGUGGCCAUCGUGGGCCAUGCGGACAACAGCUGCGUGUGGGCUU\
) } def
/len { sequence length } bind def

/coor [
[-68.53499603 291.10897827]
[-79.08972931 301.76718140]
[-89.64446259 312.42541504]
[-87.29026794 327.64920044]
[-94.27014923 341.18191528]
[-107.72109985 347.92993164]
[-122.39073181 345.49273682]
[-132.94546509 356.15093994]
[-143.50019836 366.80917358]
[-154.05493164 377.46737671]
[-164.60966492 388.12561035]
[-175.16439819 398.78381348]
[-185.71913147 409.44201660]
[-196.27386475 420.10025024]
[-191.58843994 434.67095947]
[-194.22247314 449.74810791]
[-203.57067871 461.86706543]
[-217.48490906 468.24304199]
[-232.76777649 467.41082764]
[-245.90737915 459.56167603]
[-253.88435364 446.49926758]
[-254.86564636 431.22525024]
[-248.62573242 417.24948120]
[-236.59854126 407.78347778]
[-221.54780579 405.00247192]
[-206.93208313 409.54550171]
[-196.37734985 398.88729858]
[-185.82261658 388.22906494]
[-175.26788330 377.57086182]
[-164.71315002 366.91265869]
[-154.15841675 356.25442505]
[-143.60368347 345.59622192]
[-133.04895020 334.93798828]
[-135.62916565 320.29284668]
[-129.01271057 306.77670288]
[-115.54872131 299.66510010]
[-100.30268097 301.87066650]
[-89.74794769 291.21246338]
[-79.19321442 280.55422974]
[-81.72554779 269.36941528]
[-78.48860168 258.24255371]
[-70.18106842 249.99215698]
[-58.80089951 246.76646423]
[-47.16559982 249.48510742]
[-36.20306015 239.24681091]
[-25.24052238 229.00851440]
[-21.22009277 214.66677856]
[-5.85331154 210.90211487]
[5.10922766 200.66381836]
[16.07176781 190.42552185]
[20.09219742 176.08378601]
[35.45897675 172.31913757]
[46.42151642 162.08084106]
[50.44194794 147.73910522]
[65.80873108 143.97445679]
[76.77126312 133.73616028]
[87.73380280 123.49785614]
[77.30824280 96.83123016]
[96.09397888 81.08191681]
[99.00238800 66.36658478]
[101.91079712 51.65124512]
[104.81920624 36.93590546]
[107.72762299 22.22056961]
[102.81292725 7.18207455]
[112.87113190 -3.80344892]
[115.77954102 -18.51878548]
[110.81822205 -22.67420578]
[107.25956726 -28.03099442]
[105.37593842 -34.13767624]
[105.29971313 -40.48727036]
[107.01418304 -46.55939484]
[110.35681152 -51.86289215]
[115.03438568 -55.97556305]
[120.64857483 -58.57775116]
[126.72983551 -59.47711182]
[131.61489868 -73.65936279]
[136.49995422 -87.84160614]
[141.38500977 -102.02385712]
[146.27008057 -116.20610809]
[139.04777527 -125.72501373]
[137.35824585 -137.43222046]
[141.50926208 -148.37997437]
[150.35269165 -155.86851501]
[161.59907532 -158.11172485]
[167.03375244 -172.09257507]
[172.46842957 -186.07342529]
[177.90310669 -200.05429077]
[172.78186035 -215.25798035]
[181.59629822 -228.66265869]
[197.58473206 -229.98539734]
[208.48220825 -218.21150208]
[205.92910767 -202.37289429]
[191.88395691 -194.61961365]
[186.44929504 -180.63874817]
[181.01461792 -166.65789795]
[175.57994080 -152.67704773]
[183.96374512 -136.44477844]
[177.76249695 -118.92219543]
[160.45233154 -111.32104492]
[155.56726074 -97.13880157]
[150.68220520 -82.95655060]
[145.79714966 -68.77429962]
[140.91207886 -54.59205246]
[148.51795959 -32.10691071]
[130.49488831 -15.61037540]
[127.58647156 -0.89503807]
[132.70919800 13.09091854]
[122.44295502 25.12898064]
[119.53454590 39.84431839]
[116.62613678 54.55965424]
[113.71772766 69.27499390]
[110.80931091 83.99032593]
[122.37559509 95.07154083]
[122.68958282 113.70370483]
[137.37583923 116.75554657]
[146.46665955 115.43539429]
[152.31761169 120.01287079]
[166.94152832 123.35068512]
[181.56544495 126.68849945]
[196.18936157 130.02630615]
[210.81327820 133.36412048]
[225.43719482 136.70193481]
[240.06111145 140.03974915]
[253.30796814 131.42021179]
[268.75231934 134.77389526]
[277.23135376 148.11112976]
[273.71456909 163.51916504]
[260.28842163 171.85670471]
[244.91841125 168.17720032]
[236.72329712 154.66366577]
[222.09938049 151.32585144]
[207.47546387 147.98803711]
[192.85154724 144.65022278]
[178.22763062 141.31240845]
[163.60371399 137.97459412]
[148.97979736 134.63677979]
[134.32400513 131.44180298]
[119.63774109 128.38996887]
[132.32453918 136.39279175]
[137.45796204 150.48704529]
[132.88977051 164.77450562]
[120.53166199 173.27610779]
[105.55531311 172.43406677]
[94.22808075 162.60075378]
[91.29022980 147.89126587]
[97.97210693 134.46038818]
[87.00956726 144.69868469]
[76.04702759 154.93699646]
[71.24247742 170.01103210]
[56.65981293 173.04338074]
[45.69727325 183.28167725]
[40.89273071 198.35572815]
[26.31006432 201.38806152]
[15.34752464 211.62635803]
[4.38498545 221.86465454]
[-0.41955808 236.93870544]
[-15.00222492 239.97105408]
[-25.96476364 250.20935059]
[-36.92730331 260.44763184]
[-36.81831741 279.35287476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[44 159]
[45 158]
[46 157]
[48 155]
[49 154]
[50 153]
[52 151]
[53 150]
[55 148]
[56 147]
[57 146]
[59 112]
[60 111]
[61 110]
[62 109]
[63 108]
[65 106]
[66 105]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[84 96]
[85 95]
[86 94]
[87 93]
[114 138]
[115 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
