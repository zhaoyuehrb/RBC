%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGUGGUGACCACCCCUUCCAGCAGGCAGGUUCCCAGCCCCAGCCAAGCAGUGUUUCUCCAGGAGCCGGACAGCCUCUCUGUCUCCAUGGCAGCCUUCCUAUCUGCUGGCCUCGGCAUACUUGCACCCUCAGAGACCUACCCCCUACCUACAACCAGCUCUGGCUGGGAGCCCCGGCUGGGGUCAC\
) } def
/len { sequence length } bind def

/coor [
[77.38656616 499.06243896]
[70.97193909 513.19158936]
[57.46092224 520.82257080]
[42.04876709 519.02111816]
[30.66176605 508.47998047]
[27.67845345 493.25241089]
[34.24597168 479.19369507]
[47.83897781 471.70971680]
[49.58037186 456.81115723]
[51.32176590 441.91256714]
[53.06315994 427.01400757]
[54.80455399 412.11541748]
[56.54594421 397.21685791]
[44.74630737 406.47796631]
[29.75039291 406.12799072]
[18.39564705 396.32647705]
[15.85931492 381.54248047]
[23.29784775 368.51678467]
[37.31961441 363.18856812]
[51.53133774 367.98721313]
[59.45357132 380.72689819]
[62.91280746 366.13122559]
[66.37204742 351.53555298]
[69.83128357 336.93988037]
[73.29051971 322.34420776]
[68.69689178 308.17562866]
[79.40817261 296.53179932]
[82.86740875 281.93612671]
[81.15655518 277.45877075]
[82.25359344 271.85830688]
[86.69181824 266.91674805]
[90.63427734 252.44412231]
[94.57673645 237.97148132]
[98.51919556 223.49885559]
[102.46166229 209.02622986]
[106.40412140 194.55360413]
[110.34658051 180.08096313]
[114.28904724 165.60833740]
[118.23150635 151.13571167]
[122.17396545 136.66308594]
[98.53807068 140.25729370]
[78.18927002 130.77565002]
[67.27297974 112.84488678]
[68.09637451 93.32559204]
[78.78763580 78.74195099]
[71.17993164 65.81434631]
[63.57222748 52.88674927]
[55.96452332 39.95914841]
[48.90134430 34.13645554]
[48.33985901 26.75284195]
[40.94808197 13.70057678]
[33.55630112 0.64831173]
[26.16452408 -12.40395355]
[7.63265896 -10.49807453]
[-9.82486439 -16.85470581]
[-22.72175217 -30.15721703]
[-28.50310707 -47.70663834]
[-26.05148697 -65.96919250]
[-15.90257263 -81.28783417]
[-24.14520836 -93.82015228]
[-32.49171448 -106.28353119]
[-40.94151306 -118.67710876]
[-49.39131546 -131.07069397]
[-57.94382858 -143.39361572]
[-66.59845734 -155.64505005]
[-75.25308990 -167.89646912]
[-83.90772247 -180.14788818]
[-98.18961334 -186.95510864]
[-99.21340942 -201.81448364]
[-107.86804199 -214.06590271]
[-116.52267456 -226.31732178]
[-125.17730713 -238.56874084]
[-140.77488708 -239.68650818]
[-151.96881104 -250.60577393]
[-153.47364807 -266.17077637]
[-144.57884216 -279.03222656]
[-129.48428345 -283.11730957]
[-115.31713104 -276.49719238]
[-108.76669312 -262.29769897]
[-112.92588806 -247.22337341]
[-104.27125549 -234.97195435]
[-95.61662292 -222.72053528]
[-86.96199036 -210.46911621]
[-73.29913330 -204.53819275]
[-71.65630341 -188.80252075]
[-63.00167084 -176.55110168]
[-54.34703827 -164.29968262]
[-45.69240570 -152.04824829]
[-39.25300980 -148.39213562]
[-36.99773407 -139.52049255]
[-28.54793358 -127.12691498]
[-20.09813309 -114.73332977]
[-13.72039795 -110.97068787]
[-11.61289024 -102.06278229]
[-3.37025595 -89.53046417]
[7.85472775 -92.53277588]
[19.49050522 -92.26560974]
[30.60262871 -88.73958588]
[40.29566574 -82.22750854]
[47.78535461 -73.24320984]
[52.46206284 -62.50109863]
[53.94039536 -50.85930252]
[52.09091949 -39.25114059]
[47.05144119 -28.61029816]
[39.21678925 -19.79573059]
[46.60856628 -6.74346638]
[54.00034714 6.30879879]
[61.39212418 19.36106300]
[68.89212036 32.35144424]
[76.49982452 45.27904510]
[84.10752869 58.20664597]
[91.71523285 71.13424683]
[99.29186249 67.41338348]
[108.22180176 65.81739044]
[117.87905121 66.78572845]
[127.50559998 70.56822968]
[136.26942444 77.18782043]
[147.99688721 67.83547211]
[159.72436523 58.48312378]
[165.20869446 43.02822113]
[181.38214111 40.31682968]
[191.60684204 53.13819885]
[185.36450195 68.30280304]
[169.07670593 70.21059418]
[157.34924316 79.56294250]
[145.62176514 88.91529083]
[147.35137939 96.21312714]
[160.16383362 88.41304779]
[171.54129028 98.18818665]
[165.76023865 112.02941132]
[150.81062317 110.80879974]
[152.54023743 118.10663605]
[167.21762085 121.20092010]
[181.89500427 124.29520416]
[196.57237244 127.38948822]
[211.24975586 130.48376465]
[217.92454529 116.95979309]
[227.75355530 105.52119446]
[240.11888123 96.88700104]
[254.24327087 91.59997559]
[269.23883057 89.99246216]
[284.16293335 92.16551208]
[298.07742310 97.98252106]
[310.10763550 107.07782745]
[319.49734497 118.87969971]
[325.65631104 132.64625549]
[328.19735718 147.51211548]
[326.96075439 162.54280090]
[322.02426147 176.79348755]
[313.69818115 189.36833191]
[302.50585938 199.47689819]
[289.15090942 206.48373413]
[274.47277832 209.94839478]
[259.39419556 209.65309143]
[244.86300659 205.61637878]
[231.79263306 198.09201050]
[221.00469971 187.55297852]
[213.17733765 174.66175842]
[208.80259705 160.22872925]
[208.15547180 145.16114807]
[193.47808838 142.06686401]
[178.80072021 138.97257996]
[164.12333679 135.87829590]
[149.44595337 132.78401184]
[136.64659119 140.60554504]
[132.70413208 155.07817078]
[128.76167297 169.55079651]
[124.81921387 184.02343750]
[120.87675476 198.49606323]
[116.93428802 212.96868896]
[112.99182892 227.44131470]
[109.04936981 241.91394043]
[105.10690308 256.38656616]
[101.16444397 270.85919189]
[97.46308136 285.39535522]
[94.00384521 299.99102783]
[98.35004425 315.20358276]
[87.88619995 325.80343628]
[84.42695618 340.39910889]
[80.96772003 354.99478149]
[77.50848389 369.59045410]
[74.04924774 384.18612671]
[71.44451904 398.95825195]
[69.70312500 413.85681152]
[67.96173096 428.75540161]
[66.22033691 443.65396118]
[64.47894287 458.55255127]
[62.73755264 473.45111084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 188]
[9 187]
[10 186]
[11 185]
[12 184]
[13 183]
[21 182]
[22 181]
[23 180]
[24 179]
[25 178]
[27 176]
[28 175]
[31 174]
[32 173]
[33 172]
[34 171]
[35 170]
[36 169]
[37 168]
[38 167]
[39 166]
[40 165]
[45 112]
[46 111]
[47 110]
[48 109]
[50 108]
[51 107]
[52 106]
[53 105]
[59 95]
[60 94]
[61 92]
[62 91]
[63 90]
[64 88]
[65 87]
[66 86]
[67 85]
[69 83]
[70 82]
[71 81]
[72 80]
[117 126]
[118 125]
[119 124]
[132 164]
[133 163]
[134 162]
[135 161]
[136 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
