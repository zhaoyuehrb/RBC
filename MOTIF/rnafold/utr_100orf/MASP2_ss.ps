%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCAGGCCAGGCCAGCUGGACGGGCACACCAUGAGGCUGCUGACCCUCCUGGGCCUUCUGUGUGGCUCGGUGGCCACCCCCUUGGGCCCGAAGUGGCCUGAACCUGUGUUCGGGCGCCUGGCAUCCCCCG\
) } def
/len { sequence length } bind def

/coor [
[89.24909973 305.00976562]
[77.41410828 295.53826904]
[69.53494263 282.58859253]
[66.56304932 267.72442627]
[68.85729218 252.74067688]
[76.14064026 239.44674683]
[87.53358459 229.44792175]
[101.66037750 223.95159912]
[101.30609894 208.95579529]
[100.95182037 193.95997620]
[100.59753418 178.96415710]
[100.24325562 163.96833801]
[99.88896942 148.97253418]
[99.53469086 133.97671509]
[88.71408081 131.78376770]
[79.24589539 126.26634216]
[72.11107635 118.05718231]
[68.02899933 108.06451416]
[67.38516998 97.37168121]
[70.19537354 87.11975861]
[55.28003311 85.52834320]
[40.36469269 83.93692780]
[31.40213966 86.15194702]
[25.11734772 82.12772369]
[10.24375534 80.18446350]
[-4.62983751 78.24121094]
[-19.52534294 76.47374725]
[-34.44068527 74.88233185]
[-49.37377930 73.46717834]
[-64.32254791 72.22849274]
[-79.28490448 71.16643524]
[-94.25875092 70.28116608]
[-108.66960144 78.10800934]
[-122.51002502 69.31170654]
[-121.54217529 52.94114685]
[-106.76169586 45.83695221]
[-93.37348175 55.30730820]
[-78.39962769 56.19258118]
[-71.47077942 53.42055893]
[-63.08385849 57.27972412]
[-48.13508987 58.51841354]
[-41.14270401 55.91081619]
[-32.84926605 59.96699142]
[-17.93392563 61.55841064]
[-10.88190269 59.11668777]
[-2.68658233 63.36761856]
[12.18701077 65.31087494]
[27.06060219 67.25412750]
[41.95610809 69.02158356]
[56.87144852 70.61300659]
[71.78678894 72.20442200]
[84.14701080 63.70589447]
[88.00077057 49.20939255]
[91.85453033 34.71289062]
[95.70828247 20.21638870]
[99.56204224 5.71988773]
[103.41580200 -8.77661324]
[107.26956177 -23.27311516]
[94.85767365 -33.72380447]
[88.24828339 -48.47878265]
[88.71035004 -64.58183289]
[96.10153961 -78.83058929]
[108.90656281 -88.41337585]
[124.54755402 -91.46400452]
[128.05784607 -106.04748535]
[131.56814575 -120.63095856]
[135.07843018 -135.21444702]
[138.58872986 -149.79791260]
[142.09901428 -164.38139343]
[136.93432617 -179.94604492]
[148.03208923 -192.01963806]
[163.97586060 -188.18191528]
[168.36407471 -172.38079834]
[156.68249512 -160.87110901]
[153.17221069 -146.28762817]
[149.66191101 -131.70414734]
[146.15161133 -117.12066650]
[142.64132690 -102.53719330]
[139.13102722 -87.95371246]
[150.32839966 -79.67943573]
[157.53395081 -67.71549225]
[159.62438965 -53.86264801]
[156.24920654 -40.22085953]
[147.88903809 -28.87094688]
[135.78744507 -21.55720139]
[121.76605988 -19.41935730]
[117.91230011 -4.92285538]
[114.05854034 9.57364559]
[110.20478821 24.07014656]
[106.35102844 38.56664658]
[102.49726868 53.06314850]
[98.64350891 67.55965424]
[109.09833527 68.56983185]
[118.76274109 72.88652039]
[126.61155701 80.10831451]
[131.79438782 89.52285004]
[133.72756958 100.17687225]
[132.15950012 110.97269440]
[146.16531372 116.34270477]
[160.17114258 121.71270752]
[174.17695618 127.08271790]
[188.18278503 132.45271301]
[202.18861389 137.82272339]
[216.19442749 143.19273376]
[230.20025635 148.56274414]
[246.30281067 145.45797729]
[256.83694458 158.02635193]
[250.96604919 173.33857727]
[234.72958374 175.64277649]
[224.83024597 162.56855774]
[210.82441711 157.19854736]
[196.81860352 151.82855225]
[182.81277466 146.45854187]
[168.80696106 141.08853149]
[154.80113220 135.71853638]
[140.79531860 130.34852600]
[126.78948975 124.97851562]
[114.53050232 133.62243652]
[114.88478851 148.61824036]
[115.23906708 163.61405945]
[115.59335327 178.60987854]
[115.94763184 193.60569763]
[116.30191803 208.60150146]
[116.65619659 223.59732056]
[131.02679443 228.42037964]
[142.87921143 237.87002563]
[150.78224182 250.80517578]
[153.78152466 265.66384888]
[151.51489258 280.65176392]
[144.25605774 293.95910645]
[132.88154602 303.97891235]
[118.76490784 309.50125122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 124]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[20 51]
[21 50]
[22 49]
[24 48]
[25 47]
[26 46]
[27 44]
[28 43]
[29 41]
[30 40]
[31 38]
[32 37]
[52 92]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
