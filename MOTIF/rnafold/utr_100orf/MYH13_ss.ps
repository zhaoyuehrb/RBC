%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUGCUGUGACCGCAGCAUCUCUAGGAAGACGCUUUAUUCCUGAAGGACACUGACUGUCACUUGGGAACCAAGAAGCCCUCUGCAGUCAUGAGCUCUGACGCAGAAAUGGCCAUUUUUGGAGAAGCAGCUCCCUACCUCCGGAAACCAGAGAAGGAGAGAAUCGAGGCUCAAAAUCGUCCAUUCGAUU\
) } def
/len { sequence length } bind def

/coor [
[144.17973328 207.40020752]
[132.41714478 216.70835876]
[119.92974091 208.39784241]
[123.97463989 193.95359802]
[116.48097992 194.26190186]
[110.48529053 208.01152039]
[104.48960114 221.76112366]
[98.49391937 235.51072693]
[92.49822998 249.26034546]
[86.50254059 263.00994873]
[88.87852478 279.23605347]
[75.84822845 289.19314575]
[60.81610107 282.63818359]
[59.24591064 266.31439209]
[72.75292969 257.01425171]
[78.74861908 243.26464844]
[84.74430847 229.51504517]
[90.73999786 215.76544189]
[96.73568726 202.01582336]
[102.73137665 188.26622009]
[104.57709503 173.38020325]
[102.12098694 158.58265686]
[99.66487885 143.78511047]
[97.20877075 128.98754883]
[94.75266266 114.19000244]
[90.02364349 99.95496368]
[83.13696289 86.62928772]
[76.25027466 73.30361176]
[63.04079819 64.59613037]
[64.07119751 49.73720932]
[57.18451309 36.41153717]
[42.39467621 31.52293587]
[35.60042572 17.91070557]
[40.35210800 3.84098077]
[33.46542358 -9.48469257]
[26.57873726 -22.81036568]
[19.69205284 -36.13603973]
[12.80536652 -49.46171188]
[-6.37433290 -53.32603455]
[-16.08867836 -73.49341583]
[-30.66408730 -77.03706360]
[-45.23949814 -80.58071136]
[-59.81490707 -84.12435913]
[-74.39031219 -87.66800690]
[-88.96572113 -91.21166229]
[-103.54113007 -94.75531006]
[-116.93288422 -86.79926300]
[-131.66394043 -90.60066223]
[-139.16629028 -103.41667938]
[-153.74169922 -106.96032715]
[-168.31710815 -110.50398254]
[-182.89251709 -114.04763031]
[-197.28814697 -106.96628571]
[-211.73806763 -113.93615723]
[-215.15756226 -129.61054993]
[-204.92344666 -141.96542358]
[-188.88650513 -141.52316284]
[-179.34886169 -128.62303162]
[-164.77345276 -125.07939148]
[-150.19804382 -121.53574371]
[-135.62263489 -117.99208832]
[-123.07372284 -125.93314362]
[-108.24170685 -122.54701233]
[-99.99748230 -109.33071899]
[-85.42207336 -105.78707123]
[-70.84666443 -102.24341583]
[-56.27125549 -98.69976807]
[-41.69584656 -95.15612030]
[-27.12043762 -91.61247253]
[-12.54502869 -88.06882477]
[-0.60105926 -97.14305115]
[-0.10770439 -112.13493347]
[0.38565049 -127.12681580]
[0.87900537 -142.11869812]
[1.37236023 -157.11058044]
[1.86571515 -172.10247803]
[2.35907006 -187.09436035]
[2.60578084 -202.09233093]
[2.60578084 -217.09233093]
[2.60578084 -232.09233093]
[-8.25952435 -249.05873108]
[2.08574486 -265.38299561]
[1.59238994 -280.37487793]
[1.09903514 -295.36676025]
[0.60568023 -310.35864258]
[0.11232535 -325.35055542]
[-3.30248785 -333.84146118]
[-0.26380649 -340.59262085]
[-0.51051730 -355.59057617]
[-0.75722814 -370.58856201]
[-1.00393891 -385.58651733]
[-13.25991821 -395.29864502]
[-16.35506630 -410.62686157]
[-8.82794762 -424.33364868]
[5.76736116 -429.94711304]
[20.53940201 -424.81674194]
[28.51326942 -411.36492920]
[25.92394638 -395.94320679]
[13.99403191 -385.83325195]
[14.24074268 -370.83526611]
[14.48745346 -355.83731079]
[14.73416424 -340.83932495]
[15.10420990 -325.84390259]
[15.59756470 -310.85202026]
[16.09091949 -295.86013794]
[16.58427429 -280.86825562]
[17.07762909 -265.87634277]
[25.14934731 -259.57669067]
[28.48236275 -249.66313171]
[25.74349022 -239.34170532]
[17.60578156 -232.09233093]
[17.60578156 -217.09233093]
[17.60578156 -202.09233093]
[20.30169868 -198.13136292]
[20.52643013 -192.43130493]
[17.35095406 -186.60099792]
[16.85759926 -171.60911560]
[16.36424446 -156.61723328]
[15.87088966 -141.62535095]
[15.37753487 -126.63346100]
[14.88418007 -111.64157867]
[14.39082527 -96.64969635]
[32.97576141 -78.18049622]
[26.13104057 -56.34839630]
[33.01772690 -43.02272415]
[39.90441132 -29.69705009]
[46.79109573 -16.37137794]
[53.67778015 -3.04570413]
[67.90341187 1.21657920]
[75.07731628 14.63260365]
[70.51018524 29.52485275]
[77.39687347 42.85052490]
[90.11376953 50.60486603]
[89.57595062 66.41693115]
[96.46263885 79.74259949]
[103.34931946 93.06827545]
[110.43028259 84.68502045]
[119.92022705 78.43115234]
[131.31912231 74.81166840]
[146.25778198 76.16678619]
[161.19645691 77.52191162]
[175.63919067 71.06297302]
[187.61541748 79.91843414]
[202.55407715 81.27355194]
[218.87467957 76.68286896]
[227.80395508 91.09482574]
[216.42709351 103.66476440]
[201.19895935 96.21221924]
[186.26029968 94.85710144]
[172.88607788 101.41295624]
[159.84132385 92.46057129]
[144.90266418 91.10545349]
[129.96400452 89.75032806]
[124.86055756 95.24622345]
[114.65365601 106.23800659]
[109.55020905 111.73389435]
[112.00631714 126.53144836]
[114.46243286 141.32899475]
[116.91854095 156.12654114]
[119.37464905 170.92410278]
[139.16772461 168.20295715]
[159.66622925 185.92372131]
[166.77114868 199.13432312]
[173.87608337 212.34492493]
[180.98100281 225.55552673]
[188.08592224 238.76612854]
[195.19085693 251.97673035]
[202.61952209 265.00802612]
[210.36740112 277.85211182]
[218.11528015 290.69619751]
[233.58656311 291.88754272]
[245.38098145 301.97073364]
[248.96336365 317.06863403]
[242.95619202 331.37576294]
[229.66935730 339.39071655]
[214.21191406 338.03161621]
[202.52757263 327.82104492]
[199.10919189 312.68518066]
[205.27120972 298.44406128]
[197.52333069 285.60000610]
[189.77543640 272.75592041]
[186.44145203 271.55993652]
[183.52592468 268.68011475]
[181.81831360 264.33303833]
[181.98025513 259.08166504]
[174.87532043 245.87106323]
[167.77040100 232.66046143]
[160.66546631 219.44984436]
[153.56054688 206.23924255]
[146.45562744 193.02864075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[21 160]
[22 159]
[23 158]
[24 157]
[25 156]
[26 136]
[27 135]
[28 134]
[30 132]
[31 131]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[49 61]
[50 60]
[51 59]
[52 58]
[71 122]
[72 121]
[73 120]
[74 119]
[75 118]
[76 117]
[77 116]
[78 113]
[79 112]
[80 111]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[88 102]
[89 101]
[90 100]
[91 99]
[139 153]
[140 152]
[141 151]
[143 149]
[144 148]
[162 190]
[163 189]
[164 188]
[165 187]
[166 186]
[167 185]
[168 181]
[169 180]
[170 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
