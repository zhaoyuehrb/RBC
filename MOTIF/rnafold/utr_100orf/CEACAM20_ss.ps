%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGUGCCGGGACCCAUGGGGCCUGCUGACUCAUGGGGACACCACUGGAUGGGAAUCCUGCUUUCAGCCUCGCUUUGUACCGUAUGGAGUCCUCCAGCUGCAGCCCAGCUCACCC\
) } def
/len { sequence length } bind def

/coor [
[96.09596252 285.88580322]
[82.07098389 278.09609985]
[79.55899811 262.25091553]
[90.48698425 250.50534058]
[91.29212952 235.52696228]
[92.09728241 220.54858398]
[92.50000000 205.55398560]
[92.50000000 190.55398560]
[84.76270294 177.82672119]
[92.50000000 164.02655029]
[92.50000000 149.02655029]
[92.50000000 134.02655029]
[77.60315704 126.69152069]
[67.79275513 113.29470825]
[53.02063751 115.89942932]
[38.24851990 118.50415039]
[23.47640419 121.10887146]
[8.70428848 123.71360016]
[-6.06782770 126.31832123]
[-20.83994484 128.92303467]
[-35.61206055 131.52777100]
[-41.47737122 145.79667664]
[-54.13900757 154.61067200]
[-69.55668640 155.15724182]
[-82.81068420 147.26197815]
[-89.67169189 133.44424438]
[-87.95039368 118.11319733]
[-78.19605255 106.16094971]
[-63.52123642 101.40140533]
[-48.60862350 105.35331726]
[-38.21678162 116.75564575]
[-23.44466591 114.15092468]
[-8.67255020 111.54620361]
[6.09956598 108.94148254]
[20.87168121 106.33676147]
[35.64379883 103.73203278]
[50.41591644 101.12731171]
[65.18803406 98.52259064]
[67.72422028 86.87255096]
[74.03962708 76.75962830]
[83.39476776 69.36795044]
[94.69424438 65.56302643]
[106.61498260 65.79038239]
[117.76116180 70.02339172]
[128.00585938 59.06682968]
[138.10252380 47.97371674]
[148.04936218 36.74605560]
[157.99621582 25.51839447]
[167.94305420 14.29073334]
[177.88989258 3.06307220]
[181.30024719 -5.55515385]
[188.25765991 -8.32789326]
[198.50236511 -19.28445435]
[208.74705505 -30.24101639]
[209.11503601 -43.21926498]
[217.98312378 -52.14314270]
[230.15415955 -52.56364822]
[240.68931580 -63.24121094]
[251.22448730 -73.91876984]
[261.61535645 -84.73680878]
[271.86004639 -95.69336700]
[282.10473633 -106.64993286]
[276.10754395 -123.95016479]
[279.58471680 -141.84194946]
[291.51495361 -155.51055908]
[308.61392212 -161.32077026]
[326.23785400 -157.78332520]
[335.56768799 -169.52870178]
[344.89752197 -181.27409363]
[350.01486206 -197.43730164]
[366.96301270 -196.99438477]
[371.22912598 -180.58595276]
[356.64291382 -171.94425964]
[347.31307983 -160.19886780]
[337.98324585 -148.45347595]
[343.88278198 -138.01504517]
[345.86688232 -126.15470886]
[343.67321777 -114.29581451]
[337.54238892 -103.86981201]
[328.19152832 -96.14346313]
[316.73074341 -92.06495667]
[304.53125000 -92.14757538]
[293.06130981 -96.40523529]
[282.81661987 -85.44867706]
[272.57189941 -74.49211121]
[270.27209473 -67.36436462]
[261.90203857 -63.38360977]
[251.36688232 -52.70604706]
[240.83172607 -42.02848434]
[237.39642334 -24.87611008]
[219.70361328 -19.99632072]
[209.45892334 -9.03976059]
[199.21423340 1.91680110]
[189.11755371 13.00991249]
[179.17071533 24.23757362]
[169.22387695 35.46523285]
[159.27702332 46.69289398]
[149.33018494 57.92055511]
[147.22257996 65.10747528]
[138.96241760 69.31152344]
[128.71771240 80.26808167]
[134.62089539 96.06938171]
[132.41024780 112.79187012]
[122.60386658 126.51643372]
[107.50000000 134.02655029]
[107.50000000 149.02655029]
[107.50000000 164.02655029]
[115.23729706 177.82672119]
[107.50000000 190.55398560]
[107.50000000 205.55398560]
[110.56579590 211.65072632]
[110.06682587 217.47819519]
[107.07565308 221.35372925]
[106.27050781 236.33210754]
[105.46535492 251.31048584]
[115.07126617 264.15985107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 115]
[5 114]
[6 113]
[7 110]
[8 109]
[10 107]
[11 106]
[12 105]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[44 101]
[45 100]
[46 98]
[47 97]
[48 96]
[49 95]
[50 94]
[52 93]
[53 92]
[54 91]
[57 89]
[58 88]
[59 87]
[60 85]
[61 84]
[62 83]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
