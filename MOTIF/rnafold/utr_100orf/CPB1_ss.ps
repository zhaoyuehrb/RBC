%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUAGACCUGGUCAGACACAAUGUUGGCACUCUUGGUUCUGGUGACUGUGGCCCUGGCAUCUGCUCAUCAUGGUGGUGAGCACUUUGAAGGCGAGAAGGUGUUCCGUGUUAACGUUGAAG\
) } def
/len { sequence length } bind def

/coor [
[32.80252457 336.74801636]
[28.41461182 346.77581787]
[21.72235298 355.42114258]
[13.13456249 362.16616821]
[3.17333651 366.60882568]
[-7.55767632 368.48681641]
[-18.40985680 367.69302368]
[-28.72882271 364.28158569]
[-37.29784775 376.59304810]
[-45.86687088 388.90451050]
[-49.95264816 405.35876465]
[-66.89492798 405.98764038]
[-72.18933105 389.88159180]
[-58.17832184 380.33547974]
[-49.60929871 368.02401733]
[-41.04027557 355.71258545]
[-51.61927795 339.44778442]
[-54.23314667 320.17556763]
[-48.34068680 301.59259033]
[-35.03617859 287.28042603]
[-16.84638214 280.01510620]
[2.74926138 281.22891235]
[9.35517406 267.76184082]
[15.96108627 254.29478455]
[22.56699753 240.82771301]
[29.17291069 227.36064148]
[35.77882385 213.89356995]
[42.38473511 200.42651367]
[48.99064636 186.95944214]
[55.59656143 173.49237061]
[62.20247269 160.02529907]
[68.80838776 146.55822754]
[75.41429901 133.09117126]
[67.09555817 124.83505249]
[61.43640137 114.57157898]
[58.89424515 103.13032532]
[59.67456055 91.43605804]
[63.71428299 80.43398285]
[70.68688965 71.01338959]
[62.11786652 58.70193481]
[53.54884338 46.39048386]
[38.24699020 43.47653580]
[29.73216438 30.86890411]
[32.60446930 16.29888535]
[24.03544807 3.98743296]
[15.46642399 -8.32401848]
[-0.12298934 -9.55047989]
[-11.24052525 -20.54749870]
[-12.63682270 -36.12261963]
[-3.65259314 -48.92174530]
[11.47008514 -52.90151978]
[25.59074593 -46.18281937]
[32.04204559 -31.93800354]
[27.77787590 -16.89304161]
[36.34689713 -4.58159018]
[44.91592026 7.72986126]
[59.57655334 10.09659481]
[68.44214630 22.46008873]
[65.86029053 37.82146072]
[74.42931366 50.13291168]
[82.99833679 62.44436646]
[91.81462097 59.59601974]
[101.04433441 58.78845596]
[110.22130585 60.06246185]
[118.88199615 63.35368729]
[128.06358337 51.49205017]
[137.24517822 39.63041687]
[146.42677307 27.76877975]
[155.60835266 15.90714359]
[164.78994751 4.04550695]
[173.97154236 -7.81612921]
[183.15312195 -19.67776489]
[192.33471680 -31.53940201]
[197.24864197 -47.76560211]
[214.20103455 -47.53557205]
[218.67288208 -31.18201256]
[204.19635010 -22.35781097]
[195.01477051 -10.49617577]
[185.83317566 1.36546075]
[176.65158081 13.22709656]
[167.47000122 25.08873367]
[158.28840637 36.95037079]
[149.10681152 48.81200409]
[139.92523193 60.67364120]
[130.74363708 72.53527832]
[134.83665466 77.95709229]
[137.98368835 83.97747040]
[140.09928894 90.43293762]
[141.12602234 97.14819336]
[141.03598022 103.94088745]
[155.45722961 108.06732941]
[169.87847900 112.19377136]
[185.27470398 108.55137634]
[195.38241577 119.49137115]
[209.80366516 123.61781311]
[223.49871826 115.72978210]
[238.73834229 119.91659546]
[246.48114014 133.69427490]
[242.13343811 148.88879395]
[228.27465820 156.48548889]
[213.12696838 151.97738647]
[205.67721558 138.03906250]
[191.25596619 133.91262817]
[176.89125061 137.85017395]
[165.75204468 126.61502838]
[151.33079529 122.48858643]
[136.90953064 118.36214447]
[116.73581696 137.67485046]
[88.88136292 139.69708252]
[82.27545166 153.16415405]
[75.66954041 166.63121033]
[69.06362915 180.09828186]
[62.45771408 193.56535339]
[55.85180283 207.03242493]
[49.24589157 220.49948120]
[42.63998032 233.96655273]
[36.03406525 247.43362427]
[29.42815399 260.90069580]
[22.82224083 274.36776733]
[16.21632957 287.83483887]
[24.25806236 295.35549927]
[30.21672440 304.59887695]
[33.73805618 315.00375366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 16]
[9 15]
[10 14]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[33 109]
[39 61]
[40 60]
[41 59]
[44 56]
[45 55]
[46 54]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
[90 107]
[91 106]
[92 105]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
