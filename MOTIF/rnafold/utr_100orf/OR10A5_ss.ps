%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:51:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUAUAGGAAACUGGACAGAAAUAAGUGAAUUUAUCCUCAUGAGCUUCUCUUCCCUACCUACUGAAAUACAGUCAUUGCUCUUCCUGACAUUUCUAA\
) } def
/len { sequence length } bind def

/coor [
[171.50764465 192.99201965]
[164.58039856 190.06056213]
[158.55308533 185.52955627]
[153.78900146 179.66091919]
[150.57797241 172.79750061]
[149.11877441 165.34307861]
[149.50685120 157.73861694]
[151.72804260 150.43611145]
[139.95913696 141.13597107]
[128.19021606 131.83583069]
[116.42131042 122.53568268]
[105.17093658 127.40032196]
[92.92140198 126.97053528]
[82.03963470 121.32936096]
[74.62826538 111.56682587]
[72.11934662 99.56928253]
[74.99767303 87.65496826]
[63.82970810 77.64114380]
[52.66174698 67.62731934]
[34.62646484 64.34471130]
[29.65231133 47.59480667]
[18.17832375 37.93315125]
[6.70433521 28.27149582]
[-4.76965284 18.60983849]
[-19.18621063 23.71964264]
[-34.12614822 20.94563866]
[-45.59543991 11.13127518]
[-50.57896042 -3.01158452]
[-47.83275986 -17.65139198]
[-59.30674744 -27.31304741]
[-70.78073883 -36.97470474]
[-82.25472260 -46.63636017]
[-97.28441620 -42.77788162]
[-111.69922638 -48.52183151]
[-119.95635986 -61.65954208]
[-118.88077545 -77.13928986]
[-108.88607025 -89.00881195]
[-93.81539917 -92.70401764]
[-79.46375275 -86.80403137]
[-71.34962463 -73.57752228]
[-72.59306335 -58.11034775]
[-61.11907959 -48.44869232]
[-49.64509201 -38.78703690]
[-38.17110443 -29.12537956]
[-24.21253014 -34.32382584]
[-9.42771530 -31.82078362]
[2.19595098 -22.18975258]
[7.47288752 -7.94016600]
[4.89200354 7.13585091]
[16.36599159 16.79750633]
[27.83997917 26.45916367]
[39.31396866 36.12081909]
[51.50140762 35.42490005]
[61.15859222 43.53435898]
[62.67557144 56.45935822]
[73.84352875 66.47318268]
[85.01148987 76.48700714]
[101.84391785 72.17705536]
[117.96036530 78.67063904]
[127.10286713 93.44631958]
[125.72145081 110.76676941]
[137.49037170 120.06690979]
[149.25927734 129.36705017]
[161.02819824 138.66720581]
[184.29328918 132.63507080]
[204.74575806 144.80780029]
[210.42506409 167.68054199]
[224.30548096 173.36686707]
[238.18588257 179.05319214]
[252.06628418 184.73951721]
[265.94668579 190.42584229]
[271.47406006 189.65400696]
[276.20913696 191.05555725]
[279.42706299 193.91905212]
[280.81539917 197.34359741]
[294.10559082 204.29855347]
[307.39575195 211.25350952]
[320.68591309 218.20846558]
[333.61413574 209.91648865]
[348.95703125 209.21556091]
[362.58743286 216.29421997]
[370.83883667 229.24836731]
[371.49166870 244.59336853]
[364.37033081 258.20153809]
[351.39038086 266.41229248]
[336.04339600 267.01702881]
[322.45764160 259.85305786]
[314.28759766 246.84742737]
[313.73095703 231.49862671]
[300.44079590 224.54368591]
[287.15063477 217.58872986]
[273.86044312 210.63377380]
[260.26037598 204.30624390]
[246.37995911 198.61991882]
[232.49955750 192.93359375]
[218.61914062 187.24726868]
[204.73873901 181.56094360]
[199.67626953 186.99880981]
[193.43338013 191.06083679]
[186.37588501 193.49832153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 64]
[9 63]
[10 62]
[11 61]
[17 57]
[18 56]
[19 55]
[21 52]
[22 51]
[23 50]
[24 49]
[29 44]
[30 43]
[31 42]
[32 41]
[67 97]
[68 96]
[69 95]
[70 94]
[71 93]
[75 92]
[76 91]
[77 90]
[78 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
