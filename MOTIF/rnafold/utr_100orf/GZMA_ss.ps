%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUUUCAGGUUGAUUGAUGUGGGACAGCAGCCACAAUGAGGAACUCCUAUAGAUUUCUGGCAUCCUCUCUCUCAGUUGUCGUUUCUCUCCUGCUAAUUCCUGAAGAUGUCUGUGAAAAAAUUAUUGGAGGAAAUG\
) } def
/len { sequence length } bind def

/coor [
[245.45668030 370.02078247]
[246.68016052 363.58801270]
[249.71255493 357.73855591]
[241.34355164 345.29028320]
[232.97453308 332.84201050]
[224.60552979 320.39373779]
[216.23651123 307.94543457]
[207.86750793 295.49716187]
[199.49848938 283.04888916]
[191.12948608 270.60061646]
[182.76046753 258.15234375]
[178.24810791 256.36224365]
[174.85169983 251.67077637]
[174.30897522 244.94151306]
[166.51522827 232.12522888]
[158.72146606 219.30894470]
[150.92770386 206.49264526]
[143.13394165 193.67636108]
[138.70773315 191.68275452]
[135.52836609 186.84155273]
[135.29249573 180.09457397]
[128.09014893 166.93682861]
[120.88778687 153.77909851]
[113.68543243 140.62135315]
[106.48307800 127.46361542]
[99.28072357 114.30587769]
[87.43528748 106.87773895]
[87.56153870 92.89647675]
[80.35918427 79.73873901]
[66.94590759 71.34858704]
[67.62184906 56.46932983]
[60.41949081 43.31158829]
[53.21713638 30.15385056]
[39.80386353 21.76369667]
[40.47980118 6.88443756]
[33.27744675 -6.27330160]
[26.07509232 -19.43103981]
[18.87273979 -32.58877945]
[11.67038441 -45.74651718]
[3.44360685 -58.28924942]
[-5.75539446 -70.13739014]
[-14.95439529 -81.98552704]
[-24.15339661 -93.83366394]
[-33.35239792 -105.68180084]
[-46.87211990 -105.82481384]
[-57.66718292 -113.63710022]
[-61.90287781 -126.06537628]
[-58.23596573 -138.46984863]
[-67.16287994 -150.52432251]
[-82.27709198 -148.11201477]
[-96.77740479 -153.01095581]
[-107.33175659 -164.09536743]
[-111.51483154 -178.81814575]
[-108.36538696 -193.79612732]
[-98.60714722 -205.58744812]
[-84.48248291 -211.48257446]
[-69.23714447 -210.12683105]
[-56.37438202 -201.83177185]
[-48.84998322 -188.50352478]
[-48.39298630 -173.20484924]
[-55.10841370 -159.45123291]
[-46.18149948 -147.39677429]
[-29.49273109 -145.65982056]
[-18.98424149 -132.15007019]
[-21.50426102 -114.88080597]
[-12.30525875 -103.03266907]
[-3.10625768 -91.18452454]
[6.09274340 -79.33638763]
[15.29174519 -67.48825073]
[17.71501732 -82.29121399]
[28.96069527 -92.21768188]
[43.94997406 -92.78464508]
[55.91336823 -83.73603821]
[59.44794083 -69.15842438]
[52.95739746 -55.63537598]
[39.37301636 -49.27420044]
[24.82812309 -52.94887161]
[32.03047943 -39.79113388]
[39.23283005 -26.63339424]
[46.43518448 -13.47565556]
[53.63753891 -0.31791660]
[66.53565216 7.13110638]
[66.37487793 22.95149612]
[73.57723236 36.10923386]
[80.77958679 49.26697540]
[93.67769623 56.71599579]
[93.51692200 72.53638458]
[100.71927643 85.69412231]
[112.56471252 93.12226105]
[112.43846130 107.10352325]
[119.64081573 120.26126099]
[126.84317017 133.41899109]
[134.04553223 146.57673645]
[141.24787903 159.73448181]
[148.45024109 172.89221191]
[155.95024109 185.88259888]
[163.74398804 198.69888306]
[171.53775024 211.51518250]
[179.33151245 224.33146667]
[187.12527466 237.14776611]
[195.20875549 249.78332520]
[203.57775879 262.23159790]
[211.94677734 274.67987061]
[220.31578064 287.12814331]
[228.68479919 299.57644653]
[237.05380249 312.02471924]
[245.42282104 324.47299194]
[253.79182434 336.92126465]
[262.16082764 349.36956787]
[285.23007202 357.46551514]
[287.27539062 381.13952637]
[297.51367188 392.10205078]
[307.75198364 403.06460571]
[322.82601929 407.86914062]
[325.85836792 422.45181274]
[336.09667969 433.41433716]
[346.33496094 444.37689209]
[361.71783447 442.34057617]
[375.34371948 449.76455688]
[381.97311401 463.79418945]
[379.05694580 479.03479004]
[367.71649170 489.62600708]
[352.31243896 491.49533081]
[338.76791382 483.92395020]
[332.29107666 469.82324219]
[335.37243652 454.61517334]
[325.13412476 443.65264893]
[314.89584351 432.69009399]
[300.55410767 428.66967773]
[296.78942871 413.30288696]
[286.55114746 402.34036255]
[276.31283569 391.37780762]
[270.28222656 393.06964111]
[263.97903442 392.96362305]
[257.93121338 391.04534912]
[252.65197754 387.45321655]
[248.59629822 382.46865845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[11 101]
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[21 95]
[22 94]
[23 93]
[24 92]
[25 91]
[26 90]
[28 88]
[29 87]
[31 85]
[32 84]
[33 83]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[48 62]
[49 61]
[111 132]
[112 131]
[113 130]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
