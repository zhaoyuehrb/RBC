%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCUCUGGCGGCUCCUCCCGGGCGAUGCCUCCGCUCUGGGCCCUGCUGGCCCUCGGCUGCCUGCGGUUCGGCUCGGCUGUGAACCUGCAGCCCCAACUGGCCAGUGUGACUUUCGCCACCAACA\
) } def
/len { sequence length } bind def

/coor [
[106.04796600 260.52850342]
[111.86990356 246.58999634]
[121.38401794 234.85720825]
[133.81903076 226.28125000]
[129.11380005 212.03833008]
[124.40857697 197.79541016]
[113.06948090 188.13755798]
[116.08740234 172.60684204]
[111.38217926 158.36392212]
[106.67694855 144.12100220]
[101.97172546 129.87808228]
[97.26650238 115.63515472]
[88.33100891 103.58704376]
[76.06723785 94.94992065]
[63.80346680 86.31279755]
[51.53969193 77.67567444]
[36.91866684 82.52663422]
[22.41431618 77.89228821]
[13.52517223 65.74950409]
[13.49110413 50.87883759]
[1.22733212 42.24171448]
[-11.14150715 33.75573730]
[-23.61355209 25.42218399]
[-36.08559418 17.08863068]
[-48.55764008 8.75507641]
[-61.02968597 0.42152336]
[-73.50173187 -7.91203022]
[-70.45041656 6.77434158]
[-76.44148254 20.52596474]
[-89.27451324 28.29212570]
[-104.23618317 27.22045898]
[-115.83135223 17.70456696]
[-119.80132294 3.23945928]
[-114.68800354 -10.86210060]
[-102.36942291 -19.42087364]
[-87.36993408 -19.29337120]
[-97.97653198 -29.89997292]
[-108.58313751 -40.50657654]
[-124.15905762 -40.67527008]
[-134.76457214 -51.58296967]
[-134.50775146 -66.43119049]
[-145.11434937 -77.03778839]
[-155.72094727 -87.64439392]
[-166.32756042 -98.25099182]
[-176.93415833 -108.85759735]
[-192.91264343 -110.29546356]
[-201.63029480 -123.76329041]
[-196.39965820 -138.92970276]
[-181.23324585 -144.16032410]
[-167.76542664 -135.44268799]
[-166.32756042 -119.46419525]
[-155.72094727 -108.85759735]
[-145.11434937 -98.25099182]
[-134.50775146 -87.64439392]
[-123.90114594 -77.03778839]
[-109.05292511 -77.29460144]
[-98.14523315 -66.68909454]
[-97.97653198 -51.11317825]
[-87.36993408 -40.50657654]
[-76.76332855 -29.89997292]
[-65.16817474 -20.38407516]
[-52.69612885 -12.05052090]
[-40.22408676 -3.71696734]
[-27.75204277 4.61658621]
[-15.27999783 12.95014000]
[-2.80795407 21.28369331]
[4.57925749 22.39562225]
[9.86445522 29.97794151]
[22.12822723 38.61506653]
[36.14109421 33.63736343]
[50.56872177 37.91610718]
[59.81853485 50.01132584]
[60.17681503 65.41190338]
[72.44058990 74.04902649]
[84.70436096 82.68614960]
[96.96813202 91.32327271]
[101.67057037 82.06810760]
[113.37562561 76.74427795]
[126.77399445 70.00010681]
[140.17236328 63.25593948]
[153.57072449 56.51176834]
[166.96908569 49.76759720]
[180.36744690 43.02342987]
[185.08636475 27.94007874]
[199.12722778 20.68543816]
[214.15983582 25.56355476]
[221.26562500 39.68032837]
[216.22885132 54.66053009]
[202.03773499 61.61666870]
[187.11161804 56.42179489]
[173.71325684 63.16596222]
[160.31489563 69.91013336]
[146.91653442 76.65430450]
[133.51815796 83.39847565]
[120.11979675 90.14263916]
[134.25030518 85.10985565]
[148.50482178 89.77982330]
[156.91807556 102.19824219]
[155.96925354 117.16820526]
[146.05543518 128.42501831]
[131.32536316 131.25790405]
[117.94335938 124.48133087]
[111.50942230 110.92993164]
[116.21464539 125.17285156]
[120.91987610 139.41577148]
[125.62509918 153.65870667]
[130.33032227 167.90162659]
[142.00596619 178.57823181]
[138.65150452 193.09017944]
[143.35671997 207.33309937]
[148.06195068 221.57601929]
[163.15853882 221.05676270]
[177.78956604 224.81307983]
[190.76895142 232.54046631]
[201.04449463 243.61248779]
[207.78324890 257.13159180]
[210.43888855 272.00183105]
[208.79617310 287.01776123]
[202.98823547 300.96209717]
[193.48591614 312.70443726]
[181.05952454 321.29287720]
[166.71640015 326.03121948]
[151.61929321 326.53530884]
[136.99205017 322.76428223]
[124.02044678 315.02386475]
[113.75601959 303.94152832]
[107.03086090 290.41567993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 111]
[5 110]
[6 109]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[13 76]
[14 75]
[15 74]
[16 73]
[20 69]
[21 68]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[36 60]
[37 59]
[38 58]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
