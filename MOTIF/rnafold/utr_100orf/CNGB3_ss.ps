%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCACAGUCAUAAAUACAGAGGGUUUUCAGAACCACCUCAGAGAAGAUGUUUAAAUCGCUGACAAAAGUCAACAAGGUGAAGCCUAUAGGAGAGAACAAUGAGAAUGAACAAAGUUCUCGUCGGAAUGAAGAAGGCUCUCACCCAA\
) } def
/len { sequence length } bind def

/coor [
[274.70507812 129.94532776]
[264.64730835 120.02716827]
[259.12396240 106.97921753]
[244.12478638 106.82108307]
[229.12562561 106.66295624]
[219.79397583 120.13069153]
[204.12466431 125.45903015]
[188.20159912 120.37087250]
[178.33171082 106.67459106]
[163.33255005 106.83272552]
[148.33337402 106.99085236]
[133.33421326 107.14898682]
[130.77606201 117.41328430]
[125.02872467 126.74475098]
[116.43766785 134.14778137]
[105.65922546 138.75575256]
[93.61238098 139.92768860]
[81.40081787 137.32690430]
[70.21184540 130.97286987]
[61.20133209 121.25933075]
[46.89690018 125.77410889]
[39.55912781 139.51437378]
[24.98808289 143.88922119]
[11.93406200 136.80909729]
[-2.37037110 141.32388306]
[-16.67480469 145.83865356]
[-30.97923660 150.35342407]
[-45.28366852 154.86820984]
[-58.56846619 165.40151978]
[-72.36772156 155.55180359]
[-66.72295380 139.56515503]
[-49.79844666 140.56378174]
[-35.49401474 136.04899597]
[-21.18958092 131.53422546]
[-6.88514709 127.01944733]
[7.41928530 122.50466919]
[14.04374123 109.21361542]
[28.48615456 104.43121338]
[42.38212204 111.46967316]
[56.68655396 106.95489502]
[58.10123444 99.58952332]
[43.37049103 96.76016998]
[28.48638153 98.62115479]
[22.11720657 85.04051971]
[33.06510162 74.78656769]
[46.19984818 82.02942657]
[60.93059158 84.85878754]
[62.34526825 77.49341583]
[50.73132706 68.00045013]
[39.11738205 58.50749207]
[23.41932487 60.33684921]
[11.07758713 50.46481323]
[9.41430283 34.74829483]
[19.41626930 22.51161957]
[35.14949799 21.01459122]
[47.27973938 31.14537239]
[48.61034393 46.89354706]
[60.22428513 56.38650894]
[71.83823395 65.87947083]
[99.43369293 59.14563751]
[123.04454803 70.44763184]
[133.17608643 92.14981842]
[148.17524719 91.99169159]
[163.17440796 91.83355713]
[178.17358398 91.67543030]
[185.32487488 79.84724426]
[197.30052185 73.16563416]
[210.90496826 73.29048920]
[222.56848145 80.08164215]
[229.28375244 91.66378784]
[244.28291321 91.82192230]
[259.28207397 91.98004913]
[266.35650635 77.36328125]
[279.04138184 67.31791687]
[294.77700806 63.80658722]
[310.41604614 67.47984314]
[322.85284424 77.55636597]
[329.64031982 91.98845673]
[344.63949585 91.83032990]
[359.63867188 91.67219543]
[374.63781738 91.51406860]
[389.63699341 91.35593414]
[404.63366699 91.03968811]
[419.62615967 90.56536865]
[434.61865234 90.09104919]
[449.61114502 89.61672211]
[464.60366821 89.14240265]
[475.34005737 70.09056854]
[495.20352173 61.25282669]
[516.29364014 65.97717285]
[530.32153320 82.25038147]
[545.08123779 79.57647705]
[557.28112793 69.50307465]
[571.18383789 74.84767914]
[585.94354248 72.17376709]
[600.70330811 69.49986267]
[615.46307373 66.82595062]
[630.22283936 64.15204620]
[644.98254395 61.47813797]
[653.99530029 48.77348328]
[669.00189209 46.27201843]
[681.05828857 54.94258499]
[695.81805420 52.26867676]
[702.43328857 38.23236465]
[716.05163574 30.79462624]
[731.43658447 32.81542206]
[742.67224121 43.51771927]
[745.43835449 58.78626251]
[738.67120361 72.74998474]
[724.97296143 80.03955841]
[709.61083984 77.85198212]
[698.49194336 67.02842712]
[683.73217773 69.70233154]
[675.48376465 82.05136871]
[660.55334473 84.97335052]
[647.65649414 76.23789215]
[632.89672852 78.91179657]
[618.13696289 81.58570099]
[603.37719727 84.25961304]
[588.61749268 86.93351746]
[573.85772705 89.60742950]
[562.71356201 99.48957062]
[547.75518799 94.33621979]
[532.99542236 97.01013184]
[531.55670166 105.71547699]
[527.92694092 113.77874756]
[522.33972168 120.65721893]
[515.16070557 125.88518524]
[506.86367798 129.10543823]
[497.99942017 130.09370422]
[489.15902710 128.77420044]
[480.93453979 125.22537231]
[473.87930298 119.67529297]
[468.47073364 112.48703003]
[465.07797241 104.13490295]
[450.08547974 104.60922241]
[435.09298706 105.08354187]
[420.10049438 105.55786896]
[405.10797119 106.03218842]
[398.47705078 109.41017914]
[389.79513550 106.35510254]
[374.79595947 106.51323700]
[359.79678345 106.67136383]
[344.79763794 106.82949829]
[329.79846191 106.98762512]
[324.51748657 119.85448456]
[314.69140625 129.75914001]
[301.78698730 135.17604065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[9 65]
[10 64]
[11 63]
[12 62]
[20 40]
[21 39]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[48 59]
[49 58]
[50 57]
[78 145]
[79 144]
[80 143]
[81 142]
[82 141]
[83 139]
[84 138]
[85 137]
[86 136]
[87 135]
[91 124]
[92 123]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
