%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAAGGCUAUAAAUUCGCAGGCCGCGGCCGGGCCCCACAGGAGCAGCCGCCCGGGGCACCGGAGCUGCGGGCUGCGUGGCCGGGAUGAGCGCCAGCACGGGCGGUGGUGGGGACAGCGGCGGCAGCGGCGGCAGUAGCAGCAGCUCACAGGCCUCCUGCGGGCCCGAGUCCUCGGGCUCCGAAC\
) } def
/len { sequence length } bind def

/coor [
[29.58366394 299.48596191]
[21.90254021 312.37008667]
[14.22141552 325.25418091]
[6.54029179 338.13830566]
[10.19707298 353.27981567]
[2.22378230 366.23672485]
[-12.23388100 369.62960815]
[-19.91500473 382.51370239]
[-27.59612846 395.39782715]
[-35.27725220 408.28192139]
[-27.22457123 421.29779053]
[-26.15462112 436.56585693]
[-32.31327057 450.57763672]
[-44.28530502 460.11331177]
[-59.31963730 462.98165894]
[-73.96149445 458.52352905]
[-84.84627533 447.76342773]
[-89.47274017 433.17388916]
[-86.77777100 418.10751343]
[-77.38063812 406.02642822]
[-63.44073868 399.70678711]
[-48.16136551 400.60079956]
[-40.48023987 387.71670532]
[-32.79911804 374.83258057]
[-25.11799240 361.94845581]
[-29.00880241 347.61679077]
[-21.40258980 334.44104004]
[-6.34382010 330.45718384]
[1.33730388 317.57305908]
[9.01842785 304.68896484]
[16.69955254 291.80484009]
[56.89720154 277.21835327]
[59.90075302 262.52212524]
[62.90430450 247.82591248]
[65.90785217 233.12969971]
[68.91140747 218.43348694]
[71.91495514 203.73727417]
[65.50742340 193.46173096]
[67.90426636 181.18276978]
[78.35437775 173.59922791]
[81.60439301 158.95553589]
[84.85440063 144.31185913]
[88.10441589 129.66818237]
[91.35442352 115.02449036]
[84.22104645 101.82923126]
[70.18894196 96.52828979]
[56.15683365 91.22734070]
[42.12472916 85.92639923]
[28.09262276 80.62545776]
[18.43071556 85.67806244]
[7.80287647 84.58964539]
[-0.29388058 77.96172333]
[-3.32967997 68.17813873]
[-17.17578697 62.40879822]
[-31.02189636 56.63945770]
[-44.86800385 50.87011337]
[-61.05295944 53.51194000]
[-71.22244263 40.64672852]
[-64.91495514 25.50910378]
[-48.61910629 23.67135811]
[-39.09866333 37.02400589]
[-25.25255394 42.79334641]
[-11.40644646 48.56269073]
[2.43966103 54.33203125]
[21.36629486 50.43299103]
[33.39356613 66.59335327]
[47.42567062 71.89429474]
[61.45777893 77.19523621]
[75.48988342 82.49618530]
[89.52198792 87.79712677]
[91.04227448 84.22064972]
[93.58380890 80.84059143]
[97.11422729 77.92204285]
[101.34021759 63.52964783]
[105.56620789 49.13725281]
[109.79219818 34.74485779]
[114.01818085 20.35246468]
[118.12313080 5.92507982]
[122.10674286 -8.53627682]
[118.31224823 -23.89571762]
[129.15174866 -34.11113358]
[133.13536072 -48.57249069]
[137.11897278 -63.03384781]
[141.10256958 -77.49520111]
[135.18003845 -86.64969635]
[135.28320312 -97.33262634]
[141.13577271 -106.00639343]
[150.59751892 -109.93195343]
[155.06468201 -124.25132751]
[146.02633667 -134.67364502]
[143.34469604 -148.09558105]
[147.61624146 -160.98512268]
[157.62193298 -170.00415039]
[170.67262268 -172.87287903]
[175.37971497 -187.11518860]
[180.08682251 -201.35749817]
[177.07093811 -216.88859558]
[188.41130066 -226.54495239]
[193.11839294 -240.78726196]
[197.82548523 -255.02957153]
[191.92767334 -269.94918823]
[200.03973389 -283.79022217]
[215.93876648 -285.93499756]
[227.42842102 -274.73825073]
[225.69479370 -258.78912354]
[212.06779480 -250.32246399]
[207.36070251 -236.08016968]
[202.65359497 -221.83786011]
[206.00616455 -207.32546997]
[194.32911682 -196.65039062]
[189.62202454 -182.40809631]
[184.91493225 -168.16578674]
[194.91658020 -155.16075134]
[195.20619202 -138.59100342]
[185.47204590 -124.97415924]
[169.38406372 -119.78415680]
[164.91688538 -105.46478271]
[170.54562378 -86.97864532]
[155.56393433 -73.51158905]
[151.58032227 -59.05023575]
[147.59671021 -44.58887863]
[143.61309814 -30.12752151]
[147.69252014 -15.80245304]
[136.56809998 -4.55266523]
[132.58448792 9.90869141]
[133.84185791 17.20757484]
[128.41058350 24.57845306]
[124.18458557 38.97084808]
[119.95860291 53.36324310]
[115.73261261 67.75563812]
[111.50662231 82.14803314]
[119.82707977 94.62882233]
[134.73773193 96.26356506]
[149.64839172 97.89830780]
[166.31481934 90.09084320]
[180.05799866 100.98947906]
[194.99401855 102.37350464]
[209.94111633 103.63202667]
[224.89828491 104.76493835]
[239.85543823 105.89785767]
[254.39381409 98.31053925]
[268.08679199 107.33464050]
[266.84820557 123.68695068]
[251.95219421 130.54560852]
[238.72251892 120.85501099]
[223.76536560 119.72209930]
[208.80821228 118.58917999]
[201.88653564 121.22454834]
[193.60998535 117.30951691]
[178.67398071 115.92549133]
[169.15794373 123.41471863]
[156.69090271 122.37035370]
[148.01364136 112.80895996]
[133.10298157 111.17421722]
[118.19233704 109.53947449]
[105.99810791 118.27450562]
[102.74809265 132.91818237]
[99.49808502 147.56187439]
[96.24806976 162.20555115]
[92.99806213 176.84922791]
[98.94265747 194.26727295]
[86.61116791 206.74082947]
[83.60762024 221.43704224]
[80.60406494 236.13325500]
[77.60051727 250.82946777]
[74.59696198 265.52569580]
[71.59341431 280.22189331]
[73.22815704 295.13253784]
[79.34455109 308.82888794]
[85.46094513 322.52523804]
[91.57733917 336.22155762]
[97.69373322 349.91790771]
[111.28202820 359.09887695]
[109.85547638 375.43585205]
[94.88159180 382.12277222]
[81.76422119 372.28070068]
[83.99739075 356.03430176]
[77.88099670 342.33795166]
[71.76460266 328.64163208]
[65.64820862 314.94528198]
[59.53181839 301.24893188]
[52.04477692 300.80819702]
[51.16328812 315.78228760]
[50.28156662 330.75634766]
[35.30751801 329.87438965]
[36.18921280 314.90078735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[7 25]
[8 24]
[9 23]
[10 22]
[32 167]
[33 166]
[34 165]
[35 164]
[36 163]
[37 162]
[40 160]
[41 159]
[42 158]
[43 157]
[44 156]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[53 64]
[54 63]
[55 62]
[56 61]
[73 131]
[74 130]
[75 129]
[76 128]
[77 127]
[78 125]
[79 124]
[81 122]
[82 121]
[83 120]
[84 119]
[88 117]
[89 116]
[94 112]
[95 111]
[96 110]
[98 108]
[99 107]
[100 106]
[132 155]
[133 154]
[134 153]
[136 150]
[137 149]
[138 147]
[139 146]
[140 145]
[168 181]
[169 180]
[170 179]
[171 178]
[172 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
