%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUCUCCAGGCCUCGGAAGGCUGUCCUGGCCUGGGAACUAAUGUGUUUGUCCCACAGAGCCCACAAACGGAUGAAGAAGGCAGCAGGUCAGGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[-13.11060715 268.97775269]
[-19.66233444 270.10470581]
[-26.21526718 269.26150513]
[-32.19361496 266.54644775]
[-43.96252823 275.84658813]
[-55.73144150 285.14675903]
[-67.50035858 294.44689941]
[-79.26927185 303.74703979]
[-90.89212799 313.22906494]
[-102.36611938 322.89074707]
[-102.15816498 338.52694702]
[-112.08960724 350.60586548]
[-127.47111511 353.42422485]
[-141.04002380 345.65124512]
[-146.38949585 330.95712280]
[-140.99368286 316.27996826]
[-127.40031433 308.54986572]
[-112.02777100 311.41674805]
[-100.55378723 301.75509644]
[-97.40947723 294.91851807]
[-88.56941223 291.97811890]
[-76.80049896 282.67797852]
[-65.03158569 273.37783813]
[-53.26267242 264.07769775]
[-41.49375916 254.77754211]
[-36.32735825 231.52975464]
[-12.48087215 226.01173401]
[-2.99882531 214.38887024]
[6.48322105 202.76600647]
[15.96526718 191.14315796]
[25.44731331 179.52029419]
[34.92935944 167.89744568]
[44.41140747 156.27458191]
[53.89345169 144.65173340]
[63.37549973 133.02886963]
[72.85754395 121.40601349]
[65.79804993 105.01567078]
[67.85426331 87.28851318]
[78.47814941 72.94930267]
[94.83816528 65.81980133]
[112.57395172 67.80021667]
[120.93173218 55.34439468]
[121.66603851 37.02752304]
[137.55815125 29.76515007]
[145.52452087 17.05542946]
[146.29774475 1.25312877]
[159.61302185 -5.42166424]
[167.57937622 -18.13138580]
[175.54574585 -30.84110451]
[183.51211548 -43.55082703]
[191.47848511 -56.26054764]
[199.44485474 -68.97026825]
[207.41122437 -81.67998505]
[199.23284912 -94.56707764]
[197.46443176 -109.72740173]
[202.45706177 -124.15086365]
[213.21946716 -134.97367859]
[227.61476135 -140.04696655]
[242.78474426 -138.36343384]
[255.71740723 -130.25732422]
[263.84497070 -117.33812714]
[265.55368042 -102.17095184]
[260.50427246 -87.76726532]
[249.69934082 -76.98691559]
[235.28417969 -71.97035217]
[220.12094116 -73.71362305]
[212.15457153 -61.00389862]
[204.18820190 -48.29417801]
[196.22183228 -35.58445740]
[188.25546265 -22.87473869]
[180.28910828 -10.16501808]
[172.32273865 2.54470277]
[172.11932373 17.43791962]
[158.23425293 25.02179718]
[150.26788330 37.73151779]
[152.65733337 49.70267105]
[145.97450256 60.39680099]
[133.38755798 63.70217896]
[125.02976990 76.15799713]
[131.68333435 86.17621613]
[134.50193787 97.86767578]
[133.14442444 109.81722260]
[127.77509308 120.57849884]
[119.04386902 128.84893799]
[108.00756836 133.62750244]
[96.00202942 134.33578491]
[84.48040009 130.88806152]
[74.99835968 142.51092529]
[65.51631165 154.13377380]
[56.03426361 165.75663757]
[46.55221558 177.37948608]
[37.07017136 189.00234985]
[27.58812332 200.62519836]
[18.10607719 212.24806213]
[8.62403107 223.87091064]
[-0.85801506 235.49377441]
[1.75928521 241.87145996]
[2.38282967 248.69589233]
[0.98152167 255.36207581]
[-2.29729247 261.28613281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 19]
[10 18]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[33 90]
[34 89]
[35 88]
[36 87]
[41 79]
[42 78]
[44 75]
[45 74]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
