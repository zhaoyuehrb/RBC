%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGAAGUUGAAGAUUUUUCAGGUCAUAAUAUGAUGUUGCUAAUUUUGUUCCUCGUGAUAAUUUGUUCCCAUAUUUCUGUGAACCAAGAUUCCGGCCCUGAGUAUGCAGAUGUUGUGUUUUUGGUGGACA\
) } def
/len { sequence length } bind def

/coor [
[108.33657837 130.97175598]
[95.96586609 132.80560303]
[83.45658112 129.73962402]
[72.73011780 121.95556641]
[64.02926636 134.17420959]
[55.32841110 146.39285278]
[46.62755966 158.61148071]
[37.92670441 170.83012390]
[43.75581360 185.11386108]
[40.91473770 200.27735901]
[30.31005478 211.48202515]
[15.32568169 215.15245056]
[0.74307746 210.11746216]
[-8.78450203 197.98367310]
[-10.21684170 182.62294006]
[-3.09688663 168.93682861]
[10.30341148 161.29251099]
[25.70806503 162.12927246]
[34.40892029 149.91062927]
[43.10977173 137.69200134]
[51.81062698 125.47335815]
[60.51148224 113.25471497]
[58.37675858 98.40739441]
[46.58596039 89.13500977]
[31.10016823 90.81666565]
[19.27471352 81.24518585]
[17.76694489 66.47148132]
[5.97614813 57.19910049]
[-5.81464815 47.92671585]
[-17.60544395 38.65433121]
[-29.61356354 29.66516495]
[-41.83220291 20.96431160]
[-54.05084229 12.26345730]
[-69.78020477 10.56119061]
[-75.65946198 -3.12396979]
[-87.87809753 -11.82482338]
[-100.09674072 -20.52567673]
[-118.55802917 -16.62683487]
[-133.80482483 -27.19584274]
[-136.53639221 -45.22516251]
[-149.15519714 -53.33477402]
[-164.03283691 -48.51919556]
[-178.50567627 -54.44128799]
[-185.74006653 -68.30482483]
[-182.32015991 -83.56386566]
[-169.86071777 -93.01354980]
[-154.24473572 -92.19203949]
[-142.84558105 -81.48722076]
[-141.04559326 -65.95357513]
[-128.42678833 -57.84396362]
[-117.95966339 -62.66116333]
[-106.35061646 -61.77375031]
[-96.53621674 -55.28876495]
[-91.05600739 -44.74389267]
[-91.39588165 -32.74431610]
[-79.17724609 -24.04346275]
[-66.95860291 -15.34260941]
[-52.10320282 -14.26268578]
[-45.34998703 0.04481829]
[-33.13134766 8.74567223]
[-20.91271019 17.44652557]
[-16.04855347 17.52902985]
[-11.20729160 20.73443413]
[-8.33306026 26.86353302]
[3.45773649 36.13591766]
[15.24853325 45.40830231]
[27.03932953 54.68068695]
[41.75205231 52.66292191]
[53.84168625 61.89847565]
[55.85834503 77.34421539]
[67.64913940 86.61660004]
[74.60175323 76.80149078]
[84.31641388 70.07403564]
[95.54093933 67.12600708]
[106.88651276 68.17309570]
[116.99930573 72.94561005]
[124.72206879 80.73798370]
[129.22622681 90.50942993]
[130.09959412 101.02140808]
[144.49198914 105.24739838]
[158.88438416 109.47338867]
[172.63587952 102.15670013]
[187.17161560 106.64748383]
[194.06221008 119.80252838]
[208.45460510 124.02851868]
[222.84700012 128.25450134]
[237.23939514 132.48049927]
[251.63179016 136.70648193]
[266.02416992 140.93246460]
[280.41656494 145.15846252]
[292.69546509 135.85603333]
[307.91952515 135.57084656]
[320.24652100 144.20271301]
[325.06927490 158.26966858]
[339.46166992 162.49565125]
[353.85403442 166.72164917]
[368.24642944 170.94763184]
[385.98153687 166.16371155]
[397.64196777 179.22291565]
[412.13085938 183.10519409]
[426.61975098 186.98748779]
[440.17962646 178.86927795]
[455.48779297 182.79809570]
[463.46215820 196.44305420]
[459.37170410 211.70881653]
[445.64321899 219.53849792]
[430.42153931 215.28688049]
[422.73745728 201.47636414]
[408.24856567 197.59408569]
[393.75967407 193.71179199]
[383.06875610 199.50045776]
[370.92047119 196.31256104]
[364.02044678 185.34002686]
[349.62805176 181.11404419]
[335.23565674 176.88804626]
[320.84326172 172.66206360]
[309.18093872 181.88856506]
[294.14407349 182.48568726]
[281.49096680 174.01501465]
[276.19058228 159.55085754]
[261.79818726 155.32485962]
[247.40580750 151.09887695]
[233.01341248 146.87289429]
[218.62101746 142.64689636]
[204.22862244 138.42091370]
[189.83622742 134.19493103]
[176.92733765 141.53631592]
[162.27119446 137.45559692]
[154.65838623 123.86578369]
[140.26599121 119.63979340]
[125.87360382 115.41380310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[23 71]
[24 70]
[27 67]
[28 66]
[29 65]
[30 64]
[31 61]
[32 60]
[33 59]
[35 57]
[36 56]
[37 55]
[40 50]
[41 49]
[79 131]
[80 130]
[81 129]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[89 121]
[90 120]
[94 116]
[95 115]
[96 114]
[97 113]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
