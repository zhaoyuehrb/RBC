%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGUUUUCACGAUCUGCUGCUCGUCUCAGGCUCGUAGUUCGCCUUCAACAUGCCGGAGCCAGCGAAGUCCGCUCCCGCGCCCAAGAAGGGCUCGAAGAAAGCCGUGACUAAGGCGCAGAAGAAGGACGGCAGGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[207.49774170 428.01507568]
[213.26492310 413.54519653]
[207.48864746 399.70199585]
[201.71237183 385.85876465]
[195.93609619 372.01553345]
[190.15983582 358.17233276]
[184.38356018 344.32910156]
[178.60728455 330.48590088]
[166.43905640 329.44918823]
[155.81637573 323.27880859]
[148.80508423 313.10330200]
[146.79916382 300.83663940]
[150.24388123 288.81854248]
[158.53884888 279.36813354]
[153.34342957 265.29663086]
[148.14801025 251.22511292]
[142.95259094 237.15359497]
[137.75718689 223.08207703]
[132.45571899 217.86286926]
[132.60339355 208.66340637]
[127.70183563 194.48684692]
[122.80028534 180.31028748]
[107.29273224 168.82353210]
[111.23934937 149.09861755]
[105.75231171 135.13822937]
[100.26528168 121.17784119]
[88.09208679 117.51493073]
[80.20886993 107.54203796]
[79.45566559 94.85202789]
[86.10383606 84.01663971]
[80.90841675 69.94512177]
[75.71300507 55.87360382]
[70.51758575 41.80208206]
[58.07156754 40.00956726]
[47.64348221 33.11352921]
[41.19670868 22.48649788]
[39.91325760 10.19616699]
[43.97745895 -1.39680707]
[52.55243683 -10.09222698]
[47.94687271 -24.36768723]
[43.34130859 -38.64314651]
[38.73574066 -52.91860962]
[33.68698502 -67.04341125]
[28.19995499 -81.00379944]
[22.71292305 -94.96419525]
[17.22589111 -108.92458344]
[11.73886013 -122.88497162]
[-4.60775042 -125.15806580]
[-17.51536560 -135.29162598]
[-23.53426361 -150.45747375]
[-21.11630058 -166.49916077]
[-11.01184177 -179.07099915]
[-16.78811455 -192.91423035]
[-22.56438637 -206.75744629]
[-35.01923370 -216.51383972]
[-32.77970123 -231.23912048]
[-38.55597305 -245.08233643]
[-44.33224869 -258.92556763]
[-50.10852051 -272.76876831]
[-55.88479233 -286.61199951]
[-70.22636414 -292.69122314]
[-75.88713074 -306.81250000]
[-70.00313568 -320.44754028]
[-75.77940369 -334.29074097]
[-87.45886993 -346.58001709]
[-78.88304901 -361.20507812]
[-62.45554352 -357.01300049]
[-61.93618774 -340.06701660]
[-56.15991592 -326.22381592]
[-42.32955933 -320.81484985]
[-36.27439499 -306.85815430]
[-42.04157639 -292.38827515]
[-36.26530075 -278.54504395]
[-30.48902893 -264.70184326]
[-24.71275711 -250.85861206]
[-18.93648529 -237.01539612]
[-6.89479637 -228.24914551]
[-8.72116852 -212.53372192]
[-2.94489598 -198.69049072]
[2.83137631 -184.84727478]
[16.49597359 -183.98809814]
[28.50819969 -177.28097534]
[36.48546982 -165.99067688]
[38.81729889 -152.29733276]
[34.99017334 -138.87556458]
[25.69924927 -128.37200928]
[31.18628120 -114.41161346]
[36.67331314 -100.45122528]
[42.16034317 -86.49082947]
[47.64737701 -72.53044128]
[50.78343582 -70.78900146]
[53.20734024 -67.40871429]
[54.14286423 -62.75283813]
[53.01120377 -57.52417374]
[57.61676788 -43.24871445]
[62.22233200 -28.97325134]
[66.82789612 -14.69779110]
[83.80830383 -10.03587151]
[94.72564697 3.97884560]
[95.09745789 21.89655113]
[84.58910370 36.60666656]
[89.78452301 50.67818832]
[94.97993469 64.74971008]
[100.17535400 78.82122803]
[115.29952240 85.35432434]
[121.16624451 100.74924469]
[114.22567749 115.69080353]
[119.71270752 129.65119934]
[125.19973755 143.61158752]
[135.47979736 147.40707397]
[141.81410217 156.07772827]
[142.28434753 166.58477783]
[136.97683716 175.40873718]
[141.87838745 189.58529663]
[146.77993774 203.76185608]
[151.82870483 217.88665771]
[157.02410889 231.95817566]
[162.21952820 246.02969360]
[167.41494751 260.10122681]
[172.61036682 274.17272949]
[190.15670776 278.52462769]
[201.51780701 292.38494873]
[202.32725525 310.13162231]
[192.45050049 324.70962524]
[198.22677612 338.55282593]
[204.00305176 352.39605713]
[209.77932739 366.23928833]
[215.55558777 380.08248901]
[221.33186340 393.92572021]
[227.10813904 407.76892090]
[241.44970703 413.84814453]
[247.11047363 427.96942139]
[241.22648621 441.60446167]
[247.00274658 455.44769287]
[261.34432983 461.52691650]
[267.00509644 475.64819336]
[261.12109375 489.28320312]
[266.89736938 503.12643433]
[272.67364502 516.96966553]
[286.03106689 526.48339844]
[284.20147705 542.78015137]
[269.06698608 549.09521484]
[256.19668579 538.93218994]
[258.83041382 522.74591064]
[253.05415344 508.90270996]
[247.27787781 495.05947876]
[233.44750977 489.65054321]
[227.39234924 475.69381714]
[233.15953064 461.22396851]
[227.38325500 447.38073730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[7 125]
[8 124]
[14 120]
[15 119]
[16 118]
[17 117]
[18 116]
[20 115]
[21 114]
[22 113]
[24 109]
[25 108]
[26 107]
[30 104]
[31 103]
[32 102]
[33 101]
[39 97]
[40 96]
[41 95]
[42 94]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[52 80]
[53 79]
[54 78]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[63 69]
[64 68]
[133 150]
[134 149]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
