%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCGUUUCCGGCCGUUCCCACCCCUGUUUUCGGUCGGCCCGGGUGUUCUGCAAGCUGGUCAAAAAGGGGAAGCGGCCCAGAUAUGUUAAGUUCUAUGGCCGCUGCAGGGUCUGUGAAGGCGGCGUUGCAGGUGGCCGAGGUGCUGGAAGCCAUCGUGAGCUGCUGCGUGGGGCCCGAGGGAC\
) } def
/len { sequence length } bind def

/coor [
[68.69087982 364.92047119]
[60.97132492 350.45187378]
[69.87021637 336.67718506]
[70.12492371 321.67935181]
[70.37963867 306.68151855]
[62.85957336 293.82470703]
[70.83009338 280.15789795]
[71.08480835 265.16006470]
[63.33247375 258.46038818]
[60.49996185 248.38493347]
[63.75942993 238.20826721]
[72.26108551 231.37763977]
[73.02493286 216.39709473]
[73.78877258 201.41654968]
[74.55261230 186.43601990]
[72.75241089 184.25894165]
[71.71629333 181.22959900]
[71.77624512 177.63911438]
[73.15145111 173.89437866]
[75.91109467 170.47502136]
[77.68996429 155.58087158]
[79.46883392 140.68673706]
[81.24770355 125.79258728]
[71.53021240 114.36584473]
[56.54372787 113.72922516]
[41.55724335 113.09260559]
[26.57076073 112.45598602]
[12.45464230 119.60062408]
[0.06721841 111.33013153]
[-14.91926575 110.69351196]
[-29.90575027 110.05689240]
[-44.89223480 109.42028046]
[-53.62199783 112.18743134]
[-60.12716293 108.64346313]
[-75.10067749 107.75245667]
[-90.07418823 106.86145020]
[-105.04770660 105.97044373]
[-120.02121735 105.07942963]
[-134.99473572 104.18842316]
[-149.96824646 103.29741669]
[-167.54391479 113.13896179]
[-183.23049927 101.85595703]
[-198.22563171 101.47391510]
[-213.22076416 101.09187317]
[-225.79386902 111.05664062]
[-241.39073181 107.29929352]
[-248.04676819 92.70214081]
[-240.65603638 78.46287537]
[-224.88807678 75.50463867]
[-212.83872986 86.09674072]
[-197.84359741 86.47878265]
[-182.84844971 86.86082458]
[-176.08320618 79.16565704]
[-165.98405457 76.41879272]
[-155.83543396 79.76455688]
[-149.07723999 88.32390594]
[-134.10372925 89.21491241]
[-119.13021088 90.10591888]
[-104.15669250 90.99692535]
[-89.18318176 91.88793182]
[-74.20967102 92.77894592]
[-59.23615646 93.66995239]
[-44.25561523 94.43379211]
[-29.26913261 95.07041168]
[-14.28264809 95.70703125]
[0.70383644 96.34364319]
[13.74802113 89.15348053]
[27.20737839 97.46950531]
[42.19386292 98.10612488]
[57.18034744 98.74273682]
[72.16683197 99.37935638]
[88.33624268 78.65896606]
[110.83916473 82.24658203]
[122.74592590 73.12358093]
[134.65267944 64.00057983]
[146.55944824 54.87758255]
[158.46620178 45.75458145]
[170.37295532 36.63158417]
[176.62149048 22.09657478]
[191.43000793 20.49759483]
[203.33677673 11.37459564]
[215.16563416 2.15082860]
[226.91577148 -7.17304087]
[238.66589355 -16.49691010]
[240.91935730 -29.21187782]
[250.91722107 -36.73467255]
[262.96096802 -35.46113968]
[274.86770630 -44.58413696]
[286.77447510 -53.70713806]
[293.62704468 -72.64920807]
[312.87231445 -74.37976837]
[324.46243286 -83.90181732]
[336.05252075 -93.42386627]
[341.80389404 -108.16267395]
[356.54959106 -110.26358032]
[368.13970947 -119.78562927]
[373.89105225 -134.52442932]
[388.63674927 -136.62533569]
[400.22686768 -146.14739990]
[411.81695557 -155.66944885]
[423.40707397 -165.19149780]
[434.99719238 -174.71354675]
[446.58728027 -184.23559570]
[458.17739868 -193.75764465]
[469.68621826 -203.37776184]
[481.11297607 -213.09524536]
[492.53970337 -222.81274414]
[503.96646118 -232.53022766]
[515.39318848 -242.24771118]
[520.89343262 -257.08206177]
[535.60137939 -259.43304443]
[547.02807617 -269.15054321]
[558.45483398 -278.86804199]
[562.97851562 -286.83059692]
[570.15911865 -288.65151978]
[581.74920654 -298.17355347]
[587.00799561 -313.70666504]
[603.14031982 -316.65316772]
[613.55053711 -303.98196411]
[607.52954102 -288.72811890]
[591.27124023 -286.58346558]
[579.68115234 -277.06140137]
[568.17230225 -267.44128418]
[556.74560547 -257.72378540]
[545.31884766 -248.00631714]
[540.63586426 -233.86703491]
[525.11065674 -230.82096863]
[513.68395996 -221.10348511]
[502.25720215 -211.38600159]
[490.83044434 -201.66850281]
[479.40371704 -191.95101929]
[476.33810425 -185.20722961]
[467.69943237 -182.16754150]
[456.10934448 -172.64549255]
[444.51922607 -163.12344360]
[432.92913818 -153.60139465]
[421.33901978 -144.07934570]
[409.74890137 -134.55728149]
[398.15881348 -125.03524017]
[393.23645020 -110.97751617]
[377.66174316 -108.19552612]
[366.07165527 -98.67347717]
[361.14929199 -84.61575317]
[345.57458496 -81.83376312]
[333.98446655 -72.31171417]
[322.39437866 -62.78965759]
[322.31289673 -52.54379654]
[316.47256470 -43.85882950]
[306.60858154 -39.74906921]
[295.89746094 -41.80038071]
[283.99072266 -32.67737961]
[272.08395386 -23.55438232]
[266.25335693 -7.01262617]
[247.98976135 -4.74678421]
[236.23963928 4.57708502]
[224.48951721 13.90095425]
[221.19665527 20.53676605]
[212.45977783 23.28135300]
[200.55300903 32.40435410]
[195.15614319 46.28682327]
[179.49595642 48.53834152]
[167.58920288 57.66134262]
[155.68243408 66.78433990]
[143.77568054 75.90734100]
[131.86892700 85.03033447]
[119.96216583 94.15333557]
[121.49601746 108.58569336]
[112.79726410 122.04894257]
[96.14184570 127.57145691]
[94.36297607 142.46560669]
[92.58410645 157.35975647]
[90.80523682 172.25389099]
[89.53314972 187.19985962]
[88.76931000 202.18040466]
[88.00547028 217.16093445]
[87.24163055 232.14147949]
[97.23204803 249.63294983]
[86.08264160 265.41476440]
[85.82793427 280.41259766]
[93.32978058 294.34216309]
[85.37747192 306.93621826]
[85.12276459 321.93405151]
[84.86804962 336.93191528]
[93.29406738 351.00082397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 183]
[4 182]
[5 181]
[7 179]
[8 178]
[12 176]
[13 175]
[14 174]
[15 173]
[20 172]
[21 171]
[22 170]
[23 169]
[24 71]
[25 70]
[26 69]
[27 68]
[29 66]
[30 65]
[31 64]
[32 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[42 52]
[43 51]
[44 50]
[73 166]
[74 165]
[75 164]
[76 163]
[77 162]
[78 161]
[80 159]
[81 158]
[82 156]
[83 155]
[84 154]
[87 152]
[88 151]
[89 150]
[91 146]
[92 145]
[93 144]
[95 142]
[96 141]
[98 139]
[99 138]
[100 137]
[101 136]
[102 135]
[103 134]
[104 133]
[105 131]
[106 130]
[107 129]
[108 128]
[109 127]
[111 125]
[112 124]
[113 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
