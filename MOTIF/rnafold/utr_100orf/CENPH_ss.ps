%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCGGCGUCCAUUUAGUGGCGGGAAAAGCGACCUUUUCUGAGCGCGUUUGCCUGUUGAGUGGUAGCCUUUCCCCUCAACCAGCAAUGGAGGAGCAGCCCCAGAUGCAAGACGCCGACGAGCCCGCGGACUCCGGAGGGGAAGGCCGGGCAGGCGGGCCACCGCAGGUCGCCGGCGCCCAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[-106.33335876 660.05609131]
[-113.54208374 673.21032715]
[-120.75080872 686.36462402]
[-127.95954132 699.51885986]
[-135.16825867 712.67309570]
[-142.37698364 725.82733154]
[-149.58572388 738.98156738]
[-149.43260193 754.80206299]
[-162.33432007 762.24481201]
[-169.54304504 775.39910889]
[-162.07991028 788.90112305]
[-163.12408447 804.29309082]
[-172.34237671 816.66351318]
[-186.79324341 822.06500244]
[-201.86547852 818.77392578]
[-212.74960327 807.84051514]
[-215.97250366 792.75354004]
[-210.50578308 778.32720947]
[-198.09384155 769.16497803]
[-182.69729614 768.19036865]
[-175.48857117 755.03613281]
[-176.15730286 740.15649414]
[-162.73995972 731.77288818]
[-155.53123474 718.61859131]
[-148.32250977 705.46435547]
[-141.11378479 692.31011963]
[-133.90505981 679.15588379]
[-126.69633484 666.00164795]
[-119.48760986 652.84735107]
[-113.21182251 622.06103516]
[-89.44049835 613.88708496]
[-85.47756958 599.42004395]
[-81.51464081 584.95300293]
[-77.55171204 570.48602295]
[-73.58877563 556.01898193]
[-69.62584686 541.55194092]
[-65.66291809 527.08489990]
[-76.23320770 516.59039307]
[-80.15744019 502.11776733]
[-76.28504944 487.52767944]
[-65.55923462 476.76412964]
[-50.78961182 472.78854370]
[-46.82667923 458.32150269]
[-48.09434509 451.02514648]
[-42.67477036 443.64688110]
[-38.47065353 429.24807739]
[-42.33071136 414.86236572]
[-31.03568268 403.78387451]
[-26.83156395 389.38507080]
[-22.62744522 374.98626709]
[-18.42332458 360.58746338]
[-14.21920586 346.18869019]
[-10.01508617 331.78988647]
[-5.81096697 317.39108276]
[-1.60684776 302.99227905]
[2.59727168 288.59347534]
[6.80139112 274.19470215]
[-5.20657730 283.18405151]
[-20.08690071 285.07507324]
[-33.96164703 279.37496948]
[-43.21494293 267.56918335]
[-45.43530655 252.73442078]
[-40.04409027 238.73674011]
[-28.44629288 229.22406006]
[-13.66439247 226.67546082]
[0.44932857 231.75511169]
[10.21672058 243.13922119]
[13.09234715 257.86059570]
[19.63284683 244.36164856]
[26.17334747 230.86268616]
[32.71384811 217.36372375]
[39.25434494 203.86477661]
[39.34169006 196.45962524]
[46.01858139 190.19627380]
[52.78373337 176.80850220]
[59.54888535 163.42071533]
[66.31403351 150.03292847]
[73.07918549 136.64514160]
[79.84433746 123.25736237]
[72.65173340 114.11482239]
[69.36636353 102.95569611]
[70.45760345 91.37429810]
[75.76955414 81.02524567]
[84.54329681 73.38710785]
[95.52532959 69.55113983]
[97.02676392 54.62647247]
[98.52819824 39.70180511]
[90.57230377 23.10521889]
[101.34882355 9.26554871]
[102.60066223 -5.68212318]
[103.85249329 -20.62979507]
[101.44686127 -29.46287537]
[105.25218964 -35.81608582]
[106.75362396 -50.74075317]
[97.75618744 -64.02328491]
[102.66845703 -79.29578400]
[117.72214508 -84.84249115]
[131.36935425 -76.40844727]
[133.14112854 -60.46353149]
[121.67829132 -49.23931503]
[120.17685699 -34.31464767]
[118.80017090 -19.37795830]
[117.54833221 -4.43028593]
[116.29649353 10.51738644]
[123.86936188 19.96620178]
[122.93595886 32.44142151]
[113.45286560 41.20324326]
[111.95143127 56.12791061]
[110.44999695 71.05257416]
[113.99208069 72.58873749]
[117.31396484 74.55628967]
[120.36336517 76.92427826]
[132.72998047 68.43506622]
[135.74285889 53.15238571]
[148.40530396 44.71929169]
[162.95643616 47.68578339]
[175.32305908 39.19657898]
[187.68968201 30.70737076]
[193.00720215 23.25523186]
[200.33464050 22.18165970]
[212.84138489 13.90028381]
[219.66766357 -1.01058507]
[236.01724243 -2.28470325]
[245.07107544 11.38863277]
[237.51535034 25.94346619]
[221.12275696 26.40703392]
[208.61601257 34.68841171]
[196.17889404 43.07399368]
[183.81227112 51.56320190]
[171.44564819 60.05240631]
[168.98413086 74.69742584]
[156.56355286 83.48285675]
[141.21919250 80.80168915]
[128.85256958 89.29090118]
[128.79689026 110.85793304]
[114.59930420 127.09272766]
[93.23212433 130.02252197]
[86.46697235 143.41029358]
[79.70182037 156.79808044]
[72.93666840 170.18586731]
[66.17151642 183.57365417]
[59.40636444 196.96142578]
[52.75330353 210.40527344]
[46.21280670 223.90422058]
[39.67230606 237.40318298]
[33.13180542 250.90214539]
[26.59130478 264.40109253]
[21.20018959 278.39880371]
[16.99606895 292.79760742]
[12.79195023 307.19641113]
[8.58783054 321.59521484]
[4.38371134 335.99398804]
[0.17959212 350.39279175]
[-4.02452707 364.79159546]
[-8.22864628 379.19039917]
[-12.43276596 393.58920288]
[-16.63688469 407.98797607]
[-13.07753468 423.40362549]
[-24.07185555 433.45220947]
[-28.27597427 447.85101318]
[-32.35964203 462.28442383]
[-36.32257462 476.75146484]
[-25.64080048 487.69894409]
[-21.89756775 502.42596436]
[-26.00111198 516.95269775]
[-36.75300980 527.40515137]
[-51.19587708 531.04779053]
[-55.15880966 545.51483154]
[-59.12173843 559.98187256]
[-63.08467102 574.44891357]
[-67.04759979 588.91595459]
[-71.01053619 603.38299561]
[-74.97346497 617.85003662]
[-65.56256104 623.18640137]
[-58.80780029 633.35601807]
[-57.10965347 646.86090088]
[-61.98803329 661.07000732]
[-58.75503540 675.71746826]
[-55.52203751 690.36486816]
[-44.06092072 702.09411621]
[-48.74810410 717.80914307]
[-64.76181793 721.34368896]
[-75.62851715 709.06176758]
[-70.16948700 693.59790039]
[-73.40248108 678.95043945]
[-76.63548279 664.30297852]
[-84.05995178 663.24127197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[9 21]
[10 20]
[31 173]
[32 172]
[33 171]
[34 170]
[35 169]
[36 168]
[37 167]
[42 162]
[43 161]
[45 160]
[46 159]
[48 157]
[49 156]
[50 155]
[51 154]
[52 153]
[53 152]
[54 151]
[55 150]
[56 149]
[57 148]
[68 147]
[69 146]
[70 145]
[71 144]
[72 143]
[74 142]
[75 141]
[76 140]
[77 139]
[78 138]
[79 137]
[85 109]
[86 108]
[87 107]
[89 104]
[90 103]
[91 102]
[93 101]
[94 100]
[112 134]
[113 133]
[116 130]
[117 129]
[118 128]
[120 127]
[121 126]
[177 186]
[178 185]
[179 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
