%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCCGGGCGCCGCCGCGGAGCCUCCCGGGCCGCCGCGAUCAUGUCGGACCAGGCGCCCAAAGUUCCUGAGGAGAUGUUCAGGGAGGUCAAGUAUUACGCGGUGGGCGACAUCGACCCGCAGGUUAUUCAGCUUCUCAAGG\
) } def
/len { sequence length } bind def

/coor [
[86.85549927 108.02362061]
[85.54494476 102.74257660]
[70.54850769 103.06980133]
[55.55208206 103.39702606]
[40.55564880 103.72425079]
[25.55921936 104.05147552]
[8.89891720 115.31140900]
[-7.69201756 105.46671295]
[-22.65990067 106.44776154]
[-37.62778473 107.42881012]
[-52.59566879 108.40985870]
[-67.56355286 109.39090729]
[-82.53143311 110.37194824]
[-97.49932098 111.35299683]
[-103.34190369 116.13189697]
[-110.06888580 117.20371246]
[-115.72644806 114.97859955]
[-129.93038940 119.80018616]
[-144.13435364 124.62178040]
[-158.33830261 129.44337463]
[-172.54225159 134.26496887]
[-184.31164551 148.38134766]
[-201.36514282 144.37979126]
[-215.46054077 149.51010132]
[-229.55592346 154.64039612]
[-243.65130615 159.77070618]
[-256.46725464 170.86970520]
[-270.68032837 161.62712097]
[-265.73348999 145.41091919]
[-248.78161621 145.67530823]
[-234.68621826 140.54501343]
[-220.59083557 135.41470337]
[-206.49545288 130.28440857]
[-201.06768799 119.42095947]
[-189.30537415 115.05698395]
[-177.36384583 120.06101227]
[-163.15989685 115.23941803]
[-148.95594788 110.41783142]
[-134.75198364 105.59623718]
[-120.54803467 100.77464294]
[-134.95747375 96.60713196]
[-146.78834534 87.38593292]
[-154.34811401 74.43024445]
[-156.55526733 59.59351730]
[-153.09403992 44.99831390]
[-144.45960999 32.73264313]
[-131.88723755 24.55124474]
[-117.17552185 21.62455940]
[-102.42914581 24.37128448]
[-89.75775146 32.39846802]
[-80.97411346 44.55773544]
[-77.33483887 59.10956192]
[-79.36055756 73.97214508]
[-86.76146698 87.01923370]
[-98.48036957 96.38511658]
[-83.51248169 95.40406799]
[-68.54460144 94.42301941]
[-53.57671738 93.44197083]
[-38.60883331 92.46092224]
[-23.64094925 91.47988129]
[-8.67306423 90.49883270]
[-2.58915615 82.17442322]
[7.29323101 78.53515625]
[17.75207901 81.02751923]
[25.23199654 89.05503845]
[40.22842789 88.72782135]
[55.22485733 88.40059662]
[70.22129059 88.07337189]
[85.21772003 87.74614716]
[96.70838165 78.10433197]
[99.63474274 63.39255524]
[102.56109619 48.68077469]
[105.48744965 33.96899796]
[96.49977112 20.96910858]
[99.41897583 5.43676233]
[112.51316071 -3.41297436]
[128.01377869 -0.32971066]
[136.72457886 12.85730839]
[133.47760010 28.32445717]
[120.19922638 36.89535141]
[117.27287292 51.60713196]
[114.34651947 66.31890869]
[111.42016602 81.03069305]
[120.02381134 93.31797028]
[134.84922791 95.59982300]
[149.67465210 97.88167572]
[164.50007629 100.16352081]
[179.32550049 102.44537354]
[194.15092468 104.72722626]
[208.97634888 107.00907898]
[221.63722229 97.93492889]
[236.63980103 100.46024323]
[245.21258545 112.58636475]
[260.03799438 114.86821747]
[274.86343384 117.15007019]
[289.68884277 119.43191528]
[296.09555054 117.35732269]
[301.71969604 118.68473053]
[305.10546875 122.15028381]
[319.81726074 125.07663727]
[330.12066650 116.33160400]
[343.38818359 115.15908051]
[354.72845459 121.76529694]
[360.09082031 133.52996826]
[374.73526001 136.77656555]
[389.37969971 140.02314758]
[404.02413940 143.26974487]
[418.66857910 146.51634216]
[433.34756470 149.60299683]
[448.05935669 152.52935791]
[463.40582275 146.74851990]
[475.91207886 157.35632324]
[472.71276855 173.44036865]
[457.09906006 178.45475769]
[445.13299561 167.24113464]
[430.42120361 164.31477356]
[423.19256592 166.10836792]
[415.42199707 161.16078186]
[400.77755737 157.91418457]
[386.13311768 154.66758728]
[371.48867798 151.42100525]
[356.84423828 148.17440796]
[343.10025024 157.80728149]
[326.30429077 154.49011230]
[316.89089966 139.78842163]
[302.17910767 136.86206055]
[287.40701294 134.25733948]
[272.58157349 131.97549438]
[257.75616455 129.69363403]
[242.93074036 127.41178894]
[231.10832214 136.39878845]
[216.04072571 134.29586792]
[206.69448853 121.83449554]
[191.86907959 119.55265045]
[177.04365540 117.27079773]
[162.21823120 114.98894501]
[147.39280701 112.70709229]
[132.56738281 110.42524719]
[117.74195862 108.14339447]
[113.24533844 113.39044952]
[107.39012146 116.57481384]
[101.02730560 117.43048096]
[95.01622772 116.01629639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[23 33]
[24 32]
[25 31]
[26 30]
[70 83]
[71 82]
[72 81]
[73 80]
[84 139]
[85 138]
[86 137]
[87 136]
[88 135]
[89 134]
[90 133]
[93 130]
[94 129]
[95 128]
[96 127]
[99 126]
[100 125]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
