%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGGAGCCGGCGCGGCGGCGCGCACUCCCCGGCGGCCGCGGCGCCCUCGGGGCCCACGAUGAUGGCGGAGCAGGUGAAAUGCGCCUCGGCAGGGGUCAGCUCUGGAGCGGGCUCCGGGCCGGUGGUGAACGCGGAGCUGGAGGUGAAGAAGCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[72.90550232 105.22721863]
[60.01378632 112.89556885]
[47.12206650 120.56391907]
[34.23034668 128.23226929]
[21.33862686 135.90061951]
[8.44690704 143.56895447]
[21.99813843 150.00045776]
[25.61346054 164.55824280]
[16.64550591 176.58221436]
[1.66117501 177.26765442]
[-8.36706448 166.11264038]
[-6.09566355 151.28521729]
[-19.67304993 157.66130066]
[-33.25043488 164.03739929]
[-46.82782364 170.41349792]
[-56.03025818 183.28306580]
[-70.83937836 181.68959045]
[-84.41677094 188.06568909]
[-97.99415588 194.44177246]
[-111.57154083 200.81787109]
[-125.14892578 207.19396973]
[-131.62670898 213.70735168]
[-139.05400085 213.55911255]
[-152.75321960 219.66908264]
[-166.45242310 225.77903748]
[-169.53688049 240.98646545]
[-180.99368286 251.45170593]
[-196.41746521 253.15066528]
[-209.87747192 245.43005371]
[-216.19805908 231.25860596]
[-212.94882202 216.08554077]
[-201.37916565 205.74519348]
[-185.93785095 204.21365356]
[-172.56239319 212.07983398]
[-158.86317444 205.96986389]
[-145.16397095 199.85990906]
[-131.52502441 193.61657715]
[-117.94763184 187.24049377]
[-104.37024689 180.86439514]
[-90.79286194 174.48829651]
[-77.21547699 168.11221313]
[-68.98418427 155.69869995]
[-53.20391846 156.83610535]
[-39.62652969 150.46000671]
[-26.04914474 144.08392334]
[-12.47175694 137.70782471]
[0.77855885 130.67724609]
[13.67027855 123.00889587]
[26.56199837 115.34054565]
[39.45371628 107.67219543]
[52.34543610 100.00384521]
[65.23715973 92.33550262]
[71.48048401 78.69654846]
[68.85974884 63.92726898]
[66.23901367 49.15798569]
[63.61827850 34.38869858]
[60.99754333 19.61941719]
[46.65430450 14.30728149]
[36.95980072 2.60628057]
[34.44050217 -12.27725029]
[39.67426300 -26.32942963]
[51.16164398 -35.81129074]
[48.54090881 -50.58057404]
[45.92017365 -65.34985352]
[41.31822205 -73.30018616]
[43.39533234 -80.43267822]
[41.06327438 -95.25028992]
[38.73121262 -110.06789398]
[36.39915085 -124.88550568]
[21.61352348 -128.41447449]
[9.30680180 -137.33709717]
[1.35567009 -150.29270935]
[-1.02738178 -165.30569458]
[2.52104425 -180.08665466]
[11.45983887 -192.38163757]
[24.42590141 -200.31571960]
[39.44200134 -202.67901611]
[54.21829224 -199.11114502]
[66.50149536 -190.15618896]
[74.41851807 -177.17970276]
[76.76206207 -162.16050720]
[73.17475891 -147.38891602]
[64.20365143 -135.11750793]
[51.21675873 -127.21756744]
[53.54882050 -112.39995575]
[55.88087845 -97.58235168]
[58.21294022 -82.76473999]
[60.68945694 -67.97058868]
[63.31019211 -53.20130920]
[65.93093109 -38.43202209]
[79.97928619 -33.48135376]
[89.72827148 -22.08778572]
[92.48355103 -7.24612904]
[87.40671539 7.07597113]
[75.76682281 16.99868202]
[78.38755798 31.76796532]
[81.00829315 46.53725052]
[83.62902832 61.30653381]
[86.24976349 76.07582092]
[97.68257141 73.53389740]
[108.68488312 75.98134613]
[117.26207733 82.59455109]
[122.02069855 91.83098602]
[122.39017487 101.77404785]
[136.08938599 107.88401031]
[149.78858948 113.99397278]
[165.54367065 112.54888153]
[174.01559448 124.79941559]
[187.71481323 130.90937805]
[201.41401672 137.01933289]
[218.60534668 125.54961395]
[239.10227966 126.69099426]
[254.70326233 139.82125854]
[259.26519775 159.55421448]
[273.49444580 164.30067444]
[287.72369385 169.04713440]
[301.95291138 173.79359436]
[316.18215942 178.54005432]
[330.41137695 183.28651428]
[348.33441162 179.16514587]
[359.48425293 192.68894958]
[373.80337524 197.15687561]
[388.12249756 201.62478638]
[402.48455811 205.95280457]
[416.88815308 210.14047241]
[431.58416748 203.70565796]
[445.71017456 211.31060791]
[448.42993164 227.12144470]
[437.65707397 239.00944519]
[421.65557861 237.85516357]
[412.70046997 224.54406738]
[398.29687500 220.35638428]
[390.95895386 221.51458740]
[383.65460205 215.94392395]
[369.33544922 211.47601318]
[355.01632690 207.00808716]
[344.12890625 212.35200500]
[332.14065552 208.70861816]
[325.66491699 197.51574707]
[311.43569946 192.76928711]
[297.20645142 188.02282715]
[282.97723389 183.27636719]
[268.74798584 178.52990723]
[254.51875305 173.78344727]
[248.18199158 181.25302124]
[239.85441589 186.46665955]
[230.30972290 188.91879272]
[220.44116211 188.36135864]
[211.17793274 184.82888794]
[203.39765930 178.63679504]
[197.84329224 170.35343933]
[195.05216980 160.74787903]
[195.30406189 150.71855164]
[181.60484314 144.60858154]
[167.90563965 138.49862671]
[153.13041687 140.38075256]
[143.67863464 127.69318390]
[129.97941589 121.58322144]
[116.28021240 115.47325897]
[101.94290161 124.09339142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[12 46]
[13 45]
[14 44]
[15 43]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 36]
[24 35]
[25 34]
[53 99]
[54 98]
[55 97]
[56 96]
[57 95]
[62 90]
[63 89]
[64 88]
[66 87]
[67 86]
[68 85]
[69 84]
[104 159]
[105 158]
[106 157]
[108 155]
[109 154]
[110 153]
[114 144]
[115 143]
[116 142]
[117 141]
[118 140]
[119 139]
[121 136]
[122 135]
[123 134]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
