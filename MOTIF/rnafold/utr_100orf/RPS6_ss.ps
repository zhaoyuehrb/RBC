%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUUUUCCGUGGCGCCUCGGAGGCGUUCAGCUGCUUCAAGAUGAAGCUGAACAUCUCCUUCCCAGCCACUGGCUGCCAGAAACUCAUUGAAGUGGACGAUGAACGCAAACUUCGUACUUUCUAUGAGAAGCGUAUGGCCA\
) } def
/len { sequence length } bind def

/coor [
[127.94419861 130.07324219]
[127.63488007 145.07005310]
[120.51061249 158.27024841]
[108.14415741 166.75970459]
[93.26556396 168.66427612]
[79.15945435 163.56353760]
[68.93991852 152.58349609]
[64.86303711 138.14816284]
[67.82884216 123.44428253]
[77.18257904 111.71791840]
[90.86049652 105.55758667]
[76.25782013 102.12805176]
[61.65513992 98.69850922]
[47.05245972 95.26896667]
[32.44977951 91.83942413]
[22.35819054 104.55590057]
[7.79157448 111.59024048]
[-8.32656193 111.58672333]
[-22.78561974 104.59653473]
[-32.72743988 92.05752563]
[-36.21124649 76.49872589]
[-50.88574219 73.39080048]
[-65.56023407 70.28286743]
[-80.23472595 67.17494202]
[-94.90922546 64.06700897]
[-110.01306152 68.77707672]
[-120.86100769 58.57064819]
[-135.53550720 55.46271896]
[-150.20999146 52.35478592]
[-164.88449097 49.24685669]
[-179.55899048 46.13892746]
[-194.23347473 43.03099823]
[-208.90797424 39.92306900]
[-223.58247375 36.81513596]
[-232.86961365 48.92759705]
[-246.49630737 55.80334473]
[-261.75695801 56.07718658]
[-275.62158203 49.69475937]
[-285.33731079 37.92329407]
[-288.97509766 23.10002708]
[-285.81265259 8.16812515]
[-276.47787476 -3.90766978]
[-262.82421875 -10.72970009]
[-247.56259155 -10.94344616]
[-233.72322083 -4.50646925]
[-224.05392456 7.30316401]
[-220.47453308 22.14064407]
[-205.80004883 25.24857330]
[-191.12554932 28.35650253]
[-176.45104980 31.46443367]
[-161.77656555 34.57236481]
[-147.10206604 37.68029404]
[-132.42758179 40.78822327]
[-117.75308228 43.89615250]
[-103.69886017 38.96378708]
[-91.80129242 49.39251709]
[-77.12680054 52.50044632]
[-62.45230484 55.60837555]
[-47.77781296 58.71630478]
[-33.10331726 61.82423401]
[-25.14670944 50.41035461]
[-13.39597797 42.87944794]
[0.38343006 40.40237045]
[14.10615730 43.38771057]
[25.68252945 51.41481400]
[33.33675766 63.29271698]
[35.87931824 77.23674774]
[50.48199844 80.66629028]
[65.08467865 84.09583282]
[79.68735504 87.52536774]
[94.29003906 90.95491028]
[109.19963074 92.59928894]
[124.19873047 92.43452454]
[139.19783020 92.26975250]
[154.19691467 92.10498810]
[169.19601440 91.94022369]
[173.75199890 77.52840424]
[182.52757263 65.24704742]
[194.65307617 56.29158401]
[208.93356323 51.52892685]
[223.96650696 51.41356277]
[238.27957153 55.94420242]
[250.47486877 64.66515350]
[259.36535645 76.71211243]
[264.09051514 90.89780426]
[279.08963013 90.73303986]
[294.08871460 90.56827545]
[309.08779907 90.40351105]
[324.08691406 90.23874664]
[339.66201782 80.48279572]
[354.62551880 89.58785248]
[369.61740112 89.09363556]
[384.60925293 88.59941864]
[399.60110474 88.10520172]
[414.59295654 87.61098480]
[420.50891113 84.38802338]
[426.28353882 84.65558624]
[430.25103760 87.43898010]
[445.25012207 87.60374451]
[460.24923706 87.76850891]
[475.24832153 87.93327332]
[481.97518921 74.23246765]
[493.98574829 64.81390381]
[508.89526367 61.54763794]
[523.74346924 65.08219147]
[535.58227539 74.71578217]
[542.06103516 88.53564453]
[541.89337158 103.79784393]
[535.11260986 117.47205353]
[523.06506348 126.84324646]
[508.14276123 130.05078125]
[493.30856323 126.45777130]
[481.50781250 116.77764130]
[475.08355713 102.93236542]
[460.08444214 102.76760101]
[445.08535767 102.60283661]
[430.08627319 102.43807220]
[415.08715820 102.60283661]
[400.09530640 103.09705353]
[385.10345459 103.59127045]
[370.11160278 104.08548737]
[355.11975098 104.57970428]
[346.58282471 113.21807098]
[334.04556274 113.70826721]
[324.25167847 105.23783875]
[309.25256348 105.40260315]
[294.25347900 105.56736755]
[279.25439453 105.73213196]
[264.25527954 105.89690399]
[259.84289551 120.18296814]
[251.21917725 132.42231750]
[239.21841431 141.40907288]
[225.00831604 146.25303650]
[209.97647095 146.46794128]
[195.59480286 142.02014160]
[183.27549744 133.33319092]
[174.23225403 121.24757385]
[169.36077881 106.93932343]
[154.36167908 107.10408783]
[139.36259460 107.26885223]
[124.36349487 107.43361664]
[109.36439514 107.59838104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[72 142]
[73 141]
[74 140]
[75 139]
[76 138]
[85 129]
[86 128]
[87 127]
[88 126]
[89 125]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[98 117]
[99 116]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
