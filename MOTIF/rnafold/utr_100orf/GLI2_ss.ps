%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGCCACCCAGGACGAUGAGCGGCUGAGAUGGAGACGUCUGCCUCAGCCACUGCCUCCGAGAAGCAAGAAGCCAAAAGUGGGAUCCUGGAGGCCGCUGGCUUCCCCGACCCGGGUAAAAAGGCCUCUC\
) } def
/len { sequence length } bind def

/coor [
[105.32426453 354.96450806]
[97.35549164 341.83459473]
[97.03532410 326.47903442]
[104.44989014 313.02841187]
[117.60470581 305.10083008]
[117.24501038 290.10513306]
[116.88532257 275.10943604]
[115.62776184 260.16226196]
[113.47686005 245.31727600]
[111.32595062 230.47229004]
[109.17504883 215.62730408]
[99.69269562 204.14103699]
[105.37117767 189.37399292]
[103.22027588 174.52900696]
[93.73792267 163.04275513]
[99.41640472 148.27571106]
[97.26549530 133.43072510]
[82.74820709 130.38737488]
[70.41440582 121.10825348]
[62.89944077 106.94171906]
[62.06965256 90.32402039]
[47.45725250 86.93611908]
[32.26613617 91.35659027]
[21.61528206 80.94464111]
[7.00288534 77.55674744]
[-7.60951281 74.16885376]
[-22.22191048 70.78096008]
[-36.83430862 67.39305878]
[-51.44670486 64.00516510]
[-66.05910492 60.61727142]
[-81.25022125 65.03773499]
[-91.90107727 54.62579346]
[-106.51347351 51.23789597]
[-121.12586975 47.85000229]
[-135.73826599 44.46210861]
[-151.25906372 49.75711441]
[-163.42529297 38.76098251]
[-159.72137451 22.78559113]
[-143.95759583 18.26505280]
[-132.35037231 29.84971046]
[-117.73797607 33.23760605]
[-103.12557983 36.62549973]
[-88.51317596 40.01339340]
[-74.36724091 35.35060501]
[-62.67120743 46.00487518]
[-48.05881119 49.39276886]
[-33.44641113 52.78066635]
[-18.83401489 56.16856003]
[-4.22161770 59.55645370]
[10.39078045 62.94435120]
[25.00317764 66.33224487]
[39.14912033 61.66945648]
[50.84514999 72.32372284]
[65.45755005 75.71161652]
[76.12754822 65.16880035]
[72.91510773 50.51683044]
[62.40184402 38.69388962]
[67.23391724 24.60487556]
[64.02147675 9.95290565]
[54.72327042 -4.22382641]
[65.77197266 -17.08316422]
[81.18734741 -10.02606964]
[78.67344666 6.74046421]
[81.88588715 21.39243317]
[92.16937256 32.16736603]
[87.56707764 47.30438995]
[90.77951813 61.95635986]
[104.39009094 62.98191071]
[116.15856171 68.49183655]
[124.74488831 77.35532379]
[137.79481506 69.95940399]
[150.84472656 62.56348801]
[163.89465332 55.16757202]
[176.94456482 47.77165222]
[189.99449158 40.37573624]
[203.04440308 32.97981644]
[205.78111267 28.30108452]
[209.67787170 25.48682976]
[213.80140686 24.66433334]
[217.30906677 25.56014061]
[230.85687256 19.12141991]
[244.40467834 12.68269920]
[257.95248413 6.24397898]
[263.33129883 -8.37470722]
[277.16241455 -14.71149254]
[291.06594849 -9.49351501]
[304.61373901 -15.93223572]
[316.32406616 -28.19212532]
[331.34655762 -20.33333015]
[327.95355225 -3.72237873]
[311.05245972 -2.38443565]
[297.50466919 4.05428457]
[292.77062988 18.12995148]
[279.12295532 24.85272217]
[264.39120483 19.79177856]
[250.84339905 26.23049927]
[237.29559326 32.66921997]
[223.74778748 39.10794067]
[210.44032288 46.02973557]
[197.39041138 53.42565536]
[184.34048462 60.82157135]
[171.29057312 68.21749115]
[158.24064636 75.61341095]
[145.19071960 83.00933075]
[132.14080811 90.40524292]
[132.82585144 106.89598846]
[125.56288910 121.71703339]
[112.11048126 131.27981567]
[114.26139069 146.12480164]
[123.89759064 158.67288208]
[118.06526184 172.37811279]
[120.21616364 187.22309875]
[129.85235596 199.77116394]
[124.02003479 213.47639465]
[126.17093658 228.32138062]
[128.32183838 243.16636658]
[130.47274780 258.01135254]
[141.78738403 248.16354370]
[156.58358765 250.62774658]
[164.09587097 263.61102295]
[158.85841370 277.66693115]
[144.68190002 282.56863403]
[131.88101196 274.74975586]
[132.24069214 289.74545288]
[132.60038757 304.74111938]
[146.12016296 312.02890015]
[154.17108154 325.10858154]
[154.58750916 340.46182251]
[147.25741577 353.95867920]
[134.15255737 361.96856689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 125]
[6 124]
[7 123]
[8 117]
[9 116]
[10 115]
[11 114]
[13 112]
[14 111]
[16 109]
[17 108]
[21 54]
[22 53]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[32 43]
[33 42]
[34 41]
[35 40]
[55 67]
[56 66]
[58 64]
[59 63]
[70 105]
[71 104]
[72 103]
[73 102]
[74 101]
[75 100]
[76 99]
[80 98]
[81 97]
[82 96]
[83 95]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
