%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGGUGUCUAUCGCGUGUACCGAGCAGAACCUUCGCAGCCGGAGCAGUGAGGACCGUCUGUGUGGACCCCGGCCGGGCCCCGGGGGCGGUAAUGGUG\
) } def
/len { sequence length } bind def

/coor [
[91.20434570 135.89576721]
[94.45751953 121.25435638]
[84.27122498 132.26522827]
[74.08493042 143.27610779]
[63.89863586 154.28698730]
[60.20676041 169.67141724]
[45.88421631 173.75968933]
[35.69792175 184.77056885]
[25.51162910 195.78144836]
[24.69594955 211.80374146]
[11.57717323 221.03831482]
[-3.78109860 216.40118408]
[-9.59731293 201.44955444]
[-1.40976858 187.65304565]
[14.50075150 185.59515381]
[24.68704414 174.58427429]
[34.87333679 163.57339478]
[37.83662033 148.97653198]
[52.88776016 144.10069275]
[63.07405090 133.08981323]
[73.26034546 122.07894135]
[83.44664001 111.06806183]
[72.98545837 121.81812286]
[58.81540680 126.73844147]
[43.94314575 124.78500366]
[31.52435112 116.37230682]
[24.19409943 103.28538513]
[23.50776291 88.30110168]
[29.61096954 74.59887695]
[41.20870972 65.08612823]
[55.84012222 61.78131104]
[70.40063477 65.38566589]
[81.80074310 75.13439178]
[87.62145996 88.95877075]
[82.15168762 74.99160767]
[76.68191528 61.02444839]
[71.21214294 47.05728912]
[65.74237061 33.09012604]
[60.27259827 19.12296486]
[48.03580475 9.09443569]
[50.59932709 -5.57790661]
[45.12955093 -19.54506683]
[31.98506165 -29.35090256]
[34.17337418 -45.60338974]
[49.44334412 -51.58336258]
[62.08653259 -41.13914108]
[59.09671402 -25.01484108]
[64.56648254 -11.04767990]
[76.41204834 -2.01817417]
[74.23976135 13.65319252]
[79.70953369 27.62035370]
[85.17930603 41.58751297]
[90.64907837 55.55467606]
[96.11885071 69.52183533]
[101.58862305 83.48899841]
[114.29834747 91.45536804]
[129.25302124 90.29010773]
[144.20768738 89.12484741]
[159.16235352 87.95959473]
[174.11701965 86.79433441]
[189.07170105 85.62907410]
[204.02636719 84.46382141]
[217.18377686 75.67784882]
[230.47364807 82.40306091]
[245.42831421 81.23780823]
[253.91421509 77.39305878]
[260.86495972 80.27625275]
[275.84863281 79.57665253]
[289.27291870 71.20412445]
[302.34719849 78.33940125]
[317.33087158 77.63979340]
[332.31454468 76.94018555]
[344.13684082 66.09522247]
[359.96392822 68.71878052]
[367.65463257 82.79828644]
[361.30929565 97.53315735]
[345.79553223 101.62005615]
[333.01416016 91.92386627]
[318.03048706 92.62347412]
[303.04681396 93.32307434]
[290.69427490 101.64556122]
[276.54824829 94.56032562]
[261.56457520 95.25993347]
[246.59358215 96.19247437]
[231.63890076 97.35773468]
[219.55116272 106.06035614]
[205.19161987 99.41848755]
[190.23695374 100.58374786]
[175.28228760 101.74900055]
[160.32762146 102.91426086]
[145.37294006 104.07952118]
[130.41827393 105.24477386]
[115.46360016 106.41003418]
[130.35244751 108.23270416]
[142.23744202 117.38403320]
[147.80491638 131.31254578]
[145.50260925 146.13479614]
[135.97241211 157.71820068]
[121.87144470 162.83317566]
[107.13123322 160.05361938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[7 17]
[8 16]
[9 15]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[41 48]
[42 47]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[64 85]
[65 84]
[67 83]
[68 82]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
