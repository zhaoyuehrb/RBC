%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAGUAAAUAUAAGGAGAUACUCUUGCUAACCAGCCUGGAUAACAUCACCGAUGAGGAACUGGAUAGGUUUAAGUGCUUUCUUCCAGAUGAGUUUA\
) } def
/len { sequence length } bind def

/coor [
[126.26982117 259.74151611]
[134.02085876 246.73382568]
[145.57713318 236.94958496]
[140.10736084 222.98242188]
[134.63758850 209.01525879]
[129.16781616 195.04811096]
[123.69804382 181.08094788]
[118.22827148 167.11378479]
[112.75849152 153.14662170]
[107.28871918 139.17945862]
[99.21492767 139.84393311]
[91.17357635 138.86193848]
[83.49696350 136.27403259]
[76.50230408 132.18716431]
[70.47864532 126.77023315]
[65.67490387 120.24706268]
[62.28958511 112.88722229]
[47.43628693 114.97994995]
[32.58298874 117.07267761]
[17.72969055 119.16541290]
[2.87639213 121.25814056]
[-11.96427536 129.45515442]
[-23.94924545 117.46361542]
[-15.74411964 102.62743378]
[0.78366196 106.40483856]
[15.63696098 104.31211090]
[30.49025917 102.21938324]
[45.34355927 100.12664795]
[60.19685745 98.03392029]
[70.32920074 73.39550018]
[93.72086334 60.64611816]
[94.18736267 45.65337372]
[94.65386200 30.66062737]
[87.34948730 16.62650299]
[95.47885895 4.14601564]
[95.94535828 -10.84672832]
[96.41185760 -25.83947182]
[96.87834930 -40.83221817]
[96.87834930 -55.83221817]
[96.41185760 -70.82495880]
[95.94535828 -85.81770325]
[84.15011597 -76.55097198]
[69.22563171 -78.05419159]
[59.51528931 -89.48700714]
[60.44756699 -104.45800781]
[71.50128174 -114.59779358]
[86.49696350 -114.23782349]
[97.05168915 -103.57865906]
[99.37516022 -118.39761353]
[101.69863129 -133.21656799]
[104.02210999 -148.03552246]
[100.50219727 -164.62005615]
[115.46418762 -172.59346008]
[127.26787567 -160.42344666]
[118.84106445 -145.71205139]
[116.51759338 -130.89309692]
[114.19411469 -116.07414246]
[111.87064362 -101.25518799]
[110.93810272 -86.28420258]
[111.40460205 -71.29145813]
[111.87109375 -56.29871368]
[114.80934906 -52.32915497]
[115.16179657 -46.43122864]
[111.87109375 -40.36571884]
[111.40460205 -25.37297440]
[110.93810272 -10.38023090]
[110.47160339 4.61251354]
[117.80934143 17.57425880]
[109.64660645 31.12712669]
[109.18010712 46.11986923]
[108.71360779 61.11261368]
[119.63713837 65.32236481]
[128.86613464 72.52452087]
[135.60420227 82.09759521]
[139.26991272 93.21550751]
[139.54693604 104.91887665]
[136.41136169 116.19777679]
[130.13377380 126.07893372]
[121.25588226 133.70968628]
[126.72565460 147.67684937]
[132.19543457 161.64401245]
[137.66520691 175.61117554]
[143.13497925 189.57833862]
[148.60475159 203.54548645]
[154.07452393 217.51264954]
[159.54429626 231.47981262]
[174.67161560 230.81431580]
[189.19467163 235.09910583]
[201.53813171 243.86938477]
[210.36303711 256.17385864]
[214.71215820 270.67776489]
[214.11370850 285.80789185]
[208.63262939 299.92300415]
[198.86344910 311.49200439]
[185.86585999 319.25997925]
[171.04974365 322.38430786]
[156.02224731 320.52612305]
[142.41343689 313.88693237]
[131.69947815 303.18692017]
[125.04257202 289.58676147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[31 71]
[32 70]
[33 69]
[35 67]
[36 66]
[37 65]
[38 64]
[39 61]
[40 60]
[41 59]
[48 58]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
