%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUGGGCGAGGCCGCCCCUAUCCCAGCCGCACCGGUCCUUCCCGGCACACGCGAGGCUCCCAUGGCUCUGGCGGUGGCCCCGUGGGGGCGACAGUGGGAAGAGGCCCGCGCCCUGGGCCGGGCAGUCAGGAUGCUGCAGCGCCUAGAAGAGCAAUGCGUCG\
) } def
/len { sequence length } bind def

/coor [
[208.99192810 664.87207031]
[210.92535400 655.69964600]
[216.97189331 648.35675049]
[213.55409241 633.75134277]
[210.13629150 619.14593506]
[206.71849060 604.54046631]
[203.30068970 589.93505859]
[199.88288879 575.32958984]
[196.46508789 560.72418213]
[193.04728699 546.11877441]
[180.29644775 538.50616455]
[176.62225342 523.74285889]
[184.69349670 510.42022705]
[181.27569580 495.81478882]
[170.84196472 485.18527222]
[175.23132324 469.98513794]
[171.81352234 455.37969971]
[169.45404053 453.78543091]
[167.59941101 451.13873291]
[166.66194153 447.63287354]
[166.97418213 443.60952759]
[168.73889160 439.52600098]
[166.44914246 424.70181274]
[164.15940857 409.87759399]
[161.86965942 395.05340576]
[149.73898315 386.48706055]
[147.20568848 371.48583984]
[156.27310181 358.82012939]
[153.98335266 343.99591064]
[144.39392090 332.59890747]
[149.93395996 317.77935791]
[147.64422607 302.95516968]
[143.49600220 296.79598999]
[145.45542908 287.82531738]
[143.45007324 272.95999146]
[141.44470215 258.09463501]
[139.43934631 243.22929382]
[137.43397522 228.36393738]
[135.42861938 213.49859619]
[133.42324829 198.63325500]
[123.81302643 194.80404663]
[116.62118530 187.25556946]
[113.20856476 177.31816101]
[114.26159668 166.78259277]
[119.65545654 157.57740784]
[128.46455383 151.41587830]
[127.31630707 136.45988464]
[126.16806793 121.50389862]
[107.38000488 132.45211792]
[86.20256805 129.63696289]
[71.46340179 114.70339203]
[69.01693726 94.24842072]
[59.25338364 82.86101532]
[49.48983002 71.47360229]
[34.63339615 66.03329468]
[32.22302246 51.33501816]
[22.45947075 39.94760895]
[12.58729935 28.65423965]
[2.60741377 17.45594025]
[-7.37247181 6.25764275]
[-23.24199486 3.90439653]
[-31.17170334 -10.04190350]
[-25.07860374 -24.88284874]
[-9.63679886 -29.23373795]
[3.30807853 -19.75693893]
[3.82582664 -3.72224283]
[13.80571175 7.47605562]
[23.78559685 18.67435455]
[30.61539268 21.58930397]
[33.84687805 30.18405724]
[43.61043167 41.57146454]
[57.76850891 46.19726944]
[60.87723541 61.71005249]
[70.64079285 73.09745789]
[80.40434265 84.48486328]
[94.74797821 80.09623718]
[96.46823120 65.19520569]
[90.36463165 50.59874725]
[99.51049042 38.84278870]
[101.23074341 23.94175720]
[102.95098877 9.04072571]
[104.67124176 -5.86030579]
[106.39149475 -20.76133728]
[102.20153046 -37.18938065]
[116.82766724 -45.76332855]
[129.11546326 -34.08229828]
[121.29252625 -19.04108620]
[119.57227325 -4.14005423]
[117.85202026 10.76097679]
[116.13177490 25.66200829]
[114.41152191 40.56303787]
[120.63816071 54.09367752]
[111.36926270 66.91545868]
[109.64900970 81.81649017]
[123.02772522 88.60102844]
[136.40524292 95.38497162]
[147.41032410 85.19242096]
[158.41540527 74.99986267]
[169.42048645 64.80730438]
[180.42556763 54.61474991]
[180.78039551 38.81444550]
[192.26136780 27.95337868]
[208.05703735 28.47523117]
[218.79611206 40.07039642]
[218.10728455 55.85966873]
[206.39923096 66.47554779]
[190.61811829 65.61982727]
[179.61303711 75.81238556]
[168.60797119 86.00494385]
[157.60289001 96.19750214]
[146.59780884 106.39005280]
[141.12405396 120.35565948]
[142.27229309 135.31164551]
[143.42053223 150.26763916]
[159.34170532 162.45155334]
[161.21635437 182.10726929]
[148.28860474 196.62788391]
[150.29396057 211.49324036]
[152.29933167 226.35858154]
[154.30468750 241.22392273]
[156.31004333 256.08926392]
[158.31541443 270.95462036]
[160.32077026 285.81997681]
[162.46842957 300.66543579]
[164.75816345 315.48962402]
[174.51136780 327.94699097]
[168.80755615 341.70617676]
[171.09730530 356.53039551]
[183.56364441 365.86999512]
[185.67457581 380.93646240]
[176.69387817 392.76364136]
[178.98361206 407.58786011]
[181.27334595 422.41207886]
[183.56309509 437.23626709]
[186.41896057 451.96191406]
[189.83676147 466.56732178]
[200.51495361 478.24151611]
[195.88113403 492.39697266]
[199.29893494 507.00241089]
[212.44363403 515.36035156]
[215.70170593 530.22100830]
[207.65270996 542.70092773]
[211.07051086 557.30639648]
[214.48831177 571.91180420]
[217.90612793 586.51727295]
[221.32392883 601.12268066]
[224.74172974 615.72808838]
[228.15953064 630.33355713]
[231.57733154 644.93896484]
[247.19329834 659.56958008]
[240.56416321 679.08850098]
[244.81520081 693.47351074]
[249.20382690 707.81713867]
[253.72964478 722.11810303]
[264.27319336 735.39477539]
[254.43412781 749.20159912]
[238.44313049 743.56915283]
[239.42869568 726.64385986]
[234.90289307 712.34295654]
[229.86308289 706.88916016]
[230.43019104 697.72454834]
[226.17915344 683.33953857]
[217.71752930 680.39337158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[13 139]
[14 138]
[16 136]
[17 135]
[22 134]
[23 133]
[24 132]
[25 131]
[28 128]
[29 127]
[31 125]
[32 124]
[34 123]
[35 122]
[36 121]
[37 120]
[38 119]
[39 118]
[40 117]
[46 114]
[47 113]
[48 112]
[52 75]
[53 74]
[54 73]
[56 71]
[57 70]
[58 68]
[59 67]
[60 66]
[76 94]
[77 93]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[151 162]
[152 161]
[153 159]
[154 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
