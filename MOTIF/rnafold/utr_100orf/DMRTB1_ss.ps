%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGCUCUGCAGCUCCCAGAGGUGGUGGUUGUGUUACGAAGGCUGACCCUGCCAAUGGCCGACAAAAUGGUGCGCACCCCCAAGUGCUCGAGAUGCAGGAACCAUGGCUUCCUGGUGCCCGUCAAGGGACACGCGGGCAAAUGCCGCUGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[222.64619446 221.00157166]
[216.86709595 217.01622009]
[212.16110229 211.78245544]
[208.79260254 205.58163452]
[206.95385742 198.74972534]
[206.75390625 191.65917969]
[208.21224976 184.69862366]
[195.69841003 176.42797852]
[183.18457031 168.15731812]
[170.67073059 159.88665771]
[158.15689087 151.61599731]
[145.64305115 143.34535217]
[130.75906372 142.78271484]
[123.51235962 128.71871948]
[110.99851990 120.44806671]
[98.48468018 112.17740631]
[84.03561401 108.14942932]
[69.04778290 108.75341797]
[54.05994415 109.35740662]
[43.37453079 120.69141388]
[28.16612816 121.09043884]
[17.42674065 110.83367920]
[2.43890476 111.43766785]
[-12.54893017 112.04165649]
[-27.53676605 112.64564514]
[-42.52460098 113.24963379]
[-51.02991104 116.73877716]
[-57.81969070 113.71179962]
[-72.81665039 114.01385498]
[-87.81360626 114.31591034]
[-102.81056213 114.61796570]
[-117.80752563 114.92002106]
[-126.38137054 118.23719025]
[-133.10882568 115.07410431]
[-148.10882568 115.07410431]
[-163.10882568 115.07410431]
[-175.42404175 125.35587311]
[-191.11154175 121.99698639]
[-198.13719177 107.57410431]
[-191.11154175 93.15121460]
[-175.42404175 89.79233551]
[-163.10882568 100.07410431]
[-148.10882568 100.07410431]
[-133.10882568 100.07410431]
[-118.10958099 99.92306519]
[-103.11262512 99.62100983]
[-88.11566162 99.31895447]
[-73.11870575 99.01689911]
[-58.12174606 98.71484375]
[-43.12858963 98.26179504]
[-28.14075470 97.65780640]
[-13.15291977 97.05381775]
[1.83491564 96.44982910]
[16.82275009 95.84584045]
[26.70199013 84.75817871]
[41.89318085 83.93214417]
[53.45595551 94.36957550]
[68.44379425 93.76558685]
[83.43162537 93.16159821]
[90.80044556 80.09635162]
[83.56355286 66.95758057]
[68.15108490 65.15886688]
[56.76222992 54.61972046]
[53.77624130 39.39265442]
[60.34128571 25.33279037]
[73.93297577 17.84643173]
[89.32502747 19.81223488]
[100.59888458 30.47430992]
[103.41950989 45.73287201]
[96.70233154 59.72068787]
[103.93921661 72.85946655]
[111.31636810 71.50755310]
[116.35164642 57.37793732]
[126.07067108 68.80372620]
[133.44781494 67.45181274]
[135.55535889 52.60060883]
[137.66288757 37.74940109]
[139.77043152 22.89819717]
[130.07695007 10.41572762]
[132.13192749 -5.25438976]
[144.71618652 -14.81535244]
[160.36370850 -12.59481144]
[169.79109192 0.08982708]
[167.40522766 15.71299076]
[154.62162781 25.00573540]
[152.51409912 39.85694122]
[150.40655518 54.70814514]
[148.29902649 69.55934906]
[137.26515198 84.61661530]
[122.96900177 94.84847260]
[106.75533295 99.66356659]
[119.26917267 107.93421936]
[131.78302002 116.20487976]
[147.56207275 117.35908508]
[153.91369629 130.83149719]
[166.42753601 139.10215759]
[178.94139099 147.37281799]
[191.45523071 155.64347839]
[203.96907043 163.91412354]
[216.48291016 172.18478394]
[239.34893799 164.69174194]
[260.23123169 176.13766479]
[266.09164429 198.96168518]
[279.89132690 204.84118652]
[293.69100952 210.72068787]
[307.54922485 216.46093750]
[321.46450806 222.06135559]
[335.37979126 227.66177368]
[349.29507446 233.26219177]
[367.25976562 224.38558960]
[385.71099854 231.38780212]
[393.03494263 249.38711548]
[407.26300049 254.13713074]
[421.49105835 258.88714600]
[435.71908569 263.63717651]
[449.99426270 268.24368286]
[464.31506348 272.70623779]
[478.63586426 277.16879272]
[493.00088501 281.48690796]
[507.40866089 285.66015625]
[521.81646729 289.83343506]
[536.50598145 283.38391113]
[550.63964844 290.97470093]
[553.37518311 306.78280640]
[542.61425781 318.68161011]
[526.61163330 317.54333496]
[517.64318848 304.24121094]
[503.23541260 300.06793213]
[488.82763672 295.89468384]
[481.48577881 297.06118774]
[474.17333984 291.48959351]
[459.85250854 287.02703857]
[445.53170776 282.56451416]
[438.16784668 283.58291626]
[430.96908569 277.86520386]
[416.74102783 273.11520386]
[402.51296997 268.36517334]
[388.28494263 263.61517334]
[380.59826660 270.56610107]
[370.63336182 273.69470215]
[360.19223022 272.36422729]
[351.19277954 266.75079346]
[345.31652832 257.82345581]
[343.69467163 247.17749023]
[329.77935791 241.57707214]
[315.86407471 235.97663879]
[301.94879150 230.37622070]
[294.52685547 230.79879761]
[287.81152344 224.52037048]
[274.01184082 218.64086914]
[260.21212769 212.76136780]
[255.42073059 217.74046326]
[249.58726501 221.47857666]
[243.02706909 223.76350403]
[236.09712219 224.46189880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[12 95]
[14 93]
[15 92]
[16 91]
[17 59]
[18 58]
[19 57]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[34 44]
[35 43]
[36 42]
[60 71]
[61 70]
[75 88]
[76 87]
[77 86]
[78 85]
[103 151]
[104 150]
[105 149]
[106 147]
[107 146]
[108 145]
[109 144]
[112 138]
[113 137]
[114 136]
[115 135]
[116 133]
[117 132]
[118 131]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
