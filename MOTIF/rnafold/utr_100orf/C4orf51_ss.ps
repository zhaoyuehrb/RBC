%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCACACUACUUCUACUUGACUCCACAAAUUCUUCUGCCCUUUAGCCCUCUUACUUCUCAAGAGUUUGAUCUGAUCAGACGCAAGGCUGGAGCAUCUU\
) } def
/len { sequence length } bind def

/coor [
[-87.79291534 261.51708984]
[-105.57232666 255.88169861]
[-121.24708557 245.79330444]
[-132.09822083 256.14959717]
[-142.94934082 266.50588989]
[-153.80047607 276.86221313]
[-148.63633728 291.18881226]
[-149.75227356 306.37677002]
[-156.95497131 319.79470825]
[-168.99650574 329.11788940]
[-183.79060364 332.73098755]
[-198.77410889 330.00802612]
[-211.35102844 321.42074585]
[-219.34234619 308.45700073]
[-221.36351013 293.36282349]
[-217.06433105 278.75332642]
[-207.18969727 267.15972900]
[-193.45042419 260.59069824]
[-178.22692871 260.18435669]
[-164.15678406 266.01107788]
[-153.30564880 255.65476990]
[-142.45451355 245.29846191]
[-131.60337830 234.94216919]
[-138.05545044 224.93911743]
[-142.73559570 213.99058533]
[-145.50952148 202.40769958]
[-146.29711914 190.51980591]
[-145.07481384 178.66517639]
[-141.87619019 167.18130493]
[-136.79115295 156.39533997]
[-129.96333313 146.61474609]
[-121.58609009 138.11857605]
[-111.89698792 131.14945984]
[-101.17108917 125.90669250]
[-89.71311951 122.54055023]
[-77.84885406 121.14797211]
[-65.91579437 121.76977539]
[-54.25361633 124.38943481]
[-43.19449615 128.93356323]
[-33.05361557 135.27394104]
[-24.12021828 143.23110962]
[-16.64933395 152.57951355]
[-3.35916376 145.62455750]
[9.93100643 138.66960144]
[23.22117615 131.71464539]
[36.51134872 124.75969696]
[49.80151749 117.80474091]
[63.09168625 110.84979248]
[76.38185883 103.89483643]
[81.23894501 79.50509644]
[107.87878418 69.36358643]
[114.62621307 55.96685791]
[121.37364197 42.57013321]
[128.12106323 29.17340660]
[121.77807617 14.88003349]
[126.15631866 -0.13212763]
[139.18852234 -8.77479362]
[154.72128296 -6.96716070]
[165.42050171 4.43726110]
[166.23432922 20.05365372]
[156.77850342 32.50843048]
[141.51779175 35.92083359]
[134.77037048 49.31755829]
[128.02293396 62.71428299]
[121.27551270 76.11100769]
[129.82600403 88.43534088]
[144.73719788 86.80555725]
[159.64839172 85.17578125]
[174.55958557 83.54599762]
[189.47077942 81.91621399]
[204.38198853 80.28643036]
[219.29318237 78.65664673]
[234.38159180 70.92514801]
[245.98783875 83.28360748]
[237.32527161 97.85743713]
[220.92295837 93.56784821]
[206.01176453 95.19763184]
[191.10057068 96.82740784]
[176.18937683 98.45719147]
[161.27816772 100.08697510]
[146.36697388 101.71675873]
[131.45578003 103.34654236]
[125.60944366 115.80534363]
[115.43050385 124.02660370]
[103.33955383 126.80839539]
[91.91287231 124.15871429]
[83.33681488 117.18500519]
[70.04663849 124.13996124]
[56.75646973 131.09490967]
[43.46630096 138.04986572]
[30.17613029 145.00482178]
[16.88595963 151.95977783]
[3.59578919 158.91473389]
[-9.69438076 165.86967468]
[-5.21097660 184.06048584]
[-5.64674425 202.78005981]
[-10.96578026 220.72239685]
[-20.79167747 236.63711548]
[-34.43415070 249.41667175]
[-50.93754196 258.17337036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[6 20]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[49 87]
[51 65]
[52 64]
[53 63]
[54 62]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
