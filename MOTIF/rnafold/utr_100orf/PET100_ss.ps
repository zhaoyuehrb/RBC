%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGUCGGCUUUGGGCGGAACUGGCUUUGUUGACCGGGAGAAACGAGAUGGGGGUGAAGCUGGAGAUAUUUCGGAUGAUAAUCUACCUCACUUUCCCUGUGGCUAUGUUCUGGGUUUCCAAUCAGGCCGAGUGGUUUGAGGACGAUG\
) } def
/len { sequence length } bind def

/coor [
[70.91248322 582.50457764]
[55.82875443 586.62951660]
[41.64417267 580.04681396]
[35.05625534 565.86468506]
[39.17562485 550.77941895]
[52.05723572 541.91387939]
[53.31240463 526.96649170]
[54.56756973 512.01910400]
[55.82273865 497.07168579]
[49.17756653 483.74160767]
[58.04249954 470.63726807]
[59.29766464 455.68988037]
[60.55283356 440.74249268]
[61.80800247 425.79510498]
[63.06316757 410.84771729]
[64.31833649 395.90029907]
[65.57350159 380.95291138]
[66.82867432 366.00552368]
[59.50840759 358.76095581]
[57.37443161 348.46026611]
[61.37808228 338.49456787]
[70.40828705 332.28308105]
[72.28829193 317.40136719]
[74.16828918 302.51965332]
[75.89234161 287.61904907]
[77.46027374 272.70123291]
[79.02819824 257.78338623]
[80.59612274 242.86557007]
[82.16405487 227.94773865]
[75.79949951 214.48141479]
[84.93692780 201.56561279]
[86.50485229 186.64778137]
[88.07277679 171.72996521]
[89.64070892 156.81213379]
[90.73928070 141.85241699]
[91.36741638 126.86557007]
[91.99555206 111.87873077]
[85.68862152 99.40017700]
[93.01760864 87.49314117]
[93.64574432 72.50629425]
[94.27388000 57.51945114]
[94.90201569 42.53261185]
[80.92503357 36.71286392]
[69.80338287 26.48150063]
[62.86629486 13.08758163]
[60.93390274 -1.84345746]
[64.22028351 -16.50705719]
[72.30996704 -29.13763618]
[84.21031952 -38.22117615]
[98.47334290 -42.67668915]
[99.10147858 -57.66353226]
[99.72960663 -72.65037537]
[100.35774231 -87.63721466]
[100.98587799 -102.62406158]
[101.61401367 -117.61090088]
[101.77108765 -132.61007690]
[101.45695496 -147.60679626]
[101.14282227 -162.60350037]
[97.81635284 -171.18342590]
[100.98245239 -177.91680908]
[100.98245239 -192.91680908]
[93.24515533 -206.71697998]
[100.98245239 -219.44425964]
[100.98245239 -234.44425964]
[100.98245239 -249.44425964]
[100.98245239 -264.44424438]
[92.40866089 -274.13806152]
[92.75477600 -286.67294312]
[101.28646851 -295.30661011]
[101.60060883 -310.30334473]
[101.91474152 -325.30004883]
[102.22888184 -340.29675293]
[91.11052704 -351.52874756]
[91.27443695 -367.33218384]
[102.62335205 -378.33117676]
[118.42417908 -378.00018311]
[129.30255127 -366.53561401]
[128.80453491 -350.73916626]
[117.22559357 -339.98260498]
[116.91145325 -324.98590088]
[116.59732056 -309.98919678]
[116.28318024 -294.99249268]
[125.56536102 -280.13253784]
[115.98245239 -264.44424438]
[115.98245239 -249.44425964]
[115.98245239 -234.44425964]
[115.98245239 -219.44425964]
[123.71974945 -206.71697998]
[115.98245239 -192.91680908]
[115.98245239 -177.91680908]
[116.13952637 -162.91763306]
[116.45366669 -147.92092896]
[116.76779938 -132.92420959]
[119.10839844 -130.20402527]
[120.21240234 -126.19164276]
[119.47651672 -121.49752808]
[116.60086060 -116.98276520]
[115.97272491 -101.99592590]
[115.34458923 -87.00907898]
[114.71645355 -72.02223969]
[114.08831787 -57.03539658]
[113.46018219 -42.04855347]
[127.30035400 -36.41516876]
[138.39888000 -26.36769104]
[145.40328979 -13.10448170]
[147.45112610 1.78268874]
[144.27610779 16.49966431]
[136.24258423 29.26612854]
[124.30379486 38.53097534]
[109.88885498 43.16074371]
[109.26071930 58.14758682]
[108.63258362 73.13442993]
[108.00444794 88.12126923]
[114.31137848 100.59982300]
[106.98239136 112.50685883]
[106.35425568 127.49370575]
[105.72612000 142.48054504]
[108.21390533 147.22009277]
[108.55442047 151.95933533]
[107.11854553 155.86526489]
[104.55853271 158.38005066]
[102.99060822 173.29788208]
[101.42268372 188.21571350]
[99.85475159 203.13354492]
[106.10715485 217.66688538]
[97.08187866 229.51567078]
[95.51395416 244.43348694]
[93.94602966 259.35131836]
[92.37809753 274.26916504]
[90.81017303 289.18698120]
[93.03505707 298.11614990]
[89.05001068 304.39962769]
[87.17001343 319.28137207]
[85.29000854 334.16308594]
[93.97368622 352.30700684]
[81.77606201 367.26068115]
[80.52089691 382.20809937]
[79.26573181 397.15548706]
[78.01055908 412.10287476]
[76.75539398 427.05026245]
[75.50022888 441.99765015]
[74.24505615 456.94503784]
[72.98989105 471.89245605]
[79.54528809 486.29165649]
[70.77013397 498.32684326]
[69.51496124 513.27423096]
[68.25979614 528.22161865]
[67.00463104 543.16900635]
[78.22734833 554.05871582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 148]
[7 147]
[8 146]
[9 145]
[11 143]
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[22 134]
[23 133]
[24 132]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[31 124]
[32 123]
[33 122]
[34 121]
[35 117]
[36 116]
[37 115]
[39 113]
[40 112]
[41 111]
[42 110]
[50 102]
[51 101]
[52 100]
[53 99]
[54 98]
[55 97]
[56 93]
[57 92]
[58 91]
[60 90]
[61 89]
[63 87]
[64 86]
[65 85]
[66 84]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
