%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCGCGGCCGCGCGGAGGAAGCGAAGGAGGCGGGAGCGGAGACCUCGCUGCGCUCAUGGCGUCGCCCGGGCAUUCAGAUUUGGGAGAAGUAGCCCCAGAAAUAAAAGCAUCAGAGAGACGAACAGCUGUGGCCAUUGCAGAUUUGGAAUGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[114.33891296 209.94143677]
[128.99790955 206.76116943]
[142.78788757 212.66394043]
[136.70501709 198.95268250]
[130.62213135 185.24142456]
[124.53925323 171.53016663]
[118.45636749 157.81890869]
[112.37348938 144.10765076]
[106.29061127 130.39639282]
[100.20773315 116.68513489]
[88.89253998 115.50408936]
[79.59780884 106.64855957]
[64.70442963 104.86328888]
[50.08147049 110.90312195]
[38.36553955 101.70603943]
[23.47216034 99.92076874]
[8.57877922 98.13549042]
[-3.77186227 107.62756348]
[-18.85043716 105.60488129]
[-27.82356262 93.77193451]
[-42.71694565 91.98666382]
[-57.33990479 98.02649689]
[-69.05583191 88.82941437]
[-83.94921112 87.04414368]
[-92.56615448 97.84185028]
[-105.29753113 102.91828156]
[-118.76515961 101.04197693]
[-129.45233154 92.81123352]
[-134.62210083 80.46939850]
[-149.47703552 78.38836670]
[-164.33198547 76.30733490]
[-179.20687866 74.37408447]
[-194.10025024 72.58881378]
[-208.99363708 70.80353546]
[-223.88702393 69.01826477]
[-238.79740906 67.38114166]
[-253.72334290 65.89234161]
[-268.64929199 64.40353394]
[-279.71313477 75.45455170]
[-295.29638672 76.75690460]
[-308.04110718 67.69565582]
[-311.92962646 52.54925919]
[-305.12588501 38.46936798]
[-290.84243774 32.10408401]
[-275.82345581 36.45889664]
[-267.16046143 49.47760010]
[-252.23454285 50.96640396]
[-237.30860901 52.45521164]
[-230.30239868 49.97623062]
[-222.10174561 54.12488556]
[-207.20835876 55.91015625]
[-192.31498718 57.69543076]
[-177.42160034 59.48070145]
[-170.36749268 57.14151001]
[-162.25094604 61.45239258]
[-147.39601135 63.53342438]
[-132.54106140 65.61445618]
[-121.55265045 53.45255661]
[-105.32173920 50.18471527]
[-90.18271637 57.28757477]
[-82.16394043 72.15076447]
[-67.27056122 73.93603516]
[-53.71287155 67.76850891]
[-40.93167114 77.09328461]
[-26.03829002 78.87855530]
[-14.52272797 69.50159454]
[0.60671055 71.09995270]
[10.36405182 83.24211121]
[25.25743294 85.02738190]
[40.15081406 86.81266022]
[53.70849991 80.64513397]
[66.48970032 89.96990967]
[81.38308716 91.75518036]
[67.28630829 86.62869263]
[59.27723694 73.94583893]
[60.70754242 59.01418686]
[70.97866058 48.08238983]
[85.79228973 45.72523117]
[98.94918060 52.92913818]
[104.94337463 66.67939758]
[101.26571655 81.22280884]
[108.15517426 67.89856720]
[115.04463959 54.57432556]
[121.93409729 41.25008774]
[128.82354736 27.92584801]
[135.71301270 14.60160923]
[127.92649841 1.28343868]
[128.59922791 -14.12924957]
[137.51657104 -26.71832275]
[151.83299255 -32.46665573]
[166.98020935 -29.53997040]
[178.12478638 -18.87216759]
[181.71052551 -3.86730075]
[176.59323120 10.68663025]
[164.40582275 20.14551926]
[149.03724670 21.49106789]
[142.14779663 34.81530762]
[135.25833130 48.13954544]
[128.36888123 61.46378708]
[121.47941589 74.78802490]
[114.58995819 88.11226654]
[127.02400970 79.72212982]
[139.45805359 71.33199310]
[148.31683350 59.22735977]
[159.81703186 49.59691238]
[173.28913879 43.00130081]
[187.94888306 39.82450104]
[202.94281006 40.25144958]
[217.39801025 44.25729370]
[230.47299194 51.60882950]
[241.40653992 61.87807465]
[249.56216431 74.46718597]
[254.46507263 88.64328003]
[255.82981873 103.58106232]
[253.57696533 118.41091919]
[247.83766174 132.26950073]
[238.94602966 144.35002136]
[227.41970825 153.94918823]
[213.92971802 160.50816345]
[199.26139832 163.64512634]
[184.26869202 163.17742920]
[169.82441711 159.13232422]
[156.76947021 151.74528503]
[145.86386108 141.44636536]
[137.74249268 128.83520508]
[125.83074188 119.71872711]
[113.91899109 110.60225677]
[120.00186920 124.31351471]
[126.08474731 138.02476501]
[132.16763306 151.73602295]
[138.25050354 165.44728088]
[144.33338928 179.15853882]
[150.41625977 192.86979675]
[156.49914551 206.58105469]
[163.65216064 219.76568604]
[171.83007812 232.34033203]
[180.00799561 244.91496277]
[188.18592834 257.48962402]
[202.19595337 264.84008789]
[202.64854431 279.72781372]
[210.82646179 292.30245972]
[225.68051147 299.25149536]
[226.81971741 315.61102295]
[213.07215881 324.55175781]
[198.58015442 316.87625122]
[198.25183105 300.48037720]
[190.07391357 287.90573120]
[176.64881897 281.45468140]
[175.61128235 265.66754150]
[167.43336487 253.09289551]
[159.25543213 240.51824951]
[151.07751465 227.94360352]
[148.50773621 242.72184753]
[137.84977722 253.27684021]
[123.04730225 255.70306396]
[109.57748413 249.10276794]
[102.42441559 235.91816711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 134]
[4 133]
[5 132]
[6 131]
[7 130]
[8 129]
[9 128]
[10 127]
[12 73]
[13 72]
[15 70]
[16 69]
[17 68]
[20 65]
[21 64]
[23 62]
[24 61]
[29 57]
[30 56]
[31 55]
[32 53]
[33 52]
[34 51]
[35 50]
[36 48]
[37 47]
[38 46]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[135 152]
[136 151]
[137 150]
[138 149]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
