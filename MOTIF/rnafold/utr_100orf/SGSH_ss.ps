%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGGGGUCGGGGCAGGGGGCGGGGCCGAGCGGGAGACCAGAGAGCCGGAGCCGGAUCCCGAUCCCGAGUCCGAGCCGCCGCCGCCAUGAGCUGCCCCGUGCCCGCCUGCUGCGCGCUGCUGCUAGUCCUGGGGCUCUGCCGGGCGCGUCCCCGGAACGCACUGCUGCUCCUCGCGGAUGACGGAG\
) } def
/len { sequence length } bind def

/coor [
[128.61865234 202.37620544]
[130.73631287 192.92163086]
[136.19390869 184.84605408]
[129.20599365 171.57318115]
[122.21807861 158.30030823]
[115.23016357 145.02745056]
[108.24224854 131.75457764]
[101.25433350 118.48170471]
[86.49547577 114.76152802]
[78.51527405 100.45376587]
[83.79210663 83.72042847]
[69.32507324 79.75749207]
[54.85803604 75.79456329]
[40.39099884 71.83163452]
[25.92395973 67.86869812]
[11.45692253 63.90576935]
[-3.01011539 59.94284058]
[-17.63003922 56.58757019]
[-32.37733841 53.84582520]
[-47.14702988 51.22739029]
[-61.93808365 48.73244858]
[-76.72914124 46.23750687]
[-91.52019501 43.74256897]
[-106.31124878 41.24762726]
[-121.12262726 38.87635803]
[-135.95330811 36.62892151]
[-150.78398132 34.38148499]
[-165.63291931 32.25804138]
[-180.49908447 30.25873566]
[-195.09159851 42.31634140]
[-213.54995728 39.94020462]
[-224.24008179 25.09733963]
[-239.16474915 23.59590530]
[-254.08941650 22.09446907]
[-269.01406860 20.59303474]
[-283.93875122 19.09159851]
[-289.67007446 29.69323349]
[-298.62054443 37.71181107]
[-309.72180176 42.22164154]
[-321.65936279 42.71398926]
[-333.02816772 39.15433502]
[-342.49801636 31.98370934]
[-348.96926880 22.06417274]
[-351.70034790 10.57524109]
[-366.53103638 8.32780457]
[-381.33468628 13.91009808]
[-392.75903320 4.35322189]
[-407.58969116 2.10578609]
[-422.42037964 -0.14165011]
[-437.48507690 6.33806562]
[-450.46545410 -3.68402863]
[-448.00836182 -19.89806175]
[-432.64151001 -25.62442589]
[-420.17294312 -14.97232914]
[-405.34225464 -12.72489262]
[-390.51159668 -10.47745705]
[-376.76870728 -16.22050285]
[-364.28359985 -6.50287437]
[-349.45291138 -4.25543785]
[-338.82864380 -18.90837669]
[-322.16641235 -26.19087219]
[-304.02728271 -24.01553726]
[-289.42437744 -12.89690113]
[-282.43731689 4.16693163]
[-267.51263428 5.66836691]
[-252.58798218 7.16980219]
[-237.66331482 8.67123795]
[-222.73864746 10.17267323]
[-215.66215515 1.19383085]
[-205.01644897 -3.29205871]
[-193.40939331 -2.06025004]
[-183.74563599 4.69761515]
[-178.49978638 15.39257336]
[-163.63362122 17.39187813]
[-156.57133484 15.16301441]
[-148.53654480 19.55080605]
[-133.70587158 21.79824257]
[-118.87519073 24.04567719]
[-111.77664185 21.93513489]
[-103.81630707 26.45657349]
[-89.02525330 28.95151329]
[-74.23419952 31.44645500]
[-59.44314194 33.94139481]
[-44.65208817 36.43633652]
[-37.51926422 34.44470215]
[-29.63558960 39.09852600]
[-14.88829136 41.84027481]
[-20.99114227 28.13789368]
[-14.23595142 14.74508190]
[0.41071245 11.50853539]
[12.18029213 20.80783653]
[12.41952801 35.80592728]
[0.95281565 45.47579956]
[15.41985321 49.43873215]
[29.88689041 53.40166473]
[44.35392761 57.36459351]
[58.82096481 61.32752609]
[73.28800201 65.29045868]
[87.75504303 69.25338745]
[102.58572388 67.00595093]
[115.22910309 58.93471527]
[127.87248993 50.86347961]
[140.51586914 42.79224396]
[153.15925598 34.72101212]
[165.80264282 26.64977455]
[178.37814331 18.47318268]
[190.88490295 10.19180584]
[194.04762268 -7.00365496]
[208.38047791 -16.41467285]
[224.75843811 -12.63320065]
[237.12506104 -21.12240791]
[249.49168396 -29.61161423]
[256.49020386 -43.80073166]
[271.36199951 -44.62474442]
[283.72863770 -53.11394882]
[291.26611328 -69.90470886]
[308.79241943 -70.61046600]
[321.01547241 -79.30513763]
[333.23849487 -87.99980164]
[345.46154785 -96.69446564]
[351.78576660 -111.82510376]
[368.08364868 -113.64483643]
[377.58932495 -100.28166962]
[370.52416992 -85.48249054]
[354.15621948 -84.47142029]
[341.93316650 -75.77675629]
[329.71014404 -67.08209229]
[317.48709106 -58.38742447]
[315.16073608 -46.50397110]
[305.03137207 -39.16241837]
[292.21783447 -40.74732590]
[279.85122681 -32.25812149]
[273.73721313 -18.67620659]
[257.98089600 -17.24498940]
[245.61427307 -8.75578403]
[233.24763489 -0.26657736]
[232.68479919 12.61792755]
[224.67935181 22.97650909]
[211.98086548 26.88447952]
[199.16627502 22.69855690]
[186.65953064 30.97993279]
[182.81059265 37.30681992]
[173.87387085 39.29315948]
[161.23049927 47.36439514]
[148.58711243 55.43563080]
[135.94372559 63.50686646]
[123.30033875 71.57810211]
[110.65695190 79.64933777]
[118.83319855 89.65061188]
[119.93727875 101.66728973]
[114.52719879 111.49378967]
[121.51511383 124.76666260]
[128.50303650 138.03953552]
[135.49095154 151.31239319]
[142.47886658 164.58526611]
[149.46678162 177.85813904]
[169.90130615 182.73712158]
[179.98545837 200.83319092]
[173.56806946 220.22207642]
[181.42691040 232.99856567]
[189.39222717 245.70893860]
[197.46345520 258.35232544]
[205.64004517 270.92782593]
[213.92141724 283.43457031]
[222.20280457 295.94134521]
[230.48417664 308.44808960]
[245.99188232 308.98748779]
[258.20007324 318.56558228]
[262.41442871 333.49938965]
[257.01449585 348.04656982]
[244.07661438 356.61340332]
[228.57568359 355.90579224]
[216.47212219 346.19583130]
[212.41999817 331.21719360]
[217.97743225 316.72946167]
[209.69604492 304.22271729]
[201.41467285 291.71597290]
[193.13330078 279.20919800]
[186.80641174 275.36026001]
[184.82006836 266.42355347]
[176.74884033 253.78018188]
[170.48715210 249.82606506]
[168.65042114 240.85740662]
[160.79158020 228.08091736]
[151.42176819 228.81977844]
[142.37416077 226.06777954]
[134.91174316 220.16482544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[18 87]
[19 86]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[25 78]
[26 77]
[27 76]
[28 74]
[29 73]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[44 59]
[45 58]
[47 56]
[48 55]
[49 54]
[100 148]
[101 147]
[102 146]
[103 145]
[104 144]
[105 143]
[106 141]
[107 140]
[110 136]
[111 135]
[112 134]
[114 132]
[115 131]
[117 128]
[118 127]
[119 126]
[120 125]
[159 184]
[160 183]
[161 181]
[162 180]
[163 178]
[164 177]
[165 176]
[166 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
