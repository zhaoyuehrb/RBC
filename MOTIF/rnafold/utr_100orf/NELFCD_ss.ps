%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:44:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGCGCGGCCGCGCGUGCGCCCGCCCGCCCGUCCCCGCCUCGCGCAUGCGCCGCGCUCGCUCGCGGGAGGGCAUGGCGGGGGCCGUGCCGGGCGCCAUCAUGGACGAGGACUACUACGGGAGCGCGGCCGAGUGGGGCGACGAGG\
) } def
/len { sequence length } bind def

/coor [
[21.72113991 646.72576904]
[12.02344513 635.28222656]
[9.90317535 620.43395996]
[1.81776571 633.06829834]
[-6.26764441 645.70263672]
[-14.35305405 658.33697510]
[-22.43846512 670.97125244]
[-30.52387428 683.60559082]
[-38.60928345 696.23992920]
[-46.69469452 708.87426758]
[-43.06127930 724.25518799]
[-51.43900681 737.65631104]
[-66.85752106 741.12689209]
[-80.16928864 732.60797119]
[-83.47667694 717.15362549]
[-74.81746674 703.93267822]
[-59.32901764 700.78881836]
[-51.24360657 688.15454102]
[-43.15819931 675.52020264]
[-35.07278824 662.88586426]
[-26.98737907 650.25152588]
[-18.90196800 637.61724854]
[-10.81655788 624.98291016]
[-2.73114824 612.34857178]
[4.12094450 599.00506592]
[9.67808247 585.07244873]
[15.23521996 571.13983154]
[20.79235649 557.20721436]
[26.34949493 543.27453613]
[31.01481819 529.01849365]
[34.76966858 514.49609375]
[38.52451706 499.97363281]
[42.12606049 485.41244507]
[45.57390213 470.81405640]
[49.02173996 456.21569824]
[44.41704941 442.05072021]
[55.11923218 430.39852905]
[58.56707001 415.80017090]
[62.01490784 401.20178223]
[65.46274567 386.60342407]
[67.82488251 371.79058838]
[69.08845520 356.84390259]
[70.35202789 341.89721680]
[71.61560059 326.95053101]
[72.87916565 312.00384521]
[63.10540390 300.82308960]
[64.17391968 285.64703369]
[75.96758270 275.47122192]
[77.23115540 260.52453613]
[78.49472809 245.57783508]
[79.75830078 230.63116455]
[68.86444092 222.84881592]
[63.20881271 210.59439087]
[64.37337494 197.03929138]
[72.15948486 185.75051880]
[84.61196136 179.75196838]
[86.19037628 164.83525085]
[87.76878357 149.91851807]
[89.34719849 135.00180054]
[90.92560577 120.08507538]
[92.50402069 105.16835785]
[78.78542328 103.65574646]
[67.21207428 91.19549561]
[62.84835052 76.84426117]
[58.48462296 62.49303055]
[46.14498901 51.69184875]
[49.59426880 35.65955353]
[65.28413391 30.88879395]
[77.07419586 42.28731918]
[72.83585358 58.12930298]
[77.19958496 72.48053741]
[81.56330872 86.83177185]
[96.55997467 87.14801025]
[101.52481842 72.99349976]
[106.48966980 58.83898163]
[111.45451355 44.68446732]
[116.41935730 30.52995300]
[121.38420868 16.37543678]
[126.34905243 2.22092199]
[131.31390381 -11.93359375]
[127.74716949 -27.94016838]
[140.00727844 -38.83153152]
[155.48207092 -33.40358353]
[158.25241089 -17.24012947]
[145.46841431 -6.96874762]
[140.50357056 7.18576765]
[135.53872681 21.34028244]
[130.57386780 35.49479675]
[125.60903168 49.64931488]
[120.64418030 63.80382919]
[115.67933655 77.95834351]
[110.71449280 92.11286163]
[107.42073822 106.74676514]
[105.84233093 121.66349030]
[104.26391602 136.58021545]
[102.68550873 151.49693298]
[101.10709381 166.41365051]
[99.52868652 181.33038330]
[112.22830963 192.45343018]
[115.78505707 208.78692627]
[108.99620819 223.88096619]
[94.70498657 231.89472961]
[93.44141388 246.84141541]
[92.17784119 261.78808594]
[90.91426849 276.73477173]
[100.83226776 288.74606323]
[99.33790588 303.88613892]
[87.82585144 313.26739502]
[86.56227875 328.21408081]
[85.29871368 343.16076660]
[84.03514099 358.10745239]
[82.77156830 373.05413818]
[94.49963379 363.70254517]
[109.49832916 363.90017700]
[120.97591400 373.55755615]
[123.73508453 388.30160522]
[116.52642059 401.45590210]
[102.61417389 407.06387329]
[88.29811096 402.58609009]
[80.06111908 390.05126953]
[76.61328125 404.64962769]
[73.16544342 419.24798584]
[69.71759796 433.84637451]
[74.07568359 449.05551147]
[63.62010956 459.66354370]
[60.17227173 474.26190186]
[56.72443008 488.86026001]
[57.79854202 498.00115967]
[53.04695129 503.72848511]
[49.29210281 518.25091553]
[45.53725433 532.77337646]
[59.17086029 526.51837158]
[73.30079651 531.55273438]
[79.90782166 545.01928711]
[75.24219513 559.27520752]
[61.95183945 566.22979736]
[47.57950974 561.93609619]
[40.28212738 548.83166504]
[34.72498703 562.76434326]
[29.16785049 576.69696045]
[23.61071396 590.62957764]
[18.05357552 604.56219482]
[31.35757446 597.63372803]
[46.30832672 598.84826660]
[58.31961441 607.83319092]
[63.70691681 621.83239746]
[60.81765366 636.55151367]
[50.53811646 647.47534180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[25 142]
[26 141]
[27 140]
[28 139]
[29 138]
[30 131]
[31 130]
[32 129]
[33 127]
[34 126]
[35 125]
[37 123]
[38 122]
[39 121]
[40 120]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[48 105]
[49 104]
[50 103]
[51 102]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 93]
[63 72]
[64 71]
[65 70]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
