%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUUUGCCUUUUGCUUUACUGAUGGCCCUGGUGGUGCUCAGCUGCAAGUCAAGCUGCUCUCUGGACUGUGAUCUGCCUCAGACCCACAGCCUGGGUC\
) } def
/len { sequence length } bind def

/coor [
[81.22519684 120.61608887]
[74.19837952 110.57320404]
[72.15708160 98.48731232]
[57.95000839 93.67492676]
[43.74293518 88.86254120]
[29.53586197 84.05014801]
[15.32878780 79.23776245]
[-0.22420837 82.13860321]
[-9.79636860 70.72707367]
[-24.00344276 65.91468811]
[-29.47211647 67.02866364]
[-34.28518295 65.92420959]
[-37.67489624 63.26630020]
[-39.27347183 59.93469238]
[-52.97031784 53.81943893]
[-66.66716766 47.70418549]
[-80.36401367 41.58892822]
[-90.61772156 48.01150513]
[-102.58152771 48.59592438]
[-113.19571686 43.31113434]
[-119.80352020 33.61205673]
[-120.81586456 22.04120636]
[-134.10603333 15.08625317]
[-147.39620972 8.13129997]
[-160.68637085 1.17634678]
[-175.60186768 5.66702080]
[-188.98091125 -1.57561421]
[-193.17016602 -15.82292080]
[-206.46032715 -22.77787399]
[-219.75050354 -29.73282814]
[-235.42921448 -26.33318329]
[-247.77111816 -36.58291245]
[-247.30856323 -52.61929321]
[-234.39637756 -62.14059448]
[-218.93969727 -57.84288406]
[-212.79554749 -43.02299881]
[-199.50537109 -36.06804276]
[-186.21520996 -29.11309242]
[-172.12129211 -33.79253387]
[-158.54409790 -26.92854500]
[-153.73143005 -12.11382389]
[-140.44125366 -5.15887070]
[-127.15108490 1.79608238]
[-113.86091614 8.75103569]
[-96.91587830 2.17758131]
[-80.18537903 10.04940891]
[-74.24876404 27.89208221]
[-60.55191422 34.00733566]
[-46.85506439 40.12258911]
[-33.15821838 46.23784256]
[-19.19105530 51.70761871]
[-4.98398209 56.52000427]
[9.55282879 53.27494812]
[20.14117432 65.03069305]
[34.34824753 69.84307861]
[48.55532074 74.65546417]
[62.76239395 79.46784973]
[76.96946716 84.28023529]
[90.74873352 73.69542694]
[108.12022400 73.32457733]
[122.33866882 83.31167603]
[127.88310242 99.77877808]
[142.36187744 103.69860840]
[156.84065247 107.61843872]
[172.18321228 103.75627899]
[182.44631958 114.55063629]
[196.92509460 118.47046661]
[206.20907593 117.69574738]
[211.78955078 122.74390411]
[226.13940430 127.11212158]
[240.48927307 131.48034668]
[254.83914185 135.84857178]
[269.18899536 140.21678162]
[286.92581177 135.58512878]
[298.50146484 148.67353821]
[312.98022461 152.59335327]
[327.45901489 156.51318359]
[341.93777466 160.43301392]
[358.80657959 158.73588562]
[365.10711670 174.47563171]
[351.72665405 184.88714600]
[338.01794434 174.91178894]
[323.53918457 170.99195862]
[309.06039429 167.07212830]
[294.58163452 163.15231323]
[283.82516479 168.92436218]
[271.64840698 165.64547729]
[264.82080078 154.56665039]
[250.47091675 150.19842529]
[236.12106323 145.83021545]
[221.77119446 141.46199036]
[207.42132568 137.09376526]
[193.00526428 132.94924927]
[178.52648926 129.02941895]
[164.21954346 133.17193604]
[152.92082214 122.09721375]
[138.44204712 118.17738342]
[123.96327209 114.25755310]
[115.53411865 123.15615082]
[104.10338593 127.58039856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[9 52]
[10 51]
[14 50]
[15 49]
[16 48]
[17 47]
[22 44]
[23 43]
[24 42]
[25 41]
[28 38]
[29 37]
[30 36]
[62 98]
[63 97]
[64 96]
[66 94]
[67 93]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[75 85]
[76 84]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
