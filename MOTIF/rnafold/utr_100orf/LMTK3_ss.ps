%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGCAAGUGCUGUGGUUGUGUAAUGUCUGCGUAACCGCACGGGAAACCCGCCACCACCUCCACCUCCCUGCCAUCCUCGACAAGAUGCCUGCCCCCG\
) } def
/len { sequence length } bind def

/coor [
[213.13507080 201.42115784]
[210.95642090 185.85627747]
[213.66993713 170.35607910]
[200.37977600 163.40112305]
[187.08959961 156.44616699]
[173.79943848 149.49121094]
[162.05842590 155.04374695]
[149.07942200 152.73106384]
[139.70458984 143.18574524]
[137.56433105 129.78073120]
[124.49689484 122.41581726]
[111.42945099 115.05090332]
[89.86505890 120.75279999]
[72.71021271 100.34722137]
[57.92918396 97.79356384]
[43.14815140 95.23991394]
[28.36712265 92.68625641]
[13.58609295 90.13260651]
[-1.19493771 87.57894897]
[-15.97596836 85.02529907]
[-30.75699806 82.47164917]
[-45.53802872 79.91799164]
[-60.31905746 77.36434174]
[-75.10009003 74.81068420]
[-89.88111877 72.25703430]
[-103.76697540 80.29212189]
[-118.65363312 74.31157684]
[-123.12133026 58.90316010]
[-113.74282837 45.88689423]
[-97.71250916 45.24773788]
[-87.32746887 57.47600174]
[-72.54643250 60.02965546]
[-57.76540375 62.58330917]
[-42.98437500 65.13696289]
[-28.20334435 67.69061279]
[-13.42231464 70.24427032]
[1.35871565 72.79792023]
[16.13974571 75.35157776]
[30.92077637 77.90522766]
[45.70180511 80.45888519]
[60.48283768 83.01253510]
[75.26387024 85.56619263]
[85.95262909 75.04238892]
[83.62915039 60.22343063]
[81.30567932 45.40447235]
[78.98220825 30.58551598]
[70.55538940 15.87412262]
[82.35908508 3.70411086]
[97.32107544 11.67751598]
[93.80116272 28.26204300]
[96.12463379 43.08100128]
[98.44811249 57.89995575]
[100.77158356 72.71891022]
[117.38319397 84.79406738]
[118.79435730 101.98345947]
[131.86180115 109.34837341]
[144.92924500 116.71328735]
[161.59385681 111.68003082]
[176.49372864 120.01505280]
[180.75437927 136.20104980]
[194.04455566 143.15599060]
[207.33473206 150.11094666]
[220.62489319 157.06590271]
[230.79542542 146.75109863]
[243.45834351 139.74955750]
[257.57080078 136.62748718]
[271.97348022 137.63209534]
[285.48583984 142.67193604]
[297.00296021 151.32521057]
[305.58575439 162.87501526]
[310.53765869 176.36875916]
[311.46105957 190.69668579]
[308.28930664 204.68321228]
[321.35675049 212.04812622]
[334.75347900 218.79554749]
[348.45031738 224.91081238]
[362.14715576 231.02606201]
[375.84402466 237.14131165]
[389.22253418 229.28031921]
[404.66323853 230.81782532]
[416.22888184 241.16262817]
[419.47225952 256.33694458]
[413.14620972 270.50595093]
[399.68322754 278.22137451]
[384.26010132 276.51644897]
[372.80734253 266.04678345]
[369.72875977 250.83816528]
[356.03192139 244.72291565]
[342.33505249 238.60765076]
[328.63821411 232.49240112]
[325.09054565 233.52635193]
[320.84872437 232.77700806]
[316.81326294 229.93084717]
[313.99182129 225.11557007]
[300.92440796 217.75065613]
[289.57592773 228.42738342]
[275.47799683 235.10806274]
[259.99008179 237.13536072]
[244.60966492 234.30128479]
[230.82754517 226.86845398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 63]
[4 62]
[5 61]
[6 60]
[10 57]
[11 56]
[12 55]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[43 53]
[44 52]
[45 51]
[46 50]
[73 95]
[74 94]
[75 90]
[76 89]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
