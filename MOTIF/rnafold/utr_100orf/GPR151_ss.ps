%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGGCAGCUGCCUUUGCAGACUCUAACUCCAGCAGCAUGAAUGUGUCCUUUGCUCACCUCCACUUUGCCGGAGGGUACCUGCCCUCUGAUUCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[81.45610046 121.73127747]
[91.26871490 110.38612366]
[77.21817780 115.63801575]
[63.16764450 120.88991547]
[49.11710739 126.14180756]
[35.06657028 131.39370728]
[21.01603317 136.64559937]
[13.92278767 142.68534851]
[6.44600868 141.83488464]
[-7.76106453 146.64727783]
[-21.36115456 152.97480774]
[-34.19322968 160.74255371]
[-47.02530289 168.51029968]
[-59.85737991 176.27803040]
[-67.28230286 190.90002441]
[-83.67008209 191.51054382]
[-92.16237640 177.48153687]
[-84.02304077 163.24484253]
[-67.62512207 163.44596863]
[-54.79304886 155.67822266]
[-41.96097183 147.91047668]
[-29.12889862 140.14273071]
[-43.35121918 135.37559509]
[-51.40289688 122.71974182]
[-49.69435501 107.81736755]
[-38.98729706 97.31217957]
[-24.05510139 95.88757324]
[-11.55478382 104.17865753]
[-7.05919218 118.48913574]
[-12.57345104 132.44020081]
[1.63362217 127.62781525]
[15.76413631 122.59506989]
[29.81467247 117.34317017]
[43.86520767 112.09127045]
[57.91574478 106.83937836]
[71.96628571 101.58747864]
[86.01682281 96.33558655]
[96.03063965 85.16762543]
[99.72482300 70.62963867]
[103.41900635 56.09165192]
[106.43111420 41.39719009]
[108.75458527 26.57823372]
[97.93806458 15.60968304]
[95.68059540 0.55122316]
[102.64064026 -12.79125881]
[115.96320343 -19.39786339]
[118.28668213 -34.21681976]
[120.61015320 -49.03577805]
[109.01235962 -59.20901108]
[104.77770996 -74.04381561]
[109.25746155 -88.80644226]
[121.02214813 -98.78620911]
[136.31770325 -100.79859924]
[150.26336670 -94.20146179]
[158.40911865 -81.09992981]
[158.15568542 -65.67464447]
[149.58395386 -52.84777069]
[135.42910767 -46.71230316]
[133.10563660 -31.89334679]
[130.78216553 -17.07439041]
[141.44342041 -6.70734835]
[143.98590088 8.12504005]
[137.22801208 21.76997757]
[123.57354736 28.90170670]
[121.25006866 43.72066116]
[123.17517853 46.87486649]
[123.56034851 51.16512299]
[121.86763763 55.80410385]
[117.95699310 59.78583527]
[114.26280975 74.32382202]
[110.56862640 88.86180878]
[117.52358246 102.15197754]
[131.57411194 107.40386963]
[145.62464905 112.65576935]
[159.67518616 117.90766907]
[173.72572327 123.15956116]
[187.77626038 128.41145325]
[201.82679749 133.66336060]
[215.87733459 138.91525269]
[231.95318604 135.67503357]
[242.59277344 148.15426636]
[236.85099792 163.51539612]
[220.63450623 165.95619202]
[210.62544250 152.96578979]
[196.57490540 147.71389771]
[182.52436829 142.46199036]
[168.47383118 137.21009827]
[154.42329407 131.95820618]
[140.37275696 126.70630646]
[126.32221985 121.45440674]
[112.27168274 116.20251465]
[122.08429718 127.54766846]
[128.86840820 140.92585754]
[128.63371277 155.92402649]
[121.43435669 169.08340454]
[108.93058014 177.36927795]
[94.00592041 178.87081909]
[80.10219574 173.24174500]
[70.42577362 161.78021240]
[67.20815277 147.12937927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[9 31]
[10 30]
[11 22]
[12 21]
[13 20]
[14 19]
[38 71]
[39 70]
[40 69]
[41 65]
[42 64]
[46 60]
[47 59]
[48 58]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
