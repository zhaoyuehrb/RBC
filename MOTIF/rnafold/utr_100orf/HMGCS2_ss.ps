%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAGUCCUGCCGGGCACCACUGGGCAUCUCUUUCAAGGUUUCUGCUGGGUUUCUGAACUGCUGGGUUUCUGCUUGCUCCUCUGGAGAUGCAGCGUCUGUUGACUCCAGUGAAGCGCAUUCUGCAACUGACAAGAGCGGUGCAGGAAACCUCCCUCACACCUGCUCGCCUGCUCCCAGUAGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[10.02188969 799.38232422]
[1.73624563 812.05621338]
[-10.21718693 821.35107422]
[-24.54179001 826.25866699]
[-39.68373871 826.24664307]
[-54.00054550 821.31634521]
[-65.93923187 812.00256348]
[-74.20477295 799.31561279]
[-77.90059662 784.63159180]
[-76.62580109 769.54339600]
[-70.51866150 755.68768311]
[-60.24163818 744.56732178]
[-46.90951157 737.38867188]
[-31.96844292 734.93035889]
[-29.48658180 720.13714600]
[-27.00472069 705.34387207]
[-24.52285767 690.55059814]
[-31.19025040 682.77685547]
[-32.49539566 672.39733887]
[-27.76575089 662.82061768]
[-18.35098457 657.32604980]
[-15.37879276 642.62347412]
[-12.40660095 627.92089844]
[-9.43440819 613.21826172]
[-6.46221638 598.51568604]
[-3.49002409 583.81311035]
[-17.04052925 577.45135498]
[-28.68161774 568.02557373]
[-37.73387909 556.08032227]
[-43.66765594 542.30737305]
[-46.13404083 527.50561523]
[-44.98538208 512.53466797]
[-40.28412247 498.26516724]
[-32.29941559 485.52789307]
[-21.49172020 475.06558228]
[-8.48625088 467.48950195]
[5.96318769 463.24380493]
[21.01789474 462.57940674]
[23.99008751 447.87683105]
[26.96227837 433.17425537]
[29.93447113 418.47164917]
[17.14981079 410.73617554]
[7.76551199 399.07153320]
[2.92923975 384.87347412]
[3.24297118 369.84936523]
[8.68813705 355.81298828]
[18.62553596 344.46536255]
[31.87030792 337.18884277]
[46.83318710 334.87850952]
[49.80538177 320.17593384]
[52.77757263 305.47335815]
[55.74976349 290.77075195]
[58.72195816 276.06817627]
[61.69414902 261.36557007]
[64.66634369 246.66299438]
[67.63853455 231.96040344]
[57.74888992 218.36824036]
[60.80068970 201.49519348]
[75.38786316 191.85583496]
[78.11527252 177.10588074]
[80.84267426 162.35592651]
[83.57007599 147.60597229]
[86.29747772 132.85600281]
[89.02488708 118.10604858]
[79.36383057 104.73611450]
[82.22818756 88.49152374]
[95.87939453 79.23217010]
[98.36125946 64.43891144]
[100.84312439 49.64566040]
[90.43251038 35.59852219]
[93.33568573 18.69926262]
[107.27770233 9.30926514]
[109.51333618 -5.52319717]
[111.74897003 -20.35565948]
[101.44880676 -41.13397598]
[115.92462158 -58.29462051]
[116.92121887 -73.26147461]
[117.91781616 -88.22833252]
[118.91441345 -103.19519043]
[107.16543579 -113.15850830]
[103.57793427 -127.95658875]
[109.32402039 -141.86509705]
[122.00637054 -149.63014221]
[123.00296783 -164.59700012]
[123.99956512 -179.56385803]
[124.99616241 -194.53071594]
[125.99275208 -209.49757385]
[126.98934937 -224.46443176]
[119.34973145 -232.24029541]
[117.30343628 -242.72346497]
[121.29074097 -252.39497375]
[129.76690674 -258.14306641]
[131.26042175 -273.06851196]
[132.75395203 -287.99398804]
[134.24746704 -302.91943359]
[127.01317596 -317.63668823]
[136.36508179 -331.10791016]
[152.68273926 -329.47509766]
[159.17993164 -314.41790771]
[149.17292786 -301.42593384]
[147.67941284 -286.50045776]
[146.18588257 -271.57501221]
[144.69236755 -256.64953613]
[153.92555237 -239.67272949]
[141.95620728 -223.46783447]
[140.95960999 -208.50097656]
[139.96301270 -193.53411865]
[138.96641541 -178.56726074]
[137.96981812 -163.60040283]
[136.97322083 -148.63356018]
[148.51406860 -139.25555420]
[152.36535645 -124.70799255]
[146.84751892 -110.51620483]
[133.88127136 -102.19859314]
[132.88467407 -87.23173523]
[131.88807678 -72.26487732]
[130.89147949 -57.29802322]
[136.79759216 -53.26456451]
[140.97012329 -47.37210846]
[142.84867859 -40.32998657]
[142.15254211 -33.00642776]
[138.92153931 -26.32154655]
[133.51689148 -21.13173485]
[126.58142853 -18.12002563]
[124.34579468 -3.28756309]
[122.11016083 11.54489899]
[131.14279175 20.74948502]
[133.25030518 33.66966629]
[127.44075775 45.61779022]
[115.63637543 52.12752151]
[113.15451050 66.92077637]
[110.67265320 81.71402740]
[119.20999908 91.09729004]
[120.85101318 103.67659760]
[115.00658417 114.93601227]
[103.77484131 120.83345032]
[101.04743958 135.58340454]
[98.32003784 150.33337402]
[95.59262848 165.08332825]
[92.86522675 179.83328247]
[90.13782501 194.58325195]
[99.00385284 204.73773193]
[100.37654877 217.95227051]
[93.97717285 229.37246704]
[82.34111786 234.93260193]
[79.36892700 249.63519287]
[76.39673615 264.33776855]
[73.42454529 279.04037476]
[70.45235443 293.74295044]
[67.48016357 308.44552612]
[64.50796509 323.14813232]
[61.53577423 337.85070801]
[74.42630768 345.79171753]
[83.80458832 357.64160156]
[88.55385590 371.95819092]
[88.11922455 387.00747681]
[82.57244873 400.97369385]
[72.60091400 412.17828369]
[59.42255020 419.28179932]
[44.63705826 421.44384766]
[41.66486740 436.14642334]
[38.69267273 450.84902954]
[35.72048187 465.55160522]
[49.33496857 472.01159668]
[61.00060272 481.53659058]
[70.04202271 493.56951904]
[75.93713379 507.40838623]
[78.34725189 522.24700928]
[77.13657379 537.22216797]
[72.37980652 551.46368408]
[64.35755920 564.14514160]
[53.53983307 574.53173828]
[40.55844879 582.02276611]
[26.17016602 586.18658447]
[11.21256351 586.78527832]
[8.24037075 601.48791504]
[5.26817894 616.19049072]
[2.29598689 630.89306641]
[-0.67620534 645.59564209]
[-3.64839745 660.29821777]
[3.64097667 679.07928467]
[-9.72960472 693.03247070]
[-12.21146584 707.82574463]
[-14.69332790 722.61901855]
[-17.17518997 737.41223145]
[-3.85445571 744.61199951]
[6.40492678 755.74859619]
[12.49009609 769.61401367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 185]
[15 184]
[16 183]
[17 182]
[21 180]
[22 179]
[23 178]
[24 177]
[25 176]
[26 175]
[38 163]
[39 162]
[40 161]
[41 160]
[49 152]
[50 151]
[51 150]
[52 149]
[53 148]
[54 147]
[55 146]
[56 145]
[59 141]
[60 140]
[61 139]
[62 138]
[63 137]
[64 136]
[67 132]
[68 131]
[69 130]
[72 126]
[73 125]
[74 124]
[76 117]
[77 116]
[78 115]
[79 114]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
