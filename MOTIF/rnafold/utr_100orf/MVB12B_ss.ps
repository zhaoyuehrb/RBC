%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUCGGUGAGGCUCGCGCUCGAGCUGCGGCGCCGGCUCCUGCCGCCUGGGCCCCGGGCCCGGCCCCUCCCGCGCCGCCCGGGCGAUGAGAAGCUGCUUCUGCGUGAGACGGAGCCGGGACCCGCCGCCGCCGCAGCCACCGCCGCCGCCGCCCCAGCGGGGAACAGACCAGUCCACCAUGCCUG\
) } def
/len { sequence length } bind def

/coor [
[305.74276733 560.39074707]
[299.16970825 546.90759277]
[292.59667969 533.42449951]
[279.93542480 530.96783447]
[270.87033081 521.52185059]
[268.87805176 508.38525391]
[274.90890503 496.32788086]
[268.56326294 482.73620605]
[262.21765137 469.14456177]
[255.87203979 455.55288696]
[240.97326660 446.29644775]
[242.69514465 427.97265625]
[236.12210083 414.48953247]
[229.54904175 401.00637817]
[218.20727539 396.76284790]
[212.62602234 385.56610107]
[216.29141235 373.18545532]
[209.94580078 359.59381104]
[203.60018921 346.00213623]
[191.44815063 345.47970581]
[180.61112976 339.79931641]
[173.18048096 329.98773193]
[170.61965942 317.87545776]
[173.47628784 305.75524902]
[181.26652527 295.94827271]
[175.38108826 282.15112305]
[169.49563599 268.35397339]
[163.61019897 254.55680847]
[157.72474670 240.75965881]
[151.83930969 226.96249390]
[145.95387268 213.16534424]
[140.06842041 199.36817932]
[134.18298340 185.57102966]
[122.07242584 176.90017700]
[123.77459717 161.17080688]
[117.88915253 147.37364197]
[112.00370789 133.57649231]
[106.11827087 119.77932739]
[102.12615204 134.23834229]
[88.02687073 139.35792542]
[75.68759918 130.82902527]
[75.49413300 115.83026886]
[87.60939789 106.98590851]
[72.62261963 106.35609436]
[57.63584900 105.72628021]
[44.89978027 115.48189545]
[29.36715126 111.46730042]
[22.95326805 96.76213837]
[30.57831383 82.64696503]
[46.39300537 79.94972229]
[58.26566315 90.73950958]
[73.25243378 91.36932373]
[88.23920441 91.99913788]
[93.38432312 86.54223633]
[89.07777405 72.17373657]
[103.67455292 75.62842560]
[108.81966400 70.17152405]
[107.31022644 55.24766541]
[105.80078888 40.32380295]
[104.16604614 25.41314888]
[102.40612030 10.51675320]
[100.64618683 -4.37964392]
[98.88625336 -19.27604103]
[97.12631989 -34.17243576]
[95.36638641 -49.06883240]
[93.48138428 -63.94992065]
[91.47145844 -78.81465149]
[81.95477295 -91.45361328]
[87.91690063 -105.10286713]
[85.90696716 -119.96759796]
[76.39028168 -132.60655212]
[82.35240936 -146.25581360]
[80.34247589 -161.12054443]
[78.33255005 -175.98527527]
[76.32261658 -190.85000610]
[74.31268311 -205.71473694]
[59.65826797 -209.65475464]
[47.66110611 -218.88032532]
[40.13039398 -231.96092224]
[38.18670273 -246.88774109]
[42.09534073 -261.38214111]
[51.23062897 -273.24349976]
[64.17581940 -280.68334961]
[62.16588974 -295.54806519]
[60.15595627 -310.41278076]
[46.43012619 -317.65026855]
[39.61001205 -331.58819580]
[42.31808090 -346.86715698]
[53.51303101 -357.61203003]
[68.89017487 -359.69125366]
[82.53668213 -352.30529785]
[89.20519257 -338.29421997]
[86.33153534 -323.04553223]
[75.02068329 -312.42272949]
[77.03061676 -297.55798340]
[79.04055023 -282.69326782]
[93.49671173 -278.95849609]
[105.45403290 -269.94915771]
[113.07164764 -257.01327515]
[115.16192627 -242.10629272]
[111.37550354 -227.49545288]
[102.25922394 -215.41503906]
[89.17741394 -207.72467041]
[91.18734741 -192.85993958]
[93.19728088 -177.99520874]
[95.20720673 -163.13047791]
[97.21714020 -148.26574707]
[106.59006500 -136.69001770]
[100.77169800 -121.97753143]
[102.78163147 -107.11280060]
[112.15454865 -95.53707123]
[106.33618164 -80.82458496]
[108.34611511 -65.95985413]
[112.36647797 -59.73961258]
[110.26277924 -50.82876587]
[112.02271271 -35.93236923]
[113.78264618 -21.03597260]
[115.54257965 -6.13957644]
[117.30251312 8.75681973]
[119.06244659 23.65321732]
[122.97774506 29.94011879]
[120.72465515 38.81436539]
[122.23409271 53.73822784]
[123.74353027 68.66208649]
[119.91542816 113.89388275]
[125.80087280 127.69104004]
[131.68630981 141.48820496]
[137.57176208 155.28535461]
[150.10328674 164.94306946]
[147.98013306 179.68557739]
[153.86558533 193.48274231]
[159.75102234 207.27989197]
[165.63647461 221.07705688]
[171.52191162 234.87420654]
[177.40734863 248.67137146]
[183.29280090 262.46853638]
[189.17823792 276.26568604]
[195.06369019 290.06283569]
[212.83566284 293.56838989]
[224.85247803 306.91250610]
[226.45541382 324.64062500]
[217.19183350 339.65652466]
[223.53746033 353.24819946]
[229.88307190 366.83984375]
[245.20980835 377.02893066]
[243.03218079 394.43334961]
[249.60522461 407.91647339]
[256.17828369 421.39962769]
[268.10794067 426.33911133]
[273.30023193 437.72146606]
[269.46368408 449.20727539]
[275.80932617 462.79895020]
[282.15493774 476.39059448]
[288.50054932 489.98226929]
[305.04089355 495.64682007]
[312.23486328 511.21054077]
[306.07980347 526.85144043]
[312.65286255 540.33459473]
[319.22589111 553.81768799]
[326.68951416 566.82904053]
[335.00994873 579.30981445]
[343.43493652 591.72027588]
[351.96389771 604.05950928]
[359.43386841 609.35369873]
[360.53042603 616.67846680]
[368.85089111 629.15924072]
[384.39544678 632.01263428]
[393.30059814 645.06921387]
[390.28302002 660.58276367]
[377.13302612 669.34936523]
[361.65225220 666.16790771]
[353.02517700 652.92596436]
[356.37008667 637.47973633]
[348.04965210 624.99896240]
[339.62463379 612.58850098]
[331.09570312 600.24920654]
[324.69271851 596.52679443]
[322.52917480 587.63024902]
[314.20870972 575.14947510]
[312.08340454 589.99816895]
[301.72979736 600.85186768]
[286.99780273 603.67468262]
[273.36544800 597.41705322]
[265.90179443 584.40570068]
[267.38220215 569.47894287]
[277.25616455 558.18713379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[7 154]
[8 153]
[9 152]
[10 151]
[12 148]
[13 147]
[14 146]
[17 144]
[18 143]
[19 142]
[25 138]
[26 137]
[27 136]
[28 135]
[29 134]
[30 133]
[31 132]
[32 131]
[33 130]
[35 128]
[36 127]
[37 126]
[38 125]
[43 53]
[44 52]
[45 51]
[57 124]
[58 123]
[59 122]
[60 120]
[61 119]
[62 118]
[63 117]
[64 116]
[65 115]
[66 113]
[67 112]
[69 110]
[70 109]
[72 107]
[73 106]
[74 105]
[75 104]
[76 103]
[83 96]
[84 95]
[85 94]
[160 179]
[161 178]
[162 176]
[163 175]
[165 174]
[166 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
