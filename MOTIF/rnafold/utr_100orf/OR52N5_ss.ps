%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:21:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCUUCAGGAUGAAACUUCUGGAAAAAUAGAAUGCCUCUAUUUAAUUCAUUAUGCUGGUUUCCAACAAUUCAUGUGACUCCUCCAUCUUUUAUUCUUAAUGGAAUACCUGGUCUGGAAAGAGUACAUGUAU\
) } def
/len { sequence length } bind def

/coor [
[118.26537323 143.37567139]
[109.60376740 146.07429504]
[100.58531189 147.06091309]
[91.54511261 146.29888916]
[82.81906891 143.81652832]
[74.73143005 139.70606995]
[64.76435089 150.91577148]
[54.79728317 162.12547302]
[44.83021164 173.33517456]
[34.86313629 184.54489136]
[24.89606667 195.75459290]
[14.92899418 206.96429443]
[16.10486794 222.72477722]
[5.72882605 234.64590454]
[-10.04321003 235.65509033]
[-21.85396957 225.15357971]
[-22.69634056 209.37176514]
[-12.07055855 197.67268372]
[3.71928930 196.99722290]
[13.68636131 185.78752136]
[23.65343285 174.57781982]
[33.62050629 163.36810303]
[43.58757782 152.15840149]
[53.55464935 140.94869995]
[63.52172089 129.73899841]
[50.73455429 112.12883759]
[46.68895721 89.12746429]
[31.79189873 87.37313843]
[16.89484024 85.61880493]
[1.99778247 83.86447906]
[-12.89927483 82.11014557]
[-27.79633331 80.35581970]
[-42.69338989 78.60148621]
[-56.12660599 87.37236786]
[-71.31359863 82.20179749]
[-76.60420990 67.05620575]
[-67.93993378 53.55398560]
[-51.96726227 52.05289078]
[-40.93906021 63.70442963]
[-26.04200363 65.45876312]
[-11.14494514 67.21308899]
[3.75211239 68.96742249]
[18.64916992 70.72174835]
[33.54622650 72.47608185]
[48.44328690 74.23040771]
[53.42682266 68.62555695]
[41.19449234 59.94395828]
[26.31699753 58.03081894]
[18.15902901 45.44322586]
[22.48904037 31.08178139]
[36.24530411 25.10138130]
[49.70085144 31.73072433]
[53.34123993 46.28283310]
[63.39389420 57.41585159]
[68.37742615 51.81100082]
[64.89285278 37.22135544]
[54.16136551 25.59613419]
[58.73038101 11.41962624]
[55.24580002 -3.17001700]
[51.76122284 -17.75966072]
[42.20077515 -31.76088333]
[53.00823212 -44.82362747]
[68.55227661 -38.05465698]
[66.35086823 -21.24424171]
[69.83544159 -6.65459728]
[73.32002258 7.93504620]
[83.80226898 18.51671982]
[79.48249054 33.73677826]
[82.96707153 48.32641983]
[106.58599854 47.84168243]
[127.36277008 57.27445984]
[141.50476074 74.14236450]
[146.76361084 94.68607330]
[161.74711609 95.38916016]
[176.73063660 96.09224701]
[191.71414185 96.79532623]
[206.69766235 97.49841309]
[221.68116760 98.20149231]
[230.49446106 95.45866394]
[237.00646973 99.10076904]
[251.96939087 100.15491486]
[266.93231201 101.20905304]
[283.23855591 92.74784088]
[297.41815186 103.01943970]
[312.40167236 103.72251892]
[327.38519287 104.42560577]
[342.36871338 105.12868500]
[358.47213745 96.28754425]
[372.88861084 106.22390747]
[387.88449097 106.57554626]
[400.26724243 94.28242493]
[417.37435913 94.69318390]
[428.69830322 107.07008362]
[443.69830322 107.07008362]
[458.69830322 107.07008362]
[473.69830322 107.07008362]
[488.69830322 107.07008362]
[503.69830322 107.07008362]
[517.62207031 98.40638733]
[531.95751953 106.37051392]
[531.95751953 122.76966095]
[517.62207031 130.73379517]
[503.69830322 122.07008362]
[488.69830322 122.07008362]
[473.69830322 122.07008362]
[458.69830322 122.07008362]
[443.69830322 122.07008362]
[428.69830322 122.07008362]
[420.90853882 132.40199280]
[408.39483643 136.39256287]
[395.68978882 132.35974121]
[387.53286743 121.57142639]
[372.53698730 121.21978760]
[363.51730347 129.36784363]
[350.96224976 129.14070129]
[341.66561890 120.11220551]
[326.68209839 119.40911865]
[311.69857788 118.70603180]
[296.71508789 118.00295258]
[287.50686646 125.93732452]
[274.96057129 125.41592407]
[265.87814331 116.17196655]
[250.91523743 115.11782837]
[235.95233154 114.06368256]
[220.97808838 113.18500519]
[205.99456787 112.48192596]
[191.01106262 111.77883911]
[176.02754211 111.07575989]
[161.04403687 110.37267303]
[146.06051636 109.66958618]
[143.34953308 118.32732391]
[139.02778625 126.30407715]
[133.25588989 133.30343628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[55 69]
[56 68]
[58 66]
[59 65]
[60 64]
[73 130]
[74 129]
[75 128]
[76 127]
[77 126]
[78 125]
[80 124]
[81 123]
[82 122]
[84 119]
[85 118]
[86 117]
[87 116]
[89 113]
[90 112]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
