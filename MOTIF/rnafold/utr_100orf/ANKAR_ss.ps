%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAAGAAGCUGAGCAGAUGCUGGUGCCAUGCUUGUACAGCCUGCAGAAUUAAGCUUCAAAAAGGACACACUAGAUUUAAUUAGAAAUGUUAAGAUUGCCCAAAAAAGGAUUACCUAGAUUUGAGCAAGUUCAGGAUGAAGACACCUACCUGGAAAAUUUAGCAAUACAAAGAAAUGCAUCUGCUU\
) } def
/len { sequence length } bind def

/coor [
[84.56921387 321.06640625]
[87.26452637 336.02645874]
[84.02481842 350.87817383]
[75.34411621 363.35668945]
[62.54616928 371.55920410]
[47.58256531 374.23483276]
[32.73514938 370.97558594]
[20.26804161 362.27847290]
[12.08238888 349.46975708]
[9.42644024 334.50265503]
[12.70521069 319.65951538]
[21.41871071 307.20385742]
[34.23819733 299.03506470]
[49.20878601 296.39880371]
[52.42494583 281.74765015]
[55.64110565 267.09649658]
[58.85726547 252.44535828]
[62.07342529 237.79420471]
[65.28958130 223.14305115]
[68.50574493 208.49188232]
[71.72190094 193.84072876]
[74.93806458 179.18957520]
[78.15422058 164.53842163]
[64.58920288 158.21101379]
[52.73312759 149.07432556]
[43.15815735 137.56929016]
[29.81008148 144.41244507]
[16.46200371 151.25561523]
[3.11392736 158.09877014]
[-0.18913430 173.38352966]
[-12.57590008 182.92826843]
[-28.19771767 182.22625732]
[-39.67844391 171.60896301]
[-41.59722900 156.08953857]
[-33.04808044 142.99580383]
[-18.06764984 138.51019287]
[-3.72923231 144.75070190]
[9.61884499 137.90753174]
[22.96692276 131.06437683]
[36.31499863 124.22121429]
[33.13182831 113.08030701]
[31.88238525 101.56114197]
[32.60279465 89.99682617]
[18.09790039 86.17478180]
[3.59300566 82.35273743]
[-9.35139847 93.22624207]
[-26.06001472 94.23870087]
[-39.94435501 85.18908691]
[-45.64750290 69.80509186]
[-60.21392441 66.22467041]
[-74.78034210 62.64424896]
[-88.16862488 71.04242706]
[-103.55511475 67.43249512]
[-111.81127167 53.95616531]
[-108.03887177 38.60870743]
[-94.47600555 30.49548912]
[-79.16928864 34.42994308]
[-71.19992065 48.07782745]
[-56.63349915 51.65825272]
[-42.06708145 55.23867416]
[-32.70298767 45.70791626]
[-19.74711227 42.02379608]
[-6.55886889 45.25291443]
[3.38681364 54.65468216]
[7.41504860 67.84783936]
[21.91994476 71.66988373]
[36.42483902 75.49192810]
[47.14898682 56.99747849]
[63.07635498 42.73665237]
[82.63887787 34.11344528]
[103.91062164 31.97681618]
[124.79735565 36.53711319]
[143.24276733 47.34537888]
[153.98077393 36.87182617]
[164.71878052 26.39827538]
[175.45678711 15.92472267]
[186.19477844 5.45117044]
[196.93278503 -5.02238178]
[207.67079163 -15.49593449]
[218.40879822 -25.96948624]
[203.96401978 -21.92615318]
[190.22628784 -15.90329933]
[175.32083130 -14.22190666]
[160.58659363 -17.03301430]
[147.34716797 -24.08410072]
[136.79187012 -34.74176025]
[129.86888123 -48.04861069]
[127.20010376 -62.80928802]
[129.02526855 -77.69783020]
[135.18041992 -91.37680054]
[145.11264038 -102.61739349]
[157.92970276 -110.40987396]
[172.48027039 -114.05422974]
[187.45721436 -113.22309113]
[201.51518250 -107.99111938]
[213.39132690 -98.82830048]
[222.01892090 -86.55751801]
[219.80308533 -71.72208405]
[228.86015320 -83.67906952]
[237.91722107 -95.63606262]
[246.97428894 -107.59304810]
[249.13923645 -123.26542664]
[262.99166870 -128.73893738]
[272.04873657 -140.69592285]
[281.10580444 -152.65290833]
[290.16287231 -164.60989380]
[287.45068359 -181.88261414]
[297.85736084 -195.51031494]
[314.56381226 -197.36692810]
[323.42086792 -209.47280884]
[332.27795410 -221.57868958]
[333.50744629 -237.93167114]
[348.39962769 -244.79861450]
[361.63470459 -235.11538696]
[359.59753418 -218.84326172]
[344.38381958 -212.72160339]
[335.52676392 -200.61573792]
[326.66967773 -188.50985718]
[330.40588379 -176.16670227]
[326.28356934 -163.74174500]
[315.59698486 -155.84837341]
[302.11987305 -155.55282593]
[293.06280518 -143.59584045]
[284.00573730 -131.63885498]
[274.94866943 -119.68186951]
[273.43151855 -104.86473083]
[258.93127441 -98.53598022]
[249.87420654 -86.57899475]
[240.81713867 -74.62200928]
[231.76007080 -62.66501999]
[234.84472656 -55.82872391]
[244.09869385 -35.31984329]
[259.05673218 -34.19889069]
[274.01480103 -33.07793808]
[288.97286987 -31.95698929]
[303.93090820 -30.83603668]
[318.88897705 -29.71508598]
[327.69967651 -32.19777679]
[334.08566284 -28.44915771]
[349.02301025 -27.07973862]
[359.15005493 -38.83654785]
[374.26116943 -42.36270523]
[388.54583740 -36.30232620]
[396.51129150 -22.98575020]
[395.09466553 -7.53347588]
[384.84066772 4.11278439]
[369.69219971 7.47480536]
[355.47412109 1.25982153]
[347.65359497 -12.14237881]
[332.71624756 -13.51179981]
[317.76800537 -14.75702858]
[302.80996704 -15.87798023]
[287.85189819 -16.99893188]
[272.89385986 -18.11988258]
[257.93579102 -19.24083519]
[242.97773743 -20.36178589]
[228.88233948 -15.23148346]
[218.14434814 -4.75793123]
[207.40634155 5.71562099]
[196.66833496 16.18917274]
[185.93032837 26.66272545]
[175.19233704 37.13627625]
[164.45433044 47.60982895]
[153.71632385 58.08338165]
[159.57481384 66.93508911]
[163.98738098 76.58930206]
[166.84695435 86.81170654]
[168.08410645 97.35419464]
[167.66883850 107.96089172]
[165.61119080 118.37438202]
[161.96113586 128.34191895]
[156.80725098 137.62158203]
[150.27462769 145.98814392]
[142.52180481 153.23854065]
[133.73695374 159.19682312]
[124.13330078 163.71836853]
[113.94390869 166.69343567]
[103.41609955 168.04980469]
[92.80537415 167.75459290]
[89.58921814 182.40574646]
[86.37305450 197.05690002]
[83.15689850 211.70805359]
[79.94073486 226.35920715]
[76.72457886 241.01036072]
[73.50842285 255.66151428]
[70.29225922 270.31265259]
[67.07610321 284.96380615]
[63.85993958 299.61495972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 188]
[15 187]
[16 186]
[17 185]
[18 184]
[19 183]
[20 182]
[21 181]
[22 180]
[23 179]
[26 40]
[27 39]
[28 38]
[29 37]
[43 67]
[44 66]
[45 65]
[49 60]
[50 59]
[51 58]
[73 164]
[74 163]
[75 162]
[76 161]
[77 160]
[78 159]
[79 158]
[80 157]
[98 130]
[99 129]
[100 128]
[101 127]
[103 125]
[104 124]
[105 123]
[106 122]
[109 118]
[110 117]
[111 116]
[132 156]
[133 155]
[134 154]
[135 153]
[136 152]
[137 151]
[139 150]
[140 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
