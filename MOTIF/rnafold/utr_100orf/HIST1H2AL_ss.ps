%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCUCCAUUUAUCGUUUCUUCGUCAUGUCGGGACGCGGCAAGCAGGGAGGCAAAGCUCGCGCCAAAGCCAAGACCCGCUCUUCUCGUGCCGGUCUCCAGUUCCCCGUGGGCCGAGUGCACCGAC\
) } def
/len { sequence length } bind def

/coor [
[-88.16265869 365.30017090]
[-84.14183044 379.80596924]
[-83.12364960 394.82421875]
[-85.14981079 409.73995972]
[-90.13733673 423.94241333]
[-97.88200378 436.84997559]
[-108.06665802 447.93408203]
[-120.27425385 456.74087524]
[-134.00489807 462.90969849]
[-148.69631958 466.18795776]
[-163.74691772 466.44140625]
[-178.54039001 463.65966797]
[-192.47094727 457.95663452]
[-204.96812439 449.56585693]
[-215.52020264 438.83093262]
[-223.69506836 426.19143677]
[-229.15794373 412.16497803]
[-231.68515015 397.32589722]
[-231.17320251 382.28186035]
[-227.64306641 367.64892578]
[-221.23927307 354.02627563]
[-212.22407532 341.97177124]
[-200.96662903 331.97903442]
[-187.92793274 324.45724487]
[-173.64190674 319.71444702]
[-158.69355774 317.94479370]
[-143.69500732 319.22082520]
[-129.26042175 323.49023438]
[-115.98091888 330.57821655]
[-106.40241241 319.03472900]
[-96.82391357 307.49124146]
[-87.24540710 295.94775391]
[-77.66690826 284.40423584]
[-79.29801178 269.64364624]
[-69.74848938 257.80044556]
[-54.25516510 256.18966675]
[-44.67666245 244.64617920]
[-35.09815979 233.10269165]
[-25.80810738 221.32580566]
[-16.81219292 209.32275391]
[-7.81627893 197.31968689]
[-10.17535877 182.65782166]
[-1.22321069 170.35685730]
[14.17149925 167.98184204]
[23.16741371 155.97877502]
[24.60889053 141.15409851]
[39.07665634 134.75140381]
[48.07257080 122.74834442]
[57.06848526 110.74528503]
[66.06439972 98.74221802]
[69.91680908 84.24536133]
[68.06626129 69.35994720]
[66.21572113 54.47453690]
[51.33486938 46.54253387]
[44.14912033 31.47048187]
[47.29253769 15.24023342]
[59.34215546 4.16485977]
[57.12399292 -10.67022514]
[46.49652863 -23.15978050]
[52.25321198 -38.51532364]
[68.47206116 -40.94038391]
[78.46851349 -27.94027328]
[71.95908356 -12.88838577]
[74.17723846 1.94669950]
[86.59104919 7.01890802]
[94.92279053 17.66486740]
[96.89459229 31.14872360]
[91.88089752 43.93687820]
[81.10113525 52.62399292]
[82.95167542 67.50940704]
[84.80222321 82.39481354]
[99.47397614 78.77297974]
[111.81690216 84.85517883]
[124.92919922 77.57041931]
[138.04148865 70.28565979]
[151.15377808 63.00089645]
[164.26608276 55.71613312]
[172.57191467 42.25048447]
[187.45512390 42.83306122]
[200.56741333 35.54829788]
[201.45285034 20.14636612]
[210.54312134 7.68159199]
[224.93754578 2.13144183]
[240.04292297 5.26694775]
[251.03916931 16.08758163]
[254.41741943 31.14051819]
[249.09971619 45.62241745]
[236.78288269 54.91216278]
[221.39720154 56.04542923]
[207.85217285 48.66059113]
[194.73988342 55.94535446]
[187.37193298 68.88994598]
[171.55084229 68.82843018]
[158.43855286 76.11318970]
[145.32624817 83.39794922]
[132.21395874 90.68270874]
[119.10166168 97.96747589]
[118.47509003 107.35198212]
[113.35928345 115.62677765]
[104.68751526 120.70966339]
[94.32247162 121.15976715]
[84.65826416 116.57161713]
[78.06745911 107.73813629]
[69.07154846 119.74119568]
[60.07563400 131.74426270]
[51.07971954 143.74732971]
[48.99479294 159.43055725]
[35.17047501 164.97470093]
[26.17456245 176.97775269]
[28.21558571 192.42030334]
[18.92146111 204.46496582]
[4.18678379 206.31559753]
[-4.80913067 218.31866455]
[-13.80504513 230.32171631]
[-15.00164413 237.00170898]
[-18.86456680 241.35394287]
[-23.55466461 242.68119812]
[-33.13316727 254.22468567]
[-42.71166992 265.76818848]
[-41.43683624 281.29275513]
[-51.31524277 292.86306763]
[-66.12341309 293.98275757]
[-75.70191193 305.52624512]
[-85.28041840 317.06973267]
[-94.85892487 328.61322021]
[-104.43742371 340.15673828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 126]
[30 125]
[31 124]
[32 123]
[33 122]
[36 119]
[37 118]
[38 117]
[39 114]
[40 113]
[41 112]
[44 109]
[45 108]
[47 106]
[48 105]
[49 104]
[50 103]
[51 71]
[52 70]
[53 69]
[57 64]
[58 63]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[79 91]
[80 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
