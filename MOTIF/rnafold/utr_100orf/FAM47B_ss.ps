%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGCUGGAGAGGUGGCACAACAGAGAGGGCCACCAUGGGGGACCGGAGGCCACAGGACCGGCCAAGGUCCCAAGGCAUGGACUCCAAGCCCUGGUACUGUGACAAACCGCCUUCCAAGUACUUCGCGAAGCGCA\
) } def
/len { sequence length } bind def

/coor [
[150.15829468 341.85485840]
[151.85247803 336.73074341]
[148.77867126 322.04907227]
[145.70487976 307.36740112]
[142.63107300 292.68569946]
[139.22145081 278.07836914]
[135.47776794 263.55303955]
[131.56781006 249.07160950]
[127.49205780 234.63594055]
[123.41631317 220.20028687]
[118.52861786 214.56840515]
[119.41669464 205.38676453]
[115.67301941 190.86145020]
[111.92934418 176.33613586]
[108.18566895 161.81080627]
[104.44200134 147.28549194]
[100.69832611 132.76017761]
[84.13358307 128.67007446]
[71.87074280 116.80659485]
[67.23466492 100.38629913]
[71.48232269 83.86125946]
[83.46205902 71.71195984]
[79.05638123 57.37355042]
[74.65071106 43.03514099]
[70.24503326 28.69672775]
[53.21616364 20.55288315]
[47.55625153 2.87792563]
[56.38051224 -13.08785248]
[51.32210541 -27.20920181]
[46.26369858 -41.33055115]
[41.20528793 -55.45190048]
[36.14688110 -69.57324982]
[15.79341221 -77.18972778]
[7.59633017 -97.01584625]
[16.39755058 -116.27598572]
[9.75679398 -129.72590637]
[3.11603761 -143.17582703]
[-3.52471900 -156.62574768]
[-10.16547585 -170.07566833]
[-28.70253944 -180.71069336]
[-26.83567810 -201.21676636]
[-34.38526917 -214.17839050]
[-41.93486404 -227.14001465]
[-49.48445511 -240.10163879]
[-57.03404999 -253.06326294]
[-64.58364105 -266.02487183]
[-77.96649170 -267.95672607]
[-87.63259125 -277.13061523]
[-90.18464661 -290.01153564]
[-84.90574646 -301.82159424]
[-92.15615082 -314.95294189]
[-99.40655518 -328.08425903]
[-106.65696716 -341.21557617]
[-122.07128143 -342.99841309]
[-133.47097778 -353.52584839]
[-136.47262573 -368.74984741]
[-129.92204285 -382.81643677]
[-116.33807373 -390.31677246]
[-100.94400787 -388.36682129]
[-89.65918732 -377.71633911]
[-86.82285309 -362.46069336]
[-93.52564240 -348.46597290]
[-86.27523804 -335.33465576]
[-79.02482605 -322.20333862]
[-71.77442169 -309.07202148]
[-55.46379852 -305.13909912]
[-46.83783722 -290.35717773]
[-51.62202072 -273.57446289]
[-44.07242584 -260.61285400]
[-36.52283478 -247.65122986]
[-28.97324181 -234.68960571]
[-21.42364883 -221.72798157]
[-13.87405586 -208.76635742]
[-4.88358164 -207.90509033]
[2.79012966 -202.88465881]
[7.31500340 -194.74987793]
[7.53987074 -185.30552673]
[3.28444457 -176.71643066]
[9.92520142 -163.26651001]
[16.56595802 -149.81658936]
[23.20671463 -136.36666870]
[29.84747124 -122.91674042]
[38.69675446 -123.06385040]
[47.14007950 -120.26775360]
[54.22176361 -114.81450653]
[59.13024902 -107.29259491]
[61.29104233 -98.52953339]
[60.43385696 -89.50083923]
[56.62603378 -81.22145844]
[50.26823044 -74.63166046]
[55.32663727 -60.51030731]
[60.38504791 -46.38895798]
[65.44345093 -32.26760864]
[70.50186157 -18.14625931]
[81.72521210 -15.58727646]
[90.38198090 -7.81814957]
[94.21413422 3.29175258]
[92.14608765 14.98293304]
[84.58345032 24.29105568]
[88.98912048 38.62946701]
[93.39479065 52.96787643]
[97.80046844 67.30628967]
[110.37583160 68.91851044]
[121.39789581 75.18374634]
[129.21662903 85.16405487]
[132.66152954 97.36535645]
[131.21688843 109.96106720]
[125.09896088 121.06558228]
[115.22364044 129.01649475]
[118.96731567 143.54182434]
[122.71099091 158.06713867]
[126.45466614 172.59245300]
[130.19833374 187.11778259]
[133.94201660 201.64309692]
[137.85197449 216.12454224]
[141.92771912 230.56019592]
[146.00346375 244.99586487]
[151.39202881 252.48280334]
[150.00309753 259.80938721]
[153.74676514 274.33468628]
[158.19081116 279.42074585]
[159.18122864 285.12963867]
[157.31275940 289.61190796]
[160.38656616 304.29357910]
[163.46035767 318.97528076]
[166.53416443 333.65695190]
[170.11105347 348.22424316]
[174.18679810 362.65991211]
[178.26254272 377.09555054]
[188.38514709 390.69589233]
[178.11854553 404.18786621]
[162.31176758 398.05740356]
[163.82687378 381.17129517]
[159.75112915 366.73565674]
[155.67538452 352.29998779]
[152.70336914 350.25207520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[6 120]
[7 119]
[8 117]
[9 116]
[10 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 109]
[22 102]
[23 101]
[24 100]
[25 99]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[50 65]
[51 64]
[52 63]
[53 62]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
