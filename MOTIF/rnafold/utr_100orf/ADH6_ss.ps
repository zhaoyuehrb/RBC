%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUCGCCUGUGUACCUUUGUACUUUCUACAGUGAAAGUUGCUACAGGAUCUCCCUUUCUCAAUAAAUUCAUCUGCGGUGGAGAAAAUCAGCAUGUGUACUACAGGCCAAGUCAUCAGAUGCAAAGCAGCCAUACUCUGGAAGCCUGGUGCACCAUUUUCUAUUGAAGAGGUAGAAGUGGCCCCACCAAAGG\
) } def
/len { sequence length } bind def

/coor [
[88.84463501 190.81758118]
[91.34542847 171.59790039]
[91.58708191 156.59985352]
[85.31820679 155.30610657]
[79.23305511 153.32029724]
[73.40776062 150.66728210]
[67.91522217 147.38024902]
[62.82417679 143.50032043]
[58.19831848 139.07608032]
[45.99243546 147.79481506]
[33.78655243 156.51354980]
[21.58066940 165.23229980]
[9.37478638 173.95103455]
[-2.76046824 182.76780701]
[-14.82430744 191.68205261]
[-26.88814735 200.59629822]
[-33.38887024 215.02027893]
[-48.22300339 216.36111450]
[-60.28684235 225.27536011]
[-72.35068512 234.18960571]
[-84.41452026 243.10385132]
[-89.46531677 250.73123169]
[-96.74528503 252.06266785]
[-108.95116425 260.78140259]
[-121.15705109 269.50015259]
[-133.36293030 278.21890259]
[-135.71337891 293.84741211]
[-148.47589111 303.16909790]
[-164.07868958 300.65356445]
[-173.26492310 287.79321289]
[-170.58454895 272.21786499]
[-157.62779236 263.16812134]
[-142.08166504 266.01300049]
[-129.87579346 257.29428101]
[-117.66990662 248.57553101]
[-105.46401978 239.85679626]
[-93.32876587 231.04000854]
[-81.26493073 222.12576294]
[-69.20108795 213.21151733]
[-57.13724899 204.29727173]
[-51.49940872 190.51091003]
[-35.80239105 188.53247070]
[-23.73855400 179.61822510]
[-11.67471409 170.70397949]
[-8.15881062 164.19175720]
[0.65604693 161.74514771]
[12.86192989 153.02641296]
[25.06781197 144.30767822]
[37.27369690 135.58892822]
[49.47957993 126.87019348]
[42.78575134 99.07815552]
[50.37144852 71.51619720]
[38.45278168 62.40875626]
[26.53411865 53.30131912]
[14.61545277 44.19388199]
[2.69678783 35.08644485]
[-9.29485321 26.07530975]
[-21.35869408 17.16106415]
[-33.38636017 26.29954910]
[-47.50192261 31.67798424]
[-62.56109619 32.86036682]
[-77.34309387 29.75084686]
[-90.64962006 22.60149765]
[-101.40195465 11.99188519]
[-108.72846985 -1.21791732]
[-112.03523254 -15.95704937]
[-111.05417633 -31.03067589]
[-105.86483002 -45.21684647]
[-96.88787842 -57.36554718]
[-84.85103607 -66.49194336]
[-70.73007965 -71.85619354]
[-55.66972733 -73.02345276]
[-40.89085770 -69.89907837]
[-27.59152603 -62.73636627]
[-16.84984970 -52.11595917]
[-9.53661060 -38.89880371]
[-6.24465799 -24.15635681]
[-7.24085569 -9.08372402]
[-12.44444752 5.09722519]
[-0.38060796 14.01147079]
[6.87696218 15.46001434]
[11.80422592 23.16777992]
[23.72289085 32.27521515]
[35.64155579 41.38265610]
[47.56022263 50.49009323]
[59.47888565 59.59753036]
[65.70827484 54.19172668]
[72.65012360 49.73764420]
[80.16019440 46.32782364]
[88.08246613 44.03311157]
[96.25233459 42.90118027]
[104.50006866 42.95554733]
[112.65430450 44.19508362]
[117.86022949 30.12744713]
[123.06615448 16.05981255]
[128.27207947 1.99217665]
[125.80521393 -13.63552856]
[137.47872925 -22.88638306]
[142.68464661 -36.95401764]
[138.38619995 -56.63991547]
[153.76118469 -68.35310364]
[158.51119995 -82.58115387]
[163.26123047 -96.80919647]
[154.13269043 -109.35709381]
[154.15669250 -124.87414551]
[163.32398987 -137.39373779]
[178.10955811 -142.10183716]
[192.82807922 -137.18807983]
[201.81994629 -124.54190063]
[201.62762451 -109.02601624]
[192.32505798 -96.60660553]
[177.48927307 -92.05918121]
[172.73924255 -77.83113098]
[167.98922729 -63.60308456]
[173.36514282 -54.89412689]
[173.04611206 -44.44469452]
[166.89596558 -35.72053528]
[156.75228882 -31.74809647]
[151.54637146 -17.68045998]
[154.38558960 -3.05896640]
[142.33970642 7.19810009]
[137.13378906 21.26573563]
[131.92785645 35.33337021]
[126.72193909 49.40100479]
[134.61782837 54.43766785]
[141.58638000 60.69486618]
[147.44090271 68.00497437]
[152.02456665 76.17217255]
[166.36323547 71.76734161]
[173.80627441 58.08381653]
[188.41046143 53.82094955]
[201.40975952 61.00107574]
[215.74842834 56.59624481]
[230.08709717 52.19141388]
[238.84005737 38.74652481]
[254.82226562 37.35060120]
[265.77352905 49.07448196]
[263.29296875 64.92460632]
[249.28347778 72.74211121]
[234.49192810 66.53008270]
[220.15325928 70.93491364]
[205.81457520 75.33974457]
[199.08828735 88.57955933]
[184.60958862 93.25093842]
[170.76806641 86.10601044]
[156.42939758 90.51084137]
[155.87359619 112.34753418]
[147.17562866 132.38487244]
[158.32279968 142.42184448]
[169.46997070 152.45880127]
[180.61714172 162.49575806]
[191.76431274 172.53271484]
[209.20742798 171.29414368]
[221.90406799 182.82228088]
[222.33258057 199.62861633]
[233.64001465 209.48469543]
[244.94743347 219.34077454]
[256.25485229 229.19683838]
[267.56228638 239.05291748]
[278.86968994 248.90899658]
[287.40725708 252.19493103]
[290.27822876 259.01608276]
[301.42541504 269.05303955]
[312.57257080 279.08999634]
[323.71975708 289.12695312]
[334.86694336 299.16390991]
[350.89877319 299.76358032]
[360.30932617 312.75668335]
[355.87960815 328.17605591]
[341.00772095 334.19326782]
[327.10211182 326.19241333]
[324.82995605 310.31109619]
[313.68280029 300.27413940]
[302.53561401 290.23718262]
[291.38845825 280.20022583]
[280.24127197 270.16326904]
[269.01361084 260.21640015]
[257.70620728 250.36033630]
[246.39877319 240.50425720]
[235.09135437 230.64819336]
[223.78393555 220.79211426]
[212.47651672 210.93603516]
[199.86329651 213.60733032]
[187.83665466 208.44525146]
[180.88027954 197.13024902]
[181.72735596 183.67988586]
[170.58018494 173.64292908]
[159.43301392 163.60597229]
[148.28584290 153.56901550]
[137.13867188 143.53205872]
[127.90032196 149.95890808]
[117.58277893 154.45333862]
[106.58513641 156.84150696]
[106.34348297 171.83955383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 194]
[3 193]
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[14 44]
[15 43]
[16 42]
[18 40]
[19 39]
[20 38]
[21 37]
[23 36]
[24 35]
[25 34]
[26 33]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 80]
[58 79]
[93 124]
[94 123]
[95 122]
[96 121]
[98 119]
[99 118]
[101 114]
[102 113]
[103 112]
[128 146]
[129 145]
[132 142]
[133 141]
[134 140]
[148 190]
[149 189]
[150 188]
[151 187]
[152 186]
[155 182]
[156 181]
[157 180]
[158 179]
[159 178]
[160 177]
[162 176]
[163 175]
[164 174]
[165 173]
[166 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
