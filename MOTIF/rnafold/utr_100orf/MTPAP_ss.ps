%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAACGCGCUGACCUUUCAGCUUCGCGCUAGUGCUGUUUUUUUUUUUUUUUUUUUUUUAGCAAUGGCGGUUCCCGGCGUGGGGCUCUUGACCCGUUUGAACCUGUGUGCCCGGAGAAGAACUCGAGUCCAGCGGCCUAUCGUCAGGCUUUUGAGUUGCCCAG\
) } def
/len { sequence length } bind def

/coor [
[102.63545990 229.96888733]
[87.92751312 225.73394775]
[76.88036346 215.14059448]
[72.03257751 200.62310791]
[74.49813080 185.51750183]
[83.71046448 173.29492188]
[97.55265045 166.76402283]
[98.12718964 151.77503967]
[83.87024689 147.11245728]
[75.47706604 159.54444885]
[67.08387756 171.97644043]
[58.69069290 184.40843201]
[50.29750443 196.84042358]
[49.68696976 213.22821045]
[35.06497574 220.65310669]
[21.47336960 211.47703552]
[22.89403534 195.13954163]
[37.86551285 188.44725037]
[46.25869751 176.01525879]
[54.65188599 163.58325195]
[63.04507065 151.15126038]
[71.43825531 138.71926880]
[66.13968658 130.69783020]
[62.81401825 122.17242432]
[61.44040298 113.59118652]
[61.90190125 105.37227631]
[63.99684906 97.88420105]
[49.53304672 93.90947723]
[35.06924438 89.93475342]
[20.60544205 85.96002960]
[6.14163923 81.98530579]
[-9.21546650 85.78923798]
[-19.43754196 74.95602417]
[-33.90134430 70.98130035]
[-48.36514664 67.00658417]
[-62.82894897 63.03186035]
[-77.29274750 59.05713654]
[-85.06169128 72.00109863]
[-96.03556061 82.36819458]
[-109.40003967 89.38911438]
[-124.16339111 92.54285431]
[-139.23007202 91.59539032]
[-153.48204041 86.61703491]
[-165.86169434 77.97721100]
[-175.45039368 66.31704712]
[-181.53659058 52.50180817]
[-183.66865540 37.55667877]
[-181.68835449 22.59068489]
[-175.74266052 8.71440125]
[-166.27276611 -3.04245806]
[-153.98141479 -11.80745602]
[-139.78068542 -16.93017197]
[-124.72440338 -18.03046799]
[-109.92980957 -15.02669144]
[-96.49478149 -8.14174461]
[-85.41627502 2.11346388]
[-77.51639557 14.97793007]
[-73.38136292 29.49702454]
[-73.31803131 44.59333420]
[-58.85422516 48.56805801]
[-44.39042282 52.54277802]
[-29.92662048 56.51750183]
[-15.46281910 60.49222565]
[-1.14026093 56.40399551]
[10.11636162 67.52150726]
[24.58016396 71.49623108]
[39.04396820 75.47094727]
[53.50777054 79.44567108]
[67.97157288 83.42039490]
[84.93230438 67.23312378]
[108.26083374 64.89356232]
[114.65792084 51.32605362]
[121.05500793 37.75854492]
[127.45209503 24.19103622]
[126.33909607 8.40902805]
[138.76531982 0.19694899]
[145.16241455 -13.37055874]
[151.55949402 -26.93806648]
[157.95658875 -40.50557327]
[162.75549316 -54.71720505]
[165.89289856 -69.38542175]
[169.03031921 -84.05364227]
[172.16772461 -98.72186279]
[161.69970703 -110.17613220]
[159.99702454 -125.59951019]
[167.71437073 -139.06138611]
[181.88427734 -145.38539124]
[197.05813599 -142.13983154]
[207.40129089 -130.57267761]
[208.93656921 -115.13174438]
[201.07362366 -101.75437927]
[186.83595276 -95.58444977]
[183.69853210 -80.91623688]
[180.56112671 -66.24801636]
[177.42372131 -51.57979584]
[188.37899780 -61.82585907]
[202.66143799 -66.40971375]
[217.53323364 -64.45267487]
[230.14355469 -56.32987976]
[238.07511902 -43.59841537]
[239.80751038 -28.69879150]
[235.00865173 -14.48714352]
[224.59843445 -3.68772960]
[210.57241821 1.62929249]
[195.61926270 0.44469327]
[182.60537720 -7.01444960]
[174.02540588 -19.31827927]
[171.52409363 -34.10848618]
[165.12699890 -20.54097939]
[158.72991943 -6.97347164]
[152.33282471 6.59403610]
[153.90339661 21.40560532]
[141.01960754 30.58812332]
[134.62251282 44.15563202]
[128.22543335 57.72314072]
[121.82834625 71.29064941]
[134.28173828 81.24341583]
[141.95314026 96.61321259]
[142.52697754 115.02093506]
[134.88749695 133.13334656]
[147.31948853 141.52653503]
[159.75148010 149.91972351]
[172.18347168 158.31289673]
[184.61546326 166.70608521]
[197.04745483 175.09927368]
[209.47944641 183.49246216]
[221.91143799 191.88565063]
[220.43406677 176.95857239]
[229.80668640 165.24729919]
[244.69467163 163.41752625]
[256.62420654 172.51071167]
[258.80535889 187.35128784]
[249.99668884 199.49243164]
[235.21119690 202.02362061]
[246.59860229 211.78717041]
[257.98599243 221.55072021]
[269.37341309 231.31427002]
[280.76083374 241.07781982]
[296.49755859 239.61827087]
[308.60363770 249.77790833]
[309.89672852 265.52920532]
[299.60968018 277.52719116]
[283.84558105 278.65368652]
[271.95703125 268.24035645]
[270.99728394 252.46522522]
[259.60986328 242.70167542]
[248.22245789 232.93812561]
[236.83505249 223.17457581]
[225.44764709 213.41102600]
[213.51824951 204.31764221]
[201.08625793 195.92445374]
[188.65426636 187.53126526]
[176.22227478 179.13807678]
[163.79028320 170.74488831]
[151.35829163 162.35171509]
[138.92630005 153.95852661]
[126.49430084 145.56533813]
[113.11618805 152.34957886]
[112.54164124 167.33857727]
[125.84327698 174.90989685]
[134.09295654 187.80181885]
[135.39495850 203.05184937]
[129.45008850 217.15563965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 159]
[8 158]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[27 69]
[28 68]
[29 67]
[30 66]
[31 65]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[71 116]
[72 115]
[73 114]
[74 113]
[76 111]
[77 110]
[78 109]
[79 108]
[80 95]
[81 94]
[82 93]
[83 92]
[120 157]
[121 156]
[122 155]
[123 154]
[124 153]
[125 152]
[126 151]
[127 150]
[134 149]
[135 148]
[136 147]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
