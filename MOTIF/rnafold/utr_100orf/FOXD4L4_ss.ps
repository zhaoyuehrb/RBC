%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACCUGCCAAGAGCUGAGCGCCCUCGCUCCACACCGCAGCGCAGCCUCCGGGACUCCGAUGGGGAAGACGGUAAAAUCGAUGUCCUGGGAGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[100.45843506 210.81752014]
[87.73635101 220.19430542]
[72.12281036 217.74624634]
[62.88105392 204.92573547]
[65.49404907 189.33895874]
[78.41155243 180.23326111]
[80.73502350 165.41430664]
[83.05849457 150.59535217]
[80.94757843 143.37249756]
[85.69157410 135.35456848]
[88.47479248 120.61504364]
[78.12226868 116.36724091]
[69.74517822 106.87937927]
[65.92755127 93.26542664]
[51.07425690 95.35816193]
[36.22095490 97.45088959]
[21.36765862 99.54361725]
[13.13719559 103.90849304]
[6.02066231 101.46299744]
[-8.89053535 103.09278107]
[-23.80173302 104.72256470]
[-36.70177460 114.84782410]
[-51.81766129 108.48842621]
[-53.59946442 92.18636322]
[-40.21421814 82.71180725]
[-25.43151474 89.81136322]
[-10.52031708 88.18158722]
[4.39088011 86.55180359]
[19.27492714 84.69032288]
[34.12822723 82.59758759]
[48.98152542 80.50485992]
[63.83482361 78.41213226]
[67.41522217 71.82192993]
[52.42025757 72.21058655]
[44.58628082 59.41884232]
[51.74736786 46.23859787]
[66.74234009 45.85026550]
[74.57601929 58.64152908]
[78.15641785 52.05133057]
[71.82889557 38.45124054]
[56.89833832 33.26914978]
[50.08041000 19.01111984]
[55.42006683 4.13618755]
[69.74938202 -2.53061509]
[84.56703186 2.96600819]
[91.08196259 17.36500931]
[85.42898560 32.12371445]
[91.75650787 45.72380447]
[105.35659790 52.05133057]
[119.83537292 48.13150024]
[134.31414795 44.21166992]
[148.79292297 40.29184341]
[163.20898438 36.14731598]
[177.55885315 31.77909470]
[191.90872192 27.41087532]
[206.25859070 23.04265404]
[220.60845947 18.67443275]
[228.08639526 5.00994539]
[242.70141602 0.78436780]
[255.68234253 7.99764633]
[270.03219604 3.62942553]
[284.38208008 -0.73879522]
[298.73193359 -5.10701609]
[299.82635498 -20.24526787]
[306.31900024 -33.96424103]
[317.33175659 -44.40855789]
[331.37524414 -50.16570663]
[346.55020142 -50.45708847]
[360.80435181 -45.24328613]
[372.20993042 -35.22943115]
[379.22442627 -21.76981354]
[380.89916992 -6.68473339]
[377.00769043 7.98567390]
[368.07626343 20.25735664]
[355.31280518 28.47067070]
[340.44345093 31.51483154]
[325.47918701 28.97814369]
[312.44375610 21.20367241]
[303.10015869 9.24285030]
[288.75027466 13.61107063]
[274.40042114 17.97929192]
[260.05056763 22.34751129]
[253.29049683 35.57011032]
[238.79991150 40.20452881]
[224.97666931 33.02429962]
[210.62680054 37.39252090]
[196.27694702 41.76074219]
[181.92707825 46.12895966]
[167.57720947 50.49718094]
[161.99673462 55.54533768]
[152.71275330 54.77061844]
[138.23397827 58.69044495]
[123.75520325 62.61027527]
[109.27642822 66.53010559]
[129.10951233 101.95108032]
[103.21432495 123.39826202]
[100.43110657 138.13778687]
[97.87744904 152.91882324]
[95.55397797 167.73777771]
[93.23050690 182.55673218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 100]
[7 99]
[8 98]
[10 97]
[11 96]
[14 32]
[15 31]
[16 30]
[17 29]
[19 28]
[20 27]
[21 26]
[39 48]
[40 47]
[49 94]
[50 93]
[51 92]
[52 91]
[53 89]
[54 88]
[55 87]
[56 86]
[57 85]
[60 82]
[61 81]
[62 80]
[63 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
