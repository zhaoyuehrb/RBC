%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGGGGCGCUGACUGCCCGGGACAAGGUCGGGGUUCAGGAUUUUGUGCUAUUGGACGCGUACACCAGCGAAUCUGCCUUUGUCGACAACCUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[83.79041290 190.56266785]
[83.46594238 174.76170349]
[94.46959686 163.41731262]
[94.00309753 148.42457581]
[93.53659821 133.43182373]
[87.86660004 131.81576538]
[82.56035614 129.24588013]
[77.77694702 125.79920197]
[65.72449493 134.72883606]
[53.67204285 143.65846252]
[41.61958694 152.58810425]
[29.56713295 161.51773071]
[25.79271507 177.11045837]
[11.18828964 183.75051880]
[-3.04287887 176.34420776]
[-5.98385525 160.57302856]
[4.62142563 148.53526306]
[20.63750076 149.46527100]
[32.68995285 140.53564453]
[44.74240875 131.60601807]
[56.79486465 122.67637634]
[68.84732056 113.74674225]
[67.33780670 90.37483215]
[81.28030396 71.55644989]
[104.07881165 66.19429016]
[109.11156464 52.06377792]
[114.14431000 37.93326187]
[119.17706299 23.80274963]
[124.20980835 9.67223549]
[129.02220154 -4.53483772]
[133.61305237 -18.81503487]
[138.20391846 -33.09523010]
[137.13903809 -39.91323471]
[139.44990540 -45.35102844]
[143.54969788 -48.10466003]
[149.01947021 -62.07181931]
[154.48924255 -76.03897858]
[159.95901489 -90.00614166]
[165.42878723 -103.97330475]
[170.89855957 -117.94046021]
[166.83279419 -137.56326294]
[182.10482788 -149.24989319]
[186.69569397 -163.53009033]
[176.50213623 -174.93353271]
[173.40553284 -189.80995178]
[178.13948059 -204.14369202]
[189.33752441 -214.11663818]
[203.92567444 -217.12519836]
[208.51654053 -231.40539551]
[213.10739136 -245.68559265]
[217.69825745 -259.96578979]
[222.06648254 -274.31564331]
[226.21099854 -288.73171997]
[224.77642822 -305.62487793]
[240.61224365 -311.67987061]
[250.81440735 -298.13909912]
[240.62705994 -284.58718872]
[236.48254395 -270.17114258]
[237.68078613 -262.74215698]
[231.97845459 -255.37492371]
[227.38758850 -241.09472656]
[222.79673767 -226.81454468]
[218.20587158 -212.53434753]
[228.30784607 -201.58830261]
[231.59637451 -186.95814514]
[227.09060669 -172.55105591]
[215.90502930 -162.26612854]
[200.97589111 -158.93923950]
[196.38502502 -144.65904236]
[201.94065857 -135.82662964]
[201.61416626 -125.17545319]
[195.26953125 -116.33937073]
[184.86572266 -112.47068787]
[179.39595032 -98.50353241]
[173.92617798 -84.53636932]
[168.45640564 -70.56920624]
[162.98663330 -56.60204697]
[157.51686096 -42.63488770]
[152.48411560 -28.50437164]
[147.89324951 -14.22417545]
[143.30239868 0.05602097]
[144.26902771 7.51866913]
[138.34033203 14.70498562]
[133.30757141 28.83550072]
[128.27482605 42.96601486]
[123.24207306 57.09652710]
[118.20932770 71.22704315]
[125.68833160 77.64888763]
[131.01437378 85.94400024]
[133.74107361 95.41716766]
[133.63990784 105.27442169]
[130.71934509 114.68962097]
[125.22415161 122.87366486]
[117.61490631 129.14065552]
[108.52934265 132.96533203]
[108.99584198 147.95806885]
[109.46234131 162.95082092]
[121.14997864 173.58917236]
[121.80847931 189.37973022]
[111.04714966 200.95425415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 81]
[31 80]
[32 79]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[42 69]
[43 68]
[48 63]
[49 62]
[50 61]
[51 60]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
