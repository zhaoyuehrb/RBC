%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAGGAGUGAUCAUGGCUACCUCAGAGCUGAGCUGCGAGGUGUCGGAGGAGAACUGUGAGCGCCGGGAGGCCUUCUGGGCAGAAUGGAAGGAUCUGACACUGUCCACACGGC\
) } def
/len { sequence length } bind def

/coor [
[25.48693085 207.48918152]
[13.76250744 213.46456909]
[0.93607593 211.58177185]
[-9.74271584 222.11569214]
[-20.42150879 232.64961243]
[-31.10029984 243.18351746]
[-41.77909088 253.71743774]
[-52.31300735 264.39624023]
[-62.70008469 275.21789551]
[-73.08715820 286.03958130]
[-71.22562408 301.56597900]
[-79.82299805 314.62808228]
[-94.81987000 319.05844116]
[-109.13517761 312.76510620]
[-116.00966644 298.71960449]
[-112.19741058 283.55383301]
[-99.49845123 274.42858887]
[-83.90883636 275.65249634]
[-73.52175903 264.83084106]
[-63.13468552 254.00915527]
[-60.74074554 246.90837097]
[-52.31300735 243.03865051]
[-41.63421631 232.50473022]
[-30.95542526 221.97080994]
[-20.27663231 211.43690491]
[-9.59784031 200.90298462]
[-10.23976612 184.15901184]
[1.61261630 171.84376526]
[19.04078484 171.84381104]
[29.42786026 161.02212524]
[39.81493759 150.20045471]
[50.20201111 139.37878418]
[48.14420700 126.57926178]
[53.95888901 114.77431488]
[65.70404053 108.41820526]
[79.15507507 110.05419922]
[89.83386230 99.52027893]
[92.96080780 91.96240997]
[100.95115662 88.84945679]
[111.91369629 78.61116028]
[122.73537445 68.22408295]
[133.41416931 57.69017029]
[144.09295654 47.15625381]
[154.77174377 36.62233734]
[165.45054626 26.08841896]
[176.12933350 15.55450249]
[186.80812073 5.02058554]
[197.48692322 -5.51333094]
[208.16571045 -16.04724693]
[203.06610107 -29.30492020]
[203.42922974 -43.46142197]
[209.16648865 -56.36073685]
[219.37333679 -66.05107117]
[232.47175598 -71.08016968]
[246.45413208 -70.71288300]
[259.19100952 -65.03845215]
[270.15353394 -75.27674866]
[281.11608887 -85.51504517]
[292.07861328 -95.75334167]
[292.31661987 -113.17988586]
[304.79260254 -124.86295319]
[321.52624512 -123.99238586]
[332.20504761 -134.52630615]
[336.18951416 -142.90039062]
[343.32232666 -145.19712830]
[354.28488159 -155.43542480]
[365.24740601 -165.67372131]
[376.20996094 -175.91201782]
[387.17248535 -186.15031433]
[398.13504028 -196.38861084]
[402.39761353 -212.22409058]
[418.31039429 -216.18830872]
[429.50369263 -204.20323181]
[424.46276855 -188.59806824]
[408.37332153 -185.42607117]
[397.41079712 -175.18777466]
[386.44824219 -164.94947815]
[375.48571777 -154.71118164]
[364.52316284 -144.47288513]
[353.56063843 -134.23458862]
[342.73895264 -123.84751129]
[332.06015015 -113.31359100]
[333.76757812 -100.46263885]
[327.63262939 -88.82093048]
[315.71823120 -82.78800964]
[302.31692505 -84.79080200]
[291.35437012 -74.55250549]
[280.39184570 -64.31420898]
[269.42929077 -54.07590866]
[274.47796631 -38.98082352]
[272.46313477 -23.13349724]
[263.73471069 -9.68487167]
[249.98252869 -1.33094239]
[233.90931702 0.22763719]
[218.69963074 -5.36845541]
[208.02082825 5.16546106]
[197.34204102 15.69937801]
[186.66325378 26.23329353]
[175.98446655 36.76721191]
[165.30566406 47.30112839]
[154.62687683 57.83504486]
[143.94808960 68.36895752]
[133.26928711 78.90287781]
[130.68229675 85.93561554]
[122.15199280 89.57369995]
[111.18945312 99.81199646]
[100.36778259 110.19907379]
[89.68898773 120.73299408]
[89.92707062 138.15953064]
[77.77487183 150.17901611]
[61.02368927 149.76585388]
[50.63661194 160.58752441]
[40.24953461 171.40921021]
[29.86246109 182.23088074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 20]
[9 19]
[10 18]
[29 114]
[30 113]
[31 112]
[32 111]
[36 108]
[37 107]
[39 106]
[40 105]
[41 103]
[42 102]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[56 89]
[57 88]
[58 87]
[59 86]
[62 82]
[63 81]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
