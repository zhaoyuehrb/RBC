%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:19:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUUCUGCUAUCACGCAGUGUUCUACCAGUGAGCUCACCUGCUCGAUCUGCACAGACUAUUUGACAGACCCUGUCACCAUUUGUUGUGGGCACAGAU\
) } def
/len { sequence length } bind def

/coor [
[37.67710495 235.16299438]
[30.92967987 248.55972290]
[24.18225288 261.95645142]
[17.43482780 275.35317993]
[10.68740273 288.74990845]
[12.16176319 305.08264160]
[-1.39960492 314.30334473]
[-16.04592896 306.92654419]
[-16.71032715 290.54086304]
[-2.70932293 282.00247192]
[4.03810263 268.60574341]
[10.78552818 255.20903015]
[17.53295326 241.81230164]
[24.28038025 228.41557312]
[15.24611282 217.76638794]
[10.97088528 204.42607117]
[12.13965797 190.42260742]
[18.60713005 177.89820862]
[29.41486168 168.78166199]
[42.93317032 164.49133301]
[57.10682297 165.71450806]
[64.26762390 152.53410339]
[71.42842102 139.35369873]
[78.58921814 126.17329407]
[81.25278473 87.46822357]
[73.68553925 74.51689911]
[66.11830139 61.56557083]
[49.19051743 57.50437546]
[40.53052139 42.79100800]
[45.01733780 26.66625023]
[37.05096817 13.95652866]
[29.08460236 1.24680829]
[20.72681808 -11.20901108]
[11.98570347 -23.39888000]
[3.24458742 -35.58874893]
[-5.49652815 -47.77861786]
[-14.23764324 -59.96848679]
[-29.87045860 -62.29026031]
[-39.21554184 -75.03565216]
[-36.72861862 -90.64304352]
[-23.88513756 -99.85285187]
[-8.30490875 -97.20105743]
[0.76859510 -84.26092529]
[-2.04777479 -68.70960236]
[6.69334078 -56.51973343]
[15.43445587 -44.32986450]
[24.17557144 -32.13999557]
[32.91668701 -19.95012665]
[37.56835938 -18.29100418]
[41.14726639 -13.58981800]
[41.79432297 -6.71955872]
[49.76068878 5.99016190]
[57.72705841 18.69988251]
[70.66565704 19.82884598]
[80.70529938 28.37335014]
[83.98428345 41.34443283]
[79.06962585 53.99832535]
[86.63686371 66.94965363]
[94.20410919 79.90097809]
[92.68879700 64.97771454]
[102.68460083 53.79362488]
[117.68370819 53.63016129]
[127.92088318 64.59375000]
[126.73116302 79.54649353]
[114.88954926 88.75323486]
[129.48323059 85.28559113]
[144.07690430 81.81794739]
[158.67059326 78.35029602]
[173.26426697 74.88265228]
[187.85794067 71.41500854]
[201.87025452 61.87082291]
[214.92044067 72.69342804]
[208.13343811 88.22961426]
[191.32559204 86.00868988]
[176.73190308 89.47633362]
[162.13822937 92.94397736]
[147.54455566 96.41162109]
[132.95088196 99.87926483]
[118.35720062 103.34690857]
[115.34509277 118.04137421]
[127.39754486 126.97100830]
[139.44999695 135.90063477]
[151.50245667 144.83027649]
[167.51852417 143.90026855]
[178.12380981 155.93801880]
[175.18283081 171.70919800]
[160.95166016 179.11550903]
[146.34724426 172.47546387]
[142.57281494 156.88272095]
[130.52037048 147.95309448]
[118.46791077 139.02346802]
[106.41545868 130.09382629]
[91.76961517 133.33409119]
[84.60881805 146.51449585]
[77.44802094 159.69490051]
[70.28722382 172.87530518]
[79.87298584 185.91857910]
[82.84268188 201.77185059]
[78.65792084 217.28866577]
[68.19525909 229.41142273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[21 96]
[22 95]
[23 94]
[24 93]
[25 59]
[26 58]
[27 57]
[30 53]
[31 52]
[32 51]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
