%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGUCACGUGAUGGUUAUGGCCGCACUCUCGCUGGUGGCGGCCUGUUGGGGUAGAGCGGCCGCGGACGAGUCAGUUCAGCUUCCGGCGGCUCCAGGGAGCAGUGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[3.75864244 291.20303345]
[2.19492912 276.28530884]
[-7.96429443 287.32116699]
[-18.12351799 298.35702515]
[-21.77760315 313.75045776]
[-36.09006882 317.87390137]
[-46.24929047 328.90975952]
[-49.90337753 344.30319214]
[-64.21584320 348.42663574]
[-74.37506104 359.46249390]
[-73.47161865 375.24093628]
[-84.05204010 386.98104858]
[-99.83914948 387.71762085]
[-111.46674347 377.01367188]
[-112.03636932 361.21963501]
[-101.21008301 349.70587158]
[-85.41091919 349.30325317]
[-75.25170135 338.26739502]
[-72.32427216 323.66333008]
[-57.28514862 318.75051880]
[-47.12592697 307.71466064]
[-44.19849777 293.11059570]
[-29.15937614 288.19778442]
[-19.00015259 277.16192627]
[-8.84092903 266.12606812]
[0.20828928 254.16314697]
[8.06338310 241.38435364]
[15.91847706 228.60557556]
[23.77357101 215.82678223]
[31.62866402 203.04798889]
[39.30693817 190.16217041]
[46.80693817 177.17179871]
[54.30693817 164.18141174]
[53.96987534 149.29061890]
[67.57066345 141.20797729]
[75.07066345 128.21759033]
[82.57066345 115.22721100]
[90.07066345 102.23683167]
[91.08003998 94.11785126]
[97.96052551 88.99592590]
[105.81562042 76.21714020]
[113.67071533 63.43834686]
[114.30593872 47.62989807]
[127.56241608 40.83910370]
[135.41751099 28.06031036]
[143.27261353 15.28151989]
[139.79821777 6.25125074]
[140.93772888 -3.21704340]
[146.29702759 -10.93673134]
[154.52279663 -15.18638229]
[163.64201355 -15.09297752]
[172.52554321 -27.17945480]
[181.40907288 -39.26593018]
[190.29260254 -51.35240555]
[199.17613220 -63.43888474]
[201.11463928 -79.14088440]
[214.88662720 -84.81377411]
[223.77015686 -96.90024567]
[232.65367126 -108.98672485]
[241.53720093 -121.07320404]
[250.25335693 -133.28092957]
[258.80047607 -145.60760498]
[267.34759521 -157.93426514]
[275.72406006 -170.37753296]
[283.92828369 -182.93502808]
[284.29092407 -199.33016968]
[298.79898071 -206.97534180]
[312.52777100 -198.00585938]
[311.35433960 -181.64875793]
[296.48577881 -174.73080444]
[288.28155518 -162.17330933]
[287.24328613 -154.75010681]
[279.67425537 -149.38714600]
[271.12713623 -137.06048584]
[262.58001709 -124.73381042]
[261.33761597 -117.34204102]
[253.62368774 -112.18967438]
[244.74015808 -100.10319519]
[235.85662842 -88.01672363]
[226.97309875 -75.93024445]
[225.66999817 -61.09275055]
[211.26260376 -54.55535507]
[202.37907410 -42.46887970]
[193.49555969 -30.38240242]
[184.61203003 -18.29592514]
[175.72850037 -6.20944834]
[175.49450684 14.35073566]
[156.05139160 23.13661385]
[148.19630432 35.91540527]
[140.34121704 48.69419479]
[140.26783752 63.58861923]
[126.44950867 71.29344177]
[118.59441376 84.07223511]
[110.73931885 96.85102081]
[103.06104279 109.73683167]
[95.56104279 122.72721100]
[88.06104279 135.71759033]
[80.56104279 148.70797729]
[80.36165619 164.52792358]
[67.29731750 171.68141174]
[59.79732132 184.67179871]
[52.29732132 197.66217041]
[50.67756653 206.79606628]
[44.40745544 210.90307617]
[36.55236053 223.68186951]
[28.69726753 236.46066284]
[20.84217453 249.23945618]
[12.98708057 262.01824951]
[27.76799011 259.46389771]
[40.84740829 266.80752563]
[46.36197662 280.75704956]
[41.83957291 295.05908203]
[29.30754471 303.30215454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[6 21]
[7 20]
[9 18]
[10 17]
[26 108]
[27 107]
[28 106]
[29 105]
[30 104]
[31 102]
[32 101]
[33 100]
[35 98]
[36 97]
[37 96]
[38 95]
[40 94]
[41 93]
[42 92]
[44 90]
[45 89]
[46 88]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[57 80]
[58 79]
[59 78]
[60 77]
[61 75]
[62 74]
[63 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
