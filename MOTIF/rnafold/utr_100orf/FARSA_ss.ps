%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCGCCCACCCGGGCCCGGACACGCUGAGCACACUGGAAGGAGUCAUGGCGGAUGGUCAGGUGGCGGAACUGCUGCUCCGGCGGCUGGAGGCGUCUGAUGGCGGCCUGGACAGCGCCGAGUUGGCGGCUGAGCUGGGCAUGGAGC\
) } def
/len { sequence length } bind def

/coor [
[84.19030762 252.35308838]
[84.02417755 236.54966736]
[95.14095306 225.31611633]
[94.82470703 210.31944275]
[83.92868042 200.22924805]
[83.39433289 185.02499390]
[94.05174255 173.66465759]
[93.73550415 158.66798401]
[93.41925812 143.67132568]
[93.10301208 128.67465210]
[92.78676605 113.67799377]
[78.73944855 108.41560364]
[64.69337463 103.15367126]
[54.60169983 114.25132751]
[44.51002121 125.34898376]
[41.55217361 141.47918701]
[26.01538658 146.72706604]
[13.88257790 135.69407654]
[17.63493919 119.72999573]
[33.41236115 115.25730896]
[43.50403976 104.15965271]
[53.59571838 93.06198883]
[62.74419785 88.41249084]
[72.04845428 86.33652496]
[80.94795227 86.74652863]
[88.91639709 89.44602203]
[95.48151398 94.13867188]
[99.84523773 79.78743744]
[104.20896912 65.43620300]
[100.82099152 49.98200607]
[111.92620087 40.05610275]
[116.28993225 25.70486832]
[120.65365601 11.35363674]
[115.42745209 0.20714884]
[117.61170197 -10.63030434]
[124.91904449 -17.16753578]
[133.45205688 -17.85949326]
[134.71563721 -32.80617905]
[135.97920227 -47.75286102]
[124.45966339 -60.87484360]
[125.93151855 -77.93558502]
[139.00376892 -88.46780396]
[139.95193481 -103.43780518]
[140.90011597 -118.40781403]
[132.32778931 -134.66950989]
[142.52893066 -148.91349792]
[143.16128540 -163.90016174]
[143.79362488 -178.88682556]
[144.42597961 -193.87348938]
[145.05831909 -208.86015320]
[142.29499817 -214.98699951]
[142.98731995 -220.71383667]
[146.04647827 -224.46138000]
[147.31004333 -239.40806580]
[148.57362366 -254.35475159]
[149.83718872 -269.30145264]
[151.10076904 -284.24810791]
[152.36433411 -299.19479370]
[142.93760681 -316.96286011]
[154.50343323 -332.40927124]
[155.13578796 -347.39593506]
[155.76812744 -362.38259888]
[156.40048218 -377.36926270]
[149.25181580 -391.48333740]
[157.51878357 -403.87310791]
[158.15112305 -418.85977173]
[151.00247192 -432.97384644]
[159.26943970 -445.36364746]
[159.90177917 -460.35031128]
[160.53413391 -475.33697510]
[161.16647339 -490.32363892]
[148.92533875 -499.85958862]
[144.65950012 -514.77874756]
[150.00924683 -529.34448242]
[162.91751099 -537.95587158]
[178.42079163 -537.30175781]
[190.55775452 -527.63354492]
[194.66151428 -512.66900635]
[189.15406799 -498.16217041]
[176.15313721 -489.69128418]
[175.52079773 -474.70462036]
[174.88844299 -459.71795654]
[174.25610352 -444.73129272]
[181.44998169 -431.68914795]
[173.13780212 -418.22741699]
[172.50544739 -403.24075317]
[179.69932556 -390.19863892]
[171.38714600 -376.73690796]
[170.75479126 -361.75024414]
[170.12245178 -346.76358032]
[169.49009705 -331.77691650]
[177.10656738 -324.84164429]
[179.66653442 -314.63650513]
[176.07835388 -304.51177979]
[167.31101990 -297.93124390]
[166.04745483 -282.98455811]
[164.78387451 -268.03787231]
[163.52030945 -253.09118652]
[162.25672913 -238.14450073]
[160.99316406 -223.19781494]
[160.04499817 -208.22781372]
[159.41264343 -193.24114990]
[158.78028870 -178.25447083]
[158.14794922 -163.26780701]
[157.51559448 -148.28114319]
[165.48620605 -139.12565613]
[165.04008484 -126.59294128]
[155.87011719 -117.45964050]
[154.92195129 -102.48963928]
[153.97377014 -87.51963806]
[163.78361511 -79.10479736]
[166.98294067 -66.38137817]
[162.17944336 -53.96355057]
[150.92588806 -46.48929214]
[149.66232300 -31.54260635]
[148.39874268 -16.59592056]
[155.66935730 -3.47577381]
[169.01284790 3.37631917]
[182.35633850 10.22841167]
[195.69984436 17.08050537]
[211.35182190 13.55986118]
[223.77252197 23.71395302]
[223.43385315 39.75343323]
[210.59559631 49.37417984]
[195.10617065 45.19598389]
[188.84774780 30.42399788]
[175.50425720 23.57190514]
[162.16075134 16.71981239]
[148.81726074 9.86771965]
[135.00488281 15.71736336]
[130.64115906 30.06859589]
[126.27743530 44.41983032]
[129.97753906 58.84753036]
[118.56020355 69.79993439]
[114.19647217 84.15116119]
[109.83274841 98.50239563]
[107.78343201 113.36174774]
[108.09967804 128.35841370]
[108.41592407 143.35508728]
[108.73217010 158.35174561]
[109.04840851 173.34841919]
[120.17526245 184.24937439]
[120.28234863 199.46263123]
[109.82137299 210.00320435]
[110.13761902 224.99986267]
[121.71807861 235.75480652]
[122.21831512 251.55116272]
[111.34155273 263.01727295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 145]
[4 144]
[7 141]
[8 140]
[9 139]
[10 138]
[11 137]
[13 22]
[14 21]
[15 20]
[27 136]
[28 135]
[29 134]
[31 132]
[32 131]
[33 130]
[37 116]
[38 115]
[39 114]
[42 110]
[43 109]
[44 108]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[53 100]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[60 91]
[61 90]
[62 89]
[63 88]
[65 86]
[66 85]
[68 83]
[69 82]
[70 81]
[71 80]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
