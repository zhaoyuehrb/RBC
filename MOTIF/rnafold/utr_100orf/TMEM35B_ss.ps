%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUUUCGGCGGGGCCAACCCACGGUGGGGGGAGCGCGGCCAUGGCGCUCCUGCUUUCGGUGCUGCGUGUACUGCUGGGCGGCUUCUUCGCGCUCGUGGGGUUGGCCAAGCUCUCGGAGGAGAUCUCGGCUCCAGUUUCGG\
) } def
/len { sequence length } bind def

/coor [
[348.86227417 628.01812744]
[342.37457275 624.43157959]
[336.98352051 619.31121826]
[333.04446411 612.97918701]
[330.82086182 605.83801270]
[330.46679688 598.34484863]
[332.01620483 590.98254395]
[335.38006592 584.22814941]
[340.35140991 578.52221680]
[333.67401123 565.09045410]
[326.99664307 551.65869141]
[312.83941650 547.17443848]
[305.87625122 533.64782715]
[310.67575073 518.82885742]
[303.99835205 505.39706421]
[297.32095337 491.96530151]
[290.64355469 478.53353882]
[283.96615601 465.10177612]
[277.28875732 451.67001343]
[270.61135864 438.23825073]
[263.93395996 424.80645752]
[257.25659180 411.37469482]
[250.43203735 398.01708984]
[243.46119690 384.73526001]
[236.49034119 371.45339966]
[229.37402344 358.24893188]
[222.11309814 345.12344360]
[214.85215759 331.99792480]
[201.92097473 324.60647583]
[202.01123047 308.78552246]
[194.75028992 295.66003418]
[187.48936462 282.53451538]
[180.22842407 269.40902710]
[172.96749878 256.28350830]
[165.70655823 243.15802002]
[159.66972351 238.79388428]
[158.43391418 229.66345215]
[151.46305847 216.38162231]
[138.69735718 208.70788574]
[139.13514709 192.89273071]
[132.16429138 179.61088562]
[125.19344330 166.32905579]
[113.70034027 162.40362549]
[107.80159760 151.32987976]
[111.16415405 138.82540894]
[104.48675537 125.39364624]
[97.80936432 111.96187592]
[88.49386597 100.20510864]
[76.94457245 90.63359833]
[60.69558716 88.41944885]
[54.73989487 73.13999176]
[65.20420837 60.51342392]
[81.32373047 63.52887344]
[86.51609039 79.08430481]
[98.06537628 88.65582275]
[104.50495148 84.81109619]
[96.81571960 71.93182373]
[109.69512177 64.24280548]
[117.38409424 77.12165070]
[123.82366943 73.27692413]
[120.87712097 58.56917953]
[117.93056488 43.86143112]
[114.98401642 29.15368271]
[112.03746033 14.44593620]
[99.53684998 4.39037228]
[99.74868774 -11.65128231]
[112.51046753 -21.37324333]
[128.03244019 -17.31765366]
[134.40748596 -2.59561610]
[126.74520874 11.49938393]
[129.69175720 26.20713043]
[132.63830566 40.91487885]
[135.58486938 55.62262344]
[138.53141785 70.33037567]
[111.24112701 105.28447723]
[117.91852570 118.71624756]
[124.59592438 132.14801025]
[140.15887451 141.92333984]
[138.47528076 159.35820007]
[145.44613647 172.64004517]
[152.41697693 185.92189026]
[165.68127441 194.54562378]
[164.74490356 209.41076660]
[171.71574402 222.69261169]
[178.83206177 235.89707947]
[186.09300232 249.02258301]
[193.35392761 262.14810181]
[200.61486816 275.27359009]
[207.87579346 288.39910889]
[215.13673401 301.52459717]
[228.58726501 309.85488892]
[227.97766113 324.73699951]
[235.23860168 337.86251831]
[242.49952698 350.98800659]
[249.44635010 357.04058838]
[249.77218628 364.48257446]
[256.74304199 377.76440430]
[263.71389771 391.04623413]
[270.52606201 397.24996948]
[270.68835449 404.69729614]
[277.36575317 418.12905884]
[284.04315186 431.56085205]
[290.72055054 444.99261475]
[297.39794922 458.42437744]
[304.07534790 471.85614014]
[310.75271606 485.28790283]
[317.43011475 498.71966553]
[324.10751343 512.15142822]
[338.81909180 517.27081299]
[345.39956665 530.98760986]
[340.42840576 544.98132324]
[347.10580444 558.41308594]
[353.78320312 571.84484863]
[376.81872559 576.83410645]
[388.82583618 596.82098389]
[382.55072021 619.01367188]
[391.47381592 631.07098389]
[400.39688110 643.12829590]
[409.31997681 655.18560791]
[418.63546753 666.94238281]
[428.33325195 678.38580322]
[438.03103638 689.82928467]
[447.72885132 701.27270508]
[463.36431885 701.01544189]
[475.47451782 710.90875244]
[478.34136963 726.28131104]
[470.61123657 739.87463379]
[455.93405151 745.27044678]
[441.23995972 739.92095947]
[433.46701050 726.35205078]
[436.28540039 710.97052002]
[426.58758545 699.52703857]
[416.88980103 688.08361816]
[407.19198608 676.64013672]
[403.64886475 676.00708008]
[400.25125122 673.57897949]
[397.86145020 669.45074463]
[397.26266479 664.10864258]
[388.33956909 652.05133057]
[379.41650391 639.99407959]
[370.49340820 627.93676758]
[363.39157104 629.81781006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 113]
[10 112]
[11 111]
[14 108]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[22 100]
[23 98]
[24 97]
[25 96]
[26 94]
[27 93]
[28 92]
[30 90]
[31 89]
[32 88]
[33 87]
[34 86]
[35 85]
[37 84]
[38 83]
[40 81]
[41 80]
[42 79]
[45 77]
[46 76]
[47 75]
[48 55]
[49 54]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[116 141]
[117 140]
[118 139]
[119 138]
[120 134]
[121 133]
[122 132]
[123 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
