%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGUUUCACGCGCGUAUGCUUUGCCCGCCAUGGCCGCAGUCAAGGAGCCUUUGGAGUUCCAUGCCAAGCGGCCUUGGCGCCCCGAGGAGGCAGUAGAAGAUCCGGACGAGGAGGAUGAGGAUAAUACUA\
) } def
/len { sequence length } bind def

/coor [
[122.44530487 226.54353333]
[135.11221313 218.50927734]
[149.61668396 214.68560791]
[164.59814453 215.43122864]
[178.65014648 220.67555237]
[169.89167786 208.49815369]
[161.13320923 196.32075500]
[152.37472534 184.14335632]
[143.47087097 172.07183838]
[134.42291260 160.10795593]
[122.42985535 158.10772705]
[114.80242920 148.12785339]
[116.10037231 135.22996521]
[107.34189606 123.05255890]
[97.05098724 124.01306915]
[87.29829407 120.59103394]
[79.86373901 113.41100311]
[76.10417938 103.78338623]
[76.70576477 93.46527100]
[81.55869293 84.33978271]
[73.69822693 71.56430054]
[65.83775330 58.78881454]
[57.97728729 46.01333237]
[50.11681747 33.23784637]
[33.06868744 29.53434944]
[24.10721588 14.95968723]
[28.32741928 -1.27359009]
[20.16286278 -13.85691261]
[11.99830532 -26.44023514]
[3.83374834 -39.02355957]
[-4.33080816 -51.60688019]
[-18.33302498 -58.97224045]
[-18.76979637 -73.86044312]
[-26.93435287 -86.44376373]
[-35.09891129 -99.02708435]
[-43.26346588 -111.61041260]
[-51.42802429 -124.19373322]
[-59.59257889 -136.77705383]
[-76.44727325 -137.41699219]
[-89.49315643 -147.84472656]
[-93.74578094 -163.82423401]
[-87.73042297 -179.04913330]
[-96.19436646 -191.43304443]
[-110.36917114 -198.46052551]
[-111.16282654 -213.33396912]
[-119.62677765 -225.71789551]
[-128.09072876 -238.10182190]
[-136.55467224 -250.48574829]
[-145.01863098 -262.86965942]
[-160.59703064 -264.22875977]
[-171.62059021 -275.31997681]
[-172.88430786 -290.90640259]
[-163.79148865 -303.62863159]
[-148.63548279 -307.47955322]
[-134.57250977 -300.64096069]
[-128.24266052 -286.34176636]
[-132.63470459 -271.33361816]
[-124.17075348 -258.94970703]
[-115.70680237 -246.56576538]
[-107.24285126 -234.18185425]
[-98.77890778 -221.79792786]
[-85.20949554 -215.65621948]
[-83.81044769 -199.89700317]
[-75.34649658 -187.51307678]
[-61.96781540 -188.36103821]
[-49.83098984 -182.41726685]
[-42.17611313 -171.14872742]
[-41.10593033 -157.45925903]
[-47.00925827 -144.94160461]
[-38.84469986 -132.35829163]
[-30.68014336 -119.77496338]
[-22.51558685 -107.19164276]
[-14.35103035 -94.60832214]
[-6.18647337 -82.02500153]
[7.23175859 -75.55968475]
[8.25251484 -59.77143860]
[16.41707039 -47.18811417]
[24.58162880 -34.60479355]
[32.74618530 -22.02146912]
[40.91073990 -9.43814659]
[53.82137299 -8.52606106]
[63.98121643 -0.19630170]
[67.51002502 12.66145802]
[62.89229965 25.37737656]
[70.75276947 38.15286255]
[78.61324310 50.92834473]
[86.47370911 63.70383072]
[94.33418274 76.47931671]
[113.19181061 79.71946716]
[123.79822540 95.64469910]
[119.51930237 114.29409027]
[128.27777100 126.47148895]
[145.20904541 133.59313965]
[146.38679504 151.05999756]
[155.43475342 163.02388000]
[163.18696594 168.04498291]
[164.55213928 175.38487244]
[173.31060791 187.56228638]
[182.06907654 199.73968506]
[190.82756042 211.91708374]
[201.99075317 221.93621826]
[215.04067993 229.33212280]
[228.09059143 236.72804260]
[241.14051819 244.12396240]
[254.74780273 236.85449219]
[270.12329102 238.11845398]
[282.36074829 247.51252747]
[287.55520630 262.03909302]
[284.04916382 277.06277466]
[272.96136475 287.78958130]
[257.82989502 290.79660034]
[243.48315430 285.12435913]
[234.49913025 272.58279419]
[233.74459839 257.17388916]
[220.69468689 249.77796936]
[207.64476013 242.38204956]
[194.59484863 234.98612976]
[201.32257080 248.39276123]
[203.67707825 263.20681763]
[201.43753052 278.03869629]
[194.81398010 291.49710083]
[184.42774963 302.31958008]
[171.25309753 309.49096680]
[156.52587891 312.33856201]
[141.62753296 310.59521484]
[127.95557404 304.42449951]
[116.79250336 294.40521240]
[109.18544006 281.47723389]
[105.84796143 266.85324097]
[107.09313202 251.90501404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[9 95]
[10 94]
[13 92]
[14 91]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[42 64]
[43 63]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
