%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCCUUUACCUUUGCUUCAUUUUUCAGAGGACAUGCAGUGAGGAGAUGGAAGAGGAAAAUGCAACAUUGCUGACAGAGUUUGUUCUCACAGGAUUUU\
) } def
/len { sequence length } bind def

/coor [
[194.49174500 195.28823853]
[189.03466797 180.25090027]
[187.59274292 164.30845642]
[190.26676941 148.51512146]
[176.56991577 142.39985657]
[162.87306213 136.28460693]
[149.17622375 130.16935730]
[135.47937012 124.05410004]
[121.78252411 117.93884277]
[108.08567047 111.82359314]
[94.16036224 113.07952881]
[85.79907227 101.87326050]
[72.10222626 95.75800323]
[56.34659576 97.19700623]
[47.87939835 84.94319916]
[34.18254852 78.82794189]
[18.42692184 80.26695251]
[9.95972443 68.01313782]
[-3.73712468 61.89788437]
[-17.43397331 55.78263092]
[-31.13082123 49.66737747]
[-44.82767105 43.55212402]
[-58.52452087 37.43687057]
[-72.22136688 31.32161522]
[-82.34916687 35.86403275]
[-93.06953430 34.01889420]
[-100.77490997 26.65808678]
[-103.01275635 16.46650887]
[-116.30293274 9.51155567]
[-130.69322205 15.63148880]
[-145.63548279 11.02030659]
[-154.07441711 -2.14473033]
[-152.02545166 -17.64749527]
[-140.45600891 -28.16805458]
[-124.82884979 -28.73892593]
[-112.52263641 -19.09055710]
[-109.34797668 -3.77861428]
[-96.05780792 3.17633867]
[-76.97599792 0.78938490]
[-66.10611725 17.62476730]
[-52.40926361 23.74002075]
[-38.71241760 29.85527420]
[-25.01556778 35.97052765]
[-11.31871891 42.08578491]
[2.37812972 48.20103836]
[16.07497787 54.31629181]
[30.85091591 52.43988419]
[40.29780579 65.13109589]
[53.99465179 71.24635315]
[68.77059174 69.36994171]
[78.21747589 82.06115723]
[91.91432953 88.17640686]
[105.83963776 86.92047119]
[114.20092773 98.12673950]
[127.89777374 104.24199677]
[141.59461975 110.35725403]
[155.29147339 116.47250366]
[168.98832703 122.58776093]
[182.68516541 128.70301819]
[196.38201904 134.81826782]
[205.02807617 123.60751343]
[215.97654724 114.64411926]
[228.65937805 108.38851166]
[242.41963196 105.16072083]
[256.54541016 105.12406158]
[270.30679321 108.27685547]
[282.99340820 114.45269012]
[293.95132446 123.32921600]
[302.61648560 134.44496155]
[308.54394531 147.22331238]
[311.43069458 161.00247192]
[311.13104248 175.06964111]
[307.66406250 188.69801331]
[320.95422363 195.65296936]
[334.24438477 202.60791016]
[344.63500977 198.70393372]
[355.21994019 201.21197510]
[362.45278931 209.03758240]
[364.05270386 219.34857178]
[376.88476562 227.11631775]
[389.71682739 234.88406372]
[405.00238037 230.86811829]
[418.60827637 238.90896606]
[422.46240234 254.23611450]
[414.27813721 267.75622559]
[398.91110229 271.44808960]
[385.47827148 263.12133789]
[381.94909668 247.71614075]
[369.11703491 239.94839478]
[356.28494263 232.18064880]
[337.09164429 233.37667847]
[327.28945923 215.89808655]
[313.99926758 208.94313049]
[300.70910645 201.98817444]
[290.09671021 213.84455872]
[276.80224609 222.60766602]
[261.70230103 227.69322205]
[245.79405212 228.75970459]
[230.12959290 225.73112488]
[215.74624634 218.80256653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 60]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[12 52]
[13 51]
[15 49]
[16 48]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[28 38]
[29 37]
[73 94]
[74 93]
[75 92]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
