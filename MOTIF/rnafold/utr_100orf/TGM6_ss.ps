%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUCCUGACGGUGCACACACUGCUGUGUGGAGGAACAGAGGAGUCCAGCUGGCCUUCACAUGGCAGGGAUCAGAGUCACCAAGGUGGACUGGCAGCGGUCGAGGAAUGGCGCUGCCCACCACACCCAGGAGUACCCCUGCCCUGAGCUGGUGGUUCGCA\
) } def
/len { sequence length } bind def

/coor [
[-92.90255737 185.47354126]
[-97.20460510 199.84338379]
[-101.50665283 214.21322632]
[-105.80870056 228.58306885]
[-110.11074829 242.95291138]
[-105.80440521 258.77655029]
[-117.54541016 270.22558594]
[-133.25561523 265.52227783]
[-136.77372742 249.50494385]
[-124.48059082 238.65086365]
[-120.17854309 224.28102112]
[-115.87649536 209.91117859]
[-111.57444763 195.54133606]
[-107.27239990 181.17149353]
[-113.44482422 177.67704773]
[-119.05318451 173.33468628]
[-123.98187256 168.23391724]
[-128.12928772 162.47988892]
[-131.40991211 156.19122314]
[-133.75614929 149.49755859]
[-135.11959839 142.53689575]
[-135.47216797 135.45271301]
[-150.24427795 132.84799194]
[-165.01638794 130.24327087]
[-179.78851318 127.63854218]
[-194.56062317 125.03382111]
[-209.33274841 122.42910004]
[-224.10485840 119.82437897]
[-238.87696838 117.21965027]
[-253.64909363 114.61492920]
[-268.42120361 112.01020813]
[-283.19332886 109.40548706]
[-297.96545410 106.80076599]
[-312.73754883 104.19603729]
[-327.50967407 101.59131622]
[-338.53439331 108.34771729]
[-350.80999756 105.84147644]
[-357.83776855 95.95798492]
[-372.55657959 93.06729889]
[-387.27542114 90.17662048]
[-404.52627563 96.55251312]
[-417.31103516 84.56164551]
[-432.08316040 81.95692444]
[-448.73159790 85.16096497]
[-456.41915894 70.05012512]
[-444.02700806 58.47988892]
[-429.47842407 67.18480682]
[-414.70632935 69.78952789]
[-404.59039307 63.10062790]
[-392.23599243 65.18399811]
[-384.38473511 75.45778656]
[-369.66589355 78.34847260]
[-354.94708252 81.23915863]
[-338.70153809 74.65786743]
[-324.90493774 86.81919861]
[-310.13284302 89.42391968]
[-295.36071777 92.02864838]
[-280.58859253 94.63336945]
[-265.81649780 97.23809052]
[-251.04437256 99.84281158]
[-236.27224731 102.44754028]
[-221.50013733 105.05226135]
[-206.72801208 107.65698242]
[-191.95590210 110.26170349]
[-177.18379211 112.86642456]
[-162.41166687 115.47115326]
[-147.63955688 118.07587433]
[-132.86743164 120.68059540]
[-124.56504059 105.43925476]
[-111.48551941 93.98758698]
[-95.22776794 87.75158691]
[-77.78823853 87.51803589]
[-61.31578827 93.33535004]
[-47.84688568 104.50513458]
[-39.05386734 119.66601562]
[-24.33503723 116.77533722]
[-9.61620808 113.88465118]
[5.10262156 110.99396515]
[19.82145119 108.10327911]
[34.54027939 105.21260071]
[49.25910950 102.32191467]
[63.97793961 99.43122864]
[78.69676971 96.54055023]
[92.68167114 75.61521912]
[121.58229065 80.12987518]
[133.95242310 71.64577484]
[146.32254028 63.16166687]
[158.69267273 54.67756653]
[157.23571777 38.23073578]
[164.21862793 23.37228775]
[177.65629578 14.10432243]
[193.83940125 12.87051010]
[208.35810852 19.91240692]
[220.56138611 11.19002628]
[232.76466370 2.46764541]
[244.96795654 -6.25473547]
[257.17123413 -14.97711658]
[269.37451172 -23.69949722]
[281.57778931 -32.42187881]
[286.77243042 -39.99660873]
[294.10336304 -41.19236755]
[306.47348022 -49.67647171]
[318.84359741 -58.16057587]
[323.18423462 -73.60527039]
[338.02111816 -79.70823669]
[351.97268677 -71.78780365]
[354.33648682 -55.91984940]
[343.29919434 -44.27690887]
[327.32769775 -45.79045105]
[314.95758057 -37.30634689]
[302.58746338 -28.82224464]
[290.30017090 -20.21859741]
[278.09689331 -11.49621677]
[265.89361572 -2.77383566]
[253.69033813 5.94854546]
[241.48704529 14.67092609]
[229.28376770 23.39330673]
[217.08049011 32.11568832]
[219.29531860 45.61861038]
[215.44766235 58.81890488]
[206.23605347 69.11574554]
[193.42163086 74.45471954]
[179.49165344 73.73759460]
[167.17677307 67.04769135]
[154.80664062 75.53179169]
[142.43652344 84.01589966]
[130.06639099 92.50000000]
[130.06639099 107.50000000]
[142.43652344 115.98410034]
[154.80664062 124.46820831]
[167.17677307 132.95231628]
[176.07136536 135.24298096]
[179.70233154 141.72279358]
[191.90560913 150.44517517]
[204.10888672 159.16755676]
[220.47450256 160.21577454]
[227.50605774 175.03094482]
[217.97007751 188.37251282]
[201.67637634 186.51579285]
[195.38650513 171.37084961]
[183.18322754 162.64846802]
[170.97994995 153.92608643]
[158.69267273 145.32243347]
[146.32254028 136.83833313]
[133.95242310 128.35423279]
[121.58229065 119.87012482]
[109.76731873 125.59761810]
[97.51809692 125.33802032]
[87.51007080 119.93061066]
[81.58745575 111.25937653]
[66.86862183 114.15006256]
[52.14979553 117.04074097]
[37.43096542 119.93142700]
[22.71213531 122.82211304]
[7.99330521 125.71279907]
[-6.72552443 128.60348511]
[-21.44435310 131.49417114]
[-36.16318512 134.38484192]
[-38.56436157 151.62326050]
[-46.72043991 166.95408630]
[-59.61561203 178.52565002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[38 53]
[39 52]
[40 51]
[42 48]
[43 47]
[75 158]
[76 157]
[77 156]
[78 155]
[79 154]
[80 153]
[81 152]
[82 151]
[83 150]
[85 127]
[86 126]
[87 125]
[88 124]
[93 118]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[101 111]
[102 110]
[103 109]
[128 146]
[129 145]
[130 144]
[131 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
