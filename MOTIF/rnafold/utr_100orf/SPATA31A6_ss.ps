%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCUUGAAAGCAACGUGCCUAUUCACAUGGAGAAUCUUCCCUUUCCUUUAAAAUUACUUAGUGCCUCAUCGCUAAACGCCCCCAGCUCCACACCAUGGGUGUUGGAUAUCUUCCUCACCUUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[100.51071167 149.84449768]
[81.73132324 148.08636475]
[75.08345032 161.53277588]
[68.43557739 174.97917175]
[61.78770447 188.42558289]
[55.13982773 201.87197876]
[48.49195480 215.31838989]
[50.08742142 231.63973999]
[36.59481812 240.96076965]
[21.89418030 233.69281006]
[21.10826492 217.31251526]
[35.04555130 208.67051697]
[41.69342422 195.22410583]
[48.34129715 181.77770996]
[54.98917007 168.33129883]
[61.63704681 154.88490295]
[68.28491974 141.43849182]
[57.80724716 130.70451355]
[44.20413208 137.02552795]
[30.60101700 143.34654236]
[25.41178322 158.27461243]
[11.15049267 165.08572388]
[-3.72188354 159.73895264]
[-10.38182831 145.40644836]
[-4.87811470 130.59143066]
[9.52400112 124.08338928]
[24.28000069 129.74342346]
[37.88311768 123.42241669]
[51.48623276 117.10139465]
[47.85813141 101.84761047]
[48.98019791 85.98600006]
[54.88176346 70.98169708]
[40.98914337 65.32527161]
[27.09652328 59.66884995]
[13.20390415 54.01242828]
[-0.68871534 48.35600662]
[-13.79842186 56.65752411]
[-29.28172493 55.63430405]
[-41.18497467 45.67979813]
[-44.93113708 30.62171364]
[-39.07972717 16.25019264]
[-25.88073540 8.09137726]
[-10.40944386 9.28249931]
[1.38512015 19.36554718]
[4.96770716 34.46338654]
[18.86032677 40.11980820]
[32.75294495 45.77622986]
[46.64556503 51.43265152]
[60.53818512 57.08907700]
[67.17910767 53.60365295]
[57.69902039 41.97919846]
[48.21893311 30.35474205]
[36.54328537 20.93777275]
[35.04204178 6.01308680]
[44.60829163 -5.54056358]
[59.55104065 -6.84986687]
[70.98078918 2.86408591]
[72.09807587 17.82200050]
[76.27951050 32.22740173]
[80.46094513 46.63280487]
[87.10186768 43.14738083]
[90.33863068 28.50076485]
[93.57539368 13.85414791]
[96.81215668 -0.79246789]
[100.04891968 -15.43908405]
[103.28568268 -30.08570099]
[94.57487488 -43.27271652]
[97.82184601 -58.73986816]
[111.10021973 -67.31076813]
[126.53218079 -63.90044785]
[134.96220398 -50.53219986]
[131.38893127 -35.13716125]
[117.93229675 -26.84893799]
[114.69553375 -12.20232105]
[111.45877075 2.44429517]
[108.22200775 17.09091187]
[104.98524475 31.73752785]
[101.74848175 46.38414383]
[114.68093872 50.82793045]
[125.50897217 58.17591858]
[133.64222717 67.66526031]
[145.98698425 59.14429092]
[150.28150940 43.68671799]
[165.10012817 37.53950882]
[179.07527161 45.41828537]
[181.48638916 61.27911758]
[170.48390198 72.95493317]
[154.50796509 71.48905182]
[142.16320801 80.01002502]
[145.64381409 90.30582428]
[146.64830017 101.12752533]
[145.12216187 111.88806152]
[141.14817810 122.00368500]
[153.06684875 131.11111450]
[164.98551941 140.21855164]
[176.90417480 149.32598877]
[188.82284546 158.43342590]
[200.74151611 167.54086304]
[209.55630493 170.30601501]
[212.83459473 177.01519775]
[224.52972412 186.40797424]
[236.22483826 195.80076599]
[247.91995239 205.19354248]
[259.61505127 214.58631897]
[272.56500244 213.97534180]
[282.12600708 222.12364197]
[283.48480225 234.20747375]
[294.94955444 243.88009644]
[306.41427612 253.55273438]
[322.45712280 253.63558960]
[332.28137207 266.31878662]
[328.35070801 281.87289429]
[313.68038940 288.36608887]
[299.52426147 280.81735229]
[296.74166870 265.01745605]
[285.27691650 255.34483337]
[273.81219482 245.67221069]
[256.43365479 243.56640625]
[250.22229004 226.28143311]
[238.52717590 216.88865662]
[226.83206177 207.49588013]
[215.13693237 198.10308838]
[203.44181824 188.71031189]
[191.63407898 179.45953369]
[179.71540833 170.35209656]
[167.79673767 161.24465942]
[155.87808228 152.13722229]
[143.95941162 143.02978516]
[132.04074097 133.92234802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[18 29]
[19 28]
[20 27]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[81 89]
[82 88]
[93 129]
[94 128]
[95 127]
[96 126]
[97 125]
[98 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
