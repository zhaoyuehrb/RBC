%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGCUCAAAGGAAUCGCUCAAAGGAAUCAAAGGAUUGCAGCGGGCUGGUCCUGCUCUGCCUUUUCUUCGGGAUUCCAUGGGAGGCUGGAGCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[127.12060547 347.53997803]
[134.24124146 334.07830811]
[146.22563171 324.68182373]
[142.53144836 310.14382935]
[138.83726501 295.60583496]
[135.14308167 281.06787109]
[124.50964355 270.63812256]
[128.60993958 255.35748291]
[124.91574860 240.81950378]
[121.22156525 226.28150940]
[117.52738190 211.74353027]
[107.21762085 205.20695496]
[104.09535217 192.98910522]
[110.39449310 181.60148621]
[107.15422821 166.95564270]
[103.91395569 152.30981445]
[100.67369080 137.66397095]
[97.43342590 123.01812744]
[94.19315338 108.37228394]
[89.43820190 101.67262268]
[91.08736420 93.22077179]
[88.30414581 78.48123932]
[78.79882050 72.74933624]
[74.20387268 62.88945770]
[75.85936737 52.36265182]
[82.95734406 44.71445847]
[81.09586334 29.83041000]
[79.23438263 14.94636154]
[77.37290192 0.06231346]
[75.51142120 -14.82173443]
[72.12513733 -19.25799370]
[71.02120209 -24.07117844]
[71.93580627 -28.28047371]
[74.23746490 -31.17138863]
[73.77097321 -46.16413116]
[73.30447388 -61.15687561]
[72.83797455 -76.14962006]
[61.49429703 -81.86516571]
[53.75889969 -91.84838104]
[51.08798599 -104.11753845]
[53.94021988 -116.27098846]
[61.69933701 -125.95726776]
[72.80601501 -131.33001709]
[73.27251434 -146.32276917]
[73.73901367 -161.31550598]
[74.20551300 -176.30825806]
[74.67201233 -191.30099487]
[75.13850403 -206.29374695]
[65.24471283 -218.92277527]
[69.08985138 -234.49821472]
[83.72425842 -241.07192993]
[97.92166901 -233.60112000]
[100.79104614 -217.81675720]
[90.13124847 -205.82723999]
[89.66475677 -190.83450317]
[89.19825745 -175.84175110]
[88.73175812 -160.84901428]
[88.26525879 -145.85626221]
[87.79875946 -130.86352539]
[102.17697906 -120.85633850]
[107.84632874 -104.11753845]
[102.41420746 -87.13750458]
[87.83071899 -76.61611938]
[88.29721832 -61.62337494]
[88.76371765 -46.63063049]
[89.23020935 -31.63788605]
[90.39546967 -16.68321609]
[92.25695038 -1.79916787]
[94.11843109 13.08487988]
[95.97991180 27.96892929]
[97.84139252 42.85297775]
[110.67981720 57.17037201]
[103.04367828 75.69802856]
[105.82688904 90.43755341]
[108.83899689 105.13201904]
[112.07926178 119.77785492]
[115.31953430 134.42369080]
[118.55979919 149.06953430]
[121.80006409 163.71537781]
[125.04033661 178.36122131]
[137.78393555 191.53875732]
[132.06536865 208.04934692]
[135.75955200 222.58732605]
[139.45373535 237.12532043]
[143.14791870 251.66329956]
[154.04559326 263.13287354]
[149.68107605 277.37368774]
[153.37525940 291.91165161]
[157.06944275 306.44964600]
[160.76362610 320.98764038]
[175.77998352 323.52310181]
[188.46327209 331.95245361]
[196.61599731 344.81530762]
[198.82566833 359.88305664]
[194.70945740 374.54516602]
[184.98049927 386.26126099]
[171.32440186 393.00152588]
[156.10717773 393.59814453]
[141.96530151 387.94772339]
[131.34892273 377.02929688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 90]
[4 89]
[5 88]
[6 87]
[8 85]
[9 84]
[10 83]
[11 82]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[21 74]
[22 73]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[34 66]
[35 65]
[36 64]
[37 63]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
