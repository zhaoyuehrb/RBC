%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGACCCCCGCCCCUGCCGCCGCCACCGCCAUGGGCAACGCCCCCGCCAAGAAGGACACCGAGCAGGAGGAGAGCGUGAACGAGUUCCUAGCCAAAGCCAGAGGAGAUUUCCUCUACAGAUGGGGAAACC\
) } def
/len { sequence length } bind def

/coor [
[86.91625214 263.54330444]
[73.33006287 256.58786011]
[64.11402893 244.42121887]
[61.09799194 229.45906067]
[64.88079834 214.67213440]
[74.71136475 202.99639893]
[88.63782501 196.75009155]
[88.99478912 181.75433350]
[89.35176086 166.75857544]
[89.70872498 151.76283264]
[90.06568909 136.76707458]
[71.06310272 120.97881317]
[66.64821625 98.25393677]
[76.89936066 79.24729156]
[62.97384644 73.67235565]
[49.04832458 68.09741211]
[35.12280655 62.52248001]
[21.19728851 56.94754028]
[7.20641518 51.53870773]
[-6.84783077 46.29674530]
[-21.13558006 41.72945023]
[-35.62446976 37.84716415]
[-44.91463089 49.84585190]
[-58.05541611 57.35336685]
[-73.02893066 59.25271606]
[-87.54953003 55.28536606]
[-99.41270447 46.08591080]
[-106.82978058 33.08081818]
[-108.69755554 18.26728821]
[-123.18643951 14.38500309]
[-134.05165100 22.44311905]
[-147.38046265 22.73624611]
[-158.26586914 15.38201141]
[-162.83053589 3.27208233]
[-177.22293091 -0.95390594]
[-191.61532593 -5.17989445]
[-206.00772095 -9.40588284]
[-222.90870667 -8.06686115]
[-228.87405396 -23.93667412]
[-215.27581787 -34.06209564]
[-201.78173828 -23.79827690]
[-187.38934326 -19.57228851]
[-172.99694824 -15.34630013]
[-158.60455322 -11.12031174]
[-144.25445557 -19.80562210]
[-127.72550964 -15.38356686]
[-119.30415344 -0.10388412]
[-104.81526947 3.77840161]
[-95.79096222 -8.11660385]
[-82.86504364 -15.67080688]
[-67.99150085 -17.70617867]
[-53.43262100 -13.88170910]
[-41.41485214 -4.75006676]
[-33.78835678 8.32202339]
[-31.74218178 23.35827637]
[-17.25329590 27.24056244]
[-14.70524597 25.86359596]
[-11.43261623 25.46401787]
[-7.82442236 26.33306503]
[-4.37117052 28.60842133]
[-1.60586822 32.24250031]
[12.44837761 37.48446274]
[19.88717270 36.86842346]
[26.77222443 43.02202225]
[40.69774246 48.59695816]
[54.62326431 54.17189789]
[68.54878235 59.74683380]
[82.47430420 65.32176971]
[96.91596222 61.26734543]
[105.90512848 49.25922775]
[114.89429474 37.25111008]
[123.88346100 25.24299049]
[132.87261963 13.23487186]
[130.82292175 -2.20651627]
[140.11027527 -14.25640202]
[154.84390259 -16.11532402]
[163.83306885 -28.12344170]
[165.24163818 -44.46198273]
[180.20816040 -51.16536713]
[193.33634949 -41.33772278]
[191.12106323 -25.08889198]
[175.84118652 -19.13427734]
[166.85202026 -7.12615871]
[169.21934509 7.53437948]
[160.27410889 19.84037399]
[144.88073730 22.22403717]
[135.89157104 34.23215485]
[126.90241241 46.24027252]
[117.91324615 58.24839401]
[108.92407990 70.25650787]
[118.51133728 78.14794159]
[123.53722382 88.43672180]
[138.32954407 85.94927216]
[150.62385559 75.09654236]
[166.08149719 80.57315063]
[168.80096436 96.74524689]
[155.98471069 106.97634888]
[140.81698608 100.74158478]
[126.02467346 103.22903442]
[131.70339966 105.36950684]
[137.23204041 108.01768494]
[150.72438049 114.57184601]
[164.21670532 121.12601471]
[177.70903015 127.68018341]
[191.20135498 134.23434448]
[204.69367981 140.78851318]
[221.00354004 139.07954407]
[230.41821289 152.50697327]
[223.25270081 167.25782776]
[206.87825012 168.15766907]
[198.13951111 154.28085327]
[184.64718628 147.72668457]
[171.15486145 141.17251587]
[157.66253662 134.61834717]
[144.17021179 128.06417847]
[130.67787170 121.51000977]
[124.27376556 125.41351318]
[135.65652466 135.18249512]
[129.88294983 149.02684021]
[114.93208313 147.81381226]
[111.46555328 133.22053528]
[105.06143951 137.12403870]
[104.70447540 152.11979675]
[104.34751129 167.11553955]
[103.99054718 182.11129761]
[103.63357544 197.10705566]
[117.24705505 204.00894165]
[126.51093292 216.13920593]
[129.58586121 231.08937073]
[125.86131287 245.89108276]
[116.07680511 257.60543823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 126]
[8 125]
[9 124]
[10 123]
[11 122]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 62]
[20 61]
[21 56]
[22 55]
[29 48]
[30 47]
[34 44]
[35 43]
[36 42]
[37 41]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[76 83]
[77 82]
[92 99]
[93 98]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
