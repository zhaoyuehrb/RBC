%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCCCGCUCCUCUCCGGCCGCGCAGCCGCUGCCGCCCACCCGCACCCGCCGUCAUGCUCCGGGCCGCGCUGCCCGCGCUCCUGCUGCCGUUGCUGGGCCUCGCCGCUGCUGCCGUCGCGGACUGUCCUUCAUCUACUUGGAUUCAGUUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[126.46828461 203.90834045]
[121.97509003 180.32209778]
[132.25314331 158.49873352]
[123.58176422 146.25917053]
[114.91038513 134.01959229]
[106.23900604 121.78001404]
[100.45044708 122.65151978]
[94.63182068 122.01084137]
[86.45390320 134.58547974]
[78.27597809 147.16012573]
[83.95274353 161.60151672]
[80.02432251 176.61308289]
[68.00127411 186.42256165]
[52.50670242 187.25801086]
[39.49859238 178.79818726]
[33.97882462 164.29605103]
[38.06986237 149.32798767]
[50.19861984 139.64950562]
[65.70133972 138.98219299]
[73.87925720 126.40755463]
[82.05718231 113.83291626]
[77.50503540 97.30352020]
[85.83484650 82.31829071]
[80.86055756 68.16709137]
[75.03137207 61.06198502]
[75.93109894 53.68480301]
[71.23915100 39.43750000]
[66.54719543 25.19019890]
[61.85524750 10.94289589]
[57.16329956 -3.30440569]
[45.49760818 -13.99188614]
[48.86560440 -28.50070572]
[44.17365646 -42.74800873]
[32.50796509 -53.43548965]
[35.87596130 -67.94430542]
[31.18401337 -82.19161224]
[15.55235386 -94.86318207]
[20.17703438 -113.60541534]
[14.92237186 -127.65491486]
[9.66770935 -141.70442200]
[4.41304636 -155.75392151]
[-0.84161621 -169.80342102]
[-4.95907068 -173.18699646]
[-7.11414576 -177.40005493]
[-7.32309341 -181.54125977]
[-5.96324348 -184.85028076]
[-10.37099743 -199.18806458]
[-14.77875233 -213.52583313]
[-29.30882645 -218.64277649]
[-37.93891144 -231.18769836]
[-37.53209686 -246.23091125]
[-28.45389366 -258.00903320]
[-32.86164856 -272.34680176]
[-44.31254196 -283.26412964]
[-40.65674591 -297.70312500]
[-45.06449890 -312.04089355]
[-61.11765671 -317.28598022]
[-70.80180359 -330.91894531]
[-70.47521973 -347.47235107]
[-60.46344757 -360.45007324]
[-65.15539551 -374.69738770]
[-76.32539368 -381.21771240]
[-79.92148590 -393.22296143]
[-74.53141785 -404.09042358]
[-78.93917084 -418.42819214]
[-83.34692383 -432.76596069]
[-87.75467682 -447.10372925]
[-92.16242981 -461.44149780]
[-106.24381256 -468.61715698]
[-111.04736328 -483.67376709]
[-103.72322083 -497.67849731]
[-88.61666870 -502.32260132]
[-74.69015503 -494.85079956]
[-70.20603943 -479.69598389]
[-77.82466125 -465.84924316]
[-73.41690826 -451.51147461]
[-69.00914764 -437.17370605]
[-64.60139465 -422.83593750]
[-60.19364166 -408.49816895]
[-46.71688461 -397.29421997]
[-50.90809250 -379.38931274]
[-46.21614456 -365.14202881]
[-33.15118790 -362.25164795]
[-23.14959526 -353.20019531]
[-18.90604210 -340.28158569]
[-21.63524628 -326.84994507]
[-30.72672653 -316.44863892]
[-26.31897163 -302.11087036]
[-15.18335056 -292.21908569]
[-18.52387619 -276.75457764]
[-14.11612129 -262.41680908]
[0.01072546 -257.77243042]
[8.79788208 -245.55563354]
[8.70534229 -230.32919312]
[-0.44097999 -217.93357849]
[3.96677423 -203.59580994]
[8.37452793 -189.25804138]
[13.20788670 -175.05809021]
[18.46254921 -161.00859070]
[23.71721077 -146.95907593]
[28.97187424 -132.90957642]
[34.22653580 -118.86007690]
[43.92837906 -115.44640350]
[50.25878143 -107.06284332]
[50.91342545 -96.35743713]
[45.43131638 -86.88356018]
[50.12326431 -72.63626099]
[61.45335388 -62.96784210]
[58.42095947 -47.43995667]
[63.11290741 -33.19265366]
[74.44300079 -23.52423859]
[71.41059875 -7.99635506]
[76.10255432 6.25094700]
[80.79450226 20.49824905]
[85.48645020 34.74555206]
[90.17839813 48.99285126]
[95.01175690 63.19280624]
[99.98604584 77.34400177]
[115.08927917 83.10005951]
[122.51286316 97.45729828]
[118.47858429 113.10863495]
[127.14996338 125.34821320]
[135.82133484 137.58778381]
[144.49272156 149.82736206]
[151.41053772 147.50549316]
[158.63096619 146.51081848]
[165.90199280 146.87486267]
[172.97048950 148.58181763]
[179.59094238 151.56912231]
[185.53396606 155.72987366]
[190.59432983 160.91650391]
[194.59800720 166.94615173]
[197.40812683 173.60699463]
[198.92967224 180.66575623]
[199.11271667 187.87585449]
[197.95404053 194.98602295]
[195.49711609 201.74903870]
[191.83047485 207.93038940]
[187.08457947 213.31632996]
[181.42713928 217.72126770]
[186.96009827 231.66351318]
[192.49305725 245.60577393]
[198.02601624 259.54803467]
[203.55897522 273.49026489]
[209.09193420 287.43252563]
[223.69891357 293.46673584]
[229.68353271 308.09411621]
[223.49520874 322.63647461]
[208.80538940 328.46609497]
[194.32926941 322.12438965]
[188.65527344 307.37374878]
[195.14968872 292.96548462]
[189.61672974 279.02322388]
[184.08377075 265.08099365]
[178.55081177 251.13873291]
[173.01785278 237.19647217]
[167.48489380 223.25422668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 124]
[4 123]
[5 122]
[6 121]
[8 21]
[9 20]
[10 19]
[23 118]
[24 117]
[26 116]
[27 115]
[28 114]
[29 113]
[30 112]
[32 110]
[33 109]
[35 107]
[36 106]
[38 102]
[39 101]
[40 100]
[41 99]
[42 98]
[46 97]
[47 96]
[48 95]
[52 91]
[53 90]
[55 88]
[56 87]
[60 82]
[61 81]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[140 157]
[141 156]
[142 155]
[143 154]
[144 153]
[145 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
