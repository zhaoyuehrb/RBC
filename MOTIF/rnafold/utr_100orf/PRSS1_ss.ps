%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCACACUCUACCACCAUGAAUCCACUCCUGAUCCUUACCUUUGUGGCAGCUGCUCUUGCUGCCCCCUUUGAUGAUGAUGACAAGAUCGUUGGGGGCUACAACUGUGAGGAGAAUU\
) } def
/len { sequence length } bind def

/coor [
[-18.08414078 361.19738770]
[-23.94484711 375.03762817]
[-31.84967041 387.82098389]
[-41.61330795 399.24780273]
[-53.00688553 409.05017090]
[-65.76332092 416.99838257]
[-79.58358765 422.90606689]
[-94.14371490 426.63473511]
[-109.10240173 428.09701538]
[-124.10898590 427.25860596]
[-138.81169128 424.13916016]
[-152.86585999 418.81182861]
[-165.94206238 411.40145874]
[-177.73376465 402.08178711]
[-187.96453857 391.07125854]
[-196.39457703 378.62799072]
[-202.82626343 365.04367065]
[-207.10881042 350.63671875]
[-209.14186096 335.74487305]
[-208.87774658 320.71722412]
[-206.32264709 305.90600586]
[-201.53646851 291.65844727]
[-194.63140869 278.30853271]
[-185.76931763 266.16918945]
[-175.15794373 255.52496338]
[-163.04603577 246.62541199]
[-149.71751404 239.67912292]
[-135.48480225 234.84895325]
[-120.68156433 232.24809265]
[-105.65478516 231.93754578]
[-90.75672913 233.92457581]
[-76.33661652 238.16259766]
[-62.73248291 244.55227661]
[-50.26322937 252.94381714]
[-40.08855057 241.92221069]
[-29.91387177 230.90060425]
[-19.73919487 219.87898254]
[-9.56451702 208.85737610]
[0.61016011 197.83575439]
[10.78483772 186.81414795]
[9.93541431 171.98802185]
[20.09697723 160.66560364]
[35.65374374 159.87516785]
[45.82842255 148.85356140]
[56.00309753 137.83193970]
[66.17777252 126.81033325]
[76.35245514 115.78871918]
[86.52713013 104.76710510]
[90.85751343 90.40577698]
[88.47155762 75.59674835]
[86.08560181 60.78772736]
[83.69965363 45.97870255]
[70.18235779 38.11633682]
[64.93000031 23.38722420]
[70.42259216 8.74599743]
[84.06668854 1.10579765]
[99.41996765 4.07409286]
[109.23308563 16.24934387]
[108.87258148 31.88277245]
[98.50867462 43.59274673]
[100.89463043 58.40177536]
[103.28058624 73.21080017]
[105.66653442 88.01982117]
[118.88356781 95.11277771]
[132.54309082 88.91459656]
[146.20260620 82.71641541]
[159.86213684 76.51822662]
[173.52165222 70.32004547]
[179.15811157 55.79874420]
[193.09909058 49.70749283]
[206.90820312 55.17047501]
[220.56771851 48.97229004]
[234.22724915 42.77410889]
[247.88676453 36.57592392]
[253.52322388 22.05462265]
[267.46420288 15.96337032]
[281.27331543 21.42635155]
[294.93283081 15.22816944]
[304.03237915 1.58521521]
[320.37762451 2.91405153]
[327.15393066 17.84768486]
[317.39047241 31.02367401]
[301.13101196 28.88769150]
[287.47149658 35.08587265]
[282.48931885 49.07563782]
[268.72491455 55.55606461]
[254.08494568 50.23544693]
[240.42543030 56.43362808]
[226.76591492 62.63181305]
[213.10638428 68.82999420]
[208.12420654 82.81976318]
[194.35981750 89.30018616]
[179.71983337 83.97956848]
[166.06031799 90.17774963]
[152.40080261 96.37593079]
[138.74127197 102.57411957]
[125.08175659 108.77230072]
[97.54874420 114.94178772]
[87.37406921 125.96339417]
[77.19938660 136.98501587]
[67.02471161 148.00662231]
[56.85003281 159.02822876]
[46.67535400 170.04985046]
[47.12866211 185.62008667]
[36.65308380 196.65261841]
[21.80644989 196.98883057]
[11.63177204 208.01043701]
[1.45709479 219.03204346]
[-8.71758270 230.05366516]
[-18.89225960 241.07527161]
[-29.06693840 252.09689331]
[-39.24161530 263.11849976]
[-29.88194656 274.87847900]
[-22.42721748 287.92944336]
[-17.05218124 301.96542358]
[-13.88283157 316.65747070]
[-12.99346542 331.66110229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 112]
[35 111]
[36 110]
[37 109]
[38 108]
[39 107]
[40 106]
[43 103]
[44 102]
[45 101]
[46 100]
[47 99]
[48 98]
[49 63]
[50 62]
[51 61]
[52 60]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[71 90]
[72 89]
[73 88]
[74 87]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
