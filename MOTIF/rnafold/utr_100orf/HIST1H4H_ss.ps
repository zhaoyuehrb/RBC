%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGCCGUGGUAAAGGUGGAAAAGGUUUGGGUAAGGGAGGAGCUAAGCGUCAUCGCAAGGUUUUGCGCGAUAACAUCCAGGGCAUCACUAAGCCAG\
) } def
/len { sequence length } bind def

/coor [
[84.38937378 422.71951294]
[69.20610046 427.90100098]
[55.76657867 419.13980103]
[54.38045883 403.15673828]
[66.11105347 392.21264648]
[67.97253418 377.32861328]
[69.83401489 362.44454956]
[71.69549561 347.56051636]
[73.55697632 332.67645264]
[64.64006805 315.63821411]
[76.60397339 299.56185913]
[77.53652191 284.59088135]
[78.46906281 269.61990356]
[79.40161133 254.64891052]
[80.33415222 239.67793274]
[68.40807343 232.83192444]
[60.58899689 221.43916321]
[58.46904373 207.71759033]
[62.52396774 194.36898804]
[72.00790405 184.04704285]
[85.08982849 178.82975769]
[86.48751831 163.89501953]
[87.88520813 148.96028137]
[89.28289795 134.02554321]
[77.07704926 127.33370972]
[68.36141205 116.48008728]
[64.46302795 103.11723328]
[65.97545624 89.27974701]
[72.66841125 77.07451630]
[83.52284241 68.35988617]
[96.88605499 64.46273804]
[98.74754333 49.57869339]
[100.60902405 34.69464493]
[94.64411163 20.04096031]
[103.90104675 8.37226105]
[105.76252747 -6.51178694]
[107.62400818 -21.39583588]
[94.53572845 -14.06800652]
[80.02422333 -17.86485863]
[72.20200348 -30.66379929]
[75.44200897 -45.30969620]
[87.93294525 -53.61490250]
[102.69187164 -50.93647003]
[111.46812439 -38.77105331]
[116.05898285 -53.05125046]
[120.64984131 -67.33144379]
[125.24069977 -81.61164093]
[129.83155823 -95.89183807]
[122.86717987 -109.82508087]
[127.72638702 -124.24182892]
[141.05252075 -130.79544067]
[145.64337158 -145.07563782]
[150.23423767 -159.35583496]
[146.24775696 -175.26306152]
[158.21717834 -186.47311401]
[173.82937622 -181.45402527]
[177.02388000 -165.36903381]
[164.51443481 -154.76496887]
[159.92356873 -140.48477173]
[155.33271790 -126.20458221]
[162.34324646 -113.11305237]
[157.89088440 -98.56550598]
[144.11175537 -91.30097961]
[139.52090454 -77.02078247]
[134.93003845 -62.74058914]
[130.33918762 -48.46039200]
[125.74832153 -34.18019485]
[122.50805664 -19.53435326]
[120.64657593 -4.65030575]
[118.78509521 10.23374271]
[124.88314056 23.82282066]
[115.49307251 36.55612564]
[113.63158417 51.44017410]
[111.77010345 66.32421875]
[125.19084167 74.74104309]
[133.64387512 88.13900757]
[135.46223450 103.87599182]
[130.28733826 118.84862518]
[119.13968658 130.10424805]
[104.21763611 135.42323303]
[102.81995392 150.35797119]
[101.42226410 165.29270935]
[100.02457428 180.22744751]
[113.55586243 189.58218384]
[120.53041840 204.37754822]
[119.15145874 220.58258057]
[109.88418579 233.83386230]
[95.30513763 240.61047363]
[94.37259674 255.58145142]
[93.44004822 270.55242920]
[92.50750732 285.52343750]
[91.57495880 300.49441528]
[99.37586212 308.39071655]
[101.40100098 319.07855225]
[97.20397186 328.87341309]
[88.44102478 334.53793335]
[86.57954407 349.42199707]
[84.71806335 364.30603027]
[82.85658264 379.19009399]
[80.99510193 394.07412720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[11 92]
[12 91]
[13 90]
[14 89]
[15 88]
[21 83]
[22 82]
[23 81]
[24 80]
[31 74]
[32 73]
[33 72]
[35 70]
[36 69]
[37 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
