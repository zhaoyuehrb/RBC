%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCGAUCAUGUGACAGUCCGGAGGCCAGAACCGGGCAGGUUGCUUGAAGCGCAGGGGUUUGACAAAAACAAACGGUGACGGCGCCGCGGAAGGGUCUAUGGCCGAGGCGGUGAAGCCCCAGCGCCGGGCCAAGGCCAAGGCCAGCCGGACUAAAACAAAGGAAAAGAAGAAGUAUGAAACUCCUCAGAGGGAAGAGU\
) } def
/len { sequence length } bind def

/coor [
[258.79733276 522.46881104]
[251.54223633 503.45516968]
[254.94010925 483.31262207]
[268.12927246 467.61434937]
[262.20004272 453.83596802]
[256.27081299 440.05758667]
[240.39764404 434.51153564]
[233.30366516 418.89544678]
[239.82070923 402.66546631]
[233.67684937 388.98144531]
[217.21177673 378.85186768]
[219.54205322 358.83389282]
[212.97351074 345.34857178]
[206.40496826 331.86322021]
[191.73045349 329.45562744]
[181.16247559 318.74197388]
[178.90306091 303.68380737]
[186.02593994 290.02471924]
[179.45739746 276.53939819]
[172.88885498 263.05404663]
[166.32031250 249.56872559]
[159.75177002 236.08338928]
[153.18322754 222.59805298]
[146.61468506 209.11271667]
[131.56394958 200.09487915]
[133.00036621 181.74057007]
[126.22186279 168.35954285]
[119.44335938 154.97851562]
[112.66485596 141.59748840]
[102.44947052 143.41369629]
[92.09462738 142.75808716]
[82.18988800 139.66798401]
[73.29919434 134.31932068]
[65.92874908 127.01663971]
[60.49819946 118.17572784]
[45.99425125 122.00136566]
[31.49030495 125.82700348]
[16.98635864 129.65264893]
[2.48241234 133.47828674]
[-12.02153397 137.30392456]
[-25.79478836 147.18997192]
[-39.10729599 136.69171143]
[-32.70457840 120.99325562]
[-15.84717560 122.79998779]
[-1.34322917 118.97434235]
[13.16071701 115.14870453]
[27.66466331 111.32305908]
[42.16860962 107.49742126]
[56.67255783 103.67177582]
[58.39353180 87.36469269]
[66.03134918 72.85446167]
[78.49983978 62.20459747]
[73.44304657 48.08267212]
[68.38624573 33.96074677]
[63.32945251 19.83881950]
[51.39276886 9.45488071]
[54.38652420 -5.13575554]
[49.32972717 -19.25768280]
[44.27293015 -33.37960815]
[39.21613312 -47.50153351]
[34.15933609 -61.62346268]
[29.10254097 -75.74538422]
[24.04574394 -89.86731720]
[21.71308899 -75.04979706]
[22.95830154 -60.10157394]
[18.21622658 -45.87088013]
[8.25323391 -34.65754700]
[-5.32054710 -28.27378273]
[-20.31144333 -27.75126648]
[-34.29676056 -33.17444611]
[-45.01631927 -43.66687393]
[-50.73772049 -57.53285980]
[-50.53632355 -72.53150940]
[-44.44467163 -86.23886871]
[-33.44731903 -96.43964386]
[-19.71660995 -90.40080261]
[-28.87126350 -102.28324127]
[-44.23216248 -108.02560425]
[-46.67234421 -124.24218750]
[-33.68155289 -134.25076294]
[-18.62360573 -127.75535583]
[-16.98882675 -111.43788910]
[-7.83417273 -99.55545807]
[6.32746744 -104.50196075]
[20.48785400 -109.44802094]
[20.25341606 -124.44618988]
[20.01897812 -139.44435120]
[19.78454018 -154.44252014]
[19.55010223 -169.44068909]
[19.31566620 -184.43885803]
[8.22260189 -190.22184753]
[0.68720770 -200.11706543]
[-1.90770602 -212.20726013]
[0.87082326 -224.18247986]
[8.43505001 -233.78134155]
[19.29954910 -239.21813965]
[19.53398705 -254.21630859]
[19.76842499 -269.21447754]
[20.00286293 -284.21264648]
[14.20481396 -300.14434814]
[27.90883446 -310.12612915]
[41.29418564 -299.72088623]
[35.00102997 -283.97821045]
[34.76659393 -268.98004150]
[34.53215408 -253.98187256]
[34.29771805 -238.98370361]
[48.89551163 -229.05639648]
[54.66849518 -212.20726013]
[49.12918091 -195.11460876]
[34.31383133 -184.67329407]
[34.54827118 -169.67512512]
[34.78270721 -154.67695618]
[35.01714706 -139.67878723]
[35.25158310 -124.68062592]
[35.48602295 -109.68245697]
[38.16767120 -94.92411041]
[43.22446823 -80.80218506]
[48.28126526 -66.68025970]
[53.33806229 -52.55833054]
[58.39485550 -38.43640518]
[63.45165253 -24.31447983]
[68.50845337 -10.19255257]
[80.08343506 -0.81870955]
[77.45137787 14.78202152]
[82.50817108 28.90394783]
[87.56497192 43.02587509]
[92.62176514 57.14780045]
[107.90537262 57.24190903]
[122.21228790 62.61867523]
[133.77493286 72.61380768]
[146.88095093 65.31775665]
[159.98695374 58.02170181]
[167.93859863 43.67934036]
[184.33773804 43.66506195]
[192.31434631 57.99356079]
[183.66276550 71.92489624]
[167.28300476 71.12771606]
[154.17700195 78.42376709]
[141.07098389 85.71982574]
[143.32040405 103.75386810]
[138.00238037 121.13216400]
[126.04588318 134.81898499]
[132.82438660 148.20001221]
[139.60289001 161.58103943]
[146.38139343 174.96206665]
[158.37806702 179.71383667]
[163.74664307 191.00505066]
[160.10002136 202.54417419]
[166.66856384 216.02951050]
[173.23710632 229.51484680]
[179.80564880 243.00018311]
[186.37419128 256.48550415]
[192.94273376 269.97085571]
[199.51127625 283.45617676]
[214.65713501 286.26843262]
[225.12059021 297.33053589]
[227.04119873 312.25619507]
[219.89030457 325.29467773]
[226.45884705 338.78002930]
[233.02738953 352.26535034]
[243.50729370 355.21524048]
[250.48655701 363.28280640]
[251.84042358 373.64254761]
[247.36090088 382.83758545]
[253.50474548 396.52163696]
[266.56607056 399.83020020]
[275.20892334 409.91183472]
[276.44622803 422.93777466]
[270.04919434 434.12832642]
[275.97845459 447.90673828]
[281.90768433 461.68511963]
[291.95529175 460.90475464]
[301.85144043 462.71777344]
[310.93905640 466.99490356]
[318.61697388 473.44360352]
[324.37985229 481.62805176]
[327.85119629 490.99844360]
[328.80819702 500.92813110]
[327.19583130 510.75543213]
[323.12994385 519.82763672]
[316.88916016 527.54455566]
[308.89556885 533.39801025]
[313.50854492 547.67114258]
[318.12149048 561.94421387]
[322.73443604 576.21728516]
[334.34075928 586.96917725]
[330.89242554 601.45916748]
[335.50537109 615.73223877]
[349.07617188 624.28869629]
[350.70443726 640.24890137]
[339.14111328 651.36956787]
[323.25659180 649.11981201]
[315.23611450 635.22552490]
[321.23229980 620.34515381]
[316.61935425 606.07208252]
[305.34298706 596.34106445]
[308.46136475 580.83020020]
[303.84841919 566.55712891]
[299.23547363 552.28405762]
[294.62249756 538.01098633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 171]
[5 170]
[6 169]
[9 165]
[10 164]
[12 160]
[13 159]
[14 158]
[18 154]
[19 153]
[20 152]
[21 151]
[22 150]
[23 149]
[24 148]
[26 145]
[27 144]
[28 143]
[29 142]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[52 127]
[53 126]
[54 125]
[55 124]
[57 122]
[58 121]
[59 120]
[60 119]
[61 118]
[62 117]
[63 116]
[76 83]
[77 82]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[96 106]
[97 105]
[98 104]
[99 103]
[130 139]
[131 138]
[132 137]
[182 200]
[183 199]
[184 198]
[185 197]
[187 195]
[188 194]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
