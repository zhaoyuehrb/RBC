%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGGUCGAGGCGGGGAGGCGGCGGCGGCGGCUGCAGAGCCAGGCGCCCAAGACGGAGACCCCAUGGGGAACGCUCCGAGUCACAGCAGUGAAGACGAAGCGGCAGCUGCCGGUGGCGAGGGCUGGGGCCCACACCAGGACUGGGCCGCGGUCUCGGGCACGA\
) } def
/len { sequence length } bind def

/coor [
[55.22829437 482.05322266]
[45.97914505 494.66223145]
[30.77677155 498.32583618]
[16.79927254 491.31417847]
[10.64639187 476.93792725]
[15.22333431 461.98513794]
[28.36900520 453.51608276]
[30.07887650 438.61383057]
[31.78874779 423.71160889]
[24.50335884 414.01947021]
[25.83595085 401.56417847]
[35.61343384 393.10671997]
[37.60671616 378.23974609]
[28.41673470 369.17044067]
[26.10776901 356.26901245]
[31.74690437 344.22225952]
[43.47186661 337.53857422]
[45.74783325 322.71224976]
[48.02380371 307.88589478]
[50.29977417 293.05957031]
[52.57574463 278.23324585]
[46.85915375 264.47933960]
[56.60078812 252.01295471]
[58.87675858 237.18663025]
[61.15272903 222.36030579]
[63.42869949 207.53396606]
[65.70466614 192.70764160]
[55.35348129 181.85163879]
[40.43565369 183.41955566]
[25.51782608 184.98748779]
[10.59999752 186.55541992]
[-2.31580758 195.69284058]
[-15.78212643 189.32829285]
[-30.69995499 190.89620972]
[-45.61778259 192.46414185]
[-55.36771393 204.90257263]
[-71.06708527 206.72064209]
[-83.40172577 196.83975220]
[-85.05372620 181.12203979]
[-75.04297638 168.89254761]
[-59.30867767 167.40682983]
[-47.18571091 177.54631042]
[-32.26788330 175.97839355]
[-17.35005379 174.41046143]
[-5.50127077 165.38517761]
[9.03207111 171.63758850]
[23.94989967 170.06965637]
[38.86772919 168.50173950]
[53.78555679 166.93380737]
[56.96597290 160.14154053]
[42.08072281 158.28968811]
[39.24232483 143.56068420]
[52.37341309 136.30986023]
[63.32680893 146.55699158]
[66.50722504 139.76472473]
[58.15884018 127.30260468]
[49.81044769 114.84048462]
[41.46205902 102.37836456]
[33.11367035 89.91625214]
[14.43200302 86.98902893]
[3.96217918 71.62593079]
[7.93193245 53.78906250]
[-0.88484651 41.65380859]
[-9.70162487 29.51855278]
[-23.90322495 20.25837517]
[-18.93633270 4.04830694]
[-1.98478734 4.33369827]
[2.43362951 20.70177460]
[11.25040817 32.83702850]
[20.06718636 44.97228622]
[31.50793457 44.27619934]
[41.96312332 49.25948715]
[48.76703262 58.78045273]
[50.12283707 70.52482605]
[45.57579041 81.56786346]
[53.92417908 94.02997589]
[62.27256775 106.49209595]
[70.62095642 118.95421600]
[78.96934509 131.41633606]
[69.00344849 82.90707397]
[113.39112854 69.85177612]
[122.43735504 57.88658524]
[131.48356628 45.92139053]
[140.52980042 33.95619583]
[149.57601929 21.99100113]
[151.40303040 3.68878222]
[167.78572083 -2.54793191]
[176.60250854 -14.68318653]
[185.41928101 -26.81844139]
[194.23606873 -38.95369720]
[203.05284119 -51.08895111]
[197.63894653 -62.41387939]
[197.57250977 -74.89381409]
[202.80453491 -86.14452362]
[212.27963257 -94.04292297]
[224.14837646 -97.12764740]
[236.12805176 -94.86917877]
[245.40043640 -106.65997314]
[250.43879700 -122.84797668]
[267.38891602 -122.48780060]
[271.73507690 -106.10038757]
[257.19125366 -97.38758850]
[247.91885376 -85.59679413]
[253.52703857 -68.88881683]
[247.96687317 -51.99978256]
[233.27346802 -41.71120453]
[215.18809509 -42.27217102]
[206.37132263 -30.13691711]
[197.55453491 -18.00166321]
[188.73776245 -5.86640787]
[179.92097473 6.26884699]
[181.49876404 18.29070854]
[174.21374512 28.48081970]
[161.54121399 31.03722382]
[152.49499512 43.00241852]
[143.44876099 54.96761322]
[134.40254211 66.93280792]
[125.35632324 78.89800262]
[134.47593689 97.14183044]
[131.25823975 118.25816345]
[115.78687286 134.35183716]
[130.70469666 135.91976929]
[145.62252808 137.48770142]
[160.54035950 139.05561829]
[175.29348755 131.89482117]
[188.71791077 141.31378174]
[187.00373840 157.62309265]
[171.91435242 164.04512024]
[158.97242737 153.97344971]
[144.05459595 152.40551758]
[129.13677979 150.83760071]
[114.21894836 149.26966858]
[111.49788666 156.25865173]
[120.88233948 167.96044922]
[106.05577087 170.23661804]
[103.33471680 177.22558594]
[115.38548279 186.15750122]
[127.43625641 195.08940125]
[143.78131104 196.42018127]
[150.55586243 211.35462952]
[140.79081726 224.52944946]
[124.53163147 222.39152527]
[118.50434875 207.14016724]
[106.45358276 198.20826721]
[94.40280914 189.27636719]
[80.53099823 194.98361206]
[78.25502777 209.80993652]
[75.97905731 224.63626099]
[73.70308685 239.46260071]
[71.42711639 254.28892517]
[76.98091125 269.10330200]
[67.40206909 280.50921631]
[65.12609863 295.33554077]
[62.85013199 310.16186523]
[60.57416153 324.98822021]
[58.29819107 339.81454468]
[68.90129089 353.70101929]
[66.25533295 370.63003540]
[52.47369003 380.23303223]
[50.48040771 395.10000610]
[57.88933945 411.93499756]
[46.69097519 425.42147827]
[44.98110199 440.32373047]
[43.27123260 455.22595215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 164]
[8 163]
[9 162]
[12 160]
[13 159]
[17 156]
[18 155]
[19 154]
[20 153]
[21 152]
[23 150]
[24 149]
[25 148]
[26 147]
[27 146]
[28 49]
[29 48]
[30 47]
[31 46]
[33 44]
[34 43]
[35 42]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[62 70]
[63 69]
[64 68]
[81 118]
[82 117]
[83 116]
[84 115]
[85 114]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[97 103]
[98 102]
[121 132]
[122 131]
[123 130]
[124 129]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
