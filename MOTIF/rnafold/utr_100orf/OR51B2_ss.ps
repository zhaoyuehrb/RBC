%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCUCCUGGUUUCAAGGUUUCAAGAAAUCUGAUCUUUACCGGUGGAUACACUAUGUGGCCCAAUAUUACUGCAGCCCCUUUUUUGCUGACUGGCUUUCCAGGGCUGGAGGCAGCUCAUCACUGGAUCUCCAUCCCCUUCUUUGCUGUUUAUG\
) } def
/len { sequence length } bind def

/coor [
[86.23588562 132.53904724]
[79.10134125 127.93007660]
[73.35852051 121.81919098]
[69.30680847 114.60054016]
[54.67334747 117.89627075]
[40.03988647 121.19199371]
[25.40642548 124.48772430]
[20.29432106 143.48324585]
[4.37044764 156.44055176]
[-16.98088264 157.68901062]
[-35.75754929 145.75875854]
[-49.03938675 152.72959900]
[-62.32122803 159.70045471]
[-64.97476196 170.32322693]
[-72.89617920 177.55924988]
[-83.27976990 179.17517090]
[-92.62514496 174.87252808]
[-106.17690277 181.30291748]
[-119.72866058 187.73329163]
[-133.28041077 194.16368103]
[-146.83216858 200.59407043]
[-160.38392639 207.02445984]
[-160.93647766 222.31999207]
[-168.54399109 235.60096741]
[-181.45832825 243.81552124]
[-196.71183777 245.07598877]
[-210.79940796 239.09275818]
[-220.48379517 227.24069214]
[-223.53961182 212.24334717]
[-219.26463318 197.54698181]
[-208.64125061 186.52870178]
[-194.11061096 181.72045898]
[-179.01176453 184.22712708]
[-166.81431580 193.47270203]
[-153.26255798 187.04231262]
[-139.71080017 180.61192322]
[-126.15904236 174.18154907]
[-112.60729218 167.75115967]
[-99.05553436 161.32077026]
[-89.33442688 144.64456177]
[-69.29207611 146.41860962]
[-56.01023483 139.44776917]
[-42.72839737 132.47691345]
[-43.18144226 117.48375702]
[-56.85993958 111.32756805]
[-70.53843689 105.17137146]
[-84.21693420 99.01518250]
[-100.46974182 101.20110321]
[-110.27364349 88.05516815]
[-103.54322052 73.10079193]
[-87.20216370 71.72174835]
[-78.06074524 85.33668518]
[-64.38224792 91.49287415]
[-50.70374680 97.64907074]
[-37.02524948 103.80525970]
[-25.49970055 93.79824829]
[-11.32933712 89.54462433]
[2.87269330 91.42885590]
[14.64632893 98.73819733]
[22.11069679 109.85426331]
[36.74415970 106.55853271]
[51.37761688 103.26280975]
[66.01107788 99.96707916]
[66.78501892 90.72450256]
[70.06127930 81.90418243]
[75.66623688 74.18017578]
[83.24578857 68.16299438]
[92.28711700 64.35161591]
[102.15320587 63.09267807]
[112.12760925 64.55014801]
[121.46652985 68.68805695]
[129.45419312 75.26799774]
[137.47117615 62.59014511]
[138.30740356 46.79105377]
[151.64918518 40.16941452]
[159.66618347 27.49156189]
[167.68316650 14.81371117]
[175.70014954 2.13585997]
[183.71714783 -10.54199123]
[191.73413086 -23.21984291]
[183.17459106 -34.64036179]
[179.04519653 -48.27079773]
[179.82424927 -62.46172714]
[185.39738464 -75.50319672]
[195.07380676 -85.83078003]
[207.67185974 -92.21320343]
[221.66326904 -93.89916992]
[235.35858154 -90.70569611]
[243.62924194 -103.21954346]
[251.89988708 -115.73338318]
[252.34941101 -132.12637329]
[266.89776611 -139.69454956]
[280.57885742 -130.65243530]
[279.31875610 -114.30178070]
[264.41372681 -107.46273041]
[256.14306641 -94.94888306]
[247.87242126 -82.43504333]
[256.93389893 -69.46658325]
[260.34466553 -53.97864914]
[257.55560303 -38.32770538]
[248.96324158 -24.90658760]
[235.85356140 -15.77868176]
[220.20970154 -12.36069584]
[204.41198730 -15.20285511]
[196.39498901 -2.52500391]
[188.37800598 10.15284729]
[180.36102295 22.83069801]
[172.34402466 35.50854874]
[164.32704163 48.18640137]
[164.06423950 63.07868958]
[150.14903259 70.60713196]
[142.13204956 83.28498840]
[145.28025818 97.95088959]
[157.79409790 106.22154236]
[170.30793762 114.49220276]
[182.82179260 122.76285553]
[195.33563232 131.03350830]
[207.18659973 121.65203857]
[221.33787537 116.40001678]
[236.39921570 115.77999878]
[250.89509583 119.84012604]
[263.40927124 128.17065430]
[272.72317505 139.94529724]
[277.93453979 154.00309753]
[278.54479980 168.96296692]
[274.50674438 183.35932922]
[287.02056885 191.62998962]
[299.53442383 199.90065002]
[312.04824829 208.17129517]
[328.44125366 208.62081909]
[336.00942993 223.16917419]
[326.96731567 236.85026550]
[310.61666870 235.59014893]
[303.77761841 220.68515015]
[291.26376343 212.41448975]
[278.74990845 204.14382935]
[266.23608398 195.87316895]
[254.57450867 205.23098755]
[240.57254028 210.53334045]
[225.59696960 211.24919128]
[211.11380005 207.29585266]
[198.54473877 199.04835510]
[189.12760925 187.30387878]
[183.79446411 173.20472717]
[183.07939148 158.12722778]
[187.06497192 143.54736328]
[174.55113220 135.27670288]
[162.03729248 127.00604248]
[149.52345276 118.73538971]
[137.00959778 110.46472931]
[133.03096008 118.81436920]
[127.23027039 125.87932587]
[119.98778534 131.27809143]
[111.75924683 134.73547363]
[103.04743195 136.09637451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[11 43]
[12 42]
[13 41]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[44 55]
[45 54]
[46 53]
[47 52]
[72 112]
[73 111]
[75 109]
[76 108]
[77 107]
[78 106]
[79 105]
[80 104]
[88 97]
[89 96]
[90 95]
[113 150]
[114 149]
[115 148]
[116 147]
[117 146]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
