%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCUCUGCCAAUAACAAAGGCACAGCAUUUUCCCUCUGUGCAUCUCCAACAUGGAUGCUUUUCAGGGCAUUUUAAAAUUCUUCCUUAAUCAGAAAACUGUUAUUGGCUACAGCUUCAUGGCUCUGCUGACCGUGGGAAGUGAGCGUCUCU\
) } def
/len { sequence length } bind def

/coor [
[91.86531830 100.65222168]
[81.53441620 89.77690887]
[71.20351410 78.90159607]
[60.87261200 68.02628326]
[49.08230591 70.04544067]
[37.90503311 66.13466644]
[30.10554695 57.38481522]
[27.55296898 46.06795502]
[30.77378464 35.04809189]
[20.89807892 23.75781250]
[11.02237320 12.46753216]
[1.14666688 1.17725158]
[-8.72903919 -10.11302853]
[-18.60474586 -21.40330887]
[-28.48045158 -32.69358826]
[-38.35615921 -43.98386765]
[-48.23186493 -55.27415085]
[-58.10757065 -66.56443024]
[-69.19270325 -76.66986084]
[-81.34603882 -85.46170807]
[-93.49936676 -94.25354767]
[-105.65270233 -103.04539490]
[-116.35186005 -100.69348145]
[-126.36108398 -104.57157135]
[-132.42803955 -113.15843201]
[-132.72669983 -123.44765472]
[-144.50883484 -132.73103333]
[-160.13710022 -135.19439697]
[-165.34550476 -149.14866638]
[-177.12763977 -158.43205261]
[-188.90977478 -167.71543884]
[-200.69190979 -176.99882507]
[-212.47404480 -186.28221130]
[-224.80532837 -194.82267761]
[-237.63899231 -202.58779907]
[-250.47264099 -210.35293579]
[-263.30630493 -218.11807251]
[-277.67910767 -210.00341797]
[-294.08923340 -210.22483826]
[-308.07727051 -218.62783813]
[-315.88943481 -232.84742737]
[-315.48480225 -248.97294617]
[-328.47518921 -256.47293091]
[-341.46557617 -263.97293091]
[-354.45596313 -271.47293091]
[-367.44635010 -278.97293091]
[-380.43670654 -286.47293091]
[-395.06838989 -280.95492554]
[-409.80661011 -286.18167114]
[-417.69244385 -299.68527222]
[-415.00247192 -315.08975220]
[-403.00677490 -325.12158203]
[-387.36938477 -325.04403687]
[-375.47378540 -314.89373779]
[-372.93670654 -299.46331787]
[-359.94635010 -291.96331787]
[-346.95596313 -284.46331787]
[-333.96557617 -276.96331787]
[-320.97518921 -269.46331787]
[-307.98480225 -261.96331787]
[-296.60256958 -269.56994629]
[-282.98617554 -271.52670288]
[-269.79605103 -267.39343262]
[-259.63433838 -257.92556763]
[-254.53161621 -244.93678284]
[-255.54115295 -230.95173645]
[-242.70750427 -223.18659973]
[-229.87385559 -215.42146301]
[-217.04019165 -207.65632629]
[-219.15856934 -222.50598145]
[-210.30882263 -234.61723328]
[-195.51756287 -237.11094666]
[-183.18611145 -228.57072449]
[-180.31863403 -213.84735107]
[-188.54385376 -201.30360413]
[-203.19065857 -198.06434631]
[-191.40852356 -188.78096008]
[-179.62638855 -179.49757385]
[-167.84425354 -170.21418762]
[-156.06211853 -160.93080139]
[-141.27659607 -159.13145447]
[-135.22544861 -144.51316833]
[-123.44331360 -135.22978210]
[-104.18657684 -133.93536377]
[-96.86086273 -115.19872284]
[-84.70752716 -106.40688324]
[-72.55419159 -97.61504364]
[-60.40085983 -88.82319641]
[-64.85944366 -103.14524841]
[-62.27642441 -117.92117310]
[-53.22340012 -129.88122559]
[-39.70371246 -136.37875366]
[-24.70912170 -135.97595215]
[-11.55777550 -128.76191711]
[-3.15993023 -116.33307648]
[-1.37393963 -101.43978119]
[-6.59502506 -87.37776947]
[-17.66781425 -77.25881195]
[-32.14201736 -73.32212830]
[-46.81729126 -76.44013214]
[-36.94158554 -65.14985657]
[-27.06587791 -53.85957718]
[-17.19017220 -42.56929398]
[-7.31446552 -31.27901459]
[2.56124091 -19.98873520]
[12.43694687 -8.69845486]
[22.31265259 2.59182549]
[32.18835831 13.88210583]
[42.06406403 25.17238617]
[60.32525635 25.24942398]
[72.99354553 38.83971024]
[71.74792480 57.69537735]
[82.07882690 68.57069397]
[92.40972900 79.44600677]
[102.74063873 90.32131958]
[114.61746216 99.48325348]
[127.75909424 106.71495819]
[140.90072632 113.94666290]
[154.04235840 121.17835999]
[167.18399048 128.41006470]
[180.32562256 135.64176941]
[193.46725464 142.87347412]
[202.55586243 144.28518677]
[206.80224609 150.39096069]
[219.79261780 157.89096069]
[236.18284607 157.34986877]
[244.61563110 171.41473389]
[236.41604614 185.61680603]
[220.01913452 185.34622192]
[212.29261780 170.88134766]
[199.30224609 163.38134766]
[186.23554993 156.01510620]
[173.09391785 148.78340149]
[159.95228577 141.55169678]
[146.81065369 134.31999207]
[133.66902161 127.08828735]
[120.52738953 119.85659027]
[107.38575745 112.62488556]
[101.44734192 117.20585632]
[110.60909271 129.08282471]
[98.73198700 138.24438477]
[89.57051849 126.36779022]
[83.63211060 130.94876099]
[87.29081726 145.49571228]
[90.94952393 160.04266357]
[100.67662048 173.92861938]
[90.02606964 187.11959839]
[74.40222931 180.53689575]
[76.40256500 163.70137024]
[72.74385834 149.15441895]
[69.08515167 134.60746765]
[71.99206543 118.66372681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[9 109]
[10 108]
[11 107]
[12 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 88]
[20 87]
[21 86]
[22 85]
[26 83]
[27 82]
[29 80]
[30 79]
[31 78]
[32 77]
[33 76]
[34 69]
[35 68]
[36 67]
[37 66]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[116 138]
[117 137]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
[124 131]
[125 130]
[143 151]
[144 150]
[145 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
