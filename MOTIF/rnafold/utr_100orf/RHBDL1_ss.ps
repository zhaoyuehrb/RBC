%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGACCUUGGCCCUCGCUUUCCAGGAUGGGUAGGGUGGAAGACGGGGGAACAACUGAGGAGCUGGAGGACUGGGACCCAGGCACCAGUGCCCUGCCAGCUCCUGGGAUCAAGCAGGGUCCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[100.09806061 288.60668945]
[99.72994232 273.61120605]
[99.36182404 258.61572266]
[98.99370575 243.62022400]
[98.62558746 228.62474060]
[98.07347870 213.63490295]
[97.33746338 198.65298462]
[96.60144806 183.67105103]
[95.86543274 168.68911743]
[95.12941742 153.70718384]
[94.39340210 138.72525024]
[73.36875916 128.66802979]
[61.79212570 108.44020844]
[46.79664230 108.80832672]
[31.80115891 109.17644501]
[16.80567741 109.54456329]
[1.81019509 109.91268158]
[-13.18528748 110.28079987]
[-26.79141998 118.35444641]
[-39.70474243 110.93181610]
[-54.70022583 111.29993439]
[-69.69570923 111.66805267]
[-84.69118500 112.03617096]
[-99.68666840 112.40428925]
[-114.68215179 112.77240753]
[-120.91810608 126.70351410]
[-132.58653259 136.54275513]
[-147.37063599 140.33656311]
[-162.33503723 137.33166504]
[-174.50852966 128.12467957]
[-181.47409058 114.54365540]
[-181.84866333 99.28514099]
[-175.55789185 85.37870026]
[-163.85081482 75.58547974]
[-149.05187988 71.84992981]
[-134.09942627 74.91373444]
[-121.96228027 84.16858673]
[-115.05027008 97.77693176]
[-100.05478668 97.40881348]
[-85.05931091 97.04069519]
[-70.06382751 96.67256927]
[-55.06834412 96.30445099]
[-40.07286072 95.93633270]
[-27.53930473 87.88902283]
[-13.55340576 95.28531647]
[1.44207668 94.91719818]
[16.43755913 94.54907990]
[31.43304062 94.18096161]
[46.42852402 93.81284332]
[61.42400742 93.44472504]
[65.98853302 80.65319061]
[74.65063477 70.19247437]
[86.36672211 63.32285690]
[99.72529602 60.87195969]
[113.11696625 63.13505554]
[124.92835999 69.83950043]
[136.52351379 60.32360077]
[142.28269958 45.58784866]
[157.02951050 43.49476624]
[168.62466431 33.97886658]
[180.21981812 24.46296883]
[191.81497192 14.94706917]
[203.41014099 5.43116951]
[215.00529480 -4.08472967]
[226.60044861 -13.60062885]
[238.19560242 -23.11652756]
[249.79075623 -32.63242722]
[261.26828003 -42.28990173]
[272.62640381 -52.08749390]
[283.98452759 -61.88508606]
[295.09881592 -71.95847321]
[305.96249390 -82.30158234]
[316.82620239 -92.64468384]
[327.68991089 -102.98779297]
[338.55361938 -113.33090210]
[334.86578369 -128.24047852]
[339.14224243 -142.99200439]
[350.23260498 -153.61740112]
[365.15368652 -157.25848389]
[379.89172363 -152.93582153]
[390.48229980 -141.81219482]
[394.07659912 -126.87978363]
[389.70776367 -112.15535736]
[378.55099487 -101.59969330]
[363.60739136 -98.05222321]
[348.89672852 -102.46719360]
[338.03302002 -92.12409210]
[327.16931152 -81.78098297]
[316.30560303 -71.43787384]
[305.44192505 -61.09476471]
[304.43731689 -56.32711792]
[300.36102295 -52.17784119]
[293.78213501 -50.52695465]
[282.42398071 -40.72936249]
[271.06585693 -30.93176842]
[268.02395630 -24.10871696]
[259.30667114 -21.03727150]
[247.71150208 -11.52137184]
[236.11634827 -2.00547218]
[224.52119446 7.51042700]
[212.92604065 17.02632713]
[201.33087158 26.54222488]
[189.73571777 36.05812454]
[178.14056396 45.57402420]
[166.54541016 55.08992386]
[161.61558533 69.14503479]
[146.03941345 71.91875458]
[134.44425964 81.43465424]
[138.06352234 90.93097687]
[139.11520386 101.03904724]
[137.52836609 111.07702637]
[133.41004944 120.36780548]
[127.03804779 128.28466797]
[118.84219360 134.29359436]
[109.37533569 137.98924255]
[110.11135101 152.97116089]
[110.84736633 167.95309448]
[111.58338165 182.93502808]
[112.31939697 197.91696167]
[113.05541229 212.89889526]
[116.63379669 221.42063904]
[113.62107086 228.25662231]
[113.98918915 243.25210571]
[114.35730743 258.24758911]
[114.72542572 273.24307251]
[115.09354401 288.23855591]
[117.75633240 307.43646240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[5 122]
[6 120]
[7 119]
[8 118]
[9 117]
[10 116]
[11 115]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[56 108]
[57 107]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[66 98]
[67 97]
[68 95]
[69 94]
[70 93]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
