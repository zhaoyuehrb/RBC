%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAAAUCUGGCAGGUCUCUAGGCAGACAAAAGGGAACAUCUGGUAGGGACUGGGACAUGUAGAAAAAAGGACAACCUGGACCCAUCCAUGUUCCCAAUGCAGAAGGGCUCCCUCAACCUCCUGAGGCAGAAAUGGGAAUCUUGUGAUUAUCAGAGAAGUGAGUGUCAUCCCAGGGACAGCCAUUGUA\
) } def
/len { sequence length } bind def

/coor [
[84.48384094 495.61914062]
[69.41304016 497.41784668]
[54.71113586 493.64712524]
[42.36643600 484.81689453]
[34.04846191 472.12139893]
[30.88215446 457.27758789]
[33.29572678 442.29293823]
[40.96276474 429.19406128]
[52.84636307 419.75241089]
[67.33936310 415.24493408]
[68.33071899 400.27774048]
[69.32208252 385.31054688]
[70.31343842 370.34332275]
[62.57769394 361.02896118]
[63.29250336 348.54052734]
[72.61928558 339.61431885]
[73.85797882 324.66555786]
[75.09666443 309.71679688]
[76.33535767 294.76803589]
[77.57405090 279.81924438]
[78.81273651 264.87048340]
[72.15287018 251.54774475]
[81.00335693 238.43365479]
[82.24205017 223.48487854]
[72.44968414 212.32041931]
[73.49294281 197.14259338]
[85.26964569 186.94715881]
[86.50833893 171.99839783]
[87.74703217 157.04963684]
[88.98571777 142.10086060]
[72.29527283 133.55957031]
[60.74734497 118.78899384]
[56.48545837 100.53081512]
[60.30069733 82.17411041]
[47.88056564 73.76338196]
[35.46043015 65.35265350]
[23.04030037 56.94192886]
[10.62016678 48.53120422]
[-1.79996538 40.12047577]
[-14.22009754 31.70975113]
[-20.80508041 30.85274315]
[-25.28559303 27.32007217]
[-26.90552330 22.80994415]
[-39.04077911 13.99316502]
[-51.17603302 5.17638636]
[-66.58657837 7.44637871]
[-78.76785278 -1.66796017]
[-80.83697510 -16.37354851]
[-92.97222900 -25.19032669]
[-105.10748291 -34.00710678]
[-120.81993103 -35.85903549]
[-126.56863403 -49.59954834]
[-138.70388794 -58.41632462]
[-150.83914185 -67.23310089]
[-162.97439575 -76.04988098]
[-175.10964966 -84.86666107]
[-185.75892639 -82.54402924]
[-195.71989441 -86.39602661]
[-201.78077698 -94.92114258]
[-202.13131714 -105.15536499]
[-213.96842957 -114.36855316]
[-225.80552673 -123.58174133]
[-240.00506592 -117.72779083]
[-255.22706604 -119.77378845]
[-267.37689209 -129.16937256]
[-273.18630981 -143.38719177]
[-271.09262085 -158.60270691]
[-261.65899658 -170.72303772]
[-247.42303467 -176.48785400]
[-232.21415710 -174.34646606]
[-220.12345886 -164.87489319]
[-214.40328979 -150.62094116]
[-216.59234619 -135.41885376]
[-204.75523376 -126.20565796]
[-192.91812134 -116.99246979]
[-173.63142395 -115.76451111]
[-166.29287720 -97.00191498]
[-154.15762329 -88.18513489]
[-142.02236938 -79.36836243]
[-129.88711548 -70.55158234]
[-117.75186157 -61.73480225]
[-102.90740967 -60.51350784]
[-96.29070282 -46.14236069]
[-84.15544891 -37.32558060]
[-72.02019501 -28.50880432]
[-57.39495468 -31.08522987]
[-44.96248245 -22.31663322]
[-42.35925293 -6.95886850]
[-30.22399902 1.85791039]
[-18.08874512 10.67468929]
[-5.80937195 19.28961945]
[6.61076021 27.70034409]
[19.03089333 36.11107254]
[31.45102501 44.52179718]
[43.87115860 52.93252182]
[56.29129028 61.34325027]
[68.71142578 69.75397491]
[79.85024261 61.42819214]
[93.04673004 57.04130936]
[106.95326996 57.04130936]
[120.14975739 61.42819214]
[131.28857422 69.75397491]
[143.70870972 61.34325027]
[150.79695129 47.19873047]
[165.67366028 46.46891022]
[178.09379578 38.05818558]
[190.51393127 29.64745903]
[202.93406677 21.23673439]
[206.13903809 8.73096466]
[216.67195129 1.98340678]
[228.58306885 4.15699816]
[241.14056396 -4.04722452]
[253.69805908 -12.25144672]
[266.25555420 -20.45566940]
[278.60574341 -28.96878815]
[290.74099731 -37.78556824]
[293.34420776 -53.14333344]
[305.77667236 -61.91192627]
[320.40191650 -59.33550262]
[332.53717041 -68.15228271]
[344.67242432 -76.96906281]
[350.84463501 -92.16234589]
[367.12344360 -94.14539337]
[376.76260376 -80.87820435]
[369.84619141 -66.00892639]
[353.48922729 -64.83380127]
[341.35397339 -56.01702499]
[329.21871948 -47.20024872]
[327.14959717 -32.49465942]
[314.96832275 -23.38031960]
[299.55776978 -25.65031242]
[287.42251587 -16.83353233]
[286.51586914 -13.40859699]
[283.89477539 -10.25684643]
[279.70776367 -8.18406677]
[274.45977783 -7.89817190]
[261.90228271 0.30605036]
[249.34478760 8.51027298]
[236.78729248 16.71449471]
[229.72943115 32.77330399]
[211.34478760 33.65686417]
[198.92465210 42.06759262]
[186.50453186 50.47831726]
[174.08439636 58.88904190]
[167.88452148 72.43196869]
[152.11943054 73.76338196]
[139.69931030 82.17411041]
[141.90538025 88.26389313]
[143.18315125 94.61366272]
[143.50430298 101.08275604]
[142.86174011 107.52785492]
[141.26966858 113.80620575]
[154.46177673 120.94541168]
[167.65388489 128.08462524]
[182.72773743 123.33544159]
[196.70593262 130.71008301]
[201.29548645 145.83329773]
[193.77346802 159.73274231]
[178.60258484 164.16215515]
[164.78343201 156.49360657]
[160.51467896 141.27673340]
[147.32257080 134.13752747]
[134.13046265 126.99830627]
[120.71217346 138.27275085]
[103.93448639 143.33955383]
[102.69579315 158.28831482]
[101.45710754 173.23709106]
[100.21841431 188.18585205]
[110.15639496 200.18061829]
[108.68723297 215.32315063]
[97.19081116 224.72357178]
[95.95212555 239.67234802]
[102.52339172 254.06431580]
[93.76150513 266.10919189]
[92.52281189 281.05795288]
[91.28412628 296.00671387]
[90.04543304 310.95547485]
[88.80674744 325.90423584]
[87.56805420 340.85302734]
[95.81430054 357.30825806]
[85.28063965 371.33468628]
[84.28928375 386.30187988]
[83.29792786 401.26910400]
[82.30656433 416.23629761]
[96.07845306 422.61590576]
[106.61296082 433.54241943]
[112.48537445 447.53811646]
[112.90151215 462.71017456]
[107.80507660 477.00668335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 184]
[11 183]
[12 182]
[13 181]
[16 179]
[17 178]
[18 177]
[19 176]
[20 175]
[21 174]
[23 172]
[24 171]
[27 168]
[28 167]
[29 166]
[30 165]
[34 97]
[35 96]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[43 90]
[44 89]
[45 88]
[48 85]
[49 84]
[50 83]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[60 75]
[61 74]
[62 73]
[102 147]
[103 146]
[105 144]
[106 143]
[107 142]
[108 141]
[111 139]
[112 138]
[113 137]
[114 136]
[115 132]
[116 131]
[119 128]
[120 127]
[121 126]
[152 163]
[153 162]
[154 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
