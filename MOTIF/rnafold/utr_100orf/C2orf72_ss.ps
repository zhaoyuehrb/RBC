%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCGCGAGCUGGAGGCGCUGGCGGCCCGGCUUGCGCGCCCUGCCGAGCCGCCCUUCCAGGCGUUGGUGGAAGCGGCGGGGGGCCGCGGGCAGGUGC\
) } def
/len { sequence length } bind def

/coor [
[40.19860077 203.85060120]
[27.38908386 196.04570007]
[19.08540916 183.55374146]
[16.84760475 168.72161865]
[21.09608841 154.33584595]
[31.03178596 143.09977722]
[16.17848778 145.19250488]
[1.32518947 147.28523254]
[-13.52810955 149.37797546]
[-28.38140869 151.47070312]
[-43.23470688 153.56343079]
[-58.08800507 155.65615845]
[-72.94130707 157.74888611]
[-87.79460144 159.84161377]
[-102.64790344 161.93435669]
[-117.50119781 164.02708435]
[-127.67639160 178.15182495]
[-144.57446289 180.58778381]
[-157.79478455 170.32315063]
[-172.57580566 172.87680054]
[-184.82141113 183.78446960]
[-200.30342102 178.37712097]
[-203.09527588 162.21736145]
[-190.32495117 151.92898560]
[-175.12947083 158.09576416]
[-160.34843445 155.54211426]
[-154.39886475 143.99722290]
[-142.68620300 137.94606018]
[-129.44024658 139.82899475]
[-119.59393311 149.17378235]
[-104.74063110 147.08105469]
[-89.88732910 144.98832703]
[-75.03403473 142.89558411]
[-60.18073654 140.80285645]
[-45.32743835 138.71012878]
[-30.47413826 136.61740112]
[-15.62083912 134.52467346]
[-0.76754063 132.43194580]
[14.08575821 130.33921814]
[28.93905640 128.24647522]
[43.14612961 123.43409729]
[56.21357346 116.06918335]
[69.28102112 108.70426941]
[82.34845734 101.33936310]
[90.83287811 84.85620117]
[109.37106323 84.98155212]
[121.95535278 76.81848907]
[134.53964233 68.65542603]
[135.84237671 55.14328384]
[144.60563660 45.03359604]
[157.41575623 41.91848755]
[169.47926331 46.73034286]
[182.31132507 38.96260071]
[195.14340210 31.19485474]
[207.97547913 23.42711067]
[220.80755615 15.65936661]
[233.51727295 7.69299936]
[246.10156250 -0.47006315]
[258.68585205 -8.63312626]
[271.27014160 -16.79618835]
[283.85443115 -24.95925140]
[296.43875122 -33.12231445]
[297.12435913 -48.62423325]
[306.81716919 -60.74155045]
[321.79003906 -64.81490326]
[336.28564453 -59.27801132]
[344.73010254 -46.25991440]
[343.87634277 -30.76634407]
[334.05267334 -18.75489235]
[319.03646851 -14.84420395]
[304.60180664 -20.53802299]
[292.01751709 -12.37495899]
[279.43322754 -4.21189642]
[266.84893799 3.95116615]
[254.26463318 12.11422920]
[241.68034363 20.27729225]
[237.71192932 26.67082024]
[228.57530212 28.49144173]
[215.74322510 36.25918579]
[202.91114807 44.02693176]
[190.07907104 51.79467392]
[177.24699402 59.56241989]
[174.00086975 75.98197937]
[159.64801025 85.22719574]
[142.70271301 81.23971558]
[130.11842346 89.40277863]
[117.53412628 97.56584167]
[115.98390961 107.60824585]
[109.16712189 115.14379883]
[99.32984161 117.68959045]
[89.71337128 114.40680695]
[76.64592743 121.77171326]
[63.57848358 129.13662720]
[50.51103973 136.50154114]
[65.23094177 139.38676453]
[77.34725952 148.22955322]
[84.58367157 161.36859131]
[85.58066559 176.33541870]
[80.15092468 190.31819153]
[69.31455994 200.68994141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[19 26]
[20 25]
[41 94]
[42 93]
[43 92]
[44 91]
[46 87]
[47 86]
[48 85]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
