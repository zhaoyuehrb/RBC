%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCCUGGAAGAGUGGCCUAGGACAGCUCCUCUCCUGCCAGAGCUAGGCAGGCGCCGAAGUAGCCGCAUGGCCCCGUCAGAAGACCCCAGGGACUGGAGAGCCAACCUCAAAGGCACCAUCCGUGAGACAGGCCUGGAGACCAGCUCCGGUGGGAAGCUGGCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-49.94031525 613.70153809]
[-46.24903488 628.40356445]
[-47.81185150 643.48114014]
[-54.44004440 657.11358643]
[-65.33322906 667.65466309]
[-79.17600250 673.83148193]
[-94.29677582 674.89819336]
[-108.86965179 670.72601318]
[-121.13488007 661.81872559]
[-129.61137390 649.25189209]
[-133.27554321 634.54309082]
[-131.68495178 619.46838379]
[-125.03163910 605.84820557]
[-114.11904907 595.32727051]
[-100.26491547 589.17590332]
[-85.14219666 588.13702393]
[-81.01359558 573.71643066]
[-76.88499451 559.29577637]
[-72.75638580 544.87512207]
[-73.94321442 537.54949951]
[-68.41469574 530.22619629]
[-64.01875305 515.88476562]
[-69.41606140 505.03079224]
[-65.84056091 493.02883911]
[-54.69139099 486.49118042]
[-50.02962494 472.23397827]
[-45.36785889 457.97677612]
[-40.70609283 443.71957397]
[-36.04432678 429.46234131]
[-37.22744751 426.87866211]
[-37.43718719 423.66156006]
[-36.42358780 420.18731689]
[-34.08030701 416.91674805]
[-30.47012711 414.34201050]
[-24.76209259 400.47052002]
[-19.05405998 386.59902954]
[-13.34602451 372.72753906]
[-7.63799047 358.85604858]
[-1.92995632 344.98452759]
[3.77807784 331.11303711]
[1.46606386 316.39898682]
[13.87271500 306.58135986]
[19.58074951 292.70986938]
[25.28878403 278.83837891]
[30.99681854 264.96688843]
[36.70485306 251.09538269]
[36.34077835 243.68316650]
[42.65006638 237.02069092]
[48.61496353 223.25769043]
[54.06416321 209.28248596]
[58.99013901 195.11439514]
[63.91611862 180.94630432]
[68.84209442 166.77822876]
[73.76807404 152.61013794]
[64.06812286 147.41111755]
[55.40077209 140.42007446]
[48.09753418 131.84259033]
[42.44886017 121.94561005]
[38.69282913 111.04925537]
[37.00541687 99.51644135]
[37.49283981 87.74086761]
[40.18622589 76.13352966]
[45.03889465 65.10843658]
[51.92636490 55.06779480]
[43.52050018 42.64437103]
[35.11463547 30.22094727]
[20.13633728 23.54392242]
[18.69900513 7.20788479]
[32.28124237 -1.98204947]
[46.91080856 5.42793608]
[47.53805923 21.81508255]
[55.94392014 34.23850632]
[64.34978485 46.66193008]
[71.38682556 44.06768799]
[73.93019867 29.28488350]
[85.46089935 38.87919998]
[92.49794006 36.28495789]
[90.82836914 21.37816238]
[89.15879822 6.47136831]
[78.99914551 -6.40160608]
[85.31818390 -21.53441048]
[101.61543274 -23.35971260]
[111.12567902 -9.99979877]
[104.06558990 4.80179739]
[105.73516083 19.70859146]
[107.40473175 34.61538696]
[119.81739807 39.70932007]
[130.49812317 47.02629089]
[139.07977295 56.08290100]
[150.39939880 46.24084473]
[155.73684692 31.34715080]
[170.41812134 28.83520889]
[181.73774719 18.99315262]
[193.05737305 9.15109921]
[197.50389099 1.12462878]
[204.68009949 -0.76631063]
[216.18070984 -10.39625263]
[227.68133545 -20.02619553]
[228.01841736 -30.94887543]
[234.20301819 -39.69000244]
[243.98065186 -43.48343277]
[254.01214600 -41.29408264]
[265.86276245 -50.48989105]
[277.71337891 -59.68569946]
[276.24404907 -75.04293060]
[283.33099365 -88.74616241]
[296.71286011 -96.42273712]
[312.11947632 -95.62309265]
[324.63467407 -86.60238647]
[330.26492310 -72.23910522]
[327.21359253 -57.11650467]
[316.45437622 -46.06016159]
[301.42047119 -42.59811401]
[286.90917969 -47.83508682]
[275.05856323 -38.63927460]
[263.20794678 -29.44346809]
[257.28274536 -11.06219006]
[237.31127930 -8.52557659]
[225.81065369 1.10436523]
[214.31004333 10.73430729]
[202.89942932 20.47072601]
[191.57980347 30.31278038]
[180.26016235 40.15483475]
[175.73236084 54.34455872]
[160.24145508 57.56047058]
[148.92182922 67.40252686]
[156.96157837 85.46321869]
[158.55966187 105.16784668]
[153.53532410 124.28804779]
[142.45677185 140.66156006]
[126.57685852 152.43673706]
[107.69141388 158.28192139]
[87.93615723 157.53610229]
[83.01018524 171.70419312]
[78.08420563 185.87228394]
[73.15823364 200.04037476]
[68.23225403 214.20846558]
[69.22714996 218.52967834]
[68.81233215 222.53160095]
[67.26716614 225.80427551]
[64.97683716 228.07322693]
[62.37795639 229.22257996]
[56.41306305 242.98558044]
[50.57634735 256.80340576]
[44.86831284 270.67492676]
[39.16027832 284.54641724]
[33.45224380 298.41790771]
[27.74420929 312.28939819]
[29.64794731 327.99563599]
[17.64957237 336.82107544]
[11.94153786 350.69256592]
[6.23350334 364.56405640]
[0.52546918 378.43557739]
[-5.18256521 392.30706787]
[-10.89059925 406.17855835]
[-16.59863281 420.05004883]
[-21.78711891 434.12411499]
[-26.44888496 448.38131714]
[-31.11065102 462.63851929]
[-35.77241898 476.89575195]
[-40.43418503 491.15295410]
[-36.20944595 509.05670166]
[-49.67735291 520.28070068]
[-54.07329941 534.62213135]
[-58.33575821 549.00372314]
[-62.46435928 563.42437744]
[-66.59296417 577.84503174]
[-70.72156525 592.26562500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 168]
[17 167]
[18 166]
[19 165]
[21 164]
[22 163]
[25 161]
[26 160]
[27 159]
[28 158]
[29 157]
[34 156]
[35 155]
[36 154]
[37 153]
[38 152]
[39 151]
[40 150]
[42 148]
[43 147]
[44 146]
[45 145]
[46 144]
[48 143]
[49 142]
[50 137]
[51 136]
[52 135]
[53 134]
[54 133]
[64 73]
[65 72]
[66 71]
[77 86]
[78 85]
[79 84]
[89 126]
[90 125]
[92 123]
[93 122]
[94 121]
[96 120]
[97 119]
[98 118]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
