%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGGCUGCACCAGCGCCUGGCACCAUGAGGACGCCUGGGCCUCUGCCCGUGCUGCUGCUGCUCCUGGCGGGAGCCCCCGCCGCGCGGCCCACUCCCCCGACCUGCUACUCCCGCAUGCGGGCCC\
) } def
/len { sequence length } bind def

/coor [
[-58.33556747 200.45121765]
[-66.18964386 195.91542053]
[-79.86222839 202.08471680]
[-93.53482056 208.25402832]
[-107.20740509 214.42333984]
[-120.87999725 220.59263611]
[-123.41030884 224.42907715]
[-126.72662354 226.94088745]
[-130.29150391 228.04411316]
[-133.59857178 227.84655762]
[-136.23510742 226.61907959]
[-150.45401001 231.39637756]
[-164.67292786 236.17367554]
[-178.89183044 240.95097351]
[-193.05009460 245.90516663]
[-207.14547729 251.03546143]
[-221.17581177 256.34109497]
[-235.13891602 261.82119751]
[-249.10202026 267.30133057]
[-252.02371216 282.44949341]
[-262.68783569 293.59759521]
[-277.69152832 297.18826294]
[-292.24713135 292.07577515]
[-301.71005249 279.89151001]
[-303.06066895 264.52337646]
[-295.86801147 250.87532043]
[-282.42724609 243.30238342]
[-267.02728271 244.22106934]
[-254.58213806 253.33821106]
[-240.61903381 247.85809326]
[-226.65592957 242.37797546]
[-221.52270508 236.94607544]
[-212.27577209 236.94007874]
[-198.18038940 231.80976868]
[-192.91334534 226.50753784]
[-183.66914368 226.73207092]
[-169.45022583 221.95477295]
[-155.23132324 217.17747498]
[-141.01240540 212.40016174]
[-127.04930115 206.92005920]
[-113.37670898 200.75074768]
[-99.70412445 194.58143616]
[-86.03153992 188.41213989]
[-72.35894775 182.24282837]
[-62.01126862 164.45536804]
[-40.75011063 166.46701050]
[-27.57678795 159.29319763]
[-14.40346432 152.11940002]
[-1.23014092 144.94558716]
[11.94318295 137.77177429]
[25.11650658 130.59796143]
[38.28982925 123.42415619]
[42.70779419 117.39611816]
[51.88220978 116.24037170]
[65.23028564 109.39720917]
[78.57836151 102.55405426]
[85.73377228 78.15052032]
[115.54579926 73.62481689]
[123.04579926 60.63443375]
[130.54580688 47.64405060]
[138.04580688 34.65367126]
[145.54580688 21.66329002]
[142.09559631 11.20250320]
[144.97421265 0.79930902]
[152.97674561 -6.11089182]
[163.24986267 -7.38802958]
[171.38806152 -19.98841858]
[179.52624512 -32.58880615]
[187.66444397 -45.18919754]
[195.80264282 -57.78958511]
[203.94082642 -70.38997650]
[212.07902527 -82.99036407]
[212.35560608 -99.38717651]
[226.82330322 -107.10840607]
[240.59901428 -98.21111298]
[239.51145935 -81.84806824]
[224.67941284 -74.85216522]
[216.54121399 -62.25178146]
[208.40303040 -49.65139008]
[200.26483154 -37.05100250]
[192.12663269 -24.45061302]
[183.98844910 -11.85022449]
[175.85025024 0.75016457]
[176.41667175 20.01339722]
[158.53617859 29.16329002]
[151.03617859 42.15367126]
[143.53617859 55.14405060]
[136.03617859 68.13442993]
[128.53617859 81.12481689]
[141.34597778 73.32037354]
[150.39352417 61.35618591]
[164.42068481 56.04216766]
[179.12446594 59.00845718]
[189.99430847 69.34510803]
[193.69578552 83.88124084]
[189.09341431 98.15773010]
[177.59901428 107.79510498]
[162.73864746 109.83699036]
[149.07055664 103.65674591]
[134.08822632 102.92905426]
[146.88758850 110.75057983]
[161.16384888 104.67046356]
[176.27983093 108.17572021]
[186.42311096 119.91851807]
[187.69340515 135.38351440]
[179.60226440 148.62409973]
[165.26087952 154.54898071]
[150.18382263 150.87994385]
[140.16851807 139.02780151]
[139.06605530 123.54994202]
[126.26669312 115.72841644]
[111.76097870 124.97053528]
[96.30352020 124.30802155]
[85.42152405 115.90213013]
[72.07344818 122.74528503]
[58.72537231 129.58845520]
[45.46363831 136.59747314]
[32.29031754 143.77128601]
[19.11699295 150.94509888]
[5.94366884 158.11891174]
[-7.22965479 165.29270935]
[-20.40297890 172.46652222]
[-33.57630157 179.64033508]
[-35.04864120 189.15151978]
[-40.70433807 196.76683044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 34]
[16 33]
[17 31]
[18 30]
[19 29]
[46 123]
[47 122]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[54 116]
[55 115]
[56 114]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
