%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGACAGGGCAGCAGGAGCCUUAGAGCAUGGACGGUGCCAUGGGGCCUCGGGGGCUGCUGUUGUGCAUGUACCUGGUAUCUCUCCUCAUCCUGCAGGCCAUGCCUGCCCUGGGCUCGGCUACAGGCA\
) } def
/len { sequence length } bind def

/coor [
[164.83779907 143.22659302]
[151.61427307 136.14573669]
[138.39076233 129.06486511]
[125.16724396 121.98400116]
[111.94373322 114.90313721]
[98.04494476 118.99826050]
[85.27145386 112.15837860]
[80.97541046 98.32037354]
[67.75189209 91.23950958]
[54.52837372 84.15865326]
[41.30485916 77.07778931]
[27.53425789 71.13047028]
[13.31352997 66.35858917]
[-0.90719801 61.58670044]
[-15.12792587 56.81481171]
[-29.34865379 52.04292679]
[-43.56938171 47.27103806]
[-57.79010773 42.49915314]
[-73.33477783 45.44429779]
[-82.93941498 34.06008911]
[-97.16014099 29.28820229]
[-111.38086700 24.51631546]
[-125.60159302 19.74442863]
[-139.82232666 14.97254181]
[-154.04304504 10.20065498]
[-169.58772278 13.14580059]
[-179.19235229 1.76159072]
[-193.41308594 -3.01029611]
[-207.63380432 -7.78218317]
[-222.06697083 -11.86677170]
[-236.67936707 -15.25466633]
[-251.29176331 -18.64256096]
[-265.90417480 -22.03045654]
[-280.51657104 -25.41835213]
[-293.79284668 -16.84423637]
[-309.22564697 -20.25081444]
[-317.65890503 -33.61701965]
[-314.08935547 -49.01292419]
[-300.63473511 -57.30440903]
[-285.27743530 -53.57228088]
[-277.12866211 -40.03075027]
[-262.51626587 -36.64285278]
[-247.90386963 -33.25495911]
[-233.29147339 -29.86706352]
[-218.67907715 -26.47916985]
[-216.17822266 -27.94390297]
[-212.91856384 -28.45507050]
[-209.27992249 -27.70759201]
[-205.74914551 -25.54692650]
[-202.86192322 -22.00291061]
[-188.64118958 -17.23102379]
[-174.42047119 -12.45913696]
[-159.89295959 -15.74559975]
[-149.27116394 -4.02007294]
[-135.05043030 0.75181395]
[-120.82971191 5.52370071]
[-106.60897827 10.29558754]
[-92.38825226 15.06747437]
[-78.16752625 19.83936119]
[-63.64001846 16.55289841]
[-53.01822281 28.27842522]
[-38.79749298 33.05031204]
[-24.57676697 37.82220078]
[-10.35603905 42.59408569]
[3.86468887 47.36597443]
[18.08541679 52.13785934]
[32.30614471 56.90974808]
[26.21754837 43.20102692]
[30.17114449 28.73143578]
[42.38475037 20.02351570]
[57.35276413 21.00258827]
[68.32796478 31.22731018]
[70.36299896 46.08862305]
[62.54051971 58.88740540]
[48.38572311 63.85427094]
[61.60923767 70.93513489]
[74.83275604 78.01599884]
[88.05626678 85.09686279]
[101.95505524 81.00173950]
[114.72854614 87.84162140]
[119.02458954 101.67962646]
[132.24810791 108.76049042]
[145.47161865 115.84134674]
[158.69514465 122.92221069]
[171.91865540 130.00308228]
[180.48834229 123.38003540]
[190.75329590 120.04811859]
[201.50201416 120.37322998]
[211.47511292 124.29128265]
[219.51280212 131.31872559]
[224.68986511 140.61207581]
[226.42202759 151.06910706]
[224.53184509 161.45959473]
[237.01637268 169.77444458]
[249.50088501 178.08929443]
[261.98541260 186.40414429]
[274.82827759 184.64317322]
[285.07601929 191.90673828]
[287.50628662 203.82009888]
[299.78781128 212.43193054]
[312.06936646 221.04376221]
[324.35092163 229.65559387]
[339.72119141 227.12722778]
[352.05374146 236.03581238]
[354.36941528 250.70458984]
[366.65097046 259.31643677]
[378.93252563 267.92825317]
[391.21405029 276.54006958]
[407.20037842 275.19210815]
[418.11642456 286.94882202]
[415.58831787 302.79141235]
[401.55541992 310.56686401]
[386.78259277 304.31048584]
[382.60223389 288.82162476]
[370.32067871 280.20980835]
[358.03915405 271.59796143]
[345.75759888 262.98614502]
[331.17767334 265.80770874]
[318.59976196 257.24905396]
[315.73907471 241.93713379]
[303.45755005 233.32530212]
[291.17599487 224.71348572]
[278.89443970 216.10165405]
[261.39654541 215.55284119]
[253.67056274 198.88865662]
[241.18603516 190.57380676]
[228.70152283 182.25895691]
[216.21699524 173.94410706]
[198.52473450 182.01708984]
[179.37524414 177.89221191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[4 82]
[5 81]
[8 78]
[9 77]
[10 76]
[11 75]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[27 52]
[28 51]
[29 50]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[93 128]
[94 127]
[95 126]
[96 125]
[99 123]
[100 122]
[101 121]
[102 120]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
