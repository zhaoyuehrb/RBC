%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUAUUUAGGGUGCGGCGGCGGGCGGGAGCAGUGCGCCCAUGGCGGCCCUGGGGGACGAGGUGCUGGACGGUUACGUGUUCCCGGCGUGCCCCCCCUGCUCGUACCGGUACCCAUACCCCGCGGCCACCAAGGGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[103.30939484 176.65043640]
[101.97431183 161.70997620]
[100.63923645 146.76950073]
[99.30415344 131.82904053]
[92.76759338 128.15162659]
[89.81253815 142.85766602]
[74.91309357 144.59164429]
[68.65983582 130.95724487]
[79.69446564 120.79681396]
[73.15790558 117.11940002]
[59.69558716 123.73499298]
[46.23326874 130.35058594]
[32.77095413 136.96617126]
[19.30863762 143.58175659]
[5.84632015 150.19735718]
[-0.53885019 156.84460449]
[-7.99042797 156.80661011]
[-21.59679222 163.12062073]
[-30.85790443 175.94802856]
[-45.65959549 174.28695679]
[-59.26596069 180.60096741]
[-62.12277603 195.85279846]
[-73.42189026 206.48809814]
[-88.81856537 208.41738892]
[-102.39245605 200.89880371]
[-108.92413330 186.82341003]
[-105.90203094 171.60346985]
[-94.48820496 161.09136963]
[-79.07151031 159.32922363]
[-65.57997894 166.99461365]
[-51.97361755 160.68058777]
[-43.68572235 148.30479431]
[-27.91081238 149.51426697]
[-14.30445004 143.20024109]
[-0.76926947 136.73503113]
[12.69304752 130.11944580]
[26.15536308 123.50385284]
[39.61767960 116.88826752]
[53.07999802 110.27267456]
[66.54231262 103.65708160]
[83.26366425 79.29331970]
[106.16600800 81.40324402]
[115.97743225 70.05706024]
[125.78885651 58.71087265]
[128.96289062 43.21132278]
[143.14031982 38.64518356]
[152.95175171 27.29899979]
[162.76318359 15.95281315]
[172.57460022 4.60662651]
[175.74864197 -10.89292431]
[189.92607117 -15.45906162]
[199.73748779 -26.80524635]
[209.54891968 -38.15143204]
[219.36035156 -49.49761963]
[229.17176819 -60.84380722]
[223.89393616 -73.84516907]
[224.74632263 -87.78459930]
[231.50445557 -99.93011475]
[242.79208374 -107.92613220]
[256.36096191 -110.25026703]
[269.53866577 -106.50290680]
[279.60043335 -117.62769318]
[289.66220093 -128.75247192]
[299.72396851 -139.87725830]
[309.78573608 -151.00202942]
[319.84750366 -162.12681580]
[329.90927124 -173.25160217]
[339.97106934 -184.37637329]
[349.90826416 -195.61256409]
[359.71969604 -206.95874023]
[369.53112793 -218.30493164]
[379.21554565 -229.75971985]
[388.77175903 -241.32167053]
[397.26095581 -253.68829346]
[404.61578369 -266.76141357]
[411.97058105 -279.83456421]
[419.32540894 -292.90768433]
[426.68023682 -305.98080444]
[420.99954224 -320.55007935]
[426.06176758 -335.34561157]
[439.47668457 -343.38140869]
[454.91018677 -340.86318970]
[465.07501221 -328.98001099]
[465.17169189 -313.34274292]
[455.15454102 -301.33480835]
[439.75335693 -298.62597656]
[432.39852905 -285.55285645]
[425.04373169 -272.47973633]
[417.68890381 -259.40661621]
[410.33407593 -246.33348083]
[424.68576050 -250.69570923]
[438.91583252 -245.95176697]
[447.77893066 -233.85031128]
[448.00802612 -218.85205078]
[439.51867676 -206.48553467]
[425.44015503 -201.30917358]
[410.96191406 -205.23103333]
[401.42083740 -216.80548096]
[400.33370972 -231.76547241]
[390.77749634 -220.20350647]
[388.92578125 -212.98558044]
[380.87731934 -208.49351501]
[371.06588745 -197.14732361]
[361.25445557 -185.80113220]
[359.24237061 -178.62625122]
[351.09582520 -174.31460571]
[341.03405762 -163.18983459]
[330.97229004 -152.06504822]
[320.91052246 -140.94026184]
[310.84875488 -129.81547546]
[300.78698730 -118.69070435]
[290.72521973 -107.56591797]
[280.66345215 -96.44113922]
[285.99749756 -81.22735596]
[282.93655396 -65.30349731]
[272.21911621 -53.01041794]
[256.68377686 -47.74737167]
[240.51795959 -51.03237915]
[230.70652771 -39.68619537]
[220.89511108 -28.34000778]
[211.08367920 -16.99382210]
[201.27226257 -5.64763594]
[198.80000305 9.04035950]
[183.92079163 14.41805172]
[174.10935974 25.76423836]
[164.29794312 37.11042404]
[154.48651123 48.45661163]
[152.01425171 63.14460754]
[137.13504028 68.52230072]
[127.32361603 79.86848450]
[117.51219177 91.21466827]
[125.14980316 108.73836517]
[114.24462128 130.49395752]
[115.57970428 145.43443298]
[116.91477966 160.37489319]
[118.24986267 175.31536865]
[129.58694458 186.66658020]
[127.63765717 202.59077454]
[113.89733887 210.87225342]
[98.90637207 205.15820312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[17 34]
[18 33]
[20 31]
[21 30]
[42 131]
[43 130]
[44 129]
[46 127]
[47 126]
[48 125]
[49 124]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[61 113]
[62 112]
[63 111]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 104]
[70 103]
[71 102]
[72 100]
[73 99]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
