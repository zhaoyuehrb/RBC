%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACAAGAGCUCUACAGGGCAGGCCACACUGCGAAGGAAGGAGGCAACACGGGCAAGGGCUGCCUGCUGCCCGCUGGAGACCGCACCAUGGAGCCAGGCGGGGCCCGUCUGCGUCUGCAGAGGACAGAAGGGCUGGGAGGGGAGCGGGAGCGCCAACCCUGUGGAGAUGGAAACACUGAGACGCACA\
) } def
/len { sequence length } bind def

/coor [
[74.84554291 382.01632690]
[68.16780853 368.53588867]
[64.08102417 354.05786133]
[62.72439575 339.07540894]
[64.14412689 324.09878540]
[68.29185486 309.63812256]
[75.02631378 296.18591309]
[84.11813354 284.20037842]
[95.25765228 274.08969116]
[108.06545258 266.19824219]
[122.10530853 260.79479980]
[119.37790680 246.04486084]
[116.65049744 231.29489136]
[113.92309570 216.54493713]
[111.19569397 201.79498291]
[108.46829224 187.04501343]
[105.74088287 172.29505920]
[103.01348114 157.54510498]
[100.28607941 142.79515076]
[97.55867767 128.04518127]
[90.98458862 126.66860962]
[84.92371368 123.77389526]
[79.72106934 119.52581787]
[75.67283630 114.16621399]
[61.16793823 117.98825836]
[46.66304398 121.81030273]
[42.48712158 137.79957581]
[30.88797379 149.43843079]
[15.09446239 153.62091064]
[-0.56395596 149.29830933]
[-11.84401512 137.74012756]
[-26.28337860 141.80273438]
[-40.72274399 145.86534119]
[-43.83677292 160.85070801]
[-53.56711578 172.66506958]
[-67.67780304 178.59355164]
[-82.92631531 177.27384949]
[-95.80863953 169.00921631]
[-103.36452484 155.69880676]
[-103.85768127 140.40124512]
[-97.17477417 126.63179779]
[-84.85150146 117.55460358]
[-69.71965790 115.25551605]
[-55.25642395 120.26285553]
[-44.78535080 131.42597961]
[-30.34598541 127.36336517]
[-15.90662193 123.30075836]
[-13.41273212 109.86299133]
[-5.33028889 98.75978088]
[6.80747843 92.19437408]
[20.65591431 91.49990845]
[33.51179504 96.86908722]
[42.84100342 107.30540466]
[57.34589767 103.48336029]
[71.85079193 99.66132355]
[76.37117767 84.69733429]
[88.17720795 74.45172882]
[103.62863922 72.08359528]
[109.45516205 58.26145172]
[115.16660309 44.39136124]
[120.76258087 30.47428513]
[126.35855103 16.55720520]
[126.65920258 7.40833187]
[132.16493225 2.45656705]
[137.99145508 -11.36557579]
[143.81797791 -25.18771935]
[149.64450073 -39.00986099]
[155.47102356 -52.83200455]
[161.29754639 -66.65415192]
[159.52827454 -82.37611389]
[171.60173035 -91.09855652]
[177.42823792 -104.92070007]
[183.25476074 -118.74284363]
[170.26071167 -143.17579651]
[190.35836792 -170.48443604]
[192.09976196 -185.38301086]
[193.84115601 -200.28160095]
[187.75827026 -214.88670349]
[196.92080688 -226.62966919]
[198.66220093 -241.52824402]
[200.40359497 -256.42681885]
[202.14498901 -271.32540894]
[200.03045654 -280.23162842]
[204.04113770 -286.45639038]
[206.02993774 -301.32394409]
[208.01872253 -316.19152832]
[200.81779480 -326.90734863]
[202.79246521 -339.25997925]
[212.34317017 -346.70294189]
[214.57879639 -361.53540039]
[216.81443787 -376.36785889]
[219.05006409 -391.20034790]
[217.23274231 -400.17193604]
[221.44810486 -406.25991821]
[223.92996216 -421.05319214]
[226.41183472 -435.84643555]
[217.03663635 -448.56970215]
[219.48663330 -464.18292236]
[232.30828857 -473.42309570]
[247.89474487 -470.80813599]
[256.99884033 -457.88949585]
[254.21925354 -442.33157349]
[241.20507812 -433.36459351]
[238.72322083 -418.57131958]
[236.24136353 -403.77807617]
[233.88253784 -388.96469116]
[231.64689636 -374.13223267]
[229.41127014 -359.29977417]
[227.17562866 -344.46731567]
[234.46272278 -328.51165771]
[222.88629150 -314.20272827]
[220.89750671 -299.33517456]
[218.90872192 -284.46759033]
[217.04356384 -269.58401489]
[215.30216980 -254.68542480]
[213.56077576 -239.78684998]
[211.81938171 -224.88827515]
[218.02680969 -211.34881592]
[208.73973083 -198.54020691]
[206.99833679 -183.64163208]
[205.25694275 -168.74304199]
[211.15934753 -164.11576843]
[220.41407776 -175.92042542]
[232.21858215 -166.66549683]
[222.96414185 -154.86120605]
[228.86653137 -150.23393250]
[242.91879272 -155.48120117]
[256.97106934 -160.72848511]
[264.91143799 -174.66871643]
[280.78274536 -177.00982666]
[292.40991211 -165.95590210]
[290.87353516 -149.98658752]
[277.35220337 -141.35215759]
[262.21832275 -146.67620850]
[248.16606140 -141.42893982]
[234.11380005 -136.18167114]
[228.40783691 -123.23067474]
[218.72029114 -114.65804291]
[207.47987366 -111.31826019]
[197.07690430 -112.91632080]
[191.25038147 -99.09417725]
[185.42387390 -85.27203369]
[187.60989380 -70.53871918]
[175.11968994 -60.82762527]
[169.29316711 -47.00548553]
[163.46664429 -33.18334198]
[157.64012146 -19.36119652]
[151.81359863 -5.53905439]
[145.98707581 8.28308868]
[140.27563477 22.15317917]
[134.67965698 36.07025909]
[129.08367920 49.98733521]
[129.50611877 57.38020706]
[123.27730560 64.08797455]
[117.45078278 77.91011810]
[127.41824341 93.61778259]
[125.41217804 112.11255646]
[112.30863190 125.31778717]
[115.03603363 140.06774902]
[117.76344299 154.81770325]
[120.49084473 169.56765747]
[123.21824646 184.31761169]
[125.94564819 199.06758118]
[128.67304993 213.81753540]
[131.40045166 228.56748962]
[134.12786865 243.31744385]
[136.85527039 258.06741333]
[151.89900208 258.09301758]
[166.68183899 260.88269043]
[180.70028687 266.34143066]
[193.47686768 274.28332520]
[204.57643127 284.43783569]
[213.62092590 296.45913696]
[220.30229187 309.93780518]
[224.39297485 324.41470337]
[225.75364685 339.39678955]
[224.33795166 354.37380981]
[220.19412231 368.83557129]
[213.46328735 382.28961182]
[204.37469482 394.27761841]
[193.23791504 404.39129639]
[180.43223572 412.28619385]
[166.39384460 417.69338989]
[151.60084534 420.42874146]
[136.55712891 420.39910889]
[121.77503204 417.60543823]
[107.75806427 412.14291382]
[94.98361969 404.19760132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 167]
[12 166]
[13 165]
[14 164]
[15 163]
[16 162]
[17 161]
[18 160]
[19 159]
[20 158]
[24 55]
[25 54]
[26 53]
[31 47]
[32 46]
[33 45]
[58 155]
[59 154]
[60 152]
[61 151]
[62 150]
[64 149]
[65 148]
[66 147]
[67 146]
[68 145]
[69 144]
[71 142]
[72 141]
[73 140]
[75 121]
[76 120]
[77 119]
[79 117]
[80 116]
[81 115]
[82 114]
[84 113]
[85 112]
[86 111]
[89 109]
[90 108]
[91 107]
[92 106]
[94 105]
[95 104]
[96 103]
[126 136]
[127 135]
[128 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
