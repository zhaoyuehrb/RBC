%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCCAGUAGUUGGUAUGGUCCGAGACAGUAUGGCUGCUGCAUUUCGGCCCUCGAAUCGAGUUCUCCUGCAGGCGCUGCAGAUUUUGGUGUAUCCUGGGGUGGGAGGCUCCGGCU\
) } def
/len { sequence length } bind def

/coor [
[92.14904022 107.18970490]
[77.16120148 106.58571625]
[62.17336655 105.98172760]
[47.18553162 105.37773895]
[32.19769669 104.77375031]
[18.09716797 111.94909668]
[5.69176722 103.70559692]
[-9.29606724 103.10160828]
[1.60645306 113.40379333]
[6.06642723 127.72541046]
[2.94086862 142.39614868]
[-6.96921587 153.65626526]
[-21.12410545 158.62005615]
[-35.89623260 156.01539612]
[-47.49985123 146.50982666]
[-52.96122742 132.53936768]
[-50.88073730 117.68435669]
[-41.79156113 105.75175476]
[-28.02277184 99.79958344]
[-42.31330490 95.24100494]
[-51.57457733 95.60597992]
[-56.92338181 90.36344910]
[-71.08638000 85.42283630]
[-85.24937439 80.48223114]
[-99.41236877 75.54162598]
[-113.57536316 70.60102081]
[-127.73835754 65.66041565]
[-142.02888489 61.10183716]
[-156.43666077 56.92857361]
[-170.84443665 52.75531387]
[-185.25219727 48.58205032]
[-199.65997314 44.40879059]
[-215.44442749 48.85658646]
[-226.99812317 37.21852875]
[-222.43559265 21.46685028]
[-206.45037842 17.80552864]
[-195.48670959 30.00101852]
[-181.07894897 34.17427826]
[-166.67117310 38.34754181]
[-152.26339722 42.52080536]
[-137.85562134 46.69406509]
[-133.21113586 45.14630508]
[-127.54448700 46.59459686]
[-122.79774475 51.49742126]
[-108.63475037 56.43802643]
[-94.47175598 61.37863159]
[-80.30876160 66.31923676]
[-66.14576721 71.25984192]
[-51.98277664 76.20045471]
[-37.75473022 80.95046997]
[-23.46419525 85.50904846]
[-8.69207859 88.11376953]
[6.29575634 88.71775818]
[19.32425690 81.49921417]
[32.80168533 89.78591156]
[47.78952026 90.38990021]
[62.77735519 90.99388885]
[77.76519012 91.59787750]
[92.75302887 92.20186615]
[107.74085999 91.59787750]
[122.63149261 89.78983307]
[137.52212524 87.98178101]
[152.41276550 86.17372894]
[167.27778625 84.16593170]
[182.11450195 81.95874786]
[196.95121765 79.75157166]
[211.78794861 77.54438782]
[226.59370422 75.13821411]
[241.36581421 72.53349304]
[253.61276245 62.51736832]
[267.49026489 67.92705536]
[282.26235962 65.32232666]
[297.03448486 62.71760559]
[311.80661011 60.11288452]
[317.61804199 50.72458649]
[327.46722412 46.24463272]
[337.92608643 47.96229172]
[345.50189209 55.05488205]
[360.39251709 53.24682999]
[375.28317261 51.43878174]
[390.17379761 49.63072968]
[397.59686279 36.00436783]
[411.62603760 29.37400055]
[426.86682129 32.28913879]
[437.45883179 43.62885284]
[439.32919312 59.03279114]
[431.75875854 72.57782745]
[417.65847778 79.05561066]
[402.45019531 75.97531128]
[391.98184204 64.52136230]
[377.09121704 66.32941437]
[362.20056152 68.13746643]
[347.30993652 69.94551086]
[332.89266968 82.71454620]
[314.41131592 74.88500214]
[299.63919067 77.48972321]
[284.86709595 80.09444427]
[270.09497070 82.69916534]
[258.90463257 92.52899170]
[243.97053528 87.30561066]
[229.19842529 89.91033173]
[223.07792664 94.22696686]
[213.99513245 92.38111115]
[199.15840149 94.58829498]
[184.32168579 96.79547119]
[169.48495483 99.00265503]
[163.25077820 103.15341187]
[154.22080994 101.06436157]
[139.33018494 102.87241364]
[124.43954468 104.68046570]
[109.54891205 106.48851013]
[120.05703735 117.19268799]
[120.16619110 132.19229126]
[109.81497192 143.04826355]
[94.82716370 143.65284729]
[83.63517761 133.66587830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 55]
[7 53]
[8 52]
[19 51]
[20 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[60 111]
[61 110]
[62 109]
[63 108]
[64 106]
[65 105]
[66 104]
[67 103]
[68 101]
[69 100]
[71 98]
[72 97]
[73 96]
[74 95]
[78 93]
[79 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
