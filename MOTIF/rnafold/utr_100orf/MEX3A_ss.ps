%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUAGUCUAGUGGUAUCUGGAAUAAUGGAAAGAAAUGGGGGCUUUGGAGAACUAGGAUGUUUCGGGGGAAGCGCUAAGGACCGAGGGCUGCUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[-30.05060005 221.21772766]
[-44.06604767 218.02879333]
[-56.58902740 211.00616455]
[-66.59698486 200.73367310]
[-79.88715363 207.68862915]
[-81.89258575 225.55915833]
[-94.01782227 238.62852478]
[-111.38366699 241.90823364]
[-127.16117096 234.29594421]
[-139.99324036 242.06369019]
[-152.82531738 249.83143616]
[-165.65739441 257.59918213]
[-178.48947144 265.36691284]
[-182.01864624 280.77212524]
[-195.45147705 289.09884644]
[-210.81851196 285.40701294]
[-219.00276184 271.88690186]
[-215.14865112 256.55975342]
[-201.54275513 248.51889038]
[-186.25721741 252.53483582]
[-173.42514038 244.76710510]
[-160.59306335 236.99935913]
[-147.76098633 229.23161316]
[-134.92890930 221.46386719]
[-135.70169067 209.15014648]
[-131.07304382 197.63478088]
[-121.88583374 189.18275452]
[-109.88599396 185.48547363]
[-97.39095306 187.32257080]
[-86.84210205 194.39845276]
[-73.55193329 187.44349670]
[-76.33331299 172.11235046]
[-74.26594543 156.64921570]
[-67.53816223 142.55232239]
[-56.79041290 131.19119263]
[-43.05433655 123.67360687]
[-27.65371895 120.73760223]
[-12.07693672 122.67899323]
[2.16689539 129.32168579]
[13.69412422 140.03346252]
[26.76156807 132.66856384]
[34.05012512 119.67909241]
[49.87129211 119.64373779]
[62.93873596 112.27883148]
[76.00617981 104.91391754]
[89.07362366 97.54900360]
[102.02494812 89.98176575]
[114.85702515 82.21401978]
[127.68910217 74.44627380]
[140.52117920 66.67852783]
[141.08918762 54.59278870]
[147.42877197 44.42991638]
[157.82130432 38.72155762]
[169.55694580 38.82123184]
[179.64088440 44.58522034]
[192.93104553 37.63026810]
[201.57066345 24.37629700]
[216.43466187 25.33045959]
[229.72483826 18.37550735]
[236.01373291 11.50218964]
[243.53825378 11.41821289]
[257.03829956 4.87994623]
[270.53833008 -1.65832007]
[284.03836060 -8.19658661]
[297.53842163 -14.73485279]
[311.03845215 -21.27311897]
[319.79354858 -35.13964462]
[336.16690063 -34.22049713]
[343.31503296 -19.46122169]
[333.88455200 -6.04489231]
[317.57672119 -7.77307892]
[304.07669067 -1.23481274]
[290.57662964 5.30345345]
[277.07659912 11.84171963]
[263.57656860 18.37998581]
[250.07652283 24.91825294]
[236.67979431 31.66567802]
[223.38961792 38.62063217]
[215.70062256 51.37714005]
[199.88600159 50.92044067]
[186.59584045 57.87539291]
[182.33750916 75.54489136]
[166.33291626 84.80384827]
[148.28892517 79.51060486]
[135.45684814 87.27835083]
[122.62477112 95.04609680]
[109.79269409 102.81384277]
[104.97270203 109.46686554]
[96.43853760 110.61644745]
[83.37109375 117.98136139]
[70.30364990 125.34627533]
[57.23620605 132.71118164]
[49.01297379 146.22743225]
[34.12648010 145.73600769]
[21.05903625 153.10090637]
[24.17781639 167.24685669]
[23.16057777 181.68074036]
[18.09978676 195.21945190]
[9.41897202 206.75590515]
[-2.16271448 215.34944153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[40 95]
[41 94]
[43 92]
[44 91]
[45 90]
[46 89]
[47 87]
[48 86]
[49 85]
[50 84]
[55 81]
[56 80]
[58 78]
[59 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
