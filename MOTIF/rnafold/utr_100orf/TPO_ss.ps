%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:48:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGCAAUUAAGGCGCCCAUUUCAGAAGAGUUACAGCCGUGAAAAUUACUCAGCAGUGCAGUUGGCUGAGAAGAGGAAAAAAGGUCAGAAUGAGAGCGCUCGCUGUGCUGUCUGUCACGCUGGUUAUGGCCUGCACAGAAGCCUUCUUCCCCUUCAUCUCGAGAGGGAAAGAACUCCUUUGGGGAAAGC\
) } def
/len { sequence length } bind def

/coor [
[190.48693848 241.53749084]
[205.43492126 240.29513550]
[195.91902161 228.69998169]
[186.40312195 217.10482788]
[176.88722229 205.50967407]
[167.37132263 193.91452026]
[157.85542297 182.31936646]
[140.06352234 192.29647827]
[120.62497711 198.48013306]
[100.33872223 200.61616516]
[80.03854370 198.61677551]
[60.55880356 192.56413269]
[42.70013428 182.70703125]
[27.19654083 169.45057678]
[15.60138321 178.96647644]
[4.00622654 188.48237610]
[7.86714840 202.08679199]
[6.25315285 216.09243774]
[-0.55898368 228.38626099]
[-11.51075077 237.12614441]
[-24.92625618 241.01696777]
[-38.76864243 239.50239563]
[-50.94932556 232.84420776]
[-62.69862747 242.16911316]
[-74.44792938 251.49401855]
[-79.96837616 266.93606567]
[-96.14811707 269.60964966]
[-106.34281921 256.76440430]
[-100.06504822 241.61444092]
[-83.77283478 239.74472046]
[-72.02353668 230.41981506]
[-60.27423477 221.09490967]
[-64.09186554 205.58555603]
[-60.75539780 189.90615845]
[-50.88251114 177.20303345]
[-36.40768433 170.04780579]
[-20.20329094 169.91691589]
[-5.50967264 176.88722229]
[6.08548403 167.37132263]
[17.68064117 157.85542297]
[12.86049652 150.30342102]
[8.73124313 142.35258484]
[5.32561970 134.06594849]
[2.67062759 125.50922394]
[0.78731692 116.75024414]
[-0.30938008 107.85845947]
[-0.61076820 98.90436554]
[-0.11445788 89.95896149]
[1.17561579 81.09317017]
[3.24922442 72.37728119]
[6.08992767 63.88040161]
[-7.46991205 57.46707535]
[-21.02975082 51.05374908]
[-34.58959198 44.64042282]
[-48.14942932 38.22709656]
[-61.70927048 31.81377029]
[-74.29256439 40.62037659]
[-89.59470367 41.93948364]
[-103.49949646 35.41626358]
[-112.26661682 22.80542946]
[-113.53775024 7.49922848]
[-106.97097778 -6.38504601]
[-94.33272552 -15.11259365]
[-79.02261353 -16.33574867]
[-65.15898895 -9.72548771]
[-56.47110367 2.94006205]
[-55.29594421 18.25393105]
[-41.73610306 24.66725731]
[-28.17626381 31.08058357]
[-14.61642456 37.49390793]
[-1.05658555 43.90723801]
[12.50325394 50.32056427]
[16.13535309 44.40819931]
[20.16631126 38.76023102]
[24.57695580 33.40351868]
[29.34631157 28.36353302]
[34.45169067 23.66425133]
[39.86882019 19.32802010]
[45.57192993 15.37546253]
[51.53389740 11.82537746]
[57.72637177 8.69464779]
[64.11989594 5.99816418]
[70.68406677 3.74875093]
[77.38765717 1.95710599]
[84.19879913 0.63175029]
[91.08508301 -0.22101264]
[98.01377106 -0.59712714]
[104.95190430 -0.49480438]
[111.86649323 0.08546896]
[118.72463226 1.14093316]
[122.60691833 -13.34795380]
[114.96505737 -26.92144394]
[119.10864258 -41.55993271]
[132.09599304 -48.76163483]
[135.97827148 -63.25052261]
[132.07637024 -78.58302307]
[142.84408569 -88.87406158]
[146.72636414 -103.36295319]
[150.60865784 -117.85183716]
[154.49093628 -132.34072876]
[158.37322998 -146.82962036]
[151.62921143 -161.38632202]
[158.93386841 -175.66993713]
[174.68368530 -178.72328186]
[186.79673767 -168.20410156]
[185.98095703 -152.18180847]
[172.86210632 -142.94732666]
[168.97982788 -128.45843506]
[165.09753418 -113.96955109]
[161.21525574 -99.48066711]
[157.33296204 -84.99178314]
[161.51257324 -70.69561768]
[150.46716309 -59.36823654]
[146.58486938 -44.87934875]
[154.23139954 -32.14881897]
[150.50061035 -17.39972305]
[137.09580994 -9.46566868]
[133.21351624 5.02321863]
[152.92716980 14.42872906]
[170.14656067 27.86687469]
[184.06021118 44.70436859]
[197.17156982 37.41791916]
[205.47567749 23.95120049]
[220.35896301 24.53185654]
[233.47030640 17.24540520]
[246.58166504 9.95895481]
[254.54382324 -4.37757778]
[270.94296265 -4.37983894]
[278.90905762 9.95449734]
[270.24728394 23.87949562]
[253.86811829 23.07031059]
[240.75675964 30.35676193]
[227.64540100 37.64321136]
[220.27911377 50.58875275]
[204.45802307 50.52927399]
[191.34666443 57.81572342]
[197.35659790 74.59488678]
[200.31170654 92.17121124]
[200.11924744 109.99317932]
[196.78527832 127.50158691]
[190.41439819 144.14706421]
[181.20652771 159.40728760]
[169.45057678 172.80346680]
[178.96647644 184.39862061]
[188.48237610 195.99377441]
[197.99827576 207.58892822]
[207.51417542 219.18408203]
[217.03007507 230.77925110]
[227.01219177 241.97555542]
[237.44383240 252.75427246]
[247.87547302 263.53298950]
[258.30712891 274.31173706]
[268.73876953 285.09045410]
[279.17041016 295.86917114]
[277.26409912 280.99078369]
[282.95217896 267.11111450]
[294.75137329 257.84942627]
[309.58489990 255.62086487]
[323.58471680 261.00653076]
[333.10012817 272.60208130]
[335.64990234 287.38378906]
[330.56915283 301.49710083]
[319.18273926 311.26181030]
[304.45980835 314.13159180]
[290.24160767 309.35946655]
[298.77810669 321.69348145]
[307.31460571 334.02752686]
[315.85110474 346.36154175]
[324.38760376 358.69555664]
[332.92410278 371.02957153]
[348.51599121 373.61187744]
[357.64712524 386.51141357]
[354.90011597 402.07513428]
[341.90475464 411.06936646]
[326.37094116 408.15798950]
[317.51461792 395.06823730]
[320.59008789 379.56607056]
[312.05358887 367.23205566]
[303.51708984 354.89804077]
[294.98056030 342.56402588]
[286.44406128 330.22998047]
[277.90756226 317.89596558]
[268.39166260 306.30081177]
[257.96002197 295.52209473]
[247.52839661 284.74337769]
[237.09675598 273.96463013]
[226.66511536 263.18591309]
[216.23347473 252.40719604]
[213.29060364 267.11566162]
[200.03393555 274.13427734]
[186.21499634 268.30020142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[14 40]
[15 39]
[16 38]
[23 32]
[24 31]
[25 30]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[90 118]
[91 117]
[94 114]
[95 113]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
[121 136]
[122 135]
[124 133]
[125 132]
[126 131]
[149 188]
[150 187]
[151 186]
[152 185]
[153 184]
[154 183]
[165 182]
[166 181]
[167 180]
[168 179]
[169 178]
[170 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
