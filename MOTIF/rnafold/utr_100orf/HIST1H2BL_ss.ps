%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUUUUGCCACUAUUGUUUCAUUAUGCCCGAGCUGGCCAAGUCUGCUCCCGCCCCGAAGAAGGGCUCCAAGAAGGCGGUGACCAAGGCCCAGAAGAAGGAUGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[129.17243958 441.42773438]
[135.61335754 427.88098145]
[148.14555359 419.63818359]
[163.13551331 419.08920288]
[176.23533630 426.39154053]
[172.17272949 411.95217896]
[168.11012268 397.51281738]
[164.04751587 383.07345581]
[159.98490906 368.63409424]
[155.92230225 354.19470215]
[151.85969543 339.75534058]
[147.79708862 325.31597900]
[143.55477905 310.92840576]
[139.13345337 296.59478760]
[128.01231384 293.52590942]
[119.70327759 285.34945679]
[116.38800812 274.04772949]
[119.01667023 262.44320679]
[127.03950500 253.49374390]
[123.33814240 238.95758057]
[119.63677979 224.42141724]
[115.93542480 209.88526917]
[103.99981689 207.07164001]
[94.36334991 199.37103271]
[88.92272186 188.21949768]
[88.78274536 175.73973083]
[94.03259277 164.33708191]
[103.71662140 156.23591614]
[100.74443054 141.53332520]
[97.77223206 126.83073425]
[73.79862976 114.95258331]
[69.92546082 85.44287872]
[56.57738113 78.59972382]
[43.22930527 71.75656128]
[29.88122749 64.91339874]
[14.07100391 65.50282288]
[6.27520180 52.81129837]
[-7.07287502 45.96813965]
[-20.42095184 39.12498093]
[-37.27415466 37.27946472]
[-40.16619492 20.57400513]
[-24.91418457 13.17045403]
[-13.57779217 25.77690315]
[-0.22971526 32.62006378]
[13.11836147 39.46322250]
[27.97384071 38.38433456]
[36.72438812 51.56532669]
[50.07246399 58.40848541]
[63.42053986 65.25164795]
[76.76861572 72.09480286]
[90.03034973 65.08577728]
[91.89550781 50.20218658]
[93.76065826 35.31859970]
[95.62581635 20.43501091]
[97.49097443 5.55142260]
[97.49097443 -9.44857693]
[95.62581635 -24.33216476]
[82.99539948 -33.83206940]
[80.86455536 -49.49205017]
[90.49745941 -62.02132034]
[106.17910004 -63.98648453]
[118.60581970 -54.22164536]
[120.40508270 -38.52011108]
[110.50940704 -26.19732094]
[112.37455750 -11.31373310]
[120.57513428 -23.87361145]
[133.88186646 -30.79682541]
[148.87374878 -30.30349731]
[161.69656372 -22.52045822]
[169.05369568 -9.44863415]
[169.05372620 5.55136633]
[161.69664001 18.62322044]
[148.87387085 26.40631104]
[133.88198853 26.89969635]
[120.57522583 19.97653580]
[112.37455750 7.41657829]
[110.50940704 22.30016708]
[108.64424896 37.18375397]
[106.77909088 52.06734085]
[104.91394043 66.95092773]
[114.52089691 70.81124878]
[122.25896454 77.30316925]
[127.46221161 85.66407776]
[129.74760437 94.98287964]
[129.04019165 104.29823303]
[125.56587219 112.69747162]
[119.81398010 119.40602112]
[112.47482300 123.85854340]
[115.44701385 138.56112671]
[118.41920471 153.26371765]
[135.06202698 160.22506714]
[144.18829346 175.60549927]
[142.35534668 193.23890686]
[130.47158813 206.18389893]
[134.17294312 220.72006226]
[137.87429810 235.25622559]
[141.57566833 249.79237366]
[158.17866516 258.73599243]
[163.00114441 276.64013672]
[153.46704102 292.17346191]
[157.88838196 306.50708008]
[163.46693420 313.88171387]
[162.23645020 321.25338745]
[166.29905701 335.69274902]
[170.36166382 350.13211060]
[174.42427063 364.57147217]
[178.48687744 379.01083374]
[182.54948425 393.45019531]
[186.61209106 407.88955688]
[190.67469788 422.32891846]
[198.55317688 430.46594238]
[197.80357361 440.49304199]
[204.64674377 453.84112549]
[211.48989868 467.18917847]
[225.55166626 475.62710571]
[225.00459290 492.01712036]
[210.41145325 499.49859619]
[196.78442383 490.37521362]
[198.14183044 474.03234863]
[191.29866028 460.68426514]
[184.45550537 447.33618164]
[179.81813049 461.60134888]
[168.45547485 471.39370728]
[153.66197205 473.87405396]
[139.72680664 468.32327271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 110]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[13 101]
[14 100]
[19 97]
[20 96]
[21 95]
[22 94]
[28 90]
[29 89]
[30 88]
[32 50]
[33 49]
[34 48]
[35 47]
[37 45]
[38 44]
[39 43]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 65]
[57 64]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
