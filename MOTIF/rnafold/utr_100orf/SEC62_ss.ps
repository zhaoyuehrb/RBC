%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCAGAGGGAACCGGGCGGAGCGGCCAACAUGGCGGAACGCAGGAGACACAAGAAGCGGAUCCAGGAAGUUGGUGAACCAUCUAAAGAAGAGAAGGCUGUGGCCAAGUAUCUUCGAUUCAACUGUCCAA\
) } def
/len { sequence length } bind def

/coor [
[93.60241699 276.77340698]
[89.00581360 291.18612671]
[80.17875671 303.47183228]
[67.98604584 312.42687988]
[53.62218857 317.17395020]
[38.49440765 317.24798584]
[24.08477402 312.64172363]
[11.80499458 303.80645752]
[2.85811639 291.60775757]
[-1.87933612 277.24072266]
[-1.94323540 262.11288452]
[2.67267871 247.70634460]
[11.51618576 235.43247986]
[23.72089005 226.49377441]
[38.09109497 221.76596069]
[53.21895981 221.71218872]
[57.78625870 207.42443848]
[62.35355759 193.13668823]
[66.92085266 178.84893799]
[71.48815155 164.56118774]
[76.05545044 150.27343750]
[64.76190948 144.08586121]
[55.05308151 135.36557007]
[47.49541855 124.51563263]
[42.55340958 112.06532288]
[40.56164932 98.64442444]
[25.62957191 100.07026672]
[10.69749355 101.49610901]
[-4.23458529 102.92195129]
[-19.42725563 110.44651794]
[-30.86351013 97.93058777]
[-22.00257874 83.47651672]
[-5.66042614 87.98986816]
[9.27165318 86.56402588]
[24.20373154 85.13819122]
[39.13581085 83.71234894]
[44.71074677 69.78682709]
[34.88783646 58.45058441]
[25.06492615 47.11434174]
[7.55882072 41.55051804]
[4.80979395 24.26032066]
[-5.28011179 13.16104984]
[-15.37001705 2.06177926]
[-29.66285896 7.23702049]
[-44.84797287 6.54369259]
[-58.60974503 0.08752309]
[-68.84960175 -11.14696980]
[-74.00603485 -25.44660568]
[-73.29273224 -40.63079834]
[-66.81846619 -54.38406372]
[-55.57051086 -64.60913086]
[-41.26410294 -69.74674988]
[-26.08086395 -69.01347351]
[-12.33612823 -62.52111816]
[-2.12586617 -51.25972366]
[2.99293017 -36.94657135]
[2.23968172 -21.76431084]
[-4.27074671 -8.02812672]
[5.81915855 3.07114410]
[15.90906429 14.17041492]
[28.03242302 15.08062363]
[36.52869797 24.33031845]
[36.40116882 37.29143143]
[46.22407913 48.62767410]
[56.04698944 59.96391678]
[67.67700195 51.00095749]
[80.98852539 45.26142883]
[95.12059021 43.01631927]
[109.18329620 44.31379700]
[122.31378937 48.98181152]
[130.12080383 36.17359161]
[130.69660950 20.36286736]
[143.92749023 13.52230453]
[151.73449707 0.71408510]
[159.54151917 -12.09413433]
[159.39064026 -28.49258804]
[173.65219116 -36.58827591]
[187.65512085 -28.05304527]
[186.99440002 -11.66721344]
[172.34973145 -4.28711700]
[164.54272461 8.52110195]
[156.73570251 21.32932091]
[156.71830750 36.22391510]
[142.92901611 43.98060989]
[135.12200928 56.78882980]
[144.04660034 65.93157196]
[150.65237427 76.86783600]
[154.59158325 89.02187347]
[155.65684509 101.75386047]
[170.44915771 104.24131012]
[185.24147034 106.72875977]
[200.03379822 109.21620941]
[214.82611084 111.70365906]
[227.29484558 98.65179443]
[244.93562317 95.64893341]
[260.74243164 103.69880676]
[268.55010986 119.45275116]
[283.44403076 121.23353577]
[298.33795166 123.01432037]
[313.19183350 116.06491089]
[326.48040771 125.67460632]
[324.53350830 141.95777893]
[309.35394287 148.16369629]
[296.55715942 137.90823364]
[281.66323853 136.12745667]
[266.76934814 134.34666443]
[259.85623169 144.45828247]
[249.21778870 150.67459106]
[236.87013245 151.74560547]
[225.18423462 147.40336609]
[216.43070984 138.42532349]
[212.33865356 126.49597168]
[197.54634094 124.00852203]
[182.75402832 121.52107239]
[167.96171570 119.03362274]
[153.16940308 116.54617310]
[149.33715820 125.81871033]
[143.90318298 134.25305176]
[137.04388428 141.57536316]
[128.98197937 147.54792786]
[119.97916412 151.97685242]
[110.32772064 154.71835327]
[100.34099579 155.68342590]
[90.34320068 154.84074402]
[85.77590179 169.12849426]
[81.20860291 183.41624451]
[76.64130402 197.70399475]
[72.07400513 211.99174500]
[67.50671387 226.27949524]
[79.79832458 235.09831238]
[88.76153564 247.28501892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[26 36]
[27 35]
[28 34]
[29 33]
[37 65]
[38 64]
[39 63]
[41 60]
[42 59]
[43 58]
[70 85]
[71 84]
[73 82]
[74 81]
[75 80]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
