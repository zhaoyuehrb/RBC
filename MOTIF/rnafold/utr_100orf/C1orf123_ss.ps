%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUACGACGCGCCGGAAAGCAACGGCAAGGGCCGCAGCCAGCACCGGGCGGAGAGGGCUACCAUGGGGAAAAUCGCGCUGCAACUCAAAGCCACGCUGGAGAACAUCACCAACCUCCGGCCCGUGGGCGAGGACUUCCGGUGGUACCUGAAGAUGAAAUGUG\
) } def
/len { sequence length } bind def

/coor [
[-101.40492249 428.09381104]
[-115.40313721 422.70401001]
[-127.74406433 414.17749023]
[-137.73739624 402.99118042]
[-144.82417297 389.77084351]
[-148.60795593 375.25592041]
[-148.87712097 360.25833130]
[-145.61660767 345.61697388]
[-139.00878906 332.15084839]
[-129.42416382 320.61401367]
[-143.29597473 326.32125854]
[-157.16778564 332.02850342]
[-163.95082092 338.21551514]
[-171.35844421 337.70959473]
[-185.33641052 343.15170288]
[-199.31436157 348.59384155]
[-213.29232788 354.03594971]
[-217.34742737 371.66976929]
[-231.03332520 383.26489258]
[-248.78099060 384.34887695]
[-263.51434326 374.67749023]
[-277.27499390 380.64779663]
[-283.15200806 395.07342529]
[-297.19229126 400.93215942]
[-310.90869141 395.24044800]
[-324.66934204 401.21075439]
[-338.42999268 407.18109131]
[-352.19064331 413.15139771]
[-361.51565552 426.64123535]
[-377.83654785 425.04095459]
[-384.36373901 409.99676514]
[-374.38265991 396.98486328]
[-358.16094971 399.39074707]
[-344.40029907 393.42044067]
[-330.63967896 387.45010376]
[-316.87902832 381.47979736]
[-311.66503906 367.57476807]
[-297.79486084 361.32397461]
[-283.24533081 366.88714600]
[-269.48468018 360.91683960]
[-268.62350464 348.75659180]
[-262.62286377 338.06195068]
[-252.57521057 330.90606689]
[-240.36404419 328.70605469]
[-228.31100464 331.94293213]
[-218.73445129 340.05798340]
[-204.75648499 334.61587524]
[-190.77851868 329.17373657]
[-176.80056763 323.73162842]
[-162.87504578 318.15670776]
[-149.00323486 312.44943237]
[-135.13140869 306.74218750]
[-133.94909668 303.82751465]
[-131.84051514 301.16986084]
[-128.87265015 299.05990601]
[-125.20194244 297.76715088]
[-121.06668091 297.51296997]
[-110.30970001 287.05889893]
[-99.55272675 276.60485840]
[-96.93567657 269.65646362]
[-88.49002075 266.05657959]
[-77.53595734 255.80920410]
[-66.58190155 245.56184387]
[-55.62783813 235.31446838]
[-44.67377853 225.06710815]
[-33.71971893 214.81973267]
[-29.71116257 200.47467041]
[-14.34750462 196.69729614]
[-3.39344406 186.44993591]
[7.56061602 176.20256042]
[18.51467705 165.95520020]
[15.96109676 149.76028442]
[23.62590218 135.07987976]
[38.67256927 127.77344513]
[55.27543640 130.88935852]
[66.03240967 120.43529510]
[76.78939056 109.98123169]
[87.54636383 99.52716827]
[94.29252625 86.12980652]
[96.28581238 71.26283264]
[98.27909088 56.39586258]
[86.45788574 46.48311234]
[81.89431763 31.74617386]
[86.04460144 16.88755035]
[97.58439636 6.64857483]
[112.83140564 4.29646826]
[126.92034912 10.58177853]
[135.35551453 23.49888611]
[135.44525146 38.92598724]
[127.16093445 51.94035339]
[113.14606476 58.38914490]
[111.15278625 73.25611877]
[109.15950012 88.12308502]
[121.54158020 96.58973694]
[134.67239380 89.33841705]
[147.80320740 82.08709717]
[160.79359436 74.58709717]
[173.63882446 66.84113312]
[186.48406982 59.09517288]
[199.32929993 51.34921265]
[212.17453003 43.60324860]
[225.01977539 35.85728836]
[237.86500549 28.11132622]
[236.38354492 12.92027569]
[241.64799500 -1.40621448]
[252.61309814 -12.02360916]
[267.10174561 -16.82381821]
[282.23718262 -14.85375404]
[295.01428223 -6.50457668]
[302.89611816 6.56597900]
[304.31774902 21.76274490]
[298.99691772 36.06839371]
[287.99008179 46.64252472]
[273.48263550 51.38563919]
[258.35507202 49.35598755]
[245.61097717 40.95656204]
[232.76573181 48.70252228]
[219.92050171 56.44848633]
[207.07525635 64.19445038]
[194.23002625 71.94040680]
[181.38479614 79.68637085]
[168.53955078 87.43233490]
[166.53549194 91.81285858]
[161.73439026 94.95922852]
[155.05453491 95.21791077]
[141.92372131 102.46923065]
[128.79289246 109.72055054]
[110.26937103 117.66498566]
[98.00042725 110.28414154]
[87.24345398 120.73820496]
[76.48647308 131.19227600]
[65.72949982 141.64633179]
[68.70192719 155.13198853]
[64.64357758 168.21809387]
[54.72037506 177.50721741]
[41.60599899 180.64344788]
[28.76204491 176.90925598]
[17.80798531 187.15661621]
[6.85392475 197.40399170]
[-4.10013580 207.65135193]
[-8.89219856 222.72938538]
[-23.47235107 225.77378845]
[-34.42641068 236.02116394]
[-45.38047028 246.26852417]
[-56.33452988 256.51589966]
[-67.28858948 266.76327515]
[-78.24265289 277.01065063]
[-89.09866333 287.36181641]
[-99.85563660 297.81588745]
[-110.61261749 308.26995850]
[-96.21290588 304.06893921]
[-81.22933197 303.36718750]
[-66.50000763 306.20391846]
[-52.84883499 312.42047119]
[-41.03939819 321.66909790]
[-31.73227119 333.43249512]
[-25.44805527 347.05264282]
[-22.53826141 361.76770020]
[-23.16565323 376.75457764]
[-27.29513550 391.17495728]
[-34.69572449 404.22222900]
[-44.95345688 415.16659546]
[-57.49456787 423.39584351]
[-71.61754608 428.44967651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 52]
[11 51]
[12 50]
[14 49]
[15 48]
[16 47]
[17 46]
[21 40]
[22 39]
[25 36]
[26 35]
[27 34]
[28 33]
[57 150]
[58 149]
[59 148]
[61 147]
[62 146]
[63 145]
[64 144]
[65 143]
[66 142]
[68 140]
[69 139]
[70 138]
[71 137]
[75 132]
[76 131]
[77 130]
[78 129]
[79 93]
[80 92]
[81 91]
[94 127]
[95 126]
[96 125]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
