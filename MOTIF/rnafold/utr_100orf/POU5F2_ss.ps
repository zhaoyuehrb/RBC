%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGUUCCUACCAGAGCCGCUGCGGGUGCCAUUCCACCCAUGGCCGGACACAGGCCCUCAAACCACUUCUGCCCCCUUCCAGGCAGUGGUGGGGGCGGCCCCAGAGGGCCGAUGCCCCUGCGGGUUGACACUCUGACCU\
) } def
/len { sequence length } bind def

/coor [
[100.15266418 267.12414551]
[88.08833313 276.27456665]
[73.70575714 281.00958252]
[58.56504822 280.81549072]
[44.30855942 275.71340942]
[32.48272705 266.25674438]
[24.37033081 253.47129822]
[20.85134125 238.74394226]
[22.30747223 223.67216492]
[28.58077431 209.89085388]
[38.99076462 198.89491272]
[52.40824890 191.87709045]
[67.37779236 189.59861755]
[70.03735352 174.83627319]
[72.69691467 160.07392883]
[75.35647583 145.31159973]
[78.01603699 130.54925537]
[67.83095551 119.53724670]
[52.90629196 121.03868866]
[37.98162460 122.54012299]
[23.07460785 124.20772552]
[8.18709564 126.04129791]
[-6.70041656 127.87486267]
[-19.45130730 137.24104309]
[-33.02892685 131.11752319]
[-47.91643906 132.95109558]
[-62.80395126 134.78466797]
[-77.69146729 136.61822510]
[-92.57897949 138.45179749]
[-102.10565948 151.06202698]
[-117.77012634 153.15963745]
[-130.27893066 143.50016785]
[-132.21081543 127.81439209]
[-122.41962433 115.40841675]
[-106.71430969 113.64248657]
[-94.41254425 123.56428528]
[-79.52503204 121.73072052]
[-64.63751984 119.89714813]
[-49.75000763 118.06357574]
[-34.86249542 116.23001099]
[-23.17646027 106.99497986]
[-8.53398514 112.98735046]
[6.35352707 111.15378571]
[21.24103928 109.32021332]
[27.54610443 105.34860992]
[36.48018646 107.61545563]
[51.40485382 106.11402130]
[66.32952118 104.61257935]
[66.68029022 94.01845551]
[70.27019501 84.08897400]
[76.72453308 75.78534698]
[85.39265442 69.90294647]
[95.41351318 66.99520111]
[105.80116272 67.32157135]
[115.54174042 70.82460785]
[119.18138123 56.27287292]
[122.82101440 41.72113800]
[126.46065521 27.16940117]
[112.29134369 32.09186172]
[99.48789978 24.27700806]
[97.38858032 9.42463970]
[107.52452850 -1.63260090]
[122.50304413 -0.83006376]
[131.39962769 11.24765491]
[136.63447571 -2.80924320]
[141.86930847 -16.86614227]
[147.10415649 -30.92304039]
[152.33900452 -44.97993851]
[149.90429688 -60.61268616]
[161.59681702 -69.83950806]
[166.83164978 -83.89640808]
[172.06649780 -97.95330811]
[177.30134583 -112.01020813]
[182.53619385 -126.06710815]
[173.84306335 -138.92047119]
[174.39883423 -154.42759705]
[183.98980713 -166.62565613]
[198.92805481 -170.82426453]
[213.46951294 -165.40896606]
[222.02270508 -152.46205139]
[221.29873657 -136.96188354]
[211.57600403 -124.86856842]
[196.59309387 -120.83226013]
[191.35824585 -106.77536011]
[186.12339783 -92.71846008]
[180.88854980 -78.66156769]
[175.65370178 -64.60466766]
[178.46284485 -49.97736359]
[166.39590454 -39.74509430]
[161.16105652 -25.68819427]
[155.92620850 -11.63129616]
[150.69137573 2.42560196]
[145.45652771 16.48250008]
[141.01239014 30.80903816]
[137.37275696 45.36077499]
[133.73310852 59.91250992]
[130.09347534 74.46424866]
[137.44830322 87.53737640]
[151.77484131 91.98150635]
[166.10137939 96.42564392]
[180.42791748 100.86977386]
[194.75444031 105.31391144]
[209.12960815 109.59816742]
[223.55158997 113.72201538]
[237.97358704 117.84587097]
[247.16804504 117.19898987]
[252.66903687 122.22557831]
[266.99557495 126.66971588]
[281.32211304 131.11384583]
[295.64865112 135.55798340]
[311.51412964 131.40853882]
[322.84637451 143.26234436]
[317.98770142 158.92520142]
[301.93630981 162.28453064]
[291.20449829 149.88452148]
[276.87796021 145.44038391]
[262.55142212 140.99624634]
[248.22489929 136.55212402]
[233.84973145 132.26785278]
[219.42774963 128.14401245]
[205.00575256 124.02015686]
[197.65052795 125.21518707]
[190.31031799 119.64044952]
[175.98377991 115.19631195]
[161.65724182 110.75218201]
[147.33070374 106.30804443]
[133.00416565 101.86391449]
[130.59080505 113.00997925]
[124.50856781 122.73242950]
[115.44082642 129.85733032]
[104.43430328 133.50717163]
[92.77838135 133.20881653]
[90.11882019 147.97116089]
[87.45925903 162.73348999]
[84.79969788 177.49583435]
[82.14013672 192.25817871]
[95.37333679 199.61759949]
[105.49806976 210.87675476]
[111.41607666 224.81433105]
[112.48542023 239.91847229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 48]
[19 47]
[20 46]
[21 44]
[22 43]
[23 42]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[55 97]
[56 96]
[57 95]
[58 94]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[98 127]
[99 126]
[100 125]
[101 124]
[102 123]
[103 121]
[104 120]
[105 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
