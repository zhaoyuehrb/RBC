%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGUAAUGUAAUUAACCAUCAUUUGAAAUACAUGGCGAAUAGAAACAAUGUGACAGAGUUUAUUCUAUUGGGGCUUACAGAGAAUCCAAAAAUGCAGAAAAUCAUAUUUGUUGUGUUUUCUGUCAUCUACA\
) } def
/len { sequence length } bind def

/coor [
[55.31366730 182.46154785]
[51.35834503 167.99243164]
[55.47975540 153.56974792]
[66.48077393 143.37626648]
[54.12055206 151.87480164]
[47.13272095 166.06918335]
[32.26155090 166.90440369]
[19.90133095 175.40293884]
[7.54111004 183.90145874]
[-4.81911039 192.39999390]
[-17.17933083 200.89851379]
[-24.66036034 217.67610168]
[-42.15014648 218.47917175]
[-54.30619431 227.26727295]
[-66.46224213 236.05535889]
[-78.61828613 244.84344482]
[-79.56542206 260.45233154]
[-90.36161041 271.76498413]
[-105.90923309 273.43994141]
[-118.86717224 264.68630981]
[-123.11708832 249.63731384]
[-116.65229797 235.39862061]
[-102.52527618 228.69329834]
[-87.40637970 232.68739319]
[-75.25032806 223.89930725]
[-63.09428024 215.11122131]
[-50.93823624 206.32313538]
[-48.68120575 194.37823486]
[-38.54274368 186.96717834]
[-25.67785645 188.53829956]
[-13.31763744 180.03976440]
[-0.95741677 171.54124451]
[11.40280342 163.04270935]
[23.76302338 154.54418945]
[29.86677170 140.95767212]
[45.62202835 139.51457214]
[57.98224640 131.01605225]
[60.10102844 116.16644287]
[50.61082840 104.55024719]
[41.12062836 92.93404388]
[31.63043022 81.31784058]
[22.14023209 69.70164490]
[12.65003300 58.08544159]
[3.15983438 46.46923828]
[-9.22747612 48.82564163]
[-21.36135864 45.67242050]
[-30.92288971 37.67633438]
[-36.11226654 26.42344666]
[-35.98742676 14.10480690]
[-30.63446999 3.08989596]
[-39.56551361 -8.96151447]
[-53.85396957 -18.08709908]
[-49.04045486 -34.34337234]
[-32.08697128 -34.21815491]
[-27.51410294 -17.89255714]
[-18.58305931 -5.84114647]
[-1.02909887 -6.87082481]
[13.79882431 2.86802769]
[19.93433571 19.67955780]
[14.77603531 36.97904205]
[24.26623344 48.59524155]
[33.75643158 60.21144104]
[43.24663162 71.82764435]
[52.73683167 83.44384766]
[62.22702789 95.06004333]
[71.71723175 106.67624664]
[75.56833649 87.65630341]
[89.91869354 76.37544250]
[107.00716400 77.04734039]
[115.65106964 64.78835297]
[124.29498291 52.52936554]
[132.93888855 40.27037811]
[141.58280945 28.01138878]
[142.77819824 9.68042088]
[158.90296936 2.85918951]
[167.25492859 -9.60053825]
[175.60688782 -22.06026649]
[179.40368652 -38.58360291]
[196.33233643 -39.50929642]
[201.90817261 -23.49847603]
[188.06660461 -13.70830917]
[179.71466064 -1.24858117]
[171.36270142 11.21114635]
[173.39012146 23.19714355]
[166.45266724 33.66537476]
[153.84179688 36.65530014]
[145.19789124 48.91428757]
[136.55397034 61.17327881]
[127.91006470 73.43226624]
[119.26615143 85.69125366]
[125.41746521 103.70201874]
[116.40677643 121.91098022]
[95.92446899 128.77285767]
[109.19996643 135.75576782]
[122.47547150 142.73867798]
[135.83251953 149.56431580]
[149.26924133 156.23173523]
[162.70596313 162.89913940]
[176.14270020 169.56655884]
[189.57942200 176.23396301]
[203.01614380 182.90138245]
[216.45288086 189.56878662]
[225.62721252 190.60089111]
[230.12541199 196.55564880]
[243.40092468 203.53855896]
[256.67642212 210.52146912]
[269.95193481 217.50437927]
[285.63775635 214.13775635]
[297.95806885 224.41343689]
[297.46176147 240.44880676]
[284.52957153 249.94290161]
[269.08197021 245.61267090]
[262.96902466 230.77989197]
[249.69351196 223.79698181]
[236.41801453 216.81407166]
[223.14250183 209.83116150]
[209.78546143 203.00552368]
[196.34873962 196.33810425]
[182.91200256 189.67070007]
[169.47528076 183.00328064]
[156.03855896 176.33587646]
[142.60183716 169.66845703]
[129.16510010 163.00105286]
[121.70397186 162.84440613]
[115.49256134 156.01419067]
[102.21705627 149.03128052]
[88.94155121 142.04835510]
[101.06855774 150.87648010]
[106.85947418 164.71357727]
[104.63530731 179.54777527]
[95.04092407 191.07806396]
[80.85809326 195.96142578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 37]
[5 36]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[13 27]
[14 26]
[15 25]
[16 24]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[50 56]
[51 55]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[75 83]
[76 82]
[77 81]
[93 127]
[94 126]
[95 125]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
