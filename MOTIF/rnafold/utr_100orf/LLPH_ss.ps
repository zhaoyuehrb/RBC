%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGACUUCCGGUCGGCGUGAGCGUGAGGUGUGGGUGUUCGUUUCUCAGGUAAAACAUGGCUAAAAGCUUACGGAGUAAGUGGAAAAGAAAGAUGCGUGCUGAAAAGAGAAAAAAGAAUGCCCCAAAGGAGGCCAGCAGGCUUAAAAGUAUUCUCA\
) } def
/len { sequence length } bind def

/coor [
[86.06979370 186.34600830]
[89.05505371 171.64607239]
[92.04031372 156.94613647]
[95.02557373 142.24620056]
[87.53908539 142.69615173]
[77.87174225 154.16535950]
[68.20440674 165.63455200]
[58.53707123 177.10375977]
[48.86973190 188.57295227]
[39.31762695 200.13830566]
[29.88170815 211.79864502]
[27.21519089 227.39352417]
[13.19432259 232.41990662]
[3.75840497 244.08024597]
[4.00396776 260.12142944]
[-8.47547245 270.20324707]
[-24.10675621 266.59179688]
[-30.89890099 252.05747986]
[-23.64155579 237.74977112]
[-7.90193176 234.64431763]
[1.53398573 222.98399353]
[3.52558303 208.22312927]
[18.22137070 202.36273193]
[27.65728951 190.70239258]
[29.43019867 183.48402405]
[37.40053177 178.90562439]
[47.06786728 167.43641663]
[56.73520660 155.96722412]
[66.40254211 144.49801636]
[76.06988525 133.02880859]
[62.99276352 107.20628357]
[70.65432739 81.63598633]
[91.88865662 69.52743530]
[91.58852386 54.53044128]
[91.28839111 39.53344345]
[90.98825836 24.53644753]
[90.68812561 9.53944969]
[90.38799286 -5.45754719]
[90.08786011 -20.45454407]
[89.78773499 -35.45154190]
[78.56697845 -52.15409470]
[88.48944855 -68.71223450]
[87.58953094 -83.68521881]
[86.68962097 -98.65819550]
[85.78970337 -113.63117981]
[84.88978577 -128.60415649]
[83.98986816 -143.57713318]
[70.21789551 -161.21832275]
[80.36212921 -180.31513977]
[78.26792908 -195.16822815]
[76.17372894 -210.02133179]
[74.07952881 -224.87442017]
[62.43246460 -231.70547485]
[56.94291687 -243.82801819]
[59.41864395 -256.70480347]
[68.73111725 -265.65716553]
[66.93453217 -280.54916382]
[65.13793945 -295.44119263]
[49.81232452 -306.50390625]
[47.42215347 -324.93295288]
[59.01528549 -339.04782104]
[56.62430954 -353.85604858]
[41.13227463 -359.55795288]
[30.67680359 -372.21154785]
[28.02832413 -388.31582642]
[33.81394958 -403.47628784]
[46.37226486 -413.60397339]
[43.68547058 -428.36138916]
[40.99868011 -443.11877441]
[38.31188965 -457.87619019]
[35.62509918 -472.63360596]
[32.93830872 -487.39102173]
[24.15265846 -501.89096069]
[35.65383911 -514.34729004]
[50.80717850 -506.74380493]
[47.69571686 -490.07781982]
[50.38251114 -475.32040405]
[53.06930161 -460.56298828]
[55.75609207 -445.80557251]
[58.44288254 -431.04815674]
[61.12967300 -416.29077148]
[74.29135895 -412.53540039]
[84.59249878 -403.42288208]
[89.97712708 -390.69555664]
[89.33766174 -376.82452393]
[82.74224091 -364.52978516]
[71.43252563 -356.24700928]
[73.82350159 -341.43878174]
[84.35764313 -336.89013672]
[91.44082642 -327.71081543]
[93.20587158 -316.12982178]
[89.09532166 -305.03167725]
[80.02996063 -297.23779297]
[81.82654572 -282.34576416]
[83.62313843 -267.45373535]
[97.27458191 -257.67477417]
[99.70421600 -240.71836853]
[88.93261719 -226.96861267]
[91.02682495 -212.11552429]
[93.12102509 -197.26243591]
[95.21522522 -182.40934753]
[102.48428345 -179.06761169]
[107.87923431 -173.03271484]
[110.44792938 -165.25685120]
[109.69228363 -157.00785828]
[105.66285706 -149.66256714]
[98.96285248 -144.47705078]
[99.86277008 -129.50407410]
[100.76268005 -114.53108978]
[101.66259766 -99.55811310]
[102.56251526 -84.58512878]
[103.46243286 -69.61215210]
[111.73638153 -63.50024414]
[115.32718658 -53.62603378]
[112.80895233 -43.19867706]
[104.78472900 -35.75167465]
[105.08486176 -20.75467682]
[105.38499451 -5.75767946]
[105.68512726 9.23931789]
[105.98526001 24.23631477]
[106.28539276 39.23331070]
[106.58551788 54.23030853]
[106.88565063 69.22730255]
[116.63114166 71.66469574]
[125.48164368 77.22329712]
[132.43164062 85.56449127]
[136.60597229 96.02566528]
[137.36370850 107.67059326]
[134.38259888 119.37288666]
[127.71379852 129.92488098]
[138.68524170 140.15364075]
[149.65669250 150.38238525]
[160.62812805 160.61114502]
[171.59957886 170.83990479]
[187.69177246 173.99789429]
[192.74626160 189.59866333]
[181.56340027 201.59349060]
[165.64717102 197.64311218]
[161.37081909 181.81134033]
[150.39936829 171.58259583]
[139.42793274 161.35383606]
[128.45648193 151.12507629]
[117.48504639 140.89631653]
[109.99855804 141.34628296]
[114.72297668 155.58283997]
[119.44739532 169.81941223]
[124.17181396 184.05598450]
[134.76382446 194.67716980]
[139.55429077 208.89163208]
[137.55174255 223.75737000]
[129.17062378 236.19749451]
[116.14564514 243.63723755]
[101.17263794 244.53675842]
[87.35065460 238.70985413]
[77.54049683 227.36256409]
[73.77263641 212.84350586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 24]
[11 23]
[13 21]
[14 20]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[38 118]
[39 117]
[40 116]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[49 101]
[50 100]
[51 99]
[52 98]
[56 95]
[57 94]
[58 93]
[61 88]
[62 87]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
