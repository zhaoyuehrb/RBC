%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUUCCUCUUUUGGCAACAUGGCGGGCGGAGAAGCUGGAGUGACUCUAGGGCAGCCGCAUCUUUCGCGUCAGGAUCUCACCACCUUGGAUGUUACCAAGUUGACGCCACUUUCACACG\
) } def
/len { sequence length } bind def

/coor [
[94.63475800 263.41455078]
[87.14778900 268.39993286]
[78.93614197 272.05972290]
[70.23219299 274.29205322]
[61.28199005 275.03543091]
[52.33826828 274.27038574]
[43.65332031 272.02008057]
[35.47187042 268.34954834]
[26.46865654 280.34713745]
[28.94737244 295.95584106]
[19.59559059 308.69631958]
[3.96155572 311.00985718]
[-8.67933464 301.52389526]
[-10.82746506 285.86630249]
[-1.20838857 273.32638550]
[14.47106838 271.34393311]
[23.47428322 259.34634399]
[11.25487328 240.66813660]
[7.73079395 218.59095764]
[13.54707909 196.96627808]
[27.71664238 179.57901001]
[47.78765106 169.48504639]
[70.26773834 168.47413635]
[74.82946014 154.18461609]
[79.39118195 139.89508057]
[83.95291138 125.60555267]
[88.51463318 111.31601715]
[88.90084839 96.32099152]
[85.08078003 81.81557465]
[74.29645538 74.59994507]
[71.45936584 62.35101318]
[77.56998444 51.82539749]
[74.12466431 37.22643280]
[70.67935181 22.62746620]
[67.23403168 8.02850056]
[54.07361221 -0.30462804]
[50.78753662 -15.15913486]
[58.81300735 -27.65423203]
[55.36769104 -42.25319672]
[51.92237473 -56.85216522]
[48.47705841 -71.45112610]
[37.77688980 -83.10517883]
[42.38402939 -97.26934814]
[38.93871307 -111.86830902]
[35.49339676 -126.46727753]
[32.04808044 -141.06623840]
[15.30670929 -144.39431763]
[1.71188390 -154.62471008]
[-6.07146597 -169.69244385]
[-6.54351091 -186.59028625]
[0.34169582 -201.96891785]
[13.17653751 -212.80081177]
[8.98425293 -227.20306396]
[-3.22570276 -238.15061951]
[0.41450658 -254.14064026]
[16.16014671 -258.72396851]
[27.81345177 -247.18565369]
[23.38650131 -231.39533997]
[27.57878494 -216.99308777]
[40.64727402 -215.87963867]
[52.57338333 -210.34455872]
[61.90555954 -201.03726196]
[67.49967957 -189.06773376]
[68.65928650 -175.87422180]
[65.22220612 -163.05030823]
[57.58284760 -152.15257263]
[46.64704514 -144.51156616]
[50.09236145 -129.91259766]
[53.53767776 -115.31362915]
[56.98299408 -100.71466064]
[67.43672943 -90.10482788]
[63.07602310 -74.89644623]
[66.52133942 -60.29748154]
[69.96665192 -45.69851303]
[73.41197205 -31.09954834]
[86.17713165 -23.51098251]
[89.87913513 -8.75463486]
[81.83300018 4.58318424]
[85.27831268 19.18214989]
[88.72363281 33.78111649]
[92.16894531 48.38008118]
[104.87223053 60.41392899]
[99.58619690 77.99551392]
[103.40626526 92.50092316]
[108.88576508 88.74920654]
[116.14246368 87.46685791]
[124.25137329 89.22619629]
[139.07269287 91.53455353]
[153.89401245 93.84291077]
[168.71533203 96.15126801]
[183.53665161 98.45962524]
[196.14916992 88.93598938]
[211.79003906 91.20288086]
[221.17979431 103.91539764]
[218.74766541 119.53142548]
[205.93658447 128.78625488]
[190.34715271 126.18915558]
[181.22828674 113.28094482]
[166.40696716 110.97258759]
[151.58564758 108.66423035]
[136.76432800 106.35587311]
[121.94300842 104.04750824]
[133.59013367 113.49973297]
[132.63003540 128.46897888]
[119.87082672 136.35583496]
[106.05175018 130.52203369]
[102.80416107 115.87773895]
[98.24243927 130.16726685]
[93.68071747 144.45680237]
[89.11899567 158.74633789]
[84.55727386 173.03585815]
[92.33959961 177.65628052]
[99.23509979 183.51130676]
[105.05014801 190.43447876]
[109.62181854 198.22943115]
[112.82241821 206.67535400]
[114.56307983 215.53334045]
[114.79618073 224.55308533]
[113.51670837 233.47998047]
[110.76230621 242.06228638]
[106.61219025 250.05827332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 17]
[9 16]
[23 111]
[24 110]
[25 109]
[26 108]
[27 107]
[28 84]
[29 83]
[32 81]
[33 80]
[34 79]
[35 78]
[38 75]
[39 74]
[40 73]
[41 72]
[43 70]
[44 69]
[45 68]
[46 67]
[52 59]
[53 58]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
