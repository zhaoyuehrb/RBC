%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGUUUGUCUUUCUCGGAAACAACAGUAACGAUAAGCCUCUUGGAAUAUGGAGGCCGCUGCGGACGGCCCGGCUGAGACCCAAAGCCCGGUGGAAAAAGACAGCCCGGCGAAGACCCAAAGCCCAGCCCAAGACACCUCAAUCAUGU\
) } def
/len { sequence length } bind def

/coor [
[200.81495667 329.48318481]
[212.14822388 319.56497192]
[204.92192078 306.42037964]
[197.69560242 293.27578735]
[182.80148315 293.10037231]
[169.90916443 285.44244385]
[162.53219604 272.27255249]
[162.73912048 257.07864380]
[170.57450867 243.94268799]
[163.34820557 230.79808044]
[156.12190247 217.65347290]
[148.89559937 204.50888062]
[141.66929626 191.36427307]
[134.44297791 178.21968079]
[121.53132629 170.79415894]
[121.66329193 154.97349548]
[114.43698883 141.82890320]
[107.21067810 128.68429565]
[99.98437500 115.53970337]
[106.41627502 129.09074402]
[108.46147156 143.95065308]
[105.92948914 158.73541260]
[99.05613708 172.06797791]
[88.48160553 182.70654297]
[75.19079590 189.66027832]
[60.42159653 192.28149414]
[45.54959869 190.32604980]
[31.95997047 183.97608948]
[20.91843414 173.82304382]
[13.45339108 160.81253052]
[10.26012611 146.15637207]
[11.63605785 131.21961975]
[17.45303345 117.39344788]
[27.16926575 105.96563721]
[39.87979126 98.00055695]
[54.40076828 94.24006653]
[69.37972260 95.03441620]
[83.42219543 100.30998993]
[69.71900940 94.20894623]
[56.01582718 88.10789490]
[42.31264496 82.00684357]
[28.60946465 75.90579224]
[14.90628242 69.80474854]
[1.53593981 77.67961121]
[-13.90636158 76.15811920]
[-25.48274231 65.82530212]
[-28.74184608 50.65435028]
[-22.43048477 36.47879791]
[-8.97550106 28.74943352]
[6.44938660 30.43835831]
[17.91299438 40.89614487]
[21.00733185 56.10156250]
[34.71051407 62.20261383]
[48.41369629 68.30366516]
[62.11687851 74.40470886]
[75.82006073 80.50576019]
[89.52323914 86.60681152]
[93.87903595 87.10704041]
[97.45150757 88.74471283]
[102.08676147 74.47886658]
[106.72201538 60.21301651]
[111.35726929 45.94717026]
[97.78034973 34.91276169]
[89.46015167 19.56212044]
[87.63320923 2.23267436]
[92.54962921 -14.44839478]
[103.43925476 -27.96245003]
[118.63215637 -36.27967834]
[135.81468201 -38.16393661]
[139.54502869 -52.69268417]
[143.27537537 -67.22142792]
[139.21313477 -82.51223755]
[149.87248230 -92.91546631]
[153.60284424 -107.44421387]
[157.33319092 -121.97296143]
[161.06353760 -136.50170898]
[150.49206543 -147.73770142]
[147.69587708 -162.90954590]
[153.56723022 -177.17596436]
[166.23260498 -185.98458862]
[181.65051270 -186.52464294]
[194.90115356 -178.62376404]
[201.75631714 -164.80311584]
[200.02851868 -149.47280884]
[190.26911926 -137.52468872]
[175.59228516 -132.77136230]
[171.86193848 -118.24261475]
[168.13159180 -103.71386719]
[164.40122986 -89.18511963]
[168.73031616 -74.93350983]
[157.80412292 -63.49108505]
[154.07377625 -48.96233749]
[150.34342957 -34.43358994]
[161.09629822 -27.69793892]
[169.51718140 -18.18278313]
[174.91093445 -6.65827560]
[176.82795715 5.93894100]
[175.10166931 18.58185959]
[169.86294556 30.23683167]
[161.53022766 39.94808578]
[150.77615356 46.91608810]
[138.47325134 50.56338501]
[125.62311554 50.58242416]
[120.98786163 64.84827423]
[116.35260773 79.11412048]
[111.71735382 93.37996674]
[113.12897491 108.31340027]
[120.35527802 121.45800018]
[127.58158875 134.60260010]
[134.80789185 147.74719238]
[148.23641968 156.11291504]
[147.58758545 170.99337769]
[154.81388855 184.13796997]
[162.04019165 197.28257751]
[169.26649475 210.42716980]
[176.49281311 223.57177734]
[183.71911621 236.71636963]
[199.00859070 237.13934326]
[211.94808960 245.10591125]
[219.11503601 258.39129639]
[218.67279053 273.37997437]
[210.84020996 286.04946899]
[218.06651306 299.19406128]
[225.29281616 312.33868408]
[239.73971558 308.08413696]
[254.76348877 307.03515625]
[269.66143799 309.24081421]
[283.73678589 314.59796143]
[296.33117676 322.85601807]
[306.85552979 333.62875366]
[314.81765747 346.41229248]
[319.84512329 360.60873413]
[321.70275879 375.55407715]
[320.30374146 390.54928589]
[315.71343994 404.89303589]
[308.14660645 417.91445923]
[297.95712280 429.00448608]
[285.62158203 437.64440918]
[271.71691895 443.43014526]
[256.89352417 446.09106445]
[241.84466553 445.50274658]
[227.27423096 441.69268799]
[213.86370850 434.83908081]
[202.24032593 425.26251221]
[192.94772339 413.41085815]
[186.42054749 399.83847046]
[182.96406555 385.18011475]
[182.73997498 370.12142944]
[185.75872803 355.36672974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[16 110]
[17 109]
[18 108]
[19 107]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[59 106]
[60 105]
[61 104]
[62 103]
[69 93]
[70 92]
[71 91]
[73 89]
[74 88]
[75 87]
[76 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
