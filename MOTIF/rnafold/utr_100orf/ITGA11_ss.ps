%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCGCCGCGCCGAGGAGGCUGCCGCUCUGGCUUGCCGCCCCCCGCCGCCGCUGCACACCGGACCCAGCCGCCGUGCCGCGGGCCAUGGACCUGCCCAGGGGCCUGGUGGUGGCCUGGGCGCUCAGCCUGUGGCCAGGGUUCACGGACACCUUCAACAUGGACACCAGGAAGCCCCGGGUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[287.82904053 255.88203430]
[276.05703735 246.58580017]
[264.28503418 237.28955078]
[252.51304626 227.99330139]
[240.74105835 218.69705200]
[228.96907043 209.40080261]
[214.70446777 213.60305786]
[200.53302002 208.54005432]
[191.95997620 195.95608521]
[192.44624329 180.55900574]
[180.67425537 171.26275635]
[168.90226746 161.96652222]
[157.13027954 152.67027283]
[145.35827637 143.37402344]
[130.57473755 141.55851746]
[124.53955841 126.93363953]
[112.76757050 117.63739014]
[100.99557495 108.34114075]
[97.73062134 117.98699188]
[89.93088531 125.97550964]
[77.42413330 134.25688171]
[64.91738892 142.53826904]
[57.10039520 159.20072937]
[39.56473160 159.61352539]
[27.19811058 168.10273743]
[14.83148670 176.59193420]
[10.49724007 192.03842163]
[-4.33713150 198.14750671]
[-18.29196739 190.23283386]
[-20.66231346 174.36585999]
[-9.62984085 162.71836853]
[6.34228039 164.22531128]
[18.70890427 155.73611450]
[31.07552719 147.24690247]
[33.60012817 135.40397644]
[43.85074997 128.23271179]
[56.63600922 130.03150940]
[69.14276123 121.75013733]
[81.64951324 113.46875763]
[67.10308075 117.12954712]
[54.58914948 108.85902405]
[52.25497437 94.04174805]
[61.62022400 82.32457733]
[76.58761597 81.33602905]
[87.41238403 91.71929169]
[80.64723206 78.33151245]
[73.88208008 64.94372559]
[67.11692810 51.55594635]
[60.35177994 38.16816330]
[53.58662796 24.78038025]
[46.82147598 11.39259815]
[40.05632401 -1.99518466]
[12.06918335 -6.09388304]
[0.45417464 -15.58554173]
[-15.12775421 -18.32672310]
[-20.08692551 -32.37150574]
[-31.70193291 -41.86316299]
[-43.31694031 -51.35482025]
[-54.93194962 -60.84647751]
[-70.44653320 -59.45524597]
[-82.09059143 -69.24659729]
[-83.32130432 -84.04595184]
[-94.93631744 -93.53761292]
[-106.55132294 -103.02926636]
[-122.24917603 -101.19815063]
[-134.59202576 -111.06880188]
[-136.25706482 -126.78513336]
[-126.25647736 -139.02293396]
[-110.52341461 -140.52172852]
[-98.39203644 -130.39230347]
[-97.05966949 -114.64427948]
[-85.44465637 -105.15261841]
[-73.82965088 -95.66095734]
[-59.08170700 -97.40272522]
[-47.16722488 -87.94229889]
[-45.44029236 -72.46148682]
[-33.82528305 -62.96982956]
[-22.21027565 -53.47817230]
[-10.59526634 -43.98651123]
[4.15587902 -41.92424011]
[9.94583321 -27.20055008]
[21.56084061 -17.70889091]
[35.21948624 -23.90900803]
[35.72071075 -38.90063095]
[36.22193527 -53.89225769]
[36.72315979 -68.88388062]
[37.22438431 -83.87550354]
[28.17772484 -99.90363312]
[38.00579071 -114.43218994]
[38.25643921 -129.43009949]
[38.50708771 -144.42799377]
[27.34128571 -155.61283875]
[27.43828773 -171.41682434]
[38.74054718 -182.46374512]
[54.54262924 -182.19966125]
[65.46943665 -170.78123474]
[65.03829956 -154.98283386]
[53.50499344 -144.17735291]
[53.25434494 -129.17944336]
[53.00369644 -114.18154144]
[61.19076157 -105.25963593]
[61.09269714 -92.74993134]
[52.21600723 -83.37427521]
[51.71478271 -68.38265228]
[51.21355820 -53.39102936]
[50.71233368 -38.39940643]
[50.21110916 -23.40778351]
[53.44410706 -8.76033688]
[60.20925903 4.62744617]
[66.97441101 18.01522827]
[73.73956299 31.40301132]
[80.50471497 44.79079437]
[87.26986694 58.17857742]
[94.03501892 71.56636047]
[100.80017090 84.95413971]
[110.29182434 96.56915283]
[122.06381989 105.86539459]
[133.83581543 115.16164398]
[149.46136475 117.64207458]
[154.65452576 131.60202026]
[166.42651367 140.89826965]
[178.19851685 150.19451904]
[189.97050476 159.49076843]
[201.74249268 168.78701782]
[216.60739136 164.74464417]
[230.83596802 170.16693115]
[239.04627991 182.77862549]
[238.26531982 197.62881470]
[250.03730774 206.92506409]
[261.80929565 216.22131348]
[273.58129883 225.51754761]
[285.35327148 234.81379700]
[297.12527466 244.11004639]
[309.27523804 252.90653992]
[321.78198242 261.18792725]
[334.28875732 269.46929932]
[346.79550171 277.75067139]
[365.18746948 278.44253540]
[372.41323853 294.42559814]
[385.05661011 302.49682617]
[397.70001221 310.56805420]
[410.34338379 318.63928223]
[423.05377197 326.60461426]
[435.83026123 334.46343994]
[451.02096558 331.01672363]
[463.86621094 339.16873169]
[467.05850220 353.67199707]
[479.83499146 361.53082275]
[494.12652588 355.78121948]
[508.89068604 359.50588989]
[518.51678467 371.07318115]
[519.47430420 385.91302490]
[532.25079346 393.77188110]
[546.54473877 387.73342896]
[561.65039062 391.28277588]
[571.75939941 403.05511475]
[572.98455811 418.52377319]
[564.85479736 431.74066162]
[550.49621582 437.62368774]
[535.42993164 433.91067505]
[525.44921875 422.02938843]
[524.39190674 406.54837036]
[511.61544800 398.68951416]
[497.93875122 404.52786255]
[483.27325439 401.15335083]
[473.29016113 389.65591431]
[471.97613525 374.30731201]
[459.19964600 366.44848633]
[444.81546021 370.14041138]
[431.74633789 362.35244751]
[427.97140503 347.23992920]
[415.19494629 339.38110352]
[407.83572388 338.55297852]
[402.27215576 331.28268433]
[389.62878418 323.21145630]
[376.98538208 315.14019775]
[364.34201050 307.06896973]
[352.45324707 309.36804199]
[341.84927368 302.73040771]
[338.51412964 290.25741577]
[326.00735474 281.97604370]
[313.50061035 273.69467163]
[300.99386597 265.41329956]
[301.26318359 280.41085815]
[289.81561279 290.10382080]
[275.06765747 287.36563110]
[267.86233521 274.20950317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 131]
[4 130]
[5 129]
[6 128]
[10 124]
[11 123]
[12 122]
[13 121]
[14 120]
[16 118]
[17 117]
[18 116]
[20 39]
[21 38]
[22 37]
[24 34]
[25 33]
[26 32]
[45 115]
[46 114]
[47 113]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 82]
[54 81]
[56 79]
[57 78]
[58 77]
[59 76]
[62 73]
[63 72]
[64 71]
[83 107]
[84 106]
[85 105]
[86 104]
[87 103]
[89 100]
[90 99]
[91 98]
[134 183]
[135 182]
[136 181]
[137 180]
[139 177]
[140 176]
[141 175]
[142 174]
[143 172]
[144 171]
[147 168]
[148 167]
[152 163]
[153 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
