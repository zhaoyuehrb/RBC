%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGAUCAUUAGUCCUAAGCCCAUUCAGAGGUUCAAGAAUGGGGUCGGCUCAAUUUCAGGGCCUUAUUACCCAAGCCCGGCUGCCCUUCGGUGCCACCAGCACCACUGCUCCGUCGCUGCGGAAUUCCAAAGGCAGGU\
) } def
/len { sequence length } bind def

/coor [
[90.55099487 128.25950623]
[81.01886749 123.79103851]
[73.45528412 116.15247345]
[68.89595795 106.17280579]
[68.03852844 95.01167297]
[53.15101624 96.84523773]
[38.26350403 98.67881012]
[33.30714035 113.07310486]
[22.63606644 123.84413910]
[8.40487480 128.89323425]
[-6.54585123 127.26940918]
[-19.25650215 119.34799957]
[-27.23431396 106.74562073]
[-42.12182617 108.57918549]
[-57.00933838 110.41275787]
[-71.89685059 112.24632263]
[-76.50152588 123.96704865]
[-85.62226868 132.54434204]
[-97.46549988 136.37655640]
[-109.73830414 134.78689575]
[-120.09231567 128.14201355]
[-126.57305908 117.76985168]
[-141.52746582 118.93841553]
[-156.48188782 120.10697174]
[-171.43629456 121.27552795]
[-186.39071655 122.44408417]
[-201.34512329 123.61264038]
[-216.29954529 124.78119659]
[-222.84693909 138.67462158]
[-235.47300720 147.41978455]
[-250.78140259 148.66429138]
[-264.65423584 142.07336426]
[-273.35977173 129.41995239]
[-274.55627441 114.10773468]
[-267.92190552 100.25563049]
[-255.24127197 91.58979034]
[-239.92538452 90.44127655]
[-226.09414673 97.11903381]
[-217.46809387 109.82678223]
[-202.51368713 108.65822601]
[-187.55926514 107.48966980]
[-172.60485840 106.32111359]
[-157.65043640 105.15255737]
[-142.69602966 103.98400116]
[-127.74161530 102.81544495]
[-119.28105927 87.38710022]
[-103.13648987 80.00547028]
[-85.62731934 83.76511383]
[-73.73042297 97.35881042]
[-58.84290695 95.52524567]
[-43.95539474 93.69167328]
[-29.06788445 91.85810852]
[-24.38635254 77.69657898]
[-13.97762299 66.92774963]
[0.13230459 61.72477341]
[15.16333294 63.16988754]
[28.12902069 71.02978516]
[36.42993546 83.79129791]
[51.31744766 81.95772552]
[66.20495605 80.12416077]
[76.14217377 68.88797760]
[76.14217377 53.88797760]
[76.14217377 38.88797760]
[76.14217377 23.88797569]
[62.36830521 17.31201172]
[52.81837845 5.40564203]
[49.38853836 -9.46711636]
[52.75978470 -24.35326767]
[62.26274872 -36.29715347]
[76.01061249 -42.92730713]
[91.27373505 -42.92730713]
[105.02159882 -36.29715347]
[114.52456665 -24.35326767]
[117.89581299 -9.46711636]
[114.46597290 5.40564203]
[104.91604614 17.31201172]
[91.14217377 23.88797569]
[91.14217377 38.88797760]
[91.14217377 53.88797760]
[91.14217377 68.88797760]
[109.53265381 70.87250519]
[122.85275269 82.23255920]
[127.18483734 98.17044830]
[141.85006714 101.32180786]
[156.51528931 104.47315979]
[171.18052673 107.62451935]
[185.84574890 110.77587891]
[196.34735107 93.19379425]
[214.21932983 81.77937317]
[236.03222656 79.49050903]
[257.24609375 87.45417786]
[273.15533447 104.59511566]
[287.48184204 100.15097809]
[301.80838013 95.70684814]
[316.13491821 91.26271057]
[330.46145630 86.81858063]
[339.17752075 73.34973145]
[355.15585327 71.90998840]
[366.13922119 83.60379791]
[363.70214844 99.46066284]
[349.71414185 107.31655884]
[334.90560913 101.14511871]
[320.57907104 105.58924866]
[306.25253296 110.03338623]
[291.92599487 114.47751617]
[277.59945679 118.92165375]
[276.59979248 126.35473633]
[291.35620117 123.66246796]
[298.47653198 136.86479187]
[288.12054443 147.71621704]
[274.60049438 141.22090149]
[273.60083008 148.65397644]
[286.24423218 156.72520447]
[298.88760376 164.79644775]
[311.53100586 172.86767578]
[324.17437744 180.93891907]
[340.57241821 181.12850952]
[348.37030029 195.55505371]
[339.54620361 209.37776184]
[323.17761230 208.37702942]
[316.10314941 193.58230591]
[303.45974731 185.51106262]
[290.81637573 177.43983459]
[278.17300415 169.36859131]
[265.52960205 161.29736328]
[254.37519836 169.83064270]
[241.54791260 174.92857361]
[228.05824280 176.32971191]
[214.93194580 174.05844116]
[203.13224792 168.41357422]
[193.48898315 159.93643188]
[186.64059448 149.36160278]
[182.99244690 137.55450439]
[182.69439697 125.44110870]
[168.02915955 122.28974915]
[153.36393738 119.13838959]
[138.69871521 115.98703003]
[124.03347778 112.83567810]
[118.58521271 120.78730774]
[110.54731750 126.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 60]
[6 59]
[7 58]
[13 52]
[14 51]
[15 50]
[16 49]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[61 80]
[62 79]
[63 78]
[64 77]
[83 138]
[84 137]
[85 136]
[86 135]
[87 134]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
