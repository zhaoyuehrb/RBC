%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAUCAUCCCACUACCACCAUGCUGGCCUCAGGGAUGCUUCUGGUGGCCUUGCUGGUCUGCCUGACUGUAAUGGUCUUGAUGUCUGUUUGGCAGCAGAGGAAGAGCAAGGGGAAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[-25.46092606 265.40130615]
[-36.28892517 275.78179932]
[-50.65595627 280.09323120]
[-65.41033173 277.38980103]
[-77.31537628 268.26455688]
[-83.75949860 254.71934509]
[-83.32904053 239.72550964]
[-76.11713409 226.57086182]
[-90.01199341 232.22178650]
[-103.90685272 237.87269592]
[-117.80171204 243.52362061]
[-131.69657898 249.17453003]
[-133.76536560 265.52230835]
[-143.71142578 278.54278564]
[-158.76669312 284.76705933]
[-174.81828308 282.59637451]
[-187.53198242 272.71163940]
[-201.27673340 278.71844482]
[-215.02148438 284.72525024]
[-220.55233765 299.53018188]
[-234.96635437 306.01181030]
[-249.71195984 300.32473755]
[-256.04083252 285.84301758]
[-250.19819641 271.15835571]
[-235.65036011 264.98294067]
[-221.02830505 270.98049927]
[-207.28353882 264.97369385]
[-193.53878784 258.96688843]
[-192.90145874 245.26138306]
[-186.36743164 233.12138367]
[-175.17172241 224.96264648]
[-161.48329163 222.43687439]
[-147.98492432 226.09748840]
[-137.34748840 235.27967834]
[-123.45263672 229.62875366]
[-109.55777740 223.97784424]
[-95.66291809 218.32691956]
[-81.76805878 212.67599487]
[-68.80998230 205.12031555]
[-57.04818344 195.81117249]
[-45.28638840 186.50202942]
[-33.52458954 177.19288635]
[-21.76279259 167.88374329]
[-10.00099659 158.57460022]
[-24.16033554 153.62353516]
[-29.36573029 139.55570984]
[-21.83948708 126.58051300]
[-7.04360008 124.11439514]
[4.28416300 133.94708252]
[3.92256641 148.94349670]
[16.78228569 141.22160339]
[29.64200592 133.49971008]
[42.50172424 125.77781677]
[55.36144257 118.05592346]
[68.22116089 110.33403015]
[81.08087921 102.61213684]
[84.69197845 88.57981110]
[97.11405945 81.12071228]
[111.19722748 84.52814484]
[124.05694580 76.80625153]
[136.91665649 69.08435822]
[140.83068848 56.71311951]
[151.79856873 50.56568909]
[163.61256409 53.49103928]
[176.66685486 46.10281754]
[189.72113037 38.71459579]
[195.73677063 31.67985725]
[203.20802307 31.30915833]
[216.44819641 24.25950813]
[229.68838501 17.20985603]
[242.92855835 10.16020584]
[255.98284912 2.77198434]
[268.84255981 -4.94990778]
[281.70227051 -12.67179966]
[294.56201172 -20.39369202]
[307.42172241 -28.11558342]
[307.78836060 -43.53858948]
[316.45401001 -56.30221176]
[330.65350342 -62.33361816]
[345.85583496 -59.70821762]
[357.20999146 -49.26375961]
[361.09289551 -34.33303452]
[356.26553345 -19.68038368]
[344.26831055 -9.98141289]
[328.92947388 -8.33102894]
[315.14361572 -15.25586414]
[302.28390503 -7.53397226]
[289.42416382 0.18791975]
[276.56445312 7.90981197]
[263.70474243 15.63170338]
[261.68157959 20.07750893]
[256.78082275 23.24155235]
[249.97821045 23.40038681]
[236.73803711 30.45003891]
[223.49784851 37.49969101]
[210.25767517 44.54933929]
[197.10934448 51.76887512]
[184.05506897 59.15709686]
[171.00079346 66.54531860]
[162.99687195 82.10565948]
[144.63854980 81.94407654]
[131.77883911 89.66596985]
[118.91912079 97.38786316]
[115.30802155 111.42018890]
[102.88594055 118.87928772]
[88.80277252 115.47185516]
[75.94305420 123.19374847]
[63.08333588 130.91564941]
[50.22361755 138.63752747]
[37.36389542 146.35942078]
[24.50417709 154.08131409]
[11.64445877 161.80320740]
[-0.69185418 170.33641052]
[-12.45365143 179.64555359]
[-24.21544838 188.95468140]
[-35.97724533 198.26382446]
[-47.73904419 207.57296753]
[-59.50083923 216.88211060]
[-44.50220490 217.08451843]
[-31.24085808 224.09428406]
[-22.62593842 236.37365723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[17 28]
[18 27]
[19 26]
[39 118]
[40 117]
[41 116]
[42 115]
[43 114]
[44 113]
[50 112]
[51 111]
[52 110]
[53 109]
[54 108]
[55 107]
[56 106]
[59 103]
[60 102]
[61 101]
[64 99]
[65 98]
[66 97]
[68 96]
[69 95]
[70 94]
[71 93]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
