%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCCCAGCUGCUUGCUCUCAGCUGCAGUUCUCUGAUGGCUUGCACAGGGUGGACCAGCCCCCUUCCUCUAUGUGUGUGUCUGCUGCUGACCUGUGGCUUUGCCGAGGCAGGGAAGCUACUGGUAGUGCCCAUGG\
) } def
/len { sequence length } bind def

/coor [
[114.21978760 229.01315308]
[99.31946564 227.28677368]
[86.26690674 219.89552307]
[77.12178802 208.00573730]
[73.32721710 193.49363708]
[75.48196411 178.64920044]
[83.24533844 165.81564331]
[87.63198853 151.47140503]
[76.90534973 161.95658875]
[66.17870331 172.44177246]
[55.45206070 182.92695618]
[44.72541809 193.41213989]
[33.99877548 203.89733887]
[36.38473129 219.22987366]
[29.27283096 233.02119446]
[15.39774132 239.96824646]
[0.09472047 237.39974976]
[-10.75190830 226.30334473]
[-12.97139454 210.94581604]
[-5.71030188 197.23245239]
[8.23933315 190.43634033]
[23.51358986 193.17068481]
[34.24023438 182.68550110]
[44.96687317 172.20031738]
[55.69351578 161.71513367]
[66.42015839 151.22994995]
[77.14680481 140.74475098]
[70.85915375 127.12618256]
[55.92130280 128.49020386]
[40.98344803 129.85423279]
[27.90516663 139.74819946]
[12.90491009 133.12065125]
[11.41365528 116.78945160]
[24.96547890 107.55472565]
[39.61942673 114.91637421]
[54.55727768 113.55235291]
[69.49513245 112.18833160]
[70.40113831 98.61975861]
[76.49139404 87.96015930]
[85.58323669 81.83123016]
[80.56004333 67.69731903]
[75.53684998 53.56340408]
[61.54308319 46.72145844]
[56.65019226 32.31610489]
[63.25918198 19.01734924]
[58.23598480 4.88343525]
[53.21279144 -9.25047874]
[48.18959808 -23.38439178]
[43.16640472 -37.51830673]
[36.87875748 -51.13687897]
[29.37875557 -64.12725830]
[21.87875557 -77.11763763]
[14.81606197 -83.04848480]
[14.35974407 -90.49019623]
[7.15739059 -103.64793396]
[-7.77483940 -109.51377106]
[-12.36094570 -124.88735962]
[-3.08285904 -137.97538757]
[12.94206524 -138.73785400]
[23.42087746 -126.58985138]
[20.31513023 -110.85028839]
[27.51748276 -97.69254303]
[34.86913681 -84.61763763]
[42.36913681 -71.62725830]
[49.86913681 -58.63687897]
[53.47214508 -73.19772339]
[64.83181763 -82.99353027]
[79.76419067 -84.41632843]
[92.76940155 -76.94207764]
[99.05740356 -63.32366562]
[96.31221771 -48.57700729]
[85.54494476 -38.13355255]
[70.72135162 -35.83980560]
[57.30031586 -42.54150009]
[62.32351303 -28.40758705]
[67.34670258 -14.27367306]
[72.36990356 -0.13975881]
[77.39309692 13.99415493]
[90.91244507 20.13929749]
[96.20802307 34.40153885]
[89.67076874 48.54021072]
[94.69396210 62.67412567]
[99.71715546 76.80803680]
[127.47615814 94.49764252]
[112.27896881 130.46849060]
[126.96523285 133.52033997]
[136.09265137 132.19866943]
[141.94932556 136.81242371]
[156.56230164 140.19776917]
[171.17529297 143.58312988]
[185.78828430 146.96849060]
[194.94342041 145.85493469]
[200.69354248 150.60079956]
[215.22567749 154.31791687]
[230.51278687 150.24174500]
[240.92572021 160.89161682]
[255.45785522 164.60873413]
[269.98999023 168.32585144]
[284.52212524 172.04296875]
[299.05426025 175.76008606]
[313.58639526 179.47720337]
[328.11856079 183.19432068]
[342.65069580 186.91143799]
[351.82879639 186.00657654]
[357.46939087 190.88211060]
[371.91317749 194.92906189]
[385.56457520 186.96572876]
[400.82702637 191.06852722]
[408.64556885 204.80335999]
[404.38162231 220.02159119]
[390.56491089 227.69450378]
[375.39260864 223.26989746]
[367.86621094 209.37281799]
[353.42245483 205.32586670]
[338.93356323 201.44357300]
[324.40142822 197.72645569]
[309.86929321 194.00935364]
[295.33715820 190.29223633]
[280.80502319 186.57511902]
[266.27288818 182.85800171]
[251.74073792 179.14088440]
[237.20860291 175.42376709]
[222.96093750 179.76580811]
[211.50856018 168.85005188]
[196.97642517 165.13293457]
[182.40292358 161.58146667]
[167.78993225 158.19612122]
[153.17695618 154.81076050]
[138.56396484 151.42539978]
[123.91339111 148.20660400]
[109.22712708 145.15475464]
[120.65240479 154.87396240]
[134.10882568 161.50152588]
[143.92327881 172.84510803]
[148.54701233 187.11470032]
[147.25041199 202.05854797]
[140.23809814 215.31854248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[28 37]
[29 36]
[30 35]
[40 83]
[41 82]
[42 81]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 65]
[51 64]
[52 63]
[54 62]
[55 61]
[85 131]
[86 130]
[88 129]
[89 128]
[90 127]
[91 126]
[93 125]
[94 124]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
