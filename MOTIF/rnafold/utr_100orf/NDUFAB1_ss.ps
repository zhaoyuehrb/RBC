%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:32:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGUGCAUCCUGGGUUGGCGUAGCCAUGGCGUCUCGUGUCCUUUCAGCCUAUGUCAGCCGCCUGCCCGCGGCCUUUGCGCCGCUGCCCCGGGUCCGGAUGCUGGCCGUGGCCCGGCCUCUCAGCA\
) } def
/len { sequence length } bind def

/coor [
[223.68640137 170.57791138]
[210.34626770 163.71928406]
[197.00614929 156.86064148]
[183.66601562 150.00201416]
[170.32588196 143.14337158]
[156.98574829 136.28474426]
[139.57810974 138.12623596]
[129.65097046 122.67411804]
[116.14778900 116.14235687]
[106.34025574 121.93463135]
[94.95487976 122.26821899]
[84.82503510 117.06010437]
[78.47165680 107.60639954]
[77.47585297 96.25975037]
[64.30668640 89.07830048]
[51.13752747 81.89685059]
[37.96836472 74.71540833]
[24.79920387 67.53395844]
[8.97908974 67.71986389]
[1.50959063 54.83359909]
[-11.65957069 47.65215302]
[-24.82873344 40.47070312]
[-37.99789429 33.28925705]
[-44.77358246 33.06326675]
[-49.63192368 29.86975861]
[-51.62093353 25.42399216]
[-64.42482758 17.60988617]
[-71.18148041 17.05427170]
[-75.87857819 13.62801170]
[-77.64877319 9.09067631]
[-90.05703735 0.66244698]
[-102.46529388 -7.76578188]
[-114.87355804 -16.19401169]
[-127.28181458 -24.62224007]
[-139.69007874 -33.05046844]
[-153.50354004 -26.48269272]
[-168.64974976 -27.70286179]
[-181.06907654 -36.28347015]
[-187.48304749 -49.83769226]
[-186.25961304 -64.68251801]
[-198.66787720 -73.11074829]
[-214.14253235 -69.89972687]
[-227.30926514 -78.64115143]
[-230.35650635 -94.14888763]
[-221.47634888 -107.22247314]
[-205.93727112 -110.10557556]
[-192.95829773 -101.08770752]
[-190.23965454 -85.51900482]
[-177.83139038 -77.09077454]
[-164.48260498 -83.69954681]
[-149.51860046 -82.73291779]
[-136.96461487 -74.35057068]
[-130.24778748 -60.72041321]
[-131.26185608 -45.45873260]
[-118.85359192 -37.03050232]
[-106.44532776 -28.60227203]
[-94.03706360 -20.17404366]
[-81.62880707 -11.74581432]
[-69.22054291 -3.31758547]
[-56.61072540 4.80599070]
[-43.80682755 12.62009525]
[-30.81644821 20.12009621]
[-17.64728546 27.30154228]
[-4.47812414 34.48299026]
[8.69103718 41.66443634]
[23.56920433 40.96486664]
[31.98065186 54.36479950]
[45.14981461 61.54624557]
[58.31897354 68.72769165]
[71.48813629 75.90914154]
[84.65729523 83.09058380]
[101.61917877 77.22490692]
[117.58061981 85.43124390]
[122.67954254 102.63916779]
[136.18273926 109.17092133]
[148.66741943 105.67215729]
[159.81246948 111.47116852]
[163.84437561 122.94461060]
[177.18450928 129.80323792]
[190.52464294 136.66188049]
[203.86477661 143.52050781]
[217.20491028 150.37915039]
[230.54504395 157.23777771]
[248.86050415 155.87405396]
[257.85989380 170.88830566]
[271.36309814 177.42005920]
[284.86630249 183.95181274]
[298.36947632 190.48358154]
[316.83508301 182.81700134]
[334.78131104 190.92529297]
[341.03851318 209.28010559]
[354.98248291 214.80876160]
[368.92642212 220.33741760]
[382.87039185 225.86608887]
[396.81433105 231.39474487]
[410.75830078 236.92340088]
[424.70223999 242.45207214]
[438.71249390 247.81053162]
[452.78695679 252.99800110]
[466.86138916 258.18548584]
[480.34481812 250.26518250]
[495.75613403 252.91581726]
[505.81854248 264.88586426]
[505.78091431 280.52340698]
[495.66101074 292.44485474]
[480.23715210 295.02133179]
[466.79199219 287.03622437]
[461.67391968 272.25991821]
[447.59948730 267.07244873]
[433.52502441 261.88497925]
[426.08410645 262.53036499]
[419.17358398 256.39602661]
[405.22964478 250.86735535]
[391.28567505 245.33869934]
[377.34173584 239.81004333]
[363.39776611 234.28137207]
[349.45382690 228.75271606]
[335.50985718 223.22406006]
[327.38565063 229.78454590]
[317.17880249 232.34745789]
[306.75924683 230.37287903]
[298.06546021 224.15869141]
[292.74398804 214.79786682]
[291.83773804 203.98677063]
[278.33453369 197.45501709]
[264.83132935 190.92324829]
[251.32815552 184.39149475]
[239.73709106 188.07165527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[8 75]
[9 74]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[20 65]
[21 64]
[22 63]
[23 62]
[26 61]
[27 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[40 49]
[41 48]
[85 127]
[86 126]
[87 125]
[88 124]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
