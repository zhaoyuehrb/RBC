%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCGGCGGCUGCGCGCGCUGGAGCAGCUGGCGCGGGGCGAGGCCGGCGGCUGCCCGGGGCUCGACGGCCUCCUAGAUCUGCUGCUGGCGCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[77.01699066 357.22348022]
[85.24347687 343.03695679]
[84.77697754 328.04421997]
[76.64760590 315.56372070]
[83.95198059 301.52960205]
[83.48548126 286.53686523]
[83.01898193 271.54412842]
[82.55248260 256.55136108]
[74.42311096 244.07087708]
[81.72748566 230.03675842]
[81.26098633 215.04400635]
[80.79448700 200.05126953]
[80.32798767 185.05851746]
[72.19861603 172.57803345]
[79.50299072 158.54391479]
[79.03649139 143.55116272]
[78.56999207 128.55842590]
[68.73106384 117.23607635]
[53.95003510 114.68242645]
[39.16900635 112.12876892]
[24.38797569 109.57511902]
[9.60694599 107.02146912]
[-5.17408419 104.46781158]
[-19.95511436 101.91416168]
[-34.73614502 99.36050415]
[-48.62199783 107.39559174]
[-63.50865936 101.41504669]
[-67.97635651 86.00663757]
[-58.59785080 72.99036407]
[-42.56753540 72.35121155]
[-32.18249130 84.57947540]
[-17.40146065 87.13312531]
[-2.62043118 89.68678284]
[12.16059875 92.24043274]
[26.94162941 94.79409027]
[41.72266006 97.34774017]
[56.50368881 99.90139771]
[71.28472137 102.45504761]
[82.37205505 80.81675720]
[103.93348694 77.04934692]
[111.09428406 63.86894989]
[112.48679352 54.65734863]
[118.68827057 50.39506149]
[126.25551605 37.44373703]
[133.82275391 24.49240875]
[141.38999939 11.54108429]
[148.95724487 -1.41024148]
[156.52449036 -14.36156750]
[164.09173584 -27.31289291]
[164.37312317 -43.13159561]
[177.47438049 -50.21726227]
[185.04161072 -63.16859055]
[192.40652466 -76.23603058]
[199.56732178 -89.41643524]
[206.72811890 -102.59683228]
[202.00363159 -117.67843628]
[209.40113831 -131.64454651]
[224.53184509 -136.20933533]
[238.41896057 -128.66458130]
[242.82351685 -113.48645782]
[235.13237000 -99.67987823]
[219.90852356 -95.43603516]
[212.74772644 -82.25563812]
[205.58692932 -69.07523346]
[205.15209961 -61.56281662]
[197.99293518 -55.60134506]
[190.42570496 -42.65002060]
[190.68556213 -27.75768280]
[177.04306030 -19.74564934]
[169.47581482 -6.79432440]
[161.90856934 6.15700150]
[154.34132385 19.10832787]
[146.77407837 32.05965424]
[139.20684814 45.01097870]
[131.63960266 57.96230316]
[124.27468872 71.02974701]
[117.11389160 84.21015167]
[122.96632385 92.34736633]
[124.99984741 102.55631256]
[122.53826141 113.06781769]
[115.71338654 121.92593384]
[105.49532318 127.35098267]
[93.56273651 128.09191895]
[94.02923584 143.08467102]
[94.49573517 158.07740784]
[102.65847778 171.63027954]
[95.32073212 184.59202576]
[95.78723145 199.58476257]
[96.25373077 214.57751465]
[96.72023010 229.57025146]
[104.88297272 243.12312317]
[97.54522705 256.08486938]
[98.01172638 271.07760620]
[98.47822571 286.07037354]
[98.94472504 301.06311035]
[107.10746765 314.61596680]
[99.76972198 327.57772827]
[100.23622131 342.57046509]
[109.32875824 356.21807861]
[101.81431580 370.79428101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[5 95]
[6 94]
[7 93]
[8 92]
[10 90]
[11 89]
[12 88]
[13 87]
[15 85]
[16 84]
[17 83]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[40 77]
[41 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[51 67]
[52 66]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
