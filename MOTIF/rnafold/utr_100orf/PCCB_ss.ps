%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACAUGCGUACUCAGGUGCGCCGGUAGGGGACGCGCCGGCACAGCAAAAAUGGCGGCGGCAUUACGGGUGGCGGCGGUCGGGGCAAGGCUCAGCGUUCUGGCGAGCGGUCUCCGCGCCGCGGUCCGCAGCCUUUGCAGCCAGGCCACCU\
) } def
/len { sequence length } bind def

/coor [
[121.94264221 141.09468079]
[106.94316864 141.22093201]
[96.73323059 130.23197937]
[97.95983124 115.28262329]
[88.99324799 127.30760956]
[91.07196045 142.74511719]
[81.80726624 154.81243896]
[67.07715607 156.69903564]
[58.11056519 168.72402954]
[49.14398193 180.74900818]
[40.17739487 192.77400208]
[31.21080780 204.79898071]
[22.24422073 216.82397461]
[20.86635017 233.16513062]
[5.91245127 239.89662170]
[-7.23418474 230.09367371]
[-5.04942703 213.84069824]
[10.21923351 207.85739136]
[19.18581963 195.83239746]
[28.15240669 183.80741882]
[37.11899185 171.78242493]
[46.08557892 159.75743103]
[55.05216599 147.73245239]
[52.65730286 133.07638550]
[61.57939529 120.75360870]
[76.96826172 118.34102631]
[85.93484497 106.31604004]
[72.22682190 112.40619659]
[59.32292938 104.75834656]
[58.08420181 89.80958557]
[69.55326080 80.14207458]
[84.07681274 83.89288330]
[73.25327301 73.50775146]
[62.42972946 63.12262344]
[54.01436234 59.40708542]
[51.49261475 52.40925598]
[40.88601303 41.80265427]
[30.27940941 31.19605255]
[19.67280769 20.58945084]
[9.06620598 9.98285007]
[-6.16308689 5.69575214]
[-9.69152927 -8.77488613]
[-20.29813194 -19.38148689]
[-30.90473366 -29.98808861]
[-43.07284164 -25.45821953]
[-56.00277710 -25.88762856]
[-67.75803375 -31.17638016]
[-76.59156799 -40.49943161]
[-81.20543671 -52.43514252]
[-80.94139862 -65.18197632]
[-75.87461853 -76.83041382]
[-86.03384399 -87.86627197]
[-96.19306183 -98.90213013]
[-104.36202240 -103.13198853]
[-106.44530487 -110.27262878]
[-116.37428284 -121.51609039]
[-132.08488464 -126.21809387]
[-135.60433960 -142.23513794]
[-123.31213379 -153.09025574]
[-107.85342407 -147.61663818]
[-105.13082123 -131.44506836]
[-95.20184326 -120.20160675]
[-85.15720367 -109.06135559]
[-74.99798584 -98.02549744]
[-64.83876038 -86.98963928]
[-48.24228668 -91.37187958]
[-31.61680794 -86.75774384]
[-19.52913475 -74.32188416]
[-15.34632587 -57.40006256]
[-20.29813194 -40.59469223]
[-9.69152927 -29.98808861]
[0.91507226 -19.38148689]
[15.38570976 -15.85304451]
[19.67280769 -0.62375170]
[30.27940941 9.98285007]
[40.88601303 20.58945084]
[51.49261475 31.19605255]
[62.09921646 41.80265427]
[72.81485748 52.29908371]
[83.63839722 62.68421173]
[94.46194458 73.06934357]
[119.70892334 91.08325958]
[134.65768433 92.32195282]
[149.61845398 93.40609741]
[164.58963013 94.33557129]
[179.56080627 95.26505280]
[191.34762573 85.08130646]
[206.51728821 86.23720551]
[216.15328979 97.53688812]
[231.12446594 98.46636963]
[246.09564209 99.39585114]
[261.06680298 100.32533264]
[267.24047852 97.68699646]
[272.94717407 98.48898315]
[276.63348389 101.61521912]
[291.55343628 103.16259003]
[306.47341919 104.70996094]
[314.12081909 95.50953674]
[325.15817261 91.21488953]
[336.77438354 92.79470062]
[346.07116699 99.73711395]
[350.78601074 110.20710754]
[365.62927246 112.36972046]
[380.47256470 114.53234100]
[391.29934692 107.44645691]
[403.65176392 109.59420776]
[410.96627808 119.27832031]
[425.76171875 121.74724579]
[440.55712891 124.21616364]
[455.35253906 126.68508148]
[463.89068604 119.81888580]
[474.58215332 118.84127808]
[483.83593750 123.83607483]
[488.67840576 132.92149353]
[503.35913086 135.99972534]
[518.03991699 139.07795715]
[532.72064209 142.15618896]
[549.46350098 139.48896790]
[556.66131592 154.83911133]
[543.90362549 166.00502014]
[529.64239502 156.83694458]
[514.96166992 153.75871277]
[500.28091431 150.68048096]
[485.60015869 147.60224915]
[467.77667236 155.00404358]
[452.88363647 141.48049927]
[438.08822632 139.01158142]
[423.29278564 136.54266357]
[408.49737549 134.07374573]
[392.45462036 141.12016296]
[378.30996704 129.37562561]
[363.46667480 127.21300507]
[348.62338257 125.05039215]
[334.69592285 136.85984802]
[316.23626709 134.76673889]
[304.92605591 119.62993622]
[290.00607300 118.08256531]
[275.08609009 116.53519440]
[260.13732910 115.29650879]
[245.16616821 114.36702728]
[230.19499207 113.43754578]
[215.22381592 112.50806427]
[204.26411438 122.52906799]
[189.06797791 121.79971313]
[178.63133240 110.23622894]
[163.66015625 109.30674744]
[148.68898010 108.37726593]
[141.77442932 111.11914062]
[133.41900635 107.27071381]
[118.47023773 106.03202820]
[130.48788452 115.00845337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 27]
[5 26]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[32 81]
[33 80]
[34 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[42 72]
[43 71]
[44 70]
[51 65]
[52 64]
[53 63]
[55 62]
[56 61]
[82 150]
[83 149]
[84 147]
[85 146]
[86 145]
[89 142]
[90 141]
[91 140]
[92 139]
[95 138]
[96 137]
[97 136]
[102 133]
[103 132]
[104 131]
[107 129]
[108 128]
[109 127]
[110 126]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
