%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCAGUCGCCUCCUCCGCAGAGCCUCCUCGGCCACGACCACUGGAUCUUCGCCCAGGGCUGGGGCUGGGCCGGCCACUGGGACUCCACGUCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[201.51377869 251.63883972]
[195.88497925 239.50140381]
[198.36639404 226.15533447]
[188.52746582 214.83299255]
[178.68853760 203.51065063]
[168.84960938 192.18830872]
[159.01068115 180.86595154]
[149.17175293 169.54360962]
[139.33282471 158.22126770]
[129.49389648 146.89892578]
[119.65496063 135.57658386]
[112.77030945 132.53897095]
[109.69279480 123.74571228]
[100.21074677 112.12285614]
[90.37181854 100.80050659]
[80.18552399 89.78963470]
[69.99922943 78.77875519]
[59.81293869 67.76787567]
[44.25534439 66.99385071]
[34.08185196 55.68214798]
[34.91564178 40.85513306]
[24.72934723 29.84425545]
[9.67820930 24.96841431]
[6.71492577 10.37155819]
[-3.47136736 -0.63932008]
[-13.65766048 -11.65019798]
[-26.60469055 -12.96598434]
[-34.86335373 -22.49588585]
[-34.35705566 -34.69267273]
[-44.19598389 -46.01501846]
[-54.03491211 -57.33736420]
[-64.72367096 -67.86116791]
[-76.19766235 -77.52281952]
[-87.67164612 -87.18447876]
[-103.90280151 -89.52579498]
[-109.73866272 -104.85141754]
[-99.17580414 -117.39566040]
[-83.08038330 -114.25408173]
[-78.00999451 -98.65846252]
[-66.53600311 -88.99681091]
[-55.06201553 -79.33515167]
[-52.57894516 -79.66769409]
[-49.81491852 -79.08503723]
[-47.09598923 -77.48063660]
[-44.77912521 -74.85949707]
[-43.21548843 -71.34536743]
[-42.71257019 -67.17629242]
[-32.87364197 -55.85394669]
[-23.03471184 -44.53160477]
[-6.20947647 -39.81854248]
[-2.64678240 -21.83649063]
[7.53951073 -10.82561302]
[17.72580338 0.18526475]
[32.04835129 4.27353334]
[35.74022675 19.65796089]
[45.92651749 30.66883850]
[60.77349854 30.98938751]
[71.26070404 42.01087570]
[70.82381439 57.58158112]
[81.01010895 68.59246063]
[91.19640350 79.60334015]
[101.38269043 90.61421967]
[106.63282013 92.03347778]
[110.64427948 96.37229156]
[111.83360291 102.64080811]
[121.31565094 114.26366425]
[130.97731018 125.73765564]
[140.81623840 137.05999756]
[150.65516663 148.38233948]
[160.49409485 159.70468140]
[170.33302307 171.02702332]
[180.17195129 182.34936523]
[190.01087952 193.67172241]
[199.84980774 204.99406433]
[209.68873596 216.31640625]
[227.07611084 217.16616821]
[238.31576538 230.01719666]
[236.89877319 246.69447327]
[247.08506775 257.70535278]
[258.18322754 257.51388550]
[267.31311035 263.42797852]
[271.50106812 273.22671509]
[269.54873657 283.47680664]
[279.03076172 295.09967041]
[288.51281738 306.72250366]
[297.99487305 318.34536743]
[307.47692871 329.96823120]
[323.22872925 333.01129150]
[330.54269409 347.29013062]
[323.80819702 361.85122681]
[308.19134521 365.52459717]
[295.67205811 355.49230957]
[295.85406494 339.45028687]
[286.37200928 327.82742310]
[276.88995361 316.20455933]
[267.40792847 304.58169556]
[257.92587280 292.95886230]
[239.44384766 287.64587402]
[236.07418823 267.89163208]
[225.88789368 256.88076782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[13 66]
[14 65]
[15 62]
[16 61]
[17 60]
[18 59]
[21 56]
[22 55]
[24 53]
[25 52]
[26 51]
[29 49]
[30 48]
[31 47]
[32 41]
[33 40]
[34 39]
[78 100]
[79 99]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
