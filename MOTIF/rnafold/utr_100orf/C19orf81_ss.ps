%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGCCAGAGGUGGAGCCCGUGUGCUUCCCUGCCAUGGGCAGCCCCACCAUGCACAGGAAGGCAGGAGCCCUCCUUAUGGACCUGGAGACCCCAGAGG\
) } def
/len { sequence length } bind def

/coor [
[75.31643677 197.90901184]
[60.87984848 201.98146057]
[45.93258667 200.72471619]
[32.37868500 194.29885864]
[21.94467354 183.52243042]
[15.95966911 169.76815796]
[15.18605995 154.78811646]
[19.72239113 140.49050903]
[28.99081039 128.69659424]
[41.81068039 120.90872192]
[56.54896545 118.11893463]
[71.32603455 120.68178558]
[56.97616959 116.31356812]
[47.67257690 116.79917908]
[42.25180435 111.57991791]
[28.04473114 106.76752472]
[10.17244911 110.84533691]
[-0.99052733 97.40325928]
[-15.34039307 93.03504181]
[-29.69025803 88.66681671]
[-44.04012299 84.29859924]
[-58.38999176 79.93038177]
[-72.73985291 75.56215668]
[-87.08972168 71.19393921]
[-96.39331055 71.67955017]
[-101.81408691 66.46028900]
[-116.02115631 61.64789963]
[-130.07827759 68.87097168]
[-145.09989929 63.95909500]
[-152.17395020 49.82638931]
[-147.10353088 34.85754395]
[-132.89682007 27.93330765]
[-117.98242188 33.16170883]
[-111.20877075 47.44082642]
[-97.00170135 52.25321198]
[-82.72150421 56.84407043]
[-68.37163544 61.21229172]
[-54.02177048 65.58051300]
[-39.67190552 69.94873047]
[-25.32203865 74.31695557]
[-10.97217274 78.68517303]
[3.37769341 83.05339813]
[14.30845451 77.61865234]
[26.37735176 81.27464294]
[32.85711670 92.56045532]
[47.06418991 97.37284088]
[61.34438705 101.96369934]
[75.69425201 106.33192444]
[86.91050720 82.05296326]
[110.34437561 83.69490814]
[122.66870880 75.14442444]
[134.99304199 66.59394073]
[147.31738281 58.04345322]
[159.64172363 49.49296951]
[162.00219727 44.43574905]
[165.75488281 41.22595215]
[169.90843201 40.08460999]
[173.53700256 40.78349304]
[186.60444641 33.41858292]
[199.67189026 26.05367279]
[212.73933411 18.68876076]
[220.96257019 5.17250919]
[235.84906006 5.66394281]
[248.91650391 -1.70096827]
[261.98394775 -9.06587982]
[269.86001587 -23.44988060]
[286.25888062 -23.55043983]
[294.31076050 -9.26411152]
[285.73260498 4.71255541]
[269.34887695 4.00156403]
[256.28143311 11.36647511]
[243.21397400 18.73138618]
[235.92541504 31.72084999]
[220.10424805 31.75620461]
[207.03680420 39.12111664]
[193.96936035 46.48602676]
[180.90191650 53.85093689]
[168.19219971 61.81730652]
[155.86785889 70.36779022]
[143.54353333 78.91827393]
[131.21919250 87.46875763]
[118.89485931 96.01924133]
[119.87413788 107.50910187]
[113.85577393 118.58454895]
[101.80070496 125.05234528]
[110.54182434 137.24221802]
[119.28293610 149.43208313]
[128.02404785 161.62194824]
[143.55619812 165.63841248]
[149.96832275 180.34432983]
[142.34159851 194.45860291]
[126.52658081 197.15394592]
[114.65521240 186.36274719]
[115.83418274 170.36306763]
[107.09307098 158.17320251]
[98.35195160 145.98332214]
[89.61083984 133.79345703]
[96.77981567 146.96940613]
[98.86508942 161.82376099]
[95.60101318 176.46430969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 48]
[13 47]
[15 46]
[16 45]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[26 35]
[27 34]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[58 77]
[59 76]
[60 75]
[61 74]
[63 72]
[64 71]
[65 70]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
