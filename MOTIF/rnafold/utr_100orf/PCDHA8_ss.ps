%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUAUCACUGGCGAGGAGAGCUGGGAUCCUGGCGACUACUACUCUUGCUUCUGCUCCUCGCAGCCUGGAAGGUGGGGAGCGGCCAGCUCCACUACU\
) } def
/len { sequence length } bind def

/coor [
[62.88371658 310.83999634]
[55.60183716 324.06408691]
[45.02134705 334.83236694]
[31.92739296 342.34573364]
[17.29162598 346.04669189]
[2.20012331 345.66055298]
[-12.22722816 341.21597290]
[-24.91982269 333.04281616]
[-34.93578720 321.74755859]
[-41.53186798 308.16836548]
[-44.21858978 293.31292725]
[-42.79658508 278.28359985]
[-37.37137604 264.19567871]
[-28.34554672 252.09457397]
[-16.38887215 242.87825012]
[-2.38862109 237.23063660]
[12.61629772 235.57081604]
[27.51241875 238.02197266]
[33.83994293 224.42189026]
[28.50824928 210.56155396]
[34.73152161 196.67900085]
[49.30565643 191.18060303]
[55.63318253 177.58050537]
[61.96070862 163.98042297]
[68.28823090 150.38034058]
[74.61576080 136.78024292]
[80.94328308 123.18015289]
[87.27081299 109.58007050]
[75.05061340 118.27873230]
[60.15203094 116.53736115]
[50.26724625 105.25502777]
[50.49978638 90.25682831]
[60.72959137 79.28636932]
[75.67499542 78.00771332]
[87.62072754 87.08278656]
[81.71922302 73.29249573]
[75.81771851 59.50219727]
[69.91621399 45.71190262]
[64.01470947 31.92160606]
[48.78481293 29.46115875]
[37.31810379 19.14039993]
[33.27356339 4.25264454]
[37.94179153 -10.45147705]
[49.83317184 -20.27993393]
[65.15321350 -22.09650040]
[79.01334381 -15.32151794]
[86.99084473 -2.11685824]
[86.54012299 13.30391979]
[77.80500793 26.02010155]
[83.70651245 39.81039810]
[89.60801697 53.60069275]
[95.50951385 67.39099121]
[101.41101837 81.18128204]
[105.75316620 86.20854187]
[107.22647095 91.68669891]
[121.43354797 86.87431335]
[135.64062500 82.06192780]
[149.84768677 77.24953461]
[164.05476379 72.43714905]
[178.26184082 67.62476349]
[192.46891785 62.81237793]
[206.67599487 57.99999237]
[220.88305664 53.18760300]
[235.09013367 48.37521744]
[249.29721069 43.56283188]
[252.22460938 28.48550224]
[262.31060791 16.90238571]
[276.84207153 11.92928410]
[291.91015625 14.90393543]
[303.46160889 25.02617455]
[308.38912964 39.57316971]
[305.36724854 54.63185120]
[295.20886230 66.15151215]
[280.64648438 71.03341675]
[265.59735107 67.96436310]
[254.10958862 57.76990509]
[239.90252686 62.58229065]
[225.69544983 67.39467621]
[211.48837280 72.20706177]
[197.28129578 77.01945496]
[183.07423401 81.83184052]
[168.86715698 86.64422607]
[154.66007996 91.45661163]
[140.45300293 96.26899719]
[126.24593353 101.08138275]
[112.03886414 105.89376831]
[100.87089539 115.90759277]
[94.54337311 129.50767517]
[88.21585083 143.10777283]
[81.88832092 156.70785522]
[75.56079865 170.30795288]
[69.23326874 183.90803528]
[62.90574646 197.50813293]
[68.08719635 212.19793701]
[61.47644806 225.90022278]
[47.44003296 230.74940491]
[41.11250687 244.34950256]
[52.58222198 254.16520691]
[60.97739792 266.71206665]
[65.67506409 281.05899048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 97]
[19 96]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[65 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
