%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUCCCGUCUCCCACCCGCCGGAGAUGGAGGCGAACCCAGCGGGCAGCGGCGCCGGGGGUGGCGGGAGCAGCGGCAUCGGGGGCGAGGACGGGGUGCACUUCCAGAGCUACCCCUUCGACUUCC\
) } def
/len { sequence length } bind def

/coor [
[107.51522827 127.53293610]
[85.52830505 121.35655212]
[73.86722565 130.79154968]
[62.20614243 140.22654724]
[50.54506302 149.66154480]
[38.88398361 159.09654236]
[27.22290230 168.53153992]
[22.45330620 176.45088196]
[15.15470409 178.05139160]
[3.26382208 187.19508362]
[-8.62705994 196.33876038]
[-20.51794243 205.48243713]
[-32.40882492 214.62612915]
[-44.29970551 223.76980591]
[-43.74292755 239.27688599]
[-52.43523026 252.13082886]
[-67.03424072 257.38900757]
[-81.92634583 253.02955627]
[-91.38523102 240.72877502]
[-91.77375031 225.21655273]
[-82.94252014 212.45768738]
[-68.28732300 207.35818481]
[-53.44338989 211.87892151]
[-41.55250549 202.73524475]
[-29.66162491 193.59156799]
[-17.77074242 184.44787598]
[-5.87986040 175.30419922]
[6.01102161 166.16052246]
[17.78790283 156.87046814]
[29.44898415 147.43547058]
[41.11006546 138.00047302]
[52.77114487 128.56546021]
[64.43222809 119.13047028]
[76.09330750 109.69547272]
[72.16384125 98.98643494]
[73.17241669 86.77250671]
[79.62559509 75.36595917]
[90.94563293 67.20217133]
[80.80797577 56.14649582]
[70.67032623 45.09081650]
[55.64083099 40.14867020]
[52.74192429 25.53889084]
[42.60427475 14.48321342]
[32.46662140 3.42753577]
[17.06576729 5.32314348]
[3.50835061 -2.22510505]
[-2.99252677 -16.31475449]
[0.06285560 -31.52804565]
[11.49964142 -42.01515961]
[26.92015266 -43.74358749]
[40.39488983 -36.04870987]
[46.74253845 -21.88936806]
[43.52230072 -6.71011639]
[53.65995026 4.34556150]
[63.79760361 15.40123940]
[78.10198975 19.55261040]
[81.72600555 34.95316315]
[91.86365509 46.00884247]
[102.00130463 57.06451797]
[116.67094421 53.93374634]
[121.41194153 39.70269012]
[126.15293121 25.47163391]
[130.89393616 11.24057770]
[127.91503143 -4.29765797]
[139.27836609 -13.92699337]
[144.01934814 -28.15805054]
[135.67773438 -41.38497543]
[137.84100342 -56.87220383]
[149.48773193 -67.30714417]
[165.11866760 -67.76273346]
[177.35339355 -58.02385712]
[180.41502380 -42.68891525]
[172.85795593 -28.99860001]
[158.25041199 -23.41705513]
[153.50941467 -9.18599892]
[156.82742310 5.33433580]
[145.12498474 15.98157120]
[140.38398743 30.21262741]
[135.64299011 44.44368362]
[130.90200806 58.67473984]
[137.02563477 72.36784363]
[150.79344177 78.32165527]
[164.56123352 84.27546692]
[178.32902527 90.22927856]
[192.09681702 96.18309784]
[205.93719482 101.96617126]
[219.84803772 107.57762146]
[233.75888062 113.18907166]
[247.66972351 118.80052948]
[253.05169678 118.02738190]
[257.69180298 119.33401489]
[260.90454102 122.06336212]
[262.37875366 125.37850189]
[275.83526611 132.00590515]
[289.29177856 138.63330078]
[302.74829102 145.26069641]
[316.20480347 151.88809204]
[329.74224854 158.34854126]
[343.35855103 164.64108276]
[359.13156128 163.40670776]
[367.43896484 175.76939392]
[381.05529785 182.06192017]
[397.96978760 183.21788025]
[401.54141235 199.79135132]
[386.60433960 207.81137085]
[374.76275635 195.67823792]
[361.14645386 189.38571167]
[346.34738159 191.07015991]
[337.06604004 178.25738525]
[323.44970703 171.96485901]
[315.97787476 172.01536560]
[309.57739258 165.34460449]
[296.12091064 158.71720886]
[282.66439819 152.08979797]
[269.20788574 145.46240234]
[255.75137329 138.83500671]
[242.05827332 132.71138000]
[228.14743042 127.09992218]
[214.23658752 121.48846436]
[200.32572937 115.87701416]
[192.86552429 116.29696655]
[186.14300537 109.95088959]
[172.37521362 103.99707794]
[158.60740662 98.04325867]
[144.83961487 92.08944702]
[131.07182312 86.13563538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[38 59]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
[60 80]
[61 79]
[62 78]
[63 77]
[65 75]
[66 74]
[81 126]
[82 125]
[83 124]
[84 123]
[85 122]
[86 120]
[87 119]
[88 118]
[89 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 110]
[99 109]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
