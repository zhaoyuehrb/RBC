%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAUAAGGCUUGGAAGCCAGCAGCUGCGACUCCCGAGACCCCCCCACCAGAAGGCCAUGGUCUCCCCACGGAUGUCCGGGCUCCUCUCCCAGACUGUGAUCCUAGCGCUCAUUUUCCUCCCCCAGACACGGCCCGCUGGCGUCUUCGAGCUGCAGA\
) } def
/len { sequence length } bind def

/coor [
[122.76181793 257.75091553]
[122.28945923 272.74349976]
[115.57160187 286.15505981]
[103.84748840 295.51162720]
[89.27986908 299.08715820]
[74.55603027 296.22210693]
[62.39207840 287.44497681]
[55.03189087 274.37484741]
[53.83279037 259.42587280]
[45.70052719 272.03009033]
[37.56826019 284.63430786]
[29.43599510 297.23852539]
[29.16713715 313.63546753]
[14.70305920 321.36349487]
[0.92316657 312.47268677]
[2.00303030 296.10913086]
[16.83177948 289.10623169]
[24.96404457 276.50201416]
[33.09630966 263.89782715]
[41.22857666 251.29359436]
[41.45073700 241.40812683]
[49.84740067 234.08503723]
[55.07042694 220.02374268]
[60.29344940 205.96244812]
[65.51647186 191.90115356]
[70.73950195 177.83985901]
[75.96252441 163.77856445]
[75.34024811 156.37384033]
[81.43014526 149.49275208]
[86.92996216 135.53739929]
[92.42977905 121.58203888]
[82.76985931 133.05749512]
[67.78218079 133.66545105]
[57.22454834 123.01011658]
[57.97054672 108.02867126]
[69.53449249 98.47487640]
[84.38725281 100.56852722]
[70.97537994 93.85125732]
[57.56351089 87.13398743]
[44.15163803 80.41671753]
[30.73976707 73.69944763]
[17.32789612 66.98217773]
[2.44536686 74.96637726]
[-14.10227871 72.55024719]
[-25.84530640 60.87789917]
[-28.31133461 44.67307663]
[-41.85330200 38.22209549]
[-56.00362778 44.87809372]
[-71.10850525 40.83127213]
[-80.03586578 27.99241829]
[-78.57049561 12.42364597]
[-67.40428162 1.47605276]
[-51.80958176 0.31875822]
[-39.14973068 9.49820137]
[-35.40232468 24.68013000]
[-21.86035728 31.13110733]
[-10.74513054 23.68268967]
[2.70790100 22.70480156]
[14.97914124 28.56087303]
[22.80488777 39.81230927]
[24.04516602 53.57030487]
[37.45703888 60.28757477]
[50.86890793 67.00484467]
[64.28077698 73.72211456]
[77.69264984 80.43938446]
[91.10452271 87.15665436]
[84.23218536 73.82357025]
[89.44079590 59.75693130]
[103.33925629 54.11487961]
[116.87891388 60.57070160]
[121.24471283 74.92130280]
[113.59464264 87.82340240]
[127.38088989 81.91246033]
[141.16714478 76.00151062]
[154.95339966 70.09056854]
[168.73965454 64.17962646]
[182.52589417 58.26868057]
[196.31214905 52.35773468]
[209.97892761 46.17556763]
[223.52088928 39.72458649]
[237.06286621 33.27360916]
[250.60482788 26.82263184]
[264.14678955 20.37165451]
[277.68875122 13.92067623]
[283.21121216 -2.65133929]
[298.69436646 -9.98204231]
[314.38327026 -3.99127102]
[327.79516602 -10.70854092]
[341.20703125 -17.42580986]
[342.21560669 -32.68785477]
[350.67218018 -45.31255341]
[364.22247314 -51.96511459]
[379.18316650 -50.94879150]
[391.54321289 -42.63644409]
[404.95507812 -49.35371399]
[410.20700073 -68.69535828]
[427.68170166 -77.87477875]
[446.01599121 -71.42426300]
[459.00637817 -78.92426300]
[471.99676514 -86.42426300]
[484.98712158 -93.92426300]
[485.61846924 -109.33870697]
[494.50195312 -121.95169067]
[508.80288696 -127.73845673]
[523.95788574 -124.85247040]
[535.13110352 -114.21464539]
[538.75714111 -99.21945953]
[533.67895508 -84.65184021]
[521.51702881 -75.16024780]
[506.15209961 -73.77341461]
[492.48712158 -80.93388367]
[479.49676514 -73.43388367]
[466.50637817 -65.93388367]
[453.51599121 -58.43388367]
[453.62213135 -48.07812881]
[449.36141968 -38.55003738]
[441.45046997 -31.61795807]
[431.28997803 -28.59922600]
[420.71688843 -30.11020470]
[411.67236328 -35.94184113]
[398.26049805 -29.22457123]
[397.51443481 -14.34811401]
[389.36807251 -1.75872433]
[375.92514038 5.10813189]
[360.75036621 4.31909227]
[347.92428589 -4.01393938]
[334.51242065 2.70333052]
[321.10055542 9.42059994]
[318.77203369 22.12507439]
[309.39999390 31.29367638]
[296.26260376 33.40480804]
[284.13973999 27.46264267]
[270.59777832 33.91362000]
[257.05581665 40.36460114]
[243.51383972 46.81557846]
[229.97187805 53.26655579]
[216.42990112 59.71753311]
[214.00466919 63.88798141]
[208.90832520 66.55102539]
[202.22309875 66.14398956]
[188.43684387 72.05493164]
[174.65058899 77.96587372]
[160.86433411 83.87682343]
[147.07809448 89.78776550]
[133.29183960 95.69870758]
[119.50558472 101.60965729]
[106.38513184 127.08185577]
[100.88531494 141.03721619]
[95.38549805 154.99256897]
[90.02381897 169.00158691]
[84.80079651 183.06288147]
[79.57776642 197.12417603]
[74.35474396 211.18547058]
[69.13172150 225.24676514]
[63.90869522 239.30805969]
[76.60105133 231.31404114]
[91.47604370 229.38153076]
[105.78968811 233.86701965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 20]
[10 19]
[11 18]
[12 17]
[22 155]
[23 154]
[24 153]
[25 152]
[26 151]
[27 150]
[29 149]
[30 148]
[31 147]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[46 56]
[47 55]
[72 146]
[73 145]
[74 144]
[75 143]
[76 142]
[77 141]
[78 140]
[79 137]
[80 136]
[81 135]
[82 134]
[83 133]
[84 132]
[87 128]
[88 127]
[89 126]
[94 121]
[95 120]
[98 114]
[99 113]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
