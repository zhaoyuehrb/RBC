%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAGGUUGGAGCAGAGAAAGAGGAAACAUAGAGGUGCCAAAGGAACAAAGACAUAAUGAUGUCAUCCAAGCCAACAAGCCAUGCUGAAGUAAAUGAAACCAUACCCAACCCUUACCCACCAAGCAGCUUUAUGGCUCCUGGAUUUCAACAGCCUC\
) } def
/len { sequence length } bind def

/coor [
[44.57441330 714.80834961]
[28.79823494 713.86621094]
[18.37164879 701.98925781]
[19.48056602 686.22393799]
[31.46708488 675.92346191]
[32.36131287 660.95019531]
[33.25553894 645.97686768]
[34.14976501 631.00354004]
[35.04399109 616.03021240]
[35.93822098 601.05688477]
[27.23417664 595.44073486]
[21.62734032 586.63446045]
[20.19946861 576.21099854]
[23.27856445 566.06616211]
[30.36669350 558.07354736]
[40.21915817 553.73864746]
[42.00443268 538.84521484]
[43.78970337 523.95184326]
[45.57497787 509.05847168]
[34.54526520 499.08435059]
[31.46728516 484.35375977]
[37.72658539 470.47302246]
[51.11382294 462.85147095]
[52.89909363 447.95809937]
[54.68436813 433.06472778]
[56.46963882 418.17132568]
[47.09267807 406.65576172]
[48.69103622 391.52633667]
[60.83319473 381.76898193]
[62.61846924 366.87561035]
[64.40373993 351.98223877]
[66.18901825 337.08883667]
[67.97428894 322.19546509]
[69.75955963 307.30209351]
[71.54483032 292.40869141]
[65.37730408 278.85101318]
[74.70207977 266.06982422]
[76.48735809 251.17643738]
[78.27262878 236.28305054]
[65.12184143 226.93647766]
[58.42617035 212.15466309]
[60.09247971 195.91868591]
[69.76145172 182.65359497]
[84.87982178 176.02247620]
[86.36862946 161.09654236]
[65.73657990 154.87362671]
[47.81676865 141.68055725]
[34.95659256 122.66584778]
[29.02731133 99.76281738]
[31.16485786 75.49567413]
[41.58829117 52.70161819]
[59.52242661 34.19937134]
[48.60424423 23.91378403]
[37.68606186 13.62819672]
[26.76787949 3.34260964]
[15.84969807 -6.94297743]
[-0.22589424 -10.18448448]
[-5.19930410 -25.81129646]
[6.04568624 -37.74788666]
[21.94119453 -33.71491623]
[26.13528442 -17.86116028]
[37.05346680 -7.57557249]
[47.97164917 2.71001434]
[58.88983154 12.99560165]
[69.80801392 23.28118896]
[76.90798950 20.86450958]
[72.07463074 6.66455698]
[67.24127197 -7.53539562]
[62.40791702 -21.73534775]
[57.57455826 -35.93529892]
[48.58975601 -47.94668198]
[57.23682022 -60.20344543]
[71.56578064 -55.76712418]
[71.77451324 -40.76865768]
[76.60787201 -26.56870651]
[81.44122314 -12.36875343]
[86.27458191 1.83119881]
[91.10794067 16.03115082]
[98.20791626 13.61447239]
[100.58388519 -1.19615793]
[102.95986176 -16.00678825]
[99.49874115 -32.60368347]
[114.48889160 -40.52402115]
[126.24938202 -28.31225777]
[117.77049255 -13.63081741]
[115.39451599 1.17981243]
[113.01854706 15.99044228]
[119.64609528 19.50123405]
[126.66767883 6.24614573]
[129.24957275 -8.52997684]
[144.10035706 -10.64049435]
[150.69670105 2.83126307]
[139.92276001 13.26772881]
[132.90118408 26.52281761]
[139.52873230 30.03360939]
[150.44691467 19.74802208]
[161.36509705 9.46243477]
[165.55917358 -6.39132357]
[181.45468140 -10.42429352]
[192.69967651 1.51229858]
[187.72627258 17.13911057]
[171.65068054 20.38061714]
[160.73249817 30.66620445]
[149.81431580 40.95178986]
[158.42601013 51.07234573]
[165.06492615 62.37527084]
[169.58407593 74.48799133]
[171.90505981 87.02307892]
[172.01872253 99.59060669]
[169.98355103 111.81023407]
[165.92219543 123.32272339]
[160.01591492 133.80050659]
[152.49737549 142.95697021]
[143.64199829 150.55426025]
[133.75831604 156.40928650]
[123.17736053 160.39790344]
[112.24171448 162.45713806]
[101.29455566 162.58534241]
[99.80574799 177.51127625]
[111.59625244 185.09263611]
[118.92489624 196.96403503]
[120.40476990 210.76998901]
[115.80287170 223.79998779]
[106.07458496 233.52066040]
[93.16600800 238.06832886]
[91.38073730 252.96170044]
[89.59546661 267.85510254]
[95.63529968 282.47805786]
[86.43821716 294.19396973]
[84.65293884 309.08737183]
[82.86766815 323.98074341]
[81.08239746 338.87411499]
[79.29712677 353.76748657]
[77.51184845 368.66088867]
[75.72657776 383.55426025]
[85.21865082 395.90490723]
[83.19596863 410.98348999]
[71.36302185 419.95660400]
[69.57775116 434.84997559]
[67.79247284 449.74337769]
[66.00720215 464.63674927]
[77.21385956 475.20639038]
[80.01519775 490.17321777]
[73.54292297 503.75900269]
[60.46835709 510.84375000]
[58.68308640 525.73712158]
[56.89781189 540.63049316]
[55.11254120 555.52386475]
[68.35876465 570.56274414]
[66.39302063 590.20239258]
[50.91154099 601.95111084]
[50.01731491 616.92443848]
[49.12308884 631.89776611]
[48.22885895 646.87109375]
[47.33463287 661.84442139]
[46.44040680 676.81768799]
[57.11578751 688.47155762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[16 148]
[17 147]
[18 146]
[19 145]
[23 141]
[24 140]
[25 139]
[26 138]
[29 135]
[30 134]
[31 133]
[32 132]
[33 131]
[34 130]
[35 129]
[37 127]
[38 126]
[39 125]
[44 119]
[45 118]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[79 87]
[80 86]
[81 85]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
