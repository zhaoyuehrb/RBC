%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGCGGCGGCGGCGGCGGCUCCGCUCCGCACUGCCCGGCGCCGCCUCGCCAUGGACGCGCGCGGGGGCGGCGGGCGGCCCGGGGAGAGCCCGGGCGCGACCCCCGCGCCGGGGCCGCCGCCGCCGCCGCCGCCCGCGCCCCCCCAACAGC\
) } def
/len { sequence length } bind def

/coor [
[181.08796692 436.51327515]
[177.75015259 421.88934326]
[174.41233826 407.26544189]
[170.92553711 392.67633057]
[167.29011536 378.12353516]
[163.65469360 363.57073975]
[159.87101746 349.05578613]
[155.93948364 334.58016968]
[152.00796509 320.10458374]
[148.07644653 305.62896729]
[144.14491272 291.15338135]
[140.21339417 276.67776489]
[136.28186035 262.20217896]
[132.35034180 247.72656250]
[128.41880798 233.25096130]
[124.48728943 218.77534485]
[120.55576324 204.29974365]
[116.62423706 189.82414246]
[112.69271088 175.34854126]
[108.76118469 160.87294006]
[104.82966614 146.39733887]
[100.89813995 131.92172241]
[87.70543671 129.47282410]
[76.68332672 121.82054138]
[69.77772522 110.31587982]
[68.20780945 96.98997498]
[72.25075531 84.19548035]
[61.32460785 73.91835785]
[50.39846039 63.64123154]
[39.47231293 53.36410522]
[28.54616737 43.08697891]
[12.97237682 43.39490891]
[2.03811169 32.81679535]
[1.84052265 17.96767044]
[-9.08562469 7.69054413]
[-20.01177216 -2.58658147]
[-30.93791771 -12.86370754]
[-41.86406326 -23.14083290]
[-52.79021072 -33.41795731]
[-63.71635818 -43.69508362]
[-79.06968689 -47.51423264]
[-83.03920746 -61.87014389]
[-93.96535492 -72.14727020]
[-104.89150238 -82.42439270]
[-115.81764984 -92.70152283]
[-131.17097473 -96.52066803]
[-135.14050293 -110.87657928]
[-146.06665039 -121.15370178]
[-161.41996765 -124.97285461]
[-165.38949585 -139.32876587]
[-176.31564331 -149.60589600]
[-187.24179077 -159.88301086]
[-202.18394470 -156.04432678]
[-216.82223511 -160.91505432]
[-226.48564148 -172.94094849]
[-228.09059143 -188.28460693]
[-221.12496948 -202.04991150]
[-207.81146240 -209.84440613]
[-192.39837646 -209.18089294]
[-179.80397034 -200.27111816]
[-174.04705811 -185.95812988]
[-176.96466064 -170.80915833]
[-166.03851318 -160.53202820]
[-155.11236572 -150.25491333]
[-140.54055786 -147.17085266]
[-135.78952026 -132.07984924]
[-124.86337280 -121.80272675]
[-110.29155731 -118.71866608]
[-105.54052734 -103.62767029]
[-94.61437988 -93.35054016]
[-83.68823242 -83.07341766]
[-72.76208496 -72.79628754]
[-58.19026566 -69.71222687]
[-53.43923187 -54.62123108]
[-42.51308823 -44.34410477]
[-31.58693886 -34.06697845]
[-20.66079330 -23.78985405]
[-9.73464584 -13.51272869]
[1.19150138 -3.23560262]
[12.11764812 7.04152298]
[26.95105934 6.33054495]
[38.17812729 16.59736443]
[38.82329178 32.16083145]
[49.74943924 42.43795776]
[60.67558670 52.71508408]
[71.60173035 62.99221039]
[82.52787781 73.26933289]
[93.09133911 68.82189941]
[104.54473114 68.39068604]
[115.41269684 72.03122711]
[124.29527283 79.27458191]
[137.67424011 72.49200439]
[151.05319214 65.70941925]
[164.43215942 58.92684555]
[173.24237061 45.78565598]
[188.09280396 46.93188095]
[201.47177124 40.14929962]
[214.85072327 33.36672211]
[228.22969055 26.58414268]
[241.60865784 19.80156517]
[254.98760986 13.01898575]
[261.32281494 -1.72023964]
[276.83377075 -5.81779289]
[289.62179565 3.86961818]
[289.87701416 19.91064072]
[277.40365601 29.99997520]
[261.77020264 26.39794731]
[248.39123535 33.18052673]
[235.01226807 39.96310425]
[221.63331604 46.74568558]
[208.25434875 53.52826309]
[194.87538147 60.31084061]
[187.02212524 72.96689606]
[171.21473694 72.30580902]
[157.83578491 79.08838654]
[144.45681763 85.87096405]
[131.07785034 92.65354156]
[129.18231201 112.96903229]
[115.37374115 127.99020386]
[119.30526733 142.46580505]
[123.23679352 156.94140625]
[127.16831970 171.41702271]
[131.09983826 185.89262390]
[135.03137207 200.36822510]
[138.96289062 214.84382629]
[142.89442444 229.31942749]
[146.82594299 243.79502869]
[150.75746155 258.27062988]
[154.68899536 272.74624634]
[158.62051392 287.22183228]
[162.55204773 301.69744873]
[166.48356628 316.17306519]
[170.41510010 330.64865112]
[174.34661865 345.12426758]
[179.64627075 352.63970947]
[178.20747375 359.93530273]
[181.84291077 374.48809814]
[185.47833252 389.04089355]
[190.62356567 396.66290283]
[189.03625488 403.92761230]
[192.37406921 418.55154419]
[195.71188354 433.17544556]
[210.60371399 436.52157593]
[222.56361389 446.00436401]
[229.21696472 459.74102783]
[229.24272156 475.00411987]
[222.63577271 488.76315308]
[210.70794678 498.28625488]
[195.82751465 501.68261719]
[180.94898987 498.27789307]
[169.02650452 488.74807739]
[162.42730713 474.98532104]
[162.46165466 459.72225952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 138]
[5 137]
[6 136]
[7 134]
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
[27 87]
[28 86]
[29 85]
[30 84]
[31 83]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[42 72]
[43 71]
[44 70]
[45 69]
[47 67]
[48 66]
[50 64]
[51 63]
[52 62]
[91 117]
[92 116]
[93 115]
[94 114]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
