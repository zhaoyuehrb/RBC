%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGGCCGUGCUGUUCCCGCCAAUUCCUGUGGUAAUCCUUACCGUGGCGAGUUCCGCGCUCAAUGGAGACGUUUGACCCCACCGAGCUGCCCGAGCUGCUUAAACUUUAUUACCGGAGGCUCUUUCCCUACUCUCAGUACUAUCGCUGGCUCAACUACGGUG\
) } def
/len { sequence length } bind def

/coor [
[209.79200745 630.83660889]
[218.89103699 618.68865967]
[231.76605225 610.65136719]
[228.92727661 595.92242432]
[226.08851624 581.19348145]
[223.24974060 566.46453857]
[220.41096497 551.73559570]
[217.57220459 537.00671387]
[202.71203613 522.71905518]
[209.85812378 502.54769897]
[206.18312073 488.00485229]
[202.50813293 473.46200562]
[198.83312988 458.91915894]
[195.15814209 444.37631226]
[191.48313904 429.83346558]
[175.23538208 430.42379761]
[159.24877930 427.42761230]
[144.30554199 420.98864746]
[131.13755798 411.41915894]
[120.39037323 399.18472290]
[112.59167480 384.88177490]
[108.12532043 369.20831299]
[107.21245575 352.92996216]
[109.90055847 336.84262085]
[116.06100464 321.73333740]
[125.39519501 308.34210205]
[137.44903564 297.32528687]
[151.63502502 289.22378540]
[147.13578796 274.91445923]
[142.63655090 260.60510254]
[131.43797302 250.78466797]
[134.67967224 235.29911804]
[130.18043518 220.98979187]
[125.68119812 206.68046570]
[121.18196106 192.37113953]
[116.68272400 178.06181335]
[112.18348694 163.75248718]
[107.68424988 149.44316101]
[93.42475891 149.60281372]
[79.69933319 145.73353577]
[67.62281036 138.14958191]
[58.17610168 127.46697235]
[52.12649536 114.55338287]
[49.96537399 100.45770264]
[51.86827087 86.32484436]
[57.68062210 73.30274200]
[66.93032837 62.44910049]
[78.86608887 54.64549637]
[74.64009857 40.25310135]
[70.41410828 25.86070633]
[64.97003174 18.46811485]
[66.24747467 11.15395451]
[62.29626846 -3.31628942]
[58.34506226 -17.78653336]
[54.39385223 -32.25677872]
[50.44264603 -46.72702026]
[37.06474304 -59.35005569]
[42.12992859 -76.13198090]
[37.90394211 -90.52437592]
[33.54113007 -104.87588501]
[29.04189491 -119.18521118]
[24.54265785 -133.49453735]
[20.04342270 -147.80386353]
[6.31113529 -155.15655518]
[1.95211184 -169.73234558]
[9.04640675 -182.77867126]
[4.54717016 -197.08799744]
[0.04793373 -211.39732361]
[-15.06417465 -213.53904724]
[-27.74568176 -222.03269958]
[-35.47866440 -235.19186401]
[-36.72773743 -250.40379333]
[-31.24489021 -264.64813232]
[-20.11875153 -275.09664917]
[-5.55842018 -279.67480469]
[9.54513645 -277.47360229]
[22.19309807 -268.93008423]
[29.87420082 -255.74055481]
[31.06335831 -240.52383423]
[25.52446175 -226.30119324]
[14.35726166 -215.89656067]
[18.85649872 -201.58723450]
[23.35573387 -187.27790833]
[36.63958740 -180.63902283]
[41.40629578 -166.19142151]
[34.35274887 -152.30310059]
[38.85198593 -137.99377441]
[43.35122299 -123.68444824]
[47.85046005 -109.37512207]
[52.87944794 -103.91269684]
[52.29633713 -94.75035858]
[56.52232361 -80.35797119]
[67.00592804 -74.26628876]
[70.62691498 -62.27469254]
[64.91288757 -50.67823029]
[68.86409760 -36.20798492]
[72.81530762 -21.73774147]
[76.76651001 -7.26749802]
[80.71772003 7.20274591]
[84.80650330 21.63471985]
[89.03249359 36.02711487]
[93.25848389 50.41950989]
[108.87794495 50.75717926]
[123.63190460 55.89550781]
[136.08200073 65.33355713]
[145.01448059 78.15122223]
[149.55853271 93.09890747]
[149.27114868 108.71937561]
[144.18034363 123.48979950]
[134.78242493 135.97021484]
[121.99357605 144.94392395]
[126.49281311 159.25325012]
[130.99205017 173.56257629]
[135.49128723 187.87190247]
[139.99052429 202.18122864]
[144.48976135 216.49055481]
[148.98899841 230.79988098]
[160.50938416 241.64384460]
[156.94587708 256.10589600]
[161.44511414 270.41522217]
[165.94435120 284.72454834]
[179.67271423 283.24087524]
[193.43293762 284.33743286]
[206.74446106 287.97424316]
[219.14270020 294.02267456]
[230.19529724 302.26995850]
[239.51710510 312.42663574]
[246.78373718 324.13677979]
[251.74273682 336.99044800]
[254.22241211 350.53802490]
[254.13780212 364.30593872]
[251.49349976 377.81326294]
[246.38349915 390.58843994]
[238.98786926 402.18582153]
[229.56634521 412.20117188]
[218.44927979 420.28576660]
[206.02598572 426.15847778]
[209.70098877 440.70132446]
[213.37597656 455.24417114]
[217.05097961 469.78701782]
[220.72596741 484.32986450]
[224.40097046 498.87271118]
[233.14321899 502.61553955]
[239.07408142 509.87182617]
[240.94612122 518.91375732]
[238.45938110 527.66290283]
[232.30113220 534.16790771]
[235.13990784 548.89685059]
[237.97866821 563.62579346]
[240.81744385 578.35473633]
[243.65620422 593.08361816]
[246.49497986 607.81256104]
[261.43490601 610.48901367]
[274.39706421 618.38500977]
[283.62847900 630.43261719]
[287.88064575 645.00256348]
[286.57852173 660.12438965]
[279.89819336 673.75292969]
[268.74310303 684.04510498]
[254.62190247 689.60888672]
[239.44436646 689.69195557]
[225.26313782 684.28295898]
[213.99609375 674.11346436]
[207.16703796 660.55883789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[10 142]
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[28 121]
[29 120]
[30 119]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[37 112]
[38 111]
[48 102]
[49 101]
[50 100]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[58 92]
[59 91]
[60 89]
[61 88]
[62 87]
[63 86]
[66 83]
[67 82]
[68 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
