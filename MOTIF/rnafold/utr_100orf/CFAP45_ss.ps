%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGUGUGGCUGAGGAGAUGCCACUAAGCACAGCUGGCAUCCUGAGCUCCUCUUCUGCCGCUUCCAACAGGUCAAGGAAUAAGGCUCGCUAUCGGACCAAAGCCGUGAGCUCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[71.43270874 108.73302460]
[86.01091003 105.20999146]
[71.16875458 103.03964233]
[56.32659912 100.86929321]
[41.48444366 98.69894409]
[32.41133118 100.56683350]
[26.28119850 96.27040863]
[11.50150585 93.70903015]
[-3.27818704 91.14765167]
[-18.05788040 88.58627319]
[-30.88783073 97.41973877]
[-45.84005356 94.61158752]
[-54.18234634 82.32575226]
[-68.96204376 79.76437378]
[-83.74172974 77.20299530]
[-98.52142334 74.64161682]
[-113.30111694 72.08023834]
[-128.23713684 70.69621277]
[-143.23582458 70.49821472]
[-158.23451233 70.30022430]
[-173.23321533 70.10222626]
[-188.23190308 69.90423584]
[-203.23060608 69.70623779]
[-218.22929382 69.50824738]
[-233.22929382 69.50824738]
[-248.22798157 69.70623779]
[-259.07388306 81.20154572]
[-274.87371826 81.57721710]
[-286.25369263 70.61038971]
[-286.46231079 54.80747604]
[-275.37576294 43.54407120]
[-259.57153320 43.50254822]
[-248.42597961 54.70754623]
[-233.42729187 54.50955200]
[-226.69618225 51.23387527]
[-218.03129578 54.50955200]
[-203.03260803 54.70754623]
[-188.03390503 54.90554047]
[-173.03521729 55.10353470]
[-158.03652954 55.30152893]
[-143.03782654 55.49952316]
[-128.03913879 55.69751740]
[-137.04855347 43.70458603]
[-135.18019104 28.82139969]
[-123.48596954 19.42750740]
[-108.54998779 20.81186676]
[-98.78151703 32.19505692]
[-99.68041229 47.16809845]
[-110.73973846 57.30054092]
[-95.96004486 59.86192322]
[-81.18035126 62.42330170]
[-66.40065765 64.98468018]
[-51.62096786 67.54605865]
[-39.63097000 58.78389359]
[-24.60577202 61.17095566]
[-15.49650002 73.80657959]
[-0.71680707 76.36795807]
[14.06288624 78.92933655]
[28.84257889 81.49071503]
[43.65479279 83.85678864]
[58.49694824 86.02713776]
[73.33910370 88.19748688]
[88.18125916 90.36783600]
[102.02043915 84.58188629]
[110.90116882 72.49335480]
[119.78189850 60.40481949]
[113.53565216 46.37342453]
[115.15790558 31.10044479]
[124.21227264 18.69423866]
[138.26318359 12.49200821]
[153.53099060 14.16212654]
[165.90876770 23.25533676]
[172.06692505 37.32561493]
[170.34895325 52.58812332]
[161.21697998 64.93732452]
[147.12747192 71.05134583]
[131.87042236 69.28554535]
[122.98970032 81.37408447]
[114.10897064 93.46261597]
[115.87424469 100.75190735]
[130.45288086 97.22158051]
[133.98298645 111.80027771]
[119.40480042 115.33049774]
[121.17007446 122.61978912]
[134.59751892 129.30586243]
[148.02497864 135.99194336]
[161.45242310 142.67800903]
[174.87986755 149.36408997]
[188.30732727 156.05017090]
[201.73477173 162.73623657]
[206.34411621 162.26177979]
[210.41702271 163.25527954]
[213.54028320 165.34536743]
[215.47389221 168.06114197]
[216.16870117 170.90116882]
[228.81661987 178.96530151]
[243.67683411 174.09619141]
[258.17089844 179.96615601]
[265.45513916 193.80355835]
[262.09017944 209.07479858]
[249.66485596 218.56929016]
[234.04600525 217.80400085]
[222.60838318 207.14027405]
[220.75248718 191.61322021]
[208.10456848 183.54908752]
[195.04869080 176.16369629]
[181.62124634 169.47761536]
[168.19380188 162.79153442]
[154.76634216 156.10546875]
[141.33889771 149.41938782]
[127.91144562 142.73330688]
[114.48400116 136.04724121]
[109.81057739 150.30062866]
[98.67459106 160.34999084]
[84.01784515 163.54057312]
[69.71224213 159.02949524]
[59.53692627 148.00846863]
[56.17993164 133.38894653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[7 59]
[8 58]
[9 57]
[10 56]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 34]
[26 33]
[64 79]
[65 78]
[66 77]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
