%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGACAAAUGAGGGUUUGGCAUGCAGCUCGUCAUCUUAAGAGUUACUAUCUUCUUGCCCUGGUGUUUCGCCGUUCCAGUGCCCCCUGCUGCAGACCAUAAAGGAUGGGACUUUGUUGAGG\
) } def
/len { sequence length } bind def

/coor [
[179.58190918 143.54304504]
[166.16461182 136.83663940]
[152.74729919 130.13023376]
[139.32998657 123.42382812]
[125.91268921 116.71742249]
[112.49538422 110.01101685]
[107.59237671 114.62583923]
[101.05502319 116.91415405]
[93.95933533 116.33378601]
[87.54142761 112.82904816]
[82.98223877 106.86678314]
[81.19133759 99.37916565]
[66.90180969 94.81744385]
[52.61227798 90.25572205]
[38.32274628 85.69400024]
[24.03321648 81.13227081]
[7.66096544 90.47722626]
[-10.07678509 85.09835815]
[-18.21847916 68.79946136]
[-32.72389221 64.97939301]
[-41.94186020 65.81875610]
[-47.55114365 60.86971664]
[-61.95338821 56.67743301]
[-76.35563660 52.48514938]
[-94.06749725 57.31673431]
[-105.77027130 44.30782318]
[-120.27568817 40.48775482]
[-134.78109741 36.66768646]
[-149.28651428 32.84762192]
[-163.79193115 29.02755547]
[-174.54847717 39.99078751]
[-189.34982300 44.09148788]
[-204.21447754 40.22659683]
[-215.14393616 29.43574715]
[-219.19822693 14.62162113]
[-215.28675842 -0.23085351]
[-204.46170044 -11.12643623]
[-189.63494873 -15.13426971]
[-174.79479980 -11.17626762]
[-163.93321228 -0.31711188]
[-159.97186279 14.52213860]
[-145.46644592 18.34220505]
[-130.96102905 22.16227341]
[-116.45561981 25.98233986]
[-101.95020294 29.80240631]
[-91.27074432 23.96482849]
[-79.09892273 27.11636162]
[-72.16335297 38.08290100]
[-57.76110458 42.27518463]
[-43.35885620 46.46746826]
[-28.90382767 50.47397614]
[-14.39841175 54.29404449]
[-5.90798616 46.46780014]
[5.43571520 43.73681259]
[16.79011536 46.90619278]
[25.25093079 55.28716278]
[28.59493828 66.84274292]
[42.88446808 71.40446472]
[57.17399979 75.96618652]
[71.46353149 80.52790833]
[85.75305939 85.08963013]
[99.08290863 78.21103668]
[103.64463043 63.92150497]
[108.20635223 49.63197327]
[112.76807404 35.34244156]
[111.82503510 18.41474342]
[127.83013153 12.82250214]
[137.63447571 26.65402794]
[127.05760956 39.90416336]
[122.49588776 54.19369507]
[117.93416595 68.48322296]
[113.37244415 82.77275848]
[119.20178986 96.59371185]
[132.61909485 103.30011749]
[146.03640747 110.00652313]
[159.45370483 116.71292877]
[172.87101746 123.41933441]
[186.28831482 130.12574768]
[192.95904541 126.03880310]
[200.57919312 124.60243225]
[208.14454651 125.95617676]
[214.67573547 129.87512207]
[219.34490967 135.80552673]
[221.58070374 142.94262695]
[221.13772583 150.33967590]
[233.58288574 158.71333313]
[246.02804565 167.08699036]
[258.93295288 162.98901367]
[271.64483643 167.04943848]
[279.54968262 177.55740356]
[279.91592407 190.50621033]
[292.14135742 199.19754028]
[304.36679077 207.88885498]
[316.59219360 216.58016968]
[328.81762695 225.27148438]
[341.36956787 233.48420715]
[354.22927856 241.20610046]
[367.08901978 248.92799377]
[379.94873047 256.64990234]
[395.79971313 254.17497253]
[407.51971436 265.13040161]
[406.11813354 281.11212158]
[392.67013550 289.86029053]
[377.49188232 284.66412354]
[372.22683716 269.50961304]
[359.36712646 261.78771973]
[346.50738525 254.06582642]
[333.64767456 246.34393311]
[330.05270386 246.90693665]
[326.00460815 245.67939758]
[322.38476562 242.46786499]
[320.12631226 237.49690247]
[307.90087891 228.80558777]
[295.67547607 220.11427307]
[283.45004272 211.42295837]
[271.22460938 202.73164368]
[254.83663940 206.26275635]
[240.65438843 196.70855713]
[237.65438843 179.53213501]
[225.20922852 171.15847778]
[212.76406860 162.78482056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[19 52]
[20 51]
[22 50]
[23 49]
[24 48]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[62 72]
[63 71]
[64 70]
[65 69]
[85 121]
[86 120]
[87 119]
[91 116]
[92 115]
[93 114]
[94 113]
[95 112]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
