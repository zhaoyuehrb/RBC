%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUAUUGGGCCCACCUGCCUGGGUUCCAGCAGCUUCCGCAGCCCCAGCAGGAGACGGAAGAUGCAAGAGGUCAUUGCGGGGCUAGAGCGGUUCACCUUUGCCUUCGAGAAGGAUGUCGAGAUGCAGAAGGGCACUGGGCUCCUGCCUUUCCAGGGCAUGG\
) } def
/len { sequence length } bind def

/coor [
[87.70854187 126.50435638]
[78.11603546 138.03620911]
[68.52352142 149.56806946]
[70.14636993 160.38429260]
[65.61670685 170.09709167]
[56.66282272 175.57554626]
[46.39282990 175.20285034]
[36.36303329 186.35646057]
[26.33323669 197.51008606]
[16.30344200 208.66371155]
[6.27364683 219.81732178]
[-3.64819980 231.06707764]
[-13.46117592 242.41192627]
[-23.27415085 253.75675964]
[-33.08712769 265.10162354]
[-31.69601822 280.84454346]
[-41.90820312 292.90634155]
[-57.66497803 294.13095093]
[-69.61812592 283.79180908]
[-70.67605591 268.02294922]
[-60.21111679 256.17977905]
[-44.43197250 255.28863525]
[-34.61899567 243.94378662]
[-24.80602074 232.59893799]
[-14.99304485 221.25410461]
[-12.98600101 214.10362244]
[-4.87997150 209.78752136]
[5.14982367 198.63391113]
[15.17961884 187.48028564]
[25.20941544 176.32667542]
[35.23921204 165.17304993]
[37.79851532 146.03512573]
[56.99166489 139.97555542]
[66.58417511 128.44369507]
[76.17668915 116.91184235]
[71.29087830 105.41729736]
[71.65191650 92.93269348]
[77.19380951 81.73970032]
[68.28373718 69.67278290]
[59.37366486 57.60585785]
[50.46359253 45.53893661]
[41.20843506 33.73461533]
[31.61592293 22.20275688]
[22.02341270 10.67089939]
[12.43090057 -0.86095804]
[2.83838987 -12.39281559]
[-6.75412130 -23.92467308]
[-14.68779659 -28.54995537]
[-16.41778755 -35.77246094]
[-25.78627014 -47.48704910]
[-35.15475464 -59.20163345]
[-44.52323532 -70.91622162]
[-57.26222229 -73.12744141]
[-64.82172394 -83.11767578]
[-63.56914902 -95.17935944]
[-72.71012115 -107.07232666]
[-81.85109711 -118.96528625]
[-96.52178955 -114.98542023]
[-111.59812927 -116.92769623]
[-124.78108215 -124.49591827]
[-134.06034851 -136.53601074]
[-138.02091980 -151.21191406]
[-136.05882263 -166.28569031]
[-128.47325134 -179.45867920]
[-116.42097473 -188.72210693]
[-101.73986816 -192.66336060]
[-86.66869354 -190.68142700]
[-73.50569153 -183.07853699]
[-64.25812531 -171.01408386]
[-60.33618927 -156.32780457]
[-62.33794022 -141.25924683]
[-69.95813751 -128.10626221]
[-60.81715775 -116.21330261]
[-51.67618561 -104.32033539]
[-35.13182449 -98.52938843]
[-32.80865097 -80.28470612]
[-23.44016838 -68.57011414]
[-14.07168484 -56.85552979]
[-4.70320177 -45.14094543]
[4.77773571 -33.51718521]
[14.37024689 -21.98532677]
[23.96275902 -10.45346928]
[33.55527115 1.07838798]
[43.14778137 12.61024475]
[52.74029160 24.14210320]
[56.24752045 24.81516266]
[59.59357071 27.24942207]
[61.94092178 31.34576035]
[62.53051758 36.62886429]
[71.44058990 48.69578552]
[80.35066223 60.76271057]
[89.26073456 72.82963562]
[100.49666595 70.78845978]
[111.65671539 73.21041870]
[121.03577423 79.72545624]
[127.20085144 89.33818054]
[129.21000671 100.57987976]
[143.62805176 104.71752930]
[155.29895020 99.15324402]
[167.24394226 102.93053436]
[173.19851685 113.49445343]
[187.53413391 117.90920258]
[201.86975098 122.32395172]
[216.20536804 126.73870087]
[230.54098511 131.15345764]
[244.87660217 135.56820679]
[260.34277344 132.23522949]
[270.22909546 143.37567139]
[284.56472778 147.79042053]
[298.90032959 152.20516968]
[313.23596191 156.61991882]
[327.69320679 160.61843872]
[342.25997925 164.19737244]
[356.82678223 167.77630615]
[371.39355469 171.35523987]
[380.52331543 170.36346436]
[386.20523071 175.14607239]
[400.70034790 179.00508118]
[415.19546509 182.86408997]
[430.52166748 178.93756104]
[440.82998657 189.68873596]
[455.32510376 193.54774475]
[464.47229004 192.73210144]
[470.06097412 197.62332153]
[484.47900391 201.76097107]
[498.89706421 205.89862061]
[512.59826660 198.02124023]
[527.83459473 202.21989441]
[535.56671143 216.00358582]
[531.20715332 231.19471741]
[517.34252930 238.78063965]
[502.19833374 234.26077271]
[494.75939941 220.31666565]
[480.34136963 216.17901611]
[465.92333984 212.04136658]
[451.46609497 208.04284668]
[436.97097778 204.18383789]
[422.68154907 208.38639832]
[411.33645630 197.35919189]
[396.84133911 193.50018311]
[382.34622192 189.64117432]
[367.81460571 185.92202759]
[353.24783325 182.34309387]
[338.68106079 178.76416016]
[324.11425781 175.18521118]
[320.89303589 176.72708130]
[316.75531006 176.75637817]
[312.43371582 174.85537720]
[308.82119751 170.95553589]
[294.48559570 166.54078674]
[280.14996338 162.12603760]
[265.81436157 157.71128845]
[251.37358093 161.36004639]
[240.46185303 149.90382385]
[226.12623596 145.48907471]
[211.79061890 141.07432556]
[197.45500183 136.65957642]
[183.11938477 132.24482727]
[168.78376770 127.83007050]
[151.93811035 132.67515564]
[139.49040222 119.13556671]
[125.07235718 114.99791718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 25]
[13 24]
[14 23]
[15 22]
[38 92]
[39 91]
[40 90]
[41 89]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[49 79]
[50 78]
[51 77]
[52 76]
[55 74]
[56 73]
[57 72]
[97 162]
[98 161]
[101 159]
[102 158]
[103 157]
[104 156]
[105 155]
[106 154]
[108 152]
[109 151]
[110 150]
[111 149]
[112 145]
[113 144]
[114 143]
[115 142]
[117 141]
[118 140]
[119 139]
[121 137]
[122 136]
[124 135]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
