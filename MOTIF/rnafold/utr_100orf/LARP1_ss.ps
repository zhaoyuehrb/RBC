%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACCCCAGGCCCUGGUCACUCCAUGCUUUGGAGGGUGCUUUUGUCAAAGAGGCCUCCUUUCCCUCACCCAGAGCUGGAUUUCCAAGAGGCUCCCAUACCUAGCUGCCCUGGCAGACUCCCAG\
) } def
/len { sequence length } bind def

/coor [
[75.75621033 120.53302002]
[67.87858582 133.29792786]
[60.00096893 146.06285095]
[52.12334824 158.82777405]
[44.24573135 171.59268188]
[36.36811066 184.35760498]
[43.12487793 198.22662354]
[41.28818893 213.54426575]
[31.44412041 225.42272949]
[16.73387909 230.07162476]
[1.85144961 226.00753784]
[-8.45423794 214.52728271]
[-10.89467621 199.29415894]
[-4.69113064 185.16902161]
[8.17686939 176.65913391]
[23.60319328 176.47998047]
[31.48081207 163.71507263]
[39.35843277 150.95014954]
[47.23604965 138.18522644]
[55.11367035 125.42031860]
[62.99129105 112.65539551]
[62.80279922 97.65658569]
[54.60688400 85.09366608]
[46.41096878 72.53073883]
[38.21505356 59.96782303]
[30.82044029 54.41203308]
[29.97565460 46.98460770]
[22.09803581 34.21968842]
[14.22041702 21.45477295]
[6.34279728 8.68985462]
[-1.53482223 -4.07506227]
[-9.41244125 -16.83997917]
[-17.29006195 -29.60489655]
[-26.55795479 -41.39922333]
[-37.09770584 -52.07225800]
[-47.63745499 -62.74529266]
[-58.17720413 -73.41832733]
[-73.37925720 -77.80103302]
[-76.81671143 -92.29354858]
[-87.35646057 -102.96658325]
[-97.89620972 -113.63962555]
[-108.43595886 -124.31266022]
[-118.97570801 -134.98568726]
[-129.51545715 -145.65872192]
[-145.48460388 -147.19696045]
[-154.11744690 -160.71929932]
[-148.79162598 -175.85253906]
[-133.59265137 -180.98777771]
[-120.17987061 -172.18568420]
[-118.84242249 -156.19847107]
[-108.30267334 -145.52543640]
[-97.76292419 -134.85240173]
[-87.22317505 -124.17937469]
[-76.68342590 -113.50634003]
[-66.14367676 -102.83329773]
[-51.69549561 -99.21400452]
[-47.50416946 -83.95807648]
[-36.96442032 -73.28504181]
[-26.42466927 -62.61200714]
[-15.88492012 -51.93897247]
[-16.50350380 -66.92621613]
[-9.07587528 -79.95810699]
[4.13452339 -87.06341553]
[19.10204887 -86.07690430]
[31.26560211 -77.29920959]
[36.91854858 -63.40517426]
[34.33824539 -48.62877274]
[24.31100082 -37.47286224]
[9.89244556 -33.33701324]
[-4.52514410 -37.48251724]
[3.35247564 -24.71759987]
[11.23009491 -11.95268154]
[19.10771370 0.81223547]
[26.98533440 13.57715225]
[34.86295319 26.34206963]
[42.74057388 39.10698700]
[50.77797318 51.77190781]
[58.97388840 64.33482361]
[67.16980743 76.89775085]
[75.36572266 89.46067047]
[67.45088196 76.71879578]
[66.40920258 61.75500870]
[72.48225403 48.03939438]
[84.26169586 38.75258636]
[99.01589203 36.04818726]
[113.32335663 40.55334091]
[123.86621094 51.22331238]
[128.19956970 65.58374023]
[125.31907654 80.30332184]
[140.26107788 81.62109375]
[155.20307922 82.93885803]
[165.28942871 71.14710236]
[180.38825989 67.56872559]
[194.69378662 73.57968140]
[202.70523071 86.86863708]
[201.34204102 102.32571411]
[191.12837219 114.00736237]
[175.99160767 117.42173767]
[161.75213623 111.25594330]
[153.88531494 97.88086700]
[138.94331360 96.56309509]
[124.00131226 95.24533081]
[117.10761261 108.56737518]
[126.81345367 120.00401306]
[136.66223145 131.31777954]
[146.65242004 142.50689697]
[156.64259338 153.69601440]
[166.63276672 164.88513184]
[182.36880493 169.50134277]
[185.97560120 185.49893188]
[173.74279785 196.42095947]
[158.25445557 191.03178406]
[155.44364929 174.87530518]
[145.45347595 163.68618774]
[135.46330261 152.49708557]
[125.47312164 141.30796814]
[118.59455109 138.38125610]
[115.37681580 129.70985413]
[105.67097473 118.27321625]
[98.19228363 118.83816528]
[106.64957428 131.22663879]
[100.14957428 144.74514771]
[85.19220734 145.87532043]
[76.73468781 133.48699951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[22 80]
[23 79]
[24 78]
[25 77]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 60]
[35 59]
[36 58]
[37 57]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[89 102]
[90 101]
[91 100]
[103 119]
[104 118]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
