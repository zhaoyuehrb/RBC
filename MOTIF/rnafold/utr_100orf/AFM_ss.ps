%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUCUUUUGUAAAUGUGGUUUCUACAAAGAUGAAACUACUAAAACUUACAGGUUUUAUUUUUUUCUUGUUUUUUUUGACUGAAUCCCUAACCCUGCCCACACAACCUCGGGAUAUAGAGAACUUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[82.59469604 239.92791748]
[84.23460388 224.75314331]
[92.30347443 211.79722595]
[105.19924164 203.63255310]
[103.41845703 188.73863220]
[101.63767242 173.84471130]
[99.85688782 158.95079041]
[98.07610321 144.05686951]
[96.29531097 129.16294861]
[90.23819733 124.74013519]
[90.87565613 139.72659302]
[79.55632782 149.56898499]
[64.80371857 146.85595703]
[57.72660446 133.63043213]
[63.65409088 119.85128784]
[78.12396240 115.89450073]
[72.06684113 111.47168732]
[57.33790970 114.31045532]
[42.60897827 117.14922333]
[27.88004875 119.98799133]
[13.15111923 122.82675934]
[-1.57781124 125.66552734]
[-16.30674171 128.50430298]
[-31.03567314 131.34306335]
[-36.67385483 145.70323181]
[-49.19405365 154.71701050]
[-64.60112000 155.50813293]
[-77.97871399 147.82415771]
[-85.05809021 134.11700439]
[-83.58025360 118.76058960]
[-74.01676941 106.65507507]
[-59.41931915 101.66329956]
[-44.44588470 105.37811279]
[-33.87443924 116.61413574]
[-19.14550972 113.77536774]
[-4.41657972 110.93659973]
[10.31235027 108.09782410]
[25.04128075 105.25905609]
[39.77021027 102.42028809]
[54.49914169 99.58152008]
[69.22807312 96.74275208]
[73.96506500 82.51036072]
[63.87516022 71.41109467]
[53.78525543 60.31182480]
[43.69535065 49.21255112]
[33.60544205 38.11328125]
[23.51553726 27.01401138]
[13.42563248 15.91474152]
[-2.35107660 11.43953419]
[-6.10088730 -4.52514458]
[6.03368425 -15.55620098]
[21.56963158 -10.30583096]
[24.52490234 5.82483578]
[34.61480713 16.92410660]
[44.70471573 28.02337646]
[54.79462051 39.12264633]
[64.88452911 50.22191620]
[74.97443390 61.32118988]
[85.06433868 72.42045593]
[92.47476959 71.26483154]
[83.06282043 59.58514404]
[88.47185516 45.59434891]
[103.29277802 43.28342056]
[112.70446777 54.96331787]
[107.29563904 68.95358276]
[114.70606995 67.79795837]
[120.93729401 54.15348053]
[117.16336823 41.75331116]
[122.70954132 30.48461723]
[134.08538818 26.19573402]
[140.63955688 12.70340633]
[147.19372559 -0.78892022]
[141.78845215 -15.64013386]
[148.54336548 -29.92812538]
[163.45089722 -35.17608261]
[177.66667175 -28.27048492]
[182.75671387 -13.30830193]
[175.70120239 0.83366925]
[160.68605042 5.76524734]
[154.13188171 19.25757408]
[147.57771301 32.74990082]
[149.81124878 50.11421585]
[134.58177185 60.38470459]
[128.35055542 74.02918243]
[136.15756226 86.83740234]
[151.14057922 87.55113220]
[166.12359619 88.26486206]
[181.10659790 88.97859192]
[196.08961487 89.69232178]
[200.83816528 75.36214447]
[209.27780151 62.84516144]
[220.78228760 53.07020950]
[234.49786377 46.76265717]
[249.40678406 44.39056778]
[264.40267944 46.12996292]
[278.37277222 51.85176849]
[290.28039551 61.13138962]
[299.24188232 73.28022003]
[304.59228516 87.39672852]
[305.93453979 102.43338013]
[303.16903687 117.27436066]
[296.50100708 130.81835938]
[286.42526245 142.06033325]
[273.68948364 150.16604614]
[259.23876953 154.53399658]
[244.14543152 154.84007263]
[229.52949524 151.06153870]
[216.47558594 143.47879028]
[205.95237732 132.65454102]
[198.74075317 119.39199066]
[195.37588501 104.67533112]
[180.39286804 103.96160126]
[165.40986633 103.24787140]
[150.42684937 102.53414154]
[135.44384766 101.82041168]
[130.48982239 113.92797089]
[121.85223389 122.75737762]
[111.18923187 127.38217163]
[112.97001648 142.27609253]
[114.75080109 157.16999817]
[116.53159332 172.06391907]
[118.31237793 186.95783997]
[120.09316254 201.85176086]
[134.55030823 206.74600220]
[145.44621277 217.43440247]
[150.61747742 231.79479980]
[149.03733826 246.97590637]
[141.01954651 259.96350098]
[128.15603638 268.17889404]
[113.00086212 269.99093628]
[98.56309509 265.03979492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[66 84]
[67 83]
[70 81]
[71 80]
[72 79]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
