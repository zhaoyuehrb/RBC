%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGCAGCCAGCAGCUUCCCCUUCUCUGCCCUGCUCCAGGCACCAGGCUCUUUCCCCUUCAGUGUCUCAGAGGAGGGGACGGCAGCACCAUGGACCCCCGCUUGUCCACUGUCCGCCAGACCUGCUGCUGCUUCAAUGUCCGCAUCGCAACCACCGCCCUGGCCAUCUACCAUGUGAUCAUGAGCGUCU\
) } def
/len { sequence length } bind def

/coor [
[270.74423218 260.68905640]
[260.13763428 250.08244324]
[249.53102112 239.47584534]
[238.49954224 229.31187439]
[227.06163025 219.60752869]
[215.62371826 209.90318298]
[204.18582153 200.19883728]
[192.74790955 190.49450684]
[181.30999756 180.79016113]
[169.87208557 171.08581543]
[162.72618103 169.15263367]
[158.32810974 161.12791443]
[147.05052185 151.23773193]
[135.77291870 141.34753418]
[124.49532318 131.45735168]
[113.21772766 121.56716156]
[93.43143463 126.37634277]
[74.96119690 114.76622772]
[70.09357452 92.01043701]
[55.12569046 91.02938843]
[40.15780640 90.04834747]
[25.18992233 89.06729889]
[10.22203922 88.08625031]
[-4.74584484 87.10520172]
[-19.71372986 86.12415314]
[-34.68161392 85.14311218]
[-49.64949799 84.16206360]
[-64.61737823 83.18101501]
[-79.58526611 82.19996643]
[-94.55314636 81.21891785]
[-83.53033447 91.39230347]
[-79.64448547 105.88023376]
[-84.09677887 120.20423126]
[-95.51093292 129.93650818]
[-110.35862732 132.06861877]
[-124.05017853 125.94150543]
[-132.35327148 113.44916534]
[-132.70127869 98.45320129]
[-124.98661804 85.58914185]
[-111.59393311 78.83347321]
[-126.25585938 75.66680145]
[-140.91778564 72.50012970]
[-155.57972717 69.33345032]
[-170.24165344 66.16677856]
[-184.90357971 63.00010681]
[-203.78230286 70.03805542]
[-217.55340576 56.47768021]
[-232.31109619 53.79242706]
[-247.06878662 51.10717392]
[-258.19601440 61.92217636]
[-273.55978394 64.09793854]
[-287.25244141 56.79784775]
[-294.00881958 42.82892609]
[-291.23101807 27.56251335]
[-279.98709106 16.86885643]
[-264.60061646 14.85988522]
[-250.98799133 22.30809021]
[-244.38352966 36.34948349]
[-229.62583923 39.03473663]
[-214.86814880 41.71998978]
[-207.00627136 35.16208267]
[-196.61354065 33.99829102]
[-187.10426331 38.85442734]
[-181.73690796 48.33817673]
[-167.07498169 51.50484848]
[-152.41304016 54.67152405]
[-137.75111389 57.83819580]
[-123.08918762 61.00487137]
[-108.42726135 64.17153931]
[-93.57209778 66.25103760]
[-78.60421753 67.23208618]
[-63.63633347 68.21313477]
[-48.66844940 69.19417572]
[-33.70056534 70.17522430]
[-18.73268127 71.15627289]
[-3.76479816 72.13732147]
[11.20308590 73.11837006]
[26.17096901 74.09941101]
[41.13885498 75.08045959]
[56.10673904 76.06150818]
[71.07462311 77.04255676]
[82.59153748 67.43211365]
[84.30584717 52.53039551]
[86.02014923 37.62867737]
[87.61248016 22.71343613]
[89.08274078 7.78566456]
[90.55299377 -7.14210653]
[77.43346405 0.12961525]
[63.50510406 -5.43821621]
[59.01351166 -19.74994469]
[67.26266479 -32.27796936]
[82.18455505 -33.80676651]
[92.80257416 -23.21225929]
[95.48782349 -37.96995163]
[98.17308044 -52.72763824]
[100.85832977 -67.48532867]
[103.54358673 -82.24301910]
[92.72858429 -93.37025452]
[90.55281830 -108.73403168]
[97.85291290 -122.42666626]
[111.82183075 -129.18305969]
[127.08824158 -126.40524292]
[137.78190613 -115.16133881]
[139.79087830 -99.77486420]
[132.34266663 -86.16222382]
[118.30127716 -79.55776978]
[115.61602020 -64.80007935]
[112.93077087 -50.04238892]
[110.24551392 -35.28469849]
[107.56026459 -20.52700615]
[105.48076630 -5.67184925]
[104.01051331 9.25592136]
[102.54025269 24.18369293]
[105.01740265 31.15972519]
[100.92186737 39.34298325]
[99.20755768 54.24469757]
[97.49325562 69.14641571]
[106.42460632 70.54585266]
[114.33719635 74.40371704]
[120.59288788 80.25492096]
[124.73323822 87.48123932]
[126.51193237 95.37451172]
[125.90631866 103.20520782]
[123.10791779 110.28956604]
[134.38551331 120.17975616]
[145.66310120 130.06994629]
[156.94070435 139.96012878]
[168.21830750 149.85031128]
[179.57643127 159.64790344]
[191.01434326 169.35224915]
[202.45225525 179.05659485]
[213.89015198 188.76094055]
[225.32806396 198.46527100]
[236.76597595 208.16961670]
[248.20388794 217.87396240]
[249.69090271 202.94784546]
[262.19580078 194.66365051]
[276.52001953 199.11517334]
[282.12683105 213.02789307]
[274.89187622 226.16772461]
[260.13763428 228.86924744]
[270.74423218 239.47584534]
[281.35083008 250.08244324]
[296.15124512 246.22299194]
[310.79956055 250.26322937]
[321.38842773 261.02157593]
[325.14544678 275.53848267]
[321.15853882 289.89016724]
[331.76513672 300.49676514]
[342.37173462 311.10336304]
[355.75665283 304.97137451]
[372.73510742 308.87518311]
[385.75521851 324.25534058]
[399.09796143 331.10891724]
[412.44070435 337.96246338]
[427.40881348 332.88986206]
[441.54254150 339.96188354]
[446.45660400 354.98278809]
[439.23553467 369.04095459]
[424.16354370 373.79592896]
[410.18249512 366.42666626]
[405.58712769 351.30520630]
[392.24438477 344.45166016]
[378.90164185 337.59808350]
[373.51229858 342.81390381]
[383.94393921 353.59262085]
[394.37557983 364.37136841]
[404.80703735 375.15023804]
[394.02798462 385.58154297]
[383.59683228 374.80300903]
[373.16522217 364.02426147]
[362.73358154 353.24554443]
[357.34420776 358.46136475]
[363.75753784 372.02120972]
[370.17086792 385.58105469]
[376.58419800 399.14089966]
[390.36926270 408.02365112]
[389.29898071 424.38781738]
[374.47433472 431.39935303]
[361.14562988 421.84539795]
[363.02435303 405.55419922]
[356.61102295 391.99438477]
[350.19769287 378.43453979]
[343.78436279 364.87469482]
[325.90756226 343.15496826]
[331.76513672 321.70996094]
[321.15853882 311.10336304]
[310.55194092 300.49676514]
[296.20028687 304.48367310]
[281.68334961 300.72665405]
[270.92501831 290.13775635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 135]
[5 134]
[6 133]
[7 132]
[8 131]
[9 130]
[10 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[27 73]
[28 72]
[29 71]
[30 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[47 60]
[48 59]
[49 58]
[82 117]
[83 116]
[84 115]
[85 113]
[86 112]
[87 111]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[148 188]
[149 187]
[150 186]
[153 164]
[154 163]
[155 162]
[173 184]
[174 183]
[175 182]
[176 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
