%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCAAUAACUUGUCCCAGAGGGGAUGCCCAGGGCUCAGUUGCCUGAGGACAGCAGUGCAGUUGACAUGGAUAUUCUCUUUCCUCUGGACAGUGUUAUUGGUACAGAGCUGUGCCCCAGCCCCA\
) } def
/len { sequence length } bind def

/coor [
[204.20884705 396.01565552]
[203.19491577 383.19409180]
[205.86692810 370.59472656]
[212.01498413 359.25668335]
[221.14202881 350.11819458]
[214.34870911 336.74468994]
[207.55538940 323.37118530]
[200.76205444 309.99768066]
[193.96873474 296.62414551]
[187.17541504 283.25064087]
[180.38209534 269.87713623]
[173.58877563 256.50363159]
[166.63056946 243.21516418]
[159.50852966 230.01376343]
[152.38650513 216.81237793]
[145.26448059 203.61099243]
[138.14244080 190.40960693]
[131.02041626 177.20820618]
[125.01111603 172.76754761]
[123.89009094 163.59103394]
[117.09677124 150.21752930]
[110.30344391 136.84400940]
[103.51012421 123.47050476]
[96.71680450 110.09699249]
[89.10994720 97.16889954]
[80.71863556 84.73564148]
[72.32732391 72.30238342]
[63.93601227 59.86912537]
[55.54470062 47.43586731]
[41.41127396 40.32553101]
[40.70469666 25.44769669]
[32.31338501 13.01443863]
[23.92207527 0.58118087]
[11.90558147 0.61844128]
[1.49398685 -5.13597536]
[-4.73974037 -15.12604237]
[-5.32057762 -26.76643372]
[-0.21891867 -37.11116409]
[-7.98509169 -49.94419098]
[-15.75126457 -62.77721786]
[-23.51743698 -75.61024475]
[-31.28360939 -88.44326782]
[-39.04978180 -101.27629852]
[-46.81595612 -114.10932159]
[-54.58213043 -126.94234467]
[-62.50642776 -139.67834473]
[-70.58764648 -152.31535339]
[-78.66886139 -164.95236206]
[-94.19841003 -166.78727722]
[-104.87757111 -178.21047974]
[-105.66396332 -193.82827759]
[-96.18627930 -206.26641846]
[-80.91959381 -209.65200806]
[-67.07235718 -202.38645935]
[-61.18282700 -187.90034485]
[-66.03185272 -173.03356934]
[-57.95063400 -160.39656067]
[-49.86941910 -147.75955200]
[-43.54741669 -143.77665710]
[-41.74910355 -134.70852661]
[-33.98292923 -121.87549591]
[-26.21675682 -109.04246521]
[-18.45058441 -96.20944214]
[-10.68441105 -83.37641907]
[-2.91823840 -70.54338837]
[4.84793472 -57.71036530]
[12.61410713 -44.87733841]
[30.55690575 -41.66841125]
[40.72109222 -26.15822220]
[36.35533142 -7.81013012]
[44.74664307 4.62312746]
[53.13795471 17.05638504]
[66.67118073 23.27740860]
[67.97795868 39.04455566]
[76.36927032 51.47781372]
[84.76058197 63.91107178]
[93.15189362 76.34432983]
[101.54320526 88.77758789]
[107.49437714 75.00865173]
[121.90139771 70.83279419]
[134.29333496 79.28500366]
[135.66381836 94.22225952]
[125.01679230 104.78828430]
[110.09031677 103.30367279]
[116.88363647 116.67718506]
[123.67695618 130.05068970]
[130.47027588 143.42420959]
[137.26359558 156.79771423]
[144.22180176 170.08618164]
[151.34384155 183.28756714]
[158.46586609 196.48896790]
[165.58789062 209.69035339]
[172.70993042 222.89173889]
[179.83195496 236.09312439]
[186.73556519 242.24171448]
[186.96228027 249.71031189]
[193.75559998 263.08380127]
[200.54891968 276.45733643]
[207.34225464 289.83084106]
[214.13557434 303.20434570]
[220.92889404 316.57785034]
[227.72221375 329.95135498]
[234.51553345 343.32489014]
[251.86769104 341.53729248]
[268.56271362 346.47244263]
[282.09985352 357.36349487]
[290.46185303 372.55355835]
[292.41558838 389.74765015]
[287.69387817 406.35958862]
[277.03155518 419.90078735]
[284.79769897 432.73379517]
[292.56387329 445.56683350]
[300.33004761 458.39987183]
[315.50262451 463.61264038]
[320.75109863 478.77288818]
[312.04931641 492.25094604]
[296.07250977 493.70764160]
[285.07675171 482.02548218]
[287.49703979 466.16604614]
[279.73086548 453.33300781]
[271.96469116 440.49996948]
[264.19851685 427.66696167]
[251.79716492 430.64263916]
[239.04330444 429.97369385]
[226.98728943 425.70501709]
[216.62487793 418.17828369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 103]
[6 102]
[7 101]
[8 100]
[9 99]
[10 98]
[11 97]
[12 96]
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[18 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 78]
[26 77]
[27 76]
[28 75]
[29 74]
[31 72]
[32 71]
[33 70]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 58]
[47 57]
[48 56]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
