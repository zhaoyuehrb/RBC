%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAAAGAACAAGAUUCUAAUGUGACAGAAUUUGUUCUUCUGGGCCUAUCAUCUUCUUGGGAGCUGCAGCUAUUUCUCUUCUUACUAUUUUUGUUUU\
) } def
/len { sequence length } bind def

/coor [
[66.41484070 203.75851440]
[63.19438171 189.10830688]
[62.36139679 174.13145447]
[63.93738556 159.21447754]
[67.88166809 144.74234009]
[74.09246063 131.08854675]
[82.40946960 118.60546875]
[92.61754608 107.61573029]
[77.61936188 107.84900665]
[62.62117386 108.08228302]
[47.62298584 108.31555939]
[32.62480164 108.54884338]
[17.62661552 108.78211975]
[2.62842941 109.01539612]
[-6.08008528 112.32513428]
[-12.83812523 109.01539612]
[-27.83631134 108.78211975]
[-42.83449554 108.54884338]
[-57.83268356 108.31555939]
[-72.83087158 108.08228302]
[-87.82905579 107.84900665]
[-97.03583527 120.33959961]
[-111.83621216 125.00098419]
[-126.53913116 120.04077148]
[-135.49102783 107.36625671]
[-135.24971008 91.85105896]
[-125.90796661 79.46108246]
[-111.05789948 74.96052551]
[-96.40965271 80.07994843]
[-87.59577942 92.85082245]
[-72.59759521 93.08409882]
[-57.59940720 93.31737518]
[-42.60121918 93.55065155]
[-27.60303307 93.78392792]
[-12.60484791 94.01721191]
[2.39515233 94.01721191]
[17.39333916 93.78392792]
[32.39152527 93.55065155]
[47.38970947 93.31737518]
[62.38789749 93.08409882]
[77.38608551 92.85082245]
[92.38426971 92.61754608]
[104.96855927 84.45448303]
[111.29608917 70.85439301]
[117.62361145 57.25430298]
[123.73886871 43.55745697]
[129.64036560 29.76716042]
[135.54187012 15.97686481]
[129.09486389 4.03068876]
[130.73881531 -9.24704266]
[139.64048767 -18.97140312]
[152.33895874 -21.69730377]
[158.66648865 -35.29739380]
[164.99401855 -48.89748383]
[159.34103394 -63.65618896]
[165.85597229 -78.05519104]
[180.67361450 -83.55181122]
[195.00292969 -76.88500977]
[200.34259033 -62.01007462]
[193.52465820 -47.75204468]
[178.59410095 -42.56995773]
[172.26658630 -28.96986771]
[165.93905640 -15.36977863]
[172.39224243 0.07352695]
[165.62510681 15.74785137]
[149.33216858 21.87836838]
[143.43066406 35.66866302]
[137.52915955 49.45896149]
[137.79621887 56.97920990]
[131.22369385 63.58182907]
[124.89617157 77.18192291]
[118.56864929 90.78200531]
[132.76597595 85.94094849]
[147.55529785 83.43574524]
[162.55493164 83.33106995]
[177.37777710 85.62961578]
[191.64128113 90.27205658]
[204.97735596 97.13858795]
[217.04180908 106.05200958]
[227.52328491 116.78227234]
[236.15129089 129.05245972]
[242.70317078 142.54589844]
[247.00979614 156.91436768]
[248.96006775 171.78704834]
[248.50361633 186.78009033]
[245.65225220 201.50659180]
[240.47953796 215.58647156]
[233.11898804 228.65637207]
[223.76054382 240.37898254]
[212.64573669 250.45178223]
[200.06141663 258.61477661]
[186.33235168 264.65734863]
[171.81285095 268.42355347]
[156.87763977 269.81613159]
[141.91213989 268.79922485]
[127.30261230 265.39901733]
[113.42606354 259.70327759]
[100.64062500 251.85900879]
[89.27626038 242.06863403]
[79.62625885 230.58485413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[43 72]
[44 71]
[45 70]
[46 68]
[47 67]
[48 66]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
