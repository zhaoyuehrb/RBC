%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGCGUUUGAACCUCUUGGCGGGUGCCGGCCAUGGCGGCUUCGCUCCCGGGACCUGGGAGCCGGCUUUUCCGCACAUAUGGGGCUGCGGACGGCAGGAGACAGCGGCGGCCGGGCCGGGAAGCCGCGCAGU\
) } def
/len { sequence length } bind def

/coor [
[118.02910614 230.56359863]
[110.40322876 216.04541016]
[119.39096069 202.32853699]
[119.74259949 187.33265686]
[120.09423828 172.33677673]
[120.44586945 157.34089661]
[120.79750824 142.34501648]
[121.14914703 127.34914398]
[114.45863342 123.95989227]
[107.67992401 137.34082031]
[94.29911041 130.56188965]
[101.07761383 117.18138885]
[94.38710022 113.79213715]
[82.50466156 122.94679260]
[70.62222290 132.10144043]
[58.73978424 141.25610352]
[56.95633698 156.95944214]
[44.53945160 166.73678589]
[28.85584450 164.78741455]
[19.21032524 152.26783752]
[21.32540703 136.60572815]
[33.94625092 127.09310913]
[49.58513260 129.37365723]
[61.46756744 120.21900940]
[73.35000610 111.06435394]
[85.23244476 101.90969849]
[80.06543732 87.82772064]
[65.08192444 88.53080750]
[50.09841537 89.23388672]
[35.11489868 89.93697357]
[21.61248779 99.24379730]
[6.91951323 91.96035004]
[6.15084791 75.57923126]
[20.09722900 66.95191956]
[34.41181564 74.95346069]
[49.39532852 74.25037384]
[64.37884521 73.54729462]
[79.36235809 72.84420776]
[92.89861298 66.38124847]
[102.86568451 55.17154694]
[112.83275604 43.96184158]
[122.79982758 32.75214005]
[132.76690674 21.54243469]
[142.73397827 10.33272934]
[143.61264038 -4.64151287]
[135.02500916 -16.93998909]
[126.43737793 -29.23846626]
[117.84973907 -41.53694153]
[109.26210785 -53.83541870]
[100.67446899 -66.13389587]
[92.08683777 -78.43237305]
[83.49919891 -90.73085022]
[69.47377014 -100.25574493]
[74.74380493 -116.36980438]
[91.68701172 -115.76654816]
[95.79767609 -99.31848145]
[104.38530731 -87.02000427]
[112.97294617 -74.72152710]
[121.56057739 -62.42305374]
[130.14820862 -50.12457657]
[138.73585510 -37.82609940]
[147.32348633 -25.52762413]
[155.91111755 -13.22914791]
[170.36923218 -9.23375320]
[184.05326843 -15.37760830]
[197.73731995 -21.52146339]
[211.42135620 -27.66531944]
[225.10540771 -33.80917358]
[238.78944397 -39.95302963]
[244.48355103 -54.45182037]
[258.44863892 -60.48762894]
[272.23593140 -54.96981812]
[285.91998291 -61.11367035]
[299.60400391 -67.25753021]
[313.28805542 -73.40138245]
[314.23275757 -85.97319031]
[320.43020630 -96.86865234]
[330.63433838 -104.02276611]
[342.84686279 -106.11028290]
[354.70825195 -102.79085541]
[363.95373535 -94.76274109]
[377.91073608 -100.25844574]
[381.89553833 -116.65071869]
[394.71624756 -127.35840607]
[411.22558594 -128.33901978]
[424.94613647 -119.40496826]
[438.77044678 -125.22634888]
[452.59475708 -131.04772949]
[466.41906738 -136.86911011]
[473.77874756 -151.12443542]
[489.54022217 -154.11700439]
[501.61264038 -143.55117798]
[500.73504639 -127.53214264]
[487.58068848 -118.34834290]
[472.24044800 -123.04479218]
[458.41613770 -117.22341919]
[444.59182739 -111.40203857]
[430.76751709 -105.58065796]
[428.92871094 -92.30510712]
[420.68542480 -81.60037231]
[408.12002563 -76.34696198]
[394.49505615 -78.02552795]
[383.40643311 -86.30146790]
[369.44946289 -80.80576324]
[365.88485718 -63.58514404]
[352.62725830 -51.79512024]
[334.79730225 -50.23877335]
[319.43191528 -59.71733856]
[305.74786377 -53.57348251]
[292.06381226 -47.42963028]
[278.37979126 -41.28577423]
[273.34207153 -27.31591606]
[259.55200195 -20.89023781]
[244.93330383 -26.26898575]
[231.24925232 -20.12513161]
[217.56521606 -13.98127556]
[203.88116455 -7.83742046]
[190.19712830 -1.69356489]
[176.51307678 4.45029068]
[169.24679565 17.60115051]
[153.94367981 20.29980087]
[143.97660828 31.50950623]
[134.00953674 42.71921158]
[124.04245758 53.92891312]
[114.07538605 65.13861847]
[104.10831451 76.34832764]
[136.14503479 127.70078278]
[135.79339600 142.69665527]
[135.44175720 157.69253540]
[135.09011841 172.68841553]
[134.73847961 187.68429565]
[134.38684082 202.68017578]
[142.72174072 216.80325317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 132]
[4 131]
[5 130]
[6 129]
[7 128]
[8 127]
[13 26]
[14 25]
[15 24]
[16 23]
[27 38]
[28 37]
[29 36]
[30 35]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[44 121]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[64 119]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
[72 111]
[73 110]
[74 109]
[75 108]
[81 104]
[82 103]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
