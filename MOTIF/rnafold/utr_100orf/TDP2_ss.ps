%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGUGCAGAGGCGGCAGGAAGAUGGAGUUGGGGAGUUGCCUGGAGGGCGGGAGGGAGGCGGCGGAGGAAGAGGGCGAGCCUGAGGUGAAAAAGCGGCGACUUCUGUGUGUGGAGUUUGCCU\
) } def
/len { sequence length } bind def

/coor [
[-14.80388355 469.24511719]
[-26.33272743 478.84124756]
[-41.07284164 476.06112671]
[-48.31411743 462.92514038]
[-55.48793030 476.09848022]
[-47.98900986 489.58068848]
[-48.99235153 504.97537231]
[-58.17778778 517.37017822]
[-72.61428070 522.80993652]
[-87.69519806 519.55889893]
[-98.60827637 508.65438843]
[-101.87118530 493.57601929]
[-96.44274902 479.13525391]
[-84.05516052 469.94009399]
[-68.66125488 468.92465210]
[-61.48744202 455.75134277]
[-55.14817047 442.15670776]
[-49.66805267 428.19360352]
[-44.18793869 414.23049927]
[-38.70782089 400.26739502]
[-33.22770691 386.30429077]
[-27.74759293 372.34118652]
[-39.24727631 364.36221313]
[-48.66305161 353.99542236]
[-55.50980759 341.76959229]
[-59.43359756 328.30950928]
[-60.22994614 314.30389404]
[-57.85450363 300.47021484]
[-52.42549896 287.51797485]
[-44.21784210 276.11224365]
[-33.64924240 266.83953857]
[-21.25891304 260.17770386]
[-7.68008757 256.47122192]
[6.39235735 255.91345215]
[20.23745346 258.53652954]
[26.40676117 244.86393738]
[32.57606888 231.19134521]
[38.74537277 217.51875305]
[44.91468048 203.84617615]
[51.08398819 190.17358398]
[57.25329208 176.50099182]
[63.42259979 162.82841492]
[69.59190369 149.15582275]
[75.76121521 135.48323059]
[65.09263611 125.06101990]
[58.62904739 111.61992645]
[57.14904404 96.77908325]
[60.83092117 82.32624054]
[69.23114777 70.00239563]
[81.33782959 61.29209518]
[95.69257355 57.24459457]
[110.56620026 58.34746170]
[116.73550415 44.67487335]
[108.16498566 34.85340881]
[103.99754333 22.55200005]
[104.82781982 9.63749599]
[110.49486542 -1.94457495]
[120.11179352 -10.46307945]
[132.20439148 -14.66001034]
[144.93704224 -13.93618488]
[151.78019714 -27.28426170]
[158.62336731 -40.63233948]
[165.46652222 -53.98041534]
[164.07908630 -72.29113770]
[179.07685852 -81.31268311]
[185.58511353 -94.82721710]
[176.40986633 -107.07766724]
[173.99011230 -122.19068146]
[178.88189697 -136.69342041]
[189.96110535 -147.25323486]
[204.68182373 -151.44355774]
[219.66134644 -148.30151367]
[231.45748901 -138.54908752]
[237.35957336 -124.42733002]
[236.01135254 -109.18132019]
[227.72262573 -96.31446838]
[214.39810181 -88.78349304]
[199.09963989 -88.31895447]
[192.59138489 -74.80442810]
[196.29183960 -63.21567535]
[190.89089966 -51.86790466]
[178.81460571 -47.13725662]
[171.97143555 -33.78918076]
[165.12828064 -20.44110298]
[158.28512573 -7.09302521]
[168.12673950 6.92325354]
[169.58709717 24.07588005]
[162.18103027 39.71373749]
[147.83975220 49.55156708]
[130.40809631 50.84418106]
[124.23878479 64.51676941]
[134.90736389 74.93898010]
[141.37095642 88.38007355]
[142.85095215 103.22091675]
[139.16908264 117.67375946]
[130.76884460 129.99760437]
[118.66217041 138.70790100]
[104.30742645 142.75540161]
[89.43379974 141.65254211]
[83.26449585 155.32513428]
[77.09518433 168.99771118]
[70.92588043 182.67030334]
[64.75657654 196.34289551]
[58.58726883 210.01547241]
[52.41796112 223.68806458]
[46.24865341 237.36065674]
[40.07934952 251.03324890]
[33.91004181 264.70584106]
[46.44625854 274.77441406]
[55.97888565 287.70962524]
[61.87626648 302.64514160]
[63.74996948 318.58239746]
[61.48038864 334.45736694]
[55.22436142 349.21157837]
[45.40433884 361.86267090]
[32.67985535 371.56985474]
[17.90325546 377.68981934]
[2.06258106 379.81918335]
[-13.78448582 377.82131958]
[-19.26460075 391.78442383]
[-24.74471664 405.74752808]
[-30.22483253 419.71063232]
[-35.70494843 433.67373657]
[-41.18506241 447.63684082]
[-26.46735954 444.74041748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
[35 108]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[52 91]
[53 90]
[60 85]
[61 84]
[62 83]
[63 82]
[65 79]
[66 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
