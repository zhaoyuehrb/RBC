%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:48:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACACAGGCAACAAAACUCUGCCCCAGGACUUUCUCUUACUGGGCUUUCCUGGUUCUCAAACUCUUCAGCUCUCUCUCUUUAUGCUUUUUCUGGUGA\
) } def
/len { sequence length } bind def

/coor [
[103.56929016 189.79914856]
[88.33041382 193.30780029]
[74.42501068 186.15420532]
[68.41879272 171.71607971]
[73.14771271 156.81066895]
[86.37891388 148.47584534]
[88.24039459 133.59179688]
[90.10187531 118.70775604]
[84.00694275 114.33719635]
[65.72213745 101.22552490]
[52.22209930 107.76378632]
[38.72206116 114.30205536]
[25.22202110 120.84032440]
[23.47457886 136.16839600]
[13.69986343 148.10400391]
[-0.98305076 152.83850098]
[-15.88889790 148.86116028]
[-26.26127815 137.44113159]
[-28.79040146 122.22248077]
[-22.66923332 108.06144714]
[-9.85101700 99.47676086]
[5.57400131 99.20775604]
[18.68375397 107.34027863]
[32.18379593 100.80201721]
[45.68383408 94.26374817]
[59.18387222 87.72547913]
[63.32839966 73.30941772]
[55.36203384 60.59969711]
[47.39566422 47.88997650]
[39.42929840 35.18025589]
[31.46293259 22.47053528]
[23.49656487 9.76081562]
[9.61310482 9.82679462]
[-2.37222576 3.03734970]
[-9.34236240 -8.71745777]
[-9.54657745 -22.27304459]
[-3.03899789 -34.04198456]
[-10.60624123 -46.99331284]
[-18.17348289 -59.94463730]
[-33.26380539 -65.39089203]
[-38.27774811 -80.63031769]
[-29.36903763 -93.97251892]
[-13.37167931 -95.18251038]
[-2.55747581 -83.33209229]
[-5.22215796 -67.51187897]
[2.34508491 -54.56055450]
[9.91232777 -41.60923004]
[26.21177483 -40.54534912]
[38.83281708 -29.91837120]
[42.73419189 -13.71723747]
[36.20628357 1.79444861]
[44.17265320 14.50416946]
[52.13901901 27.21389008]
[60.10538483 39.92361069]
[68.07175446 52.63333130]
[76.03811646 65.34304810]
[71.82083130 50.94810486]
[72.36701965 35.95805359]
[77.62073517 21.90819740]
[87.04389191 10.23754597]
[99.67135620 2.14142537]
[114.20980072 -1.55094850]
[129.17018127 -0.46139702]
[143.02021790 5.29848623]
[154.34140015 15.13876534]
[161.97416687 28.05158424]
[165.13676453 42.71439362]
[163.50527954 57.62540436]
[157.24681091 71.25740814]
[147.00236511 82.21420288]
[133.81739807 89.37489319]
[148.29617310 93.29472351]
[162.77494812 97.21454620]
[172.35668945 85.37774658]
[185.92747498 78.46731567]
[201.13604736 77.68054199]
[215.34745789 83.15373230]
[226.09947205 93.93862915]
[231.52925110 108.16667175]
[230.69606018 123.37277985]
[223.74424744 136.92239380]
[211.87823486 146.46797180]
[197.15391541 150.35566711]
[182.12234497 147.91192627]
[169.38784790 139.56015015]
[161.15673828 126.74730682]
[158.85511780 111.69332123]
[144.37634277 107.77349854]
[129.89756775 103.85366821]
[123.66965485 108.03256226]
[137.97015381 112.55976868]
[143.34700012 126.56297302]
[135.75138855 139.49768066]
[120.90287018 141.62400818]
[109.98242950 131.34082031]
[111.21383667 116.39034271]
[104.98592377 120.56923676]
[103.12444305 135.45327759]
[101.26296234 150.33732605]
[112.03394318 161.67399597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 99]
[7 98]
[8 97]
[10 26]
[11 25]
[12 24]
[13 23]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[37 47]
[38 46]
[39 45]
[71 89]
[72 88]
[73 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
