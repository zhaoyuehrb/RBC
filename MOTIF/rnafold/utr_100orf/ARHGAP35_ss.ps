%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGAUGGCAAGAAAGCAAGAUGUCCGAAUUCCCACCUACAACAUCAGUGUGGUGGGAUUAUCUGGGACCGAGAAGGAAAAGGGCCAGUGUGGGAUUG\
) } def
/len { sequence length } bind def

/coor [
[93.98828888 307.40914917]
[93.97394562 292.10363770]
[101.08433533 278.55001831]
[113.68554688 269.86276245]
[111.82406616 254.97872925]
[99.94535065 246.06628418]
[97.84551239 230.99826050]
[107.27424622 218.59919739]
[105.41275787 203.71514893]
[103.55127716 188.83110046]
[101.68979645 173.94705200]
[86.40724182 172.70666504]
[71.70877075 168.34199524]
[58.22600937 161.04060364]
[46.53831482 151.11624146]
[37.14792252 138.99536133]
[30.45834732 125.19880676]
[26.75704575 110.31944275]
[26.20306587 94.99663544]
[28.82021141 79.88883209]
[34.49602509 65.64522552]
[42.98660660 52.87787628]
[53.92711258 42.13541412]
[66.84741974 33.87944794]
[81.19232178 28.46474648]
[78.86884308 13.64579010]
[76.54537201 -1.17316604]
[74.22190094 -15.99212265]
[56.94166565 -21.87693977]
[44.96860504 -35.54635620]
[41.44385910 -53.28802109]
[47.22901535 -70.33852386]
[60.69738388 -82.16229248]
[57.00320053 -96.70027924]
[53.30901718 -111.23826599]
[49.61483383 -125.77624512]
[45.92065048 -140.31423950]
[42.22646713 -154.85221863]
[38.53228378 -169.39019775]
[34.61245346 -183.86897278]
[30.46792793 -198.28504944]
[26.32340240 -212.70111084]
[11.96084499 -218.88584900]
[4.98018122 -232.87886047]
[8.67746639 -248.07307434]
[21.30695724 -257.29425049]
[36.90539169 -256.18841553]
[48.10766602 -245.27772522]
[49.62441254 -229.71388245]
[40.73946762 -216.84562683]
[44.88399124 -202.42956543]
[49.02851868 -188.01350403]
[53.98927689 -182.35520935]
[53.07026672 -173.08438110]
[56.76445007 -158.54640198]
[60.45863342 -144.00842285]
[64.15281677 -129.47042847]
[67.84700012 -114.93244934]
[71.54118347 -100.39446259]
[75.23536682 -85.85647583]
[87.18843842 -84.21077728]
[97.88155365 -78.54611206]
[106.00434113 -69.52943420]
[110.55210876 -58.24007416]
[110.95004272 -46.04058075]
[107.12576294 -34.41228104]
[99.52103424 -24.77539253]
[89.04085541 -18.31559563]
[91.36432648 -3.49663877]
[93.68780518 11.32231808]
[96.01127625 26.14127541]
[110.61569214 26.79939651]
[124.80541229 30.31705475]
[138.02612305 36.55683136]
[149.76136780 45.27497864]
[159.55271912 56.13092422]
[167.01766968 68.70059204]
[171.86462402 82.49294281]
[173.90423584 96.96920013]
[173.05682373 111.56385803]
[169.35548401 125.70677185]
[162.94482422 138.84547424]
[154.07525635 150.46670532]
[143.09327698 160.11647034]
[130.42788696 167.41784668]
[116.57384491 172.08557129]
[118.43532562 186.96961975]
[120.29680634 201.85366821]
[122.15828705 216.73771667]
[134.35023499 226.43276978]
[136.02601624 241.55383301]
[126.70811462 253.11723328]
[128.56959534 268.00128174]
[142.92216492 273.31753540]
[153.15151978 284.70257568]
[156.90704346 299.54016113]
[153.32572937 314.42077637]
[143.23056030 325.92495728]
[128.94129944 331.40911865]
[113.74154663 329.61300659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 93]
[5 92]
[8 89]
[9 88]
[10 87]
[11 86]
[25 71]
[26 70]
[27 69]
[28 68]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[40 52]
[41 51]
[42 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
