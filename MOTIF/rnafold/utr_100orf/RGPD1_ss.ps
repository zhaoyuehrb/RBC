%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGUGACUUGUCUCAUGAACGUGAUGGGUUUUAACACAGACCGCUUAGCAUGGACUAGAAAUAAGUUGAGAGGAUUCUAUUUUGCAAAGCUGUAUUAUGAAGCUAAAGAAUAUG\
) } def
/len { sequence length } bind def

/coor [
[75.32415771 111.92140198]
[71.65284729 99.49385834]
[57.77546692 105.18756104]
[43.89808655 110.88126373]
[30.02070618 116.57497406]
[16.14332390 122.26867676]
[2.26594281 127.96238708]
[2.14896846 143.13676453]
[-3.75284147 157.07275391]
[-14.51146984 167.65885925]
[-28.46563148 173.30412292]
[-43.47724915 173.17715454]
[-57.25905609 167.32846069]
[-67.72308350 156.67794800]
[-81.60046387 162.37165833]
[-95.47784424 168.06536865]
[-109.35522461 173.75906372]
[-123.23260498 179.45277405]
[-127.81225586 194.40472412]
[-140.95945740 202.87142944]
[-156.46652222 200.85514832]
[-167.01145935 189.30793762]
[-167.61529541 173.68202209]
[-157.99290466 161.35546875]
[-142.68769836 158.14852905]
[-128.92631531 165.57539368]
[-115.04892731 159.88168335]
[-101.17154694 154.18798828]
[-87.29416656 148.49427795]
[-73.41678619 142.80056763]
[-73.44843292 127.86978912]
[-67.74581909 114.02689362]
[-57.14915466 103.39319611]
[-43.25114441 97.61108398]
[-28.15765953 97.59040833]
[-14.16867256 103.36546326]
[-3.42776275 114.08499908]
[10.44961834 108.39129639]
[24.32699966 102.69759369]
[38.20438004 97.00388336]
[52.08176422 91.31018066]
[65.95914459 85.61647034]
[74.48011780 73.27171326]
[74.88283539 58.27712250]
[67.51882935 44.27419281]
[75.59504700 31.75924110]
[75.99776459 16.76464844]
[76.40048218 1.77005541]
[76.80320740 -13.22453785]
[77.20592499 -28.21912956]
[77.60864258 -43.21372223]
[63.59680557 -49.04749298]
[52.64126587 -59.55179977]
[46.22366333 -73.30603027]
[45.21193314 -88.45003510]
[49.74290085 -102.93570709]
[59.20378876 -114.80398560]
[72.31509399 -122.44978333]
[87.30361176 -124.83905792]
[102.14228058 -121.64868927]
[114.82427979 -113.31015015]
[123.63448334 -100.95115662]
[127.38137817 -86.24315643]
[125.55822754 -71.17529297]
[118.41159821 -57.78536224]
[106.90801239 -47.88425446]
[92.60323334 -42.81100464]
[92.20051575 -27.81641006]
[91.79779816 -12.82181740]
[91.39508057 2.17277527]
[90.99235535 17.16736794]
[90.58963776 32.16196060]
[97.98244476 45.09237671]
[89.87742615 58.67984390]
[89.47470856 73.67443848]
[101.22183228 72.62256622]
[111.97157288 76.40568542]
[119.89553833 84.03237915]
[123.79181671 93.89038086]
[123.26187134 104.07886505]
[136.44892883 111.22739410]
[149.63598633 118.37592316]
[162.82304382 125.52445221]
[176.01010132 132.67298889]
[189.19715881 139.82151794]
[199.86210632 134.22541809]
[211.78143311 134.53179932]
[221.93702698 140.54547119]
[227.81466675 150.64097595]
[228.02613831 162.20018005]
[240.81047058 170.04624939]
[253.59481812 177.89230347]
[266.37915039 185.73837280]
[280.23144531 178.94735718]
[295.55355835 180.74621582]
[307.45629883 190.56089783]
[312.14154053 205.25961304]
[308.11422729 220.15203857]
[296.65945435 230.48605347]
[281.43240356 232.96411133]
[267.29199219 226.79548645]
[258.75036621 213.94854736]
[258.53308105 198.52270508]
[245.74874878 190.67665100]
[232.96441650 182.83058167]
[220.18006897 174.98452759]
[202.78320312 180.36631775]
[186.63653564 171.28334045]
[182.04862976 153.00857544]
[168.86157227 145.86004639]
[155.67451477 138.71151733]
[142.48745728 131.56298828]
[129.30039978 124.41445160]
[116.11334229 117.26592255]
[106.85855103 123.58682251]
[95.30912781 125.07574463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[43 75]
[44 74]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[80 114]
[81 113]
[82 112]
[83 111]
[84 110]
[85 109]
[90 106]
[91 105]
[92 104]
[93 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
