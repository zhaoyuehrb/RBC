%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGCCCACCAGGAGACCUCGCCCGCCGCUCCCCCGGGCUCCCCGGCCAUGUCUCCCGCCCGGCUCCGGCCCCGACUGCACUUCUGCCUGGUCCUGUUGCUGCUGCUGGUGGUGCCGGCGGCAUGGGGCUGCGGGCCGGGUCGGGUGG\
) } def
/len { sequence length } bind def

/coor [
[108.91788483 200.29074097]
[99.52529907 212.79327393]
[84.28206635 216.28295898]
[70.38558197 209.11207581]
[64.39733124 194.66648865]
[69.14479065 179.76696777]
[82.38635254 171.44862366]
[84.26634979 156.56689453]
[86.14635468 141.68518066]
[88.02635193 126.80345917]
[89.90634918 111.92173767]
[91.74917603 109.67675018]
[93.60746765 107.44474792]
[78.68963623 109.01267242]
[63.77180862 110.58060455]
[48.85398102 112.14852905]
[33.93615341 113.71645355]
[19.01832390 115.28438568]
[11.20238400 128.55906677]
[-2.76813102 134.61531067]
[-17.45226669 131.32287598]
[-27.26452446 120.14891052]
[-42.18235397 121.71683502]
[-57.10018158 123.28475952]
[-63.64715958 138.43374634]
[-76.85327911 148.17390442]
[-93.07389069 149.93421936]
[-107.89092255 143.33009338]
[-117.31628418 130.24224854]
[-132.19799805 132.12223816]
[-147.07972717 134.00224304]
[-161.96144104 135.88224792]
[-174.68960571 146.22274780]
[-189.91017151 140.11811829]
[-191.96553040 123.84828186]
[-178.74130249 114.15024567]
[-163.84144592 121.00051880]
[-148.95971680 119.12052155]
[-134.07800293 117.24052429]
[-119.19628143 115.36052704]
[-114.72776031 102.41780853]
[-105.06224060 92.62602234]
[-92.05386353 87.94498444]
[-78.23343658 89.34626007]
[-66.31615448 96.61209106]
[-58.66810989 108.36693573]
[-43.75027847 106.79900360]
[-28.83245087 105.23107910]
[-21.55781364 92.26120758]
[-7.87909794 85.98770905]
[7.04529238 89.00698090]
[17.45039749 100.36655426]
[32.36822510 98.79862976]
[47.28605270 97.23069763]
[62.20388412 95.66277313]
[77.12171173 94.09484863]
[92.03953552 92.52692413]
[106.39933014 88.19144440]
[119.69238281 81.24200439]
[132.91194153 74.15373993]
[146.05653381 66.92743683]
[159.20114136 59.70112991]
[172.34573364 52.47482681]
[185.49034119 45.24851990]
[198.63493347 38.02221680]
[211.77954102 30.79591179]
[224.92413330 23.56960487]
[237.99234009 16.20604897]
[250.98272705 8.70604992]
[263.97311401 1.20604944]
[276.96350098 -6.29395056]
[289.95385742 -13.79395008]
[302.94424438 -21.29395103]
[315.93463135 -28.79395103]
[325.85430908 -40.04561615]
[331.66705322 -53.87356567]
[337.47976685 -67.70150757]
[343.29251099 -81.52945709]
[348.81439209 -95.47610474]
[354.04296875 -109.53533936]
[359.27154541 -123.59456635]
[356.00466919 -139.66502380]
[368.46621704 -150.32528687]
[383.83685303 -144.60900879]
[386.30456543 -128.39659119]
[373.33078003 -118.36598206]
[368.10220337 -104.30675507]
[362.87359619 -90.24752808]
[364.04263306 -85.55472565]
[362.22879028 -80.08083344]
[357.12045288 -75.71672821]
[351.30773926 -61.88877869]
[345.49499512 -48.06082916]
[339.68225098 -34.23288345]
[343.76705933 -27.94285393]
[355.49768066 -37.29124451]
[365.87957764 -48.11787415]
[379.72787476 -42.35379410]
[379.36184692 -27.35826302]
[365.24807739 -22.27692032]
[351.93664551 -15.36279488]
[356.02142334 -9.07276535]
[371.01812744 -8.75862980]
[386.01486206 -8.44449329]
[401.01156616 -8.13035679]
[416.00827026 -7.81622076]
[431.00497437 -7.50208426]
[446.00167847 -7.18794775]
[460.99841309 -6.87381172]
[475.99511719 -6.55967522]
[490.99182129 -6.24553919]
[506.95410156 -11.95884323]
[516.86291504 1.79802859]
[506.38671875 15.12789440]
[490.67767334 8.75117111]
[475.68096924 8.43703461]
[460.68426514 8.12289906]
[445.68756104 7.80876207]
[430.69085693 7.49462605]
[415.69412231 7.18048954]
[400.69741821 6.86635351]
[385.70071411 6.55221701]
[370.70401001 6.23808098]
[355.70730591 5.92394447]
[332.58239746 -0.20635532]
[323.43463135 -15.80356979]
[310.44424438 -8.30356979]
[297.45385742 -0.80356950]
[284.46350098 6.69643068]
[271.47311401 14.19643021]
[258.48272705 21.69643021]
[245.49234009 29.19643021]
[241.24411011 35.30504608]
[232.15043640 36.71420670]
[219.00584412 43.94050980]
[205.86123657 51.16681671]
[192.71664429 58.39311981]
[179.57203674 65.61942291]
[166.42744446 72.84573364]
[153.28283691 80.07203674]
[140.13824463 87.29833984]
[135.76300049 93.31665039]
[126.64182281 94.53505707]
[113.34877014 101.48449707]
[104.78807068 113.80173492]
[102.90807343 128.68345642]
[101.02806854 143.56517029]
[99.14807129 158.44689941]
[97.26807404 173.32861328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 149]
[8 148]
[9 147]
[10 146]
[11 145]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[22 48]
[23 47]
[24 46]
[29 40]
[30 39]
[31 38]
[32 37]
[58 144]
[59 143]
[60 141]
[61 140]
[62 139]
[63 138]
[64 137]
[65 136]
[66 135]
[67 134]
[68 132]
[69 131]
[70 130]
[71 129]
[72 128]
[73 127]
[74 126]
[75 94]
[76 93]
[77 92]
[78 91]
[79 88]
[80 87]
[81 86]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
