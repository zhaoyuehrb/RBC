%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAUAGCAGCGGUGCCUAGCGCGCCGCGUCUCUCCGCAGGCCCCGGCCGCGGCGUCCUCGACAACCUAUCGAAGGCGCCAUGGAGCGACCGGCGCCCCUGGCCGUGCUUCCCUUCUCGGACCCCGCGCACGCCCUGAGCCUGCUGCGCGGCCUGAGCCAGCUGCGCGCCGAGCGCAAGU\
) } def
/len { sequence length } bind def

/coor [
[42.85593796 242.62057495]
[39.26582718 228.05653381]
[42.25222778 213.35682678]
[51.24083710 201.34829712]
[64.50308990 194.34025574]
[79.48857117 193.68038940]
[93.31547546 199.49560547]
[103.32566071 210.66914368]
[101.26085663 195.81193542]
[99.19606018 180.95472717]
[97.13125610 166.09751892]
[95.06645203 151.24032593]
[92.87349701 136.40148926]
[90.55255890 121.58213043]
[84.77164459 110.16973877]
[86.93796539 100.25363159]
[73.77842712 93.05456543]
[60.61888504 85.85550690]
[47.49916840 93.71808624]
[32.30574799 93.95648956]
[19.12058067 86.60681152]
[11.43596268 73.73037720]
[11.22972107 58.83665085]
[-1.92981970 51.63758850]
[-15.08936024 44.43852615]
[-28.24890137 37.23946381]
[-41.40843964 30.04040337]
[-54.56798172 22.84134102]
[-63.62442398 21.46143723]
[-67.89096832 15.40275097]
[-80.92428589 7.97761917]
[-93.95761108 0.55248719]
[-109.77844238 0.44412780]
[-117.00698853 -12.57883072]
[-130.04029846 -20.00396347]
[-143.07362366 -27.42909431]
[-156.10694885 -34.85422516]
[-170.63954163 -38.56952667]
[-185.63731384 -38.31061554]
[-194.18940735 -35.02658081]
[-200.89566040 -38.17892075]
[-215.89566040 -38.17892075]
[-230.89566040 -38.17892075]
[-244.81947327 -29.51521873]
[-259.15490723 -37.47934723]
[-259.15490723 -53.87849426]
[-244.81947327 -61.84262466]
[-230.89566040 -53.17892075]
[-215.89566040 -53.17892075]
[-200.89566040 -53.17892075]
[-185.89622498 -53.30838013]
[-170.89845276 -53.56729126]
[-165.57937622 -67.59253693]
[-176.63368225 -77.73168945]
[-187.68798828 -87.87084198]
[-198.74227905 -98.00999451]
[-209.79658508 -108.14915466]
[-220.85087585 -118.28830719]
[-236.25094604 -121.91441345]
[-240.40037537 -136.21936035]
[-251.45466614 -146.35852051]
[-262.50897217 -156.49768066]
[-273.56326294 -166.63682556]
[-289.04348755 -164.42388916]
[-302.29708862 -172.72302246]
[-307.06616211 -187.61564636]
[-301.09887695 -202.06990051]
[-287.21279907 -209.26094055]
[-271.96453857 -205.79336548]
[-262.55380249 -193.30447388]
[-263.42410278 -177.69113159]
[-252.36981201 -167.55197144]
[-241.31552124 -157.41282654]
[-230.26121521 -147.27366638]
[-215.65182495 -144.37277222]
[-210.71173096 -129.34260559]
[-199.65742493 -119.20345306]
[-188.60313416 -109.06430054]
[-177.54882812 -98.92514038]
[-166.49452209 -88.78598785]
[-155.44023132 -78.64683533]
[-147.28944397 -68.16268158]
[-145.39057922 -56.90935516]
[-148.68180847 -47.88754654]
[-135.64849854 -40.46241379]
[-122.61517334 -33.03728104]
[-109.58185577 -25.61215019]
[-94.69324493 -26.03488541]
[-86.53247833 -12.48083210]
[-73.49915314 -5.05570078]
[-60.46583557 2.36943126]
[-47.36891937 9.68180084]
[-34.20937729 16.88086319]
[-21.04983902 24.07992554]
[-7.89029789 31.27898788]
[5.26924229 38.47805023]
[18.42878342 45.67711258]
[31.08203316 37.81830215]
[46.06975937 37.34500885]
[59.36995316 44.48442078]
[67.36331177 57.40738678]
[67.81794739 72.69596100]
[80.97748566 79.89502716]
[94.13703156 87.09408569]
[83.81588745 76.20951080]
[79.01256561 61.99937057]
[80.61313629 47.08500671]
[88.32233429 34.21767807]
[100.71805573 25.77101135]
[115.51365662 23.30316925]
[129.97979736 27.26939011]
[141.44789124 36.93802643]
[147.80245972 50.52550507]
[147.87123108 65.52535248]
[141.64155579 79.17053223]
[130.26258850 88.94393158]
[115.83649445 93.04246521]
[130.82756042 93.56021118]
[145.81861877 94.07794952]
[160.80967712 94.59569550]
[175.80073547 95.11343384]
[183.33506775 87.22332764]
[193.75697327 84.84559631]
[203.55610657 88.53259277]
[209.56753540 96.83462524]
[224.53178406 97.86949158]
[239.49604797 98.90435791]
[254.46031189 99.93922424]
[269.42456055 100.97409058]
[284.38882446 102.00896454]
[299.35308838 103.04383087]
[308.15643311 100.50920868]
[314.56597900 104.22789764]
[329.51016235 105.52090454]
[338.85690308 93.24728394]
[353.36331177 87.99678040]
[368.40042114 91.44480133]
[379.16995239 102.49109650]
[382.23538208 117.61083984]
[376.61856079 131.97937012]
[364.11178589 141.01174927]
[348.70590210 141.82577515]
[335.31689453 134.16168213]
[328.21716309 120.46507263]
[313.27297974 119.17206573]
[298.31820679 118.00808716]
[283.35397339 116.97322083]
[268.38970947 115.93835449]
[253.42544556 114.90348816]
[238.46118164 113.86862183]
[223.49691772 112.83375549]
[208.53266907 111.79888153]
[191.85440063 121.55297852]
[175.28300476 110.10449982]
[160.29193115 109.58675385]
[145.30087280 109.06901550]
[130.30981445 108.55126953]
[115.31874847 108.03353119]
[105.37191010 119.26119232]
[107.69284821 134.08055115]
[112.12284851 142.09916687]
[109.92366028 149.17552185]
[111.98846436 164.03271484]
[114.05326080 178.88992310]
[116.11806488 193.74713135]
[118.18286896 208.60433960]
[121.77260590 223.16847229]
[126.84880066 237.28343201]
[131.92500305 251.39839172]
[137.00119019 265.51336670]
[148.05094910 278.37179565]
[138.75392151 292.54928589]
[122.55680847 287.54031372]
[122.88623047 270.58956909]
[117.81002808 256.47460938]
[112.73383331 242.35963440]
[107.65763855 228.24465942]
[103.98745728 242.78872681]
[94.44741058 254.36402893]
[80.87210083 260.74453735]
[65.87216187 260.70327759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 166]
[9 165]
[10 164]
[11 163]
[12 162]
[13 160]
[14 159]
[16 104]
[17 103]
[18 102]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 92]
[30 91]
[31 90]
[32 89]
[34 87]
[35 86]
[36 85]
[37 84]
[38 52]
[39 51]
[41 50]
[42 49]
[43 48]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[60 74]
[61 73]
[62 72]
[63 71]
[117 158]
[118 157]
[119 156]
[120 155]
[121 154]
[125 152]
[126 151]
[127 150]
[128 149]
[129 148]
[130 147]
[131 146]
[133 145]
[134 144]
[167 177]
[168 176]
[169 175]
[170 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
