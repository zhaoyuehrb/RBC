%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGGGAAAUCAGACUUCCAUCACAGAGUUCCUCCUACUGGGAUUUCCCAUUGGCCCAAGGAUUCAGAUGCUCCUCUUUGGGCUCUUCUCCCUGUUCU\
) } def
/len { sequence length } bind def

/coor [
[108.17220306 267.81256104]
[106.77451324 252.87782288]
[105.37683105 237.94308472]
[103.97914124 223.00833130]
[102.58145142 208.07359314]
[101.18376160 193.13885498]
[99.78607178 178.20411682]
[98.38838196 163.26937866]
[96.99069214 148.33464050]
[95.59300232 133.39990234]
[85.92117310 132.59126282]
[76.41063690 128.91273499]
[67.92604065 122.41067505]
[61.31236267 113.39363098]
[57.31546402 102.42298889]
[42.40426636 104.05277252]
[27.49307060 105.68255615]
[12.58187199 107.31233215]
[-2.32932520 108.94211578]
[-9.91487217 122.47869873]
[-24.02236557 128.94076538]
[-39.22718811 125.84350586]
[-49.68277359 114.37789154]
[-51.36874008 98.95268250]
[-43.63679123 85.49918365]
[-29.46002769 79.19053650]
[-14.28969860 82.45256042]
[-3.95910740 94.03092194]
[10.95209026 92.40113831]
[25.86328697 90.77135468]
[40.77448654 89.14157104]
[55.68568420 87.51179504]
[59.96092606 81.34962463]
[46.09375763 75.63108063]
[31.53906441 72.00329590]
[26.25521469 57.96474075]
[34.80587006 45.64052582]
[49.80583191 45.67507172]
[58.29957581 58.03809357]
[68.51140594 69.02529144]
[72.78665161 62.86312103]
[69.09246826 48.32513809]
[65.39828491 33.78715134]
[61.70409775 19.24916649]
[49.87810898 7.88791847]
[54.06641769 -7.96736717]
[69.96045685 -12.00613117]
[81.20980072 -0.07363945]
[76.24208069 15.55498409]
[79.93627167 30.09296799]
[83.63045502 44.63095474]
[87.32463837 59.16893768]
[105.51399994 60.65251541]
[120.10176086 69.28204346]
[128.70156860 82.35928345]
[142.90863037 77.54689026]
[157.11570740 72.73450470]
[171.32278442 67.92211914]
[185.52986145 63.10973358]
[199.73692322 58.29734802]
[213.94400024 53.48495865]
[228.15107727 48.67257309]
[242.35815430 43.86018753]
[256.56521606 39.04780197]
[258.37454224 23.89230537]
[266.58767700 11.02733326]
[279.57385254 3.00723720]
[294.75466919 1.42441118]
[309.11596680 6.59312677]
[319.80633545 17.48713303]
[324.70312500 31.94341469]
[322.83413696 47.09166718]
[314.57040405 59.92419434]
[301.55273438 67.89308929]
[286.36581421 69.41612244]
[272.02496338 64.19089508]
[261.37759399 53.25487518]
[247.17053223 58.06726074]
[232.96345520 62.87964630]
[218.75639343 67.69203186]
[204.54931641 72.50441742]
[190.34223938 77.31681061]
[176.13516235 82.12919617]
[161.92810059 86.94158173]
[147.72102356 91.75396729]
[133.51394653 96.56635284]
[128.26380920 118.33390045]
[110.52774811 132.00221252]
[111.92543030 146.93695068]
[113.32312012 161.87168884]
[114.72080994 176.80642700]
[116.11849976 191.74116516]
[117.51618958 206.67590332]
[118.91387939 221.61064148]
[120.31156921 236.54539490]
[121.70925903 251.48013306]
[123.10694885 266.41485596]
[133.03036499 279.47082520]
[126.43665314 294.48596191]
[110.10884857 296.01403809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[41 52]
[42 51]
[43 50]
[44 49]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
