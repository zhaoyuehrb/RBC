%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAACUCCUGGUACUUGAGCACUGAUCUGCUUUGGAGAACCUGAUUCUGAGACUCCAGCAGGAUGUCUUAUCAACAGCAGCAGUGCAAGCAGCCCUGCCAGCCACCUCCUGUGUGCCCCACGCCAAAGUGCCCAGAGCCAUGUCCACCCCCGAAGUGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[76.88448334 544.92816162]
[66.01277924 555.51922607]
[52.04774857 561.46417236]
[36.87805557 561.95904541]
[22.55527687 556.93682861]
[11.01644707 547.07678223]
[3.82210064 533.71246338]
[1.94521248 518.65118408]
[5.63961697 503.92993164]
[14.40567684 491.53958130]
[27.05785370 483.15585327]
[41.88504410 479.91256714]
[44.16101456 465.08624268]
[46.43698502 450.25991821]
[48.71295166 435.43359375]
[50.98892212 420.60726929]
[53.26489258 405.78094482]
[55.54086304 390.95462036]
[41.65621185 383.57553101]
[31.11375427 371.87362671]
[25.19806290 357.24737549]
[24.63928795 341.45318604]
[29.52310753 326.39447021]
[39.27817917 313.89233398]
[52.74291992 305.46517944]
[68.30380249 302.14453125]
[70.29708862 287.27755737]
[72.29036713 272.41061401]
[61.52501678 259.51647949]
[63.43183517 242.48838806]
[77.31835938 231.88531494]
[79.02823639 216.98309326]
[80.73810577 202.08087158]
[82.44797516 187.17863464]
[84.15784454 172.27641296]
[85.86771393 157.37419128]
[87.57759094 142.47195435]
[75.16431427 136.62475586]
[65.13899231 127.25608063]
[58.46554947 115.26673889]
[55.78564072 101.80950165]
[57.35693741 88.17828369]
[63.02835846 75.68371582]
[52.07429886 65.43634796]
[41.12023926 55.18898010]
[26.45662689 59.53934860]
[11.68184376 55.98934174]
[0.74044347 45.58971786]
[-3.49810123 31.20602226]
[0.00847807 16.72950745]
[-10.94558239 6.48213863]
[-21.89964294 -3.76523018]
[-32.85370255 -14.01259899]
[-43.80776215 -24.25996780]
[-54.76182175 -34.50733566]
[-65.81294250 -44.64995956]
[-76.96011353 -54.68692017]
[-88.10728455 -64.72387695]
[-104.25183868 -67.60233307]
[-109.57609558 -83.11311340]
[-98.60292816 -95.30005646]
[-82.62058258 -91.62628174]
[-78.07032776 -75.87104797]
[-66.92315674 -65.83409119]
[-55.77598190 -55.79713058]
[-48.66876221 -53.64859009]
[-44.51445389 -45.46139526]
[-33.56039429 -35.21402740]
[-22.60633469 -24.96665955]
[-11.65227318 -14.71929073]
[-0.69821346 -4.47192192]
[10.25584698 5.77544689]
[24.46672440 1.31265211]
[39.10074234 4.58397102]
[50.20587540 14.80856895]
[54.73186493 29.31416130]
[51.36760712 44.23492050]
[62.32167053 54.48228836]
[73.27572632 64.72966003]
[83.53903198 58.92421341]
[94.97113037 56.03530884]
[106.76029205 56.26806641]
[111.53115082 42.04698944]
[116.30200195 27.82591629]
[121.07285309 13.60484123]
[118.12657928 -1.93961215]
[129.51008606 -11.54507637]
[134.28094482 -25.76614952]
[128.45002747 -40.71205521]
[136.62400818 -54.51660538]
[152.53250122 -56.59013748]
[163.97186279 -45.34201050]
[162.16680908 -29.40082550]
[148.50201416 -20.99529648]
[143.73117065 -6.77422237]
[147.01867676 7.75304461]
[135.29393005 18.37569427]
[130.52307129 32.59676743]
[125.75222015 46.81784439]
[120.98136902 61.03891754]
[125.99775696 64.19078064]
[130.54815674 67.98448181]
[134.55102539 72.35202789]
[147.68183899 65.10070801]
[160.74302673 57.72471237]
[173.73341370 50.22471237]
[186.72380066 42.72471237]
[192.24821472 27.66282654]
[207.51341248 22.72795677]
[220.80926514 31.70571327]
[221.93630981 47.70912933]
[210.02998352 58.46175385]
[194.22380066 55.71509171]
[181.23341370 63.21509171]
[168.24302673 70.71509552]
[164.00340271 76.81052399]
[154.93316650 78.23152161]
[141.80233765 85.48284149]
[142.93316650 89.27957916]
[143.71989441 93.16223907]
[144.15621948 97.09969330]
[159.07405090 98.66761780]
[173.99188232 100.23554993]
[186.11485291 90.09606171]
[201.84915161 91.58178711]
[211.85989380 103.81127930]
[210.20790100 119.52899170]
[197.87324524 129.40988159]
[182.17388916 127.59179688]
[172.42395020 115.15337372]
[157.50611877 113.58544922]
[142.58830261 112.01752472]
[127.68428040 134.52194214]
[102.47981262 144.18183899]
[100.76994324 159.08406067]
[99.06007385 173.98628235]
[97.35020447 188.88850403]
[95.64032745 203.79074097]
[93.93045807 218.69296265]
[92.22058868 233.59518433]
[101.77088165 243.13134766]
[104.03757477 256.23806763]
[98.41173553 268.07565308]
[87.15734100 274.40386963]
[85.16405487 289.27084351]
[83.17077637 304.13781738]
[96.03363800 310.50231934]
[106.28208923 320.51797485]
[112.92048645 333.19314575]
[115.30963898 347.27883911]
[113.22838593 361.39160156]
[106.89394379 374.14947510]
[96.93936157 384.30743408]
[84.35024261 390.87866211]
[70.36718750 393.23059082]
[68.09121704 408.05691528]
[65.81524658 422.88323975]
[63.53927994 437.70956421]
[61.26330948 452.53588867]
[58.98733902 467.36221313]
[56.71137238 482.18853760]
[69.88302612 489.72988892]
[79.43795013 501.52261353]
[84.08390045 515.97180176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 161]
[13 160]
[14 159]
[15 158]
[16 157]
[17 156]
[18 155]
[26 146]
[27 145]
[28 144]
[31 140]
[32 139]
[33 138]
[34 137]
[35 136]
[36 135]
[37 134]
[43 79]
[44 78]
[45 77]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 65]
[57 64]
[58 63]
[82 100]
[83 99]
[84 98]
[85 97]
[87 95]
[88 94]
[103 118]
[104 117]
[105 115]
[106 114]
[107 113]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
