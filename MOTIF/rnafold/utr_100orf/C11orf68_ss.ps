%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGUUGUUGAGGUGGCGCGGCGCUAAGAUGGCGGCGGCGGCGGCGGCGGCCGUGGCGGGGGUGGGGCGCGGUGGCGGUGGCGCGGAGCCACGGCAGGAGCGGAGCCGGGCCCGGGGCUGGGCCGGCG\
) } def
/len { sequence length } bind def

/coor [
[282.25863647 429.65957642]
[281.10684204 420.25897217]
[284.51681519 411.27481079]
[276.60220337 398.53277588]
[268.68759155 385.79077148]
[260.77301025 373.04873657]
[252.85839844 360.30673218]
[239.57038879 353.57781982]
[238.86145020 337.77252197]
[230.94685364 325.03048706]
[223.03224182 312.28848267]
[208.51516724 309.15960693]
[200.30711365 296.35012817]
[203.68740845 281.14450073]
[195.77279663 268.40246582]
[187.85820007 255.66044617]
[179.94358826 242.91842651]
[172.02899170 230.17640686]
[157.18508911 229.28376770]
[145.57583618 219.70832825]
[141.78669739 204.96058655]
[147.47377014 190.64405823]
[139.55917358 177.90203857]
[131.64457703 165.16001892]
[123.72996521 152.41799927]
[115.81536102 139.67597961]
[107.90075684 126.93395996]
[96.58123016 129.65028381]
[84.42580414 127.52381897]
[73.52527618 120.36703491]
[65.96265411 108.89484406]
[63.42702103 94.67735291]
[66.86864471 79.93006134]
[54.73338699 71.11328125]
[39.02094269 69.26135254]
[33.27223587 55.52083969]
[21.13698006 46.70405960]
[9.00172424 37.88728333]
[-3.13353038 29.07050323]
[-15.26878548 20.25372505]
[-30.98122978 18.40179443]
[-36.72993851 4.66128445]
[-48.86519241 -4.15549421]
[-65.22218323 -5.33061790]
[-72.13859558 -20.19989014]
[-62.49942017 -33.46707916]
[-46.22061157 -31.48403740]
[-40.04841614 -16.29074860]
[-27.91316032 -7.47397041]
[-13.06870937 -6.25267506]
[-6.45200634 8.11847019]
[5.68324852 16.93524933]
[17.81850433 25.75202751]
[29.95375824 34.56880569]
[42.08901215 43.38558578]
[56.93346405 44.60688019]
[63.55016708 58.97802734]
[75.68542480 67.79480743]
[82.92198944 65.82450104]
[76.49929047 52.26909637]
[70.07659149 38.71369553]
[62.53887177 25.74516106]
[68.23109436 11.86717129]
[82.70425415 7.92666101]
[94.64624023 17.00350380]
[94.72337341 32.00309753]
[96.05924988 46.94349289]
[97.39511871 61.88388824]
[104.63169098 59.91358185]
[110.62215424 46.16170120]
[116.61262512 32.40981674]
[114.23048401 16.18460655]
[127.25700378 6.22258377]
[142.29161072 12.77182198]
[143.86799622 29.09502792]
[130.36450195 38.40028763]
[124.37403870 52.15216827]
[118.38356781 65.90405273]
[132.94384766 94.48366547]
[120.64277649 119.01935577]
[128.55738831 131.76136780]
[136.47198486 144.50338745]
[144.38658142 157.24540710]
[152.30119324 169.98742676]
[160.21578979 182.72944641]
[175.56999207 183.97636414]
[187.11094666 193.90911865]
[190.54949951 208.55973816]
[184.77101135 222.26181030]
[192.68560791 235.00382996]
[200.60021973 247.74584961]
[208.51481628 260.48785400]
[216.42941284 273.22988892]
[231.55827332 276.93872070]
[239.40328979 289.97369385]
[235.77426147 304.37387085]
[243.68887329 317.11590576]
[251.60346985 329.85791016]
[265.45758057 337.49819946]
[265.60040283 352.39212036]
[273.51501465 365.13415527]
[281.42962646 377.87615967]
[289.34423828 390.61819458]
[297.25881958 403.36019897]
[316.74121094 412.12194824]
[316.92596436 432.70431519]
[325.74273682 444.83956909]
[334.55950928 456.97482300]
[343.37628174 469.11007690]
[352.19308472 481.24533081]
[359.84912109 486.41555786]
[361.07208252 493.78204346]
[369.59304810 506.12680054]
[378.11401367 518.47155762]
[386.63500977 530.81628418]
[401.67471313 537.35382080]
[403.26382446 553.67578125]
[389.76757812 562.99157715]
[375.06976318 555.71789551]
[374.29025269 539.33728027]
[365.76925659 526.99249268]
[357.24829102 514.64776611]
[348.72732544 502.30300903]
[340.05783081 490.06210327]
[331.24102783 477.92684937]
[322.42425537 465.79159546]
[313.60748291 453.65634155]
[304.79071045 441.52108765]
[295.73568726 441.56829834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 104]
[4 103]
[5 102]
[6 101]
[7 100]
[9 98]
[10 97]
[11 96]
[14 93]
[15 92]
[16 91]
[17 90]
[18 89]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[33 58]
[34 57]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[42 49]
[43 48]
[69 78]
[70 77]
[71 76]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
