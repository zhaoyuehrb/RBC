%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCAAGGCUUCCUCUCUGGCACCCAACCAUGAAGCUCCUUUUUCCUAUCUUUGCCAGCCUCAUGCUACAGUACCAGGUGAACACAGAAUUUAUUGGCUUGAGACGCUGUUUAAUGGGUUUGGGGAGAU\
) } def
/len { sequence length } bind def

/coor [
[-33.70969009 194.51458740]
[-40.45801163 208.63827515]
[-50.88921738 220.28968811]
[-64.15882874 228.53775024]
[-79.19599152 232.72639465]
[-94.78987885 232.52679443]
[-109.68721771 227.96310425]
[-122.69298553 219.40991211]
[-132.76628113 207.56147766]
[-146.41076660 213.79269409]
[-160.05525208 220.02392578]
[-173.69972229 226.25515747]
[-187.34420776 232.48637390]
[-200.98869324 238.71760559]
[-201.38078308 253.93626404]
[-208.31336975 267.42056274]
[-220.36376953 276.52044678]
[-235.10957336 279.47378540]
[-249.61552429 275.74728394]
[-261.01776123 266.13195801]
[-274.66223145 272.36318970]
[-288.30673218 278.59442139]
[-300.20275879 290.67416382]
[-315.10360718 282.58703613]
[-311.45745850 266.02981567]
[-294.53796387 264.94992065]
[-280.89346313 258.71871948]
[-267.24899292 252.48748779]
[-267.04888916 237.57354736]
[-260.36581421 224.17034912]
[-248.47738647 214.96022034]
[-233.70880127 211.81230164]
[-218.97817993 215.40335083]
[-207.21990967 225.07312012]
[-193.57542419 218.84190369]
[-179.93095398 212.61067200]
[-166.28646851 206.37944031]
[-152.64199829 200.14822388]
[-138.99751282 193.91699219]
[-141.33004761 179.72644043]
[-139.89288330 165.40521240]
[-134.77851868 151.93835449]
[-126.33257294 140.25375366]
[-115.13046265 131.15827942]
[-101.93819427 125.28202057]
[-87.65997314 123.03468323]
[-73.27626038 124.57698059]
[-59.77640533 129.80918884]
[-48.09062576 138.37756348]
[-39.02589417 149.69827271]
[-25.23698997 143.79351807]
[-11.44808578 137.88876343]
[2.34081864 131.98400879]
[16.12972260 126.07925415]
[29.91862679 120.17449951]
[34.87722015 114.59529114]
[44.10663605 114.29763031]
[58.03215790 108.72269440]
[71.95767212 103.14775848]
[85.88319397 97.57282257]
[94.67633057 86.70211029]
[108.54187012 88.50165558]
[122.46738434 82.92671967]
[136.39291382 77.35178375]
[150.31842041 71.77684784]
[164.24394226 66.20191193]
[168.14541626 51.29940414]
[179.93605042 41.66434097]
[194.96159363 40.82941437]
[207.44813538 48.90556335]
[221.37365723 43.33062363]
[235.29917908 37.75568771]
[249.22468567 32.18075180]
[263.15020752 26.60581398]
[269.85122681 8.96731949]
[286.98547363 1.85493743]
[303.62951660 9.30437374]
[317.27398682 3.07314873]
[330.91845703 -3.15807652]
[344.56295776 -9.38930130]
[358.20742798 -15.62052727]
[367.54632568 -28.39142227]
[382.33764648 -26.64042473]
[395.98211670 -32.87165070]
[396.75863647 -48.15744781]
[404.55984497 -61.32558060]
[417.59307861 -69.35011292]
[432.86343384 -70.38705444]
[446.86184692 -64.19813538]
[456.37161255 -52.20551682]
[459.20745850 -37.16501999]
[454.71771240 -22.53283691]
[443.93408203 -11.67133617]
[429.33459473 -7.07641411]
[414.27407837 -9.80394745]
[402.21334839 -19.22717094]
[388.56884766 -12.99594593]
[380.20593262 -0.67074978]
[364.43865967 -1.97604692]
[350.79415894 4.25517845]
[337.14968872 10.48640347]
[323.50521851 16.71762848]
[309.86071777 22.94885445]
[308.25427246 34.35873413]
[301.23141479 43.64510727]
[290.46981812 48.39546204]
[278.63607788 47.30471802]
[268.72515869 40.53133392]
[254.79962158 46.10626984]
[240.87411499 51.68120575]
[226.94859314 57.25614548]
[213.02307129 62.83108139]
[209.55931091 77.29277039]
[198.10865784 87.05731201]
[182.92642212 88.22055817]
[169.81887817 80.12742615]
[155.89335632 85.70236969]
[141.96784973 91.27730560]
[128.04232788 96.85224152]
[114.11680603 102.42717743]
[105.32366943 113.29788971]
[91.45812988 111.49834442]
[77.53261566 117.07328033]
[63.60709381 122.64821625]
[49.68157578 128.22315979]
[35.82337952 133.96340942]
[22.03447723 139.86816406]
[8.24557209 145.77290344]
[-5.54333258 151.67765808]
[-19.33223724 157.58241272]
[-33.12114334 163.48716736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[20 28]
[21 27]
[22 26]
[50 131]
[51 130]
[52 129]
[53 128]
[54 127]
[55 126]
[57 125]
[58 124]
[59 123]
[60 122]
[62 120]
[63 119]
[64 118]
[65 117]
[66 116]
[70 112]
[71 111]
[72 110]
[73 109]
[74 108]
[77 103]
[78 102]
[79 101]
[80 100]
[81 99]
[83 97]
[84 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
