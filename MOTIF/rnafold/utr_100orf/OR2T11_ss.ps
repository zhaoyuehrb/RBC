%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGAACACAUCAUCCUCUGACUUCACCCUCCUGGGGCUUCUGGUGAACAGUGAGGCUGCCGGGAUUGUAUUUACAGUGAUCCUUGCUGUUUUCUUGG\
) } def
/len { sequence length } bind def

/coor [
[91.68054962 332.13619995]
[93.56168365 316.61218262]
[105.01661682 305.96707153]
[104.08407593 290.99606323]
[100.46273804 284.39974976]
[103.36270905 275.54635620]
[102.89620972 260.55361938]
[102.42971039 245.56086731]
[101.96321869 230.56811523]
[101.49671936 215.57537842]
[100.79711151 200.59170532]
[99.86457062 185.62071228]
[86.82176208 175.13145447]
[85.28529358 158.12799072]
[96.67516327 144.96311951]
[95.27747345 130.02836609]
[93.87978363 115.09363556]
[85.31322479 107.04084015]
[84.39987946 95.31909943]
[91.61567688 86.03655243]
[90.68313599 71.06556702]
[89.75058746 56.09458542]
[75.68134308 50.27928925]
[65.57334900 38.97816086]
[61.39155579 24.46841431]
[63.91392517 9.64280510]
[72.58734894 -2.56707096]
[85.64785004 -9.77046871]
[84.71530151 -24.74145317]
[73.14968109 -35.17573166]
[72.41721344 -50.37172318]
[82.43598175 -61.33347321]
[81.50343323 -76.30445862]
[80.57089233 -91.27543640]
[79.63834381 -106.24642181]
[78.70580292 -121.21740723]
[77.77325439 -136.18838501]
[76.60800171 -151.14306641]
[75.21031189 -166.07780457]
[73.81262207 -181.01254272]
[72.41493225 -195.94728088]
[71.01724243 -210.88201904]
[69.61955261 -225.81675720]
[67.75807190 -240.70080566]
[65.43460083 -255.51977539]
[53.36932373 -266.09371948]
[54.25770187 -282.11215210]
[67.41825104 -291.28710938]
[82.75531769 -286.58032227]
[88.50362396 -271.60244751]
[80.25355530 -257.84323120]
[82.57703400 -243.02427673]
[85.98519135 -239.45004272]
[87.06683350 -233.64144897]
[84.55429840 -227.21444702]
[85.95198059 -212.27970886]
[87.34967041 -197.34497070]
[88.74736023 -182.41023254]
[90.14505005 -167.47549438]
[91.54273987 -152.54075623]
[95.36746979 -146.06024170]
[92.74423981 -137.12094116]
[93.67678833 -122.14995575]
[94.60932922 -107.17897034]
[95.54187775 -92.20798492]
[96.47441864 -77.23699951]
[97.40696716 -62.26601791]
[108.70862579 -52.63232040]
[109.86762238 -37.46289825]
[99.68628693 -25.67399788]
[100.61882782 -10.70301342]
[114.47229767 -5.17608976]
[124.59391022 5.86304092]
[128.93661499 20.26102257]
[126.58779144 35.17756271]
[117.96039581 47.64572144]
[104.72157288 55.16204071]
[105.65412140 70.13302612]
[106.58666229 85.10400391]
[116.23803711 98.73474121]
[108.81452942 113.69594574]
[110.21221924 128.63067627]
[111.60990143 143.56542969]
[122.97779083 150.98474121]
[127.87187958 163.43658447]
[124.69231415 176.23086548]
[114.83554840 184.68817139]
[115.76809692 199.65916443]
[119.48040771 208.20382690]
[116.48946381 215.10888672]
[116.95596313 230.10162354]
[117.42245483 245.09437561]
[117.88895416 260.08709717]
[118.35545349 275.07986450]
[119.05506134 290.06353760]
[119.98760223 305.03451538]
[132.67503357 314.17581177]
[136.46813965 329.34637451]
[129.57592773 343.38314819]
[115.25270081 349.65841675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 96]
[4 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[11 88]
[12 87]
[15 83]
[16 82]
[17 81]
[20 79]
[21 78]
[22 77]
[28 71]
[29 70]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
