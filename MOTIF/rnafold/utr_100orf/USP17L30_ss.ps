%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGACGACUCACUCUACUUGAGAGGUGAGUGGCAGUUCAACCACUUUUCAAAACUCACAUCUUCUCGGCCCGAUGCAGCUUUUGCUGAAAUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[106.42404938 118.04102325]
[95.61799622 117.23587799]
[86.13594818 128.85873413]
[76.65390015 140.48159790]
[67.17185211 152.10444641]
[57.68980789 163.72731018]
[48.38966370 175.49621582]
[39.27367401 187.40834045]
[37.69193268 203.73103333]
[22.65517235 210.27534485]
[9.63192654 200.30903625]
[12.01939201 184.08460999]
[27.36154938 178.29235840]
[36.47753906 166.38023376]
[38.07078552 159.02583313]
[46.06695175 154.24525452]
[55.54899979 142.62240601]
[65.03104401 130.99954224]
[74.51309204 119.37669373]
[83.99514008 107.75383759]
[81.99252319 93.48251343]
[91.53810883 81.30917358]
[107.98046112 79.62352753]
[104.74019623 64.97768402]
[101.49993134 50.33184433]
[98.25966644 35.68600464]
[95.01939392 21.04016113]
[91.55175018 6.44648409]
[87.85756683 -8.09150124]
[84.16338348 -22.62948608]
[80.46920013 -37.16747284]
[74.14167786 -50.76755905]
[65.40055847 -62.95742798]
[56.65944290 -75.14730072]
[47.91832733 -87.33716583]
[39.17721176 -99.52703857]
[23.66018295 -99.48889923]
[11.10398006 -108.60599518]
[6.33671713 -123.37260437]
[11.19150543 -138.11067200]
[23.80157852 -147.15310669]
[39.31810760 -147.02291870]
[51.77466965 -137.77014160]
[56.38146210 -122.95269012]
[51.36708069 -108.26815033]
[60.10819626 -96.07828522]
[68.84931183 -83.88841248]
[77.59043121 -71.69854736]
[86.33154297 -59.50867462]
[87.60034180 -74.45491791]
[95.07431030 -87.46028900]
[107.34931183 -96.08145142]
[122.11920929 -98.69871521]
[136.60916138 -94.82038116]
[148.09689331 -85.17507935]
[154.42419434 -71.57489014]
[154.40234375 -56.57490540]
[148.03544617 -42.99320602]
[136.51965332 -33.38141251]
[122.01847839 -29.54531097]
[107.25626373 -32.20560074]
[95.00718689 -40.86165619]
[98.70137024 -26.32366943]
[102.39555359 -11.78568459]
[106.08973694 2.75230026]
[110.87212372 8.56214237]
[109.66523743 17.79989433]
[112.90550232 32.44573593]
[116.14577484 47.09157562]
[119.38603973 61.73741913]
[122.62630463 76.38326263]
[130.78936768 88.96755219]
[142.84182739 97.89718628]
[158.27287292 95.77109528]
[170.36857605 104.99870300]
[172.30038452 119.72296143]
[184.35284424 128.65258789]
[196.40528870 137.58222961]
[214.66798401 139.17004395]
[221.18124390 155.38357544]
[233.50556946 163.93406677]
[245.82991028 172.48454285]
[258.15423584 181.03503418]
[274.53292847 181.85375977]
[281.77145386 196.56892395]
[272.42340088 210.04283142]
[256.10528564 208.41467285]
[249.60375977 193.35935974]
[237.27941895 184.80888367]
[224.95509338 176.25839233]
[212.63075256 167.70791626]
[200.56118774 169.53642273]
[190.19038391 162.36209106]
[187.47566223 149.63467407]
[175.42320251 140.70504761]
[163.37074280 131.77540588]
[148.72210693 134.21525574]
[136.37199402 125.33102417]
[133.91218567 109.94963837]
[121.85973358 101.02000427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 14]
[8 13]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 65]
[29 64]
[30 63]
[31 62]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[72 100]
[73 99]
[76 96]
[77 95]
[78 94]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
