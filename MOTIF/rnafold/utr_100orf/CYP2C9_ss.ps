%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUAACAAGAAGAGAAGGCUUCAAUGGAUUCUCUUGUGGUCCUUGUGCUCUGUCUCUCAUGUUUGCUUCUCCUUUCACUCUGGAGACAGAGCUCUGGGAGAGGAAAACUCCCUCCUGGCCCCA\
) } def
/len { sequence length } bind def

/coor [
[74.95020294 176.44187927]
[63.19083786 167.12966919]
[56.42237854 153.74354553]
[55.89340210 138.75288391]
[61.70148468 124.92298126]
[72.77521515 114.80504608]
[87.06877136 110.26581573]
[72.36618042 113.23801422]
[57.66359711 116.21020508]
[42.96100616 119.18239594]
[28.25842094 122.15458679]
[13.81905651 126.21719360]
[-0.27633241 131.34750366]
[-14.37172127 136.47779846]
[-28.46711159 141.60810852]
[-42.56250000 146.73840332]
[-56.65789032 151.86869812]
[-70.75328064 156.99900818]
[-76.94882202 168.39335632]
[-88.88010406 172.34136963]
[-99.91878510 167.22863770]
[-114.13769531 172.00593567]
[-122.53702545 185.67454529]
[-138.47738647 187.48683167]
[-149.73069763 176.05255127]
[-147.66438293 160.14312744]
[-133.86354065 151.96289062]
[-118.91499329 157.78703308]
[-104.69608307 153.00973511]
[-93.87967682 139.25012207]
[-75.88358307 142.90362549]
[-61.78819275 137.77331543]
[-47.69280243 132.64302063]
[-33.59741211 127.51271057]
[-19.50202370 122.38240814]
[-5.40663481 117.25210571]
[8.68875504 112.12180328]
[-4.04254436 104.18997192]
[-7.65987015 89.63266754]
[-0.12206474 76.66419220]
[14.31749630 72.60227966]
[27.51096725 79.73896790]
[32.01363754 94.04721832]
[25.28622818 107.45200348]
[39.98881531 104.47980499]
[54.69140244 101.50761414]
[69.39398956 98.53542328]
[84.09658051 95.56323242]
[95.82405090 86.21088409]
[101.99335480 72.53829956]
[108.16266632 58.86570740]
[114.33197021 45.19312286]
[120.50127411 31.52053261]
[126.67058563 17.84794617]
[132.83988953 4.17535782]
[139.00920105 -9.49722958]
[145.17849731 -23.16981697]
[151.34780884 -36.84240723]
[157.51712036 -50.51499176]
[149.99581909 -63.95881271]
[151.81163025 -79.07688904]
[162.06010437 -90.09653473]
[176.65750122 -92.93445587]
[182.82681274 -106.60704803]
[172.39282227 -117.66146851]
[166.98808289 -131.86911011]
[167.43678284 -147.06343079]
[173.67050171 -160.92738342]
[184.73863220 -171.34681702]
[198.95338440 -176.73286438]
[214.14709473 -176.26417542]
[228.00282288 -170.01223755]
[238.40769958 -158.93040466]
[243.77503967 -144.70858765]
[243.28637695 -129.51550293]
[237.01620483 -115.66799927]
[225.92068481 -105.27770996]
[211.69181824 -99.92907715]
[196.49940491 -100.43773651]
[190.33009338 -86.76515198]
[197.86117554 -73.94248199]
[196.38011169 -58.96681595]
[186.24636841 -47.60194016]
[171.18969727 -44.34568787]
[165.02040100 -30.67309952]
[158.85108948 -17.00051117]
[152.68177795 -3.32792330]
[146.51248169 10.34466457]
[140.34317017 24.01725197]
[134.17385864 37.68983841]
[128.00456238 51.36242676]
[121.83525085 65.03501892]
[115.66594696 78.70760345]
[109.49663544 92.38018799]
[115.00650787 96.40379333]
[118.29287720 103.81813812]
[130.02033997 113.17048645]
[141.74781799 122.52283478]
[153.47529602 131.87518311]
[165.20275879 141.22752380]
[176.93023682 150.57987976]
[188.65771484 159.93222046]
[197.42121887 162.88293457]
[200.55714417 169.66683960]
[212.04782104 179.30865479]
[223.53848267 188.95046997]
[239.77365112 191.26373291]
[245.63598633 206.57925415]
[235.09481812 219.14173889]
[218.99400330 216.02796936]
[213.89666748 200.44114685]
[202.40600586 190.79933167]
[190.91532898 181.15751648]
[179.30535889 171.65969849]
[167.57789612 162.30734253]
[155.85041809 152.95500183]
[144.12294006 143.60264587]
[132.39547729 134.25030518]
[120.66799927 124.89795685]
[108.94052887 115.54560852]
[119.59077454 126.10838318]
[124.82783508 140.16445923]
[123.68562317 155.12091064]
[116.37485504 168.21871948]
[104.24413300 177.04173279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[21 29]
[22 28]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[63 80]
[64 79]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
