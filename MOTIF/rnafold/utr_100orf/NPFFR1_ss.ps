%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCAACUGGGGGCAUCAUGGAGGGGGAGCCCUCCCAGCCUCCCAACAGCAGUUGGCCCCUAAGUCAGAAUGGGACUAACACUGAGGCCACCCCGGCUACAAACCUCACCUUCUCCU\
) } def
/len { sequence length } bind def

/coor [
[51.02700424 156.55744934]
[60.71647263 145.10694885]
[73.18617249 136.76988220]
[87.46568298 132.19267273]
[72.57140350 133.97048950]
[64.94313812 147.35389709]
[51.05928040 153.60623169]
[36.33024216 150.52087402]
[26.36163521 139.48616028]
[11.46736050 141.26397705]
[-3.42691398 143.04177856]
[-18.32118797 144.81958008]
[-33.19069672 146.79383850]
[-48.03285217 148.96418762]
[-62.87500763 151.13453674]
[-67.00588989 161.20841980]
[-74.93328857 168.55256653]
[-85.13789368 171.85289001]
[-95.70283508 170.56149292]
[-104.67366791 164.98634338]
[-110.41996765 156.22140503]
[-125.38730621 157.21067810]
[-140.35464478 158.19996643]
[-155.32199097 159.18923950]
[-170.28933716 160.17851257]
[-185.25666809 161.16780090]
[-198.57878113 170.73094177]
[-213.40824890 163.72959900]
[-214.48980713 147.36614990]
[-200.71083069 138.47392273]
[-186.24595642 146.20045471]
[-171.27861023 145.21118164]
[-156.31126404 144.22189331]
[-141.34393311 143.23262024]
[-126.37658691 142.24333191]
[-111.40924072 141.25405884]
[-99.85974121 125.70129395]
[-80.31981659 123.42483521]
[-65.04535675 136.29237366]
[-50.20320511 134.12202454]
[-35.36104965 131.95167542]
[-29.11964226 127.81857300]
[-20.09899521 129.92530823]
[-5.20472097 128.14750671]
[9.68955326 126.36969757]
[24.58382797 124.59188843]
[31.67513466 111.52087402]
[45.26416779 105.05541992]
[60.22958755 107.86425781]
[70.79360199 119.07621002]
[85.68787384 117.29840088]
[80.91507721 93.53096008]
[99.32905579 82.16116333]
[105.11500549 68.32199097]
[110.90095520 54.48281479]
[116.68691254 40.64363861]
[122.47286224 26.80446434]
[120.65747833 11.08775425]
[132.70529175 2.32993460]
[138.49124146 -11.50924015]
[144.27720642 -25.34841537]
[134.46823120 -37.09756851]
[131.25424194 -52.06182098]
[135.37382507 -66.80250549]
[145.88029480 -77.93231201]
[160.35935974 -82.89369965]
[175.48382568 -80.54656982]
[187.77821350 -71.43028259]
[194.41734314 -57.63969421]
[193.87562561 -42.34377670]
[186.27751160 -29.05742073]
[173.36900330 -20.83373642]
[158.11637878 -19.56246376]
[152.33042908 -5.72328806]
[146.54446411 8.11588669]
[148.77369690 22.84272575]
[136.31204224 32.59041595]
[130.52607727 46.42959213]
[124.74013519 60.26876450]
[118.95417786 74.10794067]
[113.16822815 87.94711304]
[119.09029388 96.63372803]
[119.33046722 107.99394226]
[112.89866638 118.37651062]
[127.60559845 121.32713318]
[142.65812683 116.45561218]
[153.61474609 126.54530334]
[168.32168579 129.49592590]
[183.02861023 132.44654846]
[197.73553467 135.39718628]
[211.83265686 127.73880005]
[226.55293274 134.11791992]
[230.60421753 149.64102173]
[220.87872314 162.40010071]
[204.83702087 162.60749817]
[194.78491211 150.10411072]
[180.07798767 147.15348816]
[165.37104797 144.20286560]
[150.66412354 141.25222778]
[136.66352844 146.33480835]
[124.65496826 136.03407288]
[109.94804382 133.08343506]
[123.82485962 138.77850342]
[135.59503174 148.07707214]
[144.34709167 160.25907898]
[149.40333557 174.38121033]
[150.37220764 189.34988403]
[147.17869568 204.00598145]
[140.07008362 217.21461487]
[129.59684753 227.95291138]
[116.56998444 235.38937378]
[101.99826050 238.94813538]
[87.01004028 238.35360718]
[72.76597595 233.65185547]
[60.36906815 225.20693970]
[50.77928543 213.67280579]
[44.73922729 199.94262695]
[42.71661758 185.07962036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[9 46]
[10 45]
[11 44]
[12 43]
[13 41]
[14 40]
[15 39]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[59 75]
[60 74]
[61 73]
[84 102]
[85 101]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
