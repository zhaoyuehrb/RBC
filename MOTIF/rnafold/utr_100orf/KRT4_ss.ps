%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACCGGCCUGGGCCCUGUCACUUCUCUGAUAGCUCCCAGCUCGCUCUCUGCAGCCAUGAUUGCCAGACAGCAGUGUGUCCGAGGCGGGCCCCGGGGCUUCAGCUGUGGCUCGGCCAUUGUAGGCGGUGGCAAGAGAGGUGCCUUCAGCUCAGUCU\
) } def
/len { sequence length } bind def

/coor [
[386.71719360 694.98822021]
[391.94830322 683.64569092]
[400.43899536 674.45123291]
[393.58956909 661.10638428]
[386.74011230 647.76153564]
[379.89068604 634.41668701]
[373.04125977 621.07177734]
[366.19180298 607.72692871]
[360.30834961 603.18804932]
[359.34182739 594.05010986]
[352.75738525 580.57250977]
[346.17291260 567.09490967]
[339.58847046 553.61737061]
[332.47671509 540.41040039]
[324.84875488 527.49475098]
[317.22079468 514.57910156]
[309.59283447 501.66345215]
[295.14926147 498.21105957]
[287.22943115 485.22140503]
[290.94857788 470.09506226]
[283.32061768 457.17941284]
[275.69265747 444.26376343]
[268.06466675 431.34811401]
[260.43670654 418.43246460]
[248.97236633 418.04043579]
[239.03070068 412.08053589]
[233.16178894 401.94573975]
[232.93643188 390.11621094]
[238.52751160 379.55273438]
[231.41575623 366.34579468]
[224.30400085 353.13885498]
[217.19223022 339.93194580]
[211.22024536 335.51016235]
[210.07336426 326.39309692]
[203.22392273 313.04821777]
[196.37449646 299.70336914]
[189.52505493 286.35852051]
[182.67561340 273.01367188]
[175.82617188 259.66879272]
[159.62969971 255.22967529]
[151.47190857 240.16590881]
[156.81071472 223.53381348]
[149.69895935 210.32688904]
[142.58718872 197.11996460]
[135.47543335 183.91304016]
[128.36367798 170.70611572]
[121.25192261 157.49917603]
[115.27992249 153.07739258]
[114.13304901 143.96032715]
[107.28361511 130.61546326]
[100.43417358 117.27061462]
[81.57339478 117.80930328]
[66.08284760 97.98966980]
[55.42398071 87.43559265]
[44.76511765 76.88150787]
[34.10625076 66.32743073]
[18.30538177 66.65612030]
[6.95805740 55.65549088]
[6.79644537 39.85202789]
[17.91642761 28.62164307]
[33.72071457 28.62712479]
[44.83290482 39.86521912]
[44.66033173 55.66856766]
[55.31919861 66.22264862]
[65.97806549 76.77672577]
[76.63692474 87.33080292]
[83.30935669 83.90608978]
[96.65421295 77.05664825]
[103.32663727 73.63192749]
[100.96548462 58.81892776]
[98.60433197 44.00592804]
[96.24317932 29.19293022]
[83.30256653 20.12011719]
[80.64994049 4.54002905]
[89.85906219 -8.30394268]
[105.46632385 -10.79169750]
[118.21221161 -1.44729590]
[120.53482056 14.18539524]
[111.05618286 26.83177757]
[113.41733551 41.64477921]
[115.77848816 56.45777893]
[118.13964081 71.27077484]
[125.21215820 95.41107941]
[113.77902985 110.42117310]
[120.62847137 123.76602936]
[127.47790527 137.11088562]
[134.45884705 150.38742065]
[141.57060242 163.59434509]
[148.68235779 176.80126953]
[155.79411316 190.00820923]
[162.90588379 203.21513367]
[170.01763916 216.42205811]
[183.30868530 218.79292297]
[192.65882874 228.25984192]
[194.80072021 241.19473267]
[189.17103577 252.81936646]
[196.02046204 266.16421509]
[202.86990356 279.50906372]
[209.71934509 292.85394287]
[216.56878662 306.19879150]
[223.41822815 319.54364014]
[230.39916992 332.82019043]
[237.51092529 346.02709961]
[244.62268066 359.23403931]
[251.73443604 372.44097900]
[270.04348755 377.14395142]
[278.99667358 393.43078613]
[273.35235596 410.80447388]
[280.98031616 423.72015381]
[288.60830688 436.63580322]
[296.23626709 449.55145264]
[303.86422729 462.46710205]
[318.90646362 466.51300049]
[326.45831299 479.71997070]
[322.50848389 494.03549194]
[330.13644409 506.95114136]
[337.76440430 519.86682129]
[345.39236450 532.78247070]
[349.36010742 534.82733154]
[352.15939331 537.75189209]
[353.65615845 541.06951904]
[353.89199829 544.30114746]
[353.06607056 547.03289795]
[359.65051270 560.51049805]
[366.23495483 573.98803711]
[372.81939697 587.46563721]
[379.53665161 600.87750244]
[386.38610840 614.22235107]
[393.23553467 627.56719971]
[400.08499146 640.91204834]
[406.93441772 654.25695801]
[413.78384399 667.60180664]
[431.65408325 666.62652588]
[448.11752319 673.50909424]
[459.90676880 686.83398438]
[464.70379639 703.91192627]
[461.59552002 721.32293701]
[451.24731445 735.60083008]
[458.87530518 748.51647949]
[466.50326538 761.43212891]
[480.18322754 769.38006592]
[479.99328613 784.27343750]
[487.62124634 797.18908691]
[502.16177368 804.77233887]
[502.59432983 821.16577148]
[488.47393799 829.50524902]
[474.32647705 821.21179199]
[474.70559692 804.81707764]
[467.07763672 791.90142822]
[453.94326782 784.87731934]
[453.58761597 769.06011963]
[445.95965576 756.14447021]
[438.33166504 743.22882080]
[426.23812866 745.57464600]
[413.98623657 744.07360840]
[402.77215576 738.85699463]
[393.69546509 730.41967773]
[387.65124512 719.57293701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 132]
[4 131]
[5 130]
[6 129]
[7 128]
[8 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 118]
[15 117]
[16 116]
[17 115]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[29 105]
[30 104]
[31 103]
[32 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[49 86]
[50 85]
[51 84]
[53 66]
[54 65]
[55 64]
[56 63]
[69 82]
[70 81]
[71 80]
[72 79]
[138 153]
[139 152]
[140 151]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
