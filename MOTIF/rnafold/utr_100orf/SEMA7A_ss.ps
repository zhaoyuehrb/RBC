%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCUCGGCUGAUUGCCGCUGUCGCUCCCGGGGCCACGGGAUGACGCCUCCUCCGCCCGGACGUGCCGCCCCCAGCGCACCGCGCGCCCGCGUCCCUGGCCCGCCGGCUCGGUUGGGGCUUCCGCUGCGGCUGCGGCUGC\
) } def
/len { sequence length } bind def

/coor [
[49.59613419 311.84887695]
[45.34120941 326.23272705]
[41.08628082 340.61660767]
[36.83135605 355.00045776]
[41.18954086 370.80990601]
[29.48612785 382.29739380]
[13.76058578 377.64556885]
[10.19000244 361.63986206]
[22.44748878 350.74554443]
[26.70241547 336.36166382]
[30.95734215 321.97781372]
[35.21226883 307.59393311]
[24.81215668 294.93984985]
[23.96683311 278.41629028]
[33.20444489 264.49075317]
[49.06784058 258.73126221]
[53.00352478 244.25680542]
[56.93920898 229.78233337]
[60.87489700 215.30784607]
[64.81057739 200.83337402]
[60.68372345 186.52189636]
[71.77082062 175.23532104]
[75.70650482 160.76084900]
[79.64218903 146.28637695]
[83.57787323 131.81190491]
[87.51355743 117.33743286]
[80.34689331 110.21909332]
[77.06521606 100.28339386]
[78.68932343 89.57966614]
[85.19065094 80.47337341]
[95.42896271 75.12385559]
[107.34247589 74.97702026]
[105.02873993 60.15653992]
[102.71501160 45.33605957]
[100.40127563 30.51557922]
[98.08753967 15.69509888]
[95.77380371 0.87461823]
[91.32631683 -7.19655657]
[93.57659912 -14.29897499]
[91.59128571 -29.16701317]
[89.60597992 -44.03504944]
[87.62067413 -58.90308762]
[85.63536835 -73.77112579]
[83.65005493 -88.63916779]
[79.38220978 -96.80675507]
[81.78905487 -103.85765076]
[80.13314819 -118.76596832]
[71.55014038 -121.88688660]
[64.50902557 -127.63442230]
[59.77830124 -135.34407043]
[57.86198044 -144.13935852]
[58.94601822 -153.03141785]
[62.88069153 -161.03022766]
[69.20051575 -167.25476074]
[77.17912292 -171.03005981]
[77.17912292 -186.03005981]
[77.17912292 -201.03005981]
[69.44182587 -214.83023071]
[77.17912292 -227.55751038]
[77.17912292 -242.55751038]
[77.17912292 -257.55749512]
[68.60106659 -267.25875854]
[68.95447540 -279.80166626]
[77.50041199 -288.43261719]
[77.83224487 -303.42895508]
[78.16407776 -318.42526245]
[78.49591064 -333.42160034]
[66.06609344 -342.71026611]
[61.50206757 -357.54095459]
[66.55879211 -372.21096802]
[79.29185486 -381.07937622]
[94.80513763 -380.73611450]
[107.13345337 -371.31314087]
[111.53633118 -356.43383789]
[106.32075500 -341.81954956]
[93.49224091 -333.08978271]
[93.16040802 -318.09344482]
[92.82857513 -303.09710693]
[92.49674225 -288.10079956]
[101.76360321 -273.23779297]
[92.17912292 -257.55749512]
[92.17912292 -242.55751038]
[92.17912292 -227.55751038]
[99.91642761 -214.83023071]
[92.17912292 -201.03005981]
[92.17912292 -186.03005981]
[92.17912292 -171.03005981]
[108.59159851 -157.63780212]
[109.97599792 -136.22077942]
[95.04146576 -120.42188263]
[96.69737244 -105.51356506]
[98.51809692 -90.62447357]
[100.50340271 -75.75643158]
[102.48870850 -60.88839722]
[104.47402191 -46.02035904]
[106.45932770 -31.15232086]
[108.44463348 -16.28428268]
[110.59428406 -1.43911576]
[112.90802002 13.38136482]
[115.22175598 28.20184517]
[117.53549194 43.02232361]
[119.84922028 57.84280396]
[122.16295624 72.66328430]
[131.53382874 84.37596130]
[145.48535156 89.88549042]
[165.20437622 85.95838928]
[176.68963623 101.45642090]
[190.87121582 106.34342957]
[205.05278015 111.23043823]
[219.23435974 116.11744690]
[233.41593933 121.00445557]
[248.40904236 115.29598236]
[262.14627075 123.58259583]
[264.08963013 139.50750732]
[252.74830627 150.85450745]
[236.82241821 148.91912842]
[228.52893066 135.18603516]
[214.34735107 130.29902649]
[200.16577148 125.41201782]
[185.98420715 120.52500916]
[171.80262756 115.63800049]
[162.96778870 120.96151733]
[152.44297791 120.49082184]
[143.76240540 114.13967133]
[139.97583008 103.83701324]
[126.02429962 98.32749176]
[118.04044342 115.40360260]
[101.98802948 121.27311707]
[98.05234528 135.74758911]
[94.11666107 150.22206116]
[90.18097687 164.69653320]
[86.24529266 179.17100525]
[90.09064484 194.51779175]
[79.28504944 204.76905823]
[75.34936523 219.24353027]
[71.41368103 233.71801758]
[67.47799683 248.19248962]
[63.54231644 262.66696167]
[72.97728729 272.77661133]
[76.13965607 286.12704468]
[72.30333710 299.18661499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[22 132]
[23 131]
[24 130]
[25 129]
[26 128]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[46 91]
[47 90]
[55 87]
[56 86]
[57 85]
[59 83]
[60 82]
[61 81]
[64 79]
[65 78]
[66 77]
[67 76]
[104 126]
[105 125]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
