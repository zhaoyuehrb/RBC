%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGGGGCUGCCUGCGGAAGGGGCCGUGCGCGUGGGGUCGCUCCGCAGCUGCGAGUUCAUGGCGUCCCGGUGCUCCGAGCCCUACCCGGAGGUCUCCAGAAUCCCUACCGUCAGGGGAUGCAACGGCUCCCUGUCUGGUGCCCUCUCCUGCUGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[114.55271912 186.56433105]
[110.81109619 172.03846741]
[107.06948090 157.51261902]
[103.32786560 142.98677063]
[99.58625031 128.46092224]
[95.84462738 113.93507385]
[86.65562439 102.07918549]
[73.52224731 94.83249664]
[60.38887405 87.58580780]
[47.25550079 80.33911896]
[40.56930161 80.08257294]
[35.76440430 76.93309021]
[33.76131821 72.54824829]
[20.91881561 64.79776001]
[8.07631207 57.04726791]
[-4.76619148 49.29677963]
[-20.57929993 48.79065704]
[-27.47811127 35.59006500]
[-40.32061386 27.83957291]
[-53.16312027 20.08908272]
[-68.32414246 23.66415977]
[-81.23785400 15.62111378]
[-84.55271149 1.14536512]
[-97.39521790 -6.60512543]
[-110.23772430 -14.35561562]
[-123.08022308 -22.10610580]
[-135.92272949 -29.85659790]
[-148.83978271 -37.48220062]
[-161.83015442 -44.98220062]
[-180.21609497 -44.53434372]
[-188.43054199 -60.01834488]
[-201.56391907 -67.26503754]
[-214.69729614 -74.51172638]
[-227.83067322 -81.75841522]
[-236.90524292 -83.17722321]
[-241.14646912 -89.27509308]
[-254.13685608 -96.77509308]
[-267.12722778 -104.27509308]
[-280.11761475 -111.77509308]
[-293.10800171 -119.27509308]
[-302.15335083 -120.86960602]
[-306.27554321 -127.04857635]
[-319.11804199 -134.79907227]
[-331.96054077 -142.54956055]
[-344.80303955 -150.30004883]
[-368.57818604 -148.35784912]
[-379.58435059 -168.71266174]
[-393.23980713 -174.91981506]
[-406.89523315 -181.12698364]
[-423.15609741 -179.00167847]
[-432.91088867 -192.18408203]
[-426.12475586 -207.11326599]
[-409.77865601 -208.43135071]
[-400.68807983 -194.78242493]
[-387.03262329 -188.57525635]
[-373.37719727 -182.36810303]
[-368.06488037 -186.33520508]
[-361.72891235 -188.45727539]
[-354.99530029 -188.49046326]
[-348.54019165 -186.39906311]
[-343.02185059 -182.36228943]
[-339.01354980 -176.75941467]
[-336.94421387 -170.13427734]
[-337.05255127 -163.14254761]
[-324.21005249 -155.39205933]
[-311.36755371 -147.64157104]
[-298.52505493 -139.89108276]
[-285.60800171 -132.26547241]
[-272.61761475 -124.76548004]
[-259.62722778 -117.26548004]
[-246.63685608 -109.76548004]
[-233.64646912 -102.26548004]
[-220.58398438 -94.89178467]
[-207.45060730 -87.64509583]
[-194.31723022 -80.39840698]
[-181.18385315 -73.15171814]
[-169.44728088 -76.20554352]
[-158.43264771 -70.23483276]
[-154.33015442 -57.97258377]
[-141.33978271 -50.47258377]
[-133.93824768 -49.84850693]
[-128.17224121 -42.69910049]
[-115.32973480 -34.94860840]
[-102.48722839 -27.19812012]
[-89.64472961 -19.44762802]
[-76.80222321 -11.69713879]
[-62.44976425 -15.51060772]
[-49.31523132 -7.83345509]
[-45.41262817 7.24657917]
[-32.57012558 14.99707031]
[-19.72762108 22.74756050]
[-4.83309364 22.69931412]
[2.98429894 36.45427322]
[15.82680225 44.20476532]
[28.66930580 51.95525360]
[41.51181030 59.70574570]
[54.50218964 67.20574951]
[67.63556671 74.45243835]
[80.76893616 81.69912720]
[93.90231323 88.94581604]
[81.87949371 79.97631836]
[75.92369080 66.20938873]
[77.61846924 51.30543900]
[86.51321411 39.22721100]
[100.24294281 33.18613052]
[115.15711212 34.78842926]
[127.29028320 43.60808182]
[133.41641235 57.30006790]
[131.90666199 72.22389984]
[123.16255188 84.41144562]
[137.93466187 87.01616669]
[152.70678711 89.62088776]
[167.47889709 92.22560883]
[178.65106201 81.61952972]
[193.74971008 79.64868927]
[206.95748901 86.86107635]
[213.30967712 100.30681610]
[228.08178711 102.91153717]
[242.85391235 105.51625824]
[257.62603760 108.12097931]
[272.39813232 110.72570038]
[281.44335938 109.13036346]
[287.43026733 113.52682495]
[302.14910889 116.41750336]
[317.48150635 110.59948730]
[330.01342773 121.17694855]
[326.85311890 137.26869202]
[311.25161743 142.32092285]
[299.25842285 131.13633728]
[284.53958130 128.24565125]
[269.79342651 125.49781799]
[255.02130127 122.89309692]
[240.24919128 120.28837585]
[225.47706604 117.68365479]
[210.70495605 115.07892609]
[200.13714600 125.54121399]
[185.25910950 127.80131531]
[171.74508667 120.78528595]
[164.87417603 106.99772644]
[150.10206604 104.39300537]
[135.32994080 101.78828430]
[120.55783081 99.18355560]
[110.37047577 110.19345856]
[114.11209869 124.71930695]
[117.85371399 139.24516296]
[121.59532928 153.77101135]
[125.33694458 168.29685974]
[129.07856750 182.82270813]
[140.01362610 194.25665283]
[135.69560242 208.51161194]
[139.43722534 223.03746033]
[143.17883301 237.56330872]
[156.91418457 245.38096619]
[161.01802063 260.64312744]
[153.05560303 274.29507446]
[137.75088501 278.23730469]
[124.18389130 270.13101196]
[120.40368652 254.78546143]
[128.65298462 241.30493164]
[124.91136932 226.77908325]
[121.16975403 212.25323486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 100]
[8 99]
[9 98]
[10 97]
[13 96]
[14 95]
[15 94]
[16 93]
[18 91]
[19 90]
[20 89]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[28 80]
[29 79]
[31 76]
[32 75]
[33 74]
[34 73]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[42 67]
[43 66]
[44 65]
[45 64]
[47 56]
[48 55]
[49 54]
[110 142]
[111 141]
[112 140]
[113 139]
[117 135]
[118 134]
[119 133]
[120 132]
[121 131]
[123 130]
[124 129]
[150 161]
[151 160]
[152 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
