%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAAUUAGUUCUAUUACUUAUGUUUCUCCUUGUCUUUAUAGGCAAUACUGCACCUGCAUUCUCAGUGACCUUGGAAUCUAUGGACAUACCACAAAAUA\
) } def
/len { sequence length } bind def

/coor [
[120.00407410 359.38064575]
[119.46494293 344.39031982]
[124.23577881 330.16925049]
[133.70619202 318.53689575]
[146.66448975 310.98159790]
[161.45271301 308.47000122]
[176.17881775 311.32342529]
[188.95565796 319.17413330]
[183.92291260 305.04360962]
[178.89016724 290.91311646]
[173.63825989 276.86257935]
[168.16848755 262.89541626]
[162.69871521 248.92825317]
[157.22894287 234.96109009]
[151.75917053 220.99392700]
[145.64392090 207.29707336]
[138.89649963 193.90036011]
[132.14906311 180.50363159]
[125.40164185 167.10690308]
[118.65422058 153.71017456]
[106.39273834 156.49687195]
[93.81859589 156.52038574]
[81.54678345 153.77957153]
[70.17749023 148.40847778]
[60.26676178 140.66979980]
[52.29933167 130.94203186]
[46.66486740 119.70092773]
[43.63894272 107.49628448]
[43.36955261 94.92501068]
[45.86987305 82.60195160]
[51.01761246 71.12979889]
[58.56100845 61.06964111]
[49.07896042 49.44678497]
[39.59691620 37.82392883]
[30.11486816 26.20107079]
[20.63282204 14.57821465]
[11.15077496 2.95535827]
[-4.36409950 -2.35695744]
[-7.25498772 -18.49928665]
[5.45200825 -28.86578560]
[20.68502045 -22.79228783]
[22.77363205 -6.52668810]
[32.25568008 5.09616852]
[41.73772430 16.71902466]
[51.21977234 28.34188080]
[60.70181656 39.96473694]
[70.18386078 51.58759308]
[79.47548676 46.97635269]
[89.45024109 44.12992477]
[99.77612305 43.14305115]
[110.10945892 44.04857635]
[114.70031738 29.76838112]
[119.29117584 15.48818398]
[115.30470276 -0.41904828]
[127.27411652 -11.62909031]
[142.88632202 -6.61001253]
[146.08081055 9.47498894]
[133.57138062 20.07904243]
[128.98051453 34.35923767]
[124.38965607 48.63943481]
[140.51829529 60.11227036]
[151.73677063 76.41886139]
[156.68557739 95.58309937]
[154.76499939 115.28260040]
[146.20779419 133.13009644]
[132.05094910 146.96275330]
[138.79837036 160.35948181]
[145.54579163 173.75619507]
[152.29321289 187.15292358]
[159.04064941 200.54965210]
[163.71908569 203.59260559]
[166.37393188 207.75640869]
[166.92462158 212.02856445]
[165.72633362 215.52415466]
[171.19610596 229.49131775]
[176.66587830 243.45848083]
[182.13565063 257.42562866]
[187.60542297 271.39279175]
[193.75474548 278.39126587]
[193.02067566 285.88037109]
[198.05342102 300.01086426]
[203.08618164 314.14138794]
[211.24923706 326.72567749]
[222.10037231 337.08197021]
[232.95150757 347.43826294]
[248.95918274 348.50302124]
[257.98861694 361.76382446]
[253.11318970 377.04812622]
[238.07290649 382.63113403]
[224.40541077 374.23001099]
[222.59519958 358.28939819]
[211.74406433 347.93310547]
[200.89294434 337.57681274]
[202.85249329 352.44827271]
[199.45304871 367.05798340]
[191.12951660 379.53671265]
[178.94688416 388.28790283]
[164.46380615 392.19183350]
[149.53335571 390.74908447]
[136.06578064 384.14419556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 82]
[9 81]
[10 80]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[51 60]
[52 59]
[53 58]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
