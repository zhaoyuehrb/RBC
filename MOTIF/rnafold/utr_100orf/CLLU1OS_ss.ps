%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGAACAAAUUGGGGCACAACGAACUUAAGGAAUGCCUUAAGACUGCCACUGAUUCUCUACAGACAGUGCAGCCUAGUAUCUCCCAGACUUGUACUUCCU\
) } def
/len { sequence length } bind def

/coor [
[96.51514435 375.44631958]
[104.75019836 361.26477051]
[104.29275513 346.27175903]
[91.89801025 338.05541992]
[86.65607452 323.94915771]
[90.77368164 309.28973389]
[102.87353516 299.75561523]
[102.41609192 284.76257324]
[101.95864868 269.76956177]
[101.50120544 254.77653503]
[91.45285797 240.47854614]
[100.07791901 224.29927063]
[99.16345978 209.32716370]
[98.24900055 194.35507202]
[97.33454132 179.38296509]
[96.42008209 164.41087341]
[95.50562286 149.43876648]
[86.13871002 147.66818237]
[77.28292847 144.13984680]
[69.26483917 138.98385620]
[62.38010025 132.39035034]
[56.88259125 124.60245514]
[52.97502518 115.90734100]
[50.80150223 106.62564850]
[50.44216156 97.09963989]
[51.91025543 87.68058014]
[55.15165329 78.71579742]
[42.72747040 70.31105042]
[30.30329132 61.90630722]
[17.87910843 53.50156403]
[5.45492744 45.09682083]
[-6.96925402 36.69207764]
[-19.39343643 28.28733253]
[-35.78063965 27.66156197]
[-43.19194412 13.03266525]
[-34.00323486 -0.55040002]
[-17.66707039 0.88545769]
[-10.98869228 15.86315155]
[1.43548930 24.26789474]
[13.85967064 32.67263794]
[26.28385162 41.07738113]
[38.70803452 49.48212433]
[51.13221741 57.88686752]
[63.55639648 66.29161072]
[88.74269867 51.65059662]
[117.80588531 53.66057587]
[125.23975372 40.63224030]
[132.67361450 27.60389900]
[140.10748291 14.57555962]
[141.68977356 5.40154743]
[147.97193909 1.26824450]
[155.79965210 -11.52733040]
[163.62738037 -24.32290459]
[171.45510864 -37.11848068]
[172.02658081 -43.98451233]
[175.54548645 -48.72020340]
[180.17041016 -50.43489838]
[188.76364136 -62.72946167]
[197.35687256 -75.02403259]
[198.23248291 -91.39978790]
[212.97270203 -98.58714294]
[226.41406250 -89.19235992]
[224.72924805 -72.87998962]
[209.65144348 -66.43079376]
[201.05821228 -54.13623047]
[192.46498108 -41.84166336]
[184.25068665 -29.29075623]
[176.42295837 -16.49518204]
[168.59523010 -3.69960666]
[160.76750183 9.09596825]
[153.13581848 22.00942612]
[145.70195007 35.03776550]
[138.26809692 48.06610489]
[130.83422852 61.09444427]
[138.76426697 68.98832703]
[144.72494507 78.45770264]
[148.41346741 89.02149963]
[149.64242554 100.14303589]
[148.34939575 111.25730133]
[144.60006714 121.79966736]
[138.58491516 131.23454285]
[130.60951233 139.08259583]
[121.07906342 144.94512939]
[110.47772217 148.52430725]
[111.39218140 163.49641418]
[112.30664062 178.46850586]
[113.22109985 193.44061279]
[114.13555908 208.41270447]
[115.05001831 223.38481140]
[124.23684692 232.59606934]
[124.60022736 245.19712830]
[116.49422455 254.31909180]
[116.95166779 269.31213379]
[117.40911102 284.30514526]
[117.86655426 299.29815674]
[130.52513123 308.07690430]
[135.52877808 322.45803833]
[131.15657043 336.85763550]
[119.28578186 345.81430054]
[119.74322510 360.80734253]
[128.82751465 374.46044922]
[121.30426788 389.03210449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[7 95]
[8 94]
[9 93]
[10 92]
[12 89]
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[46 74]
[47 73]
[48 72]
[49 71]
[51 70]
[52 69]
[53 68]
[54 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
