%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGGAGUUCCUGCUUGGUUCUUCCUGAGGACUGAGCACCUUCUAGACUACAUCCAGAUCUGUUUUCCCUGCAGAUUCGUGAAGAUGAGCAUCCGGACUCCACCCAGACUCCUGGAGCUUGCAGGGCGGAGCCUGCUGAGGGACCAAGCCUUGGCCAUGUCCACCCUGGAGGAGCUGCCCACAG\
) } def
/len { sequence length } bind def

/coor [
[82.39942932 321.59426880]
[70.95463562 311.43182373]
[65.55434418 297.11068726]
[67.43949890 281.92169189]
[76.17691803 269.35522461]
[89.75879669 262.29895020]
[89.75879669 247.29895020]
[89.63279724 232.29948425]
[89.38081360 217.30158997]
[89.12882233 202.30371094]
[88.87683868 187.30583191]
[88.62484741 172.30795288]
[88.37286377 157.31005859]
[88.12087250 142.31217957]
[74.58300018 135.85261536]
[62.76628494 145.09194946]
[50.94957352 154.33128357]
[39.13285828 163.57061768]
[27.31614685 172.80995178]
[15.49943352 182.04928589]
[3.68272114 191.28862000]
[-8.13399124 200.52795410]
[-19.95070457 209.76728821]
[-31.76741791 219.00662231]
[-43.58412933 228.24595642]
[-52.33761978 242.76535034]
[-68.71279144 238.37332153]
[-69.02550507 221.42225647]
[-52.82346344 216.42924500]
[-41.00675201 207.18991089]
[-29.19003868 197.95057678]
[-17.37332535 188.71124268]
[-5.55661297 179.47190857]
[6.26009941 170.23257446]
[18.07681274 160.99324036]
[29.89352608 151.75390625]
[41.71023941 142.51457214]
[53.52695084 133.27523804]
[65.34366608 124.03590393]
[61.24543381 111.13635254]
[61.57192993 98.20215607]
[65.90478516 86.64541626]
[53.35454941 78.43009949]
[40.80431366 70.21477509]
[28.25407410 61.99945068]
[12.97236538 65.01725006]
[0.36167011 56.50696564]
[-2.42116642 41.91959381]
[-14.97140408 33.70426941]
[-9.87785530 47.81298447]
[-12.41125870 62.59749603]
[-21.91149712 74.20549011]
[-35.90314484 79.61231995]
[-50.74046326 77.40916443]
[-62.55737686 68.17008209]
[-68.27480316 54.30245972]
[-66.40299225 39.41970825]
[-57.42966080 27.39975166]
[-43.69295502 21.37456894]
[-28.77098656 22.91455650]
[-39.77084351 12.71636486]
[-50.77070236 2.51817298]
[-61.77056122 -7.68001890]
[-72.77041626 -17.87821007]
[-83.77027893 -28.07640266]
[-99.26211548 -25.94637299]
[-112.47110748 -34.31634903]
[-117.16037750 -49.23428345]
[-111.11579132 -63.65638733]
[-97.19141388 -70.77297974]
[-81.96192169 -67.22382355]
[-72.61820221 -54.68472290]
[-73.57208252 -39.07625961]
[-62.57222748 -28.87806892]
[-51.57236862 -18.67987633]
[-40.57250977 -8.48168564]
[-29.57265282 1.71650672]
[-18.57279396 11.91469860]
[-6.75608206 21.15403366]
[5.79415607 29.36935616]
[20.27656746 26.08372879]
[33.12132263 34.23645020]
[36.46939850 49.44921494]
[49.01963425 57.66453552]
[61.56987381 65.87985992]
[74.12010956 74.09518433]
[83.82134247 67.15065765]
[95.24006653 63.69337082]
[107.16410065 64.09033966]
[113.04954529 50.29317856]
[118.93498993 36.49602127]
[124.82043457 22.69886398]
[125.31243134 13.55629158]
[130.92237854 8.72068024]
[137.03877258 -4.97565985]
[143.15516663 -18.67199898]
[149.15629578 -32.41923523]
[155.04174805 -46.21639252]
[160.92718506 -60.01354980]
[159.22500610 -75.74291992]
[171.33557129 -84.41377258]
[177.22100830 -98.21092987]
[171.09480286 -112.77956390]
[177.14178467 -127.38126373]
[191.77436829 -133.35310364]
[206.31132507 -127.15208435]
[212.12812805 -112.45716858]
[205.77375793 -97.98659515]
[191.01817322 -92.32548523]
[185.13272095 -78.52832794]
[187.25585938 -63.78582001]
[174.72433472 -54.12810516]
[168.83889771 -40.33094788]
[162.95346069 -26.53379059]
[163.22148132 -19.13224602]
[156.85150146 -12.55560684]
[150.73510742 1.14073372]
[144.61871338 14.83707333]
[138.61758423 28.58430862]
[132.73214722 42.38146591]
[126.84670258 56.17862320]
[120.96125793 69.97578430]
[132.64022827 83.40349579]
[136.60961914 100.75128174]
[151.22547913 104.12418365]
[165.84133911 107.49708557]
[180.45721436 110.86998749]
[195.07307434 114.24288940]
[210.25965881 109.80683899]
[220.92118835 120.20785522]
[235.53704834 123.58075714]
[250.15290833 126.95365906]
[260.65814209 115.83665466]
[275.22119141 111.49919128]
[289.90246582 115.01016235]
[300.78234863 125.32927704]
[305.00781250 139.61251831]
[319.62368774 142.98541260]
[334.23956299 146.35832214]
[348.85540771 149.73121643]
[363.47128296 153.10412598]
[378.08715820 156.47702026]
[392.70303345 159.84992981]
[405.08114624 150.29397583]
[420.70358276 150.98182678]
[432.19390869 161.58872986]
[434.12677002 177.10639954]
[425.58947754 190.20787048]
[410.61312866 194.70704651]
[396.26904297 188.47953796]
[389.33010864 174.46578979]
[374.71426392 171.09289551]
[360.09838867 167.71998596]
[345.48251343 164.34709167]
[330.86666870 160.97418213]
[316.25079346 157.60128784]
[301.63491821 154.22837830]
[291.57778931 165.21562195]
[277.27624512 169.72361755]
[262.54110718 166.44618225]
[251.35139465 156.16574097]
[246.78001404 141.56951904]
[232.16413879 138.19662476]
[217.54827881 134.82371521]
[203.40713501 139.50102234]
[191.70018005 128.85874939]
[177.08430481 125.48585510]
[162.46844482 122.11295319]
[147.85258484 118.74005127]
[133.23670959 115.36714935]
[122.43525696 132.38429260]
[103.11875916 142.06019592]
[103.37074280 157.05807495]
[103.62273407 172.05595398]
[103.87471771 187.05384827]
[104.12670898 202.05172729]
[104.37869263 217.04960632]
[104.63068390 232.04748535]
[107.90941620 240.59609985]
[104.75879669 247.29895020]
[104.75879669 262.29895020]
[118.34067535 269.35522461]
[127.07808685 281.92169189]
[128.96325684 297.11068726]
[123.56295776 311.43182373]
[112.11816406 321.59426880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 181]
[7 180]
[8 178]
[9 177]
[10 176]
[11 175]
[12 174]
[13 173]
[14 172]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[42 86]
[43 85]
[44 84]
[45 83]
[48 80]
[49 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[89 122]
[90 121]
[91 120]
[92 119]
[94 118]
[95 117]
[96 116]
[97 114]
[98 113]
[99 112]
[101 110]
[102 109]
[124 170]
[125 169]
[126 168]
[127 167]
[128 166]
[130 164]
[131 163]
[132 162]
[137 157]
[138 156]
[139 155]
[140 154]
[141 153]
[142 152]
[143 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
