%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCCUUCAUCCUCUACCUUCCUUCUAGCAGAAAUGGCGGCUGCGGCGGCUCGAGUGGUGUUGUCAUCCGCGGCGCGGCGGCGGCUCUGGGGUUUCAGCGAGAGUCUUCUAAUCCGAGGCGCUGCGGGACGGU\
) } def
/len { sequence length } bind def

/coor [
[51.77257156 310.99456787]
[54.89126205 325.81185913]
[53.02732849 340.83865356]
[46.38295364 354.44494629]
[35.67887115 365.15481567]
[22.07617950 371.80654907]
[7.05039835 373.67861938]
[-7.76858950 370.56793213]
[-20.77333069 362.81195068]
[-30.55316925 351.25195312]
[-36.04726028 337.14187622]
[-36.65964508 322.01232910]
[-32.32389832 307.50439453]
[-23.51032829 295.19180298]
[-11.17496586 286.41015625]
[3.34414148 282.11196899]
[18.47206879 282.76354980]
[23.92896652 268.79135132]
[29.38586617 254.81915283]
[26.80882263 240.14916992]
[39.03636932 230.10937500]
[44.49326706 216.13717651]
[49.95016479 202.16497803]
[55.40706253 188.19277954]
[50.83348083 176.93228149]
[55.33747864 165.21200562]
[66.99816132 159.56068420]
[72.77870178 145.71923828]
[78.55924225 131.87780762]
[84.33978271 118.03636932]
[78.33449554 111.61719513]
[74.92777252 103.24183655]
[74.73585510 93.95065308]
[77.96295929 84.96809387]
[84.35110474 77.54132843]
[93.19244385 72.76766205]
[103.40515137 71.43457031]
[99.60722351 56.92334366]
[95.80929565 42.41211700]
[84.82997131 31.02066612]
[89.09267426 16.74906158]
[85.29474640 2.23783374]
[81.49681854 -12.27339458]
[77.69889069 -26.78462219]
[73.90096283 -41.29585266]
[62.92164230 -52.68730164]
[67.18434143 -66.95890808]
[63.38641357 -81.47013092]
[59.58848572 -95.98136139]
[54.34277344 -103.57370758]
[55.87521362 -110.87448883]
[52.41597366 -125.47016144]
[48.69865417 -129.39317322]
[47.08438492 -133.90696716]
[47.43658066 -138.08677673]
[49.26247787 -141.20423889]
[46.82980728 -156.00566101]
[44.39713669 -170.80708313]
[41.96446991 -185.60850525]
[39.35974503 -200.38061523]
[36.58332443 -215.12142944]
[25.49209785 -227.20103455]
[30.66519547 -242.76287842]
[46.78097534 -245.79827881]
[57.26090622 -233.18467712]
[51.32413101 -217.89785767]
[54.10055542 -203.15704346]
[58.47000504 -197.11074829]
[56.76589203 -188.04116821]
[59.19856262 -173.23974609]
[61.63122940 -158.43832397]
[64.06389618 -143.63690186]
[67.01165009 -128.92939758]
[70.47088623 -114.33372498]
[74.09971619 -99.77928925]
[77.89764404 -85.26805878]
[81.69557190 -70.75682831]
[92.40323639 -60.40332413]
[88.41219330 -45.09378052]
[92.21012115 -30.58255005]
[96.00804901 -16.07132149]
[99.80596924 -1.56009388]
[103.60389709 12.95113468]
[114.31156921 23.30464363]
[110.32051849 38.61418915]
[114.11844635 53.12541580]
[117.91637421 67.63664246]
[129.29408264 77.41149902]
[144.21191406 78.97943115]
[158.74525452 72.72702789]
[170.59403992 81.75230408]
[185.51185608 83.32022858]
[200.42968750 84.88815308]
[215.34751892 86.45608521]
[230.26535034 88.02400970]
[241.90830994 74.22409058]
[259.33590698 70.14194489]
[275.61001587 77.21134949]
[284.36560059 92.46421051]
[299.34020996 93.33638000]
[313.74420166 85.49693298]
[327.59231567 94.28112030]
[326.63879395 110.65251923]
[311.86453247 117.76964569]
[298.46804810 108.31100464]
[283.49343872 107.43882751]
[277.21176147 117.94685364]
[266.97802734 124.79733276]
[254.72554016 126.62139130]
[242.80126953 123.00688934]
[233.51618958 114.58949280]
[228.69741821 102.94184113]
[213.77958679 101.37390900]
[198.86175537 99.80598450]
[183.94393921 98.23806000]
[169.02610779 96.67012787]
[155.55978394 103.03468323]
[142.64398193 93.89725494]
[127.72615051 92.32933044]
[125.31301117 109.79080963]
[113.61189270 121.57891846]
[98.18121338 123.81690979]
[92.40068054 137.65834045]
[86.62014008 151.49978638]
[80.83959961 165.34121704]
[83.64550018 183.49737549]
[69.37925720 193.64967346]
[63.92236328 207.62187195]
[58.46546173 221.59407043]
[53.00856400 235.56626892]
[55.19529343 251.23562622]
[43.35806274 260.27603149]
[37.90116501 274.24822998]
[32.44426346 288.22042847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 134]
[18 133]
[19 132]
[21 130]
[22 129]
[23 128]
[24 127]
[27 125]
[28 124]
[29 123]
[30 122]
[37 87]
[38 86]
[39 85]
[41 83]
[42 82]
[43 81]
[44 80]
[45 79]
[47 77]
[48 76]
[49 75]
[51 74]
[52 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 67]
[61 66]
[88 119]
[89 118]
[91 116]
[92 115]
[93 114]
[94 113]
[95 112]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
