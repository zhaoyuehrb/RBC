%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGUAGAGGGGUUGGCAGUGGCGGUCAGCAUGGGCGAUGGGGGCGCCGAGCGCGACCGGGGCCCCGCGCGCCGGGCGGAGUCUGGUGGCGGCGGUGGGCGCUGCGGAGACCGCAGCGGAGCGGGGGACU\
) } def
/len { sequence length } bind def

/coor [
[101.96855927 233.65994263]
[100.90650177 218.69760132]
[92.28748322 206.55009460]
[99.02825928 192.23672485]
[97.96620941 177.27436829]
[96.90415192 162.31201172]
[95.84209442 147.34967041]
[84.41921234 144.90565491]
[73.93737793 139.74945068]
[65.02966309 132.19245911]
[58.23408127 122.69112396]
[53.96106720 111.81929016]
[52.46870041 100.23359680]
[37.64515686 97.93959045]
[22.82160950 95.64557648]
[7.99806261 93.35157013]
[-6.82548332 91.05756378]
[-21.67508888 88.93878174]
[-36.54867935 86.99552155]
[-47.28955078 94.24861908]
[-59.68988800 92.26273346]
[-67.13513947 82.65321350]
[-81.95868683 80.35920715]
[-96.78222656 78.06520081]
[-111.60577393 75.77118683]
[-126.42932129 73.47718048]
[-141.25045776 79.01294708]
[-152.64471436 69.42023468]
[-167.46826172 67.12622070]
[-178.37744141 74.12361145]
[-190.72741699 71.84539032]
[-197.94361877 62.06270981]
[-212.70884705 59.41922379]
[-227.47407532 56.77574158]
[-241.40852356 64.72624207]
[-256.25854492 58.65529251]
[-260.63247681 43.21999741]
[-251.17498779 30.26099586]
[-235.14108276 29.71932602]
[-224.83059692 42.01051331]
[-210.06536865 44.65399551]
[-195.30014038 47.29747772]
[-179.19393921 40.43248749]
[-165.17424011 52.30267715]
[-150.35069275 54.59668350]
[-136.58984375 48.89683533]
[-124.13531494 58.65363312]
[-109.31176758 60.94764328]
[-94.48822021 63.24164963]
[-79.66467285 65.53565979]
[-64.84112549 67.82966614]
[-48.90157318 60.58618164]
[-34.60542679 72.12193298]
[-19.73183250 74.06518555]
[-12.62410641 71.79071045]
[-4.53147364 76.23401642]
[10.29207230 78.52802277]
[25.11561775 80.82203674]
[39.93916321 83.11604309]
[54.76271057 85.41004944]
[65.49252319 67.31188202]
[82.98357391 55.61847305]
[103.80873871 52.62097168]
[123.88764191 58.90669632]
[133.37783813 47.29049683]
[142.86804199 35.67429352]
[152.22038269 23.94682121]
[161.43357849 12.10971451]
[170.64675903 0.27260685]
[179.85995483 -11.56450081]
[182.70098877 -20.34870338]
[189.43321228 -23.56898117]
[198.92341614 -35.18518066]
[208.41360474 -46.80138397]
[217.90380859 -58.41758347]
[227.39401245 -70.03378296]
[236.88420105 -81.64998627]
[246.37440491 -93.26618958]
[255.86460876 -104.88238525]
[261.20333862 -120.97382355]
[278.14382935 -120.29827881]
[282.18426514 -103.83282471]
[267.48080444 -95.39218903]
[257.99060059 -83.77598572]
[248.50041199 -72.15979004]
[239.01020813 -60.54358673]
[229.52000427 -48.92738724]
[220.02981567 -37.31118393]
[210.53961182 -25.69498253]
[201.04940796 -14.07878208]
[191.69706726 -2.35131001]
[182.48387146 9.48579788]
[173.27067566 21.32290459]
[164.05749512 33.16001129]
[162.41601562 40.44002533]
[154.48423767 45.16449356]
[144.99403381 56.78069305]
[135.50384521 68.39689636]
[142.75337219 79.22915649]
[146.78793335 91.62335205]
[147.30412292 104.64745331]
[144.26313782 117.32207489]
[157.19406128 124.92411804]
[170.12498474 132.52616882]
[183.05590820 140.12821960]
[195.98683167 147.73027039]
[208.91777039 155.33232117]
[221.84869385 162.93435669]
[234.77961731 170.53640747]
[251.49822998 173.35140991]
[253.42141724 190.19593811]
[237.76757812 196.70698547]
[227.17756653 183.46733093]
[214.24664307 175.86529541]
[201.31571960 168.26324463]
[188.38478088 160.66119385]
[175.45385742 153.05914307]
[162.52293396 145.45709229]
[149.59201050 137.85504150]
[136.66108704 130.25300598]
[129.28082275 137.44212341]
[120.52481079 142.87202454]
[110.80445099 146.28761292]
[111.86650848 161.24996948]
[112.92855835 176.21231079]
[113.99061584 191.17466736]
[122.68560028 204.39237976]
[115.86885834 217.63554382]
[116.93091583 232.59790039]
[126.55873108 245.87332153]
[119.62959290 260.73666382]
[103.27159882 261.89779663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[4 126]
[5 125]
[6 124]
[7 123]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 54]
[19 53]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[28 45]
[29 44]
[32 42]
[33 41]
[34 40]
[64 98]
[65 97]
[66 96]
[67 94]
[68 93]
[69 92]
[70 91]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
