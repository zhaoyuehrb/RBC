%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGCCCAACCCACACCAGCCUCAGACACCACCAUGACCGGCUCCUGCUGCGGCUCCACCUUGUCCUCCCUGAGCUACGGGGGAGGCUGCUGCCAGCCCUGCUGCUGCCGCGACCCCUGCUGCUGCCGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[41.70199966 200.90863037]
[38.05308151 215.45805359]
[30.36844063 228.34005737]
[19.29929924 238.46301270]
[5.78369379 244.96903992]
[-9.03301430 247.30680847]
[-23.89520645 245.27819824]
[-37.54340744 239.05514526]
[-48.82102585 229.16497803]
[-56.77235413 216.44583130]
[-60.72356796 201.97560120]
[-60.33982849 186.98049927]
[-55.65365601 172.73130798]
[-47.06217194 160.43551636]
[-35.29006195 151.13317871]
[-50.20789337 152.70109558]
[-60.14123917 164.69970703]
[-75.29237366 166.07728577]
[-86.66999054 156.53341675]
[-101.58781433 158.10134888]
[-116.50564575 159.66928101]
[-131.42347717 161.23719788]
[-146.30078125 163.15182495]
[-161.12950134 165.41210938]
[-175.95823669 167.67239380]
[-181.47087097 182.00788879]
[-193.42279053 191.65399170]
[-208.59898376 194.01593018]
[-222.91712952 188.45837402]
[-232.52571106 176.47628784]
[-234.84007263 161.29275513]
[-229.23767090 146.99211121]
[-217.22550964 137.42112732]
[-202.03482056 135.15437317]
[-187.75180054 140.80157471]
[-178.21852112 152.84367371]
[-163.38978577 150.58338928]
[-148.56106567 148.32310486]
[-145.01466370 145.00073242]
[-139.31538391 143.93052673]
[-132.99139404 146.31938171]
[-118.07357025 144.75144958]
[-103.15574646 143.18351746]
[-88.23791504 141.61560059]
[-79.09320831 129.91474915]
[-63.98674774 128.11213684]
[-51.77581787 137.78327942]
[-36.85799026 136.21534729]
[-33.10770798 132.35317993]
[-27.47891808 130.41162109]
[-21.00753784 131.26835632]
[-7.84615755 124.07266998]
[5.31522369 116.87696838]
[18.47660446 109.68127441]
[31.63798523 102.48557281]
[16.68794060 101.26240540]
[2.81036615 95.56916809]
[-8.69137287 85.94056702]
[-16.73704910 73.28090668]
[-20.57102394 58.77915573]
[-19.83321381 43.79731369]
[-14.59291363 29.74244690]
[-5.34228611 17.93457413]
[7.04986238 9.48267078]
[21.41967773 5.18053198]
[36.41756439 5.43220711]
[50.63494492 10.21405983]
[62.73653793 19.07698441]
[71.58578491 31.18858719]
[76.35156250 45.41136169]
[76.58628845 60.40952682]
[72.26790619 74.77446747]
[63.80200577 87.15705872]
[51.98314667 96.39463806]
[66.93341827 95.17425537]
[81.88368988 93.95387268]
[91.34155273 82.97685242]
[105.78304291 81.79800415]
[116.89592743 91.09584808]
[131.84620667 89.87547302]
[146.79647827 88.65509033]
[161.74674988 87.43470764]
[176.69702148 86.21433258]
[191.64729309 84.99394989]
[201.85714722 73.22973633]
[217.03623962 72.20507050]
[228.18869019 82.01110077]
[243.13896179 80.79072571]
[256.26388550 71.95630646]
[269.57846069 78.63248444]
[284.52874756 77.41210175]
[297.65365601 68.57769012]
[310.96823120 75.25386810]
[325.91851807 74.03348541]
[334.30642700 70.18586731]
[341.23019409 72.96279144]
[356.20480347 72.09062195]
[371.17944336 71.21844482]
[386.64019775 64.26137543]
[397.60534668 77.19202423]
[388.21551514 91.30821228]
[372.05160522 86.19306946]
[357.07699585 87.06523895]
[342.10235596 87.93741608]
[327.13888550 88.98375702]
[312.18862915 90.20413971]
[300.13305664 98.95126343]
[285.74911499 92.36238098]
[270.79885864 93.58275604]
[258.74325562 102.32987976]
[244.35934448 95.74099731]
[229.40907288 96.96137238]
[219.99458313 108.44627380]
[204.85026550 109.89688110]
[192.86767578 99.94422150]
[177.91740417 101.16460419]
[162.96713257 102.38498688]
[148.01686096 103.60536194]
[133.06658936 104.82574463]
[118.11631012 106.04612732]
[108.65844727 117.02314758]
[94.21695709 118.20199585]
[83.10407257 108.90415192]
[68.15380096 110.12452698]
[53.20352554 111.34490967]
[38.83368301 115.64695740]
[25.67230034 122.84265137]
[12.51092052 130.03834534]
[-0.65046072 137.23405457]
[-13.81184196 144.42974854]
[1.15778160 145.38388062]
[15.21831703 150.60894775]
[27.17822647 159.66215515]
[36.02398682 171.77630615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 48]
[16 47]
[19 44]
[20 43]
[21 42]
[22 41]
[23 38]
[24 37]
[25 36]
[51 130]
[52 129]
[53 128]
[54 127]
[55 126]
[74 125]
[75 124]
[76 123]
[79 120]
[80 119]
[81 118]
[82 117]
[83 116]
[84 115]
[87 112]
[88 111]
[90 109]
[91 108]
[93 106]
[94 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
