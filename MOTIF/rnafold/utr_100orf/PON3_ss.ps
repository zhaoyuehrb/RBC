%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCCGCUGGGCACCCCGAGACCAUGGGGAAGCUCGUGGCGCUGGUCCUGCUGGGGGUCGGCCUGUCCUUAGUCGGGGAGAUGUUCCUGGCGUUUAGAGAAAGGGUGAAUGCCUCUCGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[17.43851089 145.48130798]
[3.76592398 151.65060425]
[-2.85783386 158.10285950]
[-10.32529449 157.79855347]
[-24.14743805 163.62507629]
[-37.96958160 169.45158386]
[-51.79172516 175.27810669]
[-65.61386871 181.10462952]
[-79.43601227 186.93115234]
[-86.21856689 193.21626282]
[-93.67612457 192.72587585]
[-107.63922882 198.20599365]
[-121.60233307 203.68611145]
[-135.56544495 209.16622925]
[-146.64111328 223.81330872]
[-163.85559082 220.65367126]
[-177.67773438 226.48019409]
[-191.49987793 232.30671692]
[-205.32202148 238.13323975]
[-208.71900940 253.27391052]
[-220.38893127 263.50097656]
[-235.84443665 264.88192749]
[-249.14257812 256.88571167]
[-255.16993713 242.58711243]
[-251.60890198 227.48417664]
[-239.82873535 217.38430786]
[-224.35914612 216.17112732]
[-211.14852905 224.31109619]
[-197.32640076 218.48457336]
[-183.50425720 212.65805054]
[-169.68211365 206.83152771]
[-164.78852844 195.69396973]
[-153.23034668 190.75935364]
[-141.04556274 195.20312500]
[-127.08245087 189.72300720]
[-113.11934662 184.24288940]
[-99.15623474 178.76277161]
[-85.26253510 173.10900879]
[-71.44039154 167.28248596]
[-57.61824417 161.45596313]
[-43.79610443 155.62944031]
[-29.97395897 149.80293274]
[-16.15181541 143.97640991]
[-2.40338254 137.97802734]
[11.26920509 131.80871582]
[12.61633396 116.97460938]
[21.26523209 104.72501373]
[34.97491455 98.40750122]
[50.10536957 99.80966187]
[62.58389282 108.65464783]
[76.25647736 102.48534393]
[79.29799652 88.11056519]
[90.18124390 78.23940277]
[104.78375244 76.61095428]
[117.57421112 83.84207153]
[131.24679565 77.67276764]
[144.91938782 71.50345612]
[158.59197998 65.33415222]
[169.47673035 48.45354843]
[188.58782959 50.93515015]
[201.93591309 44.09199142]
[215.28399658 37.24883270]
[224.03453064 24.06784058]
[238.89001465 25.14673042]
[252.23809814 18.30356979]
[265.58618164 11.46041012]
[274.33670044 -1.72058129]
[289.19219971 -0.64169294]
[302.54028320 -7.48485279]
[315.80200195 -14.49388218]
[328.97531128 -21.66769218]
[333.54544067 -39.96418762]
[349.70599365 -49.05551910]
[367.11160278 -43.64921188]
[379.91094971 -51.47074127]
[392.71032715 -59.29226685]
[405.50967407 -67.11379242]
[418.30905151 -74.93532562]
[431.10839844 -82.75685120]
[443.90777588 -90.57837677]
[456.70712280 -98.39990997]
[464.07061768 -113.05292511]
[480.45571899 -113.73220825]
[489.00680542 -99.73896790]
[480.92727661 -85.46824646]
[464.52865601 -85.60054779]
[451.72930908 -77.77901459]
[438.92993164 -69.95748901]
[426.13058472 -62.13595963]
[413.33120728 -54.31443405]
[400.53186035 -46.49290466]
[387.73248291 -38.67137527]
[374.93313599 -30.84984779]
[374.70336914 -19.31533051]
[368.83004761 -9.24563313]
[358.69586182 -3.24409389]
[346.80154419 -2.92796898]
[336.14913940 -8.49436855]
[322.97579956 -1.32055867]
[318.55786133 4.70747423]
[309.38342285 5.86322451]
[296.03533936 12.70638371]
[288.23956299 25.39790726]
[272.42932129 24.80848694]
[259.08123779 31.65164757]
[245.73316956 38.49480820]
[237.93737793 51.18632889]
[222.12715149 50.59690857]
[208.77906799 57.44007111]
[195.43099976 64.28322601]
[193.13732910 74.37812805]
[185.46467590 81.65287018]
[174.82655334 83.48135376]
[164.76127625 79.00673676]
[151.08869934 85.17604828]
[137.41610718 91.34535217]
[123.74352264 97.51465607]
[120.70200348 111.88943481]
[109.81875610 121.76059723]
[95.21624756 123.38904572]
[82.42578888 116.15792847]
[68.75319672 122.32723236]
[67.12814331 137.53599548]
[58.16785049 149.80831909]
[44.35959244 155.90737915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[11 37]
[12 36]
[13 35]
[14 34]
[16 31]
[17 30]
[18 29]
[19 28]
[50 122]
[51 121]
[55 117]
[56 116]
[57 115]
[58 114]
[60 110]
[61 109]
[62 108]
[64 106]
[65 105]
[66 104]
[68 102]
[69 101]
[70 99]
[71 98]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
