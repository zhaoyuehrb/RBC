%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUCCAGGACAGGCUGCAUCAGAAGAGGCCAUCAAGCAGAUCACUGUCCUUCUGCCAUGGCCCUGUGGAUGCGCCUCCUGCCCCUGCUGGCGCUGCUGGCCCUCUGGGGACCUGACCCAGCCGCAGCCUUUGUGAACCAACACCUGUGCGGCUCAC\
) } def
/len { sequence length } bind def

/coor [
[104.76873779 280.48767090]
[103.88567352 265.51367188]
[103.00261688 250.53968811]
[102.11955261 235.56570435]
[89.49645996 227.70469666]
[83.85601807 213.75302124]
[87.55563354 198.98257446]
[99.37983704 189.10864258]
[98.49677277 174.13465881]
[97.61370850 159.16067505]
[96.73065186 144.18669128]
[76.27194214 135.20883179]
[63.58797455 117.97828674]
[61.31187439 97.65561676]
[46.79788971 93.86824036]
[32.28390121 90.08086395]
[17.76991653 86.29349518]
[8.62279320 87.15426636]
[3.00957847 82.28665924]
[-11.42724991 78.21504974]
[-25.86407852 74.14344025]
[-40.30090714 70.07183838]
[-54.73773575 66.00022888]
[-66.91629028 75.43363190]
[-82.13642120 75.88185120]
[-94.55515289 67.38248444]
[-99.52827454 53.36799240]
[-113.96510315 49.29638290]
[-123.12736511 49.97739792]
[-128.64392090 45.00051880]
[-142.99803162 40.64624786]
[-157.35214233 36.29197693]
[-171.70623779 31.93770790]
[-186.06034851 27.58343887]
[-200.41444397 23.22916794]
[-209.75318909 28.93188286]
[-220.46775818 28.53209686]
[-228.99761963 22.40598679]
[-232.64257812 12.79219055]
[-246.81466675 7.87773752]
[-260.98675537 2.96328497]
[-275.15884399 -1.95116782]
[-289.33093262 -6.86562061]
[-300.89172363 3.24594021]
[-315.96255493 6.20666790]
[-330.48941040 1.22014153]
[-340.56469727 -10.37228870]
[-343.47817993 -25.45231628]
[-338.44613647 -39.96348953]
[-326.82217407 -50.00237656]
[-311.73309326 -52.86856842]
[-297.23776245 -47.79107285]
[-287.23535156 -36.13570786]
[-284.41647339 -21.03771210]
[-270.24438477 -16.12325859]
[-256.07229614 -11.20880604]
[-241.90020752 -6.29435301]
[-227.72811890 -1.37990046]
[-209.10052490 -6.45267773]
[-196.06018066 8.87506294]
[-181.70606995 13.22933388]
[-167.35197449 17.58360291]
[-152.99786377 21.93787384]
[-138.64376831 26.29214478]
[-124.28965759 30.64641380]
[-109.89349365 34.85955429]
[-95.45666504 38.93116379]
[-83.89382935 29.58028984]
[-68.86421967 28.82216072]
[-56.12111282 37.15682983]
[-50.66613007 51.56340027]
[-36.22930145 55.63500595]
[-21.79247284 59.70661545]
[-7.35564327 63.77822113]
[7.08118534 67.84983063]
[21.55729103 71.77951050]
[36.07127762 75.56687927]
[50.58526230 79.35425568]
[65.09925079 83.14162445]
[72.31072998 71.03064728]
[83.69937897 61.95636749]
[98.00194550 57.34319687]
[113.47829437 58.09588242]
[118.39274597 43.92379379]
[123.30719757 29.75170135]
[116.18542480 15.64298725]
[121.20522308 0.65708911]
[135.38844299 -6.31512403]
[150.32043457 -1.13716185]
[157.14230347 13.11898232]
[151.80676270 27.99538994]
[137.47929382 34.66615295]
[132.56483459 48.83824539]
[127.65038300 63.01033783]
[138.04669189 73.82314301]
[152.40080261 69.46887207]
[166.75489807 65.11460114]
[181.10900879 60.76033020]
[195.46311951 56.40605927]
[202.81256104 50.89277267]
[210.14193726 52.11019516]
[224.57876587 48.03858566]
[239.01559448 43.96697998]
[242.00521851 40.65657043]
[245.54576111 38.69899750]
[249.13349915 38.09954071]
[252.31661987 38.69585037]
[254.74639893 40.19034958]
[269.45819092 37.26399612]
[284.16995239 34.33763885]
[298.88174438 31.41128540]
[306.24411011 17.61528969]
[320.77111816 11.82737732]
[335.60354614 16.78042412]
[343.73800659 30.13575172]
[341.33361816 45.58738327]
[329.52566528 55.83953094]
[313.88952637 56.05144501]
[301.80807495 46.12306595]
[287.09631348 49.04941940]
[272.38452148 51.97577286]
[257.67276001 54.90213013]
[243.08720398 58.40380859]
[228.65037537 62.47541428]
[214.21354675 66.54701996]
[199.81738281 70.76016235]
[185.46328735 75.11443329]
[171.10917664 79.46870422]
[156.75506592 83.82297516]
[142.40097046 88.17724609]
[144.04464722 97.98605347]
[143.44515991 107.92988586]
[140.62574768 117.50148010]
[135.72309875 126.21092224]
[146.53588867 136.60723877]
[157.34869385 147.00354004]
[173.14303589 146.44270325]
[184.65078735 157.27539062]
[185.04461670 173.07476807]
[174.09085083 184.46734619]
[158.28819275 184.69410706]
[147.01206970 173.62052917]
[146.95239258 157.81634521]
[136.13958740 147.42004395]
[125.32678223 137.02372742]
[111.70463562 143.30361938]
[112.58769226 158.27760315]
[113.47075653 173.25158691]
[114.35382080 188.22557068]
[127.25661469 196.64128113]
[132.66667175 210.87449646]
[128.70516968 225.39244080]
[117.09353638 234.68264771]
[117.97660065 249.65663147]
[118.85965729 264.63061523]
[119.74272156 279.60461426]
[129.21110535 292.99420166]
[122.10472870 307.77365112]
[105.73402405 308.73907471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[8 149]
[9 148]
[10 147]
[11 146]
[14 79]
[15 78]
[16 77]
[17 76]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[27 67]
[28 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[83 94]
[84 93]
[85 92]
[95 130]
[96 129]
[97 128]
[98 127]
[99 126]
[101 125]
[102 124]
[103 123]
[108 122]
[109 121]
[110 120]
[111 119]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
