%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCACAGACCUGCCCCGCCAUGACCCGGCUGACAGUCCUGGCCCUGCUGGCUGGUCUGCUGGCGUCCUCGAGGGCCGGCUCCAGCCCCCUUUUGGACAUCGUUGGCGGCCGGAAGGCGA\
) } def
/len { sequence length } bind def

/coor [
[61.44590378 120.62593079]
[66.69392395 106.57394409]
[80.60769653 100.97085571]
[65.85073090 98.28163910]
[51.09375763 95.59243011]
[36.33679199 92.90322113]
[21.54642105 90.40422821]
[6.72510195 88.09587097]
[-8.09621620 85.78750610]
[-22.91753578 83.47914886]
[-37.73885345 81.17079163]
[-52.56017303 78.86243439]
[-67.38665009 84.38385010]
[-78.77162170 74.78011322]
[-93.59293365 72.47174835]
[-108.41425323 70.16339111]
[-124.34329987 83.70948792]
[-144.83526611 81.38874054]
[-156.98823547 65.08375549]
[-171.96833801 64.31157684]
[-186.94845581 63.53939438]
[-201.92855835 62.76721191]
[-216.10874939 69.78383636]
[-228.42083740 61.40161133]
[-243.40093994 60.62942886]
[-258.38107300 59.85725021]
[-266.66760254 72.78894043]
[-280.31716919 79.83058167]
[-295.65811157 79.08801270]
[-308.56375122 70.76097107]
[-315.56259155 57.08938980]
[-314.77194214 41.75086212]
[-306.40447998 28.87137222]
[-292.71102905 21.91543770]
[-277.37506104 22.75416946]
[-264.52185059 31.16195297]
[-257.60888672 44.87713623]
[-242.62876892 45.64931870]
[-227.64865112 46.42150116]
[-214.53994751 39.34964371]
[-201.15638733 47.78710175]
[-186.17626953 48.55928040]
[-171.19616699 49.33146286]
[-156.21604919 50.10364532]
[-151.39326477 41.78161621]
[-143.78302002 35.80440521]
[-134.44309998 33.05789948]
[-124.69234467 33.97507095]
[-115.92438507 38.46833420]
[-109.40850067 45.93590927]
[-106.10589600 55.34207535]
[-91.28457642 57.65043259]
[-76.46325684 59.95878983]
[-62.69689941 54.27226639]
[-50.25181198 64.04111481]
[-35.43049622 66.34947205]
[-20.60917664 68.65782928]
[-5.78785801 70.96619415]
[9.03346062 73.27455139]
[23.85477829 75.58290863]
[31.03308678 73.47840881]
[39.02600098 78.14624786]
[53.78297043 80.83546448]
[68.53993988 83.52467346]
[83.29691315 86.21388245]
[113.19451904 75.03870392]
[126.61183167 68.33229828]
[140.02912903 61.62589264]
[153.44644165 54.91948700]
[158.53399658 40.19689941]
[172.23658752 33.58678055]
[186.24096680 38.52771378]
[199.65827942 31.82130623]
[213.07557678 25.11489868]
[226.49288940 18.40849304]
[239.91018677 11.70208549]
[243.98121643 6.24981117]
[249.39961243 4.08884573]
[254.19532776 5.01592207]
[267.94006348 -0.99088633]
[281.68484497 -6.99769497]
[290.97402954 -20.51223373]
[307.29910278 -18.95524788]
[313.86621094 -3.92843223]
[303.91967773 9.10991478]
[287.69165039 6.74705887]
[273.94689941 12.75386715]
[260.20211792 18.76067543]
[246.61659241 25.11939240]
[233.19929504 31.82579803]
[219.78198242 38.53220367]
[206.36468506 45.23861313]
[192.94737244 51.94501877]
[188.49369812 66.11189270]
[174.98217773 73.10427856]
[160.15284729 68.33679199]
[146.73553467 75.04319763]
[133.31823730 81.74960327]
[119.90093231 88.45600891]
[134.89094543 89.00318909]
[149.21345520 84.54606628]
[163.72250366 88.35227203]
[174.01268005 99.26612854]
[176.95954895 113.97380829]
[171.66833496 128.00958252]
[159.74562073 137.11172485]
[144.81153870 138.51651001]
[131.40058899 131.79740906]
[123.58470917 118.99433136]
[111.96400452 109.50964355]
[117.61492920 123.40450287]
[123.26584625 137.29936218]
[136.53672791 146.93345642]
[134.55992126 163.21302795]
[119.36899567 169.39103699]
[106.59107208 159.11209106]
[109.37098694 142.95027161]
[103.72006989 129.05541992]
[98.06914520 115.16056061]
[95.43038177 129.92663574]
[82.74880981 137.93774414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[6 62]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[14 53]
[15 52]
[16 51]
[19 44]
[20 43]
[21 42]
[22 41]
[24 39]
[25 38]
[26 37]
[66 99]
[67 98]
[68 97]
[69 96]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[79 88]
[80 87]
[81 86]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
