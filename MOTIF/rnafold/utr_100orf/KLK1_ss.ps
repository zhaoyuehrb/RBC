%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCUCCACCUGCUGGCCCCUGGACACCUCUGUCACCAUGUGGUUCCUGGUUCUGUGCCUCGCCCUGUCCCUGGGGGGGACUGGUGCUGCGCCCCCGAUUCAGUCCCGGAUUGUGGGAGGCUGGGAGUGUGAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[71.38565063 396.98495483]
[74.00804901 377.78149414]
[74.34461975 362.78524780]
[74.68119049 347.78903198]
[67.23141479 334.89135742]
[75.27641296 321.26828003]
[75.61298370 306.27203369]
[75.94955444 291.27581787]
[76.11785126 276.27676392]
[76.11785126 261.27676392]
[72.94615936 254.53233337]
[76.28992462 245.94114685]
[76.62649536 230.94491577]
[69.17671967 218.04724121]
[77.22171783 204.42414856]
[77.55828857 189.42793274]
[77.89485931 174.43170166]
[78.23143005 159.43548584]
[78.56800079 144.43925476]
[78.90457153 129.44303894]
[68.78451538 118.37124634]
[53.81849289 117.36221313]
[39.52909851 124.15366364]
[27.35113716 115.57773590]
[12.38511372 114.56870270]
[-2.58090901 113.55966949]
[-11.43724537 116.11986542]
[-17.87022400 112.35636902]
[-32.80983734 111.01177979]
[-47.74945068 109.66719055]
[-55.12887955 122.98875427]
[-67.29259491 132.15193176]
[-82.13316345 135.56916809]
[-97.07936096 132.64839172]
[-109.54167938 123.89563751]
[-117.36093903 110.82739258]
[-119.18240356 95.70779419]
[-114.69049835 81.15641785]
[-104.66347504 69.69436646]
[-90.83856964 63.30751038]
[-75.61103821 63.10241318]
[-61.61913300 69.11460876]
[-51.28704071 80.30245209]
[-46.40486145 94.72757721]
[-31.46524811 96.07216644]
[-16.52563477 97.41675568]
[-1.57187390 98.59364319]
[13.39414883 99.60267639]
[28.36017227 100.61171722]
[41.57909775 93.74809265]
[54.82752991 102.39618683]
[69.79354858 103.40522766]
[70.70044708 91.44729614]
[76.17533875 80.72263336]
[85.40322876 72.91097260]
[96.97807312 69.25215912]
[109.11696625 70.34946442]
[112.78207397 55.80411911]
[116.44718170 41.25877762]
[120.11228943 26.71343422]
[112.26822662 13.25578022]
[116.19236755 -1.44305480]
[129.07052612 -8.83823395]
[132.73562622 -23.38357735]
[136.40074158 -37.92892075]
[140.06584167 -52.47426224]
[134.11758423 -63.97964478]
[137.52745056 -76.05764008]
[147.92675781 -82.33720398]
[151.91731262 -96.79664612]
[155.90786743 -111.25608826]
[159.89842224 -125.71553802]
[163.88896179 -140.17497253]
[167.87951660 -154.63441467]
[166.26486206 -171.51130676]
[182.03521729 -177.73484802]
[192.38119507 -164.30364990]
[182.33895874 -150.64387512]
[178.34840393 -136.18441772]
[174.35786438 -121.72498322]
[170.36730957 -107.26554108]
[166.37675476 -92.80609894]
[162.38619995 -78.34665680]
[167.73637390 -61.67010117]
[154.61119080 -48.80915451]
[150.94607544 -34.26381302]
[147.28097534 -19.71846962]
[143.61587524 -5.17312765]
[151.45196533 7.44158888]
[147.94223022 22.24484634]
[134.65762329 30.37854004]
[130.99252319 44.92388153]
[127.32741547 59.46922684]
[123.66231537 74.01457214]
[132.34237671 86.24797821]
[147.28199768 87.59257507]
[162.22160339 88.93716431]
[177.17536926 90.11404419]
[192.14138794 91.12308502]
[207.10742188 92.13211823]
[222.07344055 93.14115143]
[237.03945923 94.15018463]
[252.00549316 95.15922546]
[263.74084473 84.57353210]
[279.51968384 85.46989441]
[289.98071289 97.31652069]
[288.91757202 113.08501434]
[276.96102905 123.42020416]
[261.20465088 122.19040680]
[250.99644470 110.12524414]
[236.03042603 109.11621094]
[221.06440735 108.10717773]
[206.09838867 107.09814453]
[191.13235474 106.08910370]
[176.16633606 105.08007050]
[169.22381592 107.79089355]
[160.87701416 103.87677765]
[145.93740845 102.53218842]
[130.99778748 101.18759918]
[118.95523071 124.16094971]
[93.90079498 129.77960205]
[93.56422424 144.77583313]
[93.22765350 159.77204895]
[92.89108276 174.76828003]
[92.55451202 189.76449585]
[92.21794128 204.76072693]
[99.64364624 218.73103333]
[91.62271881 231.28149414]
[91.28614807 246.27770996]
[91.11785126 261.27676392]
[91.11785126 276.27676392]
[94.26800537 284.94082642]
[90.94577789 291.61239624]
[90.60920715 306.60861206]
[90.27263641 321.60482788]
[97.69834137 335.57513428]
[89.67741394 348.12561035]
[89.34084320 363.12182617]
[89.00427246 378.11804199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[6 135]
[7 134]
[8 133]
[9 131]
[10 130]
[12 129]
[13 128]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 52]
[22 51]
[24 49]
[25 48]
[26 47]
[28 46]
[29 45]
[30 44]
[57 94]
[58 93]
[59 92]
[60 91]
[63 88]
[64 87]
[65 86]
[66 85]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
[95 119]
[96 118]
[97 117]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
