%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGUUCGGCGACCAUCGCGCGGCGGCCAUGGGGGCGCGGCUGGGCCGGCGGGCCGGGCCCGAGGCUGGCUCUGAGGCCGGGGCGGCGGCCGGCUGCGGGCCCGCGCCCUACGAGCGCCGGGUGCGGU\
) } def
/len { sequence length } bind def

/coor [
[95.58190918 107.66442108]
[81.31606293 112.29967499]
[70.58227539 123.92277527]
[56.08696365 120.49710846]
[41.82111359 125.13236237]
[27.55526733 129.76762390]
[13.28941917 134.40287781]
[-0.97642887 139.03813171]
[-15.24227619 143.67338562]
[-27.78932953 151.89356995]
[-37.73616791 163.12123108]
[-47.68301010 174.34889221]
[-57.62984848 185.57655334]
[-63.60738754 201.44178772]
[-80.50733948 200.08978271]
[-83.88655090 183.47601318]
[-68.85750580 175.62971497]
[-58.91067123 164.40205383]
[-48.96382904 153.17439270]
[-39.01699066 141.94673157]
[-45.50190735 128.42098999]
[-60.48439026 129.14569092]
[-73.89463043 137.54067993]
[-86.98085785 130.42732239]
[-101.96334076 131.15202332]
[-116.94582367 131.87672424]
[-130.35606384 140.27171326]
[-143.44229126 133.15834045]
[-158.42477417 133.88304138]
[-171.91374207 143.20933533]
[-186.61721802 135.94709778]
[-187.40951538 119.56710815]
[-173.47558594 110.91968536]
[-159.14947510 118.90056610]
[-144.16699219 118.17586517]
[-131.82839966 109.83270264]
[-117.67052460 116.89423370]
[-102.68804169 116.16953278]
[-87.70555878 115.44483185]
[-75.36696625 107.10166931]
[-61.20909119 114.16320038]
[-46.22660828 113.43849945]
[-19.87753105 129.40753174]
[-5.61168385 124.77227783]
[8.65416431 120.13702393]
[22.92001152 115.50177002]
[37.18585968 110.86651611]
[51.45170593 106.23126221]
[61.16510391 94.93971252]
[76.68080902 98.03382874]
[90.94665527 93.39857483]
[103.68867493 85.48397064]
[114.16634369 74.74998474]
[124.64401245 64.01600647]
[135.12168884 53.28202057]
[145.46888733 42.42221832]
[155.68412781 31.43818855]
[165.89936829 20.45415878]
[176.11460876 9.47012901]
[186.32984924 -1.51390088]
[196.54508972 -12.49793053]
[206.76031494 -23.48196030]
[216.97555542 -34.46599197]
[220.70791626 -49.84064865]
[235.04116821 -53.89120865]
[245.25640869 -64.87523651]
[255.47164917 -75.85926819]
[265.68688965 -86.84329987]
[275.90213013 -97.82732391]
[286.11737061 -108.81135559]
[296.33261108 -119.79538727]
[306.54782104 -130.77941895]
[291.78384399 -133.42976379]
[284.43408203 -146.50573730]
[289.84481812 -160.49588013]
[304.08023071 -165.22373962]
[316.78552246 -157.25025940]
[318.71902466 -142.37612915]
[330.18377686 -152.04875183]
[341.64849854 -161.72138977]
[353.11325073 -171.39402771]
[361.32040405 -186.22908020]
[377.84765625 -182.44940186]
[378.79089355 -165.52171326]
[362.78585815 -159.92929077]
[351.32113647 -150.25665283]
[339.85641479 -140.58401489]
[328.39166260 -130.91139221]
[317.53186035 -120.56417847]
[307.31661987 -109.58014679]
[297.10137939 -98.59612274]
[286.88613892 -87.61209106]
[276.67089844 -76.62805939]
[266.45568848 -65.64402771]
[256.24044800 -54.65999985]
[246.02519226 -43.67596817]
[243.02351379 -29.08696175]
[227.95959473 -24.25075340]
[217.74435425 -13.26672268]
[207.52911377 -2.28269315]
[197.31387329 8.70133686]
[187.09863281 19.68536758]
[176.88339233 30.66939735]
[166.66816711 41.65342712]
[156.45292664 52.63745880]
[154.17843628 59.74992371]
[145.85566711 63.75968933]
[135.37799072 74.49367523]
[124.90032959 85.22766113]
[114.42266083 95.96163940]
[127.54826355 88.70088959]
[142.37194824 90.99394989]
[152.69026184 101.88121033]
[154.18513489 116.80654144]
[146.23100281 129.52392578]
[132.15653992 134.71133423]
[117.85166931 130.19793701]
[109.30240631 117.87129974]
[113.93766785 132.13714600]
[118.57292175 146.40299988]
[123.20817566 160.66883850]
[135.75053406 171.23393250]
[132.60609436 187.32879639]
[117.00957489 192.39640808]
[105.00534821 181.22364807]
[108.94232941 165.30409241]
[104.30707550 151.03825378]
[99.67181396 136.77239990]
[95.03656006 122.50655365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 20]
[11 19]
[12 18]
[13 17]
[21 42]
[22 41]
[24 39]
[25 38]
[26 37]
[28 35]
[29 34]
[52 110]
[53 109]
[54 108]
[55 107]
[56 105]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
[62 99]
[63 98]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[78 88]
[79 87]
[80 86]
[81 85]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
