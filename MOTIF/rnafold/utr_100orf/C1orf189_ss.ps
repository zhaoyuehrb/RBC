%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACUAAACAGAGGAGCCUGUCAGUCUCCUCAGACUGUAUCAAGCAAAUCUAUAGACAUGUCUGUGGAAAAGAUGACAAAAGUAGAAGAGAGUUUUCAAAAGGCCAUGGGACUUAAGAAGACGGUCGACAGGUGGCGAAAUUCACAUACUCACUGUC\
) } def
/len { sequence length } bind def

/coor [
[87.88175201 354.32632446]
[78.46716309 366.46145630]
[64.24027252 372.24862671]
[49.02805328 370.13110352]
[36.92250443 360.67852783]
[31.17996407 346.43356323]
[33.34514618 331.22805786]
[42.83562469 319.15219116]
[57.09851074 313.45434570]
[59.16654205 298.59759521]
[61.23456955 283.74081421]
[63.30259705 268.88406372]
[56.25084686 259.01458740]
[57.88813019 246.59062195]
[67.87551880 238.37400818]
[70.23667145 223.56100464]
[72.59782410 208.74801636]
[85.66256714 184.79092407]
[105.24723816 180.56544495]
[102.88608551 165.75245667]
[100.52493286 150.93945312]
[98.16378021 136.12644958]
[95.80262756 121.31345367]
[80.02246857 112.32854462]
[75.68951416 93.25817871]
[87.61669159 76.02907562]
[76.75138855 65.68764496]
[65.88608551 55.34621429]
[55.02078247 45.00478363]
[39.69026184 41.09508896]
[35.80553436 26.71599960]
[24.94023132 16.37456894]
[12.01586723 15.90390301]
[3.17559886 7.02216101]
[2.79191542 -5.10163641]
[-7.86694908 -15.65571690]
[-18.52581406 -26.20979691]
[-35.15307617 -23.24817467]
[-50.12952805 -30.68915749]
[-57.66173935 -45.43392563]
[-54.96755219 -61.60238266]
[-65.83285522 -71.94380951]
[-76.69815826 -82.28524780]
[-89.74594879 -76.78110504]
[-103.86340332 -76.67606354]
[-116.91120911 -81.95290375]
[-126.92481232 -91.78138733]
[-132.41014099 -104.64866638]
[-132.56655884 -118.59210205]
[-127.40347290 -131.49862671]
[-138.06233215 -142.05270386]
[-148.72120667 -152.60678101]
[-159.38006592 -163.16085815]
[-170.03892517 -173.71495056]
[-180.69779968 -184.26902771]
[-191.35665894 -194.82310486]
[-202.01551819 -205.37718201]
[-218.00547791 -209.01770020]
[-222.58850098 -224.76342773]
[-211.04997253 -236.41651917]
[-195.25975037 -231.98925781]
[-191.46144104 -216.03605652]
[-180.80258179 -205.48196411]
[-170.14370728 -194.92788696]
[-159.48484802 -184.37380981]
[-148.82598877 -173.81973267]
[-138.16711426 -163.26565552]
[-127.50825500 -152.71156311]
[-116.84938812 -142.15748596]
[-101.92341614 -147.79519653]
[-85.97396088 -146.36685181]
[-72.18757629 -138.10704041]
[-63.34074783 -124.62030029]
[-61.24076462 -108.56957245]
[-66.35672760 -93.15054321]
[-55.49142456 -82.80911255]
[-44.62612152 -72.46768188]
[-31.74603844 -76.09131622]
[-18.65566444 -72.83825684]
[-8.81316280 -63.45731354]
[-4.87325001 -50.33046341]
[-7.97173357 -36.86865997]
[2.68713093 -26.31458092]
[13.34599590 -15.76050091]
[30.51763535 -12.25247097]
[35.28166199 5.50926638]
[46.14696503 15.85069752]
[60.70032501 19.02070427]
[65.36221313 34.13948059]
[76.22751617 44.48091125]
[87.09281921 54.82234192]
[97.95812225 65.16377258]
[112.77111816 67.52492523]
[126.31308746 61.07394791]
[139.85505676 54.62297058]
[153.39701843 48.17198944]
[166.93899536 41.72101212]
[180.48095703 35.27003479]
[185.84654236 20.64648628]
[199.67192078 14.29718781]
[213.58018494 19.50258064]
[227.12214661 13.05160236]
[240.66410828 6.60062456]
[249.79533386 -6.31956720]
[264.61303711 -4.80790615]
[278.15499878 -11.25888443]
[289.85421753 -23.52936554]
[304.88381958 -15.68416882]
[301.50582886 0.92984599]
[284.60598755 2.28308344]
[271.06402588 8.73406124]
[262.90139771 21.19283676]
[247.11509705 20.14259148]
[233.57312012 26.59357071]
[220.03115845 33.04454803]
[215.30984497 47.12449265]
[201.66825867 53.85961151]
[186.93193054 48.81200409]
[173.38996887 55.26298141]
[159.84800720 61.71395874]
[146.30603027 68.16493988]
[132.76406860 74.61591339]
[119.22209930 81.06689453]
[123.77780914 89.65930176]
[124.85489655 98.94031525]
[122.57866669 107.60780334]
[117.52680206 114.54247284]
[110.61562347 118.95230103]
[112.97677612 133.76530457]
[115.33792877 148.57829285]
[117.69908142 163.39129639]
[120.06023407 178.20429993]
[126.77750397 191.61616516]
[137.22576904 202.37878418]
[147.67404175 213.14138794]
[158.12229919 223.90399170]
[173.92657471 223.88755798]
[185.05435181 235.11022949]
[184.90370178 250.91380310]
[173.56401062 261.92230225]
[157.76290894 261.60455322]
[146.87492371 250.14910889]
[147.35969543 234.35226440]
[136.91142273 223.58966064]
[126.46315765 212.82704163]
[116.01489258 202.06443787]
[108.86387634 204.32562256]
[105.62937164 218.97273254]
[94.56184387 208.84797668]
[87.41082764 211.10916138]
[85.04967499 225.92216492]
[82.68852234 240.73516846]
[89.67963409 257.74395752]
[78.15935516 270.95208740]
[76.09132385 285.80886841]
[74.02330017 300.66561890]
[71.95526886 315.52236938]
[84.11983490 324.89886475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 157]
[10 156]
[11 155]
[12 154]
[15 152]
[16 151]
[17 150]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 92]
[27 91]
[28 90]
[29 89]
[31 87]
[32 86]
[35 84]
[36 83]
[37 82]
[41 77]
[42 76]
[43 75]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[101 115]
[102 114]
[103 113]
[105 111]
[106 110]
[133 146]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
