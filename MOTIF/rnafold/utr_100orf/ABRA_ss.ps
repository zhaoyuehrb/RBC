%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCAUUUUAGCCAGUGUCCAGGCUAUCAGCAGAGAAAGACAGGUGGGCAGCAUGGCUCCGGGCGAAAAGGAAAGCGGGGAGGGCCCAGCCAAGAGCGCCCUCCGGAAGAUACGCACAGCCACCCUGGUCAUCAGCUUGGCCCGAGGUUGGC\
) } def
/len { sequence length } bind def

/coor [
[104.98062134 169.40751648]
[86.63629913 168.29071045]
[69.22414398 162.41038513]
[53.95871353 152.17671204]
[42.87960434 162.28875732]
[31.80049706 172.40078735]
[35.98037720 189.41845703]
[31.02534676 206.13435364]
[18.37590027 218.00373840]
[1.55166733 221.84669495]
[-14.82761002 216.69978333]
[-25.48781967 227.25250244]
[-36.14802933 237.80522156]
[-46.80823898 248.35794067]
[-57.46844864 258.91067505]
[-54.98571014 274.22784424]
[-62.01037216 288.06378174]
[-75.84130859 295.09832764]
[-91.16024780 292.62652588]
[-102.07673645 281.59884644]
[-104.39317322 266.25564575]
[-97.21882629 252.49670410]
[-83.31239319 245.61260986]
[-68.02117157 248.25045776]
[-57.36096191 237.69773865]
[-46.70075226 227.14500427]
[-36.04054260 216.59228516]
[-25.38033104 206.03956604]
[-29.90018272 194.17327881]
[-29.57488060 181.43261719]
[-24.41757393 169.72668457]
[-15.16811085 160.82299805]
[-3.18710852 156.08073425]
[9.74413300 156.24320984]
[21.68845558 161.32168579]
[32.76756287 151.20964050]
[43.84667206 141.09761047]
[35.38085175 125.81811523]
[30.98702240 108.91168976]
[30.94206047 91.44369507]
[35.24879837 74.51487732]
[43.63584900 59.19200897]
[55.57469940 46.44066620]
[70.31301880 37.06437683]
[86.92207336 31.65398979]
[85.70730591 16.70325851]
[76.87781525 3.57501769]
[83.55899048 -9.73705196]
[82.34422302 -24.68778229]
[81.12944794 -39.63851166]
[79.91468048 -54.58924103]
[76.08108521 -62.94655609]
[78.82994080 -69.85477448]
[77.91842651 -84.82704926]
[66.02464294 -101.05490112]
[75.25664520 -118.00581360]
[73.73912048 -132.92884827]
[72.22159576 -147.85189819]
[70.70407104 -162.77493286]
[69.18654633 -177.69796753]
[65.58320618 -183.35441589]
[65.44371796 -189.10995483]
[67.92253876 -193.25471497]
[67.01102448 -208.22698975]
[66.09951019 -223.19927979]
[65.18799591 -238.17155457]
[50.49584198 -241.72569275]
[37.50487137 -249.45396423]
[27.37023544 -260.66915894]
[20.99309731 -274.37402344]
[18.94050980 -289.34994507]
[21.39498520 -304.26528931]
[28.13827515 -317.79376221]
[38.57077026 -328.73242188]
[51.76482010 -336.10861206]
[66.54721832 -339.26647949]
[81.60352325 -337.92520142]
[95.59494781 -332.20404053]
[107.27736664 -322.61175537]
[115.61199951 -310.00122070]
[119.85773468 -295.49380493]
[119.63703918 -280.37948608]
[114.96954346 -266.00219727]
[106.27027893 -253.64041138]
[94.31277466 -244.39328003]
[80.16027832 -239.08306885]
[81.07179260 -224.11079407]
[81.98330688 -209.13850403]
[82.89482117 -194.16622925]
[84.10958862 -179.21549988]
[85.62711334 -164.29246521]
[87.14463806 -149.36941528]
[88.66216278 -134.44638062]
[90.17968750 -119.52333832]
[98.70157623 -113.75602722]
[102.69655609 -104.03454590]
[100.60682678 -93.50935364]
[92.89070129 -85.73856354]
[93.80221558 -70.76628113]
[94.86540985 -55.80401230]
[96.08018494 -40.85327911]
[97.29495239 -25.90254974]
[98.50971985 -10.95182037]
[107.25231934 1.10704517]
[100.65803528 15.48849106]
[101.87280273 30.43922043]
[112.46271515 31.53913498]
[122.76088715 34.24171829]
[132.52621460 38.48370361]
[141.53010559 44.16578674]
[149.56178284 51.15494919]
[156.43321228 59.28757477]
[161.98355103 68.37327576]
[166.08283997 78.19936371]
[168.63513184 88.53579712]
[169.58067322 99.14061737]
[168.89733887 109.76554871]
[166.60112000 120.16186523]
[162.74575806 130.08619690]
[157.42152405 139.30621338]
[150.75303650 147.60606384]
[160.52363586 158.98744202]
[170.29421997 170.36882019]
[180.06480408 181.75018311]
[194.92459106 187.18132019]
[197.34405518 201.87809753]
[207.11463928 213.25947571]
[216.88522339 224.64083862]
[226.88447571 235.82185364]
[237.10827637 246.79792786]
[247.33206177 257.77398682]
[257.55587769 268.75006104]
[267.77966309 279.72610474]
[283.58090210 280.03601074]
[294.47457886 291.48608398]
[293.99761963 307.28317261]
[282.43301392 318.05514526]
[266.64184570 317.41122437]
[255.99273682 305.73336792]
[256.80358887 289.94992065]
[246.57980347 278.97384644]
[236.35600281 267.99777222]
[226.13220215 257.02172852]
[215.90841675 246.04565430]
[211.19648743 244.98667908]
[207.12101746 240.92021179]
[205.50386047 234.41143799]
[195.73326111 223.03005981]
[185.96267700 211.64868164]
[171.80174255 207.03163147]
[168.68342590 191.52076721]
[158.91284180 180.13940430]
[149.14225769 168.75802612]
[139.37167358 157.37666321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 37]
[5 36]
[6 35]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[45 106]
[46 105]
[48 103]
[49 102]
[50 101]
[51 100]
[53 99]
[54 98]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[63 89]
[64 88]
[65 87]
[66 86]
[121 154]
[122 153]
[123 152]
[124 151]
[126 149]
[127 148]
[128 147]
[129 144]
[130 143]
[131 142]
[132 141]
[133 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
