%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGACUUAUGAAAGAGGUUCGAGGCAGAAAUCAAACAGAAGUAACAGAAUUUCUCCUCUUAGGACUUUCCGACAAUCCAGAUCUACAAGGAGUCCUCU\
) } def
/len { sequence length } bind def

/coor [
[89.76965332 125.00123596]
[81.53511810 120.93429565]
[74.90277100 114.15708923]
[64.37896729 124.84584808]
[64.33139801 140.42260742]
[53.50650406 151.11260986]
[38.65673447 150.97126770]
[28.13293266 161.66003418]
[17.60912895 172.34878540]
[17.98263550 188.14866638]
[7.01424217 199.52714539]
[-8.78869820 199.73358154]
[-20.05058098 188.64550781]
[-20.08993149 172.84126282]
[-8.88340187 161.69723511]
[6.92037058 161.82498169]
[17.44417381 151.13623047]
[27.96797562 140.44746399]
[27.59570694 125.60169220]
[38.11607361 114.61185455]
[53.69021225 114.32204437]
[64.21401215 103.63328552]
[65.84379578 88.72209167]
[57.87742996 76.01236725]
[49.91106415 63.30264664]
[41.94469452 50.59292603]
[34.60360336 44.85698700]
[33.93534470 37.36172867]
[26.36810303 24.41040230]
[18.80085945 11.45907593]
[11.23361683 -1.49224949]
[3.66637421 -14.44357491]
[-4.10137033 -27.27565002]
[-12.06773758 -39.98537064]
[-27.05085564 -37.42126846]
[-41.87358475 -40.79101562]
[-54.27556229 -49.58074570]
[-62.36558151 -62.45009232]
[-64.90996552 -77.43656921]
[-61.52072525 -92.25485229]
[-52.71469116 -104.64525604]
[-39.83471298 -112.71833801]
[-24.84490013 -115.24301147]
[-10.03108978 -111.83428192]
[2.34772062 -103.01194763]
[10.40385246 -90.12136841]
[12.90880394 -75.12824249]
[9.48058796 -60.31893158]
[0.64198333 -47.95173645]
[8.60835075 -35.24201584]
[14.93938923 -31.17465591]
[16.61770058 -22.01081848]
[24.18494225 -9.05949211]
[31.75218582 3.89183307]
[39.31942749 16.84315872]
[46.88667297 29.79448509]
[54.65441513 42.62656021]
[62.62078476 55.33628082]
[70.58715057 68.04599762]
[78.55352020 80.75572205]
[98.75099945 73.01552582]
[117.12924957 81.50057220]
[123.39947510 99.28320312]
[137.74934387 103.65142059]
[152.09919739 108.01964569]
[166.44906616 112.38786316]
[180.79893494 116.75608826]
[187.59954834 115.58531189]
[193.07263184 117.81133270]
[195.88967896 121.86779785]
[209.94021606 127.11969757]
[223.99075317 132.37159729]
[233.39282227 120.52016449]
[245.99813843 112.15587616]
[260.57174683 108.09817505]
[275.68588257 108.74458313]
[289.85983276 114.03179169]
[301.70495605 123.44179535]
[310.06079102 136.05270386]
[314.10873413 150.62904358]
[313.45220947 165.74273682]
[308.15548706 179.91314697]
[298.73754883 191.75195312]
[286.12106323 200.09934998]
[271.54202271 204.13751221]
[256.42874146 203.47085571]
[242.26190186 198.16465759]
[230.42939758 188.73878479]
[222.09046936 176.11668396]
[218.06207275 161.53494263]
[218.73886108 146.42213440]
[204.68832397 141.17024231]
[190.63778687 135.91833496]
[176.43070984 131.10595703]
[162.08085632 126.73773193]
[147.73098755 122.36950684]
[133.38111877 118.00128937]
[119.03125000 113.63307190]
[114.02223969 119.85976410]
[106.97682190 124.22734070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[7 18]
[8 17]
[9 16]
[23 60]
[24 59]
[25 58]
[26 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 50]
[34 49]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[70 93]
[71 92]
[72 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
