%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGGCCAUGUUUUACAUAUUUCUUGAUUUUGUUUGUUUUCUCGUGAGCUUAGGCCGCUGGUUUUGGUGAUUUUUGUCUGAUUGCAAUGUCUGGACGUGGUAAGCAAGGAGGCAAAGCUCGCGCCAAAGCGAAAUCCCGCUCUUCUCGCGCUGGUCUCCAGUUCCCGGUGGGCCGAGUGCACCGCC\
) } def
/len { sequence length } bind def

/coor [
[110.83776855 215.27157593]
[96.65637207 207.77041626]
[93.82077026 191.97993469]
[104.50619507 180.01327515]
[105.00476837 165.02156067]
[105.50334167 150.02984619]
[106.00191498 135.03813171]
[98.76560211 133.06690979]
[84.29297638 129.12443542]
[77.05665588 127.15321350]
[69.88285065 140.32653809]
[62.70903778 153.49986267]
[55.53522873 166.67318726]
[53.27012634 183.47514343]
[36.49775696 185.94979858]
[29.47675133 170.51795959]
[42.36190414 159.49937439]
[49.53571701 146.32604980]
[56.70952606 133.15272522]
[63.88333511 119.97940063]
[62.38693237 112.73796082]
[62.26749420 105.61708069]
[63.43236542 98.86698914]
[65.74536896 92.70860291]
[69.03427887 87.32626343]
[73.09945679 82.86225128]
[77.72324371 79.41319275]
[82.67967987 77.02843475]
[77.08370972 63.11135864]
[71.48773193 49.19427872]
[65.89176178 35.27720261]
[60.29578781 21.36012268]
[54.69981384 7.44304371]
[49.10383987 -6.47403526]
[43.50786591 -20.39111328]
[37.91189194 -34.30819321]
[32.31591797 -48.22527313]
[21.67209435 -48.63382339]
[11.80978489 -52.55539322]
[3.84934330 -59.51700592]
[-1.31412256 -68.70194244]
[-3.11136627 -79.04549408]
[-1.36166215 -89.35836792]
[3.70937037 -98.46342468]
[11.49849796 -105.33003235]
[6.83953667 -119.58815765]
[2.18057513 -133.84628296]
[-2.47838640 -148.10440063]
[-7.13734770 -162.36253357]
[-11.79630947 -176.62065125]
[-16.45527077 -190.87876892]
[-21.11423302 -205.13690186]
[-25.77319336 -219.39501953]
[-36.91043091 -225.92527771]
[-40.49091339 -237.91139221]
[-35.11541367 -248.76116943]
[-39.53673935 -263.09475708]
[-43.95806885 -277.42834473]
[-55.41929245 -288.33480835]
[-51.77716827 -302.77725220]
[-56.19849777 -317.11083984]
[-59.51940536 -319.97451782]
[-61.54143143 -323.40454102]
[-62.24654770 -326.91921997]
[-61.77626038 -330.08111572]
[-60.40303802 -332.54556274]
[-63.86227798 -347.14123535]
[-67.32151794 -361.73690796]
[-81.48526001 -367.79452515]
[-89.27518463 -380.87774658]
[-87.88398743 -395.86199951]
[-78.05387115 -407.02026367]
[-81.51310730 -421.61593628]
[-84.97234344 -436.21160889]
[-95.52902985 -443.64389038]
[-98.10211945 -455.88586426]
[-91.84447479 -466.25195312]
[-95.06063843 -480.90310669]
[-98.27679443 -495.55426025]
[-101.49295807 -510.20541382]
[-104.70911407 -524.85656738]
[-108.04692841 -539.48046875]
[-111.50616455 -554.07617188]
[-114.96540833 -568.67181396]
[-128.54658508 -576.75433350]
[-132.35368347 -592.09326172]
[-124.12802887 -605.58819580]
[-108.74974823 -609.23291016]
[-95.34250641 -600.86505127]
[-91.86057281 -585.44909668]
[-100.36973572 -572.13110352]
[-96.91049194 -557.53540039]
[-93.45125580 -542.93975830]
[-88.84072113 -537.14526367]
[-90.05796051 -528.07275391]
[-86.84180450 -513.42156982]
[-83.62564087 -498.77041626]
[-80.40948486 -484.11926270]
[-77.19332123 -469.46810913]
[-64.68245697 -457.17330933]
[-70.37667084 -439.67086792]
[-66.91743469 -425.07519531]
[-63.45819473 -410.47952271]
[-49.66586304 -404.91986084]
[-41.69771194 -392.15380859]
[-42.78730774 -376.96609497]
[-52.72584152 -365.19616699]
[-49.26660538 -350.60049438]
[-45.80736542 -336.00482178]
[-41.86490631 -321.53219604]
[-37.44357681 -307.19857788]
[-26.29859352 -297.31735229]
[-29.62447548 -281.84967041]
[-25.20314789 -267.51608276]
[-20.78182030 -253.18249512]
[-7.29348040 -241.96871948]
[-11.51506996 -224.05398560]
[-6.85610914 -209.79585266]
[-2.19714737 -195.53773499]
[2.46181393 -181.27961731]
[7.12077522 -167.02148438]
[11.77973652 -152.76336670]
[16.43869781 -138.50524902]
[21.09766006 -124.24712372]
[25.75662041 -109.98899841]
[44.71708298 -105.26740265]
[57.09046555 -89.95947266]
[57.74118423 -70.14302063]
[46.23299789 -53.82124329]
[51.82897186 -39.90416718]
[57.42494583 -25.98708725]
[63.02091980 -12.07000828]
[68.61688995 1.84707022]
[74.21286774 15.76414871]
[79.80883789 29.68122864]
[85.40481567 43.59830475]
[91.00078583 57.51538467]
[96.59675598 71.43246460]
[122.64122772 82.25004578]
[126.92944336 110.12379456]
[139.10852051 118.87995148]
[151.28758240 127.63610077]
[163.46665955 136.39225769]
[175.64572144 145.14840698]
[191.04475403 142.80160522]
[203.27133179 151.85508728]
[205.41375732 166.55017090]
[217.59283447 175.30632019]
[229.77189636 184.06248474]
[241.95097351 192.81863403]
[254.13003540 201.57479858]
[266.66235352 209.81742859]
[279.52627563 217.53230286]
[292.39019775 225.24719238]
[305.25411987 232.96208191]
[318.11807251 240.67695618]
[334.81140137 243.63812256]
[336.58715820 260.49880981]
[320.87695312 266.87265015]
[310.40316772 253.54087830]
[297.53924561 245.82600403]
[284.67532349 238.11111450]
[271.81140137 230.39624023]
[258.94747925 222.68135071]
[259.89175415 237.65159607]
[248.89175415 247.84962463]
[234.03564453 245.77691650]
[226.24700928 232.95751953]
[231.25274658 218.81741333]
[245.37388611 213.75386047]
[233.19480896 204.99771118]
[221.01574707 196.24154663]
[208.83666992 187.48539734]
[196.65760803 178.72924805]
[182.04539490 181.37857056]
[169.56935120 172.67207336]
[166.88957214 157.32748413]
[154.71049500 148.57133484]
[142.53143311 139.81517029]
[130.35235596 131.05902100]
[118.17328644 122.30286407]
[119.50305176 126.54307556]
[120.44792938 130.96376038]
[120.99362946 135.53671265]
[120.49505615 150.52841187]
[119.99648285 165.52012634]
[119.49790955 180.51184082]
[129.36465454 193.16201782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 187]
[5 186]
[6 185]
[7 184]
[10 20]
[11 19]
[12 18]
[13 17]
[28 138]
[29 137]
[30 136]
[31 135]
[32 134]
[33 133]
[34 132]
[35 131]
[36 130]
[37 129]
[45 125]
[46 124]
[47 123]
[48 122]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[56 115]
[57 114]
[58 113]
[60 111]
[61 110]
[66 109]
[67 108]
[68 107]
[72 103]
[73 102]
[74 101]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[82 93]
[83 92]
[84 91]
[140 181]
[141 180]
[142 179]
[143 178]
[144 177]
[147 174]
[148 173]
[149 172]
[150 171]
[151 170]
[152 164]
[153 163]
[154 162]
[155 161]
[156 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
