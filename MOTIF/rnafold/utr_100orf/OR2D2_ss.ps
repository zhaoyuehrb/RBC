%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGACAGAUAAAUCAGACACAAGUGACAGAAUUCCUCCUUCUGGGACUCUCUGAUGGGCCACACACCGAGCAGCUGCUAUUUAUCGUAUUAUUGGGUG\
) } def
/len { sequence length } bind def

/coor [
[118.49919128 268.92694092]
[115.71597290 254.18740845]
[112.93275452 239.44787598]
[110.14953613 224.70835876]
[100.18508148 213.63772583]
[105.22743225 198.64155579]
[102.44421387 183.90202332]
[98.03227234 177.80609131]
[99.81113434 168.66125488]
[97.48766327 153.84228516]
[95.16419220 139.02333069]
[92.84071350 124.20437622]
[90.51724243 109.38542175]
[82.74949646 96.55334473]
[70.69704437 87.62371063]
[58.64459229 78.69407654]
[46.59213638 69.76445007]
[34.53968048 60.83481598]
[22.48722839 51.90518188]
[13.12375069 54.60428238]
[3.72722578 52.61219406]
[-3.52202749 46.52503586]
[-7.00510931 37.87319565]
[-6.02516127 28.73832893]
[-17.19312286 18.72450638]
[-28.36108398 8.71068478]
[-43.92311478 9.38967228]
[-55.10636520 -0.92485905]
[-55.65777206 -15.76505947]
[-66.82572937 -25.77888107]
[-77.99369812 -35.79270172]
[-89.16165924 -45.80652618]
[-100.32962036 -55.82034683]
[-115.78388214 -53.43294144]
[-129.13026428 -61.58205414]
[-134.06701660 -76.41992950]
[-128.26313782 -90.94057465]
[-114.45906830 -98.28778076]
[-99.17264557 -94.99243164]
[-89.62165833 -82.61048126]
[-90.31579590 -66.98831177]
[-79.14783478 -56.97448730]
[-67.97987366 -46.96066666]
[-56.81191254 -36.94684219]
[-45.64394760 -26.93302155]
[-30.83169365 -27.99729729]
[-19.36314201 -18.00094986]
[-18.34726334 -2.45727730]
[-7.17930079 7.55654478]
[3.98866057 17.57036781]
[24.41309357 19.72838974]
[31.41686058 39.85272598]
[43.46931458 48.78236008]
[55.52177048 57.71199417]
[67.57422638 66.64162445]
[79.62667847 75.57125854]
[91.67913055 84.50089264]
[106.65011597 83.56834412]
[117.50125122 73.21204376]
[115.29862213 57.85209656]
[122.57476807 44.14672089]
[136.53184509 37.36591339]
[151.80310059 40.11703491]
[162.51640320 51.34222031]
[164.55226135 66.72515869]
[157.12786865 80.35079956]
[143.09805298 86.97980499]
[127.85754395 84.06317902]
[117.00641632 94.41947937]
[119.84957886 101.35968018]
[128.37907410 122.18029022]
[143.37725830 121.94701385]
[158.37544250 121.71373749]
[172.16282654 112.83454132]
[186.62037659 120.57476807]
[186.87541199 136.97192383]
[172.66557312 145.15803528]
[158.60871887 136.71192932]
[143.61053467 136.94520569]
[128.61235046 137.17848206]
[120.79441071 127.18516541]
[113.03562927 117.14623260]
[105.33619690 107.06195068]
[107.65967560 121.88090515]
[109.98314667 136.69985962]
[112.30661774 151.51881409]
[114.63008881 166.33776855]
[117.18374634 181.11880493]
[119.96696472 195.85833740]
[130.13049316 207.98323059]
[124.88906860 221.92514038]
[127.67228699 236.66465759]
[130.45550537 251.40419006]
[133.23872375 266.14370728]
[146.96249390 273.63983154]
[152.60893250 288.22244263]
[147.51194763 303.00601196]
[134.07818604 311.01028442]
[118.65065002 308.45581055]
[108.51376343 296.54876709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[6 89]
[7 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[24 50]
[25 49]
[26 48]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[58 69]
[59 68]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
