%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAAGGGUCACGUGGUGGCUGGGCCGGGGAAAUGGCGGCUUCAGGAGAGAGCGGGACUUCAGGCGGCGGAGGCAGCACCGAGGAAGCAUUUAUGACCUUCUACAGUGAGGUGAAACAAAUAGAGAAGAGAG\
) } def
/len { sequence length } bind def

/coor [
[157.75108337 236.60653687]
[165.68367004 223.82710266]
[175.77079773 212.66961670]
[166.61613464 200.78717041]
[157.46148682 188.90473938]
[148.30683899 177.02229309]
[139.15217590 165.13986206]
[129.99752808 153.25743103]
[123.36131287 149.84686279]
[120.77144623 140.98742676]
[111.89786530 128.89364624]
[103.02427673 116.79985809]
[89.72363281 109.86496735]
[74.72775269 109.51332855]
[59.73187256 109.16168976]
[52.47792816 123.67656708]
[39.67998123 133.55763245]
[23.91540718 136.87863159]
[8.33147240 133.02810669]
[-3.98299694 122.82119751]
[-10.60982132 108.32773590]
[-25.60982132 108.32773590]
[-40.60982132 108.32773590]
[-55.60982132 108.32773590]
[-70.60878754 108.50356293]
[-85.60466766 108.85520172]
[-100.60054779 109.20684052]
[-115.59642029 109.55847931]
[-123.54258728 122.78202057]
[-137.38661194 129.58985901]
[-152.71090698 127.80962372]
[-164.62556458 118.00939178]
[-169.32865906 103.31638336]
[-165.31944275 88.41908264]
[-153.87722778 78.07115936]
[-138.65321350 75.57460022]
[-124.50531006 81.72605133]
[-115.94805908 94.56259918]
[-100.95218658 94.21096039]
[-85.95630646 93.85932159]
[-70.96042633 93.50768280]
[-64.28485870 90.17481995]
[-55.60982132 93.32773590]
[-40.60982132 93.32773590]
[-25.60982132 93.32773590]
[-10.60982132 93.32773590]
[-5.18624783 80.50581360]
[4.75815773 70.70086670]
[17.73587036 65.42620850]
[31.78771210 65.51396179]
[44.77859879 70.98400879]
[54.72196198 81.03589630]
[60.08351135 94.16580963]
[75.07939148 94.51744843]
[90.07527161 94.86908722]
[90.10523224 91.73774719]
[91.08370972 88.42762756]
[93.07680511 85.21344757]
[96.07423401 82.38698578]
[99.55880737 67.79734039]
[103.04338837 53.20769882]
[106.52796936 38.61805725]
[97.10093689 23.93527031]
[101.08551025 7.29357815]
[115.55959320 -1.18696928]
[118.70120239 -15.85429096]
[114.02581024 -30.96889687]
[124.25711823 -41.79339600]
[127.39871979 -56.46071625]
[121.84336853 -71.89023590]
[132.63328552 -84.23972321]
[148.66871643 -80.80508423]
[153.45379639 -65.11957550]
[142.06604004 -53.31911087]
[138.92443848 -38.65179062]
[143.82452393 -24.58628845]
[133.36851501 -12.71268654]
[130.22691345 1.95463467]
[138.69819641 11.73553753]
[139.97937012 24.80748177]
[133.37504578 36.38612366]
[121.11761475 42.10263443]
[117.63303375 56.69227982]
[114.14845276 71.28192139]
[110.66387177 85.87156677]
[117.71037292 72.62970734]
[130.60226440 64.96163940]
[145.60169983 65.09062195]
[158.35981750 72.97925568]
[165.17755127 86.34033203]
[164.07820129 101.29999542]
[155.38049316 113.52088165]
[141.60623169 119.45970154]
[126.74906921 117.39458466]
[115.11805725 107.92627716]
[123.99163818 120.02005768]
[132.86521912 132.11383057]
[141.87995911 144.10276794]
[151.03462219 155.98521423]
[160.18927002 167.86764526]
[169.34391785 179.75007629]
[178.49858093 191.63252258]
[187.65322876 203.51495361]
[201.01438904 196.60705566]
[215.39436340 192.19610596]
[230.33085632 190.42387390]
[245.34375000 191.34736633]
[259.95043945 194.93687439]
[273.68136597 201.07702637]
[286.09515381 209.57041931]
[296.79272461 220.14404297]
[305.43023682 232.45797729]
[311.73001099 246.11640930]
[315.48950195 260.68026733]
[316.58792114 275.68136597]
[314.98989868 290.63751221]
[310.74685669 305.06790161]
[303.99514771 318.50869751]
[294.95184326 330.52777100]
[283.90762329 340.73880005]
[271.21752930 348.81353760]
[257.28948975 354.49240112]
[242.57124329 357.59283447]
[227.53590393 358.01519775]
[212.66679382 355.74591064]
[198.44192505 350.85791016]
[185.31852722 343.50833130]
[173.71849060 333.93341064]
[164.01470947 322.44097900]
[156.51910400 309.40042114]
[151.47262573 295.23098755]
[149.03752136 280.38815308]
[149.29203796 265.34902954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[10 97]
[11 96]
[12 95]
[13 55]
[14 54]
[15 53]
[21 46]
[22 45]
[23 44]
[24 43]
[25 41]
[26 40]
[27 39]
[28 38]
[59 85]
[60 84]
[61 83]
[62 82]
[65 78]
[66 77]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
