%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGACCUGGAACAAACUAAAGCCAGACACAUACUAUGGACACCAAGGGCUGUACAACAACCAAUUCUCCUUCAACCCCAUGUCAAAACUGCUCUAGGAUUACAAAUGUUAGUACCAUCUCUUCUAACAACGGCU\
) } def
/len { sequence length } bind def

/coor [
[168.94125366 274.35855103]
[163.54107666 263.15823364]
[160.64230347 251.05905151]
[160.38034058 238.61283875]
[162.77030945 226.38792419]
[167.70614624 214.94317627]
[174.96531677 204.80249023]
[165.17790222 193.43559265]
[155.39048767 182.06867981]
[145.60307312 170.70178223]
[135.81565857 159.33486938]
[126.02823639 147.96797180]
[111.86048889 143.37187195]
[108.71923065 127.86563873]
[98.93181610 116.49873352]
[108.28459930 128.22586060]
[112.92337799 142.49057007]
[112.25724792 157.47576904]
[106.37106323 171.27261353]
[96.01461792 182.12361145]
[82.50715637 188.64653015]
[67.56929779 190.01046753]
[53.10386658 186.04167175]
[40.95351410 177.24571228]
[32.66598511 164.74304199]
[29.29697418 150.12628174]
[31.27563095 135.25735474]
[38.34991074 122.03031921]
[49.61867523 112.13006592]
[63.64646912 106.81771851]
[78.64405823 106.76956940]
[63.65292740 106.25371552]
[48.66180038 105.73786163]
[32.62410355 111.23591614]
[22.90123940 97.34698486]
[33.55582428 84.15926361]
[49.17765427 90.74673462]
[64.16877747 91.26258850]
[79.15991211 91.77844238]
[88.41590118 79.97476959]
[84.34015656 65.53910828]
[80.26440430 51.10344696]
[76.18865967 36.66778564]
[64.78643799 32.94973373]
[56.70780563 24.24937439]
[53.90134811 12.83714104]
[56.96019745 1.61472857]
[65.00122833 -6.62260580]
[61.59159851 -21.22994614]
[58.18196487 -35.83728790]
[47.51030350 -47.51745224]
[52.15204239 -61.67031479]
[48.74240875 -76.27765656]
[33.66004181 -77.11366272]
[19.42460823 -82.16629791]
[7.19011259 -91.02597046]
[-2.05165243 -102.97446442]
[-7.55149651 -117.04316711]
[-8.86357212 -132.09158325]
[-5.88151598 -146.89982605]
[1.15293062 -160.26745605]
[11.66951656 -171.11079407]
[24.81571007 -178.55084229]
[39.52580643 -181.98446655]
[54.60732651 -181.13330078]
[68.83767700 -176.06636047]
[81.06326294 -167.19441223]
[90.29302216 -155.23663330]
[95.77873230 -141.16241455]
[97.07568359 -126.11267853]
[94.07875824 -111.30744171]
[87.03088379 -97.94689941]
[76.50341034 -87.11412811]
[63.34975052 -79.68728638]
[66.75938416 -65.07994843]
[77.18716431 -54.44459915]
[72.78930664 -39.24692154]
[76.19893646 -24.63957977]
[79.60857391 -10.03223896]
[95.68178558 -1.40521622]
[100.51353455 16.51384926]
[90.62432098 32.59204102]
[94.70006561 47.02770233]
[98.77581024 61.46336365]
[102.85155487 75.89902496]
[109.81210327 80.00479126]
[114.46963501 85.79500580]
[116.55712128 92.25087738]
[116.20445251 98.38539124]
[113.88204956 103.38417053]
[110.29872131 106.71131897]
[120.08613586 118.07822418]
[134.95394897 123.48736572]
[137.39514160 138.18055725]
[147.18255615 149.54745483]
[156.96997070 160.91436768]
[166.75738525 172.28126526]
[176.54479980 183.64817810]
[186.33221436 195.01507568]
[202.61598206 187.63987732]
[220.35205078 185.54267883]
[237.87451172 188.91041565]
[253.54057312 197.41720581]
[265.88455200 210.25582886]
[273.75500488 226.21430969]
[276.42218018 243.79037476]
[273.64556885 261.33282471]
[265.69561768 277.19662476]
[276.71920776 287.36914062]
[287.74279785 297.54168701]
[298.76638794 307.71423340]
[309.78997803 317.88674927]
[320.81356812 328.05929565]
[335.21008301 322.86325073]
[350.37069702 324.96426392]
[362.81161499 333.87951660]
[369.67401123 347.56039429]
[369.38095093 362.86309814]
[361.99975586 376.27117920]
[349.22662354 384.70358276]
[333.99667358 386.22256470]
[319.80966187 380.47912598]
[309.92565918 368.79299927]
[306.61593628 353.84963989]
[310.64102173 339.08288574]
[299.61743164 328.91033936]
[288.59384155 318.73782349]
[277.57025146 308.56527710]
[266.54666138 298.39273071]
[255.52307129 288.22021484]
[245.24928284 295.11895752]
[233.73738098 299.67996216]
[221.51196289 301.69198608]
[209.13079834 301.06011963]
[197.15948486 297.80999756]
[186.14553833 292.08709717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[12 94]
[14 92]
[15 91]
[31 39]
[32 38]
[33 37]
[40 85]
[41 84]
[42 83]
[43 82]
[48 79]
[49 78]
[50 77]
[52 75]
[53 74]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
