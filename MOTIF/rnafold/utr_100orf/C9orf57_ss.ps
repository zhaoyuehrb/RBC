%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUCAGUUGUAACGGACUUCAUCACAUCACAAAUUGUACUCGUUCUCAUCCUUUUAAGAAAGUUCAGACCCAGGAAAAUUUCCAUAGUACCUUAAUGAAAAAGAUAGAAAUCAGUGGGACGUGUCUUUCCUUUCAUCUCCUUUUCGGCUUGGAAAUCAGAAUGAGAAGGAUUGUUUUUGCUGGUGUUAUCUUAU\
) } def
/len { sequence length } bind def

/coor [
[82.30415344 128.45495605]
[69.27408600 135.88578796]
[56.24402237 143.31663513]
[43.21395874 150.74748230]
[30.18389320 158.17831421]
[17.15382767 165.60916138]
[7.02242470 176.67056274]
[0.76154268 190.30145264]
[-5.49933910 203.93235779]
[-11.76022148 217.56324768]
[-6.03507280 232.29411316]
[-12.47944832 246.72482300]
[-27.27001381 252.29391479]
[-41.63179016 245.69732666]
[-47.04418945 230.84870911]
[-40.29613113 216.55747986]
[-25.39111900 211.30236816]
[-19.13023567 197.67147827]
[-12.86935425 184.04057312]
[-6.60847235 170.40968323]
[-12.17938995 165.38824463]
[-22.22227287 176.53007507]
[-36.49057388 181.15777588]
[-33.36410904 166.48719788]
[-23.32122612 155.34535217]
[-28.89214325 150.32391357]
[-41.80205536 157.96159363]
[-54.71196747 165.59927368]
[-56.03566742 181.05978394]
[-66.21944427 192.76748657]
[-81.34744263 196.22052002]
[-95.60262299 190.09114075]
[-103.50358582 176.73619080]
[-102.01225281 161.29095459]
[-91.70206451 149.69441223]
[-76.53749847 146.40570068]
[-62.34964752 152.68936157]
[-49.43973541 145.05168152]
[-36.52982330 137.41400146]
[-51.52103806 137.92735291]
[-61.90533066 127.10301208]
[-69.12476349 113.95463562]
[-72.68464661 99.38317871]
[-72.34105682 84.38711548]
[-68.11752319 69.99400330]
[-60.30346680 57.19007874]
[-49.43430710 46.85269928]
[-36.25483322 39.69019699]
[-21.66811943 36.19336700]
[-6.67368126 36.60181808]
[7.70103312 40.88755798]
[20.47104073 48.75692368]
[30.76131439 59.67068863]
[37.86674500 72.88101959]
[41.30045700 87.48271942]
[40.82715988 102.47525024]
[36.47928619 116.83129120]
[28.55476379 129.56715393]
[17.59540939 139.81097412]
[9.72298717 152.57908630]
[22.75305176 145.14825439]
[35.78311920 137.71740723]
[48.81318283 130.28657532]
[61.84324646 122.85572815]
[74.87331390 115.42488861]
[76.59215546 108.12450409]
[61.59466171 108.39873505]
[47.16373825 112.49123383]
[34.41532516 104.58692932]
[31.66444016 89.84133148]
[40.70531845 77.87210083]
[55.64114380 76.48603821]
[66.73011780 86.58705902]
[80.02983856 93.52374268]
[81.74868011 86.22335815]
[73.40269470 73.75962830]
[65.05671692 61.29589462]
[56.71073914 48.83216095]
[42.87386703 39.03535843]
[48.45738220 23.02721214]
[65.38559723 23.96102715]
[69.17446899 40.48618317]
[77.52044678 52.94991302]
[85.86643219 65.41364288]
[94.21240997 77.87738037]
[92.86355591 62.93814850]
[86.37342834 49.41489792]
[84.70614624 34.50784683]
[88.04824829 19.88490677]
[96.02580261 7.18220377]
[107.74621582 -2.17899132]
[121.89811707 -7.15127754]
[136.89808655 -7.17831802]
[151.06782532 -2.25708747]
[162.82191467 7.06178999]
[170.84521484 19.73564911]
[174.24002075 34.34644318]
[172.62649536 49.25940704]
[166.18516541 62.80596924]
[155.63674927 73.47043610]
[142.16146851 80.05959320]
[127.26474762 81.83607483]
[113.93276978 88.71054840]
[128.92848206 89.06932068]
[143.92417908 89.42810059]
[158.91989136 89.78688049]
[173.91560364 90.14565277]
[188.91131592 90.50443268]
[203.90701294 90.86321259]
[213.77110291 82.54109192]
[226.26075745 83.15530396]
[234.70072937 91.83106232]
[249.68881226 92.42892456]
[264.67687988 93.02678680]
[279.66497803 93.62464905]
[294.65304565 94.22251129]
[309.64114380 94.82036591]
[324.62921143 95.41822815]
[339.61727905 96.01609039]
[354.60537720 96.61395264]
[369.59344482 97.21180725]
[379.24050903 85.20179749]
[393.93786621 81.22167969]
[407.99438477 86.59552002]
[416.09426880 99.06668091]
[431.08233643 99.66454315]
[446.07043457 100.26240540]
[461.05850220 100.86026764]
[476.04656982 101.45812225]
[491.03466797 102.05598450]
[506.02273560 102.65384674]
[510.66275024 100.21280670]
[515.30932617 99.84082031]
[519.17071533 101.19204712]
[521.70831299 103.65576935]
[536.65069580 104.96972656]
[551.59301758 106.28367615]
[566.53533936 107.59763336]
[581.48767090 108.79240417]
[596.44909668 109.86791992]
[608.33471680 99.79965973]
[623.49237061 101.10350800]
[633.01763916 112.49667358]
[647.97906494 113.57218170]
[662.94042969 114.64769745]
[677.90185547 115.72320557]
[692.86322021 116.79871368]
[705.88397217 107.42642212]
[721.29028320 111.90145874]
[727.26373291 126.79096985]
[719.22198486 140.67298889]
[703.33404541 142.89842224]
[691.78771973 131.76010132]
[676.82635498 130.68460083]
[661.86492920 129.60908508]
[646.90356445 128.53358459]
[631.94213867 127.45806885]
[620.88519287 137.37165833]
[605.69689941 136.49407959]
[595.37359619 124.82930756]
[580.41217041 123.75379944]
[573.50714111 126.41298676]
[565.22137451 122.53997803]
[550.27905273 121.22602081]
[535.33673096 119.91206360]
[520.39434814 118.59810638]
[505.42489624 117.64192963]
[490.43679810 117.04406738]
[475.44873047 116.44620514]
[460.46063232 115.84834290]
[445.47256470 115.25048828]
[430.48449707 114.65262604]
[415.49639893 114.05476379]
[406.42892456 125.84114075]
[391.98901367 130.07827759]
[377.65539551 124.94014740]
[368.99560547 112.19989014]
[354.00750732 111.60202789]
[339.01943970 111.00417328]
[324.03134155 110.40631104]
[309.04327393 109.80844879]
[294.05517578 109.21058655]
[279.06710815 108.61272430]
[264.07904053 108.01486969]
[249.09094238 107.41700745]
[234.10287476 106.81914520]
[219.03672791 115.80836487]
[203.54824829 105.85891724]
[188.55253601 105.50013733]
[173.55682373 105.14136505]
[158.56111145 104.78258514]
[143.56541443 104.42381287]
[128.56970215 104.06503296]
[113.57398987 103.70625305]
[114.08493805 112.64797211]
[108.69020081 122.14570618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[7 20]
[8 19]
[9 18]
[10 17]
[26 39]
[27 38]
[28 37]
[75 85]
[76 84]
[77 83]
[78 82]
[103 194]
[104 193]
[105 192]
[106 191]
[107 190]
[108 189]
[109 188]
[112 186]
[113 185]
[114 184]
[115 183]
[116 182]
[117 181]
[118 180]
[119 179]
[120 178]
[121 177]
[125 173]
[126 172]
[127 171]
[128 170]
[129 169]
[130 168]
[131 167]
[135 166]
[136 165]
[137 164]
[138 163]
[139 161]
[140 160]
[143 157]
[144 156]
[145 155]
[146 154]
[147 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
