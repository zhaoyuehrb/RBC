%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCUCCUGCCCUGCUGGGGUCCAGCCAUGUCCCAGCCUGCGGGAGGCAGGAGGAAGCCCAGGACCCUAGGGCCGCCUGUGUGCAGUAUCCGGCCUUUCAAGUCGAGUGAGCAGUACCUGGAGGCCA\
) } def
/len { sequence length } bind def

/coor [
[-6.89126921 136.56193542]
[-28.09231377 131.86116028]
[-45.37598419 118.77855682]
[-55.61906433 99.71915436]
[-70.48471069 101.72231293]
[-85.35034943 103.72546387]
[-100.21599579 105.72862244]
[-115.08164215 107.73178101]
[-129.94728088 109.73493195]
[-144.81292725 111.73809052]
[-159.67857361 113.74124908]
[-174.54421997 115.74440002]
[-189.38436890 117.92842102]
[-204.19682312 120.29297638]
[-218.83796692 123.55442810]
[-233.25352478 127.70069122]
[-247.66908264 131.84695435]
[-262.08465576 135.99322510]
[-276.50021362 140.13948059]
[-290.91577148 144.28575134]
[-305.33135986 148.43200684]
[-310.31039429 153.03311157]
[-316.01095581 154.17564392]
[-320.55038452 152.41078186]
[-335.15072632 155.85028076]
[-346.71694946 167.47586060]
[-362.49661255 163.01103210]
[-366.25692749 147.04882812]
[-354.12960815 136.00978088]
[-338.59020996 141.24993896]
[-323.98986816 137.81045532]
[-309.47760010 134.01644897]
[-295.06204224 129.87017822]
[-280.64648438 125.72392273]
[-266.23092651 121.57765198]
[-251.81535339 117.43138885]
[-237.39979553 113.28512573]
[-222.98422241 109.13886261]
[-234.26158142 99.24840546]
[-233.80960083 84.25521851]
[-221.95693970 75.06203461]
[-207.32263184 78.35395813]
[-200.54841614 91.73715973]
[-206.56138611 105.48051453]
[-191.74891663 103.11595917]
[-185.57594299 98.91143799]
[-176.54737854 100.87876129]
[-161.68173218 98.87560272]
[-146.81608582 96.87244415]
[-131.95043945 94.86929321]
[-117.08479309 92.86613464]
[-102.21915436 90.86297607]
[-87.35350800 88.85982513]
[-72.48786163 86.85666656]
[-57.62221909 84.85351562]
[-56.67163849 75.62577057]
[-54.05434036 66.71989441]
[-49.85582733 58.43450165]
[-44.21467209 51.04783249]
[-37.31792450 44.80837631]
[-29.39491844 39.92653275]
[-20.70965004 36.56750107]
[-11.55197525 34.84571075]
[-2.22793841 34.82089615]
[6.95045280 36.49605560]
[15.67567348 39.81725693]
[23.65497971 44.67538834]
[30.62023163 50.90972519]
[36.33691025 58.31325912]
[40.61200714 66.63957214]
[43.30053329 75.61101532]
[44.31045532 84.92800903]
[59.17609787 86.93116760]
[74.04174042 88.93431854]
[88.90738678 90.93747711]
[101.91287231 85.80435944]
[113.09577179 94.19687653]
[127.96141052 96.20003510]
[144.76660156 88.79046631]
[158.26844788 99.93124390]
[173.17846680 101.57181549]
[188.08848572 103.21237946]
[203.01736450 104.67127991]
[217.96290588 105.94828796]
[232.90844727 107.22529602]
[243.31948853 99.49747467]
[255.80072021 100.93248749]
[263.66525269 110.20854187]
[278.57528687 111.84910583]
[293.48529053 113.48967743]
[308.04891968 107.30813599]
[319.85360718 116.39101410]
[334.76361084 118.03158569]
[349.67361450 119.67214966]
[364.58364868 121.31272125]
[375.75933838 110.37482452]
[391.35504150 109.23106384]
[404.00692749 118.42148590]
[407.74114990 133.60665894]
[400.79455566 147.61660767]
[386.44708252 153.83625793]
[371.47317505 149.32888794]
[362.94308472 136.22273254]
[348.03305054 134.58216858]
[333.12304688 132.94160461]
[318.21304321 131.30102539]
[304.71588135 137.59991455]
[291.84472656 128.39968872]
[276.93472290 126.75912476]
[262.02468872 125.11855316]
[246.42352295 133.05709839]
[231.63145447 122.17083740]
[216.68589783 120.89382935]
[201.74035645 119.61682129]
[194.73568726 122.20876312]
[186.44792175 118.12239838]
[171.53790283 116.48182678]
[156.62788391 114.84126282]
[146.93460083 122.18540955]
[134.43995667 120.87229156]
[125.95825958 111.06568146]
[111.09261322 109.06252289]
[98.08712769 114.19564056]
[86.90422821 105.80312347]
[72.03858948 103.79996490]
[57.17294312 101.79680634]
[42.30730057 99.79365540]
[31.84359360 118.95653534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 55]
[5 54]
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[13 45]
[14 44]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[24 31]
[25 30]
[72 127]
[73 126]
[74 125]
[75 124]
[77 122]
[78 121]
[80 118]
[81 117]
[82 116]
[83 114]
[84 113]
[85 112]
[88 110]
[89 109]
[90 108]
[92 106]
[93 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
