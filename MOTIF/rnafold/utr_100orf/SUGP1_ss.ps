%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUGUGGGAUUGGAUGAGUCUCAAGAUGGACAACCGGGAUGUUGCAGGAAAGGCUAACCGGUGGUUUGGGGUUGCUCCCCCUAAAUCUGGAAAAAUGAACAUGAACAUCCUUC\
) } def
/len { sequence length } bind def

/coor [
[-16.13116837 222.26312256]
[-32.95182419 221.47323608]
[-47.71800613 213.49351501]
[-59.58758926 222.66482544]
[-71.45717621 231.83615112]
[-83.32675934 241.00746155]
[-89.51616669 255.56773376]
[-104.31807709 257.22689819]
[-116.18766022 266.39819336]
[-128.05725098 275.56951904]
[-139.92683411 284.74081421]
[-151.79641724 293.91213989]
[-163.66600037 303.08343506]
[-175.53558350 312.25476074]
[-178.99420166 327.92056274]
[-193.46148682 334.85433960]
[-207.83938599 327.73706055]
[-211.09840393 312.02850342]
[-200.73849487 299.77893066]
[-184.70689392 300.38516235]
[-172.83731079 291.21386719]
[-160.96772766 282.04254150]
[-149.09814453 272.87124634]
[-137.22856140 263.69992065]
[-125.35897064 254.52861023]
[-113.48938751 245.35729980]
[-108.14897156 231.45301819]
[-92.49806976 229.13787842]
[-80.62848663 219.96655273]
[-68.75890350 210.79524231]
[-56.88931656 201.62393188]
[-60.63695526 189.04168701]
[-59.84341812 175.90495300]
[-54.58282471 163.80632019]
[-45.47217560 154.22006226]
[-33.59905243 148.32254028]
[-20.39182472 146.84783936]
[-7.44782162 149.99650574]
[3.65985775 157.40856934]
[16.00461578 148.88760376]
[28.34937286 140.36662292]
[40.69412994 131.84565735]
[53.03889084 123.32468414]
[65.38364410 114.80371094]
[77.72840881 106.28273773]
[90.07316589 97.76177216]
[94.46142578 90.86473083]
[102.86570740 89.18297577]
[115.43478394 80.99650574]
[110.49848175 66.75858307]
[109.11419678 51.76204681]
[111.35806274 36.87902832]
[117.09535980 22.97400856]
[125.98857880 10.85360718]
[137.51725769 1.21979690]
[151.00846863 -5.37075377]
[165.67610168 -8.53884697]
[180.66659546 -8.10457134]
[195.10873413 -4.09750986]
[208.16416931 3.24522924]
[219.07612610 13.49303818]
[231.64520264 5.30657053]
[244.21427917 -2.87989712]
[256.78335571 -11.06636524]
[260.21884155 -16.96269035]
[265.37423706 -19.72501564]
[270.25418091 -19.33372879]
[283.24453735 -26.83372879]
[296.23492432 -34.33372879]
[309.22531128 -41.83372879]
[322.21569824 -49.33372879]
[335.20608521 -56.83372879]
[348.19644165 -64.33373260]
[361.18682861 -71.83373260]
[363.72390747 -87.26412964]
[375.61950684 -97.41443634]
[391.25689697 -97.49197388]
[403.25259399 -87.46014404]
[405.94256592 -72.05566406]
[398.05670166 -58.55205917]
[383.31848145 -53.32531738]
[368.68682861 -58.84334946]
[355.69644165 -51.34334946]
[342.70608521 -43.84334946]
[329.71569824 -36.34334946]
[316.72531128 -28.84334755]
[303.73492432 -21.34334755]
[290.74453735 -13.84334755]
[277.75418091 -6.34334803]
[264.96981812 1.50271416]
[252.40075684 9.68918228]
[239.83166504 17.87565041]
[227.26258850 26.06211662]
[232.22407532 40.18557358]
[233.66192627 55.09505463]
[231.48822021 69.92431641]
[225.82502747 83.81071472]
[216.99752808 95.94541931]
[205.51531982 105.62050629]
[192.04306030 112.27025604]
[177.36196899 115.50423431]
[162.32446289 115.13021088]
[147.80479431 111.16558838]
[134.64808655 103.83663940]
[123.62125397 93.56558990]
[111.05217743 101.75205231]
[98.59413147 110.10652924]
[86.24937439 118.62749481]
[73.90461731 127.14846802]
[61.55986023 135.66943359]
[49.21510315 144.19041443]
[36.87034607 152.71138000]
[24.52558708 161.23236084]
[12.18082905 169.75332642]
[15.17377853 186.54707336]
[10.60308266 202.92481995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[46 107]
[48 106]
[49 105]
[61 93]
[62 92]
[63 91]
[64 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
