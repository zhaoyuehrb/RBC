%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAAUCAUACAAGGCAGAUAGAAUUUAUUCUUCUGGGACUGACGGAUAAUUCUCAGUUACAGAUUGUAAUUUUCUUAUUUCUACUUCUAAAUUGUG\
) } def
/len { sequence length } bind def

/coor [
[74.73952484 339.14657593]
[68.83802795 352.93685913]
[62.93651962 366.72714233]
[57.03501511 380.51745605]
[59.52192688 396.72692871]
[46.56003952 406.77288818]
[31.48343277 400.32092285]
[29.80162811 384.00823975]
[43.24472046 374.61593628]
[49.14622498 360.82565308]
[55.04772949 347.03536987]
[60.94923401 333.24505615]
[45.59620285 317.06686401]
[39.73741913 295.48434448]
[44.82963943 273.64657593]
[59.70990372 256.79156494]
[80.86052704 248.98985291]
[81.79307556 234.01885986]
[79.01832581 227.02413940]
[82.99457550 218.59904480]
[84.39226532 203.66430664]
[85.78995514 188.72956848]
[87.18764496 173.79483032]
[88.58533478 158.86009216]
[89.75058746 143.90541077]
[90.68313599 128.93443298]
[91.61567688 113.96344757]
[83.73046875 99.24035645]
[92.95326233 85.31605530]
[93.41976166 70.32331085]
[93.88625336 55.33056641]
[94.35275269 40.33782578]
[83.99346924 31.56512260]
[80.68247223 18.60217667]
[85.42520905 6.30138636]
[96.25532532 -0.86734021]
[97.18786621 -15.83832455]
[98.12041473 -30.80930901]
[99.05295563 -45.78029251]
[88.87162018 -57.56919098]
[90.03062439 -72.73861694]
[101.33227539 -82.37231445]
[102.26482391 -97.34329224]
[103.19736481 -112.31427765]
[104.12991333 -127.28526306]
[105.06245422 -142.25624084]
[102.43922424 -151.19555664]
[106.26396179 -157.67605591]
[107.66164398 -172.61080933]
[109.05933380 -187.54554749]
[104.51518250 -203.87915039]
[118.95252228 -212.76731873]
[131.48999023 -201.35467529]
[123.99407959 -186.14785767]
[122.59638977 -171.21311951]
[121.19869995 -156.27836609]
[120.03343964 -141.32369995]
[119.10089874 -126.35271454]
[118.16835022 -111.38173676]
[117.23580933 -96.41075134]
[116.30326080 -81.43976593]
[126.32202911 -70.47801971]
[125.58956146 -55.28202438]
[114.02394104 -44.84774780]
[113.09140015 -29.87676430]
[112.15885162 -14.90577984]
[111.22631073 0.06520433]
[122.86658478 12.09197998]
[122.28106689 29.15468216]
[109.34549713 40.80432129]
[108.87899780 55.79706573]
[108.41249847 70.78981018]
[107.94600677 85.78255463]
[115.44700623 94.83619690]
[114.89863586 106.58067322]
[106.58666229 114.89599609]
[105.65412140 129.86697388]
[104.72157288 144.83796692]
[107.34480286 153.77726746]
[103.52007294 160.25778198]
[102.12238312 175.19252014]
[100.72469330 190.12725830]
[99.32700348 205.06199646]
[97.92931366 219.99673462]
[96.76406097 234.95140076]
[95.83151245 249.92239380]
[104.42842865 252.85020447]
[112.27858734 257.40179443]
[119.07921600 263.39816284]
[124.56867218 270.60470581]
[128.53654480 278.74029541]
[130.83169556 287.48825073]
[131.36801147 296.50885010]
[130.12768555 305.45220947]
[127.16171265 313.97210693]
[122.58784485 321.73928833]
[116.58589935 328.45422363]
[109.39073944 333.85861206]
[101.28299713 337.74533081]
[92.57822418 339.96636963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[17 86]
[18 85]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[25 78]
[26 77]
[27 76]
[29 73]
[30 72]
[31 71]
[32 70]
[36 67]
[37 66]
[38 65]
[39 64]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
