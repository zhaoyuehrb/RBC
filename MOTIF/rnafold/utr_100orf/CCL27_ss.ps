%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAUAAAAGGUAGGGGAGGAGGAGAGAGAGAGAAGGAAGAGUCUAGGCUGAGCAACAUGAAGGGGCCCCCAACCUUCUGCAGCCUCCUGCUGCUGUCAUUGCUCCUGAGCCCAGACCCUACAGCAGCAUUCCUACUGCCACCCAGCACUGCCUGCU\
) } def
/len { sequence length } bind def

/coor [
[103.76278687 789.95654297]
[91.64880371 799.13916016]
[76.94165802 802.98211670]
[61.88407898 800.89935303]
[48.77223587 793.20861816]
[39.60559464 781.08251953]
[35.78200150 766.37036133]
[37.88452148 751.31555176]
[45.59254074 738.21380615]
[57.73064041 729.06311035]
[72.44784546 725.25891113]
[74.50303650 710.40032959]
[76.55821991 695.54180908]
[78.61340332 680.68328857]
[80.66858673 665.82470703]
[82.72377777 650.96618652]
[84.19403076 636.03845215]
[85.07709503 621.06445312]
[85.96015930 606.09045410]
[78.98554230 592.92974854]
[87.52185059 579.60900879]
[88.40490723 564.63500977]
[88.69941711 549.63793945]
[88.40490723 534.64080811]
[88.11040497 519.64373779]
[87.81590271 504.64660645]
[87.52139282 489.64950562]
[73.07640076 485.76110840]
[60.29946518 477.95205688]
[50.23052216 466.84790039]
[43.69191360 453.34283447]
[41.22124100 438.52755737]
[43.02716064 423.60140991]
[48.97180557 409.77499390]
[58.58125687 398.17224121]
[71.08332825 389.73895264]
[85.46959686 385.16561890]
[85.17508698 370.16851807]
[84.88058472 355.17141724]
[82.90008545 353.11837769]
[81.63545990 350.13699341]
[81.45210266 346.50415039]
[82.60542297 342.62634277]
[85.19821167 338.99673462]
[86.08127594 324.02276611]
[86.96434021 309.04876709]
[87.84739685 294.07479858]
[80.87277985 280.91409302]
[89.40908813 267.59335327]
[90.29215240 252.61936951]
[91.17521667 237.64538574]
[92.05828094 222.67140198]
[92.50000000 207.67790222]
[92.50000000 192.67790222]
[92.50000000 177.67790222]
[92.50000000 162.67790222]
[92.50000000 147.67790222]
[92.50000000 132.67790222]
[75.72005463 123.12097168]
[66.99460602 105.89401245]
[69.21820068 86.71180725]
[81.65318298 71.93775177]
[76.46142578 57.86488342]
[71.26967621 43.79201126]
[66.07791901 29.71914291]
[60.88616180 15.64627171]
[45.80128479 12.41362762]
[34.87489700 1.52245724]
[31.59356880 -13.55190659]
[37.00436401 -27.99928856]
[49.38071442 -37.20958328]
[64.77336884 -38.24381638]
[78.27059174 -30.77197075]
[85.56546783 -17.17828369]
[84.33023071 -1.80045068]
[74.95903015 10.45451641]
[80.15078735 24.52738571]
[85.34254456 38.60025787]
[90.53430176 52.67312622]
[95.72605896 66.74599457]
[100.00000000 66.47246552]
[104.27394104 66.74599457]
[109.46569824 52.67312622]
[114.65745544 38.60025787]
[119.84921265 24.52738571]
[125.04096985 10.45451641]
[119.65721130 -4.65821743]
[128.23818970 -18.21352196]
[144.20132446 -19.81292725]
[155.30105591 -8.22950745]
[153.02261353 7.65092993]
[139.11383057 15.64627171]
[133.92208862 29.71914291]
[128.73033142 43.79201126]
[123.53857422 57.86488342]
[118.34681702 71.93775177]
[127.62843323 81.00617981]
[132.77142334 92.91980743]
[133.00538635 105.89401245]
[128.29528809 117.98532104]
[119.34667206 127.38250732]
[107.50000000 132.67790222]
[107.50000000 147.67790222]
[107.50000000 162.67790222]
[107.50000000 177.67790222]
[107.50000000 192.67790222]
[107.50000000 207.67790222]
[110.16824341 212.28486633]
[110.71179962 216.98127747]
[109.46054840 220.93074036]
[107.03226471 223.55445862]
[106.14920044 238.52844238]
[105.26613617 253.50242615]
[104.38307190 268.47640991]
[111.29453278 282.70816040]
[102.82138062 294.95785522]
[101.93832397 309.93182373]
[101.05525970 324.90582275]
[100.17219543 339.87979126]
[99.87769318 354.87692261]
[100.17219543 369.87402344]
[100.46670532 384.87112427]
[115.02142334 388.87612915]
[127.84494781 396.81210327]
[137.90251160 408.02862549]
[144.38539124 421.61096191]
[146.77592468 436.45474243]
[144.88879395 451.35559082]
[138.88543701 465.10696411]
[129.26020813 476.59783936]
[116.79969788 484.90249634]
[102.51850128 489.35498047]
[102.81301117 504.35208130]
[103.10751343 519.34918213]
[103.40201569 534.34631348]
[103.69652557 549.34344482]
[106.14482117 553.07202148]
[107.14500427 556.99212646]
[106.81916809 560.61499023]
[105.43846893 563.54437256]
[103.37889099 565.51812744]
[102.49583435 580.49206543]
[109.40728760 594.72381592]
[100.93414307 606.97351074]
[100.05107880 621.94750977]
[99.16801453 636.92150879]
[101.31621552 640.83068848]
[102.00576019 644.81719971]
[101.39667511 648.40332031]
[99.79039764 651.21533203]
[97.58231354 653.02136230]
[95.52713013 667.87994385]
[93.47194672 682.73846436]
[91.41675568 697.59698486]
[89.36157227 712.45556641]
[87.30638885 727.31408691]
[100.43841553 734.97033691]
[109.63693237 747.07220459]
[113.49922180 761.77429199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 156]
[12 155]
[13 154]
[14 153]
[15 152]
[16 151]
[17 146]
[18 145]
[19 144]
[21 142]
[22 141]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[37 122]
[38 121]
[39 120]
[44 119]
[45 118]
[46 117]
[47 116]
[49 114]
[50 113]
[51 112]
[52 111]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[58 102]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
