%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCUUUCUUUGAGGCCAGGACUGGGUGAUGGUGUCGCUACCCCCGCCGCAGUCUGACGUCACGCUGCCGGGCCCCACCAGACUGGAGGGCGAGCGCCAAGGGGACCUCAUGCAGGCACCGGGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[68.80574799 527.81774902]
[64.83164978 542.49005127]
[55.54127502 554.52154541]
[42.35133743 562.07763672]
[27.27321434 564.00598145]
[12.60620308 560.01257324]
[0.58691889 550.70635986]
[-6.95178509 537.50653076]
[-8.86031055 522.42584229]
[-4.84762287 507.76412964]
[4.47437429 495.75708008]
[17.68414307 488.23574829]
[32.76728821 486.34707642]
[36.70790100 471.87393188]
[40.64850998 457.40078735]
[44.58912277 442.92767334]
[48.52973175 428.45452881]
[52.47034073 413.98141479]
[48.34835815 399.66851807]
[59.43929672 388.38571167]
[63.37990952 373.91259766]
[57.01374054 355.71755981]
[71.30390930 341.59484863]
[74.54067230 326.94824219]
[77.77743530 312.30163574]
[72.96875763 298.20462036]
[83.50163269 286.39913940]
[86.73839569 271.75253296]
[89.97515869 257.10592651]
[93.21192169 242.45928955]
[95.01997375 227.56866455]
[95.38243103 212.57304382]
[95.74488831 197.57742310]
[96.10734558 182.58180237]
[96.46980286 167.58618164]
[96.65103912 152.58728027]
[96.65103912 137.58728027]
[96.65103912 122.58728027]
[96.65103912 107.58728027]
[91.58262634 108.56094360]
[85.72956848 106.58939362]
[80.61867523 101.38449097]
[77.82297516 93.38311768]
[78.64073181 83.72116852]
[74.00547791 69.45532227]
[69.37022400 55.18947601]
[64.73497009 40.92362595]
[59.96917343 36.10669708]
[58.63224792 30.45123100]
[60.23849869 25.85529518]
[56.29788971 11.38216305]
[52.35727692 -3.09097052]
[48.41666794 -17.56410408]
[44.47605515 -32.03723526]
[33.38511658 -43.32004166]
[37.50709915 -57.63291931]
[33.56649017 -72.10605621]
[21.54920959 -83.26477051]
[25.46757889 -99.18891907]
[41.29071426 -103.49709320]
[52.74113083 -91.75741577]
[48.03962326 -76.04666138]
[51.98023224 -61.57353210]
[62.78931427 -51.32594299]
[58.94918823 -35.97784805]
[62.88980103 -21.50471497]
[66.83041382 -7.03158140]
[70.77101898 7.44155216]
[74.71163177 21.91468620]
[79.00081635 36.28837204]
[83.63607025 50.55422211]
[88.27132416 64.82006836]
[92.90657806 79.08591461]
[107.42626953 82.85136414]
[118.41030121 72.63612366]
[129.27009583 62.28891754]
[140.00408936 51.81124496]
[150.73806763 41.33357620]
[150.67839050 25.52939987]
[161.87057495 14.37096977]
[177.67449951 14.47838497]
[188.71397400 25.78791809]
[188.43948364 41.58982086]
[177.01385498 52.50910950]
[161.21574402 52.06755829]
[150.48175049 62.54523087]
[139.74777222 73.02290344]
[137.13230896 80.01717377]
[128.62553406 83.62015533]
[117.64151001 93.83539581]
[111.65103912 107.58728027]
[111.65103912 122.58728027]
[111.65103912 137.58728027]
[111.65103912 152.58728027]
[114.80593109 161.27020264]
[111.46542358 167.94863892]
[111.10296631 182.94425964]
[110.74050903 197.93988037]
[110.37805176 212.93550110]
[110.01559448 227.93112183]
[120.76324463 217.46746826]
[135.58085632 215.13543701]
[149.02294922 221.79202271]
[156.14953613 234.99095154]
[154.34159851 249.88160706]
[144.26354980 260.99163818]
[129.61907959 264.23812866]
[115.79005432 258.42797852]
[107.85854340 245.69606018]
[104.62178040 260.34268188]
[101.38501740 274.98928833]
[98.14825439 289.63589478]
[102.72541046 304.78054810]
[92.42404938 315.53839111]
[89.18728638 330.18499756]
[85.95052338 344.83163452]
[92.38721466 353.75735474]
[92.78258514 364.53378296]
[87.24843597 373.53082275]
[77.85304260 377.85321045]
[73.91242981 392.32632446]
[77.75255585 407.67443848]
[66.94347382 417.92202759]
[63.00286484 432.39514160]
[59.06225586 446.86828613]
[55.12164307 461.34140015]
[51.18103409 475.81454468]
[47.24042130 490.28768921]
[59.28414917 499.56222534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 128]
[14 127]
[15 126]
[16 125]
[17 124]
[18 123]
[20 121]
[21 120]
[23 116]
[24 115]
[25 114]
[27 112]
[28 111]
[29 110]
[30 109]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[36 94]
[37 93]
[38 92]
[39 91]
[44 73]
[45 72]
[46 71]
[47 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[56 63]
[57 62]
[74 90]
[75 89]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
