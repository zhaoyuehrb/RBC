%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCAGUCCAGGCCCGGCUUCCUCCAGGUCUCCCGGCAACGGCUGCGGCCUCGCCCACGUUAUGGCGCCCGAGGAGAACGCGGGGACCGAACUCUUGCUGCAGGGUUUUGAGCGCCGCUUCCUGGCGGUGCGCACACUGCGCUCCUUCCCCUGGCAGAGCU\
) } def
/len { sequence length } bind def

/coor [
[99.61413574 241.38056946]
[99.03959656 226.39157104]
[98.46504974 211.40258789]
[97.89051056 196.41358948]
[97.17243195 181.43078613]
[96.31088257 166.45555115]
[95.44934082 151.48031616]
[94.58779144 136.50508118]
[83.89743042 134.64147949]
[73.86489868 129.61514282]
[65.43189240 121.66304016]
[59.45390320 111.30310059]
[45.24227142 116.10201263]
[31.03063965 120.90092468]
[16.81900978 125.69983673]
[2.60737848 130.49874878]
[-11.55763721 135.43356323]
[-25.67473793 140.50381470]
[-39.79183960 145.57406616]
[-53.90893936 150.64431763]
[-68.02603912 155.71456909]
[-70.84712219 170.74749756]
[-80.74863434 182.27384949]
[-94.99542999 187.26335144]
[-109.72824860 184.47052002]
[-121.00903320 174.74377441]
[-135.12612915 179.81402588]
[-145.49868774 191.76060486]
[-160.09217834 188.78074646]
[-174.20927429 193.85099792]
[-187.07235718 204.89535522]
[-201.24592590 195.59234619]
[-196.23013306 179.39733887]
[-179.27952576 179.73390198]
[-165.16242981 174.66365051]
[-155.79962158 163.07974243]
[-140.19638062 165.69692993]
[-126.07928467 160.62667847]
[-123.56484985 145.94528198]
[-113.97556305 134.41699219]
[-99.80977631 129.20191956]
[-84.83731079 131.79463196]
[-73.09629059 141.59747314]
[-58.97919083 136.52722168]
[-44.86209106 131.45697021]
[-30.74499130 126.38671112]
[-16.62788963 121.31645966]
[-11.37117195 116.07146454]
[-2.19153309 116.28711700]
[12.02009773 111.48820496]
[26.23172760 106.68929291]
[40.44335938 101.89038086]
[54.65499115 97.09147644]
[58.07279205 82.48603821]
[47.46619034 71.87944031]
[36.85958862 61.27283859]
[26.25298691 50.66623688]
[10.94859600 53.22655869]
[-2.92277884 46.27209473]
[-10.02731133 32.47697830]
[-7.63316441 17.14571190]
[3.33906484 6.17348289]
[18.67033005 3.77933550]
[32.46544647 10.88386822]
[39.41991043 24.75524330]
[36.85958862 40.05963516]
[47.46619034 50.66623688]
[58.07279205 61.27283859]
[68.67939758 71.87944031]
[84.00896454 62.46963882]
[101.32716370 60.52419662]
[117.30081177 65.94113159]
[129.05410767 77.24540710]
[142.49658203 70.58960724]
[155.93907166 63.93381119]
[169.38156128 57.27801514]
[182.82403564 50.62221527]
[196.26652527 43.96641922]
[200.28775024 38.62369156]
[205.61135864 36.47242737]
[210.35379028 37.32426071]
[224.04135132 31.18823051]
[237.72891235 25.05220222]
[251.41645813 18.91617203]
[265.10400391 12.78014278]
[264.37246704 1.42412078]
[268.00622559 -9.74640656]
[275.74679565 -19.06468201]
[286.70550537 -25.03857803]
[299.46057129 -26.58569908]
[312.24060059 -23.21928024]
[322.00415039 -34.60668945]
[331.76770020 -45.99409485]
[341.53125000 -57.38150406]
[351.29479980 -68.76891327]
[361.05834961 -80.15631866]
[370.82189941 -91.54372406]
[369.36236572 -107.28047180]
[379.52200317 -119.38655853]
[395.27328491 -120.67964935]
[407.27130127 -110.39257812]
[408.39776611 -94.62848663]
[397.98443604 -82.73992920]
[382.20932007 -81.78017426]
[372.44577026 -70.39276123]
[362.68222046 -59.00535583]
[352.91867065 -47.61795044]
[343.15509033 -36.23054123]
[333.39154053 -24.84313583]
[323.62799072 -13.45572853]
[329.76403809 0.23182610]
[344.76129150 0.51914930]
[358.70712280 -6.95239067]
[371.28384399 1.02727938]
[386.28109741 1.31460261]
[401.27835083 1.60192585]
[416.27560425 1.88924897]
[431.27285767 2.17657232]
[446.27008057 2.46389556]
[461.26733398 2.75121856]
[476.26458740 3.03854179]
[490.35177612 -5.35686255]
[504.53204346 2.88039875]
[504.21792603 19.27653694]
[489.73257446 26.96461105]
[475.97726440 18.03578949]
[460.98001099 17.74846649]
[445.98275757 17.46114349]
[430.98553467 17.17382050]
[415.98828125 16.88649750]
[400.99102783 16.59917450]
[385.99377441 16.31184959]
[370.99652100 16.02452660]
[358.12338257 23.51661873]
[344.47396851 15.51639748]
[329.47671509 15.22907448]
[313.84576416 35.50280762]
[289.98822021 39.28853989]
[271.24005127 26.46769714]
[257.55249023 32.60372543]
[243.86492920 38.73975754]
[230.17738342 44.87578583]
[216.48982239 51.01181412]
[202.92231750 57.40890121]
[189.47984314 64.06469727]
[176.03735352 70.72049713]
[162.59486389 77.37629700]
[149.15238953 84.03208923]
[135.70989990 90.68788910]
[136.56408691 104.99803925]
[131.90081787 118.55399323]
[122.42377472 129.31018066]
[109.56302643 135.64352417]
[110.42457581 150.61875916]
[111.28612518 165.59400940]
[112.14767456 180.56924438]
[115.77919769 189.00276184]
[112.87950134 195.83905029]
[113.45404816 210.82804871]
[114.02858734 225.81703186]
[114.60312653 240.80603027]
[121.25170898 256.40194702]
[108.10579681 267.10809326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 161]
[2 160]
[3 159]
[4 158]
[5 156]
[6 155]
[7 154]
[8 153]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[26 38]
[27 37]
[29 35]
[30 34]
[54 69]
[55 68]
[56 67]
[57 66]
[73 149]
[74 148]
[75 147]
[76 146]
[77 145]
[78 144]
[81 143]
[82 142]
[83 141]
[84 140]
[85 139]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[111 136]
[112 135]
[114 133]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
