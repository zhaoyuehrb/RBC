%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAAGUUAUAAAGAGGGUACGAGGGGGCCAGCUGGAGAGCCAUGCAGUCCAAGCGGGAUUGUGAGCUGUGGUGUGAGAGGGUGAAUCCAGAGAACAAGGCGGCGCUGGAGGCGUGGGUCAGGGAGACAGGCAUCCGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[86.28273773 175.90736389]
[84.31330872 190.77751160]
[87.74126434 205.38056946]
[83.13889313 219.65705872]
[71.82743073 229.50849915]
[57.05417633 232.10673523]
[43.06021881 226.70588684]
[33.86293793 214.85641479]
[32.10268402 199.96005249]
[38.28478622 186.29324341]
[50.63428497 177.77952576]
[59.16539383 165.44177246]
[67.69650269 153.10401917]
[76.22761536 140.76626587]
[69.23062897 138.06587219]
[55.82883835 144.80323792]
[50.77529144 159.53753662]
[37.08799744 166.17926025]
[23.07224464 161.27067566]
[9.67045689 168.00804138]
[-3.73133063 174.74540710]
[-6.10872841 190.07928467]
[-17.06896400 201.06349182]
[-32.39760590 203.47438049]
[-46.20047379 196.38491821]
[-53.17008972 182.52114868]
[-50.62648773 167.21397400]
[-39.54773712 156.34930420]
[-24.19384575 154.10484314]
[-10.46869659 161.34361267]
[2.93309140 154.60624695]
[16.33487892 147.86889648]
[20.75584221 133.69177246]
[34.25118256 126.66821289]
[49.09147263 131.40144348]
[62.49325943 124.66408539]
[57.20447159 100.13725281]
[65.84941101 77.85536194]
[84.36182404 64.70077515]
[105.86978149 63.96055984]
[111.27057648 49.96658325]
[109.02099609 34.30612183]
[120.82186127 25.21828270]
[126.22265625 11.22430515]
[131.62344360 -2.76967263]
[137.02424622 -16.76365089]
[142.42503357 -30.75762939]
[147.82583618 -44.75160599]
[143.31655884 -56.88747025]
[148.15861511 -68.46002960]
[159.23422241 -73.43810272]
[164.93692017 -87.31179047]
[170.63961792 -101.18547821]
[176.34231567 -115.05916595]
[176.72134399 -124.26165771]
[182.32177734 -129.16949463]
[188.32369995 -142.91638184]
[194.32562256 -156.66326904]
[184.68760681 -171.94845581]
[186.08462524 -189.80770874]
[197.77642822 -203.17300415]
[214.98567200 -206.86694336]
[220.38647461 -220.86091614]
[225.78726196 -234.85490417]
[231.18806458 -248.84887695]
[222.93205261 -261.85443115]
[223.90582275 -277.04998779]
[233.52677917 -288.62158203]
[247.94412231 -292.26547241]
[253.34492493 -306.25942993]
[258.74572754 -320.25341797]
[258.92529297 -329.46194458]
[264.41809082 -334.48995972]
[270.12078857 -348.36364746]
[275.82348633 -362.23733521]
[265.58389282 -373.55609131]
[261.27761841 -388.19912720]
[263.75964355 -403.25909424]
[272.53717041 -415.74578857]
[285.86740112 -423.17999268]
[301.10360718 -424.08566284]
[315.22067261 -418.28292847]
[325.41558838 -406.92395020]
[329.66418457 -392.26406860]
[327.12286377 -377.21398926]
[318.29623413 -364.76196289]
[304.93682861 -357.38027954]
[289.69717407 -356.53463745]
[283.99447632 -342.66094971]
[278.29177856 -328.78726196]
[272.73968506 -314.85263062]
[267.33889771 -300.85864258]
[261.93811035 -286.86465454]
[270.16937256 -274.47982788]
[269.52194214 -259.44503784]
[260.03472900 -247.53514099]
[245.18203735 -243.44807434]
[239.78123474 -229.45410156]
[234.38044739 -215.46012878]
[228.97966003 -201.46614075]
[237.05816650 -192.29360962]
[240.46221924 -180.47891235]
[238.47940063 -168.27113342]
[231.42889404 -158.02175903]
[220.61204529 -151.73184204]
[208.07250977 -150.66134644]
[202.07058716 -136.91445923]
[196.06866455 -123.16756439]
[190.21600342 -109.35646820]
[184.51330566 -95.48278046]
[178.81060791 -81.60909271]
[173.10791016 -67.73540497]
[176.40776062 -50.53163528]
[161.81980896 -39.35081100]
[156.41902161 -25.35683441]
[151.01821899 -11.36285591]
[145.61743164 2.63112187]
[140.21662903 16.62509918]
[134.81584167 30.61907768]
[137.45172119 45.27859497]
[125.26455688 55.36737442]
[119.86376190 69.36135101]
[128.57398987 75.62023926]
[135.29792786 84.35890961]
[139.33126831 94.94303894]
[140.17314148 106.53964233]
[137.58146667 118.18237305]
[131.60745239 128.85212708]
[122.60486603 137.56591797]
[111.21256256 143.46665955]
[116.61335754 157.46064758]
[122.01415253 171.45462036]
[127.41493988 185.44859314]
[132.81573486 199.44258118]
[145.91168213 209.31314087]
[143.64321899 225.55464172]
[128.34393311 231.45919800]
[115.75241852 220.95272827]
[118.82176208 204.84336853]
[113.42096710 190.84939575]
[108.02017212 176.85540771]
[102.61937714 162.86143494]
[97.21858215 148.86746216]
[90.22159576 146.16706848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 36]
[16 35]
[19 32]
[20 31]
[21 30]
[40 122]
[41 121]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[48 114]
[51 112]
[52 111]
[53 110]
[54 109]
[56 108]
[57 107]
[58 106]
[62 100]
[63 99]
[64 98]
[65 97]
[69 93]
[70 92]
[71 91]
[73 90]
[74 89]
[75 88]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
