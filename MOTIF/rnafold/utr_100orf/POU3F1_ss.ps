%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGCGGCGGCGCGGCGCAGGGCGCGGGGCGGCAUGGCCACCACCGCGCAGUACCUGCCGCGGGGCCCCGGUGGCGGAGCCGGGGGCACCGGGCCGCUUAUGCACCCGGACGCCGCGGCGGCGGCGGCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[156.30876160 670.55096436]
[154.92472839 655.61492920]
[146.04611206 643.65582275]
[152.47708130 629.20062256]
[151.09306335 614.26464844]
[142.21444702 602.30554199]
[148.64541626 587.85034180]
[147.26139832 572.91430664]
[138.38278198 560.95526123]
[144.81375122 546.50006104]
[143.42971802 531.56402588]
[134.55110168 519.60498047]
[140.98208618 505.14974976]
[139.59805298 490.21374512]
[138.21403503 475.27774048]
[136.83000183 460.34170532]
[135.44598389 445.40570068]
[134.06195068 430.46969604]
[132.67793274 415.53369141]
[119.30829620 405.39813232]
[117.32362366 388.39978027]
[128.42675781 374.93734741]
[126.69810486 360.03729248]
[124.96945953 345.13723755]
[115.81697845 333.38644409]
[121.91235352 318.78652954]
[120.18370819 303.88647461]
[118.45506287 288.98641968]
[107.23585510 275.54199219]
[114.56429291 258.69430542]
[112.49194336 243.83813477]
[110.41960144 228.98197937]
[108.34725189 214.12582397]
[106.27490997 199.26966858]
[104.20256042 184.41351318]
[94.78110504 172.87724304]
[100.53762817 158.14045715]
[98.46528625 143.28430176]
[96.39293671 128.42814636]
[80.37425995 123.08937073]
[69.36567688 109.07594299]
[67.80760193 90.38458252]
[77.23355103 73.09470367]
[68.75650787 60.71974564]
[61.25569153 55.34725952]
[60.23045349 47.95960236]
[52.04150391 35.39213943]
[43.85255432 22.82467842]
[35.66360474 10.25721550]
[27.47465706 -2.31024742]
[19.14110374 -14.78229141]
[10.66405773 -27.15725327]
[2.18701100 -39.53221512]
[-11.75247383 -49.18245316]
[-6.33820534 -65.24862671]
[10.59891796 -64.49351501]
[14.56197357 -48.00926208]
[23.03901863 -35.63430023]
[31.51606560 -23.25933838]
[37.94903183 -19.48500633]
[40.04211807 -10.49919605]
[48.23106766 2.06826615]
[56.42001724 14.63572884]
[64.60896301 27.20319176]
[72.79791260 39.77065277]
[81.13146973 52.24269867]
[89.60851288 64.61766052]
[104.55951691 63.40623474]
[110.93366241 49.82793045]
[117.30780792 36.24962997]
[123.68195343 22.67132950]
[130.05610657 9.09302807]
[136.43025208 -4.48527288]
[142.80439758 -18.06357384]
[137.20208740 -32.84158707]
[143.76637268 -47.21815109]
[158.60278320 -52.66390991]
[172.90914917 -45.94798660]
[178.19773865 -31.05482101]
[171.33093262 -16.82026672]
[156.38269043 -11.68942833]
[150.00854492 1.88887286]
[143.63439941 15.46717453]
[137.26025391 29.04547501]
[130.88610840 42.62377548]
[124.51196289 56.20207977]
[118.13781738 69.78038025]
[129.78819275 84.46067810]
[131.87539673 102.18942261]
[124.69864655 117.55750275]
[111.24909210 126.35579681]
[113.32144165 141.21194458]
[115.39378357 156.06809998]
[124.96347046 168.66699219]
[119.05872345 182.34117126]
[121.13106537 197.19732666]
[123.20340729 212.05348206]
[125.27575684 226.90963745]
[127.34809875 241.76579285]
[129.42044067 256.62194824]
[139.26087952 265.05068970]
[140.63867188 277.52957153]
[133.35511780 287.25778198]
[135.08377075 302.15783691]
[136.81240845 317.05789185]
[146.08853149 329.87445068]
[139.86952209 343.40859985]
[141.59815979 358.30865479]
[143.32681274 373.20870972]
[154.81759644 380.33782959]
[160.00189209 392.61569214]
[157.18176270 405.44168091]
[147.61393738 414.14965820]
[148.99797058 429.08566284]
[150.38198853 444.02166748]
[151.76602173 458.95770264]
[153.15003967 473.89370728]
[154.53407288 488.82971191]
[155.91809082 503.76571655]
[164.89570618 516.79315186]
[158.36573792 530.17999268]
[159.74975586 545.11602783]
[168.72737122 558.14343262]
[162.19740295 571.53033447]
[163.58143616 586.46630859]
[172.55905151 599.49371338]
[166.02908325 612.88061523]
[167.41310120 627.81658936]
[176.39071655 640.84399414]
[169.86074829 654.23089600]
[171.24476624 669.16693115]
[182.61898804 680.48089600]
[180.72189331 696.41143799]
[167.00877380 704.73785400]
[151.99916077 699.07293701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[4 128]
[5 127]
[7 125]
[8 124]
[10 122]
[11 121]
[13 119]
[14 118]
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[22 109]
[23 108]
[24 107]
[26 105]
[27 104]
[28 103]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[37 93]
[38 92]
[39 91]
[43 67]
[44 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 59]
[52 58]
[53 57]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
