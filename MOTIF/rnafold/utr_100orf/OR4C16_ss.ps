%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAACUGAAUAAUAAUGUGACUGAGUUCAUUCUGCUUGGAUUGACACAGGAUCCUUUUUGGAAGAAAAUAGUGUUUGUUAUUUUUUUGCGUCUCUACU\
) } def
/len { sequence length } bind def

/coor [
[160.62246704 433.31866455]
[157.38220215 418.67282104]
[154.14193726 404.02697754]
[150.90167236 389.38113403]
[147.66139221 374.73529053]
[144.42112732 360.08944702]
[131.76364136 352.32263184]
[128.26890564 337.51583862]
[136.50128174 324.29214478]
[133.26101685 309.64630127]
[130.02075195 295.00045776]
[126.78047943 280.35464478]
[123.54021454 265.70880127]
[120.29994965 251.06294250]
[117.05967712 236.41711426]
[113.81941223 221.77127075]
[110.57914734 207.12542725]
[99.67491150 203.12454224]
[92.03961945 194.21176147]
[89.71218872 182.58537292]
[93.40270996 171.19000244]
[102.28162384 162.97096252]
[99.95815277 148.15200806]
[97.63468170 133.33303833]
[95.31121063 118.51409149]
[83.66432953 109.89454651]
[81.41992950 95.57991028]
[89.86983490 83.80938721]
[87.54636383 68.99042511]
[85.22289276 54.17147064]
[80.73054504 46.00988388]
[83.06507111 38.85618210]
[81.20359039 23.97213173]
[79.34210968 9.08808422]
[77.48062897 -5.79596376]
[75.61914062 -20.68001175]
[60.75544739 -28.57282448]
[53.53712845 -43.59258652]
[56.59893417 -59.80519867]
[68.55615997 -70.93302917]
[66.23268890 -85.75198364]
[63.90921402 -100.57093811]
[61.58573914 -115.38990021]
[59.26226807 -130.20886230]
[45.77825165 -138.12815857]
[40.58806610 -152.87928772]
[46.14235306 -167.49722290]
[59.81855392 -175.07980347]
[75.15917969 -172.04678345]
[84.92085266 -159.83026123]
[84.49442291 -144.19848633]
[74.08122253 -132.53233337]
[76.40469360 -117.71337128]
[78.72817230 -102.89441681]
[81.05164337 -88.07545471]
[83.37511444 -73.25650024]
[95.85713959 -68.25093079]
[104.26787567 -57.61819839]
[106.29766083 -44.10382462]
[101.30259705 -31.26660919]
[90.50318909 -22.54149246]
[92.36467743 -7.65744495]
[94.22615814 7.22660303]
[96.08763885 22.11065102]
[97.94911957 36.99469757]
[100.04184723 51.84799957]
[102.36531830 66.66695404]
[104.68878937 81.48590851]
[116.33567047 90.10545349]
[118.58007050 104.42008972]
[110.13016510 116.19061279]
[112.45363617 131.00956726]
[114.77710724 145.82852173]
[117.10057831 160.64749146]
[132.77188110 171.04049683]
[135.99813843 189.24671936]
[125.22498322 203.88516235]
[128.46525574 218.53100586]
[131.70552063 233.17683411]
[134.94578552 247.82267761]
[138.18605042 262.46853638]
[141.42631531 277.11434937]
[144.66659546 291.76019287]
[147.90686035 306.40603638]
[151.14712524 321.05187988]
[164.18940735 329.56872559]
[167.26686096 344.46786499]
[159.06697083 356.84918213]
[162.30723572 371.49502563]
[165.54750061 386.14086914]
[168.78778076 400.78671265]
[172.02804565 415.43255615]
[175.26831055 430.07839966]
[189.54893494 436.14825439]
[197.50555420 449.47012329]
[196.07867432 464.92144775]
[185.81695557 476.56091309]
[170.66624451 479.91287231]
[156.45230103 473.68844604]
[148.64067078 460.28106689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[6 88]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[22 74]
[23 73]
[24 72]
[25 71]
[28 68]
[29 67]
[30 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
