%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUUCGAGCGGGAAGAGGGGGGUGGGUGGGAUCGGUGGGGGAGACCAUGACCUCCAGCUACGGGCACGUUCUGGAGCGGCAACCGGCGCUGGGCGGCCGCUUGGACAGCCCGGGCAACCUCGACACCCUGCAGGCGAAAAAGAACU\
) } def
/len { sequence length } bind def

/coor [
[94.34918213 378.50567627]
[96.18415833 363.35327148]
[104.41903687 350.50219727]
[117.41876984 342.50408936]
[115.82973480 327.58850098]
[114.24069977 312.67291260]
[112.65166473 297.75732422]
[100.12145996 283.08358765]
[108.38890839 264.74853516]
[106.16827393 249.91381836]
[103.94763184 235.07911682]
[101.72698975 220.24440002]
[99.50634766 205.40968323]
[83.04463196 195.10304260]
[79.30532837 175.73634338]
[91.10293579 159.55342102]
[87.94274902 144.89009094]
[84.78256226 130.22676086]
[73.21269226 120.68013000]
[58.21607208 120.36174774]
[43.21945190 120.04336548]
[28.22283173 119.72498322]
[13.22621059 119.40660095]
[-1.77040970 119.08822632]
[-11.64580917 127.45531464]
[-24.17242050 126.84143066]
[-32.62233734 118.12500000]
[-47.60882187 117.48838043]
[-62.59530640 116.85176849]
[-77.58179474 116.21514893]
[-89.16726685 126.62738037]
[-104.35662079 125.76827240]
[-114.21170044 114.65912628]
[-129.19818115 114.02250671]
[-139.61492920 125.68550110]
[-155.09877014 127.87294006]
[-168.33869934 119.55198669]
[-173.08322144 104.65153503]
[-167.09213257 90.20712280]
[-153.19424438 83.03897095]
[-137.95169067 86.53164673]
[-128.56156921 99.03602600]
[-113.57508087 99.67264557]
[-102.81338501 89.43929291]
[-87.60588837 89.87142181]
[-76.94517517 101.22866058]
[-61.95869064 101.86528015]
[-46.97220612 102.50189972]
[-31.98572159 103.13851929]
[-16.93144035 94.17752075]
[-1.45202899 104.09160614]
[13.54459190 104.40998077]
[28.54121208 104.72836304]
[43.53783417 105.04674530]
[58.53445435 105.36512756]
[73.53107452 105.68350983]
[82.74697113 83.10017395]
[104.02671814 79.15560913]
[111.89132690 66.38267517]
[119.75593567 53.60973740]
[121.61199188 44.59342575]
[127.92546844 40.65164948]
[136.05941772 28.04851913]
[144.19335938 15.44538975]
[152.32731628 2.84225917]
[160.46125793 -9.76087093]
[158.51419067 -22.55698776]
[165.60472107 -32.90189743]
[177.45736694 -35.52716446]
[185.85697937 -47.95480728]
[194.25660706 -60.38245392]
[202.65623474 -72.81009674]
[203.51773071 -79.47839355]
[207.11322021 -83.99183655]
[211.68542480 -85.57653046]
[220.60491943 -97.63648987]
[229.52442932 -109.69644928]
[238.44392395 -121.75640106]
[247.36341858 -133.81636047]
[256.28292847 -145.87631226]
[265.20242310 -157.93627930]
[263.06335449 -173.36553955]
[272.28079224 -185.46899414]
[287.00341797 -187.41317749]
[295.92291260 -199.47312927]
[292.09313965 -214.63449097]
[298.95135498 -228.68789673]
[313.25939941 -234.99778748]
[328.26138306 -230.58479309]
[336.87384033 -217.53262329]
[335.03027344 -202.00408936]
[323.60110474 -191.33131409]
[307.98287964 -190.55363464]
[299.06338501 -178.49368286]
[301.51553345 -163.84709167]
[292.64169312 -151.48951721]
[277.26235962 -149.01678467]
[268.34286499 -136.95681763]
[259.42337036 -124.89686584]
[250.50387573 -112.83690643]
[241.58438110 -100.77694702]
[232.66488647 -88.71699524]
[223.74539185 -76.65703583]
[215.08387756 -64.41047668]
[206.68424988 -51.98283005]
[198.28463745 -39.55518723]
[189.88500977 -27.12754059]
[189.62248230 -9.61006832]
[173.06439209 -1.62692308]
[164.93045044 10.97620678]
[156.79649353 23.57933807]
[148.66255188 36.18246841]
[140.52859497 48.78559875]
[132.52886963 61.47434616]
[124.66426086 74.24728394]
[116.79965210 87.02021790]
[122.58688354 97.83522034]
[121.56801605 110.86700439]
[113.20743561 121.94353485]
[99.44589233 127.06656647]
[102.60607910 141.72990417]
[105.76626587 156.39323425]
[116.00250244 159.80400085]
[123.81435394 167.12823486]
[127.81578064 176.97337341]
[127.33589935 187.50852966]
[122.53050232 196.80494690]
[114.34106445 203.18904114]
[116.56170654 218.02375793]
[118.78234863 232.85847473]
[121.00298309 247.69319153]
[123.22362518 262.52789307]
[132.39692688 268.53314209]
[136.62759399 278.40878296]
[134.72596741 288.75878906]
[127.56726074 296.16827393]
[129.15629578 311.08389282]
[130.74533081 325.99948120]
[132.33436584 340.91506958]
[146.72735596 345.99487305]
[157.48486328 356.82257080]
[162.47096252 371.24829102]
[160.69566345 386.40783691]
[152.51144409 399.29119873]
[139.54331970 407.34045410]
[124.36608124 408.95733643]
[109.99320221 403.82089233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 139]
[5 138]
[6 137]
[7 136]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[16 122]
[17 121]
[18 120]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[27 49]
[28 48]
[29 47]
[30 46]
[33 43]
[34 42]
[58 116]
[59 115]
[60 114]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
[69 107]
[70 106]
[71 105]
[72 104]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[81 97]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
