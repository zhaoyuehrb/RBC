%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUGGCCGGCGGGCUGAGGCGUACGGGUCGCACGCAGCGCCAUGCGAGGCCCCCCUGCCUGGCCGCUGCGGCUGCUCGAGCCACCGAGCCCUGCCGAGCCAGGUCGGCUCCUGCCGGUAGCCUGCGUGUGGGCCGCGGCCA\
) } def
/len { sequence length } bind def

/coor [
[85.29468536 102.27467346]
[92.87521362 99.21266937]
[82.26860809 88.60606384]
[71.66201019 77.99946594]
[61.05540848 67.39286041]
[50.44880676 56.78626251]
[39.84220505 46.17966080]
[29.23560333 35.57305908]
[18.51393509 25.08278465]
[7.67847538 14.71008968]
[-3.15698409 4.33739376]
[-13.99244308 -6.03530169]
[-24.94040489 -16.28918648]
[-35.99956512 -26.42304039]
[-47.05872345 -36.55689240]
[-58.11788559 -46.69074631]
[-69.17704773 -56.82460022]
[-87.99548340 -55.23222733]
[-101.81893158 -67.62967682]
[-102.26116180 -85.87537384]
[-113.75183105 -95.51718903]
[-125.24249268 -105.15900421]
[-136.10058594 -103.58032227]
[-145.81730652 -108.18300629]
[-151.24652100 -117.20683289]
[-150.78082275 -127.50696564]
[-161.83998108 -137.64082336]
[-172.89913940 -147.77467346]
[-183.95829773 -157.90852356]
[-195.01747131 -168.04237366]
[-210.41926575 -171.66110229]
[-214.57554626 -185.96406555]
[-225.63470459 -196.09791565]
[-234.14456177 -199.62538147]
[-236.82151794 -206.57550049]
[-247.65696716 -216.94819641]
[-258.49243164 -227.32089233]
[-269.32788086 -237.69358826]
[-280.16336060 -248.06628418]
[-290.99880981 -258.43899536]
[-301.83425903 -268.81167603]
[-312.78222656 -279.06555176]
[-323.84140015 -289.19940186]
[-334.90054321 -299.33325195]
[-350.30233765 -302.95199585]
[-354.45861816 -317.25494385]
[-365.51779175 -327.38879395]
[-374.02764893 -330.91625977]
[-376.70458984 -337.86639404]
[-387.54006958 -348.23907471]
[-398.37551880 -358.61178589]
[-414.42462158 -361.98193359]
[-419.27273560 -377.64807129]
[-407.93249512 -389.49420166]
[-392.06982422 -385.33407593]
[-388.00280762 -369.44723511]
[-377.16735840 -359.07455444]
[-366.33190918 -348.70184326]
[-355.38394165 -338.44796753]
[-344.32476807 -328.31411743]
[-329.71401978 -325.42022705]
[-324.76669312 -310.39242554]
[-313.70755005 -300.25857544]
[-302.64837646 -290.12472534]
[-295.53805542 -287.90805054]
[-291.46157837 -279.64712524]
[-280.62609863 -269.27444458]
[-269.79064941 -258.90173340]
[-258.95520020 -248.52905273]
[-248.11973572 -238.15635681]
[-237.28427124 -227.78366089]
[-226.44882202 -217.41096497]
[-215.50085449 -207.15707397]
[-204.44169617 -197.02322388]
[-189.83091736 -194.12933350]
[-184.88360596 -179.10154724]
[-173.82444763 -168.96768188]
[-162.76528931 -158.83383179]
[-151.70613098 -148.69998169]
[-140.64697266 -138.56613159]
[-121.54592896 -135.85919189]
[-115.60067749 -116.64967346]
[-104.11001587 -107.00785828]
[-92.61934662 -97.36604309]
[-81.65169525 -100.81519318]
[-70.27049255 -98.48365784]
[-61.35981369 -90.84307098]
[-57.23533630 -79.72518158]
[-59.04319000 -67.88375854]
[-47.98403168 -57.74990463]
[-36.92487335 -47.61605453]
[-25.86571121 -37.48220062]
[-14.80655098 -27.34834671]
[-7.69623518 -25.13167953]
[-3.61974764 -16.87076187]
[7.21571159 -6.49806547]
[18.05117035 3.87463045]
[28.88663101 14.24732590]
[35.94689941 16.61857605]
[39.84220505 24.96645737]
[50.44880676 35.57305908]
[61.05540848 46.17966080]
[71.66201019 56.78626251]
[82.26860809 67.39286041]
[92.87521362 77.99946594]
[103.48181152 88.60606384]
[116.71063232 95.67701721]
[131.42240906 98.60337067]
[146.13418579 101.52972412]
[160.84597778 104.45608521]
[176.19244385 98.67524719]
[188.69869995 109.28305817]
[185.49937439 125.36709595]
[169.88568115 130.38150024]
[157.91961670 119.16786194]
[143.20783997 116.24150848]
[128.49606323 113.31515503]
[113.78427887 110.38879395]
[109.48245239 116.53244019]
[115.82201385 130.12692261]
[100.87880707 128.81971741]
[96.57698822 134.96336365]
[104.35858154 147.78703308]
[112.14018250 160.61071777]
[119.32297516 166.37857056]
[119.94814301 173.80010986]
[127.44814301 186.79049683]
[134.94813538 199.78086853]
[150.37854004 202.31794739]
[160.52883911 214.21354675]
[160.60638428 229.85093689]
[150.57455444 241.84661865]
[135.17007446 244.53660583]
[121.66647339 236.65075684]
[116.43972778 221.91253662]
[121.95776367 207.28086853]
[114.45776367 194.29049683]
[106.95776367 181.30010986]
[99.31650543 168.39231873]
[91.53490448 155.56863403]
[83.75331116 142.74496460]
[77.70288849 130.79093933]
[76.44614410 119.06742096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 106]
[3 105]
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[9 98]
[10 97]
[11 96]
[12 95]
[13 93]
[14 92]
[15 91]
[16 90]
[17 89]
[20 84]
[21 83]
[22 82]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[32 74]
[33 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 64]
[43 63]
[44 62]
[46 60]
[47 59]
[49 58]
[50 57]
[51 56]
[107 118]
[108 117]
[109 116]
[110 115]
[122 141]
[123 140]
[124 139]
[126 138]
[127 137]
[128 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
