%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCAGCGCUGCGUCCUGCUGCGCACGUGGGAAGCCCUGGCCCCGGCCACCCCCGCGAUGCCGCGCGCUCCCCGCUGCCGAGCCGUGCGCUCCCUGCUGCGCAGCCACUACCGCGAGGUGCUGCCGCUGGCCACGUUCGUGCGGCGCCUGGGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[458.46728516 632.08563232]
[470.16522217 622.69635010]
[485.09384155 624.14660645]
[476.71414185 611.70550537]
[468.33444214 599.26440430]
[459.95474243 586.82330322]
[451.57504272 574.38226318]
[443.19531250 561.94116211]
[434.81561279 549.50006104]
[426.43591309 537.05895996]
[418.05621338 524.61791992]
[409.43234253 512.34478760]
[400.56768799 500.24447632]
[391.70303345 488.14416504]
[374.71258545 490.64508057]
[358.70153809 484.19287109]
[348.08407593 470.46981812]
[345.83590698 453.17575073]
[352.66091919 437.03082275]
[343.32513428 425.29016113]
[333.98934937 413.54949951]
[324.65356445 401.80883789]
[315.31777954 390.06817627]
[305.98199463 378.32751465]
[296.64620972 366.58685303]
[287.31042480 354.84619141]
[280.65042114 351.55050659]
[277.90893555 342.78009033]
[268.80691528 330.85726929]
[259.70492554 318.93444824]
[250.60292053 307.01165771]
[241.50091553 295.08883667]
[227.62797546 289.66748047]
[225.40405273 274.00335693]
[216.30206299 262.08056641]
[207.20005798 250.15774536]
[190.47373962 248.65362549]
[179.77996826 235.27041626]
[182.09252930 217.95622253]
[172.75674438 206.21556091]
[163.42094421 194.47491455]
[154.08515930 182.73425293]
[142.07449341 181.03790283]
[134.20394897 171.28649902]
[135.13780212 158.38732910]
[126.03579712 146.46450806]
[116.93379974 134.54168701]
[107.83179474 122.61887360]
[101.50790405 124.97782898]
[94.48717499 125.52160645]
[87.30190277 124.05083466]
[80.53900909 120.52455902]
[74.79251862 115.07437897]
[70.61268616 108.00431824]
[68.45598602 99.77567291]
[68.64041901 90.97747040]
[58.40682602 80.01053619]
[48.17324066 69.04360199]
[32.33959198 64.77422333]
[28.38220215 48.85972595]
[40.37209702 37.67158508]
[55.97509766 42.71919632]
[59.14017487 58.81001282]
[69.37376404 69.77694702]
[79.60735321 80.74388123]
[92.44702148 72.98869324]
[87.50282288 58.82695389]
[82.55863190 44.66521072]
[68.79219055 36.42721176]
[66.79256439 20.50926399]
[78.09369659 9.12225533]
[94.02632141 11.00132465]
[102.36830139 24.70500946]
[96.72037506 39.72101593]
[101.66456604 53.88275909]
[106.60875702 68.04450226]
[126.23062897 89.41974640]
[119.75460815 113.51686859]
[128.85661316 125.43968964]
[137.95861816 137.36250305]
[147.06062317 149.28532410]
[164.20088196 155.94764709]
[165.82582092 173.39846802]
[175.16160583 185.13911438]
[184.49739075 196.87977600]
[193.83319092 208.62043762]
[207.33403015 208.60285950]
[218.21133423 216.26655579]
[222.60749817 228.61857605]
[219.12286377 241.05574036]
[228.22486877 252.97854614]
[237.32687378 264.90136719]
[251.85084534 271.17550659]
[253.42373657 285.98681641]
[262.52572632 297.90963745]
[271.62774658 309.83245850]
[280.72973633 321.75527954]
[289.83172607 333.67810059]
[299.05108643 345.51040649]
[308.38687134 357.25106812]
[317.72265625 368.99172974]
[327.05844116 380.73239136]
[336.39422607 392.47305298]
[345.73001099 404.21371460]
[355.06579590 415.95437622]
[364.40158081 427.69503784]
[376.99389648 424.57531738]
[389.78167725 426.46157837]
[400.85635376 433.03631592]
[408.57873535 443.28506470]
[411.82150269 455.65258789]
[410.13375854 468.27905273]
[403.80334473 479.27951050]
[412.66799927 491.37982178]
[421.53268433 503.48013306]
[427.49594116 506.52929688]
[430.52987671 511.41394043]
[430.49731445 516.23822021]
[438.87701416 528.67926025]
[447.25671387 541.12036133]
[455.63641357 553.56146240]
[464.01611328 566.00256348]
[472.39581299 578.44360352]
[480.77551270 590.88470459]
[489.15521240 603.32580566]
[497.53491211 615.76690674]
[506.63693237 627.68969727]
[516.42926025 639.05236816]
[526.22155762 650.41503906]
[536.34631348 661.48254395]
[546.79461670 672.24511719]
[557.24285889 683.00775146]
[572.81457520 683.40722656]
[583.25726318 694.47088623]
[582.78045654 709.31365967]
[593.22875977 720.07629395]
[603.67700195 730.83886719]
[619.59191895 734.79461670]
[623.86297607 750.62780762]
[612.09643555 762.05065918]
[596.39678955 757.31231689]
[592.91436768 741.28717041]
[582.46612549 730.52453613]
[572.01788330 719.76196289]
[557.16748047 719.79870605]
[546.41809082 709.03271484]
[546.48022461 693.45599365]
[536.03198242 682.69342041]
[525.58374023 671.93078613]
[522.02996826 671.53033447]
[518.50158691 669.35565186]
[515.84558105 665.44177246]
[514.85888672 660.20733643]
[505.06658936 648.84466553]
[495.27426147 637.48205566]
[492.73757935 652.26599121]
[480.59637451 661.07458496]
[465.75503540 658.89862061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[12 115]
[13 114]
[14 113]
[19 106]
[20 105]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[34 92]
[35 91]
[36 90]
[39 86]
[40 85]
[41 84]
[42 83]
[45 81]
[46 80]
[47 79]
[48 78]
[56 65]
[57 64]
[58 63]
[66 76]
[67 75]
[68 74]
[127 155]
[128 154]
[129 153]
[130 149]
[131 148]
[132 147]
[135 144]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
