%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACUGAUGCAUCAUAGUUGACUUCCACCAGUGUUUUAAUUGUUUCAUGGUUGCAGAUAUAAAGGGCAAUGAACAAAUUGAAAAAUAUUCUUGGAGAGAAGCUUGUGAUACUGGCAGCUCAAGAAUGGACAGAAAGCAUGGAAAAU\
) } def
/len { sequence length } bind def

/coor [
[81.10965729 228.98399353]
[70.14064789 218.46023560]
[64.03845215 204.53790283]
[63.73360062 189.34001160]
[69.27259064 175.18417358]
[79.81076050 164.22901917]
[93.74111938 158.14514160]
[93.42057037 143.14855957]
[93.10002899 128.15199280]
[92.77947998 113.15541077]
[88.35815430 98.82182312]
[80.17512512 86.25049591]
[71.99210358 73.67917633]
[63.80908203 61.10785675]
[55.62605667 48.53653336]
[47.44303513 35.96521378]
[39.12614822 23.48204803]
[30.67634583 11.08846664]
[22.22654533 -1.30511510]
[6.83318758 -1.89733922]
[-5.12010336 -11.32984829]
[-9.17915058 -25.82081604]
[-3.98912430 -39.75643921]
[-12.43892479 -52.15002060]
[-20.88872528 -64.54360199]
[-29.33852768 -76.93718719]
[-37.78832626 -89.33076477]
[-53.06134415 -92.39226532]
[-61.45409012 -105.08148956]
[-58.44129562 -119.62310791]
[-66.89109802 -132.01669312]
[-75.34089661 -144.41027832]
[-83.79070282 -156.80384827]
[-92.24050140 -169.19743347]
[-100.69029999 -181.59101868]
[-109.40302277 -193.80119324]
[-118.37467957 -205.82240295]
[-127.34633636 -217.84361267]
[-136.31799316 -229.86480713]
[-145.28965759 -241.88601685]
[-154.26130676 -253.90722656]
[-163.36090088 -265.83187866]
[-172.58740234 -277.65859985]
[-181.81390381 -289.48535156]
[-191.04040527 -301.31207275]
[-195.27783203 -302.84011841]
[-198.45259094 -305.40747070]
[-200.36511230 -308.53756714]
[-200.99661255 -311.73864746]
[-200.49771118 -314.56573486]
[-208.68074036 -327.13705444]
[-216.86375427 -339.70837402]
[-225.04678345 -352.27969360]
[-233.22979736 -364.85101318]
[-248.46206665 -363.35543823]
[-262.64022827 -369.12066650]
[-272.50628662 -380.82192993]
[-275.79306030 -395.77038574]
[-271.74526978 -410.53094482]
[-261.29309082 -421.71176147]
[-246.83834839 -426.74353027]
[-231.70263672 -424.47006226]
[-219.36402893 -415.41372681]
[-212.65785217 -401.65560913]
[-213.12512207 -386.35723877]
[-220.65847778 -373.03405762]
[-212.47546387 -360.46273804]
[-204.29243469 -347.89141846]
[-196.10940552 -335.32009888]
[-187.92639160 -322.74874878]
[-179.21366882 -310.53857422]
[-169.98716736 -298.71185303]
[-160.76066589 -286.88510132]
[-151.53416443 -275.05838013]
[-144.89295959 -271.69540405]
[-142.24011230 -262.87887573]
[-133.26844788 -250.85766602]
[-124.29679108 -238.83647156]
[-115.32513428 -226.81526184]
[-106.35347748 -214.79406738]
[-97.38181305 -202.77285767]
[-92.80128479 -201.20790100]
[-89.18550873 -196.70811462]
[-88.29672241 -190.04081726]
[-79.84691620 -177.64723206]
[-71.39711761 -165.25364685]
[-62.94731522 -152.86007690]
[-54.49751663 -140.46649170]
[-46.04771423 -128.07290649]
[-31.41060829 -125.56478882]
[-22.66475677 -113.11631012]
[-25.39474678 -97.78056335]
[-16.94494438 -85.38698578]
[-8.49514389 -72.99340057]
[-0.04534349 -60.59982300]
[8.40445709 -48.20624161]
[23.27289391 -47.94624329]
[35.27921677 -38.87363815]
[39.69266510 -24.30055237]
[34.62012482 -9.75491619]
[43.06992722 2.63866568]
[51.51972961 15.03224754]
[57.93183136 18.81381607]
[60.01435471 27.78218842]
[68.19738007 40.35351181]
[76.38040161 52.92483139]
[84.56342316 65.49615479]
[92.74645233 78.06747437]
[100.92947388 90.63879395]
[115.81141663 78.86934662]
[140.20077515 83.71086121]
[153.49975586 90.64893341]
[166.79875183 97.58700562]
[185.13812256 96.34539032]
[194.02313232 111.44385529]
[207.46734619 118.09614563]
[220.64546204 110.07487488]
[236.06764221 110.47441864]
[248.81274414 119.16728973]
[254.81384277 133.37962341]
[252.15600586 148.57632446]
[241.68733215 159.90815735]
[226.74835205 163.75920105]
[212.10604858 158.90058899]
[202.43269348 146.88269043]
[200.81504822 131.54035950]
[187.37083435 124.88806915]
[175.76847839 128.46389771]
[164.49114990 122.97388458]
[159.86067200 110.88599396]
[146.56167603 103.94792175]
[133.26269531 97.00984955]
[126.89103699 100.96610260]
[127.37183380 115.95839691]
[114.14771271 108.87860870]
[107.77605438 112.83486938]
[108.09660339 127.83144379]
[108.41714478 142.82801819]
[108.73769379 157.82458496]
[122.91529083 163.30767822]
[133.91194153 173.80252075]
[140.05075073 187.70877075]
[140.39558411 202.90579224]
[134.89385986 217.07615662]
[124.38454437 228.05900574]
[110.47024536 234.17950439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 139]
[8 138]
[9 137]
[10 136]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 102]
[18 101]
[19 100]
[23 96]
[24 95]
[25 94]
[26 93]
[27 92]
[30 89]
[31 88]
[32 87]
[33 86]
[34 85]
[35 84]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 74]
[43 73]
[44 72]
[45 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[111 132]
[112 131]
[113 130]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
