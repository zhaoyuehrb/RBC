%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGCGGGCCGGAGGCGGUAGCGCCCCUGGGGGCAACGGCGGGGGCGGCGGCGGGGGCCCGGGCACUGCCUUCUCCAUCGACUCCCUAAUCGGGCCGC\
) } def
/len { sequence length } bind def

/coor [
[92.05421448 245.80358887]
[79.33213043 255.18037415]
[63.71858978 252.73233032]
[54.47683334 239.91181946]
[57.08982849 224.32502747]
[70.00733185 215.21932983]
[72.33080292 200.40037537]
[74.65427399 185.58142090]
[76.97775269 170.76246643]
[71.30526733 156.99031067]
[81.08679962 144.55519104]
[83.41027832 129.73623657]
[72.24230957 119.72241974]
[57.76353836 123.64225006]
[50.13837433 128.99476624]
[42.77336884 127.45133209]
[28.17968941 130.91897583]
[13.58601189 134.38662720]
[-1.00766587 137.85426331]
[-12.55145645 149.50213623]
[-28.33968925 145.06776428]
[-32.13078308 129.11283875]
[-20.02478600 118.05042267]
[-4.47531080 123.26058960]
[10.11836720 119.79294586]
[24.71204567 116.32530212]
[39.30572510 112.85765839]
[53.84370804 109.16346741]
[68.32248688 105.24364471]
[80.73937225 78.88485718]
[106.33957672 75.76383209]
[114.30593872 63.05411148]
[122.27230835 50.34439087]
[130.23867798 37.63467026]
[138.20504761 24.92494965]
[135.12004089 14.26246357]
[138.44277954 3.90436602]
[146.80661011 -2.69870305]
[157.21073914 -3.49278307]
[165.95184326 -15.68265152]
[174.69296265 -27.87252045]
[176.44711304 -43.59618378]
[190.15159607 -49.43025970]
[198.89271545 -61.62012863]
[207.63381958 -73.80999756]
[216.37493896 -85.99986267]
[225.11605835 -98.18973541]
[226.87020874 -113.91339111]
[240.57469177 -119.74746704]
[249.31581116 -131.93733215]
[258.05691528 -144.12721252]
[266.79803467 -156.31707764]
[275.53915405 -168.50694275]
[283.50552368 -181.21665955]
[290.66632080 -194.39706421]
[297.82711792 -207.57746887]
[296.86141968 -223.94815063]
[310.70297241 -232.74264526]
[325.11279297 -224.91390991]
[325.26730347 -208.51548767]
[311.00750732 -200.41667175]
[303.84671021 -187.23626709]
[296.68591309 -174.05586243]
[297.49829102 -171.19502258]
[297.12173462 -167.81462097]
[295.34201050 -164.40763855]
[292.14355469 -161.53849792]
[287.72903442 -159.76582336]
[278.98791504 -147.57595825]
[270.24679565 -135.38609314]
[261.50567627 -123.19622040]
[252.76455688 -111.00635529]
[251.63563538 -96.15459442]
[237.30592346 -89.44861603]
[228.56480408 -77.25875092]
[219.82369995 -65.06887817]
[211.08258057 -52.87901306]
[202.34146118 -40.68914413]
[201.21253967 -25.83738136]
[186.88282776 -19.13140488]
[178.14172363 -6.94153643]
[169.40060425 5.24833250]
[169.10200500 24.47653198]
[150.91476440 32.89131546]
[142.94839478 45.60103607]
[134.98202515 58.31075668]
[127.01566315 71.02047729]
[119.04929352 83.73020172]
[124.91229248 91.79801178]
[127.33536530 101.93717957]
[125.61489868 112.67668152]
[119.67523193 122.32307434]
[110.12955475 129.22680664]
[98.22923279 132.05970764]
[95.90576172 146.87866211]
[101.41204834 161.71076965]
[91.79670715 173.08593750]
[89.47323608 187.90489197]
[87.14975739 202.72384644]
[84.82628632 217.54281616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 100]
[7 99]
[8 98]
[9 97]
[11 95]
[12 94]
[13 29]
[14 28]
[16 27]
[17 26]
[18 25]
[19 24]
[31 88]
[32 87]
[33 86]
[34 85]
[35 84]
[39 82]
[40 81]
[41 80]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
