%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCUGGGGGCAACUCUUGUGACCUCCUGCCCCAGGCUCCCAGCACCAUGACGGUUUCAUACACUCUCAAAGUGGCGGAGGCCCGCUUCGGAGGUUUCUCUGGCCUGCUUCUCCGCUGGAGGGGAAGCAUCUACAAGCUCCUCUACA\
) } def
/len { sequence length } bind def

/coor [
[18.56666183 193.23991394]
[11.10774708 192.45594788]
[-0.44995168 202.01730347]
[-12.00765038 211.57865906]
[-23.56534958 221.14002991]
[-23.97125244 232.09275818]
[-30.24029541 240.81303406]
[-40.08091354 244.53065491]
[-50.12009430 242.23178101]
[-62.06804276 251.30076599]
[-74.01599121 260.36975098]
[-85.96393585 269.43875122]
[-97.91188812 278.50772095]
[-109.85983276 287.57672119]
[-105.64209747 302.15667725]
[-106.97996521 317.27536011]
[-113.69248962 330.88809204]
[-124.87186432 341.15386963]
[-139.00616455 346.68429565]
[-154.18385315 346.73147583]
[-168.35226440 341.28900146]
[-179.59524536 331.09292603]
[-186.39225769 317.52218628]
[-187.82408142 302.41210938]
[-183.69706726 287.80621338]
[-174.56935120 275.67984009]
[-161.67538452 267.67294312]
[-146.75898743 264.86843872]
[-131.83746338 267.64556885]
[-118.92882538 275.62878418]
[-106.98087311 266.55978394]
[-95.03292847 257.49078369]
[-83.08497620 248.42181396]
[-71.13703156 239.35282898]
[-59.18907928 230.28382874]
[-53.09906387 211.97245789]
[-33.12670898 209.58232117]
[-21.56900978 200.02096558]
[-10.01131153 190.45960999]
[1.54638708 180.89823914]
[18.31784058 166.44161987]
[35.28650665 167.53671265]
[39.32030487 153.08927917]
[43.35410309 138.64184570]
[47.38789749 124.19440460]
[51.42169571 109.74696350]
[46.34062576 95.63375092]
[34.02338791 87.07305145]
[21.70615196 78.51234436]
[5.72556829 79.92674255]
[-5.23924494 68.21553802]
[-2.77702260 52.36255264]
[11.22342968 44.52885056]
[26.02216148 50.72377396]
[30.26685524 66.19510651]
[42.58409119 74.75580597]
[54.90133286 83.31651306]
[61.14823914 79.16607666]
[52.84736633 66.67225647]
[44.54669952 54.17830276]
[57.04079437 45.87784195]
[65.34118652 58.37138367]
[73.64205933 70.86520386]
[79.88896942 66.71476746]
[76.77029419 52.04255295]
[73.65161896 37.37033844]
[70.53294373 22.69812393]
[57.91537476 12.78971672]
[57.93924332 -3.25331903]
[70.58624268 -13.12413788]
[86.15467072 -9.25069237]
[92.70176697 5.39564085]
[85.20515442 19.57944870]
[88.32382965 34.25166321]
[91.44250488 48.92387772]
[94.56118011 63.59609222]
[102.87377930 67.99340057]
[108.83150482 73.99600220]
[112.20704651 80.75474548]
[123.96244812 71.43753052]
[135.71784973 62.12031555]
[147.47325134 52.80309677]
[159.22865295 43.48588181]
[170.98405457 34.16866302]
[172.94187927 18.71535873]
[184.99626160 9.43383598]
[199.71655273 11.39556026]
[211.47195435 2.07834387]
[214.30157471 -4.01541758]
[219.08604431 -7.23446465]
[223.92034912 -7.37049580]
[236.05560303 -16.18727493]
[248.19085693 -25.00405312]
[260.32611084 -33.82083130]
[272.46136475 -42.63761139]
[278.63357544 -57.83089828]
[294.91238403 -59.81394196]
[304.55154419 -46.54675293]
[297.63513184 -31.67747879]
[281.27813721 -30.50235558]
[269.14288330 -21.68557739]
[257.00762939 -12.86879826]
[244.87237549 -4.05201960]
[232.73712158 4.76475906]
[220.78918457 13.83374596]
[209.03378296 23.15096283]
[207.58227539 37.93029785]
[195.79335022 47.54674149]
[180.30126953 45.92406464]
[168.54586792 55.24128342]
[156.79046631 64.55850220]
[145.03506470 73.87571716]
[133.27966309 83.19293213]
[121.52426147 92.51014709]
[121.07462311 117.60862732]
[95.00256348 131.74440002]
[65.86913300 113.78076172]
[61.83533859 128.22819519]
[57.80154037 142.67564392]
[53.76774216 157.12307739]
[49.73394394 171.57051086]
[52.69880676 186.27458191]
[62.01602173 198.02998352]
[71.33323669 209.78538513]
[80.65045929 221.54078674]
[89.96767426 233.29618835]
[99.28488922 245.05158997]
[107.12193298 249.87457275]
[108.67104340 257.15216064]
[117.74002838 269.10009766]
[133.25028992 268.64050293]
[146.04949951 277.41317749]
[151.21609497 292.04486084]
[146.76339722 306.90936279]
[134.40359497 316.29098511]
[118.88924408 316.58227539]
[106.18595886 307.67126465]
[101.17840576 292.98440552]
[105.79207611 278.16906738]
[96.72309113 266.22113037]
[87.52948761 254.36880493]
[78.21227264 242.61340332]
[68.89505768 230.85800171]
[59.57783890 219.10260010]
[50.26062012 207.34719849]
[40.94340515 195.59179688]
[33.48448944 194.80783081]
[36.60314178 209.48005676]
[23.61273575 216.98001099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[5 37]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[42 121]
[43 120]
[44 119]
[45 118]
[46 117]
[47 57]
[48 56]
[49 55]
[64 76]
[65 75]
[66 74]
[67 73]
[79 114]
[80 113]
[81 112]
[82 111]
[83 110]
[84 109]
[87 106]
[88 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[122 146]
[123 145]
[124 144]
[125 143]
[126 142]
[127 141]
[129 140]
[130 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
