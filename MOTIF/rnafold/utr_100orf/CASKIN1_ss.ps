%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGCCGCGUCGCUGCGGCCCCGGCCGCGCCAUGGGGAAGGAGCAGGAGCUGGUGCAGGCGGUGAAGGCGGAGGACGUAGGGACCGCGCAGAGGCUGCUGCAGAGGCCGCGGCCCGGGAAGGCCAAGCUCC\
) } def
/len { sequence length } bind def

/coor [
[65.69178009 375.22668457]
[61.55891037 360.80603027]
[55.05065536 374.32055664]
[48.54239655 387.83511353]
[42.03414154 401.34963989]
[35.52588654 414.86416626]
[40.98162460 429.69692993]
[34.27532578 444.00778198]
[19.38572502 449.30639648]
[5.14655256 442.44918823]
[0.00565901 427.50439453]
[7.01304483 413.33850098]
[22.01135254 408.35589600]
[28.51960945 394.84136963]
[35.02786636 381.32684326]
[41.53612137 367.81231689]
[48.04437637 354.29779053]
[53.08208466 340.16903687]
[56.59237671 325.58554077]
[60.10266876 311.00207520]
[63.61296463 296.41860962]
[66.60444641 281.71990967]
[69.07336426 266.92449951]
[71.54228210 252.12908936]
[74.01119995 237.33366394]
[76.30521393 222.51011658]
[78.42399597 207.66050720]
[80.54277039 192.81091309]
[82.66155243 177.96130371]
[84.78033447 163.11169434]
[86.72358704 148.23809814]
[88.49104309 133.34259033]
[80.84088135 129.61608887]
[74.30577850 124.16592407]
[69.26609039 117.30928802]
[66.01512146 109.44524384]
[64.74208069 101.03149414]
[65.52106476 92.55770111]
[68.30673218 84.51705933]
[72.93695831 77.37752533]
[79.14225769 71.55462646]
[86.56148529 67.38725281]
[94.76283264 65.11795807]
[103.26899719 64.87879944]
[107.80303955 50.58046722]
[112.33708954 36.28213120]
[116.87113190 21.98379517]
[113.66714478 6.49040890]
[124.88957977 -3.30275965]
[129.42362976 -17.60109520]
[133.95767212 -31.89943123]
[138.49172974 -46.19776917]
[131.47200012 -60.10320663]
[136.27384949 -74.53916168]
[149.57382202 -81.14570618]
[154.10786438 -95.44403839]
[158.64192200 -109.74237823]
[157.57176208 -116.42359161]
[159.76976013 -121.79502869]
[163.74247742 -124.59980774]
[168.94670105 -138.66807556]
[174.15092468 -152.73634338]
[179.35513306 -166.80459595]
[184.55935669 -180.87286377]
[174.86856079 -192.70654297]
[172.41830444 -207.70297241]
[177.76779175 -221.81854248]
[189.38671875 -231.29782104]
[204.09135437 -233.67257690]
[209.29557800 -247.74084473]
[214.49978638 -261.80911255]
[209.12942505 -276.92660522]
[217.72241211 -290.47430420]
[233.68695068 -292.05957031]
[244.77641296 -280.46630859]
[242.48390198 -264.58792114]
[228.56805420 -256.60488892]
[223.36383057 -242.53662109]
[218.15962219 -228.46835327]
[227.77868652 -217.09562683]
[230.43135071 -202.33691406]
[225.30664062 -188.13819885]
[213.68667603 -178.34671021]
[198.62762451 -175.66865540]
[193.42340088 -161.60038757]
[188.21919250 -147.53211975]
[183.01496887 -133.46385193]
[177.81074524 -119.39558411]
[172.94026184 -105.20832825]
[168.40620422 -90.90998840]
[163.87216187 -76.61165619]
[170.93467712 -63.54810715]
[166.54019165 -48.98297119]
[152.79005432 -41.66371918]
[148.25601196 -27.36538506]
[143.72196960 -13.06704807]
[139.18791199 1.23128772]
[142.71621704 15.70196056]
[131.16946411 26.51784134]
[126.63542175 40.81617737]
[122.10137939 55.11451340]
[117.56732941 69.41284943]
[132.22984314 85.66746521]
[134.47894287 107.44229889]
[123.44834900 126.35070801]
[103.38655090 135.11006165]
[101.61909485 150.00556946]
[103.72811127 158.99365234]
[99.62993622 165.23046875]
[97.51115417 180.08007812]
[95.39237976 194.92968750]
[93.27359772 209.77929688]
[91.15481567 224.62889099]
[93.05095673 233.66429138]
[88.80662537 239.80258179]
[86.33769989 254.59800720]
[83.86878204 269.39343262]
[81.39986420 284.18884277]
[83.30902863 289.25323486]
[83.04499054 294.04611206]
[81.09423065 297.76516724]
[78.19644165 299.92889404]
[74.68614960 314.51235962]
[71.17585754 329.09585571]
[67.66556549 343.67932129]
[79.98859406 335.12695312]
[94.97223663 334.42666626]
[108.03923035 341.79235840]
[115.19782257 354.97396851]
[114.26116943 369.94470215]
[105.51540375 382.13122559]
[91.63222504 387.81079102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[18 125]
[19 124]
[20 123]
[21 122]
[22 118]
[23 117]
[24 116]
[25 115]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 107]
[32 106]
[44 102]
[45 101]
[46 100]
[47 99]
[49 97]
[50 96]
[51 95]
[52 94]
[55 91]
[56 90]
[57 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
