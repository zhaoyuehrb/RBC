%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGCCAGAAUCUGGGGCCAAUGGAACAGUCAUUGCUGAGUUCAUCCUGCUGGGCUUGCUGGAGGCGCCAGGGCUGCAGCCAGUUGUCUUUGUGCUCU\
) } def
/len { sequence length } bind def

/coor [
[168.72560120 240.28567505]
[167.61015320 236.60466003]
[167.62849426 232.40541077]
[159.27070618 219.94958496]
[150.91293335 207.49377441]
[142.55514526 195.03794861]
[134.19735718 182.58212280]
[125.83957672 170.12631226]
[123.36128235 169.75982666]
[120.86585236 168.43614197]
[118.69606781 166.14295959]
[117.19361877 162.98370361]
[116.66181183 159.17434692]
[117.33039856 155.02861023]
[111.00286865 141.42851257]
[104.67534637 127.82843018]
[98.34781647 114.22834015]
[87.01287079 106.04234314]
[88.05209351 92.09918213]
[81.72456360 78.49909210]
[75.39704132 64.89900970]
[65.99922180 64.67668915]
[57.26211548 61.32936478]
[50.18839645 55.27285767]
[45.57919693 47.23202515]
[43.94339371 38.15410233]
[45.44158936 29.09712791]
[49.87084961 21.10665703]
[56.69162369 15.09503841]
[52.54710007 0.67897421]
[48.40257263 -13.73709011]
[42.93211365 -21.27809143]
[44.36082458 -28.66620827]
[40.66664124 -43.20419312]
[29.91831017 -50.54110336]
[27.21092224 -62.85754013]
[33.47838593 -73.33307648]
[30.23811913 -87.97891998]
[26.99785233 -102.62476349]
[16.46215057 -114.42770386]
[21.26745033 -128.52587891]
[18.02718353 -143.17172241]
[14.78691578 -157.81756592]
[0.83664501 -164.88323975]
[-5.26057482 -179.28317261]
[-0.62582242 -194.21813965]
[12.55251312 -202.63630676]
[28.05202675 -200.56286621]
[38.55431747 -188.97685242]
[39.10053253 -173.34880066]
[29.43275642 -161.05783081]
[32.67302322 -146.41198730]
[35.91329193 -131.76614380]
[46.21722794 -121.01076508]
[41.64369202 -105.86502838]
[44.88396072 -91.21918488]
[48.12422562 -76.57334137]
[60.65850067 -64.39987183]
[55.20462418 -46.89837646]
[58.89880753 -32.36038971]
[62.81863785 -17.88161659]
[66.96316528 -3.46555185]
[71.10768890 10.95051193]
[90.58133698 19.06493187]
[98.25017548 39.00962830]
[88.99713135 58.57147980]
[95.32465363 72.17156982]
[101.65218353 85.77165985]
[112.98712921 93.95765686]
[111.94790649 107.90081787]
[118.27543640 121.50090790]
[124.60295868 135.10099792]
[130.93048096 148.70108032]
[138.29539490 161.76852417]
[146.65318298 174.22434998]
[155.01097107 186.68016052]
[163.36874390 199.13598633]
[171.72653198 211.59181213]
[180.08432007 224.04762268]
[189.38446045 235.81654358]
[199.57075500 246.82742310]
[209.75704956 257.83828735]
[220.11334229 268.68942261]
[230.63714600 279.37817383]
[241.16094971 290.06695557]
[256.96472168 289.93920898]
[268.17126465 301.08322144]
[268.13189697 316.88745117]
[256.87002563 327.97555542]
[241.06707764 327.76910400]
[230.09867859 316.39062500]
[230.47219849 300.59075928]
[219.94839478 289.90197754]
[209.42459106 279.21322632]
[202.36441040 276.60952759]
[198.74617004 268.02459717]
[188.55987549 257.01370239]
[178.37358093 246.00283813]
[175.86843872 246.02465820]
[173.19808960 245.10348511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[14 73]
[15 72]
[16 71]
[17 70]
[19 68]
[20 67]
[21 66]
[29 63]
[30 62]
[31 61]
[33 60]
[34 59]
[37 57]
[38 56]
[39 55]
[41 53]
[42 52]
[43 51]
[80 98]
[81 97]
[82 96]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
