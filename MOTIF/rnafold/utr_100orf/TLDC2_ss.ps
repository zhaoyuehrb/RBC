%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGGCUGAGGAUUCACUCACUGCCCACGGCCGGCUGAGCAGGGACAGGAGAAUGAGAGGCCUCCGCUGGCGUUACACUCGGCUGCCCAGCCAGGUGGAGGACACCCUGUCUGGGGAGGAGGGUAACGAAGAGGAAGAGGAGGAGGAGGCAG\
) } def
/len { sequence length } bind def

/coor [
[78.79084778 136.21984863]
[69.02026367 147.60122681]
[59.24967194 158.98260498]
[56.48764038 178.91188049]
[38.05863190 184.65077209]
[28.75730705 196.41874695]
[19.45598221 208.18673706]
[10.15465832 219.95471191]
[1.09374559 231.90878296]
[-7.72303295 244.04403687]
[-16.53981209 256.17929077]
[-25.35659027 268.31454468]
[-22.63701820 283.88308716]
[-31.79084778 296.76654053]
[-47.38727188 299.32135010]
[-60.17321014 290.03182983]
[-62.56299210 274.40927124]
[-53.13880157 261.72225952]
[-37.49184418 259.49777222]
[-28.67506599 247.36251831]
[-19.85828781 235.22726440]
[-11.04150963 223.09201050]
[-10.90378761 218.26452637]
[-7.69235229 213.48620605]
[-1.61332262 210.65339661]
[7.68800116 198.88540649]
[16.98932457 187.11743164]
[26.29064941 175.34944153]
[24.18950272 165.27622986]
[28.09085464 155.51679993]
[36.91925430 149.41712952]
[47.86830139 149.21200562]
[57.63888931 137.83064270]
[67.40947723 126.44926453]
[62.20951462 118.26432037]
[59.02666473 109.10449219]
[58.03080750 99.45870209]
[43.30801392 96.58827972]
[28.58522034 93.71785736]
[17.32300758 104.39222717]
[1.93311024 106.37482452]
[-11.66674137 98.90329742]
[-18.24712753 84.85060883]
[-15.27775383 69.62029266]
[-3.90040731 59.06872559]
[11.51009178 57.25319672]
[25.02809143 64.87181091]
[31.45564461 78.99506378]
[46.17844009 81.86548615]
[60.90123367 84.73590851]
[64.36651611 77.81980896]
[69.04218292 71.65710449]
[74.76940918 66.45714569]
[81.35365295 62.39654541]
[88.57126617 59.61324310]
[96.17707825 58.20177841]
[103.91275024 58.21009064]
[111.51551819 59.63790512]
[118.72713470 62.43671417]
[125.30263519 66.51145172]
[131.01866150 71.72371674]
[135.68107605 77.89644623]
[149.63888550 72.40286255]
[163.59669495 66.90927124]
[177.55450439 61.41567993]
[191.51231384 55.92209244]
[205.47012329 50.42850113]
[215.47776794 38.17461777]
[230.15446472 40.71310806]
[244.11227417 35.21952057]
[248.41069031 28.64007187]
[254.79452515 25.59208107]
[261.05209351 26.26132965]
[273.44976807 17.81751060]
[285.84741211 9.37369061]
[298.24508667 0.92987210]
[310.64273071 -7.51394701]
[323.04040527 -15.95776558]
[330.09088135 -30.12113571]
[344.96560669 -30.89062881]
[357.36325073 -39.33444595]
[369.76092529 -47.77826691]
[373.01748657 -53.64121628]
[378.01141357 -56.50588989]
[382.83651733 -56.30109406]
[395.56619263 -64.23555756]
[403.18487549 -78.10156250]
[418.07855225 -78.26761627]
[430.80819702 -86.20207977]
[443.53787231 -94.13653564]
[456.26754761 -102.07099915]
[468.99719238 -110.00545502]
[476.61587524 -123.87146759]
[491.50955200 -124.03752136]
[504.23922729 -131.97198486]
[516.96887207 -139.90644836]
[529.69854736 -147.84089661]
[542.34716797 -155.90396118]
[554.91339111 -164.09477234]
[559.61608887 -179.43312073]
[574.59240723 -185.18544006]
[588.35382080 -176.93907166]
[590.34375000 -161.01991272]
[579.03570557 -149.63978577]
[563.10424805 -151.52853394]
[550.53796387 -143.33772278]
[546.62872314 -137.01335144]
[537.63299561 -135.11123657]
[524.90338135 -127.17678070]
[512.17370605 -119.24231720]
[499.44403076 -111.30786133]
[492.73583984 -98.00937653]
[476.93167114 -97.27579498]
[464.20199585 -89.34133148]
[451.47235107 -81.40687561]
[438.74267578 -73.47241211]
[426.01300049 -65.53795624]
[419.30484009 -52.23947144]
[403.50064087 -51.50588989]
[390.77099609 -43.57143021]
[378.20474243 -35.38060760]
[365.80706787 -26.93679047]
[353.40942383 -18.49297142]
[347.24569702 -4.93355846]
[331.48422241 -3.56010795]
[319.08654785 4.88371086]
[306.68890381 13.32752991]
[294.29122925 21.77134895]
[281.89358521 30.21516800]
[269.49591064 38.65898514]
[284.49212646 38.99690247]
[298.14193726 45.21644592]
[308.23672485 56.31126404]
[313.14312744 70.48614502]
[312.06723022 85.44750977]
[305.18313599 98.77452087]
[293.60473633 108.31079865]
[279.20547485 112.51330566]
[264.31521606 110.70204926]
[251.34333801 103.17011261]
[242.38873291 91.13620758]
[238.90031433 76.54747772]
[241.44253540 61.76447678]
[249.60586548 49.17733002]
[235.64805603 54.67092133]
[226.63876343 66.53186798]
[210.96371460 64.38631439]
[197.00590515 69.87990570]
[183.04809570 75.37348938]
[169.09028625 80.86708069]
[155.13247681 86.36067200]
[141.17466736 91.85426331]
[138.99952698 115.51589203]
[124.32553864 134.20487976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[5 28]
[6 27]
[7 26]
[8 25]
[9 22]
[10 21]
[11 20]
[12 19]
[37 50]
[38 49]
[39 48]
[62 152]
[63 151]
[64 150]
[65 149]
[66 148]
[67 147]
[69 145]
[70 144]
[73 130]
[74 129]
[75 128]
[76 127]
[77 126]
[78 125]
[80 123]
[81 122]
[82 121]
[85 120]
[86 119]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[94 111]
[95 110]
[96 109]
[97 108]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
