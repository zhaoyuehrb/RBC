%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:12:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGUCCCUGCGCUGCGCCUCCAGGCUGGACCAGCAGUUCCAGGCGGCAUGGAGGGGCCCCGGAGCUCCACCCAUGUCCCCUUGGUGCUGCCGCUUCUUGUACUUCUGCUGCUGGCCCCGGCUAGGCAGGCCGCCGCCCAGCGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[78.22958374 388.60546875]
[84.27592468 372.76635742]
[84.27592468 357.76635742]
[75.92736816 348.95675659]
[75.84294128 336.41833496]
[84.61602020 326.90588379]
[84.92807770 311.90911865]
[76.76459503 302.92776489]
[76.94104004 290.39028931]
[85.91011810 281.06240845]
[86.53409576 266.07540894]
[87.15807343 251.08837891]
[79.95690155 238.05026245]
[88.26157379 224.58389282]
[88.88555145 209.59687805]
[81.68437958 196.55876160]
[89.98905182 183.09240723]
[90.61302948 168.10537720]
[91.23700714 153.11836243]
[91.70504761 138.12567139]
[92.01710510 123.12892151]
[92.32916260 108.13216400]
[92.48519897 93.13297272]
[92.48519897 78.13297272]
[84.74789429 64.33280182]
[92.48519897 51.60553360]
[92.48519897 36.60553360]
[92.48519897 21.60553169]
[92.48519897 6.60553217]
[92.48519897 -8.39446831]
[92.48519897 -23.39446831]
[82.90247345 -39.08367538]
[92.18645477 -53.94327545]
[91.87439728 -68.94002533]
[91.56233978 -83.93678284]
[91.25028229 -98.93353271]
[90.93823242 -113.93029022]
[90.62617493 -128.92704773]
[90.31411743 -143.92379761]
[90.00205994 -158.92054749]
[69.15068817 -167.99230957]
[55.50529861 -186.10179138]
[52.55093002 -208.51834106]
[60.99018097 -229.42524719]
[78.57747650 -243.42897034]
[74.87131500 -257.96392822]
[71.16515350 -272.49884033]
[67.45899200 -287.03378296]
[63.75283432 -301.56872559]
[60.04667282 -316.10366821]
[56.34051132 -330.63858032]
[52.63434982 -345.17352295]
[41.72723007 -356.63412476]
[46.08001709 -370.87850952]
[42.37385559 -385.41345215]
[38.66769791 -399.94839478]
[34.96153641 -414.48330688]
[31.25537300 -429.01824951]
[27.54921150 -443.55319214]
[12.85229397 -447.78967285]
[2.31873488 -458.74142456]
[-1.29472148 -473.39779663]
[2.88514137 -487.79867554]
[13.63959217 -498.10437012]
[9.93343067 -512.63928223]
[-4.53369236 -518.25018311]
[-12.91153049 -531.31121826]
[-11.97863293 -546.80023193]
[-2.09371901 -558.76135254]
[12.94226074 -562.59527588]
[27.34766579 -556.82781982]
[35.58332443 -543.67663574]
[34.48245621 -528.19860840]
[24.46836662 -516.34545898]
[28.17452812 -501.81051636]
[42.55063629 -497.91268921]
[53.11577988 -487.27157593]
[56.96147537 -472.67440796]
[52.95808029 -458.01596069]
[42.08414841 -447.25933838]
[45.79030991 -432.72442627]
[49.49647141 -418.18948364]
[53.20263290 -403.65454102]
[56.90879440 -389.11959839]
[60.61495590 -374.58468628]
[71.25698853 -364.16372681]
[67.16928864 -348.87969971]
[70.87545013 -334.34475708]
[74.58161163 -319.80981445]
[78.28777313 -305.27487183]
[81.99393463 -290.73995972]
[85.70009613 -276.20501709]
[89.40625763 -261.67007446]
[93.11241913 -247.13513184]
[101.45820618 -247.04142761]
[109.64436340 -245.37623596]
[117.37739563 -242.19639587]
[124.37950897 -237.61308289]
[130.39860535 -231.78794861]
[135.21733093 -224.92741394]
[138.66096497 -217.27534485]
[140.60368347 -209.10440063]
[140.97325134 -200.70632935]
[139.75361633 -192.38150024]
[136.98562622 -184.42823792]
[132.76567078 -177.13204956]
[127.24232483 -170.75544739]
[120.61109161 -165.52842712]
[113.10752106 -161.64027405]
[104.99881744 -159.23260498]
[105.31086731 -144.23585510]
[105.62292480 -129.23910522]
[105.93498230 -114.24234772]
[106.24703979 -99.24559021]
[106.55909729 -84.24884033]
[106.87115479 -69.25208282]
[107.18320465 -54.25532913]
[115.71323395 -45.62132645]
[116.05848694 -33.08738327]
[107.48519897 -23.39446831]
[107.48519897 -8.39446831]
[107.48519897 6.60553217]
[107.48519897 21.60553169]
[107.48519897 36.60553360]
[107.48519897 51.60553360]
[115.22249603 64.33280182]
[107.48519897 78.13297272]
[107.48519897 93.13297272]
[110.65129089 100.60692596]
[107.32591248 108.44422150]
[107.01385498 123.44097137]
[106.70180511 138.43772888]
[109.66691589 147.14749146]
[106.22402191 153.74234009]
[105.60004425 168.72935486]
[104.97606659 183.71638489]
[112.13260651 197.82646179]
[103.87256622 210.22085571]
[103.24858856 225.20787048]
[110.40512848 239.31796265]
[102.14508820 251.71235657]
[101.52111053 266.69937134]
[100.89713287 281.68640137]
[109.81891632 297.76065063]
[99.92483521 312.22119141]
[99.61277771 327.21792603]
[108.86703491 343.10311890]
[99.27592468 357.76635742]
[99.27592468 372.76635742]
[105.32226562 388.60546875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 149]
[3 148]
[6 146]
[7 145]
[10 143]
[11 142]
[12 141]
[14 139]
[15 138]
[17 136]
[18 135]
[19 134]
[20 132]
[21 131]
[22 130]
[23 128]
[24 127]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 120]
[33 117]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[39 111]
[40 110]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[50 89]
[51 88]
[52 87]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[59 80]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
