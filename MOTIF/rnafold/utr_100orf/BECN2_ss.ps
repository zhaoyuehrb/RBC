%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUUCCAUCCGCUUCCUGUGCCAGCGCUGCCACCAGGCCCUGAAGCUGAGCGGCUCCUCGGAGUCUAGGAGCCUCCCUGCAGCCCCGGCGCCCACCU\
) } def
/len { sequence length } bind def

/coor [
[7.29210758 458.33496094]
[-3.66212058 468.67028809]
[-16.58226776 476.40875244]
[-30.86403275 481.18841553]
[-45.83943558 482.78573608]
[-60.80804443 481.12597656]
[-75.06975555 476.28680420]
[-87.95751953 468.49450684]
[-98.86855316 458.11358643]
[-107.29252625 445.62957764]
[-112.83544159 431.62637329]
[-115.23803711 416.75888062]
[-114.38793945 401.72256470]
[-110.32492065 387.22061157]
[-103.23899841 373.93139648]
[-93.46160889 362.47640991]
[-81.45005035 353.39144897]
[-67.76612854 347.10140991]
[-53.04986954 343.90054321]
[-37.98957062 343.93850708]
[-23.28963089 347.21353149]
[-16.96210480 333.61343384]
[-10.63457966 320.01336670]
[-4.30705404 306.41326904]
[2.02047133 292.81317139]
[-5.36132240 279.90399170]
[-3.70661807 264.94653320]
[6.55831480 253.69998169]
[21.65174103 250.61863708]
[27.97926521 237.01855469]
[34.30679321 223.41847229]
[40.63431549 209.81837463]
[46.96184158 196.21829224]
[38.29635239 184.10322571]
[36.84881973 169.17805481]
[43.10767365 155.44148254]
[55.48313141 146.62419128]
[70.70972443 145.17568970]
[77.03724670 131.57560730]
[83.36477661 117.97551727]
[89.69229889 104.37542725]
[95.80755615 90.67858124]
[101.70906067 76.88828278]
[107.61056519 63.09798813]
[113.29689026 49.21758270]
[118.76666260 35.25041962]
[112.68197632 20.91116333]
[118.42807007 6.82439423]
[132.13586426 1.11194241]
[137.60563660 -12.85521889]
[143.07540894 -26.82238007]
[148.54518127 -40.78953934]
[154.01495361 -54.75670242]
[147.45536804 -69.13541412]
[153.06251526 -83.91159058]
[167.50978088 -90.31878662]
[182.22584534 -84.55573273]
[188.47993469 -70.04153442]
[182.56161499 -55.38722229]
[167.98211670 -49.28693008]
[162.51234436 -35.31976700]
[157.04257202 -21.35260582]
[151.57278442 -7.38544559]
[146.10301208 6.58171558]
[152.28608704 20.08375931]
[146.93792725 34.32636642]
[132.73382568 40.72019196]
[127.26404572 54.68735504]
[127.76486206 62.19566345]
[121.40085602 68.99948883]
[115.49935150 82.78978729]
[109.59784698 96.58008575]
[109.55783844 104.79552460]
[103.29238892 110.70295715]
[96.96486664 124.30303955]
[90.63733673 137.90313721]
[84.30981445 151.50321960]
[93.00942230 164.08352661]
[94.23594666 179.22923279]
[87.75978851 192.86470032]
[75.41067505 201.37088013]
[60.56193161 202.54580688]
[54.23440552 216.14590454]
[47.90687943 229.74598694]
[41.57935333 243.34608459]
[35.25183105 256.94616699]
[42.61664200 270.47634888]
[40.62555313 285.57232666]
[30.24990845 296.47235107]
[15.62056065 299.14071655]
[9.29303455 312.74078369]
[2.96550941 326.34088135]
[-3.36201596 339.94097900]
[-9.68954182 353.54107666]
[2.28402567 362.67602539]
[12.01356220 374.17169189]
[19.04400063 387.49035645]
[23.04651451 402.00912476]
[23.83389854 417.04885864]
[21.36932564 431.90618896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[38 77]
[39 76]
[40 75]
[41 74]
[42 72]
[43 71]
[44 70]
[45 68]
[46 67]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
