%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGUUGCUCGUGGAGGAAGACCUUGUCUUUCUUCCUUGUUUUUGUGCCUAUAUAUCUACAUGGGGCUUCAUCGCAGGAAGCCGCCCCAGUGGGGCCCA\
) } def
/len { sequence length } bind def

/coor [
[19.03951263 83.11244965]
[4.12831545 81.48267365]
[-10.78288174 79.85289001]
[-25.69408035 78.22310638]
[-40.60527802 76.59332275]
[-55.51647568 74.96353912]
[-65.71250916 90.10548401]
[-82.03575897 98.09038544]
[-100.08202362 96.85636902]
[-115.02825928 86.81656647]
[-122.92160034 70.72638702]
[-137.91978455 70.49311066]
[-151.83862305 78.01486206]
[-164.44401550 70.08055878]
[-179.44219971 69.84728241]
[-194.44039917 69.61400604]
[-209.43858337 69.38072968]
[-224.43676758 69.14745331]
[-239.43495178 68.91417694]
[-254.43313599 68.68090057]
[-269.43313599 68.68090057]
[-284.43133545 68.91417694]
[-299.42950439 69.14745331]
[-315.17269897 75.43939209]
[-325.57687378 62.05323410]
[-315.59402466 48.34998703]
[-299.66278076 54.14926529]
[-284.66461182 53.91598892]
[-269.66641235 53.68271255]
[-262.90838623 50.37297058]
[-254.19985962 53.68271255]
[-239.20167542 53.91598892]
[-224.20349121 54.14926529]
[-209.20530701 54.38254547]
[-194.20710754 54.61582184]
[-179.20892334 54.84909821]
[-164.21073914 55.08237457]
[-151.36468506 47.54394150]
[-137.68650818 55.49492645]
[-122.68832397 55.72820282]
[-117.97620392 44.62053680]
[-109.71403503 35.77929688]
[-98.88800812 30.29501534]
[-86.80249786 28.85543251]
[-74.92293549 31.65931892]
[-64.69805908 38.38944244]
[-57.38332367 48.24825287]
[-53.88669205 60.05234528]
[-38.97549438 61.68212509]
[-24.06429672 63.31190872]
[-9.15310001 64.94168854]
[5.75809765 66.57147217]
[20.66929436 68.20125580]
[23.98087883 62.95596313]
[28.61073875 58.77824020]
[34.22650909 55.99192429]
[40.41851807 54.82012558]
[46.72964478 55.36743164]
[52.68907928 57.61085129]
[57.84744644 61.40020752]
[61.81066513 66.46805573]
[64.27005768 72.44853210]
[65.02631378 78.90371704]
[79.07685089 84.15560913]
[93.12738800 89.40750885]
[117.81614685 75.34920502]
[132.79981995 74.64959717]
[147.78349304 73.94998932]
[162.76718140 73.25038910]
[177.75085449 72.55078125]
[192.73452759 71.85117340]
[202.07202148 59.30743790]
[217.29974365 55.75072098]
[231.22764587 62.86039734]
[237.27940369 77.27949524]
[232.59753418 92.19975281]
[219.39270020 100.57628632]
[203.89981079 98.45395660]
[193.43412781 86.83485413]
[178.45045471 87.53445435]
[163.46678162 88.23406219]
[148.48310852 88.93367004]
[133.49943542 89.63327789]
[118.51575470 90.33287811]
[111.97748566 103.83292389]
[120.71860504 116.02278900]
[129.45971680 128.21266174]
[138.20083618 140.40252686]
[146.94195557 152.59239197]
[161.08566284 161.94073486]
[156.01803589 178.11959839]
[139.06858826 177.72875977]
[134.75207520 161.33351135]
[126.01096344 149.14364624]
[117.26985168 136.95376587]
[108.52873230 124.76390839]
[99.78762054 112.57403564]
[87.87549591 103.45804596]
[73.82495880 98.20614624]
[59.77442169 92.95425415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[11 40]
[12 39]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 29]
[22 28]
[23 27]
[63 100]
[64 99]
[65 98]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
