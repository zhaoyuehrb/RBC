%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUUCAGGGACACCAUGAAGGGUGGCUUCACUGGGGGUGAUGAGUACCAGAAGCACUUCCUGCCCAGGGACUACUUGGCUACUUACUACAGCUUCGAUGGCAGCCCCUCACCCG\
) } def
/len { sequence length } bind def

/coor [
[63.73905945 272.28070068]
[55.05360794 284.51028442]
[40.30785370 287.26034546]
[27.79802895 278.98361206]
[24.56265450 264.33517456]
[14.92084026 275.82583618]
[5.27902603 287.31649780]
[-4.36278820 298.80718994]
[-13.84946918 310.42623901]
[-23.17930603 322.17163086]
[-25.05585670 338.46307373]
[-40.20846176 344.73449707]
[-53.04941559 334.53439331]
[-50.36905289 318.35577393]
[-34.92469406 312.84179688]
[-25.59485626 301.09640503]
[-23.87605286 293.80673218]
[-15.85345459 289.16537476]
[-6.21164083 277.67468262]
[3.43017340 266.18402100]
[13.07198811 254.69335938]
[21.75792122 242.46411133]
[29.43164444 229.57559204]
[37.10536575 216.68707275]
[44.77909088 203.79855347]
[51.74993896 190.51670837]
[57.99781036 176.87985229]
[64.24568176 163.24298096]
[70.49356079 149.60610962]
[76.55779266 135.88659668]
[82.43729401 122.08691406]
[88.31678772 108.28721619]
[86.82226562 94.38549042]
[97.88352203 85.83328247]
[103.76301575 72.03359222]
[109.64251709 58.23389816]
[115.52201843 44.43420792]
[121.40151215 30.63451576]
[119.69256592 14.90587711]
[131.79939270 6.22981167]
[137.67889404 -7.56988001]
[134.23396301 -27.34346008]
[149.93388367 -38.49774170]
[155.06419373 -52.59313202]
[160.19448853 -66.68852234]
[165.32479858 -80.78391266]
[170.45509338 -94.87930298]
[175.58540344 -108.97468567]
[180.52600098 -123.13768005]
[185.27603149 -137.36572266]
[190.02604675 -151.59378052]
[189.04866028 -158.34757996]
[191.36732483 -163.71714783]
[195.43182373 -166.44602966]
[200.93870544 -180.39860535]
[192.78169250 -193.46647644]
[193.87078857 -208.65420532]
[203.57933044 -220.15240479]
[218.02392578 -223.68672180]
[223.53080750 -237.63928223]
[229.03770447 -251.59185791]
[234.54458618 -265.54443359]
[240.05146790 -279.49700928]
[237.10452271 -295.62918091]
[249.77543640 -306.03976440]
[265.02944946 -300.01922607]
[267.17456055 -283.76095581]
[254.00404358 -273.99011230]
[248.49716187 -260.03753662]
[242.99026489 -246.08497620]
[237.48338318 -232.13240051]
[231.97650146 -218.17982483]
[240.11351013 -205.73286438]
[239.35194397 -190.70343018]
[229.77456665 -178.86589050]
[214.89128113 -174.89170837]
[209.38439941 -160.93914795]
[204.25408936 -146.84375000]
[199.50407410 -132.61570740]
[194.75404358 -118.38766479]
[195.63212585 -110.94972992]
[189.68078613 -103.84438324]
[184.55049133 -89.74900055]
[179.42018127 -75.65361023]
[174.28988647 -61.55821991]
[169.15957642 -47.46282959]
[164.02928162 -33.36743927]
[169.22384644 -24.38333893]
[168.53054810 -13.80707359]
[161.93830872 -5.22693014]
[151.47857666 -1.69038069]
[145.59907532 12.10931110]
[147.72857666 26.85090256]
[135.20120239 36.51401520]
[129.32170105 50.31370544]
[123.44220734 64.11339569]
[117.56270599 77.91308594]
[111.68321228 91.71278381]
[113.17773438 105.61450958]
[102.11647797 114.16671753]
[96.23698425 127.96640778]
[90.35748291 141.76609802]
[89.85176086 151.02075195]
[84.13042450 155.85398865]
[77.88255310 169.49085999]
[71.63467407 183.12771606]
[65.38680267 196.76458740]
[66.01280975 201.36764526]
[65.14759064 205.47985840]
[63.15144348 208.67359924]
[60.49050522 210.69265747]
[57.66761017 211.47227478]
[49.99388885 224.36079407]
[42.32016754 237.24931335]
[34.64644241 250.13783264]
[49.54160309 248.36746216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 16]
[10 15]
[22 115]
[23 114]
[24 113]
[25 112]
[26 107]
[27 106]
[28 105]
[29 104]
[30 102]
[31 101]
[32 100]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[40 92]
[41 91]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 80]
[50 79]
[51 78]
[54 77]
[55 76]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
