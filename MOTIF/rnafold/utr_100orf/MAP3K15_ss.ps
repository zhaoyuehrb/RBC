%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAGCGGCGGUGGGAAUGCUCCGGCCGGGGCCCUCGGGGCGGCGAGCGAGUCCCCUCAGUGCCCGCCGCCGCCGGGGGUGGAGGGCGCGGCCGGGC\
) } def
/len { sequence length } bind def

/coor [
[11.96480465 343.29235840]
[12.00777817 358.29229736]
[5.69963074 371.90136719]
[-5.77451372 381.56283569]
[-20.25898361 385.46157837]
[-35.03255463 382.86511230]
[-47.31968307 374.26126099]
[-54.81196213 361.26641846]
[-56.10180283 346.32196045]
[-50.94748688 332.23651123]
[-64.01493073 339.60140991]
[-77.08237457 346.96633911]
[-90.14981842 354.33123779]
[-92.84674072 369.73449707]
[-104.84693909 379.76092529]
[-120.48429108 379.67633057]
[-132.37532043 369.52069092]
[-134.90544128 354.08914185]
[-126.88000488 340.66802979]
[-112.08838654 335.59436035]
[-97.51472473 341.26379395]
[-84.44728088 333.89889526]
[-71.37983704 326.53396606]
[-58.31239700 319.16906738]
[-46.83840942 309.50741577]
[-37.35636139 297.88455200]
[-27.87431526 286.26168823]
[-18.39226913 274.63885498]
[-8.91022301 263.01599121]
[0.57182366 251.39312744]
[10.05387020 239.77027893]
[5.22204256 218.50032043]
[17.35562134 200.06178284]
[39.31463242 195.98895264]
[46.47543335 182.80854797]
[53.63623047 169.62814331]
[60.79702759 156.44773865]
[67.95782471 143.26734924]
[75.11862183 130.08694458]
[82.27941895 116.90653992]
[89.44022369 103.72613525]
[96.39517212 90.43596649]
[103.14260101 77.03924561]
[109.89002228 63.64251709]
[116.63745117 50.24579239]
[123.38487244 36.84906769]
[130.13230896 23.45234299]
[136.87973022 10.05561733]
[136.17713928 -5.74998140]
[148.81253052 -13.63644218]
[155.55995178 -27.03316689]
[161.67520142 -40.73001480]
[167.14497375 -54.69717789]
[172.61474609 -68.66433716]
[169.62492371 -84.78863525]
[182.26812744 -95.23285675]
[197.53808594 -89.25288391]
[199.72640991 -73.00039673]
[186.58190918 -63.19456482]
[181.11213684 -49.22740555]
[175.64236450 -35.26024246]
[176.84065247 -31.76465607]
[176.28996277 -27.49249077]
[173.63511658 -23.32869530]
[168.95668030 -20.28574181]
[162.20924377 -6.88901615]
[163.39445496 7.95835876]
[150.27645874 16.80304337]
[143.52902222 30.19976807]
[136.78160095 43.59649277]
[130.03417969 56.99321747]
[123.28675079 70.38994598]
[116.53932190 83.78666687]
[109.79190063 97.18339539]
[109.24121094 105.38045502]
[102.62062073 110.88694000]
[95.45982361 124.06733704]
[88.29902649 137.24774170]
[81.13822937 150.42814636]
[73.97743225 163.60853577]
[66.81662750 176.78894043]
[59.65583420 189.96934509]
[52.49503326 203.14974976]
[57.77565384 210.22708130]
[60.63500977 218.54537964]
[60.82038498 227.30519104]
[58.33499527 235.67137146]
[53.43569565 242.85260010]
[46.60660172 248.17637634]
[38.51130295 251.15184021]
[29.92842293 251.51507568]
[21.67672729 249.25231934]
[12.19468021 260.87518311]
[2.71263385 272.49801636]
[-6.76941252 284.12088013]
[-16.25145912 295.74374390]
[-25.73350525 307.36660767]
[-35.21555328 318.98947144]
[-20.45710182 316.30838013]
[-5.95053053 320.12405396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 24]
[11 23]
[12 22]
[13 21]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[50 66]
[51 65]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
