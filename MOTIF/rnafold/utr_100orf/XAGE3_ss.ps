%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUGAAUGCCCUGGAGUUGUGAGGGUGUGAGGGUCGCGUUCCUGCUGUCUGGACUUUUUCUGUCCCACUGAGACGCAGCUGUGUGAAAUAUGAUUUGGCGAGGAAGAUCAACAUAUAGGCCUAGGCCGAGGAGAAGUGUACCACCUCCUGAGCUGAUUGGGCCUAUGCUGGAGCCCGGUGAUGAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[37.23769760 197.00604248]
[28.10627556 208.90634155]
[18.97485352 220.80664062]
[9.84343338 232.70693970]
[0.71201152 244.60723877]
[3.90796328 263.26803589]
[-7.34457493 278.09515381]
[-25.54253578 279.97250366]
[-34.27970123 292.16522217]
[-43.01686478 304.35791016]
[-51.75403214 316.55062866]
[-60.49119568 328.74331665]
[-69.22836304 340.93600464]
[-77.96553040 353.12872314]
[-72.17893982 367.42971802]
[-75.06511688 382.58471680]
[-85.70308685 393.75778198]
[-100.69831085 397.38360596]
[-115.26586914 392.30526733]
[-124.75730896 380.14318848]
[-126.14394379 364.77825928]
[-118.98330688 351.11337280]
[-105.56032562 343.50897217]
[-90.15822601 344.39154053]
[-81.42106628 332.19885254]
[-72.68389893 320.00616455]
[-63.94673157 307.81344604]
[-55.20956802 295.62075806]
[-46.47240067 283.42803955]
[-37.73523712 271.23535156]
[-41.99397278 260.63073730]
[-40.58284378 249.16947937]
[-33.73825455 239.72024536]
[-23.07096672 234.70433044]
[-11.18828869 235.47581482]
[-2.05686712 223.57551575]
[7.07455444 211.67521667]
[16.20597649 199.77491760]
[25.33739662 187.87461853]
[34.37115479 175.90000916]
[43.30664444 163.85189819]
[52.24213409 151.80378723]
[61.17762375 139.75567627]
[70.11311340 127.70755768]
[79.04859924 115.65944672]
[75.52306366 101.07964325]
[62.06996918 94.44531250]
[52.97303009 93.45296478]
[48.45237732 87.59079742]
[35.10963821 80.73723602]
[21.76689529 73.88367462]
[8.42415428 67.03012085]
[-5.18769932 60.72794342]
[-19.04589272 54.98768997]
[-32.90408707 49.24744034]
[-46.76227951 43.50718689]
[-60.54851151 50.88782501]
[-75.84287262 47.62952423]
[-85.42382812 35.27075195]
[-84.76755524 19.64694595]
[-74.18391418 8.13518906]
[-58.67018127 6.17097950]
[-45.55146790 14.68175888]
[-41.02202606 29.64899635]
[-27.16383362 35.38924789]
[-13.30564117 41.12949753]
[0.55255222 46.86975098]
[-2.59765315 32.20427322]
[6.77361917 20.49191856]
[21.77293015 20.34820747]
[31.36689949 31.87885094]
[28.49827194 46.60199738]
[15.27771282 53.68737793]
[28.62045479 60.54093552]
[41.96319580 67.39449310]
[55.30593491 74.24805450]
[68.70429993 80.99222565]
[82.15739441 87.62655640]
[88.74265289 84.03708649]
[81.56393433 70.86643219]
[94.73469543 63.68793106]
[101.91318512 76.85813904]
[108.49845123 73.26866913]
[110.21275330 58.36695480]
[111.92705536 43.46523666]
[113.64135742 28.56352043]
[101.18946075 36.92714691]
[86.44221497 34.18513107]
[77.82873535 21.90473938]
[80.27225494 7.10510492]
[92.37612915 -1.75470865]
[107.22210693 0.38932559]
[116.32457733 12.31150246]
[119.49125671 -2.35042739]
[122.65792847 -17.01235771]
[125.82460022 -31.67428589]
[128.99127197 -46.33621597]
[132.15794373 -60.99814606]
[121.71280670 -72.47328186]
[120.04089355 -87.90002441]
[127.78509521 -101.34647369]
[141.96759033 -107.64219666]
[157.13494873 -104.36636353]
[167.45498657 -92.77859497]
[168.95945740 -77.33462524]
[161.06983948 -63.97297668]
[146.81987000 -57.83147430]
[143.65319824 -43.16954422]
[140.48652649 -28.50761414]
[137.31985474 -13.84568405]
[134.15318298 0.81624579]
[130.98651123 15.47817516]
[128.54307556 30.27782631]
[126.82877350 45.17954254]
[125.11447144 60.08125687]
[123.40016174 74.98297882]
[140.03611755 89.63259888]
[155.01805115 88.89658356]
[169.99998474 88.16056824]
[184.98191833 87.42455292]
[199.96385193 86.68854523]
[214.94578552 85.95252991]
[229.92771912 85.21651459]
[244.90965271 84.48049927]
[259.89157104 83.74448395]
[274.85092163 82.64101410]
[289.77871704 81.17075348]
[304.70648193 79.70050049]
[314.71813965 67.76716614]
[329.87796021 66.48876953]
[341.19287109 76.10690308]
[356.12063599 74.63664246]
[371.04843140 73.16638947]
[385.97619629 71.69612885]
[400.90396118 70.22587585]
[406.51342773 66.67765045]
[412.21481323 66.52949524]
[416.34298706 68.95994568]
[431.31088257 67.97889709]
[446.27877808 66.99784851]
[461.68853760 59.92852783]
[472.74743652 72.77909851]
[463.46047974 86.96319580]
[447.25982666 81.96573639]
[432.29193115 82.94678497]
[417.32403564 83.92782593]
[402.37420654 85.15364075]
[387.44644165 86.62390137]
[372.51867676 88.09416199]
[357.59091187 89.56441498]
[342.66314697 91.03467560]
[333.44204712 102.67542267]
[318.32409668 104.37912750]
[306.17672729 94.62827301]
[291.24896240 96.09852600]
[276.32119751 97.56878662]
[273.80786133 100.06332397]
[269.95516968 101.45642853]
[265.29776001 101.12913513]
[260.62759399 98.72640991]
[245.64566040 99.46242523]
[230.66372681 100.19844055]
[215.68179321 100.93445587]
[200.69987488 101.67047119]
[185.71794128 102.40648651]
[170.73600769 103.14250183]
[155.75407410 103.87851715]
[140.77214050 104.61453247]
[133.80964661 117.90075684]
[141.73066711 130.63879395]
[149.65168762 143.37683105]
[157.57270813 156.11485291]
[165.49372864 168.85289001]
[178.99243164 179.11064148]
[172.87236023 194.92143250]
[155.98526001 193.41740417]
[152.75569153 176.77391052]
[144.83467102 164.03587341]
[136.91365051 151.29783630]
[128.99263000 138.55981445]
[121.07161713 125.82177734]
[113.57789612 125.51506805]
[112.96424103 140.50250244]
[97.97680664 139.88862610]
[98.59043884 124.90164185]
[91.09671783 124.59493256]
[82.16122437 136.64305115]
[73.22573853 148.69116211]
[64.29024506 160.73927307]
[55.35475922 172.78738403]
[46.41926956 184.83549500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[40 191]
[41 190]
[42 189]
[43 188]
[44 187]
[45 186]
[46 78]
[47 77]
[49 76]
[50 75]
[51 74]
[52 73]
[53 67]
[54 66]
[55 65]
[56 64]
[83 116]
[84 115]
[85 114]
[86 113]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[117 168]
[118 167]
[119 166]
[120 165]
[121 164]
[122 163]
[123 162]
[124 161]
[125 160]
[126 156]
[127 155]
[128 154]
[131 151]
[132 150]
[133 149]
[134 148]
[135 147]
[138 146]
[139 145]
[140 144]
[169 181]
[170 180]
[171 179]
[172 178]
[173 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
