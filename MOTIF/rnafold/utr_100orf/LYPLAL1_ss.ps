%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGGCCCCGCGCGGCAACGCAGGGGCGGAACCGCAUGACUGGCAGUGGCAUCAGCGAUGGCGGCUGCGUCGGGGUCGGUUCUGCAGCGCUGUAUCGUGUCGCCGGCAGGGAGGCAUAGCGCCUCUCUGAUCUUCCUGCAUGGCUCAGGUGAUUCUG\
) } def
/len { sequence length } bind def

/coor [
[45.82852554 302.82363892]
[39.10136032 289.41671753]
[31.61420631 288.97790527]
[26.17952919 302.95877075]
[20.74485397 316.93963623]
[15.31017685 330.92047119]
[9.87550068 344.90133667]
[12.90580845 361.01806641]
[0.28888986 371.49401855]
[-14.99604988 365.55242920]
[-17.22517586 349.30548096]
[-4.10535383 339.46667480]
[1.32932246 325.48580933]
[6.76399851 311.50494385]
[12.19867516 297.52410889]
[17.63335037 283.54324341]
[59.81302261 270.85693359]
[60.98261261 255.90258789]
[62.15220642 240.94825745]
[50.72056961 231.43743896]
[47.03775787 216.84631348]
[52.71932983 202.71928406]
[65.78088379 194.55215454]
[66.95047760 179.59782410]
[68.12007141 164.64349365]
[69.28965759 149.68916321]
[70.45925140 134.73483276]
[71.62884521 119.78049469]
[65.92240906 105.90834808]
[54.56875992 96.10556030]
[43.21511078 86.30277252]
[31.86145782 76.49998474]
[20.50780869 66.69719696]
[9.15415668 56.89441299]
[-2.19949365 47.09162903]
[-13.55314445 37.28884125]
[-24.90679550 27.48605537]
[-43.69158554 29.61946106]
[-57.86250305 17.59111023]
[-58.77738953 -0.65547836]
[-70.50485992 -10.00782585]
[-82.23233032 -19.36017227]
[-93.95980835 -28.71251869]
[-100.50970459 -30.09038925]
[-104.71707153 -34.00491333]
[-105.95300293 -38.66572952]
[-117.30665588 -48.46851730]
[-128.66030884 -58.27130508]
[-140.01396179 -68.07408905]
[-151.36759949 -77.87687683]
[-166.86956787 -81.03910828]
[-171.44650269 -95.21306610]
[-182.80014038 -105.01585388]
[-194.24890137 -114.70740509]
[-205.79165649 -124.28678894]
[-217.33441162 -133.86618042]
[-233.38424683 -139.32870483]
[-232.57824707 -156.26347351]
[-216.08215332 -160.17698669]
[-207.75502014 -145.40893555]
[-196.21226501 -135.82954407]
[-184.66950989 -126.25016022]
[-177.47763062 -124.38903046]
[-172.99736023 -116.36950684]
[-161.64370728 -106.56671906]
[-146.95384216 -104.10564423]
[-141.56481934 -89.23052979]
[-130.21116638 -79.42774200]
[-118.85752106 -69.62495422]
[-107.50386810 -59.82216644]
[-96.15021515 -50.01938248]
[-84.60746002 -40.43999100]
[-72.87998962 -31.08764458]
[-61.15251541 -21.73529816]
[-49.42504120 -12.38295078]
[-38.57580948 -16.09878159]
[-27.16625977 -14.07232094]
[-18.07345200 -6.69633055]
[-13.64732647 4.27284193]
[-15.10400867 16.13240623]
[-3.75035834 25.93519211]
[7.60329247 35.73797607]
[18.95694351 45.54076385]
[30.31059456 55.34355164]
[41.66424561 65.14633942]
[53.01789474 74.94911957]
[64.37154388 84.75190735]
[75.72519684 94.55469513]
[83.34264374 75.22323608]
[105.76774597 65.64774323]
[114.53709412 53.47816849]
[123.30644989 41.30859756]
[132.07580566 29.13902855]
[129.29548645 13.58121872]
[138.39897156 0.66215461]
[153.98530579 -1.95351207]
[166.80740356 7.28604698]
[169.25813293 22.89916420]
[159.88352966 35.62285614]
[144.24537659 37.90837860]
[135.47601318 50.07794952]
[126.70666504 62.24752045]
[117.93731689 74.41709137]
[121.25721741 81.14228821]
[134.70770264 74.50270081]
[141.34709167 87.95329285]
[127.89701080 94.59268188]
[131.21691895 101.31787872]
[146.21047974 101.75685883]
[161.20762634 102.04953766]
[176.20692444 102.19587708]
[191.20620728 102.34222412]
[206.20549011 102.48857117]
[221.20477295 102.63491821]
[236.20405579 102.78125763]
[251.20335388 102.92760468]
[266.20263672 103.07395172]
[281.20193481 103.22029877]
[293.61688232 93.05916595]
[309.27084351 96.57094574]
[316.15545654 111.06169128]
[308.98941040 125.41534424]
[293.26989746 128.62101746]
[281.05557251 118.21958160]
[266.05627441 118.07323456]
[251.05700684 117.92689514]
[236.05772400 117.78054810]
[221.05842590 117.63420105]
[206.05914307 117.48785400]
[191.05986023 117.34151459]
[176.06057739 117.19516754]
[161.06127930 117.04882050]
[154.30793762 120.14382935]
[145.77151489 116.75043488]
[130.77793884 116.31145477]
[107.58651733 128.87559509]
[86.58317566 120.95008850]
[85.41358185 135.90441895]
[84.24399567 150.85874939]
[83.07440186 165.81307983]
[81.90480804 180.76742554]
[80.73522186 195.72175598]
[92.36820221 205.82025146]
[95.78434753 220.65882874]
[89.87782288 234.49996948]
[77.10653687 242.11785889]
[75.93694305 257.07217407]
[74.76735687 272.02651978]
[76.08279419 286.96871948]
[79.84714508 301.48870850]
[83.61150360 316.00866699]
[87.37586212 330.52865601]
[99.25659180 341.83264160]
[95.14491272 357.70797729]
[79.27056122 361.82345581]
[67.96372223 349.94543457]
[72.85588837 334.29299927]
[69.09153748 319.77304077]
[65.32717896 305.25305176]
[61.56281662 290.73309326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[17 148]
[18 147]
[19 146]
[23 142]
[24 141]
[25 140]
[26 139]
[27 138]
[28 137]
[29 88]
[30 87]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[40 75]
[41 74]
[42 73]
[43 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[54 62]
[55 61]
[56 60]
[90 103]
[91 102]
[92 101]
[93 100]
[108 135]
[109 134]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
[149 160]
[150 159]
[151 158]
[152 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
