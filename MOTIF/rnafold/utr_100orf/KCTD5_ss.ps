%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:18:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAAAGCCGGACGCUUCCGGUGGAAGGGAGCUGUUGCGGGGCUUGCUGGGAUCAUGGCGGAGAAUCACUGCGAGCUCCUGUCGCCGGCCCGGGGCGGCAUCGGGGCGGGGCUGGGGGGCGGCCUGUGCCGCCGCUGCAGCGCUGGGCUCGGCG\
) } def
/len { sequence length } bind def

/coor [
[140.29309082 138.23835754]
[135.43022156 152.42823792]
[123.91379547 162.03926086]
[109.08283234 164.28483582]
[95.23738861 158.51391602]
[86.39176178 146.39967346]
[85.11062622 131.45448303]
[91.76378632 118.01332092]
[82.99595642 130.18399048]
[74.22812653 142.35466003]
[65.46029663 154.52532959]
[56.69246674 166.69598389]
[47.92463684 178.86665344]
[46.81540298 195.22824097]
[31.97410774 202.20449829]
[18.66820335 192.61883545]
[20.58566284 176.33216858]
[35.75396729 170.09883118]
[44.52180099 157.92816162]
[53.28963089 145.75749207]
[62.05746078 133.58682251]
[70.82528687 121.41616058]
[79.59312439 109.24549103]
[84.77838135 103.91682434]
[90.99629211 100.70660400]
[78.82562256 91.93877411]
[63.10584641 90.15013885]
[57.30184174 76.43289948]
[45.13117599 67.66506958]
[32.96050644 58.89723587]
[20.78984070 50.12940598]
[8.61917305 41.36157608]
[-3.55149460 32.59374619]
[-15.72216225 23.82591438]
[-22.34256172 22.76819038]
[-26.73995972 19.05499649]
[-28.19675636 14.45186520]
[-40.00450897 5.20108271]
[-51.81225967 -4.04970074]
[-63.62001419 -13.30048370]
[-75.42776489 -22.55126762]
[-95.15280151 -19.02321815]
[-110.92739105 -30.88241577]
[-112.95447540 -50.20873642]
[-125.29923248 -58.72970581]
[-137.64399719 -67.25067902]
[-150.07392883 -75.64691925]
[-162.58776855 -83.91757202]
[-175.10160828 -92.18823242]
[-187.61544800 -100.45888519]
[-203.04826355 -97.05245209]
[-216.32447815 -105.62669373]
[-219.56756592 -121.09465790]
[-210.85343933 -134.27947998]
[-195.35205078 -137.35884094]
[-182.26008606 -128.50581360]
[-179.34478760 -112.97273254]
[-166.83094788 -104.70207214]
[-154.31710815 -96.43141937]
[-141.80326843 -88.16075897]
[-134.44680786 -87.09022522]
[-129.12301636 -79.59543610]
[-116.77826691 -71.07446289]
[-104.43350983 -62.55349350]
[-95.11645508 -67.09143829]
[-84.67455292 -67.32411194]
[-75.01581573 -63.14124680]
[-67.93342590 -55.24563599]
[-64.77293396 -45.03589630]
[-66.17697906 -34.35902023]
[-54.36922836 -25.10823631]
[-42.56147766 -15.85745239]
[-30.75372505 -6.60666990]
[-18.94597244 2.64411330]
[-6.95433187 11.65524769]
[5.21633577 20.42307854]
[17.38700294 29.19090843]
[29.55767059 37.95874023]
[41.72834015 46.72657013]
[53.89900589 55.49440002]
[66.06967163 64.26222992]
[80.91892242 65.42372894]
[87.59345245 79.76810455]
[99.76412201 88.53593445]
[113.78936768 93.85501099]
[128.71339417 95.36283875]
[143.63740540 96.87066650]
[158.56143188 98.37850189]
[173.49987793 99.73598480]
[188.45124817 100.94297791]
[203.40260315 102.14997864]
[218.35395813 103.35697937]
[233.30531311 104.56398010]
[248.25668335 105.77097321]
[262.63470459 99.16921997]
[274.69808960 107.90554810]
[289.64947510 109.11254883]
[304.02746582 102.51078796]
[316.09088135 111.24711609]
[331.04223633 112.45411682]
[345.99359131 113.66111755]
[360.37161255 107.05935669]
[372.43502808 115.79568481]
[387.38638306 117.00268555]
[402.33773804 118.20968628]
[417.30050659 119.26607513]
[432.27313232 120.17175293]
[447.24575806 121.07743073]
[462.21841431 121.98310852]
[477.19940186 122.73798370]
[492.18722534 123.34197235]
[507.17507935 123.94596100]
[522.16290283 124.54994965]
[537.15075684 125.15393829]
[552.13854980 125.75792694]
[564.85778809 115.98037720]
[580.39733887 119.96820831]
[586.83654785 134.66229248]
[579.23583984 148.79058838]
[563.42584229 151.51507568]
[551.53460693 140.74575806]
[536.54675293 140.14176941]
[521.55889893 139.53778076]
[506.57107544 138.93379211]
[491.58325195 138.32980347]
[476.59539795 137.72581482]
[469.74606323 140.61544800]
[461.31271362 136.95574951]
[446.34008789 136.05006409]
[431.36746216 135.14439392]
[416.39483643 134.23870850]
[409.48867798 136.98983765]
[401.13073730 133.16104126]
[386.17938232 131.95404053]
[371.22802734 130.74705505]
[357.91943359 137.43513489]
[344.78662109 128.61247253]
[329.83523560 127.40547943]
[314.88388062 126.19847870]
[301.57528687 132.88656616]
[288.44247437 124.06390381]
[273.49111938 122.85691071]
[260.18249512 129.54499817]
[247.04968262 120.72233582]
[232.09832764 119.51533508]
[217.14695740 118.30833435]
[202.19560242 117.10134125]
[187.24424744 115.89434052]
[172.29287720 114.68733978]
[165.33273315 117.29883575]
[157.05360413 113.30252075]
[142.12957764 111.79469299]
[127.20555878 110.28686523]
[112.28153229 108.77902985]
[126.75635529 112.71345520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[25 84]
[26 83]
[28 81]
[29 80]
[30 79]
[31 78]
[32 77]
[33 76]
[34 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[44 64]
[45 63]
[46 62]
[47 60]
[48 59]
[49 58]
[50 57]
[85 154]
[86 153]
[87 152]
[88 151]
[89 149]
[90 148]
[91 147]
[92 146]
[93 145]
[94 144]
[96 142]
[97 141]
[99 139]
[100 138]
[101 137]
[103 135]
[104 134]
[105 133]
[106 131]
[107 130]
[108 129]
[109 128]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
