%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCAGCUUGGCCGGGCGCGGAGCGGGGCGCAUGGCGCCGGGCGCACUGCGCGGGGGCUGCGAACAAAGGGCCCCCGGCGGCGGCGCGAGGACGGCCGCGCUCGGACCCUGGCCCUGGCCCAGCCCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[17.15847015 598.05328369]
[15.43676949 613.26165771]
[6.83500481 625.92132568]
[-6.67020035 633.12329102]
[-21.97544861 633.21252441]
[-35.56370544 626.16851807]
[-44.31249237 613.60998535]
[-46.21139526 598.42272949]
[-40.82406616 584.09667969]
[-29.38847351 573.92388916]
[-14.53242874 570.24194336]
[-11.02213573 555.65850830]
[-7.51184320 541.07501221]
[-4.00155020 526.49151611]
[-0.49125719 511.90805054]
[3.01903582 497.32458496]
[6.52932882 482.74108887]
[5.02177715 475.43218994]
[10.29858780 467.85662842]
[14.15234661 453.36013794]
[17.83462906 438.81912231]
[21.34492111 424.23565674]
[13.37517548 411.70492554]
[16.72736549 396.86520386]
[29.92476463 388.59075928]
[33.43505859 374.00729370]
[36.94535065 359.42379761]
[40.45564270 344.84033203]
[43.96593857 330.25686646]
[47.47623062 315.67337036]
[45.96867752 308.36444092]
[51.24549103 300.78890991]
[55.09924698 286.29238892]
[53.76474380 278.94992065]
[59.21900940 271.50109863]
[63.41408157 257.09967041]
[56.04498291 244.20657349]
[60.09423065 229.54171753]
[73.66766357 221.89974976]
[77.86273193 207.49830627]
[82.05780792 193.09687805]
[86.25288391 178.69543457]
[90.44795227 164.29400635]
[94.64302826 149.89256287]
[98.83809662 135.49113464]
[103.03317261 121.08969116]
[82.37192535 106.38761902]
[91.50271606 86.21598816]
[90.44065857 71.25363922]
[89.37860107 56.29128265]
[88.31655121 41.32892990]
[84.55670166 32.89701080]
[87.41036224 26.00138474]
[86.70199585 11.01812077]
[85.99362946 -3.96514344]
[85.28526306 -18.94840813]
[84.57689667 -33.93167114]
[83.86853027 -48.91493607]
[83.16016388 -63.89820099]
[82.45179749 -78.88146973]
[68.76618958 -85.85280609]
[60.41322708 -98.74169922]
[59.63982773 -114.08110809]
[66.65402985 -127.74480438]
[79.56903839 -136.05731201]
[94.91079712 -136.78263855]
[108.55243683 -129.72564697]
[116.82443237 -116.78462982]
[117.50165558 -101.44068146]
[110.40193939 -87.82122040]
[97.43506622 -79.58983612]
[98.14343262 -64.60656738]
[98.85179901 -49.62330246]
[99.56016541 -34.64003754]
[100.26853180 -19.65677452]
[100.97689819 -4.67350960]
[101.68526459 10.30975437]
[102.39363098 25.29302025]
[103.27890015 40.26687241]
[104.34095764 55.22922516]
[105.40301514 70.19158173]
[106.46507263 85.15393829]
[115.74905396 89.82561493]
[121.30491638 100.27543640]
[135.04151917 94.25000763]
[148.77810669 88.22457123]
[155.45753479 81.85128021]
[162.91104126 82.22331238]
[176.78611755 76.52400208]
[186.37390137 63.21962738]
[202.66026306 65.13968658]
[208.89118958 80.30899048]
[198.65682983 93.12265015]
[182.48542786 90.39908600]
[168.61035156 96.09839630]
[154.80354309 101.96117401]
[141.06694031 107.98660278]
[127.33034515 114.01203156]
[117.43460846 125.28476715]
[113.23953247 139.68620300]
[109.04446411 154.08763123]
[104.84938812 168.48907471]
[100.65431976 182.89050293]
[96.45924377 197.29194641]
[92.26416779 211.69337463]
[88.06909943 226.09481812]
[95.41529083 239.83058167]
[90.95574188 254.37591553]
[77.81552124 261.29473877]
[73.62044525 275.69619751]
[69.59574890 290.14614868]
[65.74198914 304.64266968]
[62.05970764 319.18365479]
[58.54941559 333.76715088]
[55.03912354 348.35061646]
[51.52883148 362.93411255]
[48.01853561 377.51757812]
[44.50824356 392.10107422]
[52.49490738 405.47457886]
[48.72722244 420.21429443]
[35.92839813 427.74594116]
[32.41810608 442.32940674]
[33.45336151 451.50338745]
[28.64884758 457.21389771]
[24.79508972 471.71038818]
[21.11280632 486.25140381]
[17.60251427 500.83486938]
[14.09222126 515.41833496]
[10.58192825 530.00183105]
[7.07163525 544.58532715]
[3.56134224 559.16876221]
[0.05104934 573.75225830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[16 127]
[17 126]
[19 125]
[20 124]
[21 122]
[22 121]
[25 118]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[32 112]
[33 111]
[35 110]
[36 109]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[48 82]
[49 81]
[50 80]
[51 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[84 98]
[85 97]
[86 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
