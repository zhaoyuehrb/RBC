%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGGCCCUCCUGCUCCUCGUACUCCUGGCCUCUAGCGCCGGCCAGGCCAGGGCGCGCCCGUCCAACGCCACGAGCGCCGAGCCCGCGGGCCCGCUGC\
) } def
/len { sequence length } bind def

/coor [
[89.01827240 358.58035278]
[88.69380188 342.77941895]
[99.69744873 331.43502808]
[99.23094940 316.44226074]
[91.10157776 303.96179199]
[98.40595245 289.92764282]
[97.93945312 274.93490601]
[97.47295380 259.94216919]
[97.00646210 244.94943237]
[96.53996277 229.95668030]
[83.35098267 223.03451538]
[75.34440613 210.35575867]
[74.75518036 195.27201843]
[81.84162140 181.83032227]
[94.78914642 173.68730164]
[94.32264709 158.69456482]
[93.85614777 143.70181274]
[93.38964844 128.70907593]
[86.37547302 126.12049103]
[80.23881531 121.84955597]
[75.37491608 116.17136383]
[72.09705353 109.45161438]
[70.61633301 102.12311554]
[71.02812958 94.65787506]
[73.30592346 87.53670502]
[77.30300140 81.21825409]
[68.56188965 69.02838898]
[59.82077408 56.83851624]
[51.07965851 44.64864731]
[42.33854294 32.45878220]
[33.59742737 20.26891136]
[24.85630989 8.07904339]
[16.11519432 -4.11082602]
[7.37407970 -16.30069542]
[-3.66205454 -17.48797607]
[-11.98741341 -24.48934937]
[-14.92699909 -34.73205948]
[-11.71772957 -44.66064453]
[-19.68409538 -57.37036514]
[-34.41978836 -64.56699371]
[-35.28508759 -80.94329834]
[-21.38984680 -89.65274048]
[-7.02830124 -81.73579407]
[-6.97437572 -65.33673096]
[0.99199140 -52.62701035]
[18.67181396 -45.06151581]
[19.56394768 -25.04181099]
[28.30506325 -12.85194111]
[37.04618073 -0.66207260]
[45.78729630 11.52779579]
[54.52841187 23.71766472]
[63.26952744 35.90753174]
[72.01064301 48.09740067]
[80.75175476 60.28726959]
[89.49287415 72.47714233]
[107.25543976 71.44713593]
[122.37158966 80.83180237]
[135.87162781 74.29354095]
[149.37167358 67.75527191]
[162.87170410 61.21700668]
[171.91932678 48.23813629]
[186.74647522 49.65410614]
[200.24652100 43.11584091]
[213.74655151 36.57757568]
[216.35064697 21.28057098]
[227.47225952 10.45978832]
[242.83491516 8.27603912]
[256.53134155 15.56901836]
[263.29498291 29.53442764]
[260.52511597 44.80228043]
[249.28675842 55.50177765]
[233.90132141 57.51874542]
[220.28482056 50.07761383]
[206.78477478 56.61587906]
[193.28474426 63.15414810]
[185.20272827 75.66535950]
[169.40997314 74.71704865]
[155.90992737 81.25531006]
[142.40989685 87.79357910]
[128.90985107 94.33184814]
[125.20243073 115.25598907]
[108.38239288 128.24256897]
[108.84889221 143.23532104]
[109.31539154 158.22805786]
[109.78189087 173.22080994]
[123.21061707 180.54313660]
[131.11901855 193.51826477]
[131.46867371 208.60946655]
[124.26582336 221.76145935]
[111.53270721 229.49018860]
[111.99920654 244.48292542]
[112.46569824 259.47567749]
[112.93219757 274.46841431]
[113.39869690 289.46115112]
[121.56143951 303.01403809]
[114.22369385 315.97576904]
[114.69019318 330.96850586]
[126.37783813 341.60687256]
[127.03633118 357.39743042]
[116.27500916 368.97195435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[15 85]
[16 84]
[17 83]
[18 82]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[38 45]
[39 44]
[57 80]
[58 79]
[59 78]
[60 77]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
