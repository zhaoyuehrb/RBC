%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCCCAUAUUCAGCCACCUCAUCCAGGCCUUAUCAAAGAAGAGUCUUAUAUGAGAUCAAAUGGCUGCCUUUCCCCACAAGAUUAUAUUUUUCCUGGUAUGCUCUACUUUGACACAUGUGGCUUUCUCAGGAAUUUUCAAUAAACGUGACUUCACUAGGU\
) } def
/len { sequence length } bind def

/coor [
[162.60191345 117.38336945]
[157.60467529 109.50559998]
[154.17610168 100.82212830]
[139.29365540 102.69638824]
[124.41120911 104.57064819]
[109.52877045 106.44491577]
[121.73847198 115.15830231]
[126.63574219 129.33633423]
[122.40674591 143.72784424]
[110.61780548 153.00259399]
[95.63523102 153.72543335]
[83.00818634 145.62866211]
[77.41339874 131.71112061]
[80.92302704 117.12747955]
[92.23831940 107.27867889]
[77.24459076 106.84508514]
[62.25085831 106.41149139]
[47.25712585 105.97789764]
[32.26339340 105.54429626]
[12.93260765 118.34346771]
[-5.95615625 106.21152496]
[-20.92204094 107.22261810]
[-35.88792419 108.23371124]
[-50.85380936 109.24481201]
[-65.81969452 110.25590515]
[-77.05922699 123.63091278]
[-94.15655518 124.74120331]
[-106.53441620 113.38774872]
[-121.47803497 114.68708038]
[-136.42164612 115.98641968]
[-151.36526489 117.28575134]
[-166.29566956 118.72903442]
[-181.21147156 120.31613159]
[-196.12727356 121.90322113]
[-204.70431519 134.97869873]
[-219.69429016 139.43235779]
[-234.01936340 133.16130066]
[-240.91569519 119.12653351]
[-237.12702942 103.95484161]
[-224.44227600 94.80984497]
[-208.85078430 96.00952148]
[-197.71437073 106.98741913]
[-182.79856873 105.40032959]
[-167.88276672 103.81323242]
[-161.53375244 99.95998383]
[-152.66459656 102.34213257]
[-137.72099304 101.04280090]
[-122.77736664 99.74346161]
[-107.83374786 98.44412994]
[-100.98759460 87.49531555]
[-88.89923859 82.42688751]
[-75.91113281 85.30328369]
[-66.83078766 95.29002380]
[-51.86490250 94.27892303]
[-36.89902115 93.26782990]
[-21.93313599 92.25673676]
[-6.96725178 91.24563599]
[-3.72563767 84.78680420]
[1.62265706 79.82562256]
[8.43286800 77.02547455]
[15.86076641 76.78521729]
[22.96727371 79.18312073]
[28.83718300 83.96086121]
[32.69698715 90.55056763]
[47.69071960 90.98416138]
[62.68445206 91.41775513]
[77.67818451 91.85135651]
[92.67191315 92.28495026]
[107.65450287 91.56246948]
[122.53694916 89.68820953]
[137.41938782 87.81394196]
[152.30183411 85.93968201]
[157.67124939 65.04844666]
[171.40779114 48.47179031]
[190.86257935 39.35056686]
[212.30773926 39.39332962]
[231.65066528 48.55639267]
[245.21513367 65.05893707]
[259.46301270 60.36872482]
[273.71087646 55.67851257]
[272.32815552 40.68204498]
[274.31643677 25.76108551]
[279.57284546 11.66352844]
[287.83071899 -0.90472084]
[298.67324829 -11.31509781]
[311.55441284 -19.04781532]
[325.82650757 -23.71781731]
[340.77279663 -25.09394455]
[355.64337158 -23.11038589]
[369.69284058 -17.86980820]
[382.21774292 -9.63805199]
[392.59167480 1.16934979]
[400.29666138 14.00815296]
[414.54455566 9.31794167]
[428.79241943 4.62773085]
[443.04028320 -0.06248010]
[457.28817749 -4.75269127]
[471.53604126 -9.44290257]
[485.78390503 -14.13311386]
[487.09674072 -28.23055458]
[493.67156982 -40.72080994]
[504.48327637 -49.72746658]
[517.87298584 -53.91177368]
[531.80285645 -52.67156219]
[544.16583252 -46.22766495]
[553.10467529 -35.58547592]
[567.44030762 -40.00022507]
[581.77593994 -44.41497803]
[596.11151123 -48.82972717]
[599.45782471 -63.81965637]
[609.86254883 -75.11730957]
[624.52691650 -79.68367004]
[639.50628662 -76.29042053]
[650.77130127 -65.85031891]
[655.29168701 -51.17170715]
[651.85144043 -36.20304871]
[641.37609863 -24.97084427]
[626.68341064 -20.49650002]
[611.72558594 -23.98359108]
[600.52630615 -34.49410629]
[586.19067383 -30.07935715]
[571.85504150 -25.66460800]
[557.51940918 -21.24985695]
[555.44293213 -5.42789030]
[546.65197754 7.95955610]
[532.85888672 16.21289062]
[516.79034424 17.64152908]
[501.64883423 11.90996075]
[490.47412109 0.11476076]
[476.22625732 4.80497169]
[461.97836304 9.49518299]
[447.73049927 14.18539429]
[433.48263550 18.87560463]
[419.23474121 23.56581688]
[404.98687744 28.25602722]
[406.41482544 43.16115570]
[404.48904419 58.01745987]
[399.30294800 72.07943726]
[391.11361694 84.64073944]
[380.32904053 95.06962585]
[367.48791504 102.84074402]
[353.23254395 107.56160736]
[338.27688599 108.99240112]
[323.37066650 107.05816650]
[309.26193237 101.85271454]
[296.65933228 93.63410187]
[286.19671631 82.81181335]
[278.40109253 69.92638397]
[264.15322876 74.61660004]
[249.90534973 79.30680847]
[250.57992554 88.51657867]
[249.50917053 97.69554138]
[246.72877502 106.51564789]
[242.33561707 114.66119385]
[236.48429871 121.84013367]
[229.38179016 127.79452515]
[221.28007507 132.30979919]
[212.46717834 135.22251892]
[203.25698853 136.42625427]
[193.97802734 135.87551880]
[184.96179199 133.58743286]
[176.53082275 129.64122009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[6 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[28 49]
[29 48]
[30 47]
[31 46]
[32 44]
[33 43]
[34 42]
[78 150]
[79 149]
[80 148]
[93 135]
[94 134]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[106 123]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
