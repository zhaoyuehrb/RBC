%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGCUCAAUAAGUCUGCUUCCACCUUCCAGCUUACUGGCUUCCCAGGCAUGGAGAAGGCACAUCACUGGAUAUUCAUCCCAUUAUUGGCAGCCUACA\
) } def
/len { sequence length } bind def

/coor [
[89.69171143 518.76312256]
[81.94017029 505.18194580]
[84.78279114 489.80490112]
[96.87737274 479.89254761]
[96.87737274 464.89254761]
[96.87737274 449.89254761]
[96.87737274 434.89254761]
[96.87737274 419.89254761]
[96.41087341 404.89981079]
[95.47833252 389.92880249]
[94.54578400 374.95782471]
[93.61324310 359.98684692]
[92.68069458 345.01586914]
[91.74815369 330.04489136]
[78.07347107 328.03948975]
[65.07000732 323.34060669]
[53.26285172 316.13568115]
[43.12921524 306.71331787]
[35.07920456 295.45190430]
[29.43918800 282.80426025]
[26.43857574 269.27944946]
[26.20048714 255.42234802]
[28.73670197 241.79171753]
[33.94709778 228.93753052]
[41.62360001 217.37895203]
[51.45848465 207.58325195]
[63.05672455 199.94694519]
[75.95185089 194.77978516]
[89.62471008 192.29214478]
[90.09120941 177.29939270]
[90.55770111 162.30665588]
[91.02420044 147.31391907]
[91.49069977 132.32116699]
[78.32609558 125.44224548]
[69.44219971 113.53835297]
[66.59362793 98.96056366]
[70.34298706 84.58806610]
[79.94976044 73.25950623]
[93.51655579 67.21233368]
[93.98305511 52.21958923]
[86.67868042 38.18546295]
[94.80805206 25.70497704]
[95.27455139 10.71223354]
[95.74105072 -4.28051043]
[96.20755005 -19.27325439]
[96.44082642 -34.27144241]
[96.44082642 -49.27144241]
[96.44082642 -64.27143860]
[87.77712250 -78.19524384]
[95.74124908 -92.53067780]
[112.14039612 -92.53067780]
[120.10453033 -78.19524384]
[111.44082642 -64.27143860]
[111.44082642 -49.27144241]
[111.44082642 -34.27144241]
[114.64506531 -27.46274567]
[111.20029449 -18.80675697]
[110.73379517 -3.81401253]
[110.26729584 11.17873192]
[109.80079651 26.17147636]
[117.13854218 39.13322067]
[108.97579956 52.68608856]
[108.50930023 67.67883301]
[121.67390442 74.55775452]
[130.55780029 86.46164703]
[133.40637207 101.03943634]
[129.65701294 115.41193390]
[120.05023956 126.74049377]
[106.48344421 132.78765869]
[106.01694489 147.78041077]
[105.55044556 162.77314758]
[105.08395386 177.76589966]
[104.61745453 192.75863647]
[120.35743713 196.94032288]
[134.67730713 204.68077087]
[146.78579712 215.54804993]
[156.01483154 228.93753052]
[161.85636902 244.10559082]
[163.99038696 260.21084595]
[162.30242920 276.36093140]
[156.88966370 291.66180420]
[148.05537415 305.26733398]
[136.29194641 316.42608643]
[122.25343323 324.52282715]
[106.71913147 329.11233521]
[107.65167999 344.08331299]
[108.58422089 359.05429077]
[109.51676941 374.02529907]
[110.44931030 388.99627686]
[111.38185883 403.96725464]
[114.85960388 409.92749023]
[114.69075012 415.83352661]
[111.87737274 419.89254761]
[111.87737274 434.89254761]
[111.87737274 449.89254761]
[111.87737274 464.89254761]
[111.87737274 479.89254761]
[123.97195435 489.80490112]
[126.81457520 505.18194580]
[119.06303406 518.76312256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[29 73]
[30 72]
[31 71]
[32 70]
[33 69]
[39 63]
[40 62]
[42 60]
[43 59]
[44 58]
[45 57]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
