%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:11:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCGGUGAGAGCUGCCGUGGAUUGGUGGGGGCACUGACUCACUGGCCCUGCCAUGCCCACGCCACUGCUCCCGCUGCUGCUUCGAUUGCUGCUGUCCUGCCUGCUGCUGCCUGCUGCCCGCCUGGCCCGCCAAUACCUCCUGCCCCUGCUGC\
) } def
/len { sequence length } bind def

/coor [
[129.82804871 126.43161011]
[128.32234192 119.35163879]
[127.85253143 112.12487030]
[113.04677582 109.71870422]
[97.55213165 116.08351898]
[84.65262604 105.39719391]
[69.80142212 103.28965759]
[54.95021820 101.18212128]
[40.09901428 99.07458496]
[25.24780846 96.96704865]
[10.49741936 102.68863678]
[-1.01649261 93.23987579]
[-15.86769772 91.13233948]
[-30.71890259 89.02480316]
[-45.57010651 86.91726685]
[-60.46073914 85.10921478]
[-75.38476562 83.60138702]
[-89.89280701 89.91226959]
[-101.77783966 80.93479156]
[-116.70186615 79.42696381]
[-131.62588501 77.91912842]
[-146.54991150 76.41130066]
[-161.47393799 74.90347290]
[-174.78819275 86.20789337]
[-191.82656860 84.44882965]
[-202.13638306 71.19452667]
[-217.08773804 69.98752594]
[-232.03909302 68.78053284]
[-246.99046326 67.57353210]
[-261.94180298 66.36653137]
[-276.89318848 65.15953064]
[-291.84454346 63.95253372]
[-306.79589844 62.74553680]
[-321.17391968 69.34729767]
[-333.23730469 60.61096573]
[-348.18869019 59.40396500]
[-362.56668091 66.00572205]
[-374.63009644 57.26939392]
[-389.58145142 56.06239319]
[-405.85577393 60.81460571]
[-414.92742920 46.49185944]
[-403.67572021 33.80978012]
[-388.37445068 41.11103439]
[-373.42309570 42.31803513]
[-360.11450195 35.62994385]
[-346.98168945 44.45260620]
[-332.03033447 45.65960312]
[-318.72171021 38.97151566]
[-305.58889771 47.79417801]
[-290.63754272 49.00117493]
[-275.68618774 50.20817566]
[-260.73480225 51.41517258]
[-245.78346252 52.62216949]
[-230.83209229 53.82917023]
[-215.88073730 55.03616714]
[-200.92938232 56.24316788]
[-192.35115051 46.58388901]
[-179.58123779 43.60193634]
[-167.25099182 48.60972977]
[-159.96609497 59.97945023]
[-145.04208374 61.48727798]
[-130.11805725 62.99510956]
[-115.19403076 64.50293732]
[-100.27001190 66.01077271]
[-86.82943726 59.59202957]
[-73.87693024 68.67736053]
[-58.95291138 70.18518829]
[-54.71356583 67.87455750]
[-48.96992874 68.24278259]
[-43.46257019 72.06605530]
[-28.61136627 74.17359924]
[-13.76016045 76.28113556]
[1.09104443 78.38867188]
[14.77917576 72.51633453]
[27.35534477 82.11584473]
[42.20655060 84.22338104]
[57.05775452 86.33091736]
[71.90895844 88.43845367]
[86.76016235 90.54598999]
[96.50992584 84.11003876]
[108.05935669 85.86782837]
[115.45294189 94.91294861]
[130.25869751 97.31912231]
[143.51843262 76.42205048]
[165.11804199 64.45514679]
[189.75488281 64.29518890]
[211.40979004 75.92784119]
[224.81776428 96.46417999]
[239.57206726 93.76035309]
[254.32637024 91.05652618]
[269.08065796 88.35269928]
[274.42959595 84.31076050]
[280.15374756 83.71157074]
[284.48269653 85.84962463]
[299.33392334 83.74208832]
[313.52569580 72.05030060]
[329.54180908 79.16318512]
[344.34756470 76.75701904]
[359.15332031 74.35085297]
[368.39465332 61.81150055]
[383.44406128 59.58221436]
[395.34146118 68.46970367]
[410.14721680 66.06352997]
[419.38858032 53.52418137]
[434.43798828 51.29489899]
[446.33538818 60.18238449]
[461.14114380 57.77621460]
[473.52145386 47.92540741]
[487.32507324 53.52091217]
[502.13082886 51.11474228]
[512.63726807 38.99061966]
[528.66040039 39.78955460]
[537.90869141 52.89867401]
[533.28759766 68.26177979]
[518.34204102 74.09362030]
[504.53698730 65.92049408]
[489.73123169 68.32666779]
[478.40994263 78.00537109]
[463.54730225 72.58197021]
[448.74154663 74.98813629]
[440.27081299 87.18576813]
[425.28994751 89.83687592]
[412.55340576 80.86928558]
[397.74765015 83.27545166]
[389.27691650 95.47308350]
[374.29605103 98.12419891]
[361.55947876 89.15660095]
[346.75372314 91.56277466]
[331.94796753 93.96894073]
[324.59545898 103.61969757]
[312.23828125 105.71785736]
[301.44143677 98.59329224]
[286.59024048 100.70082855]
[271.78448486 103.10699463]
[257.03018188 105.81082153]
[242.27589417 108.51464844]
[227.52159119 111.21847534]
[227.23939514 118.37710571]
[225.92770386 125.42396545]
[223.61285400 132.21170044]
[220.34219360 138.59823608]
[216.18304443 144.44970703]
[211.22138977 149.64331055]
[205.56008911 154.06987000]
[199.31668091 157.63607788]
[192.62101746 160.26657104]
[185.61253357 161.90539551]
[178.43731689 162.51730347]
[171.24513245 162.08843994]
[164.18623352 160.62672424]
[157.40821838 158.16160583]
[151.05299377 154.74356079]
[145.25379944 150.44303894]
[140.13233948 145.34896851]
[135.79634094 139.56698608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 83]
[4 82]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[12 73]
[13 72]
[14 71]
[15 70]
[16 67]
[17 66]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[35 47]
[36 46]
[38 44]
[39 43]
[88 137]
[89 136]
[90 135]
[91 134]
[94 133]
[95 132]
[97 129]
[98 128]
[99 127]
[102 124]
[103 123]
[106 120]
[107 119]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
