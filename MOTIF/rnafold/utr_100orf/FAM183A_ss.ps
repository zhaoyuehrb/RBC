%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAAGAGGGCGCGUGGCAGCCCAAGGCCAUGGCGGGACACCCAAAAGAGAAGGUGAUUCCAGAUGAGGUCCAUCAGAACCAGAUCUUGCGGGAACUGUACCUCAAGGAGCUACGAACCCAGAAACUCU\
) } def
/len { sequence length } bind def

/coor [
[152.06146240 201.29959106]
[167.05731201 201.02528381]
[155.13865662 191.91784668]
[143.21998596 182.81040955]
[131.30131531 173.70297241]
[119.38265228 164.59553528]
[107.46398926 155.48809814]
[95.22309113 146.81858826]
[82.67604065 138.59840393]
[67.68589020 138.05477905]
[54.57637024 145.34454346]
[48.52099609 152.32157898]
[41.06082535 152.64767456]
[27.77898407 159.61853027]
[14.49714375 166.58937073]
[1.21530294 173.56022644]
[-12.06653786 180.53106689]
[-25.34837723 187.50192261]
[-27.45708847 202.87504578]
[-38.22343826 214.04936218]
[-53.50754166 216.72811890]
[-67.43235779 209.88127136]
[-74.64350128 196.14158630]
[-72.36814117 180.79223633]
[-61.48120880 169.73538208]
[-46.16894150 167.22257996]
[-32.31922531 174.22007751]
[-19.03738594 167.24922180]
[-5.75554466 160.27838135]
[7.52629566 153.30752563]
[20.80813599 146.33668518]
[34.08997726 139.36584473]
[47.28662109 132.23501587]
[60.39614105 124.94526672]
[62.20418930 110.05463409]
[51.22016144 99.83939362]
[40.23612976 89.62416077]
[29.25209999 79.40892029]
[18.14544487 69.32714081]
[6.91778326 59.38030624]
[-4.30987787 49.43346405]
[-15.53753948 39.48662567]
[-30.08040047 44.42633820]
[-45.14160919 41.41708374]
[-56.66977310 31.26833916]
[-61.56387329 16.71006584]
[-58.50742722 1.65836430]
[-48.32259750 -9.83793163]
[-33.74905396 -14.68637657]
[-18.70700836 -11.58276367]
[-7.24269247 -1.36194921]
[-2.43995214 13.22671986]
[-5.59069920 28.25896454]
[5.63696194 38.20580292]
[16.86462402 48.15264511]
[28.09228516 58.09948349]
[35.25763321 60.20144653]
[39.46733856 68.42488861]
[50.45137024 78.64012909]
[61.43539810 88.85536194]
[72.41942596 99.07060242]
[81.38272095 83.44454956]
[96.66046906 78.02135468]
[99.54237366 63.30080032]
[102.42427063 48.58024597]
[105.30617523 33.85969543]
[97.58203888 19.79849815]
[103.89232635 5.04859161]
[119.39633942 0.92484117]
[132.20071411 10.59063530]
[132.48303223 26.63120461]
[120.02672577 36.74159622]
[117.14482117 51.46214676]
[114.26292419 66.18270111]
[111.38101959 80.90325165]
[121.03159332 89.96270752]
[124.12896729 103.46887207]
[118.95029449 116.98805237]
[106.61017609 125.68625641]
[90.89622498 126.05135345]
[103.44327545 134.27154541]
[108.85982513 134.56439209]
[113.14761353 136.74430847]
[115.76555634 140.03804016]
[116.57142639 143.56942749]
[128.49009705 152.67687988]
[140.40875244 161.78431702]
[152.32742310 170.89175415]
[164.24609375 179.99919128]
[176.16474915 189.10662842]
[189.18524170 196.55424500]
[203.07785034 202.21066284]
[216.97047424 207.86708069]
[228.75691223 201.22401428]
[242.02064514 202.59504700]
[251.90525818 211.25141907]
[254.92276001 223.83876038]
[268.67465210 229.82922363]
[282.42654419 235.81968689]
[296.17840576 241.81016541]
[311.92031860 240.22796631]
[320.49856567 252.40428162]
[334.25045776 258.39474487]
[348.00231934 264.38522339]
[364.93823242 265.16757202]
[368.87475586 281.65817261]
[354.11837769 290.00592041]
[342.01187134 278.13711548]
[328.25997925 272.14663696]
[314.50808716 266.15615845]
[299.74981689 268.16683960]
[290.18795776 255.56204224]
[276.43606567 249.57157898]
[262.68417358 243.58111572]
[248.93229675 237.59063721]
[233.61193848 244.41600037]
[217.76525879 237.96780396]
[211.31405640 221.75970459]
[197.42143250 216.10328674]
[183.52880859 210.44685364]
[190.89512634 223.51351929]
[191.49395752 238.50155640]
[185.19357300 252.11424255]
[173.37980652 261.35733032]
[158.65118408 264.19775391]
[144.24742126 260.01071167]
[133.33671570 249.71717834]
[128.31900024 235.58132935]
[130.29794312 220.71244812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 90]
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[8 81]
[9 80]
[10 34]
[11 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[35 61]
[36 60]
[37 59]
[38 58]
[39 56]
[40 55]
[41 54]
[42 53]
[63 75]
[64 74]
[65 73]
[66 72]
[91 120]
[92 119]
[93 118]
[97 115]
[98 114]
[99 113]
[100 112]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
