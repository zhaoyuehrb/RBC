%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAGGUUUUCCCAGCACCACAUGUGUCAACAAAUCUUACGGGAUUGCAUUCUUCUCAUACAUCAUUUGUGCAUUAACAGGAAAAAAGUCUCACUUGUGAUGCUGGGUCCAGCUUAUAACC\
) } def
/len { sequence length } bind def

/coor [
[96.83495331 427.79110718]
[93.91864014 412.64190674]
[99.67676544 398.32940674]
[112.27194214 389.42068481]
[111.50603485 374.44027710]
[110.74011993 359.45983887]
[109.97421265 344.47940063]
[109.20830536 329.49896240]
[108.44239807 314.51852417]
[95.50714111 303.85324097]
[94.20600891 286.80148315]
[105.82098389 273.79528809]
[104.67274475 258.83932495]
[103.52450562 243.88333130]
[102.37626648 228.92733765]
[101.22802734 213.97135925]
[100.07978821 199.01536560]
[98.93154907 184.05938721]
[90.24268341 171.96173096]
[96.90089417 157.60977173]
[95.75265503 142.65377808]
[94.60441589 127.69779968]
[93.45617676 112.74181366]
[85.71808624 101.09648895]
[91.58783722 88.40642548]
[90.43959808 73.45043945]
[89.29135895 58.49445343]
[73.95125580 54.86194229]
[60.49142838 46.69266510]
[50.21352386 34.79058456]
[44.10718155 20.31995392]
[42.75474167 4.69146156]
[46.27574539 -10.57531738]
[54.31645203 -23.99965477]
[66.08535767 -34.28329468]
[80.43109131 -40.43599701]
[78.90127563 -55.35778046]
[77.37145233 -70.27956390]
[75.84163666 -85.20134735]
[63.38621521 -91.25684357]
[55.63596725 -102.60334015]
[54.54317856 -116.19162750]
[60.28828049 -128.43415833]
[71.26055908 -136.15223694]
[70.11232758 -151.10821533]
[68.96408844 -166.06420898]
[65.14886475 -174.49487305]
[67.98249054 -181.41596985]
[67.21657562 -196.39640808]
[66.45066833 -211.37683105]
[65.68476105 -226.35726929]
[51.07255173 -230.27371216]
[38.38686371 -238.51559448]
[28.87051582 -250.27545166]
[23.45582008 -264.40118408]
[22.67325401 -279.50888062]
[26.59948540 -294.11846924]
[34.84986115 -306.79861450]
[46.61609650 -316.30709839]
[60.74545288 -321.71231079]
[75.85367584 -322.48477173]
[90.46062469 -318.54873657]
[103.13525391 -310.28988647]
[112.63583374 -298.51727295]
[118.03159332 -284.38430786]
[118.79391479 -269.27554321]
[114.84810638 -254.67124939]
[106.58074951 -242.00215149]
[94.80178070 -232.50946045]
[80.66519165 -227.12318420]
[81.43109894 -212.14274597]
[82.19701385 -197.16230774]
[82.96292114 -182.18188477]
[83.92007446 -167.21244812]
[85.06831360 -152.25645447]
[86.21655273 -137.30047607]
[100.43121338 -129.19691467]
[107.12017822 -114.08321381]
[103.48808289 -97.78995514]
[90.76342010 -86.73117065]
[92.29323578 -71.80938721]
[93.82305908 -56.88759995]
[95.35287476 -41.96581650]
[109.41303253 -39.29388046]
[122.15724945 -32.74639511]
[132.54029846 -22.85019875]
[139.70776367 -10.40718174]
[143.06625366 3.57067513]
[142.33265686 17.94361305]
[137.55786133 31.53702736]
[129.12341309 43.23745346]
[117.71098328 52.08378983]
[104.24734497 57.34621429]
[105.39558411 72.30220032]
[106.54382324 87.25818634]
[114.28191376 98.90351105]
[108.41216278 111.59357452]
[109.56040192 126.54956055]
[110.70864105 141.50553894]
[111.85688019 156.46153259]
[120.62786865 169.62892151]
[113.88753510 182.91114807]
[115.03577423 197.86712646]
[116.18401337 212.82312012]
[117.33225250 227.77909851]
[118.48049164 242.73509216]
[119.62873077 257.69107056]
[120.77696991 272.64706421]
[131.99343872 280.22888184]
[136.69129944 292.71780396]
[133.35162354 305.43453979]
[123.42282867 313.75262451]
[124.18873596 328.73306274]
[124.95465088 343.71350098]
[125.72055817 358.69390869]
[126.48646545 373.67434692]
[127.25237274 388.65478516]
[140.69046021 396.23248291]
[147.87826538 409.88308716]
[146.52218628 425.25073242]
[137.05496216 437.43167114]
[122.49752808 442.53900146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 117]
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[20 100]
[21 99]
[22 98]
[23 97]
[25 95]
[26 94]
[27 93]
[36 83]
[37 82]
[38 81]
[39 80]
[44 76]
[45 75]
[46 74]
[48 73]
[49 72]
[50 71]
[51 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
