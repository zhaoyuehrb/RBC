%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:02:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGUCGUGAAAAAAAAGGUCUUGGUGAGGUGCCGCCAUUUCAUCUGUCCUCAUUCUCUGCGCCUUUCGCAGAGCUUCCAGCAGCGGUAUGUUGGGCCAGAGCAUCCGGAGGUUCACAACCUCUGUGGUCCGUAGGAGCCACUAUGAGGAGGGCCCUGGGAAGAAUUUGCCAUUUUCAGUGGAAAACA\
) } def
/len { sequence length } bind def

/coor [
[86.71678162 299.82174683]
[80.46505737 313.45684814]
[74.21332550 327.09194946]
[67.96160126 340.72705078]
[61.70987320 354.36215210]
[55.45814514 367.99725342]
[49.20641708 381.63235474]
[58.61149979 393.70724487]
[61.31639099 408.77182007]
[56.69952774 423.36441040]
[45.82183456 434.13168335]
[31.18291664 438.59942627]
[16.14669800 435.74099731]
[4.16838980 426.21319580]
[-1.99948204 412.20547485]
[-0.93958437 396.93673706]
[7.10452557 383.91555786]
[20.28437042 376.13415527]
[35.57131958 375.38061523]
[41.82304764 361.74551392]
[48.07477570 348.11041260]
[54.32650375 334.47531128]
[60.57823181 320.84020996]
[66.82995605 307.20513916]
[73.08168793 293.57003784]
[62.65190125 282.78952026]
[48.81755829 288.58700562]
[34.98321152 294.38449097]
[21.14886475 300.18197632]
[7.31451797 305.97946167]
[-6.51982832 311.77694702]
[-20.35417557 317.57443237]
[-34.18852234 323.37191772]
[-43.68178940 336.74389648]
[-59.98134232 334.93930054]
[-66.31959534 319.81454468]
[-56.17630386 306.92868042]
[-39.98600769 309.53756714]
[-26.15166283 303.74008179]
[-12.31731606 297.94259644]
[1.51703024 292.14511108]
[15.35137653 286.34762573]
[29.18572235 280.55014038]
[43.02006912 274.75265503]
[56.85441589 268.95516968]
[66.16515350 257.19461060]
[68.63407135 242.39920044]
[63.09713745 228.57200623]
[73.00034332 216.23356628]
[75.46926117 201.43814087]
[77.93817902 186.64271545]
[80.40710449 171.84730530]
[82.87602234 157.05187988]
[85.34494019 142.25646973]
[87.81385803 127.46104431]
[51.39154053 114.10551453]
[40.78248978 60.49759293]
[28.50311852 51.88266373]
[16.22374725 43.26773453]
[3.94437504 34.65280533]
[-8.33499718 26.03787422]
[-20.61437035 17.42294502]
[-32.89374161 8.80801487]
[-48.88040543 10.15193844]
[-59.79347610 -1.60750294]
[-57.26137543 -17.44947433]
[-43.22652054 -25.22136879]
[-28.45524597 -18.96125603]
[-24.27881241 -3.47135782]
[-11.99943924 5.14357233]
[0.27993274 13.75850201]
[12.55930519 22.37343216]
[24.83867645 30.98836136]
[37.11804962 39.60329056]
[49.39742279 48.21822357]
[55.57250977 43.96166229]
[54.37471008 29.00956345]
[67.92268372 35.44854355]
[74.09777069 31.19198418]
[70.41548920 16.65098000]
[66.73320770 2.10997629]
[63.05092239 -12.43102741]
[59.36864090 -26.97203255]
[55.68635941 -41.51303482]
[41.98303223 -49.38669205]
[37.94154739 -64.66549683]
[45.95964050 -78.28481293]
[61.28032303 -82.16453552]
[74.81410217 -74.00289917]
[78.53163147 -58.64205170]
[70.22736359 -45.19531631]
[73.90964508 -30.65431404]
[77.59192657 -16.11330986]
[81.27420807 -1.57230604]
[84.95648956 12.96869755]
[88.63877106 27.50970268]
[103.63056946 27.01375198]
[106.34378052 12.26117516]
[100.34152985 -3.00005078]
[110.76729584 -15.65846729]
[126.89593506 -12.69218159]
[132.13569641 2.84734750]
[121.09635925 14.97438335]
[118.38314819 29.72695923]
[125.12107849 33.02093506]
[131.70925903 19.54517937]
[145.18490601 26.13357353]
[138.59693909 39.60888290]
[145.33488464 42.90285873]
[155.31024170 31.70053482]
[165.28561401 20.49821281]
[175.26098633 9.29589081]
[185.23635864 -1.90643156]
[195.21171570 -13.10875416]
[205.18708801 -24.31107521]
[211.20497131 -40.16104507]
[228.10142517 -38.76605606]
[231.43835449 -22.14374733]
[216.38941956 -14.33570766]
[206.41404724 -3.13338518]
[196.43867493 8.06893730]
[186.46330261 19.27125931]
[176.48794556 30.47358131]
[166.51257324 41.67590332]
[156.53720093 52.87822723]
[164.42747498 65.63532257]
[178.90560913 61.71312332]
[193.38374329 57.79092407]
[207.86187744 53.86872482]
[222.30709839 49.82696533]
[236.71839905 45.66592026]
[251.12969971 41.50487900]
[264.66995239 31.30201340]
[278.22238159 41.48865509]
[272.18551636 57.33140564]
[255.29074097 55.91618347]
[240.87944031 60.07722473]
[226.46813965 64.23826599]
[220.90393066 69.12313843]
[211.78407288 68.34685516]
[197.30595398 72.26905823]
[182.82781982 76.19125366]
[168.34968567 80.11345673]
[141.76329041 128.59327698]
[102.60927582 129.92996216]
[100.14035797 144.72538757]
[97.67144012 159.52079773]
[95.20252228 174.31622314]
[92.73360443 189.11164856]
[90.26468658 203.90705872]
[87.79576111 218.70248413]
[93.15610504 233.58795166]
[83.42948914 244.86811829]
[80.96057129 259.66354370]
[127.98072052 286.26547241]
[137.58024597 297.79147339]
[147.27473450 309.23773193]
[157.06352234 320.60345459]
[166.85231018 331.96917725]
[176.64109802 343.33489990]
[186.42988586 354.70062256]
[196.21867371 366.06634521]
[206.00746155 377.43206787]
[221.08230591 374.49194336]
[235.60235596 379.49832153]
[245.66178894 391.10449219]
[248.55464172 406.18850708]
[243.50279236 420.69277954]
[231.86512756 430.71578979]
[216.77214050 433.56134033]
[202.28375244 428.46405029]
[192.29728699 416.79501343]
[189.49903870 401.69320679]
[194.64173889 387.22085571]
[184.85295105 375.85513306]
[175.06416321 364.48941040]
[165.27537537 353.12368774]
[155.48658752 341.75796509]
[145.69779968 330.39224243]
[135.90901184 319.02651978]
[129.14958191 316.00454712]
[126.05423737 307.39102173]
[116.45470428 295.86499023]
[109.02022552 296.85418701]
[111.91873932 311.57147217]
[117.65661621 325.43063354]
[106.60637665 335.57421875]
[93.28785706 328.67370605]
[95.20187378 313.79571533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[46 154]
[47 153]
[49 151]
[50 150]
[51 149]
[52 148]
[53 147]
[54 146]
[55 145]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[97 104]
[98 103]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
[126 143]
[127 142]
[128 141]
[129 140]
[130 138]
[131 137]
[132 136]
[155 183]
[156 182]
[157 180]
[158 179]
[159 178]
[160 177]
[161 176]
[162 175]
[163 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
