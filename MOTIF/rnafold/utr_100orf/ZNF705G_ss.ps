%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGAAACUGAGUUCCUGACAAUGCAUUCACUAAAGAAACUGACUUUUGAAGAUGUAGCUAUUGACUUCACCCAGGAAGAGUGGGCCAUGAUGGACACAUCCAAGAGAAAGCUGUACAGAG\
) } def
/len { sequence length } bind def

/coor [
[84.10713959 282.98254395]
[79.89819336 297.50067139]
[71.59555054 310.13229370]
[59.93748093 319.75418091]
[45.96060944 325.51077271]
[30.90775108 326.89022827]
[16.11739540 323.76983643]
[2.90469122 316.42709351]
[-7.55549765 305.51489258]
[-14.33305740 292.00357056]
[-16.82533264 277.09451294]
[-14.81071186 262.11343384]
[-8.46833324 248.39244080]
[1.63784277 237.15159607]
[14.60918236 229.39042664]
[29.29228210 225.79905701]
[44.38153076 226.69680786]
[49.63165283 212.64561462]
[54.88177109 198.59440613]
[59.95202255 184.47731018]
[64.84158325 170.29661560]
[69.73114014 156.11590576]
[68.42504120 151.41146851]
[70.14450836 145.84027100]
[75.24942780 141.34701538]
[80.85668182 127.43447876]
[71.02867126 116.72660065]
[66.66938782 102.86136627]
[51.81715012 100.76112366]
[36.96491241 98.66088104]
[24.48720360 108.36048889]
[8.81607914 106.31320190]
[-0.75106424 93.73364258]
[1.46179140 78.08503723]
[14.14179802 68.65142822]
[29.76613235 71.02960205]
[39.06515503 83.80863953]
[53.91739273 85.90888214]
[68.76963043 88.00912476]
[73.51725006 79.56031036]
[80.48744202 72.82690430]
[89.09523773 68.37400818]
[98.61821747 66.57534027]
[108.25716400 67.58184814]
[117.20312500 71.30906677]
[127.60461426 60.50124359]
[138.00610352 49.69342041]
[148.40759277 38.88559723]
[158.80908203 28.07777214]
[169.21057129 17.26994896]
[171.22241211 10.77364540]
[175.60278320 6.92562342]
[180.42988586 6.19300413]
[191.36965942 -4.06961536]
[202.30943298 -14.33223534]
[213.24920654 -24.59485435]
[224.18898010 -34.85747528]
[224.85478210 -50.42007065]
[236.09547424 -60.67198563]
[250.92791748 -59.94132614]
[261.86770630 -70.20394897]
[272.80746460 -80.46656799]
[283.74725342 -90.72918701]
[294.68701172 -100.99180603]
[290.41723633 -112.43209839]
[290.30685425 -124.60783386]
[294.34530640 -136.05786133]
[302.02563477 -145.41622925]
[312.40783691 -151.57516479]
[324.23406982 -153.81613159]
[336.08087158 -151.89366150]
[346.53060913 -146.06188965]
[358.22387695 -155.45695496]
[369.91714478 -164.85203552]
[381.61041260 -174.24711609]
[381.76232910 -189.88395691]
[391.96908569 -201.73115540]
[407.41137695 -204.19482422]
[420.79782104 -196.11169434]
[425.80773926 -181.29837036]
[420.07562256 -166.74925232]
[406.30798340 -159.33398438]
[391.00549316 -162.55384827]
[379.31222534 -153.15876770]
[367.61895752 -143.76368713]
[355.92568970 -134.36862183]
[359.55593872 -116.74694824]
[353.81475830 -99.60737610]
[340.17666626 -87.61711884]
[322.27844238 -84.08574677]
[304.94964600 -90.05203247]
[294.00985718 -79.78941345]
[283.07009888 -69.52679443]
[272.13031006 -59.26417542]
[261.19055176 -49.00155258]
[260.97326660 -34.15270233]
[250.02496338 -23.58910561]
[234.45159912 -23.91770172]
[223.51182556 -13.65508080]
[212.57205200 -3.39246154]
[201.63227844 6.87015772]
[190.69250488 17.13277817]
[180.01838684 27.67143631]
[169.61689758 38.47925949]
[159.21540833 49.28708267]
[148.81391907 60.09490967]
[138.41244507 70.90273285]
[128.01095581 81.71055603]
[133.45315552 99.93715668]
[128.07946777 118.18408203]
[113.62728882 130.55181885]
[94.76921844 133.04173279]
[89.16196442 146.95426941]
[83.91184235 161.00546265]
[79.02228546 175.18617249]
[74.13272095 189.36686707]
[74.28357697 198.61938477]
[68.93296814 203.84452820]
[63.68284988 217.89572144]
[58.43273163 231.94692993]
[70.41364288 241.16372681]
[79.14421082 253.50343323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 120]
[18 119]
[19 118]
[20 116]
[21 115]
[22 114]
[25 113]
[26 112]
[28 39]
[29 38]
[30 37]
[45 108]
[46 107]
[47 106]
[48 105]
[49 104]
[50 103]
[53 102]
[54 101]
[55 100]
[56 99]
[57 98]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[72 86]
[73 85]
[74 84]
[75 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
