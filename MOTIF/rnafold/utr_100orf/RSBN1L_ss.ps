%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCCGGCUAGCGGAGGAGAGUAAAUACAACAGGAGCGCAAAAUGGCGGAACCGCCGAGCCCCGUGCACUGUGUCGCUGCCGCGGCCCCCACCGCCACCGUCUCGGAGAAAGAACCGUUUGGCAAGCUGCAACUCUCCUCCC\
) } def
/len { sequence length } bind def

/coor [
[66.48054504 262.85882568]
[64.25202179 265.24761963]
[61.66438675 266.49792480]
[56.26359177 280.49191284]
[64.80403900 293.44723511]
[64.06483459 308.94668579]
[54.33020782 321.03042603]
[39.34332657 325.05200195]
[24.86695480 319.46502686]
[16.46754837 306.41781616]
[17.37485123 290.92730713]
[27.23999023 278.94985962]
[42.26961517 275.09112549]
[47.67041016 261.09713745]
[52.45993042 246.88233948]
[56.62919235 232.47340393]
[60.79845047 218.06448364]
[64.96771240 203.65554810]
[69.13697052 189.24661255]
[73.30622864 174.83769226]
[77.47548676 160.42875671]
[81.64475250 146.01983643]
[85.81401062 131.61090088]
[89.98326874 117.20196533]
[82.08828735 129.95616150]
[68.03806305 135.20889282]
[53.71238708 130.76197815]
[45.10631943 118.47639465]
[45.82136536 103.49344635]
[55.55828476 92.08325958]
[70.24233246 89.02080536]
[83.72937775 95.58856964]
[72.51000977 85.63237762]
[61.29064178 75.67618561]
[50.07127380 65.71999359]
[37.12475967 65.69753265]
[27.97820473 57.11206818]
[27.19049454 44.99473953]
[16.18945503 34.79782104]
[5.18841553 24.60090446]
[-5.81262398 14.40398598]
[-22.40805817 19.99004173]
[-39.46932220 16.46397591]
[-52.35910416 4.87534857]
[-57.61995316 -11.54734802]
[-53.90139389 -28.29572487]
[-65.33382416 -38.00651932]
[-76.76625824 -47.71731567]
[-88.19868469 -57.42810822]
[-99.63111877 -67.13890076]
[-115.85207367 -69.54983521]
[-121.62213135 -84.90036011]
[-111.00554657 -97.39916229]
[-94.92375183 -94.18856049]
[-89.92032623 -78.57133484]
[-78.48789215 -68.86054230]
[-67.05545807 -59.14974594]
[-55.62303162 -49.43894958]
[-44.19060135 -39.72815704]
[-32.74230576 -45.25949478]
[-20.00400543 -46.02738571]
[-7.88539839 -41.88099289]
[1.78313839 -33.40890503]
[7.52699852 -21.85585594]
[8.45218849 -8.93992233]
[4.38429308 3.40294647]
[15.38533306 13.59986401]
[26.38637352 23.79678154]
[37.38741302 33.99369812]
[54.65821838 36.92250824]
[60.02746582 54.50062561]
[71.24683380 64.45681763]
[82.46620178 74.41300964]
[93.68556976 84.36920166]
[108.22236633 88.06806946]
[122.83588409 84.68500519]
[134.53544617 74.03460693]
[148.67984009 78.70207214]
[163.29335022 75.31900787]
[177.90687561 71.93595123]
[192.48287964 68.39478302]
[207.01968384 64.69592285]
[221.55647278 60.99705887]
[234.57385254 53.54401398]
[245.12284851 42.88011932]
[255.67184448 32.21622086]
[266.22082520 21.55232430]
[265.88461304 5.75161266]
[276.87982178 -5.60095692]
[292.68322754 -5.77010584]
[303.91891479 5.34451866]
[303.92095947 21.14880753]
[292.68817139 32.26635742]
[276.88473511 32.10131836]
[266.33575439 42.76521683]
[255.78674316 53.42911530]
[245.23774719 64.09300995]
[247.55537415 71.22593689]
[261.82122803 66.59068298]
[276.08706665 61.95542526]
[290.35299683 57.32038879]
[294.98779297 71.58638000]
[280.72232056 76.22127533]
[266.45648193 80.85652924]
[252.19062805 85.49178314]
[254.50825500 92.62471008]
[269.31066895 95.05143738]
[284.11306763 97.47816467]
[295.04943848 86.47019958]
[310.37280273 84.02605438]
[324.19104004 91.08554840]
[331.19070435 104.93416595]
[328.68032837 120.24682617]
[317.62518311 131.13549805]
[302.27618408 133.41328430]
[288.53536987 126.20429993]
[281.68634033 112.28056335]
[266.88394165 109.85383606]
[252.08152771 107.42710114]
[239.03572083 102.51070404]
[229.93186951 94.32550812]
[225.37503052 84.71242523]
[225.25534058 75.53385162]
[210.71853638 79.23271179]
[196.18174744 82.93157959]
[190.43251038 87.66423035]
[181.28993225 86.54946899]
[166.67642212 89.93252563]
[152.06289673 93.31558990]
[141.40859985 103.72401428]
[126.21894836 99.29852295]
[111.60543060 102.68157959]
[111.77878571 112.06951904]
[104.39219666 121.37123108]
[100.22293854 135.78015137]
[96.05368042 150.18908691]
[91.88442230 164.59802246]
[87.71516418 179.00694275]
[83.54589844 193.41587830]
[79.37664032 207.82481384]
[75.20738220 222.23373413]
[71.03812408 236.64266968]
[66.86886597 251.05160522]
[68.11868286 255.38706970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[32 74]
[33 73]
[34 72]
[35 71]
[38 69]
[39 68]
[40 67]
[41 66]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[75 132]
[76 131]
[78 129]
[79 128]
[80 127]
[81 125]
[82 124]
[83 123]
[84 97]
[85 96]
[86 95]
[87 94]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
