%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGCAUCUUAUCCCCACUUUCUGGCCUCCCCACCAUGAGCCGCCAAUUCACCUACAAGUCGGGAGCUGCUGCCAAGGGGGGCUUCAGCGGCUGCUCCGCUGUGCUCUCAGGGGGCAGCUCAUCCUCCUACCGAG\
) } def
/len { sequence length } bind def

/coor [
[48.92400742 155.70849609]
[45.28841400 167.35240173]
[40.18078232 178.42816162]
[33.68694305 188.75059509]
[25.91590309 198.14717102]
[16.99801254 206.46092224]
[7.08277655 213.55300903]
[-3.66365027 219.30506897]
[-15.06124687 223.62120056]
[-26.91914368 226.42955017]
[-39.03881836 227.68351746]
[-51.21741104 227.36250305]
[-63.25114441 225.47227478]
[-74.93869781 222.04489136]
[-86.08460236 217.13804626]
[-96.50251007 210.83424377]
[-106.01828003 203.23930359]
[-114.47293091 194.48062134]
[-121.72527313 184.70507812]
[-127.65425110 174.07646179]
[-132.16101074 162.77284241]
[-135.17050171 150.98352051]
[-136.63273621 138.90589905]
[-151.62873840 138.55941772]
[-166.62474060 138.21295166]
[-181.62072754 137.86648560]
[-196.62072754 137.86648560]
[-211.61672974 138.21295166]
[-226.61273193 138.55941772]
[-235.32997131 151.39645386]
[-249.93916321 156.62628174]
[-264.82278442 152.23794556]
[-274.25775146 139.91882324]
[-274.61618042 124.40589142]
[-265.76019287 111.66417694]
[-251.09512329 106.59313202]
[-236.25999451 111.14268494]
[-226.95919800 123.56342316]
[-211.96319580 123.21695709]
[-196.96720886 122.87049103]
[-193.02635193 120.03002930]
[-187.23945618 119.69644928]
[-181.27426147 122.87049103]
[-166.27827454 123.21695709]
[-151.28227234 123.56342316]
[-136.28627014 123.90989685]
[-132.66522217 105.97381592]
[-125.63810730 89.07451630]
[-115.46945190 73.85226440]
[-102.54280090 60.88413239]
[-87.34632111 50.66212845]
[-70.45430756 43.57449341]
[-52.50553894 39.89099121]
[-34.17906570 39.75261688]
[-16.16856766 43.16621780]
[0.84394151 50.00416565]
[16.21391296 60.00912094]
[29.35869408 72.80372620]
[39.77961731 87.90485382]
[47.08091354 104.74180603]
[61.68248749 101.30754852]
[76.28405762 97.87329102]
[90.88562775 94.43903351]
[105.05203247 89.50820923]
[118.63033295 83.13406372]
[132.20863342 76.75991821]
[145.78694153 70.38577271]
[159.36523438 64.01162720]
[172.94354248 57.63748169]
[186.52183533 51.26333618]
[200.10014343 44.88919067]
[209.30442810 32.02094650]
[224.11331177 33.61653900]
[237.69161987 27.24239349]
[240.82913208 16.70988846]
[249.10879517 9.82350254]
[259.59774780 8.70464516]
[268.75231934 13.48552513]
[282.61050415 7.74527359]
[296.46868896 2.00502205]
[310.32690430 -3.73522949]
[324.18508911 -9.47548103]
[338.04327393 -15.21573257]
[343.72775269 -26.85894394]
[355.45959473 -31.32936478]
[366.70632935 -26.72510719]
[380.69338989 -32.14373398]
[394.68048096 -37.56235886]
[408.66757202 -42.98098373]
[422.65466309 -48.39960861]
[436.64172363 -53.81823349]
[444.41113281 -67.85446930]
[460.25265503 -70.38938141]
[472.01403809 -59.47840118]
[470.67294312 -43.49149704]
[457.25817871 -34.69245911]
[442.06036377 -39.83115005]
[428.07327271 -34.41252518]
[414.08618164 -28.99389839]
[400.09912109 -23.57527351]
[386.11203003 -18.15664864]
[372.12493896 -12.73802376]
[361.93243408 1.50051212]
[343.78353882 -1.35753942]
[329.92535400 4.38271189]
[316.06713867 10.12296391]
[302.20895386 15.86321545]
[288.35076904 21.60346603]
[274.49255371 27.34371758]
[263.98385620 43.51226807]
[244.06576538 40.82069397]
[230.48745728 47.19483948]
[222.25439453 59.60716629]
[206.47428894 58.46749115]
[192.89598083 64.84163666]
[179.31768799 71.21578217]
[165.73937988 77.58992767]
[152.16108704 83.96407318]
[138.58277893 90.33821869]
[125.00447845 96.71236420]
[111.42617798 103.08650970]
[125.81874847 107.31190491]
[135.76570129 118.53947449]
[138.22572327 133.33638000]
[132.44668579 147.17843628]
[120.19551849 155.83343506]
[105.21804047 156.65509033]
[92.09362793 149.39218140]
[84.83509064 136.26535034]
[85.66172791 121.28814697]
[94.31988525 109.04060364]
[79.71831512 112.47486115]
[65.11674500 115.90911865]
[50.51517487 119.34337616]
[51.55983734 131.50149536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 46]
[24 45]
[25 44]
[26 43]
[27 40]
[28 39]
[29 38]
[60 134]
[61 133]
[62 132]
[63 131]
[64 121]
[65 120]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
[71 114]
[73 112]
[74 111]
[78 109]
[79 108]
[80 107]
[81 106]
[82 105]
[83 104]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
