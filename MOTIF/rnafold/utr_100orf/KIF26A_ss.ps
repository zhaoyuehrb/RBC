%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCGGCCGCGGCGUCCCUCUGUGCGCUGCGCAGCCCGCGGUGGCCGAGGGCGGCCCGGCCCGCGAGCCGCCGCCGCUGCUGGAGGUGUCCCCCCGAA\
) } def
/len { sequence length } bind def

/coor [
[87.35098267 212.50222778]
[71.61545563 211.02960205]
[61.59452820 198.80844116]
[63.23344421 183.08935547]
[75.55986023 173.19819641]
[76.95755005 158.26345825]
[78.35523987 143.32872009]
[79.75292969 128.39398193]
[73.13365173 116.21765137]
[72.36321259 103.74922943]
[76.50814819 93.41192627]
[61.91446686 96.87957001]
[47.32078934 100.34721375]
[32.72711182 103.81485748]
[18.13343430 107.28250122]
[3.53975582 110.75014496]
[-11.05392265 114.21778870]
[-16.90095901 128.59109497]
[-30.09746552 136.75392151]
[-45.56911850 135.56750488]
[-57.36675262 125.48805237]
[-60.95392990 110.39130402]
[-54.95131683 96.08227539]
[-41.66703415 88.06307983]
[-26.20916176 89.41726685]
[-14.52156734 99.62411499]
[0.07211105 96.15647125]
[14.66578865 92.68882751]
[29.25946808 89.22117615]
[43.85314560 85.75353241]
[58.44682312 82.28588867]
[73.04050446 78.81824493]
[84.66336060 69.33619690]
[90.99088287 55.73611069]
[97.31840515 42.13602066]
[103.64593506 28.53593063]
[109.97345734 14.93584251]
[106.28296661 2.45637369]
[111.97080231 -8.79854298]
[123.44915771 -12.95369530]
[130.19657898 -26.35042000]
[136.94400024 -39.74714661]
[143.69143677 -53.14387131]
[150.43885803 -66.54059601]
[157.18627930 -79.93732452]
[163.93371582 -93.33404541]
[170.68113708 -106.73077393]
[177.21940613 -120.23081207]
[183.54692078 -133.83090210]
[182.35311890 -149.60700989]
[194.73713684 -157.88261414]
[201.06465149 -171.48269653]
[207.39218140 -185.08277893]
[213.71971130 -198.68287659]
[208.06672668 -213.44157410]
[214.58166504 -227.84057617]
[229.39930725 -233.33720398]
[243.72862244 -226.67039490]
[249.06828308 -211.79547119]
[242.25035095 -197.53744507]
[227.31979370 -192.35534668]
[220.99227905 -178.75526428]
[214.66474915 -165.15516663]
[208.33721924 -151.55508423]
[209.98361206 -136.75175476]
[197.14701843 -127.50337219]
[190.81948853 -113.90328979]
[190.85253906 -106.37836456]
[184.07786560 -99.98334503]
[177.33042908 -86.58662415]
[170.58300781 -73.18989563]
[163.83558655 -59.79317093]
[157.08815002 -46.39644623]
[150.34072876 -32.99972153]
[143.59330750 -19.60299492]
[136.84588623 -6.20626974]
[138.86285400 11.14980412]
[123.57354736 21.26336861]
[117.24602509 34.86345673]
[110.91849518 48.46354675]
[104.59097290 62.06363297]
[98.26345062 75.66372681]
[122.90369415 81.19299316]
[133.63745117 109.20236969]
[144.16125488 119.89112854]
[154.68505859 130.57989502]
[170.62744141 134.42343140]
[175.00987244 150.22615051]
[163.32411194 161.73158264]
[147.59144592 157.10391235]
[143.99630737 141.10368347]
[133.47250366 130.41493225]
[122.94869995 119.72617340]
[115.88343811 122.24254608]
[101.75292969 127.27529907]
[94.68766785 129.79167175]
[93.28997803 144.72640991]
[91.89228821 159.66114807]
[90.49460602 174.59588623]
[100.77169037 186.60243225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[7 97]
[8 96]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[33 82]
[34 81]
[35 80]
[36 79]
[37 78]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 67]
[49 66]
[51 64]
[52 63]
[53 62]
[54 61]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
