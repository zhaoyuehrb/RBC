%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCAUGAGGACUUUCCUCUUUCUCUUUGCCGUGCUCUUCUUUCUGACCCCAGCCAAGAAUGCAUUUUUUGAUGAGAAAUGCAACAAACUUAAAGGGACAUGCA\
) } def
/len { sequence length } bind def

/coor [
[44.55460739 278.00781250]
[39.46144485 282.39050293]
[33.59984970 285.65188599]
[27.21235275 287.66232300]
[20.56217957 288.34371948]
[13.92241764 287.67279053]
[7.56479454 285.68157959]
[1.74855900 282.45608521]
[-9.31894016 292.58084106]
[-20.38644028 302.70559692]
[-31.45393944 312.83032227]
[-42.52143860 322.95507812]
[-50.12689972 338.10742188]
[-66.79248047 334.99374390]
[-68.41400146 318.11752319]
[-52.64618301 311.88757324]
[-41.57868195 301.76281738]
[-30.51118469 291.63809204]
[-19.44368553 281.51333618]
[-8.37618637 271.38858032]
[-11.67238331 246.63633728]
[3.46061802 226.50564575]
[28.57649994 222.73069763]
[35.42593765 209.38583374]
[42.27537537 196.04098511]
[49.12481308 182.69612122]
[55.97425461 169.35127258]
[62.82369232 156.00640869]
[69.67313385 142.66156006]
[76.52256775 129.31669617]
[68.96986389 122.05534363]
[63.63140488 112.87647247]
[60.98485184 102.44735718]
[61.30884933 91.55121613]
[64.65589142 81.02847290]
[70.84235382 71.71190643]
[79.45700073 64.36080170]
[89.88769531 59.59933853]
[101.36461639 57.86406326]
[98.71126556 43.10060501]
[96.05790710 28.33714867]
[93.40455627 13.57368946]
[90.75119781 -1.18976951]
[78.54356384 -14.87542152]
[84.93572998 -31.14455605]
[81.84605408 -45.82290268]
[78.75637054 -60.50125122]
[67.41044617 -72.34194183]
[72.25099945 -88.01041412]
[88.29849243 -91.38829041]
[99.04463196 -79.00069427]
[93.43471527 -63.59093094]
[96.52439880 -48.91258240]
[99.61407471 -34.23423767]
[109.63804626 -27.28483963]
[112.25959778 -14.96028805]
[105.51465607 -3.84312367]
[108.16801453 10.92033482]
[110.82136536 25.68379402]
[113.47472382 40.44725418]
[116.12807465 55.21071243]
[129.26409912 62.45259476]
[143.16444397 56.81518173]
[157.06478882 51.17776489]
[170.96513367 45.54035187]
[184.86547852 39.90293884]
[198.76582336 34.26552582]
[212.66616821 28.62811089]
[226.56651306 22.99069786]
[240.46685791 17.35328484]
[254.36720276 11.71587086]
[266.77276611 0.16000755]
[281.31124878 8.88179016]
[276.95495605 25.26651192]
[260.00460815 25.61621475]
[246.10426331 31.25362778]
[232.20391846 36.89104080]
[218.30357361 42.52845764]
[204.40322876 48.16587067]
[190.50288391 53.80328369]
[176.60253906 59.44069672]
[162.70219421 65.07810974]
[148.80186462 70.71552277]
[134.90151978 76.35293579]
[139.84011841 88.08693695]
[141.00396729 100.58936310]
[138.38955688 112.69223022]
[132.34150696 123.29629517]
[123.51123810 131.47082520]
[112.78826141 136.53509521]
[101.21120453 138.11441040]
[89.86742401 136.16613770]
[83.01799011 149.51100159]
[76.16854858 162.85585022]
[69.31910706 176.20071411]
[62.46967316 189.54556274]
[55.62023163 202.89042664]
[48.77079391 216.23527527]
[41.92135620 229.58013916]
[46.62465668 234.50590515]
[50.23329926 240.26840210]
[52.60325623 246.62898254]
[53.64167786 253.32528687]
[53.31054688 260.08209229]
[51.62802887 266.62265015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[23 99]
[24 98]
[25 97]
[26 96]
[27 95]
[28 94]
[29 93]
[30 92]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[45 54]
[46 53]
[47 52]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
