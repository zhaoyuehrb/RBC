%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAAGCUACUGGUUGGUUCCCUGAGAGGUCCCAGAACUCUGCAAAGUGAGUCCAGCGCUGAGAUUUUUCUUGCAGAUCCAUCAGGAUGAGCAUCCAGGCCCCACCGAGACUACUGGAGCUGGCGGGGCAGAGCCUGCUGAGAGACCAGGCCUUGUCCAUCUCUGCCAUGGAGGAGCUGCCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[63.85850525 235.13407898]
[63.60786057 220.13616943]
[63.35721207 205.13825989]
[63.10656357 190.14035034]
[54.62594604 181.49700928]
[54.30594635 168.99101257]
[62.86439133 159.32397461]
[62.86439133 144.32397461]
[53.16506577 112.87331390]
[62.89138412 87.00126648]
[82.31806946 75.68195343]
[67.85102844 71.71902466]
[53.38399506 67.75608826]
[38.91695404 63.79315948]
[23.56295586 67.60960388]
[13.33205318 56.78473282]
[-1.13498425 52.82180023]
[-16.48898506 56.63824463]
[-26.71988678 45.81336975]
[-41.18692398 41.85044098]
[-58.87562561 46.93501282]
[-70.73005676 34.00666428]
[-85.26129913 30.28602600]
[-99.79253387 26.56539154]
[-114.32377625 22.84475517]
[-128.85501099 19.12411880]
[-140.34280396 25.01727104]
[-152.37860107 21.60525322]
[-158.64828491 11.24574375]
[-173.11532593 7.28281307]
[-165.29704285 20.08416367]
[-165.25064087 35.08409119]
[-172.98956299 47.93356705]
[-186.27001953 54.90705490]
[-201.24151611 53.98268890]
[-213.56326294 45.42847061]
[-219.66271973 31.72458267]
[-217.77145386 16.84428978]
[-208.43780518 5.10193396]
[-194.37037659 -0.09774639]
[-208.18013000 -5.95358562]
[-221.98986816 -11.80942440]
[-235.79962158 -17.66526413]
[-249.60937500 -23.52110291]
[-263.41912842 -29.37694168]
[-277.22885132 -35.23278046]
[-290.49761963 -27.40679550]
[-305.65319824 -28.87729645]
[-316.90374756 -38.87176132]
[-320.07388306 -53.40063477]
[-333.88363647 -59.25647354]
[-347.69335938 -65.11231232]
[-361.50311279 -70.96815491]
[-375.31286621 -76.82398987]
[-389.17105103 -82.56423950]
[-403.07672119 -88.18850708]
[-419.23318481 -85.37760925]
[-429.53662109 -98.13579559]
[-423.38772583 -113.33853912]
[-407.11199951 -115.34655762]
[-397.45245361 -102.09417725]
[-383.54678345 -96.46990967]
[-376.15234375 -96.87737274]
[-369.45703125 -90.63373566]
[-355.64727783 -84.77790070]
[-341.83752441 -78.92205811]
[-328.02777100 -73.06622314]
[-314.21804810 -67.21038055]
[-301.57046509 -75.03197479]
[-286.56494141 -73.89289093]
[-274.97186279 -64.02099609]
[-271.37301636 -49.04253006]
[-257.56329346 -43.18669128]
[-243.75352478 -37.33085251]
[-229.94378662 -31.47501183]
[-216.13403320 -25.61917305]
[-202.32427979 -19.76333427]
[-188.51454163 -13.90749454]
[-177.92605591 -15.38853264]
[-169.15238953 -7.18422461]
[-154.68534851 -3.22129369]
[-137.98454285 -8.58346558]
[-125.13437653 4.59288073]
[-110.60313416 8.31351662]
[-96.07189941 12.03415298]
[-81.54066467 15.75478935]
[-67.00942230 19.47542572]
[-56.43264008 13.57966423]
[-44.28644943 16.57505798]
[-37.22399139 27.38340187]
[-22.75695610 31.34633446]
[-8.43773460 27.24643326]
[2.82794690 38.35476303]
[17.29498482 42.31769180]
[31.61420441 38.21779251]
[42.87988663 49.32612228]
[57.34692383 53.28905487]
[71.81396484 57.25198364]
[86.28099823 61.21491623]
[100.60753632 56.77078247]
[110.29195404 45.31599808]
[119.97637177 33.86121750]
[129.66079712 22.40643311]
[139.34521484 10.95164967]
[142.34637451 -4.58229876]
[156.47206116 -9.30609131]
[166.15647888 -20.76087379]
[169.31623840 -29.35309601]
[176.09970093 -32.32439804]
[185.97416687 -43.61575699]
[189.27706909 -52.15398026]
[196.10920715 -55.01151657]
[206.17098999 -66.13629913]
[206.80635071 -82.16676331]
[219.82040405 -91.54833984]
[235.22987366 -87.08428192]
[241.21394348 -72.19903564]
[233.18212891 -58.31128693]
[217.29576111 -56.07452774]
[207.23399353 -44.94974518]
[197.26551819 -33.74128342]
[187.39105225 -22.44992447]
[177.61126709 -11.07645607]
[167.92684937 0.37832657]
[165.61837769 15.09295273]
[150.79998779 20.63606834]
[141.11557007 32.09085083]
[131.43115234 43.54563522]
[121.74673462 55.00041580]
[112.06231689 66.45520020]
[114.99024200 73.36007690]
[129.87779236 75.19333649]
[120.84607697 87.16982269]
[123.77399445 94.07469940]
[138.74050903 95.07658386]
[153.70700073 96.07847595]
[168.67350769 97.08036804]
[183.64001465 98.08225250]
[192.74610901 85.62903595]
[207.14756775 80.09716797]
[222.24893188 83.25186157]
[233.23143005 94.08644867]
[236.59057617 109.14366150]
[231.25447083 123.61879730]
[218.92585754 132.89289856]
[203.53874207 134.00662231]
[190.00311279 126.60458374]
[182.63812256 113.04875946]
[167.67161560 112.04686737]
[152.70510864 111.04497528]
[137.73861694 110.04309082]
[122.77210999 109.04119873]
[116.45808411 122.64756012]
[126.88597107 133.42991638]
[137.31385803 144.21228027]
[152.46939087 148.75325012]
[155.75553894 163.28082275]
[166.18342590 174.06318665]
[176.61131287 184.84553528]
[187.03919983 195.62789917]
[197.46708679 206.41024780]
[213.05195618 205.12744141]
[225.78530884 214.20465088]
[229.65483093 229.35591125]
[222.83345032 243.42726135]
[208.54202271 249.77464294]
[193.52851868 245.40100098]
[184.88186646 232.37144470]
[186.68472290 216.83813477]
[176.25683594 206.05578613]
[165.82894897 195.27342224]
[155.40106201 184.49107361]
[144.97319031 173.70870972]
[130.56352234 169.93896484]
[126.53150177 154.64016724]
[116.10361481 143.85780334]
[105.67573547 133.07545471]
[98.72290039 135.88758850]
[84.81723022 141.51184082]
[77.86439514 144.32397461]
[77.86439514 159.32397461]
[87.44158173 175.04086304]
[78.10446930 189.88970947]
[78.35511780 204.88761902]
[78.60576630 219.88551331]
[78.85641479 234.88342285]
[81.36874390 254.10159302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 186]
[2 185]
[3 184]
[4 183]
[7 181]
[8 180]
[11 99]
[12 98]
[13 97]
[14 96]
[16 94]
[17 93]
[19 91]
[20 90]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[29 81]
[30 80]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 62]
[56 61]
[100 130]
[101 129]
[102 128]
[103 127]
[104 126]
[106 124]
[107 123]
[109 122]
[110 121]
[112 120]
[113 119]
[134 152]
[135 151]
[136 150]
[137 149]
[138 148]
[153 177]
[154 176]
[155 175]
[157 173]
[158 172]
[159 171]
[160 170]
[161 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
