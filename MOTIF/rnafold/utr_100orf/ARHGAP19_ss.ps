%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGGACGUAAGGUGGGGCGGUGAAAGAAGUUUGCUGACGAAGAUGGCGACUGAGGCACAGAGUGAAGGGGAGGUGCCAGCCCGCGAAUCCGGCCGGAGUGAUGCCAUCUGCAGUUUUGUGAUCUGCAAUGAUUCUUCCCUUC\
) } def
/len { sequence length } bind def

/coor [
[99.03832245 298.65426636]
[98.39737701 283.66796875]
[97.75643158 268.68167114]
[97.11548615 253.69535828]
[88.84142303 241.31033325]
[95.98197937 227.19215393]
[95.34103394 212.20585632]
[94.70008087 197.21954346]
[94.05913544 182.23324585]
[93.25809479 167.25465393]
[92.29704285 152.28547668]
[91.33598328 137.31629944]
[85.27779388 132.89494324]
[78.94458771 146.49238586]
[77.63297272 161.43493652]
[65.58166504 170.36611938]
[50.90400696 167.27316284]
[43.48148346 154.23835754]
[48.31118011 140.03717041]
[62.14293289 134.23033142]
[73.16140747 124.05225372]
[67.10321808 119.63090515]
[52.55396652 123.28046417]
[38.00471497 126.93003082]
[23.45546341 130.57958984]
[8.90621281 134.22915649]
[-5.64303780 137.87870789]
[-20.19228935 141.52827454]
[-29.63584518 154.49742126]
[-45.66916275 155.05630493]
[-55.99284744 142.77619934]
[-52.68745422 127.07734680]
[-38.28860092 120.00256348]
[-23.84185028 126.97901917]
[-9.29259872 123.32946014]
[5.25665188 119.67990112]
[19.80590248 116.03034210]
[34.35515213 112.38077545]
[48.90440369 108.73121643]
[63.45365524 105.08165741]
[66.17501068 88.80712891]
[75.50785828 75.90190125]
[89.09642792 68.75755310]
[103.87075043 68.41500092]
[116.73479462 74.43871307]
[120.22868347 59.85129547]
[123.72257233 45.26387787]
[127.21646118 30.67645836]
[130.71034241 16.08904076]
[134.20423889 1.50162315]
[137.69812012 -13.08579445]
[141.19200134 -27.67321205]
[144.37336731 -42.33196259]
[147.24075317 -57.05535126]
[150.10812378 -71.77873993]
[141.54266357 -84.78914642]
[144.66033936 -99.67990875]
[157.11656189 -107.76557922]
[159.98394775 -122.48896790]
[162.85131836 -137.21235657]
[154.06652832 -147.47807312]
[152.83900452 -160.73773193]
[159.39517212 -172.10372925]
[171.13357544 -177.51663208]
[174.31492615 -192.17536926]
[162.36215210 -201.60366821]
[155.71534729 -215.23109436]
[155.64469910 -230.33126831]
[162.11068726 -243.90890503]
[173.78244019 -253.29397583]
[188.31137085 -256.66674805]
[191.49272156 -271.32550049]
[194.67408752 -285.98425293]
[183.25044250 -296.25051880]
[178.50567627 -310.85812378]
[181.71609497 -325.87774658]
[192.01809692 -337.26916504]
[206.64053345 -341.96810913]
[221.65000916 -338.71063232]
[233.00906372 -328.37295532]
[237.66217041 -313.73587036]
[234.35765076 -298.73669434]
[223.98443604 -287.41009521]
[209.33283997 -282.80288696]
[206.15147400 -268.14413452]
[202.97010803 -253.48539734]
[214.79383850 -244.39335632]
[221.52513123 -231.01429749]
[221.78105164 -215.97782898]
[215.45727539 -202.26542664]
[203.75944519 -192.61929321]
[188.97367859 -188.99401855]
[185.79231262 -174.33526611]
[195.48638916 -160.63166809]
[192.23979187 -143.81961060]
[177.57470703 -134.34497070]
[174.70733643 -119.62158966]
[171.83995056 -104.89820099]
[180.35154724 -92.72904205]
[177.65335083 -77.75659180]
[164.83151245 -68.91135406]
[161.96412659 -54.18796921]
[159.09675598 -39.46458435]
[161.01774597 -35.02159500]
[160.11755371 -29.31970978]
[155.77941895 -24.17932510]
[152.28553772 -9.59190750]
[148.79165649 4.99551010]
[145.29776001 19.58292770]
[141.80387878 34.17034531]
[138.30998230 48.75776291]
[134.81610107 63.34518051]
[131.32221985 77.93260193]
[137.39396667 91.64878845]
[150.54165649 98.86947632]
[163.68934631 106.09015656]
[176.83702087 113.31084442]
[190.34585571 105.86000061]
[205.73687744 106.91816711]
[218.09889221 116.14768982]
[223.48721313 130.60346985]
[220.18244934 145.67271423]
[209.23915100 156.54687500]
[194.14926147 159.75605774]
[179.72792053 154.27622986]
[170.57693481 141.85595703]
[169.61634827 126.45853424]
[156.46865845 119.23784637]
[143.32096863 112.01715851]
[130.17327881 104.79647827]
[124.01448059 123.67874908]
[106.30516815 136.35523987]
[107.26622009 151.32441711]
[108.22727203 166.29359436]
[111.92239380 174.72656250]
[109.04544067 181.59230042]
[109.68638611 196.57859802]
[110.32733154 211.56491089]
[110.96827698 226.55120850]
[119.28818512 240.00816345]
[112.10178375 253.05441284]
[112.74273682 268.04071045]
[113.38368225 283.02700806]
[114.02462769 298.01330566]
[120.74224854 313.57962036]
[107.64389801 324.34390259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 141]
[6 139]
[7 138]
[8 137]
[9 136]
[10 134]
[11 133]
[12 132]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[45 113]
[46 112]
[47 111]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[53 103]
[54 102]
[55 101]
[58 98]
[59 97]
[60 96]
[64 93]
[65 92]
[71 86]
[72 85]
[73 84]
[114 130]
[115 129]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
