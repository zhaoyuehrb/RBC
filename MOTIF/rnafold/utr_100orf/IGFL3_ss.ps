%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUCCUAGAGCAUCUUUGGAAGCAUGAGGCCACGAUGCUGCAUCUUGGCUCUUGUCUGCUGGAUAACAGUCUUCCUCCUCCAGUGUUCAAAAGGAACUACAGACGCUCCUGUUGGCUCAGGAC\
) } def
/len { sequence length } bind def

/coor [
[80.39555359 382.21673584]
[64.63545990 381.03567505]
[54.38998795 369.00213623]
[55.73760605 353.25540161]
[67.87878418 343.13772583]
[68.99974060 328.17968750]
[70.12068939 313.22161865]
[71.24163818 298.26354980]
[68.57489014 291.28186035]
[72.58157349 282.94808960]
[74.07508850 268.02261353]
[75.56861115 253.09715271]
[77.06212616 238.17169189]
[64.83721161 231.49314880]
[56.06928635 220.61256409]
[52.11777496 207.16392517]
[53.61557388 193.18331909]
[60.36793518 180.80067444]
[71.37704468 171.91520691]
[84.98937225 167.90422058]
[86.85453033 153.02062988]
[88.71968079 138.13703918]
[86.40425110 131.03109741]
[90.82136536 122.90738678]
[93.05699921 108.07492065]
[89.54590607 106.77877045]
[86.32585144 104.07930756]
[83.92038727 100.07336426]
[70.74706268 92.89955139]
[57.57373810 85.72574615]
[44.31200409 78.71671295]
[30.96392822 71.87355042]
[17.61585045 65.03039551]
[4.26777411 58.18723297]
[-11.54244900 58.77665329]
[-19.33825111 46.08513260]
[-32.68632889 39.24197006]
[-46.03440475 32.39881134]
[-59.38248062 25.55565071]
[-76.23568726 23.71013832]
[-79.12772369 7.00467634]
[-63.87571335 -0.39887393]
[-52.53932190 12.20757389]
[-39.19124603 19.05073357]
[-25.84316826 25.89389420]
[-12.49509048 32.73705292]
[2.36038852 31.65816498]
[11.11093426 44.83915710]
[24.45901108 51.68231583]
[37.80708694 58.52547455]
[51.15516663 65.36863708]
[58.62448502 65.62321472]
[64.74754333 72.55242157]
[77.92086792 79.72622681]
[91.09419250 86.90003967]
[106.03711700 85.59270477]
[117.76458740 76.24035645]
[129.49206543 66.88800812]
[141.21952820 57.53565979]
[152.94700623 48.18331528]
[162.58882141 36.69264603]
[169.76261902 23.51932335]
[176.93643188 10.34600067]
[184.11024475 -2.82732320]
[191.28405762 -16.00064659]
[181.45454407 -27.56547165]
[176.47018433 -41.90146255]
[177.00508118 -57.06979370]
[182.98689270 -71.01908112]
[193.60661316 -81.86278534]
[207.42802429 -88.13439178]
[222.58187866 -88.98571777]
[237.01876831 -84.30162048]
[248.78620911 -74.71559906]
[256.29275513 -61.52407455]
[258.52319336 -46.51109695]
[255.17588806 -31.70704269]
[246.70353699 -19.11404419]
[234.25193787 -10.43519688]
[219.50509644 -6.84424543]
[204.45738220 -8.82683754]
[197.28356934 4.34648657]
[190.10975647 17.51980972]
[182.93594360 30.69313431]
[175.76214600 43.86645889]
[186.63111877 45.86353683]
[193.47016907 53.24214172]
[208.42822266 52.12118912]
[223.38627625 51.00023651]
[238.34434509 49.87928772]
[249.85676575 38.70594788]
[265.75140381 40.88311005]
[273.83523560 54.74063873]
[267.90704346 69.64822388]
[252.51443481 74.17004395]
[239.46528625 64.83734131]
[224.50723267 65.95829773]
[209.54917908 67.07924652]
[194.59112549 68.20019531]
[183.98223877 77.76422882]
[169.04550171 74.66738892]
[162.29934692 59.91078568]
[150.57188416 69.26313019]
[138.84440613 78.61547852]
[127.11693573 87.96782684]
[115.38945770 97.32017517]
[107.88945770 110.31055450]
[105.65382385 125.14302063]
[103.60327148 140.00219727]
[101.73811340 154.88578796]
[99.87296295 169.76937866]
[113.57517242 178.44699097]
[122.11352539 192.16819763]
[123.83362579 208.17901611]
[118.44365692 223.29158020]
[107.06243896 234.51892090]
[91.98758698 239.66520691]
[90.49407196 254.59066772]
[89.00054932 269.51614380]
[87.50703430 284.44158936]
[86.19969940 299.38452148]
[85.07875061 314.34255981]
[83.95779419 329.30062866]
[82.83684540 344.25869751]
[93.33445740 356.07290649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 124]
[6 123]
[7 122]
[8 121]
[10 120]
[11 119]
[12 118]
[13 117]
[20 111]
[21 110]
[22 109]
[24 108]
[25 107]
[28 55]
[29 54]
[30 53]
[31 51]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[38 44]
[39 43]
[56 106]
[57 105]
[58 104]
[59 103]
[60 102]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
