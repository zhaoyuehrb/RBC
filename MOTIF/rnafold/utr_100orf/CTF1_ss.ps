%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGUGAAGGGAGCCGGGAUCAGCCAGGGGCCAGCAUGAGCCGGAGGGAGGGAAGUCUGGAAGACCCCCAGACUGAUUCCUCAGUCUCACUUCUUCCCCACUUGGAGGCCAAGAUCCGUCAGACACACAGCCUUG\
) } def
/len { sequence length } bind def

/coor [
[101.16207886 452.20199585]
[100.82063293 437.20587158]
[100.47917938 422.20974731]
[100.13773346 407.21365356]
[99.79628754 392.21752930]
[99.28417206 377.22628784]
[98.60144806 362.24182129]
[97.91873169 347.25735474]
[84.54781342 344.16876221]
[72.43253326 337.69628906]
[62.41331863 328.28137207]
[55.18717957 316.56982422]
[51.25918961 303.36749268]
[50.90721893 289.58489990]
[54.16226959 276.17437744]
[60.80587387 264.06430054]
[70.38475037 254.09481812]
[82.24172211 246.95954895]
[95.56080627 243.15730286]
[95.56080627 228.15730286]
[95.56080627 213.15730286]
[95.56080627 198.15730286]
[95.56080627 183.15730286]
[84.64649200 167.25708008]
[94.76520538 149.88800049]
[94.08248901 134.90354919]
[93.39977264 119.91909790]
[79.15167236 102.38337708]
[89.07451630 82.08444214]
[86.35777283 67.33251953]
[83.64102936 52.58059311]
[80.92428589 37.82866669]
[66.09860229 34.59219360]
[53.67500305 25.94943428]
[45.52887344 13.24297142]
[42.87533188 -1.57412410]
[46.08808899 -16.23847008]
[54.64714813 -28.52211380]
[67.22269440 -36.57102203]
[64.50595093 -51.32294846]
[61.78920746 -66.07487488]
[59.07246399 -80.82679749]
[45.23316193 -87.59288025]
[38.11478806 -101.05327606]
[40.26192856 -115.94802856]
[50.64371490 -126.59493256]
[47.92697144 -141.34686279]
[45.21022797 -156.09878540]
[42.49348831 -170.85070801]
[39.77674484 -185.60263062]
[37.06000137 -200.35455322]
[26.05448151 -205.11497498]
[18.81970024 -214.52600098]
[17.08423996 -226.14724731]
[21.16934204 -237.03584290]
[29.93710709 -244.49168396]
[27.89460754 -259.35198975]
[25.85210609 -274.21224976]
[23.80960655 -289.07254028]
[21.76710701 -303.93283081]
[19.72460747 -318.79312134]
[17.68210793 -333.65341187]
[4.35044098 -341.82659912]
[-0.55954331 -356.67333984]
[5.27049971 -371.18350220]
[19.08780289 -378.50579834]
[34.36825562 -375.18289185]
[43.89690018 -362.78375244]
[43.17459488 -347.16284180]
[32.54239655 -335.69592285]
[34.58489609 -320.83563232]
[36.62739563 -305.97534180]
[38.66989517 -291.11505127]
[40.71239471 -276.25476074]
[42.75489426 -261.39447021]
[44.79739380 -246.53417969]
[60.00323105 -236.45425415]
[63.15225983 -218.16288757]
[51.81192398 -203.07130432]
[54.52866745 -188.31938171]
[57.24541092 -173.56744385]
[59.96215439 -158.81552124]
[62.67889786 -144.06359863]
[65.39564514 -129.31167603]
[78.88919067 -123.06170654]
[86.20159912 -109.90903473]
[84.34539032 -94.79586792]
[73.82438660 -83.54354095]
[76.54113007 -68.79161835]
[79.25787354 -54.03969193]
[81.97461700 -39.28776550]
[96.59249115 -36.24684906]
[108.96596527 -27.81818199]
[117.19200134 -15.26042557]
[119.99101257 -0.47012064]
[116.90589142 14.30471230]
[108.37627411 26.80625534]
[95.67620850 35.11192322]
[98.39295197 49.86384964]
[101.10969543 64.61577606]
[103.82643890 79.36769867]
[110.09297943 81.60257721]
[115.34492493 85.68683624]
[119.05434418 91.20992279]
[120.84832764 97.61662292]
[120.54655457 104.26290894]
[118.17935944 110.48066711]
[113.98469543 115.64486694]
[108.38422394 119.23637390]
[109.06694031 134.22082520]
[109.74966431 149.20529175]
[118.27178192 156.13710022]
[121.45957947 166.41888428]
[118.47804260 176.53250122]
[110.56080627 183.15730286]
[110.56080627 198.15730286]
[110.56080627 213.15730286]
[110.56080627 228.15730286]
[110.56080627 243.15730286]
[126.19450378 248.03480530]
[139.55993652 257.46673584]
[149.37214661 270.53237915]
[154.69206238 285.96234131]
[155.01635742 302.26190186]
[150.32507324 317.85580444]
[141.08242798 331.24044800]
[128.19091797 341.12887573]
[112.90319061 346.57464600]
[113.58590698 361.55911255]
[114.26862335 376.54354858]
[117.81091309 385.05877686]
[114.79239655 391.87606812]
[115.13385010 406.87219238]
[115.47529602 421.86831665]
[115.81674194 436.86441040]
[116.15818787 451.86053467]
[118.78683472 471.06314087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[6 130]
[7 129]
[8 128]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[25 111]
[26 110]
[27 109]
[29 101]
[30 100]
[31 99]
[32 98]
[39 91]
[40 90]
[41 89]
[42 88]
[46 84]
[47 83]
[48 82]
[49 81]
[50 80]
[51 79]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
