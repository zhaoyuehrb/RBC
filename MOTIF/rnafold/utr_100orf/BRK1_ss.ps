%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCUGUAGGGUCGGGGCGCCUGCGCAGUCGCUCUUCCUCAGGCGGCGGCCAUGGCGGGACAGGAGGAUCCGGUGCAGCGGGAGAUUCACCAGGACUGGGCUAACCGGGAGUACAUUGAGAUAAUCACCAGCAGCAUCAAGAAAAUCGCAG\
) } def
/len { sequence length } bind def

/coor [
[48.26433945 160.58451843]
[41.06385803 162.27111816]
[33.79749298 161.33102417]
[27.38428879 157.93157959]
[14.60268784 165.78210449]
[1.82108641 173.63261414]
[-10.96051502 181.48313904]
[-23.74211693 189.33366394]
[-29.46006203 196.53598022]
[-36.86548615 197.21087646]
[-49.80456924 204.79904175]
[-62.74364853 212.38720703]
[-75.68273163 219.97535706]
[-79.32868958 225.60720825]
[-84.50656128 228.12837219]
[-89.30799103 227.59674072]
[-102.54581451 234.65081787]
[-115.78363800 241.70491028]
[-129.02145386 248.75898743]
[-142.25927734 255.81306458]
[-155.49710083 262.86712646]
[-164.03741455 276.18530273]
[-178.90814209 275.34225464]
[-192.14596558 282.39633179]
[-200.35972595 296.59020996]
[-216.75636292 296.30325317]
[-224.46842957 281.83065796]
[-215.56240845 268.06057739]
[-199.20005798 269.15850830]
[-185.96223450 262.10443115]
[-178.36877441 249.29081726]
[-162.55117798 249.62931824]
[-149.31335449 242.57524109]
[-136.07553101 235.52116394]
[-122.83771515 228.46708679]
[-109.59989166 221.41299438]
[-96.36206818 214.35891724]
[-83.27088928 207.03628540]
[-70.33181000 199.44812012]
[-57.39272690 191.85995483]
[-44.45364761 184.27180481]
[-31.59263611 176.55206299]
[-18.81103516 168.70153809]
[-6.02943325 160.85101318]
[6.75216818 153.00050354]
[19.53376961 145.14997864]
[27.85719872 124.30178070]
[51.02165604 123.43566132]
[62.93746567 114.32448578]
[74.85327148 105.21331024]
[74.85327148 90.21331024]
[62.93746567 81.10212708]
[46.61413956 79.52697754]
[40.06376266 64.49286652]
[50.02479935 51.46559525]
[66.25019073 53.84650803]
[72.04864502 69.18632507]
[83.96444702 78.29750061]
[89.82818604 73.62133026]
[107.41939545 59.59280777]
[101.18816376 45.94832611]
[94.95693970 32.30384827]
[79.72275543 29.35440445]
[69.15631104 17.99087143]
[67.32061768 2.58276129]
[74.92154694 -10.94519424]
[89.03636932 -17.39122009]
[104.23766327 -14.27668858]
[114.68021393 -2.79919910]
[116.34864807 12.62791824]
[108.60142517 26.07262230]
[114.83264923 39.71710205]
[121.06387329 53.36158371]
[134.89260864 59.17243576]
[148.99958801 54.07409668]
[163.10656738 48.97575760]
[177.21356201 43.87741852]
[191.32054138 38.77907562]
[201.66929626 26.81188202]
[216.26867676 29.76268387]
[230.37565613 24.66434288]
[244.42991638 19.42238045]
[258.42996216 14.03734016]
[272.37435913 8.50978184]
[286.26162720 2.84028172]
[292.87554932 -14.86246777]
[310.01138306 -22.04481506]
[326.69061279 -14.60713196]
[340.33508301 -20.83835793]
[353.97958374 -27.06958199]
[367.62405396 -33.30080795]
[366.75134277 -50.09712219]
[372.36026001 -65.91445160]
[383.57055664 -78.35430145]
[398.65490723 -85.54170227]
[415.30496216 -86.40781403]
[430.98461914 -80.84876251]
[443.31637573 -69.73720551]
[456.69534302 -76.51978302]
[470.07427979 -83.30236053]
[483.45324707 -90.08493805]
[489.78845215 -104.82416534]
[505.29940796 -108.92171478]
[518.08746338 -99.23430634]
[518.34265137 -83.19328308]
[505.86929321 -73.10395050]
[490.23583984 -76.70597839]
[476.85687256 -69.92340088]
[463.47790527 -63.14081955]
[450.09893799 -56.35824203]
[451.95733643 -43.16716766]
[449.64025879 -30.02569008]
[443.36102295 -18.22530746]
[433.72308350 -8.93015862]
[421.66204834 -3.06218266]
[408.35479736 -1.20968044]
[395.10464478 -3.56836605]
[383.21377563 -9.92079449]
[373.85528564 -19.65632820]
[360.21081543 -13.42510223]
[346.56631470 -7.19387722]
[332.92184448 -0.96265209]
[331.32730103 10.40526485]
[324.34909058 19.67092133]
[313.64398193 24.44082069]
[301.84875488 23.41245651]
[291.93115234 16.72756958]
[278.04385376 22.39706993]
[273.00958252 27.86989975]
[263.81500244 28.03738785]
[249.81495667 33.42242813]
[244.67008972 38.79142761]
[235.47399902 38.77132416]
[221.36701965 43.86966324]
[212.02728271 55.47219086]
[196.41886902 52.88605881]
[182.31188965 57.98439789]
[168.20491028 63.08273697]
[154.09793091 68.18107605]
[139.99095154 73.27941895]
[143.77067566 88.10007477]
[142.55049133 102.47633362]
[137.01480103 114.85795593]
[128.28544617 124.08209991]
[117.74848175 129.48132324]
[106.86042786 130.92272949]
[96.95951080 128.77746582]
[89.10508728 123.82805634]
[83.96444702 117.12911224]
[72.04864502 126.24029541]
[60.13283539 135.35147095]
[60.85447693 142.98661804]
[58.86748123 150.32302856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[10 41]
[11 40]
[12 39]
[13 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[23 30]
[24 29]
[48 151]
[49 150]
[50 149]
[51 58]
[52 57]
[60 73]
[61 72]
[62 71]
[74 140]
[75 139]
[76 138]
[77 137]
[78 136]
[80 134]
[81 133]
[82 131]
[83 130]
[84 128]
[85 127]
[88 122]
[89 121]
[90 120]
[91 119]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
