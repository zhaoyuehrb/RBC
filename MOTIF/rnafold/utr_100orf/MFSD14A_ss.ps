%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCAGGGGAAGAAGAAGAAACGGGCCGCGAACCGCAGUAUCAUGCUGGCCAAGAAGAUCAUCAUUAAGGACGGAGGCACGCCUCAAGGAAUAGGUU\
) } def
/len { sequence length } bind def

/coor [
[92.30773926 223.49087524]
[79.42140961 212.47366333]
[86.44076538 197.04107666]
[87.37330627 182.07008362]
[88.30585480 167.09910583]
[89.23839569 152.12812805]
[77.07824707 148.03900146]
[66.24971771 141.15910339]
[57.38188934 131.88807678]
[50.98993301 120.76454926]
[47.44518280 108.43470764]
[46.95357132 95.61486053]
[49.54365540 83.04976654]
[55.06496811 71.46938324]
[63.19675064 61.54646683]
[54.45563507 49.35660172]
[40.12593079 42.65062332]
[38.99700546 27.79886246]
[30.25588989 15.60899353]
[15.66194916 19.63915634]
[0.59798980 18.43535805]
[-13.11940193 12.16212940]
[-23.84265327 1.59416127]
[-30.29108238 -11.97931385]
[-31.70384216 -26.91178322]
[-27.92963409 -41.39916992]
[-19.44265938 -53.69781113]
[-28.18377495 -65.88768005]
[-36.92489243 -78.07755280]
[-45.66600418 -90.26741791]
[-54.40711975 -102.45729065]
[-59.03845215 -88.19016266]
[-72.26914215 -81.12271118]
[-86.70269012 -85.20591736]
[-94.27016449 -98.15711212]
[-90.74103546 -112.73603821]
[-78.08823395 -120.79250336]
[-63.38458633 -117.82220459]
[-69.71211243 -131.42228699]
[-76.03963470 -145.02238464]
[-90.97019196 -150.20446777]
[-97.78811646 -164.46249390]
[-92.44846344 -179.33743286]
[-78.11914825 -186.00424194]
[-63.30150223 -180.50761414]
[-56.78656769 -166.10861206]
[-62.43954849 -151.34989929]
[-56.11202240 -137.74981689]
[-49.78449631 -124.14972687]
[-42.21725464 -111.19840240]
[-33.47613907 -99.00853729]
[-24.73502159 -86.81866455]
[-15.99390602 -74.62879944]
[-7.25279093 -62.43892670]
[7.11856222 -66.53154755]
[22.05098534 -65.45831299]
[35.74084854 -59.32951355]
[46.52798080 -48.86724091]
[53.09701538 -35.32036209]
[54.63773727 -20.31548309]
[50.94499207 -5.66162205]
[42.44575882 6.86787844]
[51.18687439 19.05774689]
[64.89135742 24.89182281]
[66.64550781 40.61548615]
[75.38661957 52.80535126]
[96.90087891 46.86292648]
[118.96007538 50.26401138]
[137.68537903 62.41056442]
[149.78416443 81.16677094]
[153.12899780 103.23456573]
[167.82345581 106.24667358]
[182.51792908 109.25877380]
[191.73579407 107.90837097]
[197.61930847 112.59983063]
[212.21298218 116.06747437]
[225.53590393 107.56598663]
[240.94985962 111.05679321]
[249.31001282 124.46885681]
[245.65643311 139.84504700]
[232.15672302 148.06292725]
[216.82003784 144.24697876]
[208.74533081 130.66114807]
[194.15165710 127.19350433]
[179.50581360 123.95323944]
[164.81135559 120.94113159]
[150.11689758 117.92902374]
[147.73310852 123.55215454]
[144.72084045 128.86518860]
[141.11978149 133.79817200]
[136.97732544 138.28616333]
[132.34800720 142.27008057]
[127.29280090 145.69743347]
[121.87824249 148.52314758]
[116.17563629 150.70997620]
[110.26004791 152.22915649]
[104.20938110 153.06066895]
[103.27683258 168.03164673]
[102.34429169 183.00263977]
[101.41174316 197.97361755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[15 66]
[16 65]
[18 63]
[19 62]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[38 49]
[39 48]
[40 47]
[71 87]
[72 86]
[73 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
