%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCGGGCAUGGUGGGGUGUCGGGGGCCGCAGGCGUAGCGCUCUCGCCCUGGCCAUGGAGCGGCCGGCGCCCGGCGAGGUGGUCAUGAGCCAAGCCAUCCAGCCGGCGCACGCCACUGCGCGCGGCGAGCUGAGCGCGGGGCAGCUGCUCAAGU\
) } def
/len { sequence length } bind def

/coor [
[31.89616394 222.35986328]
[19.17278099 230.30438232]
[4.33367348 232.49548340]
[-10.14280987 228.56719971]
[-21.83888626 219.17561340]
[-28.80113792 205.88926697]
[-29.86676788 190.92716980]
[-24.85779953 176.78820801]
[-14.61310577 165.83540344]
[-29.24656677 169.13113403]
[-43.88002777 172.42686462]
[-58.51348877 175.72259521]
[-73.14694977 179.01832581]
[-87.78041077 182.31405640]
[-99.54335785 192.89439392]
[-113.65962982 188.14253235]
[-128.29309082 191.43826294]
[-142.92654419 194.73399353]
[-148.23904419 204.30801392]
[-157.76336670 209.24726868]
[-168.21138000 208.12066650]
[-176.12471008 201.54585266]
[-190.87901306 204.24967957]
[-205.63330078 206.95350647]
[-220.38760376 209.65733337]
[-235.14190674 212.36116028]
[-249.89619446 215.06498718]
[-264.65051270 217.76881409]
[-272.58120728 222.41836548]
[-279.72894287 220.37539673]
[-294.53469849 222.78155518]
[-302.37857056 236.30958557]
[-317.10052490 241.58204651]
[-331.74923706 236.10945129]
[-339.40805054 222.47579956]
[-336.46072388 207.11846924]
[-324.29888916 197.28874207]
[-308.66497803 197.62789917]
[-296.94085693 207.97581482]
[-282.13510132 205.56964111]
[-267.35433960 203.01451111]
[-252.60002136 200.31068420]
[-237.84573364 197.60685730]
[-223.09143066 194.90303040]
[-208.33712769 192.19920349]
[-193.58282471 189.49537659]
[-178.82853699 186.79156494]
[-165.12254333 173.19958496]
[-146.22227478 180.10052490]
[-131.58882141 176.80480957]
[-116.95536041 173.50907898]
[-106.23908997 163.16447449]
[-91.07614136 167.68058777]
[-76.44268036 164.38485718]
[-61.80921555 161.08914185]
[-47.17575455 157.79341125]
[-32.54229355 154.49768066]
[-17.90883446 151.20195007]
[-3.83074331 146.02436829]
[9.45109749 139.05351257]
[22.73293686 132.08267212]
[36.01477814 125.11182404]
[49.29661942 118.14097595]
[62.57845688 111.17012787]
[75.86029816 104.19927979]
[77.96656036 89.28147888]
[88.40297699 78.41602325]
[103.22386932 75.71078491]
[109.65425873 62.15903091]
[116.08464050 48.60727692]
[122.51502991 35.05551910]
[128.94541931 21.50376129]
[129.80854797 12.35119724]
[135.64418030 7.74585199]
[142.34614563 -5.67366743]
[149.04812622 -19.09318733]
[144.27574158 -33.92093658]
[151.26367188 -47.43476486]
[165.42907715 -51.89312363]
[172.13104248 -65.31264496]
[178.83302307 -78.73216248]
[185.53500366 -92.15167999]
[192.23698425 -105.57119751]
[198.93896484 -118.99072266]
[190.40359497 -131.75955200]
[189.41218567 -147.08641052]
[196.23139954 -160.84844971]
[209.02693176 -169.34375000]
[224.35682678 -170.28712463]
[238.09742737 -163.42478943]
[246.55256653 -150.60269165]
[247.44787598 -135.26992798]
[240.54251099 -121.55090332]
[227.69398499 -113.13598633]
[212.35847473 -112.28874207]
[205.65649414 -98.86922455]
[198.95452881 -85.44970703]
[192.25254822 -72.03018188]
[185.55056763 -58.61066437]
[178.84858704 -45.19114685]
[183.79414368 -31.18839264]
[177.18855286 -17.48361969]
[162.46765137 -12.39121056]
[155.76567078 1.02830946]
[149.06369019 14.44782925]
[142.49717712 27.93415070]
[136.06678772 41.48590851]
[129.63639832 55.03766251]
[123.20600891 68.58941650]
[116.77562714 82.14117432]
[121.49736023 88.24319458]
[124.08750153 95.51097107]
[124.28921509 103.22386932]
[137.84097290 109.65425873]
[151.39273071 116.08464050]
[160.54528809 116.94777679]
[165.15063477 122.78339386]
[178.57015991 129.48536682]
[191.98966980 136.18734741]
[205.40919495 142.88932800]
[218.82872009 149.59130859]
[232.24822998 156.29328918]
[248.05136108 155.53712463]
[255.98060608 168.14570618]
[269.40011597 174.84768677]
[282.81964111 181.54965210]
[299.14727783 180.01994324]
[308.41390991 193.54997253]
[301.08679199 208.22122192]
[284.70346069 208.94116211]
[276.11767578 194.96917725]
[262.69815063 188.26719666]
[249.27862549 181.56521606]
[234.43534851 182.80075073]
[225.54624939 169.71279907]
[212.12673950 163.01081848]
[198.70721436 156.30885315]
[185.28770447 149.60687256]
[171.86817932 142.90489197]
[158.44865417 136.20291138]
[144.96234131 129.63639832]
[131.41058350 123.20600891]
[117.85882568 116.77562714]
[100.49340057 124.49726105]
[82.83114624 117.48112488]
[69.54930878 124.45196533]
[56.26746750 131.42282104]
[42.98562622 138.39366150]
[29.70378494 145.36451721]
[16.42194366 152.33535767]
[3.14010429 159.30621338]
[18.04276657 161.01226807]
[31.01843262 168.53770447]
[39.89997864 180.62564087]
[43.20405579 195.25721741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[16 51]
[17 50]
[18 49]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[30 40]
[31 39]
[59 151]
[60 150]
[61 149]
[62 148]
[63 147]
[64 146]
[65 145]
[68 110]
[69 109]
[70 108]
[71 107]
[72 106]
[74 105]
[75 104]
[76 103]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[113 143]
[114 142]
[115 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[122 135]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
