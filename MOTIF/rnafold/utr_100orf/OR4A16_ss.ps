%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGACCAAGCAGCAAUGUUACAGAAUUUGUCCUCCUGGGCCUCACUCAAGAUCCUGAUGUGAAAAAAACAUUAUUUGUCAUGUUUUUACUCAUAUACA\
) } def
/len { sequence length } bind def

/coor [
[107.60332489 196.91242981]
[105.27985382 182.09347534]
[102.95638275 167.27452087]
[100.63291168 152.45556641]
[98.30944061 137.63661194]
[90.81287384 138.31343079]
[83.01346588 137.45239258]
[75.23358154 134.96714783]
[67.81639862 130.83984375]
[61.11125183 125.12567902]
[48.78691483 133.67616272]
[36.46258163 142.22665405]
[24.13824654 150.77713013]
[17.63673019 165.83244324]
[1.31860650 167.46060181]
[-8.02943611 153.98669434]
[-0.79093397 139.27153015]
[15.58776379 138.45280457]
[27.91209793 129.90231323]
[40.23643112 121.35182953]
[52.56076813 112.80134583]
[52.91057205 105.30950928]
[37.99562836 106.90466309]
[25.00282478 114.40046692]
[10.82699013 109.49681854]
[5.24288750 95.57497406]
[12.10096073 82.23455048]
[26.67231560 78.67427063]
[38.90876007 87.34785461]
[53.61017609 90.32583618]
[53.95998001 82.83399200]
[42.48599243 73.17234039]
[31.01200294 63.51068115]
[19.53801537 53.84902573]
[3.30686402 51.50770569]
[-2.52899790 36.18208313]
[8.03386402 23.63784218]
[24.12928200 26.77942276]
[29.19967079 42.37503815]
[40.67366028 52.03669357]
[52.14764786 61.69834900]
[63.62163544 71.36000824]
[81.99201965 62.07086945]
[100.65256500 62.33109665]
[103.89282990 47.68525314]
[107.13309479 33.03941345]
[110.37336731 18.39357185]
[113.38546753 3.69910955]
[116.16868591 -11.04041862]
[118.95190430 -25.77994728]
[109.83828735 -38.69186020]
[112.60637665 -54.25185013]
[125.61392975 -63.22844315]
[141.14378357 -60.29599380]
[149.98234558 -47.19426727]
[146.88586426 -31.69628906]
[133.69143677 -22.99673080]
[130.90821838 -8.25720310]
[128.12500000 6.48232603]
[130.01026917 13.76732922]
[125.01920319 21.63383865]
[121.77893829 36.27968216]
[118.53867340 50.92552185]
[115.29840088 65.57136536]
[130.61653137 78.04548645]
[137.51679993 96.55589294]
[152.42799377 98.18567657]
[167.33918762 99.81545258]
[182.25039673 101.44523621]
[197.16159058 103.07501984]
[212.07278442 104.70480347]
[226.98397827 106.33458710]
[241.89518738 107.96437073]
[252.22576904 96.38600159]
[267.39608765 93.12398529]
[281.57287598 99.43262482]
[289.30480957 112.88612366]
[287.61883545 128.31134033]
[277.16326904 139.77694702]
[261.95843506 142.87420654]
[247.85095215 136.41215515]
[240.26539612 122.87556458]
[225.35420227 121.24578094]
[210.44300842 119.61599731]
[195.53181458 117.98622131]
[180.62060547 116.35643768]
[165.70941162 114.72665405]
[150.79821777 113.09687042]
[135.88702393 111.46708679]
[127.25410461 126.01126862]
[113.12839508 135.31314087]
[115.45186615 150.13209534]
[117.77533722 164.95104980]
[120.09881592 179.77000427]
[122.42228699 194.58895874]
[135.33978271 203.69465637]
[137.95278931 219.28143311]
[128.71102905 232.10194397]
[113.09748840 234.55000305]
[100.37540436 225.17321777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[10 21]
[11 20]
[12 19]
[13 18]
[31 42]
[32 41]
[33 40]
[34 39]
[44 64]
[45 63]
[46 62]
[47 61]
[48 59]
[49 58]
[50 57]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
