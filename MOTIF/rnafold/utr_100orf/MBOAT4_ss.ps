%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGCCUGGUUGAGAUUACUCUUGGAGGAAGGCAUCAGUUAAGGACACUGGAAAAGACAGGCUCUUUUGUUCUGGUUCCUAAUGGAGUGGCUUUGGCUGUUCUUUCUCCAUCCUAUAUCGUUUUACCAGGGGGCUGCAUUUCCCUUUGCACUUCUCUUCAAUUAUCUCUGCAUCAUGGAUU\
) } def
/len { sequence length } bind def

/coor [
[260.60946655 316.54037476]
[256.18026733 304.48092651]
[256.65106201 291.59564209]
[261.98709106 279.80636597]
[252.12904358 268.50067139]
[242.27098083 257.19497681]
[232.41293335 245.88926697]
[222.55487061 234.58357239]
[212.69682312 223.27787781]
[202.55247498 212.22833252]
[192.12850952 201.44218445]
[181.70454407 190.65605164]
[164.37158203 193.93878174]
[148.38926697 186.10707092]
[140.22003174 170.11816406]
[143.29232788 152.26870728]
[132.50617981 141.84474182]
[121.72003174 131.42077637]
[108.05618286 137.33795166]
[93.16811371 137.58125305]
[79.31822205 132.11369324]
[68.61112976 121.76612091]
[62.67390823 108.11096954]
[62.40876389 93.22327423]
[67.85599518 79.36536407]
[57.06985474 68.94139862]
[46.28371048 58.51742935]
[35.49756622 48.09346008]
[24.71142578 37.66949081]
[13.92528248 27.24552345]
[3.13913989 16.82155418]
[-7.64700270 6.39758587]
[-18.43314552 -4.02638292]
[-29.21928787 -14.45035172]
[-40.09592438 -13.63658905]
[-49.42638779 -18.84790421]
[-54.23539734 -28.14508057]
[-53.14357758 -38.33416748]
[-63.56754684 -49.12030792]
[-73.99151611 -59.90645218]
[-84.41548157 -70.69259644]
[-94.83945465 -81.47873688]
[-105.26342010 -92.26487732]
[-115.68739319 -103.05102539]
[-126.11135864 -113.83716583]
[-136.53532410 -124.62330627]
[-151.68920898 -129.16978455]
[-154.97007751 -143.69856262]
[-165.39404297 -154.48471069]
[-175.81802368 -165.27084351]
[-186.24198914 -176.05699158]
[-197.20452881 -186.29528809]
[-208.67687988 -195.95887756]
[-220.14923096 -205.62248230]
[-231.62158203 -215.28607178]
[-249.81068420 -218.08470154]
[-255.15586853 -234.78916931]
[-266.79153442 -244.25549316]
[-278.42721558 -253.72181702]
[-290.14328003 -263.08843994]
[-301.93884277 -272.35473633]
[-313.73443604 -281.62103271]
[-325.53002930 -290.88729858]
[-341.83135986 -292.67587280]
[-348.18450928 -307.79437256]
[-338.05389404 -320.69021606]
[-321.86102295 -318.09725952]
[-316.26376343 -302.68289185]
[-304.46817017 -293.41662598]
[-292.67257690 -284.15032959]
[-280.87698364 -274.88403320]
[-273.65753174 -273.22045898]
[-268.96087646 -265.35748291]
[-257.32522583 -255.89115906]
[-245.68954468 -246.42483521]
[-233.61315918 -247.34651184]
[-223.83879089 -239.53450012]
[-221.95799255 -226.75842285]
[-210.48564148 -217.09483337]
[-199.01329041 -207.43122864]
[-187.54092407 -197.76763916]
[-187.57890320 -212.76759338]
[-177.11187744 -223.51196289]
[-162.11605835 -223.86616516]
[-151.15339661 -213.62800598]
[-150.48309326 -198.64299011]
[-160.48785400 -187.46690369]
[-175.45584106 -186.48095703]
[-165.03187561 -175.69480896]
[-154.60791016 -164.90867615]
[-144.18392944 -154.12252808]
[-129.77565002 -150.34754944]
[-125.74918365 -135.04727173]
[-115.32521820 -124.26113129]
[-104.90124512 -113.47499084]
[-94.47727966 -102.68885040]
[-84.05331421 -91.90270233]
[-73.62934113 -81.11656189]
[-63.20537186 -70.33042145]
[-52.78140640 -59.54427719]
[-42.35743713 -48.75813293]
[-23.43710709 -44.83718491]
[-18.79532051 -25.23649406]
[-8.00917721 -14.81252575]
[2.77696586 -4.38855696]
[13.56310844 6.03541183]
[24.34925079 16.45938110]
[35.13539505 26.88335037]
[45.92153549 37.30731964]
[56.70767975 47.73128891]
[67.49382019 58.15525436]
[78.27996826 68.57922363]
[91.94381714 62.66204453]
[106.83188629 62.41875076]
[120.68177795 67.88631439]
[131.38887024 78.23387909]
[137.32609558 91.88903046]
[137.59123230 106.77672577]
[132.14399719 120.63463593]
[142.93014526 131.05859375]
[153.71629333 141.48257446]
[165.66177368 137.70692444]
[178.00616455 139.36831665]
[188.40696716 146.08937073]
[194.91697693 156.53849792]
[196.34872437 168.69335938]
[192.49069214 180.23208618]
[202.91465759 191.01821899]
[213.33862305 201.80436707]
[218.40386963 203.25028992]
[222.03208923 206.20896912]
[223.88653564 209.87324524]
[224.00251770 213.41981506]
[233.86056519 224.72550964]
[243.71862793 236.03120422]
[253.57667542 247.33691406]
[263.43472290 258.64260864]
[273.29278564 269.94830322]
[290.43283081 266.16162109]
[307.04971313 271.53616333]
[318.60745239 284.51031494]
[321.99896240 301.46102905]
[316.38088989 317.71527100]
[326.61917114 328.67779541]
[336.85748291 339.64035034]
[353.60247803 337.33477783]
[368.28079224 345.37667847]
[375.21194458 360.42837524]
[371.84832764 376.48468018]
[382.27230835 387.27084351]
[392.69625854 398.05697632]
[403.12023926 408.84310913]
[416.70663452 402.18991089]
[431.68429565 400.06277466]
[446.58587646 402.67007446]
[459.95147705 409.75640869]
[470.47164917 420.62750244]
[477.11575317 434.21835327]
[479.23287964 449.19744873]
[476.61557007 464.09729004]
[469.52029419 477.45812988]
[458.64212036 487.97100830]
[445.04684448 494.60601807]
[430.06631470 496.71307373]
[415.16824341 494.08581543]
[401.81216431 486.98156738]
[391.30657959 476.09637451]
[384.68069458 462.49664307]
[382.58364868 447.51470947]
[385.22091675 432.61840820]
[392.33410645 419.26708984]
[381.91012573 408.48095703]
[371.48617554 397.69479370]
[361.06219482 386.90866089]
[348.05853271 389.99078369]
[335.12802124 386.20892334]
[325.68392944 376.44976807]
[322.27429199 363.19232178]
[325.89492798 349.87863159]
[315.65664673 338.91610718]
[305.41833496 327.95355225]
[293.46304321 332.11846924]
[280.77429199 331.44168091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 129]
[11 128]
[12 127]
[16 121]
[17 120]
[18 119]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 107]
[31 106]
[32 105]
[33 104]
[34 103]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[45 94]
[46 93]
[48 91]
[49 90]
[50 89]
[51 88]
[52 81]
[53 80]
[54 79]
[55 78]
[57 75]
[58 74]
[59 73]
[60 71]
[61 70]
[62 69]
[63 68]
[143 181]
[144 180]
[145 179]
[149 174]
[150 173]
[151 172]
[152 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
