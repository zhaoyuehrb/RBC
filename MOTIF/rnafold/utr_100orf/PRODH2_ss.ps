%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGAUGGGGUCUCACUAUGUCGCCCAGGGUAGUCUCAAACUCCUCGGUCUUGGCCUCCCAAAGUGUUGGGAUUACAAACGUGAGAACCGUAUUUUCAAAUGUAUUCAAUAACACUA\
) } def
/len { sequence length } bind def

/coor [
[190.83404541 334.00930786]
[199.17604065 321.45245361]
[210.28115845 311.25735474]
[203.06874084 298.10513306]
[195.85632324 284.95291138]
[188.64390564 271.80068970]
[181.43147278 258.64846802]
[174.21905518 245.49624634]
[161.31524658 238.05709839]
[161.46392822 222.23658752]
[154.25149536 209.08436584]
[147.03907776 195.93214417]
[139.65368652 182.87626648]
[132.09660339 169.91900635]
[124.53951263 156.96174622]
[116.98242950 144.00448608]
[109.42534637 131.04724121]
[100.22293854 132.44561768]
[91.00218201 131.17382812]
[82.52191925 127.33650970]
[75.48005676 121.24948120]
[70.45610809 113.41367340]
[67.86354828 104.47396851]
[67.91571808 95.16606140]
[54.00137711 89.56328583]
[40.08703613 83.96051025]
[24.39565659 85.98318481]
[15.47957420 74.05201721]
[1.56523311 68.44924164]
[-12.34910774 62.84646606]
[-26.33619118 57.42784119]
[-40.39358139 52.19431305]
[-53.24613190 60.88864899]
[-68.75330353 60.33432770]
[-80.95227051 50.74449539]
[-85.15227509 35.80663681]
[-79.73834229 21.26466751]
[-66.79222870 12.71026802]
[-51.29198074 13.43278027]
[-39.19776535 23.15438271]
[-35.16004944 38.13692474]
[-21.10266304 43.37045288]
[-13.64279079 42.74752426]
[-6.74633169 48.93212509]
[7.16800976 54.53490067]
[21.08235168 60.13767624]
[35.77848434 57.71425247]
[45.68981171 70.04616547]
[59.60415268 75.64894104]
[73.51849365 81.25172424]
[86.30913544 70.58353424]
[102.70738983 67.66676331]
[107.38029480 53.41320419]
[112.05319214 39.15964127]
[103.13832855 26.59654617]
[103.32819366 11.37099743]
[112.34040833 -0.68072420]
[126.55095673 -5.06230402]
[131.22386169 -19.31586456]
[135.89675903 -33.56942749]
[140.56965637 -47.82298660]
[145.24255371 -62.07654953]
[149.91546631 -76.33010864]
[146.02052307 -92.26000214]
[158.05419922 -103.40103149]
[173.63728333 -98.29225922]
[176.73922729 -82.18915558]
[164.16902161 -71.65721130]
[159.49612427 -57.40364838]
[154.82322693 -43.15008545]
[150.15031433 -28.89652634]
[145.47741699 -14.64296436]
[140.80451965 -0.38940373]
[149.66271973 11.55505848]
[149.79048157 26.60323715]
[140.92922974 38.98595047]
[126.30675507 43.83254242]
[121.63385773 58.08610535]
[116.96095276 72.33966827]
[129.74890137 87.04736328]
[131.80319214 106.42848206]
[122.38259888 123.49015045]
[129.93968201 136.44740295]
[137.49676514 149.40466309]
[145.05384827 162.36192322]
[152.61094666 175.31916809]
[159.72830200 181.24821472]
[160.19129944 188.71971130]
[167.40371704 201.87193298]
[174.61614990 215.02416992]
[188.03582764 223.40405273]
[187.37127686 238.28382874]
[194.58370972 251.43605042]
[201.79612732 264.58825684]
[209.00854492 277.74050903]
[216.22096252 290.89273071]
[223.43338013 304.04495239]
[238.00003052 300.16213989]
[253.07263184 299.87890625]
[267.77487183 303.21166992]
[281.25201416 309.96670532]
[292.72045898 319.75128174]
[301.51348877 331.99652100]
[307.11987305 345.99050903]
[309.21368408 360.91967773]
[307.67318726 375.91601562]
[302.58789062 390.10766602]
[294.25354004 402.66958618]
[283.15460205 412.87139893]
[269.93637085 420.12002563]
[255.36737061 423.99398804]
[240.29461670 424.26809692]
[225.59439087 420.92639160]
[212.12136841 414.16317749]
[200.65884399 404.37167358]
[191.87322998 392.12109375]
[186.27531433 378.12371826]
[184.19056702 363.19329834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[8 92]
[10 90]
[11 89]
[12 88]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[24 50]
[25 49]
[26 48]
[28 46]
[29 45]
[30 44]
[31 42]
[32 41]
[52 79]
[53 78]
[54 77]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
