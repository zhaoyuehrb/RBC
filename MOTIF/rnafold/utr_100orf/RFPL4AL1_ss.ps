%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGAGCACUUCAAACAGAUCAUUAGAUGUCCUGUCUGUCUAAAAGAUCUUGAAGAAGCCGUGCAACUGAAAUGUGGAUAUGCCUGCUGCCUCCAGU\
) } def
/len { sequence length } bind def

/coor [
[179.16650391 149.89396667]
[165.87632751 142.93901062]
[152.58616638 135.98405457]
[139.29598999 129.02909851]
[126.00582123 122.07415009]
[112.71565247 115.11920166]
[105.54925537 118.96005249]
[97.44287872 119.58925629]
[89.76964569 116.90023041]
[83.82933807 111.34846497]
[80.62818909 103.87438202]
[80.70843506 95.74401093]
[68.38410187 87.19352722]
[56.05976486 78.64304352]
[43.73543167 70.09255981]
[31.41109467 61.54207611]
[25.84751892 61.10167694]
[21.52698135 58.71036530]
[19.00361061 55.21933746]
[18.38779831 51.57573700]
[6.91381025 41.91408157]
[-4.56017780 32.25242615]
[-16.03416634 22.59077072]
[-27.50815392 12.92911434]
[-45.63680267 10.20898724]
[-51.12946701 -6.37811899]
[-62.89838409 -15.67826176]
[-74.66729736 -24.97840500]
[-86.43621063 -34.27854919]
[-98.20512390 -43.57869339]
[-109.97403717 -52.87883377]
[-121.74295044 -62.17897797]
[-137.01890564 -58.83540344]
[-150.84608459 -66.13901520]
[-156.69575500 -80.64127350]
[-151.80584717 -95.49465179]
[-138.48526001 -103.68584442]
[-123.02352905 -101.34721375]
[-112.72124481 -89.58300018]
[-112.44281006 -73.94789124]
[-100.67389679 -64.64775085]
[-88.90498352 -55.34760666]
[-77.13607025 -46.04746246]
[-65.36715698 -36.74731827]
[-53.59823990 -27.44717598]
[-41.82932663 -18.14703369]
[-29.66942596 -19.22164345]
[-19.76470757 -11.41644478]
[-17.84649849 1.45512617]
[-6.37250996 11.11678219]
[5.10147810 20.77843857]
[16.57546616 30.44009399]
[28.04945374 40.10174942]
[39.96157837 49.21774292]
[52.28591537 57.76822662]
[64.61024475 66.31871033]
[76.93458557 74.86919403]
[89.25891876 83.41967773]
[110.23035431 83.09976959]
[119.67060089 101.82903290]
[132.96076965 108.78398132]
[146.25094604 115.73893738]
[159.54110718 122.69388580]
[172.83128357 129.64883423]
[186.12145996 136.60379028]
[192.41012573 130.55700684]
[199.90940857 126.12557983]
[208.21406555 123.54178619]
[216.87696838 122.93829346]
[225.43318176 124.34128571]
[233.42492676 127.66945648]
[240.42605591 132.73864746]
[246.06478882 139.27204895]
[250.04345703 146.91531372]
[252.15419006 155.25575256]
[252.28981018 163.84465027]
[250.44920349 172.22135925]
[246.73710632 179.93804932]
[257.58822632 190.29434204]
[268.43936157 200.65065002]
[279.29049683 211.00694275]
[290.35528564 210.12588501]
[299.83517456 215.46092224]
[304.62423706 224.98034668]
[303.31289673 235.33200073]
[313.49920654 246.34286499]
[329.40972900 248.40075684]
[337.59725952 262.19726562]
[331.78106689 277.14889526]
[316.42279053 281.78604126]
[303.30401611 272.55148315]
[302.48831177 256.52917480]
[292.30203247 245.51828003]
[273.52545166 241.36460876]
[268.93420410 221.85807800]
[258.08306885 211.50178528]
[247.23193359 201.14547729]
[236.38081360 190.78918457]
[215.01573181 197.52078247]
[193.56816101 190.67262268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 60]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[78 98]
[79 97]
[80 96]
[81 95]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
