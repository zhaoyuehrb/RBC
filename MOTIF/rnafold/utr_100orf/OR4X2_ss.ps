%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:51:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUGAAUUCAUUUUUCUGGUACUUUCUCCCAACCAGGAGGUGCAGAGGGUUUGCUUUGUGAUAUUUCUGUUCUUGUACACAGCAAUUGUGCUGGGGA\
) } def
/len { sequence length } bind def

/coor [
[93.02719116 206.12908936]
[80.23832703 213.96777344]
[65.82656097 218.12721252]
[50.82765579 218.30847168]
[36.31957245 214.49855042]
[23.34500313 206.97122192]
[12.83641434 196.26750183]
[5.54905510 183.15666199]
[2.00666165 168.58094788]
[2.46382332 153.58790588]
[6.88768435 139.25509644]
[14.96030521 126.61260223]
[26.10151100 116.56902313]
[39.51059341 109.84618378]
[54.22384644 106.92726135]
[69.18384552 108.02201843]
[83.65347290 104.06858063]
[69.05979919 100.60093689]
[54.46612167 97.13329315]
[39.87244415 93.66564941]
[25.27876472 90.19800568]
[10.68508625 86.73036194]
[-3.90859175 83.26271820]
[-13.91354561 94.84543610]
[-28.15949631 100.44110107]
[-43.37282944 98.76387024]
[-56.05762863 90.19915009]
[-63.29902649 76.71505737]
[-63.43299484 61.41013718]
[-56.42875671 47.80134583]
[-43.89582825 39.01588440]
[-28.71418953 37.07258987]
[-14.37246704 42.41801453]
[-4.16628361 53.82382202]
[-0.44094691 68.66903687]
[14.15273094 72.13668060]
[28.74640846 75.60432434]
[43.34008789 79.07196808]
[57.93376541 82.53961945]
[72.52744293 86.00726318]
[87.12112427 89.47490692]
[100.91141510 83.57340240]
[108.47866058 70.62207794]
[108.76005554 54.80337143]
[121.86129761 47.71770477]
[129.42854309 34.76638031]
[136.99578857 21.81505394]
[144.56303406 8.86372852]
[152.13027954 -4.08759689]
[159.69750977 -17.03892326]
[167.26475525 -29.99024773]
[163.47463989 -45.09894562]
[171.33338928 -58.12563324]
[185.76058960 -61.64582443]
[193.32781982 -74.59715271]
[200.89506531 -87.54847717]
[208.46231079 -100.49980164]
[211.23234558 -117.22592926]
[228.07162476 -119.19440460]
[234.62475586 -103.55813599]
[221.41363525 -92.93255615]
[213.84638977 -79.98123169]
[206.27915955 -67.02990723]
[198.71191406 -54.07858276]
[202.72891235 -39.78175735]
[195.23915100 -26.53947067]
[180.21607971 -22.42300606]
[172.64883423 -9.47167969]
[165.08160400 3.47964573]
[157.51435852 16.43097115]
[149.94711304 29.38229752]
[142.37986755 42.33362198]
[134.81262207 55.28494644]
[135.07249451 70.17728424]
[121.42998505 78.18931580]
[113.86273956 91.14064789]
[125.06546783 81.16572571]
[140.06504822 81.27803040]
[151.11717224 91.41956329]
[152.51559448 106.35423279]
[143.53831482 118.37123871]
[128.82031250 121.26617432]
[115.95927429 113.54275513]
[125.79820251 124.86509705]
[135.63713074 136.18743896]
[145.47605896 147.50978088]
[155.31498718 158.83213806]
[170.98757935 163.65936279]
[174.37908936 179.70397949]
[162.00064087 190.46064758]
[146.58610535 184.86383057]
[143.99264526 168.67106628]
[134.15371704 157.34870911]
[124.31478882 146.02636719]
[114.47586060 134.70402527]
[104.63693237 123.38168335]
[107.84318542 138.03500366]
[112.61213684 152.25671387]
[113.43151093 167.23432922]
[110.24240875 181.89138794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[42 76]
[43 75]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[54 64]
[55 63]
[56 62]
[57 61]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
