%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCCGGCUGCAGACCUCUCCCGAGAGGGGAAUAAUCCGUGCCGGCCGGUUCCGCCAUGGAGCCAGGUGCAGGUCACCUCGACGGUCACCGCGCGGGGAGCCCAAGCCUUCGUCAGGCUCUGUGCGACGGAAGCGCAGUGAUGUUUUCCAGUAAAG\
) } def
/len { sequence length } bind def

/coor [
[90.88991547 150.66490173]
[86.33306122 136.37382507]
[87.86998749 121.45541382]
[75.03032684 129.21060181]
[62.19065857 136.96578979]
[49.35099030 144.72097778]
[43.58469391 151.87542725]
[36.18014526 152.49966431]
[23.18976593 159.99966431]
[10.19938469 167.49966431]
[4.29286146 174.53878784]
[-3.12257242 175.01661682]
[-16.25859642 182.25849915]
[-24.60838127 195.69692993]
[-39.48960495 195.06573486]
[-52.62562943 202.30761719]
[-65.38805389 210.18927002]
[-77.74575043 218.69146729]
[-90.10344696 227.19366455]
[-102.46114349 235.69587708]
[-114.81883240 244.19807434]
[-127.17652893 252.70027161]
[-133.73690796 267.73001099]
[-150.06126404 269.29431152]
[-159.35652161 255.78393555]
[-152.06050110 241.09721375]
[-135.67872620 240.34257507]
[-123.32103729 231.84037781]
[-110.96334076 223.33818054]
[-98.60564423 214.83598328]
[-86.24794769 206.33377075]
[-73.89025879 197.83157349]
[-87.83057404 192.29376221]
[-92.38607025 178.00224304]
[-84.22206879 165.41854858]
[-69.31469727 163.75408936]
[-58.57630539 174.22723389]
[-59.86751556 189.17160034]
[-46.73149109 181.92971802]
[-39.32128143 169.00926208]
[-23.50047874 169.12246704]
[-10.36445522 161.88058472]
[2.69938445 154.50927734]
[15.68976593 147.00927734]
[28.68014717 139.50927734]
[41.59580231 131.88131714]
[54.43546677 124.12612915]
[67.27513123 116.37094116]
[80.11479950 108.61575317]
[81.44673920 93.67500305]
[70.18136597 83.77089691]
[58.91598892 73.86679077]
[47.65061569 63.96268463]
[36.38523865 54.05857849]
[25.11986351 44.15447235]
[9.08203983 43.74491501]
[-0.48187888 30.86427116]
[3.76472878 15.39346409]
[18.56422806 9.20037365]
[32.56370926 17.03581047]
[35.02397156 32.88909531]
[46.28934479 42.79320145]
[57.55472183 52.69730759]
[68.82009888 62.60141373]
[80.08547211 72.50552368]
[91.35084534 82.40962982]
[98.35535431 79.72879028]
[112.36436462 74.36710358]
[119.36886597 71.68626404]
[121.14296722 56.79154587]
[122.91706085 41.89683151]
[124.69116211 27.00211334]
[122.59168243 18.05625343]
[126.65027618 11.83172035]
[128.71830750 -3.02503777]
[130.78633118 -17.88179588]
[125.02552795 -32.61691284]
[134.44363403 -44.15591812]
[136.51165771 -59.01267624]
[138.57969666 -73.86943054]
[130.09399414 -87.48458862]
[135.58360291 -102.55918884]
[150.83738708 -107.52929688]
[164.15391541 -98.58226776]
[165.31791687 -82.58148956]
[153.43644714 -71.80140686]
[151.36842346 -56.94464493]
[149.30038452 -42.08788681]
[155.20910645 -28.41542435]
[145.64309692 -15.81376743]
[143.57505798 -0.95700932]
[141.50703430 13.89974880]
[139.58587646 28.77621269]
[137.81178284 43.67092896]
[136.03767395 58.56564331]
[134.26358032 73.46035767]
[143.12825012 85.56067657]
[157.86477661 88.35975647]
[172.60130310 91.15882874]
[187.33782959 93.95790100]
[202.07435608 96.75697327]
[216.81088257 99.55604553]
[231.54739380 102.35512543]
[242.10667419 87.73545837]
[259.58813477 80.68688202]
[278.93972778 84.17770386]
[294.06347656 97.98579407]
[308.74182129 94.89611816]
[323.42016602 91.80643463]
[338.09854126 88.71675873]
[352.77688599 85.62707520]
[362.71020508 73.02911377]
[378.75314331 73.08467865]
[388.59896851 85.75115204]
[384.69476318 101.31189728]
[370.03552246 107.83004761]
[355.86654663 100.30542755]
[341.18820190 103.39510345]
[326.50985718 106.48478699]
[311.83151245 109.57446289]
[297.15316772 112.66413879]
[295.23199463 127.54060364]
[308.64389038 134.25787354]
[322.05575562 140.97514343]
[335.46762085 147.69241333]
[348.87948608 154.40968323]
[362.29135132 161.12695312]
[376.57043457 154.75183105]
[391.59240723 159.09628296]
[400.26437378 172.10900879]
[398.49166870 187.64579773]
[387.11135864 198.37063599]
[371.49682617 199.21960449]
[359.02081299 189.79182434]
[355.57409668 174.53881836]
[342.16223145 167.82154846]
[328.75036621 161.10427856]
[315.33847046 154.38700867]
[301.92660522 147.66973877]
[288.51473999 140.95246887]
[273.51919556 149.74557495]
[256.71524048 150.71426392]
[241.81896973 144.14527893]
[231.89947510 131.93858337]
[228.74832153 117.09165192]
[214.01179504 114.29257202]
[199.27526855 111.49349976]
[184.53875732 108.69442749]
[169.80223083 105.89535522]
[155.06570435 103.09628296]
[140.32917786 100.29720306]
[151.78797913 109.97686768]
[158.42031860 123.43093872]
[159.11958313 138.41462708]
[153.76911926 152.42793274]
[143.26164246 163.13273621]
[129.35031128 168.74296570]
[114.35619354 168.32255554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 49]
[4 48]
[5 47]
[6 46]
[8 45]
[9 44]
[10 43]
[12 42]
[13 41]
[15 39]
[16 38]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[69 96]
[70 95]
[71 94]
[72 93]
[74 92]
[75 91]
[76 90]
[78 88]
[79 87]
[80 86]
[97 151]
[98 150]
[99 149]
[100 148]
[101 147]
[102 146]
[103 145]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
[122 140]
[123 139]
[124 138]
[125 137]
[126 136]
[127 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
