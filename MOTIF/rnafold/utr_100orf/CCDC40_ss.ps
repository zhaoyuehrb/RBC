%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGUUGACAGCGUCGCCUAGCAACGGGAAAUGGCGGAACCGGGCGGCGCGGCGGGCCGGUCCCAUCCGGAAGAUGGAUCGGCUUCUGAGGGAGAGAAGGAAGGGAAUAAUGAAAGCCACAUGGUGUCAC\
) } def
/len { sequence length } bind def

/coor [
[106.97049713 212.62802124]
[93.43934631 220.22325134]
[78.03201294 218.38107300]
[66.67292786 207.80984497]
[63.72989273 192.57441711]
[70.33456421 178.53312683]
[83.94731140 171.08512878]
[85.72809601 156.19120789]
[87.50888824 141.29730225]
[89.28967285 126.40338135]
[91.07045746 111.50946045]
[80.71926880 100.65345001]
[65.75749207 101.72353363]
[50.79570770 102.79362488]
[35.83392715 103.86370850]
[20.87214470 104.93379974]
[5.91036320 106.00389099]
[-9.05141830 107.07397461]
[-24.01320076 108.14406586]
[-38.97498322 109.21414948]
[-44.66073227 123.33625031]
[-55.86849213 133.54766846]
[-70.33919525 137.86262512]
[-85.18736267 135.47660828]
[-97.47643280 126.91576385]
[-104.79955292 113.92201996]
[-119.76132965 114.99210358]
[-127.84861755 128.23504639]
[-142.18826294 134.16412354]
[-157.26640320 130.49949646]
[-167.28515625 118.65027618]
[-168.39213562 103.17273712]
[-160.16166687 90.01830292]
[-145.75854492 84.24513245]
[-130.72105408 88.07312012]
[-120.83142090 100.03031921]
[-105.86963654 98.96023560]
[-100.47026062 85.05655670]
[-89.52461243 74.83392334]
[-75.16714478 70.35908508]
[-60.22964859 72.57073212]
[-47.68273163 81.08318329]
[-40.04507065 94.25237274]
[-25.08328819 93.18228149]
[-10.12150669 92.11219025]
[4.84027529 91.04210663]
[19.80205727 89.97201538]
[34.76383972 88.90193176]
[49.72562027 87.83184052]
[64.68740082 86.76175690]
[79.64918518 85.69166565]
[108.22521210 81.79655457]
[120.23332977 72.80738831]
[132.24145508 63.81822586]
[126.84796143 52.83190155]
[129.16419983 38.00769806]
[132.35269165 23.35049438]
[135.54116821 8.69329071]
[138.72964478 -5.96391201]
[141.91812134 -20.62111473]
[145.10659790 -35.27831650]
[148.29507446 -49.93552017]
[151.48356628 -64.59272766]
[154.67204285 -79.24992371]
[153.43505859 -88.40091705]
[158.11474609 -94.21605682]
[161.65112305 -108.79322815]
[165.18750000 -123.37039948]
[158.09898376 -137.76249695]
[165.06166077 -152.21589661]
[180.73434448 -155.64318848]
[193.09431458 -145.41525269]
[192.66004944 -129.37808228]
[179.76467896 -119.83401489]
[176.22830200 -105.25684357]
[172.69190979 -90.67967224]
[169.32923889 -76.06144714]
[166.14076233 -61.40424347]
[162.95228577 -46.74704361]
[159.76380920 -32.08983994]
[156.57533264 -17.43263626]
[153.38684082 -2.77543283]
[150.19836426 11.88177013]
[147.00988770 26.53897285]
[143.82141113 41.19617462]
[155.27374268 50.88349533]
[169.19926453 45.30855560]
[183.12477112 39.73361969]
[190.73649597 25.61124802]
[206.54862976 22.89907455]
[218.43147278 33.67764664]
[217.26951599 49.67856598]
[203.95411682 58.62729645]
[188.69970703 53.65913773]
[174.77420044 59.23407745]
[160.84867859 64.80901337]
[175.65261841 62.39173126]
[190.54949951 64.14752197]
[204.38577271 69.94042969]
[216.08998108 79.32186127]
[224.75582886 91.56536102]
[229.71221924 105.72283936]
[230.57539368 120.69798279]
[227.27847290 135.33117676]
[220.07678223 148.48927307]
[209.52798462 159.15336609]
[196.44894409 166.49766541]
[181.85244751 169.95344543]
[166.86880493 169.25311279]
[152.65829468 164.45089722]
[140.32131958 155.91867065]
[130.81321716 144.31710815]
[124.87024689 130.54463196]
[122.95262909 115.66771698]
[125.20885468 100.83837128]
[131.46418762 87.20493317]
[141.23060608 75.82634735]
[129.22248840 84.81550598]
[117.21437836 93.80467224]
[132.12277222 92.14945984]
[144.29248047 100.91861725]
[147.44026184 115.58461761]
[139.94088745 128.57536316]
[125.66633606 133.18371582]
[111.98655701 127.03035736]
[105.96437836 113.29024506]
[104.18358612 128.18415833]
[102.40280151 143.07807922]
[100.62201691 157.97200012]
[98.84123230 172.86592102]
[110.31432343 183.31329346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 130]
[8 129]
[9 128]
[10 127]
[11 126]
[12 51]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[26 37]
[27 36]
[52 119]
[53 118]
[54 117]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[66 76]
[67 75]
[68 74]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
