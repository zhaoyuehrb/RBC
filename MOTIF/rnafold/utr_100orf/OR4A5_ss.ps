%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCCUGUUUCCCUGAGCUCUCACCUCUGAUACAAGCCUUAAAGAAGAGUAAAUGAGACAGAAUAACAAUAUUACAGAAUUUGUCCUCCUGGGCUUUUCUCAGGAUCCUGGUGUGCAAAAAGCAUUAUUUGUCAUGUUUUUACUCACAUACU\
) } def
/len { sequence length } bind def

/coor [
[82.98038483 125.47112274]
[71.84687042 135.52323914]
[60.71335983 145.57534790]
[49.57984924 155.62745667]
[48.13166428 168.48365784]
[38.60090256 176.62690735]
[26.47871780 176.08589172]
[15.14247417 185.90879822]
[3.80623102 195.73170471]
[-1.55638933 210.61636353]
[-16.24187469 213.10348511]
[-27.57811737 222.92640686]
[-27.73296547 233.87808228]
[-33.79371262 242.73542786]
[-43.53735733 246.68075562]
[-53.62137222 244.62327576]
[-65.34884644 253.97561646]
[-77.07631683 263.32797241]
[-77.28527069 278.96414185]
[-87.53518677 290.77404785]
[-102.98636627 293.18133545]
[-116.34323120 285.04940796]
[-121.29907990 270.21792603]
[-115.51392365 255.68980408]
[-101.71931458 248.32482910]
[-86.42866516 251.60049438]
[-74.70119476 242.24813843]
[-62.97372055 232.89579773]
[-57.31663895 214.44239807]
[-37.40102768 211.59014893]
[-26.06478500 201.76724243]
[-21.51300812 187.58518982]
[-6.01668024 184.39546204]
[5.31956339 174.57255554]
[16.65580750 164.74963379]
[21.45922661 147.89753723]
[39.52774048 144.49394226]
[50.66125107 134.44183350]
[61.79476166 124.38971710]
[72.92827606 114.33760834]
[67.37059784 95.63401031]
[74.31415558 75.92253113]
[92.63835907 63.23733139]
[116.30873108 63.71824265]
[113.57019043 48.97035217]
[110.83164215 34.22245789]
[108.09309387 19.47456360]
[105.35454559 4.72667074]
[102.61599731 -10.02122307]
[99.87744904 -24.76911545]
[97.13890076 -39.51700974]
[82.75371552 -44.71448135]
[72.96611786 -56.33772278]
[70.32809448 -71.20066833]
[75.44951630 -85.29417419]
[86.86083984 -94.86743164]
[84.12229156 -109.61532593]
[81.38374329 -124.36322021]
[78.49491882 -139.08241272]
[75.45610046 -153.77137756]
[72.41728973 -168.46034241]
[69.37847900 -183.14930725]
[66.33966064 -197.83825684]
[51.31641006 -199.73049927]
[37.72266769 -206.40049744]
[27.03297806 -217.12474060]
[20.40688324 -230.73992920]
[18.56313324 -245.76921082]
[21.70172119 -260.58230591]
[29.48219872 -273.57241821]
[41.06059647 -283.33047485]
[55.18097687 -288.79797363]
[70.31166840 -289.38183594]
[84.81140137 -285.01876831]
[97.10736084 -276.18203735]
[105.86576843 -263.83013916]
[110.13658142 -249.30296326]
[109.45652771 -234.17630005]
[103.89937592 -220.09095764]
[94.06793213 -208.57482910]
[81.02862549 -200.87707520]
[84.06743622 -186.18811035]
[87.10625458 -171.49914551]
[90.14506531 -156.81019592]
[93.18387604 -142.12123108]
[97.64562225 -136.17239380]
[96.13163757 -127.10176849]
[98.87018585 -112.35387421]
[101.60873413 -97.60597992]
[115.69616699 -92.76760864]
[125.53578186 -81.45222473]
[128.40945435 -66.63303375]
[123.44710541 -52.27086639]
[111.88679504 -42.25555801]
[114.62534332 -27.50766373]
[117.36389160 -12.75977039]
[120.10243988 1.98812330]
[122.84098816 16.73601723]
[125.57953644 31.48390961]
[128.31808472 46.23180389]
[131.05662537 60.97969818]
[144.14779663 68.30233765]
[158.14785767 62.91730118]
[172.14790344 57.53225708]
[182.03320312 44.44742584]
[198.27212524 46.73417664]
[204.15946960 62.04010010]
[193.63882446 74.61977386]
[177.53294373 71.53230286]
[163.53289795 76.91735077]
[149.53283691 82.30239105]
[147.54966736 97.17070770]
[159.64884949 106.03692627]
[171.74803162 114.90314484]
[183.84721375 123.76936340]
[195.94639587 132.63557434]
[213.15245056 129.64166260]
[226.94692993 139.79383850]
[229.11674500 156.44367981]
[241.39427185 165.06124878]
[253.67179871 173.67881775]
[265.94931030 182.29638672]
[278.22683716 190.91395569]
[290.50436401 199.53152466]
[302.78189087 208.14907837]
[315.05938721 216.76664734]
[329.69253540 211.60423279]
[344.55578613 216.06114197]
[353.93386841 228.42362976]
[354.22076416 243.93804932]
[345.30612183 256.63879395]
[330.61782837 261.64218140]
[315.80383301 257.02429199]
[306.56039429 244.56079102]
[306.44183350 229.04417419]
[294.16430664 220.42660522]
[281.88677979 211.80903625]
[269.60928345 203.19146729]
[257.33175659 194.57391357]
[245.05422974 185.95634460]
[232.77670288 177.33877563]
[220.49917603 168.72120667]
[208.20727539 172.70109558]
[195.68624878 168.79849243]
[187.59523010 158.22998047]
[187.08018494 144.73475647]
[174.98100281 135.86854553]
[162.88182068 127.00232697]
[150.78263855 118.13610840]
[138.68345642 109.26988983]
[130.88359070 122.05415344]
[119.36206818 130.49301147]
[106.16638184 133.73291016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[7 35]
[8 34]
[9 33]
[11 31]
[12 30]
[16 28]
[17 27]
[18 26]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
[51 94]
[56 89]
[57 88]
[58 87]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[102 111]
[103 110]
[104 109]
[112 150]
[113 149]
[114 148]
[115 147]
[116 146]
[119 142]
[120 141]
[121 140]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
