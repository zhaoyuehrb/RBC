%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCUGACGCGGGGCGCCAGCUGCCAACUUCGCGCGCGGAGCUCCCCGGCGGUGCAGUCCCGUCCCGGCGGCGCGGGCGGCAUGAAGACUAGCCGCCGCGGCCGAGCGCUCCUGGCCGUGGCCCUGAACCUGCUGGCGCUGCUGUUCGCCACCACCGCUUUCCUCACCACGCACUGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[109.21131897 142.30688477]
[103.52963257 128.42457581]
[97.84795380 114.54227448]
[84.55255127 107.59732056]
[69.91269684 110.86452484]
[55.27283859 114.13172913]
[40.63298035 117.39893341]
[25.99312592 120.66613770]
[11.35326958 123.93334198]
[-3.28658605 127.20053864]
[-11.77942753 140.25846863]
[-26.67286491 143.36332703]
[-39.06926346 135.18623352]
[-53.70911789 138.45343018]
[-68.34897614 141.72062683]
[-82.98883057 144.98783875]
[-97.62868500 148.25503540]
[-112.26853943 151.52224731]
[-126.90840149 154.78944397]
[-141.52014160 158.18017578]
[-156.10272217 161.69416809]
[-161.17663574 165.98782349]
[-166.81094360 166.91793823]
[-171.23710632 165.07173157]
[-185.93005371 168.09121704]
[-200.62300110 171.11068726]
[-215.31594849 174.13017273]
[-230.00889587 177.14964294]
[-244.70184326 180.16912842]
[-255.06956482 198.43946838]
[-275.25329590 203.09791565]
[-292.09655762 191.55026245]
[-306.55215454 195.55477905]
[-321.00772095 199.55928040]
[-335.46331787 203.56378174]
[-349.91891479 207.56829834]
[-361.02441406 219.63475037]
[-376.96572876 215.78675842]
[-381.34375000 199.98281860]
[-369.65478516 188.48065186]
[-353.92340088 193.11271667]
[-339.46783447 189.10820007]
[-325.01223755 185.10369873]
[-310.55664062 181.09919739]
[-296.10107422 177.09468079]
[-294.20962524 167.88362122]
[-289.05142212 159.95214844]
[-281.30444336 154.42037964]
[-272.01556396 152.08795166]
[-262.45922852 153.31855774]
[-253.96263123 157.98400879]
[-247.72132874 165.47616577]
[-233.02838135 162.45669556]
[-218.33543396 159.43721008]
[-203.64247131 156.41773987]
[-188.94952393 153.39825439]
[-174.25657654 150.37878418]
[-159.61672974 147.11157227]
[-145.03413391 143.59757996]
[-139.25532532 138.96389771]
[-130.17559814 140.14959717]
[-115.53574371 136.88238525]
[-100.89588928 133.61518860]
[-86.25603485 130.34797668]
[-71.61618042 127.08078003]
[-56.97632217 123.81357574]
[-42.33646774 120.54637146]
[-34.59294510 107.87461090]
[-19.79259300 104.35265350]
[-6.55378914 112.56068420]
[8.08606625 109.29347992]
[22.72592163 106.02628326]
[37.36577988 102.75907898]
[52.00563431 99.49187469]
[66.64549255 96.22467041]
[81.28534698 92.95746613]
[104.65481567 76.56409454]
[114.80422974 65.51920319]
[124.95363617 54.47431946]
[135.10304260 43.42943573]
[145.25245667 32.38454819]
[155.40185547 21.33966446]
[165.55126953 10.29477882]
[175.70068359 -0.75010699]
[185.85009766 -11.79499245]
[195.99949646 -22.83987808]
[206.05526733 -33.97008133]
[216.01669312 -45.18481064]
[216.74308777 -49.51608658]
[218.63053894 -53.02839279]
[221.27491760 -55.45552063]
[224.22703552 -56.69145203]
[227.04927063 -56.79108047]
[237.74507141 -67.30773163]
[248.44087219 -77.82437897]
[259.13665771 -88.34103394]
[269.83245850 -98.85768127]
[273.48208618 -110.28597260]
[283.42959595 -114.16556549]
[292.61120605 -126.02719879]
[301.79278564 -137.88883972]
[310.97436523 -149.75047302]
[320.15597534 -161.61210632]
[329.33755493 -173.47373962]
[338.51913452 -185.33538818]
[347.70074463 -197.19702148]
[356.88232422 -209.05865479]
[366.06390381 -220.92028809]
[361.59057617 -235.77857971]
[366.73681641 -250.41741943]
[379.52383423 -259.20788574]
[395.03469849 -258.76986694]
[407.30523682 -249.27175903]
[411.61712646 -234.36581421]
[406.31237793 -219.78366089]
[393.43078613 -211.13243103]
[377.92553711 -211.73870850]
[368.74395752 -199.87705994]
[359.56237793 -188.01542664]
[350.38076782 -176.15379333]
[341.19918823 -164.29216003]
[332.01760864 -152.43052673]
[322.83599854 -140.56887817]
[313.65441895 -128.70724487]
[304.47283936 -116.84561157]
[295.29122925 -104.98397827]
[310.10861206 -107.31757355]
[323.98806763 -101.62895203]
[332.90545654 -89.56743622]
[334.27529907 -74.63011932]
[327.70043945 -61.14786911]
[315.08715820 -53.02968597]
[300.09249878 -52.62933350]
[287.06396484 -60.06288147]
[279.77905273 -73.17507935]
[280.34912109 -88.16188049]
[269.65332031 -77.64523315]
[258.95751953 -67.12858582]
[248.26171875 -56.61193466]
[237.56591797 -46.09528351]
[227.23141479 -35.22339249]
[217.27000427 -24.00866318]
[215.17404175 -16.90425110]
[207.04438782 -12.69046879]
[196.89497375 -1.64558339]
[186.74555969 9.39930248]
[176.59616089 20.44418716]
[166.44674683 31.48907280]
[156.29733276 42.53395844]
[146.14793396 53.57884216]
[135.99851990 64.62372589]
[125.84911346 75.66861725]
[115.69969940 86.71350098]
[129.16157532 80.09700775]
[143.58505249 84.21565247]
[151.52326965 96.94297791]
[148.87770081 111.70783234]
[137.01425171 120.88709259]
[122.05806732 119.74147797]
[111.73025513 108.86058807]
[117.41194153 122.74289703]
[123.09362793 136.62519836]
[134.56996155 137.37432861]
[144.88687134 142.33915710]
[152.56343079 150.76440430]
[156.51373291 161.40115356]
[156.20039368 172.69201660]
[151.70730591 182.99908447]
[143.72192383 190.84156799]
[148.69317627 204.99382019]
[153.66444397 219.14608765]
[158.63571167 233.29835510]
[163.60696411 247.45060730]
[177.38914490 255.66227722]
[179.41920471 271.57638550]
[168.13986206 282.98495483]
[152.20367432 281.13635254]
[143.83551025 267.44866943]
[149.45471191 252.42187500]
[144.48344421 238.26962280]
[139.51217651 224.11735535]
[134.54092407 209.96508789]
[129.56965637 195.81282043]
[111.40082550 191.52685547]
[99.37046814 177.05761719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 59]
[21 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[77 153]
[78 152]
[79 151]
[80 150]
[81 149]
[82 148]
[83 147]
[84 146]
[85 145]
[86 144]
[87 142]
[88 141]
[93 140]
[94 139]
[95 138]
[96 137]
[97 136]
[99 126]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[169 183]
[170 182]
[171 181]
[172 180]
[173 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
