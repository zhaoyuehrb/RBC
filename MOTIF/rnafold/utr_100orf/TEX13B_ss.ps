%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUUCAGGCGUGUUAAGCAGCGGGGUUGGCCUGUACUUCCUCUGGCCCUGGCUGAAGAGGGCUAGUGAAACCGUUAAGCCCCUAGGCGAUCAUGGCCUUGAGACCUGAGGACCCCAGUAGUGGGUUCCGGCACGGAAACGUGGUGGCCUUCAUCAUCGAGAAAAUGGCCAGGCACACGAAAGGCCCCGAGU\
) } def
/len { sequence length } bind def

/coor [
[64.29659271 208.87277222]
[70.34293365 193.03364563]
[70.34293365 178.03364563]
[70.34293365 163.03364563]
[60.81530380 151.44812012]
[46.09763336 148.55155945]
[31.37995911 145.65498352]
[16.66228676 142.75840759]
[1.92164373 139.98110962]
[-12.84100342 137.32324219]
[-27.60365105 134.66537476]
[-42.38733292 132.12713623]
[-57.19108582 129.70866394]
[-71.99483490 127.29019928]
[-81.04618073 137.69627380]
[-93.95620728 142.23158264]
[-107.31390381 139.81129456]
[-117.64574432 131.17355347]
[-122.31892395 118.65900421]
[-137.08157349 116.00113678]
[-148.29182434 126.56694794]
[-163.39747620 128.48344421]
[-176.57920837 121.22357178]
[-182.88296509 107.75506592]
[-197.64561462 105.09719849]
[-212.40826416 102.43933105]
[-227.17091370 99.78147125]
[-241.93356323 97.12360382]
[-256.69619751 94.46573639]
[-271.47988892 91.92749023]
[-286.28363037 89.50902557]
[-301.08740234 87.09056091]
[-312.00430298 93.97708893]
[-324.29211426 91.64862823]
[-331.45718384 81.89134979]
[-346.21984863 79.23348999]
[-352.58166504 81.11598206]
[-358.10525513 79.70491028]
[-361.41415405 76.24311066]
[-376.08300781 73.10859680]
[-390.75183105 69.97408295]
[-401.99029541 76.32233429]
[-414.15054321 73.39989471]
[-420.83331299 63.30618286]
[-435.44949341 59.93454742]
[-450.06564331 56.56290817]
[-464.68179321 53.19127274]
[-479.29797363 49.81963730]
[-493.91412354 46.44800186]
[-508.53027344 43.07636642]
[-523.14642334 39.70473099]
[-534.76666260 49.98818970]
[-550.21533203 51.44395828]
[-563.55200195 43.51226425]
[-569.64855957 29.24300385]
[-566.16070557 14.12300301]
[-554.42956543 3.96620750]
[-538.96606445 2.67811275]
[-525.71618652 10.75401783]
[-519.77478027 25.08857155]
[-505.15863037 28.46020889]
[-490.54248047 31.83184433]
[-475.92633057 35.20347977]
[-461.31015015 38.57511520]
[-446.69400024 41.94675064]
[-432.07785034 45.31838608]
[-417.46170044 48.69002533]
[-400.98947144 42.65513992]
[-387.61734009 55.30524445]
[-372.94848633 58.43975830]
[-358.27966309 61.57427216]
[-343.56198120 64.47084045]
[-328.79931641 67.12870789]
[-312.63958740 60.30101395]
[-298.66891479 72.28681183]
[-283.86517334 74.70527649]
[-269.06143188 77.12374115]
[-261.94305420 75.09655762]
[-254.03834534 79.70309448]
[-239.27569580 82.36095428]
[-224.51304626 85.01882172]
[-209.75039673 87.67668915]
[-194.98774719 90.33454895]
[-180.22509766 92.99241638]
[-169.61970520 82.56822968]
[-154.73364258 80.36168671]
[-141.24494934 87.42629242]
[-134.42370605 101.23849487]
[-119.66105652 103.89635468]
[-108.18830109 92.16438293]
[-91.82022095 89.55125427]
[-76.97018433 97.28126526]
[-69.57637024 112.48645020]
[-54.77262115 114.90491486]
[-39.96887207 117.32337952]
[-32.85049438 115.29619598]
[-24.94578552 119.90273285]
[-10.18313885 122.56059265]
[4.57950878 125.21846008]
[11.72977638 123.30681610]
[19.55885506 128.04074097]
[34.27652740 130.93731689]
[48.99420166 133.83387756]
[63.71187210 136.73045349]
[53.80170441 120.13860321]
[50.86228180 101.50926971]
[54.97523117 83.58152771]
[65.21001434 68.86302185]
[79.80593872 59.27939606]
[96.46636963 55.92449951]
[112.71708679 58.94350052]
[123.06294250 48.08241272]
[133.40879822 37.22132111]
[137.32473755 21.89239693]
[151.70541382 18.01352692]
[162.05126953 7.15243864]
[172.39712524 -3.70865011]
[182.74298096 -14.56973934]
[186.07341003 -30.62714577]
[201.72750854 -35.51399231]
[213.60168457 -24.20310974]
[209.48080444 -8.33016491]
[193.60406494 -4.22388220]
[183.25820923 6.63720655]
[172.91235352 17.49829483]
[162.56649780 28.35938454]
[159.39056396 42.91145325]
[144.26989746 47.56718063]
[133.92404175 58.42826843]
[123.57817841 69.28936005]
[127.29306030 75.80469513]
[134.72283936 88.83537292]
[138.43771362 95.35070801]
[153.05387878 91.97907257]
[167.67002869 88.60743713]
[182.28619385 85.23580170]
[193.90629578 73.66406250]
[209.66503906 78.20214081]
[213.35118103 94.18164062]
[201.17271423 105.16423035]
[185.65782166 99.85195923]
[171.04167175 103.22359467]
[156.42550659 106.59523010]
[141.80935669 109.96686554]
[144.02644348 117.30939484]
[144.93139648 125.43861389]
[158.52030945 131.79011536]
[172.10922241 138.14161682]
[185.69812012 144.49311829]
[199.28703308 150.84461975]
[211.88265991 142.16720581]
[227.03051758 140.96740723]
[240.65452576 147.46759033]
[249.13893127 159.83169556]
[250.28765869 174.68247986]
[263.87658691 181.03398132]
[279.38690186 176.93412781]
[292.17639160 186.61964417]
[292.43399048 202.66062927]
[279.96212769 212.75181580]
[264.32812500 209.15211487]
[257.52508545 194.62289429]
[243.93615723 188.27139282]
[231.80583191 196.91549683]
[216.87812805 198.33671570]
[203.15263367 192.05363464]
[194.35716248 179.66265869]
[192.93553162 164.43353271]
[179.34661865 158.08203125]
[165.75772095 151.73052979]
[152.16880798 145.37902832]
[138.57989502 139.02752686]
[128.05952454 149.71965027]
[134.63024902 163.20393372]
[141.20095825 176.68820190]
[156.53318787 178.39877319]
[168.49226379 188.14476013]
[173.26206970 202.81623840]
[169.32058716 217.73161316]
[157.92553711 228.13142395]
[142.71301270 230.69714355]
[128.53730774 224.61006165]
[119.92180634 211.81251526]
[119.61570740 196.38819885]
[127.71668243 183.25892639]
[121.14596558 169.77464294]
[114.57524872 156.29037476]
[107.26717377 157.97618103]
[92.65101624 161.34782410]
[85.34293365 163.03364563]
[85.34293365 178.03364563]
[85.34293365 193.03364563]
[91.38927460 208.87277222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 192]
[3 191]
[4 190]
[5 104]
[6 103]
[7 102]
[8 101]
[9 99]
[10 98]
[11 97]
[12 95]
[13 94]
[14 93]
[19 89]
[20 88]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[30 77]
[31 76]
[32 75]
[35 73]
[36 72]
[39 71]
[40 70]
[41 69]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[111 130]
[112 129]
[113 128]
[115 126]
[116 125]
[117 124]
[118 123]
[133 144]
[134 143]
[135 142]
[136 141]
[146 172]
[147 171]
[148 170]
[149 169]
[150 168]
[155 163]
[156 162]
[173 187]
[174 186]
[175 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
