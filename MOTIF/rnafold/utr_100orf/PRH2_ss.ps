%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUAAAGUUGGGAGUGACACCAGAGCCUUCUGCAAGAUGCUUCUGAUUCUGCUGUCAGUGGCCCUGCUGGCCUUCAGCUCAGCUCAGGACUUAGAUGAAGAUGUCAGCCAAGAAGACGUUCCCUUGGUAAUAUCAG\
) } def
/len { sequence length } bind def

/coor [
[196.05789185 214.89743042]
[193.59190369 204.45005798]
[195.74620056 193.85110474]
[184.61416626 183.79734802]
[173.48213196 173.74360657]
[156.17846680 171.04389954]
[150.57150269 153.54515076]
[139.21508789 143.74555969]
[127.85868835 133.94595337]
[116.50228882 124.14636230]
[105.14588928 114.34676361]
[91.65243530 107.79490662]
[76.92839050 104.93092346]
[62.20434189 102.06694031]
[46.99837875 113.25583649]
[28.73858261 109.92103577]
[18.81434059 94.61155701]
[3.97591758 92.41584015]
[-10.86250687 90.22012329]
[-25.70092964 88.02440643]
[-40.53935623 85.82868195]
[-55.32347107 91.46255493]
[-66.78105164 81.94556427]
[-81.61947632 79.74984741]
[-96.45790100 77.55413055]
[-111.29632568 75.35841370]
[-126.13475037 73.16269684]
[-133.98815918 86.14729309]
[-146.18167114 95.11174011]
[-160.83872986 98.71509552]
[-175.71841431 96.43851471]
[-188.55798340 88.65967560]
[-197.41702271 76.59059906]
[-200.97068787 62.08884430]
[-215.80911255 59.89312744]
[-230.64753723 57.69741058]
[-247.20111084 61.36006927]
[-255.30313110 46.46733093]
[-243.23526001 34.55922699]
[-228.45181274 42.85898590]
[-213.61338806 45.05470276]
[-198.77496338 47.25042343]
[-191.17376709 34.39930725]
[-179.19906616 25.41310883]
[-164.65690613 21.68608665]
[-149.75558472 23.81634521]
[-136.77021790 31.51009560]
[-127.69543457 43.62171936]
[-123.93903351 58.32427597]
[-109.10060883 60.51999283]
[-94.26218414 62.71570969]
[-79.42375946 64.91143036]
[-64.58533478 67.10714722]
[-50.86256409 61.31621933]
[-38.34363556 70.99026489]
[-23.50521278 73.18598175]
[-8.66678905 75.38169861]
[6.17163467 77.57741547]
[21.01005936 79.77313232]
[28.55438995 71.08414459]
[39.48221207 67.11126709]
[51.08316422 68.96427155]
[60.41912460 76.29223633]
[65.06832123 87.34288788]
[79.79237366 90.20687103]
[94.51641846 93.07085419]
[92.91122437 85.21489716]
[94.66231537 76.64534760]
[99.32980347 62.39001083]
[103.99728394 48.13467789]
[108.66477203 33.87934113]
[113.17086792 19.57217216]
[117.51499939 5.21499586]
[111.24044800 -9.55015182]
[118.99862671 -23.59259796]
[134.83810425 -26.14018059]
[146.60821533 -15.23861122]
[145.27992249 0.74935901]
[131.87217712 9.55912685]
[127.52804565 23.91630363]
[128.61080933 31.29157829]
[122.92010498 38.54682922]
[118.25262451 52.80216217]
[113.58513641 67.05749512]
[108.91764832 81.31283569]
[121.24127960 72.76133728]
[135.34991455 77.85509491]
[139.36849976 92.30677032]
[129.91465759 103.95258331]
[114.94548798 102.99036407]
[126.30188751 112.78995514]
[137.65829468 122.58955383]
[149.01469421 132.38916016]
[160.37109375 142.18875122]
[173.32336426 142.03291321]
[182.58917236 150.49922180]
[183.53587341 162.61157227]
[194.66790771 172.66531372]
[205.79994202 182.71905518]
[225.69467163 180.55241394]
[240.63003540 193.41491699]
[241.41351318 212.80801392]
[253.20112610 222.08444214]
[264.98873901 231.36085510]
[276.77636719 240.63728333]
[288.56399536 249.91369629]
[301.49597168 249.17274475]
[311.13491821 257.21170044]
[312.62796021 269.26889038]
[324.20294189 278.80935669]
[335.77789307 288.34979248]
[347.35287476 297.89025879]
[358.92782593 307.43069458]
[370.50280762 316.97113037]
[384.86041260 311.51635742]
[400.01928711 313.98703003]
[411.90176392 323.71853638]
[417.31149292 338.09317017]
[414.79333496 353.24423218]
[405.02462769 365.09613037]
[390.63308716 370.46081543]
[375.49002075 367.89517212]
[363.66879272 358.08935547]
[358.34924316 343.68106079]
[360.96234131 328.54611206]
[349.38739014 319.00564575]
[337.81240845 309.46520996]
[326.23745728 299.92477417]
[314.66247559 290.38430786]
[303.08752441 280.84387207]
[285.67953491 278.92883301]
[279.28756714 261.70132446]
[267.49993896 252.42489624]
[255.71232605 243.14848328]
[243.92471313 233.87205505]
[232.13708496 224.59562683]
[222.51039124 228.55610657]
[212.02888489 228.11532593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[7 94]
[8 93]
[9 92]
[10 91]
[11 90]
[12 66]
[13 65]
[14 64]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[34 42]
[35 41]
[36 40]
[68 85]
[69 84]
[70 83]
[71 82]
[72 80]
[73 79]
[102 136]
[103 135]
[104 134]
[105 133]
[106 132]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
