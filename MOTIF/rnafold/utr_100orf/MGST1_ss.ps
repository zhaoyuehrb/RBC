%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUCCCUGCAUUGCGCGCGACCCGGCGGCGGGACAGGCUUGCUGCUUCCUCCUCCUCGGCCUCACCAUUCCAGACCAAAAUUGAAAAAAUGGUUGACCUCACCCAGGUAAUGGAUGAUGAAGUAUUCAUGGCUUUUGCAUCCUAUGCAACAAUUAUUCUUUCAAAAAUGAUGCUUAUGAGUACUGCAA\
) } def
/len { sequence length } bind def

/coor [
[83.54980469 130.86524963]
[89.78349304 117.21979523]
[79.13336945 127.78269196]
[68.48323822 138.34559631]
[57.83311081 148.90849304]
[53.43809128 168.57057190]
[34.56265640 172.72077942]
[24.26570892 183.62825012]
[13.96876240 194.53572083]
[3.67181516 205.44319153]
[3.95146823 221.01751709]
[-6.64648199 231.93255615]
[-21.49594307 232.10317993]
[-31.79289055 243.01065063]
[-42.08983612 253.91812134]
[-52.38678360 264.82559204]
[-56.01071930 273.22937012]
[-62.94392014 275.82601929]
[-73.41887665 286.56265259]
[-83.89382935 297.29928589]
[-83.44828033 313.09729004]
[-94.36467743 324.52566528]
[-110.16651154 324.80416870]
[-121.47883606 313.76754761]
[-121.59024811 297.96365356]
[-110.43465424 286.76864624]
[-94.63046265 286.82434082]
[-84.15550995 276.08767700]
[-73.68055725 265.35104370]
[-63.29425430 254.52864075]
[-52.99730682 243.62117004]
[-42.70035934 232.71369934]
[-32.40341187 221.80622864]
[-33.08745575 206.97155762]
[-22.80026627 195.76315308]
[-7.23565388 195.14624023]
[3.06129384 184.23876953]
[13.35824108 173.33129883]
[23.65518761 162.42382812]
[22.44396400 152.25665283]
[27.13558197 142.90913391]
[36.39257812 137.58547974]
[47.27021408 138.25836182]
[57.92034149 127.69546509]
[68.57046509 117.13256836]
[79.22059631 106.56966400]
[82.04029083 98.96842957]
[87.05307007 94.20322418]
[92.65302277 92.66532135]
[87.80710602 78.46965027]
[76.02639008 67.90909576]
[79.23710632 53.36466217]
[74.39118958 39.16899490]
[62.61047363 28.60843658]
[65.82119751 14.06400394]
[60.97527313 -0.13166617]
[56.12935257 -14.32733631]
[41.44901276 -18.99571800]
[32.43780136 -31.26973343]
[32.38251877 -46.31835175]
[41.09478760 -58.36967468]
[36.24886703 -72.56534576]
[31.40294647 -86.76101685]
[26.55702400 -100.95668793]
[11.50788307 -99.97763062]
[-3.27038765 -102.92519379]
[-16.77157784 -109.59256744]
[-28.07801628 -119.51985931]
[-36.42294312 -132.02584839]
[-41.24251175 -146.25471497]
[-42.21387100 -161.23460388]
[-39.27680969 -175.94398499]
[-32.63741684 -189.38136292]
[-22.75366974 -200.63340759]
[-10.30381870 -208.93705750]
[-15.14973927 -223.13272095]
[-19.99566078 -237.32839966]
[-24.84158134 -251.52406311]
[-29.68750381 -265.71972656]
[-44.84722900 -267.49328613]
[-57.73155975 -275.67599487]
[-65.78229523 -288.64318848]
[-67.40097046 -303.82025146]
[-62.26617813 -318.19372559]
[-51.39744568 -328.90975952]
[-36.95276642 -333.84066772]
[-21.80014420 -332.00744629]
[-8.94813728 -323.77404785]
[-0.94852507 -310.77523804]
[0.61036468 -295.59194946]
[-4.58098698 -281.23880005]
[-15.49183273 -270.56564331]
[-10.64591217 -256.36999512]
[-5.79999065 -242.17431641]
[-0.95406955 -227.97865295]
[3.89185166 -213.78297424]
[18.82044220 -214.82539368]
[33.52143860 -211.96575928]
[46.99157715 -205.39309692]
[58.31000900 -195.55004883]
[66.70125580 -183.10307312]
[71.58833313 -168.89724731]
[72.63242340 -153.89898682]
[69.75636292 -139.13027954]
[63.15031433 -125.59897614]
[53.25918579 -114.23011017]
[40.75269318 -105.80260468]
[45.59861755 -91.60693359]
[50.44453812 -77.41126251]
[55.29045868 -63.21559525]
[69.55325317 -59.00718307]
[78.71138763 -47.06596756]
[79.08641815 -31.84385490]
[70.32501984 -19.17325783]
[75.17094421 -4.97758722]
[80.01686096 9.21808243]
[91.45096588 18.76326942]
[88.58686066 34.32307053]
[93.43277740 48.51874161]
[104.86688232 58.06393051]
[102.00276947 73.62373352]
[106.84869385 87.81940460]
[117.23499298 98.64182281]
[131.21945190 104.06720734]
[145.20391846 109.49259949]
[159.18836975 114.91799164]
[173.17283630 120.34338379]
[187.15730286 125.76877594]
[201.14175415 131.19416809]
[215.12622070 136.61955261]
[229.11067200 142.04495239]
[243.09513855 147.47033691]
[257.12374878 152.78053284]
[271.19555664 157.97518921]
[272.22885132 144.82737732]
[281.69610596 132.16213989]
[298.88983154 124.35160065]
[313.88528442 124.72164154]
[328.88070679 125.09169006]
[343.87615967 125.46173096]
[358.87158203 125.83177948]
[373.86700439 126.20182800]
[389.85049438 120.54807281]
[399.70794678 134.34179688]
[389.18212891 147.63250732]
[373.49697876 141.19726562]
[358.50152588 140.82720947]
[343.50610352 140.45716858]
[328.51068115 140.08712769]
[313.51522827 139.71707153]
[298.51980591 139.34703064]
[295.98043823 146.40405273]
[290.90167236 160.51809692]
[288.36230469 167.57513428]
[300.15539551 176.84457397]
[311.94851685 186.11401367]
[323.74163818 195.38346863]
[335.53472900 204.65290833]
[347.32785034 213.92236328]
[362.21893311 209.55950928]
[376.81915283 214.81436157]
[385.51440430 227.66630554]
[384.96115112 243.17350769]
[375.37219238 255.37313843]
[360.43460083 259.57418823]
[345.89227295 254.16127014]
[337.33697510 241.21575928]
[338.05838013 225.71546936]
[326.26528931 216.44601440]
[314.47216797 207.17657471]
[302.67907715 197.90711975]
[290.88595581 188.63768005]
[279.09286499 179.36824036]
[266.00088501 172.04698181]
[251.92909241 166.85234070]
[244.55279541 167.48640442]
[237.66975403 161.45480347]
[223.68528748 156.02940369]
[209.70082092 150.60401917]
[195.71636963 145.17861938]
[181.73190308 139.75323486]
[167.74745178 134.32785034]
[153.76298523 128.90245056]
[139.77851868 123.47706604]
[125.79406738 118.05167389]
[111.80960846 112.62628174]
[122.97698212 122.64075470]
[124.54611206 137.55845642]
[115.70684814 149.67733765]
[101.02291870 152.74040222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[7 39]
[8 38]
[9 37]
[10 36]
[13 33]
[14 32]
[15 31]
[16 30]
[18 29]
[19 28]
[20 27]
[49 122]
[50 121]
[52 119]
[53 118]
[55 116]
[56 115]
[57 114]
[61 110]
[62 109]
[63 108]
[64 107]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[123 186]
[124 185]
[125 184]
[126 183]
[127 182]
[128 181]
[129 180]
[130 179]
[131 178]
[132 177]
[133 175]
[134 174]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
[142 146]
[154 173]
[155 172]
[156 171]
[157 170]
[158 169]
[159 168]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
