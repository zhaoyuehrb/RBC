%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGCUGUCCCCUCAUCUGGCUCUUGUCUUAGCCGUUGCAGGUGAACCACUGGAUGGAUGGCUGAAAGGAAUUACACCGUAGUGACGGAGUUCUUCCUUACUGCAUUUACUGAACAUCUCCAGUGGAGGGUUCCUCUCUUCCUCAUAUUUUUGAGUU\
) } def
/len { sequence length } bind def

/coor [
[148.19070435 283.78979492]
[156.64595032 272.86502075]
[151.39128113 258.81552124]
[146.13662720 244.76600647]
[131.27381897 243.51589966]
[118.37464905 235.90533447]
[110.02480316 223.39768982]
[107.92496490 208.44407654]
[112.54467773 194.00297546]
[123.01866150 182.95503235]
[117.76399994 168.90553284]
[112.50933075 154.85603333]
[107.25466919 140.80651855]
[102.00000763 126.75701904]
[94.80957031 124.62452698]
[90.54433441 139.00534058]
[76.16358948 134.73986816]
[80.42868042 120.35952759]
[73.23824310 118.22702789]
[61.17349243 127.14004517]
[49.10874557 136.05305481]
[43.05757904 151.29495239]
[26.79505920 153.40740967]
[17.05066872 140.21730042]
[23.84860229 125.29348755]
[40.19572830 123.98831177]
[52.26047897 115.07529449]
[64.32522583 106.16227722]
[61.80213165 91.37600708]
[47.46435928 86.96824646]
[33.12658691 82.56049347]
[18.78881645 78.15274048]
[4.45104408 73.74498749]
[-9.88672733 69.33723450]
[-24.22449875 64.92948151]
[-38.56227112 60.52172470]
[-52.90004349 56.11397171]
[-67.01485443 67.42279816]
[-84.93434143 68.03214264]
[-99.52767181 57.88694000]
[-105.09967041 41.17457581]
[-119.60134125 37.34032822]
[-134.10301208 33.50607681]
[-148.60469055 29.67182732]
[-165.46316528 31.46855164]
[-171.85656738 15.76629639]
[-158.53782654 5.27593946]
[-144.77044678 15.17015457]
[-130.26876831 19.00440407]
[-115.76709747 22.83865356]
[-101.26541901 26.67290306]
[-93.05052185 17.65178299]
[-81.70445251 12.97165394]
[-69.37387848 13.58481503]
[-58.42039490 19.43568039]
[-50.96820450 29.45962524]
[-48.49229050 41.77619934]
[-34.15451813 46.18395233]
[-19.81674576 50.59170532]
[-5.47897339 54.99946213]
[8.85879803 59.40721512]
[23.19656944 63.81496811]
[37.53434372 68.22272491]
[51.87211227 72.63047791]
[66.20988464 77.03823090]
[87.48414612 69.97705841]
[89.56517792 55.12211609]
[91.64621735 40.26717377]
[93.72724915 25.41223145]
[95.80828094 10.55728912]
[97.88931274 -4.29765224]
[88.64467621 -16.83457565]
[90.96675110 -31.86995506]
[102.97576904 -40.60604095]
[105.05680084 -55.46098328]
[99.30889893 -70.20114136]
[108.73709869 -81.73189545]
[110.81813049 -96.58683777]
[112.89916229 -111.44178009]
[114.98019409 -126.29672241]
[108.33200073 -141.28784180]
[118.20794678 -154.37973022]
[134.44850159 -152.10458374]
[140.34678650 -136.80287170]
[129.83514404 -124.21568298]
[127.75410461 -109.36074066]
[125.67307281 -94.50580597]
[123.59204102 -79.65086365]
[129.48878479 -65.97322845]
[119.91174316 -53.37995148]
[117.83070374 -38.52500916]
[126.97686005 -26.82528877]
[125.07801056 -11.73061943]
[112.74425507 -2.21661949]
[110.66322327 12.63832283]
[108.58219147 27.49326515]
[106.50115967 42.34820557]
[104.42012024 57.20314789]
[102.33908844 72.05809021]
[107.48188019 77.51718140]
[116.43000031 65.47844696]
[122.60391235 51.80793762]
[137.39851379 49.33407974]
[147.68400574 60.25234985]
[144.33230591 74.87309265]
[130.31823730 80.22085571]
[117.76747131 88.43536377]
[122.91026306 93.89445496]
[137.86285400 92.70270538]
[152.81542969 91.51094818]
[167.76800537 90.31919861]
[182.72059631 89.12744141]
[190.69989014 75.81916046]
[204.99084473 69.77363586]
[220.09828186 73.31549835]
[230.21310425 85.08283234]
[231.44593811 100.55085754]
[223.32273865 113.77179718]
[208.96704102 119.66194153]
[193.89891052 115.95639801]
[183.91235352 104.08002472]
[168.95976257 105.27178192]
[154.00718689 106.46353149]
[139.05459595 107.65528870]
[124.10201263 108.84703827]
[116.04950714 121.50235748]
[121.30417633 135.55186462]
[126.55883789 149.60136414]
[131.81349182 163.65086365]
[137.06816101 177.70036316]
[152.22140503 179.16345215]
[165.18389893 187.02862549]
[173.41238403 199.69006348]
[175.31971741 214.60726929]
[170.58070374 228.81471252]
[160.18612671 239.51135254]
[165.44078064 253.56085205]
[170.69544983 267.61035156]
[187.03274536 271.88912964]
[197.51240540 284.92053223]
[198.17321777 301.46392822]
[188.95292664 315.01544189]
[194.48588562 328.95770264]
[200.01884460 342.89993286]
[205.55180359 356.84219360]
[220.15878296 362.87640381]
[226.14340210 377.50378418]
[219.95509338 392.04614258]
[205.26525879 397.87576294]
[190.78913879 391.53405762]
[185.11514282 376.78341675]
[191.60955811 362.37515259]
[186.07659912 348.43289185]
[180.54364014 334.49066162]
[175.01068115 320.54840088]
[161.79664612 318.44201660]
[151.27323914 310.00292969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 138]
[3 137]
[4 136]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[19 28]
[20 27]
[21 26]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[41 51]
[42 50]
[43 49]
[44 48]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[74 91]
[75 90]
[77 88]
[78 87]
[79 86]
[80 85]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[142 155]
[143 154]
[144 153]
[145 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
