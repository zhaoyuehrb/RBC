%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCAAUCAUUGUGACAUUUUUCUGAUUUCUUUUUUUUAGGUAACUGAAUAUUGGAUACAUGGCUCACACAAAUGAAUCGAUGGUGUCUGAGUUUGUACUUUUGGGACUCUCUAAUUCCUGGGGACUUCAACUUUUCUUUUUUGCCAUCUUCUCUAUAG\
) } def
/len { sequence length } bind def

/coor [
[-38.86992645 162.96697998]
[-44.75539017 159.62103271]
[-49.98923492 155.33706665]
[-54.42375946 150.23884583]
[-57.93429947 144.47305298]
[-60.42273712 138.20506287]
[-61.82022858 131.61427307]
[-76.79421234 130.73120117]
[-91.76819611 129.84814453]
[-106.74217987 128.96508789]
[-121.73567200 128.52336121]
[-136.73567200 128.52336121]
[-151.73567200 128.52336121]
[-166.73567200 128.52336121]
[-181.73567200 128.52336121]
[-196.73278809 128.81787109]
[-211.72122192 129.40676880]
[-226.70965576 129.99566650]
[-235.37705994 142.73074341]
[-249.71376038 147.86030579]
[-264.15112305 143.61451721]
[-273.21157837 131.82272339]
[-288.20001221 132.41162109]
[-303.18844604 133.00051880]
[-318.17687988 133.58941650]
[-333.16531372 134.17831421]
[-348.15374756 134.76721191]
[-363.13568115 135.50323486]
[-378.10964966 136.38629150]
[-393.08364868 137.26934814]
[-403.55609131 148.80043030]
[-418.75442505 149.48266602]
[-429.68298340 139.42773438]
[-444.65698242 140.31079102]
[-452.90908813 153.45164490]
[-467.32171631 159.20109558]
[-482.35287476 155.34835815]
[-492.22280884 143.37487793]
[-493.13632202 127.88471985]
[-484.74212646 114.83415222]
[-470.26797485 109.24139404]
[-455.27951050 113.25696564]
[-445.54003906 125.33680725]
[-430.56607056 124.45374298]
[-420.89505005 113.18398285]
[-405.72189331 112.07512665]
[-393.96670532 122.29536438]
[-378.99270630 121.41230774]
[-364.01873779 120.52924347]
[-357.49276733 116.97769165]
[-348.74264526 119.77877808]
[-333.75421143 119.18988037]
[-318.76577759 118.60098267]
[-303.77734375 118.01208496]
[-288.78890991 117.42318726]
[-273.80047607 116.83428955]
[-265.69311523 104.36797333]
[-251.63339233 99.00254059]
[-236.93843079 102.99144745]
[-227.29855347 115.00722504]
[-212.31011963 114.41832733]
[-197.32168579 113.82942963]
[-193.44934082 110.95410919]
[-187.71760559 110.51584625]
[-181.73567200 113.52336121]
[-166.73567200 113.52336121]
[-151.73567200 113.52336121]
[-136.73567200 113.52336121]
[-121.73567200 113.52336121]
[-118.97355652 111.25374603]
[-114.95726776 110.23717499]
[-110.30100250 111.05626678]
[-105.85911560 113.99109650]
[-90.88513184 114.87416077]
[-75.91114807 115.75722504]
[-60.93716812 116.64028931]
[-48.07031631 95.78028107]
[-25.35084343 86.30497742]
[-1.26661956 91.88967896]
[15.10542488 110.55785370]
[29.75691223 107.34321594]
[44.40840149 104.12857819]
[59.05989075 100.91394043]
[73.71138000 97.69930267]
[88.36286926 94.48466492]
[101.07490540 86.52200317]
[110.36132050 74.74225616]
[119.64772797 62.96249771]
[128.93414307 51.18274307]
[137.86962891 39.13463211]
[146.44644165 26.82860947]
[155.02326965 14.52258873]
[163.60008240 2.21656680]
[164.45382690 -14.16034222]
[179.18444824 -21.36736107]
[192.63833618 -11.99052525]
[190.97528076 4.32407904]
[175.90611267 10.79338646]
[167.32928467 23.09940720]
[158.75247192 35.40542984]
[150.17564392 47.71145248]
[150.45829773 51.27523422]
[148.99583435 55.15146637]
[145.66145325 58.50312424]
[140.71389771 60.46915436]
[131.42747498 72.24890900]
[122.14107513 84.02866364]
[112.85466003 95.80841827]
[120.18398285 108.89585876]
[135.08000183 107.13279724]
[149.97602844 105.36973572]
[164.87205505 103.60667419]
[179.76808167 101.84361267]
[194.66410828 100.08055115]
[205.68548584 88.42255402]
[221.65904236 89.91428375]
[230.33122253 103.41142273]
[225.04949951 118.56011200]
[209.86552429 123.73957825]
[196.42716980 114.97657776]
[181.53114319 116.73963928]
[166.63511658 118.50270081]
[151.73908997 120.26576233]
[136.84306335 122.02882385]
[121.94704437 123.79188538]
[135.86479187 129.38618469]
[144.81002808 141.42706299]
[149.80680847 155.57034302]
[150.41076660 170.55818176]
[146.56817627 185.05764771]
[138.62078857 197.77923584]
[127.27539825 207.59158325]
[113.54098511 213.62200928]
[98.63903046 215.33419800]
[83.89481354 212.57589722]
[70.61962128 205.59242249]
[59.99405670 195.00480652]
[52.96311188 181.75468445]
[50.15206909 167.02043152]
[51.81093597 152.11244202]
[57.79217529 138.35655212]
[67.56385040 126.97611237]
[80.26078796 118.98155975]
[91.57749939 109.13615417]
[76.92601776 112.35079193]
[62.27452850 115.56542969]
[47.62303925 118.78006744]
[32.97154999 121.99470520]
[18.32006264 125.20934296]
[17.90966606 132.04574585]
[16.35686302 138.70938110]
[13.70803642 145.01091003]
[10.04067326 150.77168274]
[5.46110535 155.82876587]
[0.10142398 160.03958130]
[-5.88432837 163.28591919]
[-12.32458496 165.47723389]
[-19.03517342 166.55319214]
[-25.82457733 166.48529053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 76]
[8 75]
[9 74]
[10 73]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[16 62]
[17 61]
[18 60]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 49]
[29 48]
[30 47]
[33 44]
[34 43]
[80 149]
[81 148]
[82 147]
[83 146]
[84 145]
[85 144]
[86 108]
[87 107]
[88 106]
[89 105]
[90 101]
[91 100]
[92 99]
[93 98]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
