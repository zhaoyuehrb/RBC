%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGACUCCAUUUGCUUCUCCUUAUUCUCCUUCUUUUUUCAAUUCUCUUAUCCCCAGUAAGAGGUGGUUUGGGUCCUGCGGAAGGUCAUUGUCUCAAUU\
) } def
/len { sequence length } bind def

/coor [
[116.45114899 352.83834839]
[125.94739532 339.90771484]
[125.01485443 324.93673706]
[124.08230591 309.96575928]
[123.14976501 294.99478149]
[122.21721649 280.02380371]
[121.28467560 265.05279541]
[107.31670380 248.61268616]
[116.59857941 228.32466125]
[113.81536865 213.58512878]
[103.85090637 202.51449585]
[108.89325714 187.51832581]
[106.11003876 172.77879333]
[103.32682800 158.03927612]
[100.54360962 143.29974365]
[97.76039124 128.56021118]
[83.80950928 123.63407135]
[74.17687988 112.40435791]
[71.43168640 97.86619568]
[76.30611420 83.89716339]
[87.50007629 74.22300720]
[84.71686554 59.48347473]
[81.93364716 44.74394608]
[68.98208618 39.74275589]
[60.29779816 29.05033684]
[58.09400558 15.56324673]
[62.84691620 2.86657572]
[73.19797516 -5.71900606]
[70.87449646 -20.53796196]
[61.09296417 -32.97307968]
[66.76544952 -46.74523163]
[64.44197083 -61.56418991]
[62.11849976 -76.38314819]
[59.79502869 -91.20210266]
[57.47155762 -106.02105713]
[55.14808273 -120.84001160]
[40.13486481 -122.27323151]
[25.95002174 -127.39582825]
[13.48522091 -135.88578796]
[3.52401352 -147.20945740]
[-3.30743170 -160.65498352]
[-6.57968426 -175.37718201]
[-6.08704758 -190.45060730]
[-1.86048925 -204.92771912]
[5.83430576 -217.89849854]
[16.51363564 -228.54756165]
[29.50619125 -236.20552063]
[43.99524689 -240.39099121]
[59.07000732 -240.84085083]
[73.78285980 -237.52684021]
[87.20895386 -230.65727234]
[98.50429535 -220.66397095]
[106.95886230 -208.17514038]
[112.04119110 -193.97581482]
[113.43180084 -178.95858765]
[111.04327393 -164.06745911]
[105.02576447 -150.23849487]
[95.75752258 -138.34098816]
[83.82117462 -129.12283325]
[69.96704102 -123.16349030]
[72.29051208 -108.34452820]
[74.61398315 -93.52557373]
[76.93746185 -78.70661926]
[79.26093292 -63.88766098]
[81.58440399 -49.06870651]
[91.19975281 -37.69353867]
[85.69345856 -22.86143494]
[88.01692963 -8.04247856]
[102.80611420 -1.10823500]
[110.68298340 13.38929558]
[108.40795898 29.89752579]
[96.67317200 41.96073151]
[99.45639038 56.70026016]
[102.23960876 71.43978882]
[116.19049072 76.36592865]
[125.82312012 87.59564209]
[128.56831360 102.13380432]
[123.69388580 116.10283661]
[112.49992371 125.77699280]
[115.28313446 140.51652527]
[118.06635284 155.25605774]
[120.84957123 169.99557495]
[123.63278961 184.73510742]
[133.79632568 196.86001587]
[128.55490112 210.80191040]
[131.33810425 225.54144287]
[139.35250854 229.03752136]
[145.18539429 235.42285156]
[147.88372803 243.53915405]
[147.05371094 251.95608521]
[142.91632080 259.22326660]
[136.25566101 264.12026978]
[137.18820190 279.09124756]
[138.12074280 294.06222534]
[139.05329895 309.03320312]
[139.98583984 324.00421143]
[140.91838074 338.97518921]
[151.94589233 350.62738037]
[149.56880188 366.49334717]
[135.61059570 374.40206909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[7 92]
[9 86]
[10 85]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[21 74]
[22 73]
[23 72]
[28 68]
[29 67]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
