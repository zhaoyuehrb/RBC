%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGACGCGAGCGGCCGCGCCGCCGCCGAGGGCUGGAGGAAGAUGGAGGCCCCGCCGGACGGCGCCGCCGACCUCGUGCCCCUGGACCGCUACGACG\
) } def
/len { sequence length } bind def

/coor [
[149.72659302 319.64413452]
[157.49386597 306.66244507]
[168.89387512 296.71783447]
[162.99237061 282.92755127]
[157.36776733 277.92861938]
[157.12918091 268.61541748]
[151.65940857 254.64825439]
[146.19299316 249.47680664]
[146.24415588 240.16069031]
[141.21141052 226.03018188]
[136.17864990 211.89965820]
[131.14590454 197.76914978]
[126.11315155 183.63864136]
[121.08040619 169.50811768]
[115.61063385 155.54096985]
[109.70912933 141.75067139]
[103.80762482 127.96037292]
[97.90612030 114.17007446]
[86.83123779 105.63552094]
[88.30358887 91.73143005]
[82.40208435 77.94113159]
[76.50057983 64.15083313]
[70.59907532 50.36054230]
[64.69757080 36.57024384]
[58.79606628 22.77994919]
[52.68081284 9.08310127]
[46.35328674 -4.51698780]
[40.02576065 -18.11707687]
[27.18916702 -27.36544991]
[28.83555603 -42.16878510]
[22.50802994 -55.76887131]
[15.93550873 -62.37149429]
[16.20256996 -69.89174652]
[10.30106544 -83.68203735]
[4.39956188 -97.47233582]
[-1.50194192 -111.26262665]
[-7.40344572 -125.05292511]
[-22.63131142 -125.23178101]
[-36.46720123 -131.59480286]
[-46.51396561 -143.03955078]
[-51.03093719 -157.58317566]
[-49.23553085 -172.70588684]
[-41.43880081 -185.78758240]
[-28.99158859 -194.56179810]
[-14.05044365 -197.50833130]
[0.79599065 -194.11668396]
[12.97547817 -184.97447205]
[20.37784958 -171.66564941]
[21.72060013 -156.49604797]
[16.77108955 -142.09388733]
[6.38684988 -130.95442200]
[12.28835392 -117.16413116]
[18.18985748 -103.37384033]
[24.09136200 -89.58354187]
[29.99286461 -75.79324341]
[36.10811996 -62.09639740]
[42.43564606 -48.49631119]
[54.81965256 -40.22070312]
[53.62585068 -24.44460297]
[59.95337677 -10.84451389]
[66.28089905 2.75557542]
[72.05824280 7.57717037]
[72.58636475 16.87844658]
[78.48786926 30.66874123]
[84.38936615 44.45903778]
[90.29087067 58.24933243]
[96.19237518 72.03962708]
[102.09387970 85.82992554]
[113.16876221 94.36447906]
[111.69641113 108.26856995]
[117.59791565 122.05886841]
[123.49942017 135.84916687]
[129.40092468 149.63946533]
[134.67683411 154.08737183]
[136.49934387 159.70770264]
[135.21092224 164.47537231]
[140.24366760 178.60588074]
[145.27641296 192.73640442]
[150.30917358 206.86691284]
[155.34191895 220.99743652]
[160.37466431 235.12794495]
[165.62657166 249.17848206]
[171.09634399 263.14562988]
[176.78266907 277.02606201]
[182.68417358 290.81634521]
[197.74896240 289.43542480]
[212.50273132 292.77932739]
[225.50001526 300.52050781]
[235.46751404 311.90048218]
[241.42868042 325.80444336]
[242.79949951 340.87017822]
[239.44569397 355.62167358]
[231.69583130 368.61376953]
[220.30915833 378.57363892]
[206.40121460 384.52548218]
[191.33457947 385.88623047]
[176.58531189 382.52252197]
[163.59840393 374.76397705]
[153.64617920 363.37060547]
[147.70365906 349.45870972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[6 83]
[7 82]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 73]
[16 72]
[17 71]
[18 70]
[20 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[26 61]
[27 60]
[28 59]
[30 57]
[31 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
