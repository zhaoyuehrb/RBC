%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAACGGGGCGGAGCGCGGCUGCGCCGGCGCGUCGAGGGGAGAGGCAGCAGCCGCGAUGGACGUGUUCCUCAUGAUCCGGCGCCACAAGACCACCAUCUUCACGGACGCCAAGGAGUCCAGCACGGUGUUCGAACUGAAGCGCAUCGUCGAGGGCA\
) } def
/len { sequence length } bind def

/coor [
[76.51054382 110.86388397]
[61.65559769 112.94491577]
[46.80065536 115.02594757]
[31.94571495 117.10697937]
[17.09077263 119.18801117]
[2.23583031 121.26905060]
[-1.96053612 124.55424500]
[-6.54082823 125.74383545]
[-10.62870216 125.04925537]
[-13.56384373 123.00380707]
[-28.51642609 124.19556427]
[-43.46900940 125.38731384]
[-52.41707230 141.10513306]
[-68.84817505 148.28135681]
[-86.15463257 144.23451233]
[-97.49829865 130.75595093]
[-112.39167786 132.54122925]
[-127.28506470 134.32649231]
[-142.17843628 136.11177063]
[-157.07182312 137.89704895]
[-171.96520996 139.68231201]
[-186.85858154 141.46759033]
[-201.75196838 143.25286865]
[-216.64535522 145.03813171]
[-231.52024841 146.97138977]
[-246.37518311 149.05241394]
[-261.23013306 151.13345337]
[-264.62472534 160.35316467]
[-271.12902832 167.63885498]
[-279.80236816 172.00097656]
[-289.41369629 172.86817932]
[-298.61618042 170.16178894]
[-306.13607788 164.30091858]
[-310.94885254 156.13819885]
[-325.92218018 157.03242493]
[-337.60256958 168.03007507]
[-353.46240234 165.61238098]
[-361.33538818 151.63398743]
[-355.18203735 136.81791687]
[-339.72268677 132.52978516]
[-326.81640625 142.05909729]
[-311.84307861 141.16487122]
[-299.70742798 124.77516937]
[-279.14605713 122.52305603]
[-263.31115723 136.27850342]
[-248.45622253 134.19747925]
[-233.60127258 132.11643982]
[-227.37945557 128.05181885]
[-218.43061829 130.14476013]
[-203.53724670 128.35948181]
[-188.64385986 126.57421112]
[-173.75047302 124.78894043]
[-158.85710144 123.00366211]
[-143.96371460 121.21839142]
[-129.07032776 119.43312073]
[-114.17695618 117.64784241]
[-99.28356934 115.86257172]
[-94.97552490 104.44741058]
[-86.15587616 95.91215515]
[-74.46864319 91.93377686]
[-62.12938309 93.33171082]
[-51.50522232 99.89995575]
[-44.66076279 110.43473053]
[-29.70817947 109.24298096]
[-14.75559616 108.05122375]
[0.15479736 106.41410828]
[15.00973892 104.33306885]
[29.86468124 102.25203705]
[44.71962357 100.17100525]
[59.57456589 98.08997345]
[74.42950439 96.00894165]
[76.96912384 86.25460052]
[83.21089935 77.89044952]
[92.44895172 72.30873108]
[103.46138763 70.55967712]
[114.67035675 73.16432953]
[124.36811829 80.00009155]
[133.98452759 68.48815155]
[143.60092163 56.97621536]
[152.98654175 45.27535629]
[162.13768005 33.39020157]
[171.28880310 21.50504875]
[180.43992615 9.61989498]
[189.47244263 -2.35564780]
[198.38546753 -14.42039585]
[195.45932007 -31.64084625]
[205.66990662 -45.39543152]
[222.33143616 -47.49412155]
[231.00282288 -59.73369598]
[239.67419434 -71.97326660]
[248.34558105 -84.21284485]
[245.44047546 -99.74783325]
[254.43995667 -112.73955536]
[270.00479126 -115.48025513]
[282.90063477 -106.34392548]
[285.47662354 -90.75098419]
[276.20446777 -77.95244598]
[260.58514404 -75.54146576]
[251.91377258 -63.30188751]
[243.24240112 -51.06231308]
[234.57101440 -38.82274246]
[238.49665833 -26.51683235]
[234.54258728 -14.01543140]
[223.94396973 -5.96938229]
[210.45021057 -5.50738096]
[201.53720093 6.55736780]
[200.08421326 13.84579468]
[192.32508850 18.77102280]
[183.17395020 30.65617561]
[174.02282715 42.54132843]
[164.87170410 54.42648315]
[164.59881592 59.24436569]
[161.26005554 63.92806244]
[155.11286926 66.59262085]
[145.49645996 78.10456085]
[135.88005066 89.61650085]
[137.07180786 104.56908417]
[148.39027405 114.41246796]
[159.70875549 124.25585175]
[171.02722168 134.09924316]
[186.06690979 130.76547241]
[200.02268982 136.85559082]
[207.62643433 149.84201050]
[206.14299011 164.63853455]
[217.46145630 174.48191833]
[228.77992249 184.32530212]
[240.09838867 194.16870117]
[251.41687012 204.01208496]
[262.73532104 213.85546875]
[274.05380249 223.69885254]
[285.66076660 233.20033264]
[297.54592896 242.35145569]
[313.57647705 241.71798706]
[323.95718384 253.94992065]
[320.72488403 269.66397095]
[306.35910034 276.80569458]
[291.88003540 269.89651489]
[288.39480591 254.23661804]
[276.50964355 245.08549500]
[272.93392944 245.19998169]
[269.12832642 243.55357361]
[265.93719482 240.05917358]
[264.21041870 235.01731873]
[252.89195251 225.17393494]
[241.57347107 215.33055115]
[230.25500488 205.48716736]
[218.93653870 195.64378357]
[207.61807251 185.80038452]
[196.29960632 175.95700073]
[181.85195923 179.47891235]
[167.93623352 173.75036621]
[159.96884155 160.77445984]
[161.18383789 145.41770935]
[149.86535645 135.57432556]
[138.54689026 125.73093414]
[127.22842407 115.88755035]
[109.20845795 128.17654419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[10 65]
[11 64]
[12 63]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 47]
[26 46]
[27 45]
[34 42]
[35 41]
[77 116]
[78 115]
[79 114]
[80 111]
[81 110]
[82 109]
[83 108]
[84 106]
[85 105]
[88 101]
[89 100]
[90 99]
[91 98]
[117 156]
[118 155]
[119 154]
[120 153]
[124 149]
[125 148]
[126 147]
[127 146]
[128 145]
[129 144]
[130 143]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
