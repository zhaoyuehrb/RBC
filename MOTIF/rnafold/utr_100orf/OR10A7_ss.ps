%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUCUGUGAAAAUCACACCAGAGUCACUGAAUUUAUUCUUCUUGGUUUUACAAACAACCCCGAGAUGCAAGUUUCCCUCUUUAUUUUUUUCCUGGCCA\
) } def
/len { sequence length } bind def

/coor [
[124.22105408 265.27416992]
[111.78686523 256.88421631]
[101.57574463 245.89636230]
[94.11826324 232.88153076]
[89.80192566 218.51596069]
[88.85101318 203.54614258]
[91.31462097 188.75096130]
[80.46348572 199.10725403]
[69.61235809 209.46356201]
[58.76122665 219.81985474]
[47.91009521 230.17616272]
[40.62644196 245.48579407]
[23.89880371 242.72491455]
[21.92111397 225.88670349]
[37.55379486 219.32502747]
[48.40492630 208.96873474]
[59.25605774 198.61242676]
[70.10718536 188.25613403]
[80.95832062 177.89982605]
[81.38812256 174.04206848]
[83.14389801 170.28907776]
[86.18727875 167.10321045]
[87.58496857 152.16847229]
[88.98265839 137.23373413]
[90.38034821 122.29898834]
[81.88731384 116.17755890]
[76.76029205 107.04973602]
[75.95207214 96.61180878]
[79.61284637 86.80353546]
[87.06230927 79.44765472]
[96.91607666 75.91116333]
[99.69929504 61.17163467]
[102.48251343 46.43210602]
[105.26572418 31.69257736]
[108.04894257 16.95304680]
[110.83216095 2.21351910]
[100.99097443 -5.81751728]
[95.59476471 -17.23600388]
[95.63726807 -29.79244423]
[101.04752350 -41.04281235]
[110.71585083 -48.82428360]
[122.72090912 -51.67094421]
[126.41509247 -66.20893097]
[130.10926819 -80.74691772]
[133.80345154 -95.28489685]
[137.49763489 -109.82288361]
[141.19181824 -124.36087036]
[128.99229431 -133.42947388]
[121.19608307 -146.47891235]
[118.99207306 -161.51921082]
[122.71636200 -176.25686646]
[131.80101013 -188.44445801]
[144.86068726 -196.22349548]
[159.90388489 -198.40771484]
[174.63661194 -194.66404724]
[186.81225586 -185.56336975]
[194.57409668 -172.49346924]
[196.73852539 -157.44741821]
[192.97547913 -142.71961975]
[183.85879517 -130.55596924]
[170.77870178 -122.81131744]
[155.72981262 -120.66668701]
[152.03562927 -106.12870026]
[148.34144592 -91.59071350]
[144.64726257 -77.05273438]
[140.95307922 -62.51474762]
[137.25889587 -47.97676086]
[149.13589478 -35.09990311]
[151.05551147 -17.53162956]
[142.08366394 -2.12594104]
[125.57168579 4.99673510]
[122.78847504 19.73626328]
[120.00525665 34.47579193]
[117.22203827 49.21532059]
[114.43881989 63.95484924]
[111.65560913 78.69438171]
[123.44770813 93.67642975]
[120.78769684 112.55604553]
[105.31508636 123.69667816]
[103.91739655 138.63142395]
[102.51970673 153.56616211]
[101.12201691 168.50090027]
[111.20361328 157.39407349]
[123.53857422 148.85893250]
[137.48597717 143.33895874]
[152.32109070 141.12098694]
[167.27307129 142.32025146]
[181.56500244 146.87443542]
[194.45425415 154.54692078]
[205.27111816 164.93901062]
[213.45350647 177.51075745]
[218.57626343 191.60888672]
[220.37321472 206.50085449]
[218.75099182 221.41288757]
[213.79386902 235.57009888]
[205.75944519 248.23690796]
[195.06517029 258.75512695]
[182.26675415 266.57818604]
[168.02920532 271.29962158]
[153.09230042 272.67410278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[22 82]
[23 81]
[24 80]
[25 79]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
