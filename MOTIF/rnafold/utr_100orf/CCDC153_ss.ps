%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUUCUCUCUGCCACUCCCCACGAGUGGGUCACUCCACGGGGAGCCCCAACGCUGGCAGGAGAGGAUCCUACAGGACAGCAAGGAGAUGCCACCUAAAAACAAAGAAAAAGGGAAGAAAUCUGGGGCACAGAAGAAGAAAAAGAACUGGGGUGCAGAUGUGGUGGCCGAGUCCAGGCACAGGCUGG\
) } def
/len { sequence length } bind def

/coor [
[86.72828674 196.24143982]
[86.22971344 181.24972534]
[85.73114014 166.25801086]
[85.23256683 151.26629639]
[84.73399353 136.27458191]
[72.27061462 127.92808533]
[58.21834564 133.17535400]
[44.16608429 138.42262268]
[30.11381721 143.66989136]
[16.06155396 148.91717529]
[2.00928855 154.16444397]
[-11.99888039 159.52832031]
[-25.96198654 165.00843811]
[-39.92509460 170.48855591]
[-53.88819885 175.96865845]
[-67.85130310 181.44877625]
[-81.36583710 187.95703125]
[-94.35621643 195.45703125]
[-107.34660339 202.95703125]
[-120.33698273 210.45703125]
[-133.32736206 217.95703125]
[-146.31774902 225.45703125]
[-150.52784729 242.42694092]
[-165.41084290 250.94223022]
[-181.52659607 246.16369629]
[-194.39051819 253.87857056]
[-207.25444031 261.59344482]
[-220.11836243 269.30834961]
[-232.98229980 277.02322388]
[-243.45606995 290.35501099]
[-259.16625977 283.98114014]
[-257.39053345 267.12045288]
[-240.69717407 264.15930176]
[-227.83325195 256.44442749]
[-214.96932983 248.72952271]
[-202.10540771 241.01464844]
[-189.24147034 233.29975891]
[-187.88978577 220.47456360]
[-179.26487732 210.62652588]
[-166.35139465 207.50401306]
[-153.81774902 212.46665955]
[-140.82736206 204.96665955]
[-127.83698273 197.46665955]
[-114.84660339 189.96665955]
[-101.85621643 182.46665955]
[-88.86583710 174.96665955]
[-103.67893982 172.60612488]
[-114.94299316 162.70051575]
[-119.17744446 148.31060791]
[-115.07387543 133.88284302]
[-103.90026093 123.87532043]
[-89.10921478 121.38034058]
[-75.27110291 127.16884613]
[-66.66185760 139.45219421]
[-65.94168854 154.43490601]
[-73.33142090 167.48567200]
[-59.36831284 162.00555420]
[-45.40520859 156.52543640]
[-31.44210243 151.04533386]
[-17.47899628 145.56521606]
[-12.39150810 140.18464661]
[-3.23798299 140.11218262]
[10.81428146 134.86489868]
[24.86654663 129.61763000]
[38.91881180 124.37036133]
[52.97107697 119.12308502]
[67.02333832 113.87581635]
[67.37172699 96.38565826]
[75.66395569 82.66535950]
[66.02214050 71.17469788]
[56.38032913 59.68402863]
[40.79349899 54.58669662]
[37.67973709 38.48587418]
[50.24221420 27.94470596]
[65.55773163 33.80704117]
[67.87099457 50.04221344]
[77.51280975 61.53288269]
[87.15462494 73.02355194]
[100.37487793 70.12371826]
[113.51820374 73.35434723]
[123.88767242 82.05252075]
[137.75775146 76.34107971]
[143.90400696 62.02810287]
[158.05162048 56.43346786]
[171.65898132 62.38118744]
[185.52906799 56.66974258]
[199.39915466 50.95829773]
[203.15209961 34.47478867]
[215.85974121 23.57898712]
[232.39160156 22.40930557]
[246.22668457 31.22879791]
[259.99993896 25.28760147]
[273.77316284 19.34640503]
[287.54641724 13.40520763]
[301.31967163 7.46401119]
[315.09289551 1.52281475]
[300.25280762 3.70723748]
[285.30358887 2.47416234]
[271.02197266 -2.11233902]
[258.15011597 -9.81394768]
[247.35678101 -20.23048210]
[239.20283508 -32.82069016]
[234.11196899 -46.93037033]
[232.34870911 -61.82637024]
[234.00465393 -76.73468781]
[238.99377441 -90.88066101]
[247.05682373 -103.52926636]
[257.77484131 -114.02325439]
[270.59094238 -121.81736755]
[284.83914185 -126.50659943]
[299.77908325 -127.84730530]
[314.63452148 -125.76981354]
[328.63354492 -120.38207245]
[341.04873657 -111.96403503]
[351.23495483 -100.95311737]
[358.66299438 -87.92144775]
[362.94683838 -73.54616547]
[363.86389160 -58.57422256]
[361.36651611 -43.78358078]
[355.58447266 -29.94276810]
[346.81823730 -17.77096939]
[335.52416992 -7.90127468]
[348.98413086 -14.52162552]
[362.44412231 -21.14197540]
[375.90408325 -27.76232719]
[382.41699219 -42.42389297]
[397.97634888 -46.33364105]
[410.64633179 -36.49234772]
[410.70764160 -20.44941139]
[398.11322021 -10.51159954]
[382.52444458 -14.30235004]
[369.06445312 -7.68199968]
[355.60449219 -1.06164908]
[342.14450073 5.55870152]
[342.45608521 13.05222702]
[357.44314575 12.42907429]
[372.43017578 11.80592155]
[387.41723633 11.18276882]
[402.40429688 10.55961704]
[416.46527100 5.33573294]
[425.77853394 17.09426117]
[417.47344971 29.58527946]
[403.02743530 25.54666710]
[388.04040527 26.16981888]
[373.05334473 26.79297256]
[358.06628418 27.41612434]
[343.07925415 28.03927803]
[343.39080811 35.53280258]
[357.35391235 41.01291656]
[371.31701660 46.49303436]
[386.53729248 41.42126083]
[399.91323853 50.27924347]
[401.18395996 66.27188873]
[389.37469482 77.13101196]
[373.54449463 74.52642822]
[365.83691406 60.45613861]
[351.87380981 54.97602463]
[337.91070557 49.49590683]
[330.38027954 43.64622879]
[324.88607788 36.79336166]
[321.52508545 29.44769478]
[320.28228760 22.11948395]
[321.03408813 15.29605675]
[307.26086426 21.23725319]
[293.48760986 27.17844963]
[279.71435547 33.11964417]
[265.94113159 39.06084061]
[252.16789246 45.00203705]
[250.45817566 58.25339508]
[242.35511780 69.01294708]
[229.89257812 74.40203094]
[216.28773499 72.91281891]
[205.11059570 64.82839203]
[191.24050903 70.53983307]
[177.37042236 76.25128174]
[171.89682007 90.05618286]
[157.91194153 96.04598236]
[143.46920776 90.21116638]
[129.59912109 95.92261505]
[128.88050842 113.41663361]
[118.07771301 128.57226562]
[99.72570038 135.77601624]
[100.22427368 150.76773071]
[100.72284698 165.75944519]
[101.22142792 180.75114441]
[101.72000122 195.74285889]
[108.28945923 211.37226868]
[95.08946228 222.01165771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 186]
[2 185]
[3 184]
[4 183]
[5 182]
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[69 78]
[70 77]
[71 76]
[81 179]
[82 178]
[85 175]
[86 174]
[87 173]
[91 168]
[92 167]
[93 166]
[94 165]
[95 164]
[96 163]
[122 134]
[123 133]
[124 132]
[125 131]
[148 158]
[149 157]
[150 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
