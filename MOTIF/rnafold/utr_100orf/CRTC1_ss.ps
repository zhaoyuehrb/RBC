%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCCGGCGCUUGCGCGGUGGCACGGGCGAGUGGGGGGGCGAGGAGGUGGAGGAGGAGGAGGAGGAGGAGGAGGUGGCGGCGAGAAGAUGGCGACUUCGAACAAUCCGCGGAAAUUCAGCGAGAAGAUCGCGCUGCACAAUCAGAAGCAGGCGGAGGAGACGGCGGCCUUCGAGGAGGUCAUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[23.55083656 190.52795410]
[13.16688919 201.35263062]
[9.19749928 219.32493591]
[-7.82055426 223.57583618]
[-18.02314568 234.57160950]
[-28.22573662 245.56738281]
[-26.78429604 264.44271851]
[-39.36704254 278.15615845]
[-57.65866470 278.33383179]
[-67.49013519 289.66265869]
[-77.32160950 300.99148560]
[-87.15308380 312.32028198]
[-96.98455811 323.64910889]
[-106.81603241 334.97793579]
[-116.64750671 346.30676270]
[-119.84893799 361.80065918]
[-134.03442383 366.34173584]
[-143.86590576 377.67053223]
[-142.50047302 393.41574097]
[-152.73233032 405.46084595]
[-168.49108887 406.65972900]
[-180.42735291 396.30108643]
[-181.45954895 380.53054810]
[-170.97529602 368.70446777]
[-155.19471741 367.83908081]
[-145.36325073 356.51025391]
[-142.86502075 341.82666016]
[-127.97632599 336.47528076]
[-118.14485168 325.14645386]
[-108.31337738 313.81762695]
[-98.48190308 302.48883057]
[-88.65042877 291.16000366]
[-78.81895447 279.83117676]
[-68.98748016 268.50238037]
[-72.24373627 257.54483032]
[-69.77213287 246.26124573]
[-62.07524872 237.48785400]
[-50.98365402 233.48707581]
[-39.22151566 235.36479187]
[-29.01892281 224.36901855]
[-18.81633186 213.37324524]
[-18.95195007 201.26557922]
[-10.52546310 192.01998901]
[2.34221172 190.96868896]
[12.72615910 180.14401245]
[7.16753817 173.63368225]
[2.09346914 166.73902893]
[-2.46956325 159.49600220]
[-6.49774170 151.94244385]
[-9.97004128 144.11775208]
[-12.86833668 136.06278992]
[-15.17750072 127.81958771]
[-16.88547897 119.43118286]
[-17.98335838 110.94135284]
[-18.46540833 102.39440918]
[-18.32911110 93.83496857]
[-17.57518005 85.30770874]
[-16.20754814 76.85713959]
[-14.23335457 68.52736664]
[-11.66290569 60.36186600]
[-8.50961685 52.40326309]
[-4.78994656 44.69309998]
[-0.52331144 37.27161789]
[4.26801872 30.17755318]
[9.55903530 23.44793892]
[15.32212067 17.11789703]
[21.52719307 11.22047043]
[28.14186668 5.78644037]
[35.13161087 0.84417063]
[42.45994949 -3.58054161]
[50.08862305 -7.46460104]
[57.97781372 -10.78773403]
[53.55648804 -25.12132645]
[49.13515854 -39.45491791]
[44.71383286 -53.78850937]
[40.29250336 -68.12210083]
[28.83127785 -79.02856445]
[32.47340393 -93.47100830]
[28.05207443 -107.80459595]
[12.95184135 -110.02849579]
[0.31672660 -118.59100342]
[-7.34455729 -131.79205322]
[-8.51085758 -147.01054382]
[-2.95060420 -161.22483826]
[8.23221016 -171.61268616]
[22.81723022 -176.11157227]
[37.90858841 -173.82823181]
[50.50988770 -165.21603394]
[58.11912537 -151.98492432]
[59.22548676 -136.76194763]
[53.60930252 -122.56965637]
[42.38566589 -112.22592926]
[46.80699539 -97.89233398]
[57.95197678 -88.01110840]
[54.62609482 -72.54343414]
[59.04742432 -58.20983887]
[63.46875000 -43.87624741]
[67.89007568 -29.54265404]
[72.31140900 -15.20906162]
[95.51402283 -18.40465355]
[118.89191437 -16.97385025]
[141.53164673 -10.97255802]
[162.54862976 -0.63526160]
[181.12165833 13.63413143]
[196.52503967 31.27807617]
[208.15692139 51.60717392]
[222.20919800 46.35990524]
[236.26145935 41.11263275]
[250.31372070 35.86536026]
[264.36599731 30.61808777]
[249.51828003 28.48598862]
[235.79438782 22.43167305]
[226.21824646 10.88622761]
[222.80534363 -3.72035050]
[226.27401733 -18.31378365]
[235.89421082 -29.82255936]
[249.64112854 -35.82440186]
[264.62142944 -35.05608749]
[277.68218994 -27.67933655]
[269.87774658 -14.86954594]
[282.86813354 -22.36954689]
[295.85852051 -29.86954689]
[308.84887695 -37.36954498]
[314.37329102 -52.43143082]
[329.63851929 -57.36630249]
[342.93435669 -48.38854599]
[344.06140137 -32.38512802]
[332.15505981 -21.63250351]
[316.34887695 -24.37916565]
[303.35852051 -16.87916565]
[290.36813354 -9.37916470]
[277.37774658 -1.87916493]
[279.22842407 5.38891459]
[284.78045654 27.19315338]
[299.77581787 27.56711388]
[314.77114868 27.94107437]
[329.76647949 28.31503487]
[337.70657349 15.16777229]
[351.16427612 7.76601171]
[366.51950073 8.10079002]
[379.64181519 16.08205414]
[387.00137329 29.56288147]
[386.61846924 44.91699982]
[378.59609985 58.01422882]
[365.09225464 65.33147430]
[349.73941040 64.90044403]
[336.66741943 56.83707428]
[329.39251709 43.31037140]
[314.39718628 42.93641281]
[299.40185547 42.56245041]
[284.40652466 42.18849182]
[269.61325073 44.67035294]
[255.56098938 49.91762543]
[241.50872803 55.16489792]
[227.45646667 60.41216660]
[213.40420532 65.65943909]
[216.87219238 80.48905182]
[218.40939331 95.64099121]
[217.99041748 110.86494446]
[215.62217712 125.90940857]
[211.34381104 140.52583313]
[205.22598267 154.47274780]
[197.36976624 167.51974487]
[187.90493774 179.45129395]
[176.98789978 190.07025146]
[164.79896545 199.20120239]
[172.19075012 212.25347900]
[179.58251953 225.30574036]
[186.97430420 238.35800171]
[194.36607361 251.41026306]
[201.75785828 264.46252441]
[216.15803528 272.30899048]
[216.29232788 288.70761108]
[202.02259827 296.78884888]
[188.02830505 288.23947144]
[188.70559692 271.85430908]
[181.31381226 258.80203247]
[173.92204285 245.74978638]
[166.53025818 232.69750977]
[159.13848877 219.64524841]
[151.74670410 206.59298706]
[137.70133972 212.33163452]
[123.03781128 216.22842407]
[107.99654388 218.21946716]
[92.82415771 218.27210999]
[77.76942444 216.38551331]
[63.07920456 212.59059143]
[48.99435425 206.94956970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[4 41]
[5 40]
[6 39]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[17 26]
[18 25]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[78 93]
[79 92]
[106 156]
[107 155]
[108 154]
[109 153]
[110 152]
[120 132]
[121 131]
[122 130]
[123 129]
[134 151]
[135 150]
[136 149]
[137 148]
[166 181]
[167 180]
[168 179]
[169 178]
[170 177]
[171 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
