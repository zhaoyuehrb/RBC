%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCUAGGACAGUGAUAAGGGCCUUGGGUACAAAAUGCUCCUGAUUCUGGUGUAGCUCCAUGGCGAGUCAGAACACUGAACAGGAAUAUGAAGCCAAGCUGGCCCCAUCUGUUGGUGGAGAGCCAACAAGCGGGGGCCCAUCUGGUUCUUCACCUGAUC\
) } def
/len { sequence length } bind def

/coor [
[186.44439697 309.42703247]
[176.92536926 297.83441162]
[172.84146118 283.40106201]
[174.87530518 268.53958130]
[182.68695068 255.73419189]
[194.97059631 247.12536621]
[209.67298889 244.15216064]
[224.33497620 247.31086731]
[213.93865967 236.49807739]
[203.54235840 225.68527222]
[193.14604187 214.87246704]
[182.74972534 204.05966187]
[172.24777222 193.34944153]
[161.64117432 182.74284363]
[158.79058838 182.63555908]
[155.81262207 181.36291504]
[153.16256714 178.87124634]
[151.30628967 175.27656555]
[150.65966797 170.86311340]
[140.91795349 159.45703125]
[131.17622375 148.05093384]
[121.43450928 136.64485168]
[111.69278717 125.23876190]
[94.33142853 127.23203278]
[79.20748901 118.47668457]
[72.29045868 102.42849731]
[76.31052399 85.42176819]
[66.12850952 74.40692902]
[55.94649887 63.39208984]
[43.77560043 66.49364471]
[31.51590157 64.11934662]
[21.49968529 56.78377151]
[15.60555267 45.93930054]
[14.90619850 33.68888092]
[19.47368813 22.37830925]
[9.73196697 10.97221851]
[-0.00975375 -0.43387058]
[-14.85573769 -5.90262938]
[-17.23795128 -20.60549736]
[-26.97967148 -32.01158524]
[-36.72139359 -43.41767502]
[-46.46311188 -54.82376480]
[-56.20483398 -66.22985840]
[-64.20132446 -70.75389099]
[-66.02317810 -77.95685577]
[-75.53907776 -89.55200958]
[-85.05496979 -101.14717102]
[-92.96109772 -105.82733154]
[-94.64117432 -113.06467438]
[-103.92758942 -124.84442902]
[-113.21399689 -136.62419128]
[-122.50040436 -148.40394592]
[-131.78681946 -160.18368530]
[-152.13143921 -166.80642700]
[-154.42089844 -187.28991699]
[-164.38468933 -198.50253296]
[-174.34846497 -209.71516418]
[-184.31225586 -220.92778015]
[-200.10191345 -221.60787964]
[-210.72425842 -233.31007385]
[-209.87725830 -249.09164429]
[-198.06343079 -259.58969116]
[-182.29168701 -258.57586670]
[-171.91914368 -246.65171814]
[-173.09963989 -230.89157104]
[-163.13584900 -219.67895508]
[-153.17205811 -208.46632385]
[-143.20826721 -197.25369263]
[-134.28781128 -198.18507385]
[-125.82195282 -194.82839966]
[-119.78296661 -187.82817078]
[-117.64083099 -178.69271851]
[-120.00705719 -169.47010803]
[-110.72064972 -157.69035339]
[-101.43424225 -145.91059875]
[-92.14783478 -134.13084412]
[-82.86142731 -122.35108948]
[-73.45981598 -110.66307068]
[-63.94391632 -99.06790924]
[-54.42801666 -87.47275543]
[-44.79874420 -75.97157288]
[-35.05702209 -64.56548309]
[-25.31530190 -53.15939713]
[-15.57358170 -41.75330734]
[-5.83186102 -30.34721756]
[8.31733036 -25.69429970]
[11.39633560 -10.17559147]
[21.13805580 1.23049819]
[30.87977791 12.63658810]
[48.35795212 10.41404819]
[63.82677078 19.17098618]
[71.04158020 35.58761978]
[66.96133423 53.21007919]
[77.14334869 64.22491455]
[87.32536316 75.23975372]
[99.05506897 72.20030212]
[110.96408844 74.43625641]
[120.79251099 81.52331543]
[126.67523956 92.11660767]
[127.49594116 104.20588684]
[123.09887695 115.49703979]
[132.84059143 126.90312958]
[142.58232117 138.30921936]
[152.32403564 149.71530151]
[162.06576538 161.12139893]
[172.24777222 172.13623047]
[182.85437012 182.74284363]
[191.18116760 186.62553406]
[193.56253052 193.66334534]
[203.95884705 204.47615051]
[214.35516357 215.28895569]
[224.75146484 226.10176086]
[235.14778137 236.91456604]
[246.83580017 246.31617737]
[259.62539673 254.15365601]
[272.41500854 261.99111938]
[285.20458984 269.82861328]
[297.99420166 277.66607666]
[310.78381348 285.50357056]
[323.57342529 293.34103394]
[336.36300659 301.17852783]
[349.15261841 309.01599121]
[361.94223022 316.85348511]
[374.73181152 324.69094849]
[387.52142334 332.52844238]
[401.94467163 324.49417114]
[418.35781860 324.81277466]
[432.29833984 333.30322266]
[440.02337646 347.57553101]
[439.51473999 363.70260620]
[452.45574951 371.28747559]
[468.84915161 370.85366821]
[477.18969727 384.97341919]
[468.89736938 399.12152100]
[452.50256348 398.74365234]
[444.87088013 384.22848511]
[431.92987061 376.64364624]
[420.50299072 384.17352295]
[406.87966919 386.04345703]
[393.72030640 381.83050537]
[383.61959839 372.30529785]
[378.59500122 359.29177856]
[379.68392944 345.31802368]
[366.89434814 337.48056030]
[354.10473633 329.64306641]
[341.31512451 321.80560303]
[328.52554321 313.96810913]
[315.73593140 306.13064575]
[302.94631958 298.29315186]
[290.15673828 290.45568848]
[277.36712646 282.61819458]
[264.57751465 274.78073120]
[251.78791809 266.94323730]
[238.99832153 259.10577393]
[245.22621155 272.75177002]
[245.47224426 287.74975586]
[239.69532776 301.59271240]
[228.86108398 311.96667480]
[214.78053284 317.13757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 107]
[14 106]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[27 95]
[28 94]
[29 93]
[35 89]
[36 88]
[37 87]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[45 80]
[46 79]
[47 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[55 68]
[56 67]
[57 66]
[58 65]
[114 154]
[115 153]
[116 152]
[117 151]
[118 150]
[119 149]
[120 148]
[121 147]
[122 146]
[123 145]
[124 144]
[125 143]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
