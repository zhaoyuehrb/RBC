%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUGCCAGCAGAACCAGCAGCAGUGCCAGCCUCUGCCCAAGUGCCCCUCACCCAAGUGCCCCCCAAAGAGCUCAGCACAGUGUCUGCCUCCAGCCU\
) } def
/len { sequence length } bind def

/coor [
[63.45687485 241.10670471]
[56.29960251 240.55099487]
[49.47001648 238.39021301]
[40.35402679 250.30233765]
[38.11172104 265.96383667]
[24.23242950 271.36889648]
[15.11643982 283.28100586]
[6.00044870 295.19314575]
[4.41870546 311.51583862]
[-10.61805344 318.06011963]
[-23.64130020 308.09384155]
[-21.25383377 291.86941528]
[-5.91167593 286.07714844]
[3.20431471 274.16500854]
[12.32030487 262.25289917]
[13.91057205 247.44343567]
[28.44190025 241.18635559]
[37.55789185 229.27423096]
[30.56407166 206.24638367]
[41.99309921 184.81082153]
[65.44268799 177.65292358]
[70.47544098 163.52241516]
[75.50819397 149.39189148]
[80.54093933 135.26138306]
[85.35332489 121.05430603]
[89.94418335 106.77411652]
[94.08871460 92.35804749]
[97.78289795 77.82006073]
[101.47708130 63.28207779]
[105.17126465 48.74409485]
[99.71739197 31.24260139]
[112.25166321 19.06912613]
[115.49192810 4.42328453]
[118.73219299 -10.22255707]
[117.52530670 -19.46030807]
[122.30769348 -25.27015114]
[126.00187683 -39.80813599]
[129.69606018 -54.34612274]
[116.80845642 -63.81962204]
[108.53157043 -77.46173096]
[106.09333801 -93.19222260]
[109.83394623 -108.62541199]
[119.15876770 -121.43198395]
[132.63261414 -129.69056702]
[148.20062256 -132.17591858]
[151.44088745 -146.82176208]
[154.68115234 -161.46759033]
[157.92143250 -176.11343384]
[146.18450928 -185.93704224]
[140.36796570 -200.09425354]
[141.80841064 -215.33183289]
[150.17481995 -228.14830017]
[163.54466248 -235.59851074]
[178.84565735 -235.97048950]
[192.56172180 -229.17874146]
[201.54103088 -216.78395081]
[203.72019958 -201.63436890]
[198.59844971 -187.21125793]
[187.35275269 -176.82893372]
[172.56726074 -172.87316895]
[169.32699585 -158.22732544]
[166.08673096 -143.58148193]
[162.84646606 -128.93565369]
[174.71170044 -121.27483368]
[183.24432373 -109.98257446]
[187.39097595 -96.41876221]
[186.62799072 -82.22573853]
[181.02752686 -69.12941742]
[171.25123596 -58.72947311]
[158.47216797 -52.30387878]
[144.23405457 -50.65193939]
[140.53987122 -36.11395264]
[136.84568787 -21.57596779]
[133.37803650 -6.98228931]
[130.13777161 7.66355181]
[126.89749908 22.30939293]
[133.16496277 32.78493118]
[130.45758057 45.10136795]
[119.70925140 52.43827820]
[116.01506805 66.97626495]
[112.32087708 81.51424408]
[108.62669373 96.05223083]
[110.29315186 101.22920990]
[108.83613586 106.95583344]
[104.22438049 111.36497498]
[99.63352203 125.64517212]
[99.97439575 134.95518494]
[94.67145538 140.29412842]
[89.63870239 154.42465210]
[84.60595703 168.55516052]
[79.57320404 182.68566895]
[85.19087219 187.42518616]
[89.57708740 193.30345154]
[92.50862885 200.00949097]
[93.83899689 207.19053650]
[93.50570679 214.47061157]
[91.53320312 221.47012329]
[88.03121185 227.82575989]
[83.18865204 233.20925903]
[77.26346588 237.34443665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[6 15]
[7 14]
[8 13]
[21 91]
[22 90]
[23 89]
[24 88]
[25 86]
[26 85]
[27 82]
[28 81]
[29 80]
[30 79]
[32 76]
[33 75]
[34 74]
[36 73]
[37 72]
[38 71]
[45 63]
[46 62]
[47 61]
[48 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
