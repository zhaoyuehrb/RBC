%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGCGGCGUGGCCAGAGGGACCUGUGGCGUCACAACAAAAGCUGCGCACGCAACCGCUGUCCCCGCCCACCUCGGGAGAGGGGCGGGGCCGGCUUUC\
) } def
/len { sequence length } bind def

/coor [
[141.06575012 125.56949615]
[136.22770691 110.32380676]
[121.27304077 109.15855408]
[106.31837463 107.99329376]
[98.52437592 110.59111786]
[90.91910553 106.55213165]
[76.00791168 104.92234802]
[61.09671021 103.29256439]
[46.18551254 101.66278076]
[31.27431679 100.03300476]
[16.27431679 100.03300476]
[1.36311901 101.66278076]
[-13.54807854 103.29256439]
[-28.40137672 105.38529968]
[-43.18240738 107.93894958]
[-57.96343613 110.49260712]
[-72.74446869 113.04625702]
[-85.02596283 123.01999664]
[-98.88466644 117.56238556]
[-113.66569519 120.11603546]
[-125.91130066 131.02369690]
[-141.39331055 125.61634827]
[-144.18515015 109.45659637]
[-131.41482544 99.16821289]
[-116.21934509 105.33500671]
[-101.43831635 102.78134918]
[-90.21406555 92.99026489]
[-75.29811859 98.26522827]
[-60.51708984 95.71157074]
[-45.73606110 93.15792084]
[-30.95503044 90.60426331]
[-27.43422318 87.14093781]
[-21.64315414 85.96908569]
[-15.17786121 88.38137054]
[-0.26666328 86.75158691]
[14.64453411 85.12180328]
[3.76048970 74.80010223]
[1.79893649 59.92890930]
[9.63436699 47.13805389]
[23.77361870 42.12990189]
[37.91318130 47.13717651]
[45.74940491 59.92754364]
[43.78877640 74.79885864]
[32.90409851 85.12180328]
[47.81529617 86.75158691]
[62.72649384 88.38137054]
[77.63768768 90.01115417]
[92.54888916 91.64093018]
[107.48362732 93.03862000]
[122.43830109 94.20388031]
[137.39297485 95.36914062]
[143.52554321 82.41366577]
[153.71131897 72.37161255]
[166.69799805 66.44867706]
[180.89878845 65.34589386]
[194.58633423 69.17674255]
[206.10278320 77.45581055]
[214.06062317 89.16024017]
[217.50981140 102.85604095]
[232.42100525 104.48581696]
[247.33219910 106.11560059]
[262.24340820 107.74538422]
[276.80255127 101.55330658]
[288.61380005 110.62764740]
[303.52499390 112.25743103]
[318.43618774 113.88721466]
[333.34738159 115.51699829]
[348.25857544 117.14677429]
[363.16976929 118.77655792]
[378.08099365 120.40634155]
[392.99218750 122.03612518]
[399.45745850 119.62384033]
[405.24853516 120.79569244]
[408.76934814 124.25901794]
[423.55038452 126.81267548]
[438.33142090 129.36633301]
[453.52688599 123.19953156]
[466.29721069 133.48791504]
[463.50537109 149.64767456]
[448.02334595 155.05502319]
[435.77777100 144.14735413]
[420.99673462 141.59370422]
[406.21569824 139.04005432]
[391.36239624 136.94732666]
[376.45120239 135.31753540]
[361.54000854 133.68775940]
[346.62881470 132.05796814]
[331.71762085 130.42819214]
[316.80639648 128.79841614]
[301.89520264 127.16862488]
[286.98400879 125.53884888]
[273.49142456 131.84748840]
[260.61361694 122.65657806]
[245.70242310 121.02680206]
[230.79122925 119.39701843]
[215.88002014 117.76723480]
[208.53143311 131.71492004]
[196.38665771 141.82696533]
[181.26542664 146.55017090]
[165.44798279 145.14167786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 51]
[3 50]
[4 49]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[11 36]
[12 35]
[13 34]
[14 31]
[15 30]
[16 29]
[17 28]
[19 26]
[20 25]
[59 96]
[60 95]
[61 94]
[62 93]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
