%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGACCGGGUAGAGGCAGGCCCACAGCAUGUCCUCCAAGGUUUACUCCACAGGGUCUGCCAUCUUAGCCUCUCAUCCCUCUGUAGGCUCCAGAGCUAAGGACCACCAGCCCUCGGGUCCGGAGUGUC\
) } def
/len { sequence length } bind def

/coor [
[108.09741974 273.01486206]
[114.14376068 257.17572021]
[114.14376068 242.17572021]
[114.14376068 227.17572021]
[103.46288300 216.85804749]
[103.24920654 201.64590454]
[114.14376068 190.51278687]
[114.14376068 175.51278687]
[114.14376068 160.51278687]
[114.14376068 145.51278687]
[98.78654480 145.47059631]
[84.95823669 140.61802673]
[74.04645538 131.92129517]
[66.98793030 120.70455933]
[64.19275665 108.46653748]
[65.53722382 96.68833160]
[51.27138138 92.05307770]
[37.00553131 87.41782379]
[22.73968315 82.78256989]
[8.47383595 78.14731598]
[-5.79201126 73.51206207]
[-20.05785942 68.87680054]
[-34.32370758 64.24154663]
[-48.58955383 59.60629272]
[-57.60261536 73.08187866]
[-70.00995636 83.49511719]
[-84.81916809 90.02320099]
[-100.84855652 92.15370178]
[-116.82141113 89.72472382]
[-131.46772766 82.93723297]
[-143.62515259 72.33843231]
[-152.33120728 58.77765274]
[-156.89958191 43.33828735]
[-156.97410583 27.25126839]
[-171.44723511 23.31065750]
[-185.92037964 19.37004662]
[-202.79158020 21.04295540]
[-209.06953430 5.29418516]
[-195.67413330 -5.09810925]
[-181.97976685 4.89691305]
[-167.50662231 8.83752346]
[-153.03349304 12.77813435]
[-146.17770386 0.71550554]
[-136.60466003 -9.34143925]
[-124.87767029 -16.79393578]
[-111.68847656 -21.19667625]
[-97.81645203 -22.28442001]
[-84.08255768 -19.98797035]
[-71.30074310 -14.43854713]
[-60.22969055 -5.96030378]
[-51.52782822 4.94860315]
[-45.71413040 17.64528465]
[-43.13718414 31.38000298]
[-43.95429993 45.34044647]
[-29.68845177 49.97570038]
[-15.42260456 54.61095428]
[-1.15675652 59.24621201]
[13.10909081 63.88146591]
[27.37493896 68.51672363]
[41.64078522 73.15197754]
[55.90663528 77.78723145]
[70.17248535 82.42248535]
[90.33870697 62.24903870]
[122.16462708 62.78698730]
[146.22645569 88.39939880]
[157.69119263 78.72676086]
[169.15592957 69.05413055]
[180.62066650 59.38149643]
[192.08540344 49.70886612]
[203.55014038 40.03623199]
[208.15222168 32.02577591]
[215.41076660 30.27244949]
[227.10588074 20.87967300]
[238.80099487 11.48689461]
[236.57067871 -3.64495659]
[242.17687988 -17.76824570]
[254.02091980 -27.12693214]
[268.85983276 -29.28618813]
[282.69403076 -23.76520729]
[294.38912964 -33.15798569]
[306.08425903 -42.55076218]
[311.51519775 -58.02450943]
[327.67919922 -60.79172134]
[337.94808960 -48.00572586]
[331.75814819 -32.81966019]
[315.47702026 -30.85564804]
[303.78192139 -21.46286964]
[292.08679199 -12.07009220]
[294.49252319 2.62950325]
[289.18212891 16.65290260]
[277.48815918 26.19845390]
[262.48785400 28.62500191]
[248.19377136 23.18201065]
[236.49865723 32.57478714]
[224.80354309 41.96756744]
[213.22277832 51.50096893]
[201.75804138 61.17359924]
[190.29330444 70.84623718]
[178.82856750 80.51886749]
[167.36383057 90.19149780]
[155.89909363 99.86413574]
[155.44625854 107.35044861]
[170.14482117 104.35840607]
[184.60578918 100.37342072]
[196.25862122 109.81861115]
[195.35348511 124.79128265]
[182.64770508 132.76393127]
[168.77131653 127.06503296]
[154.54057312 122.32308197]
[154.08773804 129.80940247]
[164.30297852 140.79342651]
[174.51821899 151.77746582]
[190.34469604 156.07330322]
[194.27548218 171.99440002]
[182.26689148 183.16247559]
[166.67236328 178.08877563]
[163.53417969 161.99269104]
[153.31893921 151.00866699]
[143.10371399 140.02464294]
[129.14375305 145.51278687]
[129.14375305 160.51278687]
[129.14375305 175.51278687]
[129.14375305 190.51278687]
[140.03831482 201.64590454]
[139.82463074 216.85804749]
[129.14375305 227.17572021]
[129.14375305 242.17572021]
[129.14375305 257.17572021]
[135.19009399 273.01486206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 128]
[3 127]
[4 126]
[7 123]
[8 122]
[9 121]
[10 120]
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[34 42]
[35 41]
[36 40]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[72 95]
[73 94]
[74 93]
[79 88]
[80 87]
[81 86]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
