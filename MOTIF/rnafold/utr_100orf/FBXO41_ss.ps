%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCUCGCUGGACCUGCCGUACCGCUGCCCCCGCUGCGGGGAGCACAAGCGCUUCCGGAGCCUGUCGUCGCUGCGCGCGCACCUGGAGUACAGCCACA\
) } def
/len { sequence length } bind def

/coor [
[67.36344147 242.01394653]
[75.58992767 227.82743835]
[75.12342834 212.83468628]
[74.65692902 197.84194946]
[74.19042969 182.84919739]
[72.79273987 167.91445923]
[70.46926880 153.09550476]
[68.14579773 138.27655029]
[54.85562515 131.32159424]
[41.35558701 137.85986328]
[34.85597992 144.53427124]
[27.33248520 144.38420105]
[13.63563633 150.49945068]
[0.03554738 156.82698059]
[-13.46449280 163.36523438]
[-20.06656456 177.98687744]
[-35.64943695 181.80180359]
[-48.25925827 171.88354492]
[-48.22285843 155.84053040]
[-35.56815720 145.97959900]
[-20.00275803 149.86520386]
[-6.50271893 143.32693481]
[-1.77155530 137.47529602]
[7.52038240 136.80259705]
[21.21723175 130.68734741]
[34.81732178 124.35981750]
[48.31735992 117.82155609]
[50.64083099 103.00259399]
[39.78969955 92.64629364]
[28.93857002 82.28999329]
[17.92769241 72.10370636]
[6.75973082 62.08988190]
[-4.40823078 52.07605743]
[-15.57619190 42.06223679]
[-26.74415398 32.04841614]
[-42.57334137 25.97608376]
[-41.12027359 9.08451939]
[-24.48658943 5.80475044]
[-16.73033142 20.88045311]
[-5.56237030 30.89427567]
[5.60559130 40.90809631]
[16.77355385 50.92192078]
[27.94151497 60.93574142]
[35.14990997 63.09548950]
[39.29487228 71.43886566]
[50.14599991 81.79516602]
[60.99713135 92.15146637]
[71.92735291 74.87385559]
[89.17638397 66.12194824]
[107.37443542 67.36766052]
[121.45191956 77.14505005]
[134.03620911 68.98198700]
[146.62051392 60.81892395]
[159.20480347 52.65586090]
[160.90551758 41.68711090]
[168.28756714 33.69735718]
[178.65623474 31.23869514]
[188.42433167 34.90754700]
[201.49177551 27.54263496]
[209.71501160 14.02638340]
[224.60150146 14.51781750]
[237.66894531 7.15290594]
[250.73638916 -0.21200514]
[252.38444519 -15.64131355]
[262.81182861 -27.13259125]
[278.00897217 -30.26720619]
[292.13232422 -23.83983612]
[299.75109863 -10.32193661]
[297.93579102 5.08858633]
[287.38436890 16.46607018]
[272.15408325 19.43564034]
[258.10131836 12.85543823]
[245.03385925 20.22035027]
[231.96641541 27.58526039]
[224.67785645 40.57472610]
[208.85668945 40.61008072]
[195.78924561 47.97499084]
[187.40739441 65.28271484]
[167.36785889 65.24015045]
[154.78356934 73.40321350]
[142.19927979 81.56627655]
[129.61499023 89.72933960]
[132.69808960 101.87754822]
[130.77954102 114.81291962]
[123.74558258 126.47679138]
[112.32553864 134.85656738]
[98.03207397 138.32766724]
[82.96475220 135.95307922]
[85.28822327 150.77203369]
[87.61170197 165.59098816]
[90.75698853 169.15997314]
[92.32295990 173.16119385]
[92.37989807 177.00459290]
[91.19559479 180.19306946]
[89.18317413 182.38270569]
[89.64967346 197.37544250]
[90.11617279 212.36819458]
[90.58267212 227.36093140]
[99.67520905 241.00856018]
[92.16075897 255.58474731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 95]
[6 90]
[7 89]
[8 88]
[9 27]
[10 26]
[12 25]
[13 24]
[14 22]
[15 21]
[28 47]
[29 46]
[30 45]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[51 82]
[52 81]
[53 80]
[54 79]
[58 77]
[59 76]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
