%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUAAAGAAGUCGGCCAGCAGCUCCAAGAUGAUUUGAUGAAGGUCCUGAACGAGCUCUACUCGGUCAUGAAGACAUAUCACAUGUACAAUGCCGACAGCAUCAGUGCUCAGAGCAAACUAAAGGAGGCGGAGAAGC\
) } def
/len { sequence length } bind def

/coor [
[103.59438324 309.34075928]
[90.10935211 316.19708252]
[75.16529846 318.54873657]
[60.22626877 316.16531372]
[46.75584793 309.28033447]
[36.07373047 298.56829834]
[29.22644234 285.07870483]
[26.88480568 270.13305664]
[29.27823257 255.19563293]
[36.17224121 241.72982788]
[46.89142609 231.05488586]
[60.38562775 224.21664429]
[75.33282471 221.88502502]
[77.69608307 207.07235718]
[72.06060028 193.28501892]
[81.87549591 180.87622070]
[84.23875427 166.06355286]
[86.60201263 151.25088501]
[78.14554596 138.86186218]
[63.48997879 135.66584778]
[54.35186005 136.89770508]
[48.54107666 132.22845459]
[33.96148682 128.70205688]
[19.38189316 125.17565918]
[4.80230093 121.64926147]
[-9.77729130 118.12286377]
[-18.77091408 130.34539795]
[-31.72395897 138.17237854]
[-46.64648438 140.43774414]
[-61.25985718 136.82708740]
[-73.34470367 127.92082977]
[-81.07794952 115.10121918]
[-83.30783844 100.33786011]
[-97.88742828 96.81146240]
[-112.46701813 93.28505707]
[-127.04661560 89.75865936]
[-141.62620544 86.23226166]
[-156.01344299 93.33063507]
[-170.47160339 86.37786865]
[-173.90963745 70.70752716]
[-163.69017029 58.34056091]
[-147.65269470 58.76384354]
[-138.09980774 71.65267181]
[-123.52021027 75.17906952]
[-108.94062042 78.70546722]
[-94.36103058 82.23186493]
[-79.78143311 85.75827026]
[-71.05105591 73.64588928]
[-58.31394958 65.77749634]
[-43.49470139 63.37859344]
[-28.84655380 66.84548187]
[-16.60882187 75.68016052]
[-8.66457462 88.56161499]
[-6.25089169 103.54326630]
[8.32870007 107.06967163]
[22.90829277 110.59606934]
[37.48788452 114.12246704]
[52.06747818 117.64886475]
[66.68598938 121.01028442]
[81.34155273 124.20629120]
[71.58753967 100.93291473]
[82.61687469 80.27342987]
[103.82381439 76.14674377]
[110.67894745 62.80481339]
[117.53407288 49.46287918]
[124.38920593 36.12094498]
[125.54721832 26.97317314]
[131.55299377 22.55755806]
[138.70788574 9.37395287]
[145.86279297 -3.80965161]
[139.00097656 -15.81884766]
[138.99127197 -29.54163742]
[145.72872925 -41.37190247]
[157.34941101 -48.25410080]
[170.74485779 -48.47223663]
[178.19587708 -61.49077988]
[185.64689636 -74.50932312]
[193.09790039 -87.52786255]
[190.29171753 -103.32358551]
[200.99942017 -115.27033234]
[217.00697327 -114.20357513]
[226.03474426 -100.94165039]
[221.15740967 -85.65795898]
[206.11643982 -80.07684326]
[198.66543579 -67.05830383]
[191.21441650 -54.03976440]
[183.76339722 -41.02122498]
[190.97209167 -26.31598091]
[187.99542236 -10.04323483]
[175.80616760 1.38451231]
[159.04640198 3.34524703]
[151.89149475 16.52885056]
[144.73660278 29.71245575]
[137.73114014 42.97607040]
[130.87600708 56.31800842]
[124.02088165 69.65994263]
[117.16574860 83.00187683]
[127.30388641 101.75571442]
[118.78380585 124.10914612]
[133.78285217 124.27864838]
[148.78189087 124.44815826]
[163.78092957 124.61766815]
[177.80175781 116.11186218]
[192.04627991 124.23748016]
[191.86096191 140.63557434]
[177.43643188 148.43719482]
[163.61143494 139.61671448]
[148.61238098 139.44720459]
[133.61334229 139.27769470]
[118.61430359 139.10818481]
[131.69593811 146.44786072]
[144.77757263 153.78755188]
[159.76237488 154.46258545]
[173.49743652 160.49151611]
[184.13760376 171.06443787]
[190.25350952 184.76100159]
[191.02355957 199.74122620]
[186.34428406 213.99269104]
[176.84429932 225.60089111]
[163.79981995 233.00639343]
[148.96321106 235.21437073]
[134.32760620 231.92819214]
[121.85911560 223.58930969]
[113.23274231 211.31797791]
[109.60733032 196.76268005]
[111.46990967 181.87882996]
[106.44229126 167.74649048]
[101.41467285 153.61415100]
[99.05141449 168.42680359]
[96.68816376 183.23947144]
[102.15460205 198.08630371]
[92.50875092 209.43560791]
[90.14549255 224.24827576]
[103.62512207 231.11520386]
[114.32158661 241.81291199]
[121.18695068 255.29333496]
[123.54861450 270.23580933]
[121.17520905 285.17645264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 133]
[14 132]
[16 130]
[17 129]
[18 128]
[19 60]
[20 59]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[63 97]
[64 96]
[65 95]
[66 94]
[68 93]
[69 92]
[70 91]
[75 87]
[76 86]
[77 85]
[78 84]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
