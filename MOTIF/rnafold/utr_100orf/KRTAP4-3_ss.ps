%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCAGCUCCUGCUGUGGCUCUGUCUGCUCUGACCAGAGCUGUGGUCAAGGUCUCGGCCAGGAGAGCUGCUGCCGCCCCAGCUGCUGCCAGACCACCU\
) } def
/len { sequence length } bind def

/coor [
[71.86550140 203.56787109]
[81.36175537 190.63725281]
[80.42920685 175.66627502]
[79.49666595 160.69528198]
[78.56411743 145.72430420]
[77.63157654 130.75331116]
[76.45636749 115.26557159]
[82.30059052 103.74553680]
[91.97821045 98.72058105]
[81.12708282 88.36428070]
[70.27594757 78.00798035]
[59.42481995 67.65167999]
[48.57368851 57.29537964]
[37.72255707 46.93907928]
[26.71167946 36.75278473]
[15.54371738 26.73896217]
[4.37575626 16.72513962]
[-11.06422710 13.27296734]
[-15.37474251 -0.98426670]
[-26.54270363 -10.99808884]
[-37.71066666 -21.01191139]
[-48.87862778 -31.02573204]
[-64.31861115 -34.47790527]
[-68.62912750 -48.73514175]
[-79.79708862 -58.74896240]
[-95.23706818 -62.20113373]
[-99.54758453 -76.45836639]
[-110.71554565 -86.47219086]
[-122.33840179 -95.95423889]
[-134.39085388 -104.88387299]
[-146.44331360 -113.81350708]
[-158.49577332 -122.74313354]
[-170.54821777 -131.67277527]
[-186.89353943 -133.00047302]
[-193.67089844 -147.93363953]
[-183.90834045 -161.11030579]
[-167.64874268 -158.97544861]
[-161.61859131 -143.72521973]
[-149.56613159 -134.79559326]
[-137.51368713 -125.86595917]
[-125.46122742 -116.93632507]
[-113.40876770 -108.00669098]
[-109.72151184 -108.24987030]
[-105.74170685 -106.60189819]
[-102.41636658 -102.95121002]
[-100.70172882 -97.64015198]
[-89.53376770 -87.62632751]
[-74.89258575 -84.89041138]
[-69.78326416 -69.91692352]
[-58.61530304 -59.90310287]
[-43.97412872 -57.16718292]
[-38.86480713 -42.19369507]
[-27.69684410 -32.17987061]
[-16.52888107 -22.16604996]
[-5.36092043 -12.15222836]
[9.28025532 -9.41631031]
[14.38957787 5.55717897]
[25.55753899 15.57100105]
[36.72550201 25.58482361]
[43.93389893 27.74456978]
[48.07885742 36.08794785]
[58.92998886 46.44424820]
[69.78112030 56.80054855]
[80.63224792 67.15684509]
[91.48338318 77.51314545]
[102.33451080 87.86944580]
[115.93460083 94.19697571]
[130.84579468 95.82675934]
[145.75700378 97.45653534]
[160.31614685 91.26446533]
[172.12739563 100.33879852]
[187.03858948 101.96858215]
[201.94978333 103.59836578]
[216.86099243 105.22814941]
[229.02589417 95.13902283]
[244.75390625 96.68999481]
[254.71385193 108.96089935]
[252.99667358 124.67162323]
[240.62115479 134.50128174]
[224.92947388 132.61810303]
[215.23120117 120.13934326]
[200.32000732 118.50956726]
[185.40881348 116.87978363]
[170.49760437 115.25000000]
[157.00502014 121.55864716]
[144.12721252 112.36773682]
[129.21601868 110.73795319]
[114.30481720 109.10816956]
[108.87925720 114.28632355]
[119.23537445 125.13762665]
[108.38389587 135.49356079]
[98.02812195 124.64262390]
[92.60255432 129.82077026]
[93.53510284 144.79176331]
[94.46764374 159.76274109]
[95.40019226 174.73371887]
[96.33273315 189.70471191]
[107.36025238 201.35690308]
[104.98314667 217.22286987]
[91.02494812 225.13160706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 59]
[16 58]
[17 57]
[19 55]
[20 54]
[21 53]
[22 52]
[24 50]
[25 49]
[27 47]
[28 46]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[67 88]
[68 87]
[69 86]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
