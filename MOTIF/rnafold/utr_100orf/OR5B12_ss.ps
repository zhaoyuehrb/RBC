%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGCAGCUACAUAAUUCCCAAUGGAGAACAACACAGAGGUGACUGAAUUCAUCCUUGUGGGGUUAACUGAUGACCCAGAACUGCAGAUCCCACUCUUCAUAGUCUUCCUUUUCAUCUACC\
) } def
/len { sequence length } bind def

/coor [
[129.67465210 270.96765137]
[141.58784485 261.42623901]
[138.17004395 246.82081604]
[134.75224304 232.21539307]
[131.33444214 217.60995483]
[120.90071106 206.98043823]
[125.29006958 191.78030396]
[121.87226868 177.17488098]
[118.26822662 162.61428833]
[114.47853851 148.10090637]
[110.68884277 133.58752441]
[103.37894440 131.90960693]
[106.68527985 146.54067993]
[96.06084442 157.12942505]
[81.44098663 153.77386475]
[76.49733734 139.61192322]
[85.85340118 127.88681793]
[78.54350281 126.20891571]
[64.85594940 132.34494019]
[51.16839600 138.48097229]
[42.00692368 152.08242798]
[25.66791153 150.67930603]
[18.95953560 135.71502686]
[28.78279495 122.58354950]
[45.03236389 124.79341888]
[58.71992111 118.65738678]
[72.40747070 112.52135468]
[74.02297974 105.19741821]
[59.72206116 109.72331238]
[48.65199661 99.60137177]
[51.88273239 84.95342255]
[66.18357086 80.42726135]
[77.25398254 90.54953003]
[78.86949158 83.22558594]
[69.03342438 71.90074921]
[59.19735718 60.57592010]
[49.36129379 49.25108719]
[39.52522659 37.92625809]
[24.63435936 32.58092117]
[22.13018227 17.89833450]
[12.29411602 6.57350159]
[2.45805073 -4.75132990]
[-7.37801456 -16.07616234]
[-17.21408081 -27.40099335]
[-32.99500656 -28.26000214]
[-43.48404694 -40.08182907]
[-42.45824432 -55.85279083]
[-30.52618217 -66.21625519]
[-14.76694584 -65.02377319]
[-4.53021002 -52.98280716]
[-5.88924837 -37.23706055]
[3.94681716 -25.91222763]
[13.78288269 -14.58739567]
[23.61894798 -3.26256371]
[33.45501328 8.06226826]
[47.64234161 12.59757614]
[50.85005951 28.09019089]
[60.68612289 39.41502380]
[70.52218628 50.73985672]
[80.35825348 62.06468582]
[90.19432068 73.38951874]
[105.04656219 71.28927612]
[111.35688019 57.68119812]
[117.66720581 44.07312012]
[123.97753143 30.46504021]
[130.28785706 16.85696030]
[136.59817505 3.24888229]
[132.45137024 -12.24897480]
[142.09811401 -25.06770897]
[158.13824463 -25.37388420]
[168.26715088 -12.93263054]
[164.71479797 2.71218872]
[150.20625305 9.55920601]
[143.89593506 23.16728592]
[137.58561707 36.77536392]
[131.27528381 50.38344193]
[124.96495819 63.99151993]
[118.65464020 77.59960175]
[122.65067291 83.94638824]
[132.25331116 72.42296600]
[146.18011475 77.99472046]
[145.18464661 92.96164703]
[130.64273071 96.63996887]
[134.63876343 102.98675537]
[149.63754272 103.17831421]
[163.53540039 95.61787415]
[176.16282654 103.51707458]
[191.16160583 103.70863342]
[206.16036987 103.90018463]
[217.30113220 92.69040680]
[233.10537720 92.72514343]
[244.19674683 103.98378754]
[243.99491882 119.78678894]
[232.61964417 130.75849915]
[216.81965637 130.38960266]
[205.96882629 118.89896393]
[190.97004700 118.70740509]
[175.97126770 118.51585388]
[163.14622498 126.08998871]
[149.44598389 118.17708588]
[134.44720459 117.98553467]
[125.20222473 129.79782104]
[128.99191284 144.31120300]
[132.78160095 158.82458496]
[138.03530884 166.44236755]
[136.47769165 173.75708008]
[139.89550781 188.36250305]
[150.57369995 200.03669739]
[145.93986511 214.19215393]
[149.35768127 228.79759216]
[152.77548218 243.40301514]
[156.19328308 258.00845337]
[171.10319519 261.27301025]
[183.11482239 270.69021606]
[189.84324646 284.39022827]
[189.95254517 299.65295410]
[183.42100525 313.44796753]
[171.54547119 323.03619385]
[156.68385315 326.51397705]
[141.78691101 323.19070435]
[129.81245422 313.72628784]
[123.13803101 299.99987793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[3 111]
[4 110]
[5 109]
[7 107]
[8 106]
[9 104]
[10 103]
[11 102]
[18 27]
[19 26]
[20 25]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[84 101]
[85 100]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
