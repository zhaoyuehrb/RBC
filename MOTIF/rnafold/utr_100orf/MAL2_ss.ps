%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCGCGGAGCUGAGCGGCGGCGGCGGCGGCGGCAGGAGCCCGGGAGGCGGAGGCGGGAGGCGGCGGCGGCGCGCGGAGACGCAGCAGCGGCAGCGGCAGCAUGUCGGCCGGCGGAGCGUCAGUCCCGCCGCCCCCGAACCCCGCCGUGUCCUUCCCGCCGCCCCGGGUCACCCUGCCCGCCGGCCCCGACAUCCUGCGGA\
) } def
/len { sequence length } bind def

/coor [
[6.55796480 1057.88867188]
[-7.64059305 1050.42004395]
[-10.51239014 1034.63610840]
[0.14557005 1022.64495850]
[0.60977072 1007.65216064]
[1.07397139 992.65930176]
[1.53817201 977.66650391]
[1.88634682 962.67053223]
[2.11847496 947.67236328]
[2.35060310 932.67413330]
[-7.68548679 927.77844238]
[-15.20186615 919.45117188]
[-19.08267021 908.87127686]
[-18.73046875 897.55627441]
[-14.15790272 887.14422607]
[-5.99139309 879.15692139]
[4.61440706 874.77728271]
[5.54236364 859.80603027]
[6.47032022 844.83477783]
[3.74472141 837.95983887]
[7.53024721 829.63952637]
[8.68977642 814.68444824]
[9.84930515 799.72930908]
[7.47475529 795.57885742]
[7.68670988 789.89172363]
[11.28317547 784.33166504]
[12.90496063 769.41961670]
[14.52674580 754.50750732]
[16.14853096 739.59545898]
[17.77031708 724.68341064]
[19.39210129 709.77130127]
[17.14713287 705.54937744]
[17.53498459 699.87152100]
[21.30179214 694.42541504]
[23.38427925 679.57067871]
[25.46676826 664.71594238]
[27.54925537 649.86120605]
[29.63174438 635.00646973]
[21.08580399 617.66546631]
[33.71784592 601.96112061]
[35.33963394 587.04907227]
[36.96141815 572.13702393]
[38.58320236 557.22491455]
[40.20499039 542.31286621]
[41.82677460 527.40081787]
[43.44855881 512.48870850]
[35.51223373 496.83990479]
[46.50454712 482.07028198]
[47.89537048 467.13488770]
[49.28619385 452.19952393]
[50.67701721 437.26412964]
[52.06784058 422.32876587]
[49.55630493 415.37280273]
[53.59750366 407.17361450]
[55.21928787 392.26156616]
[52.81569672 385.26754761]
[56.98329544 377.13189697]
[58.83565521 362.24670410]
[60.68801117 347.36154175]
[62.54037094 332.47634888]
[56.43399048 318.89102173]
[65.81626129 306.15194702]
[67.66861725 291.26675415]
[69.52097321 276.38159180]
[71.37333679 261.49639893]
[73.22569275 246.61120605]
[75.07804871 231.72601318]
[76.93041229 216.84083557]
[74.63533783 209.81048584]
[78.92833710 201.74029541]
[81.01082611 186.88555908]
[71.86582184 175.18493652]
[73.76615143 160.09045410]
[86.10083771 150.57766724]
[88.18332672 135.72293091]
[85.99732208 128.65789795]
[90.41470337 120.65512085]
[92.72682190 105.83438873]
[79.73905945 102.45063782]
[71.44422150 86.71908569]
[67.76786041 72.17658234]
[64.09149933 57.63407898]
[60.19053268 43.15020752]
[56.06589127 28.72844315]
[44.83213806 17.58782578]
[48.77147675 3.22360349]
[44.64683533 -11.19816208]
[33.41308212 -22.33877945]
[37.35242462 -36.70300293]
[33.22777939 -51.12476730]
[21.06934166 -62.12951279]
[24.78455925 -78.10227203]
[40.55153656 -82.61164856]
[52.15055847 -71.01877594]
[47.64954758 -55.24940872]
[51.77418900 -40.82764435]
[62.71292114 -30.71856689]
[59.06860352 -15.32280445]
[63.19324493 -0.90103823]
[74.13197327 9.20803833]
[70.48765564 24.60380173]
[74.61229706 39.02556610]
[78.28433990 42.08838272]
[80.06750488 47.49292374]
[78.63400269 53.95771790]
[82.31036377 68.50022125]
[85.98672485 83.04272461]
[100.74979401 85.69823456]
[109.26342010 73.34840393]
[117.77703857 60.99857712]
[120.07355499 52.15076828]
[126.51919556 48.52489853]
[135.22291565 36.30830002]
[143.92663574 24.09170151]
[152.63035583 11.87510204]
[161.33407593 -0.34149641]
[163.04002380 -16.07045937]
[176.72656250 -21.94650650]
[185.43028259 -34.16310501]
[186.45347595 -50.53030014]
[201.25788879 -57.58448029]
[214.61399841 -48.06891251]
[212.78219604 -31.77239227]
[197.64688110 -25.45938683]
[188.94316101 -13.24278736]
[187.85975647 1.61236310]
[173.55067444 8.36222172]
[164.84695435 20.57882118]
[156.14323425 32.79541779]
[147.43951416 45.01202011]
[138.73579407 57.22861862]
[130.12686157 69.51219940]
[121.61324310 81.86202240]
[113.09962463 94.21185303]
[107.54755402 108.14650726]
[105.23543549 122.96723938]
[103.03806305 137.80541992]
[100.95557404 152.66015625]
[110.19898224 165.19798279]
[107.87543488 180.23313904]
[95.86557007 188.96804810]
[93.78308105 203.82278442]
[91.81559753 218.69319153]
[89.96324158 233.57836914]
[88.11087799 248.46356201]
[86.25852203 263.34875488]
[84.40616608 278.23394775]
[82.55380249 293.11911011]
[80.70144653 308.00430298]
[86.67533112 322.65432739]
[77.42556000 334.32870483]
[75.57319641 349.21389771]
[73.72084045 364.09909058]
[71.86848450 378.98425293]
[70.13135529 393.88333130]
[68.50957489 408.79541016]
[67.00321960 423.71957397]
[65.61239624 438.65496826]
[64.22157288 453.59033203]
[62.83074951 468.52572632]
[61.43992615 483.46109009]
[69.06141663 493.87185669]
[67.59156036 506.28659058]
[58.36063004 514.11053467]
[56.73884201 529.02258301]
[55.11705780 543.93463135]
[53.49527359 558.84674072]
[51.87348557 573.75878906]
[50.25170135 588.67083740]
[48.62991714 603.58294678]
[55.92796326 611.65899658]
[57.53976059 622.20190430]
[53.17143250 631.69036865]
[44.48648071 637.08898926]
[42.40399551 651.94372559]
[40.32150650 666.79846191]
[38.23901749 681.65319824]
[36.15652847 696.50793457]
[34.30417252 711.39312744]
[32.68238449 726.30517578]
[31.06060028 741.21722412]
[29.43881607 756.12933350]
[27.81702995 771.04138184]
[26.19524574 785.95343018]
[24.80442047 800.88885498]
[23.64489174 815.84393311]
[22.48536301 830.79907227]
[21.44158936 845.76269531]
[20.51363182 860.73394775]
[19.58567619 875.70526123]
[34.84655762 887.24566650]
[40.03501511 905.50592041]
[33.23088074 923.06689453]
[17.34880638 932.90625000]
[17.11667824 947.90447998]
[16.88455009 962.90270996]
[19.88229752 971.53814697]
[16.53098679 978.13073730]
[16.06678772 993.12353516]
[15.60258579 1008.11633301]
[15.13838577 1023.10913086]
[25.03411484 1035.73669434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 201]
[5 200]
[6 199]
[7 198]
[8 196]
[9 195]
[10 194]
[17 190]
[18 189]
[19 188]
[21 187]
[22 186]
[23 185]
[26 184]
[27 183]
[28 182]
[29 181]
[30 180]
[31 179]
[34 178]
[35 177]
[36 176]
[37 175]
[38 174]
[40 170]
[41 169]
[42 168]
[43 167]
[44 166]
[45 165]
[46 164]
[48 161]
[49 160]
[50 159]
[51 158]
[52 157]
[54 156]
[55 155]
[57 154]
[58 153]
[59 152]
[60 151]
[62 149]
[63 148]
[64 147]
[65 146]
[66 145]
[67 144]
[68 143]
[70 142]
[71 141]
[74 138]
[75 137]
[77 136]
[78 135]
[80 107]
[81 106]
[82 105]
[83 102]
[84 101]
[86 99]
[87 98]
[89 96]
[90 95]
[108 134]
[109 133]
[110 132]
[112 131]
[113 130]
[114 129]
[115 128]
[116 127]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
