%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUAAUUUCACGGAUGUGACAGAAUUUACUCUCCUGGGGCUGACCUGUCGUCAGGAGCUACAGGUUCUCUUUUUUGUGGUGUUCCUAGCGGUUUACA\
) } def
/len { sequence length } bind def

/coor [
[105.87921906 247.33868408]
[91.58132172 251.87413025]
[76.65705872 250.36871338]
[63.55294800 243.06924438]
[54.41714859 231.17230225]
[50.74728775 216.62815857]
[53.14496231 201.82102966]
[61.21712494 189.17823792]
[73.64051056 180.77230835]
[88.37854767 177.98123169]
[103.01525116 181.26254272]
[115.15100098 190.07810974]
[111.45681763 175.54011536]
[107.76263428 161.00213623]
[104.06845093 146.46415710]
[100.37426758 131.92616272]
[96.68008423 117.38818359]
[87.66588593 112.69804382]
[82.71568298 103.82400513]
[83.46051788 93.68998718]
[89.65498352 85.63507080]
[86.87176514 70.89553833]
[76.70822906 58.77064133]
[81.94965363 44.82873535]
[79.16644287 30.08920860]
[76.38322449 15.34967995]
[73.60000610 0.61015087]
[70.81678772 -14.12937832]
[68.03357697 -28.86890602]
[65.25035858 -43.60843658]
[49.92472076 -50.56190872]
[41.78659058 -65.10385895]
[43.83454132 -81.47545624]
[55.07682419 -93.32514191]
[51.83655548 -107.97097778]
[48.59629059 -122.61682129]
[45.35602188 -137.26266479]
[42.11575317 -151.90850830]
[38.87548828 -166.55435181]
[35.63521957 -181.20018005]
[32.16757584 -195.79386902]
[28.47339058 -210.33184814]
[24.77920723 -224.86984253]
[11.06944180 -232.73226929]
[7.01545095 -248.00776672]
[15.02239418 -261.63363647]
[30.33989525 -265.52590942]
[43.88035202 -257.37533569]
[47.61045074 -242.01754761]
[39.31719208 -228.56402588]
[43.01137543 -214.02603149]
[46.70555878 -199.48805237]
[51.48794556 -193.67820740]
[50.28105927 -184.44046021]
[53.52132797 -169.79461670]
[56.76159668 -155.14877319]
[60.00186157 -140.50292969]
[63.24213028 -125.85708618]
[66.48239899 -111.21125031]
[69.72266388 -96.56540680]
[82.49173737 -92.34552002]
[91.54724121 -82.25624847]
[94.41328430 -68.89421082]
[90.22596741 -55.77128601]
[79.98988342 -46.39165115]
[82.77310181 -31.65212250]
[85.55632019 -16.91259384]
[88.33953857 -2.17306542]
[91.12274933 12.56646347]
[93.90596771 27.30599213]
[96.68918610 42.04552078]
[106.65364838 53.11614990]
[101.61128998 68.11231995]
[104.39450836 82.85185242]
[117.28431702 96.17599487]
[111.21807098 113.69400024]
[114.91225433 128.23197937]
[118.60643768 142.76997375]
[122.30062103 157.30795288]
[125.99480438 171.84593201]
[129.68899536 186.38392639]
[136.22724915 199.88395691]
[145.34324646 211.79608154]
[154.45924377 223.70820618]
[169.87701416 225.92851257]
[178.95223999 238.13896179]
[176.74050903 252.82377625]
[185.85649109 264.73590088]
[201.19865417 270.52816772]
[203.58612061 286.75259399]
[190.56286621 296.71887207]
[175.52610779 290.17459106]
[173.94436646 273.85189819]
[164.82838440 261.93975830]
[150.07586670 260.23718262]
[140.66125488 248.28645325]
[142.54710388 232.82420349]
[133.43112183 220.91207886]
[124.31513214 208.99995422]
[123.70740509 223.98764038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 81]
[13 80]
[14 79]
[15 78]
[16 77]
[17 76]
[21 74]
[22 73]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 52]
[42 51]
[43 50]
[82 99]
[83 98]
[84 97]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
