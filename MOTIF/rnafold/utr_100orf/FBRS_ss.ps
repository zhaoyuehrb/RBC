%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGACGGCAGCGGCCGCGGCCCCGGGUCCGGGCUGGGCAGCAGAGGGGGAGCGCCGACGGCGGCGCUGCUCGCGCCGAGACCGAGACCGGGAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[20.54159164 292.09140015]
[16.38388634 298.38201904]
[10.84173298 303.46777344]
[4.25027847 307.05319214]
[-2.99479079 308.93325806]
[-10.46100044 309.00497437]
[-17.70490265 307.27301025]
[-24.29841614 303.84887695]
[-35.46637726 313.86270142]
[-46.63433838 323.87652588]
[-57.80229950 333.89035034]
[-62.38521576 349.63610840]
[-78.37514496 353.27673340]
[-89.32302094 341.06707764]
[-83.96660614 325.56735229]
[-67.81612396 322.72238159]
[-56.64816284 312.70855713]
[-45.48019791 302.69473267]
[-34.31223679 292.68090820]
[-36.63631821 269.22851562]
[-21.45354652 250.89924622]
[2.48685122 248.77589417]
[10.45321846 236.06616211]
[18.22096252 223.23408508]
[25.78820610 210.28276062]
[33.35544968 197.33143616]
[40.92269135 184.38011169]
[48.48993301 171.42878723]
[49.15819168 163.93353271]
[56.49928284 158.19758606]
[64.46565247 145.48786926]
[72.23339844 132.65579224]
[79.80063629 119.70446777]
[87.36788177 106.75314331]
[87.63239288 92.77381897]
[99.68079376 85.67961121]
[107.24803925 72.72828674]
[107.52943420 56.90958405]
[120.63067627 49.82391739]
[128.19792175 36.87258911]
[135.76516724 23.92126465]
[137.44346619 14.75742722]
[143.77450562 10.69006538]
[151.74087524 -2.01965523]
[151.70773315 -6.77669382]
[153.15022278 -10.82407570]
[155.62823486 -13.76249886]
[158.61360168 -15.39241886]
[161.56886292 -15.72520351]
[171.05090332 -27.34806061]
[180.53295898 -38.97091675]
[183.26124573 -54.55510712]
[197.30191040 -59.52589417]
[206.78396606 -71.14875031]
[216.26600647 -82.77160645]
[225.74806213 -94.39446259]
[235.23010254 -106.01731873]
[244.71214294 -117.64017487]
[254.19419861 -129.26303101]
[256.28280640 -145.52864075]
[271.51580811 -151.60212708]
[284.22280884 -141.23562622]
[281.33193970 -125.09330750]
[265.81704712 -119.78099060]
[256.33499146 -108.15813446]
[246.85295105 -96.53527832]
[237.37091064 -84.91242218]
[227.88887024 -73.28955841]
[218.40681458 -61.66670609]
[208.92477417 -50.04384995]
[206.87471008 -35.29100418]
[192.15580750 -29.48887062]
[182.67376709 -17.86601257]
[173.19171143 -6.24315691]
[164.45060730 5.94671202]
[156.48423767 18.65643311]
[148.71649170 31.48850822]
[141.14924622 44.43983459]
[133.58200073 57.39115906]
[133.84185791 72.28349304]
[120.19936371 80.29553223]
[112.63211823 93.24685669]
[112.36760712 107.22618103]
[100.31920624 114.32038879]
[92.75196075 127.27171326]
[85.18472290 140.22303772]
[83.50640869 149.38687134]
[77.17536926 153.45423889]
[69.20900726 166.16395569]
[61.44126129 178.99603271]
[53.87401581 191.94735718]
[46.30677414 204.89868164]
[38.73953247 217.85000610]
[31.17228889 230.80133057]
[29.49397850 239.96517944]
[23.16293907 244.03253174]
[15.19657135 256.74224854]
[19.73913193 262.87622070]
[22.65612984 269.90966797]
[23.78260231 277.42156982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 19]
[9 18]
[10 17]
[11 16]
[22 97]
[23 96]
[24 94]
[25 93]
[26 92]
[27 91]
[28 90]
[30 89]
[31 88]
[32 86]
[33 85]
[34 84]
[36 82]
[37 81]
[39 79]
[40 78]
[41 77]
[43 76]
[44 75]
[49 74]
[50 73]
[51 72]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
