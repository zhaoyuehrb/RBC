%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAAUGCAAUCAGACGGUCCCACUGUGGGGUGUGAAGUGUCCGUAGAGCUGUGAGAGAAUGAAGAUGAGCUUUGCGUUGACUUUCAGGUCAGCAAAAGGCCGUUGGAUCGCAAACCCCAGCCAGCCGUGCUCGAAAGCCUCCAUUGGGUUAUUUGUGC\
) } def
/len { sequence length } bind def

/coor [
[105.53179932 111.68597412]
[102.89485168 126.45236969]
[108.97588348 141.68237305]
[98.61566162 154.39450073]
[82.47190857 151.51158142]
[77.15192413 135.99934387]
[88.12845612 123.81542969]
[90.76540375 109.04902649]
[79.32077789 118.74545288]
[64.32849884 118.26435089]
[53.52910233 107.85411835]
[52.49834061 92.88957214]
[61.76840210 81.09695435]
[76.55313110 78.56480408]
[89.22036743 86.60213470]
[84.58510590 72.33628845]
[79.94985199 58.07044220]
[75.31459808 43.80459595]
[70.67934418 29.53874779]
[57.26242828 26.25453568]
[47.30856323 16.83451080]
[43.35360336 3.82625341]
[46.33176422 -9.32861900]
[55.35759735 -19.20493507]
[51.00332642 -33.55904007]
[46.64905548 -47.91314697]
[41.13576889 -55.26259613]
[42.35319138 -62.59196854]
[38.28158569 -77.02880096]
[34.20997620 -91.46562958]
[20.72771072 -103.97269440]
[25.64507675 -120.79563141]
[21.29080772 -135.14973450]
[16.93653679 -149.50384521]
[12.58226681 -163.85794067]
[8.22799683 -178.21205139]
[4.85952854 -181.13610840]
[2.83281875 -184.63752747]
[2.16303682 -188.21279907]
[2.69673514 -191.40702820]
[4.14323997 -193.86567688]
[0.92860270 -208.51716614]
[-2.28603458 -223.16865540]
[-9.48651600 -236.32740784]
[-20.09311867 -246.93402100]
[-30.69972038 -257.54061890]
[-41.30632019 -268.14721680]
[-51.91292191 -278.75381470]
[-62.51952362 -289.36041260]
[-73.12612915 -299.96701050]
[-83.73272705 -310.57363892]
[-97.32679749 -303.90429688]
[-112.35014343 -302.01278687]
[-127.17314148 -305.10427856]
[-140.18791199 -312.84341431]
[-149.98271179 -324.39074707]
[-155.49505615 -338.49368286]
[-156.12702942 -353.62243652]
[-151.81007385 -368.13595581]
[-143.01245117 -380.45996094]
[-130.68846130 -389.25756836]
[-116.17493439 -393.57452393]
[-101.04618073 -392.94256592]
[-86.94324493 -387.43020630]
[-75.39591980 -377.63540649]
[-67.65676880 -364.62063599]
[-64.56527710 -349.79763794]
[-66.45679474 -334.77429199]
[-73.12612915 -321.18023682]
[-62.51952362 -310.57363892]
[-51.91292191 -299.96701050]
[-41.30632019 -289.36041260]
[-30.69972038 -278.75381470]
[-20.09311867 -268.14721680]
[-9.48651600 -257.54061890]
[1.12008524 -246.93402100]
[15.51624584 -251.14715576]
[18.73088264 -265.79864502]
[21.94552040 -280.45013428]
[25.16015816 -295.10162354]
[28.37479591 -309.75311279]
[31.58943176 -324.40460205]
[34.80406952 -339.05609131]
[29.32565880 -354.51309204]
[40.17696381 -366.80865479]
[56.19509125 -363.29418945]
[60.90196609 -347.58502197]
[49.45555878 -335.84146118]
[46.24092102 -321.18997192]
[43.02628326 -306.53848267]
[39.81164551 -291.88699341]
[36.59700775 -277.23550415]
[33.38237000 -262.58401489]
[30.16773415 -247.93252563]
[40.01314163 -259.24923706]
[54.87452316 -261.28375244]
[69.07306671 -256.44625854]
[79.60093689 -245.76150513]
[84.22791290 -231.49296570]
[81.97380829 -216.66329956]
[73.31613922 -204.41403198]
[60.08894348 -197.34004211]
[45.09428024 -196.93989563]
[31.50863075 -203.29837036]
[22.21086121 -215.06657410]
[12.36545372 -226.38328552]
[15.58009052 -211.73179626]
[18.79472733 -197.08030701]
[22.58210182 -182.56632996]
[26.93637276 -168.21221924]
[31.29064178 -153.85810852]
[35.64491272 -139.50401306]
[39.99918365 -125.14990234]
[50.53970718 -119.14902496]
[54.26509476 -107.18509674]
[48.64680481 -95.53723145]
[52.71841431 -81.10040283]
[56.79001999 -66.66357422]
[61.00316238 -52.26741409]
[65.35742950 -37.91331100]
[69.71170044 -23.55920601]
[85.36635590 -18.69815254]
[95.15196991 -5.34132195]
[95.06613922 11.38220024]
[84.94519043 24.90349197]
[89.58044434 39.16934204]
[94.21570587 53.43518829]
[98.85095978 67.70103455]
[103.48621368 81.96688080]
[147.14079285 96.67987823]
[155.71762085 108.98590088]
[169.95608521 115.88348389]
[170.88569641 130.74905396]
[179.46250916 143.05506897]
[188.03932190 155.36109924]
[196.61614990 167.66711426]
[205.31336975 179.88835144]
[214.13014221 192.02360535]
[222.94692993 204.15885925]
[231.76370239 216.29411316]
[240.58047485 228.42936707]
[256.13732910 232.34912109]
[262.64080811 247.01487732]
[255.10202026 261.17630005]
[239.30407715 263.97000122]
[227.36581421 253.25283813]
[228.44522095 237.24613953]
[219.62844849 225.11088562]
[210.81167603 212.97563171]
[201.99488831 200.84037781]
[193.17811584 188.70512390]
[186.66853333 185.12361145]
[184.31011963 176.24394226]
[175.73330688 163.93791199]
[167.15649414 151.63189697]
[158.57966614 139.32586670]
[144.95468140 133.30850220]
[143.41159058 117.56272125]
[134.83477783 105.25669861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[15 129]
[16 128]
[17 127]
[18 126]
[19 125]
[24 121]
[25 120]
[26 119]
[28 118]
[29 117]
[30 116]
[32 113]
[33 112]
[34 111]
[35 110]
[36 109]
[41 108]
[42 107]
[43 106]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
[130 159]
[131 158]
[133 156]
[134 155]
[135 154]
[136 153]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
