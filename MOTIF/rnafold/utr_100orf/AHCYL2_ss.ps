%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCGGGGCCGACCAAGAGCAGGAGCUGGAGUCUGAGCCGGUGGUUGCAGCGGAGGCGGUGAUGUCGGUGCAGGUUGUGUCAGCCGCGGCUGCCGCCAAGGUGCCUGAGGUGGAGCUGAAGGACCUGAGCCCCUCCGAGGCGGAGUCGCAACUAGGACUGA\
) } def
/len { sequence length } bind def

/coor [
[118.08631134 214.35282898]
[111.17424011 201.04029846]
[104.26217651 187.72778320]
[97.35011292 174.41525269]
[90.43804169 161.10272217]
[84.53736115 156.59440613]
[83.52384186 147.46833801]
[76.86804962 134.02586365]
[62.33076477 130.32891846]
[50.06182480 138.95869446]
[37.79288101 147.58847046]
[30.20142365 166.22981262]
[10.91839886 167.23191833]
[-1.01099455 176.32530212]
[-12.94038773 185.41867065]
[-11.60121155 199.16366577]
[-17.19530487 211.67134094]
[-28.15869141 219.70758057]
[-41.55473709 221.25282288]
[-53.86037064 216.00863647]
[-65.96175385 224.87184143]
[-78.06314087 233.73504639]
[-84.17708588 248.95187378]
[-100.44818115 250.99726868]
[-110.13811493 237.76710510]
[-103.27871704 222.87144470]
[-86.92635345 221.63365173]
[-74.82496643 212.77044678]
[-62.72357559 203.90724182]
[-63.32148743 187.52374268]
[-53.95629883 173.86587524]
[-38.14451981 168.41117859]
[-22.03376961 173.48928833]
[-10.10437584 164.39590454]
[1.82501733 155.30252075]
[2.28513813 145.03764343]
[8.46918106 136.55767822]
[18.51489449 132.82862854]
[29.16310310 135.31953430]
[41.43204498 126.68975830]
[53.70098495 118.05997467]
[57.53699112 103.55876923]
[51.13990402 89.99125671]
[44.74281693 76.42375183]
[38.34572983 62.85624313]
[31.94864273 49.28873444]
[25.55155563 35.72122955]
[12.66776943 26.53870964]
[14.23832989 11.72714043]
[7.84124279 -1.84036767]
[-5.04254293 -11.02288532]
[-3.47198200 -25.83445549]
[-9.86906910 -39.40196228]
[-16.26615715 -52.96947098]
[-22.66324425 -66.53697968]
[-38.02459335 -76.65214539]
[-35.94324493 -94.05726624]
[-42.59904099 -107.49974823]
[-49.25483704 -120.94223022]
[-55.91063690 -134.38471985]
[-72.39982605 -135.26101685]
[-86.12605286 -144.27020264]
[-93.40623474 -158.88198853]
[-92.34395599 -175.07844543]
[-83.32243347 -188.45872498]
[-90.23450470 -201.77125549]
[-97.14656830 -215.08378601]
[-111.25177002 -223.44891357]
[-110.78942108 -239.84153748]
[-96.23514557 -247.39834595]
[-82.56114197 -238.34552002]
[-83.83403778 -221.99584961]
[-76.92197418 -208.68331909]
[-70.00991058 -195.37080383]
[-56.33092117 -195.65724182]
[-43.80701828 -189.98571777]
[-34.91373062 -179.41453552]
[-31.43593597 -165.97651672]
[-34.10987091 -152.28822327]
[-42.46815109 -141.04051208]
[-35.81235504 -127.59803009]
[-29.15655708 -114.15554047]
[-22.50075912 -100.71305847]
[-11.11956406 -96.52950287]
[-5.47590876 -85.34561157]
[-9.09573555 -72.93406677]
[-2.69864845 -59.36655807]
[3.69843864 -45.79904938]
[10.09552574 -32.23154068]
[22.52174950 -24.01946449]
[21.40875053 -8.23745537]
[27.80583763 5.33005285]
[40.23206329 13.54213142]
[39.11906433 29.32414055]
[45.51615143 42.89164734]
[51.91323853 56.45915604]
[58.31032562 70.02666473]
[64.70741272 83.59416962]
[71.10449982 97.16168213]
[92.80429077 75.06961823]
[118.06181335 85.98492432]
[132.27345276 81.18601227]
[146.48507690 76.38710022]
[160.69671631 71.58818817]
[167.86647034 65.85175323]
[175.22676086 66.83630371]
[189.52769470 62.31049347]
[203.82864380 57.78468323]
[211.15582275 44.03876114]
[225.72348022 39.65267181]
[238.78295898 46.72272110]
[253.08390808 42.19691086]
[267.38485718 37.67110062]
[280.66152954 27.12755013]
[294.46838379 36.96661377]
[288.83593750 52.95761490]
[271.91067505 51.97204590]
[257.60971069 56.49785614]
[243.30876160 61.02366638]
[236.69456482 74.31982422]
[222.25584412 79.11336517]
[208.35446167 72.08563232]
[194.05351257 76.61143494]
[179.75256348 81.13724518]
[165.49562073 85.79981995]
[151.28399658 90.59873199]
[137.07235718 95.39764404]
[122.86072540 100.19655609]
[121.59931946 111.36066437]
[114.88552856 121.25378418]
[103.70995331 127.23983765]
[90.31053162 127.37006378]
[96.96633148 140.81254578]
[103.75057220 154.19065857]
[110.66263580 167.50318909]
[117.57469940 180.81571960]
[124.48677063 194.12823486]
[131.39883423 207.44076538]
[142.09413147 206.81924438]
[152.34318542 209.80450439]
[160.96965027 216.02716064]
[166.99238586 224.74777222]
[169.73703003 234.94471741]
[168.91146851 245.43377686]
[164.63664246 255.00570679]
[157.42965698 262.56561279]
[163.30236816 276.36819458]
[169.17509460 290.17077637]
[175.04780579 303.97335815]
[190.19976807 307.31970215]
[200.46580505 318.95535278]
[201.89842224 334.40612793]
[193.94676208 347.73095703]
[179.66838074 353.80612183]
[164.55361938 350.29559326]
[154.41441345 338.54928589]
[153.14949036 323.08386230]
[161.24523926 309.84606934]
[155.37251282 296.04351807]
[149.49980164 282.24093628]
[143.62707520 268.43835449]
[124.35562897 265.40783691]
[110.67321777 251.30229187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 135]
[5 134]
[7 133]
[8 132]
[9 41]
[10 40]
[11 39]
[13 35]
[14 34]
[15 33]
[20 29]
[21 28]
[22 27]
[42 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[49 92]
[50 91]
[52 89]
[53 88]
[54 87]
[55 86]
[57 83]
[58 82]
[59 81]
[60 80]
[65 74]
[66 73]
[67 72]
[101 128]
[102 127]
[103 126]
[104 125]
[106 124]
[107 123]
[108 122]
[111 119]
[112 118]
[113 117]
[146 161]
[147 160]
[148 159]
[149 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
