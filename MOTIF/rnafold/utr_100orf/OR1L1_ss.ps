%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAAGAAAUAACCUAACAAGACCCUCUGAAUUCAUCCUCCUUGGACUCUCCUCUCGACCUGAGGAUCAGAAGCCGCUCUUUGCUGUGUUCCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[61.85395432 240.78016663]
[58.49507523 225.09266663]
[68.77684021 212.77745056]
[68.77684021 197.77745056]
[68.77684021 182.77745056]
[68.77684021 167.77745056]
[61.03954315 155.05017090]
[68.77684021 141.25000000]
[68.77684021 126.25000000]
[68.77684021 111.25000000]
[62.88122940 125.04281616]
[52.92281723 136.26020813]
[39.92572784 143.74858093]
[25.22659874 146.73782349]
[10.33709240 144.92051697]
[-3.21154380 138.48356628]
[-14.02595901 128.08892822]
[-20.99399376 114.80561066]
[-23.39904785 99.99967194]
[-20.99378777 85.19377136]
[-14.02556896 71.91055298]
[-3.21100879 61.51607132]
[10.33771706 55.07929611]
[25.22724915 53.26219940]
[39.92633820 56.25164413]
[52.92332077 63.74020004]
[62.88157654 74.95773315]
[68.77684021 88.75000000]
[68.77684021 73.75000000]
[68.77684021 58.75000000]
[68.77684021 43.75000000]
[68.77684021 28.75000000]
[63.16606522 30.35178375]
[56.73500443 30.32349396]
[49.92657852 28.42695618]
[43.24076080 24.53813934]
[37.20638275 18.65934753]
[32.35055161 10.92468643]
[25.60312462 -2.47203851]
[18.85569954 -15.86876392]
[4.13315916 -22.24264526]
[0.07634740 -37.76430130]
[9.79730320 -50.52684784]
[25.83894157 -50.73994827]
[35.89548874 -38.24013519]
[32.25242615 -22.61618996]
[38.99985123 -9.21946430]
[45.74727631 4.17726088]
[53.23276901 4.64353323]
[61.52560806 -7.85561895]
[68.20375061 5.57607794]
[75.68924713 6.04235029]
[84.04702759 -6.41346979]
[92.40481567 -18.86928940]
[100.76259613 -31.32510948]
[109.12037659 -43.78092957]
[104.60021210 -58.75096893]
[110.80760193 -73.10375214]
[124.81161499 -80.06232452]
[139.99996948 -76.34107208]
[149.20120239 -63.69704819]
[148.07077026 -48.10037613]
[137.14242554 -36.91533279]
[121.57620239 -35.42314529]
[113.21841431 -22.96732521]
[104.86063385 -10.51150513]
[96.50284576 1.94431448]
[88.14506531 14.40013409]
[83.77684021 28.75000000]
[83.77684021 43.75000000]
[83.77684021 58.75000000]
[83.77684021 73.75000000]
[83.77684021 88.75000000]
[104.57553101 82.60917664]
[116.15487671 98.51315308]
[130.03527832 104.19947815]
[145.73854065 102.27117157]
[154.58273315 114.25572205]
[168.46313477 119.94204712]
[183.75686646 115.09626770]
[197.00013733 124.15139008]
[198.03385925 140.16110229]
[186.06503296 150.84413147]
[170.27513123 148.00535583]
[162.77680969 133.82244873]
[148.89640808 128.13612366]
[134.18597412 130.47116089]
[124.34896088 118.07987976]
[110.46855164 112.39355469]
[97.64135742 117.82730865]
[83.77684021 111.25000000]
[83.77684021 126.25000000]
[83.77684021 141.25000000]
[91.51414490 155.05017090]
[83.77684021 167.77745056]
[83.77684021 182.77745056]
[83.77684021 197.77745056]
[83.77684021 212.77745056]
[94.05860901 225.09266663]
[90.69972992 240.78016663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[6 95]
[8 93]
[9 92]
[10 91]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[38 48]
[39 47]
[40 46]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[75 89]
[76 88]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
