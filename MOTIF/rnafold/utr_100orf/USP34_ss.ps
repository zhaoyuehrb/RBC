%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGCGGCGGCCGAACGAUGUGCGAGAACUGCGCAGACCUGGUGGAGGUGUUAAAUGAAAUAUCAGAUGUAGAAGGUGGUGAUGGACUGCAGCUCAGAAAGGAACAUACUCUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[185.15269470 396.96008301]
[195.62873840 385.12673950]
[194.48049927 370.17074585]
[193.33226013 355.21475220]
[192.18402100 340.25875854]
[191.03578186 325.30276489]
[187.43173218 310.74218750]
[181.47100830 296.97738647]
[175.51026917 283.21258545]
[169.54953003 269.44778442]
[157.39178467 260.84323120]
[159.00799561 245.10479736]
[153.04727173 231.33999634]
[147.08653259 217.57521057]
[141.12579346 203.81040955]
[134.98976135 190.12284851]
[128.67944336 176.51477051]
[122.36911774 162.90669250]
[107.50539398 153.67138672]
[109.15134430 135.38520813]
[102.49554443 121.94272614]
[92.34680176 120.71568298]
[83.83792114 115.04985809]
[78.79211426 106.15927124]
[63.82268524 105.20212555]
[48.85325241 104.24497223]
[33.88382339 103.28781891]
[18.91439247 102.33066559]
[3.94496179 101.37351227]
[-9.00124741 110.84849548]
[-24.44244003 106.49543762]
[-30.53345490 91.65363312]
[-22.60178757 77.70845032]
[-6.73193312 75.35742950]
[4.90211344 86.40408325]
[19.87154388 87.36123657]
[34.84097672 88.31838989]
[49.81040573 89.27554321]
[64.77983856 90.23268890]
[79.74926758 91.18984222]
[85.09748077 83.70196533]
[93.03292847 79.04359436]
[93.41600800 64.04848480]
[93.79908752 49.05337906]
[94.18216705 34.05827332]
[83.57548523 22.65054703]
[84.17759705 7.44883347]
[95.11848450 -2.59270811]
[95.50156403 -17.58781624]
[80.90290833 -31.23071289]
[80.85561371 -50.91152573]
[94.95172119 -64.21205902]
[94.18581390 -79.19248962]
[93.41990662 -94.17292023]
[92.65399933 -109.15335846]
[91.88808441 -124.13378906]
[91.12217712 -139.11422729]
[79.22434998 -149.51696777]
[78.25054169 -165.29122925]
[88.77850342 -177.07841492]
[104.56217194 -177.88539124]
[116.23738861 -167.23339844]
[116.87744904 -151.44207764]
[106.10260773 -139.88012695]
[106.86852264 -124.89969635]
[107.63442993 -109.91926575]
[108.40033722 -94.93883514]
[109.16624451 -79.95839691]
[109.93215942 -64.97796631]
[119.29454803 -60.30322647]
[125.87435913 -52.06161880]
[128.39833069 -41.73828888]
[126.33209991 -31.23071289]
[119.99153900 -22.49996758]
[110.49667358 -17.20473671]
[110.11359406 -2.20962882]
[120.52748108 8.37746239]
[120.35259247 23.59009171]
[109.17726898 34.44135284]
[108.79418945 49.43645859]
[108.41110992 64.43156433]
[108.02803040 79.42667389]
[121.56577301 95.24305725]
[115.93802643 115.28692627]
[122.59382629 128.72941589]
[134.60644531 133.63098145]
[139.84658813 145.05854797]
[135.97720337 156.59637451]
[142.28752136 170.20445251]
[148.59783936 183.81253052]
[155.12254333 190.37455750]
[154.89059448 197.84967041]
[160.85133362 211.61447144]
[166.81205750 225.37927246]
[172.77279663 239.14405823]
[185.35690308 248.73316956]
[183.31433105 263.48706055]
[189.27507019 277.25186157]
[195.23580933 291.01666260]
[201.19653320 304.78146362]
[204.70692444 290.19799805]
[213.73524475 278.21929932]
[226.78752136 270.82751465]
[241.70390320 269.24588013]
[256.01605225 273.73608398]
[267.35568237 283.55508423]
[273.84631348 297.07809448]
[274.41390991 312.06735229]
[268.96450806 326.04248047]
[258.39993286 336.69091797]
[244.46830750 342.25061035]
[229.47502136 341.80151367]
[215.90113831 335.41799927]
[205.99176025 324.15454102]
[207.13999939 339.11053467]
[208.28823853 354.06652832]
[209.43647766 369.02249146]
[210.58471680 383.97848511]
[222.74433899 394.07400513]
[224.12068176 409.81823730]
[213.89718628 421.87045288]
[198.13926697 423.08026123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[4 116]
[5 115]
[6 114]
[7 100]
[8 99]
[9 98]
[10 97]
[12 95]
[13 94]
[14 93]
[15 92]
[16 90]
[17 89]
[18 88]
[20 85]
[21 84]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[42 82]
[43 81]
[44 80]
[45 79]
[48 76]
[49 75]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
