%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGCUGAGUGCUGCAGAAUCGCUGGGGUGGCAGAGCCGCCAGCGAGGCUGGGGAUGGGGGCGCCGCUGCUCUCUCCCGGCUGGGGAGCCGGGGCUGCCGGCCGGCGCUGGUGGAUGCUGCUGGCGCCCCUGCUGCCGGCGCUGCUGCUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[89.25064850 146.34394836]
[93.45578003 131.94610596]
[85.95915222 132.17118835]
[80.11507416 145.98591614]
[74.27099609 159.80064392]
[68.42691803 173.61538696]
[62.58284378 187.43011475]
[67.25408936 202.77804565]
[58.04869080 215.91729736]
[42.02824020 216.76856995]
[31.48225594 204.67883301]
[34.50071335 188.92230225]
[48.76811600 181.58602905]
[54.61219406 167.77130127]
[60.45627213 153.95657349]
[66.30034637 140.14184570]
[72.14442444 126.32711029]
[67.32652283 116.25286865]
[65.81926727 105.72626495]
[67.45380402 95.75768280]
[71.77341461 87.21759796]
[78.10043335 80.76058197]
[85.62133789 76.77598572]
[93.48025513 75.36898041]
[94.08039856 60.38098907]
[86.90143585 46.28230286]
[95.14175415 33.87478638]
[95.74189758 18.88679695]
[96.34204102 3.89880848]
[96.94218445 -11.08918095]
[97.54232788 -26.07717133]
[98.14247131 -41.06515884]
[90.96350861 -55.16384888]
[99.20382690 -67.57136536]
[99.80397034 -82.55935669]
[100.40411377 -97.54734039]
[100.85427856 -112.54058838]
[101.15441132 -127.53758240]
[101.45453644 -142.53457642]
[101.30446625 -157.53382874]
[100.70432281 -172.52182007]
[100.10417938 -187.50981140]
[99.50403595 -202.49780273]
[98.90389252 -217.48579407]
[98.30374908 -232.47377014]
[97.70359802 -247.46176147]
[97.10345459 -262.44976807]
[86.90153503 -277.74841309]
[95.59395599 -292.96591187]
[94.69403839 -307.93890381]
[93.79412079 -322.91186523]
[92.89420319 -337.88485718]
[91.99428558 -352.85784912]
[91.09437561 -367.83081055]
[77.05648804 -372.65866089]
[66.27818298 -383.61798096]
[61.35633469 -398.73489380]
[63.76842880 -414.98144531]
[73.47103882 -428.88143921]
[67.07891846 -442.45129395]
[60.68679810 -456.02114868]
[54.29467773 -469.59097290]
[47.90255356 -483.16082764]
[41.51043320 -496.73068237]
[26.55540848 -501.84173584]
[19.66976166 -516.06719971]
[24.93862724 -530.96734619]
[39.23608017 -537.70220947]
[54.07969666 -532.27606201]
[60.66302109 -517.90820312]
[55.08028412 -503.12280273]
[61.47240448 -489.55294800]
[67.86452484 -475.98309326]
[74.25664520 -462.41326904]
[80.64876556 -448.84341431]
[87.04088593 -435.27355957]
[102.01387024 -436.17346191]
[106.73468018 -450.41125488]
[111.45548248 -464.64901733]
[116.17629242 -478.88677979]
[120.89710236 -493.12454224]
[125.61791229 -507.36230469]
[130.33872986 -521.60009766]
[135.05953979 -535.83782959]
[131.21818542 -551.78076172]
[143.28927612 -562.88122559]
[158.85508728 -557.72009277]
[161.90286255 -541.60662842]
[149.29730225 -531.11700439]
[144.57649231 -516.87927246]
[139.85568237 -502.64147949]
[135.13487244 -488.40371704]
[130.41406250 -474.16595459]
[125.69325256 -459.92819214]
[120.97244263 -445.69042969]
[116.25163269 -431.45266724]
[129.33250427 -415.02282715]
[131.24427795 -394.93139648]
[122.25310516 -377.78210449]
[106.06735229 -368.73074341]
[106.96726990 -353.75775146]
[107.86718750 -338.78475952]
[108.76710510 -323.81179810]
[109.66701508 -308.83880615]
[110.56693268 -293.86584473]
[119.42605591 -285.57781982]
[120.26738739 -273.07293701]
[112.09144592 -263.04989624]
[112.69158936 -248.06190491]
[113.29173279 -233.07391357]
[113.89187622 -218.08593750]
[114.49202728 -203.09794617]
[115.09217072 -188.10995483]
[115.69231415 -173.12196350]
[116.29245758 -158.13397217]
[118.67469788 -155.46316528]
[119.85225677 -151.48554993]
[119.21609497 -146.79394531]
[116.45153809 -142.23445129]
[116.15140533 -127.23744965]
[115.85127258 -112.24045563]
[118.87865448 -105.45201874]
[115.39210510 -96.94719696]
[114.79196167 -81.95920563]
[114.19181824 -66.97122192]
[121.41371155 -53.94457245]
[113.13046265 -40.46501541]
[112.53031921 -25.47702599]
[111.93017578 -10.48903656]
[111.33003235 4.49895239]
[110.72988892 19.48694229]
[110.12974548 34.47492981]
[117.35163879 47.50157928]
[109.06838989 60.98113632]
[108.46824646 75.96912384]
[130.76979065 91.56981659]
[129.38487244 124.60851288]
[136.04724121 138.04774475]
[142.70959473 151.48698425]
[149.37194824 164.92620850]
[156.03430176 178.36544800]
[162.69667053 191.80467224]
[177.75096130 196.61546326]
[184.91986084 210.70028687]
[179.95018005 225.70288086]
[165.79035950 232.72247314]
[150.84114075 227.59445190]
[143.97164917 213.36120605]
[149.25743103 198.46704102]
[142.59507751 185.02780151]
[135.93270874 171.58857727]
[129.27035522 158.14933777]
[122.60800171 144.71009827]
[115.94564056 131.27087402]
[108.44902039 131.49595642]
[113.51013947 145.61633301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[24 135]
[25 134]
[27 132]
[28 131]
[29 130]
[30 129]
[31 128]
[32 127]
[34 125]
[35 124]
[36 123]
[37 121]
[38 120]
[39 119]
[40 115]
[41 114]
[42 113]
[43 112]
[44 111]
[45 110]
[46 109]
[47 108]
[49 105]
[50 104]
[51 103]
[52 102]
[53 101]
[54 100]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[137 154]
[138 153]
[139 152]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
