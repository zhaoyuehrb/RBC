%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACAUCCUGUGCGCUGCUGAGCUGAGCUGGGGCGCAGCCGCCUGUCUGCACCGGCAGCACCAUGUCGCUCAUGGUCGUCAGCAUGGCGUGUGUUGGGUUGUUCUUGGUCCAGAGGGCCGGUCCACACAUGGGUGGUCAGGACAAACCCUUCCUGUCUGCCU\
) } def
/len { sequence length } bind def

/coor [
[117.61091614 132.57786560]
[122.71562195 146.68254089]
[115.82293701 160.00511169]
[101.36100006 163.98663330]
[88.62074280 156.06918335]
[85.78701782 141.33929443]
[94.67954254 129.26045227]
[100.78897095 115.56100464]
[93.36624908 114.48718262]
[81.43685150 123.58055878]
[69.50746155 132.67393494]
[57.57806778 141.76731873]
[45.64867401 150.86070251]
[33.71928024 159.95408630]
[27.43465042 174.47352600]
[12.62219334 176.03569031]
[0.69280010 185.12907410]
[-11.14895058 194.33630371]
[-22.90197182 203.65652466]
[-34.65499496 212.97673035]
[-36.21827698 228.70352173]
[-48.49697113 238.65385437]
[-64.20634460 236.92439270]
[-74.02630615 224.54118347]
[-72.13085175 208.85096741]
[-59.64450836 199.16247559]
[-43.97521210 201.22370911]
[-32.22219086 191.90350342]
[-20.46916962 182.58328247]
[-17.16675186 175.93217468]
[-8.40058136 173.19967651]
[3.52881193 164.10630798]
[8.96017265 150.23728943]
[24.62589836 148.02468872]
[36.55529404 138.93130493]
[48.48468399 129.83793640]
[60.41407776 120.74454498]
[72.34347534 111.65116882]
[84.27286530 102.55778503]
[90.66995239 88.99028015]
[90.09541321 74.00128174]
[89.52086639 59.01229095]
[81.26066589 45.51860809]
[88.50479889 32.50431442]
[87.93025208 17.51532173]
[79.67005157 4.02163649]
[86.91418457 -8.99265575]
[86.33963776 -23.98164940]
[85.76509857 -38.97064209]
[85.19055939 -53.95963287]
[76.93035126 -67.45332336]
[84.17448425 -80.46761322]
[83.59994507 -95.45660400]
[83.02540588 -110.44559479]
[82.45085907 -125.43459320]
[81.44592285 -140.40089417]
[80.01141357 -155.33213806]
[78.57690430 -170.26338196]
[77.14239502 -185.19464111]
[75.70788574 -200.12588501]
[71.75600433 -208.41412354]
[74.39171600 -215.35646057]
[73.24347687 -230.31243896]
[72.09523773 -245.26843262]
[56.39965057 -254.26875305]
[49.27772903 -270.73056030]
[53.39184189 -288.02777100]
[66.92214966 -299.31948853]
[65.20189667 -314.22052002]
[63.48164749 -329.12155151]
[59.37172699 -337.33258057]
[61.87397766 -344.32412720]
[60.43947220 -359.25537109]
[59.00496292 -374.18661499]
[57.57045364 -389.11788940]
[44.13429642 -396.87991333]
[37.85740662 -411.07077026]
[41.15337372 -426.23376465]
[52.75483704 -436.53842163]
[68.20079041 -438.02236938]
[81.55195618 -430.11502075]
[87.67453003 -415.85690308]
[84.21426392 -400.73056030]
[72.50170135 -390.55239868]
[73.93621063 -375.62112427]
[75.37071991 -360.68988037]
[76.80522919 -345.75863647]
[78.38268280 -330.84182739]
[80.10292816 -315.94079590]
[81.82318115 -301.03976440]
[93.21153259 -296.68618774]
[101.70514679 -287.83880615]
[105.63674164 -276.14523315]
[104.19667816 -263.81985474]
[97.59878540 -253.22473145]
[87.05123138 -246.41667175]
[88.19946289 -231.46067810]
[89.34770203 -216.50469971]
[90.63913727 -201.56039429]
[92.07364655 -186.62915039]
[93.50815582 -171.69789124]
[94.94266510 -156.76664734]
[96.37717438 -141.83540344]
[98.89540863 -139.30490112]
[100.28962708 -135.41078186]
[99.92424774 -130.70584106]
[97.43985748 -126.00913239]
[98.01439667 -111.02014160]
[98.58893585 -96.03114319]
[99.16347504 -81.04215240]
[107.38259125 -68.62058258]
[100.17955017 -54.53417587]
[100.75408936 -39.54518127]
[101.32863617 -24.55619049]
[101.90317535 -9.56719685]
[110.12228394 2.85437584]
[102.91925049 16.94078064]
[103.49378967 31.92977333]
[111.71289825 44.35134506]
[104.50986481 58.43775177]
[105.08440399 73.42674255]
[105.65894318 88.41573334]
[112.34084320 74.98620605]
[121.63153839 63.20983887]
[135.43298340 57.33444214]
[150.36114502 58.80062103]
[162.75578308 67.24888611]
[169.57780457 80.60777283]
[169.15451050 95.60179901]
[161.58967590 108.55454254]
[148.73846436 116.28999329]
[135.15855408 109.91927338]
[144.02175903 122.02066040]
[152.88496399 134.12203979]
[161.74816895 146.22343445]
[170.61137390 158.32481384]
[179.47457886 170.42620850]
[193.87097168 176.98780823]
[195.14912415 191.82746887]
[204.01232910 203.92884827]
[212.87554932 216.03024292]
[221.73875427 228.13162231]
[230.60195923 240.23301697]
[246.11781311 240.03889465]
[258.76504517 249.02931213]
[263.68048096 263.74725342]
[258.97409058 278.53338623]
[246.45555115 287.70211792]
[230.93849182 287.72790527]
[218.38955688 278.60083008]
[213.63404846 263.83041382]
[218.50056458 249.09622192]
[209.63735962 236.99482727]
[200.77415466 224.89344788]
[191.91094971 212.79205322]
[183.04774475 200.69067383]
[169.28530884 194.99464417]
[167.37319946 179.28941345]
[158.50999451 167.18803406]
[149.64677429 155.08663940]
[140.78356934 142.98526001]
[131.92036438 130.88386536]
[123.05715942 118.78247833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[16 32]
[17 31]
[18 29]
[19 28]
[20 27]
[40 122]
[41 121]
[42 120]
[44 118]
[45 117]
[47 115]
[48 114]
[49 113]
[50 112]
[52 110]
[53 109]
[54 108]
[55 107]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[62 98]
[63 97]
[64 96]
[68 90]
[69 89]
[70 88]
[72 87]
[73 86]
[74 85]
[75 84]
[132 163]
[133 162]
[134 161]
[135 160]
[136 159]
[137 158]
[139 156]
[140 155]
[141 154]
[142 153]
[143 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
