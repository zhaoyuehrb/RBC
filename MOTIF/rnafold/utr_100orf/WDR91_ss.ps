%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUCCCAGGCCCCGCCCCUCCGUCCCUCACCGCACCACCCCUAAAGACGCUAGCGCUGCGAUGGCGGAGGCCGUGGAGCGCACUGACGAGCUGGUCCGGGAGUACCUGCUCUUCCGCGGGUUCACGCACACACUGCGGCAGCUGGACGCCGAGAUCAAGG\
) } def
/len { sequence length } bind def

/coor [
[92.64878845 128.62239075]
[83.35669708 123.56226349]
[76.64939880 115.71043396]
[73.27436829 106.21997070]
[58.29177856 105.49748993]
[43.30918884 104.77500916]
[28.32659912 104.05253601]
[16.68165588 114.39820862]
[1.49747050 113.45207977]
[-8.29378891 102.28665161]
[-23.27637863 101.56417084]
[-38.25896835 100.84169006]
[-53.24156189 100.11921692]
[-68.23041534 99.54115295]
[-83.22415161 99.10755157]
[-98.21788025 98.67395782]
[-113.21161652 98.24036407]
[-128.20535278 97.80677032]
[-120.19741821 110.49034882]
[-124.93370056 124.72296906]
[-138.94482422 130.07911682]
[-151.96752930 122.63537598]
[-154.46255493 107.84433746]
[-144.60145569 96.54021454]
[-159.48390198 94.66594696]
[-174.36634827 92.79168701]
[-182.60708618 99.98297119]
[-193.23068237 101.39559937]
[-202.66824341 96.80017090]
[-207.88383484 87.94526672]
[-222.68298340 85.49886322]
[-237.56028748 90.88184357]
[-248.85523987 81.17240906]
[-263.65441895 78.72600555]
[-278.45355225 76.27960205]
[-285.19104004 89.81096649]
[-295.61883545 100.75411987]
[-308.80972290 108.13599396]
[-323.59075928 111.30020905]
[-338.64764404 109.96540070]
[-352.64151001 104.25026703]
[-364.32806396 94.66297913]
[-372.66809082 82.05603790]
[-376.92007446 67.55044556]
[-376.70587158 52.43603134]
[-372.04455566 38.05675507]
[-363.35061646 25.69121552]
[-351.39706421 16.43894577]
[-337.24685669 11.12265205]
[-322.15820312 10.21505547]
[-307.47277832 13.79685879]
[-294.49636841 21.54957008]
[-284.38287354 32.78382492]
[-278.03155518 46.50067902]
[-276.00717163 61.48044205]
[-261.20800781 63.92684555]
[-246.40884399 66.37324524]
[-232.59007263 60.81528091]
[-220.23658752 70.69970703]
[-205.43742371 73.14611053]
[-187.93243408 64.99836731]
[-172.49208069 77.90924072]
[-157.60963440 79.78350830]
[-142.72720337 81.65776825]
[-127.77175140 82.81303406]
[-112.77801514 83.24663544]
[-97.78428650 83.68022919]
[-82.79055786 84.11382294]
[-67.79682159 84.54741669]
[-60.98722076 81.58316803]
[-52.51908112 85.13661957]
[-37.53649139 85.85910034]
[-22.55389977 86.58158112]
[-7.57130957 87.30406189]
[3.24884462 77.13253784]
[18.45361328 77.65180206]
[29.04907799 89.06993866]
[44.03166962 89.79241943]
[59.01425934 90.51490021]
[73.99684906 91.23738098]
[87.45676422 72.46743774]
[112.59741974 69.42289734]
[116.03581238 54.82229996]
[105.80557251 43.15517807]
[104.42041779 27.70005226]
[112.41297913 14.39972782]
[126.70994568 8.36845398]
[141.81385803 11.92537785]
[151.91693115 23.70278931]
[153.13433838 39.17203522]
[144.99797058 52.38487244]
[130.63641357 58.26069641]
[127.19801331 72.86128998]
[135.51654053 85.34336853]
[150.31570435 87.78977203]
[165.11485291 90.23617554]
[179.91401672 92.68257904]
[194.71318054 95.12898254]
[209.53521729 97.43265533]
[224.37878418 99.59339142]
[239.22233582 101.75411987]
[250.03875732 94.67059326]
[262.38327026 96.80688477]
[269.70465088 106.47388458]
[284.50381470 108.92028809]
[293.53005981 107.22829437]
[299.56344604 111.55908966]
[314.31271362 114.29025269]
[329.29098511 109.19499207]
[340.39672852 119.12030792]
[355.14599609 121.85147095]
[369.89526367 124.58263397]
[378.53781128 117.87958527]
[389.22528076 117.08324432]
[398.38150024 122.21637726]
[403.07666016 131.35787964]
[417.70971680 134.65541077]
[432.34277344 137.95295715]
[446.97583008 141.25048828]
[461.60888672 144.54801941]
[476.24194336 147.84556580]
[490.90606689 151.00193787]
[505.59997559 154.01684570]
[516.96649170 143.45361328]
[532.37512207 141.62229919]
[545.90093994 149.22705078]
[552.34295654 163.34370422]
[549.22412109 178.54411316]
[537.74365234 188.98341370]
[522.31610107 190.64747620]
[508.87356567 182.89643860]
[502.58505249 168.71072388]
[487.89117432 165.69581604]
[480.67214966 167.44029236]
[472.94439697 162.47862244]
[458.31134033 159.18107605]
[443.67828369 155.88354492]
[429.04522705 152.58601379]
[414.41217041 149.28846741]
[399.77911377 145.99093628]
[381.83255005 153.11346436]
[367.16409302 139.33189392]
[352.41482544 136.60073853]
[337.66555786 133.86956787]
[323.74224854 139.16018677]
[311.58154297 129.03952026]
[296.83230591 126.30834961]
[282.05740356 123.71944427]
[267.25823975 121.27304077]
[251.21736145 128.33993530]
[237.06159973 116.59767914]
[222.21804810 114.43695068]
[207.37449646 112.27621460]
[200.26834106 114.43495178]
[192.26676941 109.92813873]
[177.46762085 107.48173523]
[162.66845703 105.03533173]
[147.86929321 102.58892822]
[133.07012939 100.14252472]
[130.20094299 111.64048767]
[123.56336212 121.14949799]
[114.17949677 127.52091217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 80]
[5 79]
[6 78]
[7 77]
[10 74]
[11 73]
[12 72]
[13 71]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[24 64]
[25 63]
[26 62]
[30 60]
[31 59]
[33 57]
[34 56]
[35 55]
[82 93]
[83 92]
[94 159]
[95 158]
[96 157]
[97 156]
[98 155]
[99 153]
[100 152]
[101 151]
[104 149]
[105 148]
[107 147]
[108 146]
[110 144]
[111 143]
[112 142]
[116 140]
[117 139]
[118 138]
[119 137]
[120 136]
[121 135]
[122 133]
[123 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
