%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:21:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUGCCCGGCAUCACUCGCGGCAUUGGAGUCAAGAUGGAGGAGUACGCGCGAGAGCCUUGCCCAUGGCGAAUUGUGGAUGACUGUGGUGGGGCCUUUACGAUGGGUACCAUUGGUGGUGGUAUCUUUCAAGCAA\
) } def
/len { sequence length } bind def

/coor [
[86.46959686 214.99919128]
[94.81175232 200.88038635]
[94.46781158 185.88433838]
[94.12387848 170.88827515]
[93.77993774 155.89222717]
[93.43599701 140.89616394]
[73.90670013 132.16709900]
[61.33715820 114.85823059]
[59.07999802 93.58629608]
[67.73725891 74.02505493]
[57.94984055 62.65815353]
[48.16242599 51.29124832]
[33.29461670 45.88211060]
[30.85342026 31.18892097]
[21.06600571 19.82201576]
[11.27859020 8.45511150]
[1.49117601 -2.91179276]
[-6.55376530 -7.42508841]
[-8.38669968 -14.65337563]
[-17.91090584 -26.24171066]
[-27.43511200 -37.83004379]
[-36.95931625 -49.41838074]
[-46.48352432 -61.00671387]
[-56.13996887 -72.48508453]
[-65.92738342 -83.85198975]
[-75.71479797 -95.21889496]
[-85.50221252 -106.58580017]
[-102.60692596 -102.89472198]
[-119.15774536 -108.29643250]
[-130.67433167 -121.23493958]
[-134.08641052 -138.12690735]
[-128.55197144 -154.35375977]
[-138.85023499 -165.25999451]
[-154.14440918 -163.41766357]
[-167.43545532 -170.84745789]
[-173.72857666 -184.51715088]
[-170.80076599 -199.09678650]
[-181.09902954 -210.00302124]
[-191.39729309 -220.90925598]
[-201.69554138 -231.81547546]
[-217.26022339 -232.43051147]
[-227.54876709 -243.63769531]
[-226.86650085 -258.47244263]
[-237.16476440 -269.37869263]
[-247.46301270 -280.28491211]
[-252.63710022 -281.81973267]
[-256.28988647 -284.91455078]
[-258.07785034 -288.70367432]
[-258.06222534 -292.31289673]
[-267.58642578 -303.90124512]
[-283.33813477 -305.18942261]
[-293.50152588 -317.29232788]
[-292.04687500 -333.02954102]
[-279.83718872 -343.06442261]
[-264.11624146 -341.44348145]
[-254.21101379 -329.12838745]
[-255.99809265 -313.42544556]
[-246.47387695 -301.83712769]
[-236.55677795 -290.58316040]
[-226.25852966 -279.67694092]
[-215.96026611 -268.77072144]
[-201.11079407 -268.60186768]
[-190.51152039 -257.68811035]
[-190.78930664 -242.11373901]
[-180.49105835 -231.20750427]
[-170.19279480 -220.30126953]
[-159.89454651 -209.39505005]
[-145.17109680 -211.48268127]
[-131.88444519 -204.41665649]
[-125.22839355 -190.72174072]
[-127.94400024 -175.55824280]
[-117.64574432 -164.65200806]
[-105.64503479 -168.89743042]
[-92.88469696 -168.25596619]
[-81.28533173 -162.78843689]
[-72.60637665 -153.28469849]
[-68.17928314 -141.14978027]
[-68.70330048 -128.19618225]
[-74.13530731 -116.37321472]
[-64.34789276 -105.00630951]
[-54.56047821 -93.63940430]
[-44.77306366 -82.27249908]
[-37.96509933 -79.22957611]
[-34.89518738 -70.53092194]
[-25.37098312 -58.94258499]
[-15.84677696 -47.35425186]
[-6.32257032 -35.76591492]
[3.20163536 -24.17758179]
[12.85808086 -12.69920731]
[22.64549446 -1.33230293]
[32.43291092 10.03460121]
[42.22032547 21.40150642]
[56.38807297 25.99760628]
[59.52933121 41.50383377]
[69.31674194 52.87073898]
[79.10415649 64.23764038]
[89.82422638 59.84983063]
[101.34012604 58.60209656]
[112.75121307 60.59202194]
[123.16505432 65.66397095]
[131.76719666 73.42128754]
[137.88487244 83.25727844]
[141.03964233 94.40268707]
[140.98477173 105.98585510]
[137.72456360 117.10087585]
[150.03918457 125.66534424]
[162.35380554 134.22981262]
[174.66841125 142.79428101]
[186.98303223 151.35874939]
[199.29765320 159.92321777]
[211.61227417 168.48768616]
[223.92689514 177.05215454]
[236.24151611 185.61663818]
[248.55613708 194.18110657]
[265.01190186 198.26078796]
[265.64706421 215.20283508]
[249.54295349 220.50318909]
[239.99166870 206.49572754]
[227.67704773 197.93124390]
[215.36242676 189.36677551]
[203.04780579 180.80230713]
[190.73318481 172.23783875]
[178.41856384 163.67337036]
[166.10394287 155.10890198]
[153.78932190 146.54443359]
[141.47471619 137.97996521]
[129.16009521 129.41549683]
[123.01079559 134.43959045]
[116.01574707 138.19787598]
[108.43205261 140.55223083]
[108.77599335 155.54827881]
[109.11993408 170.54434204]
[109.46387482 185.54039001]
[109.80780792 200.53645325]
[118.78849792 214.25793457]
[111.15516663 228.77221680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[5 131]
[6 130]
[10 96]
[11 95]
[12 94]
[14 92]
[15 91]
[16 90]
[17 89]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 82]
[25 81]
[26 80]
[27 79]
[32 72]
[33 71]
[37 67]
[38 66]
[39 65]
[40 64]
[43 61]
[44 60]
[45 59]
[49 58]
[50 57]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
