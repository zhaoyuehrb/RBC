%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGACACCUGGGCUGAGACAUACAGGACAGAGCAUGGAUCGCCUACAGACUGCACUCCUGGUUGUCCUCGUCCUCCUUGCUGUGGCGCUUCAAGCAACUGAGGCAGGCCCCUACGGCGCCAACAUGGAAGACA\
) } def
/len { sequence length } bind def

/coor [
[110.85666656 127.20332336]
[103.43531799 114.16670227]
[98.96636200 128.48551941]
[94.49740601 142.80433655]
[98.61934662 158.67700195]
[86.74593353 169.98867798]
[71.09150696 165.10287476]
[67.76000977 149.04568481]
[80.17859650 138.33537292]
[84.64754486 124.01656342]
[89.11650085 109.69774628]
[78.18513489 119.96931458]
[63.48060608 117.00673676]
[57.37952042 103.30357361]
[65.01708221 90.39358521]
[79.96492767 89.14297485]
[66.33366394 82.88289642]
[52.70239258 76.62281799]
[38.99921036 70.52177429]
[25.22597122 64.58057404]
[11.45272827 58.63937759]
[-3.08499789 64.23332977]
[-16.96838951 58.01190186]
[-22.21177292 44.11792755]
[-35.98501587 38.17673111]
[-49.75825500 32.23553467]
[-63.53149796 26.29434013]
[-77.30474091 20.35314369]
[-91.27693176 14.89624500]
[-105.43106079 9.93029404]
[-119.58518982 4.96434307]
[-130.96824646 16.52966499]
[-146.19335938 21.97460365]
[-162.21366882 20.26307487]
[-175.84635925 11.78583431]
[-184.40509033 -1.72725320]
[-186.22920227 -17.56000137]
[-200.49505615 -22.19525528]
[-216.41461182 -18.25827599]
[-227.58735657 -30.26250648]
[-222.51974487 -45.85902405]
[-206.42489624 -49.00346756]
[-195.85980225 -36.46110535]
[-181.59394836 -31.82584953]
[-172.47439575 -42.34360886]
[-159.98793030 -48.59569168]
[-146.01647949 -49.60265732]
[-132.68005371 -45.17841721]
[-122.01502991 -35.96354294]
[-115.66323853 -23.33272552]
[-114.61923981 -9.18978500]
[-100.46511078 -4.22383356]
[-86.31098175 0.74211776]
[-82.92382050 -0.51469642]
[-78.74635315 -0.13572606]
[-74.58145142 2.23783040]
[-71.36354065 6.57990170]
[-57.59030151 12.52109814]
[-43.81705856 18.46229553]
[-30.04381752 24.40349197]
[-16.27057648 30.34468842]
[-2.56623745 24.62396431]
[11.48642254 30.45297623]
[17.39392471 44.86613464]
[31.16716766 50.80733109]
[44.94040680 56.74852753]
[52.39637756 56.50713730]
[58.96247101 62.99155426]
[72.59373474 69.25163269]
[86.22500610 75.51170349]
[122.31433868 86.16336060]
[137.30520630 86.68685150]
[152.29606628 87.21034241]
[166.35784912 79.95938110]
[178.80734253 88.13613892]
[193.79820251 88.65962982]
[208.78907776 89.18312836]
[222.85086060 81.93215942]
[235.30035400 90.10891724]
[250.29121399 90.63241577]
[257.89059448 82.69019318]
[268.40280151 80.34094238]
[278.24810791 84.13413239]
[284.21148682 92.56906128]
[299.16177368 93.78944397]
[314.11203003 95.00982666]
[329.06231689 96.23020172]
[351.48419189 58.76560593]
[366.11911011 55.47642517]
[380.75405884 52.18724823]
[395.38897705 48.89806747]
[410.02392578 45.60888672]
[424.65884399 42.31970978]
[432.89883423 28.83349228]
[448.28100586 25.20511627]
[461.67932129 33.58723450]
[465.14486694 49.00688171]
[456.62158203 62.31585693]
[441.16613770 65.61817932]
[427.94802856 56.95464325]
[413.31311035 60.24382401]
[398.67816162 63.53300095]
[384.04321289 66.82218170]
[369.40829468 70.11135864]
[354.77334595 73.40054321]
[353.55703735 80.80125427]
[351.12435913 95.60267639]
[349.90802002 103.00338745]
[362.72036743 110.80362701]
[375.53271484 118.60386658]
[391.39852905 116.22574615]
[403.05142212 127.25251007]
[401.55230713 143.22537231]
[388.05114746 151.89131165]
[372.90490723 146.60256958]
[367.73248291 131.41621399]
[354.92013550 123.61597443]
[342.10778809 115.81573486]
[327.84191895 111.18048096]
[312.89166260 109.96009827]
[297.94137573 108.73971558]
[282.99111938 107.51934052]
[266.26138306 117.10729980]
[249.76773071 105.62327576]
[234.77687073 105.09978485]
[221.78732300 112.38819122]
[208.26557922 104.17398834]
[193.27471924 103.65049744]
[178.28385925 103.12700653]
[165.29431152 110.41541290]
[151.77256775 102.20121002]
[136.78170776 101.67771912]
[121.79084778 101.15422058]
[131.63519287 112.47186279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[16 70]
[17 69]
[18 68]
[19 66]
[20 65]
[21 64]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 53]
[30 52]
[31 51]
[37 44]
[38 43]
[71 133]
[72 132]
[73 131]
[75 129]
[76 128]
[77 127]
[79 125]
[80 124]
[84 122]
[85 121]
[86 120]
[87 119]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
