%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGGAGCCGGGCGGAGCUGGCUUGCGGCUCCCGGGGCCGGCUCUCCGGCCGGAGACAUGGCCCGGGGGCCCGGCCCGCUAGGCAGGCCUCGCCCCGAUACGGUCGCCAUGCCCAAGAGAGGAAAGCGACUCAAGUUCCGGGCCCACGACGCCUGCU\
) } def
/len { sequence length } bind def

/coor [
[274.32113647 134.61705017]
[261.84201050 129.99971008]
[254.20405579 118.86711884]
[239.23989868 117.83062744]
[224.27575684 116.79413605]
[209.31161499 115.75764465]
[202.38456726 118.44708252]
[194.06298828 114.54997253]
[179.12223816 113.21803284]
[164.18148804 111.88610077]
[149.24075317 110.55416107]
[134.30000305 109.22222137]
[119.35925293 107.89028168]
[104.41850281 106.55834198]
[104.98960114 114.07154846]
[101.94331360 121.86589050]
[95.28455353 128.58787537]
[83.09725189 137.33256531]
[70.90994263 146.07725525]
[58.72264099 154.82194519]
[46.53533936 163.56663513]
[42.52344131 179.09996033]
[27.81939888 185.51640320]
[13.70289516 177.89381409]
[11.00290489 162.07958984]
[21.79062843 150.20504761]
[37.79064560 151.37933350]
[49.97795105 142.63464355]
[62.16525269 133.88995361]
[74.35255432 125.14525604]
[86.53986359 116.40056610]
[85.06038666 101.47370148]
[71.39360809 95.29153442]
[57.72683334 89.10936737]
[41.96435547 90.47129822]
[33.55718613 78.17622375]
[19.89040947 71.99405670]
[6.22363281 65.81188965]
[-7.44314432 59.62972260]
[-21.10992241 53.44755554]
[-34.77669907 47.26538849]
[-49.41042328 52.60316086]
[-63.18241501 46.13887405]
[-68.18097687 32.15495682]
[-81.84775543 25.97278976]
[-95.51453400 19.79062080]
[-109.18131256 13.60845280]
[-122.84809113 7.42628479]
[-139.10502625 9.58132458]
[-148.88392639 -3.58321118]
[-142.12510681 -18.52477646]
[-125.78145599 -19.87277222]
[-116.66592407 -6.24049234]
[-102.99914551 -0.05832431]
[-89.33236694 6.12384367]
[-75.66558838 12.30601215]
[-61.99881363 18.48818016]
[-48.19611740 13.00901604]
[-34.24799728 19.08392525]
[-28.59453011 33.59860992]
[-14.92775345 39.78077698]
[-1.26097631 45.96294785]
[12.40580082 52.14511490]
[26.07257843 58.32728195]
[39.73935699 64.50945282]
[54.52429199 62.70532990]
[63.90900040 75.44258881]
[77.57577515 81.62475586]
[91.24255371 87.80693054]
[105.75044250 91.61759949]
[120.69119263 92.94953156]
[135.63194275 94.28147125]
[150.57267761 95.61341095]
[165.51342773 96.94535065]
[180.45417786 98.27729034]
[195.39492798 99.60923004]
[210.34809875 100.79350281]
[225.31225586 101.82999420]
[240.27639771 102.86648560]
[255.24053955 103.90297699]
[268.19400024 92.18387604]
[285.28106689 93.40812683]
[296.00091553 106.33547974]
[310.98263550 107.07611847]
[325.96432495 107.81675720]
[340.94604492 108.55739594]
[355.92773438 109.29804230]
[370.90945435 110.03868103]
[385.89114380 110.77931976]
[400.05651855 103.73285675]
[412.38623047 112.08914185]
[427.36795044 112.82978058]
[442.34963989 113.57041931]
[460.70861816 102.58526611]
[477.65573120 114.31470490]
[492.65499878 114.16651917]
[507.65426636 114.01833344]
[522.65350342 113.87014771]
[533.67846680 102.86614227]
[548.89196777 102.92953491]
[559.31469727 113.50795746]
[574.31396484 113.35977173]
[589.30224609 112.76716614]
[604.26635742 111.73067474]
[619.23052979 110.69418335]
[634.19470215 109.65769196]
[649.15881348 108.62120056]
[664.12298584 107.58470917]
[670.56402588 95.36448669]
[682.11804199 87.99281311]
[695.69793701 87.31204224]
[707.73767090 93.39350128]
[715.12890625 104.54684448]
[730.11059570 103.80620575]
[739.41369629 91.23693848]
[754.63165283 87.63853455]
[768.57897949 94.71003723]
[774.67016602 109.11250305]
[770.02923584 124.04553223]
[756.84735107 132.45820618]
[741.34869385 130.37831116]
[730.85125732 118.78791046]
[715.86956787 119.52854919]
[707.35528564 133.53515625]
[692.02386475 139.78729248]
[675.82141113 135.64697266]
[665.15948486 122.54885864]
[650.19531250 123.58535004]
[635.23114014 124.62184143]
[620.26702881 125.65833282]
[605.30285645 126.69482422]
[590.33874512 127.73131561]
[587.73950195 130.18768311]
[583.80139160 131.47975159]
[579.09753418 130.98310852]
[574.46215820 128.35903931]
[559.46289062 128.50721741]
[549.25122070 139.28950500]
[534.04193115 139.65345764]
[522.80169678 128.86941528]
[507.80245972 129.01760864]
[492.80319214 129.16578674]
[477.80392456 129.31398010]
[472.64544678 136.65390015]
[464.55117798 140.83290100]
[455.30377197 140.78671265]
[447.00744629 136.39804077]
[441.60900879 128.55212402]
[426.62728882 127.81148529]
[411.64559937 127.07084656]
[398.55181885 134.17028809]
[385.15051270 125.76102448]
[370.16879272 125.02038574]
[355.18710327 124.27973938]
[340.20538330 123.53910065]
[325.22369385 122.79846191]
[310.24197388 122.05782318]
[295.26028442 121.31718445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 80]
[4 79]
[5 78]
[6 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[32 69]
[33 68]
[34 67]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[83 158]
[84 157]
[85 156]
[86 155]
[87 154]
[88 153]
[89 152]
[91 150]
[92 149]
[93 148]
[95 143]
[96 142]
[97 141]
[98 140]
[101 137]
[102 136]
[103 132]
[104 131]
[105 130]
[106 129]
[107 128]
[108 127]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
