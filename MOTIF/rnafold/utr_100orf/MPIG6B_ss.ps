%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGAUUCGCUCGCAGCUUCUCCUCACCACAUCCUAACCAUGGCUGUGUUUCUGCAGCUGCUACCGCUGCUGCUCUCGAGGGCCCAAGGGAACCCUGGGGCUUCUCUGGACGGCCGCCCUGGGGACCGGGUGAAUCUCU\
) } def
/len { sequence length } bind def

/coor [
[87.29850769 303.73117065]
[74.97166443 294.30627441]
[70.57112885 279.42626953]
[75.78899384 264.81280518]
[88.61888123 256.08505249]
[88.95306396 241.08877563]
[89.28724670 226.09249878]
[89.62143707 211.09622192]
[89.95561981 196.09994507]
[90.28980255 181.10366821]
[90.62398529 166.10739136]
[90.95816803 151.11111450]
[91.29235840 136.11483765]
[91.62654114 121.11856079]
[84.14366913 134.11882019]
[76.66079712 147.11906433]
[73.29524231 161.73663330]
[63.96609879 173.48257446]
[50.48987579 180.06977844]
[35.49058533 180.21565247]
[21.88879967 173.89176941]
[12.33298016 162.32949829]
[8.68377876 147.78015137]
[11.65174580 133.07670593]
[20.65897751 121.08213806]
[33.95163727 114.13194275]
[48.93920898 113.57901001]
[63.11571884 108.67731476]
[77.29222870 103.77562714]
[62.50117493 101.28068542]
[47.71012115 98.78574371]
[32.91906738 96.29080200]
[18.02418518 101.62495422]
[6.76114225 91.87850952]
[-8.02991199 89.38356781]
[-19.81588936 99.66095734]
[-35.45154953 99.90632629]
[-47.55420685 90.00382233]
[-50.40935898 74.62909698]
[-42.66889191 61.04163361]
[-27.98761749 55.65701294]
[-13.29758072 61.01768875]
[-5.53497124 74.59251404]
[9.25608253 77.08745575]
[23.09300613 71.57485199]
[35.41400528 81.49974823]
[50.20505905 83.99468994]
[64.99611664 86.48963165]
[79.78717041 88.98457336]
[84.81805420 83.42218018]
[71.12857819 77.29044342]
[72.73011017 62.37618637]
[87.40934753 59.29075623]
[94.87982178 72.29740143]
[99.91070557 66.73500824]
[95.94777679 52.26797104]
[91.98484802 37.80093384]
[88.02191925 23.33389473]
[84.05898285 8.86685658]
[72.95065308 -2.39882493]
[77.05056000 -16.71804619]
[73.08762360 -31.18508339]
[61.05314636 -42.32525253]
[64.94694519 -58.25542450]
[80.76342010 -62.58800125]
[92.23193359 -50.86600494]
[87.55466461 -35.14801407]
[91.51759338 -20.68097687]
[102.34246826 -10.45007420]
[98.52602386 4.90392590]
[102.48895264 19.37096405]
[106.45188141 33.83800125]
[110.41481781 48.30503845]
[114.37774658 62.77207565]
[127.28376770 70.41632843]
[141.87515259 66.93902588]
[156.46653748 63.46171951]
[171.05790710 59.98442078]
[182.68849182 49.25873566]
[196.86271667 53.83482361]
[211.45408630 50.35752106]
[226.04547119 46.88021851]
[240.63685608 43.40291595]
[255.22822571 39.92561340]
[268.90408325 33.76356125]
[281.17538452 25.13711548]
[293.44665527 16.51066971]
[298.72177124 8.95226383]
[306.08880615 7.83232117]
[318.54925537 -0.51859236]
[325.29235840 -15.46725273]
[341.63458252 -16.83242035]
[350.76443481 -3.20972919]
[343.28991699 11.38696575]
[326.90014648 11.94183445]
[314.43972778 20.29274750]
[302.07312012 28.78195381]
[289.80181885 37.40840149]
[277.53054810 46.03484726]
[281.33206177 60.54513550]
[296.25671387 62.04656982]
[311.18139648 63.54800415]
[326.10604858 65.04943848]
[341.04653931 66.38452148]
[356.00094604 67.55307770]
[370.55737305 60.00041962]
[384.22879028 69.05712891]
[382.95123291 85.40644073]
[368.03894043 92.22957611]
[354.83236694 82.50749207]
[339.87796021 81.33893585]
[332.90817261 83.97506714]
[324.60461426 79.97410583]
[309.67996216 78.47267151]
[294.75527954 76.97123718]
[279.83062744 75.46980286]
[258.70553589 54.51699448]
[244.11415100 57.99429703]
[229.52278137 61.47159958]
[214.93139648 64.94889832]
[200.34001160 68.42620087]
[189.75311279 78.90316772]
[174.53521729 74.57579803]
[159.94383240 78.05310059]
[145.35244751 81.53040314]
[130.76107788 85.00770569]
[125.99951935 111.26717377]
[106.62281799 121.45274353]
[106.28863525 136.44902039]
[105.95444489 151.44529724]
[105.62026215 166.44157410]
[105.28607941 181.43785095]
[104.95189667 196.43412781]
[104.61771393 211.43040466]
[104.28352356 226.42668152]
[103.94934082 241.42295837]
[103.61515808 256.41925049]
[116.04351807 265.70983887]
[120.60521698 280.54125977]
[115.54618835 295.21047974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[12 130]
[13 129]
[14 128]
[29 49]
[30 48]
[31 47]
[32 46]
[34 44]
[35 43]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[61 68]
[62 67]
[75 126]
[76 125]
[77 124]
[78 123]
[80 121]
[81 120]
[82 119]
[83 118]
[84 117]
[85 99]
[86 98]
[87 97]
[89 96]
[90 95]
[100 116]
[101 115]
[102 114]
[103 113]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
