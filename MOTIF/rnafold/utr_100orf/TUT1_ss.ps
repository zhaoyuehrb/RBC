%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCGGAGGAGUGUGUCCGCGCAAUUGAACGACUUUAUGUCACUUCCUAUCGGAUCGGCGGAAGUUGCUUCCGAGCGCGUUGAGCUUUGGCGAAGUGGGUUCCGGUGGUGGCAGAGGUGCUUGUGUUUUUGUCGGU\
) } def
/len { sequence length } bind def

/coor [
[69.61391449 153.44216919]
[60.57895279 141.46847534]
[59.83298111 126.48703003]
[67.63378143 113.67502594]
[81.28596497 107.45988464]
[66.63040161 110.65589142]
[51.97484207 113.85189819]
[37.31927872 117.04790497]
[22.70076752 120.40932465]
[8.12117481 123.93572235]
[-6.45841742 127.46212769]
[-21.03800964 130.98852539]
[-34.30162430 137.99398804]
[-45.43366241 148.04772949]
[-56.56570053 158.10147095]
[-67.69773865 168.15521240]
[-72.22424316 183.91728210]
[-88.20103455 187.61514282]
[-99.19255829 175.44474792]
[-93.89167786 159.92596436]
[-77.75148010 157.02317810]
[-66.61944580 146.96943665]
[-55.48740768 136.91569519]
[-44.35536957 126.86194611]
[-46.52743530 119.68335724]
[-60.88461304 124.02748871]
[-75.24179077 128.37162781]
[-89.59902954 132.71553040]
[-93.94271851 118.35822296]
[-79.58592224 114.01444244]
[-65.22874451 109.67031097]
[-50.87156677 105.32618713]
[-53.04363251 98.14759827]
[-67.88205719 95.95188141]
[-82.72048187 93.75615692]
[-96.40810394 102.12445831]
[-111.43494415 96.50540924]
[-116.27368164 81.20945740]
[-107.21246338 67.97035217]
[-91.20227814 66.94400024]
[-80.52476501 78.91773987]
[-65.68634033 81.11345673]
[-50.84791565 83.30917358]
[-37.72118759 88.64757538]
[-28.70632172 97.20493317]
[-24.37275887 107.09096527]
[-24.56440926 116.40893555]
[-9.98481655 112.88253021]
[4.59477520 109.35613251]
[19.17436790 105.82973480]
[24.98515129 101.16049194]
[34.12327194 102.39234161]
[48.77883148 99.19633484]
[63.43439484 96.00032806]
[78.08995819 92.80432129]
[101.45119476 81.16873932]
[110.32273865 69.07346344]
[119.19428253 56.97818756]
[128.06582642 44.88290787]
[129.98875427 29.17899513]
[143.75511169 23.49245644]
[152.62666321 11.39718056]
[161.49819946 -0.69809639]
[170.36975098 -12.79337311]
[179.24128723 -24.88865089]
[181.16423035 -40.59256363]
[194.93057251 -46.27910233]
[203.80212402 -58.37437820]
[212.67366028 -70.46965790]
[221.54521179 -82.56493378]
[230.41674805 -94.66020966]
[239.28829956 -106.75548553]
[247.88423157 -119.04816437]
[256.20016479 -131.53196716]
[264.51608276 -144.01577759]
[272.83200073 -156.49957275]
[281.14794922 -168.98338318]
[283.33013916 -177.94221497]
[289.79553223 -181.65242004]
[298.39144897 -193.94509888]
[297.02282715 -209.92965698]
[308.76538086 -220.86090088]
[324.61123657 -218.35330200]
[332.40481567 -204.33049011]
[326.16757202 -189.54954529]
[310.68414307 -185.34916687]
[302.08819580 -173.05648804]
[293.63174438 -160.66744995]
[285.31582642 -148.18365479]
[276.99987793 -135.69984436]
[268.68395996 -123.21604156]
[260.36804199 -110.73223877]
[260.43359375 -105.87985992]
[257.39370728 -100.95256042]
[251.38357544 -97.88394165]
[242.51202393 -85.78866577]
[233.64048767 -73.69338989]
[224.76893616 -61.59811401]
[215.89739990 -49.50283432]
[207.02586365 -37.40755844]
[205.73747253 -22.56878090]
[191.33656311 -16.01710701]
[182.46502686 -3.92182994]
[173.59347534 8.17344666]
[164.72193909 20.26872444]
[155.85038757 32.36400223]
[154.56201172 47.20277786]
[140.16110229 53.75445175]
[131.28955078 65.84973145]
[122.41801453 77.94500732]
[113.54647064 90.04028320]
[114.05490875 105.03166199]
[123.72554779 116.49807739]
[133.39617920 127.96450043]
[143.06681824 139.43090820]
[152.73745728 150.89733887]
[162.40811157 162.36375427]
[172.07875061 173.83016968]
[178.28295898 176.48452759]
[181.64970398 181.19454956]
[181.91305542 186.04022217]
[191.05567932 197.93191528]
[206.41076660 203.68983459]
[208.83453369 219.90887451]
[195.83361816 229.90428162]
[180.78225708 223.39364624]
[179.16398621 207.07453918]
[170.02136230 195.18284607]
[160.61231995 183.50080872]
[150.94168091 172.03439331]
[141.27104187 160.56797791]
[131.60040283 149.10156250]
[121.92976379 137.63513184]
[112.25912476 126.16872406]
[102.58848572 114.70230103]
[109.62341309 127.95031738]
[107.99891663 142.86209106]
[98.27637482 154.28453064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[8 52]
[9 50]
[10 49]
[11 48]
[12 47]
[13 24]
[14 23]
[15 22]
[16 21]
[33 43]
[34 42]
[35 41]
[56 111]
[57 110]
[58 109]
[59 108]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[79 87]
[80 86]
[112 135]
[113 134]
[114 133]
[115 132]
[116 131]
[117 130]
[118 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
