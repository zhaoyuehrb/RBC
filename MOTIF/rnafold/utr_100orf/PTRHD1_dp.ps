%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:19 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PTRHD1)
} def

/sequence { (\
CCAAGAUGCACCGGGGAGUAGGUCCGGCCUUUCGGGUGGUCAGGAAGAUGGCGGCCUCUGGGGCGGAGCCGCAGGUCCUGGUACAAUACUUGGUGUUACGAAAGG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 93 0.989190418 ubox
1 105 0.005232142 ubox
2 92 0.999602119 ubox
2 104 0.005309630 ubox
3 91 0.999092405 ubox
4 90 0.998935759 ubox
5 89 0.997823731 ubox
5 97 0.003659955 ubox
6 87 0.572356884 ubox
6 96 0.003782643 ubox
7 83 0.004885382 ubox
7 85 0.861977365 ubox
7 86 0.467542253 ubox
7 88 0.048862000 ubox
7 95 0.003769133 ubox
8 82 0.003424415 ubox
8 84 0.931255493 ubox
8 87 0.040641434 ubox
8 94 0.003786862 ubox
8 96 0.004704870 ubox
9 93 0.003787958 ubox
9 95 0.004936155 ubox
10 82 0.979538313 ubox
10 94 0.004918405 ubox
11 27 0.003741403 ubox
11 81 0.999932227 ubox
11 93 0.004910398 ubox
12 26 0.003759677 ubox
12 80 0.999908741 ubox
12 92 0.004901547 ubox
13 25 0.003755002 ubox
13 78 0.031418456 ubox
13 79 0.996237352 ubox
13 91 0.004412986 ubox
14 24 0.003749778 ubox
14 77 0.031858499 ubox
14 78 0.994590133 ubox
14 79 0.069307170 ubox
14 90 0.003466076 ubox
15 23 0.003591943 ubox
15 76 0.031596791 ubox
15 77 0.992088523 ubox
15 78 0.098577097 ubox
15 89 0.003359056 ubox
16 33 0.027265175 ubox
16 76 0.962846736 ubox
16 77 0.120229572 ubox
17 32 0.027285819 ubox
17 76 0.137843269 ubox
18 31 0.025345141 ubox
18 72 0.435193179 ubox
18 76 0.004613243 ubox
19 71 0.408945986 ubox
19 75 0.006551178 ubox
20 30 0.027723437 ubox
21 29 0.028519478 ubox
21 70 0.994276836 ubox
22 28 0.028512546 ubox
22 69 0.993651864 ubox
22 72 0.006287281 ubox
23 27 0.026673161 ubox
23 67 0.849781484 ubox
23 68 0.521658393 ubox
23 71 0.004617141 ubox
24 66 0.997629037 ubox
25 65 0.997432333 ubox
26 64 0.944682550 ubox
27 64 0.326045120 ubox
28 61 0.013117371 ubox
28 62 0.888920642 ubox
28 63 0.456537583 ubox
28 105 0.003686080 ubox
29 60 0.016168332 ubox
29 61 0.888881717 ubox
29 62 0.456645053 ubox
29 63 0.003393371 ubox
29 104 0.003758302 ubox
30 60 0.863967795 ubox
30 61 0.453911034 ubox
30 62 0.003677080 ubox
30 103 0.003756607 ubox
31 60 0.429284340 ubox
31 61 0.013903750 ubox
31 102 0.003753924 ubox
32 60 0.022422914 ubox
32 61 0.011174452 ubox
32 101 0.003757231 ubox
33 60 0.029846577 ubox
33 100 0.003758107 ubox
34 56 0.039243240 ubox
34 57 0.922204654 ubox
34 58 0.192654113 ubox
34 59 0.016963017 ubox
34 99 0.003627025 ubox
35 55 0.030541094 ubox
35 56 0.998703951 ubox
35 57 0.024117039 ubox
35 58 0.009432618 ubox
36 52 0.005105942 ubox
36 55 0.999354243 ubox
36 56 0.017385527 ubox
36 57 0.004049033 ubox
37 51 0.005162132 ubox
37 53 0.015317947 ubox
37 54 0.998105161 ubox
38 52 0.011569030 ubox
38 56 0.004196929 ubox
39 49 0.005801360 ubox
39 52 0.999849904 ubox
39 55 0.004194264 ubox
40 48 0.006390089 ubox
40 51 0.999610766 ubox
40 54 0.004179409 ubox
41 47 0.006915668 ubox
41 50 0.999846804 ubox
41 53 0.004105972 ubox
42 49 0.977760130 ubox
51 72 0.003461742 ubox
52 71 0.003519461 ubox
53 70 0.003520280 ubox
54 69 0.003520139 ubox
57 67 0.003490746 ubox
57 75 0.012081840 ubox
58 66 0.003497825 ubox
58 74 0.028687605 ubox
59 65 0.003485245 ubox
59 73 0.028774840 ubox
60 64 0.003321097 ubox
60 72 0.028794705 ubox
62 70 0.028771956 ubox
63 69 0.028774723 ubox
64 68 0.028565759 ubox
68 76 0.009205134 ubox
69 75 0.010100334 ubox
70 74 0.010037825 ubox
77 93 0.003193993 ubox
78 92 0.003218717 ubox
80 90 0.004001533 ubox
81 89 0.004299995 ubox
82 88 0.004316726 ubox
83 87 0.003895604 ubox
85 97 0.007825555 ubox
86 96 0.009885166 ubox
87 95 0.010045018 ubox
88 94 0.010075328 ubox
88 96 0.003218924 ubox
89 93 0.009983561 ubox
89 95 0.003508153 ubox
89 104 0.010796690 ubox
90 101 0.012914160 ubox
90 102 0.006403434 ubox
90 103 0.010039533 ubox
91 100 0.014098487 ubox
91 101 0.007664711 ubox
91 102 0.008862518 ubox
92 99 0.015232754 ubox
93 99 0.029994035 ubox
94 98 0.028487662 ubox
94 100 0.021646948 ubox
95 99 0.019253523 ubox
96 102 0.026426043 ubox
96 103 0.046056132 ubox
96 104 0.032554567 ubox
96 105 0.024430712 ubox
97 101 0.025300522 ubox
97 102 0.048393915 ubox
97 103 0.037543673 ubox
97 104 0.035640145 ubox
1 93 0.9500000 lbox
2 92 0.9500000 lbox
3 91 0.9500000 lbox
4 90 0.9500000 lbox
5 89 0.9500000 lbox
7 85 0.9500000 lbox
8 84 0.9500000 lbox
10 82 0.9500000 lbox
11 81 0.9500000 lbox
12 80 0.9500000 lbox
13 79 0.9500000 lbox
14 78 0.9500000 lbox
15 77 0.9500000 lbox
16 76 0.9500000 lbox
21 70 0.9500000 lbox
22 69 0.9500000 lbox
23 67 0.9500000 lbox
24 66 0.9500000 lbox
25 65 0.9500000 lbox
26 64 0.9500000 lbox
28 62 0.9500000 lbox
29 61 0.9500000 lbox
30 60 0.9500000 lbox
34 57 0.9500000 lbox
35 56 0.9500000 lbox
36 55 0.9500000 lbox
37 54 0.9500000 lbox
39 52 0.9500000 lbox
40 51 0.9500000 lbox
41 50 0.9500000 lbox
42 49 0.9500000 lbox
showpage
end
%%EOF
