%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGCGCGGGCGCCCGCCCUGCUCUGUGACGCGCGGCCCGAGGCGCACGCAGGGCUCACACCACCUGUCCUGGCCUCCGACCCGGGCCGACUAUGGCGGCGCUGCGGCUCCUGGCGUCAGUGCUCGGGCGCGGGGUCCCCGCCGGCGGCUCAGGGCUCGCGCUGUCCCAGGGCUGCGCCCGCUGCUUUGCCA\
) } def
/len { sequence length } bind def

/coor [
[117.41664124 757.76049805]
[116.68820190 742.77819824]
[115.95977020 727.79589844]
[115.23133850 712.81359863]
[114.50290680 697.83129883]
[113.77447510 682.84899902]
[112.92475128 667.87304688]
[111.95380402 652.90454102]
[110.98285675 637.93597412]
[110.01190948 622.96746826]
[109.04096222 607.99890137]
[108.07001495 593.03033447]
[107.09906769 578.06182861]
[106.12812042 563.09326172]
[97.24394226 554.87048340]
[96.32034302 542.39819336]
[104.39752197 532.33026123]
[103.66909027 517.34796143]
[102.94065857 502.36566162]
[102.21222687 487.38336182]
[101.48379517 472.40106201]
[100.75535583 457.41876221]
[94.43589020 454.09561157]
[89.62052155 448.73193359]
[86.94532013 441.96527100]
[86.78811646 434.62252808]
[89.21586609 427.61874390]
[93.97044373 421.84329224]
[100.49523926 418.04678345]
[100.98097229 403.05465698]
[101.46669769 388.06253052]
[101.83102417 373.06695557]
[102.07392120 358.06890869]
[102.31681824 343.07089233]
[102.55971527 328.07284546]
[102.80260468 313.07482910]
[102.92405701 298.07531738]
[102.92405701 283.07531738]
[102.92405701 268.07531738]
[102.92405701 253.07531738]
[102.80260468 238.07580566]
[102.55971527 223.07777405]
[102.31681824 208.07974243]
[94.37443542 195.47943115]
[101.88725281 181.55577087]
[101.64435577 166.55773926]
[101.40146637 151.55970764]
[98.14505005 144.91316223]
[101.27804565 136.31730652]
[101.27804565 121.31730652]
[75.64141846 103.10611725]
[62.05250549 96.75460815]
[48.46360016 90.40310669]
[34.87469101 84.05160522]
[21.28578186 77.70010376]
[7.69687414 71.34860229]
[-4.44662952 80.66493225]
[-19.53065109 83.25933075]
[-34.08898926 78.53562927]
[-44.77624893 67.57930756]
[-49.13657379 52.90803528]
[-46.16799164 37.89317322]
[-36.55266571 25.98502159]
[-22.50012207 19.91998863]
[-7.23953581 21.09177399]
[5.72232342 29.23110962]
[13.40691471 42.46763611]
[14.04837608 57.75969696]
[27.63728333 64.11119843]
[41.22619247 70.46269989]
[54.81510162 76.81420135]
[68.40400696 83.16570282]
[81.99291992 89.51720428]
[95.25734711 82.51329041]
[97.67581177 67.70954132]
[100.09427643 52.90578842]
[102.51274109 38.10203934]
[100.09427643 23.29828644]
[93.09036255 10.03385448]
[86.08644867 -3.23057747]
[73.34396362 -14.41384697]
[80.56272125 -29.75418472]
[97.30189514 -27.06417084]
[99.35087585 -10.23449326]
[106.35478973 3.02993917]
[113.35871124 16.29437065]
[127.61703491 11.63602066]
[125.43860626 -3.20495105]
[123.26017761 -18.04592323]
[110.43234253 -27.27751732]
[107.97191620 -42.88911057]
[117.33862305 -55.61862183]
[132.97535706 -57.91385651]
[145.60511780 -48.41309357]
[147.73490906 -32.75296783]
[138.10115051 -20.22435188]
[140.27957153 -5.38337946]
[142.45800781 9.45759201]
[157.24168396 11.99584007]
[164.24560547 -1.26859248]
[171.24951172 -14.53302479]
[178.25343323 -27.79745674]
[185.25735474 -41.06188965]
[192.26126099 -54.32632065]
[199.26518250 -67.59075165]
[194.82954407 -82.52269745]
[202.12145996 -95.87493896]
[216.38412476 -100.01162720]
[223.38804626 -113.27606201]
[230.39195251 -126.54048920]
[232.44093323 -143.37016296]
[249.18011475 -146.06018066]
[256.39886475 -130.71984863]
[243.65638733 -119.53657532]
[236.65246582 -106.27214050]
[229.64855957 -93.00771332]
[234.27598572 -78.89663696]
[227.36198425 -65.34484100]
[212.52961731 -60.58683777]
[205.52569580 -47.32240677]
[198.52178955 -34.05797577]
[191.51786804 -20.79354095]
[184.51394653 -7.52910900]
[177.51004028 5.73532295]
[170.50611877 18.99975586]
[143.62266541 45.25376892]
[117.31649017 40.52050018]
[114.89802551 55.32425308]
[112.47956085 70.12800598]
[110.06109619 84.93175507]
[121.25151062 94.92047882]
[135.68669128 90.84303284]
[150.12187195 86.76557922]
[164.55705261 82.68812561]
[178.99223328 78.61067963]
[192.59136963 68.48645782]
[206.08453369 78.75147247]
[199.95596313 94.55896759]
[183.06967163 93.04586029]
[168.63450623 97.12330627]
[154.19932556 101.20075989]
[139.76414490 105.27821350]
[125.32896423 109.35565948]
[116.27804565 121.31730652]
[116.27804565 136.31730652]
[116.39949799 151.31681824]
[116.64239502 166.31484985]
[116.88528442 181.31288147]
[124.84503937 194.98594666]
[117.31484985 207.83683777]
[117.55774689 222.83488464]
[117.80064392 237.83291626]
[121.07241821 246.37692261]
[117.92405701 253.07531738]
[117.92405701 268.07531738]
[117.92405701 283.07531738]
[117.92405701 298.07531738]
[121.05706024 306.67117310]
[117.80064392 313.31771851]
[117.55774689 328.31576538]
[117.31484985 343.31378174]
[117.07195282 358.31182861]
[116.82905579 373.30984497]
[119.82244873 381.95532227]
[116.45883179 388.54824829]
[115.97310638 403.54040527]
[115.48737335 418.53253174]
[128.13496399 437.97268677]
[115.73766327 456.69033813]
[116.46609497 471.67263794]
[117.19452667 486.65493774]
[117.92295837 501.63723755]
[118.65139771 516.61956787]
[119.37982941 531.60186768]
[129.70841980 546.83862305]
[121.09666443 562.12231445]
[122.06761169 577.09088135]
[123.03855896 592.05938721]
[124.00950623 607.02795410]
[124.98045349 621.99652100]
[125.95140076 636.96502686]
[126.92234802 651.93359375]
[127.89329529 666.90209961]
[131.57612610 675.27716064]
[128.75677490 682.12054443]
[129.48521423 697.10284424]
[130.21363831 712.08514404]
[130.94207764 727.06744385]
[131.67050171 742.04974365]
[132.39894104 757.03204346]
[141.72859192 770.51873779]
[134.47001648 785.22399902]
[118.09022522 786.02038574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 190]
[2 189]
[3 188]
[4 187]
[5 186]
[6 185]
[7 183]
[8 182]
[9 181]
[10 180]
[11 179]
[12 178]
[13 177]
[14 176]
[17 174]
[18 173]
[19 172]
[20 171]
[21 170]
[22 169]
[29 167]
[30 166]
[31 165]
[32 163]
[33 162]
[34 161]
[35 160]
[36 159]
[37 157]
[38 156]
[39 155]
[40 154]
[41 152]
[42 151]
[43 150]
[45 148]
[46 147]
[47 146]
[49 145]
[50 144]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[74 130]
[75 129]
[76 128]
[77 127]
[78 86]
[79 85]
[80 84]
[87 98]
[88 97]
[89 96]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
[108 116]
[109 115]
[110 114]
[131 143]
[132 142]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
