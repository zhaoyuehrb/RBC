%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGGAACCAAUGGCAGCACCCAAACCCAUUUCAUCCUACUGGGAUUCUCUGACCGACCCCAUCUGGAGAGGAUCCUCUUUGUGGUCAUCCUGAUCG\
) } def
/len { sequence length } bind def

/coor [
[75.84048462 137.71020508]
[65.78308105 128.89538574]
[58.77680206 117.50397491]
[44.18312454 120.97161865]
[29.58944702 124.43927002]
[14.99576950 127.90691376]
[0.40209168 131.37455750]
[-14.19158649 134.84219360]
[-28.78526497 138.30984497]
[-43.37894440 141.77749634]
[-47.91133499 158.59825134]
[-60.20020676 170.82170105]
[-76.87512970 175.21945190]
[-93.42446899 170.69261169]
[-105.41603851 158.54476929]
[-119.76590729 162.91297913]
[-134.11576843 167.28120422]
[-141.33021545 181.34275818]
[-156.40000916 186.10479736]
[-170.38450623 178.74208069]
[-174.98693848 163.62278748]
[-167.47679138 149.71691895]
[-152.30967712 145.27458191]
[-138.48399353 152.93133545]
[-124.13412476 148.56312561]
[-109.78426361 144.19490051]
[-108.22112274 131.46446228]
[-101.88224792 120.26007843]
[-91.70116425 112.30511475]
[-79.20547485 108.83895111]
[-66.28767395 110.42399597]
[-54.91857529 116.85478973]
[-46.84658813 127.18381500]
[-32.25291061 123.71617126]
[-17.65923119 120.24851990]
[-3.06555319 116.78087616]
[11.52812481 113.31323242]
[26.12180328 109.84558868]
[40.71548080 106.37794495]
[55.30915833 102.91030121]
[58.37264633 83.48017883]
[69.46619415 67.23679352]
[86.44982147 57.31354141]
[106.04732513 55.62466049]
[124.47827911 62.49593735]
[134.66458130 51.48505783]
[144.85087585 40.47418213]
[155.03715515 29.46330261]
[165.22344971 18.45242500]
[175.40974426 7.44154692]
[185.59603882 -3.56933117]
[195.78233337 -14.58020878]
[205.96862793 -25.59108734]
[216.15492249 -36.60196304]
[218.06550598 -43.23286438]
[222.45455933 -47.18835831]
[227.33329773 -47.95556259]
[238.18443298 -58.31186295]
[249.03556824 -68.66815948]
[246.83293152 -84.02811432]
[254.10908508 -97.73348999]
[268.06616211 -104.51429749]
[283.33740234 -101.76317596]
[294.05072021 -90.53798676]
[296.08657837 -75.15504456]
[288.66220093 -61.52940750]
[274.63235474 -54.90040970]
[259.39187622 -57.81703186]
[248.54072571 -47.46073151]
[237.68960571 -37.10443115]
[227.16580200 -26.41567230]
[216.97950745 -15.40479374]
[206.79321289 -4.39391565]
[196.60691833 6.61696196]
[186.42062378 17.62784004]
[176.23432922 28.63871765]
[166.04803467 39.64959717]
[155.86174011 50.66047287]
[145.67546082 61.67135239]
[135.48916626 72.68222809]
[140.65156555 81.20662689]
[143.80108643 90.66159821]
[144.78175354 100.57896423]
[143.54502869 110.46766663]
[140.15211487 119.83805084]
[134.77105713 128.22613525]
[127.66826630 135.21658325]
[134.82907104 148.39698792]
[141.98986816 161.57739258]
[149.15066528 174.75779724]
[156.31146240 187.93818665]
[169.18572998 198.96949768]
[162.14949036 214.39439392]
[145.37956238 211.90316772]
[143.13105774 195.09898376]
[135.97026062 181.91859436]
[128.80946350 168.73818970]
[121.64866638 155.55778503]
[114.48786926 142.37738037]
[101.32929993 144.76576233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[15 26]
[16 25]
[17 24]
[45 80]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[57 70]
[58 69]
[59 68]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
