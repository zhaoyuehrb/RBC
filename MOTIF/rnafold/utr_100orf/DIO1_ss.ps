%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCUUACUCUGGCUUUGCCGAGAUGGGGCUGCCCCAGCCAGGGCUGUGGCUGAAGAGGCUCUGGGUGCUCUUGGAGGUGGCUGUGCAUGUGGUCGUGGGUAAAGUGCUUCUGAUAUUGUUUC\
) } def
/len { sequence length } bind def

/coor [
[158.53048706 135.04632568]
[172.40727234 129.35505676]
[158.02944946 125.07977295]
[143.65161133 120.80448151]
[129.27378845 116.52919769]
[120.11661530 126.93493652]
[107.53953552 132.76162720]
[93.68069458 133.01872253]
[80.89617157 127.66248322]
[69.83347321 137.79248047]
[58.77077484 147.92247009]
[54.49159622 156.12220764]
[47.30045319 158.16371155]
[35.98668289 168.01249695]
[24.67291260 177.86129761]
[16.69616508 192.82150269]
[0.11242401 189.29788208]
[-1.09250188 172.38681030]
[14.82412624 166.54751587]
[26.13789749 156.69873047]
[37.45166779 146.84994507]
[48.64078522 136.85977173]
[59.70347977 126.72977448]
[70.76618195 116.59978485]
[68.44165802 111.58620453]
[66.96990204 106.25953674]
[51.98056030 105.69418335]
[36.99121857 105.12882996]
[22.00187492 104.56347656]
[7.01253319 103.99812317]
[-9.04323292 109.44319153]
[-18.72017860 95.52223206]
[-8.02210426 82.36975861]
[7.57788610 89.00878143]
[22.56722832 89.57413483]
[37.55657196 90.13948822]
[52.54591370 90.70484161]
[67.53525543 91.27019501]
[71.61539459 81.98657990]
[78.27822113 74.34198761]
[71.38452148 61.01994324]
[64.49082184 47.69789505]
[57.59712601 34.37585068]
[50.70343018 21.05380249]
[43.80973053 7.73175669]
[36.91603088 -5.59029007]
[30.02233505 -18.91233635]
[14.71684647 -18.93732452]
[1.18153262 -26.08252335]
[-7.47329140 -38.70601654]
[-9.25881004 -53.90702057]
[-3.76472497 -68.19245148]
[7.74646425 -78.27963257]
[22.62957001 -81.85058594]
[37.46456528 -78.08474731]
[48.84247208 -67.84747314]
[54.14873505 -53.49121857]
[52.16401291 -38.31493759]
[43.34438324 -25.80603409]
[50.23807907 -12.48398781]
[57.13177872 0.83805859]
[64.02547455 14.16010571]
[70.91917419 27.48215294]
[77.81287384 40.80419922]
[84.70656586 54.12624741]
[91.60026550 67.44829559]
[112.36303711 68.73780823]
[128.39184570 81.99800110]
[133.54908752 102.15136719]
[147.92691040 106.42665863]
[162.30473328 110.70195007]
[176.68255615 114.97723389]
[191.51234436 117.23062134]
[206.51115417 117.41911316]
[221.50996399 117.60759735]
[236.50878906 117.79608917]
[251.50759888 117.98458099]
[266.50640869 118.17307281]
[281.50521851 118.36156464]
[296.50405884 118.55005646]
[311.50286865 118.73854828]
[320.23535156 115.69049072]
[326.87500000 119.12496948]
[341.86431885 119.69032288]
[352.53909302 105.14980316]
[369.63067627 99.89057159]
[386.33959961 105.81045532]
[396.13415527 120.39819336]
[411.13296509 120.20970154]
[426.13177490 120.02120972]
[441.13058472 119.83271790]
[454.94442749 110.99473572]
[469.37881470 118.77809143]
[469.58486938 135.17594910]
[455.35064697 143.31958008]
[441.31909180 134.83154297]
[426.32028198 135.02001953]
[411.32144165 135.20851135]
[396.32263184 135.39700317]
[390.78649902 146.34169006]
[381.03771973 153.90361023]
[368.91830444 156.57524109]
[356.75213623 153.78062439]
[346.89947510 145.99806213]
[341.29898071 134.67965698]
[326.30963135 134.11431885]
[311.31436157 133.73736572]
[296.31555176 133.54887390]
[281.31674194 133.36038208]
[266.31793213 133.17189026]
[251.31910706 132.98339844]
[236.32029724 132.79490662]
[221.32147217 132.60641479]
[206.32266235 132.41792297]
[191.32385254 132.22943115]
[202.88467407 141.78701782]
[208.82191467 155.56196594]
[207.83172607 170.52925110]
[200.13157654 183.40199280]
[187.41242981 191.35331726]
[172.46746826 192.63705444]
[158.57864380 186.97131348]
[148.79600525 175.60031128]
[145.26783752 161.02114868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[9 24]
[10 23]
[11 22]
[13 21]
[14 20]
[15 19]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[78 110]
[79 109]
[80 108]
[81 107]
[83 106]
[84 105]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
