%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGUGUCUGCUGCUCCCUAGUCUGGGCCAUGAGUGAGGGUGGAGGCCAAGUCUCAUGCAUUUUUGCAGCCCCCACAAGACUGUGCAGGUGGCCGGCCCUCAUUGAAUGCGGGGUUAAUUUAACUCAGC\
) } def
/len { sequence length } bind def

/coor [
[72.67137909 274.50433350]
[67.75874329 264.36962891]
[56.59553528 274.38876343]
[45.43233109 284.40789795]
[34.26912689 294.42700195]
[29.91562080 302.57287598]
[22.71602249 304.54861450]
[11.31577492 314.29714966]
[-0.08447158 324.04571533]
[-11.48471832 333.79428101]
[-22.64792252 343.81338501]
[-33.56766510 354.09732056]
[-44.48741150 364.38125610]
[-55.40715408 374.66519165]
[-57.32329178 390.59341431]
[-71.04635620 398.90347290]
[-86.04917908 393.22061157]
[-90.82288361 377.90423584]
[-81.70549011 364.70376587]
[-65.69108582 363.74545288]
[-54.77133942 353.46151733]
[-43.85159683 343.17758179]
[-32.93185425 332.89364624]
[-31.90101814 328.13739014]
[-27.80945015 324.01419067]
[-21.23327637 322.39404297]
[-9.83302879 312.64547729]
[1.56721795 302.89691162]
[12.96746445 293.14834595]
[24.25000191 283.26379395]
[35.41320801 273.24468994]
[46.57641220 263.22555542]
[57.73961639 253.20643616]
[65.13553619 240.15650940]
[67.99570465 225.43171692]
[70.85588074 210.70693970]
[73.71605682 195.98214722]
[76.57622528 181.25735474]
[79.43640137 166.53256226]
[82.29656982 151.80778503]
[85.15674591 137.08299255]
[88.01692200 122.35820007]
[75.59162903 106.90757751]
[78.07762909 87.23705292]
[67.92536926 76.19478607]
[57.77311325 65.15251923]
[47.62085342 54.11024857]
[37.46859741 43.06798172]
[22.29738235 35.50025177]
[25.36955261 18.82697487]
[42.24169159 17.16346169]
[48.51086807 32.91572189]
[58.66312408 43.95799255]
[68.81537628 55.00025940]
[78.96763611 66.04252625]
[89.11989594 77.08479309]
[88.80204010 73.07096863]
[88.85621643 68.97888947]
[87.41952515 54.04785156]
[85.98283386 39.11681366]
[84.54614258 24.18577385]
[74.58865356 11.15578938]
[81.14312744 -3.87653923]
[97.46688080 -5.44724035]
[106.76743317 8.05948830]
[99.47718048 22.74908257]
[100.91387177 37.68012238]
[102.35056305 52.61116028]
[103.78725433 67.54219818]
[117.88946533 72.65371704]
[128.55946350 62.11089706]
[139.22946167 51.56807709]
[149.77229309 40.89807510]
[160.18641663 30.10242462]
[170.33866882 19.06015778]
[180.22322083 7.77762079]
[190.10777283 -3.50491643]
[199.99232483 -14.78745365]
[202.65112305 -30.96962929]
[218.08811951 -36.50417709]
[230.42304993 -25.69762993]
[226.96679688 -9.66683578]
[211.27485657 -4.90290213]
[201.39030457 6.37963486]
[191.50575256 17.66217232]
[181.62120056 28.94470978]
[181.05065918 33.77783203]
[177.37281799 38.27397537]
[170.98205566 40.51654816]
[160.56793213 51.31219864]
[158.16438293 58.38047791]
[149.77229309 62.23807907]
[139.10227966 72.78089905]
[128.43228149 83.32371521]
[130.15808105 104.06140900]
[119.47348022 119.97793579]
[102.74170685 125.21837616]
[99.88153839 139.94316101]
[97.02136230 154.66795349]
[94.16118622 169.39274597]
[91.30101776 184.11752319]
[88.44084167 198.84231567]
[85.58067322 213.56710815]
[82.72049713 228.29190063]
[79.86032104 243.01667786]
[91.07954407 241.52262878]
[101.14298248 245.77703857]
[107.41902161 254.23654175]
[108.48757172 264.32110596]
[104.44687653 273.19305420]
[111.99874115 286.15335083]
[125.63172150 294.18157959]
[125.35417938 309.07357788]
[132.90603638 322.03390503]
[140.45790100 334.99420166]
[148.00976562 347.95449829]
[155.56163025 360.91479492]
[163.11349487 373.87509155]
[176.31198120 384.51635742]
[169.74029541 400.14483643]
[152.90336609 398.15634155]
[150.15318298 381.42694092]
[142.60133362 368.46664429]
[135.04946899 355.50634766]
[127.49760437 342.54605103]
[119.94573975 329.58575439]
[112.39388275 316.62545776]
[99.30105591 309.52423096]
[99.03843689 293.70520020]
[91.48657990 280.74490356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 23]
[12 22]
[13 21]
[14 20]
[34 105]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[58 69]
[59 68]
[60 67]
[61 66]
[70 94]
[71 93]
[72 92]
[73 90]
[74 89]
[75 86]
[76 85]
[77 84]
[78 83]
[110 130]
[111 129]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
