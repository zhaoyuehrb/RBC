%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUUGCAGGUGCCACCCAGCGGGUUCCAGCUUGUUUGCUGCAUAGAUUACAACGGUGAUGGCGGGCAAGCGGUCCGGCUGGAGCCGGGCGGCUCUCCUCCAGCUCCUUCUCGGCGUGAACCUGGUGGUGAUGCCGCCCACCCGGGCCCGGAGUCUGC\
) } def
/len { sequence length } bind def

/coor [
[103.08396912 261.70578003]
[90.91403198 271.78884888]
[75.18680573 270.23004150]
[65.23297119 257.95419312]
[66.95796204 242.24432373]
[79.33837891 232.42083740]
[80.81784821 217.49397278]
[82.29732513 202.56710815]
[83.77679443 187.64025879]
[85.25627136 172.71339417]
[75.64512634 161.39254761]
[76.93288422 146.23350525]
[88.87239838 136.22921753]
[90.35186768 121.30236053]
[82.79507446 115.83879852]
[77.97393799 107.85681152]
[76.65502930 98.62555695]
[62.75468063 92.98813629]
[48.85433578 87.35072327]
[34.95399475 81.71331024]
[21.05364990 76.07589722]
[5.35728216 78.05948639]
[-3.52905750 66.10615540]
[-17.42940140 60.46873856]
[-29.62624741 64.76963043]
[-41.10738373 59.74775696]
[-45.90959167 48.60897446]
[-59.69584274 42.69802856]
[-68.87036896 42.18387985]
[-73.69425201 36.53170395]
[-87.36103058 30.34953690]
[-101.02780914 24.16736794]
[-114.69458008 17.98519897]
[-128.36135864 11.80303192]
[-142.02813721 5.62086391]
[-155.69491577 -0.56130427]
[-169.36169434 -6.74347210]
[-183.02847290 -12.92564011]
[-196.69525146 -19.10780907]
[-210.36203003 -25.28997612]
[-224.02879333 -31.47214508]
[-237.75598145 -37.51899719]
[-251.54223633 -43.42993927]
[-265.32849121 -49.34088516]
[-277.16592407 -39.63862610]
[-292.15863037 -36.56019211]
[-306.86145020 -40.81298447]
[-317.89572144 -51.41973877]
[-322.72589111 -65.94309998]
[-320.24200439 -81.04571533]
[-311.01483154 -93.25710297]
[-297.16473389 -99.77117920]
[-281.87432861 -99.09106445]
[-268.65728760 -91.37303162]
[-260.55075073 -78.39064026]
[-259.41754150 -63.12713623]
[-245.63128662 -57.21619415]
[-231.84504700 -51.30524826]
[-224.41864014 -51.56114960]
[-217.84663391 -45.13891983]
[-204.17985535 -38.95675278]
[-190.51307678 -32.77458572]
[-176.84629822 -26.59241676]
[-163.17951965 -20.41024971]
[-149.51274109 -14.22808170]
[-135.84596252 -8.04591370]
[-122.17919159 -1.86374533]
[-108.51241302 4.31842279]
[-94.84563446 10.50059032]
[-81.17886353 16.68275833]
[-67.51208496 22.86492729]
[-53.78490067 28.91177750]
[-39.99864578 34.82272339]
[-22.73665428 31.79038620]
[-11.79198837 46.56839371]
[2.10835624 52.20581055]
[16.81047821 49.81899261]
[26.69106293 62.17555618]
[40.59140778 67.81296539]
[54.49175262 73.45037842]
[68.39209747 79.08779907]
[82.29244232 84.72521210]
[102.76586914 76.77873993]
[120.79998779 89.31181335]
[135.63558960 87.09711456]
[150.47119141 84.88241577]
[165.17935181 81.93789673]
[179.72418213 78.27073669]
[194.26899719 74.60357666]
[208.81382751 70.93641663]
[223.35865784 67.26925659]
[237.90347290 63.60210037]
[252.44830322 59.93494034]
[266.95617676 56.12427139]
[281.42572021 52.17046738]
[292.69839478 41.06924057]
[307.01504517 45.17817307]
[321.48458862 41.22436523]
[332.75726318 30.12314034]
[347.07388306 34.23207092]
[361.54342651 30.27826309]
[376.01296997 26.32445526]
[390.48248291 22.37064743]
[394.06207275 13.54522133]
[401.21688843 7.47080421]
[410.23675537 5.43164110]
[419.04174805 7.76690483]
[425.66159058 13.82180214]
[440.33993530 10.73212242]
[455.01828003 7.64244318]
[462.22686768 -6.23452520]
[476.68865967 -12.18353176]
[491.57522583 -7.39563751]
[499.85760498 5.86846018]
[497.62509155 21.34585953]
[485.93182373 31.72860718]
[470.29901123 32.11428452]
[458.10797119 22.32079124]
[443.42962646 25.41046906]
[428.75128174 28.50014877]
[414.73214722 43.60804367]
[394.43630981 36.84018326]
[379.96676636 40.79398727]
[365.49722290 44.74779510]
[351.02770996 48.70160294]
[340.78997803 59.52002335]
[325.43838501 55.69389725]
[310.96884155 59.64770508]
[300.73110962 70.46612549]
[285.37951660 66.63999939]
[270.91000366 70.59380341]
[265.25653076 75.41619110]
[256.11544800 74.47976685]
[241.57063293 78.14692688]
[227.02580261 81.81408691]
[212.48098755 85.48124695]
[197.93615723 89.14839935]
[183.39132690 92.81555939]
[168.84651184 96.48271942]
[179.98616028 106.52803040]
[179.28024292 121.51140594]
[167.24548340 130.46487427]
[152.69145203 126.83441925]
[146.27183533 113.27755737]
[152.68589783 99.71801758]
[137.85029602 101.93271637]
[123.01468658 104.14741516]
[119.73143005 112.55180359]
[113.51074982 119.08760071]
[105.27873230 122.78182983]
[103.79925537 137.70869446]
[113.54261017 149.86207581]
[111.82957458 164.97895813]
[100.18312836 174.19287109]
[98.70365906 189.11972046]
[97.22418213 204.04658508]
[95.74471283 218.97344971]
[94.26523590 233.90029907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 158]
[7 157]
[8 156]
[9 155]
[10 154]
[13 151]
[14 150]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[23 76]
[24 75]
[27 73]
[28 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 58]
[43 57]
[44 56]
[84 147]
[85 146]
[86 145]
[87 139]
[88 138]
[89 137]
[90 136]
[91 135]
[92 134]
[93 133]
[94 131]
[95 130]
[97 128]
[98 127]
[100 125]
[101 124]
[102 123]
[103 122]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
