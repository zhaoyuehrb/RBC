%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGCCUCAGGAACCCCAGCCUGCCAGCACCUAUUCCACCUCCCAGCCCAGCAUGGCACCCCUGCUGCCCAUCCGGACCUUGCCCUUGAUCCUGAUUCUGCUGGCUCUGCUGUCCCCAGGGGCUGCAGACUUCAACAUCUCAAGCCUCUCUG\
) } def
/len { sequence length } bind def

/coor [
[181.01065063 378.98413086]
[166.15022278 376.94262695]
[153.11100769 369.52786255]
[143.75839233 357.80059814]
[139.43038940 343.43853760]
[140.74617004 328.49636841]
[147.51748657 315.11169434]
[158.77561951 305.19937134]
[172.90998840 300.17745972]
[187.89849854 300.76440430]
[201.59834290 306.87722778]
[193.74781799 294.09564209]
[185.89730835 281.31402588]
[183.14071655 280.54965210]
[180.53097534 278.61410522]
[178.52832031 275.56140137]
[177.56332397 271.61563110]
[177.97729492 267.15490723]
[171.19471741 253.77595520]
[164.41213989 240.39698792]
[157.62956238 227.01802063]
[141.45799255 222.50077820]
[133.37229919 207.40188599]
[138.78442383 190.79705811]
[131.73034668 177.55923462]
[124.67626190 164.32141113]
[117.62218475 151.08358765]
[110.56810760 137.84576416]
[103.51403046 124.60794067]
[96.45995331 111.37011719]
[100.11026764 125.91917419]
[99.41567230 140.90309143]
[94.43504333 155.05204773]
[85.59044647 167.16705322]
[73.63140869 176.22140503]
[59.57137299 181.44781494]
[44.60184097 182.40339661]
[29.99138260 179.00715637]
[16.97813797 171.54689026]
[6.66489363 160.65483093]
[-0.07436912 147.25399780]
[-2.66854191 132.48002625]
[-0.89778572 117.58491516]
[5.08783960 103.83091736]
[14.78109074 92.38361359]
[27.36052895 84.21307373]
[41.76012802 80.01169586]
[56.75961685 80.13552856]
[71.08789062 84.57408142]
[83.53359985 92.95383453]
[73.48149109 81.82032013]
[63.42937851 70.68680573]
[53.37726974 59.55329514]
[43.32516098 48.41978455]
[35.19996643 44.11286545]
[33.18440247 36.95512390]
[23.36149025 25.61887932]
[7.69574881 20.76948929]
[4.32692242 4.72009611]
[16.72057152 -6.01906157]
[32.12717056 -0.40045834]
[34.69773483 15.79596901]
[44.52064514 27.13221169]
[54.45867157 38.36767578]
[64.51078033 49.50118637]
[74.56288910 60.63469696]
[84.61500549 71.76821136]
[94.66711426 82.90171814]
[101.99571228 81.30747986]
[106.56271362 67.01963806]
[116.65291595 78.11900330]
[123.98152161 76.52476501]
[128.50021362 62.22156525]
[133.01890564 47.91836929]
[129.79827881 32.42843246]
[141.01019287 22.62322235]
[145.52888489 8.32002640]
[150.04757690 -5.98316956]
[138.89454651 -16.40298080]
[133.37500000 -30.63313675]
[134.58483887 -45.84822845]
[142.28387451 -59.02729034]
[154.94345093 -67.55360413]
[170.04998779 -69.73427582]
[184.60408020 -65.13631439]
[195.71598816 -54.67266464]
[201.17945862 -40.42088318]
[199.90969849 -25.21067429]
[192.15882874 -12.06203556]
[179.46578979 -3.58563781]
[164.35078430 -1.46447682]
[159.83207703 12.83871937]
[155.31338501 27.14191437]
[158.85722351 41.60879135]
[147.32209778 52.43706512]
[142.80340576 66.74025726]
[138.28471375 81.04345703]
[131.57377625 94.67997742]
[121.14811707 102.67677307]
[109.69777679 104.31603241]
[116.75185394 117.55386353]
[123.80593109 130.79168701]
[130.86001587 144.02951050]
[137.91409302 157.26733398]
[144.96817017 170.50515747]
[152.02224731 183.74298096]
[165.30680847 186.17335510]
[174.61627197 195.68608093]
[176.69721985 208.63505554]
[171.00852966 220.23544312]
[177.79110718 233.61441040]
[184.57368469 246.99337769]
[191.35626221 260.37234497]
[198.67890930 273.46350098]
[206.52941895 286.24511719]
[214.37994385 299.02670288]
[221.45321655 302.02725220]
[225.55421448 307.60839844]
[226.12472534 313.75421143]
[236.83895874 324.25207520]
[247.55319214 334.74993896]
[258.26742554 345.24780273]
[268.98165894 355.74566650]
[279.69589233 366.24353027]
[290.41012573 376.74139404]
[305.98696899 376.75122070]
[316.70318604 387.55017090]
[316.59783936 402.40023804]
[327.31207275 412.89810181]
[338.02630615 423.39596558]
[353.30377197 420.67968750]
[367.24536133 427.49227905]
[374.49023438 441.21423340]
[372.25259399 456.56912231]
[361.39285278 467.65267944]
[346.08679199 470.20309448]
[332.21994019 463.23962402]
[325.12435913 449.43991089]
[327.52844238 434.11019897]
[316.81420898 423.61233521]
[306.09997559 413.11447144]
[291.25512695 413.52270508]
[280.23983765 403.02902222]
[279.91226196 387.45562744]
[269.19802856 376.95776367]
[258.48379517 366.45989990]
[247.76956177 355.96203613]
[237.05532837 345.46417236]
[226.34109497 334.96630859]
[215.62686157 324.46844482]
[218.53791809 339.18325806]
[215.77554321 353.92669678]
[207.73490906 366.58956909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 116]
[12 115]
[13 114]
[18 113]
[19 112]
[20 111]
[21 110]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[56 63]
[57 62]
[72 97]
[73 96]
[74 95]
[76 93]
[77 92]
[78 91]
[119 150]
[120 149]
[121 148]
[122 147]
[123 146]
[124 145]
[125 144]
[128 141]
[129 140]
[130 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
