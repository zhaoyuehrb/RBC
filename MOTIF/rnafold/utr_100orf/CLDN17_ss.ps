%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUCCGAAUUGAACCAGUCUUCAAAGUAAAGGCAAUGGCAUUUUAUCCCUUGCAAAUUGCUGGGCUGGUUCUUGGGUUCCUUGGCAUGGUGGGGACUCUUGCCACAACCCUUCUGCCUCAGUGGAGAGUAUCAG\
) } def
/len { sequence length } bind def

/coor [
[81.77422333 211.19036865]
[85.64138031 196.16290283]
[97.62431335 186.30447388]
[96.59321594 171.33995056]
[95.56212616 156.37542725]
[94.53102875 141.41090393]
[85.43306732 138.22747803]
[77.49222565 133.12374878]
[71.09413910 126.45687103]
[66.52349091 118.65623474]
[63.95193481 110.19657135]
[63.43285370 101.56944275]
[64.90309906 93.25479126]
[51.09477997 87.39558411]
[37.28646088 81.53636932]
[23.47814178 75.67716217]
[9.66982174 69.81795502]
[-4.13849735 63.95874786]
[-17.94681740 58.09954071]
[-31.75513649 52.24033356]
[-45.56345367 46.38112640]
[-59.37177658 40.52191925]
[-63.85684204 41.25319672]
[-67.91078186 40.53753662]
[-71.11890411 38.70248413]
[-73.22200775 36.17937088]
[-74.13711548 33.44107437]
[-87.35070038 26.34169960]
[-100.56429291 19.24232674]
[-113.77787781 12.14295197]
[-126.99146271 5.04357767]
[-143.59971619 10.40209103]
[-158.66954041 2.28958774]
[-163.16105652 -13.87613678]
[-176.53395081 -20.67066574]
[-189.90684509 -27.46519470]
[-203.27973938 -34.25972366]
[-219.08772278 -33.61275864]
[-226.92965698 -46.27582169]
[-240.30256653 -53.07035065]
[-254.05848694 -45.89024734]
[-269.40264893 -48.20025253]
[-280.43490601 -59.11212540]
[-282.91314697 -74.43002319]
[-275.88439941 -88.26390839]
[-262.05136108 -95.29436493]
[-246.73316956 -92.81803894]
[-235.81993103 -81.78713226]
[-233.50802612 -66.44325256]
[-220.13513184 -59.64871979]
[-205.28367615 -60.78167343]
[-196.48521423 -47.63262177]
[-183.11231995 -40.83809280]
[-169.73942566 -34.04356384]
[-156.36651611 -27.24903297]
[-144.74497986 -32.93096161]
[-131.78392029 -30.82339859]
[-122.28303528 -21.47850418]
[-119.89208984 -8.17000961]
[-106.67850494 -1.07063532]
[-93.46492004 6.02873898]
[-80.25132751 13.12811279]
[-67.03774261 20.22748756]
[-53.51256561 26.71359825]
[-39.70424652 32.57280731]
[-25.89592743 38.43201447]
[-12.08760929 44.29122162]
[1.72071040 50.15042877]
[15.52902985 56.00963593]
[29.33734894 61.86884689]
[43.14566803 67.72805023]
[56.95398712 73.58726501]
[70.76230621 79.44647217]
[88.77944183 66.06787109]
[111.22055817 66.06787109]
[129.23768616 79.44647217]
[143.04600525 73.58726501]
[156.85432434 67.72805023]
[170.66264343 61.86884689]
[184.47097778 56.00963593]
[188.00128174 45.60465622]
[196.53138733 39.03480911]
[207.05258179 38.30898666]
[216.02056885 43.42675781]
[230.08299255 38.20677567]
[244.14541626 32.98679352]
[258.20782471 27.76681137]
[272.27026367 22.54682922]
[283.62954712 8.10560608]
[300.78668213 11.61038399]
[314.72573853 6.06933260]
[328.66476440 0.52828050]
[338.40332031 -12.66613197]
[354.66677856 -10.56087208]
[360.72467041 4.67834902]
[350.34518433 17.37472725]
[334.20581055 14.46731758]
[320.26678467 20.00836945]
[306.32775879 25.54942131]
[301.21542358 36.57322693]
[289.57608032 41.27606964]
[277.49023438 36.60925293]
[263.42782593 41.82923508]
[249.36540222 47.04921722]
[235.30297852 52.26919937]
[221.24055481 57.48918533]
[210.13453674 73.25478363]
[190.33018494 69.81795502]
[176.52186584 75.67716217]
[162.71354675 81.53636932]
[148.90521240 87.39558411]
[135.09689331 93.25479126]
[137.88684082 108.15631104]
[134.14201355 124.06441498]
[144.44026184 134.97064209]
[154.73852539 145.87687683]
[165.03678894 156.78311157]
[175.33503723 167.68934631]
[191.19364929 171.86502075]
[195.24508667 187.75584412]
[183.32154846 199.01467896]
[167.68898010 194.05941772]
[164.42880249 177.98759460]
[154.13055420 167.08137512]
[143.83229065 156.17514038]
[133.53404236 145.26890564]
[123.23577881 134.36267090]
[109.49554443 140.37980652]
[110.52664185 155.34432983]
[111.55773926 170.30885315]
[112.58883667 185.27337646]
[125.81065369 193.39514160]
[131.70234680 207.75018311]
[127.99843597 222.81872559]
[116.12315369 232.80657959]
[100.64278412 233.87321472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[13 73]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[22 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[34 55]
[35 54]
[36 53]
[37 52]
[39 50]
[40 49]
[76 112]
[77 111]
[78 110]
[79 109]
[80 108]
[84 106]
[85 105]
[86 104]
[87 103]
[88 102]
[90 99]
[91 98]
[92 97]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
