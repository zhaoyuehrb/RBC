%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGCGGCAGGGGGAACCCAGGGAGCGCGAUGGGCUGCAGGGCUGCAUCAGGGCUCCUGCCAGGAGUGGCCGUGGUCCUCCUGCUGCUGCUGCAGAGCACACAGUCAGUCUACAUCCAGUACCAAGGCU\
) } def
/len { sequence length } bind def

/coor [
[102.56698608 166.27717590]
[94.70652008 153.50167847]
[86.84605408 140.72619629]
[85.40064240 99.00276947]
[73.54611206 89.81201172]
[61.69158173 80.62124634]
[49.83705139 71.43048096]
[37.98252487 62.23971939]
[26.12799454 53.04895782]
[14.27346420 43.85819244]
[2.41893458 34.66743088]
[-9.43559456 25.47666740]
[-21.29012489 16.28590393]
[-33.14465332 7.09514141]
[-44.99918365 -2.09562182]
[-56.85371399 -11.28638554]
[-65.64700317 -14.11241245]
[-68.87880707 -20.84242630]
[-80.50954437 -30.31480980]
[-101.51745605 -24.56482315]
[-121.27085114 -36.97781754]
[-125.77970123 -61.44542694]
[-139.75527954 -66.89363861]
[-153.73086548 -72.34185028]
[-167.70645142 -77.79005432]
[-181.68203735 -83.23826599]
[-195.65762329 -88.68647766]
[-211.48901367 -81.35697174]
[-227.42800903 -87.57606506]
[-233.85388184 -103.06921387]
[-247.95610046 -108.18073273]
[-262.05831909 -113.29225159]
[-276.16052246 -118.40377045]
[-290.32299805 -123.34582520]
[-304.54373169 -128.11770630]
[-318.76446533 -132.88960266]
[-332.98519897 -137.66148376]
[-348.94177246 -133.87739563]
[-359.99887085 -145.98825073]
[-354.78189087 -161.53543091]
[-338.65759277 -164.52534485]
[-328.21331787 -151.88221741]
[-313.99258423 -147.11032104]
[-299.77185059 -142.33843994]
[-285.55111694 -137.56655884]
[-278.13543701 -138.42974854]
[-271.04901123 -132.50598145]
[-256.94677734 -127.39446259]
[-242.84457397 -122.28294373]
[-228.74237061 -117.17142487]
[-217.89479065 -124.23161316]
[-204.76689148 -123.71625519]
[-194.19656372 -115.58957672]
[-190.20942688 -102.66206360]
[-176.23384094 -97.21385193]
[-162.25825500 -91.76564789]
[-148.28266907 -86.31743622]
[-134.30708313 -80.86922455]
[-120.33148956 -75.42101288]
[-107.94756317 -83.88496399]
[-107.94756317 -98.88496399]
[-107.94756317 -113.88496399]
[-107.94756317 -128.88496399]
[-116.61126709 -142.80876160]
[-108.64714050 -157.14419556]
[-92.24799347 -157.14419556]
[-84.28386688 -142.80876160]
[-92.94756317 -128.88496399]
[-92.94756317 -113.88496399]
[-92.94756317 -98.88496399]
[-92.94756317 -83.88496399]
[-79.40435028 -78.09731293]
[-70.47207642 -67.25453186]
[-67.67536926 -54.18166733]
[-71.03715515 -41.94554138]
[-59.40642548 -32.47315979]
[-47.66294861 -23.14091492]
[-35.80842209 -13.95015144]
[-23.95389175 -4.75938845]
[-12.09936142 4.43137503]
[-0.24483180 13.62213802]
[11.60969734 22.81290054]
[23.46422768 32.00366592]
[35.31875610 41.19442749]
[47.17328644 50.38518906]
[59.02781677 59.57595444]
[70.88234711 68.76671600]
[82.73687744 77.95748138]
[94.59140778 87.14824677]
[109.16213226 90.71110535]
[123.92015839 88.02769470]
[138.67817688 85.34428406]
[150.82748413 74.32946014]
[166.35639954 79.60059357]
[169.29011536 95.73519135]
[156.61065674 106.13536835]
[141.36158752 100.10231018]
[126.60356140 102.78572083]
[111.84554291 105.46913147]
[108.78953552 112.31828308]
[123.70610809 113.89815521]
[126.81300354 128.57287598]
[113.81659698 136.06242371]
[102.67753601 126.01657867]
[99.62153625 132.86573792]
[107.48200226 145.64122009]
[115.34247589 158.41670227]
[123.35556030 171.09701538]
[131.52012634 183.68034363]
[139.68467712 196.26365662]
[147.84922791 208.84698486]
[156.01379395 221.43031311]
[171.04951477 219.01231384]
[185.76716614 222.92523193]
[197.61679077 232.49111938]
[204.54539490 246.05261230]
[205.35255432 261.26013184]
[199.89840698 275.47885132]
[189.12792969 286.24533081]
[174.90716553 291.69415283]
[159.69995117 290.88134766]
[146.14103699 283.94766235]
[136.57957458 272.09448242]
[132.67214966 257.37536621]
[135.09574890 242.34054565]
[143.43046570 229.59486389]
[135.26591492 217.01153564]
[127.10135651 204.42822266]
[118.93679810 191.84489441]
[110.77223969 179.26156616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 107]
[2 106]
[3 105]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[16 77]
[18 76]
[19 75]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[30 50]
[31 49]
[32 48]
[33 47]
[34 45]
[35 44]
[36 43]
[37 42]
[60 71]
[61 70]
[62 69]
[63 68]
[90 99]
[91 98]
[92 97]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
