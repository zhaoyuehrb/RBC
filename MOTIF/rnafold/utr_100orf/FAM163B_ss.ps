%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:47:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUUGAUGGAGAAGGGGGCGGAUGACAGCCGGGACCGUGGUCAUCACCGGGGGCAUCUUGGCGACUGUGAUUUUGCUCUGCAUCAUCGCUGUUCUGUGCUACUGCCGGCUCCAGUACUACU\
) } def
/len { sequence length } bind def

/coor [
[68.10713959 452.33163452]
[63.00333023 437.67794800]
[67.51969910 422.83267212]
[79.91962433 413.50415039]
[79.53963470 398.50897217]
[69.00565338 390.97418213]
[64.70433044 378.55108643]
[68.43297577 365.74075317]
[79.03526306 357.32360840]
[79.03526306 342.32360840]
[79.03526306 327.32360840]
[79.03526306 312.32360840]
[79.03526306 297.32360840]
[69.92697906 292.17907715]
[63.77759552 283.61627197]
[61.78206635 273.18185425]
[64.37731934 262.79629517]
[71.14887238 254.40045166]
[80.89533234 249.59281921]
[82.03433228 234.63612366]
[83.17332458 219.67942810]
[84.31232452 204.72274780]
[85.45132446 189.76605225]
[72.63345337 179.59449768]
[68.32109833 163.63815308]
[74.39056396 148.08631897]
[88.65119171 139.09271240]
[89.41092682 124.11196136]
[90.17066193 109.13121796]
[84.96108246 95.06493378]
[74.62657928 84.19303894]
[64.29207611 73.32115173]
[53.95757294 62.44925690]
[43.62306976 51.57736588]
[33.28856659 40.70547485]
[22.95406151 29.83358383]
[12.21395397 19.36219025]
[1.08375001 9.30641747]
[-14.34313393 5.79617310]
[-18.59997368 -8.47717857]
[-29.73017693 -18.53295135]
[-40.86038208 -28.58872414]
[-51.99058533 -38.64449692]
[-68.13024902 -41.55021667]
[-73.42830658 -57.06996918]
[-62.43456650 -69.23835754]
[-46.45845032 -65.53759003]
[-41.93481445 -49.77470016]
[-30.80460930 -39.71892929]
[-19.67440605 -29.66315460]
[-8.54420185 -19.60738182]
[6.08657598 -16.81639481]
[11.13952255 -1.82378614]
[22.26972580 8.23198700]
[25.90135956 8.37434673]
[29.63187981 10.35595322]
[32.56303406 14.19678307]
[33.82595444 19.49907875]
[44.16045761 30.37097168]
[54.49496078 41.24286270]
[64.82946777 52.11475372]
[75.16397095 62.98664856]
[85.49847412 73.85853577]
[95.83297729 84.73043060]
[110.78967285 85.86943054]
[122.65130615 76.68783569]
[134.51293945 67.50624847]
[140.68974304 52.94060898]
[155.49020386 51.26863861]
[167.35183716 42.08705139]
[179.21347046 32.90546036]
[191.07510376 23.72387123]
[202.93675232 14.54228115]
[205.07192993 -0.88751930]
[217.23211670 -10.02998352]
[231.92890930 -7.89932346]
[243.79054260 -17.08091354]
[255.65217590 -26.26250267]
[264.47637939 -40.73902893]
[280.82995605 -36.26718140]
[281.05996704 -19.31479645]
[264.83377075 -14.40086651]
[252.97213745 -5.21927691]
[241.11050415 3.96231270]
[239.48934937 18.72400284]
[227.59075928 28.20441246]
[212.11833191 26.40391731]
[200.25669861 35.58550644]
[188.39506531 44.76709747]
[176.53343201 53.94868469]
[164.67179871 63.13027573]
[159.34341431 77.03918457]
[143.69453430 79.36788177]
[131.83290100 88.54947662]
[119.97126007 97.73106384]
[113.79639435 107.33675385]
[105.15141296 109.89095306]
[104.39167023 124.87170410]
[103.63193512 139.85244751]
[115.01935577 147.73268127]
[120.95203400 160.12533569]
[119.96483612 173.72045898]
[112.42519379 184.94569397]
[100.40801239 190.90504456]
[99.26902008 205.86174011]
[98.13002014 220.81843567]
[96.99102783 235.77513123]
[95.85202789 250.73181152]
[109.74367523 265.09704590]
[108.79203033 284.75698853]
[94.03526306 297.32360840]
[94.03526306 312.32360840]
[94.03526306 327.32360840]
[94.03526306 342.32360840]
[94.03526306 357.32360840]
[106.61210632 369.40368652]
[106.61837006 386.50607300]
[94.53482056 398.12896729]
[94.91481018 413.12414551]
[107.77130127 421.81268311]
[113.03377533 436.41015625]
[108.67871094 451.30352783]
[96.38071442 460.76602173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 119]
[5 118]
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[27 99]
[28 98]
[29 97]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 54]
[38 53]
[40 51]
[41 50]
[42 49]
[43 48]
[65 95]
[66 94]
[67 93]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[76 84]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
