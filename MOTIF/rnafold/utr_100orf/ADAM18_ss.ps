%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCUGCUCAACGGUCUCUGUCCUUGGCUGUGGCUCCUGCGCUCUGGCUGAGCCAUGUUCCUUCUCCUCGCCCUCCUCACUGAGCUUGGAAGACUGCAAGCCCACGAAGGUUCUGAAGGAAUAUUUCUGCAUGUCACAGUUCCACGGAAGAUUA\
) } def
/len { sequence length } bind def

/coor [
[5.96726847 445.69042969]
[0.96664107 450.23574829]
[-5.15968847 452.96276855]
[-11.78058815 453.62612915]
[-17.66008759 467.42581177]
[-23.53958702 481.22549438]
[-29.41908455 495.02520752]
[-24.78722572 510.38507080]
[-34.02630234 523.50067139]
[-50.04888535 524.31085205]
[-60.56381989 512.19409180]
[-57.50495148 496.44534302]
[-43.21877670 489.14569092]
[-37.33927917 475.34600830]
[-31.45977974 461.54632568]
[-25.58028030 447.74661255]
[-31.24094772 425.30728149]
[-12.43989277 410.62478638]
[-8.26663113 396.21701050]
[-4.09336948 381.80923462]
[-5.25987673 374.46737671]
[0.31171218 367.15493774]
[4.77425814 352.83413696]
[9.23680401 338.51330566]
[5.63624382 324.06045532]
[17.12879944 313.18701172]
[21.59134483 298.86618042]
[26.05389023 284.54537964]
[30.22715378 270.13760376]
[34.10943985 255.64872742]
[37.99172592 241.15983582]
[41.87400818 226.67094421]
[45.75629425 212.18206787]
[49.63858032 197.69317627]
[53.52086639 183.20428467]
[47.60414124 174.78756714]
[47.32190323 164.28277588]
[53.01152802 155.18678284]
[62.98198318 150.66191101]
[67.44452667 136.34109497]
[71.90707397 122.02028656]
[65.34056091 108.53395844]
[51.31531525 103.21488953]
[37.29007339 97.89581299]
[23.26482964 92.57674408]
[8.10392857 97.82332611]
[-5.37305737 89.11985016]
[-6.82773685 73.14288330]
[4.85579491 62.14858627]
[20.71493340 64.57083893]
[28.58390236 78.55149841]
[42.60914612 83.87057495]
[56.63439178 89.18964386]
[70.65963745 94.50872040]
[84.79863739 77.79157257]
[104.41737366 76.43478394]
[111.65426636 63.29600906]
[118.89115906 50.15723419]
[126.12805176 37.01845932]
[133.36494446 23.87968254]
[140.60183716 10.74090862]
[147.83872986 -2.39786649]
[155.07562256 -15.53664112]
[162.31250000 -28.67541695]
[169.54939270 -41.81418991]
[162.76113892 -52.38904190]
[161.14550781 -64.77787781]
[164.95039368 -76.60211945]
[173.38888550 -85.61812592]
[184.80116272 -90.14290619]
[196.98069763 -89.36807251]
[204.74075317 -102.20478821]
[212.50082397 -115.04151154]
[213.01873779 -130.85423279]
[226.22447205 -137.74319458]
[233.98454285 -150.57992554]
[230.46340942 -158.28929138]
[230.31301880 -166.66896057]
[233.48306274 -174.32527161]
[239.37725830 -180.01484680]
[246.96392822 -182.84643555]
[254.95603943 -182.42002869]
[263.72387695 -194.59069824]
[265.51248169 -210.31047058]
[279.22973633 -216.11447144]
[287.99755859 -228.28514099]
[296.76541138 -240.45581055]
[305.53323364 -252.62648010]
[314.30105591 -264.79714966]
[309.31890869 -279.49264526]
[313.95819092 -294.29995728]
[326.43499756 -303.52539062]
[341.95178223 -303.62155151]
[354.54199219 -294.55148315]
[359.36444092 -279.80279541]
[354.56481934 -265.04669189]
[341.98864746 -255.95715332]
[326.47174072 -256.02932739]
[317.70388794 -243.85865784]
[308.93606567 -231.68798828]
[300.16824341 -219.51731873]
[291.40042114 -207.34664917]
[290.23892212 -192.49740601]
[275.89453125 -185.82286072]
[267.12670898 -173.65220642]
[267.21826172 -152.02899170]
[246.82125854 -142.81985474]
[239.06118774 -129.98313904]
[239.09832764 -115.08857727]
[225.33753967 -107.28144073]
[217.57748413 -94.44472504]
[209.81741333 -81.60800171]
[217.42887878 -65.72286224]
[213.99360657 -48.28701019]
[200.69317627 -36.26635742]
[182.68817139 -34.57730103]
[175.45127869 -21.43852425]
[168.21438599 -8.29975033]
[160.97749329 4.83902454]
[153.74060059 17.97780037]
[146.50372314 31.11657524]
[139.26683044 44.25534821]
[132.02993774 57.39412308]
[124.79304504 70.53289795]
[117.55615234 83.67167664]
[124.70133972 95.26805115]
[124.53780365 109.53514099]
[116.42869568 122.05348969]
[102.30169678 128.58245850]
[86.22789001 126.48282623]
[81.76534271 140.80363464]
[77.30279541 155.12445068]
[82.66052246 174.51873779]
[68.00975800 187.08657837]
[64.12747192 201.57545471]
[60.24518204 216.06434631]
[56.36289597 230.55323792]
[52.48060989 245.04211426]
[48.59832764 259.53100586]
[44.71604156 274.01989746]
[46.07467651 280.58514404]
[44.16212082 286.01351929]
[40.37470245 289.00793457]
[35.91215897 303.32873535]
[31.44961166 317.64956665]
[34.73097992 333.12673950]
[23.55761719 342.97586060]
[19.09507179 357.29666138]
[14.63252544 371.61749268]
[10.31440258 385.98251343]
[6.14114046 400.39028931]
[1.96787846 414.79803467]
[6.80999565 419.87631226]
[9.79346466 426.16992188]
[10.64673519 433.03018188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[18 152]
[19 151]
[20 150]
[22 149]
[23 148]
[24 147]
[26 145]
[27 144]
[28 143]
[29 140]
[30 139]
[31 138]
[32 137]
[33 136]
[34 135]
[35 134]
[39 132]
[40 131]
[41 130]
[42 54]
[43 53]
[44 52]
[45 51]
[56 125]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
[63 118]
[64 117]
[65 116]
[71 112]
[72 111]
[73 110]
[75 108]
[76 107]
[82 105]
[83 104]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
