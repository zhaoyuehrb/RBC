%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUGCGGCGCCUGGUGUCUCAGAGAGGCUUGAGGUUCGGGUAGUCGGUGACAUGGCGGAGGCCGCGGCGCUGGUGUGGAUUCGCGGCCCUGGCUUCGGGUGCAAGGCGGUGCGGUGUGCCUCGGGUCGGUGCACCGUCCGGGAUUUUAUCC\
) } def
/len { sequence length } bind def

/coor [
[106.75684357 239.67106628]
[105.22949982 224.74903870]
[103.70215607 209.82699585]
[102.17481232 194.90495300]
[100.64746857 179.98292542]
[91.65444946 168.10963440]
[97.94635773 153.59335327]
[96.41901398 138.67131042]
[94.89167023 123.74927521]
[88.35786438 121.32097626]
[82.78260803 117.13722992]
[69.40364838 123.91980743]
[56.02468491 130.70237732]
[42.64572144 137.48497009]
[29.26675987 144.26754761]
[15.88779736 151.05012512]
[11.12060928 163.07730103]
[-0.21131895 168.43783569]
[-11.76791382 164.73847961]
[-25.28244591 171.24673462]
[-38.79697800 177.75500488]
[-52.31151199 184.26325989]
[-65.82604218 190.77151489]
[-79.34057617 197.27976990]
[-84.32318115 212.27807617]
[-98.48905945 219.28546143]
[-113.43384552 214.14456177]
[-120.29106903 199.90539551]
[-114.99246216 185.01579285]
[-100.68158722 178.30949402]
[-85.84883118 183.76522827]
[-72.33430481 177.25697327]
[-58.81976700 170.74871826]
[-45.30523682 164.24046326]
[-31.79070282 157.73220825]
[-18.27616882 151.22395325]
[-9.22371006 136.21997070]
[9.10521889 137.67115784]
[22.48418045 130.88858032]
[35.86314392 124.10600281]
[49.24210358 117.32342529]
[62.62106705 110.54084015]
[76.00003052 103.75826263]
[77.22930908 91.53722382]
[84.27991486 81.47968292]
[95.34936523 76.15687561]
[107.60774994 76.92955780]
[116.47396851 64.83037567]
[125.34018707 52.73119354]
[134.20640564 40.63201141]
[143.07261658 28.53283119]
[145.64416504 19.70359230]
[152.24516296 16.27975273]
[161.35633850 4.36394548]
[170.46751404 -7.55186081]
[179.45668030 -19.55997849]
[188.32289124 -31.65916061]
[197.18911743 -43.75834274]
[198.73522949 -62.07950592]
[215.01065063 -68.57389069]
[223.62821960 -80.85141754]
[232.24577332 -93.12893677]
[240.86334229 -105.40646362]
[249.48091125 -117.68398285]
[257.97280884 -130.04876709]
[266.33813477 -142.49951172]
[274.70346069 -154.95027161]
[275.97732544 -170.72010803]
[289.49752808 -176.96937561]
[297.86285400 -189.42013550]
[306.22817993 -201.87088013]
[314.59350586 -214.32164001]
[322.95883179 -226.77239990]
[331.32415771 -239.22314453]
[326.15283203 -253.73394775]
[330.46707153 -268.33670044]
[342.41143799 -277.49075317]
[357.27777100 -277.85183716]
[365.64309692 -290.30261230]
[366.91693115 -306.07244873]
[380.43716431 -312.32171631]
[388.80249023 -324.77246094]
[397.16781616 -337.22320557]
[405.53314209 -349.67398071]
[413.89846802 -362.12472534]
[415.17233276 -377.89456177]
[428.69253540 -384.14382935]
[437.05786133 -396.59457397]
[445.42318726 -409.04534912]
[445.99700928 -425.43444824]
[460.60235596 -432.89205933]
[474.21447754 -423.74645996]
[472.83038330 -407.40582275]
[457.87393188 -400.68002319]
[449.50860596 -388.22924805]
[441.14328003 -375.77850342]
[440.46777344 -360.89923096]
[426.34921265 -353.75939941]
[417.98388672 -341.30862427]
[409.61856079 -328.85787964]
[401.25323486 -316.40713501]
[392.88790894 -303.95639038]
[392.21240234 -289.07708740]
[378.09384155 -281.93725586]
[369.72851562 -269.48651123]
[375.01318359 -255.58650208]
[371.05276489 -241.06826782]
[359.16390991 -231.55470276]
[343.77493286 -230.85781860]
[335.40957642 -218.40705872]
[327.04425049 -205.95631409]
[318.67892456 -193.50555420]
[310.31359863 -181.05480957]
[301.94827271 -168.60404968]
[301.27276611 -153.72477722]
[287.15420532 -146.58494568]
[278.78887939 -134.13418579]
[270.42355347 -121.68343353]
[269.29699707 -114.33315277]
[261.75842285 -109.06641388]
[253.14086914 -96.78889465]
[244.52330017 -84.51136780]
[235.90573120 -72.23384857]
[227.28816223 -59.95632935]
[229.06069946 -47.95223618]
[221.93022156 -37.64183807]
[209.28829956 -34.89212418]
[200.42207336 -22.79294395]
[191.55586243 -10.69376278]
[190.13041687 -3.39554811]
[182.38331604 1.55931711]
[173.27214050 13.47512341]
[164.16096497 25.39093018]
[155.17179871 37.39904785]
[146.30558777 49.49822998]
[137.43936157 61.59741211]
[128.57315063 73.69659424]
[119.70693207 85.79577637]
[123.44319153 106.36709595]
[109.81371307 122.22193146]
[111.34105682 137.14396667]
[112.86840057 152.06600952]
[121.97065735 165.00662231]
[115.56950378 178.45558167]
[117.09684753 193.37760925]
[118.62419128 208.29965210]
[120.15153503 223.22169495]
[121.67887878 238.14372253]
[134.09074402 247.92745972]
[135.86611938 263.63171387]
[125.95170593 275.93942261]
[110.22956085 277.54867554]
[98.02734375 267.50469971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[7 142]
[8 141]
[9 140]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[47 138]
[48 137]
[49 136]
[50 135]
[51 134]
[53 133]
[54 132]
[55 131]
[56 129]
[57 128]
[58 127]
[60 124]
[61 123]
[62 122]
[63 121]
[64 120]
[65 118]
[66 117]
[67 116]
[69 114]
[70 113]
[71 112]
[72 111]
[73 110]
[74 109]
[78 105]
[79 104]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
