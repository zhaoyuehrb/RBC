%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCCCGGCGCCCAGAGUCGCCGCGCGGCCGCCGGUGAGCCGCAUGGAGCCCCGGGCGGCGGACGGCUGCUUCCUGGGCGACGUGGGUUUCUGGGUGGAGCGGACCCCUGUGCACGAGGCAGCCCAGCGGGGUGAGAGCCUGC\
) } def
/len { sequence length } bind def

/coor [
[264.02273560 295.16506958]
[270.63098145 275.86578369]
[260.08200073 265.20190430]
[249.53298950 254.53800964]
[238.98399353 243.87409973]
[228.43499756 233.21020508]
[212.33174133 236.21827698]
[197.44792175 228.98692322]
[189.70642090 214.17469788]
[192.31774902 197.49893188]
[181.54020691 187.06608582]
[170.76266479 176.63322449]
[159.98510742 166.20036316]
[149.20756531 155.76751709]
[138.43002319 145.33465576]
[127.65247345 134.90179443]
[116.87492371 124.46894836]
[106.09737396 114.03608704]
[91.48386383 110.65303040]
[77.21800995 115.28828430]
[62.95216370 119.92353821]
[48.68631744 124.55879211]
[34.42046738 129.19404602]
[20.15462112 133.82929993]
[12.89545536 139.49798584]
[5.52924776 138.40681458]
[-8.83367252 142.73191833]
[-19.66800880 155.04244995]
[-35.69096756 151.55006409]
[-40.41950226 135.84742737]
[-28.98930359 124.08805847]
[-13.15877724 128.36900330]
[1.20414269 124.04389954]
[15.51936626 119.56345367]
[29.78521347 114.92819977]
[44.05106354 110.29294586]
[58.31690979 105.65769196]
[72.58275604 101.02243805]
[86.84860229 96.38718414]
[93.44039917 82.91319275]
[88.34403992 68.80549622]
[83.24768829 54.69779587]
[77.34612274 47.62665939]
[78.19735718 40.22888565]
[73.40783691 26.01408768]
[68.61830902 11.79929066]
[63.82878876 -2.41550708]
[49.94970703 -9.48720074]
[45.29494476 -23.97125626]
[52.12225723 -37.15925980]
[47.33273315 -51.37405396]
[42.54320908 -65.58885193]
[37.75368881 -79.80364990]
[26.01499367 -90.41089630]
[29.28343391 -104.94246674]
[24.49391174 -119.15726471]
[19.39755630 -133.26496887]
[13.99676228 -147.25894165]
[8.59596825 -161.25291443]
[3.19517350 -175.24690247]
[-2.20562077 -189.24087524]
[-16.23194504 -197.02816772]
[-18.74666405 -212.87289429]
[-7.82070303 -224.62036133]
[8.16447735 -223.25891113]
[16.94641495 -209.83291626]
[11.78835773 -194.64166260]
[17.18915176 -180.64768982]
[22.58994675 -166.65371704]
[27.99073982 -152.65972900]
[33.39153290 -138.66575623]
[37.38388824 -135.92347717]
[39.65394211 -130.61161804]
[38.70870972 -123.94678497]
[43.49823380 -109.73198700]
[54.89434814 -100.14147949]
[51.96848679 -84.59317017]
[56.75800705 -70.37837982]
[61.54753113 -56.16357803]
[66.33705139 -41.94878006]
[79.75326538 -35.58161545]
[84.81301880 -21.23401833]
[78.04358673 -7.20502996]
[82.83310699 7.00976753]
[87.62263489 21.22456551]
[92.41215515 35.43936157]
[97.35538483 49.60144043]
[102.45173645 63.70914078]
[107.54809570 77.81684113]
[116.53023529 103.25854492]
[127.30777740 113.69139862]
[138.08532715 124.12425232]
[148.86286926 134.55711365]
[159.64042664 144.98995972]
[170.41796875 155.42282104]
[181.19551086 165.85568237]
[191.97306824 176.28852844]
[202.75061035 186.72138977]
[216.15565491 183.33752441]
[229.37231445 187.00877380]
[238.95880127 196.66757202]
[242.47412109 209.70193481]
[239.09890747 222.66120911]
[249.64790344 233.32510376]
[260.19689941 243.98901367]
[270.74588013 254.65290833]
[281.29489136 265.31680298]
[290.55596924 260.83261108]
[300.64611816 258.90603638]
[310.87368774 259.66009521]
[320.53985596 263.03433228]
[328.98651123 268.78961182]
[335.64105225 276.52505493]
[340.05514526 285.70581055]
[341.93487549 295.70019531]
[341.16046143 305.82312012]
[337.79373169 315.38296509]
[332.07327271 323.72894287]
[341.15087891 335.67034912]
[350.22851562 347.61172485]
[359.30612183 359.55313110]
[379.52896118 366.49319458]
[381.54306030 386.99319458]
[391.37710571 398.31976318]
[401.21118164 409.64633179]
[411.04525757 420.97290039]
[426.71575928 425.80685425]
[430.10040283 441.85290527]
[417.71734619 452.60427856]
[402.30520630 447.00085449]
[399.71868896 430.80694580]
[389.88461304 419.48040771]
[380.05056763 408.15383911]
[370.21649170 396.82727051]
[361.24719238 397.65689087]
[352.79058838 394.17370605]
[346.82980347 387.05572510]
[344.82666016 377.84857178]
[347.36471558 368.63073730]
[338.28710938 356.68936157]
[329.20950317 344.74795532]
[320.13186646 332.80654907]
[300.42929077 336.78405762]
[281.31552124 330.32723999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[26 33]
[27 32]
[40 89]
[41 88]
[42 87]
[44 86]
[45 85]
[46 84]
[47 83]
[50 80]
[51 79]
[52 78]
[53 77]
[55 75]
[56 74]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[118 142]
[119 141]
[120 140]
[121 139]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
