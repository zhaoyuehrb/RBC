%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGUCGCGGCAAAGGCGGUAAAGGUUUGGGUAAGGGAGGUGCCAAGCGUCACCGAAAAGUGCUGCGGGAUAACAUCCAAGGCAUCACCAAACCGG\
) } def
/len { sequence length } bind def

/coor [
[55.97830582 243.06024170]
[40.79503632 248.24172974]
[27.35551453 239.48051453]
[25.96939468 223.49745178]
[37.69998932 212.55337524]
[39.56147003 197.66932678]
[41.42295074 182.78527832]
[43.28443146 167.90122986]
[45.14591599 153.01718140]
[88.58570862 94.93211365]
[79.84459686 82.74224091]
[71.10347748 70.55237579]
[62.36236572 58.36250305]
[53.62125015 46.17263412]
[44.88013458 33.98276520]
[36.13901901 21.79289818]
[19.78924370 23.60728455]
[4.81999445 17.01421356]
[-4.76847410 3.87779260]
[-6.46522570 -12.20325279]
[0.09440114 -26.88120842]
[-9.02158928 -38.79333115]
[-18.13758087 -50.70545578]
[-27.25357056 -62.61758041]
[-41.07048035 -61.25823975]
[-53.63630295 -66.90135956]
[-61.67142105 -77.95555878]
[-63.13784409 -91.43313599]
[-57.75519943 -103.75724792]
[-66.49631500 -115.94712067]
[-75.23742676 -128.13699341]
[-83.97854614 -140.32685852]
[-92.71965790 -152.51672363]
[-101.46077728 -164.70658875]
[-116.48630524 -162.02400208]
[-131.18545532 -166.13467407]
[-142.63970947 -176.22242737]
[-148.57481384 -190.28434753]
[-147.81234741 -205.52839661]
[-140.50369263 -218.92790222]
[-128.10000610 -227.82234192]
[-113.06402588 -230.44573975]
[-98.38117218 -226.27722168]
[-86.96673584 -216.14442444]
[-81.08705902 -202.05924988]
[-81.90954590 -186.81831360]
[-89.27090454 -173.44770813]
[-80.52979279 -161.25784302]
[-71.78867340 -149.06797791]
[-63.04756165 -136.87809753]
[-54.30644608 -124.68823242]
[-45.56533051 -112.49836731]
[-29.23766518 -112.95788574]
[-15.68131828 -103.55316162]
[-10.28730679 -87.78604126]
[-15.34144592 -71.73357391]
[-6.22545528 -59.82144928]
[2.89053535 -47.90932465]
[12.00652599 -35.99720001]
[25.49909592 -38.65232849]
[38.87395477 -35.18156815]
[49.47451782 -26.21475029]
[55.16949081 -13.47918701]
[54.78125763 0.53284228]
[48.32888794 13.05178165]
[57.07000351 25.24165154]
[65.81111908 37.43151855]
[74.55223083 49.62138748]
[83.29335022 61.81125641]
[92.03446198 74.00112915]
[100.77558136 86.19099426]
[113.84302521 93.55590820]
[128.79769897 94.72116089]
[143.75236511 95.88642120]
[158.70703125 97.05168152]
[174.96800232 92.25405884]
[184.07962036 106.55142975]
[172.86334229 119.26486206]
[157.54177856 112.00634766]
[142.58711243 110.84109497]
[127.63243866 109.67583466]
[112.67776489 108.51057434]
[109.40863037 115.26059723]
[102.87036896 128.76063538]
[99.60123444 135.51065063]
[109.78752899 146.52153015]
[125.69804382 148.57942200]
[133.88558960 162.37593079]
[128.06938171 177.32756042]
[112.71110535 181.96469116]
[99.59233093 172.73013306]
[98.77664948 156.70782471]
[88.59035492 145.69694519]
[81.45025635 147.99238586]
[67.17005920 152.58323669]
[60.02996063 154.87866211]
[58.16847992 169.76271057]
[56.30699921 184.64675903]
[54.44551849 199.53080750]
[52.58403778 214.41485596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[21 59]
[22 58]
[23 57]
[24 56]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[72 82]
[73 81]
[74 80]
[75 79]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
