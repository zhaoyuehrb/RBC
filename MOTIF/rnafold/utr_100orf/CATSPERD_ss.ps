%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGUGCAGCGACUCCCCGUGGCGGUUGAGGGGCAGUGGUGGCGGCGGAAGCCCAAGUCGAUGCUGAUGUUGAUGCUGGUGGCGGCUGUGACCAUGUGGCUCCGACCGCUGGUCACAGCUCAGCUCUGUCGUUCUCGCACAGUGAGGACAGGAAAAGUGU\
) } def
/len { sequence length } bind def

/coor [
[7.71311235 311.01065063]
[6.16455936 296.09078979]
[9.75351048 281.52645874]
[18.05694199 269.03433228]
[30.09648514 260.08666992]
[37.14289856 246.84477234]
[44.18931198 233.60287476]
[31.65699577 241.84550476]
[24.37883568 255.89324951]
[9.49363899 256.42257690]
[-3.03867865 264.66522217]
[-10.31683826 278.71295166]
[-25.20203590 279.24227905]
[-37.73435211 287.48492432]
[-50.26667023 295.72753906]
[-62.71847534 304.09130859]
[-75.08860016 312.57540894]
[-87.45872498 321.05950928]
[-99.82884979 329.54360962]
[-97.96598816 344.73535156]
[-103.38729858 359.04855347]
[-114.84700012 369.19418335]
[-129.71174622 372.84085083]
[-144.56570435 369.15054321]
[-155.99557495 358.97131348]
[-161.37483215 344.64224243]
[-159.46737671 329.45605469]
[-150.71151733 316.90243530]
[-137.11929321 309.86608887]
[-121.81410217 309.96392822]
[-108.31295776 317.17349243]
[-95.94282532 308.68939209]
[-83.57270050 300.20529175]
[-71.20257568 291.72119141]
[-67.44664001 285.31298828]
[-58.50930405 283.19522095]
[-45.97698593 274.95260620]
[-33.44466782 266.70996094]
[-27.06290436 253.25178528]
[-11.28131294 252.13288879]
[1.25100386 243.89025879]
[7.63276863 230.43208313]
[23.41436005 229.31318665]
[35.94667816 221.07055664]
[58.42416382 206.18011475]
[62.44675446 191.72955322]
[66.46934509 177.27899170]
[70.49193573 162.82843018]
[74.51451874 148.37786865]
[78.53710938 133.92730713]
[77.29521179 126.60406494]
[82.78034210 119.23696136]
[87.08239746 104.86711884]
[85.19662476 89.98612976]
[77.44613647 77.14362335]
[69.69564056 64.30112457]
[53.38131332 55.81076813]
[53.66960526 38.28511810]
[45.67153931 25.59532356]
[37.67347336 12.90552711]
[29.67540550 0.21573034]
[21.67733955 -12.47406578]
[13.67927265 -25.16386223]
[-1.78712106 -28.41443634]
[-10.35492516 -41.69480896]
[-6.94101334 -57.12596893]
[6.42920065 -65.55288696]
[21.82340622 -61.97601700]
[30.10849380 -48.51745605]
[26.36906815 -33.16193008]
[34.36713409 -20.47213173]
[42.36520004 -7.78233624]
[50.36326981 4.90746021]
[58.36133575 17.59725571]
[66.35939789 30.28705215]
[78.11079407 33.28333664]
[84.87022400 43.83235550]
[82.53814697 56.55063248]
[90.28863525 69.39313507]
[98.03913116 82.23564148]
[105.44905090 83.39453125]
[107.76708221 68.57472229]
[122.58685303 70.89299774]
[120.26889801 85.71231079]
[127.67882538 86.87120056]
[138.98036194 77.00838470]
[150.28190613 67.14556122]
[161.58343506 57.28274155]
[172.88497925 47.41992188]
[184.18650818 37.55710220]
[195.48805237 27.69428062]
[206.78959656 17.83145905]
[218.09112549 7.96863890]
[229.39266968 -1.89418173]
[240.69421387 -11.75700188]
[245.13113403 -19.79904938]
[252.31185913 -21.69890594]
[263.80252075 -31.34072113]
[275.29318237 -40.98253632]
[286.78384399 -50.62434769]
[287.91143799 -66.38835907]
[299.91012573 -76.67459869]
[315.66134644 -75.38040924]
[325.82015991 -63.27362061]
[324.35949707 -47.53697586]
[312.14599609 -37.50674057]
[296.42565918 -39.13368225]
[284.93499756 -29.49186707]
[273.44433594 -19.85005379]
[261.95367432 -10.20823956]
[250.55702209 -0.45546380]
[239.25549316 9.40735722]
[227.95394897 19.27017784]
[216.65242004 29.13299751]
[205.35087585 38.99581909]
[194.04933167 48.85863876]
[182.74780273 58.72145844]
[171.44625854 68.58428192]
[160.14471436 78.44709778]
[148.84318542 88.30992126]
[137.54164124 98.17274475]
[125.48463440 111.96084595]
[111.24598694 114.96258545]
[101.45223999 109.16916656]
[97.15019226 123.53900909]
[92.98767090 137.94989014]
[88.96508789 152.40045166]
[84.94249725 166.85101318]
[80.91990662 181.30157471]
[76.89731598 195.75215149]
[72.87472534 210.20271301]
[76.89731598 224.65327454]
[87.80792236 234.94689941]
[98.71852875 245.24052429]
[109.62912750 255.53414917]
[120.53973389 265.82775879]
[131.45034790 276.12139893]
[142.36094666 286.41500854]
[153.27154541 296.70864868]
[168.94177246 303.18017578]
[167.06109619 320.02947998]
[150.34963989 322.88665771]
[142.97792053 307.61923218]
[132.06732178 297.32562256]
[121.15671539 287.03201294]
[110.24610901 276.73837280]
[99.33551025 266.44476318]
[88.42490387 256.15112305]
[77.51429749 245.85749817]
[66.60369110 235.56387329]
[71.24362183 249.82820129]
[75.88355255 264.09252930]
[86.18623352 274.99459839]
[92.19440460 288.73873901]
[93.19989014 303.70501709]
[89.08418274 318.12933350]
[80.33239746 330.31152344]
[67.97607422 338.81573486]
[53.47164917 342.63955688]
[38.52872467 341.33227539]
[24.90859413 335.04800415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[10 41]
[11 40]
[13 38]
[14 37]
[15 36]
[16 34]
[17 33]
[18 32]
[19 31]
[45 131]
[46 130]
[47 129]
[48 128]
[49 127]
[50 126]
[52 125]
[53 124]
[54 80]
[55 79]
[56 78]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[97 110]
[98 109]
[99 108]
[100 107]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
[138 144]
[139 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
