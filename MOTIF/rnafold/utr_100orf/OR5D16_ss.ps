%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUUCUGACAGAGAGAAAUACGACAUCUGAGGCCACAUUCACUCUCUUGGGCUUCUCAGAUUACCUGGAACUGCAAAUUCCCCUCUUCUUUGUAUUUC\
) } def
/len { sequence length } bind def

/coor [
[67.68055725 231.34217834]
[70.29701996 246.11221313]
[61.93946075 258.56817627]
[47.28009033 261.74670410]
[34.51409531 253.87081909]
[30.77828026 239.34278870]
[21.29623413 250.96565247]
[11.81418800 262.58850098]
[11.99618721 278.63052368]
[-0.52310312 288.66281128]
[-16.13995552 284.98947144]
[-22.87445641 270.42834473]
[-15.56047344 256.14950562]
[0.19133125 253.10646057]
[9.67337799 241.48359680]
[19.15542412 229.86074829]
[27.51320839 217.40492249]
[34.67400742 204.22451782]
[41.83480453 191.04412842]
[48.99560165 177.86372375]
[56.15639877 164.68331909]
[63.31719971 151.50291443]
[70.47799683 138.32252502]
[77.63879395 125.14212036]
[84.79959106 111.96171570]
[79.73913574 98.61701965]
[85.22494507 84.69454193]
[80.19219208 70.56402588]
[75.15943909 56.43351364]
[70.12669373 42.30299759]
[65.09394073 28.17248535]
[60.06119156 14.04197121]
[55.02844238 -0.08854269]
[49.55866623 -14.05570316]
[43.65716553 -27.84599876]
[37.75566101 -41.63629532]
[31.39165878 -48.44012451]
[31.89246941 -55.94843292]
[26.42269516 -69.91559601]
[11.22523880 -72.13660431]
[-0.81568557 -81.67136383]
[-6.46112919 -95.95507812]
[-4.19249630 -111.14550018]
[5.37996244 -123.15647888]
[19.68130302 -128.75712585]
[34.86454010 -126.44088745]
[46.84545135 -116.83082581]
[52.40124130 -102.51200104]
[50.03742599 -87.33609772]
[40.38985825 -75.38536835]
[45.85963058 -61.41820526]
[51.54595566 -47.53779984]
[57.44746017 -33.74750137]
[63.34896469 -19.95720673]
[67.53240967 -17.33241272]
[70.01127625 -11.96911716]
[69.15895844 -5.12129307]
[74.19170380 9.00922108]
[79.22445679 23.13973427]
[84.25720215 37.27024841]
[89.28995514 51.40076447]
[94.32270813 65.53128052]
[99.35545349 79.66178894]
[101.09960938 64.76354218]
[113.27537537 56.00278473]
[127.95565796 59.08325577]
[135.58279419 71.99939728]
[131.19110107 86.34210205]
[117.64025879 92.77346039]
[132.63844299 93.00674438]
[147.63662720 93.24002075]
[162.63481140 93.47329712]
[172.73408508 81.53433228]
[188.15347290 78.93119812]
[201.61242676 86.89301300]
[206.75604248 101.66045380]
[201.15565491 116.26078033]
[187.45559692 123.80017090]
[172.12461853 120.71875763]
[162.40153503 108.47148132]
[147.40335083 108.23820496]
[132.40516663 108.00492859]
[117.40698242 107.77165222]
[132.02507019 111.13491821]
[142.22756958 122.13078308]
[144.48878479 136.95936584]
[138.02729797 150.49632263]
[125.07602692 158.06365967]
[110.11057281 157.04629517]
[98.30257416 147.79582214]
[93.73255920 133.50894165]
[97.97999573 119.12251282]
[90.81919861 132.30291748]
[83.65840149 145.48332214]
[76.49759674 158.66371155]
[69.33679962 171.84411621]
[62.17600250 185.02452087]
[55.01520538 198.20492554]
[47.85440826 211.38531494]
[40.69360733 224.56571960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[8 14]
[17 100]
[18 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 54]
[35 53]
[36 52]
[38 51]
[39 50]
[69 83]
[70 82]
[71 81]
[72 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
