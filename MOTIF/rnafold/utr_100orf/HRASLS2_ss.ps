%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUAAUUUAAGGCUGGACACAGAGUCAGCAACACACAAGACAUCAUCUUGAAGGAAGGAUGGCUUUGGCCAGACCAAGACCGAGACUUGGAGACCUGAUUGAGAUUUCUCGCUUUGGCUAUGCACACUGGGCCAUCUACGUGGGAGAUGGCUAUGUGG\
) } def
/len { sequence length } bind def

/coor [
[111.50830841 159.87409973]
[102.26750946 171.68966675]
[89.11860657 178.90814209]
[74.18918610 180.36155701]
[59.89491272 175.81472778]
[48.54867935 166.00335693]
[41.98637772 152.51498413]
[41.26982498 137.53210449]
[46.51496506 123.47904205]
[56.87310028 112.62966156]
[70.66822815 106.73946381]
[85.67075348 106.76203156]
[70.85542297 104.41551208]
[56.01777649 102.21455383]
[41.15923691 100.15937042]
[26.30069733 98.10418701]
[11.44215775 96.04900360]
[3.11049414 103.14240265]
[-7.53470135 104.42366791]
[-16.91787910 99.70734406]
[-22.02188301 90.78210449]
[-36.78828049 88.14516449]
[-51.55467987 85.50821686]
[-66.32108307 82.87127686]
[-81.08747864 80.23432922]
[-95.85387421 77.59738922]
[-110.62027740 74.96044159]
[-125.38667297 72.32350159]
[-132.76684570 86.28753662]
[-144.08129883 97.27989197]
[-158.21780396 104.23665619]
[-173.79179382 106.48981476]
[-189.28208923 103.83139801]
[-203.17933655 96.53255463]
[-214.13322449 85.31602478]
[-221.08355713 71.28452301]
[-223.36294556 55.81237411]
[-238.17828369 53.46585846]
[-252.99360657 51.11934280]
[-267.80892944 48.77282333]
[-282.62426758 46.42630768]
[-296.39627075 54.65496445]
[-311.36520386 48.88337326]
[-316.04812622 33.53899765]
[-306.85272217 20.39273834]
[-290.83291626 19.52927399]
[-280.27774048 31.61098289]
[-265.46240234 33.95750046]
[-250.64707947 36.30401611]
[-235.83175659 38.65053177]
[-221.01643372 40.99705124]
[-214.84684753 28.11863518]
[-205.28181458 17.49398422]
[-193.09280396 9.99348831]
[-179.26676941 6.23501682]
[-164.92611694 6.53302479]
[-151.23774719 10.87226772]
[-139.31799316 18.90830803]
[-130.14161682 29.99483871]
[-124.46208191 43.23565292]
[-122.74973297 57.55709839]
[-107.98332977 60.19404221]
[-93.21693420 62.83098602]
[-78.45053101 65.46793365]
[-63.68413544 68.10487366]
[-48.91773605 70.74182129]
[-34.15133667 73.37876129]
[-19.38493919 76.01570892]
[-1.78023314 68.09138489]
[13.49734211 81.19046021]
[28.35588264 83.24564362]
[43.21442413 85.30082703]
[58.07296371 87.35601807]
[65.16641235 85.14585876]
[73.20194244 89.60018921]
[88.01726532 91.94670105]
[92.83840942 81.40521240]
[106.13491821 75.33660889]
[116.31693268 64.32177734]
[119.86972046 55.84896851]
[126.80862427 53.19313049]
[137.20492554 42.38032532]
[147.60124207 31.56752205]
[157.99755859 20.75471687]
[168.39385986 9.94191360]
[164.96559143 -3.43891692]
[168.58108521 -16.65801048]
[178.18899536 -26.27802658]
[191.19445801 -29.85268593]
[204.15933228 -26.54827499]
[214.76593018 -37.15487671]
[225.37252808 -47.76147842]
[235.97914124 -58.36808014]
[246.58573914 -68.97467804]
[250.87283325 -84.20397186]
[265.34347534 -87.73241425]
[275.95007324 -98.33901978]
[277.38793945 -114.31750488]
[290.85577393 -123.03514862]
[306.02218628 -117.80451965]
[311.25280762 -102.63810730]
[302.53515625 -89.17028809]
[286.55667114 -87.73241425]
[275.95007324 -77.12581635]
[272.42163086 -62.65517807]
[257.19235229 -58.36808014]
[246.58573914 -47.76147842]
[235.97914124 -37.15487671]
[225.37252808 -26.54827499]
[214.76593018 -15.94167328]
[217.85841370 0.15598062]
[210.69165039 15.08249092]
[195.90235901 22.89020920]
[179.20666504 20.33822441]
[168.81036377 31.15102768]
[158.41404724 41.96383286]
[148.01773071 52.77663422]
[137.62142944 63.58943939]
[127.33177185 74.50378418]
[117.14975739 85.51862335]
[130.41343689 78.51326752]
[144.53146362 83.58090973]
[150.31225586 97.42224121]
[143.99218750 111.02580261]
[129.68597412 115.53491974]
[116.70800018 108.01428986]
[126.44972229 119.42037964]
[136.19143677 130.82646179]
[151.70611572 132.21672058]
[161.42311096 143.92288208]
[160.00212097 158.70518494]
[169.74383545 170.11126709]
[179.48554993 181.51736450]
[189.22727966 192.92344666]
[198.96899414 204.32954407]
[208.71072388 215.73562622]
[218.45243835 227.14172363]
[228.19416809 238.54780579]
[243.82852173 238.23043823]
[255.97665405 248.07710266]
[258.90258789 263.43850708]
[251.22479248 277.06146240]
[236.56846619 282.51364136]
[221.85389709 277.22070312]
[214.02885437 263.68176270]
[216.78807068 248.28953552]
[207.04635620 236.88343811]
[197.30462646 225.47735596]
[187.56291199 214.07125854]
[177.82118225 202.66517639]
[168.07946777 191.25907898]
[158.33775330 179.85299683]
[148.59602356 168.44689941]
[133.77342224 167.53794861]
[123.73145294 156.10932922]
[124.78535461 140.56819153]
[115.04363251 129.16209412]
[105.30191040 117.75600433]
[113.15906525 130.53353882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 76]
[13 75]
[14 73]
[15 72]
[16 71]
[17 70]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[78 120]
[79 119]
[81 118]
[82 117]
[83 116]
[84 115]
[85 114]
[90 110]
[91 109]
[92 108]
[93 107]
[94 106]
[96 104]
[97 103]
[126 158]
[127 157]
[128 156]
[131 153]
[132 152]
[133 151]
[134 150]
[135 149]
[136 148]
[137 147]
[138 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
