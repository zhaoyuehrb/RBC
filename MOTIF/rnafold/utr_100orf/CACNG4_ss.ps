%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCGGCGGGCCGGGCCGGCGGGCGGCGGACUAUGAGGCGCCCACCAUGGUGCGAUGCGACCGCGGGCUGCAGAUGCUGCUGACCACGGCCGGAGCCUUCGCCGCCUUCUCGCUCAUGGCCAUCGCCAUCGGCACCGACUACUGGC\
) } def
/len { sequence length } bind def

/coor [
[283.01168823 748.92144775]
[279.87240601 734.25366211]
[276.57864380 719.61975098]
[273.13082886 705.02136230]
[257.02841187 696.41741943]
[252.17929077 678.48706055]
[262.08297729 662.39904785]
[258.02279663 647.95898438]
[253.96260071 633.51892090]
[249.90240479 619.07891846]
[245.53868103 604.72766113]
[240.87335205 590.47161865]
[236.20803833 576.21557617]
[231.54270935 561.95953369]
[226.57786560 547.80499268]
[221.31570435 533.75830078]
[216.05354309 519.71160889]
[210.79138184 505.66494751]
[199.08094788 496.46084595]
[201.48526001 480.82339478]
[196.22309875 466.77670288]
[184.51268005 457.57263184]
[186.91699219 441.93518066]
[181.65483093 427.88848877]
[176.39266968 413.84179688]
[171.13050842 399.79510498]
[165.86834717 385.74841309]
[160.60618591 371.70169067]
[155.34402466 357.65499878]
[150.08186340 343.60830688]
[142.50915527 356.55645752]
[128.04933167 360.54559326]
[114.90885925 353.31179810]
[110.54543304 338.96047974]
[117.43545532 325.63653564]
[131.66859436 320.90179443]
[145.16645813 327.44274902]
[141.71862793 312.84439087]
[138.27078247 298.24600220]
[134.82293701 283.64764404]
[131.37510681 269.04928589]
[120.91953278 258.44125366]
[125.27761078 243.23211670]
[121.82977295 228.63374329]
[109.06330109 221.04737854]
[105.35874939 206.29167175]
[113.40258026 192.95246887]
[109.95474243 178.35409546]
[99.49916840 167.74606323]
[103.85724640 152.53692627]
[100.40940857 137.93856812]
[96.96157074 123.34019470]
[93.51373291 108.74182129]
[87.37418365 95.05584717]
[78.76334381 82.77360535]
[70.15249634 70.49137115]
[54.55900574 69.31793213]
[43.40413666 58.35878372]
[41.95487976 42.78850174]
[50.89553070 29.95889473]
[66.00458527 25.92771339]
[80.14801788 32.59835815]
[86.64772034 46.82115173]
[82.43473816 61.88052750]
[91.04557800 74.16276550]
[99.65642548 86.44500732]
[106.85464478 84.33891296]
[128.44929504 78.02062225]
[129.08164978 63.03395462]
[129.71398926 48.04729080]
[122.56533813 33.93320847]
[130.83230591 21.54342842]
[131.46464539 6.55676222]
[123.39562225 -7.71989441]
[131.95700073 -21.70684433]
[148.34158325 -21.01551437]
[155.69429016 -6.35708284]
[146.45130920 7.18911028]
[145.81896973 22.17577553]
[153.01284790 35.21791077]
[144.70065308 48.67963791]
[144.06831360 63.66630173]
[143.43595886 78.65296936]
[128.98892212 101.76195526]
[108.11209869 105.29398346]
[111.55994415 119.89235687]
[115.00778198 134.49072266]
[118.45561981 149.08909607]
[129.15780640 160.74130249]
[124.55310822 174.90625000]
[128.00094604 189.50462341]
[141.16281128 197.83547974]
[144.45144653 212.68942261]
[136.42814636 225.18589783]
[139.87597656 239.78427124]
[150.57817078 251.43647766]
[145.97348022 265.60144043]
[149.42131042 280.19979858]
[152.86915588 294.79818726]
[156.31698608 309.39654541]
[159.76483154 323.99490356]
[164.12855530 338.34616089]
[169.39071655 352.39285278]
[174.65287781 366.43954468]
[179.91503906 380.48623657]
[185.17720032 394.53292847]
[190.43936157 408.57962036]
[195.70152283 422.62631226]
[200.96368408 436.67300415]
[213.05050659 446.88180542]
[210.26980591 461.51455688]
[215.53196716 475.56124878]
[227.61877441 485.77005005]
[224.83807373 500.40277100]
[230.10023499 514.44946289]
[235.36239624 528.49615479]
[240.62455750 542.54284668]
[245.55842590 547.10699463]
[247.15423584 552.65039062]
[245.79875183 557.29418945]
[250.46408081 571.55023193]
[255.12939453 585.80627441]
[259.79470825 600.06231689]
[264.53179932 604.83038330]
[265.89251709 610.43615723]
[264.34243774 615.01867676]
[268.40264893 629.45874023]
[272.46282959 643.89880371]
[276.52301025 658.33886719]
[287.89920044 662.05938721]
[295.96096802 670.74285889]
[298.77008057 682.12994385]
[295.73461914 693.33428955]
[287.72918701 701.57354736]
[291.17703247 716.17187500]
[296.22729492 723.86633301]
[294.54022217 731.11437988]
[297.67950439 745.78216553]
[312.43740845 749.83966064]
[323.61132812 760.29925537]
[328.63357544 774.75732422]
[326.35009766 789.89154053]
[317.28561401 802.22412109]
[303.52307129 808.92126465]
[288.22500610 808.44384766]
[274.90679932 800.90173340]
[266.62887573 788.02795410]
[265.29345703 772.78076172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 135]
[4 134]
[7 129]
[8 128]
[9 127]
[10 126]
[11 123]
[12 122]
[13 121]
[14 120]
[15 117]
[16 116]
[17 115]
[18 114]
[20 112]
[21 111]
[23 109]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[37 101]
[38 100]
[39 99]
[40 98]
[41 97]
[43 95]
[44 94]
[47 91]
[48 90]
[50 88]
[51 87]
[52 86]
[53 85]
[54 66]
[55 65]
[56 64]
[68 83]
[69 82]
[70 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
