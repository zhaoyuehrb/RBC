%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUAGGCCUGGUUUGCGCUGGAGAGUGGUCUUGGUUGUGAGGGUCAUAAGAUGGGAACUCUCCCGGCACGUAGACAUAUCCCGCCGUGGGUGAAAGUUCCCGAAGACCUGAAAGAUCCAGAGGUGUUCCAGGUCCAGACGCGGCUGCUGA\
) } def
/len { sequence length } bind def

/coor [
[87.74682617 606.86987305]
[76.30202484 596.70745850]
[70.90173340 582.38629150]
[72.78689575 567.19732666]
[81.52431488 554.63085938]
[95.10619354 547.57458496]
[95.10619354 532.57458496]
[95.10619354 517.57458496]
[95.10619354 502.57458496]
[84.42532349 492.25689697]
[84.21163940 477.04476929]
[95.10619354 465.91162109]
[95.10619354 450.91162109]
[95.10619354 435.91162109]
[95.10619354 420.91162109]
[95.10619354 405.91162109]
[82.72522736 394.57177734]
[82.33833313 377.44992065]
[94.67008209 365.08502197]
[94.36007690 350.08822632]
[94.05007935 335.09143066]
[93.74007416 320.09463501]
[93.43006897 305.09783936]
[93.12006378 290.10104370]
[80.71826935 284.30163574]
[71.99365997 273.66497803]
[68.70054626 260.23962402]
[71.53997803 246.64328003]
[80.01144409 235.55261230]
[92.50000000 229.17616272]
[92.50000000 214.17616272]
[92.50000000 199.17616272]
[84.76270294 186.44888306]
[92.50000000 172.64871216]
[92.50000000 157.64871216]
[92.50000000 142.64871216]
[92.50000000 127.64871979]
[79.70539856 120.21956635]
[72.32369232 107.39753723]
[72.32369232 92.60246277]
[79.70539856 79.78043365]
[92.50000000 72.35128021]
[92.50000000 57.35128403]
[92.50000000 42.35128403]
[92.50000000 27.35128212]
[92.50000000 12.35128212]
[83.82350159 7.70107460]
[77.50215149 0.23084421]
[74.38887787 -8.98523045]
[74.87932587 -18.64231682]
[78.86205292 -27.38965416]
[85.74015808 -34.01948166]
[94.52034760 -37.63376236]
[95.75904083 -52.58252716]
[96.99772644 -67.53129578]
[98.23641968 -82.48006439]
[99.47510529 -97.42883301]
[100.71379852 -112.37760162]
[101.95249176 -127.32636261]
[102.88196564 -142.29754639]
[103.50184631 -157.28472900]
[103.96680450 -172.27751160]
[104.27680969 -187.27430725]
[104.58681488 -202.27111816]
[104.74182129 -217.27030945]
[104.74182129 -232.27030945]
[104.74182129 -247.27030945]
[104.74182129 -262.27032471]
[92.15716553 -274.37768555]
[92.19012451 -291.50390625]
[104.33408356 -303.09722900]
[104.02407837 -318.09402466]
[103.71407318 -333.09082031]
[94.76445770 -346.83258057]
[102.43061829 -361.32955933]
[118.82626343 -361.66848755]
[127.08496094 -347.50070190]
[118.71086884 -333.40081787]
[119.02087402 -318.40402222]
[119.33087921 -303.40722656]
[129.80978394 -295.84634399]
[134.06547546 -283.43905640]
[130.32395935 -270.66387939]
[119.74182129 -262.27032471]
[119.74182129 -247.27030945]
[119.74182129 -232.27030945]
[119.74182129 -217.27030945]
[122.90689087 -210.53895569]
[119.58361053 -201.96110535]
[119.27360535 -186.96430969]
[118.96360016 -171.96751404]
[121.98887634 -165.17218018]
[118.48902893 -156.66485596]
[117.86915588 -141.67765808]
[120.43125916 -137.57914734]
[120.40210724 -131.81645203]
[116.90125275 -126.08767700]
[115.66256714 -111.13890839]
[114.42387390 -96.19013977]
[113.18518829 -81.24137115]
[111.94649506 -66.29260254]
[110.70780182 -51.34383774]
[109.46911621 -36.39506912]
[123.97595978 -22.07229996]
[123.32174683 -1.40632427]
[107.50000000 12.35128212]
[107.50000000 27.35128212]
[107.50000000 42.35128403]
[107.50000000 57.35128403]
[107.50000000 72.35128021]
[120.29460144 79.78043365]
[127.67630768 92.60246277]
[127.67630768 107.39753723]
[120.29460144 120.21956635]
[107.50000000 127.64871979]
[107.50000000 142.64871216]
[107.50000000 157.64871216]
[107.50000000 172.64871216]
[115.23729706 186.44888306]
[107.50000000 199.17616272]
[107.50000000 214.17616272]
[107.50000000 229.17616272]
[121.88266754 237.27189636]
[130.18858337 251.42570496]
[130.24153137 267.74288940]
[122.12139130 281.78808594]
[108.11685944 289.79104614]
[108.42686462 304.78784180]
[108.73686981 319.78463745]
[109.04687500 334.78143311]
[109.35688019 349.77822876]
[109.66687775 364.77502441]
[120.42021942 372.94808960]
[124.42495728 385.64321899]
[120.42660522 398.13580322]
[110.10619354 405.91162109]
[110.10619354 420.91162109]
[110.10619354 435.91162109]
[110.10619354 450.91162109]
[110.10619354 465.91162109]
[121.00074768 477.04476929]
[120.78706360 492.25689697]
[110.10619354 502.57458496]
[110.10619354 517.57458496]
[110.10619354 532.57458496]
[110.10619354 547.57458496]
[123.68807220 554.63085938]
[132.42549133 567.19732666]
[134.31065369 582.38629150]
[128.91035461 596.70745850]
[117.46556091 606.86987305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 146]
[7 145]
[8 144]
[9 143]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[30 122]
[31 121]
[32 120]
[34 118]
[35 117]
[36 116]
[37 115]
[42 110]
[43 109]
[44 108]
[45 107]
[46 106]
[53 103]
[54 102]
[55 101]
[56 100]
[57 99]
[58 98]
[59 97]
[60 94]
[61 93]
[62 91]
[63 90]
[64 89]
[65 87]
[66 86]
[67 85]
[68 84]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
