%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAGAAACUGCACGUUGGUGACUGAGUUCAUUCUCCUGGGACUGACCAGUCGCCGGGAAUUACAAAUUCUCCUCUUCACGCUGUUUCUGGCCAUUU\
) } def
/len { sequence length } bind def

/coor [
[107.80896759 309.48770142]
[106.87641907 294.51669312]
[105.94387817 279.54571533]
[93.29486847 271.72647095]
[87.60835266 257.79351807]
[91.25914001 243.01091003]
[103.05063629 233.09796143]
[102.11809540 218.12696838]
[101.18554688 203.15599060]
[100.25300598 188.18499756]
[99.32045746 173.21401978]
[98.38791656 158.24304199]
[89.87433624 146.02140808]
[96.73871613 131.76690674]
[95.80616760 116.79592133]
[90.67153168 114.39386749]
[86.63230896 110.49150848]
[84.10237885 105.53590393]
[83.32550049 100.07923126]
[84.35221100 94.71727753]
[87.03794861 90.02444458]
[77.55590820 78.40158844]
[68.07386017 66.77872467]
[58.59181213 55.15587234]
[49.10976791 43.53301620]
[39.62771988 31.91015816]
[30.14567375 20.28730202]
[20.66362762 8.66444588]
[12.66745949 3.88386655]
[11.07421589 -3.47052431]
[1.95822561 -15.38264942]
[-5.88539886 -20.40959549]
[-7.24915123 -27.80997849]
[-15.99026680 -39.99984741]
[-30.31997108 -46.70582581]
[-31.44889641 -61.55758286]
[-40.19001389 -73.74745178]
[-48.93112946 -85.93732452]
[-64.08572388 -92.20391846]
[-65.96746063 -108.49474335]
[-52.64056396 -118.05120087]
[-37.81460571 -111.04241943]
[-36.74126053 -94.67843628]
[-28.00014496 -82.48857117]
[-19.25902939 -70.29869843]
[-5.55454636 -64.46462250]
[-3.80039811 -48.74096298]
[4.94071722 -36.55109406]
[13.87034988 -24.49864006]
[22.98634148 -12.58651543]
[32.28648376 -0.81760097]
[41.76853180 10.80525589]
[51.25057602 22.42811203]
[60.73262405 34.05096817]
[70.21466827 45.67382431]
[79.69671631 57.29668045]
[89.17876434 68.91954041]
[98.66081238 80.54239655]
[113.44184113 83.09604645]
[126.27391052 75.32830048]
[139.10598755 67.56056213]
[151.93806458 59.79281616]
[164.77014160 52.02507019]
[177.60221863 44.25732803]
[190.43429565 36.48958206]
[200.85311890 23.11482048]
[216.58941650 29.42398071]
[214.88305664 46.29183960]
[198.20202637 49.32165909]
[185.36996460 57.08940125]
[172.53788757 64.85714722]
[159.70581055 72.62489319]
[146.87373352 80.39263153]
[134.04165649 88.16037750]
[121.20958710 95.92812347]
[135.38191223 91.01433563]
[149.86643982 94.91283417]
[159.65773010 106.27639771]
[161.37217712 121.17809296]
[154.41731262 134.46830750]
[141.19654846 141.55432129]
[126.27862549 139.98738098]
[114.81874847 130.30899048]
[110.77715302 115.86338043]
[111.70970154 130.83436584]
[120.28998566 144.12681580]
[113.35890198 157.31048584]
[114.29144287 172.28147888]
[115.22399139 187.25245667]
[116.15653229 202.22344971]
[117.08908081 217.19442749]
[118.02162170 232.16540527]
[130.95216370 240.53842163]
[136.40922546 254.75369263]
[132.49572754 269.28463745]
[120.91486359 278.61318970]
[121.84740448 293.58416748]
[122.77995300 308.55514526]
[129.79930115 323.98773193]
[116.91297150 335.00494385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[14 85]
[15 84]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[30 50]
[31 49]
[33 48]
[34 47]
[36 45]
[37 44]
[38 43]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
