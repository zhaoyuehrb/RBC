%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACGUGGCUGCCGUCUGUCCCCGCUGAGGAGGUGCAGCAGCCGGAGAUGGCGGCGGUGCUGAACGCAGAGCGACUCGAGGUGUCCGUCGACGGCCUCACGCUCAGCCCGGACCCGGAGGAGCGGCCUGGGGCGGAGGGCGCCCCGC\
) } def
/len { sequence length } bind def

/coor [
[79.65763855 487.08114624]
[65.54592896 479.44970703]
[62.85586548 463.63378906]
[73.65104675 451.76602173]
[74.28765869 436.77954102]
[67.09749603 423.73535156]
[75.41352081 410.27600098]
[76.05013275 395.28952026]
[76.68675232 380.30303955]
[73.80831146 373.43920898]
[77.49928284 365.00619507]
[78.45384979 350.03659058]
[79.40841675 335.06701660]
[72.49673462 321.87313843]
[81.09656525 308.59332275]
[82.05113983 293.62371826]
[83.00570679 278.65414429]
[83.96027374 263.68453979]
[84.91484070 248.71495056]
[85.86940765 233.74534607]
[86.82398224 218.77575684]
[87.77854919 203.80615234]
[79.13910675 188.56506348]
[89.37950897 173.29957581]
[90.01612854 158.31309509]
[90.65274811 143.32659912]
[91.28936005 128.34011841]
[79.25335693 122.90824890]
[70.33899689 112.44082642]
[66.60518646 98.64408875]
[69.21172333 84.03748322]
[78.11470032 71.49411011]
[91.99035645 63.67652893]
[78.89514160 56.36110306]
[63.07395554 56.38560104]
[55.73630905 43.42380524]
[42.64109802 36.10837936]
[29.54588509 28.79295540]
[16.45067406 21.47753143]
[3.35546231 14.16210747]
[-9.89207172 7.12628174]
[-23.28595924 0.37322560]
[-36.67984772 -6.37983036]
[-50.07373428 -13.13288689]
[-64.36977386 -6.79590797]
[-79.38009644 -11.18046284]
[-88.01728058 -24.21629906]
[-86.20311737 -39.74829102]
[-74.79420471 -50.44271088]
[-59.17746735 -51.24997711]
[-46.72666550 -41.78892517]
[-43.32067871 -26.52677536]
[-29.92679214 -19.77371788]
[-16.53290367 -13.02066231]
[-3.13901591 -6.26760626]
[1.65706336 -6.91101551]
[6.89953566 -4.49954224]
[10.67088604 1.06689525]
[23.76609802 8.38231945]
[36.86130905 15.69774342]
[49.95652008 23.01316833]
[63.05173492 30.32859230]
[77.93626404 29.78084564]
[86.21056366 43.26589203]
[99.30577850 50.58131790]
[113.78083801 46.64779663]
[121.37256622 33.71080780]
[121.68388367 17.89266396]
[134.79850769 10.83178997]
[142.39022827 -2.10519838]
[149.98196411 -15.04218769]
[157.57368469 -27.97917557]
[165.16542053 -40.91616440]
[161.55133057 -49.75839233]
[162.44047546 -59.13034058]
[167.50207520 -66.90336609]
[175.47244263 -71.37181091]
[184.46804810 -71.62672424]
[192.86766052 -84.05436707]
[201.26728821 -96.48201752]
[209.66690063 -108.90966034]
[218.06652832 -121.33730316]
[226.33378601 -133.85339355]
[234.46772766 -146.45652771]
[242.60166931 -159.05966187]
[242.87272644 -175.45655823]
[257.33782959 -183.18266296]
[271.11654663 -174.29000854]
[270.03448486 -157.92660522]
[255.20480347 -150.92570496]
[247.07086182 -138.32258606]
[238.93690491 -125.71945190]
[237.94557190 -118.34281158]
[230.49417114 -112.93768311]
[222.09454346 -100.51004028]
[213.69493103 -88.08238983]
[205.29530334 -75.65474701]
[196.89569092 -63.22710419]
[197.35485840 -42.63083649]
[178.10240173 -33.32444000]
[170.51068115 -20.38744926]
[162.91894531 -7.45046043]
[155.32722473 5.48652840]
[147.73550415 18.42351723]
[147.96719360 33.31632233]
[134.30955505 41.30253601]
[126.71782684 54.23952484]
[133.75364685 67.48706055]
[148.72325134 68.44162750]
[163.69284058 69.39619446]
[178.13977051 61.63613510]
[191.93931580 70.49639893]
[190.89572144 86.86230469]
[176.08251953 93.89801025]
[162.73828125 84.36579132]
[147.76867676 83.41122437]
[132.79908752 82.45664978]
[135.33778381 93.45838165]
[134.40937805 104.32601929]
[130.33534241 114.02922058]
[123.72447205 121.71862793]
[115.39431763 126.79973602]
[106.27584839 128.97674561]
[105.63922882 143.96322632]
[105.00260925 158.94970703]
[104.36598969 173.93618774]
[112.52159119 183.98695374]
[111.64196014 196.49772644]
[102.74814606 204.76072693]
[101.79357910 219.73031616]
[100.83900452 234.69992065]
[99.88443756 249.66950989]
[98.92987061 264.63909912]
[97.97530365 279.60870361]
[97.02073669 294.57830811]
[96.06616211 309.54788208]
[102.90956879 323.81246948]
[94.37801361 336.02157593]
[93.42344666 350.99118042]
[92.46887970 365.96075439]
[91.67324066 380.93963623]
[91.03662109 395.92611694]
[90.40000153 410.91262817]
[97.54463196 425.02874756]
[89.27414703 437.41616821]
[88.63752747 452.40264893]
[98.38735962 465.14312744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 146]
[5 145]
[7 143]
[8 142]
[9 141]
[11 140]
[12 139]
[13 138]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 126]
[25 125]
[26 124]
[27 123]
[33 65]
[34 64]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 55]
[42 54]
[43 53]
[44 52]
[66 107]
[67 106]
[69 104]
[70 103]
[71 102]
[72 101]
[73 100]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[83 92]
[84 91]
[85 90]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
