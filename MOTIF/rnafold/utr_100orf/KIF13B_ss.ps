%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAGUCGCCGGUGGCCGCGGCAGACGGAAGCCGAACGAGUUCCUCGGCGGCUGCAGGAUGGGGGACUCCAAAGUGAAAGUGGCGGUGCGGAUACGACCCAUGAACCGGCGAGAGACUGACUUGCAUACCAAAUGUGUGGUGGAUGUGGAUGCAAACA\
) } def
/len { sequence length } bind def

/coor [
[192.14341736 274.15042114]
[181.82189941 264.08117676]
[174.46130371 251.66764832]
[170.57156372 237.75740051]
[170.42533875 223.30213928]
[174.03895569 209.29252625]
[181.17086792 196.69032288]
[170.56425476 186.08372498]
[159.95765686 175.47712708]
[149.35105896 164.87052917]
[138.74446106 154.26391602]
[128.13784790 143.65731812]
[117.53125000 133.05072021]
[106.92465210 122.44411469]
[87.75545502 117.28945160]
[81.13014984 100.73828888]
[67.38732910 94.72705841]
[53.64450836 88.71582794]
[39.90168762 82.70458984]
[26.15886879 76.69335938]
[11.17043400 77.28225708]
[-2.05838513 84.35321045]
[-15.28720379 91.42415619]
[-17.27975845 106.81276703]
[-27.96141434 118.06807709]
[-43.22485352 120.86217499]
[-57.20097733 114.12068939]
[-64.51567841 100.43585205]
[-62.35630035 85.06976318]
[-51.55317307 73.93099213]
[-36.26032257 71.30263519]
[-22.35815430 78.19534302]
[-9.12933636 71.12438965]
[4.09948301 64.05343628]
[4.39393139 56.55921936]
[-10.59449482 55.97009277]
[-10.00513458 40.98167419]
[4.98282862 41.57078552]
[5.27727747 34.07656860]
[-7.35598135 25.98949242]
[-19.98924065 17.90241814]
[-32.62249756 9.81534290]
[-45.25575638 1.72826803]
[-57.88901520 -6.35880661]
[-70.52227020 -14.44588184]
[-83.15553284 -22.53295708]
[-95.78878784 -30.62003136]
[-108.42205048 -38.70710754]
[-121.36306763 -46.29196548]
[-134.59188843 -53.36291885]
[-150.95562744 -52.28585052]
[-159.84408569 -66.06726074]
[-152.11358643 -80.53002167]
[-135.71658325 -80.79607391]
[-127.52093506 -66.59173584]
[-114.29211426 -59.52078629]
[-111.53313446 -60.24560547]
[-108.31397247 -59.89222717]
[-105.05473328 -58.27711487]
[-102.23490143 -55.37607193]
[-100.33497620 -51.34036636]
[-87.70171356 -43.25328827]
[-75.06845856 -35.16621399]
[-62.43519974 -27.07913971]
[-49.80194092 -18.99206543]
[-37.16868210 -10.90499020]
[-24.53542328 -2.81791568]
[-11.90216446 5.26915932]
[0.73109365 13.35623455]
[13.36435223 21.44330978]
[20.79557037 8.41345882]
[33.06524277 -0.21527834]
[47.84047699 -2.80227280]
[62.31196976 1.14435410]
[73.72817993 10.87420940]
[79.91848755 24.53730202]
[79.70589447 39.53579712]
[73.13081360 53.01794434]
[61.44340897 62.42031479]
[46.86586761 65.95518494]
[32.17010117 62.95054245]
[45.91292191 68.96177673]
[59.65573883 74.97300720]
[73.39855957 80.98423767]
[87.14138031 86.99546814]
[101.36103058 82.22039032]
[108.69035339 69.13294983]
[116.01966858 56.04550552]
[117.49636078 46.97742081]
[123.62354279 42.77510834]
[131.20840454 29.83409309]
[130.77459717 13.44068527]
[144.89434814 5.10013294]
[159.04246521 13.39248276]
[158.66456604 29.78727531]
[144.14941406 37.41895294]
[136.56455994 50.35997009]
[129.10711670 63.37482452]
[121.77779388 76.46226501]
[114.44847107 89.54970551]
[126.45296478 80.55570221]
[141.18994141 83.35240936]
[149.06481934 96.11901093]
[144.95063782 110.54376221]
[131.52592468 117.23535919]
[117.53125000 111.83751678]
[128.13784790 122.44411469]
[138.74446106 133.05072021]
[149.35105896 143.65731812]
[159.95765686 154.26391602]
[170.56425476 164.87052917]
[181.17086792 175.47712708]
[191.77746582 186.08372498]
[205.52964783 178.50318909]
[220.84384155 175.09626770]
[236.48384094 176.12963867]
[251.18943787 181.51187134]
[263.77801514 190.80145264]
[273.23971558 203.24301147]
[278.81823730 217.82872009]
[280.07159424 233.37989807]
[276.90682983 248.64233398]
[269.58703613 262.38742065]
[280.39984131 272.78372192]
[291.21264648 283.18002319]
[302.02545166 293.57635498]
[312.83825684 303.97265625]
[323.65106201 314.36895752]
[332.05249023 318.08743286]
[334.57156372 325.07711792]
[345.17819214 335.68374634]
[355.78479004 346.29034424]
[371.01406860 350.57742310]
[374.54251099 365.04806519]
[385.14910889 375.65466309]
[400.20172119 372.27493286]
[414.68414307 377.59124756]
[423.97509766 389.90716553]
[425.10986328 405.29275513]
[417.72631836 418.83850098]
[404.18057251 426.22201538]
[388.79501343 425.08724976]
[376.47909546 415.79629517]
[371.16278076 401.31387329]
[374.54251099 386.26126099]
[363.93591309 375.65466309]
[349.46527100 372.12622070]
[345.17819214 356.89694214]
[334.57156372 346.29034424]
[323.96496582 335.68374634]
[313.25476074 325.18176270]
[302.44195557 314.78546143]
[291.62915039 304.38916016]
[280.81634521 293.99282837]
[270.00354004 283.59652710]
[259.19073486 273.20022583]
[246.87310791 280.57928467]
[233.05068970 284.51181030]
[218.66914368 284.72219849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[13 107]
[14 106]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[21 34]
[22 33]
[23 32]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 56]
[50 55]
[86 100]
[87 99]
[88 98]
[90 97]
[91 96]
[123 156]
[124 155]
[125 154]
[126 153]
[127 152]
[128 151]
[130 150]
[131 149]
[132 148]
[134 146]
[135 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
