%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCGGCGGCUCUGGUGGGCCUCCCCGAUCGGGGUCCCCAGGGUGGAACCAUGUGGGUGGCCAAGUGGCUGACUGGGCUGCUCUACCAUCUCUCGCUCUUCAUCACCAGGUCUUGGGAAGUUGACUUCCACCCCAGGCAAGAAGCCCUGG\
) } def
/len { sequence length } bind def

/coor [
[92.15233612 251.78805542]
[79.04180908 241.03862000]
[85.74179840 225.46472168]
[86.36577606 210.47770691]
[86.98975372 195.49069214]
[87.61373138 180.50367737]
[84.73094940 173.64544678]
[88.40979767 165.21231079]
[89.34542847 150.24151611]
[90.28105927 135.27072144]
[91.21668243 120.29993439]
[78.69071960 112.04764557]
[65.30443573 118.81575775]
[51.91815186 125.58386993]
[38.53186798 132.35198975]
[32.23519135 139.06047058]
[24.79595184 139.11839294]
[11.27176189 145.60655212]
[-2.25242758 152.09472656]
[-15.77661800 158.58288574]
[-29.30080795 165.07104492]
[-42.82499695 171.55921936]
[-56.34918594 178.04737854]
[-60.05486298 193.23954773]
[-72.68944550 202.45375061]
[-88.28726196 201.33930969]
[-99.48351288 190.42243958]
[-100.99166107 174.85775757]
[-92.09960938 161.99441528]
[-77.00591278 157.90609741]
[-62.83735275 164.52319336]
[-49.31316376 158.03501892]
[-35.78897095 151.54685974]
[-22.26478195 145.05870056]
[-8.74059296 138.57052612]
[4.78359699 132.08236694]
[18.30778694 125.59420013]
[31.76375198 118.96570587]
[45.15003586 112.19758606]
[58.53632355 105.42947388]
[71.92260742 98.66135406]
[79.51251221 85.72330475]
[78.88853455 70.73628235]
[78.26456451 55.74927139]
[77.64058685 40.76225281]
[77.01660919 25.77523804]
[62.79029846 20.49434090]
[51.69955063 10.19684792]
[45.41323090 -3.52524471]
[44.86095810 -18.56793785]
[50.09577942 -32.63781738]
[60.29079437 -43.60171509]
[73.86964417 -49.81010437]
[73.24566650 -64.79711914]
[72.62168884 -79.78413391]
[71.99771118 -94.77115631]
[71.37373352 -109.75817108]
[70.28242493 -124.71841431]
[68.72484589 -139.63732910]
[67.16726685 -154.55624390]
[53.89800262 -162.38139343]
[47.85144806 -176.35609436]
[51.15406799 -191.03794861]
[62.33483887 -200.84245300]
[60.77725983 -215.76136780]
[59.21967697 -230.68028259]
[57.66209793 -245.59919739]
[56.10451508 -260.51809692]
[54.54693604 -275.43701172]
[52.98935318 -290.35592651]
[41.48436737 -301.53692627]
[43.19612503 -317.48840332]
[56.81150818 -325.97372437]
[71.88596344 -320.48370361]
[76.85565948 -305.22979736]
[67.90826416 -291.91351318]
[69.46584320 -276.99459839]
[71.02342987 -262.07568359]
[72.58100891 -247.15676880]
[74.13858795 -232.23785400]
[75.69616699 -217.31895447]
[77.25375366 -202.40003967]
[90.21857452 -195.11640930]
[96.48258209 -181.43333435]
[93.45296478 -166.51104736]
[82.08617401 -156.11383057]
[83.64376068 -141.19491577]
[85.20133972 -126.27600098]
[87.75811005 -123.75996399]
[89.19074249 -119.85493469]
[88.84828186 -115.11837006]
[86.36075592 -110.38214874]
[86.98472595 -95.39513397]
[87.60870361 -80.40811157]
[88.23268127 -65.42109680]
[88.85665894 -50.43408203]
[102.90458679 -45.37591934]
[113.97569275 -35.29742813]
[120.36195374 -21.71138573]
[121.06201935 -6.67484665]
[115.93810272 7.52230549]
[105.74172211 18.70607758]
[92.00362396 25.15126038]
[92.62760162 40.13827515]
[93.25157928 55.12529373]
[93.87555695 70.11230469]
[94.49953461 85.09932709]
[105.26120758 76.91340637]
[122.61610413 78.11180115]
[138.55175781 92.53155518]
[152.07594299 99.01972198]
[165.60012817 105.50788116]
[179.12432861 111.99604797]
[197.61575317 104.29452515]
[215.57785034 112.45421600]
[221.75024414 130.87355042]
[235.65280151 136.50550842]
[249.55535889 142.13746643]
[263.45791626 147.76942444]
[277.36047363 153.40138245]
[293.51846313 150.59942627]
[303.81484985 163.36331177]
[297.65756226 178.56265259]
[281.38070679 180.56166077]
[271.72851562 167.30393982]
[257.82595825 161.67198181]
[243.92340088 156.04002380]
[230.02084351 150.40806580]
[216.11828613 144.77610779]
[208.00091553 151.23890686]
[197.84628296 153.73542786]
[187.49829102 151.74249268]
[178.86532593 145.55860901]
[173.56820679 136.26136780]
[172.63615417 125.52024078]
[159.11196899 119.03207397]
[145.58778381 112.54390717]
[132.06358337 106.05574036]
[125.59455872 109.85070038]
[133.18426514 122.78887177]
[120.24597931 130.37837219]
[112.65650177 117.44060516]
[106.18747711 121.23555756]
[105.25184631 136.20634460]
[104.31621552 151.17713928]
[103.38059235 166.14793396]
[102.60074615 181.12765503]
[101.97676849 196.11466980]
[101.35279083 211.10168457]
[100.72881317 226.08869934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[8 146]
[9 145]
[10 144]
[11 143]
[12 41]
[13 40]
[14 39]
[15 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[53 96]
[54 95]
[55 94]
[56 93]
[57 92]
[58 88]
[59 87]
[60 86]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
[110 138]
[111 137]
[112 136]
[113 135]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
