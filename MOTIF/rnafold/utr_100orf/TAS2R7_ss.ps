%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGUGUGGAUGUCAAACUCCAUCAGGUCAACUAGAAACUAAUUGCAUAUUUAAACAUGGCAGAUAAAGUGCAGACUACUUUAUUGUUCUUAGCAGUUGGAGAGUUUUCAGUGGGGAUCUUAGGGAAUGCAUUCAUUGGAUUGGUAAACUGCAUGG\
) } def
/len { sequence length } bind def

/coor [
[180.27148438 500.65057373]
[179.07972717 485.69799805]
[177.88796997 470.74542236]
[176.69622803 455.79284668]
[156.45001221 442.86645508]
[151.94512939 419.02432251]
[166.36523438 399.20870972]
[162.24342346 384.78613281]
[158.12161255 370.36355591]
[153.99978638 355.94097900]
[149.87797546 341.51840210]
[145.75616455 327.09582520]
[141.63433838 312.67324829]
[136.74583435 307.07550049]
[137.57701111 297.92285156]
[133.74276733 283.42117310]
[124.42764282 279.06140137]
[118.96060181 270.09094238]
[119.37174225 259.37341309]
[125.76710510 250.49043274]
[122.51242065 235.84779358]
[119.25773621 221.20515442]
[105.54454803 215.45307922]
[97.75579071 202.57676697]
[99.05778503 187.40580750]
[109.16002655 175.77606201]
[105.90534210 161.13342285]
[102.65065765 146.49076843]
[99.39598083 131.84812927]
[96.14129639 117.20548248]
[82.86667633 104.16743469]
[88.66995239 86.48896027]
[84.83570099 71.98728943]
[81.00144958 57.48561478]
[75.75519562 49.93983459]
[77.23818970 42.65745544]
[73.69302368 28.08241653]
[70.14785767 13.50737667]
[66.60269165 -1.06766367]
[62.33769608 -15.44854736]
[57.36340714 -29.59974670]
[52.38911819 -43.75094604]
[47.41482925 -57.90214539]
[42.44054031 -72.05334473]
[37.46625137 -86.20454407]
[32.49196243 -100.35574341]
[27.51767349 -114.50694275]
[18.16608429 -114.14997864]
[8.98350430 -115.89318085]
[0.43496543 -119.64286804]
[-7.04781437 -125.20390320]
[-13.08823681 -132.28981018]
[-17.38377571 -140.53755188]
[-19.72112083 -149.52609253]
[-19.98677635 -158.79794312]
[-18.17254829 -167.88238525]
[-14.37569904 -176.31942749]
[-8.79374695 -183.68304443]
[-1.71419740 -189.60272217]
[6.50026464 -193.78211975]
[3.83029604 -208.54258728]
[1.16032767 -223.30303955]
[-1.50964081 -238.06350708]
[-4.17960930 -252.82397461]
[-8.80976582 -260.76269531]
[-6.75287056 -267.90423584]
[-9.12884045 -282.71487427]
[-11.50481129 -297.52551270]
[-13.88078117 -312.33612061]
[-16.25675201 -327.14675903]
[-18.63272285 -341.95739746]
[-21.00869179 -356.76803589]
[-33.11136627 -367.29916382]
[-32.27975464 -383.32064819]
[-19.15180397 -392.54217529]
[-3.79815030 -387.88977051]
[2.00319552 -372.93234253]
[-6.19806242 -359.14398193]
[-3.82209206 -344.33337402]
[-1.44612169 -329.52273560]
[0.92984861 -314.71209717]
[3.30581903 -299.90148926]
[5.68178940 -285.09085083]
[8.05775928 -270.28021240]
[10.58085346 -255.49394226]
[13.25082207 -240.73347473]
[15.92079067 -225.97300720]
[18.59075928 -211.21255493]
[21.26072693 -196.45208740]
[41.73235321 -190.98487854]
[56.78145981 -175.96826172]
[62.32962418 -155.37219238]
[56.82350159 -134.69177246]
[41.66887283 -119.48123169]
[46.64316177 -105.33003235]
[51.61745071 -91.17883301]
[56.59173965 -77.02763367]
[61.56602859 -62.87643433]
[66.54032135 -48.72523499]
[71.51461029 -34.57403564]
[76.48889923 -20.42283630]
[85.48632050 -32.42476654]
[100.47213745 -33.07697678]
[110.47826385 -21.90211868]
[108.18123627 -7.07903862]
[95.26225281 0.54328781]
[81.17773438 -4.61283016]
[84.72290039 9.96220970]
[88.26806641 24.53725052]
[91.81323242 39.11228943]
[95.50312042 53.65136719]
[99.33737183 68.15303802]
[103.17162323 82.65470886]
[112.10316467 87.17691040]
[117.13332367 95.83256531]
[116.64064026 105.83157349]
[110.78394318 113.95079803]
[114.03862000 128.59344482]
[117.29330444 143.23608398]
[120.54798889 157.87873840]
[123.80267334 172.52137756]
[137.88026428 178.77656555]
[145.48637390 191.96748352]
[143.88566589 206.93083191]
[133.90039062 217.95046997]
[137.15505981 232.59310913]
[140.40974426 247.23574829]
[154.70651245 261.39627075]
[148.24443054 279.58691406]
[152.07868958 294.08859253]
[156.05691528 308.55145264]
[160.17872620 322.97399902]
[164.30055237 337.39657593]
[168.42236328 351.81915283]
[172.54417419 366.24172974]
[176.66600037 380.66430664]
[180.78781128 395.08688354]
[187.53570557 395.66476440]
[193.98243713 397.68930054]
[199.82244873 401.05749512]
[204.78048706 405.60287476]
[208.62455750 411.10357666]
[211.17677307 417.29342651]
[212.32156372 423.87448120]
[212.01092529 430.53170776]
[210.26638794 436.94778442]
[207.17764282 442.81835938]
[202.89796448 447.86651611]
[197.63667297 451.85574341]
[191.64880371 454.60107422]
[192.84056091 469.55368042]
[194.03231812 484.50625610]
[195.22406006 499.45883179]
[206.45178223 510.91824341]
[204.34988403 526.82299805]
[190.53077698 534.97235107]
[175.59529114 529.11480713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[7 137]
[8 136]
[9 135]
[10 134]
[11 133]
[12 132]
[13 131]
[15 130]
[16 129]
[20 127]
[21 126]
[22 125]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[32 113]
[33 112]
[34 111]
[36 110]
[37 109]
[38 108]
[39 107]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
