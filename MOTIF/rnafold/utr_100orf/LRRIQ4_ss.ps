%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUGAAUAUUUGAGCUUUUCUUCACAAUAAUGUCAAAAGACAUAAAAUCAGUAGAACAUUCACCUAAAAUUCAUCAGAGAAAUGAUCCACAGCACGUCAAUGAUAGAACAUUUUUCAUUGAUGCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[33.49032593 141.84754944]
[35.45366669 126.97659302]
[42.93983841 113.97823334]
[54.81732178 104.81716156]
[69.29086304 100.87803650]
[84.17579651 102.75725555]
[70.00077820 97.85124207]
[55.82577133 92.94522095]
[41.65075684 88.03919983]
[26.07896042 90.83736420]
[16.58230019 79.36292267]
[2.40728831 74.45690155]
[-11.93379879 70.05995178]
[-26.42268753 66.17766571]
[-40.91157532 62.29537582]
[-55.40046310 58.41309357]
[-66.26566315 66.47120667]
[-79.59447479 66.76433563]
[-90.47988129 59.41009903]
[-95.04455566 47.30017090]
[-109.43695068 43.07418060]
[-123.82934570 38.84819412]
[-138.22174072 34.62220764]
[-147.06065369 47.68616486]
[-159.47920227 57.37959671]
[-174.26191711 62.76889038]
[-189.96658325 63.34097290]
[-205.06495667 59.05211258]
[-218.09149170 50.33102417]
[-227.78553772 38.03605270]
[-233.21340942 23.37068176]
[-233.85823059 7.76575756]
[-248.34712219 3.88347197]
[-262.83599854 0.00118641]
[-277.32489014 -3.88109922]
[-291.81378174 -7.76338482]
[-307.50546265 -2.99863625]
[-319.29116821 -14.40167713]
[-315.04675293 -30.24203682]
[-299.13851929 -34.22451019]
[-287.93148804 -22.25227165]
[-273.44259644 -18.36998749]
[-258.95373535 -14.48770142]
[-244.46482849 -10.60541534]
[-229.97595215 -6.72312975]
[-222.47979736 -18.90372276]
[-211.83396912 -28.47879791]
[-198.90101624 -34.66039276]
[-184.73228455 -36.93599319]
[-170.48240662 -35.11101532]
[-157.31518555 -29.32541084]
[-146.30862427 -20.04297447]
[-138.36657715 -8.01418114]
[-134.14457703 5.78448820]
[-133.99575806 20.22981071]
[-119.60335541 24.45579910]
[-105.21096039 28.68178749]
[-90.81856537 32.90777588]
[-76.46847534 24.22246742]
[-59.93953323 28.64452171]
[-51.51817703 43.92420578]
[-37.02928925 47.80649185]
[-22.54040146 51.68877411]
[-8.05151367 55.57106018]
[-4.76506090 54.05723953]
[-0.56335634 54.12015533]
[3.77578831 56.18041611]
[7.31330776 60.28189087]
[21.48831940 65.18791199]
[36.04622650 62.03883743]
[46.55677795 73.86418915]
[60.73178864 78.77021027]
[74.90679932 83.67622375]
[89.08181000 88.58224487]
[103.61587524 84.87265015]
[113.70578003 73.77337646]
[123.79568481 62.67410660]
[133.88558960 51.57483673]
[132.88333130 35.80236053]
[143.39001465 23.99621201]
[159.17221069 23.16077042]
[170.86662292 33.79169083]
[171.53515625 49.58183289]
[160.78118896 61.16318893]
[144.98486328 61.66474152]
[134.89495850 72.76401520]
[124.80504608 83.86328125]
[114.71514130 94.96255493]
[115.69409180 102.39839172]
[129.87008667 97.49522400]
[143.01330566 90.26640320]
[156.39675903 97.04012299]
[158.35429382 111.91183472]
[147.17958069 121.91811371]
[132.61398315 118.33714294]
[117.65198517 117.27006531]
[118.63092804 124.70590210]
[131.24972534 132.81550598]
[143.86853027 140.92512512]
[156.48733521 149.03472900]
[169.10614014 157.14434814]
[181.72494507 165.25396729]
[194.34375000 173.36357117]
[206.96255493 181.47319031]
[219.58135986 189.58279419]
[232.86039734 181.97190857]
[248.15579224 181.41548157]
[261.95275879 188.04135132]
[271.08087158 200.32696533]
[273.44253540 215.44917297]
[268.49505615 229.93299866]
[257.37536621 240.45016479]
[242.63865662 244.58390808]
[227.67131042 241.38432312]
[215.91273499 231.58665466]
[210.06495667 217.44232178]
[211.47174072 202.20159912]
[198.85293579 194.09199524]
[186.23413086 185.98237610]
[173.61532593 177.87275696]
[160.99653625 169.76315308]
[148.37773132 161.65353394]
[135.75892639 153.54393005]
[123.14012146 145.43431091]
[110.52131653 137.32470703]
[108.38794708 152.17222595]
[100.75354004 165.08406067]
[88.77200317 174.10864258]
[74.25434113 177.88189697]
[59.39486313 175.83351135]
[46.43955231 168.27308655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 74]
[7 73]
[8 72]
[9 71]
[11 69]
[12 68]
[13 64]
[14 63]
[15 62]
[16 61]
[20 58]
[21 57]
[22 56]
[23 55]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[75 88]
[76 87]
[77 86]
[78 85]
[97 125]
[98 124]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
