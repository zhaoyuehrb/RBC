%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCCAUCCCGUGGAGUGGCCGGCGACAAGAUGGCAGCAGCGUGUCGGAGCGUGAAGGGCCUGGUGGCGGUAAUAACCGGAGGAGCCUCGGGCCUGGGCCUGGCCACGGCGGAGCGACUUGUGGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[123.43249512 436.31530762]
[125.54022217 420.82043457]
[137.14945984 410.34381104]
[136.43572998 395.36077881]
[135.72200012 380.37777710]
[135.00827026 365.39477539]
[134.29454041 350.41174316]
[133.58081055 335.42874146]
[117.99794006 317.47952271]
[128.17813110 295.24633789]
[124.98965454 280.58914185]
[121.80117798 265.93194580]
[118.61270142 251.27473450]
[109.45687866 246.47613525]
[104.39419556 237.21124268]
[105.33951569 226.47407532]
[112.21913910 217.89154053]
[109.73168945 203.09922791]
[107.24423981 188.30691528]
[104.75678253 173.51458740]
[102.26933289 158.72227478]
[99.78188324 143.92996216]
[97.29443359 129.13764954]
[94.80698395 114.34532928]
[84.20038605 103.73873138]
[69.40806580 101.25128174]
[54.61575317 98.76383209]
[39.82343674 96.27638245]
[25.03112221 93.78893280]
[13.94345284 104.48330688]
[-1.13908565 106.57386780]
[-14.40366650 99.46648407]
[-20.86231995 86.07157135]
[-35.65463257 83.58412170]
[-50.82235336 89.81888580]
[-63.63861465 79.58777618]
[-60.91914368 63.41568756]
[-45.46150208 57.93907166]
[-33.16718292 68.79180145]
[-18.37486839 71.27925110]
[-7.89038897 60.73346329]
[6.96924829 58.35540009]
[20.53850365 65.26399994]
[27.51857376 78.99661255]
[42.31089020 81.48406219]
[57.10320282 83.97151184]
[71.89551544 86.45896912]
[86.68783569 88.94641876]
[91.10900879 88.20565796]
[95.07647705 88.79699707]
[98.24169922 90.45639038]
[104.79586792 76.96406555]
[98.81561279 67.92474365]
[97.19223022 57.29075623]
[100.15792084 47.03506088]
[107.09979248 39.03158188]
[116.68506622 34.71281815]
[127.11656952 34.81370544]
[134.61657715 21.82332420]
[142.11657715 8.83294296]
[149.61657715 -4.15743828]
[157.11657715 -17.14781952]
[164.61657715 -30.13820076]
[172.11657715 -43.12858200]
[179.61657715 -56.11896133]
[181.22468567 -65.21207428]
[187.45278931 -69.32619476]
[195.25979614 -82.13441467]
[203.06681824 -94.94263458]
[209.94021606 -108.27516174]
[215.84497070 -122.06407166]
[221.74972534 -135.85296631]
[219.26663208 -152.06303406]
[232.23088074 -162.10595703]
[247.30596924 -155.65042114]
[248.98393250 -139.33735657]
[235.53862000 -129.94822693]
[229.63386536 -116.15931702]
[223.72912598 -102.37040710]
[238.20378113 -106.30540466]
[251.32913208 -99.04420471]
[255.68643188 -84.69101715]
[248.81283569 -71.35859680]
[234.59344482 -66.58272552]
[221.06539917 -73.06285095]
[215.87503052 -87.13561249]
[208.06802368 -74.32739258]
[200.26100159 -61.51917648]
[192.60694885 -48.61896133]
[185.10694885 -35.62858200]
[177.60694885 -22.63820076]
[170.10694885 -9.64781952]
[162.60694885 3.34256148]
[155.10694885 16.33294296]
[147.60694885 29.32332420]
[140.10694885 42.31370544]
[146.59085083 60.59533310]
[137.53717041 78.09001923]
[118.28819275 83.51823425]
[111.73402405 97.01055908]
[109.59930420 111.85787964]
[112.08675385 126.65019989]
[114.57420349 141.44252014]
[117.06165314 156.23483276]
[119.54910278 171.02714539]
[122.03655243 185.81945801]
[124.52400208 200.61177063]
[127.01145172 215.40408325]
[140.56350708 230.24017334]
[133.26989746 248.08625793]
[136.45837402 262.74346924]
[139.64686584 277.40066528]
[142.83534241 292.05786133]
[149.19244385 293.92709351]
[154.71073914 297.52117920]
[158.93800354 302.51766968]
[161.53585815 308.48040771]
[162.30683899 314.89767456]
[161.20916748 321.22586060]
[158.35836792 326.93576050]
[154.01559448 331.55661011]
[148.56382751 334.71502686]
[149.27755737 349.69802856]
[149.99128723 364.68103027]
[150.70500183 379.66406250]
[151.41873169 394.64706421]
[152.13246155 409.63006592]
[164.68499756 418.95571899]
[168.25607300 434.18008423]
[161.15953064 448.11468506]
[146.74613953 454.18002319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[10 113]
[11 112]
[12 111]
[13 110]
[17 108]
[18 107]
[19 106]
[20 105]
[21 104]
[22 103]
[23 102]
[24 101]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[33 40]
[34 39]
[51 100]
[52 99]
[58 96]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[67 88]
[68 87]
[69 86]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
