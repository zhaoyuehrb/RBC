%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAUAAGUUUGUCUUUUCUCUGGAUUUUUCUUGCAGAUUUAUCAGGAUGAGCUUCCAGGCCCCACGCAGACUCCUGGAGCUGGCAGGGCAGAGCCUGCUGAGGGACCAGGCCUUGGCCAUCUCCGUCCUGGAUGAGCUGCCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[118.41359711 145.56346130]
[105.82545471 153.72058105]
[90.83895874 153.08438110]
[78.98742676 143.88975525]
[74.64670563 129.53155518]
[79.41947937 115.31111908]
[91.54485321 106.47851562]
[76.66634369 104.57324982]
[61.78783798 102.66798401]
[46.90933228 100.76271820]
[32.03082657 98.85745239]
[17.15231895 96.95217896]
[2.27381301 95.04691315]
[-5.32430458 108.18252563]
[-17.34026527 117.38359833]
[-31.92409706 121.27275085]
[-46.84542847 119.28743744]
[-59.83459091 111.76104736]
[-68.92784882 99.86743164]
[-72.76427460 85.43791199]
[-87.64277649 83.53264618]
[-102.52128601 81.62738037]
[-117.39979553 79.72210693]
[-132.27830505 77.81684113]
[-147.15679932 75.91157532]
[-162.07240295 74.32254028]
[-177.01835632 73.05045319]
[-191.96432495 71.77835846]
[-206.37095642 78.31745148]
[-218.39620972 69.52867889]
[-233.34216309 68.25659180]
[-248.28813171 66.98449707]
[-263.23410034 65.71240997]
[-278.18005371 64.44032288]
[-287.50961304 76.72701263]
[-302.00866699 81.99781799]
[-317.05056763 78.57084656]
[-327.83557129 67.53962708]
[-330.92214966 52.42419052]
[-325.32543945 38.04780960]
[-312.83129883 28.99794006]
[-297.42657471 28.16235924]
[-284.02688599 35.80769730]
[-276.90795898 49.49435806]
[-261.96200562 50.76644897]
[-247.01603699 52.03853607]
[-232.07008362 53.31062698]
[-217.12411499 54.58271408]
[-203.78652954 47.95263672]
[-190.69223022 56.83240128]
[-175.74627686 58.10448837]
[-160.80030823 59.37657547]
[-156.58998108 56.99131393]
[-150.82641602 57.27420425]
[-145.25154114 61.03306961]
[-130.37303162 62.93833542]
[-115.49452209 64.84360504]
[-100.61602020 66.74887085]
[-85.73751068 68.65413666]
[-70.85900879 70.55940247]
[-63.51044846 57.56217575]
[-51.71367264 48.34363556]
[-37.24714661 44.33308411]
[-22.30702782 46.17167664]
[-9.17375565 53.61014557]
[0.13601783 65.54208374]
[4.17908049 80.16841125]
[19.05758667 82.07367706]
[33.93609238 83.97894287]
[48.81459808 85.88420868]
[63.69310760 87.78947449]
[78.57160950 89.69474792]
[93.45011902 91.60001373]
[108.43660736 92.23663330]
[123.42308807 91.60001373]
[138.40957642 90.96339417]
[153.39605713 90.32677460]
[168.38253784 89.69015503]
[183.35214233 88.73558807]
[198.29809570 87.46350098]
[213.24406433 86.19141388]
[228.19001770 84.91931915]
[239.77124023 69.99493408]
[258.26074219 68.23269653]
[271.97552490 80.28169250]
[286.85403442 78.37642670]
[301.73254395 76.47116089]
[316.61105347 74.56588745]
[331.48956299 72.66062164]
[346.36807251 70.75535583]
[359.07366943 61.32785797]
[372.68063354 67.38589478]
[387.55914307 65.48062897]
[402.43765259 63.57536316]
[409.95104980 50.12712479]
[423.78088379 43.75613785]
[438.53579712 46.71528244]
[448.59851074 57.66423416]
[463.47702026 55.75896835]
[478.35552979 53.85369873]
[493.23403931 51.94843292]
[508.11254883 50.04316711]
[522.99102783 48.13789749]
[537.86956787 46.23263168]
[546.16540527 32.97696304]
[561.05682373 28.20420837]
[575.51257324 34.16791534]
[582.70703125 48.05220795]
[579.24322510 63.30134201]
[566.75671387 72.71514893]
[551.14312744 71.84870911]
[539.77484131 61.11113739]
[524.89630127 63.01640320]
[510.01779175 64.92166901]
[495.13928223 66.82694244]
[480.26080322 68.73220825]
[465.38229370 70.63747406]
[450.50378418 72.54273987]
[443.52465820 85.67398834]
[429.99145508 92.25556183]
[415.00253296 89.57495880]
[404.34292603 78.45387268]
[389.46441650 80.35913849]
[374.58590698 82.26440430]
[362.94448853 91.55562592]
[348.27331543 85.63386536]
[333.39483643 87.53913116]
[318.51632690 89.44439697]
[303.63781738 91.34966278]
[288.75930786 93.25492859]
[273.88079834 95.16020203]
[268.98144531 105.55298615]
[259.55783081 112.33446503]
[247.90808105 113.70709229]
[236.94372559 109.21031952]
[229.46211243 99.86528778]
[214.51614380 101.13737488]
[199.57019043 102.40946198]
[184.62422180 103.68154907]
[180.87756348 106.74405670]
[175.14909363 107.43927765]
[169.01916504 104.67664337]
[154.03266907 105.31326294]
[139.04618835 105.94987488]
[124.05970764 106.58649445]
[109.07321930 107.22311401]
[120.40513611 117.05101776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[25 55]
[26 52]
[27 51]
[28 50]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[74 146]
[75 145]
[76 144]
[77 143]
[78 142]
[79 139]
[80 138]
[81 137]
[82 136]
[85 131]
[86 130]
[87 129]
[88 128]
[89 127]
[90 126]
[92 124]
[93 123]
[94 122]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
