%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACUUCCGGCAGCUGGACUUGGAAAAGCAAGGAGUGUCGGGAAUGGCGACCAAGCGGCUCGCGCGGCAGCUUGGAUUAAUUAGGAGAAAGUCAAUUGCGCCAGCAAAUGGAAAUCUCGGAAGAAGCAAAUCCAAGCAGUUGU\
) } def
/len { sequence length } bind def

/coor [
[114.69076538 111.05969238]
[112.59988403 119.20134735]
[106.43902588 126.78083801]
[96.51174164 131.93186951]
[83.91893005 132.98881531]
[70.92855072 140.48881531]
[57.93816757 147.98881531]
[44.94778824 155.48881531]
[31.95740509 162.98881531]
[18.96702385 170.48881531]
[5.97664356 177.98881531]
[-7.01373720 185.48881531]
[-12.93690491 192.54406738]
[-20.37032509 193.00718689]
[-33.52122498 200.22201538]
[-35.98526382 210.91401672]
[-43.79670715 218.30189514]
[-54.17474365 220.09138489]
[-63.60576630 215.92419434]
[-77.05885315 222.55851746]
[-90.51194763 229.19285583]
[-103.96504211 235.82717896]
[-108.80718994 250.87142944]
[-122.90692902 258.01095581]
[-137.89913940 253.01000977]
[-144.88919067 238.83557129]
[-139.73002625 223.89707947]
[-125.48248291 217.05728149]
[-110.59936523 222.37409973]
[-97.14627838 215.73976135]
[-83.69318390 209.10543823]
[-70.24009705 202.47109985]
[-60.79427338 185.64987183]
[-40.73605728 187.07112122]
[-27.58515549 179.85629272]
[-14.51373768 172.49842834]
[-1.52335632 164.99842834]
[11.46702480 157.49842834]
[24.45740509 149.99842834]
[37.44778824 142.49842834]
[50.43816757 134.99842834]
[63.42855072 127.49843597]
[76.41893005 119.99843597]
[77.55985260 112.58572388]
[65.86139679 103.19711304]
[79.84170532 97.76029968]
[80.98262787 90.34758759]
[70.84877777 79.28842926]
[60.71492386 68.22927094]
[50.58107376 57.17010880]
[40.32718658 46.22214890]
[29.95449257 35.38668823]
[14.06765366 31.31969833]
[9.90751362 15.45699692]
[21.75366592 4.11677265]
[37.41980743 8.96487522]
[40.78995132 25.01399231]
[51.16264725 35.84945297]
[58.11276245 38.52640915]
[61.64023209 47.03625488]
[71.77408600 58.09541702]
[81.90793610 69.15457153]
[92.04179382 80.21373749]
[106.29749298 84.88010406]
[121.00926971 81.95375061]
[135.72105408 79.02738953]
[150.43283081 76.10103607]
[165.14460754 73.17468262]
[177.17015076 62.89377213]
[191.16233826 67.99943542]
[205.87411499 65.07308197]
[220.58589172 62.14672470]
[235.29766846 59.22037125]
[250.00946045 56.29401779]
[264.72122192 53.36766052]
[279.43301392 50.44130707]
[294.14480591 47.51494980]
[308.85656738 44.58859634]
[318.26995850 29.88689613]
[335.06591797 26.56972885]
[348.80990601 36.20261002]
[363.45434570 32.95601654]
[373.22921753 15.48388386]
[392.37985229 10.78564548]
[408.62548828 21.41934776]
[423.02624512 17.22191238]
[437.42700195 13.02447701]
[451.82775879 8.82704163]
[457.15679932 -5.62658453]
[469.82669067 -14.07213783]
[484.86233521 -13.44519424]
[496.50634766 -4.19558096]
[510.90707397 -8.39301682]
[525.30786133 -12.59045124]
[536.39154053 -23.88033485]
[550.77551270 -20.01359940]
[565.17626953 -24.21103477]
[579.57702637 -28.40847015]
[593.97772217 -32.60590744]
[604.92095947 -44.81977463]
[620.91229248 -41.18528748]
[625.50122070 -25.44128609]
[613.96710205 -13.78385544]
[598.17517090 -18.20515823]
[583.77441406 -14.00772285]
[569.37371826 -9.81028748]
[554.97296143 -5.61285257]
[544.91925049 5.37680149]
[529.50524902 1.81029618]
[515.10455322 6.00773144]
[500.70376587 10.20516682]
[495.85314941 24.26252556]
[483.50906372 32.86993790]
[468.28558350 32.55455399]
[456.02517700 23.22779083]
[441.62442017 27.42522430]
[427.22369385 31.62265968]
[412.82293701 35.82009506]
[410.45288086 45.94114685]
[404.01394653 54.20478058]
[394.63510132 59.05162811]
[384.00753784 59.53121948]
[374.07989502 55.48760986]
[366.70092773 47.60045624]
[352.05648804 50.84704971]
[346.69415283 62.61171722]
[335.35385132 69.21793365]
[322.08633423 68.04541016]
[311.78292847 59.30037689]
[297.07113647 62.22673035]
[282.35937500 65.15308380]
[267.64758301 68.07943726]
[252.93580627 71.00579834]
[238.22402954 73.93215179]
[223.51225281 76.85850525]
[208.80047607 79.78485870]
[194.08868408 82.71121216]
[183.11544800 92.78281403]
[168.07096863 87.88645935]
[153.35919189 90.81282043]
[138.64739990 93.73917389]
[123.93562317 96.66552734]
[109.22384644 99.59188080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[14 35]
[15 34]
[19 32]
[20 31]
[21 30]
[22 29]
[47 63]
[48 62]
[49 61]
[50 60]
[51 58]
[52 57]
[64 143]
[65 142]
[66 141]
[67 140]
[68 139]
[70 137]
[71 136]
[72 135]
[73 134]
[74 133]
[75 132]
[76 131]
[77 130]
[78 129]
[81 125]
[82 124]
[85 118]
[86 117]
[87 116]
[88 115]
[92 111]
[93 110]
[94 109]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
