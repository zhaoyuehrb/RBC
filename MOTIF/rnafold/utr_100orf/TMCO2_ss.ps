%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUACCUAGGCCUCCAGACUACUCCCCCUAACUCAUAUUUAGAUUCCUGAAGCUUCUGCACAUGUAGUUCCUAGAGCUGCUGCUUAUUAAAAUGUCAACAUCUUCAUCUUCUAGCUGGGACAACCUCUUAGAGUCUCUCUCUCUCAGCACAGUAUGGAAUUGGAUACAAGCAAGUUUUUUGGGAGAGACUA\
) } def
/len { sequence length } bind def

/coor [
[51.22863770 393.92459106]
[46.91797256 408.29187012]
[42.60730743 422.65911865]
[53.58844376 433.32089233]
[58.34597015 447.86819458]
[55.78663635 462.95822144]
[46.49856567 475.12332153]
[32.61608124 481.56811523]
[17.32928085 480.81158447]
[4.15095806 473.02761841]
[-3.89060473 460.00488281]
[-4.94751549 444.73590088]
[1.22309577 430.72940063]
[13.20326805 421.20394897]
[28.24004555 418.34844971]
[32.55071259 403.98120117]
[36.86137772 389.61392212]
[40.93883133 375.17874146]
[44.78199768 360.67944336]
[40.56382751 346.39462280]
[51.57862091 335.03744507]
[55.42178726 320.53814697]
[54.09472275 313.25668335]
[59.44636154 305.83615112]
[63.52381134 291.40097046]
[67.60126495 276.96578979]
[71.67871094 262.53060913]
[75.75616455 248.09542847]
[65.19248962 235.53866577]
[64.17955780 218.99429321]
[73.31370544 204.96417236]
[89.16445160 199.08029175]
[93.00761414 184.58097839]
[96.85078430 170.08166504]
[100.69394684 155.58235168]
[95.93013763 149.78959656]
[84.34445953 159.31703186]
[74.81721497 147.73118591]
[86.40250397 138.20407104]
[81.63868713 132.41131592]
[66.67015076 133.38226318]
[51.70160675 134.35321045]
[36.73306274 135.32415771]
[21.76452065 136.29510498]
[8.43071842 145.84191895]
[-6.39016867 138.82241821]
[-7.45168257 122.45766449]
[6.33817148 113.58231354]
[20.79357338 121.32656097]
[35.76211548 120.35561371]
[50.73065948 119.38466644]
[65.69920349 118.41371918]
[80.66773987 117.44277191]
[82.36444855 102.53903961]
[67.99719238 98.22837067]
[52.17097473 102.52522278]
[40.72896194 90.77735901]
[45.44171143 75.06996918]
[61.46115112 71.56147766]
[72.30785370 83.86111450]
[86.67511749 88.17177582]
[90.65065765 81.81213379]
[77.93148804 73.86086273]
[85.88295746 61.14181519]
[98.60173035 69.09284210]
[102.57727051 62.73319626]
[92.40864563 51.70600128]
[82.24002075 40.67880630]
[72.07139587 29.65160942]
[61.90277100 18.62441254]
[51.73414230 7.59721756]
[41.56551743 -3.42997837]
[26.38309288 -10.97519493]
[29.43052483 -27.65300941]
[46.30017853 -29.34154892]
[52.59271240 -13.59860420]
[62.76134109 -2.57140827]
[72.92996216 8.45578766]
[83.09859467 19.48298264]
[93.26721954 30.51017952]
[103.43584442 41.53737640]
[113.60446930 52.56457138]
[128.46258545 54.62276459]
[141.24584961 46.77493286]
[154.02909851 38.92710114]
[166.81234741 31.07926941]
[152.04385376 28.45406914]
[141.54914856 17.73674011]
[139.23449707 2.91640472]
[145.96142578 -10.49062347]
[159.22608948 -17.49408340]
[174.09123230 -15.48719788]
[185.02384949 -5.21695566]
[187.95469666 9.49393082]
[181.79399109 23.16862869]
[195.48396301 17.03800583]
[209.17395020 10.90738392]
[212.47276306 -4.14000845]
[223.86624146 -14.24158955]
[238.84603882 -15.68029118]
[251.64735413 -8.11299133]
[265.33734131 -14.24361420]
[271.04547119 -28.73689270]
[285.01638794 -34.75919724]
[298.79830933 -29.22805786]
[312.48831177 -35.35868073]
[326.17828369 -41.48930359]
[339.86825562 -47.61992645]
[353.55822754 -53.75054932]
[367.19812012 -59.99181747]
[380.78701782 -66.34331512]
[382.59457397 -78.11080170]
[389.78982544 -87.44499969]
[400.48959351 -92.09268951]
[411.98367310 -91.00299072]
[421.42120361 -84.56258392]
[435.20864868 -90.47071838]
[448.99612427 -96.37885284]
[462.78356934 -102.28698730]
[476.57101440 -108.19512939]
[490.35848999 -114.10326385]
[504.14593506 -120.01139832]
[489.56011963 -123.51197052]
[478.60507202 -133.75828552]
[474.13821411 -148.07774353]
[477.32467651 -162.73539734]
[487.33331299 -173.90800476]
[501.55352783 -178.68141174]
[516.27624512 -175.81053162]
[527.66125488 -166.04420471]
[532.73901367 -151.92979431]
[530.18505859 -137.14881897]
[520.66632080 -125.55723572]
[535.22595215 -129.16510010]
[549.78564453 -132.77297974]
[559.26629639 -145.71502686]
[575.30114746 -146.22798157]
[585.58959961 -133.91835022]
[582.23925781 -118.22903442]
[567.82019043 -111.19552612]
[553.39349365 -118.21333313]
[538.83386230 -114.60546112]
[524.27423096 -110.99758911]
[510.05407715 -106.22394562]
[496.26660156 -100.31580353]
[482.47915649 -94.40766907]
[468.69171143 -88.49953461]
[454.90423584 -82.59140015]
[441.11679077 -76.68325806]
[427.32934570 -70.77512360]
[421.57760620 -53.40686417]
[404.67349243 -45.61162567]
[387.13851929 -52.75440979]
[373.54962158 -46.40290833]
[368.81448364 -40.71439743]
[359.68884277 -40.06057358]
[345.99887085 -33.92995071]
[332.30889893 -27.79932785]
[318.61892700 -21.66870499]
[304.92895508 -15.53808117]
[299.87771606 -1.57310069]
[286.08145142 4.83924150]
[271.46795654 -0.55363762]
[257.77798462 5.57698536]
[254.89880371 20.16630554]
[243.85021973 30.38358688]
[228.72706604 32.15664291]
[215.30456543 24.59736061]
[201.61459351 30.72798347]
[187.92460632 36.85860443]
[174.66018677 43.86252213]
[161.87692261 51.71035385]
[149.09367371 59.55818558]
[136.31042480 67.40601349]
[115.19326019 159.42552185]
[111.35009766 173.92483521]
[107.50692749 188.42414856]
[103.66376495 202.92346191]
[113.14268494 212.94160461]
[116.40420532 226.23069763]
[112.69949341 239.29060364]
[103.10021210 248.73577881]
[90.19134521 252.17288208]
[86.11389160 266.60806274]
[82.03644562 281.04324341]
[77.95899200 295.47842407]
[73.88153839 309.91360474]
[69.92110443 324.38131714]
[66.07793427 338.88061523]
[70.02120972 354.20254517]
[59.28130722 364.52261353]
[55.43814087 379.02191162]
[56.79992676 385.51513672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[18 192]
[19 191]
[21 189]
[22 188]
[24 187]
[25 186]
[26 185]
[27 184]
[28 183]
[32 178]
[33 177]
[34 176]
[35 175]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[54 61]
[55 60]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[83 174]
[84 173]
[85 172]
[86 171]
[95 170]
[96 169]
[97 168]
[101 164]
[102 163]
[105 160]
[106 159]
[107 158]
[108 157]
[109 156]
[110 154]
[111 153]
[116 150]
[117 149]
[118 148]
[119 147]
[120 146]
[121 145]
[122 144]
[133 143]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
