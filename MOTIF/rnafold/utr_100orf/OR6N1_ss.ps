%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACACAGGGAACUGGAGCCAGGUAGCAGAAUUCAUCAUCUUGGGCUUCCCCCAUCUCCAGGGUGUCCAGAUUUAUCUCUUCCUCUUGUUGCUUCUCA\
) } def
/len { sequence length } bind def

/coor [
[42.76125336 218.80160522]
[41.41053391 203.86122131]
[30.88673019 214.54998779]
[20.36292648 225.23873901]
[22.76123238 240.45565796]
[15.82060051 254.00854492]
[2.38925624 260.79553223]
[-12.28737259 258.40081787]
[-22.81117439 269.08959961]
[-33.33497620 279.77835083]
[-36.93011856 295.77856445]
[-52.66278076 300.40625000]
[-64.34854889 288.90081787]
[-59.96611023 273.09808350]
[-44.02373505 269.25454712]
[-33.49993515 258.56579590]
[-22.97613144 247.87702942]
[-25.59878731 233.23941040]
[-19.02151680 219.70414734]
[-5.57819891 212.55357361]
[9.67416763 214.71495056]
[20.19796944 204.02618408]
[30.72177315 193.33741760]
[40.02191544 181.56851196]
[47.98828506 168.85879517]
[55.95465088 156.14906311]
[63.92101669 143.43934631]
[71.88738251 130.72962952]
[79.85375214 118.01990509]
[87.82012177 105.31018829]
[94.98091888 92.12978363]
[101.30844116 78.52969360]
[107.63596344 64.92961121]
[96.72993469 53.22934723]
[91.12804413 38.28836823]
[91.65090179 22.37862587]
[98.19015503 7.90749359]
[109.72927856 -2.94650054]
[124.50152588 -8.56162453]
[140.26034546 -8.11521053]
[146.16184998 -21.90550613]
[152.06335449 -35.69580078]
[157.96485901 -49.48609924]
[158.49296570 -58.78737259]
[164.27030945 -63.60896683]
[170.59783936 -77.20905304]
[176.92536926 -90.80914307]
[183.25289917 -104.40923309]
[178.86853027 -114.60645294]
[180.88017273 -125.29682922]
[188.35990906 -132.88679504]
[198.58506775 -134.96588135]
[205.74586487 -148.14628601]
[212.90666199 -161.32667542]
[206.10870361 -175.27542114]
[208.84106445 -190.55003357]
[220.05307007 -201.27713013]
[235.43350220 -203.33189392]
[249.06825256 -195.92425537]
[255.71449280 -181.90258789]
[252.81660461 -166.65850830]
[241.48887634 -156.05368042]
[226.08706665 -154.16587830]
[218.92626953 -140.98547363]
[211.76547241 -127.80507660]
[213.85537720 -108.68846130]
[196.85298157 -98.08171082]
[190.52545166 -84.48162079]
[184.19793701 -70.88153076]
[177.87040710 -57.28144073]
[171.75515747 -43.58459473]
[165.85365295 -29.79429817]
[159.95214844 -16.00400162]
[154.05064392 -2.21370673]
[164.28839111 7.51564837]
[170.57760620 20.19502640]
[172.13549805 34.29270554]
[168.75228882 48.09770966]
[160.81909180 59.92745590]
[149.28286743 68.33283997]
[135.53344727 72.27572632]
[121.23605347 71.25713348]
[114.90853119 84.85722351]
[108.58100891 98.45731354]
[109.50322723 101.57146454]
[109.22633362 105.10810089]
[107.58561707 108.58971405]
[104.60844421 111.48318481]
[100.52983856 113.27655029]
[92.56346893 125.98627472]
[84.59710693 138.69599915]
[76.63073730 151.40571594]
[68.66436768 164.11543274]
[60.69800186 176.82514954]
[52.73163605 189.53488159]
[67.57820129 187.39486694]
[80.46222687 195.07612610]
[85.63982391 209.15422058]
[80.80271912 223.35289001]
[68.10737610 231.34216309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[8 17]
[9 16]
[10 15]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[30 89]
[31 84]
[32 83]
[33 82]
[40 74]
[41 73]
[42 72]
[43 71]
[45 70]
[46 69]
[47 68]
[48 67]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
