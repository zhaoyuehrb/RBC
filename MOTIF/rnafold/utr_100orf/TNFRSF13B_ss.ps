%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:47:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUCCUGAGUAAUGAGUGGCCUGGGCCGGAGCAGGCGAGGUGGCCGGAGCCGUGUGGACCAGGAGGAGCGCUUUCCACAGGGCCUGUGGACGGGGGUGGCUAUGAGAUCCU\
) } def
/len { sequence length } bind def

/coor [
[142.09553528 268.12066650]
[138.01397705 253.68663025]
[133.93243408 239.25260925]
[129.65238953 224.87620544]
[125.17466736 210.56011963]
[120.69694519 196.24404907]
[116.21922302 181.92797852]
[111.74150085 167.61189270]
[101.10992432 161.66227722]
[97.31436157 149.66244507]
[102.93849182 137.95475769]
[98.85694122 123.52072906]
[90.54628754 122.44770050]
[82.87102509 118.43688202]
[76.86685944 111.81247711]
[73.41609192 103.26145172]
[73.12194061 93.76434326]
[76.21297455 84.48320007]
[61.49120331 81.60754395]
[46.46368027 86.55568695]
[35.45580292 76.52194977]
[20.73402977 73.64629364]
[6.01225710 70.77062988]
[-8.70951462 67.89497375]
[-19.91278458 74.46671295]
[-32.18506622 71.67504883]
[-38.99231339 61.57110214]
[-53.62926102 58.29088593]
[-68.26620483 55.01066971]
[-81.47901917 63.68230438]
[-96.93646240 60.38944626]
[-105.46791840 47.08569336]
[-102.01181793 31.66392326]
[-88.61860657 23.27360344]
[-73.23423767 26.89255714]
[-64.98599243 40.37372589]
[-50.34904480 43.65394211]
[-35.71209717 46.93415833]
[-19.34828186 40.76050186]
[-5.83385563 53.17319870]
[8.88791656 56.04885864]
[23.60968971 58.92451859]
[38.33146286 61.80017853]
[52.30598450 56.64634705]
[64.36685944 66.88577271]
[79.08863068 69.76142883]
[92.90695190 63.92584229]
[101.11117554 51.36834335]
[109.31539917 38.81084442]
[111.43585968 29.78005981]
[117.92269135 26.02468491]
[126.46981049 13.69801712]
[135.01693726 1.37134993]
[136.52204895 -14.37810135]
[150.13249207 -20.42831612]
[158.67961121 -32.75498199]
[167.22673035 -45.08164978]
[175.77384949 -57.40831757]
[184.32096863 -69.73498535]
[192.86808777 -82.06165314]
[193.05992126 -86.72154999]
[194.64323425 -90.63093567]
[197.18359375 -93.42874908]
[200.17172241 -94.94391632]
[203.09634399 -95.20291901]
[212.94763184 -106.51451874]
[222.79890442 -117.82611847]
[223.13340759 -133.86567688]
[235.96916199 -143.48977661]
[251.45967102 -139.31561279]
[257.72195435 -124.54524994]
[249.95210266 -110.50925446]
[234.11050415 -107.97483826]
[224.25923157 -96.66323853]
[214.40794373 -85.35163879]
[205.19476318 -73.51453400]
[196.64762878 -61.18786240]
[188.10050964 -48.86119461]
[179.55339050 -36.53453064]
[171.00627136 -24.20786095]
[162.45915222 -11.88119411]
[161.56539917 2.98657131]
[147.34359741 9.91847038]
[138.79647827 22.24513817]
[130.24935913 34.57180405]
[121.87289429 47.01506805]
[113.66867065 59.57256699]
[105.46444702 72.13006592]
[119.13358307 80.68498230]
[125.44091797 94.76200104]
[122.95809174 109.27678680]
[113.29096222 119.43917847]
[117.37251282 133.87319946]
[130.85882568 146.31643677]
[126.05757141 163.13417053]
[130.53529358 177.45025635]
[135.01301575 191.76632690]
[139.49073792 206.08239746]
[143.96846008 220.39848328]
[149.59144592 227.77638245]
[148.36645508 235.17106628]
[152.44799805 249.60508728]
[156.52955627 264.03909302]
[171.51899719 267.13345337]
[183.34611511 276.84829712]
[189.29312134 290.95120239]
[187.99342346 306.20141602]
[179.74569702 319.09457397]
[166.44520569 326.66793823]
[151.14831543 327.18115234]
[137.37011719 320.51632690]
[128.27674866 308.20498657]
[125.95780945 293.07617188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[11 93]
[12 92]
[18 46]
[19 45]
[21 43]
[22 42]
[23 41]
[24 40]
[27 38]
[28 37]
[29 36]
[47 88]
[48 87]
[49 86]
[51 85]
[52 84]
[53 83]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
