%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGCGCGGGAGGCUCAGAUGGCUGGAGGCGGCGGGCACGCACACUGCGGGGCUCCGAGGGGCACAGGUCCAGGCUCCUGCGUGAAGUGAUGCUCCUCUUUGCCUUACUCCUAGCCAUGGAGCUCCCAUUGGUGGCAGCCAGUGCCACCAUGCGCGCUCAGUGGACUUACAGUUUGAGAUGCCAUGACU\
) } def
/len { sequence length } bind def

/coor [
[399.55789185 462.51574707]
[399.31118774 447.51776123]
[399.06448364 432.51980591]
[395.52081299 417.94439697]
[388.85424805 404.50726318]
[382.18765259 391.07009888]
[375.52108765 377.63296509]
[368.85449219 364.19583130]
[359.48837280 352.47937012]
[347.84933472 343.01721191]
[336.21026611 333.55505371]
[324.57122803 324.09289551]
[312.93215942 314.63073730]
[305.74655151 312.84777832]
[301.18118286 304.91595459]
[289.69931030 295.26364136]
[278.21746826 285.61135864]
[266.13217163 286.33953857]
[256.48550415 278.37719727]
[254.80401611 265.57788086]
[243.48246765 255.73802185]
[232.16093445 245.89817810]
[220.83938599 236.05831909]
[209.51783752 226.21847534]
[198.19630432 216.37863159]
[186.79421997 206.63221741]
[175.31236267 196.97990417]
[163.83052063 187.32759094]
[152.34866333 177.67527771]
[135.67906189 179.84439087]
[122.33041382 169.08068848]
[120.85964203 151.65739441]
[109.22058868 142.19523621]
[97.58153534 132.73307800]
[83.27063751 128.23883057]
[68.31170654 129.34806824]
[53.35277557 130.45730591]
[38.39384460 131.56654358]
[23.42642403 142.27952576]
[7.92820597 134.06259155]
[-7.01045704 135.41770935]
[-21.94911957 136.77282715]
[-36.88778305 138.12796021]
[-52.11591339 145.58049011]
[-63.49277496 133.01055908]
[-54.56350327 118.59860229]
[-38.24290466 123.18929291]
[-23.30424118 121.83416748]
[-8.36557770 120.47904968]
[6.57308531 119.12393188]
[14.56645966 110.03047943]
[27.01288033 108.78829193]
[37.28461075 116.60760498]
[52.24354172 115.49837494]
[67.20246887 114.38913727]
[82.16139984 113.27989960]
[79.88164520 100.58141327]
[84.95280457 90.09514618]
[76.99472046 77.38024139]
[69.03663635 64.66532898]
[61.07854843 51.95042419]
[53.12046051 39.23551941]
[45.16237640 26.52061081]
[37.20428848 13.80570412]
[29.24620438 1.09079647]
[21.18382072 -11.55823421]
[13.01768398 -24.14053154]
[-0.77241474 -23.84100151]
[-12.81214237 -30.34680939]
[-20.00378799 -41.86237717]
[-20.55740356 -55.31943893]
[-14.43517876 -67.19428253]
[-22.39326477 -79.90918732]
[-36.27339935 -87.50210571]
[-36.46710968 -102.39545441]
[-44.42519760 -115.11035919]
[-59.15619659 -122.31658936]
[-60.01082611 -138.69345093]
[-46.10991669 -147.39384460]
[-31.75353241 -139.46754456]
[-31.71028900 -123.06845093]
[-23.75220299 -110.35353851]
[-10.44128418 -103.67007446]
[-9.67835712 -87.86727142]
[-1.72027135 -75.15236664]
[14.67658138 -74.54830933]
[27.61587524 -64.19097900]
[31.88035583 -48.00310898]
[25.59998131 -32.30666733]
[33.76611710 -19.72437096]
[40.05550766 -15.81856441]
[41.96111298 -6.86728954]
[49.91919708 5.84761763]
[57.87728500 18.56252480]
[65.83537292 31.27743149]
[73.79345703 43.99234009]
[81.75154114 56.70724487]
[89.70962524 69.42215729]
[97.66771698 82.13706207]
[110.88514709 84.34102631]
[119.61470032 95.48890686]
[118.47446442 110.36376190]
[107.04369354 121.09402466]
[118.68274689 130.55618286]
[130.32179260 140.01834106]
[143.48191833 137.10276794]
[155.73742676 142.22929382]
[162.69490051 153.31698608]
[162.00097656 166.19343567]
[173.48281860 175.84574890]
[184.96467590 185.49804688]
[196.44653320 195.15036011]
[205.04490662 198.28477478]
[208.03614807 205.05708313]
[219.35769653 214.89692688]
[230.67924500 224.73678589]
[242.00077820 234.57662964]
[253.32232666 244.41648865]
[264.64385986 254.25633240]
[282.79013062 257.33932495]
[287.86978149 274.12948608]
[299.35162354 283.78179932]
[310.83349609 293.43411255]
[322.39431763 302.99166870]
[334.03338623 312.45382690]
[345.67242432 321.91598511]
[357.31149292 331.37814331]
[368.95053101 340.84030151]
[372.62347412 330.36083984]
[381.93368530 321.45297241]
[396.03973389 316.50772095]
[410.99865723 315.39846802]
[425.95761108 314.28924561]
[440.91653442 313.17999268]
[455.87545776 312.07077026]
[470.83438110 310.96154785]
[485.79330444 309.85229492]
[500.75225830 308.74307251]
[512.27343750 297.57873535]
[528.16638184 299.76837158]
[536.23931885 313.63220215]
[530.29949951 328.53515625]
[514.90332031 333.04492188]
[501.86148071 323.70199585]
[486.90255737 324.81121826]
[471.94363403 325.92047119]
[456.98468018 327.02969360]
[442.02575684 328.13894653]
[427.06683350 329.24816895]
[412.10791016 330.35739136]
[397.14898682 331.46664429]
[393.43463135 337.98229980]
[401.00601196 350.93121338]
[386.00598145 351.01361084]
[382.29165649 357.52926636]
[388.95822144 370.96640015]
[395.62481689 384.40353394]
[402.29138184 397.84066772]
[408.95797729 411.27780151]
[418.46133423 407.92950439]
[430.38919067 410.47573853]
[441.16024780 420.05673218]
[449.11831665 432.77163696]
[457.07641602 445.48654175]
[465.03448486 458.20147705]
[483.24594116 466.81875610]
[483.13729858 486.14474487]
[491.50927734 498.59103394]
[499.88125610 511.03732300]
[508.25323486 523.48358154]
[523.65808105 527.96362305]
[529.62670898 542.85504150]
[521.58056641 556.73449707]
[505.69189453 558.95477295]
[494.14916992 547.81274414]
[495.80694580 531.85559082]
[487.43496704 519.40930176]
[479.06301880 506.96301270]
[470.69104004 494.51672363]
[460.50671387 493.45910645]
[452.42193604 486.82406616]
[449.26763916 476.62191772]
[452.31958008 466.15954590]
[444.36151123 453.44464111]
[436.40341187 440.72973633]
[428.44531250 428.01483154]
[414.06243896 432.27307129]
[414.30914307 447.27105713]
[414.55587769 462.26904297]
[417.06314087 481.48785400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 189]
[2 188]
[3 187]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[15 123]
[16 122]
[17 121]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[25 114]
[26 112]
[27 111]
[28 110]
[29 109]
[32 105]
[33 104]
[34 103]
[35 56]
[36 55]
[37 54]
[38 53]
[40 50]
[41 49]
[42 48]
[43 47]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[64 93]
[65 92]
[66 90]
[67 89]
[72 85]
[73 84]
[75 82]
[76 81]
[131 151]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
[138 144]
[162 186]
[163 185]
[164 184]
[165 183]
[167 179]
[168 178]
[169 177]
[170 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
