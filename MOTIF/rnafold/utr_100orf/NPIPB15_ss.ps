%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCCUGAAAGGACCAGGACAUGCGGCUGCGCUUUUGGCUCCUCAUUUGGCUCCUGCUGGGAUUUAUCAGCCAUCAGCCCACCCCUGUCAUCAAUAGUCUGGCUGUCUAUCGUCAUCGUG\
) } def
/len { sequence length } bind def

/coor [
[92.68632507 108.74297333]
[77.78529358 110.46322632]
[64.96351624 119.73212433]
[51.43287659 113.50548553]
[36.53184509 115.22573853]
[21.63081360 116.94598389]
[16.56508255 131.30215454]
[5.81237125 141.99169922]
[-8.45682240 146.93237305]
[-23.39476204 145.19485474]
[-36.04477692 137.17697144]
[-43.92647934 124.51425934]
[-58.82751083 126.23450470]
[-73.72854614 127.95475769]
[-88.62957764 129.67501831]
[-103.50742340 131.58541870]
[-118.35966492 133.68565369]
[-133.21189880 135.78590393]
[-148.06413269 137.88613892]
[-162.91638184 139.98638916]
[-177.76861572 142.08662415]
[-182.05551147 145.46038818]
[-186.74238586 146.64924622]
[-190.89926147 145.88191223]
[-193.83349609 143.73364258]
[-208.80291748 144.69079590]
[-223.77235413 145.64793396]
[-237.11494446 155.18246460]
[-251.92935181 148.14930725]
[-252.97578430 131.78358459]
[-239.17776489 122.92094421]
[-224.72950745 130.67851257]
[-209.76007080 129.72135925]
[-194.79063416 128.76420593]
[-179.86885071 127.23438263]
[-165.01661682 125.13414764]
[-150.16438293 123.03390503]
[-135.31214905 120.93366241]
[-120.45989990 118.83341980]
[-105.60766602 116.73317719]
[-99.35266113 112.63366699]
[-90.34982300 114.77397919]
[-75.44879150 113.05372620]
[-60.54776382 111.33347321]
[-45.64673233 109.61322784]
[-40.85759735 95.48773193]
[-30.36723709 84.79840088]
[-16.21813583 79.70291901]
[-1.19853568 81.26235199]
[11.70697784 89.22065735]
[19.91056252 102.04495239]
[34.81159592 100.32470703]
[49.71262360 98.60445404]
[61.46858215 89.45859528]
[76.06504059 95.56219482]
[90.96607208 93.84194183]
[83.24947357 81.64918518]
[81.17369080 66.12010956]
[84.21737671 51.43215561]
[87.26106262 36.74420166]
[90.30474854 22.05624771]
[93.34843445 7.36829472]
[84.46479797 -5.70291662]
[87.50788879 -21.21146774]
[100.67228699 -29.95640945]
[116.14779663 -26.74952507]
[124.75307465 -13.49339962]
[121.38275146 1.94734120]
[108.03638458 10.41197968]
[104.99269867 25.09993362]
[101.94901276 39.78788757]
[98.90532684 54.47584152]
[95.86164093 69.16379547]
[100.63346100 74.94996643]
[115.42716980 72.47079468]
[110.17710114 86.52230072]
[114.94892120 92.30847168]
[129.94769287 92.11691284]
[144.94647217 91.92536163]
[159.94525146 91.73380280]
[174.94403076 91.54225159]
[180.82775879 80.36272430]
[190.87681580 72.82702637]
[203.11460876 70.33956909]
[215.16712952 73.31940460]
[224.72343445 81.13105011]
[229.97871399 92.21884155]
[244.96771240 92.79338074]
[259.95669556 93.36791992]
[274.94570923 93.94246674]
[287.64569092 84.13994598]
[303.19302368 88.09723663]
[309.66110229 102.77864075]
[302.08816528 116.92184448]
[286.28350830 119.67739105]
[274.37115479 108.93145752]
[259.38217163 108.35691833]
[244.39317322 107.78237152]
[229.40417480 107.20783234]
[219.24119568 121.53690338]
[202.39060974 127.02888489]
[185.44071960 121.34120178]
[175.13557434 106.54102325]
[160.13681030 106.73258209]
[145.13803101 106.92413330]
[130.13925171 107.11569214]
[115.14047241 107.30724335]
[129.16810608 112.62001038]
[140.62623596 122.30047607]
[148.20712280 135.24382019]
[151.04559326 149.97280884]
[148.81767273 164.80642700]
[141.77763367 178.05172729]
[130.72895813 188.19700623]
[116.93263245 194.08441162]
[101.96322632 195.04197693]
[87.52920532 190.96044922]
[75.27790833 182.30564880]
[66.60758209 170.06532288]
[62.50776291 155.63647461]
[63.44637299 140.66587830]
[69.31628418 126.86210632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[4 53]
[5 52]
[6 51]
[12 45]
[13 44]
[14 43]
[15 42]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[25 34]
[26 33]
[27 32]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[77 107]
[78 106]
[79 105]
[80 104]
[81 103]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
