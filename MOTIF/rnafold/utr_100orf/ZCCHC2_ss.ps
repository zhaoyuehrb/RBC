%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:11:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGAGGAUGAAGCUGCCGCUGAAGCCAACGCACCCCGCGGAGCCGCCGCCCGAGGCGGAGGAGCCCGAGGCGGACGCGCGGCCGGGCGCGAAGGCGC\
) } def
/len { sequence length } bind def

/coor [
[-22.16710281 291.50045776]
[-40.42369080 295.93664551]
[-58.78615570 292.19110107]
[-67.14394379 304.64691162]
[-75.50172424 317.10272217]
[-70.03308105 331.62420654]
[-74.17682648 346.57778931]
[-86.33959961 356.21347046]
[-101.84457397 356.82617188]
[-114.72976685 348.18026733]
[-120.04055786 333.60031128]
[-115.73484039 318.69259644]
[-103.46825409 309.18942261]
[-87.95754242 308.74496460]
[-79.59976196 296.28912354]
[-71.24197388 283.83331299]
[-78.41753387 274.87329102]
[-82.97000122 264.31826782]
[-84.56654358 252.91879272]
[-83.08483124 241.48788452]
[-78.62241364 230.84306335]
[-71.49027252 221.74784851]
[-62.19123077 214.85700989]
[-51.38447571 210.66943359]
[-39.83882904 209.49200439]
[-28.37806892 211.41716003]
[-17.82214355 216.31564331]
[-7.63585043 205.30476379]
[2.55044246 194.29388428]
[1.71665227 179.46687317]
[11.89014816 168.15516663]
[27.44773865 167.38114929]
[37.63403320 156.37026978]
[47.82032394 145.35939026]
[50.78360748 130.76252747]
[65.83474731 125.88669586]
[76.02104187 114.87581635]
[86.20733643 103.86493683]
[89.48538971 90.27280426]
[102.78179169 85.94876862]
[112.96807861 74.93788910]
[110.09769440 59.80293274]
[116.61347198 46.04073715]
[129.82725525 38.83933640]
[144.57125854 40.77643204]
[154.75753784 29.76555443]
[154.32066345 14.19484901]
[164.80786133 3.17336035]
[179.65484619 2.85281134]
[189.84114075 -8.15806675]
[200.02743530 -19.16894531]
[210.21371460 -30.17982292]
[220.40000916 -41.19070053]
[230.41383362 -52.35866165]
[240.25276184 -63.68100739]
[243.60226440 -72.37430573]
[250.57804871 -75.19633484]
[260.76434326 -86.20720673]
[270.95065308 -97.21808624]
[270.08593750 -112.99870300]
[280.69515991 -124.71279907]
[296.48403931 -125.41060638]
[308.08529663 -114.67813110]
[308.61614990 -98.88275909]
[297.76162720 -87.39560699]
[281.96151733 -87.03179169]
[271.77523804 -76.02091980]
[261.58892822 -65.01004028]
[251.57510376 -53.84207535]
[241.73617554 -42.51973343]
[239.68879700 -35.27861786]
[231.41088867 -31.00440788]
[221.22459412 -19.99352837]
[211.03829956 -8.98265171]
[200.85200500 2.02822661]
[190.66572571 13.03910446]
[191.49951172 27.86611938]
[181.32601929 39.17782211]
[165.76841736 39.95184708]
[155.58212280 50.96272659]
[158.65873718 65.51169586]
[152.50559998 79.24496460]
[139.29116821 86.81015778]
[123.97895813 85.12418365]
[113.79266357 96.13506317]
[110.51461029 109.72719574]
[97.21820831 114.05123138]
[87.03192139 125.06211090]
[76.84562683 136.07298279]
[73.15374756 151.45741272]
[58.83120346 155.54568481]
[48.64490891 166.55656433]
[38.45861816 177.56744385]
[38.89550400 193.13813782]
[28.40830040 204.15963745]
[13.56132030 204.48017883]
[3.37502742 215.49105835]
[-6.81126595 226.50193787]
[1.02945101 243.78327942]
[0.77097291 262.71115112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[27 98]
[28 97]
[29 96]
[32 93]
[33 92]
[34 91]
[36 89]
[37 88]
[38 87]
[40 85]
[41 84]
[45 80]
[46 79]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 70]
[55 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
