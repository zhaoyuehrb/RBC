%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACAGCCCACUUCAAGCAUCAAUGGGGAGAAGAGGAAGAGCCCCUGUGAAUCCAACAAUGAAAAUGAUGAGAUGCAGGAGACACCAAACAGGGACU\
) } def
/len { sequence length } bind def

/coor [
[107.43784332 116.43043518]
[99.94599915 116.78023529]
[93.19857788 130.17695618]
[86.45114899 143.57368469]
[91.64240265 158.50105286]
[84.68281555 172.69047546]
[69.70138550 177.72361755]
[55.58634186 170.61439514]
[50.71187592 155.58059692]
[57.96992874 141.54150391]
[73.05442810 136.82626343]
[79.80184937 123.42953491]
[86.54927826 110.03281403]
[89.33249664 95.29328156]
[87.93480682 80.35854340]
[86.53711700 65.42380524]
[85.13942719 50.48906326]
[75.65729523 41.57580566]
[74.89038086 28.98865509]
[82.70484161 19.61037254]
[81.77229309 4.63938808]
[80.83975220 -10.33159637]
[79.90720367 -25.30257988]
[78.97466278 -40.27356339]
[57.93878937 -48.36903763]
[44.25416183 -67.04043579]
[42.79164124 -90.75417328]
[54.67131424 -112.03063202]
[44.14751053 -122.71939087]
[33.62370682 -133.40815735]
[23.09990501 -144.09690857]
[8.85534954 -138.71058655]
[-6.34814262 -139.59019470]
[-19.87647438 -146.58334351]
[-29.38578033 -158.47842407]
[-33.22851562 -173.21455383]
[-30.73890305 -188.23858643]
[-22.34828186 -200.94754028]
[-9.51038074 -209.13949585]
[5.55055809 -211.39515686]
[20.22513580 -207.32371521]
[31.97089386 -197.63056946]
[38.75280762 -183.99511719]
[39.39587021 -168.77978516]
[33.78866577 -154.62071228]
[44.31246567 -143.93194580]
[54.83626938 -133.24319458]
[65.36006927 -122.55443573]
[79.89805603 -126.24861908]
[84.04258728 -140.66468811]
[88.18711090 -155.08074951]
[79.30216217 -167.94898987]
[80.81890869 -183.51284790]
[92.02118683 -194.42352295]
[107.61962128 -195.52935791]
[120.24910736 -186.30818176]
[123.94639587 -171.11396790]
[116.96572876 -157.12095642]
[102.60317230 -150.93621826]
[98.45864868 -136.52015686]
[94.31412506 -122.10409546]
[102.03200531 -119.12558746]
[109.00003052 -114.77618408]
[114.97987366 -109.23068237]
[119.77196503 -102.70425415]
[123.22213745 -95.44416809]
[125.22651672 -87.72043610]
[125.73454285 -79.81579590]
[124.75001526 -72.01535034]
[122.33016968 -64.59629822]
[118.58285522 -57.81808853]
[113.66188812 -51.91333389]
[107.76088715 -47.07986450]
[101.10565948 -43.47411346]
[93.94564819 -41.20610809]
[94.87818909 -26.23512459]
[95.81073761 -11.26414108]
[96.74327850 3.70684338]
[97.67582703 18.67782784]
[108.17316437 32.64590836]
[100.07416534 49.09137344]
[101.47185516 64.02611542]
[102.86954498 78.96085358]
[104.26723480 93.89559174]
[112.77958679 89.71886444]
[123.41055298 90.26075745]
[134.09825134 96.19940186]
[142.62307739 107.41465759]
[150.58944702 120.12438202]
[165.84184265 125.09869385]
[171.32730103 140.17480469]
[162.83784485 153.78762817]
[146.88584900 155.49453735]
[135.70832825 143.98617554]
[137.87971497 128.09074402]
[129.91336060 115.38102722]
[122.42151642 115.73082733]
[123.31929779 130.70393372]
[123.82044983 145.69555664]
[108.83676147 146.39486694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[14 84]
[15 83]
[16 82]
[17 81]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[28 48]
[29 47]
[30 46]
[31 45]
[49 61]
[50 60]
[51 59]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
