%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCGCGCCUUUAAUACUCGCCCGCUGCGGCGGUCGCCGAGUCCGCGGACAUGUCCUUCCCGCAGCUGGGCUACCCGCAGUACCUGAGCGCCGCGGGGCCGGGCGCCUACGGCGGCGAGCGCCCGGGGGUGCUGGCCGCGGCCGCUGCGG\
) } def
/len { sequence length } bind def

/coor [
[199.82185364 172.18627930]
[196.06904602 169.28419495]
[193.50010681 164.59849548]
[180.66645813 156.83335876]
[167.83279419 149.06822205]
[154.99914551 141.30308533]
[142.16549683 133.53794861]
[129.33183289 125.77281952]
[116.41914368 118.13984680]
[103.42875671 110.63984680]
[90.36206055 103.27361298]
[77.22043610 96.04190826]
[64.07880402 88.81020355]
[50.08206177 95.24429321]
[35.15503693 92.23807526]
[24.98076057 81.14987946]
[23.30663681 66.37371063]
[10.16500568 59.14200592]
[-2.97662568 51.91030502]
[-16.11825752 44.67860031]
[-39.79169464 47.61713028]
[-51.69678497 27.77035522]
[-65.62750244 22.20841789]
[-79.55821991 16.64648056]
[-93.48893738 11.08454323]
[-107.47602081 5.66591787]
[-121.51799774 0.39117646]
[-135.55996704 -4.88356495]
[-149.60194397 -10.15830708]
[-163.64392090 -15.43304825]
[-177.68589783 -20.70779037]
[-191.72787476 -25.98253059]
[-211.39324951 -21.73980331]
[-223.10903931 -37.07727051]
[-237.35572815 -41.77106857]
[-252.88400269 -38.74069214]
[-262.55093384 -50.07203674]
[-276.79763794 -54.76583862]
[-291.18212891 -59.01868439]
[-305.69073486 -62.82654572]
[-320.19937134 -66.63440704]
[-333.71740723 -58.44669724]
[-349.04553223 -62.29689026]
[-357.08984375 -75.90072632]
[-353.07781982 -91.18729401]
[-339.38970947 -99.08734131]
[-324.14639282 -94.91390991]
[-316.39151001 -81.14302826]
[-301.88287354 -77.33516693]
[-287.37426758 -73.52731323]
[-284.11981201 -75.02922058]
[-279.96429443 -74.99182892]
[-275.65689087 -73.00390625]
[-272.10385132 -69.01253510]
[-257.85714722 -64.31873322]
[-243.34788513 -67.68484497]
[-232.66192627 -56.01776123]
[-218.41523743 -51.32395935]
[-209.67314148 -56.75839996]
[-199.16395569 -56.44405365]
[-190.40242004 -50.24246597]
[-186.45314026 -40.02450943]
[-172.41116333 -34.74976730]
[-158.36918640 -29.47502518]
[-144.32720947 -24.20028305]
[-130.28523254 -18.92554092]
[-116.24325562 -13.65079975]
[-102.20127869 -8.37605858]
[-94.78795624 -8.97177792]
[-87.92699432 -2.84617305]
[-73.99628448 2.71576405]
[-60.06556702 8.27770138]
[-46.13484955 13.83963871]
[-40.98620224 9.60446739]
[-34.71999741 7.18086958]
[-27.95797348 6.84418726]
[-21.38208199 8.66094017]
[-15.66573238 12.47882938]
[-11.40483570 17.93896294]
[-9.05574894 24.50941467]
[-8.88655472 31.53697014]
[4.25507689 38.76867294]
[17.39670753 46.00037384]
[30.53833961 53.23207855]
[43.91665268 46.73910141]
[58.72819519 49.40034103]
[69.25569153 60.40148544]
[71.31050110 75.66857147]
[84.45213318 82.90027618]
[97.59376526 90.13198090]
[105.66561890 90.96090698]
[110.92875671 97.64946747]
[123.91914368 105.14946747]
[132.97685242 106.74749756]
[137.09696960 112.93916321]
[149.93063354 120.70429993]
[162.76428223 128.46943665]
[175.59793091 136.23457336]
[188.43159485 143.99971008]
[201.26524353 151.76484680]
[214.33193970 159.13108826]
[227.61927795 166.09143066]
[240.90661621 173.05178833]
[254.26472473 179.87536621]
[267.69216919 186.56144714]
[281.11962891 193.24751282]
[294.54705811 199.93359375]
[308.04244995 206.48146057]
[321.60433960 212.89044189]
[326.05520630 212.35224915]
[330.02886963 213.20864868]
[333.13723755 215.12825012]
[335.14407349 217.68594360]
[335.98272705 220.42231750]
[348.97308350 227.92231750]
[361.96347046 235.42231750]
[374.95385742 242.92231750]
[387.94424438 250.42231750]
[403.76419067 250.62170410]
[410.91769409 263.68603516]
[423.90805054 271.18603516]
[436.89843750 278.68603516]
[449.88882446 286.18603516]
[462.87921143 293.68603516]
[475.86959839 301.18603516]
[492.25979614 300.64495850]
[500.69259644 314.70980835]
[492.49301147 328.91189575]
[476.09609985 328.64129639]
[468.36959839 314.17642212]
[455.37921143 306.67642212]
[442.38882446 299.17642212]
[429.39843750 291.67642212]
[416.40805054 284.17642212]
[403.41769409 276.67642212]
[388.52688599 277.01348877]
[380.44424438 263.41268921]
[367.45385742 255.91268921]
[354.46347046 248.41268921]
[341.47308350 240.91268921]
[328.48272705 233.41268921]
[315.19537354 226.45233154]
[301.63348389 220.04336548]
[294.19625854 220.02888489]
[287.86099243 213.36103821]
[274.43353271 206.67497253]
[261.00610352 199.98889160]
[247.57864380 193.30282593]
[240.14331055 193.13563538]
[233.94625854 186.33914185]
[220.65892029 179.37878418]
[207.37158203 172.41842651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[9 93]
[10 92]
[11 90]
[12 89]
[13 88]
[17 84]
[18 83]
[19 82]
[20 81]
[22 73]
[23 72]
[24 71]
[25 70]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[34 58]
[35 57]
[37 55]
[38 54]
[39 50]
[40 49]
[41 48]
[101 152]
[102 151]
[103 150]
[104 148]
[105 147]
[106 146]
[107 145]
[108 143]
[109 142]
[114 141]
[115 140]
[116 139]
[117 138]
[118 137]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
