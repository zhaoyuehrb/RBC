%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGGGCAGCCCGAUUUUCUGCUGAGUAGGCGCUGUGAUUUCAGAAUGUCUGGGCGAGGUAAAGGUGGCAAGGGGCUGGGUAAGGGAGGCGCCAAGCGCCACCGGAAGGUGCUGCGGGACAAUAUCCAAGGCAUUACAAAGCCGG\
) } def
/len { sequence length } bind def

/coor [
[115.97717285 151.24591064]
[102.45859528 153.62246704]
[88.77926636 152.49295044]
[75.83360291 147.93119812]
[64.46804047 140.23548889]
[55.42572403 129.90899658]
[49.29787445 117.62692261]
[46.48515701 104.19232178]
[47.17148209 90.48360443]
[32.92544174 85.78782654]
[18.67940140 81.09204865]
[4.43336010 76.39627075]
[-9.81268024 71.70050049]
[-24.05872154 67.00472260]
[-32.88966751 76.53211975]
[-44.63574600 81.97000885]
[-57.52023315 82.53511047]
[-69.60906982 78.17826080]
[-79.10116577 69.58644104]
[-84.59674072 58.07472992]
[-85.30368042 45.38508606]
[-99.33759308 40.08892059]
[-113.37149811 34.79275894]
[-127.40541077 29.49659157]
[-141.43931580 24.20042610]
[-151.34854126 35.64737701]
[-164.55145264 42.99959183]
[-179.44515991 45.38657379]
[-194.22903442 42.53927994]
[-207.12240601 34.82031631]
[-216.57905579 23.17787170]
[-221.47257996 9.02928638]
[-221.23062134 -5.91148853]
[-235.26452637 -11.20765400]
[-249.29844666 -16.50381851]
[-263.33236694 -21.79998398]
[-277.59506226 -15.53796291]
[-291.75198364 -21.10894585]
[-297.63397217 -34.74485016]
[-311.66787720 -40.04101562]
[-325.70181274 -45.33718109]
[-338.59298706 -36.70024490]
[-354.09753418 -37.32371521]
[-366.25363159 -46.96784973]
[-370.38696289 -61.92428970]
[-364.90823364 -76.44197083]
[-351.92410278 -84.93855286]
[-336.42724609 -84.14692688]
[-324.37649536 -74.37149048]
[-320.40563965 -59.37108994]
[-306.37173462 -54.07492447]
[-292.33779907 -48.77875900]
[-278.91348267 -55.12877655]
[-264.60565186 -49.95763016]
[-258.03619385 -35.83389282]
[-244.00227356 -30.53772926]
[-229.96836853 -25.24156380]
[-215.93446350 -19.94539833]
[-206.24510193 -31.32088089]
[-193.22404480 -38.70880127]
[-178.43333435 -41.20069885]
[-163.65492249 -38.47678375]
[-150.67593384 -30.84683609]
[-141.07266235 -19.21509933]
[-136.01902771 -4.97316456]
[-136.14315796 10.16651630]
[-122.10924530 15.46268177]
[-108.07533264 20.75884628]
[-94.04142761 26.05501175]
[-80.00751495 31.35117722]
[-67.15359497 19.98237610]
[-50.23340988 16.63162613]
[-33.84936523 22.30142975]
[-22.50406265 35.52816772]
[-19.36294365 52.75867844]
[-5.11690331 57.45445633]
[9.12913704 62.15023422]
[23.37517738 66.84600830]
[37.62121964 71.54178619]
[51.86725998 76.23756409]
[57.24072647 67.54914093]
[64.16290283 60.03606033]
[72.38307190 53.97045135]
[81.60351562 49.57199860]
[91.49026489 47.00001526]
[101.68522644 46.34765625]
[111.81915283 47.63854980]
[121.52500153 50.82593918]
[130.45121765 55.79438019]
[138.27452087 62.36391830]
[150.33448792 53.44441986]
[162.39443970 44.52492142]
[174.45439148 35.60542297]
[186.51435852 26.68592644]
[195.65361023 12.40621281]
[211.90527344 17.23529243]
[211.76382446 34.18864822]
[195.43385315 38.74588394]
[183.37390137 47.66538239]
[171.31393433 56.58487701]
[159.25398254 65.50437927]
[147.19401550 74.42387390]
[153.67578125 99.43029022]
[147.72625732 124.56864929]
[159.97280884 133.23016357]
[172.21937561 141.89167786]
[184.46592712 150.55319214]
[200.37327576 144.90217590]
[216.36334229 149.77316284]
[226.22103882 163.06680298]
[226.23773193 179.45080566]
[238.66537476 187.85041809]
[251.09301758 196.25004578]
[266.85928345 197.56736755]
[273.07125854 211.10475159]
[285.49890137 219.50436401]
[297.92654419 227.90399170]
[318.03442383 228.34957886]
[325.87185669 245.98191833]
[338.64477539 253.84652710]
[351.41772461 261.71112061]
[367.29528809 259.41287231]
[378.89257812 270.49810791]
[377.31311035 286.46322632]
[363.76852417 295.06112671]
[348.64907837 289.69625854]
[343.55310059 274.48406982]
[330.78018188 266.61944580]
[318.00723267 258.75485229]
[308.23532104 262.01940918]
[298.07684326 259.27282715]
[290.99029541 251.19767761]
[289.52694702 240.33163452]
[277.09927368 231.93200684]
[264.67163086 223.53239441]
[249.79428101 222.81587219]
[242.69340515 208.67768860]
[230.26574707 200.27806091]
[217.83810425 191.87844849]
[205.72703552 197.58683777]
[192.27029419 196.53955078]
[181.00863647 188.90438843]
[174.95849609 176.59667969]
[175.80442810 162.79974365]
[163.55786133 154.13822937]
[151.31130981 145.47673035]
[139.06474304 136.81521606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[33 58]
[34 57]
[35 56]
[36 55]
[39 52]
[40 51]
[41 50]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[104 147]
[105 146]
[106 145]
[107 144]
[111 139]
[112 138]
[113 137]
[115 135]
[116 134]
[117 133]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
